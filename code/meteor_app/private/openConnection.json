[{"dataset": "openConnection", "exampleID": 9701, "initialization": ["URL url = new URL(*)", "URL url = new URL(*)"], "initializationStart": [231, 301], "initializationEnd": [270, 346], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 379, "focalAPIEnd": 403, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [449], "useEnd": [470], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GoogleCloudPlatform/appengine-tck/tree/master/tests/appengine-tck-users/src/test/java/com/google/appengine/tck/users/UserServiceTest.java", "rawCode": "  private ServletAnswer getUnAuthServletAnswer(URL url, String method) throws IOException {\n    URL pingUrl;\n    String servletMethod = \"user-service-helper?method=\" + method;\n    if (url.getPath().endsWith(\"/\")) {\n      pingUrl = new URL(url.toString() + servletMethod);\n    } else {\n      pingUrl = new URL(url.toString() + \"/\" + servletMethod);\n    }\n    URLConnection conn = pingUrl.openConnection();\n    String answer = Utils.readFullyAndClose(conn.getInputStream());\n    return new ServletAnswer(answer);\n  }\n"}, {"dataset": "openConnection", "exampleID": 9702, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": [], "tryExpressionStart": 425, "tryExpressionEnd": 429, "tryBlockStart": 425, "tryBlockEnd": 2238, "catchExpressionStart": 1248, "catchExpressionEnd": 1270, "catchBlockStart": 1248, "catchBlockEnd": 2097, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 510, "focalAPIEnd": 530, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 2166, "followUpCheckExpressionEnd": 2189, "followUpCheckBlockStart": 2166, "followUpCheckBlockEnd": 2232, "use": ["url.openConnection(Proxy)", "connection.setRequestProperty(String,String)", "connection.getInputStream()", "connection.disconnect()"], "useStart": [567, 867, 930, 2200], "useEnd": [592, 916, 957, 2223], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 2098, "finallyExpressionEnd": 2106, "finallyBlockStart": 2098, "finallyBlockEnd": 2238, "cleanUpCallStart": [2140], "cleanUpCallEnd": [2150], "url": "https://github.com/iansealy/picard-detct/tree/master/src/java/net/sf/samtools/seekablestream/SeekableHTTPStream.java", "rawCode": "  public int read(byte[] buffer, int offset, int len) throws IOException {\n\n    if (offset < 0 || len < 0 || (offset + len) > buffer.length) {\n      throw new IndexOutOfBoundsException(\n          \"Offset=\" + offset + \",len=\" + len + \",buflen=\" + buffer.length);\n    }\n    if (len == 0) {\n      return 0;\n    }\n\n    HttpURLConnection connection = null;\n    InputStream is = null;\n    String byteRange = \"\";\n    int n = 0;\n    try {\n      connection =\n          proxy == null\n              ? (HttpURLConnection) url.openConnection()\n              : (HttpURLConnection) url.openConnection(proxy);\n\n      long endRange = position + len - 1;\n      // IF we know the total content length, limit the end range to that.\n      if (contentLength > 0) {\n        endRange = Math.min(endRange, contentLength);\n      }\n      byteRange = \"bytes=\" + position + \"-\" + endRange;\n      connection.setRequestProperty(\"Range\", byteRange);\n\n      is = connection.getInputStream();\n\n      while (n < len) {\n        int count = is.read(buffer, offset + n, len - n);\n        if (count < 0) {\n          if (n == 0) {\n            return -1;\n          } else {\n            break;\n          }\n        }\n        n += count;\n      }\n\n      position += n;\n\n      return n;\n\n    } catch (IOException e) {\n      // THis is a bit of a hack, but its not clear how else to handle this. If a byte range is\n      // specified\n      // that goes past the end of the file the response code will be 416. The MAC os translates\n      // this to\n      // an IOException with the 416 code in the message. Windows translates the error to an\n      // EOFException.\n      //\n      // The BAM file iterator uses the return value to detect end of file (specifically looks for n\n      // == 0).\n      if (e.getMessage().contains(\"416\") || (e instanceof EOFException)) {\n        if (n == 0) {\n          return -1;\n        } else {\n          position += n;\n          // As we are at EOF, the contentLength and position are by definition =\n          contentLength = position;\n          return n;\n        }\n      } else {\n        throw e;\n      }\n\n    } finally {\n      if (is != null) {\n        is.close();\n      }\n      if (connection != null) {\n        connection.disconnect();\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9703, "initialization": ["URL url = new URL(String)"], "initializationStart": [112], "initializationEnd": [167], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 282, "focalAPIEnd": 302, "followUpCheck": "connection instanceof javax.net.ssl.HttpsURLConnection", "checkType": "IF", "followUpCheckExpressionStart": 363, "followUpCheckExpressionEnd": 414, "followUpCheckBlockStart": 363, "followUpCheckBlockEnd": 572, "use": ["connection.setHostnameVerifier(*)", "connection.setSSLSocketFactory(*)", "connection.connect()", "connection.getResponseMessage()", "connection.disconnect()"], "useStart": [308, 423, 577, 657, 687], "useEnd": [357, 512, 589, 680, 702], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/sun/security/ssl/sun/net/www/protocol/https/HttpsURLConnection/HttpsCreateSockTest.java", "rawCode": "  void doClient() throws IOException {\n    InetSocketAddress address = httpsServer.getAddress();\n\n    URL url = new URL(\"https://localhost:\" + address.getPort() + \"/\");\n    System.out.println(\"trying to connect to \" + url + \"...\");\n\n    HttpsURLConnection uc = (HttpsURLConnection) url.openConnection();\n    uc.setHostnameVerifier(new AllHostnameVerifier());\n    if (uc instanceof javax.net.ssl.HttpsURLConnection) {\n      ((javax.net.ssl.HttpsURLConnection) uc).setSSLSocketFactory(new SimpleSSLSocketFactory());\n      System.out.println(\"Using TestSocketFactory\");\n    }\n    uc.connect();\n    System.out.println(\"CONNECTED \" + uc);\n    System.out.println(uc.getResponseMessage());\n    uc.disconnect();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9704, "initialization": ["URL url = new URL(URL,String)"], "initializationStart": [1343], "initializationEnd": [1361], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(url==null||!(url.getProtocol().equals(\"http\",)||url.getProtocol().equals(\"https\",))||true)", "guardType": "IF {", "guardExpressionStart": 1018, "guardExpressionEnd": 1169, "guardBlockStart": 1018, "guardBlockEnd": 1865, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 1808, "focalAPIEnd": 1831, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czakian/openmrs_gsoc/tree/master/api/src/main/java/org/openmrs/module/ModuleUtil.java", "rawCode": "  /**\n   * Convenience method to follow http to https redirects. Will follow a total of 5 redirects, then\n   * fail out due to foolishness on the url's part.\n   *\n   * @param c the {@link URLConnection} to open\n   * @return an {@link InputStream} that is not necessarily at the same url, possibly at a 403\n   *     redirect.\n   * @throws IOException\n   * @see {@link #getURLStream(URL)}\n   */\n  protected static InputStream openConnectionCheckRedirects(URLConnection c) throws IOException {\n    boolean redir;\n    int redirects = 0;\n    InputStream in = null;\n    do {\n      if (c instanceof HttpURLConnection) {\n        ((HttpURLConnection) c).setInstanceFollowRedirects(false);\n      }\n      // We want to open the input stream before getting headers\n      // because getHeaderField() et al swallow IOExceptions.\n      in = c.getInputStream();\n      redir = false;\n      if (c instanceof HttpURLConnection) {\n        HttpURLConnection http = (HttpURLConnection) c;\n        int stat = http.getResponseCode();\n        if (stat == 300\n            || stat == 301\n            || stat == 302\n            || stat == 303\n            || stat == 305\n            || stat == 307) {\n          URL base = http.getURL();\n          String loc = http.getHeaderField(\"Location\");\n          URL target = null;\n          if (loc != null) {\n            target = new URL(base, loc);\n          }\n          http.disconnect();\n          // Redirection should be allowed only for HTTP and HTTPS\n          // and should be limited to 5 redirections at most.\n          if (target == null\n              || !(target.getProtocol().equals(\"http\") || target.getProtocol().equals(\"https\"))\n              || redirects >= 5) {\n            throw new SecurityException(\"illegal URL redirect\");\n          }\n          redir = true;\n          c = target.openConnection();\n          redirects++;\n        }\n      }\n    } while (redir);\n    return in;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9705, "initialization": ["URL url = new URL(String)"], "initializationStart": [93], "initializationEnd": [112], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 224, "focalAPIEnd": 244, "followUpCheck": "connection == null", "checkType": "IF", "followUpCheckExpressionStart": 254, "followUpCheckExpressionEnd": 271, "followUpCheckBlockStart": 254, "followUpCheckBlockEnd": 284, "use": ["connection.getContentType()", "CPathFactory.getInstance(url)"], "useStart": [304, 544], "useEnd": [325, 568], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape-impl/tree/master/ding-impl/ding-presentation-impl/src/main/java/org/cytoscape/ding/customgraphics/CustomGraphicsTranslator.java", "rawCode": "  private CyCustomGraphics translateURL(String inputValue) {\n    try {\n      final URL url = new URL(inputValue);\n      String mimeType = mimeTypes.get(inputValue);\n      if (mimeType == null) {\n        URLConnection conn = url.openConnection();\n        if (conn == null) return null;\n        mimeType = conn.getContentType();\n        mimeTypes.put(inputValue, mimeType);\n      }\n      for (CyCustomGraphicsFactory factory : cgMgr.getAllCustomGraphicsFactories()) {\n        if (factory.supportsMime(mimeType)) {\n          CyCustomGraphics cg = factory.getInstance(url);\n          if (cg != null) return cg;\n        }\n      }\n\n    } catch (MalformedURLException e) {\n    } catch (IOException e) {\n    }\n    return null;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9706, "initialization": ["URL url = toUrl(WebHdfsFileSystem,*,Path,*)"], "initializationStart": [730], "initializationEnd": [840], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 899, "focalAPIEnd": 919, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connectAndGetJson(connection,*)", "connection.disconnect()", "url.openConnection()", "connectAndGetJson(connection,*)", "connection.disconnect()", "url.openConnection()", "twoStepWrite(WebHdfsFileSystem,PostOpParam.Op,connection)", "write(WebHdfsFileSystem,PostOpParam.Op,connection,int)", "url.openConnection()", "twoStepWrite(WebHdfsFileSystem,PostOpParam.Op,connection)", "write(WebHdfsFileSystem,PostOpParam.Op,connection,int)"], "useStart": [947, 1021, 1672, 1720, 1794, 2353, 2388, 2474, 3027, 3062, 3148], "useEnd": [1013, 1038, 1692, 1786, 1811, 2373, 2435, 2520, 3047, 3109, 3194], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bryanjimenez/empanada/tree/master/hadoop/hadoop-1.2.1/src/test/org/apache/hadoop/hdfs/security/TestDelegationTokenForProxyUser.java", "rawCode": "  @Test\n  public void testWebHdfsDoAs() throws Exception {\n    WebHdfsTestUtil.LOG.info(\"START: testWebHdfsDoAs()\");\n    ((Log4JLogger) NamenodeWebHdfsMethods.LOG).getLogger().setLevel(Level.ALL);\n    ((Log4JLogger) ExceptionHandler.LOG).getLogger().setLevel(Level.ALL);\n    final UserGroupInformation ugi = UserGroupInformation.createRemoteUser(REAL_USER);\n    WebHdfsTestUtil.LOG.info(\"ugi.getShortUserName()=\" + ugi.getShortUserName());\n    final WebHdfsFileSystem webhdfs = WebHdfsTestUtil.getWebHdfsFileSystemAs(ugi, config);\n\n    final Path root = new Path(\"/\");\n    cluster.getFileSystem().setPermission(root, new FsPermission((short) 0777));\n\n    {\n      // test GETHOMEDIRECTORY with doAs\n      final URL url =\n          WebHdfsTestUtil.toUrl(\n              webhdfs, GetOpParam.Op.GETHOMEDIRECTORY, root, new DoAsParam(PROXY_USER));\n      final HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK);\n      conn.disconnect();\n\n      final Object responsePath = m.get(Path.class.getSimpleName());\n      WebHdfsTestUtil.LOG.info(\"responsePath=\" + responsePath);\n      Assert.assertEquals(\"/user/\" + PROXY_USER, responsePath);\n    }\n\n    {\n      // test GETHOMEDIRECTORY with DOas\n      final URL url =\n          WebHdfsTestUtil.toUrl(\n              webhdfs,\n              GetOpParam.Op.GETHOMEDIRECTORY,\n              root,\n              new DoAsParam(PROXY_USER) {\n                @Override\n                public String getName() {\n                  return \"DOas\";\n                }\n              });\n      final HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK);\n      conn.disconnect();\n\n      final Object responsePath = m.get(Path.class.getSimpleName());\n      WebHdfsTestUtil.LOG.info(\"responsePath=\" + responsePath);\n      Assert.assertEquals(\"/user/\" + PROXY_USER, responsePath);\n    }\n\n    final Path f = new Path(\"/testWebHdfsDoAs/a.txt\");\n    {\n      // test create file with doAs\n      final PutOpParam.Op op = PutOpParam.Op.CREATE;\n      final URL url = WebHdfsTestUtil.toUrl(webhdfs, op, f, new DoAsParam(PROXY_USER));\n      WebHdfsTestUtil.LOG.info(\"url=\" + url);\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      conn = WebHdfsTestUtil.twoStepWrite(webhdfs, op, conn);\n      final FSDataOutputStream out = WebHdfsTestUtil.write(webhdfs, op, conn, 4096);\n      out.write(\"Hello, webhdfs user!\".getBytes());\n      out.close();\n\n      final FileStatus status = webhdfs.getFileStatus(f);\n      WebHdfsTestUtil.LOG.info(\"status.getOwner()=\" + status.getOwner());\n      Assert.assertEquals(PROXY_USER, status.getOwner());\n    }\n\n    {\n      // test append file with doAs\n      final PostOpParam.Op op = PostOpParam.Op.APPEND;\n      final URL url = WebHdfsTestUtil.toUrl(webhdfs, op, f, new DoAsParam(PROXY_USER));\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      conn = WebHdfsTestUtil.twoStepWrite(webhdfs, op, conn);\n      final FSDataOutputStream out = WebHdfsTestUtil.write(webhdfs, op, conn, 4096);\n      out.write(\"\\nHello again!\".getBytes());\n      out.close();\n\n      final FileStatus status = webhdfs.getFileStatus(f);\n      WebHdfsTestUtil.LOG.info(\"status.getOwner()=\" + status.getOwner());\n      WebHdfsTestUtil.LOG.info(\"status.getLen() =\" + status.getLen());\n      Assert.assertEquals(PROXY_USER, status.getOwner());\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9707, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 129, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestProperty(String,String)", "connection.setConnectTimeout(int)", "connection.setDoOutput(boolean)", "connection.getInputStream()"], "useStart": [155, 220, 261, 338], "useEnd": [214, 255, 289, 365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fadmaa/grefine-rdf-extension/tree/master/src/org/deri/grefine/reconcile/util/GRefineJsonUtilitiesImpl.java", "rawCode": "  @Override\n  public JSONObject getJSONObjectFromUrl(URL url) throws JSONException, IOException {\n    URLConnection connection = url.openConnection();\n    connection.setRequestProperty(\"Accept\", \"application/json\");\n    connection.setConnectTimeout(30000);\n    connection.setDoOutput(true);\n    connection.connect();\n    InputStream is = connection.getInputStream();\n    Reader reader = new InputStreamReader(is, \"UTF-8\");\n    String s;\n    try {\n      StringBuffer sb = new StringBuffer();\n\n      char[] chars = new char[8192];\n      int c;\n\n      while ((c = reader.read(chars)) > 0) {\n        sb.insert(sb.length(), chars, 0, c);\n      }\n\n      s = sb.toString();\n    } finally {\n      reader.close();\n    }\n    JSONTokener t = new JSONTokener(s);\n    Object o = t.nextValue();\n    if (o instanceof JSONObject) {\n      return (JSONObject) o;\n    } else {\n      throw new JSONException(s + \" couldn't be parsed as JSON object\");\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9708, "initialization": ["URL url = new URL(String)"], "initializationStart": [268], "initializationEnd": [321], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 354, "focalAPIEnd": 374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoOutput(boolean)", "connection.getOutputStream()", "connection.getInputStream()"], "useStart": [380, 463, 622], "useEnd": [408, 491, 649], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hex705/tiles/tree/master/eclipse/labels/src/labelsANDgraph.java", "rawCode": "  public void sendToServer(String message)\n      throws\n          Exception { // from\n                      // http://docs.oracle.com/javase/tutorial/networking/urls/readingWriting.html\n\n    String stringToReverse = URLEncoder.encode(message, \"UTF-8\");\n\n    URL url = new URL(\"http://www.deadpixel.ca/tiles/template.cgi\");\n    URLConnection connection = url.openConnection();\n    connection.setDoOutput(true);\n\n    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n    out.write(\"message=\" + stringToReverse);\n    out.close();\n\n    BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n    String decodedString;\n    while ((decodedString = in.readLine()) != null) {\n      System.out.println(decodedString);\n    }\n    in.close();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9709, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 803, "focalAPIEnd": 823, "followUpCheck": "connection instanceof HttpURLConnection", "checkType": "IF", "followUpCheckExpressionStart": 829, "followUpCheckExpressionEnd": 867, "followUpCheckBlockStart": 829, "followUpCheckBlockEnd": 1157, "use": ["connection.getInputStream()"], "useStart": [1203], "useEnd": [1224], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/and146/SPLAT-ARI/tree/master/vo/src/main/uk/ac/starlink/vo/TableSetSaxHandler.java", "rawCode": "  /**\n   * Uses an instance of this class to read an XML document from a given URL and extract the\n   * TableMeta objects from it.\n   *\n   * @param url containing a TableSet document or similar\n   */\n  public static TableMeta[] readTableSet(URL url) throws IOException, SAXException {\n    SAXParserFactory spfact = SAXParserFactory.newInstance();\n    SAXParser parser;\n    try {\n      spfact.setNamespaceAware(false);\n      spfact.setValidating(false);\n      parser = spfact.newSAXParser();\n    } catch (ParserConfigurationException e) {\n      throw (IOException) new IOException(\"SAX trouble\").initCause(e);\n    } catch (SAXException e) {\n      throw (IOException) new IOException(\"SAX trouble\").initCause(e);\n    }\n    TableSetSaxHandler tsHandler = new TableSetSaxHandler();\n    URLConnection conn = url.openConnection();\n    if (conn instanceof HttpURLConnection) {\n      HttpURLConnection hconn = (HttpURLConnection) conn;\n      int code = hconn.getResponseCode();\n      if (code != HttpURLConnection.HTTP_OK) {\n        throw new IOException(\n            \"Table resource access failure (\" + code + \" \" + hconn.getResponseMessage() + \")\");\n      }\n    }\n    InputStream in = new BufferedInputStream(conn.getInputStream());\n    try {\n      parser.parse(in, tsHandler);\n      return tsHandler.getTables();\n    } finally {\n      in.close();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9710, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 542, "focalAPIEnd": 567, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["url.openConnection()", "isInstanceOf(*,connection)"], "useStart": [570, 597], "useEnd": [590, 656], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spring-projects/spring-android/tree/master/spring-android-rest-template/src/main/java/org/springframework/http/client/SimpleClientHttpRequestFactory.java", "rawCode": "  /**\n   * Opens and returns a connection to the given URL.\n   *\n   * <p>The default implementation uses the given {@linkplain #setProxy(java.net.Proxy) proxy} - if\n   * any - to open a connection.\n   *\n   * @param url the URL to open a connection to\n   * @param proxy the proxy to use, may be {@code null}\n   * @return the opened connection\n   * @throws IOException in case of I/O errors\n   */\n  protected HttpURLConnection openConnection(URL url, Proxy proxy) throws IOException {\n    URLConnection urlConnection =\n        (proxy != null ? url.openConnection(proxy) : url.openConnection());\n    Assert.isInstanceOf(HttpURLConnection.class, urlConnection);\n    return (HttpURLConnection) urlConnection;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9711, "initialization": ["URL url = new URL(String)"], "initializationStart": [179], "initializationEnd": [191], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 242, "focalAPIEnd": 262, "followUpCheck": "connection.getResponseCode() == 200", "checkType": "IF", "followUpCheckExpressionStart": 841, "followUpCheckExpressionEnd": 875, "followUpCheckBlockStart": 841, "followUpCheckBlockEnd": 1028, "use": ["connection.setDoOutput(boolean)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,*)", "connection.setUseCaches(boolean)", "connection.setDoInput(boolean)", "connection.setDoOutput(boolean)", "connection.getOutputStream()", "connection.getInputStream()", "connection.getErrorStream()", "connection.getHeaderFields()", "connection.get(String)"], "useStart": [268, 296, 331, 413, 507, 566, 596, 623, 695, 911, 990, 1222, 1222], "useEnd": [290, 325, 407, 501, 560, 590, 617, 645, 717, 932, 1011, 1244, 1262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/payutc/pauline/tree/master/src/fr/utc/assos/payutc/api/JsonApiClient.java", "rawCode": "  protected String post(String uri, Arg[] args) throws IOException {\n    String data = arglist2string(args);\n    Log.d(LOG_TAG, \"post \" + uri + \", data : \" + data);\n    URL url = new URL(uri);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setDoOutput(true);\n    conn.setRequestMethod(\"POST\");\n    conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    conn.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(data.getBytes().length));\n    conn.setRequestProperty(\"Cookie\", getCookiesHeader());\n    conn.setUseCaches(false);\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n\n    DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n    wr.writeBytes(data);\n    wr.flush();\n\n    StringBuilder builder = new StringBuilder();\n    InputStreamReader is;\n    if (conn.getResponseCode() == 200) {\n      is = new InputStreamReader(conn.getInputStream(), \"UTF-8\");\n    } else {\n      is = new InputStreamReader(conn.getErrorStream(), \"UTF-8\");\n    }\n    BufferedReader in = new BufferedReader(is);\n    String inputLine;\n    while ((inputLine = in.readLine()) != null) {\n      builder.append(inputLine);\n    }\n    in.close();\n    updateCookies(conn.getHeaderFields().get(\"Set-Cookie\"));\n\n    return builder.toString();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9712, "initialization": ["URL url = getResource(String,*)"], "initializationStart": [512], "initializationEnd": [568], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getRuntimeMXBean()", "getStartTime()"], "tryExpressionStart": 413, "tryExpressionEnd": 417, "tryBlockStart": 413, "tryBlockEnd": 983, "catchExpressionStart": 843, "catchExpressionEnd": 864, "catchBlockStart": 843, "catchBlockEnd": 983, "exceptionHandlingCallStart": [925, 925], "exceptionHandlingCallEnd": [961, 976], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(url==null)", "guardType": "IF {", "guardExpressionStart": 576, "guardExpressionEnd": 600, "guardBlockStart": 576, "guardBlockEnd": 726, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 762, "focalAPIEnd": 790, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getLastModified()"], "useStart": [805], "useEnd": [835], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/taylor-project/taylor-seam-jsf2/tree/master/jboss-seam/src/main/java/org/jboss/seam/web/ConditionalAbstractResource.java", "rawCode": "  /**\n   * Tries to get last modification timestamp of the resource by obtaining a <tt>URLConnection</tt>\n   * to the file in the filesystem or JAR.\n   *\n   * @param resourcePath The relative (to the servlet) resource path.\n   * @return Either the last modified filestamp or if an error occurs, the JVM system startup\n   *     timestamp.\n   */\n  protected Long getLastModifiedTimestamp(String resourcePath) {\n    try {\n      // Try to load it from filesystem or JAR through URLConnection\n      URL resourceURL = Resources.getResource(resourcePath, getServletContext());\n      if (resourceURL == null) {\n        // Fall back to startup time of the JVM\n        return ManagementFactory.getRuntimeMXBean().getStartTime();\n      }\n      URLConnection resourceConn = resourceURL.openConnection();\n      return resourceConn.getLastModified();\n    } catch (Exception ex) {\n      // Fall back to startup time of the JVM\n      return ManagementFactory.getRuntimeMXBean().getStartTime();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9713, "initialization": ["URL url = new URL(String)"], "initializationStart": [128], "initializationEnd": [158], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 250, "focalAPIEnd": 282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/net/URL/OpenConnection.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    System.setSecurityManager(new SecurityManager());\n    URL u = new URL(\"http://foo.bar.baz/\");\n    try {\n      // Will throw NullPointerException if not fixed\n      URLConnection con = u.openConnection(Proxy.NO_PROXY);\n    } catch (UnknownHostException ex) {\n      // That's OK, we were expecting that!\n      return;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9714, "initialization": ["URL url = new URL(*,*)"], "initializationStart": [362], "initializationEnd": [510], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 561, "focalAPIEnd": 581, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getResponseCode()", "connection.getInputStream()"], "useStart": [607, 728], "useEnd": [629, 749], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/fs/http/server/TestHttpFSServer.java", "rawCode": "  @Test\n  @TestDir\n  @TestJetty\n  @TestHdfs\n  public void testGlobFilter() throws Exception {\n    createHttpFSServer(false);\n\n    FileSystem fs = FileSystem.get(TestHdfsHelper.getHdfsConf());\n    fs.mkdirs(new Path(\"/tmp\"));\n    fs.create(new Path(\"/tmp/foo.txt\")).close();\n\n    String user = HadoopUsersConfTestHelper.getHadoopUsers()[0];\n    URL url =\n        new URL(\n            TestJettyHelper.getJettyURL(),\n            MessageFormat.format(\"/webhdfs/v1/tmp?user.name={0}&op=liststatus&filter=f*\", user));\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    Assert.assertEquals(conn.getResponseCode(), HttpURLConnection.HTTP_OK);\n    BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    reader.readLine();\n    reader.close();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9715, "initialization": ["URL url = new URL(String)"], "initializationStart": [101], "initializationEnd": [150], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new AuthenticationException(*)"], "tryExpressionStart": 81, "tryExpressionEnd": 85, "tryBlockStart": 81, "tryBlockEnd": 1118, "catchExpressionStart": 1041, "catchExpressionEnd": 1065, "catchBlockStart": 1041, "catchBlockEnd": 1118, "exceptionHandlingCallStart": [1079], "exceptionHandlingCallEnd": [1111], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 201, "focalAPIEnd": 219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.setDoInput(boolean)", "connection.getOutputStream()", "connection.getInputStream()"], "useStart": [227, 262, 345, 373, 457, 746], "useEnd": [254, 336, 365, 392, 477, 765], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/morrisford/OPenWonderland-Protocol/tree/master/core/src/classes/org/jdesktop/wonderland/common/login/AuthenticationServiceImpl.java", "rawCode": "  public boolean isTokenValid(String token) throws AuthenticationException {\n    try {\n      URL u = new URL(getAuthenticationURL() + \"/isTokenValid\");\n      HttpURLConnection uc = (HttpURLConnection) u.openConnection();\n      uc.setRequestMethod(\"POST\");\n      uc.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n      uc.setDoOutput(true);\n      uc.setDoInput(true);\n\n      PrintWriter pr = new PrintWriter(new OutputStreamWriter(uc.getOutputStream()));\n      pr.append(\"tokenid=\" + URLEncoder.encode(token, \"UTF-8\"));\n      pr.close();\n\n      logger.fine(\n          \"IsTokenValid response: \" + uc.getResponseCode() + \": \" + uc.getResponseMessage());\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n      String line;\n      while ((line = br.readLine()) != null) {\n        logger.finest(\"IsTokenValid response line: \" + line);\n\n        if (line.startsWith(\"boolean=\")) {\n          return Boolean.parseBoolean(line.substring(\"boolean=\".length()));\n        }\n      }\n    } catch (IOException ioe) {\n      throw new AuthenticationException(ioe);\n    }\n\n    throw new AuthenticationException(\"No validation in response\");\n  }\n"}, {"dataset": "openConnection", "exampleID": 9716, "initialization": ["URL url = new URL(*)"], "initializationStart": [270], "initializationEnd": [330], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "log(*,String,*)"], "tryExpressionStart": 248, "tryExpressionEnd": 252, "tryBlockStart": 248, "tryBlockEnd": 1797, "catchExpressionStart": 1709, "catchExpressionEnd": 1730, "catchBlockStart": 1709, "catchBlockEnd": 1797, "exceptionHandlingCallStart": [1770, 1738], "exceptionHandlingCallEnd": [1785, 1790], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 510, "focalAPIEnd": 530, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestMethod(String)", "connection.setDoOutput(boolean)", "connection.setDoInput(boolean)", "connection.setAllowUserInteraction(boolean)", "connection.setUseCaches(boolean)", "connection.connect()", "connection.getResponseCode()", "connection.getInputStream()"], "useStart": [540, 575, 604, 632, 674, 706, 746, 938], "useEnd": [567, 596, 624, 666, 697, 719, 767, 958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/visage-lang/netbeans-plugin/tree/master/installer/servicetag-src/org/netbeans/modules/reglib/NbConnectionSupport.java", "rawCode": "  /**\n   * Query web service if given product by instance_urn is registered. Returns true only when we\n   * have 'REGISTERED' response from server. Otherwise return false.\n   */\n  public static boolean isRegistered2(String host, String uuid) {\n    try {\n      URL url = new URL(host + \"/ProductRegistrationService/status/\" + uuid);\n      LOG.log(Level.FINE, \"Query URL: \" + url);\n      // HttpURLConnection con = (HttpURLConnection) (url.openConnection());\n      HttpsURLConnection con = (HttpsURLConnection) (url.openConnection());\n\n      con.setRequestMethod(\"GET\");\n      con.setDoOutput(true);\n      con.setDoInput(true);\n      con.setAllowUserInteraction(false);\n      con.setUseCaches(false);\n\n      con.connect();\n      int responseCode = con.getResponseCode();\n\n      LOG.log(Level.FINE, \"Response code = \" + responseCode);\n      if (responseCode == 200) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        StringBuffer sb = new StringBuffer();\n\n        while (true) {\n          String line = reader.readLine();\n          if (line == null) {\n            break;\n          }\n          sb.append(line);\n        }\n\n        reader.close();\n        String response = sb.toString();\n\n        LOG.log(Level.FINE, \"Response: \" + response);\n\n        // the response should be equal to 'REGISTERED' or 'NOT REGISTERED'\n        if (response.equals(\"REGISTERED\")) {\n          return true;\n        } else {\n          return false;\n        }\n      } else if (responseCode == 404) {\n        // response code of 404 is not found, which means not registered\n        return false;\n      } else {\n        // unknown response code\n        return false;\n      }\n    } catch (Exception ex) {\n      LOG.log(Level.FINE, \"Error: \" + ex.getMessage(), ex);\n    }\n    return false;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9717, "initialization": ["URL url = new URL(String)"], "initializationStart": [534], "initializationEnd": [553], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 512, "tryExpressionEnd": 516, "tryBlockStart": 512, "tryBlockEnd": 977, "catchExpressionStart": 879, "catchExpressionEnd": 911, "catchBlockStart": 879, "catchBlockEnd": 977, "exceptionHandlingCallStart": [947], "exceptionHandlingCallEnd": [970], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 582, "focalAPIEnd": 602, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestProperty(String,*)", "connection.connect()", "connection.getInputStream()"], "useStart": [610, 678, 791], "useEnd": [670, 692, 812], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stlanger/Docear/tree/master/Jabref_Beta_2_7_Docear/src/java/net/sf/jabref/imports/JSTORFetcher.java", "rawCode": "  /**\n   * Given a ticket an a list of citations, retrieve BibtexEntries from JStor\n   *\n   * @param ticket A valid ticket as returned by openTicket()\n   * @param citations A list of citations as returned by getCitations()\n   * @return A collection of BibtexEntries parsed from the bibtex returned by JStor.\n   * @throws IOException Most probably related to a problem connecting to JStor.\n   */\n  protected Collection<BibtexEntry> getBibtexEntries(String ticket, String citations)\n      throws IOException {\n    try {\n      URL url = new URL(URL_BIBTEX);\n      URLConnection conn = url.openConnection();\n      conn.setRequestProperty(\"Cookie\", ticket + \"; \" + citations);\n      conn.connect();\n\n      BibtexParser parser =\n          new BibtexParser(new BufferedReader(new InputStreamReader(conn.getInputStream())));\n      return parser.parse().getDatabase().getEntries();\n    } catch (MalformedURLException e) {\n      // Propagate...\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9718, "initialization": ["URL url = new URL(*)"], "initializationStart": [95], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 154, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setUseCaches(boolean)", "connection.getInputStream()"], "useStart": [182, 235], "useEnd": [211, 261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/statalign/statalign/tree/master/src/fr/orsay/lri/varna/views/VueLoadColorMapValues.java", "rawCode": "  public Reader getReader() throws IOException {\n    if (urlCB.isSelected()) {\n      URL url = new URL(urlTxt.getText());\n      URLConnection connexion = url.openConnection();\n      connexion.setUseCaches(false);\n      InputStream r = connexion.getInputStream();\n      return new InputStreamReader(r);\n    } else {\n      return new FileReader(fileTxt.getText());\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9719, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 138, "focalAPIEnd": 158, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setUseCaches(boolean)", "readURLConnectionAsBytes(connection)"], "useStart": [166, 205], "useEnd": [190, 235], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prsebastian/gwt-issue-8215/tree/master/dev/core/src/com/google/gwt/dev/util/Util.java", "rawCode": "  /** @return null if the file could not be read */\n  public static byte[] readURLAsBytes(URL url) {\n    try {\n      URLConnection conn = url.openConnection();\n      conn.setUseCaches(false);\n      return readURLConnectionAsBytes(conn);\n    } catch (IOException e) {\n      return null;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9720, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["w(String,String)"], "tryExpressionStart": 78, "tryExpressionEnd": 82, "tryBlockStart": 78, "tryBlockEnd": 1756, "catchExpressionStart": 1338, "catchExpressionEnd": 1362, "catchBlockStart": 1338, "catchBlockEnd": 1432, "exceptionHandlingCallStart": [1372], "exceptionHandlingCallEnd": [1423], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 562, "focalAPIEnd": 588, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [562], "useEnd": [605], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajc-optimus/android-lib/tree/master/OAuth/Code/FaceBookApp/src/com/optimus/mobile/MainActivity.java", "rawCode": "    public void onComplete(final String response, final Object state) {\n      try {\n        // process the response here: executed in background thread\n        Log.i(\"Facebook-Example\", \"Response: \" + response.toString());\n        JSONObject json = Util.parseJson(response);\n        final String name = json.getString(\"bio\");\n        final String id = json.getString(\"id\");\n\n        URL img_value = null;\n        img_value = new URL(\"http://graph.facebook.com/\" + id + \"/picture?type=large\");\n        final Bitmap mIcon1 =\n            BitmapFactory.decodeStream(img_value.openConnection().getInputStream());\n\n        MainActivity.this.runOnUiThread(\n            new Runnable() {\n              public void run() {\n                ImageView user_picture = (ImageView) findViewById(R.id.ivProfilEpIC);\n                user_picture.setImageBitmap(mIcon1);\n              }\n            });\n        // then post the processed result back to the UI thread\n        // if we do not do this, an runtime exception will be generated\n        // e.g. \"CalledFromWrongThreadException: Only the original\n        // thread that created a view hierarchy can touch its views.\"\n        MainActivity.this.runOnUiThread(\n            new Runnable() {\n              public void run() {\n                mText.setText(name);\n              }\n            });\n      } catch (JSONException e) {\n        Log.w(\"Facebook-Example\", \"JSON Error in response\");\n      } catch (FacebookError e) {\n        Log.w(\"Facebook-Example\", \"Facebook Error: \" + e.getMessage());\n      } catch (MalformedURLException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    }\n"}, {"dataset": "openConnection", "exampleID": 9721, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 67, "focalAPIEnd": 87, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/newtonik/preppa/tree/master/lib/tapestry-src-5.0.18/tapestry-core/src/test/java/org/apache/tapestry5/integration/app1/pages/ClassLoaderInspect.java", "rawCode": "  public URLConnection getURLConnection() {\n    try {\n      return URL.openConnection();\n    } catch (IOException ex) {\n      return null;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9722, "initialization": ["URL url = new URL(String)"], "initializationStart": [121], "initializationEnd": [139], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 190, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setReadTimeout(int)", "connection.setConnectTimeout(int)", "connection.setRequestMethod(String)", "connection.setDoInput(boolean)", "connection.connect()", "connection.getInputStream()"], "useStart": [216, 267, 321, 355, 406, 433], "useEnd": [261, 315, 349, 376, 420, 454], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NF28Group/Vmote/tree/master/src/fr/nf28/vmote/series/model/GetSeriesAsyncTask.java", "rawCode": "  private InputStream downloadUrl(String urlString) throws IOException {\n    Log.i(\"Download\", urlString);\n    URL url = new URL(urlString);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setReadTimeout(10000 /* milliseconds */);\n    conn.setConnectTimeout(15000 /* milliseconds */);\n    conn.setRequestMethod(\"GET\");\n    conn.setDoInput(true);\n    // Starts the query\n    conn.connect();\n    return conn.getInputStream();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9723, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 92, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [158], "useEnd": [188], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codefireX/platform_libcore/tree/master/luni/src/test/java/libcore/java/net/URLConnectionTest.java", "rawCode": "  public void testUrlWithSpaceInHost() throws Exception {\n    URLConnection urlConnection = new URL(\"http://and roid.com/\").openConnection();\n    try {\n      urlConnection.getInputStream();\n      fail();\n    } catch (UnknownHostException expected) {\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9724, "initialization": ["URL url = new URL(String)"], "initializationStart": [670], "initializationEnd": [699], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["fatal(String,*)", "new RuntimeException(String)"], "tryExpressionStart": 652, "tryExpressionEnd": 656, "tryBlockStart": 652, "tryBlockEnd": 1192, "catchExpressionStart": 826, "catchExpressionEnd": 859, "catchBlockStart": 826, "catchBlockEnd": 1000, "exceptionHandlingCallStart": [867, 950], "exceptionHandlingCallEnd": [936, 993], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 714, "focalAPIEnd": 734, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.getOutputStream()", "connection.getInputStream()"], "useStart": [742, 1362, 1440, 1564], "useEnd": [818, 1384, 1462, 1585], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/motech/MOTECH-Mobile/tree/master/motech-mobile-omp/src/main/java/org/motechproject/mobile/omp/manager/clickatell/ClickatellGatewayManagerImpl.java", "rawCode": "  public String getMessageStatus(GatewayResponse response) {\n    try {\n      postData = \"api_id=\" + URLEncoder.encode(apiId, \"UTF-8\");\n      postData += \"&user=\" + URLEncoder.encode(user, \"UTF-8\");\n      postData += \"&password=\" + URLEncoder.encode(password, \"UTF-8\");\n      postData += \"&apimsgid=\" + URLEncoder.encode(response.getGatewayMessageId(), \"UTF-8\");\n    } catch (UnsupportedEncodingException ex) {\n      logger.fatal(\"Error constructing request: parameter encoding failed\", ex);\n      throw new RuntimeException(\"Error constructing message\");\n    }\n\n    // Create a url and open a connection to it\n    URL url;\n    URLConnection conn;\n\n    try {\n      url = new URL(baseUrl + \"querymsg\");\n      conn = url.openConnection();\n      conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    } catch (MalformedURLException ex) {\n      logger.fatal(\"Error initializing Clikatell Gateway: invalid url\", ex);\n      throw new RuntimeException(\"Invalid gatewat URL\");\n    } catch (IOException ex) {\n      logger.fatal(\"Error iitializing Clickatell Gateway: unable to open URL connection\", ex);\n      throw new RuntimeException(\"Could not connect to gateway\");\n    }\n    // Read in the gateway response\n    BufferedReader in;\n    String data = \"\";\n    String gatewayResponse = \"\";\n\n    // Flush the post data to the url\n    try {\n      conn.setDoOutput(true);\n      OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\n      out.write(postData);\n      out.flush();\n\n      in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n      while ((data = in.readLine()) != null) gatewayResponse += data + \"\\n\";\n\n      // Close the connections to the url reader and writer\n      out.close();\n      in.close();\n    } catch (IOException ex) {\n      logger.fatal(\"Error processing gateway request\", ex);\n      throw new RuntimeException(\"Unable to communicate with gateway\");\n    }\n\n    return gatewayResponse;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9725, "initialization": ["URL url = MockWebServer.getUrl(String)"], "initializationStart": [429], "initializationEnd": [447], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 482, "focalAPIEnd": 502, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["readAscii(connection)", "url.openConnection()", "url.openConnection()", "readAscii(connection)"], "useStart": [472, 562, 769, 759], "useEnd": [503, 582, 789, 790], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinsb/android-libcore/tree/master/luni/src/test/java/libcore/net/http/HttpResponseCacheTest.java", "rawCode": "  private void testMethodInvalidates(String requestMethod) throws Exception {\n    /*\n     * 1. seed the cache\n     * 2. invalidate it\n     * 3. expect a cache miss\n     */\n    server.enqueue(\n        new MockResponse().setBody(\"A\").addHeader(\"Expires: \" + formatDate(1, TimeUnit.HOURS)));\n    server.enqueue(new MockResponse().setBody(\"B\"));\n    server.enqueue(new MockResponse().setBody(\"C\"));\n    server.play();\n\n    URL url = server.getUrl(\"/\");\n\n    assertEquals(\"A\", readAscii(url.openConnection()));\n\n    HttpURLConnection invalidate = (HttpURLConnection) url.openConnection();\n    invalidate.setRequestMethod(requestMethod);\n    addRequestBodyIfNecessary(requestMethod, invalidate);\n    assertEquals(\"B\", readAscii(invalidate));\n\n    assertEquals(\"C\", readAscii(url.openConnection()));\n  }\n"}, {"dataset": "openConnection", "exampleID": 9726, "initialization": ["URL url = new URL(String)"], "initializationStart": [144], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 188, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [256], "useEnd": [277], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/amserver/source/com/sun/identity/tools/nightly/NightlyIndexHtml.java", "rawCode": "  private static void create(String baseDir, String timestamp, String indexURL)\n      throws IOException, MalformedURLException {\n    URL url = new URL(indexURL);\n    URLConnection conn = url.openConnection();\n    DataInputStream dis = new DataInputStream(conn.getInputStream());\n    StringBuffer buff = new StringBuffer();\n\n    String line = dis.readLine();\n    while (line != null) {\n      buff.append(line).append(\"\\n\");\n      line = dis.readLine();\n    }\n    dis.close();\n\n    String content = buff.toString();\n    Object[] param = {timestamp};\n    content = content.replaceAll(NEW_ENTRY, NEW_ENTRY + MessageFormat.format(TEMPLATE, param));\n    content = content.replaceAll(\"<a href=.+?>latest</a>\", MessageFormat.format(LATEST, param));\n    writeToFile(baseDir + \"/top.index.html\", content);\n  }\n"}, {"dataset": "openConnection", "exampleID": 9727, "initialization": ["URL url = new URL(String)"], "initializationStart": [832], "initializationEnd": [847], "hasTryCatch": 1, "exceptionType": "SocketTimeoutException", "exceptionHandlingCall": ["sendGetRequest(String,String)"], "tryExpressionStart": 623, "tryExpressionEnd": 627, "tryBlockStart": 623, "tryBlockEnd": 1438, "catchExpressionStart": 1060, "catchExpressionEnd": 1093, "catchBlockStart": 1060, "catchBlockEnd": 1166, "exceptionHandlingCallStart": [1112], "exceptionHandlingCallEnd": [1155], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 878, "focalAPIEnd": 898, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [1025], "useEnd": [1046], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WebMashup/DealMeMain/tree/master/src/me/deal/server/HttpSender.java", "rawCode": "  /**\n   * Sends an HTTP GET request to a url\n   *\n   * @param endpoint - The URL of the server. (Example: \" http://www.yahoo.com/search\")\n   * @param requestParameters - all the request parameters (Example: \"param1=val1&param2=val2\").\n   *     Note: This method will add the question mark (?) to the request - DO NOT add it yourself\n   * @return - The response from the end point\n   */\n  public static String sendGetRequest(String endpoint, String requestParameters)\n      throws SocketTimeoutException {\n    String result = null;\n    if (endpoint.startsWith(\"http://\")) {\n      // Send a GET request to the servlet\n      try {\n        // Send data\n        String urlStr = endpoint;\n        if (requestParameters != null && requestParameters.length() > 0) {\n          urlStr += \"?\" + requestParameters;\n        }\n        URL url = new URL(urlStr);\n        URLConnection conn = url.openConnection();\n        // Get the response\n        BufferedReader rd;\n        try {\n          rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        } catch (SocketTimeoutException e) {\n          return sendGetRequest(endpoint, requestParameters);\n        }\n        StringBuffer sb = new StringBuffer();\n        String line;\n        while ((line = rd.readLine()) != null) {\n          sb.append(line);\n        }\n        rd.close();\n        result = sb.toString();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9728, "initialization": ["URL url = new URL(String)"], "initializationStart": [1608], "initializationEnd": [1633], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 1667, "focalAPIEnd": 1692, "followUpCheck": "!(connection instanceof HttpURLConnection)", "checkType": "IF", "followUpCheckExpressionStart": 1702, "followUpCheckExpressionEnd": 1746, "followUpCheckBlockStart": 1702, "followUpCheckBlockEnd": 3371, "use": ["connection.getInputStream()", "connection.getInputStream()", "connection.getURL()"], "useStart": [1768, 2749, 3041], "useEnd": [1792, 2773, 3057], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fanhongtao/JDK/tree/master/src/com/sun/org/apache/xerces/internal/impl/XMLEntityManager.java", "rawCode": "  /**\n   * This method uses the passed-in XMLInputSource to make fCurrentEntity usable for reading.\n   *\n   * @param name name of the entity (XML is it's the document entity)\n   * @param xmlInputSource the input source, with sufficient information to begin scanning\n   *     characters.\n   * @param literal True if this entity is started within a literal value.\n   * @param isExternal whether this entity should be treated as an internal or external entity.\n   * @throws IOException if anything can't be read XNIException If any parser-specific goes wrong.\n   * @return the encoding of the new entity or null if a character stream was employed\n   */\n  public String setupCurrentEntity(\n      String name, XMLInputSource xmlInputSource, boolean literal, boolean isExternal)\n      throws IOException, XNIException {\n    // get information\n\n    final String publicId = xmlInputSource.getPublicId();\n    String literalSystemId = xmlInputSource.getSystemId();\n    String baseSystemId = xmlInputSource.getBaseSystemId();\n    String encoding = xmlInputSource.getEncoding();\n    final boolean encodingExternallySpecified = (encoding != null);\n    Boolean isBigEndian = null;\n\n    // create reader\n    InputStream stream = null;\n    Reader reader = xmlInputSource.getCharacterStream();\n\n    // First chance checking strict URI\n    String expandedSystemId = expandSystemId(literalSystemId, baseSystemId, fStrictURI);\n    if (baseSystemId == null) {\n      baseSystemId = expandedSystemId;\n    }\n    if (reader == null) {\n      stream = xmlInputSource.getByteStream();\n      if (stream == null) {\n        URL location = new URL(expandedSystemId);\n        URLConnection connect = location.openConnection();\n        if (!(connect instanceof HttpURLConnection)) {\n          stream = connect.getInputStream();\n        } else {\n          boolean followRedirects = true;\n\n          // setup URLConnection if we have an HTTPInputSource\n          if (xmlInputSource instanceof HTTPInputSource) {\n            final HttpURLConnection urlConnection = (HttpURLConnection) connect;\n            final HTTPInputSource httpInputSource = (HTTPInputSource) xmlInputSource;\n\n            // set request properties\n            Iterator propIter = httpInputSource.getHTTPRequestProperties();\n            while (propIter.hasNext()) {\n              Map.Entry entry = (Map.Entry) propIter.next();\n              urlConnection.setRequestProperty((String) entry.getKey(), (String) entry.getValue());\n            }\n\n            // set preference for redirection\n            followRedirects = httpInputSource.getFollowHTTPRedirects();\n            if (!followRedirects) {\n              setInstanceFollowRedirects(urlConnection, followRedirects);\n            }\n          }\n\n          stream = connect.getInputStream();\n\n          // REVISIT: If the URLConnection has external encoding\n          // information, we should be reading it here. It's located\n          // in the charset parameter of Content-Type. -- mrglavas\n\n          if (followRedirects) {\n            String redirect = connect.getURL().toString();\n            // E43: Check if the URL was redirected, and then\n            // update literal and expanded system IDs if needed.\n            if (!redirect.equals(expandedSystemId)) {\n              literalSystemId = redirect;\n              expandedSystemId = redirect;\n            }\n          }\n        }\n      }\n\n      // wrap this stream in RewindableInputStream\n      stream = new RewindableInputStream(stream);\n\n      // perform auto-detect of encoding if necessary\n      if (encoding == null) {\n        // read first four bytes and determine encoding\n        final byte[] b4 = new byte[4];\n        int count = 0;\n        for (; count < 4; count++) {\n          b4[count] = (byte) stream.read();\n        }\n        if (count == 4) {\n          Object[] encodingDesc = getEncodingName(b4, count);\n          encoding = (String) (encodingDesc[0]);\n          isBigEndian = (Boolean) (encodingDesc[1]);\n\n          stream.reset();\n          // Special case UTF-8 files with BOM created by Microsoft\n          // tools. It's more efficient to consume the BOM than make\n          // the reader perform extra checks. -Ac\n          if (count > 2 && encoding.equals(\"UTF-8\")) {\n            int b0 = b4[0] & 0xFF;\n            int b1 = b4[1] & 0xFF;\n            int b2 = b4[2] & 0xFF;\n            if (b0 == 0xEF && b1 == 0xBB && b2 == 0xBF) {\n              // ignore first three bytes...\n              stream.skip(3);\n            }\n          }\n          reader = createReader(stream, encoding, isBigEndian);\n        } else {\n          reader = createReader(stream, encoding, isBigEndian);\n        }\n      }\n\n      // use specified encoding\n      else {\n        encoding = encoding.toUpperCase(Locale.ENGLISH);\n\n        // If encoding is UTF-8, consume BOM if one is present.\n        if (encoding.equals(\"UTF-8\")) {\n          final int[] b3 = new int[3];\n          int count = 0;\n          for (; count < 3; ++count) {\n            b3[count] = stream.read();\n            if (b3[count] == -1) break;\n          }\n          if (count == 3) {\n            if (b3[0] != 0xEF || b3[1] != 0xBB || b3[2] != 0xBF) {\n              // First three bytes are not BOM, so reset.\n              stream.reset();\n            }\n          } else {\n            stream.reset();\n          }\n        }\n        // If encoding is UTF-16, we still need to read the first four bytes\n        // in order to discover the byte order.\n        else if (encoding.equals(\"UTF-16\")) {\n          final int[] b4 = new int[4];\n          int count = 0;\n          for (; count < 4; ++count) {\n            b4[count] = stream.read();\n            if (b4[count] == -1) break;\n          }\n          stream.reset();\n\n          String utf16Encoding = \"UTF-16\";\n          if (count >= 2) {\n            final int b0 = b4[0];\n            final int b1 = b4[1];\n            if (b0 == 0xFE && b1 == 0xFF) {\n              // UTF-16, big-endian\n              utf16Encoding = \"UTF-16BE\";\n              isBigEndian = Boolean.TRUE;\n            } else if (b0 == 0xFF && b1 == 0xFE) {\n              // UTF-16, little-endian\n              utf16Encoding = \"UTF-16LE\";\n              isBigEndian = Boolean.FALSE;\n            } else if (count == 4) {\n              final int b2 = b4[2];\n              final int b3 = b4[3];\n              if (b0 == 0x00 && b1 == 0x3C && b2 == 0x00 && b3 == 0x3F) {\n                // UTF-16, big-endian, no BOM\n                utf16Encoding = \"UTF-16BE\";\n                isBigEndian = Boolean.TRUE;\n              }\n              if (b0 == 0x3C && b1 == 0x00 && b2 == 0x3F && b3 == 0x00) {\n                // UTF-16, little-endian, no BOM\n                utf16Encoding = \"UTF-16LE\";\n                isBigEndian = Boolean.FALSE;\n              }\n            }\n          }\n          reader = createReader(stream, utf16Encoding, isBigEndian);\n        }\n        // If encoding is UCS-4, we still need to read the first four bytes\n        // in order to discover the byte order.\n        else if (encoding.equals(\"ISO-10646-UCS-4\")) {\n          final int[] b4 = new int[4];\n          int count = 0;\n          for (; count < 4; ++count) {\n            b4[count] = stream.read();\n            if (b4[count] == -1) break;\n          }\n          stream.reset();\n\n          // Ignore unusual octet order for now.\n          if (count == 4) {\n            // UCS-4, big endian (1234)\n            if (b4[0] == 0x00 && b4[1] == 0x00 && b4[2] == 0x00 && b4[3] == 0x3C) {\n              isBigEndian = Boolean.TRUE;\n            }\n            // UCS-4, little endian (1234)\n            else if (b4[0] == 0x3C && b4[1] == 0x00 && b4[2] == 0x00 && b4[3] == 0x00) {\n              isBigEndian = Boolean.FALSE;\n            }\n          }\n        }\n        // If encoding is UCS-2, we still need to read the first four bytes\n        // in order to discover the byte order.\n        else if (encoding.equals(\"ISO-10646-UCS-2\")) {\n          final int[] b4 = new int[4];\n          int count = 0;\n          for (; count < 4; ++count) {\n            b4[count] = stream.read();\n            if (b4[count] == -1) break;\n          }\n          stream.reset();\n\n          if (count == 4) {\n            // UCS-2, big endian\n            if (b4[0] == 0x00 && b4[1] == 0x3C && b4[2] == 0x00 && b4[3] == 0x3F) {\n              isBigEndian = Boolean.TRUE;\n            }\n            // UCS-2, little endian\n            else if (b4[0] == 0x3C && b4[1] == 0x00 && b4[2] == 0x3F && b4[3] == 0x00) {\n              isBigEndian = Boolean.FALSE;\n            }\n          }\n        }\n\n        reader = createReader(stream, encoding, isBigEndian);\n      }\n\n      // read one character at a time so we don't jump too far\n      // ahead, converting characters from the byte stream in\n      // the wrong encoding\n      if (DEBUG_ENCODINGS) {\n        System.out.println(\"$$$ no longer wrapping reader in OneCharReader\");\n      }\n      // reader = new OneCharReader(reader);\n    }\n\n    // We've seen a new Reader.\n    // Push it on the stack so we can close it later.\n    // fOwnReaders.add(reader);\n\n    // push entity on stack\n    if (fCurrentEntity != null) {\n      fEntityStack.push(fCurrentEntity);\n    }\n\n    // create entity\n    /* if encoding is specified externally, 'encoding' information present\n     * in the prolog of the XML document is not considered. Hence, prolog can\n     * be read in Chunks of data instead of byte by byte.\n     */\n    fCurrentEntity =\n        new com.sun.xml.internal.stream.Entity.ScannedEntity(\n            name,\n            new XMLResourceIdentifierImpl(\n                publicId, literalSystemId, baseSystemId, expandedSystemId),\n            stream,\n            reader,\n            encoding,\n            literal,\n            encodingExternallySpecified,\n            isExternal);\n    fCurrentEntity.setEncodingExternallySpecified(encodingExternallySpecified);\n    fEntityScanner.setCurrentEntity(fCurrentEntity);\n    fResourceIdentifier.setValues(publicId, literalSystemId, baseSystemId, expandedSystemId);\n    return encoding;\n  } // setupCurrentEntity(String, XMLInputSource, boolean, boolean): String\n"}, {"dataset": "openConnection", "exampleID": 9729, "initialization": ["URL url = VFSClassLoader.getResource(String)"], "initializationStart": [168], "initializationEnd": [210], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 275, "focalAPIEnd": 300, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertSameURLContent(*,connection)"], "useStart": [306], "useEnd": [349], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/penSecIT/commons-vfs/tree/master/tags/vfs-1.0-RC7/src/test/org/apache/commons/vfs/impl/test/VfsClassLoaderTests.java", "rawCode": "  /** Tests loading a resource. */\n  public void testLoadResource() throws Exception {\n    final VFSClassLoader loader = createClassLoader();\n\n    final URL resource = loader.getResource(\"read-tests/file1.txt\");\n\n    assertNotNull(resource);\n    final URLConnection urlCon = resource.openConnection();\n    assertSameURLContent(FILE1_CONTENT, urlCon);\n  }\n"}, {"dataset": "openConnection", "exampleID": 9730, "initialization": ["URL url = new URL(String)"], "initializationStart": [137], "initializationEnd": [155], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 208, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setConnectTimeout(int)", "connection.setReadTimeout(int)", "connection.setRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.getOutputStream()", "connection.getRequestProperty(String)", "connection.getResponseMessage()", "connection.getInputStream()"], "useStart": [240, 287, 331, 452, 531, 789, 978, 1046], "useEnd": [279, 323, 389, 474, 553, 824, 1003, 1067], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akiellor/selenium/tree/master/java/server/test/org/openqa/selenium/server/mock/AsyncHttpRequest.java", "rawCode": "    private String doBrowserRequest(String urlString, String body) throws IOException {\n      int responsecode = 200;\n      URL result = new URL(urlString);\n      HttpURLConnection conn = (HttpURLConnection) result.openConnection();\n\n      conn.setConnectTimeout(timeoutInMillis);\n      conn.setReadTimeout(timeoutInMillis);\n      conn.setRequestProperty(\"Content-Type\", \"application/xml\");\n      // Send POST output.\n      if (body != null) {\n        conn.setDoOutput(true);\n        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n        wr.write(body);\n        wr.flush();\n        wr.close();\n      }\n      // conn.setInstanceFollowRedirects(false);\n      // responsecode = conn.getResponseCode();\n      if (responsecode == 301) {\n        String pathToServlet = conn.getRequestProperty(\"Location\");\n        throw new RuntimeException(\"Bug! 301 redirect??? \" + pathToServlet);\n      } else if (responsecode != 200) {\n        throw new RuntimeException(conn.getResponseMessage());\n      } else {\n        InputStream is = conn.getInputStream();\n        return stringContentsOfInputStream(is);\n      }\n    }\n"}, {"dataset": "openConnection", "exampleID": 9731, "initialization": ["URL url = ClassLoader.getResource(String)"], "initializationStart": [611], "initializationEnd": [643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "url!=null", "guardType": "IF {", "guardExpressionStart": 653, "guardExpressionEnd": 669, "guardBlockStart": 653, "guardBlockEnd": 882, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 709, "focalAPIEnd": 729, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 741, "followUpCheckExpressionEnd": 764, "followUpCheckBlockStart": 741, "followUpCheckBlockEnd": 872, "use": ["connection.setUseCaches(boolean)", "connection.getInputStream()"], "useStart": [779, 832], "useEnd": [809, 859], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mercer/FacesDemo/tree/master/icefaces/src/main/java/be/cegeka/rsvz/faces/i18n/UTF8ResourceBundle.java", "rawCode": "    public ResourceBundle newBundle(\n        String baseName, Locale locale, String format, ClassLoader loader, boolean reload)\n        throws IllegalAccessException, InstantiationException, IOException {\n      // The below code is copied from default Control#newBundle() implementation.\n      // Only the PropertyResourceBundle line is changed to read the file as UTF-8.\n      String bundleName = toBundleName(baseName, locale);\n      String resourceName = toResourceName(bundleName, BUNDLE_EXTENSION);\n      ResourceBundle bundle = null;\n      InputStream stream = null;\n      if (reload) {\n        URL url = loader.getResource(resourceName);\n        if (url != null) {\n          URLConnection connection = url.openConnection();\n          if (connection != null) {\n            connection.setUseCaches(false);\n            stream = connection.getInputStream();\n          }\n        }\n      } else {\n        stream = loader.getResourceAsStream(resourceName);\n      }\n      if (stream != null) {\n        try {\n          bundle = new PropertyResourceBundle(new InputStreamReader(stream, \"UTF-8\"));\n        } finally {\n          stream.close();\n        }\n      }\n      return bundle;\n    }\n"}, {"dataset": "openConnection", "exampleID": 9732, "initialization": ["URL url = new URL(String)", "URL url = new URL(String)"], "initializationStart": [205, 264], "initializationEnd": [233, 280], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["HttpURLConnection.disconnect()"], "tryExpressionStart": 122, "tryExpressionEnd": 126, "tryBlockStart": 122, "tryBlockEnd": 819, "catchExpressionStart": 692, "catchExpressionEnd": 718, "catchBlockStart": 692, "catchBlockEnd": 819, "exceptionHandlingCallStart": [744], "exceptionHandlingCallEnd": [761], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 323, "focalAPIEnd": 343, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 726, "followUpCheckExpressionEnd": 743, "followUpCheckBlockStart": 726, "followUpCheckBlockEnd": 762, "use": ["connection.setConnectTimeout(int)", "connection.setReadTimeout(int)", "connection.setInstanceFollowRedirects(boolean)", "connection.setRequestProperty(String,String)", "connection.connect()", "connection.getResponseCode()", "connection.disconnect()", "connection.disconnect()", "connection.disconnect()"], "useStart": [379, 425, 468, 513, 597, 662, 744, 932, 992], "useEnd": [407, 450, 505, 561, 611, 684, 761, 949, 1009], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tizzit/tizzit/tree/master/tizzit-richclient/src/main/java/de/juwimm/cms/util/UrlValidator.java", "rawCode": "  public static String validate(final String urlLink) {\n    int responseCode = -1;\n    HttpURLConnection conn = null;\n    try {\n      URL url = null;\n      if (!urlLink.startsWith(\"http\")) {\n        url = new URL(\"http://\" + urlLink);\n      } else {\n        url = new URL(urlLink);\n      }\n      conn = (HttpURLConnection) url.openConnection();\n\n      // Set up a request.\n      conn.setConnectTimeout(2000); // 10 sec\n      conn.setReadTimeout(5000); // 10 sec\n      conn.setInstanceFollowRedirects(true);\n      conn.setRequestProperty(\"User-agent\", \"crawler\");\n\n      // Send the request.\n      conn.connect();\n\n      // Get the response.\n      responseCode = conn.getResponseCode();\n    } catch (final Exception e) {\n      if (conn != null) conn.disconnect();\n      return rb.getString(\"exception.invalidURL\");\n    }\n    if (responseCode == 200) {\n      String textUrl = conn != null ? conn.getURL().toExternalForm() : \"\";\n      conn.disconnect();\n      return textUrl;\n    } else {\n      conn.disconnect();\n      return rb.getString(\"exception.invalidURL\");\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9733, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 184, "focalAPIEnd": 204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/greggiacovelli/volley/tree/master/src/com/android/volley/toolbox/HurlStack.java", "rawCode": "  /** Create an {@link HttpURLConnection} for the specified {@code url}. */\n  protected HttpURLConnection createConnection(URL url) throws IOException {\n    return (HttpURLConnection) url.openConnection();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9734, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 94, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setUseCaches(boolean)", "connection.getInputStream()"], "useStart": [120, 164], "useEnd": [141, 182], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gilsondev/jsf2-api/tree/master/jsf-ri/test/com/sun/faces/application/resource/TestResourceHandlerImpl.java", "rawCode": "  private byte[] getBytes(URL url, boolean compress) throws Exception {\n    URLConnection c = url.openConnection();\n    c.setUseCaches(false);\n    InputStream in = c.getInputStream();\n    return ((compress) ? getCompressedBytes(in) : getBytes(in));\n  }\n"}, {"dataset": "openConnection", "exampleID": 9735, "initialization": ["URL url = MockWebServer.getUrl(String)"], "initializationStart": [395], "initializationEnd": [413], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 448, "focalAPIEnd": 468, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.addRequestProperty(String,String)", "connection.addRequestProperty(String,String)", "connection.addRequestProperty(String,String)", "readAscii(connection)", "url.openConnection()"], "useStart": [474, 539, 603, 689, 748], "useEnd": [533, 597, 665, 712, 768], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codefireX/platform_libcore/tree/master/luni/src/test/java/libcore/net/http/HttpResponseCacheTest.java", "rawCode": "  public void testVaryMultipleFieldsWithNoMatch() throws Exception {\n    server.enqueue(\n        new MockResponse()\n            .addHeader(\"Cache-Control: max-age=60\")\n            .addHeader(\"Vary: Accept-Language, Accept-Charset\")\n            .addHeader(\"Vary: Accept-Encoding\")\n            .setBody(\"A\"));\n    server.enqueue(new MockResponse().setBody(\"B\"));\n    server.play();\n\n    URL url = server.getUrl(\"/\");\n    URLConnection frConnection = url.openConnection();\n    frConnection.addRequestProperty(\"Accept-Language\", \"fr-CA\");\n    frConnection.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n    frConnection.addRequestProperty(\"Accept-Encoding\", \"identity\");\n    assertEquals(\"A\", readAscii(frConnection));\n    URLConnection enConnection = url.openConnection();\n    enConnection.addRequestProperty(\"Accept-Language\", \"en-CA\");\n    enConnection.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n    enConnection.addRequestProperty(\"Accept-Encoding\", \"identity\");\n    assertEquals(\"B\", readAscii(enConnection));\n  }\n"}, {"dataset": "openConnection", "exampleID": 9736, "initialization": ["URL url = new URL(*)"], "initializationStart": [4184], "initializationEnd": [4220], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 209, "tryExpressionEnd": 213, "tryBlockStart": 209, "tryBlockEnd": 5472, "catchExpressionStart": 5419, "catchExpressionEnd": 5441, "catchBlockStart": 5419, "catchBlockEnd": 5472, "exceptionHandlingCallStart": [5449], "exceptionHandlingCallEnd": [5465], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 4423, "focalAPIEnd": 4452, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.connect()", "connection.getInputStream()"], "useStart": [4478, 4551, 4700, 4766, 4959], "useEnd": [4525, 4674, 4740, 4798, 4998], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-2_04-final/blojsom-2.0/plugins/src/org/blojsom/plugin/trackback/AutoTrackbackPlugin.java", "rawCode": "  /**\n   * Perform the trackback autodiscovery process\n   *\n   * @param blog Blog information\n   * @param blogEntry Blog entry\n   */\n  private void trackbackAutodiscovery(Blog blog, BlogEntry blogEntry) {\n    try {\n      // Build the URL parameters for the trackback ping URL\n      StringBuffer trackbackPingURLParameters = new StringBuffer();\n      trackbackPingURLParameters\n          .append(\"&\")\n          .append(TrackbackPlugin.TRACKBACK_URL_PARAM)\n          .append(\"=\")\n          .append(URLEncoder.encode(blogEntry.getLink(), UTF8));\n      trackbackPingURLParameters\n          .append(\"&\")\n          .append(TrackbackPlugin.TRACKBACK_TITLE_PARAM)\n          .append(\"=\")\n          .append(URLEncoder.encode(blogEntry.getTitle(), UTF8));\n      trackbackPingURLParameters\n          .append(\"&\")\n          .append(TrackbackPlugin.TRACKBACK_BLOG_NAME_PARAM)\n          .append(\"=\")\n          .append(URLEncoder.encode(blog.getBlogName(), UTF8));\n\n      String excerpt = blogEntry.getDescription().replaceAll(\"<.*?>\", \"\");\n      if (excerpt.length() > 255) {\n        excerpt = excerpt.substring(0, 251);\n        excerpt += \"...\";\n      }\n      trackbackPingURLParameters\n          .append(\"&\")\n          .append(TrackbackPlugin.TRACKBACK_EXCERPT_PARAM)\n          .append(\"=\")\n          .append(URLEncoder.encode(excerpt, UTF8));\n\n      // Extract all the HREF links from the blog description\n      Matcher hrefMatcher = HREF_PATTERN.matcher(blogEntry.getDescription());\n      while (hrefMatcher.find()) {\n\n        // If we have a group count of 2, the inner group will be the http:// reference\n        // Read the entire contents of the URL into a buffer\n        if (hrefMatcher.groupCount() == 2) {\n          String hyperlink = hrefMatcher.group(1);\n          _logger.debug(\"Found hyperlink: \" + hyperlink);\n          BufferedReader br;\n          URL hyperlinkURL = new URL(hyperlink);\n          br = new BufferedReader(new InputStreamReader(hyperlinkURL.openStream()));\n          String html;\n          StringBuffer contents = new StringBuffer();\n          while ((html = br.readLine()) != null) {\n            contents.append(html).append(\"\\n\");\n          }\n\n          // Look for the Auto Trackback RDF in the HTML\n          Matcher rdfOuterMatcher = RDF_OUTER_PATTERN.matcher(contents.toString());\n          while (rdfOuterMatcher.find()) {\n            _logger.debug(\"Found outer RDF text in hyperlink\");\n            for (int i = 0; i < rdfOuterMatcher.groupCount(); i++) {\n              String outerRdfText = rdfOuterMatcher.group(i);\n\n              // Look for the inner RDF description\n              Matcher rdfInnerMatcher = RDF_INNER_PATTERN.matcher(outerRdfText);\n              while (rdfInnerMatcher.find()) {\n                _logger.debug(\"Found inner RDF text in hyperlink\");\n                for (int j = 0; j < rdfInnerMatcher.groupCount(); j++) {\n                  String innerRdfText = rdfInnerMatcher.group(j);\n\n                  // Look for a dc:identifier attribute which matches the current hyperlink\n                  Matcher dcIdentifierMatcher = DC_IDENTIFIER_PATTERN.matcher(innerRdfText);\n                  if (dcIdentifierMatcher.find()) {\n                    String dcIdentifier = dcIdentifierMatcher.group(1);\n\n                    // If we find a match, send a trackback ping to the\n                    if (dcIdentifier.equals(hyperlink)) {\n                      _logger.debug(\"Matched dc:identifier to hyperlink\");\n                      Matcher trackbackPingMatcher = TRACKBACK_PING_PATTERN.matcher(innerRdfText);\n                      if (trackbackPingMatcher.find()) {\n                        StringBuffer trackbackPingURL =\n                            new StringBuffer(trackbackPingMatcher.group(1));\n                        if (trackbackPingURL.indexOf(\"?\") == -1) {\n                          trackbackPingURL.append(\"?\");\n                        }\n                        trackbackPingURL.append(trackbackPingURLParameters);\n\n                        _logger.debug(\n                            \"Automatically sending trackback ping to URL: \"\n                                + trackbackPingURL.toString());\n                        URL trackbackUrl = new URL(trackbackPingURL.toString());\n\n                        // Open a connection to the trackback URL and read its input\n                        HttpURLConnection trackbackUrlConnection =\n                            (HttpURLConnection) trackbackUrl.openConnection();\n                        trackbackUrlConnection.setRequestMethod(\"POST\");\n                        trackbackUrlConnection.setRequestProperty(\n                            \"Content-Type\", \"application/x-www-form-urlencoded\");\n                        trackbackUrlConnection.setDoOutput(true);\n                        trackbackUrlConnection.connect();\n                        BufferedReader trackbackStatus =\n                            new BufferedReader(\n                                new InputStreamReader(trackbackUrlConnection.getInputStream()));\n                        String line;\n                        StringBuffer status = new StringBuffer();\n                        while ((line = trackbackStatus.readLine()) != null) {\n                          status.append(line).append(\"\\n\");\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch (IOException e) {\n      _logger.error(e);\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9737, "initialization": ["URL url = new URL(*)"], "initializationStart": [711], "initializationEnd": [734], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["getMessage()", "warning(String)"], "tryExpressionStart": 207, "tryExpressionEnd": 211, "tryBlockStart": 207, "tryBlockEnd": 2704, "catchExpressionStart": 1798, "catchExpressionEnd": 1832, "catchBlockStart": 1798, "catchBlockEnd": 2086, "exceptionHandlingCallStart": [2062, 1968], "exceptionHandlingCallEnd": [2078, 2079], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 775, "focalAPIEnd": 802, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 2590, "followUpCheckExpressionEnd": 2613, "followUpCheckBlockStart": 2590, "followUpCheckBlockEnd": 2698, "use": ["connection.setRequestMethod(String)", "connection.getInputStream()", "connection.disconnect()"], "useStart": [810, 1026, 2666], "useEnd": [844, 1053, 2689], "hasFinally": 1, "cleanUpCall": ["HttpURLConnection.disconnect()"], "finallyExpressionStart": 2574, "finallyExpressionEnd": 2582, "finallyBlockStart": 2574, "finallyBlockEnd": 2704, "cleanUpCallStart": [2666], "cleanUpCallEnd": [2689], "url": "https://github.com/equella/jafer/tree/master/src/org/jafer/zclient/SRWClient.java", "rawCode": "  protected Session createSession() {\n    // default the protocol to be SRW for the case when no explain record\n    // can be found\n    String protocol = \"SRW\";\n    HttpURLConnection connection = null;\n\n    try {\n      logger.fine(\"Locating Explain record to detect SRW / SRU protocol support\");\n      // Performing a straight httpGet request on the URL will return a\n      // zeerex explain record that can be interogated to determine the\n      // support type at the following XPath:\n      // /explain/serverInfo@protocol.\n      // <br>\n      // This attribute can have three values SRW , SRU , SRW/U\n      // If no XML is returned from the HttpGet then SRW support is\n      // assumed\n      URL sessionURL = new URL(this.getHost());\n      connection = (HttpURLConnection) sessionURL.openConnection();\n      connection.setRequestMethod(\"GET\");\n      // send the GET request\n      connection.connect();\n      // Read the input stream to get the returned XML\n      BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n      StringBuffer xml = new StringBuffer();\n      String inputLine;\n      // loop round reading each line until non are left\n      while ((inputLine = in.readLine()) != null) {\n        // append the line to the xml buffer\n        xml.append(inputLine);\n        // add space instead of newline so not to corrupt XML\n        xml.append(\" \");\n      }\n\n      logger.fine(\"Parsing Explain record to detect SRW / SRU protocol support\");\n      // parse the returned XML into a document\n      Node node = (Node) DOMFactory.parse(xml.toString()).getDocumentElement();\n      // extract the protocol from the XML\n      protocol = Config.getValue(Config.selectSingleNode(node, PROTOCOL_XPATH));\n      logger.fine(\"Found Protocol: \" + protocol);\n\n    } catch (MalformedURLException exc) {\n      // The host URL may be invalid so will assume SRW for now as the\n      // error handling later on will trap this properly\n      logger.warning(\n          \"MalformedURLException trying to send GET request assuming SRW: \" + exc.getMessage());\n    } catch (IOException exc) {\n      // The host URL may be invalid so will assume SRW for now as the\n      // error handling later on will trap this properly\n      logger.warning(\"IOException trying to send GET request assuming SRW: \" + exc.getMessage());\n    } catch (JaferException exc) {\n      // The returned response may not be XML or can not be parsed so will\n      // assume SRW\n      logger.warning(\"JaferException parsing the returned XML assuming SRW: \" + exc.getMessage());\n    } finally {\n      if (connection != null) {\n        // ensure we close the connection\n        connection.disconnect();\n      }\n    }\n    // If the host only supports SRU then we must use the SRUBinding\n    // otherwise SRWBinding takes priority for SRW and SRW/U values\n    if (protocol != null && protocol.equalsIgnoreCase(\"SRU\")) {\n      logger.fine(\"Creating SRU Binding\");\n      return new SRWSession(new SRUBinding(this.getHost()));\n    } else {\n      logger.fine(\"Creating SRW Binding\");\n      return new SRWSession(new SRWBinding(this.getHost()));\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9738, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 206, "focalAPIEnd": 230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [800], "useEnd": [820], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IanDarwin/javasrc/tree/master/src/main/java/netweb/LinkChecker.java", "rawCode": "  /** Check one link, given its DocumentBase and the tag */\n  public String checkLink(URL linkURL) {\n\n    try {\n      // Open it; if the open fails we'll likely throw an exception\n      URLConnection luf = linkURL.openConnection();\n      final String protocol = linkURL.getProtocol();\n      if (protocol.equals(\"http\") || protocol.equals(\"https\")) {\n        HttpURLConnection huf = (HttpURLConnection) luf;\n        final int responseCode = huf.getResponseCode();\n        return (responseCode == -1)\n            ? \"Server error: bad HTTP response \" + responseCode\n            : responseCode + \" \" + huf.getResponseMessage();\n      } else if (linkURL.getProtocol().equals(\"ftp\")) {\n        return \"(skipping FTP link)\";\n      } else if (linkURL.getProtocol().equals(\"file\")) {\n        InputStream is = luf.getInputStream();\n        is.close();\n        // If that didn't throw an exception, the file is probably OK\n        return \"(File)\";\n      } else return \"(non-HTTP)\";\n    } catch (IOException e) {\n      return \"DEAD \" + e.toString();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9739, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["authenticate()"], "tryExpressionStart": 215, "tryExpressionEnd": 219, "tryBlockStart": 215, "tryBlockEnd": 1030, "catchExpressionStart": 319, "catchExpressionEnd": 343, "catchBlockStart": 319, "catchBlockEnd": 1030, "exceptionHandlingCallStart": [405], "exceptionHandlingCallEnd": [419], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 254, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jblaya/openmrs-core/tree/master/api/src/main/java/org/openmrs/scheduler/tasks/CheckInternetConnectivityTask.java", "rawCode": "  /** @see org.openmrs.scheduler.tasks.AbstractTask#execute() */\n  public void execute() {\n\n    // TODO url should be provided as a property to taskconfig\n    String url = \"http://www.google.com:80/index.html\";\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.connect();\n    } catch (IOException ioe) {\n      try {\n        if (Context.isAuthenticated() == false) authenticate();\n        String text =\n            \"At \"\n                + new Date()\n                + \" there was an error reported connecting to the internet address \"\n                + url\n                + \": \"\n                + ioe;\n        // TODO role should be provided as a property to taskconfig\n        Role role = Context.getUserService().getRole(\"System Developer\");\n        Collection<User> users = Context.getUserService().getUsersByRole(role);\n        Context.getAlertService().saveAlert(new Alert(text, users));\n      } catch (Exception e) {\n        // Uh oh, just log it.\n        log.error(e);\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9740, "initialization": ["URL url = new URL(String)"], "initializationStart": [411], "initializationEnd": [424], "hasTryCatch": 1, "exceptionType": "JAXBException", "exceptionHandlingCall": ["printStackTrace()", "getMessage()", "new Throwable()", "new FunctionException(String,int,*,*)"], "tryExpressionStart": 154, "tryExpressionEnd": 158, "tryBlockStart": 154, "tryBlockEnd": 2363, "catchExpressionStart": 1343, "catchExpressionEnd": 1368, "catchBlockStart": 1343, "catchBlockEnd": 1605, "exceptionHandlingCallStart": [1376, 1487, 1529, 1410], "exceptionHandlingCallEnd": [1396, 1502, 1544, 1598], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 453, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [498], "useEnd": [519], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/caadapter/tree/master/software/dvts/src/java/gov/nih/nci/caadapter/dvts/FunctionVocabularyMapping.java", "rawCode": "  public List<String> searchMappingURL(String searchStr) throws FunctionException {\n    JAXBContext jc = null;\n    VocabularyMappingData vmd = null;\n\n    try {\n      jc = JAXBContext.newInstance(\"gov.nih.nci.caadapter.dvts.common.meta\");\n      Unmarshaller u = jc.createUnmarshaller();\n\n      String addr = modifyURLForSearch(value, searchStr);\n      // System.out.println(\"CCCC addr=\" + addr);\n      URL url = new URL(addr);\n      URLConnection conn = url.openConnection();\n      InputStream is = conn.getInputStream();\n\n      // DataInputStream dis = new DataInputStream(is);\n      // String result = \"\";\n      // byte bt = 0;\n      //\n      // while(true)\n      // {\n      // try { bt = dis.readByte(); }\n      // catch(IOException ie) { break; }\n      // catch(NullPointerException ie) { break; }\n      //\n      // char cc = (char) bt;\n      // result = result + cc;\n      // }\n      // dis.close();\n      // JAXBElement<VocabularyMappingData> jaxbFormula=u.unmarshal(new StreamSource(new\n      // CharArrayReader(result.toCharArray())), VocabularyMappingData.class);\n\n      JAXBElement<VocabularyMappingData> jaxbFormula =\n          u.unmarshal(new StreamSource(is), VocabularyMappingData.class);\n      // System.out.println(\"CCCCC : GGGGGG addr=\"+addr+\", result=\" + result);\n\n      vmd = jaxbFormula.getValue();\n\n      is.close();\n    } catch (JAXBException je) {\n      je.printStackTrace();\n      throw new FunctionException(\n          \"VocMappingEventHandler JAXBException : \" + je.getMessage(),\n          717,\n          new Throwable(),\n          ApplicationException.SEVERITY_LEVEL_ERROR);\n    } catch (SocketException e) {\n      // e.printStackTrace();\n      throw new FunctionException(\n          \"VocMappingEventHandler SocketException : \" + e.getMessage(),\n          713,\n          new Throwable(),\n          ApplicationException.SEVERITY_LEVEL_ERROR);\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      throw new FunctionException(\n          \"VocMappingEventHandler IOException : \" + e.getMessage(),\n          721,\n          new Throwable(),\n          ApplicationException.SEVERITY_LEVEL_ERROR);\n\n    } catch (Exception e) {\n      throw new FunctionException(\n          \"VocMappingEventHandler Unknown Exception : \" + e.getMessage(),\n          723,\n          new Throwable(),\n          ApplicationException.SEVERITY_LEVEL_ERROR);\n    }\n\n    if ((vmd.getReturnMessage().getErrorLevel() == ErrorLevel.ERROR)\n        || (vmd.getReturnMessage().getErrorLevel() == ErrorLevel.FATAL)) {\n      throw new FunctionException(\n          \"Exception on the Server side : \" + vmd.getReturnMessage().getValue(),\n          725,\n          new Throwable(),\n          ApplicationException.SEVERITY_LEVEL_ERROR);\n    }\n    if ((vmd.getMappingResults() == null) || (vmd.getMappingResults().getResult().size() == 0)) {\n      throw new FunctionException(\n          \"No translated data from the Server side : \",\n          726,\n          new Throwable(),\n          ApplicationException.SEVERITY_LEVEL_ERROR);\n    }\n    recentVocabularyMappingDataObj = vmd;\n\n    return vmd.getMappingResults().getResult();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9741, "initialization": ["URL url = MockWebServer.getUrl(String)"], "initializationStart": [593], "initializationEnd": [616], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 674, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["readAscii(connection)", "connection.getResponseCode()", "connection.getResponseMessage()", "url.openConnection()"], "useStart": [720, 789, 846, 937], "useEnd": [742, 818, 878, 959], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wsot/platform_libcore/tree/master/luni/src/test/java/libcore/net/http/HttpResponseCacheTest.java", "rawCode": "  /** @return the request with the conditional get headers. */\n  private RecordedRequest assertConditionallyCached(MockResponse response) throws Exception {\n    // scenario 1: condition succeeds\n    server.enqueue(response.setBody(\"A\").setStatus(\"HTTP/1.1 200 A-OK\"));\n    server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED));\n\n    // scenario 2: condition fails\n    server.enqueue(response.setBody(\"B\").setStatus(\"HTTP/1.1 200 B-OK\"));\n    server.enqueue(new MockResponse().setStatus(\"HTTP/1.1 200 C-OK\").setBody(\"C\"));\n\n    server.play();\n\n    URL valid = server.getUrl(\"/valid\");\n    HttpURLConnection connection1 = (HttpURLConnection) valid.openConnection();\n    assertEquals(\"A\", readAscii(connection1));\n    assertEquals(HttpURLConnection.HTTP_OK, connection1.getResponseCode());\n    assertEquals(\"A-OK\", connection1.getResponseMessage());\n    HttpURLConnection connection2 = (HttpURLConnection) valid.openConnection();\n    assertEquals(\"A\", readAscii(connection2));\n    assertEquals(HttpURLConnection.HTTP_OK, connection2.getResponseCode());\n    assertEquals(\"A-OK\", connection2.getResponseMessage());\n\n    URL invalid = server.getUrl(\"/invalid\");\n    HttpURLConnection connection3 = (HttpURLConnection) invalid.openConnection();\n    assertEquals(\"B\", readAscii(connection3));\n    assertEquals(HttpURLConnection.HTTP_OK, connection3.getResponseCode());\n    assertEquals(\"B-OK\", connection3.getResponseMessage());\n    HttpURLConnection connection4 = (HttpURLConnection) invalid.openConnection();\n    assertEquals(\"C\", readAscii(connection4));\n    assertEquals(HttpURLConnection.HTTP_OK, connection4.getResponseCode());\n    assertEquals(\"C-OK\", connection4.getResponseMessage());\n\n    server.takeRequest(); // regular get\n    return server.takeRequest(); // conditional get\n  }\n"}, {"dataset": "openConnection", "exampleID": 9742, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["HttpURLConnection.disconnect()"], "tryExpressionStart": 213, "tryExpressionEnd": 217, "tryBlockStart": 213, "tryBlockEnd": 826, "catchExpressionStart": 718, "catchExpressionEnd": 738, "catchBlockStart": 718, "catchBlockEnd": 784, "exceptionHandlingCallStart": [750], "exceptionHandlingCallEnd": [773], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 277, "focalAPIEnd": 310, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 320, "followUpCheckExpressionEnd": 343, "followUpCheckBlockStart": 320, "followUpCheckBlockEnd": 792, "use": ["connection.setConnectTimeout(int)", "connection.setDoOutput(boolean)", "connection.setChunkedStreamingMode(int)", "connection.getOutputStream()", "new HTTPStream(connection)", "connection.disconnect()"], "useStart": [396, 449, 491, 562, 680, 750], "useEnd": [435, 477, 528, 590, 706, 773], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ChrisPsarras/JUCE/tree/master/modules/juce_core/native/java/JuceAppActivity.java", "rawCode": "  public static final HTTPStream createHTTPStream(\n      String address,\n      boolean isPost,\n      byte[] postData,\n      String headers,\n      int timeOutMs,\n      java.lang.StringBuffer responseHeaders) {\n    try {\n      HttpURLConnection connection = (HttpURLConnection) (new URL(address).openConnection());\n\n      if (connection != null) {\n        try {\n          if (isPost) {\n            connection.setConnectTimeout(timeOutMs);\n            connection.setDoOutput(true);\n            connection.setChunkedStreamingMode(0);\n\n            OutputStream out = connection.getOutputStream();\n            out.write(postData);\n            out.flush();\n          }\n\n          return new HTTPStream(connection);\n        } catch (Throwable e) {\n          connection.disconnect();\n        }\n      }\n    } catch (Throwable e) {\n    }\n\n    return null;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9743, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 1093, "focalAPIEnd": 1122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestProperty(String,String)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.setDoInput(boolean)", "connection.setRequestProperty(String,String)", "connection.connect()", "connection.getOutputStream()", "connection.getInputStream()", "connection.getErrorStream()"], "useStart": [1128, 1828, 1865, 1959, 1989, 2018, 2077, 2129, 2863, 3017], "useEnd": [1248, 1857, 1951, 1981, 2010, 2069, 2091, 2151, 2884, 3038], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/plushdevelopment/Frienemy---Android/tree/master/src/com/facebook/android/Util.java", "rawCode": "  /**\n   * Connect to an HTTP URL and return the response as a string.\n   *\n   * <p>Note that the HTTP method override is used on non-GET requests. (i.e. requests are made as\n   * \"POST\" with method specified in the body).\n   *\n   * @param url - the resource to open: must be a welformed URL\n   * @param method - the HTTP method to use (\"GET\", \"POST\", etc.)\n   * @param params - the query parameter for the URL (e.g. access_token=foo)\n   * @return the URL contents as a String\n   * @throws MalformedURLException - if the URL format is invalid\n   * @throws IOException - if a network problem occurs\n   */\n  public static String openUrl(String url, String method, Bundle params)\n      throws MalformedURLException, IOException {\n    // random string as boundary for multi-part http post\n    String strBoundary = \"3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f\";\n    String endLine = \"\\r\\n\";\n\n    OutputStream os;\n\n    if (method.equals(\"GET\")) {\n      url = url + \"?\" + encodeUrl(params);\n    }\n    Util.logd(\"Facebook-Util\", method + \" URL: \" + url);\n    HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n    conn.setRequestProperty(\n        \"User-Agent\", System.getProperties().getProperty(\"http.agent\") + \" FacebookAndroidSDK\");\n    if (!method.equals(\"GET\")) {\n      Bundle dataparams = new Bundle();\n      for (String key : params.keySet()) {\n        if (params.getByteArray(key) != null) {\n          dataparams.putByteArray(key, params.getByteArray(key));\n        }\n      }\n\n      // use method override\n      if (!params.containsKey(\"method\")) {\n        params.putString(\"method\", method);\n      }\n\n      if (params.containsKey(\"access_token\")) {\n        String decoded_token = URLDecoder.decode(params.getString(\"access_token\"));\n        params.putString(\"access_token\", decoded_token);\n      }\n\n      conn.setRequestMethod(\"POST\");\n      conn.setRequestProperty(\"Content-Type\", \"multipart/form-data;boundary=\" + strBoundary);\n      conn.setDoOutput(true);\n      conn.setDoInput(true);\n      conn.setRequestProperty(\"Connection\", \"Keep-Alive\");\n      conn.connect();\n      os = new BufferedOutputStream(conn.getOutputStream());\n\n      os.write((\"--\" + strBoundary + endLine).getBytes());\n      os.write((encodePostBody(params, strBoundary)).getBytes());\n      os.write((endLine + \"--\" + strBoundary + endLine).getBytes());\n\n      if (!dataparams.isEmpty()) {\n\n        for (String key : dataparams.keySet()) {\n          os.write(\n              (\"Content-Disposition: form-data; filename=\\\"\" + key + \"\\\"\" + endLine).getBytes());\n          os.write((\"Content-Type: content/unknown\" + endLine + endLine).getBytes());\n          os.write(dataparams.getByteArray(key));\n          os.write((endLine + \"--\" + strBoundary + endLine).getBytes());\n        }\n      }\n      os.flush();\n    }\n\n    String response = \"\";\n    try {\n      response = read(conn.getInputStream());\n    } catch (FileNotFoundException e) {\n      // Error Stream contains JSON that we can parse to a FB error\n      response = read(conn.getErrorStream());\n    }\n    return response;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9744, "initialization": ["URL url = new URL(*)"], "initializationStart": [553], "initializationEnd": [576], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 534, "tryExpressionEnd": 538, "tryBlockStart": 534, "tryBlockEnd": 1567, "catchExpressionStart": 1328, "catchExpressionEnd": 1348, "catchBlockStart": 1328, "catchBlockEnd": 1474, "exceptionHandlingCallStart": [1358], "exceptionHandlingCallEnd": [1377], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 617, "focalAPIEnd": 638, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setAllowUserInteraction(boolean)", "connection.setRequestMethod(String)", "connection.setDoOutput(boolean)", "connection.setDoInput(boolean)", "connection.setInstanceFollowRedirects(boolean)", "connection.getOutputStream()", "connection.getInputStream()", "connection.disconnect()"], "useStart": [646, 694, 737, 773, 808, 891, 1072, 1482], "useEnd": [686, 729, 765, 800, 852, 919, 1099, 1505], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nettapper/GameCenter/tree/master/GameCenterClient/src/client/ClientControl.java", "rawCode": "  /**\n   * Connects to server and sends the json string 'outputData'\n   *\n   * @param path The path connecting to\n   * @param gsonClientPack The json formated string to be sent to the server\n   * @return String The data from the server\n   */\n  public static String connect(String path, String gsonClientPack) {\n\n    System.out.println(\"Client attempting a connection to : \" + ADDRESS + path); // Debugging\n\n    HttpURLConnection connection;\n    URL link;\n    InputStream input;\n    String data = \"\";\n    DataOutputStream output;\n\n    try {\n      link = new URL(ADDRESS + path);\n      connection = (HttpURLConnection) link.openConnection();\n      connection.setAllowUserInteraction(true);\n      connection.setRequestMethod(\"POST\");\n      connection.setDoOutput(true);\n      connection.setDoInput(true);\n      connection.setInstanceFollowRedirects(false);\n\n      output = new DataOutputStream(connection.getOutputStream());\n      output.writeBytes(gsonClientPack);\n      output.flush();\n      output.close();\n\n      try { // Try to read the data from server\n        input = connection.getInputStream();\n        while (input.available() <= 0) ; // no data from server, waiting...\n        while (input.available() > 0) {\n          int number = input.read();\n          data += (char) number;\n        }\n        input.close();\n      } catch (Exception e) {\n        e.printStackTrace();\n        data = gsonClientPack; // in the case of an exception, return the original pack\n      }\n\n      connection.disconnect();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    // DEBUGGING //\n\n    System.out.println(\"Client succesfully connected to : \" + ADDRESS + path); // Debugging\n    System.out.println(\"Data To Server: \" + gsonClientPack);\n    System.out.println(\"Data From Server: \" + data);\n    System.out.println(\"---------------------------------------\");\n\n    // END //\n\n    return data;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9745, "initialization": ["URL url = new URL(String)"], "initializationStart": [307], "initializationEnd": [324], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 1077, "focalAPIEnd": 1097, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 1669, "followUpCheckExpressionEnd": 1686, "followUpCheckBlockStart": 1669, "followUpCheckBlockEnd": 1723, "use": ["connection.setDoOutput(boolean)", "connection.setUseCaches(boolean)", "connection.setFixedLengthStreamingMode(*)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.getOutputStream()", "connection.getResponseCode()", "connection.disconnect()"], "useStart": [1105, 1135, 1167, 1221, 1258, 1401, 1516, 1697], "useEnd": [1127, 1159, 1213, 1250, 1348, 1423, 1538, 1714], "hasFinally": 1, "cleanUpCall": ["HttpURLConnection.disconnect()"], "finallyExpressionStart": 1653, "finallyExpressionEnd": 1661, "finallyBlockStart": 1653, "finallyBlockEnd": 1729, "cleanUpCallStart": [1697], "cleanUpCallEnd": [1714], "url": "https://github.com/kuntae/Baas/tree/master/BacaSSample3/src/com/example/bacassample3/ServerUtilities.java", "rawCode": "  /**\n   * Issue a POST request to the server.\n   *\n   * @param endpoint POST address.\n   * @param params request parameters.\n   * @throws IOException propagated from POST.\n   */\n  private static void post(String endpoint, Map<String, String> params) throws IOException {\n    URL url;\n    try {\n      url = new URL(endpoint);\n    } catch (MalformedURLException e) {\n      throw new IllegalArgumentException(\"invalid url: \" + endpoint);\n    }\n    StringBuilder bodyBuilder = new StringBuilder();\n    Iterator<Entry<String, String>> iterator = params.entrySet().iterator();\n    // constructs the POST body using the parameters\n    while (iterator.hasNext()) {\n      Entry<String, String> param = iterator.next();\n      bodyBuilder.append(param.getKey()).append('=').append(param.getValue());\n      if (iterator.hasNext()) {\n        bodyBuilder.append('&');\n      }\n    }\n    String body = bodyBuilder.toString();\n    Log.v(TAG, \"Posting '\" + body + \"' to \" + url);\n    byte[] bytes = body.getBytes();\n    HttpURLConnection conn = null;\n    try {\n      conn = (HttpURLConnection) url.openConnection();\n      conn.setDoOutput(true);\n      conn.setUseCaches(false);\n      conn.setFixedLengthStreamingMode(bytes.length);\n      conn.setRequestMethod(\"POST\");\n      conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n      // post the request\n      OutputStream out = conn.getOutputStream();\n      out.write(bytes);\n      out.close();\n      // handle the response\n      int status = conn.getResponseCode();\n      if (status != 200) {\n        throw new IOException(\"Post failed with error code \" + status);\n      }\n    } finally {\n      if (conn != null) {\n        conn.disconnect();\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9746, "initialization": ["URL url = new URL(*)"], "initializationStart": [372], "initializationEnd": [408], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getJarName()", "new RuntimeException(String,*)"], "tryExpressionStart": 224, "tryExpressionEnd": 228, "tryBlockStart": 224, "tryBlockEnd": 1665, "catchExpressionStart": 1302, "catchExpressionEnd": 1322, "catchBlockStart": 1302, "catchBlockEnd": 1419, "exceptionHandlingCallStart": [564, 1336], "exceptionHandlingCallEnd": [587, 1412], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 437, "focalAPIEnd": 457, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [471], "useEnd": [492], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1420, "finallyExpressionEnd": 1428, "finallyBlockStart": 1420, "finallyBlockEnd": 1665, "cleanUpCallStart": [1247], "cleanUpCallEnd": [1257], "url": "https://github.com/svn2github/crux-framework/tree/master/branches/crux/4.1.0/Crux/src/tools/org/cruxframework/crux/tools/projectgen/DependenciesChecker.java", "rawCode": "  /**\n   * Retrieve a jar file from the web.\n   *\n   * @param requiredDeps Dependencies to install\n   */\n  private void downloadDependency(Dependency dependency) {\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n      checkDestinationFolder(dependency);\n\n      System.out.println(\"\\nDownloading file \" + dependency.getJarName() + \"...\");\n      URL url = new URL(dependency.getResourceURL());\n      URLConnection urlc = url.openConnection();\n\n      in = urlc.getInputStream();\n      out = new FileOutputStream(new File(dependency.getDestFolder(), dependency.getJarName()));\n      NumberFormat percentFormat = NumberFormat.getPercentInstance();\n      int blockSize = 4 * 1024;\n      byte[] buf = new byte[blockSize]; // 4K buffer\n      int bytesRead;\n      int progressBytes = 0;\n      int updateProgressBar = 0;\n      while ((bytesRead = in.read(buf)) != -1) {\n        out.write(buf, 0, bytesRead);\n        progressBytes += bytesRead;\n        updateProgressBar++;\n        if (updateProgressBar > 10) {\n          double percent = (progressBytes / dependency.getSize());\n          System.out.print(\"\\r\" + percentFormat.format(percent));\n          updateProgressBar = 0;\n        }\n      }\n      out.flush();\n      out.close();\n      in.close();\n      System.out.println(\"\\r100% \");\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error downloading file \" + dependency.getJarName(), e);\n    } finally {\n      if (in != null) {\n        try {\n          in.close();\n        } catch (IOException ioe) {\n        }\n      }\n      if (out != null) {\n        try {\n          out.close();\n        } catch (IOException ioe) {\n        }\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9747, "initialization": ["URL url = new URL(*)"], "initializationStart": [196], "initializationEnd": [219], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["fail(String)"], "tryExpressionStart": 170, "tryExpressionEnd": 174, "tryBlockStart": 170, "tryBlockEnd": 1125, "catchExpressionStart": 974, "catchExpressionEnd": 994, "catchBlockStart": 974, "catchBlockEnd": 1125, "exceptionHandlingCallStart": [1090], "exceptionHandlingCallEnd": [1118], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 248, "focalAPIEnd": 272, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [341], "useEnd": [362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jonasberglund/skrubb_DAT255/tree/master/H-sektionen/src/Test/InfoTest.java", "rawCode": "  /**\n   * This test downloads a JSON string from the server, checks if keys that should be found, are\n   * found.\n   */\n  @Test\n  public void JSONFromServerTest() {\n    try {\n      URL infoURL = new URL(Constants.INFO);\n      URLConnection conn = infoURL.openConnection();\n      BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n      StringBuilder jsonStringBuilder = new StringBuilder();\n\n      String line;\n      while ((line = in.readLine()) != null) jsonStringBuilder.append(line);\n\n      in.close();\n\n      JSONParser parser = new JSONParser();\n      JSONObject o = (JSONObject) parser.parse(jsonStringBuilder.toString());\n\n      // Check if expected values are found in the JSONObject.\n      assertTrue(\"key \\\"members\\\" was not found\", o.containsKey(\"members\"));\n      assertTrue(\"key \\\"openinghours\\\" was not found\", o.containsKey(\"openinghours\"));\n      assertTrue(\"key \\\"links\\\" was not found\", o.containsKey(\"links\"));\n\n    } catch (Exception e) {\n      // Could also be connection error, see the test result of serverConnectionTest().\n      fail(\"Could not parse JSON\");\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9748, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["e(String,String,*)", "printStackTrace()"], "tryExpressionStart": 117, "tryExpressionEnd": 121, "tryBlockStart": 117, "tryBlockEnd": 328, "catchExpressionStart": 164, "catchExpressionEnd": 186, "catchBlockStart": 164, "catchBlockEnd": 328, "exceptionHandlingCallStart": [235, 283], "exceptionHandlingCallEnd": [275, 302], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(url==null)", "guardType": "IF {", "guardExpressionStart": 52, "guardExpressionEnd": 68, "guardBlockStart": 52, "guardBlockEnd": 81, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 136, "focalAPIEnd": 156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.connect()"], "useStart": [345], "useEnd": [359], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anffernee/letuwb/tree/master/src/com/zrd/zr/pnj/SecureURL.java", "rawCode": "  public URLConnection getConnection(URL url) {\n    if (url == null) return null;\n    URLConnection conn = null;\n    try {\n      conn = url.openConnection();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      Log.e(\"DEBUGTAG\", \"Remtoe Exception\", e);\n      e.printStackTrace();\n      return null;\n    }\n    try {\n      conn.connect();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      Log.e(\"DEBUGTAG\", \"Remtoe Exception\", e);\n      e.printStackTrace();\n      return null;\n    }\n\n    return conn;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9749, "initialization": ["URL url = new URL(*)"], "initializationStart": [188], "initializationEnd": [209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 262, "focalAPIEnd": 282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.connect()", "connection.getResponseCode()"], "useStart": [290, 362], "useEnd": [304, 384], "hasFinally": 1, "cleanUpCall": ["stop()"], "finallyExpressionStart": 393, "finallyExpressionEnd": 401, "finallyBlockStart": 393, "finallyBlockEnd": 422, "cleanUpCallStart": [409], "cleanUpCallEnd": [415], "url": "https://github.com/johnugeorge/Hadoop-mdfs/tree/master/hadoop-1.2.1/src/test/org/apache/hadoop/security/authentication/client/TestPseudoAuthenticator.java", "rawCode": "  @Test\n  public void testAnonymousDisallowed() throws Exception {\n    setAuthenticationHandlerConfig(getAuthenticationHandlerConfiguration(false));\n    start();\n    try {\n      URL url = new URL(getBaseURL());\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      conn.connect();\n      assertEquals(HttpURLConnection.HTTP_UNAUTHORIZED, conn.getResponseCode());\n    } finally {\n      stop();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9750, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 397, "focalAPIEnd": 417, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getDoOutput()"], "useStart": [432], "useEnd": [459], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Flowdalic/openfire/tree/master/src/plugins/fastpath/src/java/org/jivesoftware/xmpp/workgroup/utils/URLFileSystem.java", "rawCode": "  /**\n   * Tests whether the application can modify the resource at the specified {@link URL}.\n   *\n   * @return <CODE>true</CODE> if and only if the specified {@link URL} points to a file that exists\n   *     <EM>and</EM> the application is allowed to write to the file; <CODE>false</CODE> otherwise.\n   */\n  public boolean canWrite(URL url) {\n    try {\n      final URLConnection urlConnection = url.openConnection();\n      return urlConnection.getDoOutput();\n    } catch (Exception e) {\n      return false;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9751, "initialization": ["URL url = new URL(String)"], "initializationStart": [364], "initializationEnd": [378], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 67, "tryExpressionEnd": 71, "tryBlockStart": 67, "tryBlockEnd": 943, "catchExpressionStart": 889, "catchExpressionEnd": 909, "catchBlockStart": 889, "catchBlockEnd": 943, "exceptionHandlingCallStart": [917], "exceptionHandlingCallEnd": [936], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 431, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sendRequest(connection)"], "useStart": [477], "useEnd": [494], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fbierhaus/hackathon/tree/master/client/TVNight/src/com/hackathon/tvnight/api/GetShowDetail.java", "rawCode": "  public TVShow getDetail(String id) {\n    TVShow show = null;\n    try {\n      // get show time\n      String query =\n          ApiConstant.COMCAST_SERVER\n              + ApiConstant.QUERY_DETAILS\n              + \"?\"\n              + \"q=id%3A\"\n              + id\n              + // id:<id>\n              \"&\"\n              + ApiConstant.MASHERY_KEY;\n\n      URL url = new URL(query);\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      String response = sendRequest(conn);\n      Log.d(this.getClass().getSimpleName(), \"show detail ---> \" + response);\n      ShowEntityList detailList = JSONHelper.fromJson(response, ShowEntityList.class);\n      if (detailList != null) {\n        ArrayList<TVShow> list = detailList.getEntities();\n        if (list != null && list.size() > 0) {\n          // there should be only 1\n          show = list.get(0);\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return show;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9752, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 1093, "focalAPIEnd": 1122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestProperty(String,String)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.setDoInput(boolean)", "connection.setRequestProperty(String,String)", "connection.connect()", "connection.getOutputStream()", "connection.getInputStream()", "connection.getErrorStream()"], "useStart": [1128, 1861, 1898, 1992, 2022, 2051, 2110, 2162, 2896, 3050], "useEnd": [1248, 1890, 1984, 2014, 2043, 2102, 2124, 2184, 2917, 3071], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/serp256/lightning/tree/master/src/social/facebook/android/sdk/src/com/facebook/android/Util.java", "rawCode": "  /**\n   * Connect to an HTTP URL and return the response as a string.\n   *\n   * <p>Note that the HTTP method override is used on non-GET requests. (i.e. requests are made as\n   * \"POST\" with method specified in the body).\n   *\n   * @param url - the resource to open: must be a welformed URL\n   * @param method - the HTTP method to use (\"GET\", \"POST\", etc.)\n   * @param params - the query parameter for the URL (e.g. access_token=foo)\n   * @return the URL contents as a String\n   * @throws MalformedURLException - if the URL format is invalid\n   * @throws IOException - if a network problem occurs\n   */\n  public static String openUrl(String url, String method, Bundle params)\n      throws MalformedURLException, IOException {\n    // random string as boundary for multi-part http post\n    String strBoundary = \"3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f\";\n    String endLine = \"\\r\\n\";\n\n    OutputStream os;\n\n    if (method.equals(\"GET\")) {\n      url = url + \"?\" + encodeUrl(params);\n    }\n    Util.logd(\"Facebook-Util\", method + \" URL: \" + url);\n    HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n    conn.setRequestProperty(\n        \"User-Agent\", System.getProperties().getProperty(\"http.agent\") + \" FacebookAndroidSDK\");\n    if (!method.equals(\"GET\")) {\n      Bundle dataparams = new Bundle();\n      for (String key : params.keySet()) {\n        Object parameter = params.get(key);\n        if (parameter instanceof byte[]) {\n          dataparams.putByteArray(key, (byte[]) parameter);\n        }\n      }\n\n      // use method override\n      if (!params.containsKey(\"method\")) {\n        params.putString(\"method\", method);\n      }\n\n      if (params.containsKey(\"access_token\")) {\n        String decoded_token = URLDecoder.decode(params.getString(\"access_token\"));\n        params.putString(\"access_token\", decoded_token);\n      }\n\n      conn.setRequestMethod(\"POST\");\n      conn.setRequestProperty(\"Content-Type\", \"multipart/form-data;boundary=\" + strBoundary);\n      conn.setDoOutput(true);\n      conn.setDoInput(true);\n      conn.setRequestProperty(\"Connection\", \"Keep-Alive\");\n      conn.connect();\n      os = new BufferedOutputStream(conn.getOutputStream());\n\n      os.write((\"--\" + strBoundary + endLine).getBytes());\n      os.write((encodePostBody(params, strBoundary)).getBytes());\n      os.write((endLine + \"--\" + strBoundary + endLine).getBytes());\n\n      if (!dataparams.isEmpty()) {\n\n        for (String key : dataparams.keySet()) {\n          os.write(\n              (\"Content-Disposition: form-data; filename=\\\"\" + key + \"\\\"\" + endLine).getBytes());\n          os.write((\"Content-Type: content/unknown\" + endLine + endLine).getBytes());\n          os.write(dataparams.getByteArray(key));\n          os.write((endLine + \"--\" + strBoundary + endLine).getBytes());\n        }\n      }\n      os.flush();\n    }\n\n    String response = \"\";\n    try {\n      response = read(conn.getInputStream());\n    } catch (FileNotFoundException e) {\n      // Error Stream contains JSON that we can parse to a FB error\n      response = read(conn.getErrorStream());\n    }\n    return response;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9753, "initialization": ["URL url = new URL(*)"], "initializationStart": [756], "initializationEnd": [823], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 904, "focalAPIEnd": 924, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoOutput(boolean)", "connection.getInputStream()"], "useStart": [931, 1229], "useEnd": [959, 1256], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SpigotMC/BungeeCord/tree/master/proxy/src/main/java/net/md_5/bungee/Metrics.java", "rawCode": "  /** Generic method that posts a plugin to the metrics website */\n  private void postPlugin(boolean isPing) throws IOException {\n    // Construct the post data\n    final StringBuilder data = new StringBuilder();\n    data.append(encode(\"guid\"))\n        .append('=')\n        .append(encode(BungeeCord.getInstance().config.getUuid()));\n    encodeDataPair(data, \"version\", ProxyServer.getInstance().getVersion());\n    encodeDataPair(data, \"server\", \"0\");\n    encodeDataPair(data, \"players\", Integer.toString(ProxyServer.getInstance().getOnlineCount()));\n    encodeDataPair(data, \"revision\", String.valueOf(REVISION));\n\n    // If we're pinging, append it\n    if (isPing) {\n      encodeDataPair(data, \"ping\", \"true\");\n    }\n\n    // Create the url\n    URL url = new URL(BASE_URL + String.format(REPORT_URL, encode(\"BungeeCord\")));\n\n    // Connect to the website\n    URLConnection connection;\n\n    connection = url.openConnection();\n\n    connection.setDoOutput(true);\n    final BufferedReader reader;\n    final String response;\n    try (OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream())) {\n      writer.write(data.toString());\n      writer.flush();\n      reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n      response = reader.readLine();\n    }\n    reader.close();\n\n    if (response == null || response.startsWith(\"ERR\")) {\n      throw new IOException(response); // Throw the exception\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9754, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 233, "focalAPIEnd": 253, "followUpCheck": "connection instanceof HttpURLConnection", "checkType": "IF", "followUpCheckExpressionStart": 1026, "followUpCheckExpressionEnd": 1070, "followUpCheckBlockStart": 1026, "followUpCheckBlockEnd": 1405, "use": ["url.openConnection(Proxy)", "connection.setAllowUserInteraction(boolean)", "adjustRequestForProxyInjection(HttpRequest,connection)", "connection.addRequestProperty(String,String)", "connection.setRequestProperty(String,String)", "connection.addRequestProperty(*,*)", "connection.setUseCaches(boolean)", "customizeConnection(String,String,HttpRequest,connection)", "connection.setDoInput(boolean)", "connection.setDoOutput(boolean)", "connection.getOutputStream()", "connection.getInputStream()", "connection.getHeaderFieldKey(int)", "connection.getHeaderField(int)", "connection.getHeaderFieldKey(int)", "connection.getHeaderField(int)"], "useStart": [756, 829, 909, 2787, 2972, 3055, 3380, 3445, 3531, 3667, 3717, 4591, 4965, 5015, 5298, 5343], "useEnd": [816, 870, 960, 2826, 3023, 3137, 3410, 3512, 3558, 3695, 3745, 4618, 4996, 5043, 5329, 5371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/webmetrics/browsermob-proxy/tree/master/src/main/java/org/browsermob/proxy/selenium/SeleniumProxyHandler.java", "rawCode": "  protected long proxyPlainTextRequest(\n      URL url, String pathInContext, String pathParams, HttpRequest request, HttpResponse response)\n      throws IOException {\n    log.fine(\"PROXY URL=\" + url);\n\n    URLConnection connection = url.openConnection();\n    if (System.getProperty(\"http.proxyHost\") != null\n        && System.getProperty(\"https.proxyHost\") == null\n        && \"https\".equals(url.getProtocol())) {\n      /* Proxy HTTPS connections even if https.proxyHost isn't set because that's\n      what Selenium used to do. */\n      String proxyHost = System.getProperty(\"http.proxyHost\");\n      int proxyPort = Integer.getInteger(\"http.proxyPort\");\n      InetSocketAddress proxyAddress = new InetSocketAddress(proxyHost, proxyPort);\n      connection = url.openConnection(new Proxy(Proxy.Type.HTTP, proxyAddress));\n    }\n\n    connection.setAllowUserInteraction(false);\n\n    if (proxyInjectionMode) {\n      adjustRequestForProxyInjection(request, connection);\n    }\n\n    // Set method\n    HttpURLConnection http = null;\n    if (connection instanceof HttpURLConnection) {\n      http = (HttpURLConnection) connection;\n      http.setRequestMethod(request.getMethod());\n      http.setInstanceFollowRedirects(false);\n      if (trustAllSSLCertificates && connection instanceof HttpsURLConnection) {\n        TrustEverythingSSLTrustManager.trustAllSSLCertificates((HttpsURLConnection) connection);\n      }\n    }\n\n    // check connection header\n    String connectionHdr = request.getField(HttpFields.__Connection);\n    if (connectionHdr != null\n        && (connectionHdr.equalsIgnoreCase(HttpFields.__KeepAlive)\n            || connectionHdr.equalsIgnoreCase(HttpFields.__Close))) connectionHdr = null;\n\n    // copy headers\n    boolean xForwardedFor = false;\n    boolean isGet = \"GET\".equals(request.getMethod());\n    boolean hasContent = false;\n    Enumeration enm = request.getFieldNames();\n    while (enm.hasMoreElements()) {\n      // TODO could be better than this!\n      String hdr = (String) enm.nextElement();\n\n      if (_DontProxyHeaders.containsKey(hdr) || !_chained && _ProxyAuthHeaders.containsKey(hdr))\n        continue;\n      if (connectionHdr != null && connectionHdr.indexOf(hdr) >= 0) continue;\n\n      if (!isGet && HttpFields.__ContentType.equals(hdr)) hasContent = true;\n\n      Enumeration vals = request.getFieldValues(hdr);\n      while (vals.hasMoreElements()) {\n        String val = (String) vals.nextElement();\n        if (val != null) {\n          // don't proxy Referer headers if the referer is Selenium!\n          if (\"Referer\".equals(hdr) && (-1 != val.indexOf(\"/selenium-server/\"))) {\n            continue;\n          }\n          if (!isGet && HttpFields.__ContentLength.equals(hdr) && Integer.parseInt(val) > 0) {\n            hasContent = true;\n          }\n\n          connection.addRequestProperty(hdr, val);\n          xForwardedFor |= HttpFields.__XForwardedFor.equalsIgnoreCase(hdr);\n        }\n      }\n    }\n\n    // Proxy headers\n    if (!_anonymous) connection.setRequestProperty(\"Via\", \"1.1 (jetty)\");\n    if (!xForwardedFor)\n      connection.addRequestProperty(HttpFields.__XForwardedFor, request.getRemoteAddr());\n\n    // a little bit of cache control\n    String cache_control = request.getField(HttpFields.__CacheControl);\n    if (cache_control != null\n        && (cache_control.indexOf(\"no-cache\") >= 0 || cache_control.indexOf(\"no-store\") >= 0))\n      connection.setUseCaches(false);\n\n    // customize Connection\n    customizeConnection(pathInContext, pathParams, request, connection);\n\n    try {\n      connection.setDoInput(true);\n\n      // do input thang!\n      InputStream in = request.getInputStream();\n      if (hasContent) {\n        connection.setDoOutput(true);\n        IO.copy(in, connection.getOutputStream());\n      }\n\n      // Connect\n      connection.connect();\n    } catch (Exception e) {\n      // TODO(simon): Whhhaaaat?\n      // LogSupport.ignore(log, e);\n    }\n\n    InputStream proxy_in = null;\n\n    // handler status codes etc.\n    int code = -1;\n    if (http != null) {\n      proxy_in = http.getErrorStream();\n\n      try {\n        code = http.getResponseCode();\n      } catch (SSLHandshakeException e) {\n        throw new RuntimeException(\n            \"Couldn't establish SSL handshake. Try using trustAllSSLCertificates.\\n\"\n                + e.getLocalizedMessage(),\n            e);\n      }\n      response.setStatus(code);\n      response.setReason(http.getResponseMessage());\n\n      String contentType = http.getContentType();\n      log.fine(\"Content-Type is: \" + contentType);\n    }\n\n    if (proxy_in == null) {\n      try {\n        proxy_in = connection.getInputStream();\n      } catch (Exception e) {\n        // TODO(simon): Whhaaattt?\n        // LogSupport.ignore(log, e);\n        proxy_in = http.getErrorStream();\n      }\n    }\n\n    // clear response defaults.\n    response.removeField(HttpFields.__Date);\n    response.removeField(HttpFields.__Server);\n\n    // set response headers\n    int h = 0;\n    String hdr = connection.getHeaderFieldKey(h);\n    String val = connection.getHeaderField(h);\n    while (hdr != null || val != null) {\n      if (hdr != null\n          && val != null\n          && !_DontProxyHeaders.containsKey(hdr)\n          && (_chained || !_ProxyAuthHeaders.containsKey(hdr))) response.addField(hdr, val);\n      h++;\n      hdr = connection.getHeaderFieldKey(h);\n      val = connection.getHeaderField(h);\n    }\n    if (!_anonymous) response.setField(\"Via\", \"1.1 (jetty)\");\n\n    response.removeField(HttpFields.__ETag); // possible cksum? Stop caching...\n    response.removeField(HttpFields.__LastModified); // Stop caching...\n\n    // Handled\n    long bytesCopied = -1;\n    request.setHandled(true);\n    if (proxy_in != null) {\n      bytesCopied = ModifiedIO.copy(proxy_in, response.getOutputStream());\n    }\n\n    return bytesCopied;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9755, "initialization": ["URL url = new URL(String)"], "initializationStart": [429], "initializationEnd": [477], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 576, "focalAPIEnd": 596, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 718, "followUpCheckExpressionEnd": 735, "followUpCheckBlockStart": 718, "followUpCheckBlockEnd": 772, "use": ["connection.getResponseCode()", "connection.disconnect()"], "useStart": [620, 746], "useEnd": [642, 763], "hasFinally": 1, "cleanUpCall": ["HttpsURLConnection.disconnect()"], "finallyExpressionStart": 702, "finallyExpressionEnd": 710, "finallyBlockStart": 702, "finallyBlockEnd": 803, "cleanUpCallStart": [746], "cleanUpCallEnd": [763], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/sun/security/ssl/sun/net/www/protocol/https/HttpsURLConnection/Identities.java", "rawCode": "  void doClientSide() throws Exception {\n    SSLContext context =\n        getSSLContext(\n            trusedCertStr, clientCertStr, clientModulus, clientPrivateExponent, passphrase);\n\n    SSLContext.setDefault(context);\n\n    /*\n     * Wait for server to get started.\n     */\n    while (!serverReady) {\n      Thread.sleep(50);\n    }\n\n    HttpsURLConnection http = null;\n\n    /* establish http connection to server */\n    URL url = new URL(\"https://localhost:\" + serverPort + \"/\");\n    System.out.println(\"url is \" + url.toString());\n\n    try {\n      http = (HttpsURLConnection) url.openConnection();\n\n      int respCode = http.getResponseCode();\n      System.out.println(\"respCode = \" + respCode);\n    } finally {\n      if (http != null) {\n        http.disconnect();\n      }\n      closeReady = true;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9756, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["url.getFile()"], "configurationStart": [116], "configurationEnd": [129], "guardCondition": "url.getFile().endsWith(\"!/\",)", "guardType": "IF {", "guardExpressionStart": 112, "guardExpressionEnd": 145, "guardBlockStart": 112, "guardBlockEnd": 395, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 445, "focalAPIEnd": 465, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.toExternalForm()", "new URLJarHandler(URL,connection,JarFile,String)", "getInternalURLs(url,String)"], "useStart": [561, 675, 1027], "useEnd": [584, 721, 1058], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/main/java/java/net/URLClassLoader.java", "rawCode": "  private URLHandler createURLJarHandler(URL url) {\n    String prefixName;\n    String file = url.getFile();\n    if (url.getFile().endsWith(\"!/\")) {\n      prefixName = \"\";\n    } else {\n      int sepIdx = file.lastIndexOf(\"!/\");\n      if (sepIdx == -1) {\n        // Invalid URL, don't look here again\n        return null;\n      }\n      sepIdx += 2;\n      prefixName = file.substring(sepIdx);\n    }\n    try {\n      URL jarURL = ((JarURLConnection) url.openConnection()).getJarFileURL();\n      JarURLConnection juc =\n          (JarURLConnection) new URL(\"jar\", \"\", jarURL.toExternalForm() + \"!/\").openConnection();\n      JarFile jf = juc.getJarFile();\n      URLJarHandler jarH = new URLJarHandler(url, jarURL, jf, prefixName);\n\n      if (jarH.getIndex() == null) {\n        try {\n          Manifest manifest = jf.getManifest();\n          if (manifest != null) {\n            String classpath = manifest.getMainAttributes().getValue(Attributes.Name.CLASS_PATH);\n            if (classpath != null) {\n              searchList.addAll(0, getInternalURLs(url, classpath));\n            }\n          }\n        } catch (IOException e) {\n        }\n      }\n      return jarH;\n    } catch (IOException e) {\n    }\n    return null;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9757, "initialization": ["URL url = new URL(*)"], "initializationStart": [102], "initializationEnd": [131], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 144, "focalAPIEnd": 169, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/penSecIT/commons-vfs/tree/master/tags/vfs-1.0-RC/core/src/main/java/org/apache/commons/vfs/impl/URLStreamHandlerProxy.java", "rawCode": "  protected URLConnection openConnection(final URL url) throws IOException {\n    final URL proxyURL = new URL(url.toExternalForm());\n    return proxyURL.openConnection();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9758, "initialization": ["URL url = new URL(String)"], "initializationStart": [437], "initializationEnd": [453], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new WebServiceException(*)"], "tryExpressionStart": 242, "tryExpressionEnd": 246, "tryBlockStart": 242, "tryBlockEnd": 2035, "catchExpressionStart": 1783, "catchExpressionEnd": 1803, "catchBlockStart": 1783, "catchBlockEnd": 1850, "exceptionHandlingCallStart": [1817], "exceptionHandlingCallEnd": [1843], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 488, "focalAPIEnd": 508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoInput(boolean)", "connection.setDoOutput(boolean)", "connection.getOutputStream()", "connection.getInputStream()", "connection.getHeaderFields()"], "useStart": [539, 575, 640, 1044, 1693], "useEnd": [566, 603, 668, 1071, 1721], "hasFinally": 1, "cleanUpCall": ["OutputStream.close()"], "finallyExpressionStart": 1851, "finallyExpressionEnd": 1859, "finallyBlockStart": 1851, "finallyBlockEnd": 2035, "cleanUpCallStart": [1898], "cleanUpCallEnd": [1909], "url": "https://github.com/mdaniel/svn-caucho-com-resin/tree/master/modules/extra/src/com/caucho/soap/jaxws/AbstractDispatch.java", "rawCode": "  private void invokeNow(T msg, ResponseImpl<T> response) throws WebServiceException {\n    if (log.isLoggable(Level.FINEST)) log.finest(\"AbstractDispatch.invokeNow(\" + msg + \")\");\n\n    InputStream in = null;\n    OutputStream out = null;\n\n    try {\n      String urlSpec = (String) _requestContext.get(ENDPOINT_ADDRESS_PROPERTY);\n\n      if (urlSpec == null) throw new WebServiceException(L.l(\"Endpoint address not set\"));\n\n      URL url = new URL(urlSpec);\n      URLConnection connection = url.openConnection();\n\n      if (response != null) connection.setDoInput(true);\n\n      connection.setDoOutput(true);\n\n      // send request\n      out = connection.getOutputStream();\n\n      OutputStreamWriter writer = null;\n\n      if (_mode == Service.Mode.PAYLOAD) {\n        writer = new OutputStreamWriter(out);\n\n        JAXWSUtil.writeStartSOAPEnvelope(writer, _soapNamespace);\n      }\n\n      writeRequest(msg, out);\n\n      if (_mode == Service.Mode.PAYLOAD) JAXWSUtil.writeEndSOAPEnvelope(writer);\n\n      out.flush();\n\n      // read response\n      in = connection.getInputStream();\n\n      // XXX for some reason, it seems this is necessary to force the output\n      if (response == null) {\n        while (in.read() >= 0) {}\n\n        return;\n      }\n\n      ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\n      if (_mode == Service.Mode.PAYLOAD) {\n        JAXWSUtil.extractSOAPBody(in, buffer);\n      } else {\n        // XXX is a copy necessary here or should we expect the client to\n        // close the InputStream?\n        int ch = -1;\n\n        while ((ch = in.read()) != -1) buffer.write(ch);\n      }\n\n      response.set(formatResponse(buffer.toByteArray()));\n      response.setContext(connection.getHeaderFields());\n    } catch (WebServiceException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new WebServiceException(e);\n    } finally {\n      try {\n        if (out != null) out.close();\n\n        if (in != null) in.close();\n      } catch (IOException e) {\n        throw new WebServiceException(e);\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9759, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": [], "tryExpressionStart": 691, "tryExpressionEnd": 695, "tryBlockStart": 691, "tryBlockEnd": 1823, "catchExpressionStart": 1594, "catchExpressionEnd": 1616, "catchBlockStart": 1594, "catchBlockEnd": 1628, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["url.toString()"], "configurationStart": [994], "configurationEnd": [1008], "guardCondition": "!(url.getHost().equals(documentBase.getHost(),)&&url.getPort()==documentBase.getPort())", "guardType": "IF {", "guardExpressionStart": 703, "guardExpressionEnd": 795, "guardBlockStart": 703, "guardBlockEnd": 1247, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 1182, "focalAPIEnd": 1202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [1217], "useEnd": [1238], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1514, "finallyExpressionEnd": 1522, "finallyBlockStart": 1514, "finallyBlockEnd": 1823, "cleanUpCallStart": [1572], "cleanUpCallEnd": [1582], "url": "https://github.com/NCIP/stats-application-commons/tree/master/src/gov/nih/nci/caintegrator/application/gpvisualizer/CaIntegratorRunVisualizer.java", "rawCode": "  /**\n   * download a URL to a local file and return a File object for it\n   *\n   * @param url The url to download.\n   * @param dir The directory to download the URL to.\n   * @param filename The filename to download the URL to.\n   */\n\n  // No change in this method for CaIntegrator\n  protected File downloadFile(URL url, File dir, String filename) throws IOException {\n    // System.out.println(\"downloadFile: filename = \" + filename);\n    // System.out.println(\"downloadFile: dir = \" + dir.getAbsolutePath());\n    // System.out.println(\"downloadFile: url = \" + url.toString());\n    InputStream is = null;\n    FileOutputStream fos = null;\n    File file = null;\n    GetMethod get = null;\n    try {\n      if (url.getHost().equals(documentBase.getHost()) && url.getPort() == documentBase.getPort()) {\n        HttpClient client = new HttpClient();\n        client.setState(new HttpState());\n        client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);\n        get = new GetMethod(url.toString());\n        get.addRequestHeader(\"Cookie\", cookie);\n        client.executeMethod(get);\n        is = get.getResponseBodyAsStream();\n      } else {\n        URLConnection conn = url.openConnection();\n        is = conn.getInputStream();\n      }\n      dir.mkdirs();\n      file = new File(dir, filename);\n      fos = new FileOutputStream(file);\n      byte[] buf = new byte[100000];\n      int j;\n      int i = 0;\n\n      while ((j = is.read(buf, 0, buf.length)) != -1) {\n        fos.write(buf, 0, j);\n      }\n    } finally {\n      if (is != null) {\n        try {\n          is.close();\n        } catch (IOException e) {\n\n        }\n      }\n      if (fos != null) {\n        try {\n          fos.close();\n        } catch (IOException e) {\n\n        }\n      }\n      if (get != null) {\n        get.releaseConnection();\n      }\n    }\n\n    return file;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9760, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 752, "focalAPIEnd": 772, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestMethod(String)", "connection.getInputStream()"], "useStart": [778, 922], "useEnd": [814, 943], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HSR01/KBS_JAVA/tree/master/java_backend_lokale_backup/src/parsers/JSON.java", "rawCode": "  /**\n   * Haal JSON op uit URL (geef requestmethode mee) zie json.org voor de JSON specificatie.\n   *\n   * @param url De url waar de JSON van op te halen is.\n   * @param requestMethod\n   *     <UL>\n   *       <LI>GET\n   *       <LI>POST\n   *       <LI>HEAD\n   *       <LI>OPTIONS\n   *       <LI>PUT\n   *       <LI>DELETE\n   *       <LI>TRACE\n   *     </UL>\n   *     are legal, subject to protocol restrictions. The default method is GET.\n   * @return JSON\n   * @throws IOException Afvangen omdat de JSON invalide kan zijn.\n   */\n  public String GetJSONFromURL(URL url, String requestMethod) throws IOException {\n    HttpURLConnection conn;\n    BufferedReader rd;\n    String line, JSONResult = \"\";\n\n    // Open connectie\n    conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(requestMethod);\n    // Haal JSON op (zie json.org voor de specificatie)\n    rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n    // Voeg lijnen van JSON toe aan JSONResult\n    while ((line = rd.readLine()) != null) {\n      JSONResult += line;\n    }\n    // Sluit connectie\n    rd.close();\n\n    return JSONResult;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9761, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 377, "focalAPIEnd": 397, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kbachl/brix-cms-backup/tree/master/brix-demo/src/main/java/org/brixcms/demo/web/tile/stockquote/StockQuoteRequest.java", "rawCode": "  /**\n   * Sets up the HTTP connection.\n   *\n   * @param url the url to connect to\n   * @param length the length to the input message\n   * @return the HttpurLConnection\n   * @throws IOException\n   * @throws ProtocolException\n   */\n  private HttpURLConnection setUpHttpConnection(URL url, int length)\n      throws IOException, ProtocolException {\n    URLConnection connection = url.openConnection();\n    HttpURLConnection httpConn = (HttpURLConnection) connection;\n    // Set the appropriate HTTP parameters.\n    httpConn.setRequestProperty(\"Content-Length\", String.valueOf(length));\n    httpConn.setRequestProperty(\"Content-Type\", \"text/xml; charset=utf-8\");\n    httpConn.setRequestProperty(\"SOAPAction\", \"\\\"http://www.webserviceX.NET/GetQuote\\\"\");\n    httpConn.setRequestMethod(\"POST\");\n    httpConn.setDoOutput(true);\n    httpConn.setDoInput(true);\n    return httpConn;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9762, "initialization": ["URL url = new URL(String)"], "initializationStart": [114], "initializationEnd": [131], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new BuildException(*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 706, "catchExpressionStart": 644, "catchExpressionEnd": 664, "catchBlockStart": 644, "catchBlockEnd": 706, "exceptionHandlingCallStart": [678], "exceptionHandlingCallEnd": [699], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 163, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoInput(boolean)", "connection.setUseCaches(boolean)", "connection.getInputStream()"], "useStart": [191, 223, 300], "useEnd": [215, 250, 324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ciaranj/luntbuild/tree/master/luntbuild/contrib/anttask/src/java/net/mccg/lunt/LuntDeployTask.java", "rawCode": "  void deploy(final String filepath) {\n    log(\"Deploying Lunt Artifact: \" + filepath);\n    try {\n      URL url = new URL(filepath);\n      URLConnection urlConn = url.openConnection();\n      urlConn.setDoInput(true);\n      urlConn.setUseCaches(false);\n      DataInputStream dis = new DataInputStream(urlConn.getInputStream());\n\n      if (isLocalCopy()) {\n        FileOutputStream fos = new FileOutputStream(deployDir + \"/\" + getArtifactName(artifact));\n        int c;\n        while ((c = dis.read()) != -1) fos.write(c);\n        fos.close();\n      } else {\n        getSshService().sftp(dis, deployDir, getArtifactName(artifact));\n      }\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9763, "initialization": ["Proxy proxy = new Proxy(*,InetSocketAddress)"], "initializationStart": [356], "initializationEnd": [406], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 468, "focalAPIEnd": 494, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,String)", "connection.connect()", "connection.getResponseCode()", "connection.getHeaderField(String)", "getAuthorization(url,*,String,String,String,String)", "connection.getHeaderField(String)", "getAuthorization(url,*,String,String,String,String)", "connection.disconnect()"], "useStart": [500, 581, 701, 774, 818, 961, 1047, 1389, 1468, 1617], "useEnd": [533, 652, 761, 792, 844, 1006, 1243, 1432, 1578, 1638], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CleverCloud/Bianca/tree/master/bianca/src/main/java/com/clevercloud/bianca/lib/curl/HttpConnection.java", "rawCode": "  /** Handles the authentication for this connection. */\n  public void authenticateImpl()\n      throws ConnectException, ProtocolException, SocketTimeoutException, IOException {\n    Proxy proxy = Proxy.NO_PROXY;\n\n    if (_proxyURL != null) {\n      InetSocketAddress address = new InetSocketAddress(_proxyURL.getHost(), _proxyURL.getPort());\n\n      proxy = new Proxy(Proxy.Type.valueOf(_proxyType), address);\n    }\n\n    HttpURLConnection headConn = (HttpURLConnection) _URL.openConnection(proxy);\n    headConn.setRequestMethod(\"HEAD\");\n\n    if (_proxyAuthorization != null) {\n      headConn.setRequestProperty(\"Proxy-Authorization\", _proxyAuthorization);\n    }\n\n    if (_authorization != null) {\n      headConn.setRequestProperty(\"Authorization\", _authorization);\n    }\n\n    headConn.connect();\n\n    int responseCode = headConn.getResponseCode();\n\n    if (responseCode == HttpURLConnection.HTTP_PROXY_AUTH && _proxyAuthorization == null) {\n      String header = headConn.getHeaderField(\"Proxy-Authenticate\");\n\n      _proxyAuthorization =\n          getAuthorization(\n              _URL,\n              _conn.getRequestMethod(),\n              header,\n              \"Proxy-Authorization\",\n              _proxyUsername,\n              _proxyPassword);\n      authenticateImpl();\n    } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED && _authorization == null) {\n      String header = headConn.getHeaderField(\"WWW-Authenticate\");\n\n      _authorization =\n          getAuthorization(\n              _URL, _conn.getRequestMethod(), header, \"Authorization\", _username, _password);\n      authenticateImpl();\n    }\n\n    headConn.disconnect();\n  }\n"}, {"dataset": "openConnection", "exampleID": 9764, "initialization": ["URL url = new URL(*)"], "initializationStart": [162], "initializationEnd": [194], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "e(String,String)"], "tryExpressionStart": 134, "tryExpressionEnd": 138, "tryBlockStart": 134, "tryBlockEnd": 710, "catchExpressionStart": 573, "catchExpressionEnd": 593, "catchBlockStart": 573, "catchBlockEnd": 710, "exceptionHandlingCallStart": [667, 603], "exceptionHandlingCallEnd": [679, 680], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 231, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setConnectTimeout(int)", "connection.setReadTimeout(int)", "connection.getInputStream()"], "useStart": [265, 310, 432], "useEnd": [300, 342, 459], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moai/moai-beta/tree/master/ant/host-source/source/project/external/tapjoy/project/src/com/tapjoy/TJCVirtualGoods.java", "rawCode": "    protected Drawable doInBackground(Object... obj) {\n      itemIcon = (ImageView) obj[0];\n      item = (VGStoreItem) obj[1];\n\n      try {\n        URL fileURL = new URL(item.getThumbImageUrl());\n        URLConnection connection = fileURL.openConnection();\n        connection.setConnectTimeout(15000);\n        connection.setReadTimeout(30000);\n        connection.connect();\n\n        InputStream is = new java.io.BufferedInputStream(connection.getInputStream());\n        Drawable icon = Drawable.createFromStream(is, \"src\");\n        is.close();\n        return icon;\n      } catch (Exception e) {\n        TapjoyLog.e(TAPJOY_VIRTUAL_GOODS, \"FetchItemIconTask error: \" + e.toString());\n        return null;\n      }\n    }\n"}, {"dataset": "openConnection", "exampleID": 9765, "initialization": ["URL url = new URL(String)"], "initializationStart": [143], "initializationEnd": [155], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 121, "tryExpressionEnd": 125, "tryBlockStart": 121, "tryBlockEnd": 592, "catchExpressionStart": 469, "catchExpressionEnd": 501, "catchBlockStart": 469, "catchBlockEnd": 535, "exceptionHandlingCallStart": [509], "exceptionHandlingCallEnd": [528], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 190, "focalAPIEnd": 214, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xunroudabing/DaBing/tree/master/WeiXinEmoj/src/com/dabing/emoj/wxapi/Util.java", "rawCode": "  public static byte[] getHtmlByteArray(final String url) {\n    URL htmlUrl = null;\n    InputStream inStream = null;\n    try {\n      htmlUrl = new URL(url);\n      URLConnection connection = htmlUrl.openConnection();\n      HttpURLConnection httpConnection = (HttpURLConnection) connection;\n      int responseCode = httpConnection.getResponseCode();\n      if (responseCode == HttpURLConnection.HTTP_OK) {\n        inStream = httpConnection.getInputStream();\n      }\n    } catch (MalformedURLException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    byte[] data = inputStreamToByte(inStream);\n\n    return data;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9766, "initialization": ["URL url = new URL(String)"], "initializationStart": [308], "initializationEnd": [321], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["getMessage()", "new XPathException(*,*)"], "tryExpressionStart": 250, "tryExpressionEnd": 254, "tryBlockStart": 250, "tryBlockEnd": 2333, "catchExpressionStart": 1798, "catchExpressionEnd": 1830, "catchBlockStart": 1798, "catchBlockEnd": 1892, "exceptionHandlingCallStart": [1865, 1846], "exceptionHandlingCallEnd": [1879, 1883], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 351, "focalAPIEnd": 371, "followUpCheck": "connection instanceof HttpURLConnection", "checkType": "IF", "followUpCheckExpressionStart": 381, "followUpCheckExpressionEnd": 418, "followUpCheckBlockStart": 381, "followUpCheckBlockEnd": 931, "use": ["connection.getInputStream()"], "useStart": [1332], "useEnd": [1352], "hasFinally": 1, "cleanUpCall": ["DocumentImpl.getUpdateLock()", "release(int)"], "finallyExpressionStart": 3839, "finallyExpressionEnd": 3847, "finallyBlockStart": 3839, "finallyBlockEnd": 3990, "cleanUpCallStart": [3063, 3063], "cleanUpCallEnd": [3082, 3100], "url": "https://github.com/NCIP/cadsr-cgmdr/tree/master/src/org/exist/xquery/util/DocUtils.java", "rawCode": "  private static Sequence getDocumentByPath(XQueryContext context, String path)\n      throws XPathException, PermissionDeniedException {\n    Sequence document = Sequence.EMPTY_SEQUENCE;\n\n    if (path.matches(\"^[a-z]+://.*\")) {\n      /* URL */\n\n      try {\n        // Basic tests on the URL\n        URL url = new URL(path);\n        URLConnection con = url.openConnection();\n        if (con instanceof HttpURLConnection) {\n          HttpURLConnection httpConnection = (HttpURLConnection) con;\n          if (httpConnection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) {\n            // Special case: '404'\n            return Sequence.EMPTY_SEQUENCE;\n          } else if (httpConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n            // TODO : return another type\n            throw new PermissionDeniedException(\n                \"Server returned code \" + httpConnection.getResponseCode());\n          }\n        }\n\n        // TODO : process pseudo-protocols URLs more efficiently.\n        org.exist.memtree.DocumentImpl memtreeDoc = null;\n        // we use eXist's in-memory DOM implementation\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        factory.setNamespaceAware(true);\n        // TODO : we should be able to cope with context.getBaseURI()\n        InputSource src = new InputSource(con.getInputStream());\n        SAXParser parser = factory.newSAXParser();\n        XMLReader reader = parser.getXMLReader();\n        SAXAdapter adapter = new SAXAdapter();\n        reader.setContentHandler(adapter);\n        reader.parse(src);\n        Document doc = adapter.getDocument();\n        memtreeDoc = (org.exist.memtree.DocumentImpl) doc;\n        memtreeDoc.setContext(context);\n        memtreeDoc.setDocumentURI(path);\n        document = memtreeDoc;\n      } catch (MalformedURLException e) {\n        throw new XPathException(e.getMessage(), e);\n      } catch (ParserConfigurationException e) {\n        throw new XPathException(e.getMessage(), e);\n      } catch (SAXException e) {\n        throw new XPathException(e.getMessage(), e);\n      } catch (IOException e) {\n        // Special case: FileNotFoundException\n        if (e instanceof FileNotFoundException) {\n          return Sequence.EMPTY_SEQUENCE;\n        } else {\n          throw new XPathException(e.getMessage(), e);\n        }\n      }\n    } else {\n      /* Database documents */\n\n      // check if the loaded documents should remain locked\n      boolean lockOnLoad = context.lockDocumentsOnLoad();\n      int lockType = lockOnLoad ? Lock.WRITE_LOCK : Lock.READ_LOCK;\n      DocumentImpl doc = null;\n      try {\n        XmldbURI pathUri = XmldbURI.xmldbUriFor(path, false);\n        // relative collection Path: add the current base URI\n        pathUri = context.getBaseURI().toXmldbURI().resolveCollectionPath(pathUri);\n        // try to open the document and acquire a lock\n        doc = context.getBroker().getXMLResource(pathUri, lockType);\n        if (doc != null) {\n          if (!doc.getPermissions().validate(context.getUser(), Permission.READ)) {\n            doc.getUpdateLock().release(lockType);\n            throw new PermissionDeniedException(\"Insufficient privileges to read resource \" + path);\n          }\n\n          if (doc.getResourceType() == DocumentImpl.BINARY_FILE) {\n            throw new XPathException(\n                \"Document is a binary resource, not an XML document. Please consider using the function util:binary-resource to retrieve a reference to it.\");\n          }\n\n          if (lockOnLoad) {\n            // add the document to the list of locked documents\n            context.addLockedDocument(doc);\n          }\n          document = new NodeProxy(doc);\n        }\n      } catch (PermissionDeniedException e) {\n        throw e;\n      } catch (URISyntaxException e) {\n        throw new XPathException(e);\n      } finally {\n        // release all locks unless lockOnLoad is true\n        if (!lockOnLoad && doc != null) doc.getUpdateLock().release(lockType);\n      }\n    }\n    return document;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9767, "initialization": ["URL url = getResource(String)"], "initializationStart": [600], "initializationEnd": [656], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["url.getFile()"], "configurationStart": [684], "configurationEnd": [702], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 814, "focalAPIEnd": 839, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [814], "useEnd": [856], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moravianlibrary/Kramerius/tree/master/common/src/test/java/cz/incad/kramerius/service/ReplicationsTest.java", "rawCode": "  @Test\n  public void testExportPageDrobnystky()\n      throws IOException, ParserConfigurationException, SAXException, LexerException,\n          ReplicateException {\n    StatisticsAccessLog acLog = EasyMock.createMock(StatisticsAccessLog.class);\n\n    FedoraAccess fa =\n        createMockBuilder(FedoraAccessImpl.class)\n            .withConstructor(KConfiguration.getInstance(), acLog)\n            .addMockedMethod(\"getAPIM\")\n            .createMock();\n\n    FedoraAPIM fedoraApiM = EasyMock.createMock(FedoraAPIM.class);\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    URL resource = ReplicationsTest.class.getResource(\"impl/foxml_ext.xml\");\n\n    File file = new File(resource.getFile());\n\n    StringTemplate template =\n        new StringTemplate(\n            IOUtils.readAsString(\n                resource.openConnection().getInputStream(), Charset.forName(\"UTF-8\"), true));\n    template.setAttribute(\n        \"imgfile\", new File(file.getParentFile(), \"img.jpeg\").toURI().toURL().toString());\n\n    IOUtils.copyStreams(new ByteArrayInputStream(template.toString().getBytes(\"UTF-8\")), bos);\n\n    EasyMock.expect(\n            fedoraApiM.export(\n                \"uuid:43101770-b03b-11dd-8673-000d606f5dc6\",\n                \"info:fedora/fedora-system:FOXML-1.1\",\n                \"archive\"))\n        .andReturn(bos.toByteArray())\n        .anyTimes();\n\n    EasyMock.expect(fa.getAPIM()).andReturn(fedoraApiM).anyTimes();\n\n    SolrAccess solrAccess = EasyMock.createMock(SolrAccess.class);\n\n    ServletContext scontext = scontext();\n    HttpServletRequest request = request();\n\n    replay(fa, fedoraApiM, solrAccess, acLog, scontext, request);\n\n    this.injector = Guice.createInjector(new _Module(fa, solrAccess, scontext, request));\n    ReplicationService replicationService = injector.getInstance(ReplicationService.class);\n\n    byte[] exportedFOXML =\n        replicationService.getExportedFOXML(\"uuid:43101770-b03b-11dd-8673-000d606f5dc6\");\n\n    Document document = XMLUtils.parseDocument(new StringReader(new String(exportedFOXML)), true);\n    Element dataStreamVersion =\n        XMLUtils.findElement(\n            document.getDocumentElement(),\n            new XMLUtils.ElementsFilter() {\n\n              @Override\n              public boolean acceptElement(Element element) {\n                String id = element.getAttribute(\"ID\");\n                return id != null && id.equals(\"SOME_IMAGE.0\");\n              }\n            });\n\n    // obsahuje atribut size\n    Assert.assertNotNull(dataStreamVersion.hasAttribute(\"SIZE\"));\n\n    // neni pritomny element location ale je pritomny elemnet binaryContent\n    Assert.assertNull(\n        XMLUtils.findElement(\n            dataStreamVersion, \"contentLocation\", dataStreamVersion.getNamespaceURI()));\n    Assert.assertNotNull(\n        XMLUtils.findElement(\n            dataStreamVersion, \"binaryContent\", dataStreamVersion.getNamespaceURI()));\n\n    dataStreamVersion =\n        XMLUtils.findElement(\n            document.getDocumentElement(),\n            new XMLUtils.ElementsFilter() {\n\n              @Override\n              public boolean acceptElement(Element element) {\n                String id = element.getAttribute(\"ID\");\n                return id != null && id.equals(\"SOME_IMAGE.1\");\n              }\n            });\n    // obsahuje atribut size\n    Assert.assertNotNull(dataStreamVersion.hasAttribute(\"SIZE\"));\n\n    // neni pritomny element location ale je pritomny elemnet binaryContent\n    Assert.assertNull(\n        XMLUtils.findElement(\n            dataStreamVersion, \"contentLocation\", dataStreamVersion.getNamespaceURI()));\n    Assert.assertNotNull(\n        XMLUtils.findElement(\n            dataStreamVersion, \"binaryContent\", dataStreamVersion.getNamespaceURI()));\n\n    // Assert.assertNotNull(XMLUtils.findElement(document.getDocumentElement(), \"replicatedFrom\",\n    // FedoraUtils.RELS_EXT_STREAM));\n  }\n"}, {"dataset": "openConnection", "exampleID": 9768, "initialization": ["URL url = new URL(*)"], "initializationStart": [3199], "initializationEnd": [3267], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 3521, "focalAPIEnd": 3555, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["url.openConnection()", "connection.addRequestProperty(String,String)", "connection.addRequestProperty(String,String)", "connection.addRequestProperty(String,String)", "connection.addRequestProperty(String,*)", "connection.addRequestProperty(String,String)", "connection.addRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.getOutputStream()", "connection.getInputStream()"], "useStart": [3589, 3739, 3811, 3882, 3945, 4035, 4100, 4159, 4491, 4676], "useEnd": [3609, 3805, 3876, 3939, 4029, 4094, 4152, 4187, 4519, 4703], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hidendra/Plugin-Metrics/tree/master/mods/canary/metrics/src/main/java/org/mcstats/Metrics.java", "rawCode": "  /** Generic method that posts a plugin to the metrics website */\n  private void postPlugin(final boolean isPing) throws IOException {\n    // Server software specific section\n    PluginDescriptor description = plugin.getDescriptor();\n    String pluginName = description.getName();\n    boolean onlineMode =\n        Configuration.getServerConfig().isOnlineMode(); // TRUE if online mode is enabled\n    String pluginVersion = description.getVersion();\n    String serverVersion =\n        String.format(\n            \"%s %s (MC: %s)\",\n            Canary.getSpecificationTitle(),\n            Canary.getSpecificationVersion(),\n            Canary.getServer().getServerVersion());\n    int playersOnline = Canary.getServer().getNumPlayersOnline();\n\n    // END server software specific section -- all code below does not use any code outside of this\n    // class / Java\n\n    // Construct the post data\n    StringBuilder json = new StringBuilder(1024);\n    json.append('{');\n\n    // The plugin's description file containg all of the plugin data such as name, version, author,\n    // etc\n    appendJSONPair(json, \"guid\", guid);\n    appendJSONPair(json, \"plugin_version\", pluginVersion);\n    appendJSONPair(json, \"server_version\", serverVersion);\n    appendJSONPair(json, \"players_online\", Integer.toString(playersOnline));\n\n    // New data as of R6\n    String osname = System.getProperty(\"os.name\");\n    String osarch = System.getProperty(\"os.arch\");\n    String osversion = System.getProperty(\"os.version\");\n    String java_version = System.getProperty(\"java.version\");\n    int coreCount = Runtime.getRuntime().availableProcessors();\n\n    // normalize os arch .. amd64 -> x86_64\n    if (osarch.equals(\"amd64\")) {\n      osarch = \"x86_64\";\n    }\n\n    appendJSONPair(json, \"osname\", osname);\n    appendJSONPair(json, \"osarch\", osarch);\n    appendJSONPair(json, \"osversion\", osversion);\n    appendJSONPair(json, \"cores\", Integer.toString(coreCount));\n    appendJSONPair(json, \"auth_mode\", onlineMode ? \"1\" : \"0\");\n    appendJSONPair(json, \"java_version\", java_version);\n\n    // If we're pinging, append it\n    if (isPing) {\n      appendJSONPair(json, \"ping\", \"1\");\n    }\n\n    if (graphs.size() > 0) {\n      synchronized (graphs) {\n        json.append(',');\n        json.append('\"');\n        json.append(\"graphs\");\n        json.append('\"');\n        json.append(':');\n        json.append('{');\n\n        boolean firstGraph = true;\n\n        final Iterator<Graph> iter = graphs.iterator();\n\n        while (iter.hasNext()) {\n          Graph graph = iter.next();\n\n          StringBuilder graphJson = new StringBuilder();\n          graphJson.append('{');\n\n          for (Plotter plotter : graph.getPlotters()) {\n            appendJSONPair(\n                graphJson, plotter.getColumnName(), Integer.toString(plotter.getValue()));\n          }\n\n          graphJson.append('}');\n\n          if (!firstGraph) {\n            json.append(',');\n          }\n\n          json.append(escapeJSON(graph.getName()));\n          json.append(':');\n          json.append(graphJson);\n\n          firstGraph = false;\n        }\n\n        json.append('}');\n      }\n    }\n\n    // close json\n    json.append('}');\n\n    // Create the url\n    URL url = new URL(BASE_URL + String.format(REPORT_URL, urlEncode(pluginName)));\n\n    // Connect to the website\n    URLConnection connection;\n\n    // Mineshafter creates a socks proxy, so we can safely bypass it\n    // It does not reroute POST requests so we need to go around it\n    if (isMineshafterPresent()) {\n      connection = url.openConnection(Proxy.NO_PROXY);\n    } else {\n      connection = url.openConnection();\n    }\n\n    byte[] uncompressed = json.toString().getBytes();\n    byte[] compressed = gzip(json.toString());\n\n    // Headers\n    connection.addRequestProperty(\"User-Agent\", \"MCStats/\" + REVISION);\n    connection.addRequestProperty(\"Content-Type\", \"application/json\");\n    connection.addRequestProperty(\"Content-Encoding\", \"gzip\");\n    connection.addRequestProperty(\"Content-Length\", Integer.toString(compressed.length));\n    connection.addRequestProperty(\"Accept\", \"application/json\");\n    connection.addRequestProperty(\"Connection\", \"close\");\n\n    connection.setDoOutput(true);\n\n    if (debug) {\n      System.out.println(\n          \"[Metrics] Prepared request for \"\n              + pluginName\n              + \" uncompressed=\"\n              + uncompressed.length\n              + \" compressed=\"\n              + compressed.length);\n    }\n\n    // Write the data\n    OutputStream os = connection.getOutputStream();\n    os.write(compressed);\n    os.flush();\n\n    // Now read the response\n    final BufferedReader reader =\n        new BufferedReader(new InputStreamReader(connection.getInputStream()));\n    String response = reader.readLine();\n\n    // close resources\n    os.close();\n    reader.close();\n\n    if (response == null || response.startsWith(\"ERR\") || response.startsWith(\"7\")) {\n      if (response == null) {\n        response = \"null\";\n      } else if (response.startsWith(\"7\")) {\n        response = response.substring(response.startsWith(\"7,\") ? 2 : 1);\n      }\n\n      throw new IOException(response);\n    } else {\n      // Is this the first update this hour?\n      if (response.equals(\"1\") || response.contains(\"This is your first update this hour\")) {\n        synchronized (graphs) {\n          final Iterator<Graph> iter = graphs.iterator();\n\n          while (iter.hasNext()) {\n            final Graph graph = iter.next();\n\n            for (Plotter plotter : graph.getPlotters()) {\n              plotter.reset();\n            }\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9769, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["PlainStoreUtils.getCacheFile(URL)", "new FileInputStream(File)", "new BufferedInputStream(*)", "loadCrlWrapper(InputStream)", "URL.toExternalForm()", "getPath()", "new IOException(String,*)", "notifyObservers(*,*,*)"], "tryExpressionStart": 238, "tryExpressionEnd": 242, "tryBlockStart": 238, "tryBlockEnd": 1249, "catchExpressionStart": 565, "catchExpressionEnd": 587, "catchBlockStart": 565, "catchBlockEnd": 1249, "exceptionHandlingCallStart": [667, 773, 749, 818, 879, 1135, 947, 848], "exceptionHandlingCallEnd": [690, 799, 800, 836, 899, 1150, 1172, 1173], "configuration": ["url.getProtocol()"], "configurationStart": [114], "configurationEnd": [131], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 271, "focalAPIEnd": 291, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setConnectTimeout(*)", "connection.setReadTimeout(*)", "connection.getInputStream()", "PlainStoreUtils.getCacheFile(url)", "url.toExternalForm()", "saveCacheFile(*,url)"], "useStart": [321, 390, 503, 667, 879, 1267], "useEnd": [380, 446, 524, 690, 899, 1309], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eu-emi/canl-java/tree/master/src/main/java/eu/emi/security/authn/x509/helpers/crl/PlainCRLStoreSpi.java", "rawCode": "  protected X509CRL loadCRL(URL url) throws IOException, CRLException, URISyntaxException {\n    String protocol = url.getProtocol();\n    boolean local = false;\n    if (protocol.equalsIgnoreCase(\"file\")) local = true;\n    X509CRL ret;\n    try {\n      URLConnection conn = url.openConnection();\n      if (!local) {\n        conn.setConnectTimeout(params.getRemoteConnectionTimeout());\n        conn.setReadTimeout(params.getRemoteConnectionTimeout());\n      }\n      InputStream is = new BufferedInputStream(conn.getInputStream());\n      ret = loadCrlWrapper(is);\n    } catch (IOException e) {\n      if (!local && params.getDiskCachePath() != null) {\n        File input = utils.getCacheFile(url);\n        if (input.exists()) {\n          InputStream is = new BufferedInputStream(new FileInputStream(input));\n          ret = loadCrlWrapper(is);\n          notifyObservers(\n              url.toExternalForm(),\n              Severity.WARNING,\n              new IOException(\n                  \"Warning: CRL was not loaded from its URL, \"\n                      + \"but its previously cached copy was loaded from disk file \"\n                      + input.getPath(),\n                  e));\n          return ret;\n        } else throw e;\n      }\n      throw e;\n    }\n\n    if (!local) utils.saveCacheFile(ret.getEncoded(), url);\n\n    return ret;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9770, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 190, "focalAPIEnd": 219, "followUpCheck": "connection != null", "checkType": "IF", "followUpCheckExpressionStart": 1408, "followUpCheckExpressionEnd": 1431, "followUpCheckBlockStart": 1408, "followUpCheckBlockEnd": 1456, "use": ["connection.setConnectTimeout(int)", "connection.setReadTimeout(int)", "connection.setUseCaches(boolean)", "connection.setDoOutput(boolean)", "connection.setDoInput(boolean)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.getOutputStream()", "connection.getResponseCode()", "connection.getInputStream()", "connection.getHeaderField(String)", "connection.disconnect()"], "useStart": [227, 270, 310, 348, 387, 422, 507, 584, 661, 1119, 1174, 1432], "useEnd": [262, 302, 340, 379, 414, 475, 563, 612, 689, 1146, 1219, 1455], "hasFinally": 1, "cleanUpCall": ["HttpURLConnection.disconnect()"], "finallyExpressionStart": 1392, "finallyExpressionEnd": 1400, "finallyBlockStart": 1392, "finallyBlockEnd": 1462, "cleanUpCallStart": [1432], "cleanUpCallEnd": [1455], "url": "https://github.com/thest1/Android-VKontakte-SDK/tree/master/AndroidVkSdk/src/com/perm/kate/api/Api.java", "rawCode": "  private String sendRequestInternal(String url, String body, boolean is_post) throws IOException {\n    HttpURLConnection connection = null;\n    try {\n      connection = (HttpURLConnection) new URL(url).openConnection();\n      connection.setConnectTimeout(30000);\n      connection.setReadTimeout(30000);\n      connection.setUseCaches(false);\n      connection.setDoOutput(is_post);\n      connection.setDoInput(true);\n      connection.setRequestMethod(is_post ? \"POST\" : \"GET\");\n      if (enable_compression) connection.setRequestProperty(\"Accept-Encoding\", \"gzip\");\n      if (is_post) connection.getOutputStream().write(body.getBytes(\"UTF-8\"));\n      int code = connection.getResponseCode();\n      Log.i(TAG, \"code=\" + code);\n      // It may happen due to keep-alive problem\n      // http://stackoverflow.com/questions/1440957/httpurlconnection-getresponsecode-returns-1-on-second-invocation\n      if (code == -1) throw new WrongResponseCodeException(\"Network error\");\n      // может стоит проверить на код 200\n      // on error can also read error stream from connection.\n      InputStream is = new BufferedInputStream(connection.getInputStream(), 8192);\n      String enc = connection.getHeaderField(\"Content-Encoding\");\n      if (enc != null && enc.equalsIgnoreCase(\"gzip\")) is = new GZIPInputStream(is);\n      String response = Utils.convertStreamToString(is);\n      return response;\n    } finally {\n      if (connection != null) connection.disconnect();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9771, "initialization": ["URL url = new URL(String)"], "initializationStart": [522], "initializationEnd": [572], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 630, "focalAPIEnd": 650, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setRequestMethod(String)", "connection.setDoOutput(boolean)", "connection.setDoInput(boolean)", "connection.setRequestProperty(String,String)", "url.openConnection()", "connection.getOutputStream()", "connection.getInputStream()"], "useStart": [656, 697, 731, 764, 835, 905, 1046], "useEnd": [691, 725, 758, 828, 855, 933, 1073], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/unsupported/wfs/src/test/java/org/geotools/data/wfs/v1_0_0/demo/PostDemo.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    String s =\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n            + \"<DescribeFeatureType xmlns=\\\"http://www.opengis.net/wfs\\\" \"\n            + \"xmlns:gml=\\\"http://www.opengis.net/gml\\\" \"\n            + \"xmlns:ogc=\\\"http://www.opengis.net/ogc\\\" version=\\\"1.0.0\\\" \"\n            + \"service=\\\"WFS\\\" outputFormat=\\\"XMLSCHEMA\\\">\"\n            + \"<TypeName>envirodat</TypeName></DescribeFeatureType>\";\n\n    System.out.println(s + \"\\n\\n\\n\");\n    URL url = new URL(\"http://map.ns.ec.gc.ca/envdat/map.aspx?\");\n\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n    connection.setRequestMethod(\"POST\");\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    connection.setRequestProperty(\"Content-type\", \"application/xml\");\n\n    url.openConnection().connect();\n    Writer w = new OutputStreamWriter(connection.getOutputStream());\n    w.write(s);\n    w.flush();\n    w.close();\n    BufferedReader r = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n    while (r.ready()) {\n      System.out.print((String) r.readLine());\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9772, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 972, "focalAPIEnd": 1006, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["CertificateFactory.generateCertificate(connection)"], "useStart": [1118], "useEnd": [1144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluespark80/example/tree/master/crypto/src/test/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"init\",\n    args = {int.class, java.security.cert.Certificate.class, java.security.SecureRandom.class}\n  )\n  public void test_initILjava_security_cert_Certificate_java_security_SecureRandom()\n      throws MalformedURLException, IOException, CertificateException, NoSuchAlgorithmException,\n          NoSuchPaddingException, InvalidKeyException {\n\n    /* Certificate creation notes: certificate should be valid 37273 starting\n     * from 13 Nov 2008\n     * If it brcomes invalidated regenerate it using following commands:\n     * 1. openssl genrsa -des3 -out test.key 1024\n     * 2. openssl req -new -key test.key -out test.csr\n     * 3. cp test.key test.key.org\n     * 4. openssl rsa -in test.key.org -out test.key\n     * 5. openssl x509 -req -days 37273 -in test.csr -signkey test.key -out test.cert\n     * */\n\n    String certName = Support_Resources.getURL(\"test.cert\");\n    InputStream is = new URL(certName).openConnection().getInputStream();\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n\n    Certificate cert = cf.generateCertificate(is);\n\n    Cipher c = Cipher.getInstance(\"RSA\");\n\n    c.init(Cipher.ENCRYPT_MODE, cert, new SecureRandom());\n    c = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n    try {\n      c.init(Cipher.ENCRYPT_MODE, cert, new SecureRandom());\n      fail(\"InvalidKeyException expected\");\n    } catch (InvalidKeyException e) {\n      // expected\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9773, "initialization": ["URL url = new URL(URL,String)"], "initializationStart": [108], "initializationEnd": [127], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 352, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [399], "useEnd": [418], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AllBinary/phoneme-components-cdc/tree/master/src/share/foundation/classes/sun/misc/URLClassPath.java", "rawCode": "    Resource getResource(final String name, boolean check) {\n      final URL url;\n      try {\n        url = new URL(base, name);\n      } catch (MalformedURLException e) {\n        throw new IllegalArgumentException(\"name\");\n      }\n      final URLConnection uc;\n      try {\n        if (check) {\n          URLClassPath.check(url);\n        }\n        uc = url.openConnection();\n        InputStream in = uc.getInputStream();\n      } catch (Exception e) {\n        return null;\n      }\n      return new Resource() {\n        public String getName() {\n          return name;\n        }\n\n        public URL getURL() {\n          return url;\n        }\n\n        public URL getCodeSourceURL() {\n          return base;\n        }\n\n        public InputStream getInputStream() throws IOException {\n          return uc.getInputStream();\n        }\n\n        public int getContentLength() throws IOException {\n          return uc.getContentLength();\n        }\n      };\n    }\n"}, {"dataset": "openConnection", "exampleID": 9774, "initialization": ["URL url = new URL(String)"], "initializationStart": [249], "initializationEnd": [320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 371, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoOutput(boolean)", "connection.setUseCaches(boolean)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,String)", "connection.getOutputStream()", "connection.getInputStream()"], "useStart": [397, 425, 455, 490, 564, 976, 1508], "useEnd": [419, 449, 484, 558, 609, 998, 1529], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Gwindow/WhatAPI/tree/master/src/api/goggles/GoogleGogglesSearch.java", "rawCode": "  /**\n   * Send an image file\n   *\n   * @param cssid the cssid\n   * @param file the file\n   * @throws IOException Signals that an I/O exception has occurred.\n   */\n  private void sendPhoto(String cssid, File file) throws IOException {\n    URL url = new URL(\"http://www.google.com/goggles/container_proto?cssid=\" + cssid);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setDoOutput(true);\n    conn.setUseCaches(false);\n    conn.setRequestMethod(\"POST\");\n    conn.setRequestProperty(\"Content-Type\", \"application/x-protobuffer\");\n    conn.setRequestProperty(\"Pragma\", \"no-cache\");\n    int x = (int) file.length();\n    byte[] xVarint = toVarint32(x);\n    // a = x + 32\n    byte[] aVarint = toVarint32(x + 32);\n    // b = x + 14\n    byte[] bVarint = toVarint32(x + 14);\n    // c = x + 10\n    byte[] cVarint = toVarint32(x + 10);\n    // Should send the next structure as body:\n    // 0A [a] 0A [b] 0A [c] 0A [x] [image bytes]\n    OutputStream out = conn.getOutputStream();\n    // 0x0A\n    out.write(new byte[] {10});\n    // a\n    out.write(aVarint);\n    // 0x0A\n    out.write(new byte[] {10});\n    // b\n    out.write(bVarint);\n    // 0x0A\n    out.write(new byte[] {10});\n    // c\n    out.write(cVarint);\n    // 0x0A\n    out.write(new byte[] {10});\n    // x\n    out.write(xVarint);\n    // Write image\n    out.write(getFileBytes(file));\n    // Write trailing bytes\n    out.write(trailingBytes);\n    out.close();\n    BufferedReader buffRead = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n\n    String response = \"\";\n    String line;\n    int i = 0;\n    while ((line = buffRead.readLine()) != null) {\n      response += line;\n      if (i == 5) {\n        result = line.substring(1, line.length() - 1);\n        break;\n      }\n      i++;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9775, "initialization": ["URL url = new URL(String)"], "initializationStart": [268], "initializationEnd": [319], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RuntimeException(String)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 911, "catchExpressionStart": 776, "catchExpressionEnd": 798, "catchBlockStart": 776, "catchBlockEnd": 871, "exceptionHandlingCallStart": [812], "exceptionHandlingCallEnd": [864], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 348, "focalAPIEnd": 368, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.connect()", "connection.getInputStream()", "connection.getInputStream()", "url.openConnection()"], "useStart": [376, 415, 449, 571], "useEnd": [390, 436, 470, 591], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/sun/net/www/protocol/http/Finalizer.java", "rawCode": "  public static void main(String args[]) {\n    try {\n      ServerSocket serversocket = new ServerSocket(0);\n      int port = serversocket.getLocalPort();\n      XServer server = new XServer(serversocket);\n      server.start();\n      Thread.sleep(2000);\n      URL url = new URL(\"http://localhost:\" + port + \"/index.html\");\n      URLConnection urlc = url.openConnection();\n      urlc.connect();\n      InputStream is = urlc.getInputStream();\n      is = urlc.getInputStream();\n      sink(is);\n      HttpURLConnection ht = (HttpURLConnection) urlc;\n\n      URLConnection url1 = url.openConnection();\n      is = url1.getInputStream();\n\n      ht = null;\n      urlc = null;\n      System.gc();\n      System.runFinalization();\n\n      sink(is);\n\n      System.out.println(\"Passed!\");\n    } catch (IOException e) {\n      throw new RuntimeException(\"finalize method failure.\" + e);\n    } catch (InterruptedException ie) {\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9776, "initialization": ["URL url = new URL(String)"], "initializationStart": [251], "initializationEnd": [285], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["fail(String)"], "tryExpressionStart": 229, "tryExpressionEnd": 233, "tryBlockStart": 229, "tryBlockEnd": 640, "catchExpressionStart": 548, "catchExpressionEnd": 568, "catchBlockStart": 548, "catchBlockEnd": 640, "exceptionHandlingCallStart": [576], "exceptionHandlingCallEnd": [633], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 346, "focalAPIEnd": 366, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getCipherSuite()"], "useStart": [388], "useEnd": [415], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluespark80/example/tree/master/x-net/src/test/java/tests/api/javax/net/ssl/HttpsURLConnectionTest.java", "rawCode": "  /** @tests javax.net.ssl.HttpsURLConnection#getCipherSuite() */\n  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"getCipherSuite\",\n    args = {}\n  )\n  public final void test_getCipherSuite() {\n    try {\n      URL url = new URL(\"https://localhost:55555\");\n      HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n      try {\n        connection.getCipherSuite();\n        fail(\"IllegalStateException wasn't thrown\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception \" + e + \" for exception case\");\n    }\n\n    try {\n      HttpsURLConnection con = new MyHttpsURLConnection(new URL(\"https://www.fortify.net/\"));\n      assertEquals(\"CipherSuite\", con.getCipherSuite());\n    } catch (Exception e) {\n      fail(\"Unexpected exception \" + e);\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9777, "initialization": ["URL url = new URL(String,String,int,String,*)"], "initializationStart": [150], "initializationEnd": [209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 238, "focalAPIEnd": 258, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.connect()", "connection.getRequestProperties()"], "useStart": [264, 299], "useEnd": [280, 328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/luni/tests/java/net/URLConnectionTest.java", "rawCode": "  /** {@link java.net.URLConnection#getRequestProperties()} */\n  public void test_getRequestProperties_Exception() throws IOException {\n    URL url = new URL(\"http\", \"test\", 80, \"index.html\", new NewHandler());\n    URLConnection urlCon = url.openConnection();\n    urlCon.connect();\n\n    try {\n      urlCon.getRequestProperties();\n      fail(\"should throw IllegalStateException\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9778, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 120, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoOutput(boolean)", "connection.connect()", "connection.getOutputStream()", "connection.getResponseCode()"], "useStart": [187, 214, 303, 422], "useEnd": [208, 227, 324, 465], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SVMP/android_libcore/tree/master/luni/src/test/java/org/apache/harmony/luni/tests/java/net/URLConnectionTest.java", "rawCode": "  public void test_getOutputStream() throws IOException {\n    String posted = \"this is a test\";\n    URLConnection uc3 = new URL(Support_Configuration.hTTPURLgoogle).openConnection();\n    uc3.setDoOutput(true);\n    uc3.connect();\n\n    BufferedWriter w =\n        new BufferedWriter(new OutputStreamWriter(uc3.getOutputStream()), posted.getBytes().length);\n\n    w.write(posted);\n    w.flush();\n    w.close();\n\n    int code = ((HttpURLConnection) uc3).getResponseCode();\n\n    // writing to url not allowed\n    assertEquals(\"Got different responseCode \", 405, code);\n\n    // try exception testing\n    try {\n      fileURLCon.setDoOutput(true);\n      fileURLCon.connect();\n      fileURLCon.getOutputStream();\n    } catch (UnknownServiceException e) {\n      // ok cannot write to fileURL\n    }\n\n    ((HttpURLConnection) uc2).disconnect();\n\n    try {\n      uc2.getOutputStream();\n      fail(\"Exception expected\");\n    } catch (IOException e) {\n      // ok\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9779, "initialization": ["URL url = new URL(String)"], "initializationStart": [178], "initializationEnd": [196], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String)"], "tryExpressionStart": 156, "tryExpressionEnd": 160, "tryBlockStart": 156, "tryBlockEnd": 2069, "catchExpressionStart": 2010, "catchExpressionEnd": 2030, "catchBlockStart": 2010, "catchBlockEnd": 2069, "exceptionHandlingCallStart": [2038], "exceptionHandlingCallEnd": [2062], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 248, "focalAPIEnd": 268, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoInput(boolean)", "connection.setDoOutput(boolean)", "connection.setUseCaches(boolean)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,String)", "connection.getOutputStream()", "connection.getInputStream()"], "useStart": [312, 340, 369, 429, 496, 554, 604, 768, 1673], "useEnd": [332, 361, 392, 457, 546, 596, 686, 789, 1693], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunqimin09/FirstApp/tree/master/AppTellOut/src/com/tellout/util/ImageUpload.java", "rawCode": "  private boolean uploadFile(String actionUrl, File uploadFile) {\n    String end = \"\\r\\n\";\n    String twoHyphens = \"--\";\n    String boundary = \"*****\";\n    try {\n      URL url = new URL(actionUrl);\n      HttpURLConnection con = (HttpURLConnection) url.openConnection();\n      /* 允许Input、Output，不使用Cache */\n      con.setDoInput(true);\n      con.setDoOutput(true);\n      con.setUseCaches(false);\n      /* 设置传送的method=POST */\n      con.setRequestMethod(\"POST\");\n      /* setRequestProperty */\n      con.setRequestProperty(\"Connection\", \"Keep-Alive\");\n      con.setRequestProperty(\"Charset\", \"UTF-8\");\n      con.setRequestProperty(\"Content-Type\", \"multipart/form-data;boundary=\" + boundary);\n      /* 设置DataOutputStream */\n      DataOutputStream ds = new DataOutputStream(con.getOutputStream());\n      ds.writeBytes(twoHyphens + boundary + end);\n\n      ds.writeBytes(\n          \"Content-Disposition: form-data; \"\n              + \"name=\\\"file1\\\";filename=\\\"\"\n              + MConstant.USER_ID_VALUE\n              + \".jpeg\"\n              + \"\\\"\"\n              + end);\n      ds.writeBytes(end);\n      /* 取得文件的FileInputStream */\n      FileInputStream fStream = new FileInputStream(uploadFile);\n      /* 设置每次写入1024bytes */\n      int bufferSize = 1024;\n      byte[] buffer = new byte[bufferSize];\n      int length = -1;\n      /* 从文件读取数据至缓冲区 */\n      while ((length = fStream.read(buffer)) != -1) {\n        /* 将资料写入DataOutputStream中 */\n        ds.write(buffer, 0, length);\n      }\n      ds.writeBytes(end);\n      ds.writeBytes(twoHyphens + boundary + twoHyphens + end);\n      /* close streams */\n      fStream.close();\n      ds.flush();\n      /* 取得Response内容 */\n      InputStream is = con.getInputStream();\n      int ch;\n      StringBuffer b = new StringBuffer();\n      while ((ch = is.read()) != -1) {\n        b.append((char) ch);\n      }\n      // Looper.prepare();\n      /* 将Response显示于Dialog */\n      Log.i(\"tag\", \"上传成功\" + b.toString().trim());\n      /* 关闭DataOutputStream */\n      ds.close();\n      return true;\n    } catch (Exception e) {\n      Log.e(\"tag\", \"上传失败\" + e);\n    }\n    return false;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9780, "initialization": ["URL url = new URL(String)"], "initializationStart": [497], "initializationEnd": [517], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["new OmException(String,*)"], "tryExpressionStart": 221, "tryExpressionEnd": 225, "tryBlockStart": 221, "tryBlockEnd": 1062, "catchExpressionStart": 826, "catchExpressionEnd": 858, "catchBlockStart": 826, "catchBlockEnd": 949, "exceptionHandlingCallStart": [874], "exceptionHandlingCallEnd": [940], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 573, "focalAPIEnd": 591, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["considerCertificatesValid(connection)", "allowDifferentServerNames(connection)", "connection.getInputStream()"], "useStart": [603, 651, 720], "useEnd": [639, 687, 740], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.5.0/src/om/qengine/OmService.java", "rawCode": "  private void obtainQuestion(String questionBaseURL, QuestionCache.QuestionKey qk)\n      throws OmException {\n    if (!qc.containsQuestion(qk)) {\n      String sContentURL = questionBaseURL + \"/\" + qk.getURLPart();\n      try {\n        // Get it from the URL\n        byte[] abJar;\n        if (sContentURL.equals(\"/!test.0.0\")) {\n          // Question used during automated check\n          abJar = IO.loadBytes(getClass().getResourceAsStream(\"testquestion.jar\"));\n        } else {\n          URL u = new URL(sContentURL);\n          HttpURLConnection huc = (HttpURLConnection) u.openConnection();\n          HTTPS.considerCertificatesValid(huc);\n          HTTPS.allowDifferentServerNames(huc);\n          abJar = IO.loadBytes(huc.getInputStream());\n        }\n\n        // Put it in cache\n        qc.saveQuestion(qk, abJar);\n\n      } catch (MalformedURLException e) {\n        throw new OmException(\"Invalid question content URL: \" + sContentURL, e);\n      } catch (IOException e) {\n        throw new OmException(\"Error accessing content URL: \" + sContentURL, e);\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9781, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 118, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setConnectTimeout(int)", "connection.setReadTimeout(int)", "connection.connect()", "connection.getErrorStream()"], "useStart": [144, 179, 211, 238], "useEnd": [173, 205, 225, 259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drtshock/Willie/tree/master/src/main/java/com/drtshock/willie/util/WebHelper.java", "rawCode": "  public static String readURLToString(URL url) throws IOException {\n    HttpURLConnection http = (HttpURLConnection) url.openConnection();\n    http.setConnectTimeout(10000);\n    http.setReadTimeout(10000);\n    http.connect();\n    return http.getErrorStream() == null\n        ? convertStreamToString((InputStream) url.getContent())\n        : null;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9782, "initialization": ["URL url = new URL(String)"], "initializationStart": [976], "initializationEnd": [993], "hasTryCatch": 1, "exceptionType": "XmlPullParserException", "exceptionHandlingCall": ["getDetail()"], "tryExpressionStart": 573, "tryExpressionEnd": 577, "tryBlockStart": 573, "tryBlockEnd": 2362, "catchExpressionStart": 1636, "catchExpressionEnd": 1670, "catchBlockStart": 1636, "catchBlockEnd": 2310, "exceptionHandlingCallStart": [1682], "exceptionHandlingCallEnd": [1696], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 1033, "focalAPIEnd": 1053, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.connect()", "connection.getInputStream()"], "useStart": [1063, 1194], "useEnd": [1086, 1224], "hasFinally": 1, "cleanUpCall": ["closeQuietly(KXmlParser)"], "finallyExpressionStart": 2311, "finallyExpressionEnd": 2319, "finallyBlockStart": 2311, "finallyBlockEnd": 2362, "cleanUpCallStart": [2327], "cleanUpCallEnd": [2355], "url": "https://github.com/SVMP/android_libcore/tree/master/luni/src/main/java/org/apache/harmony/xml/parsers/DocumentBuilderImpl.java", "rawCode": "  @Override\n  public Document parse(InputSource source) throws SAXException, IOException {\n    if (source == null) {\n      throw new IllegalArgumentException(\"source == null\");\n    }\n\n    String namespaceURI = null;\n    String qualifiedName = null;\n    DocumentType doctype = null;\n    String inputEncoding = source.getEncoding();\n    String systemId = source.getSystemId();\n    DocumentImpl document =\n        new DocumentImpl(dom, namespaceURI, qualifiedName, doctype, inputEncoding);\n    document.setDocumentURI(systemId);\n\n    KXmlParser parser = new KXmlParser();\n    try {\n      parser.keepNamespaceAttributes();\n      parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, namespaceAware);\n\n      if (source.getByteStream() != null) {\n        parser.setInput(source.getByteStream(), inputEncoding);\n      } else if (source.getCharacterStream() != null) {\n        parser.setInput(source.getCharacterStream());\n      } else if (systemId != null) {\n        URL url = new URL(systemId);\n        URLConnection urlConnection = url.openConnection();\n        urlConnection.connect();\n        // TODO: if null, extract the inputEncoding from the Content-Type header?\n        parser.setInput(urlConnection.getInputStream(), inputEncoding);\n      } else {\n        throw new SAXParseException(\"InputSource needs a stream, reader or URI\", null);\n      }\n\n      if (parser.nextToken() == XmlPullParser.END_DOCUMENT) {\n        throw new SAXParseException(\"Unexpected end of document\", null);\n      }\n\n      parse(parser, document, document, XmlPullParser.END_DOCUMENT);\n\n      parser.require(XmlPullParser.END_DOCUMENT, null, null);\n    } catch (XmlPullParserException ex) {\n      if (ex.getDetail() instanceof IOException) {\n        throw (IOException) ex.getDetail();\n      }\n      if (ex.getDetail() instanceof RuntimeException) {\n        throw (RuntimeException) ex.getDetail();\n      }\n\n      LocatorImpl locator = new LocatorImpl();\n\n      locator.setPublicId(source.getPublicId());\n      locator.setSystemId(systemId);\n      locator.setLineNumber(ex.getLineNumber());\n      locator.setColumnNumber(ex.getColumnNumber());\n\n      SAXParseException newEx = new SAXParseException(ex.getMessage(), locator);\n\n      if (errorHandler != null) {\n        errorHandler.error(newEx);\n      }\n\n      throw newEx;\n    } finally {\n      IoUtils.closeQuietly(parser);\n    }\n\n    return document;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9783, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getLogger()", "warning(String)", "getLogger()", "warning(String)"], "tryExpressionStart": 31, "tryExpressionEnd": 35, "tryBlockStart": 31, "tryBlockEnd": 2213, "catchExpressionStart": 1298, "catchExpressionEnd": 1326, "catchBlockStart": 1298, "catchBlockEnd": 2213, "exceptionHandlingCallStart": [606, 1400, 1545, 1545], "exceptionHandlingCallEnd": [642, 1535, 1581, 1669], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 70, "focalAPIEnd": 95, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setConnectTimeout(int)", "connection.addRequestProperty(String,*)", "connection.addRequestProperty(String,String)", "connection.setDoOutput(boolean)", "connection.getInputStream()"], "useStart": [103, 175, 240, 310, 422], "useEnd": [131, 224, 301, 332, 443], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ShadowDog007/MobManager/tree/master/src/main/java/com/forgenz/mobmanager/common/util/Updater.java", "rawCode": "  private boolean read() {\n    try {\n      final URLConnection conn = this.url.openConnection();\n      conn.setConnectTimeout(5000);\n\n      if (this.apiKey != null) {\n        conn.addRequestProperty(\"X-API-Key\", this.apiKey);\n      }\n      conn.addRequestProperty(\"User-Agent\", \"Updater (by Gravity)\");\n\n      conn.setDoOutput(true);\n\n      final BufferedReader reader =\n          new BufferedReader(new InputStreamReader(conn.getInputStream()));\n      final String response = reader.readLine();\n\n      final JSONArray array = (JSONArray) JSONValue.parse(response);\n\n      if (array.size() == 0) {\n        this.plugin\n            .getLogger()\n            .warning(\"The updater could not find any files for the project id \" + this.id);\n        this.result = UpdateResult.FAIL_BADID;\n        return false;\n      }\n\n      this.versionName =\n          (String) ((JSONObject) array.get(array.size() - 1)).get(Updater.TITLE_VALUE);\n      this.versionLink =\n          (String) ((JSONObject) array.get(array.size() - 1)).get(Updater.LINK_VALUE);\n      this.versionType =\n          (String) ((JSONObject) array.get(array.size() - 1)).get(Updater.TYPE_VALUE);\n      this.versionGameVersion =\n          (String) ((JSONObject) array.get(array.size() - 1)).get(Updater.VERSION_VALUE);\n\n      return true;\n    } catch (final IOException e) {\n      if (e.getMessage().contains(\"HTTP response code: 403\")) {\n        this.plugin\n            .getLogger()\n            .warning(\"dev.bukkit.org rejected the API key provided in plugins/Updater/config.yml\");\n        this.plugin\n            .getLogger()\n            .warning(\"Please double-check your configuration to ensure it is correct.\");\n        this.result = UpdateResult.FAIL_APIKEY;\n      } else {\n        this.plugin\n            .getLogger()\n            .warning(\"The updater could not contact dev.bukkit.org for updating.\");\n        this.plugin\n            .getLogger()\n            .warning(\n                \"If you have not recently modified your configuration and this is the first time you are seeing this message, the site may be experiencing temporary downtime.\");\n        this.result = UpdateResult.FAIL_DBO;\n      }\n      e.printStackTrace();\n      return false;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9784, "initialization": ["URL url = new URL(String)"], "initializationStart": [425], "initializationEnd": [500], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 523, "focalAPIEnd": 543, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.read(byte[])"], "useStart": [614], "useEnd": [629], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Mobicents/sip-servlets/tree/master/sip-servlets-test-suite/testsuite/src/test/java/org/mobicents/servlet/sip/testsuite/session/SipAppSessionTerminationTest.java", "rawCode": "  /**\n   * Test if the sip app session is invalidated and destroyed when both the sip session and http\n   * session are invalidated\n   *\n   * @throws Exception\n   */\n  public void testSipAppSessionTerminationHttpSessionInvalidated() throws Exception {\n\n    logger.info(\n        \"Trying to reach url : \"\n            + CLICK2DIAL_URL\n            + CLICK2DIAL_PARAMS\n            + \"&invalidateHttpSession=true\");\n\n    URL url = new URL(CLICK2DIAL_URL + CLICK2DIAL_PARAMS + \"&invalidateHttpSession=true\");\n    InputStream in = url.openConnection().getInputStream();\n\n    byte[] buffer = new byte[10000];\n    int len = in.read(buffer);\n    String httpResponse = \"\";\n    for (int q = 0; q < len; q++) {\n      httpResponse += (char) buffer[q];\n    }\n    logger.info(\"Received the follwing HTTP response: \" + httpResponse);\n\n    Thread.sleep(TIMEOUT);\n    assertTrue(receiver.getOkToByeReceived());\n    Thread.sleep(TIMEOUT);\n    Iterator<String> allMessagesIterator = receiver.getAllMessagesContent().iterator();\n    logger.info(\"all messages received : \");\n    while (allMessagesIterator.hasNext()) {\n      String message = (String) allMessagesIterator.next();\n      logger.info(message);\n    }\n    assertTrue(receiver.getAllMessagesContent().contains(\"sipAppSessionDestroyed\"));\n  }\n"}, {"dataset": "openConnection", "exampleID": 9785, "initialization": ["URL url = new URL(String)"], "initializationStart": [123], "initializationEnd": [141], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 101, "tryExpressionEnd": 105, "tryBlockStart": 101, "tryBlockEnd": 541, "catchExpressionStart": 454, "catchExpressionEnd": 476, "catchBlockStart": 454, "catchBlockEnd": 541, "exceptionHandlingCallStart": [484], "exceptionHandlingCallEnd": [534], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 170, "focalAPIEnd": 190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/selesse/WineDB/tree/master/src/main/java/com/selesse/android/winedb/async/AsyncImageLoader.java", "rawCode": "  private InputStream openHttpConnection(String streamUrl) {\n    InputStream inputStream = null;\n    try {\n      URL url = new URL(streamUrl);\n      URLConnection conn = url.openConnection();\n\n      HttpURLConnection httpConn = (HttpURLConnection) conn;\n      httpConn.setRequestMethod(\"GET\");\n      httpConn.connect();\n\n      if (httpConn.getResponseCode() == HttpURLConnection.HTTP_OK) {\n        inputStream = httpConn.getInputStream();\n      }\n\n    } catch (IOException e) {\n      Log.e(TAG, \"Error fetching image \" + streamUrl, e);\n    }\n\n    return inputStream;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9786, "initialization": ["URL url = new URL(String)"], "initializationStart": [94], "initializationEnd": [350], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 408, "focalAPIEnd": 430, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.setDoOutput(boolean)", "connection.setAllowUserInteraction(boolean)", "connection.setUseCaches(boolean)", "connection.getHeaderField(String)"], "useStart": [436, 470, 517, 570], "useEnd": [464, 511, 547, 609], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wholcomb/tip/tree/master/projects/unsorted/get_calendar/GetCalendar.java", "rawCode": "  public File getCalendars() throws IOException {\n    fileCount = 0;\n\n    URL index =\n        new URL(\n            \"http://page-a-day.com\"\n                + \"/pub-bin/paduserlogin.pl?rm=setuser\"\n                + \"&target_uri=/index.pl\"\n                + \"&email=\"\n                + username\n                + \"&password=\"\n                + password);\n\n    HttpURLConnection connection = (HttpURLConnection) index.openConnection();\n    connection.setDoOutput(true);\n    connection.setAllowUserInteraction(false);\n    connection.setUseCaches(false);\n\n    String cookie = connection.getHeaderField(\"Set-Cookie\");\n\n    DateFormat dirFormat = new SimpleDateFormat(\"yyyy.MM.dd_hh:mm:ss\");\n\n    File outputDirectory =\n        new File(\n            System.getProperty(\"java.io.tmpdir\")\n                + File.separator\n                + calendar\n                + \"-\"\n                + dirFormat.format(time.getTime())\n                + File.separator);\n    outputDirectory.mkdir();\n\n    if ((sides & FRONT) != 0) {\n      getPage(\"front\", cookie, outputDirectory);\n    }\n    if ((sides & BACK) != 0) {\n      getPage(\"back\", cookie, outputDirectory);\n    }\n    return outputDirectory;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9787, "initialization": ["URL url = getURLAndAssertProtocol(VirtualFile)"], "initializationStart": [221], "initializationEnd": [250], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 277, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbossas/jboss-vfs/tree/master/src/test/java/org/jboss/test/vfs/URLConnectionUnitTestCase.java", "rawCode": "  public void testTempPath() throws Exception {\n    File temp = File.createTempFile(\"123\", \".tmp\");\n    temp.deleteOnExit();\n    VirtualFile file = VFS.getChild(temp.toURI());\n    assertTrue(file.exists());\n    URL url = getURLAndAssertProtocol(file);\n    URLConnection conn = url.openConnection();\n    assertEquals(file.getLastModified(), conn.getLastModified());\n  }\n"}, {"dataset": "openConnection", "exampleID": 9788, "initialization": ["Proxy proxy = new Proxy(*,SocketAddress)", "URL url = new URL(String)"], "initializationStart": [197, 254], "initializationEnd": [236, 272], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 56, "tryExpressionEnd": 60, "tryBlockStart": 56, "tryBlockEnd": 726, "catchExpressionStart": 653, "catchExpressionEnd": 673, "catchBlockStart": 653, "catchBlockEnd": 726, "exceptionHandlingCallStart": [681], "exceptionHandlingCallEnd": [700], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 325, "focalAPIEnd": 350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [404], "useEnd": [425], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhoulzhou/IPCPlayer/tree/master/src/com/weibo/net/AuthWeiboActivity.java", "rawCode": "  private static String getHtml(String urlString) {\n    try {\n      StringBuffer html = new StringBuffer();\n      SocketAddress sa = new InetSocketAddress(\"10.75.0.103\", 8093);\n      Proxy proxy = new Proxy(java.net.Proxy.Type.HTTP, sa);\n      URL url = new URL(urlString);\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection(proxy);\n      InputStreamReader isr = new InputStreamReader(conn.getInputStream());\n      BufferedReader br = new BufferedReader(isr);\n      String temp;\n      while ((temp = br.readLine()) != null) {\n        html.append(temp);\n      }\n      br.close();\n      isr.close();\n      return html.toString();\n    } catch (Exception e) {\n      e.printStackTrace();\n      return null;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9789, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 222, "focalAPIEnd": 242, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getLastModified()", "connection.getInputStream()"], "useStart": [268, 369], "useEnd": [290, 390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/werpu/weblets/tree/master/weblets-impl/src/main/java/net/java/dev/weblets/impl/util/ResourceloadingUtilsImpl.java", "rawCode": "  private void loadSimpleResource(\n      WebletConfig config,\n      WebletRequest request,\n      WebletResponse response,\n      URL url,\n      CopyStrategy copyProvider)\n      throws IOException {\n    URLConnection conn = url.openConnection();\n    long lastmodified = conn.getLastModified();\n    loadResourceFromStream(\n        config, request, response, copyProvider, conn.getInputStream(), lastmodified);\n  }\n"}, {"dataset": "openConnection", "exampleID": 9790, "initialization": ["URL url = new URL(*)"], "initializationStart": [180], "initializationEnd": [201], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 254, "focalAPIEnd": 274, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.connect()", "connection.getResponseCode()"], "useStart": [282, 354], "useEnd": [296, 376], "hasFinally": 1, "cleanUpCall": ["stop()"], "finallyExpressionStart": 385, "finallyExpressionEnd": 393, "finallyBlockStart": 385, "finallyBlockEnd": 414, "cleanUpCallStart": [401], "cleanUpCallEnd": [407], "url": "https://github.com/linpawslitap/mds_scaling/tree/master/hadoop/hadoop-common-project/hadoop-auth/src/test/java/org/apache/hadoop/security/authentication/client/TestPseudoAuthenticator.java", "rawCode": "  public void testAnonymousDisallowed() throws Exception {\n    setAuthenticationHandlerConfig(getAuthenticationHandlerConfiguration(false));\n    start();\n    try {\n      URL url = new URL(getBaseURL());\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      conn.connect();\n      assertEquals(HttpURLConnection.HTTP_UNAUTHORIZED, conn.getResponseCode());\n    } finally {\n      stop();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9791, "initialization": ["URL url = new URL(String)"], "initializationStart": [150], "initializationEnd": [208], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 69, "tryExpressionEnd": 73, "tryBlockStart": 69, "tryBlockEnd": 1219, "catchExpressionStart": 1096, "catchExpressionEnd": 1128, "catchBlockStart": 1096, "catchBlockEnd": 1162, "exceptionHandlingCallStart": [1136], "exceptionHandlingCallEnd": [1155], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 261, "focalAPIEnd": 281, "followUpCheck": "connection.getResponseCode() != 200", "checkType": "IF", "followUpCheckExpressionStart": 698, "followUpCheckExpressionEnd": 732, "followUpCheckBlockStart": 698, "followUpCheckBlockEnd": 958, "use": ["connection.setDoOutput(boolean)", "connection.setRequestMethod(String)", "connection.setRequestProperty(String,String)", "connection.getOutputStream()", "connection.getErrorStream()", "connection.getInputStream()", "connection.disconnect()"], "useStart": [289, 319, 356, 560, 765, 879, 1071], "useEnd": [311, 348, 415, 582, 786, 900, 1088], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mgipay/MGIPAY/tree/master/CXFService/CXFRest/src/com/ac/test/MGI_PayPal_Test.java", "rawCode": "  @Test\n  public void TestDetailLookup() {\n    setCredentials();\n    try {\n      System.out.println(TransactionStatus.AVAIL.value());\n      URL url = new URL(\"http://localhost:8092/CXFRest/rest/detailLookUp\");\n      HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n      conn.setDoOutput(true);\n      conn.setRequestMethod(\"POST\");\n      conn.setRequestProperty(\"Content-Type\", \"application/json\");\n\n      String inputJsonObject =\n          \"{\\\"DetailLookupInputBean\\\":{\\\"referenceNumber\\\":\\\"\" + \"71016865\" + \"\\\"}}\";\n\n      OutputStream os = conn.getOutputStream();\n      os.write(inputJsonObject.getBytes());\n      os.flush();\n      Scanner scanner;\n      String response;\n      if (conn.getResponseCode() != 200) {\n        scanner = new Scanner(conn.getErrorStream());\n        response = \"Error From Server \\n\\n\";\n      } else {\n        scanner = new Scanner(conn.getInputStream());\n        response = \"Response From Server \\n\\n\";\n      }\n      scanner.useDelimiter(\"\\\\Z\");\n\n      LOGGER.debug(response + scanner.next());\n      scanner.close();\n      conn.disconnect();\n    } catch (MalformedURLException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9792, "initialization": ["URL url = new URL(String)", "Proxy proxy = MobyletConfig.getHttpProxy()"], "initializationStart": [164, 235], "initializationEnd": [177, 256], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["new MobyletRuntimeException(String,*)"], "tryExpressionStart": 142, "tryExpressionEnd": 146, "tryBlockStart": 142, "tryBlockEnd": 732, "catchExpressionStart": 504, "catchExpressionEnd": 536, "catchBlockStart": 504, "catchBlockEnd": 621, "exceptionHandlingCallStart": [550], "exceptionHandlingCallEnd": [614], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "proxy!=null", "guardType": "IF {", "guardExpressionStart": 231, "guardExpressionEnd": 265, "guardBlockStart": 231, "guardBlockEnd": 443, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 312, "focalAPIEnd": 353, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["url.openConnection()"], "useStart": [414], "useEnd": [434], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seasarorg/mobylet/tree/master/mobylet-core/src/main/java/org/mobylet/core/util/HttpUtils.java", "rawCode": "  public static HttpURLConnection getHttpUrlConnection(String path) {\n    MobyletConfig config = SingletonUtils.get(MobyletConfig.class);\n    try {\n      URL url = new URL(path);\n      HttpURLConnection urlConnection = null;\n      if (config.getHttpProxy() != null) {\n        urlConnection = (HttpURLConnection) url.openConnection(config.getHttpProxy());\n      } else {\n        urlConnection = (HttpURLConnection) url.openConnection();\n      }\n      // ReturnConnection\n      return urlConnection;\n    } catch (MalformedURLException e) {\n      throw new MobyletRuntimeException(\"[Malformed URL] path = \" + path, e);\n    } catch (IOException e) {\n      throw new MobyletRuntimeException(\"[URL IO-Exception] path = \" + path, e);\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9793, "initialization": ["URL url = new URL(String,String,int,String)"], "initializationStart": [114], "initializationEnd": [162], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["println(*)"], "tryExpressionStart": 89, "tryExpressionEnd": 93, "tryBlockStart": 89, "tryBlockEnd": 676, "catchExpressionStart": 579, "catchExpressionEnd": 607, "catchBlockStart": 579, "catchBlockEnd": 676, "exceptionHandlingCallStart": [615], "exceptionHandlingCallEnd": [644], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 224, "focalAPIEnd": 247, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [341], "useEnd": [371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emolinablas/CoretelProject/tree/master/Coretel/src/com/researchmobile/coretel/supervision/ws/ConnectWS.java", "rawCode": "  public JSONObject ListaTipoEventos(String url) {\n    JSONObject jsonObject = null;\n    try {\n      URL urlCon = new URL(\"http\", IP_SERVER, PUERTO, \"/WS/\" + url);\n      HttpURLConnection urlConnection = (HttpURLConnection) urlCon.openConnection();\n      System.out.println(\"DatosUsuario - url = \" + urlCon);\n      InputStream inputStream = urlConnection.getInputStream();\n\n      String responseInputStream = convertStreamToString(inputStream);\n      System.out.println(responseInputStream);\n      jsonObject = new JSONObject(responseInputStream);\n      return jsonObject;\n    } catch (Exception exception) {\n      System.out.println(exception);\n      return jsonObject;\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9794, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 238, "focalAPIEnd": 259, "followUpCheck": "connection != null && connection instanceof HttpURLConnection", "checkType": "IF", "followUpCheckExpressionStart": 442, "followUpCheckExpressionEnd": 508, "followUpCheckBlockStart": 442, "followUpCheckBlockEnd": 577, "use": ["connection.getInputStream()", "connection.disconnect()"], "useStart": [274, 521], "useEnd": [301, 566], "hasFinally": 1, "cleanUpCall": ["closeQuietly(OutputStream)", "closeQuietly(InputStream)", "URLConnection.disconnect()"], "finallyExpressionStart": 372, "finallyExpressionEnd": 380, "finallyBlockStart": 372, "finallyBlockEnd": 585, "cleanUpCallStart": [390, 416, 521], "cleanUpCallEnd": [406, 432, 566], "url": "https://github.com/gxa/gxa/tree/master/atlas-loader/src/main/java/uk/ac/ebi/gxa/loader/steps/ArrayDataStep.java", "rawCode": "  private static void copyFile(URL from, File to) throws IOException {\n    synchronized (COPY_FILE_LOCK) {\n      URLConnection connection = null;\n      InputStream is = null;\n      OutputStream os = null;\n      try {\n        connection = from.openConnection();\n        is = connection.getInputStream();\n        os = new FileOutputStream(to);\n        copy(is, os);\n      } finally {\n        closeQuietly(os);\n        closeQuietly(is);\n        if (connection != null && connection instanceof HttpURLConnection) {\n          ((HttpURLConnection) connection).disconnect();\n        }\n      }\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9795, "initialization": ["Proxy proxy = new Proxy(*,*)"], "initializationStart": [617], "initializationEnd": [704], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new URLException(String,*)"], "tryExpressionStart": 389, "tryExpressionEnd": 393, "tryBlockStart": 389, "tryBlockEnd": 1501, "catchExpressionStart": 1407, "catchExpressionEnd": 1429, "catchBlockStart": 1407, "catchBlockEnd": 1501, "exceptionHandlingCallStart": [1443], "exceptionHandlingCallEnd": [1494], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 747, "focalAPIEnd": 777, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["url.openConnection()"], "useStart": [1067], "useEnd": [1096], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Norconex/commons-lang/tree/master/norconex-commons-lang/src/main/java/com/norconex/commons/lang/url/URLStreamer.java", "rawCode": "  /**\n   * Streams URL content.\n   *\n   * @param url the URL to stream\n   * @param creds credentials for a protected URL\n   * @param proxy proxy to use to stream the URL\n   * @param proxyCreds credentials to access the proxy\n   * @return a URL content InputStream\n   */\n  public static InputStream stream(\n      String url, Credentials creds, HttpHost proxy, Credentials proxyCreds) {\n    try {\n      URLConnection conn;\n      if (proxy != null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Streaming with proxy: \" + proxy.getHostName() + \":\" + proxy.getPort());\n        }\n        Proxy p =\n            new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy.getHostName(), proxy.getPort()));\n        // Authenticator.\n        conn = new URL(url).openConnection(p);\n        if (proxyCreds != null) {\n          LOG.debug(\"Streaming with proxy credentials.\");\n          conn.setRequestProperty(\n              \"Proxy-Authorization\",\n              base64BasicAuth(proxyCreds.getUsername(), proxyCreds.getPassword()));\n        }\n      } else {\n        conn = new URL(url).openConnection();\n      }\n      if (creds != null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Streaming with credentials.\");\n        }\n        conn.setRequestProperty(\n            \"Authorization\", base64BasicAuth(creds.getUsername(), creds.getPassword()));\n      }\n      return responseInputStream(conn);\n    } catch (IOException e) {\n      throw new URLException(\"Could not stream URL: \" + url, e);\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9796, "initialization": ["URL url = new URL(*)"], "initializationStart": [74], "initializationEnd": [96], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 52, "tryExpressionEnd": 56, "tryBlockStart": 52, "tryBlockEnd": 316, "catchExpressionStart": 193, "catchExpressionEnd": 225, "catchBlockStart": 193, "catchBlockEnd": 259, "exceptionHandlingCallStart": [233], "exceptionHandlingCallEnd": [252], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 104, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["url.openStream()"], "useStart": [167], "useEnd": [183], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ctiao/DanmakuFlameMaster/tree/master/DanmakuFlameMaster/src/main/java/master/flame/danmaku/danmaku/parser/android/AndroidFileSource.java", "rawCode": "  public void fillStreamFromHttpFile(Uri uri) {\n    try {\n      URL url = new URL(uri.getPath());\n      url.openConnection();\n      inStream = new BufferedInputStream(url.openStream());\n\n    } catch (MalformedURLException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9797, "initialization": ["URL url = new URL(String)"], "initializationStart": [216], "initializationEnd": [234], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 151, "tryExpressionEnd": 155, "tryBlockStart": 151, "tryBlockEnd": 507, "catchExpressionStart": 384, "catchExpressionEnd": 416, "catchBlockStart": 384, "catchBlockEnd": 450, "exceptionHandlingCallStart": [424], "exceptionHandlingCallEnd": [443], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 331, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mikofski/SifterReader/tree/master/src/com/BreakingBytes/SifterReader/SifterHelper.java", "rawCode": "  /** get URL connection to SifterAPI */\n  public URLConnection getSifterConnection(String sifterURL) {\n    URLConnection sifterConnection = null;\n    try {\n      // create URL object to SifterAPI\n      URL sifter = new URL(sifterURL); // throws MalformedURLException\n      // open connection to SifterAPI\n      sifterConnection = sifter.openConnection(); // throws IOException\n    } catch (MalformedURLException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } // catch errors, do nothing, return null, use onConnectionError\n    return sifterConnection;\n  }\n"}, {"dataset": "openConnection", "exampleID": 9798, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 156, "focalAPIEnd": 176, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["connection.getInputStream()"], "useStart": [229], "useEnd": [256], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/tests/CoreTests/android/core/URLTest.java", "rawCode": "  /** Does a request to the given URL, reads and returns the result. */\n  private String request(URL url) throws Exception {\n    URLConnection connection = url.openConnection();\n    connection.connect();\n\n    InputStream input = connection.getInputStream();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n    try {\n      return reader.readLine();\n    } finally {\n      reader.close();\n    }\n  }\n"}, {"dataset": "openConnection", "exampleID": 9799, "initialization": ["Proxy proxy = new Proxy(*,SocketAddress)"], "initializationStart": [476], "initializationEnd": [508], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "proxy!=null", "guardType": "IF {", "guardExpressionStart": 520, "guardExpressionEnd": 538, "guardBlockStart": 520, "guardBlockEnd": 710, "focalAPI": "connection = url.openConnection(proxy)", "focalAPIStart": 585, "focalAPIEnd": 610, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["url.openConnection(Proxy)"], "useStart": [669], "useEnd": [703], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/paypal/sdk-core-java/tree/master/src/main/java/com/paypal/core/DefaultHttpConnection.java", "rawCode": "  @Override\n  public void createAndconfigureHttpConnection(HttpConfiguration clientConfiguration)\n      throws IOException {\n    this.config = clientConfiguration;\n    URL url = new URL(this.config.getEndPointUrl());\n    Proxy proxy = null;\n    String proxyHost = this.config.getProxyHost();\n    int proxyPort = this.config.getProxyPort();\n    if ((proxyHost != null) && (proxyPort > 0)) {\n      SocketAddress addr = new InetSocketAddress(proxyHost, proxyPort);\n      proxy = new Proxy(Proxy.Type.HTTP, addr);\n    }\n    if (proxy != null) {\n      this.connection = (HttpURLConnection) url.openConnection(proxy);\n    } else {\n      this.connection = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n    }\n    if (this.connection instanceof HttpsURLConnection) {\n      ((HttpsURLConnection) this.connection)\n          .setSSLSocketFactory(this.sslContext.getSocketFactory());\n    } else if (this.connection instanceof com.sun.net.ssl.HttpsURLConnection) {\n      ((com.sun.net.ssl.HttpsURLConnection) this.connection)\n          .setSSLSocketFactory(this.sslContext.getSocketFactory());\n    }\n\n    if (this.config.getProxyUserName() != null && this.config.getProxyPassword() != null) {\n      final String username = this.config.getProxyUserName();\n      final String password = this.config.getProxyPassword();\n      Authenticator authenticator = new DefaultPasswordAuthenticator(username, password);\n      Authenticator.setDefault(authenticator);\n    }\n\n    System.setProperty(\"http.maxConnections\", String.valueOf(this.config.getMaxHttpConnection()));\n    System.setProperty(\"sun.net.http.errorstream.enableBuffering\", \"true\");\n    this.connection.setDoInput(true);\n    this.connection.setDoOutput(true);\n    setRequestMethodViaJreBugWorkaround(this.connection, config.getHttpMethod());\n    this.connection.setConnectTimeout(this.config.getConnectionTimeout());\n    this.connection.setReadTimeout(this.config.getReadTimeout());\n  }\n"}, {"dataset": "openConnection", "exampleID": 9800, "initialization": ["URL url = new URL(*,*,*,*)"], "initializationStart": [3099], "initializationEnd": [3178], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["url.getQuery()", "url.getQuery()", "url.getProtocol()"], "configurationStart": [2520, 2961, 3107], "configurationEnd": [2534, 2975, 3124], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "connection = url.openConnection()", "focalAPIStart": 3934, "focalAPIEnd": 3964, "followUpCheck": "connection instanceof HttpsURLConnection && (true)", "checkType": "IF", "followUpCheckExpressionStart": 3970, "followUpCheckExpressionEnd": 4166, "followUpCheckBlockStart": 3970, "followUpCheckBlockEnd": 9906, "use": ["connection.setConnectTimeout(int)", "connection.setInstanceFollowRedirects(boolean)", "CookieJar.getCookies(url)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(*,*)", "connection.setRequestMethod(*)", "connection.setDoOutput(boolean)", "connection.setRequestProperty(String,String)", "connection.setRequestProperty(String,*)", "connection.getOutputStream()", "connection.getInputStream()", "connection.getErrorStream()", "new RawHTTPResponse(connection,InputStream)"], "useStart": [9911, 9948, 10052, 10118, 10382, 10663, 10752, 11207, 11602, 11894, 12186, 12377, 12959, 14733], "useEnd": [9942, 9996, 10079, 10160, 10576, 10732, 10788, 11229, 11678, 11968, 12208, 12398, 12980, 14762], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sk89q/commandhelper/tree/master/src/main/java/com/laytonsmith/PureUtilities/Web/WebUtility.java", "rawCode": "  /**\n   * Returns the raw web stream. Cookies are used to initiate the request, but the cookie jar isn't\n   * updated with the received cookies.\n   *\n   * @param url\n   * @param settings\n   * @return\n   * @throws SocketTimeoutException\n   * @throws IOException\n   */\n  public static RawHTTPResponse getWebStream(URL url, RequestSettings requestSettings)\n      throws SocketTimeoutException, IOException {\n    if (requestSettings == null) {\n      requestSettings = new RequestSettings();\n    }\n    final RequestSettings settings = requestSettings;\n    Logger logger = settings.getLogger();\n    HTTPMethod method = settings.getMethod();\n    Map<String, List<String>> headers = settings.getHeaders();\n    Map<String, List<String>> parameters = settings.getParameters();\n    Map<String, List<String>> queryParameters = settings.getQueryParameters();\n    CookieJar cookieStash = settings.getCookieJar();\n    boolean followRedirects = settings.getFollowRedirects();\n    final int timeout = settings.getTimeout();\n    String username = settings.getUsername();\n    String password = settings.getPassword();\n    if (logger != null) {\n      logger.log(\n          Level.INFO,\n          \"Using the following settings:\\n\"\n              + \"HTTP method: {0}\\n\"\n              + \"Headers: {1}\\n\"\n              + \"Parameters: {2}\\n\"\n              + \"Raw parameter Length: {3}\\n\"\n              + \"Cookie stash: {4}\\n\"\n              + \"Follow redirects? {5}\\n\"\n              + \"Timeout: {6}\\n\"\n              + \"Username: {7}\\n\"\n              + \"Password length: {8}\\n\",\n          new Object[] {\n            method,\n            headers,\n            parameters,\n            settings.getRawParameter() == null ? \"null\" : settings.getRawParameter().length,\n            cookieStash,\n            followRedirects,\n            timeout,\n            username,\n            password == null ? \"null\" : password.length()\n          });\n    }\n    // First, let's check to see that the url is properly formatted. If there are parameters,\n    // and this is a GET request, we want to tack them on to the end. OR, if there is a raw\n    // parameter and parameters,\n    // and this is a post reqest, put the parameters on anyways.\n    if (parameters != null\n        && !parameters.isEmpty()\n        && (method == HTTPMethod.GET\n            || (method != HTTPMethod.GET\n                && settings.getRawParameter() != null\n                && settings.getRawParameter().length != 0))) {\n      StringBuilder b = new StringBuilder(url.getQuery() == null ? \"\" : url.getQuery());\n      if (b.length() != 0) {\n        b.append(\"&\");\n      }\n      b.append(encodeListParameters(parameters));\n      // Setting this to null avoids further processing below\n      parameters = null;\n      String query = b.toString();\n      url = new URL(url.getProtocol(), url.getHost(), url.getPort(), url.getPath() + \"?\" + query);\n    }\n\n    if (queryParameters != null && !queryParameters.isEmpty()) {\n      String query = url.getQuery();\n      if (query == null) {\n        query = \"?\";\n      }\n      query += encodeListParameters(queryParameters);\n      url = new URL(url.getProtocol(), url.getHost(), url.getPort(), url.getPath() + query);\n    }\n    if (logger != null) {\n      logger.log(Level.INFO, \"Using url: {0}\", url);\n    }\n\n    Proxy proxy;\n    if (settings.getProxy() == null) {\n      proxy = Proxy.NO_PROXY;\n    } else {\n      proxy = settings.getProxy();\n    }\n    if (logger != null) {\n      logger.log(Level.INFO, \"Using proxy: {0}\", proxy);\n    }\n    InetSocketAddress addr = (InetSocketAddress) proxy.address();\n    if (addr != null) {\n      if (addr.isUnresolved()) {\n        throw new IOException(\"Could not resolve the proxy address: \" + addr.toString());\n      }\n    }\n    if (logger != null) {\n      logger.log(Level.INFO, \"Opening connection...\");\n    }\n    // FIXME: When given a bad proxy, this causes it to stall forever\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection(/*proxy*/ );\n    if (conn instanceof HttpsURLConnection\n        && (settings.getDisableCertChecking()\n            || settings.getUseDefaultTrustStore() == false\n            || !settings.getTrustStore().isEmpty())) {\n      HttpsURLConnection conns = (HttpsURLConnection) conn;\n      // User has requested special handling in the certificates.\n\n      final SSLContext sslc;\n      try {\n        sslc = SSLContext.getInstance(\"SSL\");\n      } catch (NoSuchAlgorithmException ex) {\n        throw new IOException(ex);\n      }\n      TrustManager defaultTrustManager = null;\n      {\n        if (settings.getUseDefaultTrustStore()) {\n          TrustManagerFactory tmf;\n          try {\n            tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n          } catch (NoSuchAlgorithmException ex) {\n            throw new RuntimeException(ex);\n          }\n          try {\n            tmf.init((KeyStore) null);\n          } catch (KeyStoreException ex) {\n            throw new IOException(ex);\n          }\n          for (TrustManager tm : tmf.getTrustManagers()) {\n            if (tm instanceof X509TrustManager) {\n              defaultTrustManager = tm;\n              break;\n            }\n          }\n        } else {\n          defaultTrustManager = null;\n        }\n      }\n      final X509TrustManager finalDefaultTrustManager = (X509TrustManager) defaultTrustManager;\n      final TrustManager[] overrideTrustManager =\n          new TrustManager[] {\n            new X509TrustManager() {\n              @Override\n              public void checkClientTrusted(X509Certificate[] xcs, String string)\n                  throws CertificateException {\n                // Hmm. Not sure when this would be used. Always throw for now.\n                throw new CertificateException(\"Not supported yet\");\n              }\n\n              @Override\n              public void checkServerTrusted(X509Certificate[] xcs, String string)\n                  throws CertificateException {\n                if (settings.getDisableCertChecking()) {\n                  // No cert checking, all pass\n                  return;\n                }\n                boolean trusted = true;\n                if (finalDefaultTrustManager != null) {\n                  try {\n                    finalDefaultTrustManager.checkClientTrusted(xcs, string);\n                  } catch (CertificateException ex) {\n                    trusted = false;\n                  }\n                }\n                if (trusted) {\n                  return;\n                }\n                // If any of the certificates are trusted, then the whole chain is trusted\n                for (X509Certificate c : xcs) {\n                  // Unfortunately, we do not know what schemes to use, so we must walk through each\n                  // trust store item one at a time. We have a documented guarantee that we will\n                  // walk\n                  // this list from top to bottom, so we have a linked hash map.\n                  LinkedHashMap<String, String> ts = settings.getTrustStore();\n                  for (String fingerprint : ts.keySet()) {\n                    fingerprint = fingerprint.toLowerCase().replace(\" \", \"\");\n                    try {\n                      String scheme = ts.get(fingerprint);\n                      String fp = getThumbPrint(c, scheme).toLowerCase().replace(\" \", \"\");\n                      if (fp.equals(fingerprint)) {\n                        return;\n                      }\n                    } catch (NoSuchAlgorithmException | CertificateEncodingException ex) {\n                      throw new RuntimeException(ex);\n                    }\n                  }\n                }\n                // None of the certificates matched, so throw an exception\n                throw new CertificateException();\n              }\n\n              @Override\n              public X509Certificate[] getAcceptedIssuers() {\n                if (settings.getDisableCertChecking()) {\n                  return new X509Certificate[0];\n                }\n                if (finalDefaultTrustManager != null) {\n                  return finalDefaultTrustManager.getAcceptedIssuers();\n                }\n                return new X509Certificate[0];\n              }\n            }\n          };\n      try {\n        sslc.init(null, overrideTrustManager, new java.security.SecureRandom());\n      } catch (KeyManagementException ex) {\n        throw new IOException(ex);\n      }\n      final SSLSocketFactory ssf;\n      ssf = sslc.getSocketFactory();\n      conns.setSSLSocketFactory(\n          new SSLSocketFactory() {\n\n            @Override\n            public String[] getDefaultCipherSuites() {\n              return ssf.getDefaultCipherSuites();\n            }\n\n            @Override\n            public String[] getSupportedCipherSuites() {\n              return ssf.getSupportedCipherSuites();\n            }\n\n            @Override\n            public Socket createSocket(Socket socket, String string, int i, boolean bln)\n                throws IOException {\n              return ssf.createSocket(socket, string, i, bln);\n            }\n\n            @Override\n            public Socket createSocket(String string, int i)\n                throws IOException, UnknownHostException {\n              return ssf.createSocket(string, i);\n            }\n\n            @Override\n            public Socket createSocket(String string, int i, InetAddress ia, int i1)\n                throws IOException, UnknownHostException {\n              return ssf.createSocket(string, i, ia, i1);\n            }\n\n            @Override\n            public Socket createSocket(InetAddress ia, int i) throws IOException {\n              return ssf.createSocket(ia, i);\n            }\n\n            @Override\n            public Socket createSocket(InetAddress ia, int i, InetAddress ia1, int i1)\n                throws IOException {\n              return ssf.createSocket(ia, i, ia1, i1);\n            }\n          });\n    }\n    conn.setConnectTimeout(timeout);\n    conn.setInstanceFollowRedirects(followRedirects);\n    if (cookieStash != null) {\n      String cookies = cookieStash.getCookies(url);\n      if (cookies != null) {\n        conn.setRequestProperty(\"Cookie\", cookies);\n      }\n    }\n    if (username != null && password != null) {\n      if (logger != null) {\n        logger.log(\n            Level.INFO, \"Using Username/Password authentication, adding Authorization header\");\n      }\n      conn.setRequestProperty(\n          \"Authorization\",\n          \"Basic \"\n              + new String(\n                  Base64.encodeBase64((username + \":\" + password).getBytes(\"UTF-8\")), \"UTF-8\"));\n    }\n    if (headers != null) {\n      for (String key : headers.keySet()) {\n        conn.setRequestProperty(key, StringUtils.Join(headers.get(key), \",\"));\n      }\n    }\n    conn.setRequestMethod(method.name());\n    if ((parameters != null && !parameters.isEmpty() && !method.equals(HTTPMethod.GET))\n        || settings.getRawParameter() != null) {\n      if (logger != null) {\n        if (method.equals(HTTPMethod.GET)) {\n          logger.log(\n              Level.WARNING,\n              \"Method was set to GET, but raw parameter data was provided, so method\"\n                  + \" is changing to POST.\");\n        }\n      }\n      conn.setDoOutput(true);\n      byte[] params = ArrayUtils.EMPTY_BYTE_ARRAY;\n      if (parameters != null && !parameters.isEmpty()) {\n        if (logger != null) {\n          logger.log(\n              Level.INFO,\n              \"Parameters are added, and content type set to application/x-www-form-urlencoded\");\n        }\n        params = encodeListParameters(parameters).getBytes(\"UTF-8\");\n        conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n      } else if (settings.getRawParameter() != null) {\n        if (logger != null) {\n          logger.log(Level.INFO, \"Raw parameter is added\");\n        }\n        params = settings.getRawParameter();\n      }\n      conn.setRequestProperty(\"Content-Length\", Integer.toString(params.length));\n      if (logger != null) {\n        logger.log(Level.INFO, \"Content length is {0}\", params.length);\n        logger.log(Level.INFO, \"Writing out request now\");\n      }\n      OutputStream os = new BufferedOutputStream(conn.getOutputStream());\n      os.write(params);\n      os.close();\n    }\n    if (logger != null) {\n      logger.log(Level.INFO, \"Output sent\");\n    }\n    InputStream is;\n    try {\n      is = conn.getInputStream();\n    } catch (UnknownHostException e) {\n      throw e;\n    } catch (Exception e) {\n      if (logger != null) {\n        logger.log(\n            Level.SEVERE, \"Exception occurred, {0} response from server\", conn.getResponseCode());\n      }\n      if (e instanceof SSLHandshakeException) {\n        // The certificate was not valid, and the input stream will be null anyways, so just throw\n        // at this\n        // point.\n        throw new IOException(\n            \"Invalid SSL certificate for \" + url.getHost() + \". Refusing to connect.\");\n      }\n      is = conn.getErrorStream();\n    }\n\n    if (!settings.getDisableCompressionHandling() && conn.getContentEncoding() != null) {\n      /*\n      The HTTP spec for Content-Encoding specifies that multiple comma separated values can be provided. Where\n      more than one is provided, this means that the content was compressed multiple times, in the specified order.\n      Given that, we must loop through the list, wrapping the input stream in the given decompression handlers.\n      In practice, this will only loop once though.\n      */\n      List<String> compression =\n          Stream.of(conn.getContentEncoding().split(\",\"))\n              .map((e) -> e.trim())\n              .collect(Collectors.toList());\n      for (String scheme : compression) {\n        if (\"x-gzip\".equals(scheme) || \"gzip\".equals(scheme)) {\n          if (logger != null) {\n            logger.log(Level.INFO, \"Response is gzipped, using a GZIPInputStream\");\n          }\n          is = new GZIPInputStream(is);\n        } else if (\"deflate\".equals(scheme)) {\n          if (logger != null) {\n            logger.log(Level.INFO, \"Response is zipped, using an InflaterInputStream\");\n          }\n          is = new InflaterInputStream(is);\n        } else if (\"br\".equals(scheme)) {\n          if (logger != null) {\n            logger.log(Level.INFO, \"Response is Brotli compressed, using a BrotliInputStream\");\n          }\n          is = new BrotliInputStream(is);\n        } else if (\"identity\".equals(scheme)) {\n          // This is the default, meaning no transformation is needed.\n          if (logger != null) {\n            logger.log(Level.INFO, \"Response is not compressed\");\n          }\n        }\n      }\n    }\n    if (is == null) {\n      throw new IOException(\"Could not connect to \" + url);\n    }\n    return new RawHTTPResponse(conn, is);\n  }\n"}]