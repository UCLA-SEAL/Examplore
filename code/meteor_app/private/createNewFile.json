[{"dataset": "createNewFile", "exampleID": 1901, "initialization": ["File file = new File(String)"], "initializationStart": [278], "initializationEnd": [296], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 350, "focalAPIEnd": 373, "followUpCheck": "!var", "checkType": "IF", "followUpCheckExpressionStart": 383, "followUpCheckExpressionEnd": 391, "followUpCheckBlockStart": 383, "followUpCheckBlockEnd": 558, "use": ["new FileOutputStream(file)"], "useStart": [998], "useEnd": [1027], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nmacs/lm3s-uclinux/tree/master/lib/classpath/tools/gnu/classpath/tools/keytool/Command.java", "rawCode": "  protected void setOutputStreamParam(String fileName) throws SecurityException, IOException {\n    if (fileName == null || fileName.trim().length() == 0) {\n      outStream = System.out;\n      systemOut = true;\n    } else {\n      fileName = fileName.trim();\n      File outFile = new File(fileName);\n      if (!outFile.exists()) {\n        boolean ok = outFile.createNewFile();\n        if (!ok)\n          throw new InvalidParameterException(\n              Messages.getFormattedString(\n                  \"Command.19\", // $NON-NLS-1$\n                  fileName));\n      } else {\n        if (!outFile.isFile())\n          throw new InvalidParameterException(\n              Messages.getFormattedString(\n                  \"Command.42\", // $NON-NLS-1$\n                  fileName));\n        if (!outFile.canWrite())\n          throw new InvalidParameterException(\n              Messages.getFormattedString(\n                  \"Command.44\", // $NON-NLS-1$\n                  fileName));\n      }\n      outStream = new FileOutputStream(outFile);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1902, "initialization": ["File file = new File(File,String)"], "initializationStart": [219], "initializationEnd": [244], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 250, "focalAPIEnd": 269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/geoserver-2.0.x/tree/master/web/core/src/test/java/org/geoserver/web/wicket/browser/FileDataViewTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    tester = new WicketTester();\n    root = new File(\"target/test-dataview\");\n    if (root.exists()) FileUtils.deleteDirectory(root);\n    root.mkdirs();\n    one = new File(root, \"one.txt\");\n    one.createNewFile();\n    two = new File(root, \"two.sld\");\n    two.createNewFile();\n\n    fileProvider = new FileProvider(root);\n\n    tester.startPage(\n        new FormTestPage(\n            new ComponentBuilder() {\n\n              public Component buildComponent(String id) {\n\n                return new FileDataView(id, fileProvider) {\n\n                  @Override\n                  protected void linkNameClicked(File file, AjaxRequestTarget target) {\n                    lastClicked = file;\n                  }\n                };\n              }\n            }));\n\n    // WicketHierarchyPrinter.print(tester.getLastRenderedPage(), true, true);\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1903, "initialization": ["File file = new File(*,String)"], "initializationStart": [80], "initializationEnd": [113], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 130, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(var)", "file.getName()"], "useStart": [119, 1060], "useEnd": [152, 1075], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zeph/grinder/tree/master/source/tests-src/net/grinder/console/swingui/TestFileTreeModel.java", "rawCode": "  public void testWithFileStructure() throws Exception {\n    final File file1 = new File(getDirectory(), \"file1\");\n    assertTrue(file1.createNewFile());\n    final File dir1 = new File(getDirectory(), \"dir1\");\n    assertTrue(dir1.mkdir());\n    final File file2 = new File(dir1, \"file2\");\n    assertTrue(file2.createNewFile());\n    final File file3 = new File(dir1, \"file3\");\n    assertTrue(file3.createNewFile());\n\n    final FileTreeModel fileTreeModel =\n        new FileTreeModel(m_editorModel, m_nullFileFilter, getDirectory());\n    final FileTreeModel fileTreeModel2 =\n        new FileTreeModel(m_editorModel, m_nullFileFilter, getDirectory());\n    fileTreeModel.setRootDirectory(getDirectory());\n    final Node rootNode = (Node) fileTreeModel.getRoot();\n    assertFalse(rootNode.canOpen());\n    assertNull(rootNode.getBuffer());\n\n    assertEquals(2, fileTreeModel.getChildCount(rootNode));\n    final Node dir1Node = (Node) fileTreeModel.getChild(rootNode, 0);\n    final FileNode file1Node = (FileNode) fileTreeModel.getChild(rootNode, 1);\n    assertEquals(file1.getName(), file1Node.toString());\n    assertTrue(file1Node.canOpen());\n\n    assertNull(fileTreeModel.getChild(file1Node, 0));\n    assertEquals(0, fileTreeModel.getChildCount(file1Node));\n    assertTrue(fileTreeModel.isLeaf(file1Node));\n    assertFalse(fileTreeModel2.isLeaf(file1Node));\n\n    assertEquals(-1, fileTreeModel.getIndexOfChild(file1Node, file1Node));\n    assertEquals(0, fileTreeModel.getIndexOfChild(rootNode, dir1Node));\n    assertEquals(1, fileTreeModel.getIndexOfChild(rootNode, file1Node));\n    assertEquals(-1, fileTreeModel2.getIndexOfChild(rootNode, file1Node));\n\n    final FileNode file3Node = (FileNode) fileTreeModel.getChild(dir1Node, 1);\n    assertEquals(1, fileTreeModel.getIndexOfChild(dir1Node, file3Node));\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1904, "initialization": ["File file = new File(File,String)"], "initializationStart": [129], "initializationEnd": [164], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.delete()"], "configurationStart": [201], "configurationEnd": [218], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 230, "focalAPIEnd": 254, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new PrintStream(file)", "registerNamespaceForCatalog(String,file)"], "useStart": [278, 381], "useEnd": [303, 428], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/2.2.1-r1696/CruxCompiler/src/br/com/sysmap/crux/tools/schema/SchemaGenerator.java", "rawCode": "  /** @param library */\n  private void generateSchemaForTemplateLibrary(String library) throws IOException {\n    File coreFile = new File(destDir, library + \".xsd\");\n    if (coreFile.exists()) {\n      coreFile.delete();\n    }\n    coreFile.createNewFile();\n    PrintStream out = new PrintStream(coreFile);\n\n    String targetNS = \"http://www.sysmap.com.br/templates/\" + library;\n    registerNamespaceForCatalog(targetNS, coreFile);\n\n    out.println(\"<xs:schema \");\n    out.println(\"xmlns=\\\"http://www.sysmap.com.br/templates/\" + library + \"\\\" \");\n    out.println(\"xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" \");\n    out.println(\"xmlns:c=\\\"http://www.sysmap.com.br/crux\\\" \");\n    out.println(\"attributeFormDefault=\\\"unqualified\\\" \");\n    out.println(\"elementFormDefault=\\\"qualified\\\" \");\n    out.println(\"targetNamespace=\\\"\" + targetNS + \"\\\" >\");\n\n    Set<String> templates = Templates.getRegisteredLibraryTemplates(library);\n    for (String id : templates) {\n      Document template = Templates.getTemplate(library, id);\n      generateTypeForTemplate(out, template, id);\n    }\n    out.println(\"</xs:schema>\");\n    out.close();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1905, "initialization": ["File file = new File(String)"], "initializationStart": [66], "initializationEnd": [100], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["e(String,String)"], "tryExpressionStart": 131, "tryExpressionEnd": 135, "tryBlockStart": 131, "tryBlockEnd": 258, "catchExpressionStart": 172, "catchExpressionEnd": 194, "catchBlockStart": 172, "catchBlockEnd": 258, "exceptionHandlingCallStart": [204], "exceptionHandlingCallEnd": [249], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 145, "focalAPIEnd": 162, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/server/BluetoothService.java", "rawCode": "  private void createIncomingConnectionStateFile() {\n    File f = new File(INCOMING_CONNECTION_FILE);\n    if (!f.exists()) {\n      try {\n        f.createNewFile();\n      } catch (IOException e) {\n        Log.e(TAG, \"IOException: cannot create file\");\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1906, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 834, "focalAPIEnd": 855, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/java/com/android/internal/util/JournaledFile.java", "rawCode": "  /**\n   * Returns a file for you to write.\n   *\n   * @more If a write is already happening, throws. In other words, you must provide your own\n   *     locking.\n   *     <p>Call {@link #commit} to commit the changes, or {@link #rollback} to forget the changes.\n   */\n  public File chooseForWrite() {\n    if (mWriting) {\n      throw new IllegalStateException(\"uncommitted write already in progress\");\n    }\n    if (!mReal.exists()) {\n      // If the real one doesn't exist, it's either because this is the first time\n      // or because something went wrong while copying them. In this case, we can't\n      // trust anything that's in temp. In order to have the chooseForRead code not\n      // use the temporary one until it's fully written, create an empty file\n      // for real, which will we'll shortly delete.\n      try {\n        mReal.createNewFile();\n      } catch (IOException e) {\n        // Ignore\n      }\n    }\n\n    if (mTemp.exists()) {\n      mTemp.delete();\n    }\n    mWriting = true;\n    return mTemp;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1907, "initialization": ["File file = Context.getDatabasePath(String)"], "initializationStart": [795], "initializationEnd": [818], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 771, "tryExpressionEnd": 775, "tryBlockStart": 771, "tryBlockEnd": 1953, "catchExpressionStart": 1579, "catchExpressionEnd": 1599, "catchBlockStart": 1579, "catchBlockEnd": 1687, "exceptionHandlingCallStart": [1832], "exceptionHandlingCallEnd": [1855], "configuration": ["file.getParentFile()"], "configurationStart": [840], "configurationEnd": [860], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 959, "focalAPIEnd": 979, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [1001], "useEnd": [1027], "hasFinally": 1, "cleanUpCall": ["OutputStream.flush()", "OutputStream.close()"], "finallyExpressionStart": 1863, "finallyExpressionEnd": 1871, "finallyBlockStart": 1863, "finallyBlockEnd": 1953, "cleanUpCallStart": [1906, 1927], "cleanUpCallEnd": [1917, 1938], "url": "https://github.com/snooplsm/njtransit/tree/master/scheduler/src/com/njtransit/TransitDBHelper.java", "rawCode": "  private void copyDataBase(String at) throws IOException {\n    long start = System.currentTimeMillis();\n    try {\n      installMeter.onBeforeCopy();\n    } catch (Exception e) {\n      Log.e(getClass().getSimpleName(), \"onBeforeCopy Exception\", e);\n    }\n    List<String> partions = new ArrayList<String>();\n    final String[] files = assets.list(\"database\");\n    for (String f : files) {\n      if (f.startsWith(\"database.sqlite_\")) {\n        partions.add(f);\n      }\n    }\n    Collections.sort(partions);\n    long totalSize = partions.size() * 51200;\n\n    try {\n      installMeter.onSizeToBeCopiedCalculated(totalSize);\n    } catch (Exception e) {\n      Log.e(getClass().getSimpleName(), \"onSizeToBeCopiedCalculated Exception\", e);\n    }\n    OutputStream out = null;\n    try {\n      File file = ctx.getDatabasePath(at);\n      File parent = file.getParentFile();\n      if (parent != null) {\n        parent.mkdirs();\n      }\n      if (!file.exists()) {\n        file.createNewFile();\n      }\n      out = new FileOutputStream(file);\n      byte[] buffer = new byte[1024];\n      long totalBytesCopied = 0;\n      for (String partition : partions) {\n        final InputStream in = assets.open(\"database/\" + partition);\n        int read;\n        while ((read = in.read(buffer)) > 0) {\n          out.write(buffer);\n          totalBytesCopied += read;\n        }\n        in.close();\n        try {\n          float percent = totalBytesCopied / (float) totalSize;\n          percent = Math.min(1, percent);\n          installMeter.onPercentCopied(totalSize, percent, totalBytesCopied);\n        } catch (Exception e) {\n          Log.e(getClass().getSimpleName(), \"onPercentCopied Exception\", e);\n        }\n      }\n      Root.deleteScheduleDates(ctx);\n      Root.saveDatabaseVersion(ctx, Root.getVersion(ctx));\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      if (out != null) {\n        out.flush();\n        out.close();\n      }\n    }\n    long end = System.currentTimeMillis();\n    Root.saveCopyDatabaseDuration(ctx, end - start);\n    try {\n      installMeter.onFinishedCopying();\n    } catch (Exception e) {\n      Log.e(getClass().getSimpleName(), \"onFinishedCopying exception\", e);\n    }\n    Log.d(\n        getClass().getSimpleName(),\n        \"copyDatabase(...) took \" + Root.getCopyDatabaseDuration(ctx) + \"ms\");\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1908, "initialization": ["File file = new File(*)"], "initializationStart": [217], "initializationEnd": [262], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 195, "tryExpressionEnd": 199, "tryBlockStart": 195, "tryBlockEnd": 838, "catchExpressionStart": 605, "catchExpressionEnd": 627, "catchBlockStart": 605, "catchBlockEnd": 665, "exceptionHandlingCallStart": [637], "exceptionHandlingCallEnd": [656], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 397, "focalAPIEnd": 417, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["FileOutputStream.close()"], "finallyExpressionStart": 666, "finallyExpressionEnd": 674, "finallyBlockStart": 666, "finallyBlockEnd": 838, "cleanUpCallStart": [583], "cleanUpCallEnd": [594], "url": "https://github.com/ESGF/esgf-web-fe/tree/master/src/java/main/org/esgf/email/Email.java", "rawCode": "  public void writeFileAttachment() {\n    if (this.attachment != null) {\n      FileOutputStream fop = null;\n      File file;\n      String content = this.attachment.getAttachmentContent();\n\n      try {\n\n        file = new File(this.attachment.getAttachmentName());\n\n        fop = new FileOutputStream(file);\n\n        // if file doesnt exists, then create it\n        if (!file.exists()) {\n          file.createNewFile();\n        }\n\n        // get the content in bytes\n        byte[] contentInBytes = content.getBytes();\n\n        fop.write(contentInBytes);\n        fop.flush();\n        fop.close();\n\n      } catch (IOException e) {\n        e.printStackTrace();\n      } finally {\n        try {\n          if (fop != null) {\n            fop.close();\n          }\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1909, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getParentFile()"], "configurationStart": [536], "configurationEnd": [559], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 576, "focalAPIEnd": 599, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RandomAccessFile(file,String)"], "useStart": [658], "useEnd": [693], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vega113/WaveInCloud/tree/master/src/org/waveprotocol/box/server/persistence/file/FileUtils.java", "rawCode": "  /**\n   * Get a file for random binary access. If the file doesn't exist, it will be created.\n   *\n   * <p>Calls to write() will not flush automatically. Call file.getChannel().force(true) to force\n   * writes to flush to disk.\n   *\n   * @param fileRef the file to open\n   * @return an opened RandomAccessFile wrapping the requested file\n   * @throws IOException an error occurred opening or creating the file\n   */\n  public static RandomAccessFile getOrCreateFile(File fileRef) throws IOException {\n    if (!fileRef.exists()) {\n      fileRef.getParentFile().mkdirs();\n      fileRef.createNewFile();\n    }\n\n    RandomAccessFile file;\n    try {\n      file = new RandomAccessFile(fileRef, \"rw\");\n    } catch (FileNotFoundException e) {\n      // This should never happen.\n      throw new IllegalStateException(\"Java said the file exists, but it can't open it\", e);\n    }\n\n    return file;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1910, "initialization": ["File file = new File(String)", "File file = new File(String)"], "initializationStart": [215, 440], "initializationEnd": [229, 454], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.delete()", "file.delete()"], "configurationStart": [315, 546], "configurationEnd": [325, 556], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 599, "focalAPIEnd": 616, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["IFLVService.getStreamableFile(file)"], "useStart": [677], "useEnd": [705], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Juliens/red5/tree/master/src/test/java/org/red5/io/CuePointInjectionTest.java", "rawCode": "  /**\n   * Test MetaData injection\n   *\n   * @throws IOException for fun\n   */\n  public void testCuePointInjection() throws IOException {\n    String path = \"target/test-classes/fixtures/test_cue1.flv\";\n    File f = new File(path);\n    System.out.println(\"Path: \" + f.getAbsolutePath());\n    if (f.exists()) {\n      f.delete();\n    } else {\n      // try test subdirectory\n      path = \"target/test-classes/fixtures/test_cue1.flv\";\n      f = new File(path);\n      System.out.println(\"Path: \" + f.getAbsolutePath());\n      if (f.exists()) {\n        f.delete();\n      }\n    }\n    // Create new file\n    f.createNewFile();\n\n    // Use service to grab FLV file\n    IFLV flv = (IFLV) service.getStreamableFile(f);\n\n    // Grab a writer for writing a new FLV\n    ITagWriter writer = flv.getWriter();\n\n    // Create a reader for testing\n    File readfile = new File(path);\n    // assertTrue(readfile.exists());\n\n    IFLV readflv = (IFLV) service.getStreamableFile(readfile);\n    readflv.setCache(NoCacheImpl.getInstance());\n\n    // Grab a reader for reading a FLV in\n    ITagReader reader = readflv.getReader();\n\n    // Inject MetaData\n    writeTagsWithInjection(reader, writer);\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1911, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.mkdirs()", "file.delete()"], "configurationStart": [55, 79], "configurationEnd": [73, 97], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 104, "focalAPIEnd": 129, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maqetta/maqetta/tree/master/maqetta.core.server/src/org/maqetta/server/StorageFileSystem.java", "rawCode": "  public void createNewFile() throws IOException {\n    this.file.mkdirs();\n    this.file.delete();\n\n    this.file.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1912, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.delete()"], "configurationStart": [107], "configurationEnd": [120], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 132, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FLVWriter(file,boolean)"], "useStart": [178], "useEnd": [204], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Juliens/red5/tree/master/src/main/java/org/red5/io/flv/impl/FLV.java", "rawCode": "  /** {@inheritDoc} */\n  public ITagWriter getWriter() throws IOException {\n    if (file.exists()) {\n      file.delete();\n    }\n    file.createNewFile();\n    ITagWriter writer = new FLVWriter(file, false);\n    return writer;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1913, "initialization": ["File file = new File(*,String)"], "initializationStart": [1323], "initializationEnd": [1368], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getPlugin()", "getLogger()", "log(*,*,*)"], "tryExpressionStart": 1406, "tryExpressionEnd": 1410, "tryBlockStart": 1406, "tryBlockEnd": 1586, "catchExpressionStart": 1454, "catchExpressionEnd": 1477, "catchBlockStart": 1454, "catchBlockEnd": 1552, "exceptionHandlingCallStart": [1487, 1487, 1487], "exceptionHandlingCallEnd": [1503, 1515, 1543], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1420, "focalAPIEnd": 1444, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["loadConfiguration(file)"], "useStart": [1619], "useEnd": [1664], "hasFinally": 1, "cleanUpCall": [], "finallyExpressionStart": 1553, "finallyExpressionEnd": 1561, "finallyBlockStart": 1553, "finallyBlockEnd": 1586, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Lolmewn/Sortal2/tree/master/src/main/java/nl/lolmewn/sortal/WarpManager.java", "rawCode": "  private void loadUsers() {\n    if (this.getPlugin().getSettings().useMySQL()) {\n      ResultSet set =\n          this.getPlugin()\n              .getMySQL()\n              .executeQuery(\"SELECT * FROM \" + this.getPlugin().getUserTable());\n      if (set == null) {\n        this.getPlugin().getLogger().severe(\"Something is wrong with your MySQL database!\");\n        this.getPlugin().getLogger().severe(\"Plugin is disabling!\");\n        this.getPlugin().getServer().getPluginManager().disablePlugin(this.getPlugin());\n        return;\n      }\n      try {\n        while (set.next()) {\n          String player = set.getString(\"player\");\n          UserInfo info = this.getUserInfo(player);\n          if (set.getString(\"warp\") == null) {\n            // location\n            info.addtoUsedLocation(\n                set.getString(\"world\")\n                    + \",\"\n                    + set.getInt(\"x\")\n                    + \",\"\n                    + set.getInt(\"y\")\n                    + \",\"\n                    + set.getInt(\"z\"),\n                set.getInt(\"used\"));\n            continue;\n          }\n          info.addtoUsedWarp(set.getString(\"warp\"), set.getInt(\"used\"));\n        }\n      } catch (SQLException ex) {\n        this.getPlugin().getLogger().log(Level.SEVERE, null, ex);\n      }\n      return;\n    }\n    File userFile = new File(plugin.getDataFolder(), \"users.yml\");\n    if (!userFile.exists()) {\n      try {\n        userFile.createNewFile();\n      } catch (IOException ex) {\n        this.getPlugin().getLogger().log(Level.SEVERE, null, ex);\n      } finally {\n        return;\n      }\n    }\n    YamlConfiguration c = YamlConfiguration.loadConfiguration(userFile);\n    for (String player : c.getConfigurationSection(\"\").getKeys(false)) {\n      UserInfo info = this.getUserInfo(player);\n      for (String key : c.getConfigurationSection(player).getKeys(false)) {\n        if (!key.contains(\",\")) {\n          // warp\n          info.addtoUsedWarp(key, c.getInt(player + \".\" + key));\n          continue;\n        }\n        info.addtoUsedLocation(key, c.getInt(player + \".\" + key, 0));\n      }\n    }\n    this.getPlugin()\n        .getLogger()\n        .log(Level.INFO, String.format(\"Users loaded: %s\", this.users.size()));\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1914, "initialization": ["File file = new File(File,String)"], "initializationStart": [194], "initializationEnd": [225], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace(String,*)", "consoleMessage(String)"], "tryExpressionStart": 257, "tryExpressionEnd": 261, "tryBlockStart": 257, "tryBlockEnd": 472, "catchExpressionStart": 298, "catchExpressionEnd": 322, "catchBlockStart": 298, "catchBlockEnd": 472, "exceptionHandlingCallStart": [332, 396], "exceptionHandlingCallEnd": [386, 463], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 271, "focalAPIEnd": 288, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.delete()"], "useStart": [506], "useEnd": [516], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sisbell/jxta/tree/master/j2se/apps/jxse-shell/src/main/java/net/jxta/impl/shell/bin/peerconfig/peerconfig.java", "rawCode": "  void setReconfigure(URI jxtaHome, boolean reconfigure) {\n    if (!\"file\".equalsIgnoreCase(jxtaHome.getScheme())) {\n      return;\n    }\n\n    File jxtaHomeDir = new File(jxtaHome);\n    File f = new File(jxtaHomeDir, \"reconf\");\n\n    if (reconfigure) {\n      try {\n        f.createNewFile();\n      } catch (IOException ex1) {\n        printStackTrace(\"Could not create 'reconf' file\", ex1);\n        consoleMessage(\"Create the file 'reconf' by hand before retrying.\");\n      }\n    } else {\n      try {\n        f.delete();\n      } catch (Exception ex1) {\n        printStackTrace(\"Could not remove 'reconf' file\", ex1);\n        consoleMessage(\"Delete the file 'reconf' by hand before retrying.\");\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1915, "initialization": ["File file = new File(String)"], "initializationStart": [590], "initializationEnd": [604], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 945, "catchExpressionStart": 889, "catchExpressionEnd": 911, "catchBlockStart": 889, "catchBlockEnd": 945, "exceptionHandlingCallStart": [919], "exceptionHandlingCallEnd": [938], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 612, "focalAPIEnd": 632, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [663], "useEnd": [689], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world2/tree/master/baseworld2/src/com/tianxia/lib/baseworld2/alipay/NetworkManager.java", "rawCode": "  public boolean urlDownloadToFile(Context context, String strurl, String path) {\n    boolean bRet = false;\n\n    //\n    detectProxy();\n\n    try {\n      URL url = new URL(strurl);\n      HttpURLConnection conn = null;\n      if (mProxy != null) {\n        conn = (HttpURLConnection) url.openConnection(mProxy);\n      } else {\n        conn = (HttpURLConnection) url.openConnection();\n      }\n      conn.setConnectTimeout(connectTimeout);\n      conn.setReadTimeout(readTimeout);\n      conn.setDoInput(true);\n\n      conn.connect();\n      InputStream is = conn.getInputStream();\n\n      File file = new File(path);\n      file.createNewFile();\n      FileOutputStream fos = new FileOutputStream(file);\n\n      byte[] temp = new byte[1024];\n      int i = 0;\n      while ((i = is.read(temp)) > 0) {\n        fos.write(temp, 0, i);\n      }\n\n      fos.close();\n      is.close();\n\n      bRet = true;\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n    return bRet;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1916, "initialization": ["File file = LocalContextStore.getFileForContext(String)"], "initializationStart": [137], "initializationEnd": [175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.exists()"], "configurationStart": [193], "configurationEnd": [206], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 213, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.exists()"], "useStart": [250], "useEnd": [263], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/mylyn.context/tree/master/org.eclipse.mylyn.java.tests/src/org/eclipse/mylyn/java/tests/InteractionContextManagerTest.java", "rawCode": "  public void testHandleToPathConversion() throws IOException {\n    String handle = \"https://bugs.eclipse.org/bugs-123\";\n    File file = contextStore.getFileForContext(handle);\n    assertFalse(file.exists());\n    file.createNewFile();\n    assertTrue(file.exists());\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1917, "initialization": ["File file = new File(File,String)"], "initializationStart": [123], "initializationEnd": [152], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 191, "tryExpressionEnd": 195, "tryBlockStart": 191, "tryBlockEnd": 529, "catchExpressionStart": 340, "catchExpressionEnd": 360, "catchBlockStart": 340, "catchBlockEnd": 394, "exceptionHandlingCallStart": [368], "exceptionHandlingCallEnd": [387], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 223, "focalAPIEnd": 243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file,boolean)"], "useStart": [257], "useEnd": [289], "hasFinally": 1, "cleanUpCall": ["FileOutputStream.close()"], "finallyExpressionStart": 395, "finallyExpressionEnd": 403, "finallyBlockStart": 395, "finallyBlockEnd": 529, "cleanUpCallStart": [442], "cleanUpCallEnd": [453], "url": "https://github.com/sukrupa/school-admin/tree/master/lib/twist/com.thoughtworks.twist.driver.sahi_3.0.0.9411/sahi/src/net/sf/sahi/util/TrafficLogger.java", "rawCode": "  private void store(byte[] bytes, String fileName) {\n    if (!log) return;\n    if (bytes == null) return;\n    File file = new File(threadDir, fileName);\n    FileOutputStream out = null;\n    try {\n      if (!file.exists()) file.createNewFile();\n      out = new FileOutputStream(file, true);\n      out.write(bytes);\n      out.flush();\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (out != null) out.close();\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1918, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["d(*,String,*)"], "tryExpressionStart": 307, "tryExpressionEnd": 311, "tryBlockStart": 307, "tryBlockEnd": 706, "catchExpressionStart": 479, "catchExpressionEnd": 511, "catchBlockStart": 479, "catchBlockEnd": 597, "exceptionHandlingCallStart": [521], "exceptionHandlingCallEnd": [588], "configuration": ["file.getParentFile()"], "configurationStart": [136], "configurationEnd": [156], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 371, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [413], "useEnd": [439], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/gesture/GestureLibraries.java", "rawCode": "    public boolean save() {\n      if (!mStore.hasChanged()) return true;\n\n      final File file = mPath;\n\n      final File parentFile = file.getParentFile();\n      if (!parentFile.exists()) {\n        if (!parentFile.mkdirs()) {\n          return false;\n        }\n      }\n\n      boolean result = false;\n      try {\n        // noinspection ResultOfMethodCallIgnored\n        file.createNewFile();\n        mStore.save(new FileOutputStream(file), true);\n        result = true;\n      } catch (FileNotFoundException e) {\n        Log.d(LOG_TAG, \"Could not save the gesture library in \" + mPath, e);\n      } catch (IOException e) {\n        Log.d(LOG_TAG, \"Could not save the gesture library in \" + mPath, e);\n      }\n\n      return result;\n    }\n"}, {"dataset": "createNewFile", "exampleID": 1919, "initialization": ["File file = new File(String,String)"], "initializationStart": [357], "initializationEnd": [399], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "new BuildException(String,*)"], "tryExpressionStart": 405, "tryExpressionEnd": 409, "tryBlockStart": 405, "tryBlockEnd": 566, "catchExpressionStart": 449, "catchExpressionEnd": 471, "catchBlockStart": 449, "catchBlockEnd": 566, "exceptionHandlingCallStart": [541, 485], "exceptionHandlingCallEnd": [555, 559], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 417, "focalAPIEnd": 441, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dtolabs/rundeck/tree/master/core/src/test/java/com/dtolabs/rundeck/core/tools/AbstractBaseTest.java", "rawCode": "  protected static void configureFramework() throws BuildException {\n\n    baseDir = RDECK_BASE;\n    if (new File(baseDir).exists()) {\n      FileUtils.deleteDir(new File(baseDir));\n    }\n    File projectsDir = new File(PROJECTS_BASE);\n    FileUtils.deleteDir(projectsDir);\n    projectsDir.mkdirs();\n    new File(baseDir, \"etc\").mkdirs();\n    File dummykey = new File(baseDir, \"etc/dummy_ssh_key.pub\");\n    try {\n      dummykey.createNewFile();\n    } catch (IOException e) {\n      throw new BuildException(\"failed to create dummy keyfile: \" + e.getMessage(), e);\n    }\n\n    // check to see if Setup was run, if so, just return.\n    if (new File(baseDir, \"etc\" + \"/\" + \"framework.properties\").exists()) {\n      // System.out.println(\"Setup already run\");\n      return;\n    }\n\n    final ArrayList argsList = new ArrayList(Arrays.asList(SETUP_ARGS));\n    argsList.add(\"--framework.ssh.keypath=\" + dummykey.getAbsolutePath());\n    argsList.add(\"-d\");\n    argsList.add(new File(baseDir).getAbsolutePath());\n\n    try {\n      Setup setup = new Setup();\n      setup.execute((String[]) argsList.toArray(new String[argsList.size()]));\n    } catch (Exception e) {\n      throw new BuildException(\"Caught Setup exception: \" + e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1920, "initialization": ["File file = new File(String)"], "initializationStart": [509], "initializationEnd": [527], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["drawString(String,int,int)", "getMessage()", "drawString(*,int,int)"], "tryExpressionStart": 486, "tryExpressionEnd": 490, "tryBlockStart": 486, "tryBlockEnd": 1002, "catchExpressionStart": 870, "catchExpressionEnd": 892, "catchBlockStart": 870, "catchBlockEnd": 1002, "exceptionHandlingCallStart": [902, 972, 957], "exceptionHandlingCallEnd": [947, 986, 993], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 566, "focalAPIEnd": 583, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.delete()", "file.createNewFile()", "new FileOutputStream(file)"], "useStart": [612, 634, 694], "useEnd": [622, 651, 717], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eric-wieser/Robocup-temp/tree/master/Robocup/Rescue/tags/simple/Calibration/Calibrate.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    while (Button.ENTER.isPressed()) Thread.yield();\n    RawColor silver, white, green, black;\n    silver = askForColor(\"silver\");\n    white = askForColor(\"white\");\n    green = askForColor(\"green\");\n    black = askForColor(\"black\");\n\n    RescueColors colors = new RescueColors(silver, white, green, black);\n    colors.printToLCD();\n    int bID = Button.waitForPress();\n    LCD.clear();\n    if (bID == Button.ID_ENTER) {\n      try {\n        File f = new File(fileName);\n        if (!f.exists()) {\n          f.createNewFile();\n        } else {\n          f.delete();\n          f.createNewFile();\n        }\n\n        FileOutputStream os = new FileOutputStream(f);\n        colors.writeObject(os);\n        os.close();\n        LCD.drawString(\"File written\", 0, 0);\n        LCD.drawString(\"sucessfully\", 0, 0);\n      } catch (IOException e) {\n        LCD.drawString(\"Error writing to file\", 0, 0);\n        LCD.drawString(e.getMessage(), 0, 1);\n      }\n    } else {\n      LCD.drawString(\"Operation Aborted\", 0, 0);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1921, "initialization": ["File file = new File(*)"], "initializationStart": [74], "initializationEnd": [297], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["toString()", "println(String)", "printStackTrace()"], "tryExpressionStart": 303, "tryExpressionEnd": 307, "tryBlockStart": 303, "tryBlockEnd": 508, "catchExpressionStart": 353, "catchExpressionEnd": 376, "catchBlockStart": 353, "catchBlockEnd": 508, "exceptionHandlingCallStart": [447, 384, 481], "exceptionHandlingCallEnd": [472, 473, 501], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 315, "focalAPIEnd": 345, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sstalin/AppBuilder/tree/master/AppBuilderDevTool/src/edu/depaul/madl/wizards/AppBuilderProjectPage.java", "rawCode": "  private void createSystemConfFile() {\n    File systemConfFile =\n        new File(\n            getProjectHandle().getLocation()\n                + File.separator\n                + ProjectFilenames.CONF_DIRECTORY\n                + File.separator\n                + ProjectFilenames.SYSTEM_CONF_FILE);\n    try {\n      systemConfFile.createNewFile();\n    } catch (IOException ex) {\n      System.err.println(\"Error creating the system config file: \" + systemConfFile.toString());\n      ex.printStackTrace();\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1922, "initialization": ["File file = new File(String)"], "initializationStart": [307], "initializationEnd": [363], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new XAException(*)"], "tryExpressionStart": 369, "tryExpressionEnd": 373, "tryBlockStart": 369, "tryBlockEnd": 1043, "catchExpressionStart": 961, "catchExpressionEnd": 983, "catchBlockStart": 961, "catchBlockEnd": 1043, "exceptionHandlingCallStart": [997], "exceptionHandlingCallEnd": [1036], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 381, "focalAPIEnd": 405, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [704], "useEnd": [734], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbosstm/quickstart/tree/master/ArjunaJTS/recovery/src/main/java/AbstractExampleXAResource.java", "rawCode": "  /**\n   * @param xid <description>\n   * @return <description>\n   * @exception javax.transaction.xa.XAException <description>\n   */\n  public synchronized int prepare(Xid xid) throws XAException {\n    System.out.println(\"******: \" + this.getClass().getName() + \": \" + \"PREPARE \" + xid);\n\n    File prepared = new File(DATA_DIR + this.getClass().getName() + \".xid_\");\n    try {\n      prepared.createNewFile();\n      final int formatId = xid.getFormatId();\n      final byte[] gtrid = xid.getGlobalTransactionId();\n      final int gtrid_length = gtrid.length;\n      final byte[] bqual = xid.getBranchQualifier();\n      final int bqual_length = bqual.length;\n\n      DataOutputStream fos = new DataOutputStream(new FileOutputStream(prepared));\n      fos.writeInt(formatId);\n      fos.writeInt(gtrid_length);\n      fos.write(gtrid, 0, gtrid_length);\n      fos.writeInt(bqual_length);\n      fos.write(bqual, 0, bqual_length);\n      fos.flush();\n      fos.close();\n    } catch (IOException e) {\n      throw new XAException(XAException.XAER_RMERR);\n    }\n    return XA_OK;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1923, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["w(*,String,*)"], "tryExpressionStart": 28, "tryExpressionEnd": 32, "tryBlockStart": 28, "tryBlockEnd": 156, "catchExpressionStart": 73, "catchExpressionEnd": 95, "catchBlockStart": 73, "catchBlockEnd": 156, "exceptionHandlingCallStart": [105], "exceptionHandlingCallEnd": [147], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 42, "focalAPIEnd": 63, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.delete()"], "useStart": [163], "useEnd": [177], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/tests/FrameworkPerf/src/com/android/frameworkperf/TestService.java", "rawCode": "    boolean onRun() {\n      try {\n        mFile.createNewFile();\n      } catch (IOException e) {\n        Log.w(TAG, \"Failure creating \" + mFile, e);\n      }\n      mFile.delete();\n      return true;\n    }\n"}, {"dataset": "createNewFile", "exampleID": 1924, "initialization": ["File file = new File(String)"], "initializationStart": [281], "initializationEnd": [304], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 339, "tryExpressionEnd": 343, "tryBlockStart": 339, "tryBlockEnd": 503, "catchExpressionStart": 384, "catchExpressionEnd": 406, "catchBlockStart": 384, "catchBlockEnd": 503, "exceptionHandlingCallStart": [459], "exceptionHandlingCallEnd": [478], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 353, "focalAPIEnd": 374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileWriter(file)"], "useStart": [558], "useEnd": [579], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brendanofallon/Pipeline/tree/master/src/ncbi/CachedPubmedAbstractDB.java", "rawCode": "  public synchronized void writeMapToFile() throws IOException {\n    // System.out.println(\"Writing cached gene summaries to \" + cacheFilePath);\n    if (map == null) // Map may not have been initialized\n    return;\n    if (map.size() < 500) {\n      return;\n    }\n\n    File cache = new File(cacheFilePath);\n    if (!cache.exists()) {\n      try {\n        cache.createNewFile();\n      } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n        return;\n      }\n    }\n\n    BufferedWriter writer = new BufferedWriter(new FileWriter(cache));\n    for (Integer id : map.keySet()) {\n      PubMedRecord sum = map.get(id);\n      writer.write(sum.toString() + \"\\n\");\n    }\n    System.out.println(\"Wrote \" + map.keySet().size() + \" pubmed abstracts to cache\");\n    writer.close();\n    missesSinceLastWrite = 0;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1925, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getParentFile()"], "configurationStart": [146], "configurationEnd": [166], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 188, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/agilebirds/openflexo/tree/master/flexodesktop/externalmodels/flexojavacvs/src/main/java/org/netbeans/lib/cvsclient/file/DefaultFileHandler.java", "rawCode": "  /** Extension point allowing subclasses to change file creation logic. */\n  protected boolean createNewFile(File file) throws IOException {\n    file.getParentFile().mkdirs();\n    return file.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1926, "initialization": ["File file = new File(String,String)"], "initializationStart": [1186], "initializationEnd": [1227], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getClass()", "getName()", "e(*,String)"], "tryExpressionStart": 1235, "tryExpressionEnd": 1239, "tryBlockStart": 1235, "tryBlockEnd": 1383, "catchExpressionStart": 1282, "catchExpressionEnd": 1304, "catchBlockStart": 1282, "catchBlockEnd": 1383, "exceptionHandlingCallStart": [1320, 1320, 1314], "exceptionHandlingCallEnd": [1330, 1340, 1374], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1249, "focalAPIEnd": 1272, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InfinitumFramework/Infinitum-Core/tree/master/src/main/java/com/clarionmedia/infinitum/internal/caching/AbstractCache.java", "rawCode": "  /**\n   * Enable caching to the phone's internal storage or SD card.\n   *\n   * @param context the current context\n   * @param storageDevice where to store the cached files, either {@link #DISK_CACHE_INTERNAL} or\n   *     {@link #DISK_CACHE_SDCARD})\n   * @return\n   */\n  public boolean enableDiskCache(Context context, int storageDevice) {\n    Context appContext = context.getApplicationContext();\n\n    String rootDir = null;\n    if (storageDevice == DISK_CACHE_SDCARD\n        && Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\n      // SD-card available\n      rootDir =\n          Environment.getExternalStorageDirectory().getAbsolutePath()\n              + \"/Android/data/\"\n              + appContext.getPackageName()\n              + \"/cache\";\n    } else {\n      File internalCacheDir = appContext.getCacheDir();\n      // apparently on some configurations this can come back as null\n      if (internalCacheDir == null) {\n        return (mIsDiskCacheEnabled = false);\n      }\n      rootDir = internalCacheDir.getAbsolutePath();\n    }\n\n    setRootDir(rootDir);\n\n    File outFile = new File(mDiskCacheDirectory);\n    if (outFile.mkdirs()) {\n      File nomedia = new File(mDiskCacheDirectory, \".nomedia\");\n      try {\n        nomedia.createNewFile();\n      } catch (IOException e) {\n        Log.e(getClass().getName(), \"Failed creating .nomedia file\");\n      }\n    }\n\n    mIsDiskCacheEnabled = outFile.exists();\n\n    if (!mIsDiskCacheEnabled) {\n      Log.w(getClass().getName(), \"Failed creating disk cache directory \" + mDiskCacheDirectory);\n    } else {\n      Log.d(getClass().getName(), \"Enabled write-through to \" + mDiskCacheDirectory);\n      sanitizeDiskCache();\n    }\n\n    return mIsDiskCacheEnabled;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1927, "initialization": ["File file = new File(File,String)"], "initializationStart": [137], "initializationEnd": [169], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "new SchemaGeneratorException(*,*)"], "tryExpressionStart": 109, "tryExpressionEnd": 113, "tryBlockStart": 109, "tryBlockEnd": 866, "catchExpressionStart": 778, "catchExpressionEnd": 798, "catchBlockStart": 778, "catchBlockEnd": 866, "exceptionHandlingCallStart": [841, 812], "exceptionHandlingCallEnd": [855, 859], "configuration": ["file.delete()"], "configurationStart": [210], "configurationEnd": [227], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 243, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerNamespaceForCatalog(String,file)", "new PrintStream(file)"], "useStart": [340, 414], "useEnd": [387, 439], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/crux/5.1.1/crux-dev/src/main/java/org/cruxframework/crux/tools/schema/DefaultSchemaGenerator.java", "rawCode": "  /**\n   * @param libraries\n   * @param templateLibraries\n   */\n  private void generateOfflineSchema() {\n    try {\n      File coreFile = new File(destDir, \"offline.xsd\");\n      if (coreFile.exists()) {\n        coreFile.delete();\n      }\n      coreFile.createNewFile();\n\n      String targetNS = \"http://www.cruxframework.org/offline\";\n      registerNamespaceForCatalog(targetNS, coreFile);\n\n      PrintStream out = new PrintStream(coreFile);\n      out.println(\"<xs:schema \");\n      out.println(\"xmlns=\\\"http://www.cruxframework.org/offline\\\" \");\n      out.println(\"xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" \");\n      out.println(\"targetNamespace=\\\"\" + targetNS + \"\\\" >\");\n\n      generateOfflineScreenElement(out);\n\n      out.println(\"</xs:schema>\");\n      out.close();\n    } catch (Exception e) {\n      throw new SchemaGeneratorException(e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1928, "initialization": ["File file = new File(File,String)"], "initializationStart": [760], "initializationEnd": [834], "hasTryCatch": 1, "exceptionType": "CoreException", "exceptionHandlingCall": ["getShell()", "getMessage()", "openError(*,String,String)", "error(*)"], "tryExpressionStart": 436, "tryExpressionEnd": 440, "tryBlockStart": 436, "tryBlockEnd": 2115, "catchExpressionStart": 1724, "catchExpressionEnd": 1748, "catchBlockStart": 1724, "catchBlockEnd": 1921, "exceptionHandlingCallStart": [1791, 1859, 1756, 1882], "exceptionHandlingCallEnd": [1801, 1873, 1874, 1894], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 844, "focalAPIEnd": 870, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeTemplete(file)"], "useStart": [880], "useEnd": [905], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/poc/capp/org.wso2.carbonstudio.eclipse.capp.artifact.gadgets/src/org/wso2/carbonstudio/eclipse/capp/artifact/gadgets/ui/wizard/NewGadgetArtifactWizard.java", "rawCode": "  public boolean performFinish() {\n    IFile file = getArtifactXmlPath();\n    Artifact artifact = new Artifact(file);\n    artifact.setName(getArtifactName());\n    artifact.setType(GadgetArtifactHandler.getType());\n    artifact.setVersion(\"1.0.0\");\n    artifact.setServerRole(CAppEnvironment.getDefaultServerRole().getServerRoleName());\n    ICAppArtifactManager cAppArtifactManager = GadgetArtifactHandler.getCAppArtifactManager();\n\n    try {\n\n      File tmpFolder = FileUtils.createTempDirectory();\n      File gadgetResourceFolder = new File(tmpFolder, \"gadget-resources\");\n      // tmpFolder.delete();\n      gadgetResourceFolder.mkdirs();\n\n      if (newGadgetWizardPage.getOptionType() == ArtifactFileUtils.OPTION_NEW) {\n        File gadgetFile =\n            new File(gadgetResourceFolder, newGadgetWizardPage.getFileName() + \".xml\");\n        gadgetFile.createNewFile();\n        writeTemplete(gadgetFile);\n        artifact.setFile(gadgetResourceFolder.toString());\n\n      } else if (newGadgetWizardPage.getOptionType() == ArtifactFileUtils.OPTION_IMPORT_FS\n          || newGadgetWizardPage.getOptionType() == ArtifactFileUtils.OPTION_IMPORT_REG) {\n        File sourceFile = new File(newGadgetWizardPage.getFilePath());\n        if (sourceFile.isFile()) {\n          File file2 = new File(tmpFolder, sourceFile.getName());\n          FileUtils.copyFile(sourceFile.toString(), file2.toString());\n          artifact.setFile(file2.toString());\n        } else {\n          FileUtils.copyDirectoryContents(sourceFile, gadgetResourceFolder);\n          artifact.setFile(gadgetResourceFolder.toString());\n        }\n      } else {\n\n      }\n      cAppArtifactManager.createArtifact(file, artifact);\n      this.artifact = artifact;\n\n    } catch (CoreException e) {\n      MessageDialog.openError(\n          getShell(), \"Gadget Artifact\", \"Error creating Gadget artifact: \" + e.getMessage());\n      log.error(e);\n      return false;\n    } catch (Exception e) {\n      MessageDialog.openError(\n          getShell(), \"Gadget Artifact\", \"Error creating Gadget artifact: \" + e.getMessage());\n      log.error(e);\n      return false;\n    }\n    return true;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1929, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.delete()"], "configurationStart": [96], "configurationEnd": [107], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 115, "focalAPIEnd": 133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)", "file.mkdir()", "file.getPath()"], "useStart": [222, 357, 438], "useEnd": [246, 367, 450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bmcdorman/CBCJVM/tree/master/eclipse/src/cbcdownloader/DummyDownloader.java", "rawCode": "  private void copyFile(File from, File to) throws IOException {\n    if (from.isFile()) {\n      to.delete();\n      to.createNewFile();\n      FileChannel in = new FileInputStream(from).getChannel();\n      FileChannel out = new FileOutputStream(to).getChannel();\n      in.transferTo(0, in.size(), out);\n      in.close();\n      out.close();\n    } else {\n      to.mkdir();\n      for (File k : from.listFiles()) {\n        copyFile(k, new File(to.getPath() + File.separator + k.getName()));\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1930, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 119, "focalAPIEnd": 143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [310], "useEnd": [340], "hasFinally": 1, "cleanUpCall": ["FileChannel.close()"], "finallyExpressionStart": 500, "finallyExpressionEnd": 508, "finallyBlockStart": 500, "finallyBlockEnd": 645, "cleanUpCallStart": [546], "cleanUpCallEnd": [560], "url": "https://github.com/jonosterman/cube/tree/master/cube-client-core/src/test/java/ch/admin/vbs/cube/core/MockContainerUtil.java", "rawCode": "  public static void copyFile(File sourceFile, File destFile) throws IOException {\n    if (!destFile.exists()) {\n      destFile.createNewFile();\n    }\n\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n      source = new FileInputStream(sourceFile).getChannel();\n      destination = new FileOutputStream(destFile).getChannel();\n      long count = 0;\n      long size = source.size();\n      while ((count += destination.transferFrom(source, 0, size - count)) < size) ;\n    } finally {\n      if (source != null) {\n        source.close();\n      }\n      if (destination != null) {\n        destination.close();\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1931, "initialization": ["File file = new File(String)"], "initializationStart": [116], "initializationEnd": [169], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["FolderWatcher.cancel()", "File.delete()"], "tryExpressionStart": 175, "tryExpressionEnd": 179, "tryBlockStart": 175, "tryBlockEnd": 934, "catchExpressionStart": 855, "catchExpressionEnd": 875, "catchBlockStart": 855, "catchBlockEnd": 934, "exceptionHandlingCallStart": [836, 902], "exceptionHandlingCallEnd": [847, 912], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 655, "focalAPIEnd": 672, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.delete()", "file.delete()"], "useStart": [818, 902], "useEnd": [828, 912], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JohannesBuchner/fss/tree/master/fss/src/test/java/com/jakeapp/jake/fss/FolderWatchTest.java", "rawCode": "  @Test\n  public void testCreateFile() throws Exception {\n    log.debug(\" **** testCreateFile **** \");\n    File f = new File(mytempdir + File.separator + \"just_created\");\n    try {\n      fw = new FolderWatcher(mytempdir, 100);\n      fw.initialRun();\n\n      final CountDownLatch latch = new CountDownLatch(1);\n      fw.addListener(\n          new IModificationListener() {\n\n            public void fileModified(File f, ModifyActions action) {\n              Assert.assertEquals(\"just_created\", f.getName());\n              Assert.assertEquals(ModifyActions.CREATED, action);\n              latch.countDown();\n            }\n          });\n      fw.run();\n\n      f.createNewFile();\n\n      log.debug(\"We expect CREATED\");\n      if (!latch.await(3, TimeUnit.SECONDS)) {\n        Assert.fail(\"No callback occured\");\n      }\n      f.delete();\n      fw.cancel();\n    } catch (Exception e) {\n      fw.cancel();\n      f.delete();\n      throw e;\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1932, "initialization": ["File file = new File(File,String)"], "initializationStart": [303], "initializationEnd": [323], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 329, "focalAPIEnd": 346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileWriter(file)"], "useStart": [368], "useEnd": [385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AustESE-Infrastructure/calliope/tree/master/src/calliope/export/PDEFArchive.java", "rawCode": "  /**\n   * Write a config file to a directory with the keys of the json doc\n   *\n   * @param jdoc the jdoc\n   * @param fname name of the config file\n   * @param dir the directory to write to\n   */\n  private void writeConfigRest(JSONDocument jdoc, String fname, File dir) throws Exception {\n    File f = new File(dir, fname);\n    f.createNewFile();\n    FileWriter fw = new FileWriter(f);\n    JSONDocument jdoc2 = new JSONDocument();\n    if (jdoc.containsKey(JSONKeys.STYLE))\n      jdoc2.put(JSONKeys.STYLE, (String) jdoc.get(JSONKeys.STYLE));\n    if (jdoc.containsKey(JSONKeys.FORMAT))\n      jdoc2.put(JSONKeys.FORMAT, (String) jdoc.get(JSONKeys.FORMAT));\n    if (jdoc.containsKey(JSONKeys.TITLE))\n      jdoc2.put(JSONKeys.TITLE, (String) jdoc.get(JSONKeys.TITLE));\n    if (jdoc.containsKey(JSONKeys.AUTHOR))\n      jdoc2.put(JSONKeys.AUTHOR, (String) jdoc.get(JSONKeys.AUTHOR));\n    if (jdoc.containsKey(JSONKeys.SECTION))\n      jdoc2.put(JSONKeys.SECTION, (String) jdoc.get(JSONKeys.SECTION));\n    if (jdoc.containsKey(JSONKeys.VERSION1))\n      jdoc2.put(JSONKeys.VERSION1, (String) jdoc.get(JSONKeys.VERSION1));\n    fw.write(jdoc2.toString());\n    fw.write(\"\\n\");\n    fw.close();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1933, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 423, "focalAPIEnd": 447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaspervandenberg/aida/tree/master/System/lucene-2.1.0/src/java/org/apache/lucene/store/SimpleFSLockFactory.java", "rawCode": "  public boolean obtain() throws IOException {\n\n    // Ensure that lockDir exists and is a directory:\n    if (!lockDir.exists()) {\n      if (!lockDir.mkdirs())\n        throw new IOException(\"Cannot create directory: \" + lockDir.getAbsolutePath());\n    } else if (!lockDir.isDirectory()) {\n      throw new IOException(\n          \"Found regular file where directory expected: \" + lockDir.getAbsolutePath());\n    }\n    return lockFile.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1934, "initialization": ["File file = new File(String)"], "initializationStart": [191], "initializationEnd": [259], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 74, "tryExpressionEnd": 78, "tryBlockStart": 74, "tryBlockEnd": 1024, "catchExpressionStart": 812, "catchExpressionEnd": 844, "catchBlockStart": 812, "catchBlockEnd": 919, "exceptionHandlingCallStart": [893], "exceptionHandlingCallEnd": [912], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 269, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/descl/ZONE/tree/master/ZONE-extractor/ZONE-plugin-categorization_SVM/src/main/java/org/zoneproject/extractor/plugin/categorization_svm/model/Dictionnaire.java", "rawCode": "  public static void writeDictionnaireIntoFile() throws IOException {\n    try {\n      URL outFile = Dictionnaire.class.getResource(\"/Dict.dat\");\n      if (outFile == null) {\n        File f = new File(Dictionnaire.class.getResource(\"/\").getPath() + \"Dict.dat\");\n        f.createNewFile();\n        outFile = Dictionnaire.class.getResource(\"/Dict.dat\");\n      }\n      FileOutputStream fos = new FileOutputStream(new File(outFile.toURI()));\n      ObjectOutputStream oos = new ObjectOutputStream(fos);\n      try {\n        // sérialisation : écriture de l'objet dans le flux de sortie\n        oos.writeObject(dic);\n        // on vide le tampon\n        oos.flush();\n\n      } finally {\n        // fermeture des flux\n        try {\n          oos.close();\n        } finally {\n          fos.close();\n        }\n      }\n    } catch (FileNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (URISyntaxException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1935, "initialization": ["File file = new File(*)"], "initializationStart": [1042], "initializationEnd": [1231], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getLocalizedMessage()", "log(String)", "log(String)"], "tryExpressionStart": 1242, "tryExpressionEnd": 1246, "tryBlockStart": 1242, "tryBlockEnd": 1507, "catchExpressionStart": 1308, "catchExpressionEnd": 1328, "catchBlockStart": 1308, "catchBlockEnd": 1507, "exceptionHandlingCallStart": [1404, 1370, 1446], "exceptionHandlingCallEnd": [1427, 1434, 1496], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1271, "focalAPIEnd": 1296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.delete()"], "useStart": [1620], "useEnd": [1638], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.3.2/src/lib/com/izforge/izpack/panels/ShortcutPanel.java", "rawCode": "  /** Called when the panel is shown to the user. */\n\n  /*--------------------------------------------------------------------------*/\n  public void panelActivate() {\n    try {\n      readShortcutSpec();\n    } catch (Throwable exception) {\n      System.out.println(\"could not read shortcut spec!\");\n      exception.printStackTrace();\n    }\n\n    // Create the UI elements\n    try {\n      shortcut =\n          (Shortcut)\n              (TargetFactory.getInstance().makeObject(\"com.izforge.izpack.util.os.Shortcut\"));\n      shortcut.initialize(Shortcut.APPLICATIONS, \"-\");\n    } catch (Throwable exception) {\n      System.out.println(\"could not create shortcut instance\");\n      exception.printStackTrace();\n    }\n\n    analyzeShortcutSpec();\n\n    if (shortcutsToCreate && !OsVersion.IS_OSX) {\n      if (shortcut.supported() && !simulteNotSupported) {\n        File allUsersProgramsFolder = getProgramsFolder(Shortcut.ALL_USERS);\n\n        Debug.log(\"All UsersProgramsFolder: '\" + allUsersProgramsFolder + \"'\");\n\n        File forceTest =\n            new File(\n                allUsersProgramsFolder\n                    + File.separator\n                    + System.getProperty(\"user.name\")\n                    + System.currentTimeMillis());\n\n        try {\n          isRootUser = forceTest.createNewFile();\n        } catch (Exception e) {\n          isRootUser = false;\n          Debug.log(\"IOException: \" + \"'\" + e.getLocalizedMessage() + \"'\");\n          Debug.log(\"You cannot create '\" + forceTest + \"'\");\n        }\n\n        if (forceTest.exists()) {\n          Debug.log(\"Delete temporary File: '\" + forceTest + \"'\");\n          forceTest.delete();\n        }\n\n        String perm = isRootUser ? \"can\" : \"cannot\";\n\n        Debug.log(\"You \" + perm + \" write into '\" + allUsersProgramsFolder + \"'\");\n\n        final boolean rUserFlag;\n        if (defaultCurrentUserFlag) { // 'defaultCurrentUser' element was specified\n          rUserFlag = false;\n          Debug.log(\"Element '\" + SPEC_KEY_DEF_CUR_USER + \"' was specified\");\n        } else { // 'defaultCurrentUser' element not specified\n          rUserFlag = isRootUser;\n        }\n\n        if (rUserFlag) {\n          itsUserType = Shortcut.ALL_USERS;\n        } else {\n          itsUserType = Shortcut.CURRENT_USER;\n        }\n\n        if (firstTime) {\n          buildUI(getProgramsFolder(rUserFlag ? Shortcut.ALL_USERS : Shortcut.CURRENT_USER));\n        }\n\n        // addSelectionList();\n        // add( shortCutsArea );\n        // JList shortCutList = null;\n        // addList( shortCuts, ListSelectionModel.SINGLE_SELECTION, shortCutList, col,\n        // line+6, 1, 1, GridBagConstraints.BOTH );\n      } else {\n        // TODO MEP: Test\n        if (firstTime) {\n          buildAlternateUI();\n        }\n\n        // parent.unlockNextButton();\n        // parent.lockPrevButton();\n      }\n      firstTime = false;\n    } else {\n      // Skip on OS X\n      parent.skipPanel();\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1936, "initialization": ["File file = new File(File,*)"], "initializationStart": [404], "initializationEnd": [434], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new AeseException(*)"], "tryExpressionStart": 262, "tryExpressionEnd": 266, "tryBlockStart": 262, "tryBlockEnd": 829, "catchExpressionStart": 768, "catchExpressionEnd": 788, "catchBlockStart": 768, "catchBlockEnd": 829, "exceptionHandlingCallStart": [802], "exceptionHandlingCallEnd": [822], "configuration": ["file.delete()"], "configurationStart": [617], "configurationEnd": [631], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 639, "focalAPIEnd": 660, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [691], "useEnd": [718], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AustESE-Infrastructure/calliope/tree/master/src/calliope/db/CouchConnection.java", "rawCode": "  /**\n   * Save a file to the file system\n   *\n   * @param docID the docID of the file\n   * @param data the data of the file\n   * @throws AeseException\n   */\n  @Override\n  public void putImageToDb(String db, String docID, byte[] data) throws AeseException {\n    try {\n      docID = deconvertDocID(docID);\n      docIDCheck(db, docID);\n      File wd = new File(CouchConnection.webRoot);\n      File child = new File(wd, db + \"/\" + docID);\n      if (!child.getParentFile().exists())\n        if (!child.getParentFile().mkdirs())\n          throw new SecurityException(\"couldn't create \" + docID);\n      if (child.exists()) child.delete();\n      child.createNewFile();\n      FileOutputStream fos = new FileOutputStream(child);\n      fos.write(data);\n      fos.close();\n    } catch (Exception e) {\n      throw new AeseException(e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1937, "initialization": ["File file = new File(*)"], "initializationStart": [1718], "initializationEnd": [1757], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": [], "tryExpressionStart": 765, "tryExpressionEnd": 769, "tryBlockStart": 765, "tryBlockEnd": 2891, "catchExpressionStart": 2454, "catchExpressionEnd": 2476, "catchBlockStart": 2454, "catchBlockEnd": 2493, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1769, "focalAPIEnd": 1794, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBabel/src/it/eng/spagobabel/bin/DiffAllFile.java", "rawCode": "  public static void diffFile(String subPath, String fileName, String newPath) throws IOException {\n    String home = \"/home/spinelli/Scrivania\";\n\n    // Path della cartella che contiene la vecchia versione dei progetti\n    String oldPath = \"/home/spinelli/Scrivania/OldprogettiSpago\";\n\n    /*Cartella che conterrà i file presenti nella gerarchia\n     * prodotta da ExtractAllFile, ma non presenti nella versione vecchia\n     * dei programmi (oldPath)\n     */\n    String master = \"/home/spinelli/Scrivania/ToTranslate\";\n    (new File(master)).mkdir();\n\n    String path = oldPath + subPath + \"/\" + fileName;\n    int count = 0;\n    File dir = new File(path);\n    if (dir.exists()) {\n      // Controllo se i file (vecchia versione e nuova versione) sono diversi\n      try {\n        BufferedReader oldfileTemp = new BufferedReader(new FileReader(path));\n        BufferedReader newfileTemp = new BufferedReader(new FileReader(newPath + \"/\" + fileName));\n        String oldStrTemp;\n        String newStrTemp;\n        while ((newStrTemp = newfileTemp.readLine()) != null) {\n          oldStrTemp = oldfileTemp.readLine();\n\n          // Se sono diversi incremento la variabile contatore\n          if (!newStrTemp.equals(oldStrTemp)) {\n            count++;\n          }\n        }\n        oldfileTemp.close();\n        newfileTemp.close();\n\n        /*Se sono sicura che sono diversi creo il percorso nella cartella master e\n         *creo il file che contiene la differenza rispetto il file della nuova versione\n         */\n        if (count != 0) {\n          String name = CreateDir.getName(fileName);\n          String diff = master + subPath;\n          File f1 = new File(diff);\n          f1.mkdirs();\n          File fileFirst = new File(master + subPath + \"/\" + name);\n          fileFirst.createNewFile();\n\n          BufferedReader oldfile = new BufferedReader(new FileReader(path));\n          BufferedReader newfile = new BufferedReader(new FileReader(newPath + \"/\" + fileName));\n          BufferedWriter outfile =\n              new BufferedWriter(new FileWriter(master + subPath + \"/\" + name));\n          String oldStr;\n          String newStr;\n          while ((newStr = newfile.readLine()) != null) {\n            oldStr = oldfile.readLine();\n            if (!newStr.equals(oldStr)) {\n              count++;\n              try {\n                // Scrivo il nuovo file\n                outfile.write(newStr);\n                outfile.write(\"\\n\");\n\n              } catch (IOException e) {\n              }\n            }\n          }\n          oldfile.close();\n          newfile.close();\n          outfile.close();\n\n          if (count == 0) {\n            File file = new File(master + subPath + \"/\" + name);\n            file.delete();\n          }\n        }\n\n        File allDir = new File(master + subPath);\n        allDir.delete();\n\n      } catch (IOException e) {\n        // Exceptions ignored.\n      }\n      File MastDir = new File(master);\n      String[] lista = MastDir.list();\n      for (int j = 0; j < lista.length; j++) {\n        File temp = new File(master + \"/\" + lista[j]);\n        temp.delete();\n      }\n    } else {\n      // Viene eseguito nel caso in cui il file è presente solo nella nuova versione\n      String diff = master + subPath;\n      File f1 = new File(diff);\n      f1.mkdirs();\n      File inputFile = new File(home + subPath + \"/\" + fileName);\n      File outputFile = new File(diff + \"/\" + fileName);\n      InputStream finput;\n      finput = new BufferedInputStream(new FileInputStream(inputFile));\n      OutputStream foutput;\n      foutput = new BufferedOutputStream(new FileOutputStream(outputFile));\n      byte[] buffer = new byte[1024 * 500];\n      int bytes_letti = 0;\n      while ((bytes_letti = finput.read(buffer)) > 0) foutput.write(buffer, 0, bytes_letti);\n      finput.close();\n      foutput.close();\n    }\n    File allDir = new File(master + subPath);\n    allDir.delete();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1938, "initialization": ["File file = new File(String)"], "initializationStart": [72], "initializationEnd": [90], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 177, "tryExpressionEnd": 181, "tryBlockStart": 177, "tryBlockEnd": 281, "catchExpressionStart": 221, "catchExpressionEnd": 243, "catchBlockStart": 221, "catchBlockEnd": 281, "exceptionHandlingCallStart": [253], "exceptionHandlingCallEnd": [272], "configuration": ["file.getParentFile()"], "configurationStart": [140], "configurationEnd": [160], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 191, "focalAPIEnd": 211, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jenkinsci/serenity-plugin/tree/master/src/main/java/com/ikokoon/toolkit/LoggingConfigurator.java", "rawCode": "  private static void checkLogFolder(String filePath) {\n    File file = new File(filePath);\n    if (!file.getParentFile().exists()) {\n      file.getParentFile().mkdirs();\n      try {\n        file.createNewFile();\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n    System.out.println(\"Log file : \" + file.getAbsolutePath());\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1939, "initialization": ["File file = createTempFile(String,*,*)", "File file = new File(*)"], "initializationStart": [931, 1086], "initializationEnd": [998, 1115], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1123, "focalAPIEnd": 1143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)", "file.delete()"], "useStart": [1241, 2208], "useEnd": [1267, 2221], "hasFinally": 1, "cleanUpCall": ["DataOutputStream.close()"], "finallyExpressionStart": 2244, "finallyExpressionEnd": 2252, "finallyBlockStart": 2244, "finallyBlockEnd": 2281, "cleanUpCallStart": [2260], "cleanUpCallEnd": [2274], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/tests/coretests/src/android/app/DownloadManagerBaseTest.java", "rawCode": "  /**\n   * Helper to create a large file of random data on the SD card.\n   *\n   * @param filename (optional) The name of the file to create on the SD card; pass in null to use a\n   *     default temp filename.\n   * @param type The type of file to create\n   * @param subdirectory If not null, the subdirectory under the SD card where the file should go\n   * @return The File that was created\n   * @throws IOException if there was an error while creating the file.\n   */\n  protected File createFileOnSD(String filename, long fileSize, DataType type, String subdirectory)\n      throws IOException {\n\n    // Build up the file path and name\n    String sdPath = Environment.getExternalStorageDirectory().getPath();\n    StringBuilder fullPath = new StringBuilder(sdPath);\n    if (subdirectory != null) {\n      fullPath.append(File.separatorChar).append(subdirectory);\n    }\n\n    File file = null;\n    if (filename == null) {\n      file = File.createTempFile(\"DMTEST_\", null, new File(fullPath.toString()));\n    } else {\n      fullPath.append(File.separatorChar).append(filename);\n      file = new File(fullPath.toString());\n      file.createNewFile();\n    }\n\n    // Fill the file with random data\n    DataOutputStream output = new DataOutputStream(new FileOutputStream(file));\n    final int CHUNK_SIZE = 1000000; // copy random data in 1000000-char chunks\n    long remaining = fileSize;\n    int nextChunkSize = CHUNK_SIZE;\n    byte[] randomData = null;\n    Random rng = new LoggingRng();\n    byte[] chunkSizeData = generateData(nextChunkSize, type, rng);\n\n    try {\n      while (remaining > 0) {\n        if (remaining < CHUNK_SIZE) {\n          nextChunkSize = (int) remaining;\n          remaining = 0;\n          randomData = generateData(nextChunkSize, type, rng);\n        } else {\n          remaining -= CHUNK_SIZE;\n          randomData = chunkSizeData;\n        }\n        output.write(randomData);\n        Log.i(\n            TAG,\n            \"while creating \"\n                + fileSize\n                + \" file, \"\n                + \"remaining bytes to be written: \"\n                + remaining);\n      }\n    } catch (IOException e) {\n      Log.e(LOG_TAG, \"Error writing to file \" + file.getAbsolutePath());\n      file.delete();\n      throw e;\n    } finally {\n      output.close();\n    }\n    return file;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1940, "initialization": ["File file = new File(*)"], "initializationStart": [98], "initializationEnd": [179], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getStackTrace()", "d(String,String)"], "tryExpressionStart": 270, "tryExpressionEnd": 274, "tryBlockStart": 270, "tryBlockEnd": 2240, "catchExpressionStart": 1962, "catchExpressionEnd": 1984, "catchBlockStart": 1962, "catchBlockEnd": 2059, "exceptionHandlingCallStart": [2034, 1992], "exceptionHandlingCallEnd": [2051, 2052], "configuration": ["file.delete()"], "configurationStart": [212], "configurationEnd": [225], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 282, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [1866], "useEnd": [1892], "hasFinally": 1, "cleanUpCall": ["FileOutputStream.close()"], "finallyExpressionStart": 2060, "finallyExpressionEnd": 2068, "finallyBlockStart": 2060, "finallyBlockEnd": 2240, "cleanUpCallStart": [2119], "cleanUpCallEnd": [2130], "url": "https://github.com/dalvik/WebCam/tree/master/src/com/iped/ipcam/utils/FileUtil.java", "rawCode": "  public static void persistentDevice(Context context, List<Device> deviceList) {\n    File file = new File(context.getFilesDir().getPath() + File.separator + Constants.DEVICELIST);\n    if (file.exists()) {\n      file.delete();\n    }\n    FileOutputStream fos = null;\n    try {\n      file.createNewFile();\n      StringBuffer sb = new StringBuffer();\n      for (Device device : deviceList) {\n        String unDefine2 =\n            (device.getUnDefine2() == null || device.getUnDefine2().length() <= 0)\n                ? \"null\"\n                : device.getUnDefine2();\n        boolean netType = device.getDeviceNetType();\n        sb.append(\n            device.getDeviceName()\n                + \"&\"\n                + device.getDeviceID()\n                + \"&\"\n                + device.getUnDefine1()\n                + \"&\"\n                + netType\n                + \"&\");\n        if (netType) {\n          sb.append(\n              device.getUnDefine1()\n                  + \"&\"\n                  + device.getDeviceEthGateWay()\n                  + \"&\"\n                  + device.getDeviceRemoteCmdPort()\n                  + \"&\"\n                  + device.getDeviceRemoteVideoPort()\n                  + \"&\"\n                  + device.getDeviceRemoteAudioPort()\n                  + \"&\"\n                  + unDefine2\n                  + \"\\n\");\n        } else {\n          sb.append(\n              device.getDeviceEthIp()\n                  + \"&\"\n                  + device.getDeviceEthGateWay()\n                  + \"&\"\n                  + device.getDeviceLocalCmdPort()\n                  + \"&\"\n                  + device.getDeviceLocalVideoPort()\n                  + \"&\"\n                  + device.getDeviceLocalAudioPort()\n                  + \"&\"\n                  + unDefine2\n                  + \"\\n\");\n        }\n      }\n      // System.out.println(sb.toString());\n      fos = new FileOutputStream(file);\n      fos.write(sb.toString().getBytes());\n      fos.flush();\n    } catch (IOException e) {\n      Log.d(TAG, \"FileUtil persistentDevice \" + e.getStackTrace());\n    } finally {\n      if (fos != null) {\n        try {\n          fos.close();\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n        fos = null;\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1941, "initialization": ["File file = new File(*,String)"], "initializationStart": [108], "initializationEnd": [164], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file==null", "guardType": "IF {", "guardExpressionStart": 45, "guardExpressionEnd": 77, "guardBlockStart": 45, "guardBlockEnd": 269, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 186, "focalAPIEnd": 221, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ga-m3dv/ga-worldwind-suite/tree/master/Tiler/src/main/java/au/gov/ga/worldwind/tiler/ribbon/RibbonTilingContext.java", "rawCode": "  public File getLayerDefinitionFile() {\n    if (layerDefinitionFile == null) {\n      layerDefinitionFile = new File(getOutputLocation(), getTilesetName() + \".xml\");\n      try {\n        layerDefinitionFile.createNewFile();\n      } catch (IOException e) {\n\n      }\n    }\n    return layerDefinitionFile;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1942, "initialization": ["File file = new File(*,String)"], "initializationStart": [415], "initializationEnd": [451], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 468, "focalAPIEnd": 488, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(var)", "setCanAccess(file,boolean)"], "useStart": [457, 495], "useEnd": [489, 534], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zeph/grinder/tree/master/source/tests-src/net/grinder/util/TestDirectory.java", "rawCode": "  public void testCreate() throws Exception {\n    final String[] directories = {\n      \"toplevel\", \"down/a/few\",\n    };\n\n    for (int i = 0; i < directories.length; ++i) {\n      final Directory directory = new Directory(new File(getDirectory(), directories[i]));\n      assertFalse(directory.getFile().exists());\n      directory.create();\n      assertTrue(directory.getFile().exists());\n    }\n\n    final File file = new File(getDirectory(), \"readonly\");\n    assertTrue(file.createNewFile());\n    FileUtilities.setCanAccess(file, false);\n\n    try {\n      new Directory(new File(getDirectory(), \"readonly/foo\")).create();\n      fail(\"Expected DirectoryException\");\n    } catch (Directory.DirectoryException e) {\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1943, "initialization": ["File file = new File(File,*)"], "initializationStart": [6205], "initializationEnd": [6244], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["println(String)", "printStackTrace(*)"], "tryExpressionStart": 177, "tryExpressionEnd": 181, "tryBlockStart": 177, "tryBlockEnd": 7201, "catchExpressionStart": 7070, "catchExpressionEnd": 7094, "catchBlockStart": 7070, "catchBlockEnd": 7201, "exceptionHandlingCallStart": [7102, 7163], "exceptionHandlingCallEnd": [7155, 7194], "configuration": ["file.getParentFile()"], "configurationStart": [6414], "configurationEnd": [6438], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 6461, "focalAPIEnd": 6485, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stigkj/one-jar/tree/master/src/com/simontuffs/onejar/JarClassLoader.java", "rawCode": "  public String load(String mainClass, String jarName) {\n    VERBOSE(\"load(\" + mainClass + \",\" + jarName + \")\");\n    if (record) {\n      new File(recording).mkdirs();\n    }\n    try {\n      if (jarName == null) {\n        jarName = oneJarPath;\n      }\n      JarInputStream jis = new JarInputStream(new URL(jarName).openConnection().getInputStream());\n      Manifest manifest = jis.getManifest();\n      String expandPaths[] = null;\n      // TODO: Allow a destination directory (relative or absolute) to\n      // be specified like this:\n      // One-Jar-Expand: build=../expanded\n      String expand = manifest.getMainAttributes().getValue(EXPAND);\n      String expanddir = System.getProperty(JarClassLoader.P_EXPAND_DIR);\n      if (expanddir == null) {\n        expanddir = manifest.getMainAttributes().getValue(EXPAND_DIR);\n      }\n      // Default is to expand into temporary directory based on the name of the jar file.\n      if (expanddir == null) {\n        String jar = new File(jarName).getName().replaceFirst(\"\\\\.[^\\\\.]*$\", \"\");\n        expanddir = \"${java.io.tmpdir}/\" + jar;\n      }\n      // Expand system properties.\n      expanddir = replaceProps(System.getProperties(), expanddir);\n\n      // Make a note of this location in the VM system properties in case applications need to know\n      // where the expanded files are.\n      System.setProperty(JarClassLoader.P_EXPAND_DIR, expanddir);\n\n      boolean shouldExpand = true;\n      File tmpdir = new File(expanddir);\n      if (noExpand == false && expand != null) {\n        expanded = true;\n        VERBOSE(EXPAND + \"=\" + expand);\n        expandPaths = expand.split(\",\");\n        boolean getconfirm =\n            Boolean.TRUE.toString().equals(manifest.getMainAttributes().getValue(CONFIRM_EXPAND));\n        if (getconfirm) {\n          String answer = getConfirmation(tmpdir);\n          if (answer == null) answer = \"n\";\n          answer = answer.trim().toLowerCase();\n          if (answer.startsWith(\"q\")) {\n            PRINTLN(\"exiting without expansion.\");\n            // Indicate (expected) failure with a non-zero return code.\n            System.exit(1);\n          } else if (answer.startsWith(\"n\")) {\n            shouldExpand = false;\n          }\n        }\n      }\n      boolean showexpand =\n          Boolean.TRUE.toString().equals(manifest.getMainAttributes().getValue(SHOW_EXPAND));\n      if (showexpand) {\n        PRINTLN(\"Expanding to: \" + tmpdir.getAbsolutePath());\n      }\n      JarEntry entry;\n      while ((entry = (JarEntry) jis.getNextEntry()) != null) {\n        if (entry.isDirectory()) continue;\n\n        // The META-INF/MANIFEST.MF file can contain a property which names\n        // directories in the JAR to be expanded (comma separated). For example:\n        // One-Jar-Expand: build,tmp,webapps\n        String $entry = entry.getName();\n        if (expandPaths != null) {\n          // TODO: Can't think of a better way to do this right now.\n          // This code really doesn't need to be optimized anyway.\n          if (shouldExpand && shouldExpand(expandPaths, $entry)) {\n            File dest = new File(tmpdir, $entry);\n            // Override if ZIP file is newer than existing.\n            if (!dest.exists() || dest.lastModified() < entry.getTime()) {\n              String msg = \"Expanding: \" + $entry;\n              if (showexpand) {\n                PRINTLN(msg);\n              } else {\n                INFO(msg);\n              }\n              if (dest.exists())\n                INFO(\n                    \"Update because lastModified=\"\n                        + new Date(dest.lastModified())\n                        + \", entry=\"\n                        + new Date(entry.getTime()));\n              File parent = dest.getParentFile();\n              if (parent != null) {\n                parent.mkdirs();\n              }\n              VERBOSE(\"using jarFile.getInputStream(\" + entry + \")\");\n              FileOutputStream os = new FileOutputStream(dest);\n              copy(jis, os);\n              os.close();\n            } else {\n              String msg = \"Up-to-date: \" + $entry;\n              if (showexpand) {\n                PRINTLN(msg);\n              } else {\n                VERBOSE(msg);\n              }\n            }\n          }\n        }\n        if (wrapDir != null && $entry.startsWith(wrapDir)\n            || $entry.startsWith(LIB_PREFIX)\n            || $entry.startsWith(MAIN_PREFIX)) {\n          if (wrapDir != null && !entry.getName().startsWith(wrapDir)) continue;\n          // Load it!\n          VERBOSE(\"caching \" + $entry);\n          VERBOSE(\"using jarFile.getInputStream(\" + entry + \")\");\n          {\n            // Note: loadByteCode consumes the input stream, so make sure its scope\n            // does not extend beyond here.\n            loadByteCode(jis, $entry, null);\n          }\n\n          // Do we need to look for a main class?\n          if ($entry.startsWith(MAIN_PREFIX)) {\n            if (mainClass == null) {\n              JarInputStream mis = new JarInputStream(jis);\n              Manifest m = mis.getManifest();\n              // Is this a jar file with a manifest?\n              if (m != null) {\n                mainClass =\n                    mis.getManifest().getMainAttributes().getValue(Attributes.Name.MAIN_CLASS);\n                mainJar = $entry;\n              }\n            } else if (mainJar != null) {\n              WARNING(\n                  \"A main class is defined in multiple jar files inside \"\n                      + MAIN_PREFIX\n                      + mainJar\n                      + \" and \"\n                      + $entry);\n              WARNING(\"The main class \" + mainClass + \" from \" + mainJar + \" will be used\");\n            }\n          }\n        } else if (wrapDir == null && $entry.startsWith(UNPACK)) {\n          // Unpack into a temporary directory which is on the classpath of\n          // the application classloader. Badly designed code which relies on the\n          // application classloader can be made to work in this way.\n          InputStream is = this.getClass().getResourceAsStream(\"/\" + $entry);\n          if (is == null) throw new IOException($entry);\n          // Make a sentinel.\n          File dir = new File(TMP);\n          File sentinel = new File(dir, $entry.replace('/', '.'));\n          if (!sentinel.exists()) {\n            INFO(\"unpacking \" + $entry + \" into \" + dir.getCanonicalPath());\n            loadByteCode(is, $entry, TMP);\n            sentinel.getParentFile().mkdirs();\n            sentinel.createNewFile();\n          }\n        } else if ($entry.endsWith(CLASS)) {\n          // A plain vanilla class file rooted at the top of the jar file.\n          loadBytes(entry, jis, \"/\", null, manifest);\n          VERBOSE(\"One-Jar class: \" + jarName + \"!/\" + entry.getName());\n        } else {\n          // A resource?\n          loadBytes(entry, jis, \"/\", null, manifest);\n          VERBOSE(\"One-Jar resource: \" + jarName + \"!/\" + entry.getName());\n        }\n      }\n      // If mainClass is still not defined, return null. The caller is then responsible\n      // for determining a main class.\n\n    } catch (IOException iox) {\n      System.err.println(\"Unable to load resource: \" + iox);\n      iox.printStackTrace(System.err);\n    }\n    return mainClass;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1944, "initialization": ["File file = new File(*,String)"], "initializationStart": [787], "initializationEnd": [827], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 835, "focalAPIEnd": 859, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["isFileReadable(file)", "isFileWritable(file)", "file.delete()"], "useStart": [920, 982, 1081], "useEnd": [953, 1015, 1098], "hasFinally": 1, "cleanUpCall": ["File.delete()"], "finallyExpressionStart": 1033, "finallyExpressionEnd": 1041, "finallyBlockStart": 1033, "finallyBlockEnd": 1113, "cleanUpCallStart": [1081], "cleanUpCallEnd": [1098], "url": "https://github.com/ps3mediaserver/ps3mediaserver/tree/master/src/test/java/net/pms/util/FileUtilTest.java", "rawCode": "  @Test\n  public void testIsFileWritable() throws IOException {\n    assertThat(FileUtil.isFileWritable(null)).isFalse();\n    assertThat(FileUtil.isFileWritable(new File(\"\"))).isFalse();\n    assertThat(FileUtil.isFileWritable(new File(System.getProperty(\"user.dir\")))).isFalse();\n    String filename = String.format(\"pms_temp_writable_file_%d_1.tmp\", System.currentTimeMillis());\n    assertThat(FileUtil.isFileWritable(new File(filename))).isTrue();\n\n    File file = FileUtils.toFile(CLASS.getResource(\"english-utf8-with-bom.srt\"));\n    assertThat(FileUtil.isFileReadable(file)).isTrue();\n\n    assertThat(file.getParentFile()).isNotNull();\n\n    filename = String.format(\"pms_temp_writable_file_%d_2.tmp\", System.currentTimeMillis());\n    File tempFile = null;\n\n    try {\n      tempFile = new File(file.getParentFile(), filename);\n      tempFile.createNewFile();\n      assertThat(file.isFile()).isTrue();\n      assertThat(FileUtil.isFileReadable(tempFile)).isTrue();\n      assertThat(FileUtil.isFileWritable(tempFile)).isTrue();\n    } finally {\n      if (tempFile != null) {\n        tempFile.delete();\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1945, "initialization": ["File file = new File(String)"], "initializationStart": [79], "initializationEnd": [93], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "file.getParentFile().exists()||file.getParentFile().mkdirs()", "guardType": "IF {", "guardExpressionStart": 99, "guardExpressionEnd": 160, "guardBlockStart": 99, "guardBlockEnd": 179, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 161, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seba--/icfpcontest12/tree/master/java/src/util/FileCommands.java", "rawCode": "  public static void createFile(String file) throws IOException {\n    File f = new File(file);\n    if (f.getParentFile().exists() || f.getParentFile().mkdirs()) f.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1946, "initialization": ["File file = TemporaryFolder.newFile(String)"], "initializationStart": [91], "initializationEnd": [121], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 127, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["testFileAsPath(file,String)", "testFileAsPath(file,String)", "testFileAsPath(file,String)", "testFileAsString(file,String)"], "useStart": [160, 207, 256, 306], "useEnd": [201, 250, 299, 351], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bioclipse/bioclipse.balloon/tree/master/plugins/net.bioclipse.balloon.tests/src/net/bioclipse/balloon/business/TestFileNaming.java", "rawCode": "  @Test\n  public void testConstructOutputFile() throws IOException {\n    File singleFile = testFolder.newFile(\"test.mdl\");\n    singleFile.createNewFile();\n\n    testFileAsPath(singleFile, \"test_3d.mdl\");\n    testFileAsPath(singleFile, \"test_3d_1.mdl\");\n    testFileAsPath(singleFile, \"test_3d_2.mdl\");\n\n    testFileAsString(singleFile, \"test_3d_3.mdl\");\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1947, "initialization": ["File file = new File(String)"], "initializationStart": [278], "initializationEnd": [341], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getAbsolutePath()", "Logger.error(String)"], "tryExpressionStart": 1134, "tryExpressionEnd": 1138, "tryBlockStart": 1134, "tryBlockEnd": 1329, "catchExpressionStart": 1184, "catchExpressionEnd": 1206, "catchBlockStart": 1184, "catchBlockEnd": 1329, "exceptionHandlingCallStart": [1269, 1216], "exceptionHandlingCallEnd": [1297, 1298], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(file.exists())", "guardType": "IF {", "guardExpressionStart": 375, "guardExpressionEnd": 399, "guardBlockStart": 375, "guardBlockEnd": 1335, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1148, "focalAPIEnd": 1174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenIotOrg/openiot/tree/master/modules/x-gsn/src/main/java/org/openiot/gsn/wrappers/StsPiezometerWrapper.java", "rawCode": "  private boolean readStatus() {\n    String filename;\n    if (file_handling) filename = datadirectory;\n    else filename = svnurl;\n    filename = filename.replace('/', '_');\n    filename = filename.replace(':', '_');\n    filename = filename.replace('\\\\', '_');\n    statusFile = new File(directory + File.separator + filename + \"_status.txt\");\n    String contents = null;\n    if (statusFile.exists()) {\n      try {\n        BufferedReader input = new BufferedReader(new FileReader(statusFile));\n        try {\n          String line = null; // not declared within while loop\n          while ((line = input.readLine()) != null) {\n            contents = line;\n          }\n        } finally {\n          input.close();\n        }\n      } catch (IOException ex) {\n        ex.printStackTrace();\n      }\n      logger.warn(\"Content of the last line of the status file: \" + contents);\n      String[] list = contents.split(\";\");\n      logger.warn(\"number of split elements: \" + list.length + \" 0:\" + list[0] + \" 1:\" + list[1]);\n      this.lastEnteredStreamelement = new Long(list[0]);\n      this.lastModified = new Long(list[1]);\n    } else {\n      try {\n        statusFile.createNewFile();\n      } catch (IOException e) {\n        logger.error(\"the status file can not be created \" + statusFile.getAbsolutePath());\n        return false;\n      }\n    }\n\n    return true;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1948, "initialization": ["File file = new File(String)"], "initializationStart": [289], "initializationEnd": [395], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 429, "tryExpressionEnd": 433, "tryBlockStart": 429, "tryBlockEnd": 549, "catchExpressionStart": 473, "catchExpressionEnd": 495, "catchBlockStart": 473, "catchBlockEnd": 549, "exceptionHandlingCallStart": [505], "exceptionHandlingCallEnd": [524], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 443, "focalAPIEnd": 463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileWriter(file,boolean)"], "useStart": [612], "useEnd": [638], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sparlight/PPPoPP3/tree/master/src/me/corriekay/pppopp3/utils/PonyLogger.java", "rawCode": "  public static void logMessage(String path, String fileName, String messageToLog) {\n    Mane plugin = Mane.getInstance();\n    File directory = new File(plugin.getDataFolder() + File.separator + path);\n    if (!directory.exists()) {\n      directory.mkdirs();\n    }\n    File file =\n        new File(\n            plugin.getDataFolder() + File.separator + path + File.separator + fileName + \".txt\");\n    if (!file.exists()) {\n      try {\n        file.createNewFile();\n      } catch (IOException e) {\n        e.printStackTrace();\n        return;\n      }\n    }\n    try {\n      BufferedWriter out = new BufferedWriter(new FileWriter(file, true));\n      out.write(messageToLog + \"\\n\");\n      out.close();\n      return;\n    } catch (IOException e) {\n      e.printStackTrace();\n      return;\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1949, "initialization": ["File file = new File(String)"], "initializationStart": [390], "initializationEnd": [404], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 439, "focalAPIEnd": 456, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/penouille/Stratego-ucl/tree/master/src/Serializer/Serializer.java", "rawCode": "  /**\n   * @param Repository : l'objet à sauvegarder.\n   * @param url : nom du fichier où l'objet sera sauvegardé.\n   *     <p>Enregistre l'état d'un objet dans un fichier texte.\n   */\n  public static void saveObject(Object Score, String path) {\n\n    try {\n\n      // \"décacher\" le fichier\n      Process p = Runtime.getRuntime().exec(\"attrib -H \" + path);\n      p.waitFor();\n\n      File f = new File(path);\n      if (!f.exists()) {\n        f.createNewFile();\n      }\n\n      ObjectOutputStream Output = new ObjectOutputStream(new FileOutputStream(path));\n      Output.writeObject(Score);\n      Output.flush();\n      Output.close();\n\n      // \"recacher\" le fichier\n      p = Runtime.getRuntime().exec(\"attrib +H \" + path);\n      p.waitFor();\n    } catch (java.io.IOException | InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1950, "initialization": ["File file = new File(File,String)"], "initializationStart": [219], "initializationEnd": [264], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()", "getMessage()", "showErrorDialog(String,*,*)"], "tryExpressionStart": 308, "tryExpressionEnd": 312, "tryBlockStart": 308, "tryBlockEnd": 542, "catchExpressionStart": 362, "catchExpressionEnd": 385, "catchBlockStart": 362, "catchBlockEnd": 542, "exceptionHandlingCallStart": [395, 513, 425], "exceptionHandlingCallEnd": [415, 528, 533], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 322, "focalAPIEnd": 352, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/dataExtensions/src/java/ui/gov/nih/nci/cagrid/data/ui/wizard/OneTimeInfoDialogUtil.java", "rawCode": "  private static File getPropertiesFile() {\n    File dataDirectory = new File(Utils.getCaGridUserHome(), DIRECTORY_NAME);\n    if (!dataDirectory.exists()) {\n      dataDirectory.mkdirs();\n    }\n    File propertiesFile = new File(dataDirectory, PROPERTIES_FILE_NAME);\n    if (!propertiesFile.exists()) {\n      try {\n        propertiesFile.createNewFile();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n        CompositeErrorDialog.showErrorDialog(\n            \"Error creating new properties file\", ex.getMessage(), ex);\n      }\n    }\n    return propertiesFile;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1951, "initialization": ["File file = new File(String)"], "initializationStart": [86], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getParentFile()"], "configurationStart": [121], "configurationEnd": [141], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 196, "focalAPIEnd": 216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/good-life/PushTalk/tree/master/client-android/src/org/pushtalk/android/utils/FileUtil.java", "rawCode": "  public static void createFile(String filename) throws IOException {\n    File file = new File(filename);\n    File dir = file.getParentFile();\n    if (dir != null) {\n      dir.mkdirs();\n    }\n    file.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1952, "initialization": ["File file = createArtifactFile()"], "initializationStart": [233], "initializationEnd": [253], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new MojoExecutionException(String,*)"], "tryExpressionStart": 261, "tryExpressionEnd": 265, "tryBlockStart": 261, "tryBlockEnd": 421, "catchExpressionStart": 308, "catchExpressionEnd": 330, "catchBlockStart": 308, "catchBlockEnd": 421, "exceptionHandlingCallStart": [346], "exceptionHandlingCallEnd": [412], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 275, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/grozeille/sonar-plugin-dotnet/tree/master/maven/maven-dotnet-plugin/src/main/java/org/apache/maven/dotnet/PackMojo.java", "rawCode": "  @Override\n  public void execute() throws MojoExecutionException, MojoFailureException {\n    tmpDir = new File(project.getBuild().getDirectory());\n    if (packFiles == null) {\n      getLog().info(\"No file to pack\");\n      archive = createArtifactFile();\n      try {\n        archive.createNewFile();\n      } catch (IOException e) {\n        throw new MojoExecutionException(\"Error creating empty archive file\", e);\n      }\n    } else {\n      cleanTmpDir();\n      createArchive();\n    }\n\n    attachArchiveToProject();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1953, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1472, "focalAPIEnd": 1494, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/luni/src/main/java/java/io/File.java", "rawCode": "  /**\n   * Creates an empty temporary file in the given directory using the given prefix and suffix as\n   * part of the file name.\n   *\n   * @param prefix the prefix to the temp file name.\n   * @param suffix the suffix to the temp file name.\n   * @param directory the location to which the temp file is to be written, or {@code null} for the\n   *     default location for temporary files, which is taken from the \"java.io.tmpdir\" system\n   *     property. It may be necessary to set this property to an existing, writable directory for\n   *     this method to work properly.\n   * @return the temporary file.\n   * @throws IllegalArgumentException if the length of {@code prefix} is less than 3.\n   * @throws IOException if an error occurs when writing the file.\n   * @since Android 1.0\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(Msg.getString(\"K006b\")); // $NON-NLS-1$\n    }\n    String newSuffix = suffix == null ? \".tmp\" : suffix; // $NON-NLS-1$\n    String tmpDir = \".\"; // $NON-NLS-1$\n    tmpDir =\n        AccessController.doPrivileged(\n            new PriviAction<String>(\"java.io.tmpdir\", \".\")); // $NON-NLS-1$//$NON-NLS-2$\n    File result, tmpDirFile = directory == null ? new File(tmpDir) : directory;\n    do {\n      result = genTempFile(prefix, newSuffix, tmpDirFile);\n    } while (!result.createNewFile());\n    return result;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1954, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(sourceFile.equals(file,)) && !(file.exists())", "guardType": "IF {", "guardExpressionStart": 87, "guardExpressionEnd": 119, "guardBlockStart": 87, "guardBlockEnd": 127, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 156, "focalAPIEnd": 180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [341], "useEnd": [371], "hasFinally": 1, "cleanUpCall": ["FileChannel.close()"], "finallyExpressionStart": 450, "finallyExpressionEnd": 458, "finallyBlockStart": 450, "finallyBlockEnd": 595, "cleanUpCallStart": [496], "cleanUpCallEnd": [510], "url": "https://github.com/bingzer/DbQuery/tree/master/Sample/src/main/java/com/bingzer/android/dbv/sample/IOHelper.java", "rawCode": "  public static void copyFile(File sourceFile, File destFile) throws IOException {\n    if (sourceFile.equals(destFile)) return;\n    if (!destFile.exists()) destFile.createNewFile();\n\n    FileChannel source = null;\n    FileChannel destination = null;\n    try {\n      source = new FileInputStream(sourceFile).getChannel();\n      destination = new FileOutputStream(destFile).getChannel();\n      destination.transferFrom(source, 0, source.size());\n    } finally {\n      if (source != null) {\n        source.close();\n      }\n      if (destination != null) {\n        destination.close();\n      }\n    }\n  } // end copyFile()\n"}, {"dataset": "createNewFile", "exampleID": 1955, "initialization": ["File file = new File(String)"], "initializationStart": [141], "initializationEnd": [159], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 176, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(var)", "file.isAbsolute()", "file.getName()", "file.delete()"], "useStart": [165, 215, 260, 428], "useEnd": [197, 232, 274, 441], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yasuaki/opengrok/tree/master/test/org/opensolaris/opengrok/configuration/RuntimeEnvironmentTest.java", "rawCode": "  @Test\n  public void testBug3095() throws IOException {\n    RuntimeEnvironment instance = RuntimeEnvironment.getInstance();\n    File file = new File(\"foobar\");\n    assertTrue(file.createNewFile());\n    assertFalse(file.isAbsolute());\n    instance.setDataRoot(file.getName());\n    File f = instance.getDataRootFile();\n    assertNotNull(f);\n    assertEquals(\"foobar\", f.getName());\n    assertTrue(f.isAbsolute());\n    assertTrue(file.delete());\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1956, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 106, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8560/common/src/main/java-se/com/funambol/platform/FileAdapter.java", "rawCode": "  /** Create a file with the name of this FileAdapter. */\n  public void create() throws IOException {\n    file.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1957, "initialization": ["File file = getTempFile()"], "initializationStart": [733], "initializationEnd": [746], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 752, "focalAPIEnd": 775, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.toURI()"], "useStart": [827], "useEnd": [842], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/ShapefileDataStoreTest.java", "rawCode": "  public void testWriteReadBigNumbers() throws Exception {\n    // create feature type\n    SimpleFeatureType type =\n        DataUtilities.createType(\"junk\", \"a:Point,b:java.math.BigDecimal,c:java.math.BigInteger\");\n    SimpleFeatureCollection features = FeatureCollections.newCollection();\n\n    BigInteger bigInteger = new BigInteger(\"1234567890123456789\");\n    BigDecimal bigDecimal = new BigDecimal(bigInteger, 2);\n\n    SimpleFeatureBuilder build = new SimpleFeatureBuilder(type);\n    build.add(new GeometryFactory().createPoint(new Coordinate(1, -1)));\n    build.add(bigDecimal);\n    build.add(bigInteger);\n\n    SimpleFeature feature = build.buildFeature(null);\n    features.add(feature);\n\n    // store features\n    File tmpFile = getTempFile();\n    tmpFile.createNewFile();\n    ShapefileDataStore s = new ShapefileDataStore(tmpFile.toURI().toURL());\n    writeFeatures(s, features);\n\n    // read them back\n    FeatureReader<SimpleFeatureType, SimpleFeature> reader = s.getFeatureReader(\"junk\");\n    try {\n      SimpleFeature f = reader.next();\n\n      assertEquals(\n          \"big decimal\",\n          bigDecimal.doubleValue(),\n          ((Number) f.getAttribute(\"b\")).doubleValue(),\n          0.00001);\n      assertEquals(\n          \"big integer\",\n          bigInteger.longValue(),\n          ((Number) f.getAttribute(\"c\")).longValue(),\n          0.00001);\n    } finally {\n      reader.close();\n    }\n    s.dispose();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1958, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 120, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/visad/visad/tree/master/deps/src/loci/formats/Location.java", "rawCode": "  public boolean createNewFile() throws IOException {\n    if (isURL) throw new IOException(\"Unimplemented\");\n    return file.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1959, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.lastModified()"], "configurationStart": [170], "configurationEnd": [189], "guardCondition": "!(file.exists())", "guardType": "IF {", "guardExpressionStart": 120, "guardExpressionEnd": 138, "guardBlockStart": 120, "guardBlockEnd": 407, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 541, "focalAPIEnd": 561, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.setReadable(boolean)", "file.setWritable(boolean)", "new FileOutputStream(file)", "file.setLastModified(int)"], "useStart": [640, 670, 797, 899], "useEnd": [662, 692, 823, 942], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/powercoders/PCBot/tree/master/src/org/rsbot/util/io/HttpClient.java", "rawCode": "  public static HttpURLConnection download(final HttpURLConnection con, final File file)\n      throws IOException {\n    if (file.exists()) {\n      con.setIfModifiedSince(file.lastModified());\n      con.connect();\n      if (con.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {\n        log.fine(\"Using \" + file.getName() + \" from cache\");\n        con.disconnect();\n        return con;\n      }\n    }\n\n    log.fine(\"Downloading new \" + file.getName());\n\n    final byte[] buffer = downloadBinary(con);\n\n    if (!file.exists()) {\n      file.createNewFile();\n    }\n    if (file.exists() && (!file.canRead() || file.canWrite())) {\n      file.setReadable(true);\n      file.setWritable(true);\n    }\n    if (file.exists() && file.canRead() && file.canWrite()) {\n      final FileOutputStream fos = new FileOutputStream(file);\n      fos.write(buffer);\n      fos.flush();\n      fos.close();\n    }\n\n    file.setLastModified(con.getLastModified());\n\n    con.disconnect();\n    return con;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1960, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "exit(int)"], "tryExpressionStart": 2452, "tryExpressionEnd": 2456, "tryBlockStart": 2452, "tryBlockEnd": 2846, "catchExpressionStart": 2770, "catchExpressionEnd": 2790, "catchBlockStart": 2770, "catchBlockEnd": 2846, "exceptionHandlingCallStart": [2798, 2825], "exceptionHandlingCallEnd": [2817, 2839], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 2568, "focalAPIEnd": 2585, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(var)"], "useStart": [2535], "useEnd": [2586], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pgleeson/TempRepo3/tree/master/src/ucl/physiol/neuroconstruct/cell/Section.java", "rawCode": "  public static void main(String[] args) {\n    /*\n    Section s1 = new Section(\"s1\");\n    System.out.println(\"s1: \"+ s1);\n\n    Section s1_ = new Section(\"s1\");\n    System.out.println(\"s1_: \"+ s1_);\n\n    System.out.println(\"Equal: \"+ s1.equals(s1_));\n\n    s1.addToGroup(SOMA_GROUP);\n\n    System.out.println(\"Groups: \"+ s1.getGroups());\n\n    s1.addToGroup(DENDRITIC_GROUP);\n    Vector v = new Vector();\n    v.add(SOMA_GROUP);\n    v.add(DENDRITIC_GROUP);\n    s1.setGroups(v);\n\n    System.out.println(\"Groups: \"+ s1);\n\n    s1.setStartPointPosition(new Point3f(0,9,9));\n    s1.setStartRadius(66);\n\n\n\n\n    try\n    {\n    File f = new File(\"c:\\\\temp\\\\cell.xml\");\n    FileOutputStream fos = new FileOutputStream(f);\n    BufferedOutputStream bos = new BufferedOutputStream(fos);\n    XMLEncoder xmlEncoder = new XMLEncoder(bos);\n\n    xmlEncoder.writeObject(s1);\n\n    xmlEncoder.flush();\n    xmlEncoder.close();\n\n    FileInputStream fis = new FileInputStream(f);\n    BufferedInputStream bis = new BufferedInputStream(fis);\n    XMLDecoder xmlDecoder = new XMLDecoder(bis);\n\n\n    Object obj = xmlDecoder.readObject();\n    System.out.println(\"Obj: \"+ obj);\n\n    }\n    catch (FileNotFoundException ex)\n    {\n    ex.printStackTrace();\n    return;\n    }\n\n\n\n    Hashtable h = new Hashtable();\n    Segment oldSeg = new Segment();;\n    oldSeg.setSegmentName(\"Seg_\");\n\n    for (int i = 0; i < 200; i++)\n    {\n    Segment seg = new Segment();\n    seg.setSegmentName(\"Seg_\"+i);\n    seg.setParentSegment(oldSeg);\n    h.put(seg.getSegmentName(), seg);\n    oldSeg = seg;\n\n    System.out.println(\"Added seg: \"+ seg.getSegmentName()\n    +\", parent: \"+ seg.getParentSegment().getSegmentName());\n    }\n\n    */\n    Section s1 = new Section(\"s1\");\n    s1.setStartPointPositionX(0);\n    s1.setStartPointPositionY(0);\n    s1.setStartPointPositionZ(0);\n    System.out.println(\"s1: \" + s1);\n\n    s1.getGroups().add(\"hdghkg\");\n\n    Section s2 = null;\n\n    s2 = (Section) s1.clone();\n    Vector<String> newGroups = new Vector<String>();\n    newGroups.add(\"hdghkg\");\n    s2.setGroups(newGroups);\n\n    // s2.setStartPointPositionX(333);\n\n    System.out.println(\"s2: \" + s2);\n    System.out.println(\"s1: \" + s1);\n    System.out.println(\"s1 = s2? : \" + s1.equals(s2));\n\n    File f = new File(\"../temp/cde.tmp\");\n\n    SimpleCell cell = new SimpleCell(\"hh\");\n    Cell orig = cell;\n    Cell reloaded = null;\n\n    System.out.println(\"Original: \" + CellTopologyHelper.printDetails(cell, null));\n\n    try {\n      System.out.println(\"Chucking it into: \" + f.getCanonicalPath());\n      System.out.println(\"Created: \" + f.createNewFile());\n\n      FileOutputStream fo = new FileOutputStream(f);\n      ObjectOutputStream so = new ObjectOutputStream(fo);\n      so.writeObject(orig);\n      so.flush();\n      so.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    // Deserialize in to new class object\n    try {\n      FileInputStream fi = new FileInputStream(f);\n      ObjectInputStream si = new ObjectInputStream(fi);\n      reloaded = (Cell) si.readObject();\n\n      System.out.println(\"Created: \" + CellTopologyHelper.printDetails(reloaded, null));\n\n      System.out.println(\"Compare: \" + CellTopologyHelper.compare(reloaded, orig, false));\n\n      System.out.println(\"Equal: \" + orig.equals(reloaded));\n\n      si.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1961, "initialization": ["File file = new File(File,String)"], "initializationStart": [815], "initializationEnd": [847], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 853, "focalAPIEnd": 878, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.setReadable(boolean,boolean)", "file.setWritable(boolean,boolean)"], "useStart": [884, 924], "useEnd": [918, 958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/statsbiblioteket/sbutil/tree/master/sbutil-common/src/test/java/dk/statsbiblioteket/util/ZipsTest.java", "rawCode": "  /** Check that permissions on files are retained when ZIPping. */\n  @Test\n  public void testPermissions() throws Exception {\n    // FIXME: Does this work at all?\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n\n    File zipFolder = new File(tmpDir, \"myzip\");\n    if (zipFolder.exists()) {\n      Files.delete(zipFolder);\n    }\n    assertTrue(\"The source folder '\" + zipFolder + \"' should be created\", zipFolder.mkdirs());\n    File zipFile = new File(tmpDir, \"myzip.zip\");\n    if (zipFile.exists()) {\n      zipFile.delete();\n    }\n    File zipDestFolder = new File(tmpDir, \"unzip\");\n    if (zipDestFolder.exists()) {\n      Files.delete(zipDestFolder);\n    }\n    assertTrue(\n        \"The destination folder '\" + zipDestFolder + \"' should be created\", zipDestFolder.mkdirs());\n\n    File allAccess = new File(zipFolder, \"allAccess\");\n    allAccess.createNewFile();\n    allAccess.setReadable(true, false);\n    allAccess.setWritable(true, false);\n    // allAccess.setExecutable(true, false);\n\n    File worldWrite = new File(zipFolder, \"worldWrite\");\n    worldWrite.createNewFile();\n    worldWrite.setReadable(true, true);\n    worldWrite.setWritable(true, false);\n    // worldWrite.setExecutable(true, true);\n\n    File ownerOnly = new File(zipFolder, \"ownerOnly\");\n    ownerOnly.createNewFile();\n    ownerOnly.setReadable(false, false);\n    ownerOnly.setReadable(true, true);\n    ownerOnly.setWritable(false, false);\n    ownerOnly.setWritable(true, true);\n    // ownerOnly.setExecutable(true, true);\n\n    File onlyRead = new File(zipFolder, \"onlyRead\");\n    onlyRead.createNewFile();\n    onlyRead.setReadable(true, false);\n    onlyRead.setWritable(false, false);\n    // onlyRead.setExecutable(false, true);\n\n    String[] FILES = new String[] {\"allAccess\", \"worldWrite\", \"ownerOnly\", \"onlyread\"};\n\n    Zips.zip(zipFolder.toString(), zipFile.toString(), false);\n\n    assertTrue(\"A ZIP file should be created\", zipFile.exists());\n\n    Zips.unzip(zipFile.toString(), zipDestFolder.toString(), false);\n\n    File unpacked = new File(zipDestFolder, \"myzip\");\n    assertTrue(\"The unpacked folder '\" + unpacked + \"' should exist\", unpacked.exists());\n\n    for (String file : FILES) {\n      assertPermissionsEquals(\n          \"The permissions for \" + file + \" should be the same\",\n          file,\n          zipFolder,\n          new File(zipDestFolder, \"myzip\"));\n    }\n    System.out.println(\n        \"Unfortunately the group permissions for a File \"\n            + \"cannot be inspected from Java. Please compare the\"\n            + \" permissions for the following files and ensure \"\n            + \"that they are equal\");\n    for (String file : FILES) {\n      System.out.println(new File(zipFolder, file));\n      System.out.println(new File(new File(zipDestFolder, \"myzip\"), file));\n      System.out.println(\"\");\n    }\n\n    new File(zipFile.toString()).delete();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1962, "initialization": ["File file = new File(*,String)"], "initializationStart": [365], "initializationEnd": [413], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["info(*)"], "tryExpressionStart": 451, "tryExpressionEnd": 455, "tryBlockStart": 451, "tryBlockEnd": 536, "catchExpressionStart": 488, "catchExpressionEnd": 510, "catchBlockStart": 488, "catchBlockEnd": 536, "exceptionHandlingCallStart": [518], "exceptionHandlingCallEnd": [529], "configuration": ["file.getParentFile()"], "configurationStart": [419], "configurationEnd": [436], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 463, "focalAPIEnd": 480, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ariesteam/thinklab/tree/master/plugins/org.integratedmodelling.thinklab.persistence/src/org/integratedmodelling/persistence/factory/CGUtils.java", "rawCode": "  /**\n   * Creates a new File in the scratch folder.\n   *\n   * @param relativePath the relative path of the file (i.e.\n   *     org/integratedmodelling/ks/thinklab/thinklab_core)\n   * @return file the file created\n   * @throws ThinklabException\n   */\n  public static File createFileInPluginScratchFolder(String relativePath) throws ThinklabException {\n    File f = new File(getPluginScratchFolder(), relativePath);\n    f.getParentFile().mkdirs();\n    try {\n      f.createNewFile();\n    } catch (IOException e) {\n      log.info(e);\n    }\n    return f;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1963, "initialization": ["File file = new File(*)"], "initializationStart": [134], "initializationEnd": [196], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 365, "focalAPIEnd": 386, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/StratusLab/marketplace/tree/master/server/war/src/test/java/eu/stratuslab/marketplace/server/store/file/FileMonitorTest.java", "rawCode": "  @Test\n  public void testFileOrder() throws Exception {\n    FileMonitor monitor = new FileMonitor(tmpDir, \".xml\");\n\n    File file1 = new File(tmpDir + File.separator + \"2012-08-02T10:25:09Z.xml\");\n    File file2 = new File(tmpDir + File.separator + \"2013-08-02T10:25:09Z.xml\");\n    File file3 = new File(tmpDir + File.separator + \"2013-11-02T10:25:09Z.xml\");\n\n    file1.createNewFile();\n    file3.createNewFile();\n    file2.createNewFile();\n\n    Thread.sleep(6 * 1000L);\n\n    assertThat(monitor.getFile().getCanonicalPath(), is(file1.getCanonicalPath()));\n    assertThat(monitor.getFile().getCanonicalPath(), is(file2.getCanonicalPath()));\n    assertThat(monitor.getFile().getCanonicalPath(), is(file3.getCanonicalPath()));\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1964, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 270, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileWriter(file)"], "useStart": [309], "useEnd": [326], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spixi/Dijkstra/tree/master/src/de/bwv_aachen/dijkstra/controller/Controller.java", "rawCode": "  /**\n   * writeFile\n   *\n   * @param f The file to read\n   *     <p>Writes a file from the data model factory\n   */\n  public void writeFile(File f) throws FileNotFoundException, IOException, BadFileFormatException {\n    FileWriter writer;\n\n    if (!f.exists()) {\n      f.createNewFile();\n    }\n\n    writer = new FileWriter(f);\n\n    // f.setWritable(true);\n\n    model.writeJSONString(writer);\n\n    writer.close();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1965, "initialization": ["File file = new File(String)"], "initializationStart": [459], "initializationEnd": [477], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "new UnknownRegistryException(String,*)"], "tryExpressionStart": 483, "tryExpressionEnd": 487, "tryBlockStart": 483, "tryBlockEnd": 759, "catchExpressionStart": 612, "catchExpressionEnd": 634, "catchBlockStart": 612, "catchBlockEnd": 759, "exceptionHandlingCallStart": [734, 648], "exceptionHandlingCallEnd": [748, 752], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 525, "focalAPIEnd": 545, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/ide/eclipse/registry/org.wso2.developerstudio.eclipse.greg.manager.local/src/org/wso2/developerstudio/eclipse/greg/manager/local/utils/RegistryCheckInClientUtils.java", "rawCode": "  public static void download(\n      String username, String password, String filePath, String registryUrl, String registryPath)\n      throws InvalidRegistryURLException, UnknownRegistryException,\n          RegistryContentRetrieveException, IOException {\n    org.wso2.developerstudio.eclipse.greg.base.core.Registry registry =\n        new org.wso2.developerstudio.eclipse.greg.base.core.Registry(\n            username, password, registryUrl);\n    File file = new File(filePath);\n    try {\n      if (!file.exists()) {\n        file.createNewFile();\n      }\n      registry.getContent(registryPath, filePath);\n    } catch (IOException e) {\n      throw new UnknownRegistryException(\n          \"Error occured while creating a new file: \" + e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1966, "initialization": ["File file = new File(File,String)"], "initializationStart": [123], "initializationEnd": [175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 181, "focalAPIEnd": 211, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/unclebob/fitnesse/tree/master/test/fitnesse/responders/testHistory/TestHistoryResponderTest.java", "rawCode": "  private File addTestResult(File pageDirectory, String testResultFileName) throws IOException {\n    File testResultFile = new File(pageDirectory, testResultFileName + \".xml\");\n    testResultFile.createNewFile();\n    return testResultFile;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1967, "initialization": ["File file = new File(String)"], "initializationStart": [199], "initializationEnd": [213], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "fail(String)"], "tryExpressionStart": 219, "tryExpressionEnd": 223, "tryBlockStart": 219, "tryBlockEnd": 344, "catchExpressionStart": 260, "catchExpressionEnd": 282, "catchBlockStart": 260, "catchBlockEnd": 344, "exceptionHandlingCallStart": [322, 290], "exceptionHandlingCallEnd": [336, 337], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 231, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SysFera/GoDIET/tree/master/project/src/test/java/com/sysfera/godiet/core/managers/ConfigurationManagerTest.java", "rawCode": "  @Test(expected = GoDietConfigurationException.class)\n  public void directoryIsAFile() throws GoDietConfigurationException {\n    String path = \"itsafile\";\n    // First create a file\n    File file = new File(path);\n    try {\n      file.createNewFile();\n\n    } catch (IOException e) {\n      Assert.fail(\"Unable to test \" + e.getMessage());\n    }\n\n    ConfigurationManager cm = new ConfigurationManager();\n    Scratch s = new Scratch();\n    s.setDir(path);\n    try {\n      cm.setLocalScratch(s);\n    } catch (GoDietConfigurationException e) {\n      throw e;\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1968, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 107, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Email/tree/master/emailcommon/src/com/android/emailcommon/utility/Utility.java", "rawCode": "          @Override\n          public boolean createNewFile(File f) throws IOException {\n            return f.createNewFile();\n          }\n"}, {"dataset": "createNewFile", "exampleID": 1969, "initialization": ["File file = createTempFile(String,*)"], "initializationStart": [2918], "initializationEnd": [2953], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.deleteOnExit()", "file.getCanonicalPath()", "file.canWrite()"], "configurationStart": [3071, 3106, 3239], "configurationEnd": [3088, 3127, 3251], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 3436, "focalAPIEnd": 3453, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.renameTo(File)", "file.setLastModified(long)", "file.setReadOnly()"], "useStart": [4161, 4365, 4578], "useEnd": [4175, 4386, 4593], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/test/java/tests/security/permissions/JavaIoFileTest.java", "rawCode": "  @TestTargets({\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"canWrite\",\n      args = {}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"createNewFile\",\n      args = {}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"createTempFile\",\n      args = {java.lang.String.class, java.lang.String.class}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"createTempFile\",\n      args = {java.lang.String.class, java.lang.String.class, java.io.File.class}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"mkdir\",\n      args = {}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"mkdirs\",\n      args = {}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"renameTo\",\n      args = {java.io.File.class}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"setLastModified\",\n      args = {long.class}\n    ),\n    @TestTargetNew(\n      level = TestLevel.PARTIAL_COMPLETE,\n      notes =\n          \"Verifies that write/create methods of File class call checkWrite on security manager.\",\n      method = \"setReadOnly\",\n      args = {}\n    )\n  })\n  public void test_File3() throws IOException {\n    class TestSecurityManager extends SecurityManager {\n      boolean called;\n      String file;\n\n      void reset() {\n        called = false;\n        file = null;\n      }\n\n      @Override\n      public void checkWrite(String file) {\n        called = true;\n        this.file = file;\n      }\n\n      @Override\n      public void checkPermission(Permission p) {}\n    }\n\n    String tmpPath = System.getProperty(\"java.io.tmpdir\");\n    if (!tmpPath.endsWith(\"/\")) {\n      tmpPath += \"/\";\n    }\n    long id = new java.util.Date().getTime();\n    String filename = \"SecurityPermissionsTest_\" + id;\n    String filename2 = \"SecurityPermissionsTest_\" + (id + 1);\n    File f = File.createTempFile(filename, null);\n    f.deleteOnExit();\n    filename = f.getCanonicalPath();\n\n    File f2 = File.createTempFile(filename2, null);\n    f2.deleteOnExit();\n    filename2 = f2.getCanonicalPath();\n\n    TestSecurityManager s = new TestSecurityManager();\n    System.setSecurityManager(s);\n\n    s.reset();\n    f.canWrite();\n    assertTrue(\"File.canWrite() must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", filename, s.file);\n\n    s.reset();\n    f.createNewFile();\n    assertTrue(\"File.createNewFile() must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", filename, s.file);\n\n    s.reset();\n    File tmp = new File(tmpPath + \"dir\" + id);\n    tmp.mkdir();\n    assertTrue(\"File.canWrite() must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", tmpPath + \"dir\" + id, s.file);\n\n    s.reset();\n    tmp = new File(tmpPath + \"a\" + id + \"/b/c\");\n    tmp.mkdirs();\n    assertTrue(\"File.mkdirs() must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", tmpPath + \"a\" + id + \"/b/c\", s.file);\n\n    s.reset();\n    f.renameTo(f2);\n    assertTrue(\"File.renameTo(File) must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", filename2, s.file);\n\n    s.reset();\n    f.setLastModified(id);\n    assertTrue(\"File.setLastModified() must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", filename, s.file);\n\n    s.reset();\n    f.setReadOnly();\n    assertTrue(\"File.setReadOnly() must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", filename, s.file);\n\n    s.reset();\n    tmp = File.createTempFile(\"xxx\", \"yyy\");\n    tmp.deleteOnExit();\n    filename = tmp.getCanonicalPath();\n    assertTrue(\n        \"File.createTempFile(String,String) must call checkWrite on security manager\", s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", filename, s.file);\n\n    s.reset();\n    tmp = File.createTempFile(\"xxx\", \"yyy\", (File) null);\n    tmp.deleteOnExit();\n    filename = tmp.getCanonicalPath();\n    assertTrue(\n        \"File.createTempFile(String,String,File) must call checkWrite on security manager\",\n        s.called);\n    assertEquals(\"Argument of checkWrite is not correct\", filename, s.file);\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1970, "initialization": ["File file = new File(String)"], "initializationStart": [302], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 340, "focalAPIEnd": 357, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/madeye/dbartists/tree/master/src/org/dbartists/StreamProxy.java", "rawCode": "  private void processRequest(HttpRequest request, Socket client)\n      throws IllegalStateException, IOException {\n    if (request == null) {\n      return;\n    }\n    Log.d(LOG_TAG, \"processing\");\n    String url = request.getRequestLine().getUri();\n\n    String cache = getFileName(title);\n    File f = new File(cache);\n    if (!f.exists()) f.createNewFile();\n\n    HttpResponse realResponse = download(url);\n    if (realResponse == null) {\n      return;\n    }\n\n    Log.d(LOG_TAG, \"downloading...\");\n\n    InputStream data = realResponse.getEntity().getContent();\n\n    int totalFileSize = -1;\n    for (Header h : realResponse.getAllHeaders()) {\n      if (h.getName().toLowerCase().equals(\"content-length\"))\n        try {\n          totalFileSize = Integer.valueOf(h.getValue());\n        } catch (NumberFormatException e) {\n          // Ignore\n        }\n    }\n    StringBuilder httpString = new StringBuilder();\n    httpString.append(\"HTTP/1.1 200 OK\\r\\n\");\n    httpString.append(\"Content-Type: audio/mpeg\\r\\n\");\n    httpString.append(\"Connection: close\\r\\n\");\n    httpString.append(\"Accept-Ranges: bytes\\r\\n\");\n    if (totalFileSize != -1) httpString.append(\"Content-Length: \" + totalFileSize + \"\\r\\n\");\n    httpString.append(\"Content-Disposition: inline; filename=\" + cache + \".mp3\\r\\n\\r\\n\");\n\n    Log.d(LOG_TAG, \"headers done\");\n\n    OutputStream output = new FileOutputStream(cache);\n\n    try {\n      byte[] buffer = httpString.toString().getBytes();\n      int readBytes;\n      Log.d(LOG_TAG, \"writing to client\");\n      client.getOutputStream().write(buffer, 0, buffer.length);\n\n      // Start streaming content.\n      byte[] buff = new byte[1024 * 250];\n      while (isRunning && (readBytes = data.read(buff, 0, buff.length)) != -1) {\n        client.getOutputStream().write(buff, 0, readBytes);\n        output.write(buff, 0, readBytes);\n        client.getOutputStream().flush();\n        output.flush();\n      }\n    } catch (Exception e) {\n      Log.e(\"\", e.getMessage(), e);\n    } finally {\n      if (data != null) {\n        data.close();\n      }\n      if (output != null) {\n        output.close();\n      }\n      client.close();\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1971, "initialization": ["File file = new File(String)"], "initializationStart": [49], "initializationEnd": [74], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["displayException(String,String,*)"], "tryExpressionStart": 28, "tryExpressionEnd": 32, "tryBlockStart": 28, "tryBlockEnd": 394, "catchExpressionStart": 245, "catchExpressionEnd": 265, "catchBlockStart": 245, "catchBlockEnd": 394, "exceptionHandlingCallStart": [273], "exceptionHandlingCallEnd": [387], "configuration": ["file.delete()", "file.getParentFile()"], "configurationStart": [82, 100], "configurationEnd": [92, 117], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 134, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jenkinsci/hudsontrayapp-plugin/tree/master/client-common/src/main/java/org/hudson/trayapp/HudsonTrayApp.java", "rawCode": "  public void write() {\n    try {\n      File f = new File(PERSISTENCEFILE);\n      f.delete();\n      f.getParentFile().mkdirs();\n      f.createNewFile();\n      Writer w = new FileWriter(PERSISTENCEFILE);\n      writeXML(w);\n      w.close();\n    } catch (Exception e) {\n      TrayIconImplementation.displayException(\n          \"File Write Exception\", \"Excpetion saving Preferences file\", e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1972, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getPath()", "file.getPath()"], "configurationStart": [78, 140], "configurationEnd": [92, 154], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 275, "focalAPIEnd": 295, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Proyecto-UTN-2012/Proyecto-UTN-2012/tree/master/server/integrar-t-core/src/main/java/org/utn/proyecto/helpful/integrart/core/fileresources/LocalDriveFileResourcePersister.java", "rawCode": "  private void createFile(File file) throws IOException {\n    int lastIndex = file.getPath().lastIndexOf(FILE_SEPARATOR);\n    String path = file.getPath().substring(0, lastIndex);\n    File folder = new File(path);\n    if (!folder.exists()) {\n      folder.mkdirs();\n    }\n    file.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1973, "initialization": ["File file = new File(*)"], "initializationStart": [258], "initializationEnd": [338], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace(*)"], "tryExpressionStart": 502, "tryExpressionEnd": 506, "tryBlockStart": 502, "tryBlockEnd": 1307, "catchExpressionStart": 1241, "catchExpressionEnd": 1263, "catchBlockStart": 1241, "catchBlockEnd": 1307, "exceptionHandlingCallStart": [1271], "exceptionHandlingCallEnd": [1300], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 552, "focalAPIEnd": 579, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileWriter(file)", "file.getAbsolutePath()"], "useStart": [615, 831], "useEnd": [642, 860], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cfeclipse/cfeclipse/tree/master/org.cfeclipse.cfml/src/org/cfeclipse/cfml/views/snips/SnipWriter.java", "rawCode": "  public void writeSnippet(\n      String snippetName,\n      String snippetKeyCombo,\n      String snippetDescription,\n      String startText,\n      String endText,\n      boolean useAsTemplate,\n      String templateExtension) {\n\n    File snippetFile =\n        new File(parentFolder.toString() + File.separator + snippetName + fileExtension);\n    String snippetContents =\n        createFormattedSnip(\n            snippetName, snippetDescription, startText, endText, useAsTemplate, templateExtension);\n    try {\n\n      if (!snippetFile.isFile()) {\n        snippetFile.createNewFile();\n      }\n      FileWriter writer = new FileWriter(snippetFile);\n      writer.write(snippetContents);\n      writer.close();\n      if (snippetKeyCombo.length() > 0) {\n        SnipKeyCombos snipKeyCombos = new SnipKeyCombos();\n\n        String filepath = snippetFile.getAbsolutePath().replaceAll(\"\\\\\\\\\", \"/\");\n        String basePath = snipBase.toString();\n\n        String relativePath = filepath.replaceFirst(basePath, \"\");\n\n        String sequence = snipKeyCombos.getSequence(relativePath);\n\n        if (sequence != null) {\n          snipKeyCombos.clearKeyCombo(sequence);\n        }\n        snipKeyCombos.setKeyCombo(snippetKeyCombo, relativePath);\n      }\n    } catch (IOException e) {\n      e.printStackTrace(System.err);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1974, "initialization": ["File file = new File(*,String)"], "initializationStart": [317], "initializationEnd": [370], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 393, "focalAPIEnd": 413, "followUpCheck": "var", "checkType": "IF", "followUpCheckExpressionStart": 498, "followUpCheckExpressionEnd": 509, "followUpCheckBlockStart": 498, "followUpCheckBlockEnd": 609, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/io/File/AccessDenied.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    File dir = new File(System.getProperty(\"test.dir\", \".\"), \"hugo\");\n    dir.deleteOnExit();\n    if (!dir.mkdir()) {\n      throw new Exception(\"Could not create directory:\" + dir);\n    }\n    System.out.println(\"Created directory:\" + dir);\n\n    File file = new File(System.getProperty(\"test.dir\", \".\"), \"hugo\");\n    boolean result = file.createNewFile();\n    System.out.println(\"CreateNewFile() for:\" + file + \" returned:\" + result);\n    if (result) {\n      throw new Exception(\"Expected createNewFile() to return false but it returned true\");\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1975, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 82, "tryExpressionEnd": 86, "tryBlockStart": 82, "tryBlockEnd": 302, "catchExpressionStart": 199, "catchExpressionEnd": 221, "catchBlockStart": 199, "catchBlockEnd": 302, "exceptionHandlingCallStart": [274], "exceptionHandlingCallEnd": [293], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 96, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["FileHandler.saveData(file,Preferences)"], "useStart": [147], "useEnd": [188], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/daisukewi/DamnedSunset/tree/master/Tools/mapeditor/src/mapeditor/controler/System.java", "rawCode": "  public void savePreferences(File file) {\n\n    if (_preferences != null) {\n      try {\n        file.createNewFile();\n        if (file.canWrite()) _fileHandler.saveData(file, _preferences);\n\n      } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1976, "initialization": ["File file = new File(File,*)"], "initializationStart": [80], "initializationEnd": [121], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["error(String)", "log(*,*,*)", "File.delete()"], "tryExpressionStart": 262, "tryExpressionEnd": 266, "tryBlockStart": 262, "tryBlockEnd": 1153, "catchExpressionStart": 1010, "catchExpressionEnd": 1030, "catchBlockStart": 1010, "catchBlockEnd": 1153, "exceptionHandlingCallStart": [1063, 1040, 1131], "exceptionHandlingCallEnd": [1104, 1108, 1144], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(file.exists())", "guardType": "IF {", "guardExpressionStart": 130, "guardExpressionEnd": 148, "guardBlockStart": 130, "guardBlockEnd": 156, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 310, "focalAPIEnd": 330, "followUpCheck": "var", "checkType": "IF", "followUpCheckExpressionStart": 1118, "followUpCheckExpressionEnd": 1130, "followUpCheckBlockStart": 1118, "followUpCheckBlockEnd": 1145, "use": ["write(BufferedImage,String,file)", "file.delete()"], "useStart": [933, 1131], "useEnd": [964, 1144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pitosalas/blogbridge/tree/master/src/com/salas/bb/utils/uif/images/Cache2.java", "rawCode": "    /** Writes image data to disk. */\n    public void run() {\n      File file = new File(cacheFolder, urlToFilename(url));\n\n      if (file.exists()) return;\n\n      if (LOG.isLoggable(Level.FINE)) LOG.fine(\"Writing \" + url);\n\n      boolean created = false;\n      try {\n        // Reserve file\n        created = file.createNewFile();\n\n        BufferedImage buf = null;\n        if (image instanceof BufferedImage) {\n          buf = (BufferedImage) image;\n        } else {\n          int width = image.getWidth(null);\n          int height = image.getHeight(null);\n\n          // We save only non-empty images\n          if (width > 0 && height > 0) {\n            buf = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n            Graphics g = buf.createGraphics();\n            g.drawImage(image, 0, 0, null);\n          }\n        }\n\n        // If buffer was successfully created and filled\n        if (buf != null) {\n          ImageIO.write(buf, \"PNG\", file);\n          verifyLimits();\n        }\n      } catch (Throwable e) {\n        LOG.log(Level.WARNING, Strings.error(\"img.cache.writing.failed\"), e);\n        if (created) file.delete();\n      }\n    }\n"}, {"dataset": "createNewFile", "exampleID": 1977, "initialization": ["File file = new File(String)"], "initializationStart": [54], "initializationEnd": [68], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 113, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CrossGaming/CrossGaming-BukkitPlugins/tree/master/CCEBridge/src/com/crossge/ccebridge/Initialization.java", "rawCode": "  private void fileCreate(String file) {\n    File f = new File(file);\n    if (!f.exists()) {\n      try {\n        f.createNewFile();\n      } catch (IOException e) {\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1978, "initialization": ["File file = new File(*,String)"], "initializationStart": [182], "initializationEnd": [215], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 232, "focalAPIEnd": 253, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(var)"], "useStart": [221], "useEnd": [254], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elight/the_grinder/tree/master/grinder-swing-console/src/test/java/net/grinder/console/swingui/TestFileTreeModel.java", "rawCode": "  public void testRefreshChangedDirectoriesListener() throws Exception {\n    final File dir1 = new File(getDirectory(), \"dir1\");\n    assertTrue(dir1.mkdir());\n    final File file1 = new File(getDirectory(), \"file1\");\n    assertTrue(file1.createNewFile());\n    final File file2 = new File(dir1, \"file2\");\n    assertTrue(file2.createNewFile());\n    final File file3 = new File(dir1, \"file3\");\n    assertTrue(file3.createNewFile());\n\n    final FileTreeModel fileTreeModel =\n        new FileTreeModel(m_editorModel, m_nullFileFilter, getDirectory());\n    fileTreeModel.setRootDirectory(getDirectory());\n\n    final RandomStubFactory<TreeModelListener> listenerStubFactory =\n        RandomStubFactory.create(TreeModelListener.class);\n    final TreeModelListener listener = listenerStubFactory.getStub();\n    fileTreeModel.addTreeModelListener(listener);\n\n    final FileChangeWatcher.FileChangedListener filesChangedListener =\n        fileTreeModel.new RefreshChangedDirectoriesListener();\n\n    filesChangedListener.filesChanged(new File[0]);\n    listenerStubFactory.assertNoMoreCalls();\n\n    filesChangedListener.filesChanged(\n        new File[] {\n          file2, dir1,\n        });\n    listenerStubFactory.assertSuccess(\"treeStructureChanged\", TreeModelEvent.class);\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1979, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 1585, "focalAPIEnd": 1607, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/main/java/java/io/File.java", "rawCode": "  /**\n   * Creates an empty temporary file in the given directory using the given prefix and suffix as\n   * part of the file name. If {@code suffix} is null, {@code .tmp} is used.\n   *\n   * <p>Note that this method does <i>not</i> call {@link #deleteOnExit}, but see the documentation\n   * for that method before you call it manually.\n   *\n   * @param prefix the prefix to the temp file name.\n   * @param suffix the suffix to the temp file name.\n   * @param directory the location to which the temp file is to be written, or {@code null} for the\n   *     default location for temporary files, which is taken from the \"java.io.tmpdir\" system\n   *     property. It may be necessary to set this property to an existing, writable directory for\n   *     this method to work properly.\n   * @return the temporary file.\n   * @throws IllegalArgumentException if the length of {@code prefix} is less than 3.\n   * @throws IOException if an error occurs when writing the file.\n   */\n  public static File createTempFile(String prefix, String suffix, File directory)\n      throws IOException {\n    // Force a prefix null check first\n    if (prefix.length() < 3) {\n      throw new IllegalArgumentException(\"prefix must be at least 3 characters\");\n    }\n    if (suffix == null) {\n      suffix = \".tmp\";\n    }\n    File tmpDirFile = directory;\n    if (tmpDirFile == null) {\n      String tmpDir = System.getProperty(\"java.io.tmpdir\", \".\");\n      tmpDirFile = new File(tmpDir);\n    }\n    File result;\n    do {\n      result = new File(tmpDirFile, prefix + tempFileRandom.nextInt() + suffix);\n    } while (!result.createNewFile());\n    return result;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1980, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.exists()"], "configurationStart": [67], "configurationEnd": [86], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 104, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(var)", "file.lastModified()"], "useStart": [93, 260], "useEnd": [131, 285], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/peodratash/mina-ftpserver/tree/master/core/src/test/java/org/apache/ftpserver/clienttests/MDTMTest.java", "rawCode": "  public void testMDTMForFile() throws Exception {\n    assertFalse(TEST_FILE1.exists());\n    assertTrue(TEST_FILE1.createNewFile());\n\n    Calendar expected = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n    expected.clear();\n    expected.setTimeInMillis(TEST_FILE1.lastModified());\n    assertEquals(213, client.sendCommand(\"MDTM \" + TEST_FILE1.getName()));\n\n    Calendar actual = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n    actual.clear();\n    actual.setTime(FTP_DATE_FORMAT.parse(client.getReplyString().substring(4).trim()));\n    assertEquals(expected, actual);\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1981, "initialization": ["File file = new File(*)"], "initializationStart": [680], "initializationEnd": [713], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 652, "tryExpressionEnd": 656, "tryBlockStart": 652, "tryBlockEnd": 895, "catchExpressionStart": 823, "catchExpressionEnd": 843, "catchBlockStart": 823, "catchBlockEnd": 895, "exceptionHandlingCallStart": [861], "exceptionHandlingCallEnd": [884], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "getEnhDirectory().allowsEdit(file,)", "guardType": "IF {", "guardExpressionStart": 725, "guardExpressionEnd": 764, "guardBlockStart": 725, "guardBlockEnd": 812, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 779, "focalAPIEnd": 799, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/internetarchive/heritrix3/tree/master/engine/src/main/java/org/archive/crawler/restlet/EnhDirectoryResource.java", "rawCode": "  /**\n   * Add EditRepresentation as a variant when appropriate.\n   *\n   * @see org.restlet.engine.local.DirectoryServerResource#getVariants()\n   */\n  @Override\n  public List<Variant> getVariants() {\n    List<Variant> superVariants = super.getVariants();\n    if (superVariants == null) {\n      return null; // PUT and DELETE return no content\n    }\n    List<Variant> variants = new LinkedList<>(superVariants);\n    Form f = getRequest().getResourceRef().getQueryAsForm();\n    String format = f.getFirstValue(\"format\");\n    if (\"textedit\".equals(format)) {\n      if (variants.isEmpty()) {\n        // create empty placeholder file if appropriate\n        try {\n          File file = new File(new URI(getTargetUri()));\n          if (getEnhDirectory().allowsEdit(file)) {\n            file.createNewFile();\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n        superVariants = super.getVariants();\n        if (superVariants == null) {\n          return null;\n        }\n        variants = new LinkedList<>(superVariants);\n      }\n      // wrap FileRepresentations in EditRepresentations\n      ListIterator<Variant> iter = variants.listIterator();\n      while (iter.hasNext()) {\n        Variant v = iter.next();\n        if (v instanceof FileRepresentation) {\n          File file = ((FileRepresentation) v).getFile();\n          if (getEnhDirectory().allowsEdit(file)) {\n            iter.remove();\n            // any editable file for our purposes should\n            // be XML/UTF-8\n            v.setCharacterSet(CharacterSet.UTF_8);\n            iter.add(new EditRepresentation((FileRepresentation) v, this));\n          }\n          ;\n        }\n      }\n    } else if (\"paged\".equals(format)) {\n      ListIterator<Variant> iter = variants.listIterator();\n      while (iter.hasNext()) {\n        Variant v = iter.next();\n        if (v instanceof FileRepresentation) {\n          File file = ((FileRepresentation) v).getFile();\n          if (getEnhDirectory().allowsPaging(file)) {\n            iter.remove();\n            iter.add(\n                new PagedRepresentation(\n                    (FileRepresentation) v,\n                    this,\n                    f.getFirstValue(\"pos\"),\n                    f.getFirstValue(\"lines\"),\n                    f.getFirstValue(\"reverse\")));\n          }\n          ;\n        }\n      }\n    } else {\n      ListIterator<Variant> iter = variants.listIterator();\n      while (iter.hasNext()) {\n        Variant v = iter.next();\n        v.setCharacterSet(CharacterSet.UTF_8);\n      }\n    }\n\n    return variants;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1982, "initialization": ["File file = new File(File,String)"], "initializationStart": [255], "initializationEnd": [278], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 284, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["hasPayload(file)"], "useStart": [466], "useEnd": [487], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwein/spring-integration/tree/master/spring-integration-file/src/test/java/org/springframework/integration/file/recursive/FileInboundChannelAdapterWithRecursiveDirectoryTests.java", "rawCode": "  @Test(timeout = 2000)\n  @SuppressWarnings(\"unchecked\")\n  public void shouldReturnFilesMultipleLevels() throws IOException {\n\n    // when\n    File folder = directory.newFolder(\"foo\");\n    File siblingFile = directory.newFile(\"bar\");\n    File childFile = new File(folder, \"baz\");\n    childFile.createNewFile();\n\n    List<Message<?>> received = Arrays.asList(files.receive(), files.receive());\n    // verify\n    assertThat(received, hasItems(hasPayload(siblingFile), hasPayload(childFile)));\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1983, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new IOException(*)", "initCause(*)"], "tryExpressionStart": 411, "tryExpressionEnd": 415, "tryBlockStart": 411, "tryBlockEnd": 575, "catchExpressionStart": 466, "catchExpressionEnd": 490, "catchBlockStart": 466, "catchBlockEnd": 575, "exceptionHandlingCallStart": [520, 520], "exceptionHandlingCallEnd": [551, 566], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(file.exists())", "guardType": "IF {", "guardExpressionStart": 75, "guardExpressionEnd": 90, "guardBlockStart": 75, "guardBlockEnd": 318, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 439, "focalAPIEnd": 456, "followUpCheck": "!var", "checkType": "IF", "followUpCheckExpressionStart": 582, "followUpCheckExpressionEnd": 599, "followUpCheckBlockStart": 582, "followUpCheckBlockEnd": 841, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benh/twesos/tree/master/frameworks/hadoop-0.20.2/src/hdfs/org/apache/hadoop/hdfs/server/datanode/FSDataset.java", "rawCode": "    private File createTmpFile(Block b, File f) throws IOException {\n      if (f.exists()) {\n        throw new IOException(\n            \"Unexpected problem in creating temporary file for \"\n                + b\n                + \". File \"\n                + f\n                + \" should not be present, but is.\");\n      }\n      // Create the zero-length temp file\n      //\n      boolean fileCreated = false;\n      try {\n        fileCreated = f.createNewFile();\n      } catch (IOException ioe) {\n        throw (IOException) new IOException(DISK_ERROR + f).initCause(ioe);\n      }\n      if (!fileCreated) {\n        throw new IOException(\n            \"Unexpected problem in creating temporary file for \"\n                + b\n                + \". File \"\n                + f\n                + \" should be creatable, but is already present.\");\n      }\n      return f;\n    }\n"}, {"dataset": "createNewFile", "exampleID": 1984, "initialization": ["File file = new File(File,String)"], "initializationStart": [330], "initializationEnd": [364], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["notifyFailedAction(String)"], "tryExpressionStart": 303, "tryExpressionEnd": 307, "tryBlockStart": 303, "tryBlockEnd": 962, "catchExpressionStart": 790, "catchExpressionEnd": 812, "catchBlockStart": 790, "catchBlockEnd": 910, "exceptionHandlingCallStart": [820], "exceptionHandlingCallEnd": [888], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 377, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [621], "useEnd": [650], "hasFinally": 1, "cleanUpCall": ["getSize()", "notifyUpdateCache(*)"], "finallyExpressionStart": 911, "finallyExpressionEnd": 919, "finallyBlockStart": 911, "finallyBlockEnd": 962, "cleanUpCallStart": [945, 927], "cleanUpCallEnd": [954, 955], "url": "https://github.com/mensonge/mensonge/tree/master/src/main/java/mensonge/core/tools/Cache.java", "rawCode": "  /**\n   * Créé un fichier dans le cache\n   *\n   * @param fileName Nom du fichier\n   * @param content Contenu du fichier\n   * @throws IOException\n   */\n  public void createFile(String fileName, byte[] content) throws IOException {\n    notifyInProgressAction(\"Mise en cache de l'enregistrement...\");\n    try {\n      File newFile = new File(cacheDirectory, fileName);\n      if (!newFile.createNewFile()) {\n        if (newFile.delete()) {\n          newFile.createNewFile();\n        } else {\n          throw new IOException(\"Impossible de supprimer l'ancien fichier du cache\");\n        }\n      }\n      FileOutputStream fos = new FileOutputStream(newFile);\n      fos.write(content);\n      fos.flush();\n      fos.close();\n      notifyCompletedAction(\"L'enregistrement a été mis en cache\");\n    } catch (IOException e) {\n      notifyFailedAction(\"Impossible de mettre l'enregistrement en cache\");\n      throw e;\n    } finally {\n      notifyUpdateCache(getSize());\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1985, "initialization": ["File file = new File(String)"], "initializationStart": [5919], "initializationEnd": [5937], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "new AMTuneException(*)"], "tryExpressionStart": 188, "tryExpressionEnd": 192, "tryBlockStart": 188, "tryBlockEnd": 9296, "catchExpressionStart": 9218, "catchExpressionEnd": 9239, "catchBlockStart": 9218, "catchBlockEnd": 9296, "exceptionHandlingCallStart": [9273, 9253], "exceptionHandlingCallEnd": [9288, 9289], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 6935, "focalAPIEnd": 6969, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/amserver/source/com/sun/identity/tune/impl/TuneSolarisOS.java", "rawCode": "  /**\n   * This method tunes TCP parameters using ndd command.\n   *\n   * @throws com.sun.identity.tune.common.AMTuneException\n   */\n  protected void tuneTCP() throws AMTuneException {\n    try {\n      Map tcpCurCFGMap = getCurTCPVals();\n      String tuneFile = \"/etc/rc2.d/S71ndd_tcp\";\n      mWriter.writeln(LINE_SEP);\n      mWriter.writelnLocaleMsg(\"pt-tcp-tuning\");\n      mWriter.writeln(\" \");\n      mWriter.writeLocaleMsg(\"pt-file\");\n      mWriter.writeln(tuneFile);\n      mWriter.writelnLocaleMsg(\"pt-param-tuning\");\n      mWriter.writeln(\" \");\n      mWriter.writelnLocaleMsg(\"pt-tcp-wait-2-flush-interval\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_FIN_WAIT_2_FLUSH_INTERVAL);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_FIN_WAIT_2_FLUSH_INTERVAL));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_FIN_WAIT_2_FLUSH_INTERVAL);\n      mWriter.writeln(\" \" + FLUSH_INTERVAL_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-conn-req-maz-q\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_CONN_REQ_MAX_Q);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_CONN_REQ_MAX_Q));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_CONN_REQ_MAX_Q);\n      mWriter.writeln(\" \" + AMTUNE_NUM_TCP_CONN_SIZE);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-conn-req-max-q0\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_CONN_REQ_MAX_Q0);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_CONN_REQ_MAX_Q0));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_CONN_REQ_MAX_Q0);\n      mWriter.writeln(\" \" + AMTUNE_NUM_TCP_CONN_SIZE);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-keepalive-interval\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_KEEPALIVE_INTERVAL);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_KEEPALIVE_INTERVAL));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_KEEPALIVE_INTERVAL);\n      mWriter.writeln(\" \" + KEEP_ALIVE_INTERVAL_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-smallest-anon-port\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_SMALLEST_ANON_PORT);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_SMALLEST_ANON_PORT));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_SMALLEST_ANON_PORT);\n      mWriter.writeln(\" \" + ANON_PORT_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-slow-start-initial\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_SLOW_START_INTITIAL);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_SLOW_START_INTITIAL));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_SLOW_START_INTITIAL);\n      mWriter.writeln(\" \" + SLOW_START_INITIAL_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-xmit-hiwat\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_XMIT_HIWAT);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_XMIT_HIWAT));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_XMIT_HIWAT);\n      mWriter.writeln(\" \" + XMIT_RECV_HIWAT_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-recv-hiwat\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_RECV_HIWAT);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_RECV_HIWAT));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_RECV_HIWAT);\n      mWriter.writeln(\" \" + XMIT_RECV_HIWAT_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-ip-abort-cinterval\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_IP_ABORT_CINTERVAL);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_IP_ABORT_CINTERVAL));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_IP_ABORT_CINTERVAL);\n      mWriter.writeln(\" \" + ABORT_CINTERVAL_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-deferred-ack-interval\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_DEFERRED_ACK_INTERVAL);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_DEFERRED_ACK_INTERVAL));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_DEFERRED_ACK_INTERVAL);\n      mWriter.writeln(\" \" + ACK_INTERVAL_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-strong-iss\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_STRONG_ISS);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_STRONG_ISS));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_STRONG_ISS);\n      mWriter.writeln(\" \" + STRONG_ISS_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-max-buf\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_MAX_BUF);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_MAX_BUF));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_MAX_BUF);\n      mWriter.writeln(\" \" + MAX_BUF_CWND_VAL);\n      mWriter.writeln(\" \");\n\n      mWriter.writelnLocaleMsg(\"pt-tcp-cwnd-max\");\n      mWriter.writeLocaleMsg(\"pt-cur-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_CWND_MAX);\n      mWriter.writeln(\" \" + tcpCurCFGMap.get(SOL_TCP_CWND_MAX));\n      mWriter.writeLocaleMsg(\"pt-rec-val\");\n      mWriter.write(TCP_DIV + SOL_TCP_CWND_MAX);\n      mWriter.writeln(\" \" + MAX_BUF_CWND_VAL);\n      mWriter.writeln(\" \");\n\n      if (confInfo.isReviewMode()) {\n        return;\n      }\n      if (new File(tuneFile).exists()) {\n        AMTuneUtil.backupConfigFile(tuneFile);\n        FileHandler solConfFile = new FileHandler(tuneFile);\n        String[] delStrs = {\n          \"#\" + START_FAM_MSG,\n          SOL_TCP_TIME_WAIT_INTERVAL,\n          SOL_TCP_FIN_WAIT_2_FLUSH_INTERVAL,\n          SOL_TCP_CONN_REQ_MAX_Q,\n          SOL_TCP_CONN_REQ_MAX_Q0,\n          SOL_TCP_IP_ABORT_INTERVAL,\n          SOL_TCP_KEEPALIVE_INTERVAL,\n          SOL_TCP_REXMIT_INTERVAL_MAX,\n          SOL_TCP_REXMIT_INTERVAL_MIN,\n          SOL_TCP_REXMIT_INTERVAL_INITIAL,\n          SOL_TCP_SMALLEST_ANON_PORT,\n          SOL_TCP_SLOW_START_INTITIAL,\n          SOL_TCP_XMIT_HIWAT,\n          SOL_TCP_RECV_HIWAT,\n          SOL_TCP_IP_ABORT_CINTERVAL,\n          SOL_TCP_DEFERRED_ACK_INTERVAL,\n          SOL_TCP_STRONG_ISS,\n          SOL_TCP_MAX_BUF,\n          SOL_TCP_CWND_MAX,\n          \"#\" + END_FAM_MSG\n        };\n        solConfFile.removeMatchingLines(delStrs);\n        solConfFile.close();\n      } else {\n        // create the file\n        new File(tuneFile).createNewFile();\n      }\n      FileHandler fh = new FileHandler(tuneFile);\n      fh.appendLine(\"#\" + START_FAM_MSG);\n      String setCmd = nddCmd + \"-set \" + TCP_DIV;\n      fh.appendLine(setCmd + SOL_TCP_FIN_WAIT_2_FLUSH_INTERVAL + \" \" + FLUSH_INTERVAL_VAL);\n      fh.appendLine(setCmd + SOL_TCP_CONN_REQ_MAX_Q + \" \" + AMTUNE_NUM_TCP_CONN_SIZE);\n      fh.appendLine(setCmd + SOL_TCP_CONN_REQ_MAX_Q0 + \" \" + AMTUNE_NUM_TCP_CONN_SIZE);\n      fh.appendLine(setCmd + SOL_TCP_KEEPALIVE_INTERVAL + \" \" + KEEP_ALIVE_INTERVAL_VAL);\n      fh.appendLine(setCmd + SOL_TCP_SMALLEST_ANON_PORT + \" \" + ANON_PORT_VAL);\n      fh.appendLine(setCmd + SOL_TCP_SLOW_START_INTITIAL + \" \" + SLOW_START_INITIAL_VAL);\n      fh.appendLine(setCmd + SOL_TCP_XMIT_HIWAT + \" \" + XMIT_RECV_HIWAT_VAL);\n      fh.appendLine(setCmd + SOL_TCP_RECV_HIWAT + \" \" + XMIT_RECV_HIWAT_VAL);\n      fh.appendLine(setCmd + SOL_TCP_IP_ABORT_CINTERVAL + \" \" + ABORT_CINTERVAL_VAL);\n      fh.appendLine(setCmd + SOL_TCP_DEFERRED_ACK_INTERVAL + \" \" + ACK_INTERVAL_VAL);\n      fh.appendLine(setCmd + SOL_TCP_STRONG_ISS + \" \" + STRONG_ISS_VAL);\n      fh.appendLine(setCmd + SOL_TCP_MAX_BUF + \" \" + MAX_BUF_CWND_VAL);\n      fh.appendLine(setCmd + SOL_TCP_CWND_MAX + \" \" + MAX_BUF_CWND_VAL);\n      fh.appendLine(\"#\" + END_FAM_MSG);\n      fh.close();\n      // source the tcp tune file so that the settings are visible\n      // immediately . $tune_file\n      // wrapper file to source system file\n      File wrap = new File(AMTuneUtil.TMP_DIR + \"wrapper\");\n      BufferedWriter br = new BufferedWriter(new FileWriter(wrap));\n      br.write(\"#!/bin/sh\\n\");\n      br.write(\". \" + tuneFile.trim());\n      br.close();\n      // Chmod for both the files.\n      StringBuffer rBuff = new StringBuffer();\n      AMTuneUtil.changeFilePerm(tuneFile, \"700\");\n      AMTuneUtil.changeFilePerm(wrap.getAbsolutePath(), \"700\");\n      int extVal = AMTuneUtil.executeCommand(\"/bin/sh \" + wrap.getAbsolutePath(), rBuff);\n      if (extVal == -1) {\n        mWriter.writeln(\"Error sourcing file please check \" + \"debug log file\");\n        pLogger.log(Level.SEVERE, \"tuneTCP\", \"Error sourcing tune file \" + tuneFile);\n      } else {\n        pLogger.log(Level.INFO, \"tuneTCP\", \"Sourcing tune file success.\");\n      }\n      wrap.delete();\n    } catch (Exception ex) {\n      throw new AMTuneException(ex.getMessage());\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1986, "initialization": ["File file = getFile()"], "initializationStart": [149], "initializationEnd": [158], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getParentFile()"], "configurationStart": [166], "configurationEnd": [186], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 203, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [286], "useEnd": [312], "hasFinally": 1, "cleanUpCall": ["closeQuietly(InputStream)", "closeQuietly(OutputStream)"], "finallyExpressionStart": 497, "finallyExpressionEnd": 505, "finallyBlockStart": 497, "finallyBlockEnd": 577, "cleanUpCallStart": [513, 545], "cleanUpCallEnd": [537, 570], "url": "https://github.com/Overu/bcloudlet/tree/master/web/core/src/main/java/org/cloudlet/web/core/server/Media.java", "rawCode": "  public void read(InputStream inputStream) throws IOException {\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n      File file = getFile();\n      file.getParentFile().mkdirs();\n      file.createNewFile();\n      in = new BufferedInputStream(inputStream);\n      out = new FileOutputStream(file);\n      byte[] buffer = new byte[1024];\n      for (int bytesRead = in.read(buffer); bytesRead > 0; bytesRead = in.read(buffer)) {\n        out.write(buffer, 0, bytesRead);\n      }\n    } finally {\n      IOUtils.closeQuietly(in);\n      IOUtils.closeQuietly(out);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1987, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 64, "focalAPIEnd": 90, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epronk/fitnesse/tree/master/src/fitnesse/updates/ReplacingFileUpdateTest.java", "rawCode": "  public void setUp() throws Exception {\n    super.setUp();\n    sourceFile.createNewFile();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1988, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "logError(*)"], "tryExpressionStart": 70, "tryExpressionEnd": 74, "tryBlockStart": 70, "tryBlockEnd": 225, "catchExpressionStart": 160, "catchExpressionEnd": 182, "catchBlockStart": 160, "catchBlockEnd": 225, "exceptionHandlingCallStart": [201, 192], "exceptionHandlingCallEnd": [215, 216], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 124, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cnaude/PurpleIRC/tree/master/src/main/java/com/cnaude/purpleirc/PurpleIRC.java", "rawCode": "  private void createConfig() {\n    if (!configFile.exists()) {\n      try {\n        logInfo(\"Creating config.yml\");\n        configFile.createNewFile();\n      } catch (IOException e) {\n        logError(e.getMessage());\n      }\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1989, "initialization": ["File file = new File(*,String)"], "initializationStart": [196], "initializationEnd": [271], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 277, "tryExpressionEnd": 281, "tryBlockStart": 277, "tryBlockEnd": 393, "catchExpressionStart": 337, "catchExpressionEnd": 359, "catchBlockStart": 337, "catchBlockEnd": 393, "exceptionHandlingCallStart": [367], "exceptionHandlingCallEnd": [386], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 309, "focalAPIEnd": 329, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["open(file,*)"], "useStart": [436], "useEnd": [505], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/poko/IH/tree/master/android/src/net/ecoarttech/ihplus/util/PhotoProvider.java", "rawCode": "  @Override\n  public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n    Log.d(TAG, \"open file:\" + uri);\n    String path = uri.getEncodedPath();\n    File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), path);\n    try {\n      if (!file.exists()) file.createNewFile();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    ParcelFileDescriptor parcel =\n        ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_WRITE);\n    Log.d(TAG, \"Parcel: \" + parcel);\n    return parcel;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1990, "initialization": ["File file = new File(File,String)"], "initializationStart": [835], "initializationEnd": [871], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 781, "tryExpressionEnd": 785, "tryBlockStart": 781, "tryBlockEnd": 3072, "catchExpressionStart": 3006, "catchExpressionEnd": 3028, "catchBlockStart": 3006, "catchBlockEnd": 3072, "exceptionHandlingCallStart": [3042], "exceptionHandlingCallEnd": [3065], "configuration": ["file.delete()"], "configurationStart": [879], "configurationEnd": [892], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 900, "focalAPIEnd": 920, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileWriter(file)"], "useStart": [948], "useEnd": [968], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/geoserver-2.1.x/tree/master/extension/app-schema/app-schema-test/src/test/java/org/geoserver/test/AbstractAppSchemaMockData.java", "rawCode": "  /**\n   * Write an info.xml file describing a feature type to the feature type directory.\n   *\n   * <p>Stolen from {@link MockData}.\n   *\n   * @param namespacePrefix namespace prefix of the WFS feature type\n   * @param typeName namespace prefix of the WFS feature type\n   * @param featureTypeDir feature type directory\n   * @param dataStoreName data store directory name\n   */\n  private static void writeInfoFile(\n      String namespacePrefix, String typeName, File featureTypeDir, String dataStoreName) {\n    // prepare extra params default\n    Map<String, Object> params = new HashMap<String, Object>();\n    params.put(KEY_STYLE, \"Default\");\n    params.put(KEY_SRS_HANDLINGS, 2);\n    params.put(KEY_ALIAS, null);\n    Integer srs = 4326;\n    params.put(KEY_SRS_NUMBER, srs);\n    try {\n      featureTypeDir.mkdir();\n      File info = new File(featureTypeDir, \"info.xml\");\n      info.delete();\n      info.createNewFile();\n      FileWriter writer = new FileWriter(info);\n      writer.write(\"<featureType datastore=\\\"\" + dataStoreName + \"\\\">\");\n      writer.write(\"<name>\" + typeName + \"</name>\");\n      if (params.get(KEY_ALIAS) != null)\n        writer.write(\"<alias>\" + params.get(KEY_ALIAS) + \"</alias>\");\n      writer.write(\"<SRS>\" + params.get(KEY_SRS_NUMBER) + \"</SRS>\");\n      // this mock type may have wrong SRS compared to the actual one in the property files...\n      // let's configure SRS handling not to alter the original one, and have 4326 used only\n      // for capabilities\n      writer.write(\"<SRSHandling>\" + params.get(KEY_SRS_HANDLINGS) + \"</SRSHandling>\");\n      writer.write(\"<title>\" + typeName + \"</title>\");\n      writer.write(\"<abstract>abstract about \" + typeName + \"</abstract>\");\n      writer.write(\"<numDecimals value=\\\"8\\\"/>\");\n      writer.write(\"<keywords>\" + typeName + \"</keywords>\");\n      Envelope llEnvelope = (Envelope) params.get(KEY_LL_ENVELOPE);\n      if (llEnvelope == null) llEnvelope = DEFAULT_ENVELOPE;\n      writer.write(\n          \"<latLonBoundingBox dynamic=\\\"false\\\" minx=\\\"\"\n              + llEnvelope.getMinX()\n              + \"\\\" miny=\\\"\"\n              + llEnvelope.getMinY()\n              + \"\\\" maxx=\\\"\"\n              + llEnvelope.getMaxX()\n              + \"\\\" maxy=\\\"\"\n              + llEnvelope.getMaxY()\n              + \"\\\"/>\");\n      Envelope nativeEnvelope = (Envelope) params.get(KEY_NATIVE_ENVELOPE);\n      if (nativeEnvelope != null)\n        writer.write(\n            \"<nativeBBox dynamic=\\\"false\\\" minx=\\\"\"\n                + nativeEnvelope.getMinX()\n                + \"\\\" miny=\\\"\"\n                + nativeEnvelope.getMinY()\n                + \"\\\" maxx=\\\"\"\n                + nativeEnvelope.getMaxX()\n                + \"\\\" maxy=\\\"\"\n                + nativeEnvelope.getMaxY()\n                + \"\\\"/>\");\n      String style = (String) params.get(KEY_STYLE);\n      if (style == null) style = \"Default\";\n      writer.write(\"<styles default=\\\"\" + style + \"\\\"/>\");\n      writer.write(\"</featureType>\");\n      writer.flush();\n      writer.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1991, "initialization": ["File file = new File(File,String)"], "initializationStart": [137], "initializationEnd": [169], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "new SchemaGeneratorException(*,*)"], "tryExpressionStart": 109, "tryExpressionEnd": 113, "tryBlockStart": 109, "tryBlockEnd": 866, "catchExpressionStart": 778, "catchExpressionEnd": 798, "catchBlockStart": 778, "catchBlockEnd": 866, "exceptionHandlingCallStart": [841, 812], "exceptionHandlingCallEnd": [855, 859], "configuration": ["file.delete()"], "configurationStart": [210], "configurationEnd": [227], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 243, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerNamespaceForCatalog(String,file)", "new PrintStream(file)"], "useStart": [340, 414], "useEnd": [387, 439], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/crux/5.2.1/crux-dev/src/main/java/org/cruxframework/crux/tools/schema/DefaultSchemaGenerator.java", "rawCode": "  /**\n   * @param libraries\n   * @param templateLibraries\n   */\n  private void generateOfflineSchema() {\n    try {\n      File coreFile = new File(destDir, \"offline.xsd\");\n      if (coreFile.exists()) {\n        coreFile.delete();\n      }\n      coreFile.createNewFile();\n\n      String targetNS = \"http://www.cruxframework.org/offline\";\n      registerNamespaceForCatalog(targetNS, coreFile);\n\n      PrintStream out = new PrintStream(coreFile);\n      out.println(\"<xs:schema \");\n      out.println(\"xmlns=\\\"http://www.cruxframework.org/offline\\\" \");\n      out.println(\"xmlns:xs=\\\"http://www.w3.org/2001/XMLSchema\\\" \");\n      out.println(\"targetNamespace=\\\"\" + targetNS + \"\\\" >\");\n\n      generateOfflineScreenElement(out);\n\n      out.println(\"</xs:schema>\");\n      out.close();\n    } catch (Exception e) {\n      throw new SchemaGeneratorException(e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1992, "initialization": ["File file = new File(String)"], "initializationStart": [219], "initializationEnd": [254], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 306, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileOutputStream(file)"], "useStart": [386], "useEnd": [426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/virgo.ide/tree/master/org.eclipse.virgo.ide.runtime.core/src/org/eclipse/virgo/ide/runtime/core/artefacts/ArtefactRepositoryManager.java", "rawCode": "    private void createArtefactDescriptorFromCurrentZipEntry(\n        ZipInputStream zipInputStream, String newArtefactDescriptorPath)\n        throws IOException, FileNotFoundException {\n      File artefactDescriptor = new File(newArtefactDescriptorPath);\n      if (!artefactDescriptor.exists()) {\n        artefactDescriptor.createNewFile();\n        FileOutputStream fileOutputStream = new FileOutputStream(artefactDescriptor);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = zipInputStream.read(buf)) > 0) {\n          fileOutputStream.write(buf, 0, len);\n        }\n        fileOutputStream.close();\n      }\n    }\n"}, {"dataset": "createNewFile", "exampleID": 1993, "initialization": ["File file = new File(String)"], "initializationStart": [215], "initializationEnd": [233], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 239, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printClassicHeadTex(file)", "printClassicHeadTable(file,*)", "printClassicLine(file,*,TableOutput,*)", "printClassicEndTable(file,*)", "printClassicEndTex(file)"], "useStart": [265, 472, 680, 745, 790], "useEnd": [290, 506, 729, 778, 814], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lamatko/JAmde/tree/master/src/main/java/jamde/table/ClassicTable.java", "rawCode": "  /**\n   * Encapsulates all the printing procedures for the \"Classic\" table.\n   *\n   * @param fileName\n   * @throws IOException\n   */\n  public void printClassic(String fileName) throws IOException {\n    File file = new File(fileName);\n    file.createNewFile();\n    printClassicHeadTex(file);\n    ArrayList<TableInput> tableInputs = table.getTableInputs();\n    ArrayList<TableOutput> tableOutputs = table.getTableOutputs();\n    for (TableInput input : tableInputs) {\n      printClassicHeadTable(file, input);\n      int index = tableInputs.indexOf(input);\n      TableOutput output = tableOutputs.get(index);\n      for (EstimatorBuilder estBuilder : input.getEstimators()) {\n        printClassicLine(file, input, output, estBuilder);\n      }\n      printClassicEndTable(file, input);\n    }\n    printClassicEndTex(file);\n  } // END printClassic(String fileName)\n"}, {"dataset": "createNewFile", "exampleID": 1994, "initialization": ["File file = new File(*,*)"], "initializationStart": [405], "initializationEnd": [468], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 520, "focalAPIEnd": 558, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeFile(file,*)", "file.delete()"], "useStart": [620, 716], "useEnd": [695, 747], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kion/Bias/tree/master/src/bias/core/BackEnd.java", "rawCode": "  private void storeUninstallConfiguration() throws Exception {\n    StringBuffer removeList = new StringBuffer();\n    Iterator<String> it = uninstallAddOnsList.iterator();\n    while (it.hasNext()) {\n      String cpEntry = it.next();\n      removeList.append(cpEntry);\n      if (it.hasNext()) {\n        removeList.append(Constants.PROPERTY_VALUES_SEPARATOR);\n      }\n    }\n    File removeAddOnsConfigFile = new File(Constants.CONFIG_DIR, Constants.UNINSTALL_CONFIG_FILE);\n    if (!removeAddOnsConfigFile.exists()) {\n      removeAddOnsConfigFile.createNewFile();\n    }\n    if (!Validator.isNullOrBlank(removeList)) {\n      FSUtils.writeFile(removeAddOnsConfigFile, removeList.toString().getBytes());\n    } else {\n      removeAddOnsConfigFile.delete();\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1995, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["file.getAbsolutePath()"], "configurationStart": [188], "configurationEnd": [210], "guardCondition": "!(file.exists())", "guardType": "IF {", "guardExpressionStart": 65, "guardExpressionEnd": 83, "guardBlockStart": 65, "guardBlockEnd": 219, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 224, "focalAPIEnd": 244, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["file.setReadable(boolean,boolean)", "file.setWritable(boolean,boolean)", "file.setReadable(boolean,boolean)"], "useStart": [250, 286, 320], "useEnd": [280, 314, 348], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbosstools/jbosstools-deltacloud/tree/master/plugins/org.jboss.tools.deltacloud.ui/src/org/jboss/tools/internal/deltacloud/ui/wizards/PemFileManager.java", "rawCode": "  private static File create(File file) throws IOException {\n    if (file.exists()) {\n      throw new IllegalStateException(\n          MessageFormat.format(\"File \\\"{0}\\\" already exists.\", file.getAbsolutePath()));\n    }\n    file.createNewFile();\n    file.setReadable(false, false);\n    file.setWritable(true, true);\n    file.setReadable(true, true);\n    return file;\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1996, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getLogger()", "getName()", "log(*,String)"], "tryExpressionStart": 30, "tryExpressionEnd": 34, "tryBlockStart": 30, "tryBlockEnd": 303, "catchExpressionStart": 185, "catchExpressionEnd": 208, "catchBlockStart": 185, "catchBlockEnd": 303, "exceptionHandlingCallStart": [216, 281, 216], "exceptionHandlingCallEnd": [234, 295, 296], "configuration": ["file.getParentFile()"], "configurationStart": [120], "configurationEnd": [140], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 157, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CitizensDev/CitizensAPI/tree/master/src/main/java/net/citizensnpcs/api/util/YamlStorage.java", "rawCode": "  private void create() {\n    try {\n      Bukkit.getLogger().log(Level.INFO, \"Creating file: \" + file.getName());\n      file.getParentFile().mkdirs();\n      file.createNewFile();\n    } catch (IOException ex) {\n      Bukkit.getLogger().log(Level.SEVERE, \"Could not create file: \" + file.getName());\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1997, "initialization": ["File file = new File(*)"], "initializationStart": [595], "initializationEnd": [680], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 804, "focalAPIEnd": 836, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileInputStream(file)", "new FileOutputStream(file)"], "useStart": [976, 1302], "useEnd": [1013, 1340], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/branches/4.2/src/lib/com/izforge/izpack/installer/UnpackerBase.java", "rawCode": "  /**\n   * Writes information about the installed packs and the variables at installation time.\n   *\n   * @throws IOException\n   * @throws ClassNotFoundException\n   */\n  public void writeInstallationInformation() throws IOException, ClassNotFoundException {\n    if (!idata.info.isWriteInstallationInformation()) {\n      Debug.trace(\"skip writing installation information\");\n      return;\n    }\n    Debug.trace(\"writing installation information\");\n    String installdir = idata.getInstallPath();\n\n    List installedpacks = new ArrayList(idata.selectedPacks);\n\n    File installationinfo =\n        new File(installdir + File.separator + AutomatedInstallData.INSTALLATION_INFORMATION);\n    if (!installationinfo.exists()) {\n      Debug.trace(\"creating info file\" + installationinfo.getAbsolutePath());\n      installationinfo.createNewFile();\n    } else {\n      Debug.trace(\"installation information found\");\n      // read in old information and update\n      FileInputStream fin = new FileInputStream(installationinfo);\n      ObjectInputStream oin = new ObjectInputStream(fin);\n\n      List packs = (List) oin.readObject();\n      for (Object pack1 : packs) {\n        Pack pack = (Pack) pack1;\n        installedpacks.add(pack);\n      }\n      oin.close();\n      fin.close();\n    }\n\n    FileOutputStream fout = new FileOutputStream(installationinfo);\n    ObjectOutputStream oout = new ObjectOutputStream(fout);\n    oout.writeObject(installedpacks);\n    /*\n    int selectedpackscount = idata.selectedPacks.size();\n    for (int i = 0; i < selectedpackscount; i++)\n    {\n    Pack pack = (Pack) idata.selectedPacks.get(i);\n    oout.writeObject(pack);\n    }\n    */\n    oout.writeObject(idata.variables);\n    Debug.trace(\"done.\");\n    oout.close();\n    fout.close();\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1998, "initialization": ["File file = new File(*)"], "initializationStart": [501], "initializationEnd": [558], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 575, "focalAPIEnd": 598, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(var)"], "useStart": [564], "useEnd": [599], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/goodow/gwt/tree/master/user/test/com/google/gwt/user/tools/WebAppCreatorTest.java", "rawCode": "  /** Generate a .classpath containing a .jar in war/WEB-INF/lib. */\n  public void testCreatorOnlyEclipseWithJars() throws IOException, WebAppCreatorException {\n    runCreator(\"-out\", projectFolder, \"-XnoEclipse\", \"-junit\", mockJar, MY_PROJECT);\n\n    String libDir = \"war\" + File.separatorChar + \"WEB-INF\" + File.separatorChar + \"lib\";\n    assertTrue(new File(projectFolder + File.separatorChar + libDir).mkdirs());\n\n    String libJarName = libDir + File.separatorChar + \"foo.jar\";\n    File libFile = new File(projectFolder + File.separatorChar + libJarName);\n    assertTrue(libFile.createNewFile());\n\n    runCreator(\"-out\", projectFolder, \"-XonlyEclipse\", \"-junit\", mockJar, MY_PROJECT);\n\n    assertFileExists(\".classpath\");\n    File classpathFile = new File(projectFolder + File.separatorChar + \".classpath\");\n    String classpathContents = Util.readURLAsString(classpathFile.toURI().toURL());\n    String canonicalLibJarName = libJarName.replaceAll(Pattern.quote(File.separator), \"/\");\n    assertTrue(\n        \".classpath does not contain \"\n            + canonicalLibJarName\n            + \". .classpath contents:\"\n            + classpathContents,\n        classpathContents.contains(canonicalLibJarName));\n  }\n"}, {"dataset": "createNewFile", "exampleID": 1999, "initialization": ["File file = new File(String)"], "initializationStart": [61], "initializationEnd": [79], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 86, "tryExpressionEnd": 90, "tryBlockStart": 86, "tryBlockEnd": 468, "catchExpressionStart": 419, "catchExpressionEnd": 441, "catchBlockStart": 419, "catchBlockEnd": 468, "exceptionHandlingCallStart": [449], "exceptionHandlingCallEnd": [461], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 98, "focalAPIEnd": 118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new FileWriter(file)"], "useStart": [303], "useEnd": [323], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geworkbench-group/geworkbench-core/tree/master/src/org/geworkbench/util/pathwaydecoder/mutualinformation/EdgeListDataSet.java", "rawCode": "  public void writeToFile(String fileName) {\n    File file = new File(fileName);\n\n    try {\n      file.createNewFile();\n      if (!file.canWrite()) {\n        JOptionPane.showMessageDialog(null, \"Cannot write to specified file.\");\n        return;\n      }\n      BufferedWriter writer = new BufferedWriter(new FileWriter(file));\n      writer.write(this.data.print(\"# Saved from geWorkBench\"));\n      writer.close();\n    } catch (IOException e) {\n      log.error(e);\n    }\n  }\n"}, {"dataset": "createNewFile", "exampleID": 2000, "initialization": ["File file = makeLogFile(String)"], "initializationStart": [149], "initializationEnd": [205], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "var = file.createNewFile()", "focalAPIStart": 233, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(var)", "file.getName()", "move(file,File)", "file.exists()", "deleteIfExists(file)"], "useStart": [215, 351, 374, 416, 496], "useEnd": [252, 363, 387, 427, 514], "hasFinally": 1, "cleanUpCall": ["deleteIfExists(File)", "deleteIfExists(File)", "deleteIfExists(File)"], "finallyExpressionStart": 478, "finallyExpressionEnd": 486, "finallyBlockStart": 478, "finallyBlockEnd": 588, "cleanUpCallStart": [496, 524, 561], "cleanUpCallEnd": [514, 551, 579], "url": "https://github.com/nschlimm/playground/tree/master/projectLibrary/src/bb/io/FileUtil.java", "rawCode": "    @Test\n    public void test_move() throws Exception {\n      File f1 = null;\n      File dir = null;\n      File f2 = null;\n      try {\n        f1 = LogUtil.makeLogFile(\"test_move_shouldBeUnusedName1.txt\");\n        Assert.assertTrue(f1.createNewFile());\n        dir = DirUtil.ensureExists(LogUtil.makeLogFile(\"test_move\"));\n        f2 = new File(dir, f1.getName());\n        move(f1, dir);\n        Assert.assertFalse(f1.exists());\n        Assert.assertTrue(f2.exists());\n      } finally {\n        deleteIfExists(f1);\n        DirUtil.deleteIfExists(dir);\n        deleteIfExists(f2);\n      }\n    }\n"}]