[{"dataset": "jFrameAdd", "exampleID": 3201, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [48, 295], "initializationEnd": [60, 307], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setUndecorated(boolean)", "panel.setComponentPopupMenu(JPopupMenu)"], "configurationStart": [66, 127, 313], "configurationEnd": [121, 153, 347], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 353, "focalAPIEnd": 369, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)"], "useStart": [376], "useEnd": [399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/javax/swing/JPopupMenu/6694823/bug6694823.java", "rawCode": "  private static void createGui() {\n    frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    frame.setUndecorated(true);\n\n    popup = new JPopupMenu(\"Menu\");\n    for (int i = 0; i < 7; i++) {\n      popup.add(new JMenuItem(\"MenuItem\"));\n    }\n    JPanel panel = new JPanel();\n    panel.setComponentPopupMenu(popup);\n    frame.add(panel);\n\n    frame.setSize(200, 200);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3202, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 80, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)"], "useStart": [103, 161, 179, 218], "useEnd": [155, 173, 212, 240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drossglance/glance-server/tree/master/src/test/java/uk/frequency/glance/test/PositionTraceDebug.java", "rawCode": "  static void showOnFrame(JPanel canvas) {\n    JFrame frame = new JFrame();\n    frame.add(canvas);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3203, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [39, 172], "initializationEnd": [51, 184], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)", "panel.add(JButton)"], "configurationStart": [57, 82, 136, 1099], "configurationEnd": [76, 130, 154, 1108], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1114, "focalAPIEnd": 1122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/JavaProgrammingTutorials/MyActionListener.java", "rawCode": "  public void frame() {\n    JFrame f = new JFrame();\n    f.setSize(400, 400);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setVisible(true);\n\n    JPanel p = new JPanel();\n\n    JButton b1 = new JButton(\"Action Listener\");\n\n    // Kanoume register to component mas se ena ActionListener to opoio\n    // ftiaxnoume sto ftero..(xoris alli klasi..) gia logous taxititas\n    // kai mias pou den tha to xanaxrisimopoiisoume...ayton ton ActionListener\n    // Apo tin stigmi pou to component b1 ginei registered ston ActionListener\n    // O actionListener akouei gia opoiodipote event sxetizete me ayto to component\n    b1.addActionListener(\n        new ActionListener() {\n\n          // Molis kapoio event simbei sto b1 component i parakato methodos tha ektelesti\n          // i actionPerformed me parametro to event to opoio sinebei sto component mas..\n          public void actionPerformed(ActionEvent e) {\n            // Tha emfanisoume ena minima me tin boitheia tou JOptionPane\n            JOptionPane.showMessageDialog(null, \"Action Listener is working!!\");\n          }\n        });\n\n    p.add(b1);\n    f.add(p);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3204, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [90], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [112], "configurationEnd": [164], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 170, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setAlwaysOnTop(boolean)", "jFrame.pack()"], "useStart": [192, 224], "useEnd": [218, 236], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bcdev/beam/tree/master/beam-visat-rcp/src/test/java/org/esa/beam/visat/toolviews/mask/MaskApplicationTest.java", "rawCode": "  private static JFrame createFrame(String name, JPanel panel) {\n    final JFrame frame = new JFrame(name);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(panel);\n    frame.setAlwaysOnTop(true);\n    frame.pack();\n    return frame;\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3205, "initialization": ["JPanel panel = new JPanel()"], "initializationStart": [194], "initializationEnd": [206], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setBorder(*)"], "configurationStart": [214], "configurationEnd": [235], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 302, "focalAPIEnd": 323, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)", "jFrame.dispose()", "updateComponentTreeUI(jFrame)", "jFrame.pack()", "jFrame.setLocationRelativeTo(Component)"], "useStart": [331, 399, 483, 772, 828, 853], "useEnd": [391, 426, 503, 820, 845, 891], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/javax/swing/border/Test6981576.java", "rawCode": "  public void run() {\n    if (this.infos == null) {\n      this.infos = UIManager.getInstalledLookAndFeels();\n      Thread.currentThread().setUncaughtExceptionHandler(this);\n      JPanel panel = new JPanel();\n      panel.setBorder(this);\n      this.frame = new JFrame(getClass().getSimpleName());\n      this.frame.add(panel);\n      this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      this.frame.setVisible(true);\n    }\n    if (this.index == this.infos.length) {\n      this.frame.dispose();\n    } else {\n      LookAndFeelInfo info = this.infos[this.index % this.infos.length];\n      try {\n        UIManager.setLookAndFeel(info.getClassName());\n      } catch (Exception exception) {\n        System.err.println(\"could not change look and feel\");\n      }\n      SwingUtilities.updateComponentTreeUI(this.frame);\n      this.frame.pack();\n      this.frame.setLocationRelativeTo(null);\n      this.index++;\n      SwingUtilities.invokeLater(this);\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3206, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel(*)"], "initializationStart": [68, 106], "initializationEnd": [80, 136], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 142, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DockFrontend(jFrame)", "new ScreenDockStation(jFrame)", "jFrame.add(JPanel,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [194, 581, 1211, 1405, 1460, 1515, 1572, 3141, 3180, 3238], "useEnd": [217, 609, 1249, 1454, 1509, 1566, 1623, 3174, 3232, 3260], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Benoker/DockingFrames/tree/master/docking-frames-ext-toolbar/testing/bibliothek/gui/dock/toolbar/TestCloseButton.java", "rawCode": "  public static void main(String[] args) {\n    final JFrame frame = new JFrame();\n    final JPanel pane = new JPanel(new BorderLayout());\n    frame.add(pane);\n\n    final DockFrontend frontend = new DockFrontend(frame);\n\n    // controller.setTheme( new EclipseTheme() );\n\n    frontend\n        .getController()\n        .getProperties()\n        .set(DockTheme.SPAN_FACTORY, new BasicSpanFactory(500, 250));\n    // controller.getProperties().set( DockTheme.SPAN_FACTORY, new NoSpanFactory() );\n\n    // controller.setRestrictedEnvironment( true );\n\n    final ScreenDockStation screen = new ScreenDockStation(frame);\n    frontend.addRoot(\"screen\", screen);\n\n    final ToolbarContainerDockStation west =\n        new ToolbarContainerDockStation(Orientation.VERTICAL, 5);\n    final ToolbarContainerDockStation east =\n        new ToolbarContainerDockStation(Orientation.VERTICAL, 5);\n    final ToolbarContainerDockStation north =\n        new ToolbarContainerDockStation(Orientation.HORIZONTAL, 5);\n    final ToolbarContainerDockStation south =\n        new ToolbarContainerDockStation(Orientation.HORIZONTAL, 5);\n\n    JPanel center = new JPanel();\n    center.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));\n    frame.add(center, BorderLayout.CENTER);\n\n    frontend.addRoot(\"west\", west);\n    frontend.addRoot(\"east\", east);\n    frontend.addRoot(\"north\", north);\n    frontend.addRoot(\"south\", south);\n\n    frame.add(west.getComponent(), BorderLayout.WEST);\n    frame.add(east.getComponent(), BorderLayout.EAST);\n    frame.add(north.getComponent(), BorderLayout.NORTH);\n    frame.add(south.getComponent(), BorderLayout.SOUTH);\n\n    final ToolbarGroupDockStation group = new ToolbarGroupDockStation();\n\n    Icon icon =\n        new Icon() {\n          @Override\n          public void paintIcon(Component c, Graphics g, int x, int y) {\n            g.setColor(Color.RED);\n            g.fillOval(x, y, 40, 40);\n          }\n\n          @Override\n          public int getIconWidth() {\n            return 40;\n          }\n\n          @Override\n          public int getIconHeight() {\n            return 40;\n          }\n        };\n\n    group.drop(createToolbar(true, frontend, icon, icon, icon), 0, 0);\n    group.drop(createToolbar(true, frontend, icon, icon, icon), 0, 1);\n    group.drop(createToolbar(false, frontend, icon, icon), 1, 0);\n    group.drop(createToolbar(true, frontend, icon, icon), 1, 1);\n\n    group.drop(createToolbar(false, frontend, icon, icon), new ToolbarGroupProperty(1, 0, null));\n    group.drop(\n        createToolbar(false, frontend, icon, icon, icon), new ToolbarGroupProperty(3, 2, null));\n    group.drop(\n        createToolbar(true, frontend, icon, icon, icon), new ToolbarGroupProperty(-1, 5, null));\n\n    // Disable the expand state action button\n    // controller.getProperties().set( ExpandableToolbarItemStrategy.STRATEGY, new\n    // DefaultExpandableToolbarItemStrategy(){\n    // @Override\n    // public boolean isEnabled( Dockable item, ExpandedState state ){\n    // return false;\n    // }\n    // } );\n    // group.move( group.getDockable( 0 ), new ToolbarGroupProperty( 2, 1,\n    // null ) );\n\n    west.drop(group);\n\n    frame.setBounds(20, 20, 400, 400);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n    screen.setShowing(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3207, "initialization": ["JFrame jFrame = new GameFrame(*)", "JPanel panel = new JPanel(*)"], "initializationStart": [187, 1202], "initializationEnd": [234, 1232], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setPreferredSize(Dimension)", "panel.add(JPanel,GridBagConstraints)", "panel.add(TownNotificationPanel,*)"], "configurationStart": [1238, 1321, 1380], "configurationEnd": [1315, 1374, 1438], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1444, "focalAPIEnd": 1477, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)"], "useStart": [1484, 1507, 1551], "useEnd": [1501, 1545, 1578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Int-Elegance/M.U.L.E.-2340/tree/master/MainProject/src/TownView.java", "rawCode": "  /**\n   * Displays the store view for the game\n   *\n   * @return true if the store can be displayed\n   */\n  private boolean storeview() {\n\n    frame.setVisible(false);\n\n    storeframe = new GameFrame(currentTurn.getRound().getGame());\n\n    ImageIcon storeIcon = new ImageIcon(getClass().getResource(\"resources/storeview.jpg\"));\n    JLabel storeImage = new JLabel(storeIcon);\n    int storeWidth = storeIcon.getIconWidth();\n    int storeHeight = storeIcon.getIconHeight();\n\n    JLayeredPane layeredPane = new JLayeredPane();\n    layeredPane.setOpaque(false);\n    layeredPane.setPreferredSize(new Dimension(storeWidth, storeHeight));\n\n    // sets bounds on images so they can be drawn\n    storeImage.setBounds(0, 0, storeWidth, storeHeight);\n    tempPlayerX = 260;\n    tempPlayerY = 40;\n    playerImage.setBounds(playerX, playerY, playerX + playerWidth, playerY + playerHeight);\n\n    // adds images to the layeredPane\n    layeredPane.add(storeImage, JLayeredPane.DEFAULT_LAYER);\n    layeredPane.add(playerImage, JLayeredPane.POPUP_LAYER);\n\n    // creates a new JPanel, and adds the layered pane to it\n    JPanel storepanel = new JPanel();\n    storepanel.add(layeredPane);\n\n    JPanel storeWrapperPanel = new JPanel(new BorderLayout());\n    storeWrapperPanel.setPreferredSize(new Dimension(townWidth, townHeight + 30));\n    storeWrapperPanel.add(storepanel, BorderLayout.SOUTH);\n    storeWrapperPanel.add(townNotifyPanel, BorderLayout.NORTH);\n    storeframe.add(storeWrapperPanel);\n\n    storeframe.pack();\n    storeframe.setLocationRelativeTo(null);\n    storeframe.setVisible(true);\n\n    storeAnimate();\n\n    return true;\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3208, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.removeAll()"], "configurationStart": [90], "configurationEnd": [107], "guardCondition": "jFrame.getContentPane()!=panel", "guardType": "IF {", "guardExpressionStart": 138, "guardExpressionEnd": 174, "guardBlockStart": 138, "guardBlockEnd": 241, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 183, "focalAPIEnd": 199, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setContentPane(JPanel)"], "useStart": [207], "useEnd": [234], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/software-engineering-amsterdam/sea-of-ql/tree/master/malka/src/org/uva/sea/ql/rendering/FormRenderer.java", "rawCode": "  public void render(JFrame frame) throws VisitingException {\n    this.frame = frame;\n    panel.removeAll();\n\n    form.accept(this);\n\n    if (frame.getContentPane() != panel) {\n      frame.add(panel);\n      frame.setContentPane(panel);\n    }\n\n    panel.validate();\n    panel.repaint();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3209, "initialization": ["JFrame jFrame = new GameFrame(*)", "JPanel panel = new JPanel(*)"], "initializationStart": [149, 1190], "initializationEnd": [196, 1220], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(Dimension)", "panel.setPreferredSize(Dimension)", "panel.add(JPanel,GridBagConstraints)", "panel.add(TownNotificationPanel,*)"], "configurationStart": [1062, 1226, 1304, 1353], "configurationEnd": [1118, 1298, 1347, 1406], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1412, "focalAPIEnd": 1435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)"], "useStart": [1441, 1459, 1498], "useEnd": [1453, 1492, 1520], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Int-Elegance/M.U.L.E.-2340/tree/master/MainProject/src/TownView.java", "rawCode": "  /**\n   * displays initial town with player in the center of the board\n   *\n   * @param frame\n   */\n  public void displayTownSquare() {\n    frame = new GameFrame(currentTurn.getRound().getGame());\n\n    townNotifyPanel.setPreferredSize(new Dimension(townWidth, 30));\n    // creates layeredPane\n    JLayeredPane layeredPane = new JLayeredPane();\n    layeredPane.setOpaque(false);\n    layeredPane.setPreferredSize(new Dimension(townWidth, townHeight));\n\n    // sets bounds on images so they can be drawn\n    townImage.setBounds(0, 0, townWidth, townHeight);\n    playerImage.setBounds(playerX, playerY, playerX + playerWidth, playerY + playerHeight);\n\n    // adds images to the layeredPane\n    layeredPane.add(townImage, JLayeredPane.DEFAULT_LAYER);\n    layeredPane.add(playerImage, JLayeredPane.POPUP_LAYER);\n\n    // creates a new JPanel, and adds the layered pane to it\n    panel = new JPanel();\n    panel.add(layeredPane);\n\n    // adds the pane to the frame, the JFrame has a grid layout but changing the layout does not\n    // seem to help the size problem\n    frame.setSize(new Dimension(townWidth, townHeight + 30));\n    panel.setLayout(new GridLayout(1, 1));\n\n    JPanel wrapperPanel = new JPanel(new BorderLayout());\n    wrapperPanel.setPreferredSize(new Dimension(townWidth, townHeight + 30));\n    wrapperPanel.add(panel, BorderLayout.SOUTH);\n    wrapperPanel.add(townNotifyPanel, BorderLayout.NORTH);\n    frame.add(wrapperPanel);\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n    animate();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3210, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [72, 349], "initializationEnd": [84, 361], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setVisible(boolean)", "panel.setLayout(GridBagLayout)", "panel.add(GameGrid,*)", "panel.add(JPanel,GridBagConstraints)"], "configurationStart": [253, 285, 839, 885], "configurationEnd": [279, 324, 879, 928], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 935, "focalAPIEnd": 955, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setTitle(String)", "jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)", "jFrame.repaint()"], "useStart": [961, 1036, 1084, 1181, 1220, 1248], "useEnd": [1013, 1064, 1107, 1214, 1242, 1263], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dungeonCrawlerInc/epicCrawl/tree/master/src/epicCrawl/GameGrid.java", "rawCode": "  public static void main(java.lang.String[] args) {\n    JFrame frame = new JFrame();\n\n    final GameGrid grid = new GameGrid();\n    grid.setCharacterName(\"Hero\");\n    grid.setVisible(true);\n    grid.repaint();\n\n    JPanel mainPanel = new JPanel();\n    mainPanel.setVisible(true);\n    mainPanel.setLayout(new BorderLayout());\n\n    JPanel devPanel = new JPanel();\n    devPanel.setVisible(true);\n    devPanel.setLayout(new FlowLayout());\n\n    JButton viewModeButton = new JButton(\"Toggle View Mode\");\n\n    viewModeButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent ae) {\n            if (grid.getViewMode()) grid.setViewMode(false);\n            else grid.setViewMode(true);\n            grid.repaint();\n          }\n        });\n\n    devPanel.add(viewModeButton);\n\n    mainPanel.add(grid, BorderLayout.CENTER);\n    mainPanel.add(devPanel, BorderLayout.NORTH);\n\n    frame.add(mainPanel);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Close on exit\n    frame.setTitle(\"Epic Crawl\"); // Game title\n    frame.setSize(700, 700); // Size of play window on start, later support changing screen size\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n    frame.repaint();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3211, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.remove(JPanel)"], "configurationStart": [125], "configurationEnd": [149], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 207, "focalAPIEnd": 228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [238, 350, 428, 459], "useEnd": [259, 374, 449, 480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nerzhul/FSCom_JavaTut/tree/master/FSComClient/src/windows/forms/form_master.java", "rawCode": "  public void BuildPanel(int i) {\n    switch (i) {\n      case 1:\n        Menubar_Connect();\n        if (pan_contact != null) fram.remove(pan_contact);\n\n        pan_connect = new panel_connect(this);\n        fram.add(pan_connect);\n        fram.setVisible(true);\n        break;\n      case 2:\n        Menubar_contact();\n        if (pan_connect != null) fram.remove(pan_connect);\n\n        pan_contact = new panel_contact();\n        fram.add(pan_contact);\n        fram.setVisible(true);\n        break;\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3212, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addKeyListener(ShortcutManager)"], "configurationStart": [63], "configurationEnd": [90], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 96, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heuristicus/team-java/tree/master/tags/v0.1/tests/BoxFrame.java", "rawCode": "  private void addFrameBits() {\n    mPanel = new JPanel();\n    mFrame.addKeyListener(this);\n    mFrame.add(this);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3213, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [48, 82], "initializationEnd": [60, 94], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 100, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [444, 462], "useEnd": [456, 484], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codjo/codjo-release-test/tree/master/src/test/java/net/codjo/test/release/task/gui/AssertValueStepTest.java", "rawCode": "  private void showFrame() {\n    JFrame frame = new JFrame();\n\n    JPanel panel = new JPanel();\n    frame.add(panel);\n\n    addTextField1(panel);\n    addTextField2(panel);\n    addTextArea(panel);\n    addLabel(panel);\n    addComboBox(panel);\n    addJButton(panel);\n    addCheckBox(panel);\n    addRadioButton(panel);\n    addParasite(panel);\n    addTabbedPane(panel);\n    addSpinner(panel);\n    addSlider(panel);\n    addHtmlEditorPane(panel);\n\n    frame.pack();\n    frame.setVisible(true);\n    flushAWT();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3214, "initialization": ["JFrame jFrame = new RoundedPanel(*,int)"], "initializationStart": [97], "initializationEnd": [137], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 207, "focalAPIEnd": 216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JFrame.add(jFrame)"], "useStart": [222], "useEnd": [234], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alessandro-aglietti/itis-leonardo-da-vinci/tree/master/swingset3/src/com/sun/swingset3/utilities/RoundedPanel.java", "rawCode": "  public static void main(String args[]) {\n    JFrame frame = new JFrame();\n    RoundedPanel p = new RoundedPanel(new BorderLayout(), 16);\n    JPanel p2 = new JPanel();\n    p2.setBackground(Color.blue);\n    p.add(p2);\n    frame.add(p);\n    frame.setSize(200, 200);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3215, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [39, 172], "initializationEnd": [51, 184], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)", "panel.add(JComboBox)", "panel.add(JButton)", "panel.add(JLabel)"], "configurationStart": [57, 82, 136, 191, 205, 219], "configurationEnd": [76, 130, 154, 199, 213, 227], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 234, "focalAPIEnd": 242, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/JavaProgrammingTutorials/MyComboBox.java", "rawCode": "  public void frame() {\n    JFrame f = new JFrame();\n    f.setSize(400, 400);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setVisible(true);\n\n    JPanel p = new JPanel();\n\n    p.add(c);\n    p.add(b);\n    p.add(l);\n\n    f.add(p);\n\n    // Edo kanoume register to component ston listener pou ftaixnoume sto ftero..\n    b.addActionListener(\n        new ActionListener() {\n\n          public void actionPerformed(ActionEvent ev) {\n            String s = c.getSelectedItem().toString();\n            l.setText(s);\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3216, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [38, 77], "initializationEnd": [63, 89], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 158, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JSpinner,*)", "jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [180, 455, 484, 542], "useEnd": [217, 478, 536, 564], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RoelSchevenels/Quiz-project/tree/master/Quiz/src/tetris/JuryClient.java", "rawCode": "  public void makeGUI() {\n    frame = new JFrame(\"Jury client\");\n    panel = new JPanel();\n    pieces = new JSpinner(new SpinnerNumberModel(1, 1, 5, 1));\n    frame.add(panel);\n    frame.add(pieces, BorderLayout.NORTH);\n\n    JButton one = new JButton(\"player1\");\n    JButton two = new JButton(\"player2\");\n    ActionHandler ah = new ActionHandler();\n    one.addActionListener(ah);\n    two.addActionListener(ah);\n    panel.add(one);\n    panel.add(two);\n\n    frame.setSize(300, 200);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3217, "initialization": ["JPanel panel = new JPanel(*)", "JFrame jFrame = new JFrame(String)"], "initializationStart": [90, 170], "initializationEnd": [143, 191], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(Dimension)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setResizable(boolean)"], "configurationStart": [197, 253, 304], "configurationEnd": [247, 298, 341], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 347, "focalAPIEnd": 387, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "showInputDialog(jFrame,String,String,*,*,*,String)", "jFrame.setVisible(boolean)"], "useStart": [393, 563, 1792], "useEnd": [463, 848, 1826], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andrestaht/FutureTech/tree/master/task1/src/ee/ut/math/tvt/salessystem/ui/tabs/PurchaseTab.java", "rawCode": "  private void popConfirmationBox() {\n    showConfirmationBox();\n\n    confirmationPanel = new JPanel(new MigLayout(\"nogrid\", \"\", \"fill, grow\"));\n\n    confirmationFrame = new JFrame(\"Confirm\");\n    confirmationFrame.setSize(new Dimension(320, 140));\n    confirmationFrame.setLocationRelativeTo(null);\n    confirmationFrame.setResizable(false);\n    confirmationFrame.add(confirmationPanel);\n    confirmationFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n\n    // PopupBox for asking paymentAmount\n    String paymentAmount =\n        (String)\n            JOptionPane.showInputDialog(\n                confirmationFrame,\n                \"Sum: \" + model.getCurrentPurchaseTableModel().getPurchaseSum(),\n                \"\",\n                JOptionPane.PLAIN_MESSAGE,\n                null,\n                null,\n                \"Payment amount\");\n    Double returnAmount = getReturnAmount(paymentAmount);\n\n    if (returnAmount < 0) {\n      JOptionPane.showMessageDialog(\n          null, \"The entered amount is too small\", \"Warning\", JOptionPane.WARNING_MESSAGE);\n      continuePurchase();\n      return;\n    }\n    // Purchase sum textlabel\n    confirmationPanel.add(\n        new JLabel(\"Sum: \" + model.getCurrentPurchaseTableModel().getPurchaseSum()));\n    // Payment amount textlabel\n    confirmationPanel.add(new JLabel(\"Payment amount: \" + paymentAmount), \"newline\");\n    // Change amount textlabel\n    confirmationPanel.add(new JLabel(\"Amount to return: \" + returnAmount), \"newline\");\n\n    // Initializing make and cancel purchase buttons\n    makePurchase = createMakePurchaseButton();\n    returnToPurchase = createReturnToPurchaseButton();\n\n    // Adding the buttons\n    confirmationPanel.add(makePurchase, \"newline, w 50%\");\n    confirmationPanel.add(returnToPurchase, \"w 50%\");\n\n    confirmationFrame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3218, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [199, 425], "initializationEnd": [221, 456], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [227, 297, 340], "configurationEnd": [253, 334, 399], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 462, "focalAPIEnd": 486, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getPreferredSize()", "jFrame.setSize(Dimension)", "jFrame.getPreferredSize()", "jFrame.getPreferredSize()", "centerWindow(int,int,jFrame)"], "useStart": [493, 2062, 2044, 2110, 2163, 2203], "useEnd": [519, 2090, 2091, 2138, 2191, 2241], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe27/tree/master/src/de/hhu/propra12/gruppe27/bomberman/gui/menue/LosetheGame.java", "rawCode": "  /**\n   * Einblendung von \"Verloren\", \"Noch einmal\" und \"Zurueck zum Startmenue\" Jeweilige Buttons werden\n   * benannt und erstellt\n   */\n  public void losethegame() {\n\n    final JFrame framelose = new JFrame(\"Verloren\");\n    framelose.setVisible(true);\n    // framelose.setResizable(false);\n    framelose.setLocationRelativeTo(null);\n    framelose.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    JPanel panellose = new JPanel(new GridBagLayout());\n    framelose.add(panellose);\n\n    framelose.getContentPane().add(panellose, BorderLayout.SOUTH);\n    GridBagConstraints c = new GridBagConstraints();\n\n    c.gridx = 0;\n    c.gridy = 0;\n\n    JButton buttonL0 = new JButton(loseicon);\n    c.gridx = 0;\n    c.gridy = 1;\n    // c.gridwidth = 2;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    c.weightx = 2.0;\n    panellose.add(buttonL0, c);\n\n    JButton buttonL1 = new JButton(\"Noch einmal!\");\n    c.gridx = 0;\n    c.gridy = 2;\n    // c.gridwidth = 2;\n    if (system.getboolLAN() == false) {\n      panellose.add(buttonL1, c);\n    }\n\n    /**\n     * Ausgabe des Highscores, Schritte die man bis zum Spielende machen konnte Anzahl der Schritte\n     * die der Gegner bis zu deinem Tod gemacht hat\n     */\n    JButton buttonL2 = new JButton(\"Zurück zum Startmenue\");\n    c.gridx = 0;\n    c.gridy = 3;\n    // c.gridwidth = 2;\n    panellose.add(buttonL2, c);\n\n    if (system.getamplayer() == 1) {\n      JButton buttonScore =\n          new JButton(\n              \"Bis zu deinem Freitod hast du dich \" + system.getHighscoreP1() + \" Schritte bewegt\");\n      c.gridx = 0;\n      c.gridy = 4;\n      // c.gridwidth = 2;\n      panellose.add(buttonScore, c);\n    } else if (system.getboolLAN()) {\n      JButton buttonScore =\n          new JButton(\n              \"Dein Gegner hat dich innerhalb von \"\n                  + system.getHighscoreP2()\n                  + \" Schritte vernichtet\");\n      c.gridx = 0;\n      c.gridy = 4;\n      // c.gridwidth = 2;\n      panellose.add(buttonScore, c);\n    }\n\n    /** ActionListener fuer Button1 wird definiert */\n    framelose.setSize(framelose.getPreferredSize());\n    int height = framelose.getPreferredSize().height;\n    int width = framelose.getPreferredSize().width;\n    centerWindow(width, height, framelose);\n\n    buttonL1.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            GameWindow s = new GameWindow(0);\n            framelose.dispose();\n          }\n        });\n\n    /** Action Listener fuer Button 2 wird definiert */\n    buttonL2.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            Startmenue start = new Startmenue();\n            start.menueaufruf();\n\n            framelose.dispose();\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3219, "initialization": ["JPanel panel = new JPanel()"], "initializationStart": [347], "initializationEnd": [359], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)", "jFrame.setResizable(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "panel.setLayout(GridBagLayout)"], "configurationStart": [128, 167, 198, 268, 365], "configurationEnd": [161, 192, 262, 291, 409], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 498, "focalAPIEnd": 515, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)"], "useStart": [521, 1276, 1315], "useEnd": [538, 1309, 1337], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JaanJanno/A-Team-1/tree/master/POS/src/ee/ut/math/tvt/salessystem/ui/tabs/StockTab.java", "rawCode": "  /**\n   * Function to add a new item to the warehouse.\n   *\n   * @author Juhan\n   */\n  public void addItemEventHandler() {\n    frame.setLayout(new FlowLayout());\n    frame.setResizable(false);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setSize(300, 170);\n    JPanel panel1 = new JPanel();\n    JPanel panel2 = new JPanel();\n    panel1.setLayout(new GridLayout(0, 2, 0, 5));\n    JButton confirmButton = new JButton(\"Confirm\");\n    panel2.add(confirmButton);\n    frame.add(panel1);\n    frame.add(panel2);\n\n    final JTextField nameField = new JTextField(20);\n    final JTextField descField = new JTextField(20);\n    final JTextField priceField = new JTextField(20);\n    final JTextField quantityField = new JTextField(20);\n\n    JLabel nameLabel = new JLabel(\"Name:\", SwingConstants.CENTER);\n    JLabel quantityLabel = new JLabel(\"Quantity:\", SwingConstants.CENTER);\n    JLabel priceLabel = new JLabel(\"Price:\", SwingConstants.CENTER);\n    JLabel descLabel = new JLabel(\"Description:\", SwingConstants.CENTER);\n\n    panel1.add(nameLabel);\n    panel1.add(nameField);\n    panel1.add(quantityLabel);\n    panel1.add(quantityField);\n    panel1.add(priceLabel);\n    panel1.add(priceField);\n    panel1.add(descLabel);\n    panel1.add(descField);\n\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n    confirmButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            try {\n              String name = nameField.getText();\n              int quantity = Integer.parseInt(quantityField.getText());\n\n              if (name.trim() == \"\") {\n                log.debug(\"You must enter a name for the new item.\");\n              } else {\n                List<StockItem> list = model.getWarehouseTableModel().getTableRows();\n                boolean alreadyExists = false;\n                for (StockItem item : list) {\n                  if (item.getName().equals(name)) {\n                    alreadyExists = true;\n                    stockitem = item;\n                  }\n                }\n                if (!alreadyExists) {\n                  String desc = descField.getText();\n                  double price = Double.parseDouble(priceField.getText());\n                  StockItem item = list.get(list.size() - 1);\n                  long id = item.getId() + 1;\n                  StockItem newItem = new StockItem(id, name.trim(), desc, price, quantity);\n                  model.getWarehouseTableModel().addItem(newItem);\n                  domainController.addToWarehouse(newItem);\n                  PurchaseItemPanel.fillItemNameBox();\n                  frame.setVisible(false);\n                  frame.dispose();\n                } else {\n                  domainController.changeStockItemQuantity(stockitem, quantity);\n                  PurchaseItemPanel.fillItemNameBox();\n                  frame.setVisible(false);\n                  frame.dispose();\n                  log.debug(\"Quantity of \" + name + \" increased by \" + quantity + \".\");\n                }\n              }\n            } catch (Exception e1) {\n              JOptionPane.showMessageDialog(\n                  frame,\n                  (\"You have entered unsuitable attributes.\"),\n                  \"Unsuitable attributes\",\n                  JOptionPane.ERROR_MESSAGE);\n              log.debug(\"You have entered unsuitable attributes.\");\n              log.debug(e1);\n            }\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3220, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [250, 303], "initializationEnd": [276, 340], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.add(JButton)", "panel.add(Element)", "panel.add(JButton)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Component)"], "configurationStart": [2073, 2099, 2133, 2161, 2219, 2248], "configurationEnd": [2093, 2127, 2154, 2213, 2242, 2281], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 2287, "focalAPIEnd": 2309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [2315], "useEnd": [2337], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HtmlToJavaWindowsBuilder/HtmlToJavaWindowsBuilder/tree/master/test/html2windows/css/CustomTest.java", "rawCode": "  /**\n   * Position GUI\n   *\n   * <p>Expect position is correct position\n   */\n  @Test\n  public void FontGUITest() throws Exception {\n\n    /**\n     * Setup\n     *\n     * <p>Create a Jframe Create a JPanel Create a Document\n     */\n    JFrame frame = new JFrame(\"Custom Frame\");\n    JPanel customPanel = new JPanel(new CustomLayoutManager());\n\n    Document document =\n        new Document() {\n          @Override\n          public CSSPainter getPainter() {\n            return new FontPainter();\n          }\n        };\n\n    /**\n     * Setup\n     *\n     * <p>Create a ElementInter Create a Element Create a Style Create a Text and append it to\n     * element\n     */\n    String tagName = \"h1\";\n    ElementInter elementInter = new ElementInter(tagName);\n    elementInter.setOwnerDocument(document);\n\n    Element elementNode = elementInter;\n    // elementNode.setPreferredSize(new Dimension(100, 100));\n\n    Text textValueText = document.createTextNode(\"Test123456\");\n    elementNode.appendChild(textValueText);\n\n    Style style = elementNode.getStyle();\n\n    /**\n     * Action\n     *\n     * <p>setting Font Type font-size : 30 family : Arial font-weight : bold font-variant :\n     * small-caps font-style : italic\n     */\n    style.setProperty(\"family\", \"Arial\");\n    style.setProperty(\"font-size\", \"20px\");\n    style.setProperty(\"font-weight\", \"bold\");\n    style.setProperty(\"font-style\", \"italic\");\n    style.setProperty(\"font-variant\", \"small-caps\");\n\n    /**\n     * Action\n     *\n     * <p>setting Block Type width : 200 height : 100 left : 100 top : 100 position : relative\n     */\n    style.setProperty(\"width\", \"150\");\n    style.setProperty(\"height\", \"100\");\n    // style.setProperty(\"left\",\"100\");\n    // style.setProperty(\"margin-top\",\"100\");\n    style.setProperty(\"position\", \"relative\");\n    style.setProperty(\"float\", \"left\");\n    style.setProperty(\"text-decoration\", \"line-through\");\n    style.setProperty(\"color\", \"#182bbc\");\n    /**\n     * Test\n     *\n     * <p>GUI Screen\n     */\n    JButton btn = new JButton(\"OK\");\n    JButton btn1 = new JButton(\"OK111\");\n    customPanel.add(btn);\n    customPanel.add(elementNode);\n    customPanel.add(btn1);\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(360, 200);\n    frame.setLocationRelativeTo(null);\n    frame.add(customPanel);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3221, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [78, 1439], "initializationEnd": [103, 1451], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setResizable(boolean)", "panel.add(JScrollPane)", "panel.add(JScrollPane)", "panel.add(JTextField)", "panel.add(JButton)", "panel.add(JButton)", "panel.add(JLabel)", "panel.add(JButton)", "jFrame.pack()"], "configurationStart": [109, 1457, 1493, 1532, 1562, 1595, 1628, 1656, 2304], "configurationEnd": [138, 1487, 1526, 1556, 1589, 1622, 1650, 1681, 2320], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 2326, "focalAPIEnd": 2350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [2387, 2420, 2482], "useEnd": [2414, 2476, 2508], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moguai2k/chat_dako/tree/master/chat/core/impl/Client.java", "rawCode": "  private void showChatFrame() throws MalformedURLException {\n    chatFrame = new JFrame(\"Chat-Client\");\n    chatFrame.setResizable(false);\n\n    header2 = new JLabel(\"Chat\");\n    header2.setFont(new Font(\"Impact\", Font.BOLD, 40));\n\n    submitButton = new JButton(\"Absenden\");\n    logoutButton = new JButton(\"Schließen\");\n\n    chatArea = new JTextPane();\n    chatField = new JTextField(300);\n    enter(chatField, false);\n\n    chatAreaScrollable =\n        new JScrollPane(\n            chatArea,\n            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n\n    // SmileyButton\n    sourire = new URL(\"http://www.friegel-design.de/dl/dakosmileys/sourire.gif\");\n    icon = new ImageIcon(sourire);\n    iconButton = new JButton(icon);\n    iconButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(final ActionEvent event) {\n            if (smileys) {\n              iconButton.setText(\"aus\");\n              smileys = false;\n              chatField.requestFocus();\n            } else {\n              iconButton.setText(\"an\");\n              smileys = true;\n              chatField.requestFocus();\n            }\n          }\n        });\n\n    defaultListModel = new DefaultListModel();\n    jList = new JList();\n    jList.setModel(defaultListModel);\n\n    jScrollPaneList = new JScrollPane(jList);\n    jScrollPaneList.setViewportView(jList);\n\n    JPanel chatpanel = new JPanel();\n    chatpanel.add(jScrollPaneList);\n    chatpanel.add(chatAreaScrollable);\n    chatpanel.add(chatField);\n    chatpanel.add(submitButton);\n    chatpanel.add(logoutButton);\n    chatpanel.add(header2);\n    chatpanel.add(iconButton);\n\n    // Netz-Elemente, von oben Links beginnend(int x, int y, int width, int height)\n    header2.setBounds(20, 20, 100, 50); // NEW @Raphi\n    jScrollPaneList.setBounds(150, 20, 220, 80);\n    chatAreaScrollable.setBounds(0, 120, 396, 180); // NEW @Raphi\n    chatField.setBounds(0, 300, 396, 30);\n    submitButton.setBounds(100, 330, 100, 30);\n    logoutButton.setBounds(200, 330, 100, 30);\n    iconButton.setBounds(0, 330, 75, 30);\n\n    chatArea.setEditable(false);\n    submitButton.addMouseListener(new ChatListener());\n    logoutButton.addMouseListener(new ChatListener());\n\n    doc = chatArea.getStyledDocument();\n    chatFrame.pack();\n    chatFrame.add(chatpanel);\n    chatpanel.setLayout(null);\n    chatFrame.setSize(400, 390);\n    chatFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    chatFrame.setVisible(true);\n    chatField.requestFocus(); // Setzt den Cursor in das ChatField\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3222, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [354, 594], "initializationEnd": [380, 625], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [386, 460, 505], "configurationEnd": [414, 499, 566], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 631, "focalAPIEnd": 659, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getPreferredSize()", "jFrame.setSize(Dimension)", "jFrame.getPreferredSize()", "jFrame.getPreferredSize()", "centerWindow(int,int,jFrame)"], "useStart": [666, 2595, 2575, 2645, 2700, 2742], "useEnd": [694, 2625, 2626, 2675, 2730, 2782], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe27/tree/master/src/de/hhu/propra12/gruppe27/bomberman/gui/menue/Optionmenue.java", "rawCode": "  /**\n   * Methode um das Optionsmenue aufzurufen sys Systemeinstellungen koennen getaetigt werden,\n   * Buttons werden definiert Mauerdichte kann eingestellt werden (Fenster wird geoeffnet) -->\n   * zerstoerbare Waende Spiegelung und Standardlevel koennen ein bzw. ausgestellt werden\n   */\n  public void optionaufruf() {\n\n    final JFrame frameoption = new JFrame(\"Optionsmenue\");\n    frameoption.setVisible(true);\n    // frameoption.setResizable(false);\n    frameoption.setLocationRelativeTo(null);\n    frameoption.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    JPanel optionpanel = new JPanel(new GridBagLayout());\n    frameoption.add(optionpanel);\n\n    frameoption.getContentPane().add(optionpanel, BorderLayout.NORTH);\n    GridBagConstraints coption = new GridBagConstraints();\n\n    coption.gridx = 0;\n    coption.gridy = 0;\n\n    JButton buttonO0 = new JButton(optionicon);\n    coption.gridx = 0;\n    coption.gridy = 1;\n    coption.fill = GridBagConstraints.HORIZONTAL;\n    coption.weightx = 1.0;\n    optionpanel.add(buttonO0, coption);\n\n    JButton buttonO1 = new JButton(\"Mauerdichte\");\n    coption.gridx = 0;\n    coption.gridy = 2;\n    // coption.fill = GridBagConstraints.HORIZONTAL;\n    // coption.weightx = 1.0;\n    optionpanel.add(buttonO1, coption);\n\n    JButton buttonO2 = new JButton(\"Spielfeldgroesse\");\n    coption.gridx = 0;\n    coption.gridy = 3;\n    optionpanel.add(buttonO2, coption);\n\n    JToggleButton buttonO3 =\n        new JToggleButton(spiegel + getBoolState(sys.getspiegelung()), sys.getspiegelung());\n    coption.gridx = 0;\n    coption.gridy = 4;\n    optionpanel.add(buttonO3, coption);\n\n    JToggleButton buttonO4 =\n        new JToggleButton(standard + getBoolState(sys.getstandardlvl()), sys.getstandardlvl());\n    coption.gridx = 0;\n    coption.gridy = 5;\n    optionpanel.add(buttonO4, coption);\n\n    // /** KI ist noch nicht implementiert\n    // *\n    // * KI an/aus (Button 5/buttonKI)\n    // */\n    //\n    // JToggleButton buttonKI = new JToggleButton(stringKI\n    // + getBoolState(sys.getboolKI()), sys.getboolKI());\n    // coption.gridx = 0;\n    // coption.gridy = 6;\n    // optionpanel.add(buttonKI, coption);\n\n    JToggleButton buttonSound =\n        new JToggleButton(\"Sound \" + getBoolState(sys.getSound()), sys.getSound());\n    coption.gridx = 0;\n    coption.gridy = 7;\n    optionpanel.add(buttonSound, coption);\n\n    /** Optionsmenue wird verlassen (Button 6/buttonO5) */\n    JButton buttonO5 = new JButton(\"Zur\" + \"\\u00FC\" + \"ck\");\n    coption.gridx = 0;\n    coption.gridy = 8;\n    optionpanel.add(buttonO5, coption);\n\n    frameoption.setSize(frameoption.getPreferredSize());\n    int height = frameoption.getPreferredSize().height;\n    int width = frameoption.getPreferredSize().width;\n    centerWindow(width, height, frameoption);\n\n    /**\n     * Listener werden hinzugefuegt, damit Buttons eine Funktion haben oeffnen eines Fensters, um\n     * die Mauerdichte einzustellen Mauerdichte wird in die lokale Variable sys uebernommen (Button\n     * 1 - Mauerdichte)\n     */\n    buttonO1.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            OptionWall density = new OptionWall();\n            density.optionwall();\n          }\n        });\n\n    /** Spielfeld waehlen (Button 2/Spielfeldgroessee) */\n    buttonO2.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            Optionfield opfield = new Optionfield();\n            opfield.opfieldEinst();\n          }\n        });\n\n    /** Die Spiegelung wird eingestellt --> Aus oder ein (Button 3/Spiegelung) */\n    buttonO3.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            sys.setspiegelung(!sys.getspiegelung());\n            System.out.println(\"Spiegelung: \" + sys.getspiegelung());\n\n            JToggleButton buttonO3 = (JToggleButton) e.getSource();\n            buttonO3.setText(spiegel + getBoolState(sys.getspiegelung()));\n          }\n        });\n\n    /** Ein und ausschalten des Standardlevels (Button 3/Standardlevel) */\n    buttonO4.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            sys.setstandardlvl(!sys.getstandardlvl());\n            System.out.println(\"StandardLevel: \" + sys.getstandardlvl());\n\n            JToggleButton buttonO4 = (JToggleButton) e.getSource();\n            buttonO4.setText(standard + getBoolState(sys.getstandardlvl()));\n          }\n        });\n\n    // /** KI ist noch nicht implementiert\n    // * Ein und ausschalten der KI (buttonKI)\n    // */\n    //\n    // buttonKI.addActionListener(new ActionListener() {\n    //\n    // @Override\n    // public void actionPerformed(ActionEvent e) {\n    // sys.setboolKI(!sys.getboolKI());\n    // System.out.println(\"KI: \" + sys.getboolKI());\n    //\n    // JToggleButton buttonKI = (JToggleButton) e.getSource();\n    // buttonKI.setText(stringKI + getBoolState(sys.getboolKI()));\n    // }\n    // });\n\n    buttonSound.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            sys.setSound(!sys.getSound());\n            System.out.println(\"Sound: \" + sys.getSound());\n\n            JToggleButton buttonSound = (JToggleButton) e.getSource();\n            buttonSound.setText(\"Sound \" + getBoolState(sys.getSound()));\n          }\n        });\n\n    /** Fenster schliessen und zurueck gehen Audio wird erzeugt */\n    buttonO5.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n\n            frameoption.dispose();\n          }\n        });\n\n    if (sys.getMouseOverBool()) {\n\n      buttonO1.addMouseListener(\n          new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n              if (sys.getSound()) {\n                StdAudio.play(\"data/audio/mouseover.wav\");\n              }\n            }\n          });\n\n      buttonO2.addMouseListener(\n          new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n              if (sys.getSound()) {\n                StdAudio.play(\"data/audio/mouseover.wav\");\n              }\n            }\n          });\n\n      buttonO3.addMouseListener(\n          new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n              if (sys.getSound()) {\n                StdAudio.play(\"data/audio/mouseover.wav\");\n              }\n            }\n          });\n\n      buttonO4.addMouseListener(\n          new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n              if (sys.getSound()) {\n                StdAudio.play(\"data/audio/mouseover.wav\");\n              }\n            }\n          });\n\n      buttonO5.addMouseListener(\n          new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n              if (sys.getSound()) {\n                StdAudio.play(\"data/audio/mouseover.wav\");\n              }\n            }\n          });\n\n      // buttonKI.addMouseListener(new java.awt.event.MouseAdapter() {\n      // public void mouseEntered(java.awt.event.MouseEvent evt) {\n      // if (sys.getSound()) {\n      // StdAudio.play(\"data/audio/mouseover.wav\");\n      // }\n      // }\n      // });\n\n      buttonSound.addMouseListener(\n          new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n              if (sys.getSound()) {\n                StdAudio.play(\"data/audio/mouseover.wav\");\n              }\n            }\n          });\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3223, "initialization": ["JFrame jFrame = new JPanel()"], "initializationStart": [888], "initializationEnd": [900], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)"], "configurationStart": [102], "configurationEnd": [137], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 4352, "focalAPIEnd": 4364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JLabel)", "jFrame.add(JPanel)", "JFrame.add(jFrame,GridBagConstraints)"], "useStart": [4370, 4390, 4408, 4427, 4445, 4464], "useEnd": [4384, 4402, 4421, 4439, 4458, 4499], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/G53/eXceedVote/tree/master/src/g53/exceedvote/ui/SetVotingUI.java", "rawCode": "  public void initComponents() {\n    frame.setLayout(new BorderLayout());\n    big = new JPanel();\n    big.setLayout(new GridLayout(3, 2));\n    one = new JPanel();\n    one.setLayout(new FlowLayout(FlowLayout.LEFT));\n    one1 = new JPanel();\n    one1.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));\n    one2 = new JPanel();\n    one2.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));\n    two = new JPanel();\n    two.setLayout(new FlowLayout(FlowLayout.LEFT));\n    two1 = new JPanel();\n    two1.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));\n    two2 = new JPanel();\n    two2.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));\n    three = new JPanel();\n    three.setLayout(new BorderLayout());\n    four = new JPanel();\n    four.setLayout(new BorderLayout());\n    five = new JPanel();\n    five.setLayout(new GridBagLayout());\n    buttonProject = new JPanel();\n    buttonQuestion = new JPanel();\n    GridBagConstraints c = new GridBagConstraints();\n    six = new JLabel(img);\n    six.setLayout(new FlowLayout());\n    projects = control.getProject();\n    modelproject = new DefaultListModel<Project>();\n    for (Project p : projects) {\n      modelproject.addElement(p);\n    }\n    projectlist = new JList<Project>(modelproject);\n    projectlist.setVisibleRowCount(6);\n    projectlist.setFixedCellHeight(30);\n    projectlist.setFixedCellWidth(344);\n    projectlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    questions = control.getQuestion();\n    modelcriteria = new DefaultListModel<Question>();\n    for (Question q : questions) {\n      modelcriteria.addElement(q);\n    }\n    criterialist = new JList<Question>(modelcriteria);\n    criterialist.setVisibleRowCount(6);\n    criterialist.setFixedCellHeight(30);\n    criterialist.setFixedCellWidth(344);\n    criterialist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    time = new JLabel(encode(\"Set_Timing\"));\n    hour = new JComboBox<String>(houritem);\n    min = new JComboBox<String>(minitem);\n    delProject = new JButton(encode(\"Remove_Button\"));\n    delQuestion = new JButton(encode(\"Remove_Button\"));\n    colon = new JLabel(\" : \");\n    setTime = new JButton(encode(\"Save\"));\n    criteria = new JLabel(encode(\"Question\"));\n    criteriafield = new JTextField(20);\n    criteriaSave = new JButton(encode(\"Save\"));\n    addProject = new JButton(encode(\"Add_Button\"));\n    addQuestion = new JButton(encode(\"Add_Button\"));\n    projectName = new JLabel(encode(\"ProjectName\"));\n    project = new JTextField(20);\n    teamName = new JLabel(encode(\"TeamName\"));\n    team = new JTextField(20);\n    teamSave = new JButton(encode(\"Save\"));\n    criscrollPane = new JScrollPane(criterialist);\n    scrollPane = new JScrollPane(projectlist);\n    browse = new JButton(encode(\"UploadPic\"));\n    browse.addActionListener(new setImageIconListener());\n    five.add(browse);\n    c.anchor = GridBagConstraints.LAST_LINE_START;\n    five.add(teamSave);\n    c.anchor = GridBagConstraints.LAST_LINE_END;\n\n    three.add(criscrollPane, BorderLayout.CENTER);\n    buttonQuestion.add(addQuestion);\n    buttonQuestion.add(delQuestion);\n    three.add(buttonQuestion, BorderLayout.PAGE_END);\n    three.setBorder(BorderFactory.createTitledBorder(encode(\"Question\")));\n\n    four.add(scrollPane, BorderLayout.CENTER);\n    buttonProject.add(addProject);\n    buttonProject.add(delProject);\n    four.add(buttonProject, BorderLayout.PAGE_END);\n    four.setBorder(BorderFactory.createTitledBorder(encode(\"Project\")));\n\n    teamSave.addActionListener(new teamSaveListener());\n    criteriaSave.addActionListener(new questionSave());\n    projectlist.addListSelectionListener(new projectListSelected());\n    criterialist.addListSelectionListener(new criteriaListSelected());\n    addProject.addActionListener(new addNewProject());\n    addQuestion.addActionListener(new addNewQuestion());\n    setTime.addActionListener(new addTime());\n    delProject.addActionListener(new DeleteProjectListener());\n    delQuestion.addActionListener(new DeleteQuestionListener());\n    two1.add(projectName);\n    two1.add(project);\n    two.add(two1);\n    two2.add(teamName);\n    two2.add(team);\n    two.add(two2);\n\n    one1.add(time);\n    one1.add(hour);\n    one1.add(colon);\n    one1.add(min);\n    one1.add(setTime);\n    one.add(one1);\n    one2.add(criteria);\n    one2.add(criteriafield);\n    one2.add(criteriaSave);\n    one.add(one2);\n\n    big.add(one);\n    big.add(three);\n    big.add(two);\n    big.add(four);\n    big.add(six);\n    big.add(five);\n    frame.add(big, BorderLayout.CENTER);\n\n    // confirm exit\n    frame.addWindowListener(\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            String textYes = encode(\"textYes\");\n            String textNo = encode(\"textNo\");\n            String textTitle = encode(\"textTitle\");\n            String textMessage = encode(\"textMessage\");\n            Object[] options = {textYes, textNo};\n            int result =\n                JOptionPane.showOptionDialog(\n                    frame,\n                    textTitle,\n                    textMessage,\n                    JOptionPane.YES_NO_OPTION,\n                    JOptionPane.QUESTION_MESSAGE,\n                    null,\n                    options,\n                    options[0]);\n\n            if (result == JOptionPane.YES_OPTION) {\n              ((JFrame) e.getSource()).setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            } else {\n              ((JFrame) e.getSource()).setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n            }\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3224, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setLayout(GroupLayout)"], "configurationStart": [832], "configurationEnd": [865], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1385, "focalAPIEnd": 1414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setTitle(String)"], "useStart": [1420, 1445, 1480, 1545], "useEnd": [1439, 1474, 1539, 1606], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/salazarm/SurfinEditor/tree/master/TextEditor/src/telnetClientDemo/textClientDemo.java", "rawCode": "  private void makeGUI() {\n    clientLog.setText(\"Connecting to 127.0.0.1:1337 ...\");\n    clientLog.setLineWrap(true);\n    clientLog.setWrapStyleWord(true);\n    clientLog.setEditable(false);\n    scroll.setPreferredSize(new Dimension(500, 300));\n    scroll.setAutoscrolls(true);\n\n    field.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            Thread t =\n                new Thread(\n                    new Runnable() {\n                      @Override\n                      public void run() {\n                        out.println(field.getText());\n                        field.setText(\"\");\n                      }\n                    });\n            t.start();\n          }\n        });\n\n    GroupLayout mainlayout = new GroupLayout(serverPanel);\n    serverPanel.setLayout(mainlayout);\n    mainlayout.setAutoCreateGaps(true);\n    mainlayout.setAutoCreateContainerGaps(true);\n\n    mainlayout.setHorizontalGroup(\n        mainlayout\n            .createSequentialGroup()\n            .addGroup(\n                mainlayout\n                    .createParallelGroup(GroupLayout.Alignment.CENTER, true)\n                    .addComponent(field)\n                    .addComponent(scroll)));\n    mainlayout.setVerticalGroup(\n        mainlayout.createSequentialGroup().addComponent(field).addComponent(scroll));\n\n    clientWindow.add(serverPanel);\n    clientWindow.pack();\n    clientWindow.setVisible(true);\n    clientWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    clientWindow.setTitle(\"TextClient for Concurrent TextEditor\");\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3225, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [278, 319], "initializationEnd": [290, 494], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setOpaque(boolean)"], "configurationStart": [500], "configurationEnd": [522], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 528, "focalAPIEnd": 544, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [550, 579], "useEnd": [573, 601], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/russjohnson09/Tweet/tree/master/src/test/GUITest.java", "rawCode": "  /**\n   * ************************************************** Main.\n   *\n   * @param args String[] *************************************************\n   */\n  public static void main(final String[] args) {\n    final Image img = controller.getBackgroundImage();\n    JFrame frame = new JFrame();\n    JPanel panel =\n        new JPanel() {\n          protected void paintComponent(final Graphics g) {\n            g.drawImage(img, 0, 0, null);\n            super.paintComponent(g);\n          }\n        };\n    panel.setOpaque(false);\n    frame.add(panel);\n    frame.setSize(400, 400);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3226, "initialization": ["JFrame jFrame = new JTabbedPane()"], "initializationStart": [84], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 201, "focalAPIEnd": 224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.add(JPanel)", "JFrame.add(jFrame)"], "useStart": [324, 439, 473], "useEnd": [347, 461, 491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/agentcoops/gridsweeper/tree/master/trunk/src/edu/umich/lsa/cscs/gridsweeper/ExperimentController.java", "rawCode": "  private void buildFrame() {\n    frame = new JFrame(exp.getName());\n\n    tabPane = new JTabbedPane();\n    {\n      modelPanel = new JPanel();\n      {\n        modelPanel.setName(\"Model\");\n      }\n      tabPane.add(modelPanel);\n\n      paramPanel = new JPanel();\n      {\n        paramPanel.setName(\"Parameters\");\n      }\n      tabPane.add(paramPanel);\n\n      runsPanel = new JPanel();\n      {\n        runsPanel.setName(\"Runs\");\n      }\n      tabPane.add(runsPanel);\n    }\n    frame.add(tabPane);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3227, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [551, 587], "initializationEnd": [563, 599], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setLayout(GridBagLayout)", "panel.add(JLabel)", "panel.add(JLabel)", "panel.add(JLabel)", "panel.add(JLabel)", "panel.add(JLabel)", "panel.add(JLabel)"], "configurationStart": [2355, 3279, 3307, 3335, 3363, 3391, 3419], "configurationEnd": [2395, 3301, 3329, 3357, 3385, 3413, 3441], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 3447, "focalAPIEnd": 3466, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [3472, 3501, 3529], "useEnd": [3495, 3523, 3581], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Thundercats/LAN-MAC-Protocol-Simulator/tree/master/src/lmp/SuperLMP.java", "rawCode": "  public static void main(String[] args) {\n    String s1 = JOptionPane.showInputDialog(null, \"Enter the number of stations\");\n    NUM_OF_STATIONS = Integer.parseInt(s1);\n    String s2 = JOptionPane.showInputDialog(null, \"Enter the Packet Size\");\n    AVG_PACKET_SIZE = Integer.parseInt(s2);\n    String s3 = JOptionPane.showInputDialog(null, \"Enter lambda\");\n    lambda = Double.parseDouble(s3);\n    String s4 = JOptionPane.showInputDialog(null, \"How many times would you like to run this?\");\n    TIMES_TO_RUN = Integer.parseInt(s4);\n    JFrame frame = new JFrame();\n    JPanel outPanel = new JPanel();\n    double throughAverage = 0; // Used for calculating average throughput\n    for (int i = 1; i <= TIMES_TO_RUN; i++) { // Start at index i=1 to avoid an off-by-one error\n      mario = new Simulator(NUM_OF_STATIONS, lambda);\n      sum = 0; // The summation of sums!\n      while ((mario.getPacketsSent() * AVG_PACKET_SIZE * CONVERSION) <= SLOT_LIMIT) {\n        result = mario.send(); // Do an initial send. If it fails, tryAgain(), else, hooray!\n        if (result == -1) {\n          System.out.println(\n              \"Hooray! You sent at time: \"\n                  + mario.tryAgain()); // Method tryAgain() internally loops\n        } else {\n          System.out.println(\"Hooray! You sent at time: \" + result);\n        }\n\n        sum = +mario.getSentTime(); // Add the sent times together\n        System.out.println(\"Packets sent successfully at time \" + mario.getSuccessfulPacketsSent());\n      }\n      double throughput =\n          (mario.getSuccessfulPacketsSent() * AVG_PACKET_SIZE * 8)\n              / (SLOT_LIMIT * 51.2 * Math.pow(10, -6));\n      // Print out the calculated throughput\n      System.out.println(\"Calculated throughput is: \" + throughput); // Throughput!\n      // Calculate the average throuput\n      throughAverage +=\n          (double) (mario.getSuccessfulPacketsSent() * 8.0 * AVG_PACKET_SIZE)\n              / (SLOT_LIMIT * 51.2 * Math.pow(10, -6));\n    }\n    // I think this is obvious\n    System.out.println(\"Average throughput is: \" + (throughAverage / TIMES_TO_RUN));\n    double load = (NUM_OF_STATIONS * AVG_PACKET_SIZE * 8) / (lambda * MICROSECONDS);\n    // So is this\n    System.out.println(\n        \"Traffic load is: \"\n            + (NUM_OF_STATIONS * AVG_PACKET_SIZE * 8) / (lambda * MICROSECONDS)\n            + \"\\n\");\n    outPanel.setLayout(new GridLayout(5, 1));\n    // JPanel tpanel = new JPanel();\n    JLabel message1 = new JLabel(\"Number of Startions is: \" + NUM_OF_STATIONS + \"\\n\");\n    // tpanel.add(message1, BorderLayout.CENTER);\n    // JPanel mpanel = new JPanel();\n    JLabel message2 = new JLabel(\"Packet Size is : \" + AVG_PACKET_SIZE + \" bytes\\n\");\n    JLabel message3 = new JLabel(\"Lambda is : \" + lambda + \"\\n\");\n    JLabel message4 =\n        new JLabel(\"Average throughput is: \" + throughAverage / TIMES_TO_RUN + \" bps\\n\");\n    /*mpanel.add(message2, BorderLayout.NORTH);\n    mpanel.add(message3, BorderLayout.CENTER);\n    mpanel.add(message4, BorderLayout.SOUTH);*/\n    // JPanel bpanel = new JPanel();\n    JLabel message5 = new JLabel(\"Traffic Load is : \" + load + \" bps\\n\");\n\n    JLabel message6 = new JLabel(\"Average delay is: \" + sum / mario.getSuccessfulPacketsSent());\n\n    // bpanel.add(message5, BorderLayout.CENTER);\n    outPanel.add(message1);\n    outPanel.add(message2);\n    outPanel.add(message3);\n    outPanel.add(message4);\n    outPanel.add(message5);\n    outPanel.add(message6);\n    frame.add(outPanel);\n    frame.setSize(500, 300);\n    frame.setVisible(true);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3228, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [120, 148], "initializationEnd": [132, 160], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setBackground(Color)"], "configurationStart": [168], "configurationEnd": [210], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 218, "focalAPIEnd": 234, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setUndecorated(boolean)", "jFrame.pack()", "jFrame.setLocationRelativeTo(Component)", "jFrame.setResizable(boolean)", "jFrame.setAlwaysOnTop(boolean)", "jFrame.setVisible(boolean)", "showMessageDialog(jFrame,String,String,*)"], "useStart": [690, 724, 744, 785, 818, 852, 928], "useEnd": [716, 736, 777, 810, 844, 874, 1124], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pkkann/his/tree/master/his_v2/src/webcam/WebcamSettingsPickerTool.java", "rawCode": "  public static void spawnWebcamPicker(final SettingsDIA dia) {\n    if (!Webcam.getWebcams().isEmpty()) {\n      frame = new JFrame();\n      panel = new JPanel();\n      panel.setBackground(new Color(51, 51, 51));\n      frame.add(panel);\n\n      okB = new JButton(\"OK\");\n      panel.add(okB);\n\n      picker = new WebcamPicker(Webcam.getWebcams());\n      panel.add(picker);\n\n      okB.addActionListener(\n          new ActionListener() {\n\n            @Override\n            public void actionPerformed(ActionEvent e) {\n              String camName = picker.getSelectedWebcam().getName();\n              dia.setDefaultCam(camName);\n              frame.dispose();\n            }\n          });\n\n      frame.setUndecorated(true);\n      frame.pack();\n      frame.setLocationRelativeTo(null);\n      frame.setResizable(false);\n      frame.setAlwaysOnTop(true);\n      frame.setVisible(true);\n    } else {\n      dia.setAlwaysOnTop(false);\n      JOptionPane.showMessageDialog(\n          frame,\n          \"Der er ingen webcam tilsluttet.\\nKontakt en administrator for at få hjælp\",\n          \"Webcam fejl\",\n          JOptionPane.ERROR_MESSAGE);\n      dia.setAlwaysOnTop(true);\n      dia.setDefaultCam(\"\");\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3229, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [226, 435], "initializationEnd": [255, 465], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setIconImage(Image)", "panel.add(JPanel,GridBagConstraints)", "panel.add(JPanel,GridBagConstraints)", "panel.add(JPanel,GridBagConstraints)", "panel.setPreferredSize(Dimension)"], "configurationStart": [261, 319, 854, 902, 956, 1009], "configurationEnd": [313, 410, 896, 950, 1002, 1088], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1112, "focalAPIEnd": 1132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.pack()"], "useStart": [1138, 1166], "useEnd": [1160, 1178], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/sensorsimulator/tree/master/SensorSimulator/src/org/openintents/tools/simulator/main/SensorSimulatorMain.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the\n   * event-dispatching thread.\n   */\n  private void createAndShowGUI() {\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"SensorSimulator\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setIconImage(Toolkit.getDefaultToolkit().getImage(Global.ICON_SENSOR_SIMULATOR_PATH));\n    JPanel mainPanel = new JPanel(new BorderLayout());\n    JPanel menuBar = new JPanel();\n    JPanel contentPanel = new JPanel();\n    mStatusBar = new JLabel();\n    JPanel statusPanel = new JPanel();\n\n    fillMainPanel(menuBar, contentPanel, frame);\n    fillStatusPanel(statusPanel, frame);\n\n    menuBar.setBorder(\n        new EmptyBorder(\n            Global.BORDER_VSIZE, Global.BORDER_HSIZE, Global.BORDER_VSIZE, Global.BORDER_HSIZE));\n    mainPanel.add(menuBar, BorderLayout.NORTH);\n    mainPanel.add(contentPanel, BorderLayout.CENTER);\n    mainPanel.add(statusPanel, BorderLayout.SOUTH);\n\n    mainPanel.setPreferredSize(new Dimension(Global.W_FRAME + 150, Global.H_FRAME));\n    // show frame\n    frame.add(mainPanel);\n    frame.setVisible(true);\n    frame.pack();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3230, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridLayout)", "panel.setSize(int,int)", "panel.setBackground(Color)", "panel.setBackground(Color)"], "configurationStart": [305, 451, 524, 583], "configurationEnd": [328, 484, 568, 626], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 636, "focalAPIEnd": 664, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()"], "useStart": [2097], "useEnd": [2119], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MrClement/Chess/tree/master/src/gui/IntegratedGUI.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initializeBoard(Board b) {\n    // b.randomize();\n    readBoard(b);\n\n    int i = 8;\n    int j = 8;\n\n    GridLayout steven = new GridLayout(i, j);\n    steven.setHgap(2);\n    steven.setVgap(2);\n\n    JPanel[][] panelHolder = new JPanel[i][j];\n    frame.setLayout(steven);\n\n    for (int m = 0; m < i; m++) {\n      for (int n = 0; n < j; n++) {\n        panelHolder[m][n] = new JPanel();\n        panelHolder[m][n].setSize(60, 60);\n        if ((n % 2 + m % 2) % 2 == 0) panelHolder[m][n].setBackground(Color.WHITE);\n        else panelHolder[m][n].setBackground(Color.GRAY);\n        frame.add(panelHolder[m][n]);\n      }\n    }\n\n    for (int m = 0; m < i; m++) {\n      for (int n = 0; n < j; n++) {\n\n        String pieceType = pieces[n][m];\n        String tempResourceName = \"\" + Character.toLowerCase(pieceType.charAt(0));\n        switch (pieceType.charAt(1)) {\n          case 'X':\n            tempResourceName = \"Blank\";\n            break;\n          case 'B':\n            tempResourceName = tempResourceName.concat(\"Bishop\");\n            break;\n          case 'R':\n            tempResourceName = tempResourceName.concat(\"Rook\");\n            break;\n          case 'P':\n            tempResourceName = tempResourceName.concat(\"Pawn\");\n            break;\n          case 'Q':\n            tempResourceName = tempResourceName.concat(\"Queen\");\n            break;\n          case 'K':\n            tempResourceName = tempResourceName.concat(\"King\");\n            break;\n          case 'N':\n            tempResourceName = tempResourceName.concat(\"Knight\");\n            break;\n          default:\n            System.out.println(\"Reached default case in piece string array of BoardGUIDevelopment\");\n            System.out.println(\"Exiting\");\n            System.exit(1);\n            break;\n        }\n\n        tempResourceName = tempResourceName.concat(\".png\");\n\n        ImageIcon icon = createImageIcon(tempResourceName, \"Derpy Spot\");\n\n        JLabel label = new JLabel();\n        label.setIcon(icon);\n        panelHolder[m][n].add(label);\n      }\n    }\n\n    frame.getContentPane().setLayout(steven);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3231, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [50, 76], "initializationEnd": [62, 88], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JButton)", "panel.add(JButton)"], "configurationStart": [383, 408, 429, 455, 476, 500], "configurationEnd": [402, 423, 449, 470, 494, 517], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 523, "focalAPIEnd": 539, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setSize(int,int)"], "useStart": [546, 574], "useEnd": [568, 597], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RGood/SE362U1G6/tree/master/SE362Project1/src/se362project1/DefinitionListCommand.java", "rawCode": "  @Override\n  public void execute() {\n    frame = new JFrame();\n    panel = new JPanel();\n    rows = new JTextField(10);\n    cols = new JTextField(10);\n    confirm = new JButton(\"Confirm\");\n    confirm.addActionListener(this);\n    cancel = new JButton(\"Cancel\");\n    cancel.addActionListener(this);\n    defLabel = new JLabel(\"Definitions\");\n    termLabel = new JLabel(\"Terms\");\n\n    panel.add(defLabel);\n    panel.add(rows);\n    panel.add(termLabel);\n    panel.add(cols);\n    panel.add(confirm);\n    panel.add(cancel);\n    frame.add(panel);\n\n    frame.setVisible(true);\n    frame.setSize(500, 100);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3232, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.remove(JPanel)"], "configurationStart": [564], "configurationEnd": [608], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 909, "focalAPIEnd": 950, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)"], "useStart": [1055, 1400, 1546, 1891, 2037, 2382, 2528, 2873, 3019, 3364, 3510, 3855, 4001, 4346, 4492, 4837, 4917], "useEnd": [1099, 1441, 1590, 1932, 2081, 2423, 2572, 2914, 3063, 3405, 3554, 3896, 4045, 4387, 4536, 4878, 5106], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Alekseylv/Poker-game/tree/master/Poker/src/poker/GUI/ClientView.java", "rawCode": "  /**\n   * places players by their position in a LIST makes an offset do show User's cards in central\n   * position\n   *\n   * @param list list of current players\n   */\n  public void placePlayers(ArrayList<ClientSidePlayer> list) {\n    int id = 0;\n    int offSet = 0;\n    String nick;\n    for (ClientSidePlayer player : list) {\n      if (player != null) {\n\n        offSet = 9 - model.getID();\n        id = player.getId() - 1;\n        nick = player.getNick();\n        switch (id) {\n          case 0:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 1:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 2:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 3:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 4:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 5:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 6:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 7:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n          case 8:\n            if (arrayPlayersNickCash[id] != null) {\n              TableWindow.remove(arrayPlayersNickCash[id]);\n            }\n            arrayPlayersNickCash[id] =\n                clientNameCash(\n                    nick,\n                    model.getCash(id + 1),\n                    getLocation((id + offSet) % 9, PlayerBar, x),\n                    getLocation((id + offSet) % 9, PlayerBar, y));\n            TableWindow.add(arrayPlayersNickCash[id]);\n            break;\n        }\n        TableWindow.add(\n            Dealer(\n                getLocation((model.getDealer() + 1 + offSet) % 9, Deal, x),\n                getLocation((model.getDealer() + 1 + offSet) % 9, Deal, y)));\n      }\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3233, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [62, 95], "initializationEnd": [74, 107], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 113, "focalAPIEnd": 129, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [565, 583], "useEnd": [577, 605], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alessandro-aglietti/itis-leonardo-da-vinci/tree/master/swingset3/src/com/sun/swingset3/utilities/ArrowIcon.java", "rawCode": "  public static void main(String args[]) {\n    JFrame frame = new JFrame();\n    JPanel panel = new JPanel();\n    frame.add(panel);\n\n    panel.add(new JLabel(\"north\", new ArrowIcon(ArrowIcon.NORTH), JLabel.CENTER));\n    panel.add(new JLabel(\"west\", new ArrowIcon(ArrowIcon.WEST), JLabel.CENTER));\n    panel.add(new JLabel(\"south\", new ArrowIcon(ArrowIcon.SOUTH), JLabel.CENTER));\n    panel.add(new JLabel(\"east\", new ArrowIcon(ArrowIcon.EAST), JLabel.CENTER));\n    panel.add(new JLabel(\"east-20\", new ArrowIcon(ArrowIcon.EAST, 20, Color.blue), JLabel.CENTER));\n\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3234, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [62, 165], "initializationEnd": [80, 195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [86], "configurationEnd": [138], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 201, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DockController.setRootWindow(jFrame)", "new ScreenDockStation(jFrame)", "jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [284, 2554, 3286, 3354], "useEnd": [315, 2582, 3319, 3376], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Benoker/DockingFrames/tree/master/docking-frames-ext-toolbar/testing/bibliothek/gui/dock/toolbar/WizardSplitDockStationTest.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Test\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JPanel borderPanel = new JPanel(new BorderLayout());\n    frame.add(borderPanel);\n\n    DockController controller = new DockController();\n    controller.setRootWindow(frame);\n\n    controller.getProperties().set(DockTheme.SPAN_FACTORY, new BasicSpanFactory(500, 20));\n\n    controller.setTheme(new EclipseTheme());\n\n    controller\n        .getProperties()\n        .set(ScreenDockStation.DROP_SIZE_STRATEGY, ScreenDropSizeStrategy.PREFERRED_SIZE);\n\n    controller\n        .getProperties()\n        .set(\n            PlaceholderStrategy.PLACEHOLDER_STRATEGY,\n            new PlaceholderStrategy() {\n              @Override\n              public void uninstall(DockStation station) {\n                // ignore\n              }\n\n              @Override\n              public void removeListener(PlaceholderStrategyListener listener) {\n                // ignore\n              }\n\n              @Override\n              public boolean isValidPlaceholder(Path placeholder) {\n                return true;\n              }\n\n              @Override\n              public void install(DockStation station) {\n                // ignore\n              }\n\n              @Override\n              public Path getPlaceholderFor(Dockable dockable) {\n                if (dockable instanceof DefaultDockable) {\n                  return new Path(\"test\", dockable.getTitleText());\n                }\n                return null;\n              }\n\n              @Override\n              public void addListener(PlaceholderStrategyListener listener) {\n                // ignore\n              }\n            });\n\n    WizardSplitDockStation station = new WizardSplitDockStation(Side.RIGHT);\n    WizardSplitDockStation stationBottom = new WizardSplitDockStation(Side.BOTTOM);\n    WizardSplitDockStation stationTop = new WizardSplitDockStation(Side.TOP);\n    WizardSplitDockStation stationLeft = new WizardSplitDockStation(Side.LEFT);\n\n    station.setResizeOnRemove(true);\n\n    controller.add(station);\n    controller.add(stationBottom);\n    controller.add(stationTop);\n    controller.add(stationLeft);\n    borderPanel.add(new JScrollPane(station.getComponent()), BorderLayout.EAST);\n    borderPanel.add(new JScrollPane(stationLeft.getComponent()), BorderLayout.WEST);\n    borderPanel.add(new JScrollPane(stationTop.getComponent()), BorderLayout.NORTH);\n    borderPanel.add(stationBottom.getComponent(), BorderLayout.SOUTH);\n\n    ScreenDockStation screen = new ScreenDockStation(frame);\n    controller.add(screen);\n\n    screen.drop(create(\"A\"), new ScreenDockProperty(420, 20, 400, 400));\n    screen.drop(create(\"B\"), new ScreenDockProperty(420, 20, 400, 400));\n    screen.drop(create(\"C\"), new ScreenDockProperty(420, 20, 400, 400));\n    screen.drop(create(\"D\"), new ScreenDockProperty(420, 20, 400, 400));\n    screen.drop(createPanel(\"300, 300\", 300, 350), new ScreenDockProperty(420, 20, 400, 400));\n    screen.drop(createPanel(\"400, 600 \", 400, 600), new ScreenDockProperty(420, 20, 400, 400));\n    screen.drop(create(\"G\"), new ScreenDockProperty(420, 20, 400, 400));\n    screen.drop(\n        create(\"Very long long long long button\"), new ScreenDockProperty(420, 20, 400, 400));\n\n    frame.setBounds(20, 20, 400, 400);\n    screen.setShowing(true);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3235, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [239], "initializationEnd": [266], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)"], "configurationStart": [344, 448], "configurationEnd": [396, 471], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 621, "focalAPIEnd": 643, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLayout(GridBagLayout)", "jFrame.setVisible(boolean)", "jFrame.setBackground(Color)", "jFrame.pack()"], "useStart": [655, 694, 722, 760], "useEnd": [688, 716, 754, 772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MFry/E51/tree/master/ElevatorGUI/src/BuildingSwing.java", "rawCode": "  /** Generates the building view using sliders to represent the elevators */\n  public void init(Elevator[] inputElevators) {\n    System.out.println(\"Creating GUI\");\n    // Create a JFrame with \"Elevator Proposal\" as the title\n    frame = new JFrame(\"Building View\");\n    // Set the frame so that the program stops when the frame is closed\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    System.out.println(\"Setting frame size\");\n    frame.setSize(500, 500);\n\n    // Generate the elevators\n    for (int i = 0; i < numElevators; i++) {\n      elevator[i] = new ElevatorSlider(inputElevators[i], i + 1);\n      frame.add(elevator[i]);\n    }\n    frame.setLayout(new FlowLayout());\n    frame.setVisible(true);\n    frame.setBackground(Color.white);\n    frame.pack();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3236, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [107, 155], "initializationEnd": [131, 167], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 173, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [215, 241, 266], "useEnd": [235, 260, 315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/visit/spark-svn-mirror/tree/master/src/plugins/sip/src/java/org/jivesoftware/sparkplugin/ui/components/JavaMixer.java", "rawCode": "  public static void main(String[] args) {\n    final JavaMixer sm = new JavaMixer();\n    final JFrame jf = new JFrame(\"Mixer Test\");\n    final JPanel jp = new JPanel();\n    jf.add(jp);\n    jp.add(sm.getTree());\n    jf.setSize(600, 500);\n    jf.setVisible(true);\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    sm.getTree()\n        .addTreeSelectionListener(\n            new TreeSelectionListener() {\n              public void valueChanged(TreeSelectionEvent e) {\n                TreePath path = e.getPath();\n                if (path.getLastPathComponent() instanceof JavaMixer.ControlNode) {\n                  JavaMixer.ControlNode controlNode =\n                      (JavaMixer.ControlNode) path.getLastPathComponent();\n                  if (!(controlNode.getControl() instanceof CompoundControl)) {\n                    if (jp.getComponentCount() > 1) jp.remove(1);\n                    jp.add(controlNode.getComponent(), 1);\n                    jp.repaint();\n                  }\n                }\n              }\n            });\n    jp.add(sm.getPrefferedMasterVolume());\n    jp.add(sm.getPrefferedMasterVolume());\n    jp.add(sm.getPrefferedInputVolume());\n    jp.repaint();\n    sm.setMicrophoneInput();\n    sm.setMuteForMicrophoneOutput();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3237, "initialization": ["JFrame jFrame = new JTabbedPane()"], "initializationStart": [63], "initializationEnd": [80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 251, "focalAPIEnd": 272, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JFrame.add(jFrame)", "jFrame.getBoundsAt(int)"], "useStart": [376, 444], "useEnd": [397, 469], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Mindtoeye/Hoop/tree/master/src/edu/cmu/cs/in/controls/HoopTabbedControlPane.java", "rawCode": "  /** */\n  public void makeUI() {\n    JTabbedPane tabbedPane = new JTabbedPane();\n\n    for (int i = 0; i < 3; i++) {\n      JPanel panel = new JPanel();\n      panel.setName(\"tab\" + (i + 1));\n      panel.setPreferredSize(new Dimension(400, 400));\n      tabbedPane.add(panel);\n    }\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(tabbedPane);\n    frame.pack();\n\n    Rectangle tabBounds = tabbedPane.getBoundsAt(0);\n\n    Container glassPane = (Container) frame.getRootPane().getGlassPane();\n    glassPane.setVisible(true);\n    glassPane.setLayout(new GridBagLayout());\n    GridBagConstraints gbc = new GridBagConstraints();\n    gbc.weightx = 1.0;\n    gbc.weighty = 1.0;\n    gbc.fill = GridBagConstraints.NONE;\n    gbc.insets = new Insets(tabBounds.y, 0, 0, 15);\n    gbc.anchor = GridBagConstraints.NORTHEAST;\n\n    JButton button = new JButton(\"My Button Position\");\n    button.setPreferredSize(\n        new Dimension(button.getPreferredSize().width, (int) tabBounds.getHeight() - 2));\n    glassPane.add(button, gbc);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3238, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [190, 439], "initializationEnd": [220, 470], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [226, 302, 348], "configurationEnd": [255, 342, 410], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 476, "focalAPIEnd": 506, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getPreferredSize()", "jFrame.setSize(Dimension)", "jFrame.getPreferredSize()", "jFrame.getPreferredSize()", "centerWindow(int,int,jFrame)"], "useStart": [513, 1288, 1267, 1339, 1395, 1438], "useEnd": [542, 1319, 1320, 1370, 1426, 1479], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe27/tree/master/src/de/hhu/propra12/gruppe27/bomberman/gui/menue/Optionfield.java", "rawCode": "  /**\n   * Einstellungen fuer das Optionsmenue --> Spielfeldgroesse (3 Auswahlmoeglichkeiten: 15x15,\n   * 19x19, 11x11)\n   */\n  public void opfieldEinst() {\n\n    final JFrame frameopfield = new JFrame(\"Spielfeldgroesse\");\n    frameopfield.setVisible(true);\n    // frameopfield.setResizable(false);\n    frameopfield.setLocationRelativeTo(null);\n    frameopfield.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    JPanel panelopfield = new JPanel(new GridBagLayout());\n    frameopfield.add(panelopfield);\n\n    frameopfield.getContentPane().add(panelopfield, BorderLayout.SOUTH);\n    GridBagConstraints copfield = new GridBagConstraints();\n\n    copfield.gridx = 0;\n    copfield.gridy = 0;\n\n    JButton buttonopfield1 = new JButton(\"Spielfeld: 11 x 11\");\n    copfield.gridx = 0;\n    copfield.gridy = 1;\n    copfield.fill = GridBagConstraints.HORIZONTAL;\n    copfield.weightx = 1.0;\n    panelopfield.add(buttonopfield1, copfield);\n\n    JButton buttonopfield2 = new JButton(\"Spielfeld 15 x 15 (default)\");\n    copfield.gridx = 0;\n    copfield.gridy = 2;\n    panelopfield.add(buttonopfield2, copfield);\n\n    JButton buttonopfield3 = new JButton(\"Spieldfeld 19 x 19\");\n    copfield.gridx = 0;\n    copfield.gridy = 3;\n    panelopfield.add(buttonopfield3, copfield);\n\n    frameopfield.setSize(frameopfield.getPreferredSize());\n    int height = frameopfield.getPreferredSize().height;\n    int width = frameopfield.getPreferredSize().width;\n    centerWindow(width, height, frameopfield);\n\n    /** Aktion der Knoepfe Listener wird ausgefuehrt, damit Knopfdruck bearbeitet werden kann */\n    buttonopfield1.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            sysopfield.setfeldx(11);\n            sysopfield.setfeldy(11);\n            frameopfield.dispose();\n          }\n        });\n\n    buttonopfield2.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            sysopfield.setfeldx(15);\n            sysopfield.setfeldy(15);\n            frameopfield.dispose();\n          }\n        });\n\n    buttonopfield3.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            sysopfield.setfeldx(19);\n            sysopfield.setfeldy(19);\n            frameopfield.dispose();\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3239, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 140, "focalAPIEnd": 172, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bartvbl/PizzaProgram/tree/master/projectNameHere/ourGreatProgram/netbeans_project/netbeans_project_v0_03/src/pizzaprogram/gui/ProgramWindow.java", "rawCode": "  private void createFrame() {\n    this.cardLayoutManager = new CardLayout();\n    this.mainJPanel = new JPanel(this.cardLayoutManager);\n    this.jframe.add(this.mainJPanel);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3240, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel(*)"], "initializationStart": [62, 540], "initializationEnd": [74, 570], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.add(JButton)", "panel.setPreferredSize(Dimension)"], "configurationStart": [576, 599], "configurationEnd": [593, 646], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 652, "focalAPIEnd": 668, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [674, 692, 750], "useEnd": [686, 744, 772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/agilebirds/openflexo/tree/master/flexodesktop/GUI/flexo/src/main/java/org/openflexo/view/controller/FlexoInspectorController.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    final JDialog dialog = new JDialog(frame);\n    dialog.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);\n    JButton button = new JButton(\"Show dialog\");\n    button.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            dialog.setVisible(true);\n          }\n        });\n    JLabel label = new JLabel(\"coucou\");\n    dialog.add(label);\n    dialog.pack();\n    JPanel panel = new JPanel(new BorderLayout());\n    panel.add(button);\n    panel.setPreferredSize(new Dimension(500, 400));\n    frame.add(panel);\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3241, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setSize(int,int)"], "configurationStart": [196], "configurationEnd": [230], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 236, "focalAPIEnd": 268, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bartvbl/PizzaProgram/tree/master/projectNameHere/ourGreatProgram/src/pizzaProgram/gui/ProgramWindow.java", "rawCode": "  /** Initializes the JFrame of the create FrameView */\n  private void createFrame() {\n    this.cardLayoutManager = new CardLayout();\n    this.mainJPanel = new JPanel(this.cardLayoutManager);\n    this.mainJPanel.setSize(1000, 600);\n    this.jframe.add(this.mainJPanel);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3242, "initialization": ["JFrame jFrame = new JPanel(*)"], "initializationStart": [2175], "initializationEnd": [2207], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBackground(Color)"], "configurationStart": [2213], "configurationEnd": [2261], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 6996, "focalAPIEnd": 7024, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "JFrame.add(jFrame,GridBagConstraints)"], "useStart": [7030, 7063, 7096, 7129, 7162, 7193, 7305], "useEnd": [7057, 7090, 7123, 7156, 7187, 7219, 7342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ertemplin/SIGAPP-Trivia/tree/master/videowall/src/QuizApp.java", "rawCode": "  private void initGame() {\n    f = new JFrame(\"Quiz game\");\n    f.setLayout(new BorderLayout());\n\n    // Stuff for the panel on the right\n    JPanel rightPanel = new JPanel(new BorderLayout());\n    rightPanel.setBackground(Color.decode(\"#60BAEB\"));\n    ImageIcon logoIcon = new ImageIcon(\"src/images/trivial_logo_white.png\");\n    Image img = logoIcon.getImage();\n    Image newimg = img.getScaledInstance(348, 130, java.awt.Image.SCALE_SMOOTH);\n    logoIcon = new ImageIcon(newimg);\n    JLabel logo = new JLabel(logoIcon);\n    logo.setBorder(BorderFactory.createEmptyBorder(20, 70, 50, 35));\n    logo.setBackground(Color.WHITE);\n    rightPanel.add(logo, BorderLayout.NORTH);\n\n    JPanel leaderBoardHolder = new JPanel(new BorderLayout());\n    leaderBoardHolder.setBackground(new Color(0, 0, 0, 0));\n    JPanel leaderBoardPanel = new JPanel(new GridLayout(2, 1));\n    leaderBoardPanel.setBackground(new Color(0, 0, 0, 0));\n    JLabel leaderBoardLabel = new JLabel(\"leader board\");\n    leaderBoardLabel.setHorizontalAlignment(JLabel.CENTER);\n    leaderBoardLabel.setForeground(Color.decode(\"#FF6633\"));\n    leaderBoardLabel.setFont(new Font(\"Helvitica\", Font.PLAIN, 40));\n    leaderBoardPanel.add(leaderBoardLabel);\n    leaderBoardList =\n        new JLabel(\n            \"<html><table><tr><td>name1fadfjdkdfja</td><td width=\\\"50\\\" /><td>100</td></tr><tr><td>name2</td><td width=\\\"50\\\" /><td>10</td></tr></table></html>\");\n    leaderBoardList.setHorizontalAlignment(JLabel.CENTER);\n    leaderBoardList.setFont(new Font(\"Helvitica\", Font.PLAIN, 35));\n    leaderBoardPanel.add(leaderBoardList);\n    leaderBoardHolder.add(leaderBoardPanel, BorderLayout.NORTH);\n    rightPanel.add(leaderBoardHolder, BorderLayout.CENTER);\n\n    JLabel roomCodeLabel = new JLabel(\"LWSN\");\n    roomCodeLabel.setHorizontalAlignment(JLabel.RIGHT);\n    roomCodeLabel.setForeground(Color.decode(\"#FF6633\"));\n    roomCodeLabel.setFont(new Font(\"Helvictica\", Font.PLAIN, 50));\n    roomCodeLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 30, 30));\n    rightPanel.add(roomCodeLabel, BorderLayout.SOUTH);\n    // END stuff for the panel on the right.\n\n    // Stuff for the main panel\n    JPanel leftPanel = new JPanel(new GridLayout(7, 1));\n    leftPanel.setBackground(Color.decode(\"#bbeeff\"));\n\n    JPanel questionPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 50));\n    questionPanel.setBackground(Color.decode(\"#bbeeff\"));\n    JPanel questionLeftBox = new JPanel();\n    questionLeftBox.setBackground(Color.decode(\"#60BAEB\"));\n    questionLeftBox.setPreferredSize(new Dimension(80, 90));\n\n    questionLabel = new JTextArea(2, 35);\n    questionLabel.setFont(new Font(\"Helvitica\", Font.PLAIN, 40));\n    questionLabel.setLineWrap(true);\n    questionLabel.setWrapStyleWord(true);\n    questionLabel.setFocusable(false);\n    questionLabel.setBackground(Color.decode(\"#bbeeff\"));\n    questionLabel.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0));\n    questionPanel.add(questionLeftBox);\n    questionPanel.add(questionLabel);\n\n    JPanel choiceAPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 50));\n    choiceAPanel.setOpaque(false);\n    choiceALabel = new JLabel(\" a\");\n    choiceALabel.setFont(new Font(\"Helvitica\", Font.PLAIN, 60));\n    choiceALabel.setOpaque(true);\n    choiceALabel.setBackground(Color.decode(\"#60BAEB\"));\n    choiceALabel.setPreferredSize(new Dimension(80, 80));\n    choiceAText = new JLabel(\"Lorem\");\n    choiceAText.setFont(new Font(\"Helvitica\", Font.PLAIN, 40));\n    choiceAText.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0));\n    choiceAPanel.add(choiceALabel);\n    choiceAPanel.add(choiceAText);\n\n    JPanel choiceBPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 50));\n    choiceBPanel.setOpaque(false);\n    choiceBLabel = new JLabel(\" b\");\n    choiceBLabel.setFont(new Font(\"Helvitica\", Font.PLAIN, 60));\n    choiceBLabel.setOpaque(true);\n    choiceBLabel.setBackground(Color.decode(\"#60BAEB\"));\n    choiceBLabel.setPreferredSize(new Dimension(80, 80));\n    choiceBText = new JLabel(\"Ipsum\");\n    choiceBText.setFont(new Font(\"Helvitica\", Font.PLAIN, 40));\n    choiceBText.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0));\n    choiceBPanel.add(choiceBLabel);\n    choiceBPanel.add(choiceBText);\n\n    JPanel choiceCPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 50));\n    choiceCPanel.setOpaque(false);\n    choiceCLabel = new JLabel(\" c\");\n    choiceCLabel.setFont(new Font(\"Helvitica\", Font.PLAIN, 60));\n    choiceCLabel.setOpaque(true);\n    choiceCLabel.setBackground(Color.decode(\"#60BAEB\"));\n    choiceCLabel.setPreferredSize(new Dimension(80, 80));\n    choiceCText = new JLabel(\"Dolor\");\n    choiceCText.setFont(new Font(\"Helvitica\", Font.PLAIN, 40));\n    choiceCText.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0));\n    choiceCPanel.add(choiceCLabel);\n    choiceCPanel.add(choiceCText);\n\n    JPanel choiceDPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 50));\n    choiceDPanel.setOpaque(false);\n    choiceDLabel = new JLabel(\" d\");\n    choiceDLabel.setFont(new Font(\"Helvitica\", Font.PLAIN, 60));\n    choiceDLabel.setOpaque(true);\n    choiceDLabel.setBackground(Color.decode(\"#60BAEB\"));\n    choiceDLabel.setPreferredSize(new Dimension(80, 80));\n    choiceDText = new JLabel(\"Amet\");\n    choiceDText.setFont(new Font(\"Helvitica\", Font.PLAIN, 40));\n    choiceDText.setBorder(BorderFactory.createEmptyBorder(0, 30, 0, 0));\n    choiceDPanel.add(choiceDLabel);\n    choiceDPanel.add(choiceDText);\n\n    JPanel timerPanel = new JPanel(new GridLayout(2, 1));\n    timerPanel.setOpaque(false);\n    JPanel timerLabelPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n    timerLabelPanel.setOpaque(false);\n    timeLeftLabel = new JLabel(\"10 secs\");\n    timeLeftLabel.setFont(new Font(\"Helvitica\", Font.PLAIN, 35));\n    timeLeftLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 160));\n    timerLabelPanel.add(timeLeftLabel);\n    JPanel timerContainer = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    timerContainer.setOpaque(false);\n    progressBar = new JProgressBar();\n    progressBar.setBackground(orangeColor);\n    progressBar.setForeground(blueColor);\n    progressBar.setPreferredSize(new Dimension(1300, 60));\n    progressBar.setValue(75);\n    timerContainer.add(progressBar);\n    timerPanel.add(timerLabelPanel);\n    timerPanel.add(timerContainer);\n\n    JPanel qrCodePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    qrCodePanel.setOpaque(false);\n    ImageIcon qrCodeIcon = new ImageIcon(\"src/images/qrCode.png\");\n    Image qrImg = qrCodeIcon.getImage();\n    Image newQrImg = qrImg.getScaledInstance(150, 150, java.awt.Image.SCALE_SMOOTH);\n    qrCodeIcon = new ImageIcon(newQrImg);\n    JLabel qrCode = new JLabel(qrCodeIcon);\n    JLabel qrCodeText = new JLabel(\"Scan to play!\");\n    qrCodeText.setFont(new Font(\"Helvitica\", Font.PLAIN, 35));\n    qrCodeText.setForeground(orangeColor);\n    qrCodeText.setBorder(BorderFactory.createEmptyBorder(65, 10, 0, 0));\n    qrCodePanel.add(qrCode);\n    qrCodePanel.add(qrCodeText);\n\n    leftPanel.add(questionPanel);\n    leftPanel.add(choiceAPanel);\n    leftPanel.add(choiceBPanel);\n    leftPanel.add(choiceCPanel);\n    leftPanel.add(choiceDPanel);\n    leftPanel.add(timerPanel);\n    leftPanel.add(qrCodePanel);\n\n    // END stuff for the main panel\n\n    f.add(rightPanel, BorderLayout.EAST);\n    f.add(leftPanel, BorderLayout.CENTER);\n    f.setSize(1200, 1200);\n    f.setVisible(true);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    active = new ArrayList<Player>();\n    observer = new RoomObserver(this);\n    room = new RoomConnection(\"LWSN\", observer);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3243, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [183, 417], "initializationEnd": [213, 448], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [219, 289, 332], "configurationEnd": [245, 326, 391], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 454, "focalAPIEnd": 478, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getPreferredSize()", "jFrame.setSize(Dimension)", "jFrame.getPreferredSize()", "jFrame.getPreferredSize()", "centerWindow(int,int,jFrame)"], "useStart": [485, 1182, 1164, 1230, 1283, 1323], "useEnd": [511, 1210, 1211, 1258, 1311, 1361], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe27/tree/master/src/de/hhu/propra12/gruppe27/bomberman/gui/menue/Leveleditmenue.java", "rawCode": "  /**\n   * Einstellungen fuer den Leveleditor --> Feldgroesse (3 Auswahlmoeglichkeiten: 15x15, 19x19,\n   * 11x11)\n   */\n  public void leveleditmenue() {\n\n    final JFrame frameedit = new JFrame(\"Spielfeldgroesse\");\n    frameedit.setVisible(true);\n    // frameedit.setResizable(false);\n    frameedit.setLocationRelativeTo(null);\n    frameedit.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    JPanel paneledit = new JPanel(new GridBagLayout());\n    frameedit.add(paneledit);\n\n    frameedit.getContentPane().add(paneledit, BorderLayout.SOUTH);\n    GridBagConstraints cedit = new GridBagConstraints();\n\n    cedit.gridx = 0;\n    cedit.gridy = 0;\n\n    JButton buttonedit1 = new JButton(\"Spielfeld: 11 x 11\");\n    cedit.gridx = 0;\n    cedit.gridy = 1;\n    cedit.fill = GridBagConstraints.HORIZONTAL;\n    cedit.weightx = 1.0;\n    paneledit.add(buttonedit1, cedit);\n\n    JButton buttonedit2 = new JButton(\"Spielfeld 15 x 15 (default)\");\n    cedit.gridx = 0;\n    cedit.gridy = 2;\n    paneledit.add(buttonedit2, cedit);\n\n    JButton buttonedit3 = new JButton(\"Spieldfeld 19 x 19\");\n    cedit.gridx = 0;\n    cedit.gridy = 3;\n    paneledit.add(buttonedit3, cedit);\n\n    frameedit.setSize(frameedit.getPreferredSize());\n    int height = frameedit.getPreferredSize().height;\n    int width = frameedit.getPreferredSize().width;\n    centerWindow(width, height, frameedit);\n\n    buttonedit1.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            system.setfeldxbml(11);\n            system.setfeldybml(11);\n            LevelEditor editor = new LevelEditor(system.getfeldxbml(), system.getfeldybml());\n            editor.leveleditor();\n            frameedit.dispose();\n          }\n        });\n\n    /** ActionListener wird hinzugefuegt, fuer Knopfdruck */\n    buttonedit2.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            system.setfeldxbml(15);\n            system.setfeldybml(15);\n            LevelEditor editor = new LevelEditor(system.getfeldxbml(), system.getfeldybml());\n            editor.leveleditor();\n            frameedit.dispose();\n          }\n        });\n\n    /** @see buttonedit2 */\n    buttonedit3.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            system.setfeldxbml(19);\n            system.setfeldybml(19);\n            LevelEditor editor = new LevelEditor(system.getfeldxbml(), system.getfeldybml());\n            editor.leveleditor();\n            frameedit.dispose();\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3244, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 93, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.addKeyListener(ShortcutManager)"], "useStart": [114], "useEnd": [140], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heuristicus/team-java/tree/master/trunk/tests/movementTest.java", "rawCode": "  public void addPanel() {\n    addMouseListener(this);\n    addMouseMotionListener(this);\n    frame.add(this);\n    frame.addKeyListener(this);\n    addKeyListener(this);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3245, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [38, 77], "initializationEnd": [63, 89], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 158, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JSpinner,*)", "jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [180, 455, 484, 542], "useEnd": [217, 478, 536, 564], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RoelSchevenels/Quiz-project/tree/master/Quiz/src/tetrisdemo/JuryClient.java", "rawCode": "  public void makeGUI() {\n    frame = new JFrame(\"Jury client\");\n    panel = new JPanel();\n    pieces = new JSpinner(new SpinnerNumberModel(1, 1, 5, 1));\n    frame.add(panel);\n    frame.add(pieces, BorderLayout.NORTH);\n\n    JButton one = new JButton(\"player1\");\n    JButton two = new JButton(\"player2\");\n    ActionHandler ah = new ActionHandler();\n    one.addActionListener(ah);\n    two.addActionListener(ah);\n    panel.add(one);\n    panel.add(two);\n\n    frame.setSize(300, 200);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3246, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [110, 276], "initializationEnd": [128, 288], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setLocationRelativeTo(Component)"], "configurationStart": [134, 163, 221], "configurationEnd": [157, 215, 254], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 294, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1462], "useEnd": [1484], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pkkann/his/tree/master/TableTest/src/tabletest/TableTest.java", "rawCode": "  /** @param args the command line arguments */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Test\");\n    frame.setSize(800, 600);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setLocationRelativeTo(null);\n\n    JPanel panel = new JPanel();\n    frame.add(panel);\n\n    final JTable table = new JTable();\n    JScrollPane scrollPane = new JScrollPane(table);\n    table.setFillsViewportHeight(true);\n\n    panel.setLayout(new BorderLayout());\n\n    panel.add(table.getTableHeader(), BorderLayout.PAGE_START);\n    panel.add(table, BorderLayout.CENTER);\n\n    DefaultTableModel dtm = new DefaultTableModel();\n    dtm.addColumn(\"Test\");\n    dtm.addColumn(\"Test\");\n    String[] s = {\"NNNN\", \"NNNN\"};\n    dtm.addRow(s);\n    table.setModel(dtm);\n\n    table\n        .getSelectionModel()\n        .addListSelectionListener(\n            new ListSelectionListener() {\n              @Override\n              public void valueChanged(ListSelectionEvent e) {\n                if (!e.getValueIsAdjusting()) {\n                  System.out.println(\"Selected\");\n                  try {\n                    Thread.sleep(2000);\n                  } catch (InterruptedException ex) {\n                    Logger.getLogger(TableTest.class.getName()).log(Level.SEVERE, null, ex);\n                  }\n                  System.out.println(\"clearing\");\n                  table.clearSelection();\n                }\n              }\n            });\n\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3247, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(PlotControlsLayout)"], "initializationStart": [79, 293], "initializationEnd": [109, 311], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "panel.add(ResizersScrollPane,*)", "panel.add(JPanel,GridBagConstraints)"], "configurationStart": [115, 971, 1023], "configurationEnd": [167, 1017, 1070], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1076, "focalAPIEnd": 1092, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nasasync/mission-control-technologies/tree/master/fastPlotViews/src/test/java/gov/nasa/arc/mct/fastplot/view/TestPlotControlsLayout.java", "rawCode": "  @Test\n  public void testLayout() throws Exception {\n    final JFrame frame = new JFrame(\"CustomLayoutDemo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Set up the content panel.\n    final PlotControlsLayout layout = new PlotControlsLayout(0);\n    final JPanel panel = new JPanel(layout);\n\n    JPanel innerPanel = new JPanel();\n    innerPanel.add(new JLabel(\"Inner Label\"));\n    JPanel upperPanel = new JPanel();\n    upperPanel.setLayout(new BoxLayout(upperPanel, BoxLayout.Y_AXIS));\n    upperPanel.add(new JButton(\"Button 2\"));\n    upperPanel.add(new JButton(\"Button 3\"));\n    upperPanel.add(new JButton(\"Button 4\"));\n    upperPanel.add(new JButton(\"Button 5\"));\n    upperPanel.add(innerPanel);\n\n    JPanel lowerPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 0, 0));\n    lowerPanel.add(new JButton(\"Apply\"));\n    lowerPanel.add(new JButton(\"Reset\"));\n\n    ResizersScrollPane scroller = new ResizersScrollPane(upperPanel, innerPanel);\n    panel.add(scroller, PlotControlsLayout.MIDDLE);\n    panel.add(lowerPanel, PlotControlsLayout.LOWER);\n    frame.add(panel);\n\n    // Display the window.\n    SwingUtilities.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            frame.pack();\n            frame.setVisible(true);\n          }\n        });\n\n    // Test\n    final int panelHeight = 150;\n    SwingUtilities.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            panel.setSize(200, panelHeight);\n            panel.repaint();\n            layout.layoutContainer(panel);\n          }\n        });\n\n    Assert.assertEquals(lowerPanel.getLocation().y, panelHeight - lowerPanel.getSize().height - 1);\n\n    final int panelHeight2 = 100;\n    SwingUtilities.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            panel.setSize(200, panelHeight2);\n            panel.repaint();\n            layout.layoutContainer(panel);\n          }\n        });\n    Assert.assertEquals(lowerPanel.getLocation().y, panelHeight2 - lowerPanel.getSize().height - 1);\n\n    layout.resetSizeFlag();\n    Assert.assertTrue(layout.minimumLayoutSize(panel).height > lowerPanel.getSize().height);\n    layout.resetSizeFlag();\n    Assert.assertTrue(layout.maximumLayoutSize(panel).height > lowerPanel.getSize().height);\n    layout.invalidateLayout(null);\n    layout.addLayoutComponent(\"\", null);\n    layout.removeLayoutComponent(scroller);\n    layout.removeLayoutComponent(lowerPanel);\n    Assert.assertEquals(layout.getLayoutAlignmentX(null), 0.5f);\n    Assert.assertEquals(layout.getLayoutAlignmentY(null), 0.5f);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3248, "initialization": ["JPanel panel = new JPanel(*)"], "initializationStart": [1082], "initializationEnd": [1112], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setResizable(boolean)", "panel.add(JPanel,GridBagConstraints)", "panel.add(ViewPanel,*)", "panel.add(ControlPanel,*)"], "configurationStart": [717, 791, 1118, 1167, 1218], "configurationEnd": [785, 832, 1161, 1212, 1265], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1272, "focalAPIEnd": 1308, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()"], "useStart": [1314], "useEnd": [1342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sjlbos/SENG271-GroupProject/tree/master/src/controller/Application.java", "rawCode": "  /**\n   * Initializes the application. Creates the base JFrame container, instantiates the view and model\n   * classes, and creates the controller, ensuring the controller has the proper references to the\n   * view and model.\n   */\n  private void initialize() {\n\n    // Initialize the controller\n    this.controller = new Controller();\n\n    // Initialize the game panels\n    ViewPanel viewPanel = new ViewPanel(this.controller);\n    ControlPanel controlPanel = new ControlPanel(this.controller);\n    TitlePanel titlePanel = new TitlePanel();\n\n    // Load audio resources while board is being built\n    loadSoundResourcesIntoController();\n\n    // Set up the JFrame\n    this.applicationFrame = new JFrame(\"Ludo\");\n    this.applicationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    this.applicationFrame.setResizable(false);\n\n    JPanel topPanel = new JPanel();\n    topPanel.setLayout(new BoxLayout(topPanel, BoxLayout.LINE_AXIS));\n    topPanel.add(titlePanel);\n    topPanel.add(Box.createHorizontalGlue());\n    topPanel.setBackground(Color.BLACK);\n\n    JPanel backPanel = new JPanel(new BorderLayout());\n    backPanel.add(topPanel, BorderLayout.NORTH);\n    backPanel.add(viewPanel, BorderLayout.CENTER);\n    backPanel.add(controlPanel, BorderLayout.SOUTH);\n\n    this.applicationFrame.add(backPanel);\n    this.applicationFrame.pack();\n\n    // Add components to the controller\n    this.controller.setViewPanel(viewPanel);\n    this.controller.setTitlePanel(titlePanel);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3249, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JScrollPane)"], "configurationStart": [458], "configurationEnd": [487], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 493, "focalAPIEnd": 519, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JFrame.add(jFrame)"], "useStart": [526], "useEnd": [552], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rachitpant/UAlbany-Client/tree/master/src/java/org/jivesoftware/spark/ui/RawPacketSender.java", "rawCode": "  private void createGUI() {\n\n    JPanel southpanel = new JPanel(new BorderLayout());\n    southpanel.add(_inputarea, BorderLayout.CENTER);\n\n    JPanel buttonpanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n    buttonpanel.add(_clear);\n    buttonpanel.add(_sendButton);\n    southpanel.add(buttonpanel, BorderLayout.SOUTH);\n\n    _sendButton.addActionListener(this);\n    _clear.addActionListener(this);\n\n    _textarea.setBackground(Color.LIGHT_GRAY);\n    _mainpanel.add(_textscroller);\n    _mainpanel.add(southpanel);\n\n    _mainframe.add(_mainpanel);\n    _mainframe.setSize(500, 500);\n    _mainframe.setLocationRelativeTo(null);\n    _mainframe.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3250, "initialization": ["JFrame jFrame = new JPanel()"], "initializationStart": [218], "initializationEnd": [230], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)", "jFrame.add(JLabel)"], "configurationStart": [311, 975], "configurationEnd": [353, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1002, "focalAPIEnd": 1023, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JFrame.add(jFrame)"], "useStart": [1029], "useEnd": [1054], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidmerrick/Classes/tree/master/ECE 152/JavaAssn2/JavaAssign2.java", "rawCode": "  void startGui() {\n    /// Creates a JFrame object (the window)\n    JFrame mainframe = new JFrame(\"Tic Tac Toe Game\");\n    mainframe.setSize(500, 600);\n    JPanel panel = new JPanel();\n    JPanel outerPanel =\n        new JPanel(); // panel to hold the label in the top box, and the board in the bottom one\n    outerPanel.setLayout(new GridLayout(2, 1));\n\n    panel.setLayout(new GridLayout(3, 3));\n    panel.setPreferredSize(new Dimension(500, 500));\n\n    // Put our buttons into an array, instantiate them, add action listeners, and add them to the\n    // panel\n    JButton[] buttonArray = {A1, B1, C1, A2, B2, C2, A3, B3, C3};\n\n    for (int i = 0; i < 9; i++) {\n      button = buttonArray[i];\n      button.addActionListener(this);\n      panel.add(button);\n    }\n\n    /// Set the Program to exit when the window is closed\n    mainframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // add our label and game panels to the outer panel, then add that to the frame\n    outerPanel.add(label);\n    outerPanel.add(panel);\n    mainframe.add(outerPanel);\n\n    mainframe.setVisible(true); // Display the frame\n    GameHelper helper = new GameHelper();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3251, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [59, 229], "initializationEnd": [93, 274], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)", "panel.add(JLabel)", "panel.add(JTextField)"], "configurationStart": [99, 1413, 1444], "configurationEnd": [136, 1438, 1464], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1536, "focalAPIEnd": 1552, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.setResizable(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)", "jFrame.setLocation(int,int)"], "useStart": [1558, 1586, 1615, 1646, 1704, 1977], "useEnd": [1580, 1609, 1640, 1698, 1726, 2000], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WWI12a-SE/Bibliothekenverwaltung/tree/master/view/UserTable.java", "rawCode": "  private void validLoginname() {\n    final JFrame frame = new JFrame(\"Benutzername anlegen\");\n    frame.setLayout(new GridLayout(2, 1));\n    JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n    JPanel buttonpanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n    JLabel labelLoginname = new JLabel(\"Bitte Benutzername eingeben\");\n    final JTextField textField = new JTextField(15);\n    JButton buttonOK = new JButton(\"Best�tigen\");\n    JButton buttonCancel = new JButton(\"Abbrechen\");\n\n    buttonOK.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            String name = textField.getText().trim();\n            if (UserHandler.getInstance().isLoginUnique(name)) {\n              // erstelle eine neue Zeile\n              userTableModel.addNewRow(name);\n              frame.setVisible(false);\n            } else {\n              JOptionPane.showMessageDialog(\n                  null,\n                  \"Benutzername schon vergeben\" + \", bitte versuchen Sie es erneut!\",\n                  \"Achtung\",\n                  JOptionPane.OK_CANCEL_OPTION);\n            }\n          }\n        });\n\n    buttonCancel.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            frame.setVisible(false);\n          }\n        });\n\n    // Setze Layout\n    panel.add(labelLoginname);\n    panel.add(textField);\n    buttonpanel.add(buttonOK);\n    buttonpanel.add(buttonCancel);\n    frame.add(panel);\n    frame.add(buttonpanel);\n    frame.setSize(400, 150);\n    frame.setResizable(false);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n\n    // Position des Fenster auf dem Bildschirm in der Mitte\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    int x = (screenSize.width - frame.getWidth()) / 2;\n    int y = (screenSize.height - frame.getHeight()) / 2;\n    frame.setLocation(x, y);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3252, "initialization": ["JFrame jFrame = new JPanel()"], "initializationStart": [1426], "initializationEnd": [1438], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)"], "configurationStart": [1444], "configurationEnd": [1507], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1513, "focalAPIEnd": 1538, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "JFrame.add(jFrame)"], "useStart": [1544, 1577], "useEnd": [1571, 1601], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/baohaojun/davmail/tree/master/src/java/davmail/ui/tray/FrameGatewayTray.java", "rawCode": "  protected void createAndShowGUI() {\n    System.setProperty(\"swing.defaultlaf\", UIManager.getSystemLookAndFeelClassName());\n\n    image = DavGatewayTray.loadImage(\"tray.png\");\n    image2 = DavGatewayTray.loadImage(AwtGatewayTray.TRAY_ACTIVE_PNG);\n    inactiveImage = DavGatewayTray.loadImage(AwtGatewayTray.TRAY_INACTIVE_PNG);\n\n    mainFrame = new JFrame();\n    mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    mainFrame.setTitle(BundleMessage.format(\"UI_DAVMAIL_GATEWAY\"));\n    mainFrame.setIconImage(image);\n\n    JPanel errorPanel = new JPanel();\n    errorPanel.setBorder(BorderFactory.createTitledBorder(BundleMessage.format(\"UI_LAST_MESSAGE\")));\n    errorPanel.setLayout(new BoxLayout(errorPanel, BoxLayout.X_AXIS));\n    errorArea = new JTextPane();\n    errorArea.setEditable(false);\n    errorArea.setBackground(mainFrame.getBackground());\n    errorLabel = new JLabel();\n    errorPanel.add(errorLabel);\n    errorPanel.add(errorArea);\n\n    JPanel messagePanel = new JPanel();\n    messagePanel.setBorder(BorderFactory.createTitledBorder(BundleMessage.format(\"UI_LAST_LOG\")));\n    messagePanel.setLayout(new BoxLayout(messagePanel, BoxLayout.X_AXIS));\n\n    messageArea = new JTextPane();\n    messageArea.setText(BundleMessage.format(\"LOG_STARTING_DAVMAIL\"));\n    messageArea.setEditable(false);\n    messageArea.setBackground(mainFrame.getBackground());\n    messagePanel.add(messageArea);\n\n    JPanel mainPanel = new JPanel();\n    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n    mainPanel.add(errorPanel);\n    mainPanel.add(messagePanel);\n    mainFrame.add(mainPanel);\n\n    aboutFrame = new AboutFrame();\n    settingsFrame = new SettingsFrame();\n    buildMenu();\n\n    mainFrame.setMinimumSize(new Dimension(400, 180));\n    mainFrame.pack();\n    // workaround MacOSX\n    if (mainFrame.getSize().width < 400 || mainFrame.getSize().height < 180) {\n      mainFrame.setSize(\n          Math.max(mainFrame.getSize().width, 400), Math.max(mainFrame.getSize().height, 180));\n    }\n    // center frame\n    mainFrame.setLocation(\n        mainFrame.getToolkit().getScreenSize().width / 2 - mainFrame.getSize().width / 2,\n        mainFrame.getToolkit().getScreenSize().height / 2 - mainFrame.getSize().height / 2);\n    mainFrame.setVisible(true);\n\n    // display settings frame on first start\n    if (Settings.isFirstStart()) {\n      settingsFrame.setVisible(true);\n      settingsFrame.toFront();\n      settingsFrame.requestFocus();\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3253, "initialization": ["JPanel panel = showImg(BufferedImage)", "JFrame jFrame = new JFrame(String)"], "initializationStart": [200, 233], "initializationEnd": [212, 259], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 265, "focalAPIEnd": 277, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [283, 404], "useEnd": [329, 426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/naily/iph/tree/master/src/cn/fam1452/utils/Img.java", "rawCode": "  private JFrame imgFrame0(String fnm) {\n    // 读取图片\n    BufferedImage img = getImg(fnm);\n\n    // 转换为rgb阵\n    int[][][] rgbMat = getRGBMat(img);\n    // 再转换为图片\n    img = getImg(rgbMat);\n    JPanel p = showImg(img);\n    JFrame frame = new JFrame(\"Image JFrame\");\n    frame.add(p);\n    frame.setSize(img.getWidth(), img.getHeight());\n    // frame.setStartPosition(JXFrame.StartPosition.CenterInScreen);\n    frame.setVisible(true);\n    return frame;\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3254, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [48], "initializationEnd": [66], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 73, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)", "jFrame.addMouseListener(MouseAdapter)", "jFrame.addMouseWheelListener(*)", "jFrame.addMouseMotionListener(*)", "jFrame.add(Canvas)", "jFrame.add(JTextField,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JTextField,GridBagConstraints)"], "useStart": [94, 152, 182, 215, 243, 277, 316, 382, 843, 887, 931, 974], "useEnd": [146, 176, 209, 237, 271, 310, 350, 399, 880, 925, 968, 1012], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kokx/tue-2io21/tree/master/TestDesign/src/Display.java", "rawCode": "  void displayInitialize() {\n    JFrame frame = new JFrame(\"Test\");\n\n    frame.add(this);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(1000, 700);\n    frame.setLocation(200, 100);\n    frame.setVisible(true);\n    frame.addMouseListener(this);\n    frame.addMouseWheelListener(this);\n    frame.addMouseMotionListener(this);\n\n    this.setSize(1, 1);\n\n    frame.add(canvas);\n\n    JButton button = new JButton(\"Take input\");\n    button.addActionListener(this);\n\n    // write 'find $C_i$ to $C_j$ clusters'\n    // write '$n$ points'\n    // write '$x$ $y$' for each point\n\n    JButton button2 = new JButton(\"Run Algorithm\");\n    button2.addActionListener(this);\n\n    buttonDistribution = new JButton(\"Normal\");\n    buttonDistribution.addActionListener(this);\n\n    // frame.add(buttonDistribution,BorderLayout.WEST);\n    frame.add(density, BorderLayout.WEST);\n\n    frame.add(button2, BorderLayout.SOUTH);\n    frame.add(button, BorderLayout.NORTH);\n    frame.add(clusters, BorderLayout.EAST);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3255, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)"], "configurationStart": [355], "configurationEnd": [404], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 4244, "focalAPIEnd": 4282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(String,JPanel)", "JFrame.add(jFrame)"], "useStart": [4288, 4345], "useEnd": [4338, 4385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JCPP/GestionaleMagazzino/tree/master/src/gestionale/magazzino/grafica/responsabile/finestre/GraficaDipendenteSlezionato.java", "rawCode": "  public void init() {\n    finestra_DipSel = new JFrame(\"DipSel\");\n    finestra_DipSel.setSize(300, 400);\n\n    dimensione = getToolkit().getScreenSize().getSize();\n    x = (int) (dimensione.getWidth() - finestra_DipSel.getWidth()) / 2;\n    y = (int) (dimensione.getHeight() - finestra_DipSel.getHeight()) / 2;\n\n    pannello_Dipendente = new JPanel();\n    pannello_Dipendente.setLayout(new BorderLayout());\n\n    combo_Tipo = new JComboBox();\n    combo_Tipo.addItem(\"res\");\n    combo_Tipo.addItem(\"dip\");\n    combo_Tipo.setActionCommand(\"Combo Tipo\");\n    combo_Tipo.addActionListener(new MyListener());\n\n    combo_Stato = new JComboBox();\n    combo_Stato.addItem(\"Attivo\");\n    combo_Stato.addItem(\"Disabilitato\");\n    combo_Stato.setActionCommand(\"Combo Stato\");\n    combo_Stato.addActionListener(new MyListener());\n\n    layout = new GridBagLayout();\n    dati_Constraints = new GridBagConstraints();\n    opzioni_Constraints = new GridBagConstraints();\n\n    pannello_Dati = new JPanel();\n    pannello_Dati.setLayout(layout);\n\n    pannello_Opzioni = new JPanel();\n    pannello_Opzioni.setLayout(layout);\n\n    label_ID = new JLabel(\"ID :\");\n    text_ID = new JTextField(15);\n    text_ID.setEditable(false);\n    text_Nome = new JTextField(15);\n    label_Nome = new JLabel(\"Nome :\");\n    label_Cognome = new JLabel(\"Cognome :\");\n    text_Cognome = new JTextField(15);\n    label_Tipo = new JLabel(\"Tipo :\");\n    text_Tipo = new JTextField(15);\n    label_Email = new JLabel(\"Email :\");\n    text_Email = new JTextField(15);\n    label_Stato = new JLabel(\"Stato :\");\n    text_Stato = new JTextField(15);\n\n    bottone_Modifica = new JButton(\"Modifica Dipendente\");\n    bottone_Modifica.setActionCommand(\"Modifica Dipendente Responsabile\");\n    bottone_Modifica.addActionListener(new MyListener());\n    bottone_Annulla = new JButton(\"Indietro\");\n    bottone_Annulla.setActionCommand(\"Annulla Dipendente Responsabile\");\n    bottone_Annulla.addActionListener(new MyListener());\n    bottone_Rimuovi = new JButton(\"Rimuovi Dipendente\");\n    bottone_Rimuovi.setActionCommand(\"Rimuovi Dipendente Responsabile\");\n    bottone_Rimuovi.addActionListener(new MyListener());\n\n    dati_Constraints.fill = GridBagConstraints.HORIZONTAL;\n    dati_Constraints.weightx = 1.0;\n    dati_Constraints.weighty = 1.0;\n\n    dati_Constraints.gridx = 0;\n    dati_Constraints.gridy = 0;\n    pannello_Dati.add(label_ID, dati_Constraints);\n    dati_Constraints.gridx = 1;\n    dati_Constraints.gridy = 0;\n    pannello_Dati.add(text_ID, dati_Constraints);\n\n    dati_Constraints.gridx = 0;\n    dati_Constraints.gridy = 1;\n    pannello_Dati.add(label_Nome, dati_Constraints);\n    dati_Constraints.gridx = 1;\n    dati_Constraints.gridy = 1;\n    pannello_Dati.add(text_Nome, dati_Constraints);\n\n    dati_Constraints.gridx = 0;\n    dati_Constraints.gridy = 2;\n    pannello_Dati.add(label_Cognome, dati_Constraints);\n    dati_Constraints.gridx = 1;\n    dati_Constraints.gridy = 2;\n    pannello_Dati.add(text_Cognome, dati_Constraints);\n\n    dati_Constraints.gridx = 0;\n    dati_Constraints.gridy = 3;\n    pannello_Dati.add(label_Email, dati_Constraints);\n    dati_Constraints.gridx = 1;\n    dati_Constraints.gridy = 3;\n    pannello_Dati.add(text_Email, dati_Constraints);\n\n    dati_Constraints.gridx = 0;\n    dati_Constraints.gridy = 4;\n    pannello_Dati.add(label_Tipo, dati_Constraints);\n    dati_Constraints.gridx = 1;\n    dati_Constraints.gridy = 4;\n    pannello_Dati.add(combo_Tipo, dati_Constraints);\n\n    dati_Constraints.gridx = 0;\n    dati_Constraints.gridy = 5;\n    pannello_Dati.add(label_Stato, dati_Constraints);\n    dati_Constraints.gridx = 1;\n    dati_Constraints.gridy = 5;\n    pannello_Dati.add(combo_Stato, dati_Constraints);\n\n    opzioni_Constraints.fill = GridBagConstraints.HORIZONTAL;\n    opzioni_Constraints.weightx = 1.0;\n    opzioni_Constraints.weighty = 1.0;\n    opzioni_Constraints.gridx = 0;\n    opzioni_Constraints.gridy = 0;\n    pannello_Opzioni.add(bottone_Modifica, opzioni_Constraints);\n    opzioni_Constraints.gridx = 0;\n    opzioni_Constraints.gridy = 1;\n    pannello_Opzioni.add(bottone_Rimuovi, opzioni_Constraints);\n    opzioni_Constraints.gridx = 0;\n    opzioni_Constraints.gridy = 2;\n    pannello_Opzioni.add(bottone_Annulla, opzioni_Constraints);\n\n    pannello_Dipendente.add(pannello_Dati);\n    pannello_Dipendente.add(\"South\", pannello_Opzioni);\n\n    finestra_DipSel.add(pannello_Dipendente);\n\n    finestra_DipSel.addWindowListener(new MyListener());\n    finestra_DipSel.setSize(300, 400);\n    finestra_DipSel.setLocation(x, y);\n    finestra_DipSel.setDefaultCloseOperation(DISPOSE_ON_CLOSE);\n    finestra_DipSel.setResizable(false);\n    finestra_DipSel.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3256, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [589], "initializationEnd": [635], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [660], "configurationEnd": [721], "guardCondition": "panel.getTopLevelAncestor()==null", "guardType": "IF {", "guardExpressionStart": 36, "guardExpressionEnd": 83, "guardBlockStart": 36, "guardBlockEnd": 1281, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 731, "focalAPIEnd": 754, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getMenuBarFor(jFrame)", "jFrame.setJMenuBar(JMenuBar)", "new VisibilityOption(String,jFrame)", "jFrame.setVisible(boolean)"], "useStart": [782, 764, 933, 1037], "useEnd": [828, 829, 965, 1059], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rzymek/vassal-src/tree/master/src/VASSAL/chat/ui/ChatServerControls.java", "rawCode": "  public void toggleVisible() {\n    if (controlPanel.getTopLevelAncestor() == null) {\n      if (GlobalOptions.getInstance().isUseSingleWindow()) {\n        splitter =\n            new ComponentSplitter()\n                .splitRight(GameModule.getGameModule().getControlPanel(), controlPanel, false);\n        splitter.revalidate();\n        final Runnable runnable =\n            new Runnable() {\n              public void run() {\n                splitter.showComponent();\n              }\n            };\n        SwingUtilities.invokeLater(runnable);\n      } else {\n        final JFrame frame = new JFrame(Resources.getString(\"Chat.server\")); // $NON-NLS-1$\n        frame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);\n        frame.add(controlPanel);\n        frame.setJMenuBar(MenuManager.getInstance().getMenuBarFor(frame));\n\n        final String key = \"BoundsOfClientWindow\"; // $NON-NLS-1$\n        final PositionOption pos = new VisibilityOption(key, frame);\n        GameModule.getGameModule().getPrefs().addOption(pos);\n        frame.setVisible(true);\n      }\n    } else if (splitter != null) {\n      splitter.toggleVisibility();\n    } else {\n      controlPanel\n          .getTopLevelAncestor()\n          .setVisible(!controlPanel.getTopLevelAncestor().isVisible());\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3257, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setBounds(int,int,int,int)"], "configurationStart": [592], "configurationEnd": [642], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 766, "focalAPIEnd": 789, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JLabel)", "jFrame.add(JLabel)", "jFrame.add(JLabel)", "jFrame.add(JButton)", "jFrame.add(JPanel)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [797, 825, 980, 1007, 1032, 1110, 1146, 1179, 1222, 1267], "useEnd": [817, 848, 1001, 1026, 1054, 1139, 1173, 1216, 1261, 1294], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/f-breidenstein/rock-paper-scissors/tree/master/src/rps/client/ui/Menu.java", "rawCode": "  private void buildMenuStructure() {\n    menuGame.setMnemonic(KeyEvent.VK_G);\n\n    menuBar.add(menuGame);\n    menuBar.add(menuTheme);\n    menuBar.add(menuInfo);\n\n    menuInfo.add(infoAbout);\n    menuInfo.add(infoHigh);\n\n    menuTheme.add(themeDefault);\n    menuTheme.add(themeMinimal);\n\n    menuGame.add(menuGameNew);\n    menuGame.add(menuGameSurrender);\n    menuGame.addSeparator();\n    menuGame.add(menuGameExit);\n    frame.setJMenuBar(menuBar);\n\n    for (int i = 0; i < 10; i++) {\n\n      nicks[i] = new JLabel(\"-\");\n      ai[i] = new JLabel(\"-\");\n      score[i] = new JLabel(\"-\");\n\n      nicks[i].setBounds(20, (i + 1) * 30 + 30, 150, 20);\n      ai[i].setBounds(190, (i + 1) * 30 + 30, 100, 20);\n      score[i].setBounds(350, (i + 1) * 30 + 30, 100, 20);\n\n      highFrame.add(nicks[i]);\n      highFrame.add(ai[i]);\n      highFrame.add(score[i]);\n    }\n\n    hsNick.setBounds(20, 20, 150, 20);\n    hsAi.setBounds(190, 20, 100, 20);\n    hsScore.setBounds(350, 20, 100, 20);\n\n    highFrame.add(hsNick);\n    highFrame.add(hsAi);\n    highFrame.add(hsScore);\n\n    closeHighscore.setBounds(120, 390, 210, 30);\n    highFrame.add(closeHighscore);\n\n    highFrame.add(new JLabel());\n    highFrame.setLocationRelativeTo(null);\n    highFrame.setBounds(500, 300, 450, 480);\n    highFrame.setVisible(false);\n\n    menuGameSurrender.setEnabled(false);\n    menuGameNew.setEnabled(false);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3258, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [42, 173], "initializationEnd": [63, 203], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(JPanel)", "jFrame.add(JScrollPane)", "panel.add(MonitorPanel,*)", "panel.add(JPanel,GridBagConstraints)", "panel.add(JPanel,GridBagConstraints)"], "configurationStart": [124, 367, 474, 1049, 2499], "configurationEnd": [150, 388, 513, 1091, 2536], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 2543, "focalAPIEnd": 2560, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setResizable(boolean)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [2594, 2612, 2643, 2682, 2740], "useEnd": [2606, 2637, 2676, 2734, 2762], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bgs100/DCPU-16/tree/master/net/ian/dcpu/DCPULauncher.java", "rawCode": "  public void init() {\n    JFrame frame = new JFrame(\"DCPU-16\");\n\n    setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n    frame.setContentPane(this);\n\n    JPanel output = new JPanel(new BorderLayout());\n\n    codeEntry = new JTextArea(0, 40);\n    codeEntry.setFont(new Font(\"Monospaced\", Font.BOLD, 16));\n    JScrollPane codeScroll = new JScrollPane(codeEntry);\n    frame.add(codeScroll);\n\n    display = new MonitorPanel(monitor);\n    display.addKeyListener(keyboard);\n    output.add(display, BorderLayout.NORTH);\n\n    JPanel buttonBox = new JPanel(new GridLayout(1, 0));\n\n    JButton runButton = new JButton(\"Run\");\n    runButton.setActionCommand(\"run\");\n    runButton.addActionListener(this);\n    buttonBox.add(runButton);\n\n    JButton stepButton = new JButton(\"Step\");\n    stepButton.setActionCommand(\"step\");\n    stepButton.addActionListener(this);\n    buttonBox.add(stepButton);\n\n    JButton stopButton = new JButton(\"Stop\");\n    stopButton.setActionCommand(\"stop\");\n    stopButton.addActionListener(this);\n    buttonBox.add(stopButton);\n\n    output.add(buttonBox, BorderLayout.CENTER);\n\n    JPanel panel = new JPanel(new GridLayout(0, 4));\n    panel.add(new JLabel(\"Registers\"));\n    panel.add(new JLabel(\"Bin\"));\n    panel.add(new JLabel(\"Hex\"));\n    panel.add(new JLabel(\"Dec\"));\n\n    // 3 for Bin, Hex, and Dec\n    registers = new JLabel[Register.values().length][];\n    for (Register r : Register.values()) {\n      registers[r.ordinal()] = new JLabel[3];\n      panel.add(new JLabel(r.toString() + \": \"));\n      for (int i = 0; i < 3; i++) {\n        registers[r.ordinal()][i] = new JLabel();\n        panel.add(registers[r.ordinal()][i]);\n      }\n    }\n\n    String specialNames[] = {\"SP\", \"PC\", \"EX\"};\n    special = new Cell[3];\n    special[0] = cpu.SP;\n    special[1] = cpu.PC;\n    special[2] = cpu.EX;\n    specialLabels = new JLabel[specialNames.length][];\n\n    for (int i = 0; i < specialNames.length; i++) {\n      specialLabels[i] = new JLabel[3];\n      panel.add(new JLabel(specialNames[i] + \": \"));\n      for (int j = 0; j < 3; j++) {\n        specialLabels[i][j] = new JLabel();\n        panel.add(specialLabels[i][j]);\n      }\n    }\n\n    panel.add(new JLabel(\"Instruction:\"));\n    instructionLabel = new JLabel();\n    panel.add(new JLabel(\"...\"));\n    panel.add(new JLabel(\"...\"));\n    panel.add(instructionLabel);\n\n    panel.add(new JLabel(\"Cycle:\"));\n    cycleLabel = new JLabel();\n    panel.add(new JLabel(\"...\"));\n    panel.add(new JLabel(\"...\"));\n    panel.add(cycleLabel);\n\n    output.add(panel, BorderLayout.SOUTH);\n\n    frame.add(output);\n\n    // Display the window.\n    frame.pack();\n    frame.setResizable(false);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3259, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "this.panel==null", "guardType": "IF {", "guardExpressionStart": 81, "guardExpressionEnd": 106, "guardBlockStart": 81, "guardBlockEnd": 208, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 177, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KaneRoot/public/tree/master/ls5/poo/jeu_java/jeu/controleur/ControleurMenu.java", "rawCode": "  /** Affichage du menu de choix de la carte. */\n  private void choixMap() {\n    if (this.jp_maps == null) {\n      this.jp_maps = new MenuCartes(this, repertoire_cartes);\n      this.jf_jeu.add(jp_maps);\n    }\n\n    this.jp_maps.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3260, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [274, 327], "initializationEnd": [300, 364], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.add(Element)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(Component)"], "configurationStart": [1440, 1475, 1539, 1568], "configurationEnd": [1468, 1533, 1562, 1601], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1607, "focalAPIEnd": 1629, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1635], "useEnd": [1657], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HtmlToJavaWindowsBuilder/HtmlToJavaWindowsBuilder/tree/master/test/html2windows/css/BorderTest.java", "rawCode": "  @Test\n  public void testIllegalProperty() throws Exception {\n\n    /**\n     * Setup\n     *\n     * <p>Create Jframe and panel with customLayoutManager. Create document with BorderPainter.\n     * Create element with illegal style properties in it.\n     */\n    JFrame frame = new JFrame(\"Button Frame\");\n    JPanel customPanel = new JPanel(new CustomLayoutManager());\n\n    Document document =\n        new Document() {\n          @Override\n          public CSSPainter getPainter() {\n            return new BorderPainter();\n          }\n        };\n\n    // create div\n    String tagName = \"div\";\n    ElementInter elementInter = new ElementInter(tagName);\n    elementInter.setOwnerDocument(document);\n\n    Element elementNode = elementInter;\n    elementNode.setPreferredSize(new Dimension(100, 100));\n\n    /*\n     * Create style with width \"a\", top \"b\",\n     * border-style \"hello\", and color \"color\"\n     */\n    Style style = elementNode.getStyle();\n    style.setProperty(\"border-width\", \"2\");\n    style.setProperty(\"width\", \"a\");\n    style.setProperty(\"height\", \"20\");\n    style.setProperty(\"top\", \"b\");\n    style.setProperty(\"left\", \"10\");\n    style.setProperty(\"bottom\", \"50\");\n    style.setProperty(\"border-style\", \"hello\");\n    style.setProperty(\"border-color\", \"color\");\n\n    /**\n     * Test\n     *\n     * <p>Add panel to JFrame with element with illegal style properties.\n     *\n     * <p>Expect non crashed JFrame with border.\n     */\n    customPanel.add(elementNode);\n\n    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n    frame.setSize(400, 400);\n    frame.setLocationRelativeTo(null);\n    frame.add(customPanel);\n    frame.setVisible(true);\n\n    try {\n      Thread.sleep(2000);\n    } catch (Exception e) {\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3261, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)", "jFrame.setJMenuBar(JMenuBar)"], "configurationStart": [28, 53, 161, 196, 559], "configurationEnd": [47, 101, 190, 214, 576], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1293, "focalAPIEnd": 1301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/JavaProgrammingTutorials/MyMenu.java", "rawCode": "  public void frame() {\n    f.setSize(400, 400);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    // Position our frame on the middle of the screen\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n\n    // To create a menu we will need 3 different objects\n    // 1. MenuBar\n    // 2. Menu (Choices on the Menu Bar like File , Edit)\n    // 3. MenuItems (Inside the Menu - like the options of the File e.x. Open , Exit)\n\n    // 1. MenuBar\n    // Create a MenuBar \"mb\"\n    JMenuBar mb = new JMenuBar();\n    // Set our MenuBar in our JFrame\n    f.setJMenuBar(mb);\n\n    // 2. Menu (Choices on the Menu Bar like File , Edit)\n    // Create the Menu \"File\"\n    JMenu file = new JMenu(\"File\");\n    // Add the menu \"File\" into the MenuBar \"mb\"\n    mb.add(file);\n\n    // Create the Menu \"Edit\"\n    JMenu edit = new JMenu(\"File\");\n    // Add the menu \"Edit\" into the MenuBar \"mb\"\n    mb.add(edit);\n\n    // 3. MenuItems (Inside the Menu - like the options of the File e.x. Open , Exit)\n    // Create the MenuItem \"Open\"\n    JMenuItem open = new JMenuItem(\"Open\");\n    // Add the MenuItem \"Open\" to the Menu \"File\"\n    file.add(open);\n\n    // Create the MenuItem \"Exit\"\n    JMenuItem exit = new JMenuItem(\"Exit\");\n    // Add the MenuItem \"Exit\" to the Menu \"File\"\n    file.add(exit);\n\n    f.add(p);\n\n    // Send a message when click File->Exit and exit the programm using an ActionListener\n    exit.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            System.out.println(\"exit\");\n            System.exit(0);\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3262, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "this.panel==null", "guardType": "IF {", "guardExpressionStart": 81, "guardExpressionEnd": 106, "guardBlockStart": 81, "guardBlockEnd": 208, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 177, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KaneRoot/javagame/tree/master/jeu/controleur/ControleurMenu.java", "rawCode": "  /** Affichage du menu de choix de la carte. */\n  private void choixMap() {\n    if (this.jp_maps == null) {\n      this.jp_maps = new MenuCartes(this, repertoire_cartes);\n      this.jf_jeu.add(jp_maps);\n    }\n\n    this.jp_maps.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3263, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel(*)"], "initializationStart": [58, 203], "initializationEnd": [70, 233], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLayout(GridBagLayout)", "panel.setBackground(Color)", "panel.setBounds(int,int,int,int)", "panel.add(CSliderPane)"], "configurationStart": [76, 130, 155, 239, 271, 385], "configurationEnd": [124, 149, 186, 265, 297, 393], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 399, "focalAPIEnd": 407, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [413], "useEnd": [431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rkipper/AppInventor_RK/tree/master/appinventor/blockslib/src/openblocks/codeblockutil/CSliderPane.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setSize(400, 400);\n    f.setLayout(new BorderLayout());\n    JPanel p = new JPanel(new BorderLayout());\n    p.setBackground(Color.red);\n    p.setBounds(0, 0, 400, 50);\n    CSliderPane s = new CSliderPane(0f, 10f, 1f);\n    s.setBounds(0, 0, 200, 60);\n    p.add(s);\n    f.add(p);\n    f.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3264, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 38, "focalAPIEnd": 51, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenStack-Capstone/burrow-java/tree/master/src/main/java/org/openstack/burrow/example/syslog/SyslogHUD.java", "rawCode": "  public void embedIn(JFrame f) {\n    f.add(panel1);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3265, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [223], "initializationEnd": [263], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [269], "configurationEnd": [321], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 362, "focalAPIEnd": 377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [411, 429], "useEnd": [423, 451], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbar061/FruitProcessingPlant/tree/master/FruitProcessingPlant/src/controller/Controller.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  private void createAndShowGUI() {\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"Production Line Controller\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Add content to the window.\n    frame.add(this);\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3266, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel(*)"], "initializationStart": [66, 950], "initializationEnd": [78, 991], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.removeAll()", "jFrame.setBackground(Color)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLayout(GridBagLayout)", "jFrame.add(JLabel,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.setTitle(String)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [35, 407, 445, 536, 587, 726, 768, 833, 1061, 1100], "configurationEnd": [52, 439, 497, 581, 622, 762, 826, 928, 1094, 1152], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1158, "focalAPIEnd": 1174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1180], "useEnd": [1202], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tdgunes/graydeer/tree/master/GrayDeer/src/instructor/InstructorGUI.java", "rawCode": "  public void refreshFrame() {\n    frame.removeAll();\n    frame = new JFrame();\n\n    ArrayList<Student> students = studentDB.getStudents();\n    /* for (Student student : students) {\n    JButton button = new JButton(student.getName() + \" \" + student.getSurname()+\" \"+student.getSchoolNumber());\n    button.addActionListener(new HomeworkListener(student.getPrivateKey()));\n    frame.add(button);\n    }*/\n\n    frame.setBackground(Color.WHITE);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    rows = 1 + students.size();\n    frame.setSize(columns * 150, (rows + 1) * 40);\n    frame.setLayout(new BorderLayout());\n    // This is the margin on the left-hand side of the frame\n    JLabel margin = new JLabel(\" \");\n    frame.add(margin, BorderLayout.WEST);\n    frame.add(this.getControlPanel(frame), BorderLayout.NORTH);\n\n    frame.setTitle(\"GrayDeer Instructor - \" + students.size() + \" students in \" + Constants.dbName);\n\n    JPanel panel = new JPanel(new GridLayout(rows, columns));\n    addTitles(panel);\n    addStudentsToTable(students, panel);\n\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(panel);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3267, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [88, 280], "initializationEnd": [100, 292], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JLabel)", "panel.add(JTextField)"], "configurationStart": [106, 137, 191, 226, 645, 663, 678, 696, 712, 728], "configurationEnd": [125, 185, 220, 244, 657, 671, 690, 705, 722, 737], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 776, "focalAPIEnd": 784, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/DatabaseApplicationTutorials/three/Gui.java", "rawCode": "  public void frame() {\n\n    // Initialization Starts\n\n    // Initialize JFrame\n    f = new JFrame();\n    f.setSize(600, 400);\n    ;\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n\n    // Initialize JPanel\n    p = new JPanel();\n\n    // Initialize JLabels\n    fname = new JLabel(\"First Name\");\n    lname = new JLabel(\"Last Name\");\n    age = new JLabel(\"Age\");\n\n    // Initialize Text Fields\n    t = new JTextField(10);\n    t1 = new JTextField(10);\n    t2 = new JTextField(10);\n\n    // Initialization Ends\n\n    // Add them to eache other..\n\n    // Add Components to the JPanel\n    p.add(fname);\n    p.add(t);\n\n    p.add(lname);\n    p.add(t1);\n\n    p.add(age);\n    p.add(t2);\n\n    // Add Jpanel to the JFrame\n    f.add(p);\n\n    try {\n      rs.next();\n      t.setText(rs.getString(\"Fname\"));\n      t1.setText(rs.getString(\"Lname\"));\n      t2.setText(rs.getString(\"Age\"));\n\n    } catch (Exception ex) {\n\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3268, "initialization": ["JFrame jFrame = createVerticalBox()"], "initializationStart": [641], "initializationEnd": [676], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 684, "focalAPIEnd": 711, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "add(jFrame,*)"], "useStart": [719, 799], "useEnd": [746, 840], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gortega017/Scrips/tree/master/projects/Project2/src/DrawingPanel.java", "rawCode": "    private void setupLayout() {\n      JPanel southPanel1 = new JPanel();\n      southPanel1.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));\n      southPanel1.add(image1Label);\n      southPanel1.add(slider);\n      southPanel1.add(image2Label);\n      southPanel1.add(javax.swing.Box.createHorizontalStrut(20));\n\n      JPanel southPanel2 = new JPanel();\n      southPanel2.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));\n      southPanel2.add(diffPixelsLabel);\n      southPanel2.add(javax.swing.Box.createHorizontalStrut(20));\n      southPanel2.add(box);\n      southPanel2.add(colorButton);\n\n      Container southPanel = javax.swing.Box.createVerticalBox();\n      southPanel.add(southPanel1);\n      southPanel.add(southPanel2);\n\n      frame.add(this, BorderLayout.CENTER);\n      frame.add(southPanel, BorderLayout.SOUTH);\n    }\n"}, {"dataset": "jFrameAdd", "exampleID": 3269, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [728, 761], "initializationEnd": [740, 773], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 779, "focalAPIEnd": 795, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nasasync/mission-control-technologies/tree/master/platform/src/test/java/gov/nasa/arc/mct/defaults/view/TestDefaultNodeView.java", "rawCode": "  @BeforeMethod\n  public void setup() {\n    MockitoAnnotations.initMocks(this);\n    mockViewManifestation =\n        new View() {\n          private static final long serialVersionUID = -3939874904884082433L;\n        };\n\n    when(mockComponent.getDisplayName()).thenReturn(\"XXX\");\n    when(mockComponent.getExtendedDisplayName()).thenReturn(\"XXX\");\n    // Set up JTree for updateMonitoredGUI() calls\n    rootNode =\n        new MCTMutableTreeNode(\n            new View() {\n              private static final long serialVersionUID = 3318467817844246495L;\n            });\n    model = new DefaultTreeModel(rootNode);\n    tree = new JTree(model);\n    rootNode.setParentTree(tree);\n    // Set up tree's UI containers\n    JFrame frame = new JFrame();\n    JPanel panel = new JPanel();\n    frame.add(panel);\n    panel.add(tree);\n\n    nodeViewManifestation =\n        new NodeViewManifestation(\n            mockComponent, new ViewInfo(NodeViewManifestation.class, \"\", ViewType.NODE));\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3270, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [45, 93], "initializationEnd": [72, 105], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 111, "focalAPIEnd": 127, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.addKeyListener(ShortcutManager)", "jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [215, 259, 288, 346], "useEnd": [253, 282, 340, 368], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RoelSchevenels/Quiz-project/tree/master/Quiz/src/tetrisdemo/GameClient.java", "rawCode": "  public void makeGUI() {\n    JFrame frame = new JFrame(\"Tetris client\");\n    JPanel panel = new JPanel();\n    frame.add(panel);\n    panel.add(new JLabel(\"<html>←↓→ om te bewegen<br />↑ om te roteren</html>\"));\n    frame.addKeyListener(new KeyHandler());\n    frame.setSize(300, 200);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3271, "initialization": ["JFrame jFrame = new JLayeredPane()"], "initializationStart": [95], "initializationEnd": [113], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.setLayout(GridBagLayout)", "panel.setBounds(int,int,int,int)"], "configurationStart": [119, 201, 560], "configurationEnd": [195, 228, 635], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 726, "focalAPIEnd": 753, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLayer(JPanel,int)", "jFrame.add(JPanel)", "jFrame.setLayer(JPanel,int)", "jFrame.add(JPanel)", "jFrame.setLayer(JPanel,int)", "jFrame.add(JPanel)", "jFrame.setLayer(JPanel,int)"], "useStart": [759, 1112, 1142, 1478, 1505, 6231, 6260], "useEnd": [794, 1136, 1174, 1499, 1534, 6254, 6291], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/theMaster23/CSE361ProjectSMC/tree/master/NineMensMorris/src/myClasses/GameGUI.java", "rawCode": "  public void drawBoard() {\n    // Initialize LayeredPane\n    final JLayeredPane layeredPane = new JLayeredPane();\n    layeredPane.setBounds(0, 0, contentPane.getWidth(), contentPane.getHeight());\n    layeredPane.setLayout(null);\n    if (!isLoaded) boardComponents.add(layeredPane);\n    contentPane.add(layeredPane);\n\n    // Create Background JPanel & Add to LayeredPane on Layer 1\n    JPanel background;\n    try {\n      background = new JPanelWithBackground(boardS);\n    } catch (IOException e) {\n      e.printStackTrace();\n      background = null;\n    }\n    background.setBounds(0, 0, contentPane.getWidth(), contentPane.getHeight());\n    background.setVisible(true);\n    if (!isLoaded) boardComponents.add(background);\n    layeredPane.add(background);\n    layeredPane.setLayer(background, 1);\n\n    // Create Buttons JPanel & Add to LayerdPane on Layer 2\n    JPanel buttons = new JPanel();\n    buttons.setOpaque(false);\n    buttons.setBounds(0, 0, contentPane.getWidth(), contentPane.getHeight());\n    buttons.setVisible(true);\n    buttons.setLayout(null);\n    if (!isLoaded) boardComponents.add(buttons);\n    layeredPane.add(buttons);\n    layeredPane.setLayer(buttons, 2);\n\n    // Create Menu JPanel & Add to LayeredPane on Layer 3\n    final JPanel menu = new JPanel();\n    menu.setOpaque(false);\n    menu.setBounds(0, 0, contentPane.getWidth(), contentPane.getHeight());\n    menu.setVisible(true);\n    menu.setLayout(null);\n    if (!isLoaded) boardComponents.add(menu);\n    layeredPane.add(menu);\n    layeredPane.setLayer(menu, 3);\n\n    // Add undo button to JPanel\n    final JButton undo = new JButton(\"UNDO\");\n    undo.addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseEntered(MouseEvent arg0) {\n            undo.setForeground(Color.LIGHT_GRAY);\n          }\n\n          @Override\n          public void mouseExited(MouseEvent arg0) {\n            undo.setForeground(Color.WHITE);\n          }\n\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            isUndoTurn = true;\n          }\n        });\n    undo.setFont(coalition.deriveFont((float) 40));\n    undo.setForeground(Color.WHITE);\n    undo.setBounds(20, contentPane.getHeight() - 100, 200, 65);\n    undo.setOpaque(false);\n    undo.setContentAreaFilled(false);\n    undo.setBorderPainted(false);\n    if (!isLoaded) boardComponents.add(undo);\n    buttons.add(undo);\n\n    // Add skip button to JPanel\n    final JButton skip = new JButton(\"SKIP\");\n    skip.addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseEntered(MouseEvent arg0) {\n            skip.setForeground(Color.LIGHT_GRAY);\n          }\n\n          @Override\n          public void mouseExited(MouseEvent arg0) {\n            skip.setForeground(Color.WHITE);\n          }\n\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            isTurnSkip = true;\n          }\n        });\n    skip.setFont(coalition.deriveFont((float) 40));\n    skip.setForeground(Color.WHITE);\n    skip.setBounds((contentPane.getWidth() / 2) - 100, contentPane.getHeight() - 100, 200, 65);\n    skip.setOpaque(false);\n    skip.setContentAreaFilled(false);\n    skip.setBorderPainted(false);\n    if (!isLoaded) boardComponents.add(skip);\n    buttons.add(skip);\n\n    // Add menu button to JPanel\n    final JButton gameMenu = new JButton(\"MENU\");\n    gameMenu.addMouseListener(\n        new MouseAdapter() {\n\n          @Override\n          public void mouseEntered(MouseEvent arg0) {\n            gameMenu.setForeground(Color.LIGHT_GRAY);\n          }\n\n          @Override\n          public void mouseExited(MouseEvent arg0) {\n            gameMenu.setForeground(Color.WHITE);\n          }\n\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            // Draw Menu\n            drawGameMenu(menu);\n\n            // Repaint\n            contentPane.repaint();\n          }\n        });\n    gameMenu.setFont(coalition.deriveFont((float) 40));\n    gameMenu.setForeground(Color.WHITE);\n    gameMenu.setBounds(contentPane.getWidth() - 220, contentPane.getHeight() - 100, 200, 65);\n    gameMenu.setOpaque(false);\n    gameMenu.setContentAreaFilled(false);\n    gameMenu.setBorderPainted(false);\n    if (!isLoaded) boardComponents.add(gameMenu);\n    buttons.add(gameMenu);\n\n    // Add Player One Name JLabel and add to JPanel\n    JLabel pOne = new JLabel(\"<html><center>\" + players[0].getName().toUpperCase());\n    pOne.setForeground(Color.LIGHT_GRAY);\n    pOne.setHorizontalAlignment(SwingConstants.CENTER);\n    pOne.setFont(coalition.deriveFont((float) 25));\n    pOne.setBounds(39, 233, 218, 25);\n\n    if (!isLoaded) boardComponents.add(pOne);\n    buttons.add(pOne);\n\n    JLabel pOneColor = new JLabel(\"<html><center>BLUE\");\n    pOneColor.setForeground(Color.BLUE);\n    pOneColor.setHorizontalAlignment(SwingConstants.CENTER);\n    pOneColor.setFont(coalition.deriveFont((float) 25));\n    pOneColor.setBounds(\n        pOne.getX(), pOne.getY() + pOne.getHeight(), pOne.getWidth(), pOne.getHeight());\n\n    if (!isLoaded) boardComponents.add(pOneColor);\n    buttons.add(pOneColor);\n\n    // Add Player Two Name JLabel and add to JPanel\n    JLabel pTwo = new JLabel();\n    pTwo.setText(\"<html><center>\" + players[1].getName().toUpperCase());\n    pTwo.setForeground(Color.LIGHT_GRAY);\n    pTwo.setHorizontalAlignment(SwingConstants.CENTER);\n    pTwo.setFont(coalition.deriveFont((float) 25));\n    pTwo.setBounds(862, 233, 218, 25);\n    if (!isLoaded) boardComponents.add(pTwo);\n    buttons.add(pTwo);\n\n    JLabel pTwoColor = new JLabel(\"<html><center>RED\");\n    pTwoColor.setForeground(Color.RED);\n    pTwoColor.setHorizontalAlignment(SwingConstants.CENTER);\n    pTwoColor.setFont(coalition.deriveFont((float) 25));\n    pTwoColor.setBounds(\n        pTwo.getX(), pTwo.getY() + pTwo.getHeight(), pTwo.getWidth(), pTwo.getHeight());\n\n    if (!isLoaded) boardComponents.add(pTwoColor);\n    buttons.add(pTwoColor);\n\n    // Create Pieces JPanel & Add to LayerdPane on Layer 3\n    JPanel pieces = new JPanel();\n    pieces.setOpaque(false);\n    pieces.setBounds(0, 0, contentPane.getWidth(), contentPane.getHeight());\n    pieces.setVisible(true);\n    pieces.setLayout(null);\n    if (!isLoaded) boardComponents.add(pieces);\n    layeredPane.add(pieces);\n    layeredPane.setLayer(pieces, 3);\n\n    // Create Player Turn info JLabels\n    for (int i = 0; i < info.length; i++) {\n      info[i] = new JLabel();\n      info[i].setOpaque(false);\n      info[i].setVisible(true);\n      info[i].setForeground(Color.CYAN);\n      info[i].setFont(coalition.deriveFont((float) 18));\n      info[i].setHorizontalAlignment(SwingConstants.CENTER);\n      info[i].setVerticalAlignment(SwingConstants.CENTER);\n      if (!isLoaded) boardComponents.add(info[i]);\n      pieces.add(info[i]);\n    }\n\n    // Set individual bounds, etc.\n    info[0].setBounds(pOne.getX(), pOne.getY() - 100, pOne.getWidth(), 75);\n    info[1].setBounds(pTwo.getX(), pTwo.getY() - 100, pTwo.getWidth(), 75);\n\n    // Create FlyMode Banners\n    for (int i = 0; i < flyModeBanners.length; i++) {\n      flyModeBanners[i] = new JLabel();\n      flyModeBanners[i].setOpaque(false);\n      flyModeBanners[i].setVisible(true);\n      flyModeBanners[i].setForeground(Color.YELLOW);\n      flyModeBanners[i].setFont(coalition.deriveFont((float) 18));\n      flyModeBanners[i].setBounds(info[i].getX(), info[i].getY() - 75, info[i].getWidth(), 50);\n      flyModeBanners[i].setHorizontalAlignment(SwingConstants.CENTER);\n      flyModeBanners[i].setVerticalAlignment(SwingConstants.CENTER);\n      if (!isLoaded) boardComponents.add(flyModeBanners[i]);\n      pieces.add(flyModeBanners[i]);\n    }\n\n    // Create Blue Side Pieces\n    for (int i = 0; i < 9; i++) {\n      try {\n        bSide[i] = new JPanelWithBackground(blue);\n      } catch (IOException e) {\n        e.printStackTrace();\n        bSide[i] = null;\n      }\n      bSide[i].setVisible(true);\n      bSide[i].setOpaque(false);\n      if (!isLoaded) boardComponents.add(bSide[i]);\n      pieces.add(bSide[i]);\n    }\n\n    // Set Individual bounds for each JPanel\n    bSide[0].setBounds(50, 350, 50, 50);\n    bSide[1].setBounds(bSide[0].getX() + 50, bSide[0].getY(), 50, 50);\n    bSide[2].setBounds(bSide[1].getX() + 50, bSide[1].getY(), 50, 50);\n    bSide[3].setBounds(bSide[2].getX() + 50, bSide[2].getY(), 50, 50);\n    bSide[4].setBounds(bSide[0].getX() - (bSide[0].getWidth() / 2), bSide[3].getY() + 50, 50, 50);\n    bSide[5].setBounds(bSide[4].getX() + 50, bSide[4].getY(), 50, 50);\n    bSide[6].setBounds(bSide[5].getX() + 50, bSide[5].getY(), 50, 50);\n    bSide[7].setBounds(bSide[6].getX() + 50, bSide[6].getY(), 50, 50);\n    bSide[8].setBounds(bSide[7].getX() + 50, bSide[7].getY(), 50, 50);\n\n    // Create Blue Side Pieces\n    for (int i = 0; i < 9; i++) {\n      try {\n        rSide[i] = new JPanelWithBackground(red);\n      } catch (IOException e) {\n        e.printStackTrace();\n        rSide[i] = null;\n      }\n      rSide[i].setVisible(true);\n      rSide[i].setOpaque(false);\n      if (!isLoaded) boardComponents.add(rSide[i]);\n      pieces.add(rSide[i]);\n    }\n\n    // Set Individual bounds for each JPanel\n    rSide[0].setBounds(contentPane.getWidth() - 250, bSide[0].getY(), 50, 50);\n    rSide[1].setBounds(rSide[0].getX() + 50, rSide[0].getY(), 50, 50);\n    rSide[2].setBounds(rSide[1].getX() + 50, rSide[1].getY(), 50, 50);\n    rSide[3].setBounds(rSide[2].getX() + 50, rSide[2].getY(), 50, 50);\n    rSide[4].setBounds(rSide[0].getX() - (rSide[0].getWidth() / 2), rSide[3].getY() + 50, 50, 50);\n    rSide[5].setBounds(rSide[4].getX() + 50, rSide[4].getY(), 50, 50);\n    rSide[6].setBounds(rSide[5].getX() + 50, rSide[5].getY(), 50, 50);\n    rSide[7].setBounds(rSide[6].getX() + 50, rSide[6].getY(), 50, 50);\n    rSide[8].setBounds(rSide[7].getX() + 50, rSide[7].getY(), 50, 50);\n\n    // Initialize all of the Board Buttons & set to a Blank Piece\n    for (int i = 0; i < 3; i++) {\n      for (int j = 0; j < 8; j++) {\n        board[i][j] = new JButton();\n        board[i][j].setVisible(true);\n        board[i][j].setOpaque(false);\n        board[i][j].setContentAreaFilled(false);\n        board[i][j].setBorderPainted(false);\n        board[i][j].setIcon(blankPiece);\n        if (!isLoaded) boardComponents.add(board[i][j]);\n        pieces.add(board[i][j]);\n      }\n    }\n\n    // Set Individual Mouse Listeners & Locations\n    board[0][0].setBounds(270, 12, 50, 50);\n    board[0][0].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 0;\n          }\n        });\n\n    board[0][1].setBounds(board[0][0].getX() + 264, board[0][0].getY(), 50, 50);\n    board[0][1].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 1;\n          }\n        });\n\n    board[0][2].setBounds(board[0][1].getX() + 264, board[0][0].getY(), 50, 50);\n    board[0][2].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 2;\n          }\n        });\n\n    board[1][0].setBounds(board[0][0].getX() + 70, board[0][0].getY() + 70, 50, 50);\n    board[1][0].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 0;\n          }\n        });\n\n    board[1][1].setBounds(board[0][1].getX(), board[1][0].getY(), 50, 50);\n    board[1][1].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 1;\n          }\n        });\n\n    board[1][2].setBounds(board[0][2].getX() - 70, board[1][0].getY(), 50, 50);\n    board[1][2].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 2;\n          }\n        });\n\n    board[2][0].setBounds(board[1][0].getX() + 70, board[1][0].getY() + 70, 50, 50);\n    board[2][0].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 0;\n          }\n        });\n\n    board[2][1].setBounds(board[1][1].getX(), board[2][0].getY(), 50, 50);\n    board[2][1].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 1;\n          }\n        });\n\n    board[2][2].setBounds(board[1][2].getX() - 70, board[2][1].getY(), 50, 50);\n    board[2][2].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 2;\n          }\n        });\n\n    board[0][7].setBounds(board[0][0].getX(), board[0][0].getY() + 265, 50, 50);\n    board[0][7].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 7;\n          }\n        });\n\n    board[1][7].setBounds(board[1][0].getX(), board[0][7].getY(), 50, 50);\n    board[1][7].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 7;\n          }\n        });\n\n    board[2][7].setBounds(board[2][0].getX(), board[1][7].getY(), 50, 50);\n    board[2][7].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 7;\n          }\n        });\n\n    board[2][3].setBounds(board[2][2].getX(), board[2][7].getY(), 50, 50);\n    board[2][3].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 3;\n          }\n        });\n\n    board[1][3].setBounds(board[1][2].getX(), board[2][3].getY(), 50, 50);\n    board[1][3].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 3;\n          }\n        });\n\n    board[0][3].setBounds(board[0][2].getX(), board[1][3].getY(), 50, 50);\n    board[0][3].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 3;\n          }\n        });\n\n    board[2][6].setBounds(\n        board[2][7].getX(), board[2][7].getY() + (board[2][7].getY() - board[2][0].getY()), 50, 50);\n    board[2][6].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 6;\n          }\n        });\n\n    board[2][5].setBounds(board[2][1].getX(), board[2][6].getY(), 50, 50);\n    board[2][5].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 5;\n          }\n        });\n\n    board[2][4].setBounds(board[2][3].getX(), board[2][5].getY(), 50, 50);\n    board[2][4].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 2;\n            selectedPos[1] = 4;\n          }\n        });\n\n    board[1][6].setBounds(board[1][7].getX(), board[2][6].getY() + 70, 50, 50);\n    board[1][6].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 6;\n          }\n        });\n\n    board[1][5].setBounds(board[2][5].getX(), board[1][6].getY(), 50, 50);\n    board[1][5].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 5;\n          }\n        });\n\n    board[1][4].setBounds(board[1][3].getX(), board[1][5].getY(), 50, 50);\n    board[1][4].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 1;\n            selectedPos[1] = 4;\n          }\n        });\n\n    board[0][6].setBounds(board[0][7].getX(), board[1][6].getY() + 70, 50, 50);\n    board[0][6].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 6;\n          }\n        });\n\n    board[0][5].setBounds(board[1][5].getX(), board[0][6].getY(), 50, 50);\n    board[0][5].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 5;\n          }\n        });\n\n    board[0][4].setBounds(board[0][3].getX(), board[0][5].getY(), 50, 50);\n    board[0][4].addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            selectedPos[0] = 0;\n            selectedPos[1] = 4;\n          }\n        });\n\n    // Board is now drawn\n    isGameBegan = true;\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3272, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [96], "initializationEnd": [126], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [132], "configurationEnd": [155], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 161, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [185, 213], "useEnd": [207, 265], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/forana/Piano-Trainer/tree/master/src/crescendo/sheetmusic/AdviceFrameTest.java", "rawCode": "  @Before\n  public void setup() {\n    this.af = new AdviceFrame(null, null);\n    JFrame frame = new JFrame(\"AdviceFrame Test\");\n    frame.setSize(400, 200);\n    frame.add(this.af);\n    frame.setVisible(true);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3273, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [156], "initializationEnd": [168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setIconImage(Image)", "jFrame.setSize(Dimension)", "jFrame.setTitle(String)", "jFrame.setContentPane(JPanel)"], "configurationStart": [176, 303, 350, 395], "configurationEnd": [295, 342, 387, 439], "guardCondition": "jFrame==null", "guardType": "IF {", "guardExpressionStart": 119, "guardExpressionEnd": 138, "guardBlockStart": 119, "guardBlockEnd": 470, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 447, "focalAPIEnd": 463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LSTS/neptus/tree/master/src/pt/lsts/neptus/gui/LatLonConv.java", "rawCode": "  /**\n   * This method initializes jFrame\n   *\n   * @return javax.swing.JFrame\n   */\n  public JFrame getJFrame() {\n    if (jFrame == null) {\n      jFrame = new JFrame();\n      jFrame.setIconImage(\n          Toolkit.getDefaultToolkit().getImage(getClass().getResource(\"/images/neptus-icon.png\")));\n      jFrame.setSize(new Dimension(419, 224));\n      jFrame.setTitle(I18n.text(\"Lat/Lon\"));\n      jFrame.setContentPane(getFrameContentPane());\n      jFrame.add(this);\n    }\n    return jFrame;\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3274, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel()"], "initializationStart": [88, 280], "initializationEnd": [100, 292], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JButton)", "panel.add(JButton)", "panel.add(JButton)", "panel.add(JButton)"], "configurationStart": [106, 137, 191, 226, 794, 812, 827, 845, 861, 877, 893, 908, 923, 938], "configurationEnd": [125, 185, 220, 244, 806, 820, 839, 854, 871, 886, 902, 917, 932, 947], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 986, "focalAPIEnd": 994, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/DatabaseApplicationTutorials/four/Gui.java", "rawCode": "  public void frame() {\n\n    // Initialization Starts\n\n    // Initialize JFrame\n    f = new JFrame();\n    f.setSize(550, 400);\n    ;\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n\n    // Initialize JPanel\n    p = new JPanel();\n\n    // Initialize JLabels\n    fname = new JLabel(\"First Name\");\n    lname = new JLabel(\"Last Name\");\n    age = new JLabel(\"Age\");\n\n    // Initialize Text Fields\n    t = new JTextField(10);\n    t1 = new JTextField(10);\n    t2 = new JTextField(10);\n\n    // Initialize JButtons\n    b1 = new JButton(\"Next\");\n    b2 = new JButton(\"Prev\");\n    b3 = new JButton(\"Last\");\n    b4 = new JButton(\"First\");\n\n    // Initialization Ends\n\n    // Add them to eache other..\n\n    // Add Components to the JPanel\n    p.add(fname);\n    p.add(t);\n\n    p.add(lname);\n    p.add(t1);\n\n    p.add(age);\n    p.add(t2);\n\n    p.add(b4);\n    p.add(b2);\n    p.add(b1);\n    p.add(b3);\n\n    // Add Jpanel to the JFrame\n    f.add(p);\n\n    try {\n      rs.next();\n      t.setText(rs.getString(\"Fname\"));\n      t1.setText(rs.getString(\"Lname\"));\n      t2.setText(rs.getString(\"Age\"));\n\n    } catch (Exception ex) {\n\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3275, "initialization": ["JPanel panel = new JPanel()"], "initializationStart": [85], "initializationEnd": [97], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setLayout(GridBagLayout)", "panel.add(JLabel,GridBagConstraints)", "panel.add(JButton,GridBagConstraints)", "panel.add(JButton,GridBagConstraints)", "panel.add(JPasswordField,GridBagConstraints)", "panel.add(JPasswordField,GridBagConstraints)", "panel.add(JLabel,GridBagConstraints)", "panel.add(JLabel,GridBagConstraints)", "panel.add(JLabel,GridBagConstraints)", "panel.add(JFormattedTextField,GridBagConstraints)"], "configurationStart": [649, 993, 1388, 1765, 2161, 2525, 2781, 3034, 3293, 3666], "configurationEnd": [684, 1028, 1425, 1802, 2198, 2563, 2815, 3069, 3334, 3701], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 3708, "focalAPIEnd": 3723, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nerzhul/FSCom_JavaTut/tree/master/FSComClient/src/windows/forms/form_inscription.java", "rawCode": "  public void panel() {\n    GridBagConstraints gridBagConstraints;\n    JPanel pane = new JPanel();\n    JLabel Titre = new JLabel();\n    JButton valider = new JButton();\n    JButton annuler = new JButton();\n    JPasswordField passtxt = new JPasswordField();\n    JPasswordField passtxt2 = new JPasswordField();\n    JLabel pass = new JLabel();\n    JLabel pass2 = new JLabel();\n    MaskFormatter Mask10 = null;\n    try {\n      Mask10 = new MaskFormatter(\"*****************\");\n    } catch (ParseException e1) {\n      e1.printStackTrace();\n    }\n    JLabel identifiant = new JLabel();\n    JFormattedTextField idtxt = new JFormattedTextField(Mask10);\n\n    pane.setLayout(new GridBagLayout());\n\n    Titre.setText(\"Bienvenue sur la page d'inscription !\");\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n    gridBagConstraints.insets = new Insets(16, 4, 16, 4);\n    pane.add(Titre, gridBagConstraints);\n\n    valider.setText(\"Valider\");\n    valider.addActionListener(new valid_inscription_button(idtxt, passtxt, passtxt2));\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 7;\n    gridBagConstraints.anchor = GridBagConstraints.WEST;\n    gridBagConstraints.insets = new Insets(10, 0, 10, 0);\n    pane.add(valider, gridBagConstraints);\n\n    annuler.setText(\"Annuler\");\n    annuler.addActionListener(new cancel_inscription_button(frame));\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 7;\n    gridBagConstraints.anchor = GridBagConstraints.EAST;\n    gridBagConstraints.insets = new Insets(0, 5, 0, 5);\n    pane.add(annuler, gridBagConstraints);\n\n    gridBagConstraints = new GridBagConstraints();\n    passtxt.setToolTipText(\n        \"Doit �tre diff�rent de l'identifiant et comporter au minimum 4 caract�res !\");\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 5;\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.insets = new Insets(0, 5, 0, 5);\n    pane.add(passtxt, gridBagConstraints);\n\n    gridBagConstraints = new GridBagConstraints();\n    passtxt2.setToolTipText(\"Doit �tre �gal au mot de passe entr� pr�c�demment !\");\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 6;\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.insets = new Insets(0, 5, 0, 5);\n    pane.add(passtxt2, gridBagConstraints);\n\n    pass.setText(\"Mot de passe :\");\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 5;\n    gridBagConstraints.insets = new Insets(5, 5, 5, 5);\n    pane.add(pass, gridBagConstraints);\n\n    pass2.setText(\"Confirmation :\");\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 6;\n    gridBagConstraints.insets = new Insets(5, 5, 5, 5);\n    pane.add(pass2, gridBagConstraints);\n\n    identifiant.setText(\"Identifiant :\");\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 2;\n    gridBagConstraints.insets = new Insets(5, 5, 5, 5);\n    pane.add(identifiant, gridBagConstraints);\n\n    gridBagConstraints = new GridBagConstraints();\n    idtxt.setToolTipText(\"Maximum 15 caract�res !\");\n    gridBagConstraints.gridx = 1;\n    gridBagConstraints.gridy = 2;\n    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n    gridBagConstraints.ipadx = 152;\n    gridBagConstraints.insets = new Insets(0, 4, 0, 4);\n    pane.add(idtxt, gridBagConstraints);\n\n    frame.add(pane);\n    pane.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3276, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [88, 139], "initializationEnd": [118, 151], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setLayout(GridBagLayout)", "panel.add(JButton)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [157, 373, 461], "configurationEnd": [194, 390, 517], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 524, "focalAPIEnd": 544, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [594, 664], "useEnd": [621, 690], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidmerrick/Classes/tree/master/ECE 152/JavaAssn2/tictactoe_2.java", "rawCode": "  void startGui() {\n    /// Creates a JFrame object (the window)\n    JFrame mainframe = new JFrame(\"Tic Tac Toe Game\");\n    JPanel panel = new JPanel();\n    panel.setLayout(new GridLayout(3, 3));\n\n    JButton[] buttonArray = {A1, B1, C1, A2, B2, C2, A3, B3, C3};\n\n    for (int i = 0; i < 9; i++) {\n      button = buttonArray[i];\n      button.addActionListener(this);\n      panel.add(button);\n    }\n\n    /// Set the Program to exit when the window is closed\n    mainframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    mainframe.add(panel);\n    /// Set the window to 300 by 300 pixels\n    mainframe.setSize(500, 500);\n\n    /// Actually display the window\n    mainframe.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3277, "initialization": ["JFrame jFrame = new JDesktopPane()"], "initializationStart": [97], "initializationEnd": [115], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 275, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JFrame.add(jFrame)"], "useStart": [386], "useEnd": [404], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codjo/codjo-release-test/tree/master/src/test/java/net/codjo/test/release/task/gui/finder/FastGlassPaneComponentFinderTest.java", "rawCode": "  private void showInternalFrames(JInternalFrame... internalFrames) {\n    JDesktopPane desktop = new JDesktopPane();\n    for (JInternalFrame internalFrame : internalFrames) {\n      Component glassPane = buildGlassPane(internalFrame);\n      glassPane.setVisible(false);\n      desktop.add(internalFrame);\n      internalFrame.setVisible(false);\n    }\n\n    JFrame frame = new JFrame();\n    frame.add(desktop);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3278, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [40, 2332], "initializationEnd": [67, 2366], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)", "panel.add(JButton,GridBagConstraints)", "panel.add(JList,GridBagConstraints)", "panel.add(JScrollPane)"], "configurationStart": [73, 362, 434, 674], "configurationEnd": [116, 428, 494, 703], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 2666, "focalAPIEnd": 2693, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.setBounds(int,int,int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [2699, 2733, 2766, 2798, 2831, 2860, 2901, 2959], "useEnd": [2727, 2760, 2792, 2825, 2853, 2895, 2953, 2981], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gceylan/pro-lang/tree/master/java/hafta_8/SiparisFormu.java", "rawCode": "  public void go() {\n    JFrame frame = new JFrame(\"Sipari� Formu\");\n    frame.setLayout(new FlowLayout(20, 20, 20));\n\n    yiyeceklerPaneli = new JPanel(new BorderLayout(5, 5));\n    yiyeceklerListBox = new JList(yiyecekler);\n    yiyeceklerListBox.setVisibleRowCount(9);\n    yiyeceklerListBox.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\n    yiyeceklerPaneli.add(new JLabel(\"Yiyecekler\"), BorderLayout.NORTH);\n    yiyeceklerPaneli.add(yiyeceklerListBox, BorderLayout.CENTER);\n    scroll1 =\n        new JScrollPane(\n            yiyeceklerListBox,\n            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n    yiyeceklerPaneli.add(scroll1);\n\n    yiyecekAdetPaneli = new JPanel(new BorderLayout(5, 5));\n    yiyecekAdediComboBox = new JComboBox(adet);\n    yiyecekAdetPaneli.add(new JLabel(\"Yiyecek Adedi\"), BorderLayout.NORTH);\n    yiyecekAdetPaneli.add(yiyecekAdediComboBox, BorderLayout.CENTER);\n    yiyecekleriEkle = new JButton(\"Ekle\");\n    yiyecekAdetPaneli.add(yiyecekleriEkle, BorderLayout.SOUTH);\n\n    siparislerPaneli = new JPanel(new BorderLayout(5, 5));\n    ekran = new JTextArea(10, 25);\n    siparislerPaneli.add(new JLabel(\"Sipari�lerin Toplam�\"), BorderLayout.NORTH);\n    siparislerPaneli.add(ekran, BorderLayout.CENTER);\n    scroll3 =\n        new JScrollPane(\n            ekran, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n    siparislerPaneli.add(scroll3);\n\n    iceceklerPaneli = new JPanel(new BorderLayout(5, 5));\n    iceceklerListBox = new JList(icecekler);\n    iceceklerListBox.setVisibleRowCount(9);\n    iceceklerPaneli.add(new JLabel(\"��ecekler\"), BorderLayout.NORTH);\n    iceceklerPaneli.add(iceceklerListBox, BorderLayout.CENTER);\n    scroll2 =\n        new JScrollPane(\n            iceceklerListBox,\n            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\n            JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n    iceceklerPaneli.add(scroll2);\n\n    icecekAdetPaneli = new JPanel(new BorderLayout(5, 5));\n    icecekAdetPaneli.add(new JLabel(\"��ecek Adedi\"), BorderLayout.NORTH);\n    icecekAdediComboBox = new JComboBox(adet);\n    icecekAdetPaneli.add(icecekAdediComboBox, BorderLayout.CENTER);\n    icecekleriEkle = new JButton(\"Ekle\");\n    icecekAdetPaneli.add(icecekleriEkle, BorderLayout.SOUTH);\n\n    toplamPanel = new JPanel(new BorderLayout(5, 5));\n    toplamPanel.add(new JLabel(\"Toplam Tutar\"), BorderLayout.NORTH);\n    toplam = new JTextField(25);\n    toplamPanel.add(toplam, BorderLayout.CENTER);\n\n    dinleyici1 = new ButonDinleyici();\n    yiyecekleriEkle.addActionListener(dinleyici1);\n    icecekleriEkle.addActionListener(dinleyici1);\n\n    frame.add(yiyeceklerPaneli);\n    frame.add(yiyecekAdetPaneli);\n    frame.add(siparislerPaneli);\n    frame.add(iceceklerPaneli);\n    frame.add(icecekAdetPaneli);\n    frame.add(toplamPanel);\n\n    frame.setBounds(100, 100, 620, 500);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n\n    pack();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3279, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridBagLayout)"], "configurationStart": [47], "configurationEnd": [100], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1237, "focalAPIEnd": 1257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.add(JPanel)", "JFrame.add(jFrame)"], "useStart": [1263, 1282, 1302], "useEnd": [1276, 1295, 1316], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe12/tree/master/src/menu/settings/SettingsFrame.java", "rawCode": "  public void go() {\n    blackCheckers();\n\n    main.setLayout(new BoxLayout(main, BoxLayout.Y_AXIS));\n\n    sets.setResizable(false);\n    sets.setLocationByPlatform(true);\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    sets.setBounds(0, 0, screenSize.width, screenSize.height);\n    sets.setUndecorated(true);\n    sets.setBackground(Color.BLACK);\n\n    titlepanel.setBackground(Color.BLACK);\n    title.setForeground(Color.WHITE);\n    titlepanel.add(title);\n\n    mplayer.setLayout(new BoxLayout(mplayer, BoxLayout.Y_AXIS));\n    mplayer.setBackground(Color.BLACK);\n    mplayer.add(player2);\n\n    items.setLayout(new BoxLayout(items, BoxLayout.Y_AXIS));\n    items.setBackground(Color.BLACK);\n    items.add(swap);\n    items.add(bombSpawn);\n    items.add(maxBombs);\n    items.add(bombRange);\n    items.add(slider(maxBtext, \"maxBombs\", \"Maximale Bombenzahl\", maxBombs));\n    items.add(slider(bombRtext, \"bombRange\", \"Reichweite der Bomben\", bombRange));\n\n    // top.add(new JLabel(\"Multiplayer\"));\n    // top.add(mplayer);\n    top.add(new JLabel(\"Items\"));\n    top.add(items);\n    top.setBackground(Color.BLACK);\n\n    bot.add(save.getPanel());\n    bot.add(cancel.getPanel());\n    bot.setBackground(Color.BLACK);\n\n    main.add(titlepanel);\n    main.add(top);\n    main.add(bot);\n\n    sets.add(main);\n\n    save.getButton().addActionListener(this);\n    save.getButton().setActionCommand(\"save\");\n\n    cancel.getButton().addActionListener(this);\n    cancel.getButton().setActionCommand(\"cancel\");\n\n    refresh();\n    repaint();\n\n    sets.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3280, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [324], "initializationEnd": [336], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 950, "catchExpressionStart": 745, "catchExpressionEnd": 777, "catchBlockStart": 745, "catchBlockEnd": 852, "exceptionHandlingCallStart": [826], "exceptionHandlingCallEnd": [845], "configuration": ["jFrame.setMinimumSize(Dimension)"], "configurationStart": [344], "configurationEnd": [387], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 426, "focalAPIEnd": 438, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [446, 462], "useEnd": [454, 480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sharenav/sharenav/tree/master/Osm2ShareNav/src/net/sharenav/osmToShareNav/route/Route.java", "rawCode": "  public static void main(String[] args) {\n    Route r = new Route(null, 100000, null);\n    try {\n      BufferedReader in = new BufferedReader(new FileReader(\"route.xml\"));\n      r.decodeRouteXML(in);\n      in.close();\n      r.map = new JMapViewer(new MemoryTileCache(), 4);\n      r.map.setSize(1000, 800);\n      JFrame f = new JFrame();\n      f.setMinimumSize(new Dimension(1200, 1000));\n      // f.setSize(1000, 800);\n      f.add(r.map);\n      f.pack();\n      f.setVisible(true);\n      for (int i = 0; i < r.routeResult.size(); i++) {\n        Node node = r.routeResult.get(i);\n        r.map.addMapMarker(new MapMarkerDot(node.lat, node.lon));\n      }\n      r.map.setDisplayToFitMapMarkers();\n      r.map.repaint();\n      r.createArea();\n    } catch (FileNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3281, "initialization": ["JPanel panel = new JPanel()"], "initializationStart": [145], "initializationEnd": [157], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JLabel)", "panel.add(JTextField)", "panel.add(JButton)"], "configurationStart": [30, 55, 109, 204, 218, 233, 248, 264], "configurationEnd": [49, 103, 127, 212, 226, 242, 257, 272], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 315, "focalAPIEnd": 323, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/DatabaseApplicationTutorials/eight/Login.java", "rawCode": "  public void framne() {\n\n    f.setSize(600, 400);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setVisible(true);\n\n    JPanel p = new JPanel();\n\n    // Add our components to our Jpanel\n    p.add(l);\n    p.add(t);\n\n    p.add(l1);\n    p.add(t1);\n\n    p.add(b);\n\n    // Add our pannel tou our frame\n    f.add(p);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3282, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [83, 213], "initializationEnd": [122, 225], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setBounds(int,int,int,int)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setDefaultCloseOperation(int)", "panel.add(JButton)"], "configurationStart": [128, 157, 231, 270, 1003], "configurationEnd": [151, 192, 264, 322, 1023], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1029, "focalAPIEnd": 1045, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [1660, 1682], "useEnd": [1676, 1704], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JackDanny/projetDCLL_MoodleXML_Json/tree/master/projet/src/main/java/main/Main.java", "rawCode": "  public static void main(String[] args) {\n\n    // XML TO JSON\n\n    JFrame frame = new JFrame(\"projetDCLL_MoodleXML_Json\");\n    frame.setSize(500, 500);\n    frame.setBounds(500, 500, 400, 200);\n    JPanel panel = new JPanel();\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JButton xmlToJson = new JButton(\"xmlToJson\");\n    xmlToJson.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            JFileChooser fileChooser = new JFileChooser();\n            int returnValue = fileChooser.showOpenDialog(null);\n            if (returnValue == JFileChooser.APPROVE_OPTION) {\n              File selectedFile = fileChooser.getSelectedFile();\n              XmlParserImpl xmlparser1 = new XmlParserImpl();\n              ToJson tj = new ToJson(getFileName(selectedFile.getPath()) + \".json\");\n              tj.toJson(xmlparser1.parser(selectedFile.getPath()));\n            }\n          }\n        });\n\n    panel.add(xmlToJson);\n    frame.add(panel);\n\n    // JSON TO XML\n\n    JButton jsonToXml = new JButton(\"jsonToXml\");\n    jsonToXml.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            JFileChooser fileChooser = new JFileChooser();\n            int returnValue = fileChooser.showOpenDialog(null);\n            if (returnValue == JFileChooser.APPROVE_OPTION) {\n              File selectedFile = fileChooser.getSelectedFile();\n              JsonParserImpl i = new JsonParserImpl();\n              i.parser(selectedFile.getPath());\n            }\n          }\n        });\n\n    panel.add(jsonToXml);\n    frame.add(panel);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3283, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel(*)"], "initializationStart": [34, 73], "initializationEnd": [56, 103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "panel.add(BoardPanel<TicTacCell>,*)", "panel.add(PlayerManager<ReversiState, TicTacMove>,*)"], "configurationStart": [109, 674, 789], "configurationEnd": [161, 708, 822], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 875, "focalAPIEnd": 887, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [893, 922], "useEnd": [916, 944], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ronwalf/Poolesville-2010-Games-Project/tree/master/src/net/volus/ronwalf/phs2010/games/reversi/ReversiGui.java", "rawCode": "  public void run() {\n    frame = new JFrame(\"Reversi!\");\n    JPanel p = new JPanel(new BorderLayout());\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    Game<ReversiState, TicTacMove> reversi = ReversiGame.instance;\n\n    bpanel =\n        new BoardPanel<TicTacCell>(\n            reversi.getInitialState().getBoard(), TicTacCellPainter.instance);\n    bpanel.setListener(\n        new BoardListener<TicTacCell>() {\n\n          public void cellPressed(BoardPanel<TicTacCell>.Cell cell) {\n            manager.move(new TicTacMove(cell.i, cell.j));\n          }\n        });\n    boardTitle = BorderFactory.createTitledBorder(\"HI\");\n    bpanel.setBorder(boardTitle);\n    p.add(bpanel, BorderLayout.CENTER);\n\n    manager = new PlayerManager<ReversiState, TicTacMove>(reversi, this);\n    p.add(manager, BorderLayout.EAST);\n\n    stateChanged(reversi.getInitialState());\n\n    frame.add(p);\n    frame.setSize(800, 600);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3284, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [921], "initializationEnd": [933], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 956, "focalAPIEnd": 992, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setJMenuBar(JMenuBar)", "jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [1164, 3014, 3051], "useEnd": [1188, 3045, 3071], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/awt/event/KeyEvent/AcceleratorTest/AcceleratorTest.java", "rawCode": "  public void init() {\n    // Create instructions for the user here, as well as set up\n    // the environment -- set the layout manager, add buttons,\n    // etc.\n    this.setLayout(new BorderLayout());\n\n    String[] instructions = {\n      \" Ensure you have Russian keyboard layout as a currently active.\",\n      \"(1) Press Ctrl+\\u0411 (a key with \\\",<\\\" on it) \",\n      \"(2) Find a . (period) in this layout (perhaps \\\"/?\\\" or \\\"7&\\\" key).\",\n      \"Press Ctrl+.\",\n      \"(3) Press Crtl+ regular English . (period) key (on \\\".>\\\" )\",\n      \"(4) Press Ctrl+ key with English N.\",\n      \"(5) Press Alt+\\u042E (key with \\\".>\\\")\",\n      \"(6) Press Alt+\\u0436 (key with \\\";:\\\")\",\n      \"If all expected commands will be fired, look for message\",\n      \"\\\"All tests passed\\\"\"\n    };\n    Sysout.createDialogWithInstructions(instructions);\n    for (int i = 0; i < CMD.length; i++) {\n      cmdHash.put(CMD[i], 0);\n    }\n\n    jfr = new JFrame();\n    JButton jbu;\n    jfr.add((jbu = new JButton(CMD[0])));\n    jbu.setMnemonic(java.awt.event.KeyEvent.getExtendedKeyCodeForChar('\\u042E'));\n    jbu.addActionListener(new ALi(CMD[0]));\n\n    JMenuBar menuBar = new JMenuBar();\n    jfr.setJMenuBar(menuBar);\n    JMenu menu = new JMenu(\"Menu\");\n    menuBar.add(menu);\n\n    JMenuItem menuItem = new JMenuItem(CMD[1]);\n    menuItem.setAccelerator(\n        KeyStroke.getKeyStroke(\n            java.awt.event.KeyEvent.getExtendedKeyCodeForChar('\\u0431'),\n            InputEvent.CTRL_DOWN_MASK));\n\n    JMenuItem menuItemEnglish = new JMenuItem(CMD[2]);\n    menuItemEnglish.setAccelerator(\n        KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, InputEvent.CTRL_DOWN_MASK));\n    JMenuItem menuItemE1 = new JMenuItem(CMD[3]);\n    menuItemE1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK));\n    menuItem.addActionListener(new ALi(CMD[1]));\n    menuItemEnglish.addActionListener(new ALi(CMD[2]));\n    menuItemE1.addActionListener(new ALi(CMD[3]));\n    menu.add(menuItem);\n    menu.add(menuItemEnglish);\n    menu.add(menuItemE1);\n\n    KeyStroke ks;\n    InputMap im = new InputMap();\n    ks =\n        KeyStroke.getKeyStroke(\n            KeyEvent.getExtendedKeyCodeForChar('\\u0436'), java.awt.event.InputEvent.ALT_DOWN_MASK);\n    im.put(ks, \"pushAction\");\n    im.setParent(jbu.getInputMap(JComponent.WHEN_FOCUSED));\n    jbu.setInputMap(JComponent.WHEN_FOCUSED, im);\n\n    jbu.getActionMap()\n        .put(\n            \"pushAction\",\n            new AbstractAction(\"pushAction\") {\n              public void actionPerformed(ActionEvent evt) {\n                if (evt.getActionCommand().equals(CMD[4])) {\n                  cmdHash.put(CMD[4], 1);\n                }\n                boolean notYet = false;\n                for (int i = 0; i < CMD.length; i++) {\n                  if (cmdHash.get(CMD[i]) == 0) notYet = true;\n                }\n                Sysout.println(\"Fired\");\n                if (!notYet) {\n                  Sysout.println(\"All tests passed.\");\n                }\n              }\n            });\n\n    jfr.setBounds(650, 0, 200, 200);\n    jfr.setVisible(true);\n  } // End init()\n"}, {"dataset": "jFrameAdd", "exampleID": 3285, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setLayout(GridBagLayout)", "panel.add(JRadioButton,GridBagConstraints)", "panel.add(JRadioButton,GridBagConstraints)", "panel.add(JRadioButton,GridBagConstraints)", "panel.add(JRadioButton,GridBagConstraints)", "panel.add(JRadioButton,GridBagConstraints)", "panel.add(JLabel,GridBagConstraints)", "panel.add(JButton,GridBagConstraints)"], "configurationStart": [30, 452, 775, 1098, 1421, 1744, 2067, 2390], "configurationEnd": [69, 769, 1092, 1415, 1738, 2061, 2384, 2703], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 2709, "focalAPIEnd": 2728, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tigashy/Risk-AI/tree/master/src/risk/gui/Gui.java", "rawCode": "  public void Player() {\n\n    pnlMenue.setLayout(new GridBagLayout());\n\n    groupComputer.add(rb2Computer);\n    rb2Computer.setActionCommand(\"2\");\n    groupComputer.add(rb3Computer);\n    rb3Computer.setActionCommand(\"3\");\n    groupComputer.add(rb4Computer);\n    rb4Computer.setActionCommand(\"4\");\n    groupComputer.add(rb5Computer);\n    rb5Computer.setActionCommand(\"5\");\n    groupComputer.add(rb6Computer);\n    rb6Computer.setActionCommand(\"6\");\n\n    pnlMenue.add(\n        rb2Computer,\n        new GridBagConstraints(\n            2,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(10, 10, 10, 10),\n            0,\n            0));\n    pnlMenue.add(\n        rb3Computer,\n        new GridBagConstraints(\n            3,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(10, 10, 10, 10),\n            0,\n            0));\n    pnlMenue.add(\n        rb4Computer,\n        new GridBagConstraints(\n            4,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(10, 10, 10, 10),\n            0,\n            0));\n    pnlMenue.add(\n        rb5Computer,\n        new GridBagConstraints(\n            5,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(10, 10, 10, 10),\n            0,\n            0));\n    pnlMenue.add(\n        rb6Computer,\n        new GridBagConstraints(\n            6,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(10, 10, 10, 10),\n            0,\n            0));\n    pnlMenue.add(\n        lblComputer,\n        new GridBagConstraints(\n            0,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(10, 10, 10, 10),\n            0,\n            0));\n    pnlMenue.add(\n        btnPlay,\n        new GridBagConstraints(\n            0,\n            3,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(10, 10, 10, 10),\n            0,\n            0));\n    frame.add(pnlMenue);\n\n    btnPlay.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent arg0) {\n            try {\n              playerCount = Integer.parseInt(groupComputer.getSelection().getActionCommand());\n\n            } catch (Exception e) {\n              playerCount = 2;\n            }\n            // Spiel inizialisieren neue pnlmain machen\n            pnlMenue.setVisible(false);\n            Game();\n            Main.gameEngine.run();\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3286, "initialization": ["JFrame jFrame = new JPanel()"], "initializationStart": [951], "initializationEnd": [963], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBorder(*)", "jFrame.setLayout(GridBagLayout)"], "configurationStart": [434, 3713], "configurationEnd": [526, 3750], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 4637, "focalAPIEnd": 4662, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "JFrame.add(jFrame,GridBagConstraints)"], "useStart": [4668, 5411], "useEnd": [4692, 5458], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/link39/Ascenseur/tree/master/Ascenseur/src/ascenseur/Gui.java", "rawCode": "  /** Fenetre des statistiques */\n  public void fenetreStats() {\n\n    fenetreStats = new JFrame(\"M²B²T - Statistiques\");\n    fenetreStats.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n    fenetreStats.setIconImage(Toolkit.getDefaultToolkit().getImage(\"images/myIcon.png\"));\n    fenetreStats.setLayout(new BorderLayout());\n    objStats = new Statistiques();\n\n    /** Declaration des panels */\n    panelHaut = new JPanel();\n    panelHaut.setBorder(new TitledBorder(blackline, \"Ascenseurs\", TitledBorder.CENTER, 0, null));\n    panelTitre = new JPanel();\n    panelCont = new JPanel();\n    panelBas = new JPanel();\n    panelBas.setBorder(\n        new TitledBorder(blackline, \"Statistiques Globales\", TitledBorder.CENTER, 0, null));\n    panelRefresh = new JPanel();\n    panelRefresh.setBorder(\n        new TitledBorder(blackline, \"Rafraichissement\", TitledBorder.CENTER, 0, null));\n    panel1 = new JPanel();\n    panel2 = new JPanel();\n    panel3 = new JPanel();\n\n    /** Declaration des labels */\n    labelAscenseurs = new JLabel(\"Ascenseurs\");\n    labelStats = new JLabel(\"Statistiques Globales\");\n    labelNbre = new JLabel(\"Nombre d'appels total\");\n    labelConsoTotAsc = new JLabel(\"Consommation totale (W)\");\n    labelConso = new JLabel(\"Consommation moyenne (W/Appel)\");\n    labelVide = new JLabel(\"\");\n    a = new JLabel(\"A\", SwingConstants.CENTER);\n    b = new JLabel(\"B\", SwingConstants.CENTER);\n    c = new JLabel(\"C\", SwingConstants.CENTER);\n    d = new JLabel(\"D\", SwingConstants.CENTER);\n    e = new JLabel(\"E\", SwingConstants.CENTER);\n    f = new JLabel(\"F\", SwingConstants.CENTER);\n    labelConsoMoy = new JLabel(\"Consommation Moyenne (W/Appel)\", SwingConstants.CENTER);\n    labelConsoTot = new JLabel(\"Consommation Totale (W)\", SwingConstants.CENTER);\n    labelAttMoy = new JLabel(\"Attente Moyenne (Sec)\", SwingConstants.CENTER);\n    labelNbrAppTot = new JLabel(\"Nombre d'appels Total\", SwingConstants.CENTER);\n    labelDureeSimu = new JLabel(\"Durée simulation \", SwingConstants.CENTER);\n    bouttonRefreshStat = new JButton(\"Rafraichir\");\n    bouttonRefreshStat.addActionListener(this);\n\n    /** Declaration des TextFiels */\n    nbr1 = new JTextField(6);\n    nbr1.setEditable(false);\n    nbr2 = new JTextField(6);\n    nbr2.setEditable(false);\n    nbr3 = new JTextField(6);\n    nbr3.setEditable(false);\n    nbr4 = new JTextField(6);\n    nbr4.setEditable(false);\n    nbr5 = new JTextField(6);\n    nbr5.setEditable(false);\n    nbr6 = new JTextField(6);\n    nbr6.setEditable(false);\n\n    consoTotAsc1 = new JTextField(6);\n    consoTotAsc1.setEditable(false);\n    consoTotAsc2 = new JTextField(6);\n    consoTotAsc2.setEditable(false);\n    consoTotAsc3 = new JTextField(6);\n    consoTotAsc3.setEditable(false);\n    consoTotAsc4 = new JTextField(6);\n    consoTotAsc4.setEditable(false);\n    consoTotAsc5 = new JTextField(6);\n    consoTotAsc5.setEditable(false);\n    consoTotAsc6 = new JTextField(6);\n    consoTotAsc6.setEditable(false);\n\n    conso1 = new JTextField(6);\n    conso1.setEditable(false);\n    conso2 = new JTextField(6);\n    conso2.setEditable(false);\n    conso3 = new JTextField(6);\n    conso3.setEditable(false);\n    conso4 = new JTextField(6);\n    conso4.setEditable(false);\n    conso5 = new JTextField(6);\n    conso5.setEditable(false);\n    conso6 = new JTextField(6);\n    conso6.setEditable(false);\n    ConsoMoy = new JTextField();\n    ConsoMoy.setEditable(false);\n    ConsoTot = new JTextField();\n    ConsoTot.setEditable(false);\n    AttMoy = new JTextField();\n    AttMoy.setEditable(false);\n    NbrAppTot = new JTextField();\n    NbrAppTot.setEditable(false);\n    DureeSimu = new JTextField();\n    DureeSimu.setEditable(false);\n\n    /** Panel Ascenseurs contenant un tableau */\n    panelHaut.setLayout(new FlowLayout());\n    panelTitre.setLayout(new GridLayout(4, 1, 5, 2));\n    panelCont.setLayout(new GridLayout(4, 6, 5, 2));\n    panelTitre.add(labelVide);\n    panelCont.add(a);\n    panelCont.add(b);\n    panelCont.add(c);\n    panelCont.add(d);\n    panelCont.add(e);\n    panelCont.add(f);\n    panelTitre.add(labelNbre);\n    panelCont.add(nbr1);\n    panelCont.add(nbr2);\n    panelCont.add(nbr3);\n    panelCont.add(nbr4);\n    panelCont.add(nbr5);\n    panelCont.add(nbr6);\n    panelTitre.add(labelConsoTotAsc);\n    panelCont.add(consoTotAsc1);\n    panelCont.add(consoTotAsc2);\n    panelCont.add(consoTotAsc3);\n    panelCont.add(consoTotAsc4);\n    panelCont.add(consoTotAsc5);\n    panelCont.add(consoTotAsc6);\n    panelTitre.add(labelConso);\n    panelCont.add(conso1);\n    panelCont.add(conso2);\n    panelCont.add(conso3);\n    panelCont.add(conso4);\n    panelCont.add(conso5);\n    panelCont.add(conso6);\n    panelHaut.add(panelTitre);\n    panelHaut.add(panelCont);\n\n    /** Panel Staistiques globales contenant un tableau */\n    panelBas.setLayout(new GridLayout(1, 3, 5, 2));\n    panel1.setLayout(new GridLayout(4, 1));\n    panel2.setLayout(new GridLayout(4, 1));\n    panel3.setLayout(new GridLayout(4, 1));\n\n    panel1.add(labelConsoMoy);\n    panel1.add(ConsoMoy);\n    panel1.add(labelNbrAppTot);\n    panel1.add(NbrAppTot);\n    panelBas.add(panel1);\n    panel2.add(labelConsoTot);\n    panel2.add(ConsoTot);\n    panel2.add(labelDureeSimu);\n    panel2.add(DureeSimu);\n    panelBas.add(panel2);\n    panel3.add(labelAttMoy);\n    panel3.add(AttMoy);\n    panelBas.add(panel3);\n\n    panelRefresh.add(bouttonRefreshStat);\n\n    /** Ajout des differents panels la fenetre principale */\n    fenetreStats.add(panelHaut, BorderLayout.NORTH);\n    fenetreStats.add(panelBas, BorderLayout.CENTER);\n    fenetreStats.add(panelRefresh, BorderLayout.SOUTH);\n\n    fenetreStats.pack();\n    /** Fait disparaitre la fenetre de statistique au clic de la croix */\n    fenetreStats.addWindowListener(\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            fenetreStats.setVisible(false);\n          }\n        });\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3287, "initialization": ["JFrame jFrame = new JLayeredPane()"], "initializationStart": [1335], "initializationEnd": [1353], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JMenuBar)"], "configurationStart": [1429], "configurationEnd": [1450], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1458, "focalAPIEnd": 1494, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.add(PopupPanel)", "jFrame.add(PopupPanel)", "jFrame.setComponentZOrder(JMenuBar,int)", "jFrame.setComponentZOrder(*,int)", "jFrame.setComponentZOrder(*,int)", "jFrame.setComponentZOrder(*,int)", "jFrame.setComponentZOrder(PopupPanel,int)", "jFrame.setComponentZOrder(PopupPanel,int)"], "useStart": [1502, 1555, 1597, 1638, 1712, 1759, 1821, 1892, 1952, 2011], "useEnd": [1547, 1589, 1630, 1670, 1751, 1813, 1884, 1944, 2003, 2061], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FruitOfLight/vida/tree/master/src/ui/GUI.java", "rawCode": "    @Override\n    public void run() {\n      // TODO spravit krajsie\n\n      final JFrame frame = new JFrame(\"ViDA\");\n      GUI.frame = frame;\n      frame.setLayout(null);\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n      graphLoader = new JFileChooser(\"./\");\n      graphSaver = new JFileChooser(\"./\");\n\n      menu = new JMenuBar();\n      Menu.init();\n\n      for (int i = 0; i < Menu.menuItems.length; i++) {\n        final JMenu item = new JMenu(Menu.menuItems[i]);\n        menu.add(item);\n        for (int j = 0; j < Menu.allMenuItems[i].length; ++j) {\n          if (Menu.allMenuItems[i][j].equals(\"--\")) {\n            item.addSeparator();\n          } else {\n            final JMenuItem meno = new JMenuItem(Menu.allMenuItems[i][j]);\n            item.add(meno);\n            final int fi = i;\n            final int fj = j;\n            meno.addActionListener(\n                new ActionListener() {\n                  @Override\n                  public void actionPerformed(ActionEvent e) {\n                    Menu.performAction(fi, fj);\n                  }\n                });\n          }\n        }\n      }\n\n      popupInformation = new PopupPanel(informationPanel.scrollPanel);\n      gkl.addMouseListener(KeyEvent.VK_I, popupInformation);\n      popupZoomWindow = new PopupPanel(zoomWindow.canvas);\n\n      layeredPane = new JLayeredPane();\n      frame.add(layeredPane);\n      // layeredPane.setLayout(null);\n      layeredPane.add(menu);\n      layeredPane.add(player.graph.canvas);\n      layeredPane.add(informationPanel.scrollPanel);\n      layeredPane.add(zoomWindow.canvas);\n      layeredPane.add(popupInformation);\n      layeredPane.add(popupZoomWindow);\n      frame.add(controls.panel);\n\n      layeredPane.setComponentZOrder(menu, 0);\n      layeredPane.setComponentZOrder(player.graph.canvas, 1);\n      layeredPane.setComponentZOrder(informationPanel.scrollPanel, 0);\n      layeredPane.setComponentZOrder(zoomWindow.canvas, 0);\n      layeredPane.setComponentZOrder(popupInformation, 0);\n      layeredPane.setComponentZOrder(popupZoomWindow, 0);\n\n      informationPanel.scrollPanel.setVisible(false);\n      zoomWindow.canvas.setVisible(false);\n\n      KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n      manager.addKeyEventDispatcher(gkl);\n\n      frame.addWindowListener(\n          new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n              saveApp();\n            }\n          });\n      frame.addComponentListener(\n          new ComponentAdapter() {\n            public void componentResized(ComponentEvent e) {\n              refreshLayout();\n            }\n          });\n\n      frame.setSize(CONST.windowWidth, CONST.windowHeight);\n      frame.setVisible(true);\n      int dw = frame.getWidth() - frame.getContentPane().getWidth();\n      int dh = frame.getHeight() - frame.getContentPane().getHeight();\n      System.out.println(\"frame \" + dw + \" \" + dh);\n      frame.setMinimumSize(new Dimension(CONST.minWindowWidth + dw, CONST.minWindowHeight + dh));\n      gRepaint();\n    }\n"}, {"dataset": "jFrameAdd", "exampleID": 3288, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 47, "focalAPIEnd": 72, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bartvbl/PizzaProgram/tree/master/projectNameHere/ourGreatProgram/netbeans_project/netbeans_project_v0_02/src/pizzaprogram/gui/ProgramWindow.java", "rawCode": "  public void addJPanel(JPanel newPanel) {\n    this.jframe.add(newPanel);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3289, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [51], "initializationEnd": [63], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(SingleSectionPanel)", "jFrame.add(javax.swing.JScrollPane)"], "configurationStart": [69, 99], "configurationEnd": [93, 123], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 129, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [151, 170, 200], "useEnd": [164, 194, 223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ciscomc/Melt/tree/master/MELT/src/melt/View/PreviewAsStudent.java", "rawCode": "  public void showPreview() {\n\n    JFrame aframe = new JFrame();\n    aframe.add(sectionPanel);\n    aframe.add(jScrollPane1);\n    aframe.add(this);\n    aframe.pack();\n    aframe.setSize(900, 640);\n    aframe.setVisible(true);\n\n    if (testObject.getSections().isEmpty()) {\n      JOptionPane.showMessageDialog(this, \"The test is empty - there is nothing to preview\");\n      this.setVisible(false);\n    } else {\n\n      Section currentSection = testObject.getSectionById(sectionID);\n      sectionPanel = new SingleSectionPanel(currentSection);\n      this.jScrollPane1.setViewportView(sectionPanel);\n      sectionPanel.showSection();\n      int minutes = (int) (currentSection.getTime() % 60);\n      int hours = (int) (currentSection.getTime() / 60);\n      sectionClock.setTime(hours, minutes, 0);\n      this.sectionTimeLabel.setText(sectionClock.getTime());\n      this.revalidate();\n      System.out.println(\"this\");\n      // this.nextSectionBtn.doClick();\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3290, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [55], "initializationEnd": [67], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jFrame==null", "guardType": "IF {", "guardExpressionStart": 28, "guardExpressionEnd": 42, "guardBlockStart": 28, "guardBlockEnd": 460, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 76, "focalAPIEnd": 87, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setUndecorated(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.getRootPane()", "jFrame.pack()", "jFrame.setResizable(boolean)", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)"], "useStart": [96, 126, 182, 256, 272, 301, 466], "useEnd": [118, 174, 197, 264, 293, 330, 484], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/doubleshow/libsikuli/tree/master/research/src/main/java/org/sikuli/history/controls/NavigationControl.java", "rawCode": "  public void show() {\n\n    if (f == null) {\n      f = new JFrame();\n\n      f.add(this);\n\n      f.setUndecorated(true);\n      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      f.getRootPane().putClientProperty(\"Window.alpha\", new Float(0.8f));\n      f.pack();\n      f.setResizable(false);\n      f.setLocationRelativeTo(null);\n      MoveMouseListener mml = new MoveMouseListener(this);\n      addMouseListener(mml);\n      addMouseMotionListener(mml);\n    }\n\n    f.setVisible(true);\n    requestFocus();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3291, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [90], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [112], "configurationEnd": [164], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 170, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setAlwaysOnTop(boolean)", "jFrame.pack()"], "useStart": [192, 224], "useEnd": [218, 236], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lveci/nest/tree/master/beam/beam-visat-rcp/src/test/java/org/esa/beam/visat/toolviews/mask/MaskApplicationTest.java", "rawCode": "  private static JFrame createFrame(String name, JPanel panel) {\n    final JFrame frame = new JFrame(name);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(panel);\n    frame.setAlwaysOnTop(true);\n    frame.pack();\n    return frame;\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3292, "initialization": ["JPanel panel = DisplayMode.getAdditionalPanel()", "JFrame jFrame = new JFrame(String)"], "initializationStart": [1476, 1559], "initializationEnd": [1515, 1589], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "panel!=null", "guardType": "IF {", "guardExpressionStart": 1521, "guardExpressionEnd": 1535, "guardBlockStart": 1521, "guardBlockEnd": 1702, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1597, "focalAPIEnd": 1609, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [1617, 1637], "useEnd": [1629, 1659], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gaurav/taxondna/tree/master/com/ggvaidya/TaxonDNA/SequenceMatrix/TableManager.java", "rawCode": "  /**\n   * Easily the ugliest function EVER, changeDisplayMode() will change the display mode to the mode\n   * specified by mode (which is one of the DISPLAY_* constants), with an optional argument (which\n   * is passed straight on to the display mode object.\n   */\n  public void changeDisplayMode(int mode, Object argument) {\n    // Hashtable widths = null;\n    if (currentDisplayMode != null) {\n      // widths = currentDisplayMode.saveWidths();\n      currentDisplayMode.deactivateDisplay();\n    }\n\n    // now, deactivate the last menu!\n    if (last_displayModeMenu != null) {\n      matrix.getFrame().getMenuBar().remove(last_displayModeMenu);\n      last_displayModeMenu = null;\n    }\n\n    currentDisplayMode = getDisplayMode(mode);\n\n    currentDisplayMode.activateDisplay(table, argument);\n    currentMode = mode;\n\n    // turn on the new menu!\n    Menu menu = currentDisplayMode.getDisplayModeMenu();\n    if (menu != null) {\n      // we'd like to insert this menu somewhere specific.\n      // thankfully, the awt \"protects\" us from having to\n      // make decisions like that: we can only 'add' a\n      // Menu to a MenuBar.\n      matrix.getFrame().getMenuBar().add(menu);\n      last_displayModeMenu = menu;\n    }\n\n    if (lastAdditionalFrame != null) {\n      // do we have one? let's close it.\n      lastAdditionalFrame.setVisible(false);\n      lastAdditionalFrame.dispose(); // bye, bye, bye\n      lastAdditionalFrame = null; // clean me up, scotty\n    }\n\n    JPanel p = currentDisplayMode.getAdditionalPanel();\n    if (p != null) {\n      JFrame frame = new JFrame(\"Additional panel\");\n      frame.add(p);\n      frame.pack();\n      frame.setVisible(true);\n\n      lastAdditionalFrame = frame;\n    }\n\n    updateDisplay(); // fire!\n\n    // if(currentDisplayMode != null && widths != null)\n    // currentDisplayMode.restoreWidths(widths);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3293, "initialization": ["JFrame jFrame = new JFrame()", "JPanel panel = new JPanel(*)"], "initializationStart": [58, 203], "initializationEnd": [70, 233], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLayout(GridBagLayout)", "panel.setBackground(Color)", "panel.setBounds(int,int,int,int)", "panel.add(CSliderPane)"], "configurationStart": [76, 130, 155, 239, 271, 385], "configurationEnd": [124, 149, 186, 265, 297, 393], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 399, "focalAPIEnd": 407, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [413], "useEnd": [431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/macc704/CRiPS/tree/master/BlockEditor/src/codeblockutil/CSliderPane.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setSize(400, 400);\n    f.setLayout(new BorderLayout());\n    JPanel p = new JPanel(new BorderLayout());\n    p.setBackground(Color.red);\n    p.setBounds(0, 0, 400, 50);\n    CSliderPane s = new CSliderPane(0f, 10f, 1f);\n    s.setBounds(0, 0, 200, 60);\n    p.add(s);\n    f.add(p);\n    f.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3294, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.remove(JPanel)"], "configurationStart": [77], "configurationEnd": [103], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 144, "focalAPIEnd": 163, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setPreferredSize(Dimension)", "jFrame.setMinimumSize(Dimension)", "jFrame.setMaximumSize(Dimension)"], "useStart": [169, 238, 295, 348], "useEnd": [191, 289, 342, 395], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rowy/Battleships/tree/master/battleships-presentation/src/main/java/com/jostrobin/battleships/view/controller/UIController.java", "rawCode": "  private void show(JPanel newFrame) {\n    if (currentFrame != null) {\n      frame.remove(currentFrame);\n    }\n    currentFrame = newFrame;\n    frame.add(newFrame);\n    frame.setVisible(true);\n    resize(newFrame.getPreferredSize());\n    frame.setPreferredSize(newFrame.getPreferredSize());\n    frame.setMinimumSize(newFrame.getMinimumSize());\n    frame.setMaximumSize(newFrame.getMaximumSize());\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3295, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = initMainPanel(JPanel,JComponent,SwingShabadEditor)"], "initializationStart": [123, 1066], "initializationEnd": [164, 1119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setJMenuBar(JMenuBar)"], "configurationStart": [663], "configurationEnd": [697], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1125, "focalAPIEnd": 1145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.addWindowListener(WindowListener)", "jFrame.pack()", "jFrame.setLocation(int,int)", "jFrame.setResizable(boolean)", "jFrame.setVisible(boolean)"], "useStart": [1152, 1216, 1268, 1286, 1318, 1349], "useEnd": [1210, 1262, 1280, 1312, 1343, 1371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gsingh93/Learn-Kirtan/tree/master/src/gsingh/learnkirtan/Main.java", "rawCode": "  /** Constructs the menu, control panel, piano panel, and shabad editor */\n  public void createAndShowGui() {\n    frame = new JFrame(BASETITLE + \"Untitled Shabad\");\n    // frame.addComponentListener(new ComponentAdapter() {\n    // @Override\n    // public void componentResized(ComponentEvent e) {\n    // frame.setSize(new Dimension(frame.getPreferredSize().width,\n    // frame.getHeight()));\n    // super.componentResized(e);\n    // }\n    // });\n\n    titleManager = new WindowTitleManager(frame);\n    DialogUtility.setFrame(frame);\n\n    // TODO: Shouldn't need to pass these two managers\n    shabadEditor = new TableShabadEditor(titleManager, fileManager);\n\n    frame.setJMenuBar(createMenuBar());\n\n    JPanel controlPanel = new ControlPanel(new ShabadPlayer(), shabadEditor);\n    JComponent pianoPanel = new PianoPanel(labelManager);\n\n    settingsManager.addSettingsChangedListener((SettingsChangedListener) pianoPanel);\n    fileManager.addFileEventListener((ControlPanel) controlPanel);\n    fileManager.addFileEventListener(titleManager);\n\n    JPanel mainPanel = initMainPanel(controlPanel, pianoPanel, shabadEditor);\n    frame.add(mainPanel);\n\n    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n    frame.addWindowListener(new MyWindowAdapter());\n    frame.pack();\n    frame.setLocation(250, 60);\n    frame.setResizable(false);\n    frame.setVisible(true);\n\n    shabadEditor.reset();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3296, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [509, 560], "initializationEnd": [534, 572], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setBounds(int,int,int,int)", "panel.add(Component)"], "configurationStart": [582, 624], "configurationEnd": [614, 638], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 648, "focalAPIEnd": 666, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.pack()"], "useStart": [782, 815], "useEnd": [805, 828], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rachitpant/UAlbany-Client/tree/master/src/plugins/sip/src/java/net/java/sipmack/media/VideoReceiver.java", "rawCode": "  /** ControllerListener for the Players. */\n  public synchronized void controllerUpdate(ControllerEvent ce) {\n\n    Player p = (Player) ce.getSourceController();\n\n    if (p == null) return;\n\n    // Get this when the internal players are realized.\n    if (ce instanceof RealizeCompleteEvent) {\n      p.start();\n\n      Component vc = p.getVisualComponent();\n      System.out.println(\"Start1.1\" + vc);\n      if (null != vc) {\n        System.out.println(\"### visual component is \" + vc);\n\n        JFrame aFrame = new JFrame(\"Video Frame\");\n        JPanel aPanel = new JPanel();\n        aPanel.setBounds(0, 0, 176, 144);\n        aPanel.add(vc);\n        aFrame.add(aPanel);\n\n        aPanel.setBackground(Color.gray);\n\n        vc.setVisible(true);\n        aPanel.setVisible(true);\n        aFrame.setVisible(true);\n        aFrame.pack();\n      }\n    }\n\n    if (ce instanceof ControllerErrorEvent) {\n      p.removeControllerListener(this);\n      System.err.println(\"Receiver internal error: \" + ce);\n    }\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3297, "initialization": ["JFrame jFrame = new GameFrame(*)", "JPanel panel = new JPanel(*)"], "initializationStart": [170, 1177], "initializationEnd": [217, 1207], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["panel.setPreferredSize(Dimension)", "panel.add(JPanel,GridBagConstraints)", "panel.add(TownNotificationPanel,*)"], "configurationStart": [1213, 1294, 1349], "configurationEnd": [1288, 1343, 1405], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1411, "focalAPIEnd": 1440, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setLocationRelativeTo(Component)", "jFrame.setVisible(boolean)"], "useStart": [1447, 1468, 1510], "useEnd": [1462, 1504, 1535], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Int-Elegance/M.U.L.E.-2340/tree/master/MainProject/src/TownView.java", "rawCode": "  /**\n   * Displays the frame for the pub\n   *\n   * @return if the pub can be displayed\n   */\n  private boolean pubview() {\n\n    frame.setVisible(false);\n\n    pubframe = new GameFrame(currentTurn.getRound().getGame());\n\n    ImageIcon pubIcon =\n        new ImageIcon(getClass().getClassLoader().getResource(\"resources/pubview.jpg\"));\n    JLabel pubImage = new JLabel(pubIcon);\n    int pubWidth = pubIcon.getIconWidth();\n    int pubHeight = pubIcon.getIconHeight();\n\n    JLayeredPane layeredPane = new JLayeredPane();\n    layeredPane.setOpaque(false);\n    layeredPane.setPreferredSize(new Dimension(pubWidth, pubHeight));\n\n    // sets bounds on images so they can be drawn\n    pubImage.setBounds(0, 0, pubWidth, pubHeight);\n    tempPlayerX = 260;\n    tempPlayerY = 332;\n    playerImage.setBounds(playerX, playerY, playerX + playerWidth, playerY + playerHeight);\n\n    // adds images to the layeredPane\n    layeredPane.add(pubImage, JLayeredPane.DEFAULT_LAYER);\n    layeredPane.add(playerImage, JLayeredPane.POPUP_LAYER);\n\n    // creates a new JPanel, and adds the layered pane to it\n    JPanel pubpanel = new JPanel();\n    pubpanel.add(layeredPane);\n\n    JPanel pubWrapperPanel = new JPanel(new BorderLayout());\n    pubWrapperPanel.setPreferredSize(new Dimension(townWidth, townHeight + 30));\n    pubWrapperPanel.add(pubpanel, BorderLayout.SOUTH);\n    pubWrapperPanel.add(townNotifyPanel, BorderLayout.NORTH);\n    pubframe.add(pubWrapperPanel);\n\n    pubframe.pack();\n    pubframe.setLocationRelativeTo(null);\n    pubframe.setVisible(true);\n    pubAnimate();\n\n    return true;\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3298, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [234, 349], "initializationEnd": [262, 361], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)", "panel.setLayout(GridBagLayout)"], "configurationStart": [162, 268, 367], "configurationEnd": [192, 328, 437], "guardCondition": "!(jFrame!=null)", "guardType": "IF {", "guardExpressionStart": 127, "guardExpressionEnd": 153, "guardBlockStart": 127, "guardBlockEnd": 213, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 443, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [1630, 1656], "useEnd": [1650, 1686], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tavlima/fosstrak-epcis/tree/master/epcis-captureclient/src/main/java/org/fosstrak/epcis/captureclient/CaptureClientGui.java", "rawCode": "  /** Sets up the window used to show the list of examples. Can only be open once. */\n  private void drawExampleWindow() {\n    if (exampleWindow != null) {\n      exampleWindow.setVisible(true);\n      return;\n    }\n    exampleWindow = new JFrame(\"Choose example\");\n    exampleWindow.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n\n    ewMainPanel = new JPanel();\n    ewMainPanel.setLayout(new BoxLayout(ewMainPanel, BoxLayout.PAGE_AXIS));\n    exampleWindow.add(ewMainPanel);\n\n    ewListPanel = new JPanel();\n    ewListPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 5));\n    ewListPanel.setLayout(new BoxLayout(ewListPanel, BoxLayout.PAGE_AXIS));\n\n    ewButtonPanel = new JPanel();\n    ewButtonPanel.setBorder(BorderFactory.createEmptyBorder(5, 10, 10, 10));\n    ewButtonPanel.setLayout(new BoxLayout(ewButtonPanel, BoxLayout.LINE_AXIS));\n\n    ewMainPanel.add(ewListPanel);\n    ewMainPanel.add(ewButtonPanel);\n\n    ewExampleList = new JList<String>();\n    ewExampleScrollPane = new JScrollPane(ewExampleList);\n    ewListPanel.add(ewExampleScrollPane);\n    ewExampleList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n    String[] exampleList = new String[ExampleEvents.getExamples().size()];\n    for (int i = 0; i < ExampleEvents.getExamples().size(); i++) {\n      exampleList[i] = ExampleEvents.getExamples().get(i).getDescription();\n    }\n    ewExampleList.setListData(exampleList);\n\n    ewOkButton = new JButton(\"Fill in\");\n    ewOkButton.addActionListener(this);\n    ewButtonPanel.add(Box.createHorizontalGlue());\n    ewButtonPanel.add(ewOkButton);\n    ewButtonPanel.add(Box.createHorizontalGlue());\n\n    exampleWindow.pack();\n    exampleWindow.setVisible(true);\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3299, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()", "JPanel panel = new KitRobotDemo()", "JPanel panel = new PartRobotDemo()", "JPanel panel = new LaneDemo()"], "initializationStart": [986, 1037, 1101, 1163, 1226], "initializationEnd": [1019, 1049, 1119, 1182, 1240], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 1317, "focalAPIEnd": 1327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [1333, 1388, 1403], "useEnd": [1382, 1397, 1422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/claytonketner/CSCI200_FactorySim/tree/master/V0Main.java", "rawCode": "  public static void main(String[] args) {\n    // print options\n    System.out.println(\"Options:\");\n    System.out.println(\n        \"\\t1 -- Launch #1: The kit robot picking kits from the conveyer, putting them on the stand, and the reverse.\");\n    System.out.println(\n        \"\\t2 -- Launch #2: The parts robot picking up parts from the nests and putting them in the kit includes vision - use of camera.\");\n    System.out.println(\"\\t3 -- Launch #3: Parts dumped into bins and fed down the lanes.\");\n    System.out.print(\"\\n\\n\");\n\n    Scanner s = new Scanner(System.in);\n    int choice = -1;\n\n    // retrieve option from user\n    while (true) {\n      System.out.print(\"Choose a number: \");\n\n      String inStr = s.next().toLowerCase().trim();\n\n      try {\n        choice = Integer.parseInt(inStr);\n        if (choice < 1 || choice > 3) throw new Exception();\n        break;\n      } catch (Exception e) {\n      }\n    }\n\n    // instantiate JFrame and put correct demo panel in it\n    jf = new JFrame(\"CSCI 200 -- Team 11\");\n    JPanel jp = new JPanel();\n\n    switch (choice) {\n      case 1:\n        jp = new KitRobotDemo();\n        break;\n      case 2:\n        jp = new PartRobotDemo();\n        break;\n      case 3:\n        jp = new LaneDemo();\n        break;\n      default:\n        jp = null;\n        break;\n    }\n\n    jf.add(jp);\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jf.pack();\n    jf.setVisible(true);\n\n    // start timer\n    Timer t = new Timer(50, new V0Main());\n    t.start();\n  }\n"}, {"dataset": "jFrameAdd", "exampleID": 3300, "initialization": ["JFrame jFrame = new JFrame(String)", "JPanel panel = new JPanel()"], "initializationStart": [132, 286], "initializationEnd": [158, 298], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "panel.setLayout(GridBagLayout)", "panel.add(JTextField)", "panel.add(JButton)", "panel.add(JLabel)"], "configurationStart": [169, 231, 308, 495, 641, 770], "configurationEnd": [221, 254, 363, 510, 658, 786], "guardCondition": "jFrame==null", "guardType": "IF {", "guardExpressionStart": 95, "guardExpressionEnd": 113, "guardBlockStart": 95, "guardBlockEnd": 1504, "focalAPI": " = jFrame.add(panel)", "focalAPIStart": 796, "focalAPIEnd": 812, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [1512, 1532], "useEnd": [1524, 1554], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jerrevds/ODS/tree/master/version2/_bundles/bundle_rosgi_tim/examples/greeter/src/greeter/client/GreeterClient.java", "rawCode": "  private void createAndShowGUI(final BundleContext context) {\n    synchronized (this) {\n      if (frame == null) {\n        frame = new JFrame(\"Greeter test\");\n\n        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n        frame.setSize(300, 300);\n\n        final JPanel panel = new JPanel();\n        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));\n        final JTextField text = new JTextField(\"< enter name >\");\n        text.setAlignmentX(Component.CENTER_ALIGNMENT);\n        panel.add(text);\n        final JButton button = new JButton(\"Send greetings!\");\n        button.setAlignmentX(Component.CENTER_ALIGNMENT);\n        panel.add(button);\n        final JLabel label = new JLabel(\"\");\n        label.setAlignmentX(Component.CENTER_ALIGNMENT);\n        panel.add(label);\n        frame.add(panel);\n\n        button.addActionListener(\n            new ActionListener() {\n              @Override\n              public void actionPerformed(ActionEvent evt) {\n                ServiceReference ref =\n                    context.getServiceReference(GreeterInterface.class.getName());\n                if (ref != null) {\n                  GreeterInterface greeter = (GreeterInterface) context.getService(ref);\n                  label.setText(greeter.greet(text.getText()));\n                  context.ungetService(ref);\n                } else {\n                  label.setText(\"No greeter service available\");\n                }\n                frame.repaint();\n              }\n            });\n      }\n\n      frame.pack();\n      frame.setVisible(true);\n    }\n  }\n"}]