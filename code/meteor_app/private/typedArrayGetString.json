[{"dataset": "typedArrayGetString", "exampleID": 9601, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [88], "initializationEnd": [100], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 187, "focalAPIEnd": 201, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 209, "followUpCheckExpressionEnd": 249, "followUpCheckBlockStart": 209, "followUpCheckBlockEnd": 384, "use": ["getFontByName(*,str)", "typedArray.recycle()"], "useStart": [276, 391], "useEnd": [325, 402], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guardianproject/JustPayPhone/tree/master/app/src/info/guardianproject/justpayphone/app/views/CustomFontButton.java", "rawCode": "  private void init(AttributeSet attrs) {\n    if (attrs != null) {\n      TypedArray a = getContext().obtainStyledAttributes(attrs, new int[] {R.attr.asset_font});\n      String fontName = a.getString(0);\n      if (fontName != null && !isInEditMode()) {\n        Typeface font = FontManager.getFontByName(getContext(), fontName);\n        if (font != null) this.setTypeface(font);\n      }\n      a.recycle();\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9602, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getValue(int,TypedValue)", "typedArray.getValue(int,TypedValue)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2409, 2753, 3572], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2480, 2828, 3583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lutzer/mobile_computing/tree/master/ActionBarLib/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n\n      // itemActionViewClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);\n      itemActionViewClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      // itemActionProviderClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);\n      itemActionProviderClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9603, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [189], "initializationEnd": [275], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "configurationStart": [309, 430], "configurationEnd": [398, 514], "guardCondition": "typedArray.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit,)", "guardType": "IF {", "guardExpressionStart": 521, "guardExpressionEnd": 598, "guardBlockStart": 521, "guardBlockEnd": 700, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 621, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [607, 729, 827], "useEnd": [693, 820, 838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kgnvch/Shoppit/tree/master/facebook-android-sdk-3.5/facebook/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a =\n        activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);\n\n    setRadiusInMeters(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));\n    setResultsLimit(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));\n    if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {\n      setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));\n    }\n    showSearchBox =\n        a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9604, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [1156], "initializationEnd": [1219], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1240, "focalAPIEnd": 1297, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 1303, "followUpCheckExpressionEnd": 1320, "followUpCheckBlockStart": 1303, "followUpCheckBlockEnd": 1534, "use": ["typedArray.recycle()", "typedArray.peekValue(int)", "Bundle.putCharSequence(str,CharSequence)", "putBoolean(str,*)", "putInt(str,*)", "putFloat(str,*)", "typedArray.recycle()", "typedArray.recycle()", "typedArray.recycle()"], "useStart": [1329, 1555, 1736, 1839, 1982, 2074, 2137, 2396, 2628], "useEnd": [1341, 1613, 1771, 1878, 2012, 2112, 2149, 2408, 2640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/android/content/res/Resources.java", "rawCode": "  /**\n   * Parse a name/value pair out of an XML tag holding that data. The AttributeSet must be holding\n   * the data defined by {@link android.R.styleable#Extra}. The following value types are supported:\n   *\n   * <ul>\n   *   <li>{@link TypedValue#TYPE_STRING}: {@link Bundle#putCharSequence Bundle.putCharSequence()}\n   *   <li>{@link TypedValue#TYPE_INT_BOOLEAN}: {@link Bundle#putCharSequence Bundle.putBoolean()}\n   *   <li>{@link TypedValue#TYPE_FIRST_INT}-{@link TypedValue#TYPE_LAST_INT}: {@link\n   *       Bundle#putCharSequence Bundle.putBoolean()}\n   *   <li>{@link TypedValue#TYPE_FLOAT}: {@link Bundle#putCharSequence Bundle.putFloat()}\n   * </ul>\n   *\n   * @param tagName The name of the tag these attributes come from; this is only used for reporting\n   *     error messages.\n   * @param attrs The attributes from which to retrieve the name/value pair.\n   * @param outBundle The Bundle in which to place the parsed value.\n   * @throws XmlPullParserException If the attributes are not valid.\n   */\n  public void parseBundleExtra(String tagName, AttributeSet attrs, Bundle outBundle)\n      throws XmlPullParserException {\n    TypedArray sa = obtainAttributes(attrs, com.android.internal.R.styleable.Extra);\n\n    String name = sa.getString(com.android.internal.R.styleable.Extra_name);\n    if (name == null) {\n      sa.recycle();\n      throw new XmlPullParserException(\n          \"<\"\n              + tagName\n              + \"> requires an android:name attribute at \"\n              + attrs.getPositionDescription());\n    }\n\n    TypedValue v = sa.peekValue(com.android.internal.R.styleable.Extra_value);\n    if (v != null) {\n      if (v.type == TypedValue.TYPE_STRING) {\n        CharSequence cs = v.coerceToString();\n        outBundle.putCharSequence(name, cs);\n      } else if (v.type == TypedValue.TYPE_INT_BOOLEAN) {\n        outBundle.putBoolean(name, v.data != 0);\n      } else if (v.type >= TypedValue.TYPE_FIRST_INT && v.type <= TypedValue.TYPE_LAST_INT) {\n        outBundle.putInt(name, v.data);\n      } else if (v.type == TypedValue.TYPE_FLOAT) {\n        outBundle.putFloat(name, v.getFloat());\n      } else {\n        sa.recycle();\n        throw new XmlPullParserException(\n            \"<\"\n                + tagName\n                + \"> only supports string, integer, float, color, and boolean at \"\n                + attrs.getPositionDescription());\n      }\n    } else {\n      sa.recycle();\n      throw new XmlPullParserException(\n          \"<\"\n              + tagName\n              + \"> requires an android:value or android:resource attribute at \"\n              + attrs.getPositionDescription());\n    }\n\n    sa.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9605, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 229, "focalAPIEnd": 274, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "new ComponentName(str,String)"], "useStart": [301, 385], "useEnd": [344, 426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_launcher/tree/master/src/com/android/launcher/LauncherProvider.java", "rawCode": "    private boolean addShortcut(\n        SQLiteDatabase db,\n        ContentValues values,\n        TypedArray a,\n        PackageManager packageManager,\n        Intent intent) {\n\n      ActivityInfo info;\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n      try {\n        ComponentName cn = new ComponentName(packageName, className);\n        info = packageManager.getActivityInfo(cn, 0);\n        intent.setComponent(cn);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n        values.put(Favorites.INTENT, intent.toUri(0));\n        values.put(Favorites.TITLE, info.loadLabel(packageManager).toString());\n        values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPLICATION);\n        values.put(Favorites.SPANX, 1);\n        values.put(Favorites.SPANY, 1);\n        db.insert(TABLE_FAVORITES, null, values);\n      } catch (PackageManager.NameNotFoundException e) {\n        Log.w(LOG_TAG, \"Unable to add favorite: \" + packageName + \"/\" + className, e);\n        return false;\n      }\n      return true;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9606, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dodyg/AndroidRivers/tree/master/HoloEverywhere-master/addons/preferences/src/org/holoeverywhere/preference/EditTextPreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9607, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<com.android.internal.R.styleable.Window.length", "guardType": "LOOP {", "guardExpressionStart": 260, "guardExpressionEnd": 332, "guardBlockStart": 260, "guardBlockEnd": 528, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 505, "focalAPIEnd": 519, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_frameworks_policies_base/tree/master/mid/com/android/internal/policy/impl/MidWindow.java", "rawCode": "  protected ViewGroup generateLayout(DecorView decor) {\n    // Apply data from current theme.\n\n    final Context c = getContext();\n    TypedArray a = getWindowStyle();\n\n    if (false) {\n      System.out.println(\"From style:\");\n      String s = \"Attrs:\";\n      for (int i = 0; i < com.android.internal.R.styleable.Window.length; i++) {\n        s =\n            s\n                + \" \"\n                + Integer.toHexString(com.android.internal.R.styleable.Window[i])\n                + \"=\"\n                + a.getString(i);\n      }\n      System.out.println(s);\n    }\n\n    mIsFloating = a.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating, false);\n    int flagsToUpdate =\n        (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR) & (~getForcedWindowFlags());\n    if (mIsFloating) {\n      setLayout(WRAP_CONTENT, WRAP_CONTENT);\n      setFlags(0, flagsToUpdate);\n\n      /* All dialogs should have the window dimmed */\n      WindowManager.LayoutParams params = getAttributes();\n      TypedArray attrs = c.obtainStyledAttributes(com.android.internal.R.styleable.Theme);\n      params.flags |= WindowManager.LayoutParams.FLAG_DIM_BEHIND;\n      params.dimAmount = attrs.getFloat(android.R.styleable.Theme_backgroundDimAmount, 0.5f);\n      attrs.recycle();\n    } else {\n      setFlags(FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR, flagsToUpdate);\n    }\n\n    if (a.getBoolean(com.android.internal.R.styleable.Window_windowNoTitle, false)) {\n      requestFeature(FEATURE_NO_TITLE);\n    }\n\n    if (a.getBoolean(com.android.internal.R.styleable.Window_windowFullscreen, false)) {\n      setFlags(FLAG_FULLSCREEN, FLAG_FULLSCREEN & (~getForcedWindowFlags()));\n    }\n\n    // The rest are only done if this window is not embedded; otherwise,\n    // the values are inherited from our container.\n    if (getContainer() == null) {\n      if (mBackgroundDrawable == null) {\n        if (mBackgroundResource == 0) {\n          mBackgroundResource =\n              a.getResourceId(com.android.internal.R.styleable.Window_windowBackground, 0);\n        }\n        if (mFrameResource == 0) {\n          mFrameResource = a.getResourceId(com.android.internal.R.styleable.Window_windowFrame, 0);\n        }\n        if (false) {\n          System.out.println(\n              \"Background: \"\n                  + Integer.toHexString(mBackgroundResource)\n                  + \" Frame: \"\n                  + Integer.toHexString(mFrameResource));\n        }\n      }\n      mTextColor = a.getColor(com.android.internal.R.styleable.Window_textColor, 0xFF000000);\n    }\n\n    // Inflate the window decor.\n\n    int layoutResource;\n    int features = getLocalFeatures();\n    // System.out.println(\"Features: 0x\" + Integer.toHexString(features));\n    if ((features & ((1 << FEATURE_LEFT_ICON) | (1 << FEATURE_RIGHT_ICON))) != 0) {\n      if (mIsFloating) {\n        layoutResource = com.android.internal.R.layout.dialog_title_icons;\n      } else {\n        layoutResource = com.android.internal.R.layout.screen_title_icons;\n      }\n      // System.out.println(\"Title Icons!\");\n    } else if ((features & ((1 << FEATURE_PROGRESS) | (1 << FEATURE_INDETERMINATE_PROGRESS)))\n        != 0) {\n      // Special case for a window with only a progress bar (and title).\n      // XXX Need to have a no-title version of embedded windows.\n      layoutResource = com.android.internal.R.layout.screen_progress;\n      // System.out.println(\"Progress!\");\n    } else if ((features & (1 << FEATURE_CUSTOM_TITLE)) != 0) {\n      // Special case for a window with a custom title.\n      // If the window is floating, we need a dialog layout\n      if (mIsFloating) {\n        layoutResource = com.android.internal.R.layout.dialog_custom_title;\n      } else {\n        layoutResource = com.android.internal.R.layout.screen_custom_title;\n      }\n    } else if ((features & (1 << FEATURE_NO_TITLE)) == 0) {\n      // If no other features and not embedded, only need a title.\n      // If the window is floating, we need a dialog layout\n      if (mIsFloating) {\n        layoutResource = com.android.internal.R.layout.dialog_title;\n      } else {\n        layoutResource = com.android.internal.R.layout.screen_title;\n      }\n      // System.out.println(\"Title!\");\n    } else {\n      // Embedded, so no decoration is needed.\n      layoutResource = com.android.internal.R.layout.screen_simple;\n      // System.out.println(\"Simple!\");\n    }\n\n    mDecor.startChanging();\n\n    View in = mLayoutInflater.inflate(layoutResource, null);\n    decor.addView(in, new ViewGroup.LayoutParams(MATCH_PARENT, MATCH_PARENT));\n\n    ViewGroup contentParent = (ViewGroup) findViewById(ID_ANDROID_CONTENT);\n    if (contentParent == null) {\n      throw new RuntimeException(\"Window couldn't find content container view\");\n    }\n\n    if ((features & (1 << FEATURE_INDETERMINATE_PROGRESS)) != 0) {\n      ProgressBar progress = getCircularProgressBar(false);\n      if (progress != null) {\n        progress.setIndeterminate(true);\n      }\n    }\n\n    // Remaining setup -- of background and title -- that only applies\n    // to top-level windows.\n    if (getContainer() == null) {\n      Drawable drawable = mBackgroundDrawable;\n      if (mBackgroundResource != 0) {\n        drawable = getContext().getResources().getDrawable(mBackgroundResource);\n      }\n      mDecor.setWindowBackground(drawable);\n      drawable = null;\n      if (mFrameResource != 0) {\n        drawable = getContext().getResources().getDrawable(mFrameResource);\n      }\n      mDecor.setWindowFrame(drawable);\n\n      // System.out.println(\"Text=\" + Integer.toHexString(mTextColor) +\n      // \" Sel=\" + Integer.toHexString(mTextSelectedColor) +\n      // \" Title=\" + Integer.toHexString(mTitleColor));\n\n      if (mTitleColor == 0) {\n        mTitleColor = mTextColor;\n      }\n\n      if (mTitle != null) {\n        setTitle(mTitle);\n      }\n      setTitleColor(mTitleColor);\n    }\n\n    mDecor.finishChanging();\n\n    return contentParent;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9608, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 71, "focalAPIEnd": 96, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.lastIndexOf(*)", "str.lastIndexOf(char)", "str.substring(*,int)"], "useStart": [125, 183, 219], "useEnd": [157, 204, 266], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/paranoid/Shortcuts.java", "rawCode": "    public String getItemReference(int position) {\n      String name = icons.getString(position);\n      int separatorIndex = name.lastIndexOf(File.separator);\n      int periodIndex = name.lastIndexOf('.');\n      return name.substring(separatorIndex + 1, periodIndex);\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9609, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [197], "initializationEnd": [248], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 265, "focalAPIEnd": 311, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.recycle()"], "useStart": [317], "useEnd": [328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cldellow/Ballero/tree/master/src/main/java/greendroid/src/greendroid/widget/item/SubtitleItem.java", "rawCode": "  @Override\n  public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs)\n      throws XmlPullParserException, IOException {\n    super.inflate(r, parser, attrs);\n\n    TypedArray a = r.obtainAttributes(attrs, R.styleable.SubtitleItem);\n    subtitle = a.getString(R.styleable.SubtitleItem_subtitle);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9610, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.hasValue(int)"], "configurationStart": [202], "configurationEnd": [219], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 243, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.split(String)"], "useStart": [243], "useEnd": [274], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/travp624/packages_inputmethods_LatinIME/tree/master/java/src/com/android/inputmethod/keyboard/internal/KeyboardBuilder.java", "rawCode": "  private static boolean matchString(TypedArray a, int index, String value) {\n    // If <case> does not have \"index\" attribute, that means this <case> is wild-card for the\n    // attribute.\n    return !a.hasValue(index) || stringArrayContains(a.getString(index).split(\"\\\\|\"), value);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9611, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [1156], "initializationEnd": [1219], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1240, "focalAPIEnd": 1297, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 1303, "followUpCheckExpressionEnd": 1320, "followUpCheckBlockStart": 1303, "followUpCheckBlockEnd": 1534, "use": ["typedArray.recycle()", "typedArray.peekValue(int)", "Bundle.putCharSequence(str,CharSequence)", "putBoolean(str,*)", "putInt(str,*)", "putFloat(str,*)", "typedArray.recycle()", "typedArray.recycle()", "typedArray.recycle()"], "useStart": [1329, 1555, 1736, 1839, 1982, 2074, 2137, 2396, 2628], "useEnd": [1341, 1613, 1771, 1878, 2012, 2112, 2149, 2408, 2640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/java/android/content/res/Resources.java", "rawCode": "  /**\n   * Parse a name/value pair out of an XML tag holding that data. The AttributeSet must be holding\n   * the data defined by {@link android.R.styleable#Extra}. The following value types are supported:\n   *\n   * <ul>\n   *   <li>{@link TypedValue#TYPE_STRING}: {@link Bundle#putCharSequence Bundle.putCharSequence()}\n   *   <li>{@link TypedValue#TYPE_INT_BOOLEAN}: {@link Bundle#putCharSequence Bundle.putBoolean()}\n   *   <li>{@link TypedValue#TYPE_FIRST_INT}-{@link TypedValue#TYPE_LAST_INT}: {@link\n   *       Bundle#putCharSequence Bundle.putBoolean()}\n   *   <li>{@link TypedValue#TYPE_FLOAT}: {@link Bundle#putCharSequence Bundle.putFloat()}\n   * </ul>\n   *\n   * @param tagName The name of the tag these attributes come from; this is only used for reporting\n   *     error messages.\n   * @param attrs The attributes from which to retrieve the name/value pair.\n   * @param outBundle The Bundle in which to place the parsed value.\n   * @throws XmlPullParserException If the attributes are not valid.\n   */\n  public void parseBundleExtra(String tagName, AttributeSet attrs, Bundle outBundle)\n      throws XmlPullParserException {\n    TypedArray sa = obtainAttributes(attrs, com.android.internal.R.styleable.Extra);\n\n    String name = sa.getString(com.android.internal.R.styleable.Extra_name);\n    if (name == null) {\n      sa.recycle();\n      throw new XmlPullParserException(\n          \"<\"\n              + tagName\n              + \"> requires an android:name attribute at \"\n              + attrs.getPositionDescription());\n    }\n\n    TypedValue v = sa.peekValue(com.android.internal.R.styleable.Extra_value);\n    if (v != null) {\n      if (v.type == TypedValue.TYPE_STRING) {\n        CharSequence cs = v.coerceToString();\n        outBundle.putCharSequence(name, cs);\n      } else if (v.type == TypedValue.TYPE_INT_BOOLEAN) {\n        outBundle.putBoolean(name, v.data != 0);\n      } else if (v.type >= TypedValue.TYPE_FIRST_INT && v.type <= TypedValue.TYPE_LAST_INT) {\n        outBundle.putInt(name, v.data);\n      } else if (v.type == TypedValue.TYPE_FLOAT) {\n        outBundle.putFloat(name, v.getFloat());\n      } else {\n        sa.recycle();\n        throw new XmlPullParserException(\n            \"<\"\n                + tagName\n                + \"> only supports string, integer, float, color, and boolean at \"\n                + attrs.getPositionDescription());\n      }\n    } else {\n      sa.recycle();\n      throw new XmlPullParserException(\n          \"<\"\n              + tagName\n              + \"> requires an android:value or android:resource attribute at \"\n              + attrs.getPositionDescription());\n    }\n\n    sa.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9612, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 71, "focalAPIEnd": 96, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.lastIndexOf(*)", "str.lastIndexOf(char)", "str.substring(*,int)"], "useStart": [125, 183, 219], "useEnd": [157, 204, 266], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/cyanogenmod/IconPicker.java", "rawCode": "    public String getItemReference(int position) {\n      String name = icons.getString(position);\n      int separatorIndex = name.lastIndexOf(File.separator);\n      int periodIndex = name.lastIndexOf('.');\n      return name.substring(separatorIndex + 1, periodIndex);\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9613, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [189], "initializationEnd": [275], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "configurationStart": [309, 430], "configurationEnd": [398, 514], "guardCondition": "typedArray.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit,)", "guardType": "IF {", "guardExpressionStart": 521, "guardExpressionEnd": 598, "guardBlockStart": 521, "guardBlockEnd": 700, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 621, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [607, 729, 827], "useEnd": [693, 820, 838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgattani/Group-Project/tree/master/FacebookSDK/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a =\n        activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);\n\n    setRadiusInMeters(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));\n    setResultsLimit(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));\n    if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {\n      setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));\n    }\n    showSearchBox =\n        a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9614, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 248, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "new ComponentName(str,String)"], "useStart": [320, 432], "useEnd": [363, 473], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/strifejester/platform_packages_apps_Launcher2/tree/master/src/com/android/launcher2/LauncherProvider.java", "rawCode": "    private long addAppShortcut(\n        SQLiteDatabase db,\n        ContentValues values,\n        TypedArray a,\n        PackageManager packageManager,\n        Intent intent) {\n      long id = -1;\n      ActivityInfo info;\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n      try {\n        ComponentName cn;\n        try {\n          cn = new ComponentName(packageName, className);\n          info = packageManager.getActivityInfo(cn, 0);\n        } catch (PackageManager.NameNotFoundException nnfe) {\n          String[] packages =\n              packageManager.currentToCanonicalPackageNames(new String[] {packageName});\n          cn = new ComponentName(packages[0], className);\n          info = packageManager.getActivityInfo(cn, 0);\n        }\n        id = generateNewId();\n        intent.setComponent(cn);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n        values.put(Favorites.INTENT, intent.toUri(0));\n        values.put(Favorites.TITLE, info.loadLabel(packageManager).toString());\n        values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPLICATION);\n        values.put(Favorites.SPANX, 1);\n        values.put(Favorites.SPANY, 1);\n        values.put(Favorites._ID, generateNewId());\n        if (dbInsertAndCheck(this, db, TABLE_FAVORITES, null, values) < 0) {\n          return -1;\n        }\n      } catch (PackageManager.NameNotFoundException e) {\n        Log.w(TAG, \"Unable to add favorite: \" + packageName + \"/\" + className, e);\n      }\n      return id;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9615, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [72], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)"], "configurationStart": [173, 265], "configurationEnd": [243, 336], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 354, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "typedArray.recycle()"], "useStart": [432, 498], "useEnd": [492, 509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shi-314/AngryKings/tree/master/facebook/src/com/facebook/widget/LoginButton.java", "rawCode": "  private void parseAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);\n    confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);\n    fetchUserInfo = a.getBoolean(R.styleable.com_facebook_login_view_fetch_user_info, true);\n    loginText = a.getString(R.styleable.com_facebook_login_view_login_text);\n    logoutText = a.getString(R.styleable.com_facebook_login_view_logout_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9616, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 71, "focalAPIEnd": 96, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.lastIndexOf(*)", "str.lastIndexOf(char)", "str.substring(*,int)"], "useStart": [125, 183, 219], "useEnd": [157, 204, 266], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidTh3ory/packages_apps_Settings/tree/master/src/com/android/settings/carbon/IconPicker.java", "rawCode": "    public String getItemReference(int position) {\n      String name = icons.getString(position);\n      int separatorIndex = name.lastIndexOf(File.separator);\n      int periodIndex = name.lastIndexOf('.');\n      return name.substring(separatorIndex + 1, periodIndex);\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9617, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [72], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)"], "configurationStart": [173, 265], "configurationEnd": [243, 336], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 354, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "typedArray.recycle()"], "useStart": [432, 498], "useEnd": [492, 509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/androideveloper/RAVA-Voting/tree/master/RavaVotingAndroid/libraries/facebook/src/com/facebook/widget/LoginButton.java", "rawCode": "  private void parseAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);\n    confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);\n    fetchUserInfo = a.getBoolean(R.styleable.com_facebook_login_view_fetch_user_info, true);\n    loginText = a.getString(R.styleable.com_facebook_login_view_login_text);\n    logoutText = a.getString(R.styleable.com_facebook_login_view_logout_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9618, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [197], "initializationEnd": [247], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 263, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.recycle()"], "useStart": [313], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CapsuleMe/Capsule/tree/master/GreenDroid/src/greendroid/widget/item/SubtextItem.java", "rawCode": "  @Override\n  public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs)\n      throws XmlPullParserException, IOException {\n    super.inflate(r, parser, attrs);\n\n    TypedArray a = r.obtainAttributes(attrs, R.styleable.SubtextItem);\n    subtext = a.getString(R.styleable.SubtextItem_subtext);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9619, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "XmlPullParserException", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 366, "tryExpressionEnd": 370, "tryBlockStart": 366, "tryBlockEnd": 4745, "catchExpressionStart": 4493, "catchExpressionEnd": 4526, "catchBlockStart": 4493, "catchBlockEnd": 4595, "exceptionHandlingCallStart": [4540], "exceptionHandlingCallEnd": [4588], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 3278, "focalAPIEnd": 3350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["XmlResourceParser.close()"], "finallyExpressionStart": 4688, "finallyExpressionEnd": 4696, "finallyBlockStart": 4688, "finallyBlockEnd": 4745, "cleanUpCallStart": [4724], "cleanUpCallEnd": [4738], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/preference/PreferenceActivity.java", "rawCode": "  /**\n   * Parse the given XML file as a header description, adding each parsed Header into the target\n   * list.\n   *\n   * @param resid The XML resource to load and parse.\n   * @param target The list in which the parsed headers should be placed.\n   */\n  public void loadHeadersFromResource(int resid, List<Header> target) {\n    XmlResourceParser parser = null;\n    try {\n      parser = getResources().getXml(resid);\n      AttributeSet attrs = Xml.asAttributeSet(parser);\n\n      int type;\n      while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n          && type != XmlPullParser.START_TAG) {\n        // Parse next until start tag is found\n      }\n\n      String nodeName = parser.getName();\n      if (!\"preference-headers\".equals(nodeName)) {\n        throw new RuntimeException(\n            \"XML document must start with <preference-headers> tag; found\"\n                + nodeName\n                + \" at \"\n                + parser.getPositionDescription());\n      }\n\n      Bundle curBundle = null;\n\n      final int outerDepth = parser.getDepth();\n      while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n          && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {\n        if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {\n          continue;\n        }\n\n        nodeName = parser.getName();\n        if (\"header\".equals(nodeName)) {\n          Header header = new Header();\n\n          TypedArray sa =\n              getResources()\n                  .obtainAttributes(attrs, com.android.internal.R.styleable.PreferenceHeader);\n          header.id =\n              sa.getResourceId(\n                  com.android.internal.R.styleable.PreferenceHeader_id, (int) HEADER_ID_UNDEFINED);\n          TypedValue tv = sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_title);\n          if (tv != null && tv.type == TypedValue.TYPE_STRING) {\n            if (tv.resourceId != 0) {\n              header.titleRes = tv.resourceId;\n            } else {\n              header.title = tv.string;\n            }\n          }\n          tv = sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_summary);\n          if (tv != null && tv.type == TypedValue.TYPE_STRING) {\n            if (tv.resourceId != 0) {\n              header.summaryRes = tv.resourceId;\n            } else {\n              header.summary = tv.string;\n            }\n          }\n          tv = sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_breadCrumbTitle);\n          if (tv != null && tv.type == TypedValue.TYPE_STRING) {\n            if (tv.resourceId != 0) {\n              header.breadCrumbTitleRes = tv.resourceId;\n            } else {\n              header.breadCrumbTitle = tv.string;\n            }\n          }\n          tv = sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_breadCrumbShortTitle);\n          if (tv != null && tv.type == TypedValue.TYPE_STRING) {\n            if (tv.resourceId != 0) {\n              header.breadCrumbShortTitleRes = tv.resourceId;\n            } else {\n              header.breadCrumbShortTitle = tv.string;\n            }\n          }\n          header.iconRes =\n              sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_icon, 0);\n          header.fragment =\n              sa.getString(com.android.internal.R.styleable.PreferenceHeader_fragment);\n          sa.recycle();\n\n          if (curBundle == null) {\n            curBundle = new Bundle();\n          }\n\n          final int innerDepth = parser.getDepth();\n          while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n              && (type != XmlPullParser.END_TAG || parser.getDepth() > innerDepth)) {\n            if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {\n              continue;\n            }\n\n            String innerNodeName = parser.getName();\n            if (innerNodeName.equals(\"extra\")) {\n              getResources().parseBundleExtra(\"extra\", attrs, curBundle);\n              XmlUtils.skipCurrentTag(parser);\n\n            } else if (innerNodeName.equals(\"intent\")) {\n              header.intent = Intent.parseIntent(getResources(), parser, attrs);\n\n            } else {\n              XmlUtils.skipCurrentTag(parser);\n            }\n          }\n\n          if (curBundle.size() > 0) {\n            header.fragmentArguments = curBundle;\n            curBundle = null;\n          }\n\n          target.add(header);\n        } else {\n          XmlUtils.skipCurrentTag(parser);\n        }\n      }\n\n    } catch (XmlPullParserException e) {\n      throw new RuntimeException(\"Error parsing headers\", e);\n    } catch (IOException e) {\n      throw new RuntimeException(\"Error parsing headers\", e);\n    } finally {\n      if (parser != null) parser.close();\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9620, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [1136], "initializationEnd": [1216], "hasTryCatch": 1, "exceptionType": "XmlPullParserException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 314, "tryExpressionEnd": 318, "tryBlockStart": 314, "tryBlockEnd": 1741, "catchExpressionStart": 1369, "catchExpressionEnd": 1402, "catchBlockStart": 1369, "catchBlockEnd": 1477, "exceptionHandlingCallStart": [1410], "exceptionHandlingCallEnd": [1470], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1253, "focalAPIEnd": 1338, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 1747, "followUpCheckExpressionEnd": 1776, "followUpCheckBlockStart": 1747, "followUpCheckBlockEnd": 2281, "use": ["typedArray.recycle()", "new ComponentName(*,str)"], "useStart": [1346, 2094], "useEnd": [1361, 2145], "hasFinally": 1, "cleanUpCall": ["XmlResourceParser.close()"], "finallyExpressionStart": 1684, "finallyExpressionEnd": 1692, "finallyBlockStart": 1684, "finallyBlockEnd": 1741, "cleanUpCallStart": [1720], "cleanUpCallEnd": [1734], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/VoiceInputOutputSettings.java", "rawCode": "  private void updateSettingsLink(String currentSetting) {\n    ResolveInfo currentRecognizer = mAvailableRecognizersMap.get(currentSetting);\n    if (currentRecognizer == null) return;\n\n    ServiceInfo si = currentRecognizer.serviceInfo;\n    XmlResourceParser parser = null;\n    String settingsActivity = null;\n    try {\n      parser =\n          si.loadXmlMetaData(mFragment.getPackageManager(), RecognitionService.SERVICE_META_DATA);\n      if (parser == null) {\n        throw new XmlPullParserException(\n            \"No \" + RecognitionService.SERVICE_META_DATA + \" meta-data for \" + si.packageName);\n      }\n\n      Resources res = mFragment.getPackageManager().getResourcesForApplication(si.applicationInfo);\n\n      AttributeSet attrs = Xml.asAttributeSet(parser);\n\n      int type;\n      while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n          && type != XmlPullParser.START_TAG) {}\n\n      String nodeName = parser.getName();\n      if (!\"recognition-service\".equals(nodeName)) {\n        throw new XmlPullParserException(\"Meta-data does not start with recognition-service tag\");\n      }\n\n      TypedArray array =\n          res.obtainAttributes(attrs, com.android.internal.R.styleable.RecognitionService);\n      settingsActivity =\n          array.getString(com.android.internal.R.styleable.RecognitionService_settingsActivity);\n      array.recycle();\n    } catch (XmlPullParserException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } catch (IOException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } catch (NameNotFoundException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } finally {\n      if (parser != null) parser.close();\n    }\n\n    if (settingsActivity == null) {\n      // No settings preference available - hide the preference.\n      Log.w(TAG, \"no recognizer settings available for \" + si.packageName);\n      mSettingsPref.setIntent(null);\n      mVoiceCategory.removePreference(mSettingsPref);\n    } else {\n      Intent i = new Intent(Intent.ACTION_MAIN);\n      i.setComponent(new ComponentName(si.packageName, settingsActivity));\n      mSettingsPref.setIntent(i);\n      mRecognizerPref.setSummary(currentRecognizer.loadLabel(mFragment.getPackageManager()));\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9621, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 95, "focalAPIEnd": 113, "followUpCheck": "str == null || str.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 119, "followUpCheckExpressionEnd": 160, "followUpCheckBlockStart": 119, "followUpCheckBlockEnd": 216, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dodyg/AndroidRivers/tree/master/HoloEverywhere-master/addons/preferences/src/org/holoeverywhere/preference/DatePreference.java", "rawCode": "  @Override\n  protected String onGetDefaultValue(TypedArray a, int index) {\n    String value = a.getString(index);\n    if (value == null || value.length() == 0) {\n      value = String.valueOf(getCurrentTime());\n    }\n    return value;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9622, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getValue(int,TypedValue)", "typedArray.getValue(int,TypedValue)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2409, 2753, 3572], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2480, 2828, 3583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n\n      // itemActionViewClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);\n      itemActionViewClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      // itemActionProviderClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);\n      itemActionProviderClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9623, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [239], "initializationEnd": [327], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 364, "focalAPIEnd": 439, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ObjectAnimator.setPropertyName(str)", "typedArray.recycle()"], "useStart": [446, 487], "useEnd": [480, 498], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/java/android/animation/AnimatorInflater.java", "rawCode": "  private static ObjectAnimator loadObjectAnimator(Context context, AttributeSet attrs)\n      throws NotFoundException {\n\n    ObjectAnimator anim = new ObjectAnimator();\n\n    loadAnimator(context, attrs, anim);\n\n    TypedArray a =\n        context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.PropertyAnimator);\n\n    String propertyName =\n        a.getString(com.android.internal.R.styleable.PropertyAnimator_propertyName);\n\n    anim.setPropertyName(propertyName);\n\n    a.recycle();\n\n    return anim;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9624, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2291, 2404, 3100], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2356, 2473, 3111], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mWater/mWater-Android-App/tree/master/android/actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n      itemActionViewClassName = a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      itemActionProviderClassName =\n          a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9625, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [140], "initializationEnd": [221], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [299, 414, 529, 714, 801, 892], "configurationEnd": [375, 493, 608, 772, 868, 958], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1013, "focalAPIEnd": 1086, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getInt(int,int)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.recycle()"], "useStart": [1001, 1139, 1373, 1702, 1807, 1906, 2010, 2111, 2214, 2332, 2450, 3151], "useEnd": [1087, 1209, 1445, 1785, 1884, 1983, 2078, 2173, 2288, 2402, 2524, 3162], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/java/android/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a =\n          mContext.obtainStyledAttributes(attrs, com.android.internal.R.styleable.MenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(com.android.internal.R.styleable.MenuItem_id, defaultItemId);\n      final int category =\n          a.getInt(com.android.internal.R.styleable.MenuItem_menuCategory, groupCategory);\n      final int order =\n          a.getInt(com.android.internal.R.styleable.MenuItem_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(com.android.internal.R.styleable.MenuItem_title);\n      itemTitleCondensed = a.getText(com.android.internal.R.styleable.MenuItem_titleCondensed);\n      itemIconResId = a.getResourceId(com.android.internal.R.styleable.MenuItem_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_numericShortcut));\n      if (a.hasValue(com.android.internal.R.styleable.MenuItem_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable =\n            a.getBoolean(com.android.internal.R.styleable.MenuItem_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n      itemChecked =\n          a.getBoolean(com.android.internal.R.styleable.MenuItem_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(com.android.internal.R.styleable.MenuItem_visible, groupVisible);\n      itemEnabled = a.getBoolean(com.android.internal.R.styleable.MenuItem_enabled, groupEnabled);\n      itemShowAsAction = a.getInt(com.android.internal.R.styleable.MenuItem_showAsAction, -1);\n      itemListenerMethodName = a.getString(com.android.internal.R.styleable.MenuItem_onClick);\n      itemActionViewLayout =\n          a.getResourceId(com.android.internal.R.styleable.MenuItem_actionLayout, 0);\n      itemActionViewClassName =\n          a.getString(com.android.internal.R.styleable.MenuItem_actionViewClass);\n      itemActionProviderClassName =\n          a.getString(com.android.internal.R.styleable.MenuItem_actionProviderClass);\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9626, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [149], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 286, "focalAPIEnd": 365, "followUpCheck": "TextUtils.isEmpty(str)", "checkType": "IF", "followUpCheckExpressionStart": 1013, "followUpCheckExpressionEnd": 1048, "followUpCheckBlockStart": 1013, "followUpCheckBlockEnd": 1079, "use": ["typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getBoolean(int,boolean)", "new AuthenticatorDescription(str,String,int,int,int,int,boolean)", "typedArray.recycle()"], "useStart": [403, 520, 641, 762, 917, 1093, 1234], "useEnd": [483, 599, 725, 870, 1005, 1210, 1246], "hasFinally": 1, "cleanUpCall": ["TypedArray.recycle()"], "finallyExpressionStart": 1218, "finallyExpressionEnd": 1226, "finallyBlockStart": 1218, "finallyBlockEnd": 1253, "cleanUpCallStart": [1234], "cleanUpCallEnd": [1246], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/accounts/AccountAuthenticatorCache.java", "rawCode": "  public AuthenticatorDescription parseServiceAttributes(\n      Resources res, String packageName, AttributeSet attrs) {\n    TypedArray sa =\n        res.obtainAttributes(attrs, com.android.internal.R.styleable.AccountAuthenticator);\n    try {\n      final String accountType =\n          sa.getString(com.android.internal.R.styleable.AccountAuthenticator_accountType);\n      final int labelId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_label, 0);\n      final int iconId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_icon, 0);\n      final int smallIconId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_smallIcon, 0);\n      final int prefId =\n          sa.getResourceId(\n              com.android.internal.R.styleable.AccountAuthenticator_accountPreferences, 0);\n      final boolean customTokens =\n          sa.getBoolean(com.android.internal.R.styleable.AccountAuthenticator_customTokens, false);\n      if (TextUtils.isEmpty(accountType)) {\n        return null;\n      }\n      return new AuthenticatorDescription(\n          accountType, packageName, labelId, iconId, smallIconId, prefId, customTokens);\n    } finally {\n      sa.recycle();\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9627, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [181], "initializationEnd": [261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)"], "configurationStart": [293], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 409, "focalAPIEnd": 475, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 481, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 481, "followUpCheckBlockEnd": 620, "use": ["str.split(String)", "typedArray.getBoolean(int,boolean)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getDrawable(int)", "typedArray.getDrawable(int)", "typedArray.recycle()"], "useStart": [539, 649, 750, 837, 942, 1055, 1140], "useEnd": [567, 732, 814, 907, 1018, 1133, 1151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMS-Projects/copyit-app/tree/master/android/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);\n\n    setShowPictures(\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));\n    String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);\n    if (extraFieldsString != null) {\n      String[] strings = extraFieldsString.split(\",\");\n      setExtraFields(Arrays.asList(strings));\n    }\n\n    showTitleBar =\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);\n    titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);\n    doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);\n    titleBarBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);\n    doneButtonBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9628, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*,int,int)"], "initializationStart": [236], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 447, "focalAPIEnd": 509, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getInteger(*,int)", "typedArray.getColor(*,*)", "typedArray.getDimension(int,int)", "typedArray.getColor(*,*)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getColor(*,*)", "setTitle(str)"], "useStart": [545, 907, 1008, 1114, 1233, 1338, 1432, 1541, 1655, 1771, 1885, 2126, 2575], "useEnd": [654, 982, 1080, 1194, 1310, 1406, 1503, 1616, 1731, 1848, 1959, 2200, 2594], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scruffyfox/X-Library/tree/master/src/x/ui/XUIMenuButtonGroup.java", "rawCode": "  private void finalConstructor(Context context, AttributeSet attrs, int defStyle, boolean attach) {\n    mContext = context;\n    mStyle = defStyle == 0 ? R.style.menu_button_group_iphone : defStyle;\n\n    TypedArray attributes =\n        mContext.obtainStyledAttributes(attrs, R.styleable.XUIMenuButtonGroup, 0, mStyle);\n    // TypedArray attributes = mContext.obtainStyledAttributes(mStyle,\n    // R.styleable.XUIMenuButtonGroup);\n\n    groupName = attributes.getString(R.styleable.XUIMenuButtonGroup_groupName);\n    mGroupNameTransform =\n        attributes.getInteger(\n            R.styleable.XUIMenuButtonGroup_groupName_transform, TEXT_TRANSFORM_NORMAL);\n\n    mLayoutInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    layoutView =\n        (LinearLayout)\n            mLayoutInflater.inflate(R.layout.xui_menu_button_group, attach ? this : null);\n\n    mStrokeColor = attributes.getColor(R.styleable.XUIMenuButtonGroup_strokeColor, 0xffcccccc);\n    mStrokeSize = (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_strokeSize, 2.0f);\n    mLabelStrokeColor =\n        attributes.getColor(R.styleable.XUIMenuButtonGroup_labelStrokeColor, 0xff333333);\n    mLabelStrokeSize =\n        (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_labelStrokeSize, 3.0f);\n    int labelSize = (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_labelSize, 0);\n    int padding = (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_labelPadding, 0);\n    int paddingLeft =\n        (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_labelPaddingLeft, 0);\n    int paddingRight =\n        (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_labelPaddingRight, 0);\n    int paddingBottom =\n        (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_labelPaddingBottom, 0);\n    int paddingTop =\n        (int) attributes.getDimension(R.styleable.XUIMenuButtonGroup_labelPaddingTop, 0);\n\n    ((TextView) layoutView.findViewById(R.id.group_label)).setTextSize(labelSize);\n    ((TextView) layoutView.findViewById(R.id.group_label))\n        .setTextColor(attributes.getColor(R.styleable.XUIMenuButtonGroup_labelColor, 0xff000000));\n\n    if (padding > 0) {\n      layoutView.findViewById(R.id.group_label).setPadding(padding, padding, padding, padding);\n    } else {\n      layoutView\n          .findViewById(R.id.group_label)\n          .setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom);\n    }\n\n    layoutView.setOrientation(VERTICAL);\n    setOrientation(VERTICAL);\n\n    if (attach) {\n      setTitle(groupName);\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9629, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [172], "initializationEnd": [184], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 255, "focalAPIEnd": 292, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 298, "followUpCheckExpressionEnd": 314, "followUpCheckBlockStart": 298, "followUpCheckBlockEnd": 342, "use": ["loadMap(str)"], "useStart": [323], "useEnd": [335], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Brueggus/linafm/tree/master/src/com/ctc/android/widget/ImageMap.java", "rawCode": "  /**\n   * get the map name from the attributes and load areas from xml\n   *\n   * @param attrs\n   */\n  private void loadAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.ImageMap);\n    String map = a.getString(R.styleable.ImageMap_map);\n    if (map != null) {\n      loadMap(map);\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9630, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 75, "focalAPIEnd": 92, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 98, "followUpCheckExpressionEnd": 112, "followUpCheckBlockStart": 98, "followUpCheckBlockEnd": 253, "use": ["str.length()", "str.substring(int,*)"], "useStart": [178, 163], "useEnd": [188, 193], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/graphics/java/android/graphics/drawable/ScaleDrawable.java", "rawCode": "  private static float getPercent(TypedArray a, int name) {\n    String s = a.getString(name);\n    if (s != null) {\n      if (s.endsWith(\"%\")) {\n        String f = s.substring(0, s.length() - 1);\n        return Float.parseFloat(f) / 100.0f;\n      }\n    }\n    return -1;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9631, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [149], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 286, "focalAPIEnd": 365, "followUpCheck": "TextUtils.isEmpty(str)", "checkType": "IF", "followUpCheckExpressionStart": 1013, "followUpCheckExpressionEnd": 1048, "followUpCheckBlockStart": 1013, "followUpCheckBlockEnd": 1079, "use": ["typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getBoolean(int,boolean)", "new AuthenticatorDescription(str,String,int,int,int,int,boolean)", "typedArray.recycle()"], "useStart": [403, 520, 641, 762, 917, 1093, 1234], "useEnd": [483, 599, 725, 870, 1005, 1210, 1246], "hasFinally": 1, "cleanUpCall": ["TypedArray.recycle()"], "finallyExpressionStart": 1218, "finallyExpressionEnd": 1226, "finallyBlockStart": 1218, "finallyBlockEnd": 1253, "cleanUpCallStart": [1234], "cleanUpCallEnd": [1246], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/accounts/AccountAuthenticatorCache.java", "rawCode": "  public AuthenticatorDescription parseServiceAttributes(\n      Resources res, String packageName, AttributeSet attrs) {\n    TypedArray sa =\n        res.obtainAttributes(attrs, com.android.internal.R.styleable.AccountAuthenticator);\n    try {\n      final String accountType =\n          sa.getString(com.android.internal.R.styleable.AccountAuthenticator_accountType);\n      final int labelId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_label, 0);\n      final int iconId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_icon, 0);\n      final int smallIconId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_smallIcon, 0);\n      final int prefId =\n          sa.getResourceId(\n              com.android.internal.R.styleable.AccountAuthenticator_accountPreferences, 0);\n      final boolean customTokens =\n          sa.getBoolean(com.android.internal.R.styleable.AccountAuthenticator_customTokens, false);\n      if (TextUtils.isEmpty(accountType)) {\n        return null;\n      }\n      return new AuthenticatorDescription(\n          accountType, packageName, labelId, iconId, smallIconId, prefId, customTokens);\n    } finally {\n      sa.recycle();\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9632, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [72], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)"], "configurationStart": [173, 265], "configurationEnd": [243, 336], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 354, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "typedArray.recycle()"], "useStart": [432, 498], "useEnd": [492, 509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ScootrNova/ClassyGames/tree/master/projects/android/facebook/src/com/facebook/widget/LoginButton.java", "rawCode": "  private void parseAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);\n    confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);\n    fetchUserInfo = a.getBoolean(R.styleable.com_facebook_login_view_fetch_user_info, true);\n    loginText = a.getString(R.styleable.com_facebook_login_view_login_text);\n    logoutText = a.getString(R.styleable.com_facebook_login_view_logout_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9633, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [189], "initializationEnd": [275], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "configurationStart": [309, 430], "configurationEnd": [398, 514], "guardCondition": "typedArray.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit,)", "guardType": "IF {", "guardExpressionStart": 521, "guardExpressionEnd": 598, "guardBlockStart": 521, "guardBlockEnd": 700, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 621, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [607, 729, 827], "useEnd": [693, 820, 838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMS-Projects/copyit-app/tree/master/android/facebook/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a =\n        activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);\n\n    setRadiusInMeters(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));\n    setResultsLimit(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));\n    if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {\n      setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));\n    }\n    showSearchBox =\n        a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9634, "initialization": ["TypedArray typedArray = Context.obtainStyledAttributes(AttributeSet,int[])"], "initializationStart": [239], "initializationEnd": [345], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 382, "focalAPIEnd": 462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ObjectAnimator.setPropertyName(str)", "typedArray.recycle()"], "useStart": [469, 510], "useEnd": [503, 521], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NextersAppFactory/WaterHeart/tree/master/JakeWharton-NineOldAndroids-9f20fd7/library/src/com/nineoldandroids/animation/AnimatorInflater.java", "rawCode": "  private static ObjectAnimator loadObjectAnimator(Context context, AttributeSet attrs)\n      throws NotFoundException {\n\n    ObjectAnimator anim = new ObjectAnimator();\n\n    loadAnimator(context, attrs, anim);\n\n    TypedArray a =\n        context.obtainStyledAttributes(\n            attrs, /*com.android.internal.R.styleable.*/ PropertyAnimator);\n\n    String propertyName =\n        a.getString(/*com.android.internal.R.styleable.*/ PropertyAnimator_propertyName);\n\n    anim.setPropertyName(propertyName);\n\n    a.recycle();\n\n    return anim;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9635, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getValue(int,TypedValue)", "typedArray.getValue(int,TypedValue)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2409, 2753, 3572], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2480, 2828, 3583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wwyz/DotaSpark/tree/master/actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n\n      // itemActionViewClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);\n      itemActionViewClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      // itemActionProviderClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);\n      itemActionProviderClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9636, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 99, "focalAPIEnd": 118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgeo/cgeo/tree/master/main/src/cgeo/geocaching/settings/CapabilitiesPreference.java", "rawCode": "  @Override\n  protected void processAttributeValues(final TypedArray values) {\n    connectorCode = values.getString(0);\n    setSummary(StringUtils.EMPTY);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9637, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "URISyntaxException", "exceptionHandlingCall": ["w(String,String)"], "tryExpressionStart": 343, "tryExpressionEnd": 347, "tryBlockStart": 343, "tryBlockEnd": 581, "catchExpressionStart": 452, "catchExpressionEnd": 481, "catchBlockStart": 452, "catchBlockEnd": 581, "exceptionHandlingCallStart": [491], "exceptionHandlingCallEnd": [539], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)"], "configurationStart": [166, 242], "configurationEnd": [211, 288], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 363, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseUri(str,int)"], "useStart": [419], "useEnd": [442], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openeclair/android_packages_apps_Launcher2/tree/master/src/com/android/launcher2/LauncherProvider.java", "rawCode": "    private boolean addUriShortcut(SQLiteDatabase db, ContentValues values, TypedArray a) {\n      Resources r = mContext.getResources();\n\n      final int iconResId = a.getResourceId(R.styleable.Favorite_icon, 0);\n      final int titleResId = a.getResourceId(R.styleable.Favorite_title, 0);\n\n      Intent intent;\n      String uri = null;\n      try {\n        uri = a.getString(R.styleable.Favorite_uri);\n        intent = Intent.parseUri(uri, 0);\n      } catch (URISyntaxException e) {\n        Log.w(TAG, \"Shortcut has malformed uri: \" + uri);\n        return false; // Oh well\n      }\n\n      if (iconResId == 0 || titleResId == 0) {\n        Log.w(TAG, \"Shortcut is missing title or icon resource ID\");\n        return false;\n      }\n\n      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n      values.put(Favorites.INTENT, intent.toUri(0));\n      values.put(Favorites.TITLE, r.getString(titleResId));\n      values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_SHORTCUT);\n      values.put(Favorites.SPANX, 1);\n      values.put(Favorites.SPANY, 1);\n      values.put(Favorites.ICON_TYPE, Favorites.ICON_TYPE_RESOURCE);\n      values.put(Favorites.ICON_PACKAGE, mContext.getPackageName());\n      values.put(Favorites.ICON_RESOURCE, r.getResourceName(iconResId));\n\n      db.insert(TABLE_FAVORITES, null, values);\n\n      return true;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9638, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 144, "focalAPIEnd": 207, "followUpCheck": "mStyles.containsKey(str)", "checkType": "IF", "followUpCheckExpressionStart": 326, "followUpCheckExpressionEnd": 361, "followUpCheckBlockStart": 326, "followUpCheckBlockEnd": 447, "use": ["format(String,*,str)", "typedArray.getString(int)", "HashMap<String, DeclaredKeyStyle>.put(str,DeclaredKeyStyle)"], "useStart": [241, 617, 932], "useEnd": [319, 682, 961], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phuang/LatinIME/tree/master/java/src/com/android/inputmethod/keyboard/internal/KeyStyles.java", "rawCode": "  public void parseKeyStyleAttributes(\n      TypedArray keyStyleAttr, TypedArray keyAttrs, XmlPullParser parser) {\n    final String styleName = keyStyleAttr.getString(R.styleable.Keyboard_KeyStyle_styleName);\n    if (DEBUG)\n      Log.d(TAG, String.format(\"<%s styleName=%s />\", KeyboardBuilder.TAG_KEY_STYLE, styleName));\n    if (mStyles.containsKey(styleName))\n      throw new ParseException(\"duplicate key style declared: \" + styleName, parser);\n\n    final DeclaredKeyStyle style = new DeclaredKeyStyle();\n    if (keyStyleAttr.hasValue(R.styleable.Keyboard_KeyStyle_parentStyle)) {\n      final String parentStyle = keyStyleAttr.getString(R.styleable.Keyboard_KeyStyle_parentStyle);\n      final DeclaredKeyStyle parent = mStyles.get(parentStyle);\n      if (parent == null) throw new ParseException(\"Unknown parentStyle \" + parentStyle, parser);\n      style.addParent(parent);\n    }\n    style.parseKeyStyleAttributes(keyAttrs);\n    mStyles.put(styleName, style);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9639, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 248, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "new ComponentName(str,String)"], "useStart": [320, 432], "useEnd": [363, 473], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamturbulence/platform_packages_apps_Launcher2/tree/master/src/com/android/launcher2/LauncherProvider.java", "rawCode": "    private long addAppShortcut(\n        SQLiteDatabase db,\n        ContentValues values,\n        TypedArray a,\n        PackageManager packageManager,\n        Intent intent) {\n      long id = -1;\n      ActivityInfo info;\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n      try {\n        ComponentName cn;\n        try {\n          cn = new ComponentName(packageName, className);\n          info = packageManager.getActivityInfo(cn, 0);\n        } catch (PackageManager.NameNotFoundException nnfe) {\n          String[] packages =\n              packageManager.currentToCanonicalPackageNames(new String[] {packageName});\n          cn = new ComponentName(packages[0], className);\n          info = packageManager.getActivityInfo(cn, 0);\n        }\n        id = generateNewId();\n        intent.setComponent(cn);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n        values.put(Favorites.INTENT, intent.toUri(0));\n        values.put(Favorites.TITLE, info.loadLabel(packageManager).toString());\n        values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPLICATION);\n        values.put(Favorites.SPANX, 1);\n        values.put(Favorites.SPANY, 1);\n        values.put(Favorites._ID, generateNewId());\n        if (dbInsertAndCheck(this, db, TABLE_FAVORITES, null, values) < 0) {\n          return -1;\n        }\n      } catch (PackageManager.NameNotFoundException e) {\n        Log.w(TAG, \"Unable to add favorite: \" + packageName + \"/\" + className, e);\n      }\n      return id;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9640, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [149], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 286, "focalAPIEnd": 365, "followUpCheck": "TextUtils.isEmpty(str)", "checkType": "IF", "followUpCheckExpressionStart": 1013, "followUpCheckExpressionEnd": 1048, "followUpCheckBlockStart": 1013, "followUpCheckBlockEnd": 1079, "use": ["typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)", "typedArray.getBoolean(int,boolean)", "new AuthenticatorDescription(str,String,int,int,int,int,boolean)", "typedArray.recycle()"], "useStart": [403, 520, 641, 762, 917, 1093, 1234], "useEnd": [483, 599, 725, 870, 1005, 1210, 1246], "hasFinally": 1, "cleanUpCall": ["TypedArray.recycle()"], "finallyExpressionStart": 1218, "finallyExpressionEnd": 1226, "finallyBlockStart": 1218, "finallyBlockEnd": 1253, "cleanUpCallStart": [1234], "cleanUpCallEnd": [1246], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/accounts/AccountAuthenticatorCache.java", "rawCode": "  public AuthenticatorDescription parseServiceAttributes(\n      Resources res, String packageName, AttributeSet attrs) {\n    TypedArray sa =\n        res.obtainAttributes(attrs, com.android.internal.R.styleable.AccountAuthenticator);\n    try {\n      final String accountType =\n          sa.getString(com.android.internal.R.styleable.AccountAuthenticator_accountType);\n      final int labelId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_label, 0);\n      final int iconId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_icon, 0);\n      final int smallIconId =\n          sa.getResourceId(com.android.internal.R.styleable.AccountAuthenticator_smallIcon, 0);\n      final int prefId =\n          sa.getResourceId(\n              com.android.internal.R.styleable.AccountAuthenticator_accountPreferences, 0);\n      final boolean customTokens =\n          sa.getBoolean(com.android.internal.R.styleable.AccountAuthenticator_customTokens, false);\n      if (TextUtils.isEmpty(accountType)) {\n        return null;\n      }\n      return new AuthenticatorDescription(\n          accountType, packageName, labelId, iconId, smallIconId, prefId, customTokens);\n    } finally {\n      sa.recycle();\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9641, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fishkingsin/WristbandProject/tree/master/Wristband/src/org/bostonandroid/datepreference/DatePreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9642, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getInteger(*,int)", "typedArray.getColor(*,int)", "typedArray.getDimension(int,int)", "typedArray.getDimension(int,int)", "typedArray.getColor(*,int)"], "configurationStart": [181, 265, 350, 439, 577, 658, 744, 829], "configurationEnd": [241, 325, 412, 503, 633, 720, 804, 887], "guardCondition": "typedArray.hasValue(index,)", "guardType": "IF {", "guardExpressionStart": 937, "guardExpressionEnd": 984, "guardBlockStart": 937, "guardBlockEnd": 1052, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1001, "focalAPIEnd": 1044, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(str)", "typedArray.getColor(*,int)", "typedArray.getColor(*,int)", "typedArray.recycle()"], "useStart": [993, 1075, 1158, 1242], "useEnd": [1045, 1131, 1220, 1253], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svenoaks/funwithmusic/tree/master/funwithmusic/src/com/smp/funwithmusic/views/ProgressWheel.java", "rawCode": "  /**\n   * Parse the attributes passed to the view from the XML\n   *\n   * @param a the attributes to parse\n   */\n  private void parseAttributes(TypedArray a) {\n    barWidth = (int) a.getDimension(R.styleable.ProgressWheel_barWidth, barWidth);\n\n    rimWidth = (int) a.getDimension(R.styleable.ProgressWheel_rimWidth, rimWidth);\n\n    spinSpeed = (int) a.getDimension(R.styleable.ProgressWheel_spinSpeed, spinSpeed);\n\n    delayMillis = (int) a.getInteger(R.styleable.ProgressWheel_delayMillis, delayMillis);\n    if (delayMillis < 0) {\n      delayMillis = 0;\n    }\n\n    barColor = a.getColor(R.styleable.ProgressWheel_barColor, barColor);\n\n    barLength = (int) a.getDimension(R.styleable.ProgressWheel_barLength, barLength);\n\n    textSize = (int) a.getDimension(R.styleable.ProgressWheel_textSize, textSize);\n\n    textColor = (int) a.getColor(R.styleable.ProgressWheel_textColor, textColor);\n\n    // if the text is empty , so ignore it\n    if (a.hasValue(R.styleable.ProgressWheel_text)) {\n      setText(a.getString(R.styleable.ProgressWheel_text));\n    }\n\n    rimColor = (int) a.getColor(R.styleable.ProgressWheel_rimColor, rimColor);\n\n    circleColor = (int) a.getColor(R.styleable.ProgressWheel_circleColor, circleColor);\n\n    // Recycle\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9643, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2291, 2404, 3100], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2356, 2473, 3111], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kanakb/OmniStanford/tree/master/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n      itemActionViewClassName = a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      itemActionProviderClassName =\n          a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9644, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getValue(int,TypedValue)", "typedArray.getValue(int,TypedValue)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2409, 2753, 3572], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2480, 2828, 3583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rsavoye/k9-mail/tree/master/plugins/ActionBarSherlock/library/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n\n      // itemActionViewClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);\n      itemActionViewClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      // itemActionProviderClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);\n      itemActionProviderClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9645, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [197], "initializationEnd": [247], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 263, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.recycle()"], "useStart": [313], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cldellow/Ballero/tree/master/src/main/java/greendroid/src/greendroid/widget/item/SubtextItem.java", "rawCode": "  @Override\n  public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs)\n      throws XmlPullParserException, IOException {\n    super.inflate(r, parser, attrs);\n\n    TypedArray a = r.obtainAttributes(attrs, R.styleable.SubtextItem);\n    subtext = a.getString(R.styleable.SubtextItem_subtext);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9646, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 88, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ethankhall/Chronos/tree/master/ChronosApp/src/main/java/com/kopysoft/chronos/views/TimeSelect.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return (a.getString(index));\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9647, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [197], "initializationEnd": [244], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 257, "focalAPIEnd": 295, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.recycle()"], "useStart": [301], "useEnd": [312], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CapsuleMe/Capsule/tree/master/GreenDroid/src/greendroid/widget/item/TextItem.java", "rawCode": "  @Override\n  public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs)\n      throws XmlPullParserException, IOException {\n    super.inflate(r, parser, attrs);\n\n    TypedArray a = r.obtainAttributes(attrs, R.styleable.TextItem);\n    text = a.getString(R.styleable.TextItem_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9648, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 88, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MadJinx/csci498android/tree/master/LunchList/src/com/example/lunchlist/TimePreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return (a.getString(index));\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9649, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/preference/EditTextPreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9650, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/java/android/preference/MultiCheckPreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9651, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [181], "initializationEnd": [261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)"], "configurationStart": [293], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 409, "focalAPIEnd": 475, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 481, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 481, "followUpCheckBlockEnd": 620, "use": ["str.split(String)", "typedArray.getBoolean(int,boolean)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getDrawable(int)", "typedArray.getDrawable(int)", "typedArray.recycle()"], "useStart": [539, 649, 750, 837, 942, 1055, 1140], "useEnd": [567, 732, 814, 907, 1018, 1133, 1151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sravan2j/Cinequest-Android/tree/master/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);\n\n    setShowPictures(\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));\n    String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);\n    if (extraFieldsString != null) {\n      String[] strings = extraFieldsString.split(\",\");\n      setExtraFields(Arrays.asList(strings));\n    }\n\n    showTitleBar =\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);\n    titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);\n    doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);\n    titleBarBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);\n    doneButtonBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9652, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [202], "initializationEnd": [262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 303, "focalAPIEnd": 341, "followUpCheck": "str.startsWith(\".\")", "checkType": "IF", "followUpCheckExpressionStart": 353, "followUpCheckExpressionEnd": 379, "followUpCheckBlockStart": 353, "followUpCheckBlockEnd": 436, "use": ["typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.recycle()", "instantiate(FragmentActivity,str)"], "useStart": [450, 521, 564, 1332], "useEnd": [502, 558, 575, 1369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/practo/ActionBarSherlock/tree/master/library/src/android/support/v4/app/_HoloFragmentInflater.java", "rawCode": "  private static View inflate(\n      AttributeSet attrs, View parent, FragmentActivity activity, Fragment parentFragment) {\n    String fname = attrs.getAttributeValue(null, \"class\");\n    TypedArray a = activity.obtainStyledAttributes(attrs, FragmentTag.Fragment);\n    if (fname == null) {\n      fname = a.getString(FragmentTag.Fragment_name);\n    }\n    if (fname.startsWith(\".\")) {\n      fname = activity.getPackageName() + fname;\n    }\n    int id = a.getResourceId(FragmentTag.Fragment_id, View.NO_ID);\n    String tag = a.getString(FragmentTag.Fragment_tag);\n    a.recycle();\n    int containerId = parent != null ? parent.getId() : 0;\n    if (containerId == View.NO_ID && id == View.NO_ID && tag == null) {\n      throw new IllegalArgumentException(\n          attrs.getPositionDescription()\n              + \": Must specify unique android:id, android:tag, or have a parent with an id for \"\n              + fname);\n    }\n    FragmentManagerImpl impl = obtainFragmentManager(activity, parentFragment);\n    Fragment fragment = id != View.NO_ID ? impl.findFragmentById(id) : null;\n    if (fragment == null && tag != null) {\n      fragment = impl.findFragmentByTag(tag);\n    }\n    if (fragment == null && containerId != View.NO_ID) {\n      fragment = impl.findFragmentById(containerId);\n    }\n    if (fragment == null) {\n      fragment = Fragment.instantiate(activity, fname);\n      fragment.mParentFragment = parentFragment;\n      fragment.mActivity = activity;\n      fragment.mFromLayout = true;\n      fragment.mFragmentId = id != 0 ? id : containerId;\n      fragment.mContainer = (ViewGroup) parent;\n      fragment.mContainerId = containerId;\n      fragment.mTag = tag;\n      fragment.mInLayout = true;\n      fragment.mFragmentManager = impl;\n      fragment.onInflate(activity, attrs, fragment.mSavedFragmentState);\n      impl.addFragment(fragment, true);\n    } else if (fragment.mInLayout) {\n      throw new IllegalArgumentException(\n          attrs.getPositionDescription()\n              + \": Duplicate id 0x\"\n              + Integer.toHexString(id)\n              + \", tag \"\n              + tag\n              + \", or parent id 0x\"\n              + Integer.toHexString(containerId)\n              + \" with another fragment for \"\n              + fname);\n    } else {\n      fragment.mInLayout = true;\n      if (!fragment.mRetaining) {\n        fragment.onInflate(activity, attrs, fragment.mSavedFragmentState);\n      }\n      impl.moveToState(fragment);\n    }\n    if (fragment.mView == null) {\n      throw new IllegalStateException(\"Fragment \" + fname + \" did not create a view.\");\n    }\n    if (id != 0) {\n      fragment.mView.setId(id);\n    }\n    if (fragment.mView.getTag() == null) {\n      fragment.mView.setTag(tag);\n    }\n    return fragment.mView;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9653, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [1062], "initializationEnd": [1142], "hasTryCatch": 1, "exceptionType": "XmlPullParserException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 270, "tryExpressionEnd": 274, "tryBlockStart": 270, "tryBlockEnd": 1667, "catchExpressionStart": 1295, "catchExpressionEnd": 1328, "catchBlockStart": 1295, "catchBlockEnd": 1403, "exceptionHandlingCallStart": [1336], "exceptionHandlingCallEnd": [1396], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1179, "focalAPIEnd": 1264, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 1673, "followUpCheckExpressionEnd": 1702, "followUpCheckBlockStart": 1673, "followUpCheckBlockEnd": 2190, "use": ["typedArray.recycle()", "new ComponentName(*,str)"], "useStart": [1272, 2013], "useEnd": [1287, 2064], "hasFinally": 1, "cleanUpCall": ["XmlResourceParser.close()"], "finallyExpressionStart": 1610, "finallyExpressionEnd": 1618, "finallyBlockStart": 1610, "finallyBlockEnd": 1667, "cleanUpCallStart": [1646], "cleanUpCallEnd": [1660], "url": "https://github.com/Hectorxda/MySettings/tree/master/src/com/android/settings/VoiceInputOutputSettings.java", "rawCode": "  private void updateSettingsLink(String currentSetting) {\n    ResolveInfo currentRecognizer = mAvailableRecognizersMap.get(currentSetting);\n    ServiceInfo si = currentRecognizer.serviceInfo;\n    XmlResourceParser parser = null;\n    String settingsActivity = null;\n    try {\n      parser = si.loadXmlMetaData(getPackageManager(), RecognitionService.SERVICE_META_DATA);\n      if (parser == null) {\n        throw new XmlPullParserException(\n            \"No \" + RecognitionService.SERVICE_META_DATA + \" meta-data for \" + si.packageName);\n      }\n\n      Resources res = getPackageManager().getResourcesForApplication(si.applicationInfo);\n\n      AttributeSet attrs = Xml.asAttributeSet(parser);\n\n      int type;\n      while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n          && type != XmlPullParser.START_TAG) {}\n\n      String nodeName = parser.getName();\n      if (!\"recognition-service\".equals(nodeName)) {\n        throw new XmlPullParserException(\"Meta-data does not start with recognition-service tag\");\n      }\n\n      TypedArray array =\n          res.obtainAttributes(attrs, com.android.internal.R.styleable.RecognitionService);\n      settingsActivity =\n          array.getString(com.android.internal.R.styleable.RecognitionService_settingsActivity);\n      array.recycle();\n    } catch (XmlPullParserException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } catch (IOException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } catch (NameNotFoundException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } finally {\n      if (parser != null) parser.close();\n    }\n\n    if (settingsActivity == null) {\n      // No settings preference available - hide the preference.\n      Log.w(TAG, \"no recognizer settings available for \" + si.packageName);\n      mSettingsPref.setIntent(null);\n      mParent.removePreference(mSettingsPref);\n    } else {\n      Intent i = new Intent(Intent.ACTION_MAIN);\n      i.setComponent(new ComponentName(si.packageName, settingsActivity));\n      mSettingsPref.setIntent(i);\n      mRecognizerPref.setSummary(currentRecognizer.loadLabel(getPackageManager()));\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9654, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/core/java/android/preference/EditTextPreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9655, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/preference/EditTextPreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9656, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 223, "focalAPIEnd": 268, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "new ComponentName(str,String)"], "useStart": [295, 407], "useEnd": [338, 448], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heyongjian/joy_launcher/tree/master/src/com/joy/launcher2/LauncherProvider.java", "rawCode": "    private long addAppShortcut(\n        SQLiteDatabase db,\n        ContentValues values,\n        TypedArray a,\n        PackageManager packageManager,\n        Intent intent) {\n      long id = -1;\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n      try {\n        ComponentName cn;\n        try {\n          cn = new ComponentName(packageName, className);\n          packageManager.getActivityInfo(cn, 0);\n        } catch (PackageManager.NameNotFoundException nnfe) {\n          String[] packages =\n              packageManager.currentToCanonicalPackageNames(new String[] {packageName});\n          cn = new ComponentName(packages[0], className);\n          packageManager.getActivityInfo(cn, 0);\n        }\n        id = generateNewId();\n        intent.setComponent(cn);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n        values.put(Favorites.INTENT, intent.toUri(0));\n        values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPLICATION);\n        values.put(Favorites.SPANX, 1);\n        values.put(Favorites.SPANY, 1);\n        values.put(Favorites._ID, generateNewId());\n        if (dbInsertAndCheck(db, TABLE_FAVORITES, null, values) < 0) {\n          return -1;\n        }\n      } catch (PackageManager.NameNotFoundException e) {\n        Log.w(TAG, \"Unable to add favorite: \" + packageName + \"/\" + className, e);\n      }\n      return id;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9657, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/preference/ListPreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9658, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [1065], "initializationEnd": [1125], "hasTryCatch": 1, "exceptionType": "XmlPullParserException", "exceptionHandlingCall": ["w(String,String,*)"], "tryExpressionStart": 451, "tryExpressionEnd": 455, "tryBlockStart": 451, "tryBlockEnd": 2414, "catchExpressionStart": 2222, "catchExpressionEnd": 2255, "catchBlockStart": 2222, "catchBlockEnd": 2323, "exceptionHandlingCallStart": [2265], "exceptionHandlingCallEnd": [2314], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1331, "focalAPIEnd": 1371, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(*,str)", "typedArray.getString(int)", "typedArray.getString(int)", "addAppShortcut(SQLiteDatabase,ContentValues,typedArray,PackageManager,Intent)", "addAppWidget(SQLiteDatabase,ContentValues,typedArray,PackageManager)", "addOwnWidget(SQLiteDatabase,ContentValues,typedArray)", "typedArray.recycle()"], "useStart": [1285, 1429, 1522, 1624, 1942, 2058, 2191], "useEnd": [1372, 1464, 1557, 1677, 1985, 2085, 2202], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndrewChanChina/ppc1/tree/master/src/com/smit/EasyLauncher/LauncherProvider.java", "rawCode": "    /**\n     * Loads the default set of favorite packages from an xml file.\n     *\n     * @param db The database to write the values into\n     */\n    private int loadFavorites(SQLiteDatabase db) {\n      Intent intent = new Intent(Intent.ACTION_MAIN, null);\n      intent.addCategory(Intent.CATEGORY_LAUNCHER);\n      ContentValues values = new ContentValues();\n\n      PackageManager packageManager = mContext.getPackageManager();\n      int i = 0;\n      try {\n        XmlResourceParser parser = mContext.getResources().getXml(R.xml.default_workspace);\n        AttributeSet attrs = Xml.asAttributeSet(parser);\n        XmlUtils.beginDocument(parser, TAG_FAVORITES);\n\n        final int depth = parser.getDepth();\n\n        int type;\n        while (((type = parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth)\n            && type != XmlPullParser.END_DOCUMENT) {\n\n          if (type != XmlPullParser.START_TAG) {\n            continue;\n          }\n\n          boolean added = false;\n          final String name = parser.getName();\n\n          TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.Favorite);\n\n          values.clear();\n          values.put(\n              LauncherSettings.Favorites.CONTAINER, LauncherSettings.Favorites.CONTAINER_DESKTOP);\n          values.put(LauncherSettings.Favorites.SCREEN, a.getString(R.styleable.Favorite_screen));\n          values.put(LauncherSettings.Favorites.CELLX, a.getString(R.styleable.Favorite_x));\n          values.put(LauncherSettings.Favorites.CELLY, a.getString(R.styleable.Favorite_y));\n\n          if (TAG_FAVORITE.equals(name)) {\n            added = addAppShortcut(db, values, a, packageManager, intent);\n          } else if (TAG_SEARCH.equals(name)) {\n            added = addSearchWidget(db, values);\n          } else if (TAG_CLOCK.equals(name)) {\n            added = addClockWidget(db, values);\n          } else if (TAG_APPWIDGET.equals(name)) {\n            added = addAppWidget(db, values, a, packageManager);\n          } else if (TAG_OWNWIDGET.equals(name)) {\n            added = addOwnWidget(db, values, a);\n            // added = addUriShortcut(db, values, a);\n          }\n\n          if (added) i++;\n\n          a.recycle();\n        }\n      } catch (XmlPullParserException e) {\n        Log.w(TAG, \"Got exception parsing favorites.\", e);\n      } catch (IOException e) {\n        Log.w(TAG, \"Got exception parsing favorites.\", e);\n      }\n\n      return i;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9659, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [140], "initializationEnd": [221], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [299, 414, 529, 714, 801, 892], "configurationEnd": [375, 493, 608, 772, 868, 958], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1013, "focalAPIEnd": 1086, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getInt(int,int)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.recycle()"], "useStart": [1001, 1139, 1373, 1702, 1807, 1906, 2010, 2111, 2214, 2332, 2450, 3151], "useEnd": [1087, 1209, 1445, 1785, 1884, 1983, 2078, 2173, 2288, 2402, 2524, 3162], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a =\n          mContext.obtainStyledAttributes(attrs, com.android.internal.R.styleable.MenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(com.android.internal.R.styleable.MenuItem_id, defaultItemId);\n      final int category =\n          a.getInt(com.android.internal.R.styleable.MenuItem_menuCategory, groupCategory);\n      final int order =\n          a.getInt(com.android.internal.R.styleable.MenuItem_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(com.android.internal.R.styleable.MenuItem_title);\n      itemTitleCondensed = a.getText(com.android.internal.R.styleable.MenuItem_titleCondensed);\n      itemIconResId = a.getResourceId(com.android.internal.R.styleable.MenuItem_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_numericShortcut));\n      if (a.hasValue(com.android.internal.R.styleable.MenuItem_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable =\n            a.getBoolean(com.android.internal.R.styleable.MenuItem_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n      itemChecked =\n          a.getBoolean(com.android.internal.R.styleable.MenuItem_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(com.android.internal.R.styleable.MenuItem_visible, groupVisible);\n      itemEnabled = a.getBoolean(com.android.internal.R.styleable.MenuItem_enabled, groupEnabled);\n      itemShowAsAction = a.getInt(com.android.internal.R.styleable.MenuItem_showAsAction, -1);\n      itemListenerMethodName = a.getString(com.android.internal.R.styleable.MenuItem_onClick);\n      itemActionViewLayout =\n          a.getResourceId(com.android.internal.R.styleable.MenuItem_actionLayout, 0);\n      itemActionViewClassName =\n          a.getString(com.android.internal.R.styleable.MenuItem_actionViewClass);\n      itemActionProviderClassName =\n          a.getString(com.android.internal.R.styleable.MenuItem_actionProviderClass);\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9660, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [181], "initializationEnd": [261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)"], "configurationStart": [293], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 409, "focalAPIEnd": 475, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 481, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 481, "followUpCheckBlockEnd": 620, "use": ["str.split(String)", "typedArray.getBoolean(int,boolean)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getDrawable(int)", "typedArray.getDrawable(int)", "typedArray.recycle()"], "useStart": [539, 649, 750, 837, 942, 1055, 1140], "useEnd": [567, 732, 814, 907, 1018, 1133, 1151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgattani/Group-Project/tree/master/FacebookSDK/src/com/facebook/widget/PickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);\n\n    setShowPictures(\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));\n    String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);\n    if (extraFieldsString != null) {\n      String[] strings = extraFieldsString.split(\",\");\n      setExtraFields(Arrays.asList(strings));\n    }\n\n    showTitleBar =\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);\n    titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);\n    doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);\n    titleBarBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);\n    doneButtonBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9661, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [181], "initializationEnd": [261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)"], "configurationStart": [293], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 409, "focalAPIEnd": 475, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 481, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 481, "followUpCheckBlockEnd": 620, "use": ["str.split(String)", "typedArray.getBoolean(int,boolean)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getDrawable(int)", "typedArray.getDrawable(int)", "typedArray.recycle()"], "useStart": [539, 649, 750, 837, 942, 1055, 1140], "useEnd": [567, 732, 814, 907, 1018, 1133, 1151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenKit/openkit-android/tree/master/Vendor/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);\n\n    setShowPictures(\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));\n    String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);\n    if (extraFieldsString != null) {\n      String[] strings = extraFieldsString.split(\",\");\n      setExtraFields(Arrays.asList(strings));\n    }\n\n    showTitleBar =\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);\n    titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);\n    doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);\n    titleBarBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);\n    doneButtonBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9662, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 117, "focalAPIEnd": 162, "followUpCheck": "str == null || true", "checkType": "IF", "followUpCheckExpressionStart": 241, "followUpCheckExpressionEnd": 286, "followUpCheckBlockStart": 241, "followUpCheckBlockEnd": 318, "use": ["typedArray.getString(int)", "new ComponentName(str,String)", "typedArray.getString(int)", "typedArray.getString(int)"], "useStart": [189, 345, 706, 784], "useEnd": [232, 386, 745, 823], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/koush/ClockworkModLauncher/tree/master/src/com/koushikdutta/launcher2/LauncherProvider.java", "rawCode": "    private boolean addAppWidget(SQLiteDatabase db, ContentValues values, TypedArray a) {\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n\n      if (packageName == null || className == null) {\n        return false;\n      }\n\n      ComponentName cn = new ComponentName(packageName, className);\n\n      boolean allocatedAppWidgets = false;\n      final AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(mContext);\n\n      try {\n        int appWidgetId = mAppWidgetHost.allocateAppWidgetId();\n\n        values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPWIDGET);\n        values.put(Favorites.SPANX, a.getString(R.styleable.Favorite_spanX));\n        values.put(Favorites.SPANY, a.getString(R.styleable.Favorite_spanY));\n        values.put(Favorites.APPWIDGET_ID, appWidgetId);\n        db.insert(TABLE_FAVORITES, null, values);\n\n        allocatedAppWidgets = true;\n\n        appWidgetManager.bindAppWidgetId(appWidgetId, cn);\n      } catch (RuntimeException ex) {\n        Log.e(TAG, \"Problem allocating appWidgetId\", ex);\n      }\n\n      return allocatedAppWidgets;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9663, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [86], "initializationEnd": [98], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.length()"], "configurationStart": [166], "configurationEnd": [180], "guardCondition": "index<count", "guardType": "LOOP {", "guardExpressionStart": 266, "guardExpressionEnd": 297, "guardBlockStart": 266, "guardBlockEnd": 416, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 334, "focalAPIEnd": 352, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ArrayList<String>.add(str)", "typedArray.recycle()"], "useStart": [360, 421], "useEnd": [409, 436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/com/android/internal/widget/multiwaveview/GlowPadView.java", "rawCode": "  private ArrayList<String> loadDescriptions(int resourceId) {\n    TypedArray array = getContext().getResources().obtainTypedArray(resourceId);\n    final int count = array.length();\n    ArrayList<String> targetContentDescriptions = new ArrayList<String>(count);\n    for (int i = 0; i < count; i++) {\n      String contentDescription = array.getString(i);\n      targetContentDescriptions.add(contentDescription);\n    }\n    array.recycle();\n    return targetContentDescriptions;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9664, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [189], "initializationEnd": [275], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "configurationStart": [309, 430], "configurationEnd": [398, 514], "guardCondition": "typedArray.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit,)", "guardType": "IF {", "guardExpressionStart": 521, "guardExpressionEnd": 598, "guardBlockStart": 521, "guardBlockEnd": 700, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 621, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [607, 729, 827], "useEnd": [693, 820, 838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shi-314/AngryKings/tree/master/facebook/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a =\n        activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);\n\n    setRadiusInMeters(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));\n    setResultsLimit(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));\n    if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {\n      setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));\n    }\n    showSearchBox =\n        a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9665, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [1136], "initializationEnd": [1216], "hasTryCatch": 1, "exceptionType": "XmlPullParserException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 314, "tryExpressionEnd": 318, "tryBlockStart": 314, "tryBlockEnd": 1741, "catchExpressionStart": 1369, "catchExpressionEnd": 1402, "catchBlockStart": 1369, "catchBlockEnd": 1477, "exceptionHandlingCallStart": [1410], "exceptionHandlingCallEnd": [1470], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1253, "focalAPIEnd": 1338, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 1747, "followUpCheckExpressionEnd": 1776, "followUpCheckBlockStart": 1747, "followUpCheckBlockEnd": 2281, "use": ["typedArray.recycle()", "new ComponentName(*,str)"], "useStart": [1346, 2094], "useEnd": [1361, 2145], "hasFinally": 1, "cleanUpCall": ["XmlResourceParser.close()"], "finallyExpressionStart": 1684, "finallyExpressionEnd": 1692, "finallyBlockStart": 1684, "finallyBlockEnd": 1741, "cleanUpCallStart": [1720], "cleanUpCallEnd": [1734], "url": "https://github.com/kitkatandroid/JLS36G_settings/tree/master/src/com/android/settings/VoiceInputOutputSettings.java", "rawCode": "  private void updateSettingsLink(String currentSetting) {\n    ResolveInfo currentRecognizer = mAvailableRecognizersMap.get(currentSetting);\n    if (currentRecognizer == null) return;\n\n    ServiceInfo si = currentRecognizer.serviceInfo;\n    XmlResourceParser parser = null;\n    String settingsActivity = null;\n    try {\n      parser =\n          si.loadXmlMetaData(mFragment.getPackageManager(), RecognitionService.SERVICE_META_DATA);\n      if (parser == null) {\n        throw new XmlPullParserException(\n            \"No \" + RecognitionService.SERVICE_META_DATA + \" meta-data for \" + si.packageName);\n      }\n\n      Resources res = mFragment.getPackageManager().getResourcesForApplication(si.applicationInfo);\n\n      AttributeSet attrs = Xml.asAttributeSet(parser);\n\n      int type;\n      while ((type = parser.next()) != XmlPullParser.END_DOCUMENT\n          && type != XmlPullParser.START_TAG) {}\n\n      String nodeName = parser.getName();\n      if (!\"recognition-service\".equals(nodeName)) {\n        throw new XmlPullParserException(\"Meta-data does not start with recognition-service tag\");\n      }\n\n      TypedArray array =\n          res.obtainAttributes(attrs, com.android.internal.R.styleable.RecognitionService);\n      settingsActivity =\n          array.getString(com.android.internal.R.styleable.RecognitionService_settingsActivity);\n      array.recycle();\n    } catch (XmlPullParserException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } catch (IOException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } catch (NameNotFoundException e) {\n      Log.e(TAG, \"error parsing recognition service meta-data\", e);\n    } finally {\n      if (parser != null) parser.close();\n    }\n\n    if (settingsActivity == null) {\n      // No settings preference available - hide the preference.\n      Log.w(TAG, \"no recognizer settings available for \" + si.packageName);\n      mSettingsPref.setIntent(null);\n      mVoiceCategory.removePreference(mSettingsPref);\n    } else {\n      Intent i = new Intent(Intent.ACTION_MAIN);\n      i.setComponent(new ComponentName(si.packageName, settingsActivity));\n      mSettingsPref.setIntent(i);\n      mRecognizerPref.setSummary(currentRecognizer.loadLabel(mFragment.getPackageManager()));\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9666, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/preference/ListPreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9667, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [72], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)"], "configurationStart": [173, 265], "configurationEnd": [243, 336], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 354, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "typedArray.recycle()"], "useStart": [432, 498], "useEnd": [492, 509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maplesyrup/maple-android/tree/master/facebook/src/com/facebook/widget/LoginButton.java", "rawCode": "  private void parseAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);\n    confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);\n    fetchUserInfo = a.getBoolean(R.styleable.com_facebook_login_view_fetch_user_info, true);\n    loginText = a.getString(R.styleable.com_facebook_login_view_login_text);\n    logoutText = a.getString(R.styleable.com_facebook_login_view_logout_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9668, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 239, "focalAPIEnd": 284, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "new ComponentName(str,String)"], "useStart": [311, 412], "useEnd": [354, 453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/COMU/homescreen/tree/master/damla/homescreen/src/org/comu/homescreen/LauncherProvider.java", "rawCode": "    private boolean addAppShortcut(\n        SQLiteDatabase db,\n        ContentValues values,\n        TypedArray a,\n        PackageManager packageManager,\n        Intent intent) {\n\n      ActivityInfo info = null;\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n      ComponentName cn = null;\n      try {\n        cn = new ComponentName(packageName, className);\n        info = packageManager.getActivityInfo(cn, 0);\n      } catch (PackageManager.NameNotFoundException nnfe) {\n        Log.e(TAG, \"failed to add a shortcut!\");\n        nnfe.printStackTrace();\n      }\n\n      if (cn == null || info == null) return false;\n\n      intent.setComponent(cn);\n      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n      values.put(Favorites.INTENT, intent.toUri(0));\n      values.put(Favorites.TITLE, info.loadLabel(packageManager).toString());\n      values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_SHORTCUT);\n      values.put(Favorites.SPANX, 1);\n      values.put(Favorites.SPANY, 1);\n      db.insert(TABLE_FAVORITES, null, values);\n\n      return true;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9669, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [189], "initializationEnd": [275], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "configurationStart": [309, 430], "configurationEnd": [398, 514], "guardCondition": "typedArray.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit,)", "guardType": "IF {", "guardExpressionStart": 521, "guardExpressionEnd": 598, "guardBlockStart": 521, "guardBlockEnd": 700, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 621, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [607, 729, 827], "useEnd": [693, 820, 838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hackathon-3d/thedroidsyourlookingfor-repo/tree/master/libs/facebook-android-sdk-3.5/facebook/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a =\n        activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);\n\n    setRadiusInMeters(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));\n    setResultsLimit(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));\n    if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {\n      setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));\n    }\n    showSearchBox =\n        a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9670, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 313, "focalAPIEnd": 358, "followUpCheck": "str == null || true", "checkType": "IF", "followUpCheckExpressionStart": 437, "followUpCheckExpressionEnd": 482, "followUpCheckBlockStart": 437, "followUpCheckBlockEnd": 514, "use": ["typedArray.getString(int)", "new ComponentName(str,String)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "useStart": [385, 574, 1066, 1127], "useEnd": [428, 615, 1105, 1166], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidTh3ory-xx/android_packages_apps_killrhome/tree/master/src/com/cyanogenmod/trebuchet/LauncherProvider.java", "rawCode": "    private boolean addAppWidget(\n        XmlResourceParser parser,\n        AttributeSet attrs,\n        int type,\n        SQLiteDatabase db,\n        ContentValues values,\n        TypedArray a,\n        PackageManager packageManager)\n        throws XmlPullParserException, IOException {\n\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n\n      if (packageName == null || className == null) {\n        return false;\n      }\n\n      boolean hasPackage = true;\n      ComponentName cn = new ComponentName(packageName, className);\n      try {\n        packageManager.getReceiverInfo(cn, 0);\n      } catch (Exception e) {\n        String[] packages =\n            packageManager.currentToCanonicalPackageNames(new String[] {packageName});\n        cn = new ComponentName(packages[0], className);\n        try {\n          packageManager.getReceiverInfo(cn, 0);\n        } catch (Exception e1) {\n          hasPackage = false;\n        }\n      }\n\n      if (hasPackage) {\n        int spanX = a.getInt(R.styleable.Favorite_spanX, 0);\n        int spanY = a.getInt(R.styleable.Favorite_spanY, 0);\n\n        // Read the extras\n        Bundle extras = new Bundle();\n        int widgetDepth = parser.getDepth();\n        while ((type = parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > widgetDepth) {\n          if (type != XmlPullParser.START_TAG) {\n            continue;\n          }\n\n          TypedArray ar = mContext.obtainStyledAttributes(attrs, R.styleable.Extra);\n          if (TAG_EXTRA.equals(parser.getName())) {\n            String key = ar.getString(R.styleable.Extra_key);\n            String value = ar.getString(R.styleable.Extra_value);\n            if (key != null && value != null) {\n              extras.putString(key, value);\n            } else {\n              throw new RuntimeException(\"Widget extras must have a key and value\");\n            }\n          } else {\n            throw new RuntimeException(\"Widgets can contain only extras\");\n          }\n          ar.recycle();\n        }\n\n        return addAppWidget(db, values, cn, spanX, spanY, extras);\n      }\n\n      return false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9671, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 248, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "new ComponentName(str,String)"], "useStart": [320, 432], "useEnd": [363, 473], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcilia/LauncherOfficiel/tree/master/src/com/android/my_launcher/LauncherProvider.java", "rawCode": "    private long addAppShortcut(\n        SQLiteDatabase db,\n        ContentValues values,\n        TypedArray a,\n        PackageManager packageManager,\n        Intent intent) {\n      long id = -1;\n      ActivityInfo info;\n      String packageName = a.getString(R.styleable.Favorite_packageName);\n      String className = a.getString(R.styleable.Favorite_className);\n      try {\n        ComponentName cn;\n        try {\n          cn = new ComponentName(packageName, className);\n          info = packageManager.getActivityInfo(cn, 0);\n        } catch (PackageManager.NameNotFoundException nnfe) {\n          String[] packages =\n              packageManager.currentToCanonicalPackageNames(new String[] {packageName});\n          cn = new ComponentName(packages[0], className);\n          info = packageManager.getActivityInfo(cn, 0);\n        }\n        id = generateNewId();\n        intent.setComponent(cn);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);\n        values.put(Favorites.INTENT, intent.toUri(0));\n        values.put(Favorites.TITLE, info.loadLabel(packageManager).toString());\n        values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPLICATION);\n        values.put(Favorites.SPANX, 1);\n        values.put(Favorites.SPANY, 1);\n        values.put(Favorites._ID, generateNewId());\n        if (dbInsertAndCheck(this, db, TABLE_FAVORITES, null, values) < 0) {\n          return -1;\n        }\n      } catch (PackageManager.NameNotFoundException e) {\n        Log.w(TAG, \"Unable to add favorite: \" + packageName + \"/\" + className, e);\n      }\n      return id;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9672, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getValue(int,TypedValue)", "typedArray.getValue(int,TypedValue)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2409, 2753, 3572], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2480, 2828, 3583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ga-m3dv/ga-worldwind-suite/tree/master/AndroidRemote/ActionBarSherlock/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n\n      // itemActionViewClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);\n      itemActionViewClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      // itemActionProviderClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);\n      itemActionProviderClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9673, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [181], "initializationEnd": [261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)"], "configurationStart": [293], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 409, "focalAPIEnd": 475, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 481, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 481, "followUpCheckBlockEnd": 620, "use": ["str.split(String)", "typedArray.getBoolean(int,boolean)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getDrawable(int)", "typedArray.getDrawable(int)", "typedArray.recycle()"], "useStart": [539, 649, 750, 837, 942, 1055, 1140], "useEnd": [567, 732, 814, 907, 1018, 1133, 1151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/proxy-gen/codegen/tree/master/samples/platform/android/facebook/java/facebook-android-sdk-3.0.1/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);\n\n    setShowPictures(\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));\n    String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);\n    if (extraFieldsString != null) {\n      String[] strings = extraFieldsString.split(\",\");\n      setExtraFields(Arrays.asList(strings));\n    }\n\n    showTitleBar =\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);\n    titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);\n    doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);\n    titleBarBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);\n    doneButtonBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9674, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)", "int index = TypedArray.getIndex(int)"], "initializationStart": [108, 340], "initializationEnd": [177, 353], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getIndexCount()", "typedArray.getIndex(int)"], "configurationStart": [198, 340], "configurationEnd": [215, 353], "guardCondition": "index==R.styleable.InterstitialAdView_placement_id", "guardType": "IF {", "guardExpressionStart": 361, "guardExpressionEnd": 417, "guardBlockStart": 361, "guardBlockEnd": 1570, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 443, "focalAPIEnd": 460, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setPlacementID(str)", "getString(*,str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [428, 494, 660, 1581], "useEnd": [461, 550, 685, 1592], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/appnexus/mobile-sdk-android/tree/master/sdk/src/com/appnexus/opensdk/InterstitialAdView.java", "rawCode": "  @Override\n  protected void loadVariablesFromXML(Context context, AttributeSet attrs) {\n    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.InterstitialAdView);\n\n    final int N = a.getIndexCount();\n    Clog.v(Clog.xmlLogTag, Clog.getString(R.string.found_n_in_xml, N));\n    for (int i = 0; i < N; ++i) {\n      int attr = a.getIndex(i);\n      if (attr == R.styleable.InterstitialAdView_placement_id) {\n        setPlacementID(a.getString(attr));\n        Clog.d(Clog.xmlLogTag, Clog.getString(R.string.placement_id, a.getString(attr)));\n      } else if (attr == R.styleable.InterstitialAdView_test) {\n        Settings.getSettings().test_mode = a.getBoolean(attr, false);\n        Clog.d(\n            Clog.xmlLogTag,\n            Clog.getString(R.string.xml_set_test, Settings.getSettings().test_mode));\n      } else if (attr == R.styleable.InterstitialAdView_opens_native_browser) {\n        Clog.d(Clog.xmlLogTag, Clog.getString(R.string.xml_set_opens_native_browser));\n        this.setOpensNativeBrowser(a.getBoolean(attr, false));\n      } else if (attr == R.styleable.InterstitialAdView_show_loading_indicator) {\n        Clog.d(Clog.xmlLogTag, Clog.getString(R.string.show_loading_indicator_xml));\n        setShowLoadingIndicator(a.getBoolean(attr, true));\n      } else if (attr == R.styleable.InterstitialAdView_load_landing_page_in_background) {\n        setLoadsInBackground(a.getBoolean(attr, true));\n        Clog.d(\n            Clog.xmlLogTag,\n            Clog.getString(R.string.xml_load_landing_page_in_background, getLoadsInBackground()));\n      }\n    }\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9675, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getValue(int,TypedValue)", "typedArray.getValue(int,TypedValue)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2409, 2753, 3572], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2480, 2828, 3583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jTurnerCPW/sprintAndroid/tree/master/ActionBarSherlock/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n\n      // itemActionViewClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);\n      itemActionViewClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      // itemActionProviderClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);\n      itemActionProviderClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9676, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "URISyntaxException", "exceptionHandlingCall": ["w(String,String)"], "tryExpressionStart": 340, "tryExpressionEnd": 344, "tryBlockStart": 340, "tryBlockEnd": 575, "catchExpressionStart": 449, "catchExpressionEnd": 478, "catchBlockStart": 449, "catchBlockEnd": 575, "exceptionHandlingCallStart": [488], "exceptionHandlingCallEnd": [536], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)"], "configurationStart": [163, 239], "configurationEnd": [208, 285], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 360, "focalAPIEnd": 397, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseUri(str,int)"], "useStart": [416], "useEnd": [439], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Launcher2/tree/master/src/com/android/launcher2/LauncherProvider.java", "rawCode": "    private long addUriShortcut(SQLiteDatabase db, ContentValues values, TypedArray a) {\n      Resources r = mContext.getResources();\n\n      final int iconResId = a.getResourceId(R.styleable.Favorite_icon, 0);\n      final int titleResId = a.getResourceId(R.styleable.Favorite_title, 0);\n\n      Intent intent;\n      String uri = null;\n      try {\n        uri = a.getString(R.styleable.Favorite_uri);\n        intent = Intent.parseUri(uri, 0);\n      } catch (URISyntaxException e) {\n        Log.w(TAG, \"Shortcut has malformed uri: \" + uri);\n        return -1; // Oh well\n      }\n\n      if (iconResId == 0 || titleResId == 0) {\n        Log.w(TAG, \"Shortcut is missing title or icon resource ID\");\n        return -1;\n      }\n\n      long id = generateNewId();\n      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n      values.put(Favorites.INTENT, intent.toUri(0));\n      values.put(Favorites.TITLE, r.getString(titleResId));\n      values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_SHORTCUT);\n      values.put(Favorites.SPANX, 1);\n      values.put(Favorites.SPANY, 1);\n      values.put(Favorites.ICON_TYPE, Favorites.ICON_TYPE_RESOURCE);\n      values.put(Favorites.ICON_PACKAGE, mContext.getPackageName());\n      values.put(Favorites.ICON_RESOURCE, r.getResourceName(iconResId));\n      values.put(Favorites._ID, id);\n\n      if (dbInsertAndCheck(this, db, TABLE_FAVORITES, null, values) < 0) {\n        return -1;\n      }\n      return id;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9677, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2291, 2404, 3100], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2356, 2473, 3111], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yfli/aSM-clone/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n      itemActionViewClassName = a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      itemActionProviderClassName =\n          a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9678, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [181], "initializationEnd": [261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)"], "configurationStart": [293], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 409, "focalAPIEnd": 475, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 481, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 481, "followUpCheckBlockEnd": 620, "use": ["str.split(String)", "typedArray.getBoolean(int,boolean)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getDrawable(int)", "typedArray.getDrawable(int)", "typedArray.recycle()"], "useStart": [539, 649, 750, 837, 942, 1055, 1140], "useEnd": [567, 732, 814, 907, 1018, 1133, 1151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mturley/luper/tree/master/facebook-android-sdk-3.0.1/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);\n\n    setShowPictures(\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));\n    String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);\n    if (extraFieldsString != null) {\n      String[] strings = extraFieldsString.split(\",\");\n      setExtraFields(Arrays.asList(strings));\n    }\n\n    showTitleBar =\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);\n    titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);\n    doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);\n    titleBarBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);\n    doneButtonBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9679, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/preference/RingtonePreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9680, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [72], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)"], "configurationStart": [173, 265], "configurationEnd": [243, 336], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 354, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "typedArray.recycle()"], "useStart": [432, 498], "useEnd": [492, 509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgattani/Group-Project/tree/master/FacebookSDK/src/com/facebook/widget/LoginButton.java", "rawCode": "  private void parseAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);\n    confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);\n    fetchUserInfo = a.getBoolean(R.styleable.com_facebook_login_view_fetch_user_info, true);\n    loginText = a.getString(R.styleable.com_facebook_login_view_login_text);\n    logoutText = a.getString(R.styleable.com_facebook_login_view_logout_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9681, "initialization": ["TypedArray typedArray = obtainAttributes(*,*)"], "initializationStart": [167], "initializationEnd": [249], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 2856, "focalAPIEnd": 2899, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textAttr(str,String)", "booleanAttr(typedArray,*,String)", "booleanAttr(typedArray,*,String)", "booleanAttr(typedArray,*,String)", "typedArray.getInt(int,int)", "booleanAttr(typedArray,*,String)", "booleanAttr(typedArray,*,String)", "booleanAttr(typedArray,*,String)", "typedArray.getInt(int,int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.recycle()"], "useStart": [2847, 2926, 3018, 3108, 3255, 3357, 3457, 3557, 3741, 3852, 3943, 4038, 4198], "useEnd": [2908, 3000, 3090, 3182, 3304, 3439, 3539, 3631, 3790, 3901, 3994, 4088, 4209], "hasFinally": 1, "cleanUpCall": ["TypedArray.recycle()"], "finallyExpressionStart": 4182, "finallyExpressionEnd": 4190, "finallyBlockStart": 4182, "finallyBlockEnd": 4216, "cleanUpCallStart": [4198], "cleanUpCallEnd": [4209], "url": "https://github.com/phuang/LatinIME/tree/master/java/src/com/android/inputmethod/keyboard/internal/KeyboardBuilder.java", "rawCode": "  private boolean parseCaseCondition(XmlPullParser parser) {\n    final KeyboardId id = mParams.mId;\n    if (id == null) return true;\n\n    final TypedArray a =\n        mResources.obtainAttributes(Xml.asAttributeSet(parser), R.styleable.Keyboard_Case);\n    try {\n      final boolean modeMatched =\n          matchTypedValue(\n              a, R.styleable.Keyboard_Case_mode, id.mMode, KeyboardId.modeName(id.mMode));\n      final boolean navigateActionMatched =\n          matchBoolean(a, R.styleable.Keyboard_Case_navigateAction, id.mNavigateAction);\n      final boolean passwordInputMatched =\n          matchBoolean(a, R.styleable.Keyboard_Case_passwordInput, id.mPasswordInput);\n      final boolean hasSettingsKeyMatched =\n          matchBoolean(a, R.styleable.Keyboard_Case_hasSettingsKey, id.mHasSettingsKey);\n      final boolean f2KeyModeMatched =\n          matchInteger(a, R.styleable.Keyboard_Case_f2KeyMode, id.mF2KeyMode);\n      final boolean clobberSettingsKeyMatched =\n          matchBoolean(a, R.styleable.Keyboard_Case_clobberSettingsKey, id.mClobberSettingsKey);\n      final boolean shortcutKeyEnabledMatched =\n          matchBoolean(a, R.styleable.Keyboard_Case_shortcutKeyEnabled, id.mShortcutKeyEnabled);\n      final boolean hasShortcutKeyMatched =\n          matchBoolean(a, R.styleable.Keyboard_Case_hasShortcutKey, id.mHasShortcutKey);\n      // As noted at {@link KeyboardId} class, we are interested only in enum value masked by\n      // {@link android.view.inputmethod.EditorInfo#IME_MASK_ACTION} and\n      // {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}. So matching\n      // this attribute with id.mImeOptions as integer value is enough for our purpose.\n      final boolean imeActionMatched =\n          matchInteger(a, R.styleable.Keyboard_Case_imeAction, id.mImeAction);\n      final boolean localeCodeMatched =\n          matchString(a, R.styleable.Keyboard_Case_localeCode, id.mLocale.toString());\n      final boolean languageCodeMatched =\n          matchString(a, R.styleable.Keyboard_Case_languageCode, id.mLocale.getLanguage());\n      final boolean countryCodeMatched =\n          matchString(a, R.styleable.Keyboard_Case_countryCode, id.mLocale.getCountry());\n      final boolean selected =\n          modeMatched\n              && navigateActionMatched\n              && passwordInputMatched\n              && hasSettingsKeyMatched\n              && f2KeyModeMatched\n              && clobberSettingsKeyMatched\n              && shortcutKeyEnabledMatched\n              && hasShortcutKeyMatched\n              && imeActionMatched\n              && localeCodeMatched\n              && languageCodeMatched\n              && countryCodeMatched;\n\n      if (DEBUG)\n        Log.d(\n            TAG,\n            String.format(\n                \"<%s%s%s%s%s%s%s%s%s%s%s%s%s> %s\",\n                TAG_CASE,\n                textAttr(a.getString(R.styleable.Keyboard_Case_mode), \"mode\"),\n                booleanAttr(a, R.styleable.Keyboard_Case_navigateAction, \"navigateAction\"),\n                booleanAttr(a, R.styleable.Keyboard_Case_passwordInput, \"passwordInput\"),\n                booleanAttr(a, R.styleable.Keyboard_Case_hasSettingsKey, \"hasSettingsKey\"),\n                textAttr(\n                    KeyboardId.f2KeyModeName(a.getInt(R.styleable.Keyboard_Case_f2KeyMode, -1)),\n                    \"f2KeyMode\"),\n                booleanAttr(a, R.styleable.Keyboard_Case_clobberSettingsKey, \"clobberSettingsKey\"),\n                booleanAttr(a, R.styleable.Keyboard_Case_shortcutKeyEnabled, \"shortcutKeyEnabled\"),\n                booleanAttr(a, R.styleable.Keyboard_Case_hasShortcutKey, \"hasShortcutKey\"),\n                textAttr(\n                    EditorInfoCompatUtils.imeOptionsName(\n                        a.getInt(R.styleable.Keyboard_Case_imeAction, -1)),\n                    \"imeAction\"),\n                textAttr(a.getString(R.styleable.Keyboard_Case_localeCode), \"localeCode\"),\n                textAttr(a.getString(R.styleable.Keyboard_Case_languageCode), \"languageCode\"),\n                textAttr(a.getString(R.styleable.Keyboard_Case_countryCode), \"countryCode\"),\n                Boolean.toString(selected)));\n\n      return selected;\n    } finally {\n      a.recycle();\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9682, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [1156], "initializationEnd": [1219], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 1240, "focalAPIEnd": 1297, "followUpCheck": "str == null", "checkType": "IF", "followUpCheckExpressionStart": 1303, "followUpCheckExpressionEnd": 1320, "followUpCheckBlockStart": 1303, "followUpCheckBlockEnd": 1534, "use": ["typedArray.recycle()", "typedArray.peekValue(int)", "Bundle.putCharSequence(str,CharSequence)", "putBoolean(str,*)", "putInt(str,*)", "putFloat(str,*)", "typedArray.recycle()", "typedArray.recycle()", "typedArray.recycle()"], "useStart": [1329, 1555, 1736, 1839, 1982, 2074, 2137, 2396, 2628], "useEnd": [1341, 1613, 1771, 1878, 2012, 2112, 2149, 2408, 2640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/content/res/Resources.java", "rawCode": "  /**\n   * Parse a name/value pair out of an XML tag holding that data. The AttributeSet must be holding\n   * the data defined by {@link android.R.styleable#Extra}. The following value types are supported:\n   *\n   * <ul>\n   *   <li>{@link TypedValue#TYPE_STRING}: {@link Bundle#putCharSequence Bundle.putCharSequence()}\n   *   <li>{@link TypedValue#TYPE_INT_BOOLEAN}: {@link Bundle#putCharSequence Bundle.putBoolean()}\n   *   <li>{@link TypedValue#TYPE_FIRST_INT}-{@link TypedValue#TYPE_LAST_INT}: {@link\n   *       Bundle#putCharSequence Bundle.putBoolean()}\n   *   <li>{@link TypedValue#TYPE_FLOAT}: {@link Bundle#putCharSequence Bundle.putFloat()}\n   * </ul>\n   *\n   * @param tagName The name of the tag these attributes come from; this is only used for reporting\n   *     error messages.\n   * @param attrs The attributes from which to retrieve the name/value pair.\n   * @param outBundle The Bundle in which to place the parsed value.\n   * @throws XmlPullParserException If the attributes are not valid.\n   */\n  public void parseBundleExtra(String tagName, AttributeSet attrs, Bundle outBundle)\n      throws XmlPullParserException {\n    TypedArray sa = obtainAttributes(attrs, com.android.internal.R.styleable.Extra);\n\n    String name = sa.getString(com.android.internal.R.styleable.Extra_name);\n    if (name == null) {\n      sa.recycle();\n      throw new XmlPullParserException(\n          \"<\"\n              + tagName\n              + \"> requires an android:name attribute at \"\n              + attrs.getPositionDescription());\n    }\n\n    TypedValue v = sa.peekValue(com.android.internal.R.styleable.Extra_value);\n    if (v != null) {\n      if (v.type == TypedValue.TYPE_STRING) {\n        CharSequence cs = v.coerceToString();\n        outBundle.putCharSequence(name, cs);\n      } else if (v.type == TypedValue.TYPE_INT_BOOLEAN) {\n        outBundle.putBoolean(name, v.data != 0);\n      } else if (v.type >= TypedValue.TYPE_FIRST_INT && v.type <= TypedValue.TYPE_LAST_INT) {\n        outBundle.putInt(name, v.data);\n      } else if (v.type == TypedValue.TYPE_FLOAT) {\n        outBundle.putFloat(name, v.getFloat());\n      } else {\n        sa.recycle();\n        throw new XmlPullParserException(\n            \"<\"\n                + tagName\n                + \"> only supports string, integer, float, color, and boolean at \"\n                + attrs.getPositionDescription());\n      }\n    } else {\n      sa.recycle();\n      throw new XmlPullParserException(\n          \"<\"\n              + tagName\n              + \"> requires an android:value or android:resource attribute at \"\n              + attrs.getPositionDescription());\n    }\n\n    sa.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9683, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [325], "initializationEnd": [384], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 425, "focalAPIEnd": 463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.recycle()", "instantiate(*,str)"], "useStart": [484, 555, 598, 1794], "useEnd": [536, 592, 609, 1827], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nebogeo/littlej/tree/master/android/Libraries/abs/src/android/support/v4/app/FragmentActivity.java", "rawCode": "  /** Add support for inflating the &lt;fragment> tag. */\n  @Override\n  public View onCreateView(String name, Context context, AttributeSet attrs) {\n    if (!\"fragment\".equals(name)) {\n      return super.onCreateView(name, context, attrs);\n    }\n\n    String fname = attrs.getAttributeValue(null, \"class\");\n    TypedArray a = context.obtainStyledAttributes(attrs, FragmentTag.Fragment);\n    if (fname == null) {\n      fname = a.getString(FragmentTag.Fragment_name);\n    }\n    int id = a.getResourceId(FragmentTag.Fragment_id, View.NO_ID);\n    String tag = a.getString(FragmentTag.Fragment_tag);\n    a.recycle();\n\n    View parent = null; // NOTE: no way to get parent pre-Honeycomb.\n    int containerId = parent != null ? parent.getId() : 0;\n    if (containerId == View.NO_ID && id == View.NO_ID && tag == null) {\n      throw new IllegalArgumentException(\n          attrs.getPositionDescription()\n              + \": Must specify unique android:id, android:tag, or have a parent with an id for \"\n              + fname);\n    }\n\n    // If we restored from a previous state, we may already have\n    // instantiated this fragment from the state and should use\n    // that instance instead of making a new one.\n    Fragment fragment = id != View.NO_ID ? mFragments.findFragmentById(id) : null;\n    if (fragment == null && tag != null) {\n      fragment = mFragments.findFragmentByTag(tag);\n    }\n    if (fragment == null && containerId != View.NO_ID) {\n      fragment = mFragments.findFragmentById(containerId);\n    }\n\n    if (FragmentManagerImpl.DEBUG)\n      Log.v(\n          TAG,\n          \"onCreateView: id=0x\"\n              + Integer.toHexString(id)\n              + \" fname=\"\n              + fname\n              + \" existing=\"\n              + fragment);\n    if (fragment == null) {\n      fragment = Fragment.instantiate(this, fname);\n      fragment.mFromLayout = true;\n      fragment.mFragmentId = id != 0 ? id : containerId;\n      fragment.mContainerId = containerId;\n      fragment.mTag = tag;\n      fragment.mInLayout = true;\n      fragment.mFragmentManager = mFragments;\n      fragment.onInflate(this, attrs, fragment.mSavedFragmentState);\n      mFragments.addFragment(fragment, true);\n\n    } else if (fragment.mInLayout) {\n      // A fragment already exists and it is not one we restored from\n      // previous state.\n      throw new IllegalArgumentException(\n          attrs.getPositionDescription()\n              + \": Duplicate id 0x\"\n              + Integer.toHexString(id)\n              + \", tag \"\n              + tag\n              + \", or parent id 0x\"\n              + Integer.toHexString(containerId)\n              + \" with another fragment for \"\n              + fname);\n    } else {\n      // This fragment was retained from a previous instance; get it\n      // going now.\n      fragment.mInLayout = true;\n      // If this fragment is newly instantiated (either right now, or\n      // from last saved state), then give it the attributes to\n      // initialize itself.\n      if (!fragment.mRetaining) {\n        fragment.onInflate(this, attrs, fragment.mSavedFragmentState);\n      }\n      mFragments.moveToState(fragment);\n    }\n\n    if (fragment.mView == null) {\n      throw new IllegalStateException(\"Fragment \" + fname + \" did not create a view.\");\n    }\n    if (id != 0) {\n      fragment.mView.setId(id);\n    }\n    if (fragment.mView.getTag() == null) {\n      fragment.mView.setTag(tag);\n    }\n    return fragment.mView;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9684, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [197], "initializationEnd": [247], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 263, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.recycle()"], "useStart": [313], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/greendroid/GreenDroid/src/greendroid/widget/item/SubtextItem.java", "rawCode": "  @Override\n  public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs)\n      throws XmlPullParserException, IOException {\n    super.inflate(r, parser, attrs);\n\n    TypedArray a = r.obtainAttributes(attrs, R.styleable.SubtextItem);\n    subtext = a.getString(R.styleable.SubtextItem_subtext);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9685, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/abajwa/csci498Android/tree/master/LunchList/src/csci498/abajwa/lunchlist/TimePreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9686, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2291, 2404, 3100], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2356, 2473, 3111], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pixmob/httpclient/tree/master/demo/deps/abs/library/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n      itemActionViewClassName = a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      itemActionProviderClassName =\n          a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9687, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [239], "initializationEnd": [327], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 364, "focalAPIEnd": 439, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ObjectAnimator.setPropertyName(str)", "typedArray.recycle()"], "useStart": [446, 487], "useEnd": [480, 498], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/animation/AnimatorInflater.java", "rawCode": "  private static ObjectAnimator loadObjectAnimator(Context context, AttributeSet attrs)\n      throws NotFoundException {\n\n    ObjectAnimator anim = new ObjectAnimator();\n\n    loadAnimator(context, attrs, anim);\n\n    TypedArray a =\n        context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.PropertyAnimator);\n\n    String propertyName =\n        a.getString(com.android.internal.R.styleable.PropertyAnimator_propertyName);\n\n    anim.setPropertyName(propertyName);\n\n    a.recycle();\n\n    return anim;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9688, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [189], "initializationEnd": [275], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "configurationStart": [309, 430], "configurationEnd": [398, 514], "guardCondition": "typedArray.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit,)", "guardType": "IF {", "guardExpressionStart": 521, "guardExpressionEnd": 598, "guardBlockStart": 521, "guardBlockEnd": 700, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 621, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [607, 729, 827], "useEnd": [693, 820, 838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GrioSF/facebook-android-sdk/tree/master/facebook/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a =\n        activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);\n\n    setRadiusInMeters(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));\n    setResultsLimit(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));\n    if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {\n      setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));\n    }\n    showSearchBox =\n        a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9689, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 87, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/android/preference/RingtonePreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return a.getString(index);\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9690, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [130], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getInt(int,int)", "typedArray.getInt(int,int)", "typedArray.getText(int)", "typedArray.getText(int)", "typedArray.getResourceId(int,int)"], "configurationStart": [276, 386, 486, 666, 748, 834], "configurationEnd": [347, 460, 560, 719, 810, 895], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 950, "focalAPIEnd": 1018, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getShortcut(str)", "typedArray.getString(int)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)", "typedArray.getValue(int,TypedValue)", "typedArray.getString(int)", "typedArray.getResourceId(int,int)", "typedArray.getValue(int,TypedValue)", "typedArray.getValue(int,TypedValue)", "typedArray.recycle()"], "useStart": [938, 1071, 1283, 1598, 1698, 1792, 1916, 2100, 2188, 2409, 2753, 3572], "useEnd": [1019, 1136, 1350, 1676, 1770, 1864, 1984, 2157, 2257, 2480, 2828, 3583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kanika23oct/beamto/tree/master/libs/slidingmenu/actionbarsherlock/src/com/actionbarsherlock/view/MenuInflater.java", "rawCode": "    /** Called when the parser is pointing to an item tag. */\n    public void readItem(AttributeSet attrs) {\n      TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.SherlockMenuItem);\n\n      // Inherit attributes from the group as default value\n      itemId = a.getResourceId(R.styleable.SherlockMenuItem_android_id, defaultItemId);\n      final int category =\n          a.getInt(R.styleable.SherlockMenuItem_android_menuCategory, groupCategory);\n      final int order = a.getInt(R.styleable.SherlockMenuItem_android_orderInCategory, groupOrder);\n      itemCategoryOrder = (category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);\n      itemTitle = a.getText(R.styleable.SherlockMenuItem_android_title);\n      itemTitleCondensed = a.getText(R.styleable.SherlockMenuItem_android_titleCondensed);\n      itemIconResId = a.getResourceId(R.styleable.SherlockMenuItem_android_icon, 0);\n      itemAlphabeticShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_alphabeticShortcut));\n      itemNumericShortcut =\n          getShortcut(a.getString(R.styleable.SherlockMenuItem_android_numericShortcut));\n      if (a.hasValue(R.styleable.SherlockMenuItem_android_checkable)) {\n        // Item has attribute checkable, use it\n        itemCheckable = a.getBoolean(R.styleable.SherlockMenuItem_android_checkable, false) ? 1 : 0;\n      } else {\n        // Item does not have attribute, use the group's (group can have one more state\n        // for checkable that represents the exclusive checkable)\n        itemCheckable = groupCheckable;\n      }\n\n      itemChecked = a.getBoolean(R.styleable.SherlockMenuItem_android_checked, defaultItemChecked);\n      itemVisible = a.getBoolean(R.styleable.SherlockMenuItem_android_visible, groupVisible);\n      itemEnabled = a.getBoolean(R.styleable.SherlockMenuItem_android_enabled, groupEnabled);\n\n      TypedValue value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_showAsAction, value);\n      itemShowAsAction = value.type == TypedValue.TYPE_INT_HEX ? value.data : -1;\n\n      itemListenerMethodName = a.getString(R.styleable.SherlockMenuItem_android_onClick);\n      itemActionViewLayout = a.getResourceId(R.styleable.SherlockMenuItem_android_actionLayout, 0);\n\n      // itemActionViewClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionViewClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionViewClass, value);\n      itemActionViewClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      // itemActionProviderClassName =\n      // a.getString(R.styleable.SherlockMenuItem_android_actionProviderClass);\n      value = new TypedValue();\n      a.getValue(R.styleable.SherlockMenuItem_android_actionProviderClass, value);\n      itemActionProviderClassName =\n          value.type == TypedValue.TYPE_STRING ? value.string.toString() : null;\n\n      final boolean hasActionProvider = itemActionProviderClassName != null;\n      if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {\n        itemActionProvider =\n            newInstance(\n                itemActionProviderClassName,\n                ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,\n                mActionProviderConstructorArguments);\n      } else {\n        if (hasActionProvider) {\n          Log.w(\n              LOG_TAG,\n              \"Ignoring attribute 'actionProviderClass'.\" + \" Action view already specified.\");\n        }\n        itemActionProvider = null;\n      }\n\n      a.recycle();\n\n      itemAdded = false;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9691, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 88, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jwlawson/Nof1/tree/master/Nof1/src/org/nof1trial/nof1/preferences/TimePreference.java", "rawCode": "  @Override\n  protected Object onGetDefaultValue(TypedArray a, int index) {\n    return (a.getString(index));\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9692, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [72], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)"], "configurationStart": [173, 265], "configurationEnd": [243, 336], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 354, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "typedArray.recycle()"], "useStart": [432, 498], "useEnd": [492, 509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GrioSF/facebook-android-sdk/tree/master/facebook/src/com/facebook/widget/LoginButton.java", "rawCode": "  private void parseAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);\n    confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);\n    fetchUserInfo = a.getBoolean(R.styleable.com_facebook_login_view_fetch_user_info, true);\n    loginText = a.getString(R.styleable.com_facebook_login_view_login_text);\n    logoutText = a.getString(R.styleable.com_facebook_login_view_logout_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9693, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [181], "initializationEnd": [261], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)"], "configurationStart": [293], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 409, "focalAPIEnd": 475, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 481, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 481, "followUpCheckBlockEnd": 620, "use": ["str.split(String)", "typedArray.getBoolean(int,boolean)", "typedArray.getString(int)", "typedArray.getString(int)", "typedArray.getDrawable(int)", "typedArray.getDrawable(int)", "typedArray.recycle()"], "useStart": [539, 649, 750, 837, 942, 1055, 1140], "useEnd": [567, 732, 814, 907, 1018, 1133, 1151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bitcellar-labs/facebook-android-sdk/tree/master/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_picker_fragment);\n\n    setShowPictures(\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_pictures, showPictures));\n    String extraFieldsString = a.getString(R.styleable.com_facebook_picker_fragment_extra_fields);\n    if (extraFieldsString != null) {\n      String[] strings = extraFieldsString.split(\",\");\n      setExtraFields(Arrays.asList(strings));\n    }\n\n    showTitleBar =\n        a.getBoolean(R.styleable.com_facebook_picker_fragment_show_title_bar, showTitleBar);\n    titleText = a.getString(R.styleable.com_facebook_picker_fragment_title_text);\n    doneButtonText = a.getString(R.styleable.com_facebook_picker_fragment_done_button_text);\n    titleBarBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_title_bar_background);\n    doneButtonBackground =\n        a.getDrawable(R.styleable.com_facebook_picker_fragment_done_button_background);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9694, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "URISyntaxException", "exceptionHandlingCall": ["w(String,String)"], "tryExpressionStart": 340, "tryExpressionEnd": 344, "tryBlockStart": 340, "tryBlockEnd": 575, "catchExpressionStart": 449, "catchExpressionEnd": 478, "catchBlockStart": 449, "catchBlockEnd": 575, "exceptionHandlingCallStart": [488], "exceptionHandlingCallEnd": [536], "configuration": ["typedArray.getResourceId(int,int)", "typedArray.getResourceId(int,int)"], "configurationStart": [163, 239], "configurationEnd": [208, 285], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 360, "focalAPIEnd": 397, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseUri(str,int)"], "useStart": [416], "useEnd": [439], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/minakov/Launcher2/tree/master/src/com/android/launcher2/LauncherProvider.java", "rawCode": "    private long addUriShortcut(SQLiteDatabase db, ContentValues values, TypedArray a) {\n      Resources r = mContext.getResources();\n\n      final int iconResId = a.getResourceId(R.styleable.Favorite_icon, 0);\n      final int titleResId = a.getResourceId(R.styleable.Favorite_title, 0);\n\n      Intent intent;\n      String uri = null;\n      try {\n        uri = a.getString(R.styleable.Favorite_uri);\n        intent = Intent.parseUri(uri, 0);\n      } catch (URISyntaxException e) {\n        Log.w(TAG, \"Shortcut has malformed uri: \" + uri);\n        return -1; // Oh well\n      }\n\n      if (iconResId == 0 || titleResId == 0) {\n        Log.w(TAG, \"Shortcut is missing title or icon resource ID\");\n        return -1;\n      }\n\n      long id = generateNewId();\n      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n      values.put(Favorites.INTENT, intent.toUri(0));\n      values.put(Favorites.TITLE, r.getString(titleResId));\n      values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_SHORTCUT);\n      values.put(Favorites.SPANX, 1);\n      values.put(Favorites.SPANY, 1);\n      values.put(Favorites.ICON_TYPE, Favorites.ICON_TYPE_RESOURCE);\n      values.put(Favorites.ICON_PACKAGE, mContext.getPackageName());\n      values.put(Favorites.ICON_RESOURCE, r.getResourceName(iconResId));\n      values.put(Favorites._ID, id);\n\n      if (dbInsertAndCheck(this, db, TABLE_FAVORITES, null, values) < 0) {\n        return -1;\n      }\n      return id;\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9695, "initialization": ["TypedArray typedArray = obtainTypedArray(*)"], "initializationStart": [121], "initializationEnd": [163], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 169, "tryExpressionEnd": 173, "tryBlockStart": 169, "tryBlockEnd": 480, "catchExpressionStart": 387, "catchExpressionEnd": 407, "catchBlockStart": 387, "catchBlockEnd": 441, "exceptionHandlingCallStart": [415], "exceptionHandlingCallEnd": [434], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<typedArray.length()", "guardType": "LOOP {", "guardExpressionStart": 181, "guardExpressionEnd": 221, "guardBlockStart": 181, "guardBlockEnd": 380, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 243, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getResourceId(int,int)", "typedArray.recycle()"], "useStart": [280, 458], "useEnd": [305, 473], "hasFinally": 1, "cleanUpCall": ["TypedArray.recycle()"], "finallyExpressionStart": 442, "finallyExpressionEnd": 450, "finallyBlockStart": 442, "finallyBlockEnd": 480, "cleanUpCallStart": [458], "cleanUpCallEnd": [473], "url": "https://github.com/victoryckl/android-demos/tree/master/android-demos/src/com/example/android_demos/ArrayResIdActivity.java", "rawCode": "  private String getString() {\n    String text = \"string:\\n\";\n    Resources res = getResources();\n    TypedArray array = res.obtainTypedArray(R.array.array_string);\n    try {\n      for (int i = 0; i < array.length(); i++) {\n        String s = array.getString(i);\n        int id = array.getResourceId(i, 0);\n        text += \"0x\" + Integer.toHexString(id) + \", \" + s + \"\\n\";\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      array.recycle();\n    }\n    return text;\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9696, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [834], "initializationEnd": [914], "hasTryCatch": 1, "exceptionType": "NameNotFoundException", "exceptionHandlingCall": ["w(String,String)"], "tryExpressionStart": 127, "tryExpressionEnd": 131, "tryBlockStart": 127, "tryBlockEnd": 1579, "catchExpressionStart": 1150, "catchExpressionEnd": 1182, "catchBlockStart": 1150, "catchBlockEnd": 1266, "exceptionHandlingCallStart": [1190], "exceptionHandlingCallEnd": [1240], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 964, "focalAPIEnd": 1049, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.recycle()"], "useStart": [1061], "useEnd": [1076], "hasFinally": 1, "cleanUpCall": ["XmlResourceParser.close()"], "finallyExpressionStart": 1504, "finallyExpressionEnd": 1512, "finallyBlockStart": 1504, "finallyBlockEnd": 1579, "cleanUpCallStart": [1550], "cleanUpCallEnd": [1564], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/speech/tts/TtsEngines.java", "rawCode": "  private String settingsActivityFromServiceInfo(ServiceInfo si, PackageManager pm) {\n    XmlResourceParser parser = null;\n    try {\n      parser = si.loadXmlMetaData(pm, TextToSpeech.Engine.SERVICE_META_DATA);\n      if (parser == null) {\n        Log.w(TAG, \"No meta-data found for :\" + si);\n        return null;\n      }\n\n      final Resources res = pm.getResourcesForApplication(si.applicationInfo);\n\n      int type;\n      while ((type = parser.next()) != XmlResourceParser.END_DOCUMENT) {\n        if (type == XmlResourceParser.START_TAG) {\n          if (!XML_TAG_NAME.equals(parser.getName())) {\n            Log.w(TAG, \"Package \" + si + \" uses unknown tag :\" + parser.getName());\n            return null;\n          }\n\n          final AttributeSet attrs = Xml.asAttributeSet(parser);\n          final TypedArray array =\n              res.obtainAttributes(attrs, com.android.internal.R.styleable.TextToSpeechEngine);\n          final String settings =\n              array.getString(com.android.internal.R.styleable.TextToSpeechEngine_settingsActivity);\n          array.recycle();\n\n          return settings;\n        }\n      }\n\n      return null;\n    } catch (NameNotFoundException e) {\n      Log.w(TAG, \"Could not load resources for : \" + si);\n      return null;\n    } catch (XmlPullParserException e) {\n      Log.w(TAG, \"Error parsing metadata for \" + si + \":\" + e);\n      return null;\n    } catch (IOException e) {\n      Log.w(TAG, \"Error parsing metadata for \" + si + \":\" + e);\n      return null;\n    } finally {\n      if (parser != null) {\n        parser.close();\n      }\n    }\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9697, "initialization": ["TypedArray typedArray = getContext()"], "initializationStart": [72], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getBoolean(int,boolean)", "typedArray.getBoolean(int,boolean)"], "configurationStart": [173, 265], "configurationEnd": [243, 336], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 354, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.getString(int)", "typedArray.recycle()"], "useStart": [432, 498], "useEnd": [492, 509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/higepon/Lovamimi-For-Android/tree/master/libs/facebook-android-sdk-3.6.0/facebook/src/com/facebook/widget/LoginButton.java", "rawCode": "  private void parseAttributes(AttributeSet attrs) {\n    TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);\n    confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);\n    fetchUserInfo = a.getBoolean(R.styleable.com_facebook_login_view_fetch_user_info, true);\n    loginText = a.getString(R.styleable.com_facebook_login_view_login_text);\n    logoutText = a.getString(R.styleable.com_facebook_login_view_logout_text);\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9698, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 71, "focalAPIEnd": 96, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.lastIndexOf(*)", "str.lastIndexOf(char)", "str.substring(*,int)"], "useStart": [125, 183, 219], "useEnd": [157, 204, 266], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/slim/notificationshortcuts/IconPicker.java", "rawCode": "    public String getItemReference(int position) {\n      String name = icons.getString(position);\n      int separatorIndex = name.lastIndexOf(File.separator);\n      int periodIndex = name.lastIndexOf('.');\n      return name.substring(separatorIndex + 1, periodIndex);\n    }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9699, "initialization": ["TypedArray typedArray = obtainStyledAttributes(AttributeSet,*)"], "initializationStart": [189], "initializationEnd": [275], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getInt(int,int)", "typedArray.getInt(int,int)"], "configurationStart": [309, 430], "configurationEnd": [398, 514], "guardCondition": "typedArray.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit,)", "guardType": "IF {", "guardExpressionStart": 521, "guardExpressionEnd": 598, "guardBlockStart": 521, "guardBlockEnd": 700, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 621, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(str)", "typedArray.getBoolean(int,boolean)", "typedArray.recycle()"], "useStart": [607, 729, 827], "useEnd": [693, 820, 838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bitcellar-labs/facebook-android-sdk/tree/master/facebook/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  @Override\n  public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {\n    super.onInflate(activity, attrs, savedInstanceState);\n    TypedArray a =\n        activity.obtainStyledAttributes(attrs, R.styleable.com_facebook_place_picker_fragment);\n\n    setRadiusInMeters(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_radius_in_meters, radiusInMeters));\n    setResultsLimit(\n        a.getInt(R.styleable.com_facebook_place_picker_fragment_results_limit, resultsLimit));\n    if (a.hasValue(R.styleable.com_facebook_place_picker_fragment_results_limit)) {\n      setSearchText(a.getString(R.styleable.com_facebook_place_picker_fragment_search_text));\n    }\n    showSearchBox =\n        a.getBoolean(R.styleable.com_facebook_place_picker_fragment_show_search_box, showSearchBox);\n\n    a.recycle();\n  }\n"}, {"dataset": "typedArrayGetString", "exampleID": 9700, "initialization": ["TypedArray typedArray = obtainAttributes(AttributeSet,*)"], "initializationStart": [197], "initializationEnd": [249], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["typedArray.getResourceId(int,int)"], "configurationStart": [268], "configurationEnd": [332], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = typedArray.getString(index)", "focalAPIStart": 352, "focalAPIEnd": 403, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["typedArray.recycle()"], "useStart": [409], "useEnd": [420], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cldellow/Ballero/tree/master/src/main/java/greendroid/src/greendroid/widget/item/ThumbnailItem.java", "rawCode": "  @Override\n  public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs)\n      throws XmlPullParserException, IOException {\n    super.inflate(r, parser, attrs);\n\n    TypedArray a = r.obtainAttributes(attrs, R.styleable.ThumbnailItem);\n    drawableId = a.getResourceId(R.styleable.ThumbnailItem_thumbnail, drawableId);\n    drawableURL = a.getString(R.styleable.ThumbnailItem_thumbnailURL);\n    a.recycle();\n  }\n"}]