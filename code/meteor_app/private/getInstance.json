[{"dataset": "getInstance", "exampleID": 901, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 2597, "focalAPIEnd": 2619, "followUpCheck": "calndr == null", "checkType": "IF", "followUpCheckExpressionStart": 3385, "followUpCheckExpressionEnd": 3407, "followUpCheckBlockStart": 3385, "followUpCheckBlockEnd": 3484, "use": ["calndr.setTime(Date)", "calendar.getInstance()", "new LineRequest(Aspect,int,*,calndr,Calendar,DataResolution,*)", "new LineRequest(Aspect,int,*,calndr,Calendar,DataResolution,*)", "calndr.clone()"], "useStart": [2637, 2767, 2937, 3658, 4071], "useEnd": [2686, 2789, 3187, 3908, 4088], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/enwida/idpRepo/tree/master/workspace/enwida/src/test/java/de/enwida/web/ChartNavigationTestsRelaxed.java", "rawCode": "  @Override\n  protected void checkLines(\n      User user, ChartNavigationData navigationData, Calendar startTime, Calendar endTime)\n      throws Exception {\n    // Relaxation settings\n    final Random random = new Random();\n    final int coveredProductSharePercent = 20;\n    final int coveredResolutionSharePercent = 30;\n    final int coveredAspectSharePercent = 50;\n\n    final Integer[] allProducts =\n        new Integer[] {\n          200, 300, 211, 212, 221, 222, 311, 321, 312, 322, 313, 323, 314, 324, 315, 325, 316, 326\n        };\n\n    final List<Integer> shuffledProuducts = new ArrayList<Integer>(Arrays.asList(allProducts));\n    Collections.shuffle(shuffledProuducts, random);\n\n    final List<DataResolution> shuffledResolutions =\n        new ArrayList<DataResolution>(Arrays.asList(DataResolution.values()));\n    Collections.shuffle(shuffledResolutions, random);\n\n    final List<Aspect> shuffledAspects = new ArrayList<Aspect>(Arrays.asList(Aspect.values()));\n    Collections.shuffle(shuffledAspects, random);\n\n    final int numProductChecks = shuffledProuducts.size() * coveredProductSharePercent / 100;\n    final int numResolutionChecks =\n        shuffledResolutions.size() * coveredResolutionSharePercent / 100;\n    final int numAspectChecks = shuffledAspects.size() * coveredAspectSharePercent / 100;\n    final int numTotalChecks = numProductChecks * numResolutionChecks * numAspectChecks;\n\n    int i = 0;\n\n    for (final ProductTree tree : navigationData.getProductTrees()) {\n      for (int productCount = 0; productCount < numProductChecks; productCount++) {\n        final int product = shuffledProuducts.get(productCount);\n\n        for (int resolutionCount = 0; resolutionCount < numResolutionChecks; resolutionCount++) {\n          final DataResolution resolution = shuffledResolutions.get(resolutionCount);\n\n          for (int aspectCount = 0; aspectCount < numAspectChecks; aspectCount++) {\n            final Aspect aspect = shuffledAspects.get(aspectCount);\n\n            i++;\n            System.out.println(\n                \"[\"\n                    + i\n                    + \" / \"\n                    + numTotalChecks\n                    + \"] Product: \"\n                    + product\n                    + \" | Aspect: \"\n                    + aspect.toString());\n\n            final ProductLeaf leaf = tree.getLeaf(product);\n            if (leaf == null || !leaf.getResolution().contains(resolution)) {\n              final Calendar savedStartTime = startTime;\n              final Calendar savedEndTime = endTime;\n\n              if (startTime == null) {\n                startTime = Calendar.getInstance();\n                startTime.setTime(dateFormat.parse(\"2011-01-01\"));\n              }\n              if (endTime == null) {\n                endTime = Calendar.getInstance();\n                endTime.setTime(dateFormat.parse(\"2012-01-01\"));\n              }\n\n              final LineRequest lineRequest =\n                  new LineRequest(\n                      aspect,\n                      product,\n                      tree.getTso(),\n                      startTime,\n                      endTime,\n                      resolution,\n                      Locale.ENGLISH);\n              Assert.assertFalse(securityService.isAllowed(lineRequest, user));\n\n              startTime = savedStartTime;\n              endTime = savedEndTime;\n            } else {\n              if (startTime == null) {\n                startTime = leaf.getTimeRange().getFrom();\n              }\n              if (endTime == null) {\n                endTime = leaf.getTimeRange().getTo();\n              }\n\n              final LineRequest lineRequest =\n                  new LineRequest(\n                      aspect,\n                      product,\n                      tree.getTso(),\n                      startTime,\n                      endTime,\n                      resolution,\n                      Locale.ENGLISH);\n              Assert.assertTrue(securityService.isAllowed(lineRequest, user));\n\n              // Enlarge time range\n              final Calendar t1 = (Calendar) startTime.clone();\n              final Calendar t2 = (Calendar) endTime.clone();\n              t1.add(Calendar.YEAR, -2);\n              t2.add(Calendar.YEAR, 2);\n              lineRequest.setStartTime(t1);\n              lineRequest.setEndTime(t2);\n\n              Assert.assertFalse(securityService.isAllowed(lineRequest, user));\n            }\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 902, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 133, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)"], "useStart": [161], "useEnd": [182], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/StratusLab/claudia/tree/master/claudia-model/src/main/java/com/telefonica/claudia/slm/monitoring/monitoringsample.java", "rawCode": "  public void setDatetime(Date datetime) {\n    this.datetime = datetime;\n\n    // Parse the date in its components\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(datetime);\n    this.year = cal.get(Calendar.YEAR);\n    this.month = cal.get(Calendar.MONTH);\n    this.day = cal.get(Calendar.DAY_OF_MONTH);\n    this.hour = cal.get(Calendar.HOUR_OF_DAY);\n    this.minute = cal.get(Calendar.MINUTE);\n  }\n"}, {"dataset": "getInstance", "exampleID": 903, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 151, "focalAPIEnd": 173, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()"], "useStart": [151], "useEnd": [183], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AvogadroSG1/SCADASystem/tree/master/PagingSystem/src/alert/AlertMonitoringSystem.java", "rawCode": "    private void log(String toLog) {\n      SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy HH:mm:ss\");\n      String formattedDate = sdf.format(Calendar.getInstance().getTime());\n      logArea.append(toLog + \" at \" + formattedDate + \"\\n\");\n    }\n"}, {"dataset": "getInstance", "exampleID": 904, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 488, "focalAPIEnd": 510, "followUpCheck": "(startCal.get(calendar.HOUR_OF_DAY) < calndr.get(calendar.HOUR_OF_DAY))", "checkType": "IF", "followUpCheckExpressionStart": 643, "followUpCheckExpressionEnd": 754, "followUpCheckBlockStart": 643, "followUpCheckBlockEnd": 2624, "use": ["calendar.getInstance()", "calndr.setTime(Date)"], "useStart": [542, 576], "useEnd": [564, 595], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ivanstojkovic/doodle/tree/master/feeder/src/main/java/at/tuwien/sbc/feeder/gui/panels/EventOrganizationPanel.java", "rawCode": "  private void updateEvent() {\n    String name = (String) this.cmbEvent.getSelectedItem();\n    DoodleEvent event = ControllerReference.getInstance().findEventByNameAndOwner(name);\n    if (event != null) {\n      logger.info(\"updating event with id: \" + event.getId());\n      try {\n        if (event.retrieveParticipants().isEmpty()) {\n          Date start = this.pnlSchedule.getTxtStart().getDate();\n          Date end = this.pnlSchedule.getTxtEnd().getDate();\n          Calendar endCal = Calendar.getInstance();\n          Calendar startCal = Calendar.getInstance();\n          endCal.setTime(end);\n          startCal.setTime(start);\n\n          if (start.before(end)\n              && (startCal.get(Calendar.HOUR_OF_DAY) < endCal.get(Calendar.HOUR_OF_DAY))) {\n\n            name = JOptionPane.showInputDialog(\"Please type in a name for this event.\", name);\n\n            if (name != null && !name.equals(\"\")) {\n\n              Peer current = ControllerReference.getInstance().getUser();\n              List<DoodleSchedule> schedules = new ArrayList<DoodleSchedule>();\n              for (int d = startCal.get(Calendar.DAY_OF_YEAR);\n                  d <= endCal.get(Calendar.DAY_OF_YEAR);\n                  d++) {\n                for (int h = startCal.get(Calendar.HOUR_OF_DAY);\n                    h < endCal.get(Calendar.HOUR_OF_DAY);\n                    h++) {\n                  for (String p : event.retrieveInvitations()) {\n                    DoodleSchedule forPeer = new DoodleSchedule(d + \"\", h + \"\", p, event.getId());\n                    schedules.add(forPeer);\n                  }\n                }\n              }\n\n              event = (DoodleEvent) ControllerReference.getInstance().refresh(event);\n              if (event.retrieveParticipants().isEmpty()) {\n                List<String> sIds = new ArrayList<String>();\n                // delete all old schedules\n                ControllerReference.getInstance().deleteOldSchedules(null, event.getId());\n                for (DoodleSchedule s : schedules) {\n                  ControllerReference.getInstance().getGigaSpace().write(s);\n                  sIds.add(s.getId());\n                }\n                event.retrieveSchedules().clear();\n                event.retrieveSchedules().addAll(sIds);\n                event.setName(name);\n                ControllerReference.getInstance().getGigaSpace().write(event);\n                this.notifyEventUpdate(event);\n              }\n\n              this.refreshModel();\n              this.cmbEvent.setSelectedItem(name);\n            } else {\n              logger.warn(\"event name cannot be empty\");\n            }\n          }\n\n        } else {\n          JOptionPane.showMessageDialog(\n              this, \"This event has subscribed peers and cannot be changed!\");\n        }\n      } catch (ParseException e) {\n        // TODO something\n      }\n    } else {\n      logger.error(\"NULL\");\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 905, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 439, "focalAPIEnd": 461, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setProperty(String,calndr)"], "useStart": [401], "useEnd": [462], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-635/kernel-impl/src/test/java/org/sakaiproject/jcr/test/ExportDocViewTestData.java", "rawCode": "  private void invalidMultiBin(Node dataRoot) throws RepositoryException {\n    Node resource = dataRoot.addNode(\"invalidMultiBin\", ntUnstructured);\n    resource.setProperty(jcrEncoding, ENCODING);\n    resource.setProperty(jcrMimeType, \"text/plain\");\n    String[] values = {\"SGVsbG8gd8O2cmxkLg==\", \"SGVsbG8gd8O2cmxkLg==\"};\n    resource.setProperty(invalidXmlPropName, values, PropertyType.BINARY);\n    resource.setProperty(jcrLastModified, Calendar.getInstance());\n  }\n"}, {"dataset": "getInstance", "exampleID": 906, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 100, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)", "calndr.getTimeInMillis()", "calendar.getInstance()"], "useStart": [128, 194, 616], "useEnd": [161, 220, 638], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ted/ted/tree/master/ted-server/src/test/java/nu/ted/domain/SeriesBackendWrapperTest.java", "rawCode": "  @Test\n  public void ensureEventFiredWhenEpisodeAdded() throws Exception {\n    Calendar calendar = Calendar.getInstance();\n    calendar.add(Calendar.MINUTE, -2);\n    TDate lastPoll = new TDate(calendar.getTimeInMillis());\n\n    TestGuide seriesSource = new TestGuide();\n    GuideFactory.addGuide(seriesSource);\n    TedServiceImpl service = new TedServiceImpl(Server.createDefaultTed(), seriesSource);\n\n    TedServiceImpl.clearRegistryEvents();\n\n    Series series = new Series();\n    series.setGuideName(seriesSource.getName());\n    SeriesBackendWrapper wrapper = new SeriesBackendWrapper(series);\n    wrapper.update(Calendar.getInstance());\n\n    List<Event> events = service.getEvents(lastPoll);\n    assertEquals(1, events.size());\n\n    Event received = events.get(0);\n    assertEquals(EventType.EPISODE_ADDED, received.getType());\n    assertEquals(series, received.getSeries());\n  }\n"}, {"dataset": "getInstance", "exampleID": 907, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 189, "focalAPIEnd": 211, "followUpCheck": "calndr.get(calendar.YEAR) == cal2.get(calendar.YEAR)", "checkType": "IF", "followUpCheckExpressionStart": 440, "followUpCheckExpressionEnd": 494, "followUpCheckBlockStart": 440, "followUpCheckBlockEnd": 850, "use": ["calendar.getInstance()", "calndr.setTimeInMillis(long)", "calndr.roll(int,boolean)"], "useStart": [233, 261, 666], "useEnd": [255, 302, 695], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vahokif/jmt/tree/master/src/jmt/gui/jwat/trafficAnalysis/panels/GraphArrivalPanel.java", "rawCode": "  /** Is the method invoked to calculate the number of years in the log (Variable) */\n  private void ArrNumYear() {\n    ArrYear = new Vector<double[]>();\n    double i[];\n    Calendar cal = Calendar.getInstance();\n    Calendar cal2 = Calendar.getInstance();\n    cal.setTimeInMillis((long) v.getValue(0));\n    int y = 0;\n    int z = 0;\n    boolean k = false;\n    while (z < v.Size()) {\n      cal2.setTimeInMillis((long) v.getValue(z));\n      if (cal.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)) {\n        y++;\n      } else {\n        k = false;\n        i = new double[2];\n        i[0] = cal.getTimeInMillis();\n        i[1] = y;\n        ArrYear.addElement(i);\n        cal.roll(Calendar.YEAR, true);\n        if (cal.get(Calendar.YEAR) == cal2.get(Calendar.YEAR)) {\n          y = 1;\n        } else {\n          y = 0;\n          k = true;\n        }\n      }\n      if (k != true) {\n        z++;\n      }\n    }\n    i = new double[2];\n    i[0] = cal.getTimeInMillis();\n    i[1] = y;\n    ArrYear.addElement(i);\n  }\n"}, {"dataset": "getInstance", "exampleID": 908, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 512, "focalAPIEnd": 534, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.add(int,int)", "calndr.add(int,int)", "calndr.getTime()"], "useStart": [542, 572, 614, 665], "useEnd": [564, 606, 647, 678], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PIH/openmrs-module-patientregistration/tree/master/api/src/main/java/org/openmrs/module/patientregistration/service/PatientRegistrationServiceImpl.java", "rawCode": "  private Encounter getEncounterByDateAndType(\n      Patient patient, EncounterType encounterType, Location location, Date registrationDate) {\n\n    Date startTime = null;\n    Date endTime = null;\n    if (registrationDate != null) {\n      // clear the time component to get the start time to search (first millisecond of current day)\n      startTime = PatientRegistrationUtil.clearTimeComponent(registrationDate);\n\n      // create the end time to search (last millisecond of the current day)\n      Calendar cal = Calendar.getInstance();\n      cal.setTime(startTime);\n      cal.add(Calendar.DAY_OF_MONTH, +1);\n      cal.add(Calendar.MILLISECOND, -1);\n      endTime = cal.getTime();\n    }\n    List<Encounter> encounters =\n        Context.getEncounterService()\n            .getEncounters(\n                patient,\n                location,\n                null,\n                null,\n                null,\n                Arrays.asList(encounterType),\n                null,\n                null,\n                null,\n                false);\n    if (encounters != null && encounters.size() > 0) {\n      int maxIndex = encounters.size() - 1;\n      // return the most recent encounter\n      return encounters.get(maxIndex);\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 909, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 812, "focalAPIEnd": 834, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calendar.get(int)"], "useStart": [812], "useEnd": [860], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/smaldeniya/GlobalMeshETicket/tree/master/src/com/globalmesh/action/hall/PlatinumAction.java", "rawCode": "  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n\n    String user = (String) req.getSession().getAttribute(\"email\");\n\n    if (user == null) {\n      req.setAttribute(\"msgClass\", Constants.MSG_CSS_ERROR);\n      req.setAttribute(\"message\", Utility.getCONFG().getProperty(Constants.LOGIN_NEED_MESSAGE));\n      req.getRequestDispatcher(\"/messages.jsp\").forward(req, resp);\n\n    } else {\n      String hallName = Utility.getCONFG().getProperty(Constants.HALL_PLATINUM);\n      MovieDetail hallMovie = MovieDetailDAO.INSTANCE.getNowShowingMovie(hallName);\n\n      if (hallMovie != null) {\n        DateFormat movieDateFormat = new SimpleDateFormat(\"hh:mm a\");\n\n        req.setAttribute(\"youtubeUrl\", hallMovie.getMovieYouTube());\n        int dayOfWeek = Calendar.getInstance().get(Calendar.DAY_OF_WEEK) - 1;\n        Date[] shows = new Date[5];\n\n        for (int i = 0; i < 5; i++) {\n          switch (i) {\n            case 0:\n              Date[] date = hallMovie.getMovieTime1();\n              if (date != null && date.length == 7) shows[i] = date[dayOfWeek];\n              break;\n            case 1:\n              Date[] date2 = hallMovie.getMovieTime2();\n              if (date2 != null && date2.length == 7) shows[i] = date2[dayOfWeek];\n              break;\n            case 2:\n              Date[] date3 = hallMovie.getMovieTime3();\n              if (date3 != null && date3.length == 7) shows[i] = date3[dayOfWeek];\n              break;\n            case 3:\n              Date[] date4 = hallMovie.getMovieTime4();\n              if (date4 != null && date4.length == 7) shows[i] = date4[dayOfWeek];\n              break;\n            case 4:\n              Date[] date5 = hallMovie.getMovieTime5();\n              if (date5 != null && date5.length == 7) shows[i] = date5[dayOfWeek];\n              break;\n          }\n        }\n\n        List<String> showTimes = new ArrayList<String>();\n\n        for (Date date : shows) {\n          if (date != null) {\n            showTimes.add(movieDateFormat.format(date));\n          }\n        }\n\n        Hall h = HallDAO.INSTANCE.getHallById(hallName);\n\n        req.setAttribute(\"hall\", h);\n        req.setAttribute(\"shows\", showTimes);\n        req.getRequestDispatcher(\"/platinum_seatPlan.jsp\").forward(req, resp);\n      } else {\n        req.setAttribute(\"youtubeUrl\", \"\");\n        req.setAttribute(\"shows\", new ArrayList<String>());\n        req.getRequestDispatcher(\"/platinum_seatPlan.jsp\").forward(req, resp);\n      }\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 910, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 71, "focalAPIEnd": 93, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["StockRepository.getStock(int,calndr)", "StockServiceImpl.getStock(int,calndr)"], "useStart": [145, 220], "useEnd": [179, 252], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pshivana/BIS/tree/master/code/Inventory/src/test/java/com/bis/inventory/services/StockServiceImplTest.java", "rawCode": "  @Test\n  public void shouldGetStockFromRepository() {\n    Date date = Calendar.getInstance().getTime();\n    Stock stock = new Stock();\n    when(mockRepository.getStock(123, date)).thenReturn(stock);\n\n    Stock actual = stockService.getStock(123, date);\n\n    Assert.assertEquals(stock, actual);\n  }\n"}, {"dataset": "getInstance", "exampleID": 911, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 229, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.get(int)"], "useStart": [268], "useEnd": [290], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/belerweb/cqlybest/tree/master/common/src/main/java/com/cqlybest/common/IdcardUtils.java", "rawCode": "  /**\n   * 验证小于当前日期 是否有效\n   *\n   * @param iYear 待验证日期(年)\n   * @param iMonth 待验证日期(月 1-12)\n   * @param iDate 待验证日期(日)\n   * @return 是否有效\n   */\n  public static boolean valiDate(int iYear, int iMonth, int iDate) {\n    Calendar cal = Calendar.getInstance();\n    int year = cal.get(Calendar.YEAR);\n    int datePerMonth;\n    if (iYear < MIN || iYear >= year) {\n      return false;\n    }\n    if (iMonth < 1 || iMonth > 12) {\n      return false;\n    }\n    switch (iMonth) {\n      case 4:\n      case 6:\n      case 9:\n      case 11:\n        datePerMonth = 30;\n        break;\n      case 2:\n        boolean dm =\n            ((iYear % 4 == 0 && iYear % 100 != 0) || (iYear % 400 == 0))\n                && (iYear > MIN && iYear < year);\n        datePerMonth = dm ? 29 : 28;\n        break;\n      default:\n        datePerMonth = 31;\n    }\n    return (iDate >= 1) && (iDate <= datePerMonth);\n  }\n"}, {"dataset": "getInstance", "exampleID": 912, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 783, "focalAPIEnd": 805, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()", "calndr.add(int,int)", "calndr.getTime()", "calndr.add(int,int)", "calndr.getTime()", "calndr.setTime(Date)", "calndr.add(int,int)", "calndr.getTime()", "calndr.add(int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()"], "useStart": [825, 851, 905, 931, 987, 5188, 5218, 5275, 6298, 6350, 13122, 13185, 13211, 13281, 13307, 13378, 13404, 13476, 13502, 13573, 13599, 13672, 13698, 13775, 13801, 13877, 13903, 13977, 14003, 14076], "useEnd": [843, 881, 923, 963, 1005, 5210, 5249, 5293, 6329, 6368, 13155, 13203, 13244, 13299, 13340, 13396, 13438, 13494, 13535, 13591, 13632, 13690, 13732, 13793, 13835, 13895, 13937, 13995, 14037, 14094], "hasFinally": 1, "cleanUpCall": ["closeSession()"], "finallyExpressionStart": 14876, "finallyExpressionEnd": 14884, "finallyBlockStart": 14876, "finallyBlockEnd": 14921, "cleanUpCallStart": [14892], "cleanUpCallEnd": [14914], "url": "https://github.com/motech/MOTECH-Ghana/tree/master/motech-server-omod/src/test/java/org/motechproject/server/svc/impl/RegistrarBeanRecordVisitsTest.java", "rawCode": "  @Test\n  @SkipBaseSetup\n  public void testRecordVisits() {\n\n    try {\n      Context.openSession();\n      Context.authenticate(\"admin\", \"test\");\n\n      MotechService motechService = Context.getService(MotechService.class);\n      RegistrarBean registrarBean = motechService.getRegistrarBean();\n      OpenmrsBean openmrsBean = motechService.getOpenmrsBean();\n\n      Facility facility = motechService.getFacilityById(11117);\n      Location facilityLocation = facility.getLocation();\n      Community community = motechService.getCommunityById(11111);\n      String serialNumber = \"1/111\";\n\n      Integer mother1Id = 1234575;\n      Integer mother2Id = 1234581;\n      Integer child1Id = 1234599;\n      Integer child2Id = 1234608;\n      Integer child3Id = 1234612;\n      Calendar calendar = Calendar.getInstance();\n      Date date = calendar.getTime();\n      calendar.add(Calendar.DATE, 5);\n      Date dueDate1 = calendar.getTime();\n      calendar.add(Calendar.DATE, -20);\n      Date dueDate2 = calendar.getTime();\n\n      staff = registrarBean.registerStaff(\"Nurse\", \"Betty\", \"7777777777\", \"CHO\", null);\n\n      registrarBean.registerPatient(\n          RegistrationMode.USE_PREPRINTED_ID,\n          mother1Id,\n          RegistrantType.PREGNANT_MOTHER,\n          \"Mother1FirstName\",\n          \"Mother1MiddleName\",\n          \"Mother1LastName\",\n          \"Mother1PrefName\",\n          date,\n          false,\n          Gender.FEMALE,\n          true,\n          \"nhisNumber1\",\n          date,\n          null,\n          community,\n          facility,\n          \"Address\",\n          \"1111111111\",\n          dueDate1,\n          true,\n          true,\n          true,\n          ContactNumberType.PERSONAL,\n          MediaType.TEXT,\n          \"language\",\n          DayOfWeek.MONDAY,\n          date,\n          InterestReason.CURRENTLY_PREGNANT,\n          HowLearned.FRIEND,\n          null);\n\n      Patient mother1 = openmrsBean.getPatientByMotechId(mother1Id.toString());\n      assertNotNull(\"Mother 1 not registered\", mother1);\n      assertEquals(\n          \"Registration or Pregnancy visit not added for Mother 1\",\n          2,\n          Context.getEncounterService().getEncountersByPatient(mother1).size());\n\n      registrarBean.registerPatient(\n          RegistrationMode.USE_PREPRINTED_ID,\n          mother2Id,\n          RegistrantType.PREGNANT_MOTHER,\n          \"Mother2FirstName\",\n          \"Mother2MiddleName\",\n          \"Mother2LastName\",\n          \"Mother2PrefName\",\n          date,\n          false,\n          Gender.FEMALE,\n          true,\n          \"nhisNumber2\",\n          date,\n          null,\n          community,\n          facility,\n          \"Address\",\n          \"1111111111\",\n          dueDate2,\n          true,\n          true,\n          true,\n          ContactNumberType.PERSONAL,\n          MediaType.TEXT,\n          \"language\",\n          DayOfWeek.MONDAY,\n          date,\n          InterestReason.CURRENTLY_PREGNANT,\n          HowLearned.FRIEND,\n          null);\n\n      Patient mother2 = openmrsBean.getPatientByMotechId(mother2Id.toString());\n      assertNotNull(\"Mother 2 not registered\", mother2);\n      assertEquals(\n          \"Registration or Pregnancy visit not added for Mother 2\",\n          2,\n          Context.getEncounterService().getEncountersByPatient(mother2).size());\n\n      registrarBean.registerPatient(\n          RegistrationMode.USE_PREPRINTED_ID,\n          child1Id,\n          RegistrantType.CHILD_UNDER_FIVE,\n          \"Child1FirstName\",\n          \"Child1MiddleName\",\n          \"Child1LastName\",\n          \"Child1PrefName\",\n          date,\n          false,\n          Gender.FEMALE,\n          true,\n          \"nhisNumber3\",\n          date,\n          null,\n          null,\n          facility,\n          \"Address\",\n          \"1111111111\",\n          null,\n          null,\n          false,\n          false,\n          ContactNumberType.PERSONAL,\n          MediaType.TEXT,\n          \"language\",\n          DayOfWeek.MONDAY,\n          date,\n          InterestReason.FAMILY_FRIEND_PREGNANT,\n          HowLearned.FRIEND,\n          null);\n\n      Patient child1 = openmrsBean.getPatientByMotechId(child1Id.toString());\n      assertNotNull(\"Child 1 not registered\", child1);\n      assertEquals(\n          \"Registration visit not added for Child 1\",\n          1,\n          Context.getEncounterService().getEncountersByPatient(child1).size());\n\n      assertEquals(\n          \"3 new patients not registered\", 5, Context.getPatientService().getAllPatients().size());\n\n      // Query for Mother 1 upcoming pregnancy due date\n      List<Obs> upcomingDueDate = registrarBean.getUpcomingPregnanciesDueDate(facility);\n      assertEquals(1, upcomingDueDate.size());\n      assertEquals(dueDate1, upcomingDueDate.get(0).getValueDatetime());\n      assertEquals(mother1.getPatientId(), upcomingDueDate.get(0).getPerson().getPersonId());\n\n      // Query for Mother 2 overdue pregnancy due date\n      List<Obs> overdueDueDate = registrarBean.getOverduePregnanciesDueDate(facility);\n      assertEquals(1, overdueDueDate.size());\n      assertEquals(dueDate2, overdueDueDate.get(0).getValueDatetime());\n      assertEquals(mother2.getPatientId(), overdueDueDate.get(0).getPerson().getPersonId());\n\n      calendar.setTime(date);\n      calendar.add(Calendar.MONTH, 6);\n      Date newDueDate = calendar.getTime();\n\n      // ANC Visit for Mother 1\n      registrarBean.recordMotherANCVisit(\n          staff,\n          facilityLocation,\n          date,\n          mother1,\n          serialNumber,\n          1,\n          1,\n          \"House\",\n          \"Community\",\n          newDueDate,\n          1,\n          1,\n          1.0,\n          1,\n          1,\n          false,\n          true,\n          1.0,\n          1,\n          0,\n          56464,\n          1.0,\n          false,\n          false,\n          false,\n          true,\n          false,\n          false,\n          HIVResult.NO_TEST,\n          false,\n          false,\n          false,\n          date,\n          \"Comments\");\n\n      assertEquals(\n          \"ANC visit not added for Mother 1\",\n          3,\n          Context.getEncounterService().getEncountersByPatient(mother1).size());\n      Date currentDueDate = registrarBean.getActivePregnancyDueDate(mother1.getPatientId());\n      assertEquals(\"EDD not updated in ANC visit\", newDueDate, currentDueDate);\n\n      calendar.add(Calendar.MONTH, 1);\n      newDueDate = calendar.getTime();\n\n      // ANC Registration for Mother 1\n      registrarBean.registerANCMother(\n          staff,\n          facilityLocation,\n          date,\n          mother1,\n          \"ANC2\",\n          newDueDate,\n          45.2,\n          1,\n          0,\n          false,\n          false,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null,\n          null);\n\n      assertEquals(\n          \"ANC registration not added for Mother 1\",\n          4,\n          Context.getEncounterService().getEncountersByPatient(mother1).size());\n      currentDueDate = registrarBean.getActivePregnancyDueDate(mother1.getPatientId());\n      assertEquals(\"EDD not updated in ANC registration\", newDueDate, currentDueDate);\n\n      // Pregnancy Delivery for Mother 1, Adding Child 2\n      List<BirthOutcomeChild> outcomes = new ArrayList<BirthOutcomeChild>();\n      outcomes.add(\n          new BirthOutcomeChild(\n              BirthOutcome.A,\n              RegistrationMode.USE_PREPRINTED_ID,\n              child2Id,\n              Gender.MALE,\n              \"Child2FirstName\",\n              2.5));\n      outcomes.add(\n          new BirthOutcomeChild(\n              BirthOutcome.FSB,\n              RegistrationMode.USE_PREPRINTED_ID,\n              child3Id,\n              Gender.MALE,\n              \"Child3FirstName\",\n              3.0));\n      List<Patient> childPatients =\n          registrarBean.recordPregnancyDelivery(\n              staff,\n              facility,\n              date,\n              mother1,\n              1,\n              1,\n              1,\n              1,\n              true,\n              new Integer[] {1, 2, 3},\n              1,\n              false,\n              \"Comments\",\n              outcomes);\n\n      assertEquals(\n          \"Pregnancy delivery not added for Mother 1\",\n          5,\n          Context.getEncounterService().getEncountersByPatient(mother1).size());\n      Obs mother1Pregnancy = registrarBean.getActivePregnancy(mother1.getPatientId());\n      assertNull(\"Pregnancy is still active after delivery\", mother1Pregnancy);\n      assertEquals(\"Child 2 not added\", 6, Context.getPatientService().getAllPatients().size());\n\n      // Confirm return value of pregnancy delivery includes alive child\n      assertEquals(1, childPatients.size());\n      Patient registeredChild = childPatients.get(0);\n      assertEquals(child2Id.toString(), registeredChild.getPatientIdentifier().getIdentifier());\n      assertEquals(\"Child2FirstName\", registeredChild.getGivenName());\n\n      Patient child2 = openmrsBean.getPatientByMotechId(child2Id.toString());\n      assertNotNull(\"Child 2 not registered\", child2);\n      assertEquals(\n          \"Birth or Registration visit not added for Child 2\",\n          2,\n          Context.getEncounterService().getEncountersByPatient(child2).size());\n      String[] child2Enrollments = registrarBean.getActiveMessageProgramEnrollmentNames(child2);\n      assertNotNull(\"Enrollments do not exist for Child 2\", child2Enrollments);\n      assertEquals(2, child2Enrollments.length);\n\n      // Query for Delivery\n      List<Encounter> recentDeliveryEnc = registrarBean.getRecentDeliveries(facility);\n      assertEquals(1, recentDeliveryEnc.size());\n      assertEquals(mother1, recentDeliveryEnc.get(0).getPatient());\n\n      // PNC Visit for Mother 2\n      registrarBean.recordMotherPNCVisit(\n          staff,\n          facilityLocation,\n          date,\n          mother2,\n          1,\n          1,\n          \"House\",\n          \"Community\",\n          false,\n          true,\n          true,\n          1,\n          1,\n          false,\n          false,\n          36.0,\n          100.0,\n          \"Comments\");\n\n      assertEquals(\n          \"PNC visit not added for Mother 2\",\n          3,\n          Context.getEncounterService().getEncountersByPatient(mother2).size());\n\n      // General Visit for Mother 2\n      registrarBean.recordOutpatientVisit(\n          staff,\n          facilityLocation,\n          date,\n          mother2,\n          \"Mother2GeneralId\",\n          true,\n          1,\n          2,\n          true,\n          true,\n          true,\n          false,\n          true,\n          false,\n          \"Comments\");\n\n      assertEquals(\n          \"General visit not added for Mother 2\",\n          4,\n          Context.getEncounterService().getEncountersByPatient(mother2).size());\n\n      // Pregnancy Termination for Mother 2 (with maternal death)\n      registrarBean.recordPregnancyTermination(\n          staff,\n          facilityLocation,\n          currentDueDate,\n          mother2,\n          1,\n          1,\n          new Integer[] {1, 2, 3},\n          true,\n          false,\n          false,\n          false,\n          \"Comments\");\n\n      assertEquals(\n          \"Pregnancy termination not added for Mother 2\",\n          5,\n          Context.getEncounterService().getEncountersByPatient(mother2).size());\n      Obs mother2Pregnancy = registrarBean.getActivePregnancy(mother2.getPatientId());\n      assertNull(\"Pregnancy is still active after termination\", mother2Pregnancy);\n      assertEquals(\"Mother 2 not voided\", 5, Context.getPatientService().getAllPatients().size());\n\n      // CWC Visit for Child 2\n      registrarBean.recordChildCWCVisit(\n          staff,\n          facilityLocation,\n          date,\n          child2,\n          serialNumber,\n          1,\n          \"House\",\n          \"Community\",\n          \"bcg yellowfever\",\n          1,\n          1,\n          1,\n          25.0,\n          5.0,\n          35.0,\n          true,\n          \"Comments\");\n\n      assertEquals(\n          \"CWC visit not added for Child 2\",\n          3,\n          Context.getEncounterService().getEncountersByPatient(child2).size());\n\n      // PNC Visit for Child 2\n      registrarBean.recordChildPNCVisit(\n          staff,\n          facilityLocation,\n          date,\n          child2,\n          1,\n          1,\n          \"House\",\n          \"Community\",\n          false,\n          true,\n          7.0,\n          36.0,\n          true,\n          true,\n          140,\n          true,\n          true,\n          \"Comments\");\n\n      assertEquals(\n          \"PNC visit not added for Child 2\",\n          4,\n          Context.getEncounterService().getEncountersByPatient(child2).size());\n\n      // General Visit for Child 1\n      registrarBean.recordOutpatientVisit(\n          staff,\n          facilityLocation,\n          date,\n          child1,\n          \"Child1GeneralId\",\n          true,\n          4,\n          5,\n          true,\n          true,\n          true,\n          false,\n          false,\n          false,\n          \"Comments\");\n\n      assertEquals(\n          \"General visit not added for Child 1\",\n          2,\n          Context.getEncounterService().getEncountersByPatient(child1).size());\n\n      calendar.set(2010, 0, 1, 0, 0, 0); // Jan 1, 2010\n      date = calendar.getTime();\n      calendar.set(1993, 0, 4, 0, 0, 0); // Jan 4, 1993\n      Date ttDate = calendar.getTime();\n      calendar.set(1994, 1, 2, 0, 0, 0); // Feb 2, 1994\n      Date iptDate = calendar.getTime();\n      calendar.set(2006, 11, 3, 0, 0, 0); // Dec 3, 2006\n      Date bcgDate = calendar.getTime();\n      calendar.set(2005, 2, 5, 0, 0, 0); // Mar 5, 2005\n      Date opvDate = calendar.getTime();\n      calendar.set(2004, 3, 7, 0, 0, 0); // Apr 7, 2004\n      Date pentaDate = calendar.getTime();\n      calendar.set(2000, 4, 10, 0, 0, 0); // May 10, 2000\n      Date measlesDate = calendar.getTime();\n      calendar.set(2001, 5, 15, 0, 0, 0); // Jun 15, 2001\n      Date yellowDate = calendar.getTime();\n      calendar.set(2002, 6, 16, 0, 0, 0); // Jul 16, 2002\n      Date iptiDate = calendar.getTime();\n      calendar.set(2003, 7, 17, 0, 0, 0); // Aug 17, 2003\n      Date vitDate = calendar.getTime();\n\n      registrarBean.recordPatientHistory(\n          staff,\n          facilityLocation,\n          date,\n          child1,\n          2,\n          iptDate,\n          3,\n          ttDate,\n          bcgDate,\n          6,\n          opvDate,\n          7,\n          pentaDate,\n          measlesDate,\n          yellowDate,\n          8,\n          iptiDate,\n          vitDate,\n          null);\n\n      assertEquals(\n          \"No patient history added for Child 1\",\n          3,\n          Context.getEncounterService().getEncountersByPatient(child1).size());\n\n      // Record Death of Child 1\n      registrarBean.recordDeath(staff, facilityLocation, date, child1);\n\n      assertEquals(\n          \"Deceased child 1 not voided\", 4, Context.getPatientService().getAllPatients().size());\n\n    } finally {\n      Context.closeSession();\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 913, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 937, "focalAPIEnd": 959, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int,int,int)", "Node.setProperty(String,calndr)"], "useStart": [965, 997], "useEnd": [991, 1032], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.12/kernel-impl/src/test/java/org/sakaiproject/jcr/test/PropertyTestData.java", "rawCode": "  /**\n   * Creates a test node at {@link #TEST_DATA_PATH} with a boolean, double, long, calendar and a\n   * path property.\n   */\n  public void testFillInTestData() throws RepositoryException, IOException {\n    if (superuser.getRootNode().hasNode(TEST_DATA_PATH)) {\n      // delete previous data\n      superuser.getRootNode().getNode(TEST_DATA_PATH).remove();\n      superuser.save();\n    }\n    // create nodes to testPath\n    StringTokenizer names = new StringTokenizer(TEST_DATA_PATH, \"/\");\n    Node dataRoot = superuser.getRootNode();\n    while (names.hasMoreTokens()) {\n      String name = names.nextToken();\n      if (!dataRoot.hasNode(name)) {\n        dataRoot = dataRoot.addNode(name, testNodeType);\n      } else {\n        dataRoot = dataRoot.getNode(name);\n      }\n    }\n\n    dataRoot.setProperty(\"boolean\", true);\n    dataRoot.setProperty(\"double\", Math.PI);\n    dataRoot.setProperty(\"long\", 90834953485278298l);\n    Calendar c = Calendar.getInstance();\n    c.set(2005, 6, 18, 17, 30);\n    dataRoot.setProperty(\"calendar\", c);\n    dataRoot.setProperty(\"path\", superuser.getValueFactory().createValue(\"/\", PropertyType.PATH));\n    dataRoot.setProperty(\"multi\", new String[] {\"one\", \"two\", \"three\"});\n    superuser.save();\n  }\n"}, {"dataset": "getInstance", "exampleID": 914, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 241, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()"], "useStart": [241], "useEnd": [273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cs301w01/Meat-Loaf/tree/master/Meat-Loaf/src/com/cs301w01/meatload/model/querygenerators/AlbumQueryGenerator.java", "rawCode": "  /**\n   * Updates the \"Date Modified\" field of the Album referenced by albumId to the current time.\n   *\n   * @param albumId AlbumID of album to be updated\n   */\n  public void setAlbumModified(long albumId) {\n    String date = dateToString(Calendar.getInstance().getTime());\n    String query =\n        \"UPDATE \"\n            + TABLE_NAME\n            + \" \"\n            + \"SET \"\n            + ALBUMS_COL_DATE\n            + \" = '\"\n            + date\n            + \"' \"\n            + \"WHERE \"\n            + COL_ID\n            + \" = '\"\n            + albumId\n            + \"'\";\n\n    db.performRawQuery(query);\n    Log.d(TABLE_NAME, \"Updated date modified of Album: \" + query);\n  }\n"}, {"dataset": "getInstance", "exampleID": 915, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 174, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()", "calndr.get(int)", "calndr.get(int)"], "useStart": [363, 569, 742], "useEnd": [376, 598, 766], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jimmccusker/caTissue/tree/master/software/caTissue/modules/core/src/main/java/edu/wustl/catissuecore/action/NewSpecimenAction.java", "rawCode": "  /**\n   * set collected events.\n   *\n   * @param specimenForm specimenForm\n   */\n  private void setCollectionEvents(NewSpecimenForm specimenForm) {\n    final Calendar cal = Calendar.getInstance();\n    if (specimenForm.getCollectionEventdateOfEvent() == null) {\n      specimenForm.setCollectionEventdateOfEvent(\n          Utility.parseDateToString(\n              cal.getTime(), CommonServiceLocator.getInstance().getDatePattern()));\n    }\n    if (specimenForm.getCollectionEventTimeInHours() == null) {\n      specimenForm.setCollectionEventTimeInHours(Integer.toString(cal.get(Calendar.HOUR_OF_DAY)));\n    }\n    if (specimenForm.getCollectionEventTimeInMinutes() == null) {\n      specimenForm.setCollectionEventTimeInMinutes(Integer.toString(cal.get(Calendar.MINUTE)));\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 916, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 1835, "focalAPIEnd": 1857, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)", "calndr.getTime()"], "useStart": [1865, 1951], "useEnd": [1918, 1969], "hasFinally": 1, "cleanUpCall": ["reset()", "ProcessEngine.close()", "ProcessEngine.close()"], "finallyExpressionStart": 2877, "finallyExpressionEnd": 2885, "finallyBlockStart": 2877, "finallyBlockEnd": 2964, "cleanUpCallStart": [2894, 2919, 2942], "cleanUpCallEnd": [2911, 2934, 2957], "url": "https://github.com/clintmanning/new-empty/tree/master/engine/src/test/java/org/camunda/bpm/engine/test/jobexecutor/tobemerged/TestSequentialJobAcquisition.java", "rawCode": "  @Test\n  public void testJobAddedGuardForTwoEnginesSameAcquisition() throws InterruptedException {\n    // configure and build a process engine\n    StandaloneProcessEngineConfiguration engineConfiguration1 =\n        new StandaloneInMemProcessEngineConfiguration();\n    engineConfiguration1.setProcessEngineName(getClass().getName() + \"-engine1\");\n    engineConfiguration1.setJdbcUrl(\"jdbc:h2:mem:activiti1\");\n    engineConfiguration1.setJobExecutorActivate(false);\n    engineConfiguration1.setJobExecutor(jobExecutor);\n    ProcessEngine engine1 = engineConfiguration1.buildProcessEngine();\n\n    // and a second one\n    StandaloneProcessEngineConfiguration engineConfiguration2 =\n        new StandaloneInMemProcessEngineConfiguration();\n    engineConfiguration2.setProcessEngineName(getClass().getName() + \"engine2\");\n    engineConfiguration2.setJdbcUrl(\"jdbc:h2:mem:activiti2\");\n    engineConfiguration2.setJobExecutorActivate(false);\n    engineConfiguration1.setJobExecutor(jobExecutor);\n    ProcessEngine engine2 = engineConfiguration2.buildProcessEngine();\n\n    jobExecutor.registerProcessEngine((ProcessEngineImpl) engine1);\n    jobExecutor.registerProcessEngine((ProcessEngineImpl) engine2);\n\n    // stop the acquisition\n    jobExecutor.shutdown();\n\n    // deploy the processes\n\n    engine1\n        .getRepositoryService()\n        .createDeployment()\n        .addClasspathResource(PROCESS_RESOURCE)\n        .deploy();\n\n    engine2\n        .getRepositoryService()\n        .createDeployment()\n        .addClasspathResource(PROCESS_RESOURCE)\n        .deploy();\n\n    try {\n      // start one instance for each engine:\n\n      engine1.getRuntimeService().startProcessInstanceByKey(\"intermediateTimerEventExample\");\n      engine2.getRuntimeService().startProcessInstanceByKey(\"intermediateTimerEventExample\");\n\n      Calendar calendar = Calendar.getInstance();\n      calendar.add(Field.DAY_OF_YEAR.getCalendarField(), 6);\n      ClockUtil.setCurrentTime(calendar.getTime());\n\n      Assert.assertEquals(1, engine1.getManagementService().createJobQuery().count());\n      Assert.assertEquals(1, engine2.getManagementService().createJobQuery().count());\n\n      // assert task completed for the first engine\n      jobExecutor.start();\n      waitForJobExecutorToProcessAllJobs(\n          10000, 100, jobExecutor, engine1.getManagementService(), false);\n\n      // assert task completed for the second engine\n      jobExecutor.start();\n      waitForJobExecutorToProcessAllJobs(\n          10000, 100, jobExecutor, engine2.getManagementService(), false);\n\n      Thread.sleep(2000);\n\n      Assert.assertFalse(\n          ((SequentialJobAcquisitionRunnable) jobExecutor.getAcquireJobsRunnable()).isJobAdded());\n\n      Assert.assertEquals(0, engine1.getManagementService().createJobQuery().count());\n      Assert.assertEquals(0, engine2.getManagementService().createJobQuery().count());\n\n    } finally {\n\n      ClockUtil.reset();\n      engine1.close();\n      engine2.close();\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 917, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "HttpException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 226, "tryExpressionEnd": 230, "tryBlockStart": 226, "tryBlockEnd": 2100, "catchExpressionStart": 1913, "catchExpressionEnd": 1937, "catchBlockStart": 1913, "catchBlockEnd": 1981, "exceptionHandlingCallStart": [1951], "exceptionHandlingCallEnd": [1974], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 1356, "focalAPIEnd": 1378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)"], "useStart": [1390], "useEnd": [1442], "hasFinally": 1, "cleanUpCall": ["HttpMethod.releaseConnection()"], "finallyExpressionStart": 2049, "finallyExpressionEnd": 2057, "finallyBlockStart": 2049, "finallyBlockEnd": 2100, "cleanUpCallStart": [2065], "cleanUpCallEnd": [2093], "url": "https://github.com/cnyangyifeng/otp/tree/master/src/main/java/cn/xdf/me/otp/sso/e2/impl/E2LoginServiceImp.java", "rawCode": "  @Override\n  public boolean login(String _username, String _password) throws Exception {\n    HttpClient client = new HttpClient();\n\n    HttpMethod httpPost = getPostMethod(_username, _password);\n    String result = null;\n    try {\n      client.getParams().setParameter(\"http.protocol.content-charset\", \"UTF-8\");\n      int status = client.executeMethod(httpPost);\n      if (status == 200) {\n        log.info(\"***print server status==\" + httpPost.getStatusLine());\n        result = httpPost.getResponseBodyAsString();\n        log.info(\"***print result info==\" + result);\n      } else {\n        log.info(\"页面请求返回值异常：\" + status);\n      }\n\n      if (StringUtils.isBlank(result)) log.info(\"no result....\");\n      String[] resultList = result.split(\"$\");\n      String resultCode = resultList[0];\n      String resultMsg = resultList.length > 1 ? resultList[1] : resultCode;\n      // 中心返回的E2Token顶级cookie值\n      String e2TokenCookieValue = resultList.length > 2 ? resultList[2] : null;\n      log.info(\"resultCode==\" + resultCode);\n      log.info(\"resultMsg===\" + resultMsg);\n      System.out.println(\"resultMsg===\" + resultMsg);\n      if (resultCode.startsWith(\"1\")) {\n        // 第1步：设置中心返回的顶级cookie值，默认有效期24小时\n        System.out.println(\"e2TokenCookieValue===\" + e2TokenCookieValue);\n        if (!StringUtils.isBlank(e2TokenCookieValue)) {\n          Calendar c1 = Calendar.getInstance();\n          c1.add(Calendar.SECOND, ssoToE2Constant.getMaxAge());\n          org.apache.commons.httpclient.Cookie cookie =\n              new org.apache.commons.httpclient.Cookie(\n                  ssoToE2Constant.getE2TopDomain(),\n                  ssoToE2Constant.getCookieName(),\n                  e2TokenCookieValue,\n                  \"/\",\n                  c1.getTime(),\n                  true);\n          client.getState().addCookie(cookie);\n        }\n        return true;\n      } else {\n        log.info(resultMsg);\n      }\n    } catch (HttpException e) {\n      throw new RuntimeException(e);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    } finally {\n      httpPost.releaseConnection();\n    }\n    return false;\n  }\n"}, {"dataset": "getInstance", "exampleID": 918, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 314, "focalAPIEnd": 336, "followUpCheck": "calndr.get(calendar.MONTH) == month && calndr.get(calendar.DAY_OF_MONTH) <= calndr.getActualMaximum(calendar.DAY_OF_MONTH)", "checkType": "LOOP {", "followUpCheckExpressionStart": 374, "followUpCheckExpressionEnd": 512, "followUpCheckBlockStart": 374, "followUpCheckBlockEnd": 717, "use": ["calndr.set(int,int,int)", "calndr.getTime()", "calndr.getTime()", "calndr.add(int,int)"], "useStart": [342, 540, 641, 674], "useEnd": [368, 556, 657, 710], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/psc/tree/master/core/src/main/java/edu/northwestern/bioinformatics/studycalendar/service/SubjectService.java", "rawCode": "  /**\n   * Finds all the dates which represent the particular day of the week (Monday, Tuesday, etc.) in\n   * the specified month.\n   */\n  // package level for testing\n  List<Date> findDaysOfWeekInMonth(int year, int month, int dayOfTheWeek) {\n    List<Date> matches = new ArrayList<Date>();\n    Calendar search = Calendar.getInstance();\n    search.set(year, month, 1);\n    while (search.get(Calendar.MONTH) == month\n        && search.get(Calendar.DAY_OF_MONTH) <= search.getActualMaximum(Calendar.DAY_OF_MONTH)) {\n      System.out.println(search.getTime());\n      if (search.get(Calendar.DAY_OF_WEEK) == dayOfTheWeek) {\n        matches.add(search.getTime());\n      }\n      search.add(Calendar.DAY_OF_MONTH, 1);\n    }\n    return matches;\n  }\n"}, {"dataset": "getInstance", "exampleID": 919, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 453, "focalAPIEnd": 475, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map<String, Object>.put(String,calndr)", "processVariableValueEquals(String,calndr)", "calendar.getInstance()", "processVariableValueEquals(String,calndr)"], "useStart": [491, 2082, 2671, 4187], "useEnd": [521, 2200, 2693, 4305], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/camunda/camunda-bpm-platform/tree/master/engine/src/test/java/org/camunda/bpm/engine/test/standalone/history/FullHistoryTest.java", "rawCode": "  @Test\n  @Deployment\n  public void testHistoricTaskInstanceQueryProcessVariableValueEquals() throws Exception {\n    // Set some variables on the process instance\n    Map<String, Object> variables = new HashMap<String, Object>();\n    variables.put(\"longVar\", 12345L);\n    variables.put(\"shortVar\", (short) 123);\n    variables.put(\"integerVar\", 1234);\n    variables.put(\"stringVar\", \"stringValue\");\n    variables.put(\"booleanVar\", true);\n    Date date = Calendar.getInstance().getTime();\n    variables.put(\"dateVar\", date);\n    variables.put(\"nullVar\", null);\n\n    ProcessInstance processInstance =\n        runtimeService.startProcessInstanceByKey(\"HistoricTaskInstanceTest\", variables);\n    Task task =\n        taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n\n    // Validate all variable-updates are present in DB\n    assertEquals(\n        7,\n        historyService\n            .createHistoricDetailQuery()\n            .variableUpdates()\n            .processInstanceId(processInstance.getId())\n            .count());\n\n    // Query Historic task instances based on process variable\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"longVar\", 12345L)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"shortVar\", (short) 123)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"integerVar\", 1234)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"stringVar\", \"stringValue\")\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"booleanVar\", true)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"dateVar\", date)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"nullVar\", null)\n            .count());\n\n    // Update the variables\n    variables.put(\"longVar\", 67890L);\n    variables.put(\"shortVar\", (short) 456);\n    variables.put(\"integerVar\", 5678);\n    variables.put(\"stringVar\", \"updatedStringValue\");\n    variables.put(\"booleanVar\", false);\n    Calendar otherCal = Calendar.getInstance();\n    otherCal.add(Calendar.DAY_OF_MONTH, 1);\n    Date otherDate = otherCal.getTime();\n    variables.put(\"dateVar\", otherDate);\n    variables.put(\"nullVar\", null);\n\n    runtimeService.setVariables(processInstance.getId(), variables);\n\n    // Validate all variable-updates are present in DB\n    assertEquals(\n        14,\n        historyService\n            .createHistoricDetailQuery()\n            .variableUpdates()\n            .processInstanceId(processInstance.getId())\n            .count());\n\n    // Previous values should NOT match\n    assertEquals(\n        0,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"longVar\", 12345L)\n            .count());\n    assertEquals(\n        0,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"shortVar\", (short) 123)\n            .count());\n    assertEquals(\n        0,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"integerVar\", 1234)\n            .count());\n    assertEquals(\n        0,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"stringVar\", \"stringValue\")\n            .count());\n    assertEquals(\n        0,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"booleanVar\", true)\n            .count());\n    assertEquals(\n        0,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"dateVar\", date)\n            .count());\n\n    // New values should match\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"longVar\", 67890L)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"shortVar\", (short) 456)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"integerVar\", 5678)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"stringVar\", \"updatedStringValue\")\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"booleanVar\", false)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"dateVar\", otherDate)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"nullVar\", null)\n            .count());\n\n    // Set a task-variables, shouldn't affect the process-variable matches\n    taskService.setVariableLocal(task.getId(), \"longVar\", 9999L);\n    assertEquals(\n        0,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"longVar\", 9999L)\n            .count());\n    assertEquals(\n        1,\n        historyService\n            .createHistoricTaskInstanceQuery()\n            .processVariableValueEquals(\"longVar\", 67890L)\n            .count());\n  }\n"}, {"dataset": "getInstance", "exampleID": 920, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 70, "focalAPIEnd": 92, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.add(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.getTime()"], "useStart": [98, 122, 163, 199, 230, 261, 304], "useEnd": [116, 157, 193, 224, 255, 291, 315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/araqne/logdb/tree/master/araqne-logstorage/src/main/java/org/araqne/logstorage/engine/LogStorageEngine.java", "rawCode": "  private Date getBaseline(Date lastDay, int days) {\n    Calendar c = Calendar.getInstance();\n    c.setTime(lastDay);\n    c.add(Calendar.DAY_OF_MONTH, -days);\n    c.set(Calendar.HOUR_OF_DAY, 0);\n    c.set(Calendar.MINUTE, 0);\n    c.set(Calendar.SECOND, 0);\n    c.set(Calendar.MILLISECOND, 0);\n    return c.getTime();\n  }\n"}, {"dataset": "getInstance", "exampleID": 921, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 358, "focalAPIEnd": 380, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 872, "finallyExpressionEnd": 880, "finallyBlockStart": 872, "finallyBlockEnd": 918, "cleanUpCallStart": [955], "cleanUpCallEnd": [966], "url": "https://github.com/maiklos/squirrel-sql/tree/master/sql12/app/src/main/java/net/sourceforge/squirrel_sql/client/mainframe/action/DumpApplicationCommand.java", "rawCode": "  private void combineTempFiles(List<String> titles, List<File> files) {\n    try {\n      PrintWriter wtr = new PrintWriter(new FileWriter(_outFile));\n      try {\n        // i18n[DumpApplicationCommand.header=SQuirreL SQL Client Application Dump {0}]\n        String header =\n            s_stringMgr.getString(\n                \"DumpApplicationCommand.header\", Calendar.getInstance().getTime());\n        wtr.println(header);\n        for (int i = 0, limit = files.size(); i < limit; ++i) {\n          wtr.println();\n          wtr.println();\n          wtr.println(SEP);\n          wtr.println(titles.get(i));\n          wtr.println(SEP);\n          BufferedReader rdr = new BufferedReader(new FileReader(files.get(i)));\n          try {\n            String line = null;\n            while ((line = rdr.readLine()) != null) {\n              wtr.println(line);\n            }\n          } finally {\n            rdr.close();\n          }\n        }\n      } finally {\n        wtr.close();\n      }\n    } catch (IOException ex) {\n      // i18n[DumpApplicationCommand.error.combiningtempfiles=Error combining temp files into dump\n      // file]\n      final String msg = s_stringMgr.getString(\"DumpApplicationCommand.error.combiningtempfiles\");\n      _msgHandler.showMessage(msg);\n      _msgHandler.showMessage(ex.toString());\n      s_log.error(msg, ex);\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 922, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 116, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTimeInMillis()"], "useStart": [475], "useEnd": [503], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/ybo-tv-android/tree/master/src/main/java/fr/ybo/ybotv/android/YboTvApplication.java", "rawCode": "  public void setRecurringAlarm() {\n    Log.d(YboTvApplication.TAG, \"setRecurringAlarm\");\n    Calendar updateTime = Calendar.getInstance();\n    Intent alarm = new Intent(this, AlarmReceiver.class);\n    PendingIntent recurringAlarm =\n        PendingIntent.getBroadcast(this, 0, alarm, PendingIntent.FLAG_CANCEL_CURRENT);\n    AlarmManager alarms = (AlarmManager) getSystemService(Context.ALARM_SERVICE);\n    alarms.setInexactRepeating(\n        AlarmManager.RTC_WAKEUP,\n        updateTime.getTimeInMillis(),\n        AlarmManager.INTERVAL_HOUR * 3,\n        recurringAlarm);\n  }\n"}, {"dataset": "getInstance", "exampleID": 923, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 185, "focalAPIEnd": 207, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.get(int)", "calndr.get(int)", "calndr.get(int)"], "useStart": [232, 280, 331], "useEnd": [254, 303, 353], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sonyfe25cp/EventsMachine/tree/master/gossip/src/main/java/gossip/urlTemp/ChinaNews.java", "rawCode": "  /** 基本url */\n  public List<String> baseUrl() {\n    List<String> urls = new ArrayList<String>();\n    // http://www.chinanews.com/scroll-news/gn/2012/0710/news.shtml\n    Calendar cal = Calendar.getInstance();\n    int current_year = cal.get(Calendar.YEAR);\n    int current_month = cal.get(Calendar.MONTH) + 1;\n    int current_day = cal.get(Calendar.DATE);\n\n    for (int year = current_year; year >= 2010; year--) {\n      boolean year_flag = current_year == year;\n      for (int month = 12; month >= 1; month--) {\n        if (year_flag) {\n          if (month > current_month) {\n            continue;\n          }\n        }\n        boolean month_flag = current_month == month;\n        for (int day = 31; day >= 1; day--) {\n          if (year_flag && month_flag) {\n            if (day > current_day) continue;\n          }\n          String url =\n              \"http://www.chinanews.com/scroll-news/gn/\"\n                  + year\n                  + \"/\"\n                  + (month < 10 ? (\"0\" + month) : month)\n                  + \"/\"\n                  + (day < 10 ? (\"0\" + day) : day)\n                  + \"/news.shtml\";\n          urls.add(url);\n        }\n      }\n    }\n    return urls;\n  }\n"}, {"dataset": "getInstance", "exampleID": 924, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 118, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.getTime()"], "useStart": [152, 199, 237, 303], "useEnd": [187, 225, 267, 314], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/galievruslan/mss-android/tree/master/mss/src/com/mss/application/OrderEditActivity.java", "rawCode": "        @Override\n        public void onTimeSet(TimePicker view, int hour, int minute) {\n          final Calendar c = Calendar.getInstance();\n          c.setTime(mOrder.getShippingDate());\n          c.set(Calendar.HOUR, hour);\n          c.set(Calendar.MINUTE, minute);\n\n          mOrder.setShippingDate(c.getTime());\n          mOrderShippingTime.setText(\n              DateFormat.getTimeFormat(getApplicationContext()).format(mOrder.getShippingDate()));\n          OrderEditContext.setIsModifyed(true);\n        }\n"}, {"dataset": "getInstance", "exampleID": 925, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new GlobalizationError(*)"], "tryExpressionStart": 351, "tryExpressionEnd": 355, "tryBlockStart": 351, "tryBlockEnd": 2748, "catchExpressionStart": 2650, "catchExpressionEnd": 2671, "catchBlockStart": 2650, "catchBlockEnd": 2748, "exceptionHandlingCallStart": [2685], "exceptionHandlingCallEnd": [2741], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 1312, "focalAPIEnd": 1334, "followUpCheck": "calndr.keySet()", "checkType": "LOOP {", "followUpCheckExpressionStart": 2045, "followUpCheckExpressionEnd": 2082, "followUpCheckBlockStart": 2045, "followUpCheckBlockEnd": 2121, "use": ["calendar.getInstance()", "calendar.getInstance()", "calendar.getInstance()"], "useStart": [1503, 1701, 1891], "useEnd": [1525, 1723, 1913], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MoSync/MoSync/tree/master/runtimes/java/platforms/androidJNI/AndroidProject/src/org/apache/cordova/Globalization.java", "rawCode": "  @TargetApi(9)\n  private JSONObject getDateNames(JSONArray options) throws GlobalizationError {\n    JSONObject obj = new JSONObject();\n    // String[] value;\n    JSONArray value = new JSONArray();\n    List<String> namesList = new ArrayList<String>();\n    final Map<String, Integer> namesMap; // final needed for sorting with anonymous comparator\n    try {\n      int type = 0; // default wide\n      int item = 0; // default months\n\n      // get options if available\n      if (options.getJSONObject(0).length() > 0) {\n        // get type if available\n        if (!((JSONObject) options.getJSONObject(0).get(OPTIONS)).isNull(TYPE)) {\n          String t = (String) ((JSONObject) options.getJSONObject(0).get(OPTIONS)).get(TYPE);\n          if (t.equalsIgnoreCase(NARROW)) {\n            type++;\n          } // DateUtils.LENGTH_MEDIUM\n        }\n        // get item if available\n        if (!((JSONObject) options.getJSONObject(0).get(OPTIONS)).isNull(ITEM)) {\n          String t = (String) ((JSONObject) options.getJSONObject(0).get(OPTIONS)).get(ITEM);\n          if (t.equalsIgnoreCase(DAYS)) {\n            item += 10;\n          } // Days of week start at 1\n        }\n      }\n      // determine return value\n      int method = item + type;\n      if (method == 1) { // months and narrow\n        namesMap =\n            Calendar.getInstance()\n                .getDisplayNames(Calendar.MONTH, Calendar.SHORT, Locale.getDefault());\n      } else if (method == 10) { // days and wide\n        namesMap =\n            Calendar.getInstance()\n                .getDisplayNames(Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.getDefault());\n      } else if (method == 11) { // days and narrow\n        namesMap =\n            Calendar.getInstance()\n                .getDisplayNames(Calendar.DAY_OF_WEEK, Calendar.SHORT, Locale.getDefault());\n      } else { // default: months and wide\n        namesMap =\n            Calendar.getInstance()\n                .getDisplayNames(Calendar.MONTH, Calendar.LONG, Locale.getDefault());\n      }\n\n      // save names as a list\n      for (String name : namesMap.keySet()) {\n        namesList.add(name);\n      }\n\n      // sort the list according to values in namesMap\n      Collections.sort(\n          namesList,\n          new Comparator<String>() {\n            public int compare(String arg0, String arg1) {\n              return namesMap.get(arg0).compareTo(namesMap.get(arg1));\n            }\n          });\n\n      // convert nameList into JSONArray of String objects\n      for (int i = 0; i < namesList.size(); i++) {\n        value.put(namesList.get(i));\n      }\n\n      // return array of names\n      return obj.put(\"value\", value);\n    } catch (Exception ge) {\n      throw new GlobalizationError(GlobalizationError.UNKNOWN_ERROR);\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 926, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 161, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTimeZone()", "calndr.get(int)", "calndr.getTime()"], "useStart": [212, 251, 409], "useEnd": [229, 273, 422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_settings/tree/master/src/com/android/settings/DateTimeSettings.java", "rawCode": "  public void updateTimeAndDateDisplay(Context context) {\n    java.text.DateFormat shortDateFormat = DateFormat.getDateFormat(context);\n    final Calendar now = Calendar.getInstance();\n    mDummyDate.setTimeZone(now.getTimeZone());\n    mDummyDate.set(now.get(Calendar.YEAR), 11, 31, 13, 0, 0);\n    Date dummyDate = mDummyDate.getTime();\n    mTimePref.setSummary(DateFormat.getTimeFormat(getActivity()).format(now.getTime()));\n    mTimeZone.setSummary(getTimeZoneText(now.getTimeZone()));\n    mDatePref.setSummary(shortDateFormat.format(now.getTime()));\n    mDateFormat.setSummary(shortDateFormat.format(dummyDate));\n  }\n"}, {"dataset": "getInstance", "exampleID": 927, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 205, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setLastUpdate(calndr)", "HistoriaClinica.setLastUpdate(calndr)", "FichaOdontologica.setLastUpdate(calndr)"], "useStart": [243, 281, 321], "useEnd": [275, 315, 357], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cesar06ar/SgsSalud/tree/master/src/main/java/edu/sgssalud/controller/medicina/FichaMedicaHome.java", "rawCode": "  @TransactionAttribute\n  public String guardar() {\n    // log.info(\"Ingreso a guardar\");\n    System.out.println(\"Ingreso a guardar_____\" + getInstance().getId());\n    String salida = null;\n    Date now = Calendar.getInstance().getTime();\n    getInstance().setLastUpdate(now);\n    historiaClinica.setLastUpdate(now);\n    fichaOdontologica.setLastUpdate(now);\n    try {\n      System.out.println(\"Ingreso a guardar 2_______\");\n      if (paciente.isPersistent()) {\n        if (getInstance().isPersistent()) {\n          getInstance()\n              .setResponsable(profileS.getProfileByIdentityKey(identity.getUser().getKey()));\n          System.out.println(\"Ingreso a guardar 2_______\");\n          save(getInstance());\n          FacesMessage msg =\n              new FacesMessage(\n                  \"Se actualizo Ficha Medica: \" + getInstance().getNumeroFicha() + \" con éxito\");\n          FacesContext.getCurrentInstance().addMessage(\"\", msg);\n        } else {\n          this.getInstance().setPaciente(paciente);\n          System.out.println(\"Ingreso a guardar 2_______\");\n          create(getInstance());\n          historiaClinica.setFichaMedica(getInstance());\n          fichaOdontologica.setFichaMedica(getInstance());\n          save(getInstance());\n          save(historiaClinica);\n          save(fichaOdontologica);\n          FacesMessage msg =\n              new FacesMessage(\n                  \"Se creo nueva Ficha Medica: \" + getInstance().getNumeroFicha() + \" con éxito\");\n          FacesContext.getCurrentInstance().addMessage(\"\", msg);\n        }\n        salida =\n            \"/pages/depSalud/fichaMedica.xhtml?faces-redirect=true&fichaMedicaId=\"\n                + getInstance().getId();\n      } else {\n        FacesMessage msg = new FacesMessage(\"Primero debe cargar un paciente\");\n        FacesContext.getCurrentInstance().addMessage(\"\", msg);\n      }\n\n    } catch (Exception e) {\n      FacesMessage msg = new FacesMessage(\"Error al guardar: \" + getInstance().getNumeroFicha());\n      FacesContext.getCurrentInstance().addMessage(\" \", msg);\n    }\n\n    return salida;\n  }\n"}, {"dataset": "getInstance", "exampleID": 928, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 580, "focalAPIEnd": 602, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setProperty(String,calndr)"], "useStart": [542], "useEnd": [603], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.10/kernel-impl/src/test/java/org/sakaiproject/jcr/test/ExportDocViewTestData.java", "rawCode": "  private void invalidBin(Node dataRoot) throws RepositoryException, IOException {\n    Node resource = dataRoot.addNode(\"invalidBin\", ntUnstructured);\n    resource.setProperty(jcrEncoding, ENCODING);\n    resource.setProperty(jcrMimeType, \"text/plain\");\n    ByteArrayOutputStream data = new ByteArrayOutputStream();\n    OutputStreamWriter writer = new OutputStreamWriter(data, ENCODING);\n    writer.write(\"Hello w\\u00F6rld.\");\n    writer.close();\n    resource.setProperty(invalidXmlPropName, new ByteArrayInputStream(data.toByteArray()));\n    resource.setProperty(jcrLastModified, Calendar.getInstance());\n  }\n"}, {"dataset": "getInstance", "exampleID": 929, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 898, "focalAPIEnd": 920, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getDate(calndr)"], "useStart": [876], "useEnd": [921], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/abreslav/jet-contrib/tree/master/WebView/WebViewServer/src/org/jetbrains/demo/ukhorskaya/handlers/ServerHandler.java", "rawCode": "  private void sendListLogs(\n      final HttpServletRequest request,\n      final HttpServletResponse response,\n      boolean updateStatistics) {\n    String responseStr = null;\n    InputStream is = null;\n    try {\n      is = ServerHandler.class.getResourceAsStream(\"/logs.html\");\n      responseStr = ResponseUtils.readData(is, true);\n\n    } catch (IOException e) {\n      ErrorWriter.ERROR_WRITER.writeExceptionToExceptionAnalyzer(\n          e,\n          SessionInfo.TypeOfRequest.GET_LOGS_LIST.name(),\n          \"Exception until downloading logs.html\");\n      writeResponse(response, \"Cannot open this page\", HttpStatus.SC_BAD_GATEWAY);\n      return;\n    } finally {\n      close(is);\n    }\n\n    String links = new LogDownloader().getFilesLinks();\n    responseStr = responseStr.replace(\"$LINKSTOLOGFILES$\", links);\n    responseStr =\n        responseStr.replace(\"$CURRENTDATE$\", ResponseUtils.getDate(Calendar.getInstance()));\n\n    if (updateStatistics) {\n      Statistics.getInstance().updateStatistics(true);\n    }\n    responseStr = Statistics.getInstance().writeStatistics(responseStr);\n    writeResponse(response, responseStr, 200);\n  }\n"}, {"dataset": "getInstance", "exampleID": 930, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 191, "focalAPIEnd": 213, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["X509CertSelector.setCertificateValid(calndr)", "calndr.equals(Calendar)"], "useStart": [811, 930], "useEnd": [846, 974], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codefireX/platform_libcore/tree/master/luni/src/test/java/tests/security/cert/X509CertSelectorTest.java", "rawCode": "  /** java.security.cert.X509CertSelector#getCertificateValid() */\n  public void test_getCertificateValid() {\n    Date date1 = new Date(100);\n    Date date2 = new Date(200);\n    Date date3 = Calendar.getInstance().getTime();\n    X509CertSelector selector = new X509CertSelector();\n\n    assertNull(\"Selector should return null\", selector.getCertificateValid());\n    selector.setCertificateValid(date1);\n    assertTrue(\n        \"The returned date should be equal to specified\",\n        date1.equals(selector.getCertificateValid()));\n    selector.getCertificateValid().setTime(200);\n    assertTrue(\n        \"The returned date should be equal to specified\",\n        date1.equals(selector.getCertificateValid()));\n    assertFalse(\"The returned date should differ\", date2.equals(selector.getCertificateValid()));\n    selector.setCertificateValid(date3);\n    assertTrue(\n        \"The returned date should be equal to specified\",\n        date3.equals(selector.getCertificateValid()));\n    selector.setCertificateValid(null);\n    assertNull(selector.getCertificateValid());\n  }\n"}, {"dataset": "getInstance", "exampleID": 931, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 91, "focalAPIEnd": 113, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int)", "calndr.getTimeInMillis()", "calndr.setTimeInMillis(long)", "calndr.add(int,int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)"], "useStart": [119, 173, 233, 268, 336, 360, 385], "useEnd": [157, 194, 260, 302, 358, 383, 415], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/t2health/T2-Mood-Tracker-Android/tree/master/MoodTracker/src/com/t2/vas/activity/ExportActivity.java", "rawCode": "  private void onToDateSet(int year, int monthOfYear, int dayOfMonth) {\n    Calendar cal = Calendar.getInstance();\n    cal.set(year, monthOfYear, dayOfMonth);\n    setToTime(cal.getTimeInMillis());\n\n    if (fromTime > toTime) {\n      cal.setTimeInMillis(toTime);\n      cal.add(Calendar.DAY_OF_MONTH, -1);\n\n      onFromDateSet(\n          cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DAY_OF_MONTH));\n    }\n\n    setFinishButtonEnabled();\n  }\n"}, {"dataset": "getInstance", "exampleID": 932, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 2199, "focalAPIEnd": 2221, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.get(int)"], "useStart": [2235], "useEnd": [2255], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phini/Android-cybercom/tree/master/Formularz/src/com/example/formularz/FormDetailsActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    this.requestWindowFeature(Window.FEATURE_NO_TITLE);\n    this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n\n    setContentView(R.layout.activity_form_details);\n\n    MenuItem mi = (MenuItem) findViewById(R.id.menu_save);\n    mi.setEnabled(false);\n\n    EditText etSurname = (EditText) findViewById(R.id.etSurname);\n    registerForContextMenu(etSurname);\n\n    ArrayAdapter<String> adapterColours =\n        new ArrayAdapter<String>(\n            this, android.R.layout.simple_dropdown_item_1line, ContentHelper.COLOURS);\n\n    ArrayAdapter<CharSequence> adapterLangs =\n        ArrayAdapter.createFromResource(\n            this, R.array.langs_array, android.R.layout.simple_dropdown_item_1line);\n\n    ArrayAdapter<CharSequence> adapterGenders =\n        new ArrayAdapter<CharSequence>(\n            this, android.R.layout.simple_dropdown_item_1line, ContentHelper.GENDERS);\n\n    Spinner spinner = (Spinner) findViewById(R.id.sGender);\n\n    spinner.setAdapter(adapterGenders);\n\n    MultiAutoCompleteTextView mactvLangs = (MultiAutoCompleteTextView) findViewById(R.id.mactvLang);\n\n    mactvLangs.setAdapter(adapterLangs);\n    mactvLangs.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());\n\n    MultiAutoCompleteTextView mactvColours =\n        (MultiAutoCompleteTextView) findViewById(R.id.mactvColour);\n\n    mactvColours.setAdapter(adapterColours);\n\n    mactvColours.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());\n\n    EditText etTemp = (EditText) findViewById(R.id.etBlog);\n    etTemp.setLinksClickable(true);\n    etTemp.setAutoLinkMask(Linkify.ALL);\n\n    etTemp = (EditText) findViewById(R.id.etPhone);\n    etTemp.setLinksClickable(true);\n    etTemp.setAutoLinkMask(Linkify.ALL);\n\n    Button b = (Button) findViewById(R.id.bShowDatePickerDialog);\n    b.setOnClickListener(\n        new View.OnClickListener() {\n\n          public void onClick(View v) {\n            showDatePicker();\n          }\n        });\n\n    setViewsVisible(false);\n\n    getData();\n\n    SeekBar seekBar = (SeekBar) findViewById(R.id.seekBar1);\n    Calendar c = Calendar.getInstance();\n    int y = c.get(Calendar.YEAR);\n    seekBar.setMax(y - 2004);\n    seekBar.setOnSeekBarChangeListener(\n        new SeekBar.OnSeekBarChangeListener() {\n\n          public void onStopTrackingTouch(SeekBar seekBar) {}\n\n          public void onStartTrackingTouch(SeekBar seekBar) {}\n\n          public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n\n            TextView tv = (TextView) findViewById(R.id.tvOnFbValue);\n            tv.setText(progress + \"lat\");\n          }\n        });\n  }\n"}, {"dataset": "getInstance", "exampleID": 933, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 179, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.get(int)", "calndr.add(int,int)", "calndr.getTime()"], "useStart": [209, 317, 360, 417], "useEnd": [234, 350, 396, 434], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dideher/minoas/tree/master/gr.sch.ira.minoas/src/main/java/gr/sch/ira/minoas/core/CoreUtils.java", "rawCode": "  public static int getDatesDifferenceWithoutWeekend(Date fromDate, Date toDate) {\n    if (fromDate != null && toDate != null) {\n      int countDays = 0;\n      Calendar fromCal = Calendar.getInstance();\n      fromCal.setTime(fromDate);\n      while (!(DateUtils.isSameDay(fromDate, toDate))) {\n        int dayOfWeek = fromCal.get(Calendar.DAY_OF_WEEK);\n        fromCal.add(Calendar.DAY_OF_YEAR, 1);\n        fromDate = fromCal.getTime();\n        if (dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY)\n          continue; // don't count sundays and saturdays\n        else countDays++;\n      }\n      return (countDays + 1);\n    } else return 0;\n  }\n"}, {"dataset": "getInstance", "exampleID": 934, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 126, "focalAPIEnd": 148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int)", "calndr.set(*,Calendar)", "calendar.getInstance()", "calendar.getInstance()", "calendar.getInstance()", "calendar.getInstance()"], "useStart": [156, 207, 465, 1282, 1372, 3539], "useEnd": [199, 243, 487, 1304, 1394, 3561], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joharei/Fellesprosjekt/tree/master/src/gui/GUICalender.java", "rawCode": "  public void buildView() {\n    weekDates = new Calendar[7];\n    int p = 0;\n    for (int day : days) {\n      Calendar today = Calendar.getInstance();\n      today.set(Calendar.WEEK_OF_YEAR, this.week);\n      today.set(Calendar.DAY_OF_WEEK, day);\n      weekDates[p] = today;\n      p++;\n    }\n    appList = new Appointment[rader][kolonner];\n    occupied = new int[rader][kolonner];\n    for (Appointment app : XCal.getCSU().getAllAppointments()) {\n      Calendar day = Calendar.getInstance();\n      day.setTime(app.getDate());\n      boolean showMeeting = false;\n      if (app instanceof Meeting) {\n        for (User user : ((Meeting) app).getParticipants()) {\n          if (user.getUsername().equals(XCal.usernameField.getText())) {\n            showMeeting = true;\n            break;\n          }\n        }\n        if (!showMeeting\n            && ((Meeting) app).getOwner().getUsername().equals(XCal.usernameField.getText())) {\n          showMeeting = true;\n        }\n      }\n      if ((!(app instanceof Meeting)\n              && day.get(Calendar.WEEK_OF_YEAR) == this.week\n              && !app.isDeleted())\n          || ((app instanceof Meeting && showMeeting)\n              && day.get(Calendar.WEEK_OF_YEAR) == this.week\n              && !app.isDeleted())) {\n        Calendar start = Calendar.getInstance();\n        start.setTime(app.getStartTime());\n        Calendar end = Calendar.getInstance();\n        end.setTime(app.getEndTime());\n        for (int i = 0; i < end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY); i++) {\n          // (7 + day.get(Calendar.DAY_OF_WEEK) - Calendar.MONDAY) % 7 <--- finner ukedagen :)\n          appList[start.get(Calendar.HOUR_OF_DAY) + i][\n                  (7 + day.get(Calendar.DAY_OF_WEEK) - Calendar.MONDAY) % 7] =\n              app;\n          occupied[start.get(Calendar.HOUR_OF_DAY) + i][\n                  (7 + day.get(Calendar.DAY_OF_WEEK) - Calendar.MONDAY) % 7] =\n              1;\n        }\n      }\n    }\n\n    for (int i = 0; i < rader; i++) {\n\n      for (int j = 0; j < kolonner; j++) {\n        if (button[i][j] != null && button[i][j].getBackground() != Color.DARK_GRAY) {\n          remove(button[i][j]);\n        }\n        if (occupied[i][j] == 1) {\n          button[i][j] =\n              new JButton(\n                  new CustomAction(appList[i][j].getTitle(), appList[i][j]) {\n\n                    /** */\n                    private static final long serialVersionUID = 1L;\n\n                    // This method is called when the button is pressed\n                    public void actionPerformed(ActionEvent evt) {\n                      JDialog change = new ChangeAppointmentGui(getApp());\n                      change.setVisible(true);\n                    }\n                  });\n          int duration = 0;\n          int k = i;\n          while (appList[k][j] == appList[i][j]) {\n            duration++;\n            occupied[k][j] = 2;\n            k++;\n          }\n          c.gridheight = duration;\n          c.fill = GridBagConstraints.BOTH;\n          c.gridx = 11 + j;\n          c.gridy = 4 + i;\n          c.ipadx = 0;\n          c.ipady = 5;\n          c.weightx = 0;\n          if (appList[i][j] instanceof Meeting) {\n            button[i][j].setBackground(Color.MAGENTA);\n          } else {\n            button[i][j].setBackground(Color.CYAN);\n          }\n          button[i][j].setActionCommand(\" \");\n          add(button[i][j], c);\n        } else if (occupied[i][j] == 2) {\n        } else {\n          weekDates[j].set(Calendar.HOUR_OF_DAY, i);\n          Calendar rightNow = Calendar.getInstance();\n          rightNow.setTime(weekDates[j].getTime());\n          button[i][j] =\n              new JButton(\n                  new CustomAction(\"\", rightNow) {\n\n                    /** */\n                    private static final long serialVersionUID = 1L;\n\n                    // This method is called when the button is pressed\n                    public void actionPerformed(ActionEvent evt) {\n                      int response =\n                          JOptionPane.showOptionDialog(\n                              null,\n                              \"Meeting or Appointment?\",\n                              \"Options\",\n                              JOptionPane.YES_NO_OPTION,\n                              JOptionPane.PLAIN_MESSAGE,\n                              null,\n                              options,\n                              \"none of your business\");\n                      if (response == 0) {\n                        JDialog mGUI = new MeetingGui(getDate());\n                        mGUI.setVisible(true);\n                      }\n                      if (response == 1) {\n                        JDialog aGUI = new AppointmentGui(getDate());\n                        aGUI.setVisible(true);\n                      }\n                    }\n                  });\n          c.gridheight = 1;\n          c.fill = GridBagConstraints.BOTH;\n          c.gridx = 11 + j;\n          c.gridy = 4 + i;\n          c.ipadx = 80;\n          c.ipady = 5;\n          c.weightx = 1;\n          button[i][j].setBackground(Color.WHITE);\n          button[i][j].setActionCommand(\" \");\n          add(button[i][j], c);\n        }\n      }\n    }\n    this.updateUI();\n  }\n"}, {"dataset": "getInstance", "exampleID": 935, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": -2379, "focalAPIEnd": -2357, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int)", "User.setBirthDate(calndr)", "assertEquals(calndr,*)"], "useStart": [261, 309, 467], "useEnd": [291, 340, 514], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LO23/BitMusic/tree/master/BitMusicTest/bitmusic/profile/classes/UserTest.java", "rawCode": "  /**\n   * Test of setBirthDate method, of class User.\n   *\n   * @throws ProfileExceptions\n   */\n  @Test\n  public void testSetBirthDate() throws ProfileExceptions {\n    System.out.println(\"setBirthDate\");\n    Calendar newBirthdate = Calendar.getInstance();\n    newBirthdate.set(2013, 12, 24);\n    try {\n      user.setBirthDate(newBirthdate);\n    } catch (ProfileExceptions ex) {\n      Logger.getLogger(UserTest.class.getName()).log(Level.SEVERE, null, ex);\n    }\n    assertEquals(newBirthdate, user.getBirthDate());\n  }\n"}, {"dataset": "getInstance", "exampleID": 936, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance(aLocale)", "focalAPIStart": 175, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int,int,int,int)", "calndr.set(int,int)", "calndr.getTime()"], "useStart": [215, 267, 386], "useEnd": [261, 301, 399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jesseeichar/debrief/tree/master/trunk/contribs/jfreechart-1.0.13/tests/org/jfree/data/time/junit/MillisecondTests.java", "rawCode": "  /** Some checks for the getStart() method. */\n  public void testGetStart() {\n    Locale saved = Locale.getDefault();\n    Locale.setDefault(Locale.ITALY);\n    Calendar cal = Calendar.getInstance(Locale.ITALY);\n    cal.set(2006, Calendar.JANUARY, 16, 3, 47, 55);\n    cal.set(Calendar.MILLISECOND, 555);\n    Millisecond m = new Millisecond(555, 55, 47, 3, 16, 1, 2006);\n    assertEquals(cal.getTime(), m.getStart());\n    Locale.setDefault(saved);\n  }\n"}, {"dataset": "getInstance", "exampleID": 937, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 131, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)", "calndr.getTimeInMillis()"], "useStart": [159, 814], "useEnd": [194, 835], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Edholm/dat255-bearded-octo-lama/tree/master/src/it/chalmers/dat255_bearded_octo_lama/activities/AddAlarmActivity.java", "rawCode": "  public void addTestAlarm(View v) {\n    AlarmController ac = AlarmController.INSTANCE;\n    int countdown = 5;\n\n    Calendar cal = Calendar.getInstance();\n    cal.add(Calendar.SECOND, countdown);\n\n    // Defines the options for the test alarm.\n    Alarm.Extras extras =\n        new Alarm.Extras.Builder()\n            .useVibration(vibration.isChecked())\n            .useSound((sound.isChecked()))\n            .gameNotification(games.isChecked())\n            .gameName(choosenGame)\n            .snoozeInterval(snoozeInterval)\n            .addAllRingtoneIDs(\n                RingtoneFinder.findRingtoneIDs(\n                    this, RingtoneStorage.INSTANCE.getSelectedRingtones()))\n            .repetitionDays(days)\n            .volume(volumeSlider.getProgress())\n            .build();\n\n    ac.addAlarm(this, true, cal.getTimeInMillis(), extras);\n\n    Toast.makeText(getApplicationContext(), \"Alarm added 5 seconds from now\", Toast.LENGTH_SHORT)\n        .show();\n    finish();\n  }\n"}, {"dataset": "getInstance", "exampleID": 938, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 112, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTimeInMillis()"], "useStart": [112], "useEnd": [152], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Bloodsplat/BungeeSuite/tree/master/src/main/java/com/minecraftdimensions/bungeesuite/managers/BansManager.java", "rawCode": "  public static boolean checkTempBan(Ban b) throws SQLException {\n    java.util.Date today = new java.util.Date(Calendar.getInstance().getTimeInMillis());\n    java.util.Date banned = b.getBannedUntil();\n    if (today.compareTo(banned) >= 0) {\n      SQLManager.standardQuery(\"DELETE FROM BungeeBans WHERE player = '\" + b.getPlayer() + \"'\");\n      return false;\n    }\n    return true;\n  }\n"}, {"dataset": "getInstance", "exampleID": 939, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 48, "focalAPIEnd": 70, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int,int,int,int)", "calndr.getTimeInMillis()"], "useStart": [78, 137], "useEnd": [122, 158], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenXavaEx/OpenXavaEx/tree/master/code/OpenXavaDEV/src/org/openxava/formatters/TimeBaseFormatter.java", "rawCode": "    public long millis() {\n      Calendar cal = Calendar.getInstance();\n      cal.set(1970, 1, 1, hours, minutes, seconds);\n      return cal.getTimeInMillis();\n    }\n"}, {"dataset": "getInstance", "exampleID": 940, "initialization": ["Locale aLocale = Calendar.get(int)"], "initializationStart": [746], "initializationEnd": [782], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance(aLocale)", "focalAPIStart": 943, "focalAPIEnd": 971, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)"], "useStart": [1188], "useEnd": [1226], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-2_31-final/blojsom-2.0/plugins/src/org/blojsom/plugin/calendar/CalendarFilterPlugin.java", "rawCode": "  /**\n   * Process the blog entries\n   *\n   * @param httpServletRequest Request\n   * @param httpServletResponse Response\n   * @param user {@link BlogUser} instance\n   * @param context Context\n   * @param entries Blog entries retrieved for the particular request\n   * @return Modified set of blog entries\n   * @throws BlojsomPluginException If there is an error processing the blog entries\n   */\n  public BlogEntry[] process(\n      HttpServletRequest httpServletRequest,\n      HttpServletResponse httpServletResponse,\n      BlogUser user,\n      Map context,\n      BlogEntry[] entries)\n      throws BlojsomPluginException {\n\n    entries = super.process(httpServletRequest, httpServletResponse, user, context, entries);\n    Locale locale = (Locale) context.get(BLOJSOM_CALENDAR_LOCALE);\n    BlogCalendar blogCalendar = (BlogCalendar) context.get(BLOJSOM_CALENDAR);\n\n    ArrayList updatedEntryList = new ArrayList();\n\n    Calendar entrycalendar = Calendar.getInstance(locale);\n    if (entries != null && entries.length > 0) {\n      for (int x = 0; x < entries.length; x++) {\n        BlogEntry entry = entries[x];\n        String blogDateKey = BlojsomUtils.getDateKey(entry.getDate());\n        entrycalendar.setTime(entry.getDate());\n\n        if (blogCalendar.getRequestedDateKey() == null\n            || (blogDateKey.startsWith(blogCalendar.getRequestedDateKey()))) {\n          updatedEntryList.add(entry);\n        }\n      }\n    }\n\n    if (updatedEntryList.size() == 0) {\n      entries = new BlogEntry[0];\n    } else {\n      entries = (BlogEntry[]) updatedEntryList.toArray(new BlogEntry[updatedEntryList.size()]);\n    }\n\n    return entries;\n  }\n"}, {"dataset": "getInstance", "exampleID": 941, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 30, "tryExpressionEnd": 34, "tryBlockStart": 30, "tryBlockEnd": 1982, "catchExpressionStart": 1924, "catchExpressionEnd": 1944, "catchBlockStart": 1924, "catchBlockEnd": 1982, "exceptionHandlingCallStart": [1954], "exceptionHandlingCallEnd": [1973], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 956, "focalAPIEnd": 978, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTimeInMillis(long)"], "useStart": [992], "useEnd": [1041], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacksonicson/twospot/tree/master/3party/Zookeeper/zookeeper-3.2.1/src/java/systest/org/apache/zookeeper/test/system/GenerateLoad.java", "rawCode": "    public void run() {\n      try {\n        currentInterval = System.currentTimeMillis() / INTERVAL;\n        // Give things time to report;\n        Thread.sleep(INTERVAL * 2);\n        long min = 99999;\n        long max = 0;\n        long total = 0;\n        int number = 0;\n        while (true) {\n          long now = System.currentTimeMillis();\n          long lastInterval = currentInterval;\n          currentInterval += 1;\n          long count = remove(lastInterval);\n          count = count * 1000 / INTERVAL; // Multiply by 1000 to get\n          // reqs/sec\n          if (lastChange != 0 && (lastChange + INTERVAL * 3) < now) {\n            // We only want to print anything if things have had a\n            // chance to change\n\n            if (count < min) {\n              min = count;\n            }\n            if (count > max) {\n              max = count;\n            }\n            total += count;\n            number++;\n            Calendar calendar = Calendar.getInstance();\n            calendar.setTimeInMillis(lastInterval * INTERVAL);\n            String report =\n                lastInterval\n                    + \" \"\n                    + calendar.get(Calendar.HOUR_OF_DAY)\n                    + \":\"\n                    + calendar.get(Calendar.MINUTE)\n                    + \":\"\n                    + calendar.get(Calendar.SECOND)\n                    + \" \"\n                    + percentage\n                    + \"% \"\n                    + count\n                    + \" \"\n                    + min\n                    + \" \"\n                    + ((double) total / (double) number)\n                    + \" \"\n                    + max;\n            System.err.println(report);\n            if (sf != null) {\n              sf.println(report);\n            }\n          } else {\n            max = total = 0;\n            min = 999999999;\n            number = 0;\n          }\n          Thread.sleep(INTERVAL);\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n"}, {"dataset": "getInstance", "exampleID": 942, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 36, "focalAPIEnd": 68, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()"], "useStart": [36], "useEnd": [78], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta04/kernel-impl/src/main/java/org/sakaiproject/content/impl/LockManagerImpl.java", "rawCode": "  protected Date now() {\n    return java.util.Calendar.getInstance().getTime();\n  }\n"}, {"dataset": "getInstance", "exampleID": 943, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 3908, "focalAPIEnd": 3930, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DeploymentInformation(String,Module,Calendar,calndr,DeploymentInformationItem[],*)"], "useStart": [3800], "useEnd": [4000], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dukeboard/kevoree-extra/tree/master/org.kevoree.extra.esper/src/main/java/com/espertech/esper/core/deploy/EPDeploymentAdminImpl.java", "rawCode": "  private DeploymentResult deployInternal(\n      Module module, DeploymentOptions options, String deploymentId, Calendar addedDate)\n      throws DeploymentActionException {\n    if (options == null) {\n      options = new DeploymentOptions();\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Deploying module \" + module);\n    }\n    if (module.getImports() != null) {\n      for (String imported : module.getImports()) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Adding import \" + imported);\n        }\n        epService.getConfiguration().addImport(imported);\n      }\n    }\n\n    if (options.isCompile()) {\n      List<DeploymentItemException> exceptions = new ArrayList<DeploymentItemException>();\n      for (ModuleItem item : module.getItems()) {\n        try {\n          epService.compileEPL(item.getExpression());\n        } catch (EPException ex) {\n          exceptions.add(\n              new DeploymentItemException(\n                  ex.getMessage(), item.getExpression(), ex, item.getLineNumber()));\n        }\n      }\n\n      if (!exceptions.isEmpty()) {\n        throw buildException(\"Compilation failed\", module, exceptions);\n      }\n    }\n\n    if (options.isCompileOnly()) {\n      return null;\n    }\n\n    List<DeploymentItemException> exceptions = new ArrayList<DeploymentItemException>();\n    List<DeploymentInformationItem> statementNames = new ArrayList<DeploymentInformationItem>();\n    List<EPStatement> statements = new ArrayList<EPStatement>();\n    Set<String> eventTypesReferenced = new HashSet<String>();\n\n    for (ModuleItem item : module.getItems()) {\n      try {\n\n        EPStatement stmt;\n        if (options.getIsolatedServiceProvider() == null) {\n          stmt = epService.createEPL(item.getExpression());\n        } else {\n          EPServiceProviderIsolated unit =\n              statementIsolationService.getIsolationUnit(options.getIsolatedServiceProvider(), -1);\n          stmt = unit.getEPAdministrator().createEPL(item.getExpression(), null, null);\n        }\n        statementNames.add(new DeploymentInformationItem(stmt.getName(), stmt.getText()));\n        statements.add(stmt);\n\n        Set<String> types = statementEventTypeRef.getTypesForStatementName(stmt.getName());\n        if (types != null) {\n          eventTypesReferenced.addAll(types);\n        }\n      } catch (EPException ex) {\n        exceptions.add(\n            new DeploymentItemException(\n                ex.getMessage(), item.getExpression(), ex, item.getLineNumber()));\n        if (options.isFailFast()) {\n          break;\n        }\n      }\n    }\n\n    if (!exceptions.isEmpty()) {\n      if (options.isRollbackOnFail()) {\n        log.debug(\"Rolling back intermediate statements for deployment\");\n        for (EPStatement stmt : statements) {\n          try {\n            stmt.destroy();\n          } catch (Exception ex) {\n            log.debug(\n                \"Failed to destroy created statement during rollback: \" + ex.getMessage(), ex);\n          }\n        }\n        undeployTypes(eventTypesReferenced);\n      }\n      String text = \"Deployment failed\";\n      if (options.isValidateOnly()) {\n        text = \"Validation failed\";\n      }\n      throw buildException(text, module, exceptions);\n    }\n\n    if (options.isValidateOnly()) {\n      log.debug(\"Rolling back created statements for validate-only\");\n      for (EPStatement stmt : statements) {\n        try {\n          stmt.destroy();\n        } catch (Exception ex) {\n          log.debug(\"Failed to destroy created statement during rollback: \" + ex.getMessage(), ex);\n        }\n      }\n      undeployTypes(eventTypesReferenced);\n      return null;\n    }\n\n    DeploymentInformationItem[] deploymentInfoArr =\n        statementNames.toArray(new DeploymentInformationItem[statementNames.size()]);\n    DeploymentInformation desc =\n        new DeploymentInformation(\n            deploymentId,\n            module,\n            addedDate,\n            Calendar.getInstance(),\n            deploymentInfoArr,\n            DeploymentState.DEPLOYED);\n    deploymentStateService.addUpdateDeployment(desc);\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"Module \" + module + \" was successfully deployed.\");\n    }\n    return new DeploymentResult(desc.getDeploymentId(), Collections.unmodifiableList(statements));\n  }\n"}, {"dataset": "getInstance", "exampleID": 944, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 67, "focalAPIEnd": 89, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()"], "useStart": [96, 170, 228, 309, 336, 417, 444, 518, 545, 621], "useEnd": [129, 188, 266, 327, 374, 435, 475, 536, 578, 639], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gaopengxiang417/java7concurrentcookbook/tree/master/src/com/gao/jvm/DateUtil.java", "rawCode": "  public static void main(String[] args) {\n    Calendar instance = Calendar.getInstance();\n\n    instance.set(Calendar.MINUTE, 01);\n\n    String result = computeDateSecond(instance.getTime());\n    System.out.println(result);\n\n    instance.set(Calendar.HOUR_OF_DAY, 19);\n    System.out.println(computeDateSecond(instance.getTime()));\n\n    instance.set(Calendar.DAY_OF_MONTH, 9);\n    System.out.println(computeDateSecond(instance.getTime()));\n\n    instance.set(Calendar.MONTH, 1);\n    System.out.println(computeDateSecond(instance.getTime()));\n\n    instance.set(Calendar.YEAR, 2011);\n    System.out.println(computeDateSecond(instance.getTime()));\n  }\n"}, {"dataset": "getInstance", "exampleID": 945, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 62, "focalAPIEnd": 84, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.get(int)"], "useStart": [90, 120], "useEnd": [107, 144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pister/wint/tree/master/wint-framework/src/main/java/wint/lang/utils/DateUtil.java", "rawCode": "  public static int getSecond(Date date) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(date);\n    return cal.get(Calendar.SECOND);\n  }\n"}, {"dataset": "getInstance", "exampleID": 946, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 108, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTimeInMillis()"], "useStart": [108], "useEnd": [148], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sparkoo/Bugmaze/tree/master/src/cz/sparko/Bugmaze/Activity/Game.java", "rawCode": "  public long getGameDataTimestamp() {\n    return prefs.getLong(\n        GameDataEnum.TIMESTAMP.toString(), Calendar.getInstance().getTimeInMillis());\n  }\n"}, {"dataset": "getInstance", "exampleID": 947, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 168, "focalAPIEnd": 190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setData(calndr)"], "useStart": [154], "useEnd": [191], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ccstorch/am-academia/tree/master/workspace/AMAcademiaJSF/src/br/com/acad/bean/dieta/SolicitacaoDietaBean.java", "rawCode": "  /** inclui dieta especifico no banco referente a solicitacao respondida */\n  public void incluirDietaResposta() {\n    dieta.setSolicitacao(entity);\n    dieta.setData(Calendar.getInstance());\n    closeForms();\n    atualizar();\n    entity.setRespondido(true);\n    incluirGeneric(entity.getId());\n  }\n"}, {"dataset": "getInstance", "exampleID": 948, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 1673, "focalAPIEnd": 1695, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calendar.getInstance()", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)"], "useStart": [1759, 1973, 1999, 2026], "useEnd": [1781, 1997, 2024, 2058], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/maven-scm/tree/master/maven-scm-providers/maven-scm-provider-jazz/src/main/java/org/apache/maven/scm/provider/jazz/command/changelog/JazzListChangesetConsumer.java", "rawCode": "  private void processModifiedLine(String line) {\n    // Process the \"Modified: ...\" line, eg:\n    // Modified: Feb 25, 2012 10:15 PM (Yesterday)\n    // Modified: Feb 25, 2012 10:13 PM (Yesterday)\n    // Modified: Feb 24, 2012 11:03 PM (Last Week)\n    // Modified: Mar 1, 2012 2:34 PM\n    // Modified: 6:20 PM (5 minutes ago)\n\n    if (getLogger().isDebugEnabled()) {\n      getLogger().debug(\" Parsing Modified Line : \" + line);\n    }\n\n    int colonPos = line.indexOf(\":\");\n    int parenPos = line.indexOf(\"(\");\n\n    String date = null;\n\n    if (colonPos != -1 && parenPos != -1) {\n      date = line.substring(colonPos + 2, parenPos - 1);\n    } else {\n      if (colonPos != -1 && parenPos == -1) {\n        // No trailing bracket\n        date = line.substring(colonPos + 2);\n      }\n    }\n\n    if (date != null) {\n      Date changesetDate = parseDate(date.toString(), userDateFormat, JAZZ_TIMESTAMP_PATTERN);\n      // try again forcing en locale\n      if (changesetDate == null) {\n        changesetDate =\n            parseDate(date.toString(), userDateFormat, JAZZ_TIMESTAMP_PATTERN, Locale.ENGLISH);\n      }\n      // changesetDate will be null when the date is not given, it only has just the time. The date\n      // is today.\n      if (changesetDate == null) {\n        changesetDate = parseDate(date.toString(), userDateFormat, JAZZ_TIMESTAMP_PATTERN_TIME);\n        // try again forcing en locale\n        if (changesetDate == null) {\n          changesetDate =\n              parseDate(\n                  date.toString(), userDateFormat, JAZZ_TIMESTAMP_PATTERN_TIME, Locale.ENGLISH);\n        }\n        // Get today's time/date. Used to get the date.\n        Calendar today = Calendar.getInstance();\n        // Get a working one.\n        Calendar changesetCal = Calendar.getInstance();\n        // Set the date/time. Used to set the time.\n        changesetCal.setTimeInMillis(changesetDate.getTime());\n        // Now set the date (today).\n        changesetCal.set(\n            today.get(Calendar.YEAR), today.get(Calendar.MONTH), today.get(Calendar.DAY_OF_MONTH));\n        // Now get the date of the combined results.\n        changesetDate = changesetCal.getTime();\n      }\n\n      if (getLogger().isDebugEnabled()) {\n        getLogger().debug(\" date : \" + date);\n        getLogger().debug(\" changesetDate : \" + changesetDate);\n      }\n\n      ChangeSet currentChangeSet = entries.get(currentChangeSetIndex);\n      currentChangeSet.setDate(changesetDate);\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 949, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 229, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTimeInMillis(long)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.getTimeInMillis()"], "useStart": [257, 336, 394, 442, 490, 565], "useEnd": [282, 360, 413, 461, 515, 586], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mozilla-metrics/akela/tree/master/src/main/java/com/mozilla/util/DateUtil.java", "rawCode": "  /**\n   * Get the last moment in time for the given time and resolution\n   *\n   * @param time\n   * @param resolution\n   * @return\n   */\n  public static long getEndTimeAtResolution(long time, int resolution) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTimeInMillis(time);\n\n    switch (resolution) {\n      case DATE:\n        cal.set(HOUR_OF_DAY, 23);\n      case HOUR_OF_DAY:\n        cal.set(MINUTE, 59);\n      case MINUTE:\n        cal.set(SECOND, 59);\n      case SECOND:\n        cal.set(MILLISECOND, 999);\n      default:\n        break;\n    }\n\n    return cal.getTimeInMillis();\n  }\n"}, {"dataset": "getInstance", "exampleID": 950, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "KettleException", "exceptionHandlingCall": [], "tryExpressionStart": 4404, "tryExpressionEnd": 4408, "tryBlockStart": 4404, "tryBlockEnd": 4590, "catchExpressionStart": 9603, "catchExpressionEnd": 9629, "catchBlockStart": 9603, "catchBlockEnd": 9765, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 4717, "focalAPIEnd": 4739, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()", "calendar.getInstance()", "calndr.getTime()"], "useStart": [4753, 11533, 11568], "useEnd": [4766, 11555, 11581], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/QADM/SCG/tree/master/opentaps-1.5/opentaps/opentaps-common/src/common/org/opentaps/common/reporting/etl/UtilEtl.java", "rawCode": "  /**\n   * Runs an ETL job.\n   *\n   * @param jobFileName the name of the job, eg: \"sales_tax_statement_etl_job.kjb\"\n   * @param reportsPath the path to the job, eg:\n   *     \"component://financials/webapp/financials/reports/repository\"\n   * @param jobParameters job parameters\n   * @exception KettleException if an error occurs\n   */\n  public static void runJob(\n      String jobFileName, String reportsPath, Map<String, String> jobParameters)\n      throws KettleException {\n\n    EnvUtil.environmentInit();\n    RepositoryMeta repinfo = null;\n    UserInfo userinfo = null;\n    Job job = null;\n\n    StringBuffer optionRepname,\n        optionUsername,\n        optionPassword,\n        optionJobname,\n        optionDirname,\n        optionFilename,\n        optionLoglevel;\n    StringBuffer optionLogfile,\n        optionLogfileOld,\n        optionListdir,\n        optionListjobs,\n        optionListrep,\n        optionNorep,\n        optionVersion;\n\n    LogWriter log = LogWriter.getInstance(LogWriter.LOG_LEVEL_BASIC);\n\n    String jobDirPath = \"\";\n    String jobFilePath = \"\";\n    String jobFilenameTemplate = \"/${jobFilename}\";\n    try {\n      jobDirPath = ComponentLocationResolver.getBaseLocation(reportsPath).toString();\n      jobFilePath =\n          ComponentLocationResolver.getBaseLocation(\n                  FlexibleStringExpander.expandString(\n                      reportsPath + jobFilenameTemplate,\n                      UtilMisc.toMap(\"jobFilename\", jobFileName)))\n              .toString();\n    } catch (MalformedURLException muex) {\n      log.logError(STRING_KITCHEN, \"Error resolving ETL files path.\", muex);\n    }\n\n    optionRepname = new StringBuffer();\n    optionUsername = new StringBuffer();\n    optionPassword = new StringBuffer();\n    optionJobname = new StringBuffer();\n    optionDirname = new StringBuffer();\n    optionFilename = new StringBuffer(jobFilePath);\n    optionLoglevel = new StringBuffer();\n    optionLogfile = new StringBuffer();\n    optionLogfileOld = new StringBuffer();\n    optionListdir = new StringBuffer();\n    optionListdir = new StringBuffer();\n    optionListjobs = new StringBuffer();\n    optionListrep = new StringBuffer();\n    optionNorep = new StringBuffer();\n    optionVersion = new StringBuffer();\n\n    String kettleRepname = Const.getEnvironmentVariable(\"KETTLE_REPOSITORY\", null);\n    String kettleUsername = Const.getEnvironmentVariable(\"KETTLE_USER\", null);\n    String kettlePassword = Const.getEnvironmentVariable(\"KETTLE_PASSWORD\", null);\n\n    if (!Const.isEmpty(kettleRepname)) {\n      optionRepname = new StringBuffer(kettleRepname);\n    }\n    if (!Const.isEmpty(kettleUsername)) {\n      optionUsername = new StringBuffer(kettleUsername);\n    }\n    if (!Const.isEmpty(kettlePassword)) {\n      optionPassword = new StringBuffer(kettlePassword);\n    }\n\n    LogWriter.setConsoleAppenderDebug();\n\n    if (Const.isEmpty(optionLogfile) && !Const.isEmpty(optionLogfileOld)) {\n      // if the old style of logging name is filled in, and the new one is not\n      // overwrite the new by the old\n      optionLogfile = optionLogfileOld;\n    }\n\n    if (Const.isEmpty(optionLogfile)) {\n      log = LogWriter.getInstance(LogWriter.LOG_LEVEL_BASIC);\n    } else {\n      log = LogWriter.getInstance(optionLogfile.toString(), true, LogWriter.LOG_LEVEL_BASIC);\n    }\n\n    if (!Const.isEmpty(optionLoglevel)) {\n      log.setLogLevel(optionLoglevel.toString());\n      log.logMinimal(STRING_KITCHEN, \"Logging is at level : \" + log.getLogLevelDesc());\n    }\n\n    if (!Const.isEmpty(optionVersion)) {\n      BuildVersion buildVersion = BuildVersion.getInstance();\n      log.logBasic(\n          \"Pan\",\n          \"Kettle version \"\n              + Const.VERSION\n              + \", build \"\n              + buildVersion.getVersion()\n              + \", build date : \"\n              + buildVersion.getBuildDate());\n      // if (a.length==1) System.exit(6);\n    }\n\n    // Start the action...\n    //\n    if (!Const.isEmpty(optionRepname) && !Const.isEmpty(optionUsername)) {\n      log.logDetailed(STRING_KITCHEN, \"Repository and username supplied\");\n    }\n\n    log.logMinimal(STRING_KITCHEN, \"Start of run.\");\n\n    /* Load the plugins etc.*/\n    try {\n      StepLoader.init();\n    } catch (KettleException e) {\n      log.logError(STRING_KITCHEN, \"Error loading steps... halting Kitchen!\", e);\n    }\n    StepLoader stepLoader = StepLoader.getInstance();\n\n    /* Load the plugins etc.*/\n    try {\n      JobEntryLoader.init();\n    } catch (KettleException e) {\n      log.logError(STRING_KITCHEN, \"Error loading job entries & plugins... halting Kitchen!\", e);\n      return;\n    }\n\n    Date start, stop;\n    Calendar cal;\n    SimpleDateFormat df = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");\n    cal = Calendar.getInstance();\n    start = cal.getTime();\n\n    log.logDebug(STRING_KITCHEN, \"Allocate new job.\");\n    JobMeta jobMeta = new JobMeta(log);\n\n    // In case we use a repository...\n    Repository repository = null;\n\n    try {\n      // Read kettle job specified on command-line?\n      if (!Const.isEmpty(optionRepname) || !Const.isEmpty(optionFilename)) {\n        log.logDebug(STRING_KITCHEN, \"Parsing command line options.\");\n        if (!Const.isEmpty(optionRepname) && !\"Y\".equalsIgnoreCase(optionNorep.toString())) {\n          log.logDebug(STRING_KITCHEN, \"Loading available repositories.\");\n          RepositoriesMeta repsinfo = new RepositoriesMeta(log);\n          if (repsinfo.readData()) {\n            log.logDebug(STRING_KITCHEN, \"Finding repository [\" + optionRepname + \"]\");\n            repinfo = repsinfo.findRepository(optionRepname.toString());\n            if (repinfo != null) {\n              // Define and connect to the repository...\n              log.logDebug(STRING_KITCHEN, \"Allocate & connect to repository.\");\n              repository = new Repository(log, repinfo, userinfo);\n              if (repository.connect(\"Kitchen commandline\")) {\n                RepositoryDirectory directory = repository.getDirectoryTree(); // Default = root\n\n                // Find the directory name if one is specified...\n                if (!Const.isEmpty(optionDirname)) {\n                  directory = repository.getDirectoryTree().findDirectory(optionDirname.toString());\n                }\n\n                if (directory != null) {\n                  // Check username, password\n                  log.logDebug(STRING_KITCHEN, \"Check supplied username and password.\");\n                  userinfo =\n                      new UserInfo(\n                          repository, optionUsername.toString(), optionPassword.toString());\n                  if (userinfo.getID() > 0) {\n                    // Load a job\n                    if (!Const.isEmpty(optionJobname)) {\n                      log.logDebug(STRING_KITCHEN, \"Load the job info...\");\n                      jobMeta = new JobMeta(log, repository, optionJobname.toString(), directory);\n                      log.logDebug(STRING_KITCHEN, \"Allocate job...\");\n                      job = new Job(log, stepLoader, repository, jobMeta);\n                    } else if (\"Y\".equalsIgnoreCase(optionListjobs.toString())) {\n                      // List the jobs in the repository\n                      log.logDebug(\n                          STRING_KITCHEN, \"Getting list of jobs in directory: \" + directory);\n                      String[] jobnames = repository.getJobNames(directory.getID());\n                      for (int i = 0; i < jobnames.length; i++) {\n                        log.logError(jobnames[i], MODULE);\n                      }\n                    } else if (\"Y\".equalsIgnoreCase(optionListdir.toString())) {\n                      // List the directories in the repository\n                      String[] dirnames = repository.getDirectoryNames(directory.getID());\n                      for (int i = 0; i < dirnames.length; i++) {\n                        log.logError(dirnames[i], MODULE);\n                      }\n                    }\n                  } else {\n                    log.logError(\"ERROR: Can't verify username and password.\", MODULE);\n                    userinfo = null;\n                    repinfo = null;\n                  }\n                } else {\n                  log.logError(\n                      \"ERROR: Can't find the supplied directory [\" + optionDirname + \"]\", MODULE);\n                  userinfo = null;\n                  repinfo = null;\n                }\n              } else {\n                log.logError(\"ERROR: Can't connect to the repository.\", MODULE);\n              }\n            } else {\n              log.logError(\"ERROR: No repository provided, can't load job.\", MODULE);\n            }\n          } else {\n            log.logError(\"ERROR: No repositories defined on this system.\", MODULE);\n          }\n        }\n\n        // Try to load if from file anyway.\n        if (!Const.isEmpty(optionFilename) && job == null) {\n          jobMeta = new JobMeta(log, optionFilename.toString(), null, null);\n          job = new Job(log, stepLoader, null, jobMeta);\n        }\n      } else if (\"Y\".equalsIgnoreCase(optionListrep.toString())) {\n        RepositoriesMeta ri = new RepositoriesMeta(log);\n        if (ri.readData()) {\n          log.logError(\"List of repositories:\", MODULE);\n          for (int i = 0; i < ri.nrRepositories(); i++) {\n            RepositoryMeta rinfo = ri.getRepository(i);\n            log.logError(\n                \"#\" + (i + 1) + \" : \" + rinfo.getName() + \" [\" + rinfo.getDescription() + \"] \",\n                MODULE);\n          }\n        } else {\n          log.logError(\"ERROR: Unable to read/parse the repositories XML file.\", MODULE);\n        }\n      }\n    } catch (KettleException e) {\n      job = null;\n      jobMeta = null;\n      log.logError(\"Processing stopped because of an error: \" + e.getMessage(), MODULE);\n    }\n\n    if (job == null) {\n      if (!\"Y\".equalsIgnoreCase(optionListjobs.toString())\n          && !\"Y\".equalsIgnoreCase(optionListdir.toString())\n          && !\"Y\".equalsIgnoreCase(optionListrep.toString())) {\n        log.logError(\"ERROR: Kitchen can't continue because the job couldn't be loaded.\", MODULE);\n      }\n    }\n\n    Result result = null;\n\n    // int returnCode=0;\n\n    try {\n      job.initializeVariablesFrom(null);\n      if (jobParameters != null) {\n        job.getJobMeta().setInternalKettleVariables(job);\n        final Set<String> stringSet = jobParameters.keySet();\n        for (String key : stringSet) {\n          job.setParameterValue(key, jobParameters.get(key));\n          job.setVariable(key, jobParameters.get(key));\n        }\n      }\n\n      // set the path to where the transformation files are located\n      job.setVariable(\"transformationsPath\", jobDirPath);\n\n      // set all parameters as internal variables\n      job.getJobMeta().setInternalKettleVariables(job);\n      result = job.execute(); // Execute the selected job.\n      job.endProcessing(\"end\", result); // The bookkeeping...\n    } catch (KettleJobException je) {\n      if (result == null) {\n        result = new Result();\n      }\n      result.setNrErrors(1L);\n\n      try {\n        job.endProcessing(\"error\", result);\n      } catch (KettleJobException je2) {\n        log.logError(job.getName(), \"A serious error occured : \" + je2.getMessage());\n        // returnCode = 2;\n      }\n    } finally {\n      if (repository != null) {\n        repository.disconnect();\n      }\n    }\n\n    log.logMinimal(STRING_KITCHEN, \"Finished!\");\n\n    if (result != null && result.getNrErrors() != 0) {\n      log.logError(STRING_KITCHEN, \"Finished with errors\");\n      // returnCode = 1;\n    }\n    cal = Calendar.getInstance();\n    stop = cal.getTime();\n    String begin = df.format(start).toString();\n    String end = df.format(stop).toString();\n\n    log.logMinimal(STRING_KITCHEN, \"Start=\" + begin + \", Stop=\" + end);\n    long millis = stop.getTime() - start.getTime();\n    log.logMinimal(STRING_KITCHEN, \"Processing ended after \" + (millis / 1000) + \" seconds.\");\n  }\n"}, {"dataset": "getInstance", "exampleID": 951, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 173, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()"], "useStart": [173], "useEnd": [205], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/enina/AdvertManager/tree/master/src/java/com/mne/advertmanager/util/PurchaseOrderImporter.java", "rawCode": "  private Date processTime(String itemValue) {\n    try {\n      return df.parse(itemValue);\n    } catch (ParseException ex) {\n      logger.error(ex.toString());\n      return Calendar.getInstance().getTime();\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 952, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": -35425, "focalAPIEnd": -35403, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calendar.get(int)", "calendar.getInstance()", "calendar.getInstance()", "Calendar.set(calndr,int,int,int,int,int)", "Calendar.set(calndr,int,int,int,int,int)"], "useStart": [-35425, -35318, 246, 567, 599], "useEnd": [-35384, -35296, 268, 593, 625], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tkt-dwi/DealWithCalendar/tree/master/src/dealwithcalendar/GUI.java", "rawCode": "  public void addEventToCalendar() {\n    if (esTime.getSelectedIndex() >= eeTime.getSelectedIndex()) return;\n    if (eName.getText().equals(\"nimi\")) return;\n    else addE.setName(eName.getText());\n\n    eventWindow.setVisible(false);\n\n    int y = Calendar.getInstance().get(Calendar.YEAR) + eYear.getSelectedIndex();\n    int mo = eMonth.getSelectedIndex();\n    int d = eDay.getSelectedIndex() + 1;\n    int sh = esTime.getSelectedIndex();\n    int eh = eeTime.getSelectedIndex();\n\n    Calendar st = Calendar.getInstance();\n    Calendar et = Calendar.getInstance();\n\n    st.set(y, mo, d, sh, 0, 0);\n    et.set(y, mo, d, eh, 0, 0);\n\n    addE.setStarttime(st);\n    addE.setEndtime(et);\n\n    if (ePlace.getText().equals(\"paikka\")) addE.setLocation(\"\");\n    else addE.setLocation(ePlace.getText());\n\n    if (eOM.getText().equals(\"lisämerkinnät\")) addE.setOwnMarkings(\"\");\n    else addE.setOwnMarkings(eOM.getText());\n\n    m.removeEvent(addE);\n    addE.setType(4);\n    m.addEvent(addE);\n\n    try {\n      m.writeData();\n    } catch (IOException e) {\n    }\n\n    createWeekView(curYear, curWeek);\n    repaint();\n  }\n"}, {"dataset": "getInstance", "exampleID": 953, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "PlatformException", "exceptionHandlingCall": ["printStackTrace()", "setSuccess(*)", "getMessage()", "setMessage(*)"], "tryExpressionStart": 188, "tryExpressionEnd": 192, "tryBlockStart": 188, "tryBlockEnd": 1134, "catchExpressionStart": 851, "catchExpressionEnd": 879, "catchBlockStart": 851, "catchBlockEnd": 996, "exceptionHandlingCallStart": [887, 914, 974, 955], "exceptionHandlingCallEnd": [906, 947, 988, 989], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 620, "focalAPIEnd": 642, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "ApplicationVersionTestReport.setTestDate(calndr)"], "useStart": [650, 680], "useEnd": [672, 712], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eastseven/tsm/tree/master/tsm/src/main/java/com/justinmobile/tsm/application/web/ApplicationVersionController.java", "rawCode": "  @RequestMapping\n  public @ResponseBody JsonMessage subReportFinishTest(\n      HttpServletRequest request, @RequestParam Long appverId) {\n    JsonMessage message = new JsonMessage();\n    try {\n      ApplicationVersionTestReport testReport = new ApplicationVersionTestReport();\n      SpringMVCUtils.bindObject(request, testReport);\n      String year = request.getParameter(\"year\");\n      String month = request.getParameter(\"month\");\n      String day = request.getParameter(\"day\");\n      SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\n      Date date = sdf.parse(year + month + day);\n      Calendar calendar = Calendar.getInstance();\n      calendar.setTime(date);\n      testReport.setTestDate(calendar);\n      String subType = request.getParameter(\"subType\");\n      applicationVersionManager.finishTest(testReport, appverId, subType);\n    } catch (PlatformException e) {\n      e.printStackTrace();\n      message.setSuccess(Boolean.FALSE);\n      message.setMessage(e.getMessage());\n    } catch (Exception e) {\n      e.printStackTrace();\n      message.setSuccess(Boolean.FALSE);\n      message.setMessage(e.getMessage());\n    }\n    return message;\n  }\n"}, {"dataset": "getInstance", "exampleID": 954, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "printLine(String)"], "tryExpressionStart": 143, "tryExpressionEnd": 147, "tryBlockStart": 143, "tryBlockEnd": 4502, "catchExpressionStart": 4362, "catchExpressionEnd": 4382, "catchBlockStart": 4362, "catchBlockEnd": 4502, "exceptionHandlingCallStart": [4390, 4417], "exceptionHandlingCallEnd": [4409, 4495], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 337, "focalAPIEnd": 359, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["init(int,calndr,boolean)"], "useStart": [464], "useEnd": [509], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WorkflowSim/WorkflowSim-1.0/tree/master/examples/org/cloudbus/cloudsim/examples/network/NetworkExample2.java", "rawCode": "  /** Creates main() to run this example */\n  public static void main(String[] args) {\n\n    Log.printLine(\"Starting NetworkExample2...\");\n\n    try {\n      // First step: Initialize the CloudSim package. It should be called\n      // before creating any entities.\n      int num_user = 1; // number of cloud users\n      Calendar calendar = Calendar.getInstance();\n      boolean trace_flag = false; // mean trace events\n\n      // Initialize the CloudSim library\n      CloudSim.init(num_user, calendar, trace_flag);\n\n      // Second step: Create Datacenters\n      // Datacenters are the resource providers in CloudSim. We need at list one of them to run a\n      // CloudSim simulation\n      Datacenter datacenter0 = createDatacenter(\"Datacenter_0\");\n      Datacenter datacenter1 = createDatacenter(\"Datacenter_1\");\n\n      // Third step: Create Broker\n      DatacenterBroker broker = createBroker();\n      int brokerId = broker.getId();\n\n      // Fourth step: Create one virtual machine\n      vmlist = new ArrayList<Vm>();\n\n      // VM description\n      int vmid = 0;\n      int mips = 250;\n      long size = 10000; // image size (MB)\n      int ram = 512; // vm memory (MB)\n      long bw = 1000;\n      int pesNumber = 1; // number of cpus\n      String vmm = \"Xen\"; // VMM name\n\n      // create two VMs\n      Vm vm1 =\n          new Vm(\n              vmid,\n              brokerId,\n              mips,\n              pesNumber,\n              ram,\n              bw,\n              size,\n              vmm,\n              new CloudletSchedulerTimeShared());\n\n      // the second VM will have twice the priority of VM1 and so will receive twice CPU time\n      vmid++;\n      Vm vm2 =\n          new Vm(\n              vmid,\n              brokerId,\n              mips,\n              pesNumber,\n              ram,\n              bw,\n              size,\n              vmm,\n              new CloudletSchedulerTimeShared());\n\n      // add the VMs to the vmList\n      vmlist.add(vm1);\n      vmlist.add(vm2);\n\n      // submit vm list to the broker\n      broker.submitVmList(vmlist);\n\n      // Fifth step: Create two Cloudlets\n      cloudletList = new ArrayList<Cloudlet>();\n\n      // Cloudlet properties\n      int id = 0;\n      long length = 40000;\n      long fileSize = 300;\n      long outputSize = 300;\n      UtilizationModel utilizationModel = new UtilizationModelFull();\n\n      Cloudlet cloudlet1 =\n          new Cloudlet(\n              id,\n              length,\n              pesNumber,\n              fileSize,\n              outputSize,\n              utilizationModel,\n              utilizationModel,\n              utilizationModel);\n      cloudlet1.setUserId(brokerId);\n\n      id++;\n      Cloudlet cloudlet2 =\n          new Cloudlet(\n              id,\n              length,\n              pesNumber,\n              fileSize,\n              outputSize,\n              utilizationModel,\n              utilizationModel,\n              utilizationModel);\n      cloudlet2.setUserId(brokerId);\n\n      // add the cloudlets to the list\n      cloudletList.add(cloudlet1);\n      cloudletList.add(cloudlet2);\n\n      // submit cloudlet list to the broker\n      broker.submitCloudletList(cloudletList);\n\n      // bind the cloudlets to the vms. This way, the broker\n      // will submit the bound cloudlets only to the specific VM\n      broker.bindCloudletToVm(cloudlet1.getCloudletId(), vm1.getId());\n      broker.bindCloudletToVm(cloudlet2.getCloudletId(), vm2.getId());\n\n      // Sixth step: configure network\n      // load the network topology file\n      NetworkTopology.buildNetworkTopology(\"topology.brite\");\n\n      // maps CloudSim entities to BRITE entities\n      // Datacenter0 will correspond to BRITE node 0\n      int briteNode = 0;\n      NetworkTopology.mapNode(datacenter0.getId(), briteNode);\n\n      // Datacenter1 will correspond to BRITE node 2\n      briteNode = 2;\n      NetworkTopology.mapNode(datacenter1.getId(), briteNode);\n\n      // Broker will correspond to BRITE node 3\n      briteNode = 3;\n      NetworkTopology.mapNode(broker.getId(), briteNode);\n\n      // Sixth step: Starts the simulation\n      CloudSim.startSimulation();\n\n      // Final step: Print results when simulation is over\n      List<Cloudlet> newList = broker.getCloudletReceivedList();\n\n      CloudSim.stopSimulation();\n\n      printCloudletList(newList);\n\n      Log.printLine(\"NetworkExample2 finished!\");\n    } catch (Exception e) {\n      e.printStackTrace();\n      Log.printLine(\"The simulation has been terminated due to an unexpected error\");\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 955, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 347, "focalAPIEnd": 369, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calendar.getInstance()"], "useStart": [434, 478, 517, 556, 1735], "useEnd": [472, 511, 550, 594, 1757], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/payhum/codebase/tree/master/Payhum/src/com/openhr/zipfile/PayZipDownload.java", "rawCode": "  public ActionForward execute(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n\n    ConfigData configpay = ConfigDataFactory.findByName(PayhumConstants.PAYROLLDATE_ID);\n    String payRunDate = configpay.getConfigValue();\n\n    Calendar currDtCal = Calendar.getInstance();\n\n    // Zero out the hour, minute, second, and millisecond\n    currDtCal.set(Calendar.HOUR_OF_DAY, 0);\n    currDtCal.set(Calendar.MINUTE, 0);\n    currDtCal.set(Calendar.SECOND, 0);\n    currDtCal.set(Calendar.MILLISECOND, 0);\n\n    List<PayrollDate> payrollDates = new ArrayList<PayrollDate>();\n    List<EmpPayrollMap> employees = new ArrayList<EmpPayrollMap>();\n\n    List<PayrollDate> pds = PayrollFactory.findPayrollDateByID(Integer.parseInt(payRunDate));\n\n    payrollDates.addAll(PayrollFactory.findPayrollDateByBranch(pds.get(0).getBranchId().getId()));\n\n    List<Payroll> prd =\n        EmpPayTaxFactroy.findPayrollByIDAndBranch(payRunDate, pds.get(0).getBranchId().getId());\n    employees.addAll(EmpPayTaxFactroy.findTaxMonthlyForEmployeeByDate(prd.get(0)));\n\n    List<Payroll> payRuns =\n        PayrollFactory.findAllPayrollRunsPerBranch(pds.get(0).getBranchId().getId());\n    Integer divNo = PayhumUtil.remainingPaycycles(payrollDates, payRuns);\n\n    Integer mulNO =\n        PayrollFactory.findAllPayrollRunsPerBranch(prd.get(0).getBranchId().getId()).size();\n\n    boolean monthly = false;\n    List<PayPeriodData> payPeriods = PayPeriodFactory.findAll();\n    for (PayPeriodData ppd : payPeriods) {\n      if (ppd.getPeriodName().equalsIgnoreCase(\"Monthly\")) {\n        monthly = true;\n        break;\n      }\n    }\n\n    Date now = new Date();\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(pds.get(0).getRunDateofDateObject());\n    cal.set(Calendar.HOUR_OF_DAY, 0);\n    cal.set(Calendar.MINUTE, 0);\n    cal.set(Calendar.SECOND, 0);\n    cal.set(Calendar.MILLISECOND, 0);\n\n    String monthYear = new SimpleDateFormat(\"MMM_yyyy\").format(now);\n\n    String fileName =\n        \"Paystubs_\"\n            + pds.get(0).getBranchId().getCompanyId().getName()\n            + \"_\"\n            + pds.get(0).getBranchId().getName()\n            + \"_Payroll_\"\n            + monthYear\n            + \".zip\";\n\n    fileName = fileName.replace(\" \", \"_\");\n\n    response.setContentType(\"application/zip\");\n    response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n\n    ServletOutputStream os = response.getOutputStream();\n\n    ZipOutputStream zos = new ZipOutputStream(os);\n\n    PdfFactory.zipFileDownload(zos, employees, mulNO, divNo, monthly, pds.get(0));\n\n    zos.flush();\n\n    zos.close();\n\n    os.flush();\n    os.close();\n\n    return mapping.findForward(\"masteradmin.form\");\n  }\n"}, {"dataset": "getInstance", "exampleID": 956, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 75, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setFirstDayOfWeek(int)", "calndr.set(int,int)"], "useStart": [103, 147], "useEnd": [141, 172], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BohemianTeam/MoneyProject/tree/master/iBC/LmcLib.Widget_origin/src/vn/lmchanh/lib/widget/calendar/fragment/DayFragment.java", "rawCode": "  @Override\n  protected Calendar getDefaultCalendar() {\n    Calendar cal = Calendar.getInstance();\n    cal.setFirstDayOfWeek(Calendar.MONDAY);\n    cal.set(Calendar.DATE, 1);\n    return cal;\n  }\n"}, {"dataset": "getInstance", "exampleID": 957, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 219, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format(calndr)", "getTimeZone(calndr)"], "useStart": [261, 290], "useEnd": [272, 306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tavlima/fosstrak-epcis/tree/master/epcis-captureclient/src/test/java/org/fosstrak/epcis/captureclient/SampleEventsGenerator.java", "rawCode": "  /**\n   * Generates <code>nr</code> ObjectEvents and writes them to a file called <code>fileName</code>.\n   */\n  public static void generateObjectEvents(String fileName, int nr) throws IOException {\n    Calendar now = Calendar.getInstance();\n    String time = format(now);\n    String tz = getTimeZone(now);\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\");\n    sb.append(\n        \"<epcis:EPCISDocument xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:epcis=\\\"urn:epcglobal:epcis:xsd:1\\\" xmlns:epcglobal=\\\"urn:epcglobal:xsd:1\\\" xsi:schemaLocation=\\\"urn:epcglobal:epcis:xsd:1 EPCglobal-epcis-1_0.xsd\\\"\");\n    sb.append(\" creationDate=\\\"\").append(time).append(\"\\\" schemaVersion=\\\"1.0\\\">\");\n    sb.append(\"<EPCISBody>\");\n    sb.append(\"<EventList>\");\n    for (int epcSerialNr = 0; epcSerialNr < nr; epcSerialNr++) {\n      String epc = \"urn:epc:id:sgtin:1.1.\" + epcSerialNr;\n      sb.append(\"<ObjectEvent>\");\n      sb.append(\"<eventTime>\").append(time).append(\"</eventTime>\");\n      sb.append(\"<recordTime>\").append(time).append(\"</recordTime>\");\n      sb.append(\"<eventTimeZoneOffset>\").append(tz).append(\"</eventTimeZoneOffset>\");\n      sb.append(\"<epcList>\");\n      sb.append(\"<epc>\").append(epc).append(\"</epc>\");\n      sb.append(\"</epcList>\");\n      sb.append(\"<action>ADD</action>\");\n      sb.append(\"<bizStep>urn:fosstrak:demo:bizstep:testing</bizStep>\");\n      sb.append(\"<disposition>urn:fosstrak:demo:disp:testing</disposition>\");\n      sb.append(\"<readPoint>\");\n      sb.append(\"<id>urn:fosstrak:demo:rp:1.1</id>\");\n      sb.append(\"</readPoint>\");\n      sb.append(\"<bizLocation>\");\n      sb.append(\"<id>urn:fosstrak:demo:loc:1.1</id>\");\n      sb.append(\"</bizLocation>\");\n      sb.append(\"<bizTransactionList>\");\n      sb.append(\n          \"<bizTransaction type=\\\"urn:fosstrak:demo:btt:testing\\\">urn:fosstrak:demo:biztrans:1.1</bizTransaction>\");\n      sb.append(\"</bizTransactionList>\");\n      sb.append(\"</ObjectEvent>\");\n    }\n    sb.append(\"</EventList>\");\n    sb.append(\"</EPCISBody>\");\n    sb.append(\"</epcis:EPCISDocument>\");\n    BufferedWriter bw = new BufferedWriter(new FileWriter(fileName));\n    bw.write(sb.toString());\n    bw.close();\n  }\n"}, {"dataset": "getInstance", "exampleID": 958, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance(zone,aLocale)", "focalAPIStart": 416, "focalAPIEnd": 464, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.set(int,int,int,int,int,int)", "calndr.set(int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.set(int,int)", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.clear(int)", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.clear(int)", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.get(int)", "calndr.get(int)", "calndr.clear(int)", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()", "calndr.get(int)", "calndr.clear(int)", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calendar.getInstance(*)", "calndr.clear(int)", "calndr.set(int,int,int,int,int,int)", "calndr.getTime()", "calndr.set(int,int)", "calndr.getTime()"], "useStart": [470, 545, 713, 759, 804, 849, 903, 952, 991, 1059, 1120, 1196, 1258, 1358, 1404, 1449, 1494, 1548, 1844, 1902, 1978, 2054, 2111, 2211, 2257, 2302, 2347, 2631, 2677, 2753, 2829, 2886, 2984, 3030, 3075, 3422, 3468, 3546, 3622, 3684, 3781, 3827, 4239, 4285, 4440, 4516, 4571, 4670, 4707, 4753, 4825, 5214, 5710, 5756, 5818, 5894, 5949], "useEnd": [492, 582, 740, 787, 831, 883, 932, 981, 1049, 1100, 1138, 1241, 1276, 1385, 1432, 1476, 1528, 1577, 1892, 1958, 1996, 2094, 2129, 2238, 2285, 2329, 2381, 2667, 2733, 2771, 2869, 2904, 3011, 3058, 3102, 3458, 3526, 3564, 3667, 3702, 3808, 3855, 4275, 4332, 4458, 4554, 4589, 4697, 4743, 4791, 4843, 5249, 5746, 5798, 5836, 5932, 5967], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/petergodfrey/TradeSimulator/tree/master/jfreechart-1.0.14/source/org/jfree/chart/axis/DateAxis.java", "rawCode": "  /**\n   * Returns the previous \"standard\" date, for a given date and tick unit.\n   *\n   * @param date the reference date.\n   * @param unit the tick unit.\n   * @return The previous \"standard\" date.\n   */\n  protected Date previousStandardDate(Date date, DateTickUnit unit) {\n\n    int milliseconds;\n    int seconds;\n    int minutes;\n    int hours;\n    int days;\n    int months;\n    int years;\n\n    Calendar calendar = Calendar.getInstance(this.timeZone, this.locale);\n    calendar.setTime(date);\n    int count = unit.getCount();\n    int current = calendar.get(unit.getCalendarField());\n    int value = count * (current / count);\n\n    switch (unit.getUnit()) {\n      case (DateTickUnit.MILLISECOND):\n        years = calendar.get(Calendar.YEAR);\n        months = calendar.get(Calendar.MONTH);\n        days = calendar.get(Calendar.DATE);\n        hours = calendar.get(Calendar.HOUR_OF_DAY);\n        minutes = calendar.get(Calendar.MINUTE);\n        seconds = calendar.get(Calendar.SECOND);\n        calendar.set(years, months, days, hours, minutes, seconds);\n        calendar.set(Calendar.MILLISECOND, value);\n        Date mm = calendar.getTime();\n        if (mm.getTime() >= date.getTime()) {\n          calendar.set(Calendar.MILLISECOND, value - 1);\n          mm = calendar.getTime();\n        }\n        return mm;\n\n      case (DateTickUnit.SECOND):\n        years = calendar.get(Calendar.YEAR);\n        months = calendar.get(Calendar.MONTH);\n        days = calendar.get(Calendar.DATE);\n        hours = calendar.get(Calendar.HOUR_OF_DAY);\n        minutes = calendar.get(Calendar.MINUTE);\n        if (this.tickMarkPosition == DateTickMarkPosition.START) {\n          milliseconds = 0;\n        } else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n          milliseconds = 500;\n        } else {\n          milliseconds = 999;\n        }\n        calendar.set(Calendar.MILLISECOND, milliseconds);\n        calendar.set(years, months, days, hours, minutes, value);\n        Date dd = calendar.getTime();\n        if (dd.getTime() >= date.getTime()) {\n          calendar.set(Calendar.SECOND, value - 1);\n          dd = calendar.getTime();\n        }\n        return dd;\n\n      case (DateTickUnit.MINUTE):\n        years = calendar.get(Calendar.YEAR);\n        months = calendar.get(Calendar.MONTH);\n        days = calendar.get(Calendar.DATE);\n        hours = calendar.get(Calendar.HOUR_OF_DAY);\n        if (this.tickMarkPosition == DateTickMarkPosition.START) {\n          seconds = 0;\n        } else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n          seconds = 30;\n        } else {\n          seconds = 59;\n        }\n        calendar.clear(Calendar.MILLISECOND);\n        calendar.set(years, months, days, hours, value, seconds);\n        Date d0 = calendar.getTime();\n        if (d0.getTime() >= date.getTime()) {\n          calendar.set(Calendar.MINUTE, value - 1);\n          d0 = calendar.getTime();\n        }\n        return d0;\n\n      case (DateTickUnit.HOUR):\n        years = calendar.get(Calendar.YEAR);\n        months = calendar.get(Calendar.MONTH);\n        days = calendar.get(Calendar.DATE);\n        if (this.tickMarkPosition == DateTickMarkPosition.START) {\n          minutes = 0;\n          seconds = 0;\n        } else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n          minutes = 30;\n          seconds = 0;\n        } else {\n          minutes = 59;\n          seconds = 59;\n        }\n        calendar.clear(Calendar.MILLISECOND);\n        calendar.set(years, months, days, value, minutes, seconds);\n        Date d1 = calendar.getTime();\n        if (d1.getTime() >= date.getTime()) {\n          calendar.set(Calendar.HOUR_OF_DAY, value - 1);\n          d1 = calendar.getTime();\n        }\n        return d1;\n\n      case (DateTickUnit.DAY):\n        years = calendar.get(Calendar.YEAR);\n        months = calendar.get(Calendar.MONTH);\n        if (this.tickMarkPosition == DateTickMarkPosition.START) {\n          hours = 0;\n          minutes = 0;\n          seconds = 0;\n        } else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n          hours = 12;\n          minutes = 0;\n          seconds = 0;\n        } else {\n          hours = 23;\n          minutes = 59;\n          seconds = 59;\n        }\n        calendar.clear(Calendar.MILLISECOND);\n        calendar.set(years, months, value, hours, 0, 0);\n        // long result = calendar.getTimeInMillis();\n        // won't work with JDK 1.3\n        Date d2 = calendar.getTime();\n        if (d2.getTime() >= date.getTime()) {\n          calendar.set(Calendar.DATE, value - 1);\n          d2 = calendar.getTime();\n        }\n        return d2;\n\n      case (DateTickUnit.MONTH):\n        years = calendar.get(Calendar.YEAR);\n        calendar.clear(Calendar.MILLISECOND);\n        calendar.set(years, value, 1, 0, 0, 0);\n        Month month = new Month(calendar.getTime(), this.timeZone, this.locale);\n        Date standardDate = calculateDateForPosition(month, this.tickMarkPosition);\n        long millis = standardDate.getTime();\n        if (millis >= date.getTime()) {\n          month = (Month) month.previous();\n          // need to peg the month in case the time zone isn't the\n          // default - see bug 2078057\n          month.peg(Calendar.getInstance(this.timeZone));\n          standardDate = calculateDateForPosition(month, this.tickMarkPosition);\n        }\n        return standardDate;\n\n      case (DateTickUnit.YEAR):\n        if (this.tickMarkPosition == DateTickMarkPosition.START) {\n          months = 0;\n          days = 1;\n        } else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n          months = 6;\n          days = 1;\n        } else {\n          months = 11;\n          days = 31;\n        }\n        calendar.clear(Calendar.MILLISECOND);\n        calendar.set(value, months, days, 0, 0, 0);\n        Date d3 = calendar.getTime();\n        if (d3.getTime() >= date.getTime()) {\n          calendar.set(Calendar.YEAR, value - 1);\n          d3 = calendar.getTime();\n        }\n        return d3;\n\n      default:\n        return null;\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 959, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 142, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toJson(calndr)"], "useStart": [130], "useEnd": [165], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhouxiaoxiaoxujian/gson/tree/master/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java", "rawCode": "  public void testDefaultCalendarSerialization() throws Exception {\n    Gson gson = new GsonBuilder().create();\n    String json = gson.toJson(Calendar.getInstance());\n    assertTrue(json.contains(\"year\"));\n    assertTrue(json.contains(\"month\"));\n    assertTrue(json.contains(\"dayOfMonth\"));\n    assertTrue(json.contains(\"hourOfDay\"));\n    assertTrue(json.contains(\"minute\"));\n    assertTrue(json.contains(\"second\"));\n  }\n"}, {"dataset": "getInstance", "exampleID": 960, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 327, "focalAPIEnd": 349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()", "calendar.getInstance()", "calndr.getTime()"], "useStart": [327, 391, 391], "useEnd": [359, 413, 423], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aumann/emfstore.core/tree/master/org.eclipse.emf.emfstore.client.test/src/org/eclipse/emf/emfstore/client/test/SetupHelper.java", "rawCode": "  /**\n   * Create LogMessage.\n   *\n   * @param name name\n   * @param message message\n   * @return LogMessage\n   */\n  public static LogMessage createLogMessage(String name, String message) {\n    final LogMessage logMessage = VersioningFactory.eINSTANCE.createLogMessage();\n    logMessage.setAuthor(name);\n    logMessage.setDate(Calendar.getInstance().getTime());\n    logMessage.setClientDate(Calendar.getInstance().getTime());\n    logMessage.setMessage(message);\n    return logMessage;\n  }\n"}, {"dataset": "getInstance", "exampleID": 961, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 247, "focalAPIEnd": 279, "followUpCheck": "calndr.get(calendar.YEAR) != year", "checkType": "IF", "followUpCheckExpressionStart": 329, "followUpCheckExpressionEnd": 374, "followUpCheckBlockStart": 329, "followUpCheckBlockEnd": 402, "use": ["calndr.setTime(Date)"], "useStart": [287], "useEnd": [321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bdumitriu/playground/tree/master/university-work/uu/distributed object systems/project/src/client/ClientAppointmentModel.java", "rawCode": "  public List<Appointment> getAppointments(int year, int month, int day) {\n    List<Appointment> monthApps = new ArrayList<Appointment>();\n\n    for (Appointment app : apps) {\n      Period period = app.getTimeSlot();\n      java.util.Calendar cal = java.util.Calendar.getInstance();\n      cal.setTime(period.getStartDate());\n      if (cal.get(java.util.Calendar.YEAR) != year) {\n        continue;\n      }\n      if (cal.get(java.util.Calendar.MONTH) != month) {\n        continue;\n      }\n      if (cal.get(java.util.Calendar.DAY_OF_MONTH) != day) {\n        continue;\n      }\n      monthApps.add(app);\n    }\n    return monthApps;\n  }\n"}, {"dataset": "getInstance", "exampleID": 962, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 219, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.getTime()", "calndr.setTime(Date)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.getTime()"], "useStart": [247, 286, 324, 357, 390, 488, 509, 545, 584, 618, 652, 748], "useEnd": [279, 318, 351, 384, 422, 501, 539, 578, 612, 646, 686, 761], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniApp/smj/tree/master/src/01java/src/com/smj/util/DateUtil.java", "rawCode": "  /**\n   * set the begin time of the date range to 00:00:00, and the end time of the date range to\n   * 23:59:59.\n   *\n   * @param m : the date range map.\n   */\n  private static void setTime(Map m) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTime((Date) m.get(BEGIN));\n\n    cal.set(Calendar.HOUR_OF_DAY, 0);\n    cal.set(Calendar.MINUTE, 0);\n    cal.set(Calendar.SECOND, 0);\n    cal.set(Calendar.MILLISECOND, 0);\n\n    // put the start of the date range to Map\n    m.put(BEGIN, cal.getTime());\n\n    cal.setTime((Date) m.get(END));\n    cal.set(Calendar.HOUR_OF_DAY, 23);\n    cal.set(Calendar.MINUTE, 59);\n    cal.set(Calendar.SECOND, 59);\n    cal.set(Calendar.MILLISECOND, 999);\n\n    // put the end of the date range to Map\n    m.put(END, cal.getTime());\n  }\n"}, {"dataset": "getInstance", "exampleID": 963, "initialization": ["TimeZone zone = Calendar.getTimeZone(String)"], "initializationStart": [499], "initializationEnd": [526], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance(zone)", "focalAPIStart": 572, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calendar.getInstance(TimeZone)", "calendar.getInstance(TimeZone)", "calendar.getInstance(TimeZone)", "calndr.set(Integer,Integer,Integer,Integer,Integer,Integer)", "calndr.set(*,Integer)", "assertValidDate(String,calndr,boolean)"], "useStart": [638, 704, 768, 980, 1065, 2114], "useEnd": [663, 729, 793, 1059, 1133, 2185], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/forcedotcom/dataloader/tree/master/src/test/java/com/salesforce/dataloader/dyna/DateConverterTest.java", "rawCode": "  /**\n   * Verify that specifying various degrees of specificity in the time are all processed correctly\n   * wrt the time that they represent. Note that there is no such thing as European format with\n   * respect to ISO 8601. Namely, the specific order of the month and date is there to remove any\n   * ambiguity.\n   *\n   * @expectedResults Assert that all strings correct map to their corresponding calendars.\n   */\n  @Test\n  public void testDegreesOfPrecisionInTimeString() {\n\n    TimeZone gmt = TimeZone.getTimeZone(\"GMT\");\n    Calendar millisecondPrecisionCalendar = Calendar.getInstance(gmt);\n    Calendar secondPrecisionCalendar = Calendar.getInstance(gmt);\n    Calendar minutePrecisionCalendar = Calendar.getInstance(gmt);\n    Calendar hourPrecisionCalendar = Calendar.getInstance(gmt);\n\n    Integer year = 2011;\n    Integer month = 10;\n    Integer day = 15;\n    Integer hours = 19;\n    Integer minutes = 18;\n    Integer seconds = 57;\n    Integer milliseconds = 329;\n\n    millisecondPrecisionCalendar.set(year, month - 1, day, hours, minutes, seconds);\n    millisecondPrecisionCalendar.set(Calendar.MILLISECOND, milliseconds);\n\n    secondPrecisionCalendar.set(year, month - 1, day, hours, minutes, seconds);\n    secondPrecisionCalendar.set(Calendar.MILLISECOND, 0);\n\n    minutePrecisionCalendar.set(year, month - 1, day, hours, minutes, 0);\n    minutePrecisionCalendar.set(Calendar.MILLISECOND, 0);\n\n    hourPrecisionCalendar.set(year, month - 1, day, hours, 0, 0);\n    hourPrecisionCalendar.set(Calendar.MILLISECOND, 0);\n\n    for (String dayDateDelimiter : new String[] {\"T\", \" \"}) {\n      for (String dateDel : new String[] {\"-\", \"\"}) {\n\n        String hourString =\n            year.toString()\n                + dateDel\n                + month.toString()\n                + dateDel\n                + day.toString()\n                + dayDateDelimiter\n                + hours.toString();\n        String minuteString = hourString + \":\" + minutes;\n        String secondString = minuteString + \":\" + seconds.toString();\n        String millisecondString = secondString + \".\" + milliseconds.toString();\n\n        assertValidDate(millisecondString, millisecondPrecisionCalendar, false);\n        assertValidDate(secondString, secondPrecisionCalendar, false);\n        assertValidDate(minuteString, minutePrecisionCalendar, false);\n        assertValidDate(hourString, hourPrecisionCalendar, false);\n      }\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 964, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 729, "focalAPIEnd": 751, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int)", "calndr.getTime()"], "useStart": [757, 824], "useEnd": [788, 835], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jarvis-su/codes/tree/master/dataOperation/src/main/java/sqlite/Main.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    // method();\n    String formatStr = \"yyyy-MM-dd HH:mm:ss\";\n    SimpleDateFormat sdf = new SimpleDateFormat(formatStr);\n    String beginStr = \"2013-06-04 18:34:49\";\n    String endStr = \"2013-06-04 19:00:00\";\n    Date beginDate = new Date();\n    Date endDate = new Date();\n    try {\n      beginDate = sdf.parse(beginStr);\n      endDate = sdf.parse(endStr);\n\n      float hours = (float) ((endDate.getTime() - beginDate.getTime()) / 1000.0 / 60.0 / 60.0);\n      System.out.println(hours);\n    } catch (ParseException e) {\n      e.printStackTrace();\n    }\n    System.out.println(sdf.format(beginDate));\n    System.out.println(sdf.format(endDate));\n\n    Calendar c = Calendar.getInstance();\n    c.set(Calendar.HOUR_OF_DAY, 20);\n    System.out.println(sdf.format(c.getTime()));\n\n    getNonWorkingHours(beginDate, endDate);\n  }\n"}, {"dataset": "getInstance", "exampleID": 965, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 107, "focalAPIEnd": 129, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)", "calndr.getTime()", "calendar.getInstance()"], "useStart": [135, 186, 215], "useEnd": [170, 199, 237], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shehriih/Practicum_Project/tree/master/AndSensor/src/com/rimproject/contextanalyzer/DeviceStatus.java", "rawCode": "  public double checkAccelerometerActivityLevel(int duration) {\n    double result = 0;\n\n    Calendar cal = Calendar.getInstance();\n    cal.add(Calendar.SECOND, -duration);\n    Date d1 = cal.getTime();\n    Date d2 = Calendar.getInstance().getTime();\n\n    FileLoggingIO<AccelerometerReading> fio = new FileLoggingIO<AccelerometerReading>();\n    HashMap<Date, List<AccelerometerReading>> map =\n        fio.readFromTXTLogFile(\n            AccelerometerLogger.SENSOR_NAME, new AccelerometerReading(), null, d1, d2);\n\n    Set<Date> es = map.keySet();\n    TreeSet<Date> ts = new TreeSet<Date>(es);\n\n    int numberOfReadings = 0;\n    double accumulator = 0.0;\n    for (Date key : ts) {\n      for (AccelerometerReading reading : map.get(key)) {\n        numberOfReadings++;\n        accumulator += reading.getACCVector();\n      }\n    }\n    result = accumulator / numberOfReadings; // average of all readings\n\n    return result;\n  }\n"}, {"dataset": "getInstance", "exampleID": 966, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 227, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.getTimeInMillis()"], "useStart": [257, 286], "useEnd": [271, 307], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mbastian/gephi-maven/tree/master/modules/DataLaboratoryAPI/src/main/java/org/gephi/datalab/impl/AttributeColumnsMergeStrategiesControllerImpl.java", "rawCode": "  private double parseDateToDouble(SimpleDateFormat dateFormat, String date, double defaultValue) {\n    if (date == null) {\n      return defaultValue;\n    }\n    try {\n      Date d = dateFormat.parse(date);\n      Calendar cal = Calendar.getInstance();\n      cal.setTime(d);\n      return cal.getTimeInMillis();\n    } catch (Exception ex) {\n      return defaultValue;\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 967, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 67, "focalAPIEnd": 89, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)"], "useStart": [95], "useEnd": [124], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jk-5/nexus-java/tree/master/src/com/nexus/time/NexusTime.java", "rawCode": "  public static Calendar GetCurrentCalendar() {\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(GetCurrentDate());\n    return cal;\n  }\n"}, {"dataset": "getInstance", "exampleID": 968, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 51, "focalAPIEnd": 73, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.add(int,int)", "calndr.getTime()"], "useStart": [79, 101, 147], "useEnd": [95, 135, 160], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/unidevel/android/tree/master/TicketBot/src/com/unidevel/app/Tickets.java", "rawCode": "  public void clear(Date now) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(now);\n    cal.add(Calendar.DAY_OF_MONTH, -1);\n    now = cal.getTime();\n    for (int i = ticketList.size() - 1; i >= 0; --i) {\n      Ticket ticket = ticketList.get(i);\n      if (ticket.date.before(now)) ticketList.remove(i);\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 969, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 658, "focalAPIEnd": 680, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()"], "useStart": [658], "useEnd": [690], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/enwida/idpRepo/tree/master/workspace/enwida/src/main/java/de/enwida/web/controller/UploadController.java", "rawCode": "  @RequestMapping(value = \"/updateMetadata\", method = RequestMethod.POST)\n  public ModelAndView updateUploadedFileMetaData(\n      ModelMap model,\n      @ModelAttribute(value = \"fileMetaDataUpdate\") FileUpload fileUpload,\n      BindingResult result,\n      HttpServletRequest request)\n      throws Exception {\n    Aspect newAspect = Aspect.valueOf(fileUpload.getAspectName().toUpperCase());\n    Long fileId = Long.parseLong(fileUpload.getFileIdToBeReplaced());\n    UploadedFile uploadedfile = uploadFileService.getFile(fileId, fileUpload.getRevision());\n    uploadedfile.getMetaData().setAspect(newAspect.getAspectName());\n    uploadedfile.setModificationDate(Calendar.getInstance().getTime());\n    User updatedUser =\n        uploadFileService.updateUserUploadedFile(userSession.getUser(), uploadedfile);\n    userSession.setUserInSession(updatedUser);\n    return new ModelAndView(\"redirect:/user/upload/files\");\n  }\n"}, {"dataset": "getInstance", "exampleID": 970, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 543, "focalAPIEnd": 565, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setStartTime(calndr)"], "useStart": [509], "useEnd": [566], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nasa/coeci-cms-mpsp/tree/master/pesp-was8.5/services/src/main/java/gov/medicaid/binders/XMLUtility.java", "rawCode": "  /**\n   * Audits the start of a process execution.\n   *\n   * @param model the enrollment process model\n   * @param nodeId the node id\n   * @param nodeName the node name\n   */\n  public static void auditStart(EnrollmentProcess model, long nodeId, String nodeName) {\n    ProcessAuditType processAudit = nsGetProcessAudit(model);\n    ProcessExecutionType processExecutionType = new ProcessExecutionType();\n    processExecutionType.setObjectId(\"\" + nodeId);\n    processExecutionType.setProcessName(nodeName);\n    processExecutionType.setStartTime(Calendar.getInstance());\n    processAudit.getProcessExecutions().add(processExecutionType);\n  }\n"}, {"dataset": "getInstance", "exampleID": 971, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 792, "focalAPIEnd": 814, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calendar.getInstance()", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "setUpdateCalendar(calndr,Calendar)"], "useStart": [820, 860, 1114, 1163, 1211, 1246], "useEnd": [841, 882, 1134, 1184, 1239, 1269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dimagi/rapidandroid/tree/master/rapidandroid/org.rapidandroid/src/org/rapidandroid/activity/DateRange.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    // TODO Auto-generated method stub\n    super.onCreate(savedInstanceState);\n    setTitle(\"Select Date Range\");\n    setContentView(R.layout.date_range);\n    setEventListeners();\n    Bundle extras = getIntent().getExtras();\n\n    if (extras != null) {\n      if (!extras.containsKey(CallParams.ACTIVITY_ARG_STARTDATE)) {\n        throw new IllegalArgumentException(\n            \"This activity must be called with an appropriate startdate in the past.\");\n      }\n\n      mStartDate = new Date(extras.getLong(CallParams.ACTIVITY_ARG_STARTDATE));\n      mEndDate = new Date(); // now\n    }\n\n    txvStartDate = (TextView) findViewById(R.id.txv_startdate);\n    txvEndDate = (TextView) findViewById(R.id.txv_enddate);\n    Calendar s = Calendar.getInstance();\n    s.setTime(mStartDate);\n    Calendar e = Calendar.getInstance();\n    e.setTime(mEndDate);\n    // e.set(Calendar.DATE, e.get(Calendar.DATE)+1); //we want to increment\n    // this by one day to avoid against running up against boundary\n    // conditions on recent data.\n\n    mStartBeginningYear = s.get(Calendar.YEAR);\n    mStartBeginningMonth = s.get(Calendar.MONTH);\n    mStartBeginningDay = s.get(Calendar.DAY_OF_MONTH);\n\n    setUpdateCalendar(s, e);\n  }\n"}, {"dataset": "getInstance", "exampleID": 972, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 57, "focalAPIEnd": 79, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int,int,int,int)", "calndr.getTime()"], "useStart": [304, 377], "useEnd": [364, 390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BrentDouglas/richfaces-3/tree/master/test-applications/seamApp/web/src/main/java/org/richfaces/helloworld/domain/calendar/CalendarBean.java", "rawCode": "  public Date getPrDateRangeBegin() {\n    Calendar cal = Calendar.getInstance();\n    StringTokenizer st = new StringTokenizer(preloadDateRangeBegin, \".\");\n    ArrayList<Integer> date = new ArrayList<Integer>();\n    while (st.hasMoreTokens()) {\n      date.add(Integer.parseInt(st.nextToken()));\n    }\n    cal.set(date.get(2), date.get(1) - 1, date.get(0), 12, 0, 0);\n    return cal.getTime();\n  }\n"}, {"dataset": "getInstance", "exampleID": 973, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 63, "focalAPIEnd": 85, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)", "calndr.getTime()"], "useStart": [91, 145], "useEnd": [132, 163], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ltackmann/java-samples/tree/master/ws/backend/src/test/java/org/randompage/samples/ws/backend/SpringTest.java", "rawCode": "  private Date daysFromNow(int days) {\n    Calendar instance = Calendar.getInstance();\n    instance.add(Calendar.DAY_OF_MONTH, days);\n    return instance.getTime();\n  }\n"}, {"dataset": "getInstance", "exampleID": 974, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 98, "focalAPIEnd": 120, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calendar.getInstance(*)", "calendar.getInstance(*)"], "useStart": [128, 172], "useEnd": [164, 215], "hasFinally": 1, "cleanUpCall": ["Statement.close()"], "finallyExpressionStart": 725, "finallyExpressionEnd": 733, "finallyBlockStart": 725, "finallyBlockEnd": 831, "cleanUpCallStart": [763], "cleanUpCallEnd": [773], "url": "https://github.com/codefireX/platform_libcore/tree/master/luni/src/test/java/libcore/java/sql/OldPreparedStatementTest.java", "rawCode": "  public void testSetTime_int_Time_Calendar() throws SQLException {\n    Calendar[] cals = {\n      Calendar.getInstance(),\n      Calendar.getInstance(Locale.GERMANY),\n      Calendar.getInstance(TimeZone.getDefault())\n    };\n\n    Time[] times = {new Time(24, 25, 26), new Time(Integer.MAX_VALUE), new Time(123456789)};\n\n    PreparedStatement ps = null;\n    PreparedStatement ps1 = null;\n    try {\n      String query = \"insert into type (timeVal) values (?);\";\n      ps = conn.prepareStatement(query);\n      Statement st = null;\n      for (int i = 0; i < times.length; i++) {\n        try {\n          ps.setTime(1, times[i], cals[i]);\n          assertFalse(ps.execute());\n          assertTrue(ps.getUpdateCount() > 0);\n        } finally {\n          try {\n            st.close();\n          } catch (Exception ee) {\n          }\n        }\n      }\n\n      try {\n        ps.setTime(2, times[0], cals[0]);\n        fail(\"SQLException is not thrown\");\n      } catch (Exception sqle) {\n        // expected\n      }\n\n      ps.close();\n\n      try {\n        ps.setTime(-2, times[0], cals[1]);\n        fail(\"SQLException is not thrown\");\n      } catch (Exception sqle) {\n        // expected\n      }\n      String query1 = \"insert into type (Tint) values (?);\";\n      ps1 = conn.prepareStatement(query1);\n      ps1.setTime(1, times[0], cals[2]);\n      ps1.execute();\n    } finally {\n      try {\n        ps.close();\n        ps1.close();\n      } catch (Exception ee) {\n      }\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 975, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 200, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "appendDate(StringBuffer,calndr)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)"], "useStart": [228, 296, 350, 414, 473], "useEnd": [245, 316, 379, 438, 497], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/papousek/GpsMid/tree/master/src/de/ueller/util/HelperRoutines.java", "rawCode": "  /**\n   * Date-Time formatter that corresponds to the standard UTC time as used in XML\n   *\n   * @param time\n   * @return\n   */\n  public static final String formatUTC(Date time) {\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(time);\n    StringBuffer buf = new StringBuffer(20);\n    appendDate(buf, cal).append('T');\n    appendInt2(buf, cal.get(Calendar.HOUR_OF_DAY)).append(':');\n    appendInt2(buf, cal.get(Calendar.MINUTE)).append(':');\n    appendInt2(buf, cal.get(Calendar.SECOND)).append('Z');\n    return buf.toString();\n  }\n"}, {"dataset": "getInstance", "exampleID": 976, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 2297, "focalAPIEnd": 2319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.getTime()"], "useStart": [2528, 2838], "useEnd": [2550, 2849], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ramesesinc/clfc/tree/master/platform/android/PaymentCollectionApp/src/com/rameses/paymentcollectionapp/CollectionSheetInfo.java", "rawCode": "  @Override\n  protected void onStart() {\n    super.onStart();\n    getApp().setCurrentActivity(this);\n    SQLiteDatabase db = getDbHelper().getReadableDatabase();\n    Cursor result = getDbHelper().getCollectionsheetByLoanappid(db, loanappid);\n    db.close();\n\n    String acctname = \"\";\n    String appno = \"\";\n    BigDecimal amountdue = new BigDecimal(\"0\").setScale(2);\n    BigDecimal loanamount = new BigDecimal(\"0\").setScale(2);\n    BigDecimal balance = new BigDecimal(\"0\").setScale(2);\n    BigDecimal interest = new BigDecimal(\"0\").setScale(2);\n    BigDecimal penalty = new BigDecimal(\"0\").setScale(2);\n    BigDecimal others = new BigDecimal(\"0\").setScale(2);\n    int term = 0;\n    String duedate = \"\";\n    String homeaddress = \"\";\n    String collectionaddress = \"\";\n\n    if (result != null && result.getCount() > 0) {\n      result.moveToFirst();\n      sessionid = result.getString(result.getColumnIndex(\"sessionid\"));\n      acctname = result.getString(result.getColumnIndex(\"acctname\"));\n      appno = result.getString(result.getColumnIndex(\"appno\"));\n      String amt = result.getString(result.getColumnIndex(\"amountdue\"));\n      amountdue = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"loanamount\"));\n      loanamount = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"balance\"));\n      balance = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"dailydue\"));\n      dailydue = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"overpaymentamount\"));\n      overpayment = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"interest\"));\n      interest = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"penalty\"));\n      penalty = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"others\"));\n      others = new BigDecimal(amt).setScale(2);\n      term = result.getInt(result.getColumnIndex(\"term\"));\n      refno = result.getString(result.getColumnIndex(\"refno\"));\n      homeaddress = result.getString(result.getColumnIndex(\"homeaddress\"));\n      collectionaddress = result.getString(result.getColumnIndex(\"collectionaddress\"));\n      Calendar c = Calendar.getInstance();\n      try {\n        Object date = result.getString(result.getColumnIndex(\"duedate\"));\n        if (!(date instanceof Date))\n          date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(date.toString());\n        c.setTime((Date) date);\n      } catch (Exception e) {\n        ApplicationUtil.showShortMsg(context, \"Error: ParseException\");\n      }\n      /*catch (Exception e) {\n      e.printStackTrace();\n      Toast.makeText(context, \"Error: ParseException\", Toast.LENGTH_SHORT).show();\n      }*/\n      duedate = df.format(c.getTime());\n      totaldays = amountdue.divide(dailydue, 2, BigDecimal.ROUND_HALF_UP).intValue();\n      if (paymenttype.equals(null) || paymenttype.equals(\"\"))\n        paymenttype = result.getString(result.getColumnIndex(\"paymentmethod\"));\n      result.close();\n    }\n\n    ((TextView) findViewById(R.id.tv_info_acctname)).setText(acctname);\n    ((TextView) findViewById(R.id.tv_info_appno)).setText(appno);\n    ((TextView) findViewById(R.id.tv_info_loanamount)).setText(formatValue(loanamount));\n    ((TextView) findViewById(R.id.tv_info_balance)).setText(formatValue(balance));\n    ((TextView) findViewById(R.id.tv_info_dailydue)).setText(formatValue(dailydue));\n    ((TextView) findViewById(R.id.tv_info_amountdue)).setText(formatValue(amountdue));\n    ((TextView) findViewById(R.id.tv_info_overpayment)).setText(formatValue(overpayment));\n    ((TextView) findViewById(R.id.tv_info_duedate)).setText(duedate);\n    ((TextView) findViewById(R.id.tv_info_homeaddress)).setText(homeaddress);\n    ((TextView) findViewById(R.id.tv_info_collectionaddress)).setText(collectionaddress);\n    ((TextView) findViewById(R.id.tv_info_interest)).setText(formatValue(interest));\n    ((TextView) findViewById(R.id.tv_info_penalty)).setText(formatValue(penalty));\n    ((TextView) findViewById(R.id.tv_info_others)).setText(formatValue(others));\n    ((TextView) findViewById(R.id.tv_info_term)).setText(term + \" days\");\n\n    db = getDbHelper().getReadableDatabase();\n    payment = getDbHelper().getPaymentsByAppid(db, loanappid);\n    remarks = getDbHelper().getRemarksByAppid(db, loanappid);\n    notes = getDbHelper().getNotesByAppid(db, loanappid);\n    db.close();\n\n    rl_remarks.setVisibility(View.GONE);\n    RelativeLayout remarks_child = (RelativeLayout) findViewById(R.id.rl_info_remarks);\n    remarks_child.setClickable(true);\n    remarks_child.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            // TODO Auto-generated method stub\n            v.setBackgroundResource(android.R.drawable.list_selector_background);\n          }\n        });\n    remarks_child.setOnLongClickListener(\n        new View.OnLongClickListener() {\n          @Override\n          public boolean onLongClick(View v) {\n            // TODO Auto-generated method stub\n            final View view = v;\n            v.setBackgroundResource(android.R.drawable.list_selector_background);\n            CharSequence[] items = {\"Edit Remarks\", \"Remove Remarks\"};\n            DialogInterface.OnClickListener listener =\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface d, int which) {\n                    // TODO Auto-generated method stub\n                    if (which == 0) {\n                      showRemarksDialog(\"edit\");\n                    } else if (which == 1) {\n                      SQLiteDatabase db = getDbHelper().getWritableDatabase();\n                      /*try {\n                      Map<String, Object> params = new HashMap<String, Object>();\n                      params.put(\"detailid\", detailid);\n                      postingProxy.invoke(\"removeRemarks\", new Object[]{params});\n                      } catch (Exception e) {}\n                      finally{\n                      db.removeRemarksByAppid(loanappid);\n                      }*/\n                      getDbHelper().removeRemarksByAppid(db, loanappid);\n                      Map<String, Object> map = new HashMap<String, Object>();\n                      map.put(\"loanappid\", loanappid);\n                      map.put(\"state\", \"PENDING\");\n                      map.put(\"longitude\", getApp().getLongitude());\n                      map.put(\"latitude\", getApp().getLatitude());\n                      getDbHelper().insertRemarksRemoved(db, map);\n                      db.close();\n                      remarks = null;\n                      rl_remarks.setVisibility(View.GONE);\n                      ApplicationUtil.showShortMsg(context, \"Successfully removed remarks.\");\n                    }\n                  }\n                };\n            ApplicationUtil.showOptionDialog(context, items, listener);\n            return false;\n          }\n        });\n    if (remarks != null && remarks.getCount() > 0) {\n      rl_remarks.setVisibility(View.VISIBLE);\n      ((TextView) findViewById(R.id.tv_info_remarks))\n          .setText(remarks.getString(remarks.getColumnIndex(\"remarks\")));\n    }\n\n    // ListView lv_info_payments = (ListView) findViewById(R.id.lv_info_payments);\n    LinearLayout ll_info_payments = (LinearLayout) findViewById(R.id.ll_specialcollection);\n    ll_info_payments.removeAllViewsInLayout();\n    rl_payment.setVisibility(View.GONE);\n\n    if (payment != null && payment.getCount() > 0) {\n      View child = null;\n      String paymenttype = \"\";\n      BigDecimal paymentamount = new BigDecimal(\"0\").setScale(2);\n      rl_payment.setVisibility(View.VISIBLE);\n      do {\n        child =\n            ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.item_payment, null);\n        ((TextView) child.findViewById(R.id.tv_info_refno))\n            .setText(payment.getString(payment.getColumnIndex(\"refno\")));\n        ((TextView) child.findViewById(R.id.tv_info_txndate))\n            .setText(payment.getString(payment.getColumnIndex(\"txndate\")));\n        ((TextView) child.findViewById(R.id.tv_info_paidby))\n            .setText(payment.getString(payment.getColumnIndex(\"paidby\")));\n        String type = payment.getString(payment.getColumnIndex(\"paymenttype\"));\n        if (type.equals(\"schedule\")) paymenttype = \"Schedule/Advance\";\n        else paymenttype = \"Overpayment\";\n        ((TextView) child.findViewById(R.id.tv_info_paymenttype)).setText(paymenttype);\n        String amt = payment.getDouble(payment.getColumnIndex(\"paymentamount\")) + \"\";\n        paymentamount = new BigDecimal(amt).setScale(2);\n        ((TextView) child.findViewById(R.id.tv_info_paymentamount))\n            .setText(formatValue(paymentamount));\n        child.setTag(R.id.paymentid, payment.getString(payment.getColumnIndex(\"objid\")));\n        addPaymentProperties(child);\n        db = getDbHelper().getReadableDatabase();\n        Cursor vp =\n            getDbHelper()\n                .getVoidPaymentByPaymentidAndAppid(\n                    db, payment.getString(payment.getColumnIndex(\"objid\")), loanappid);\n        db.close();\n\n        if (vp != null && vp.getCount() > 0) {\n          vp.moveToFirst();\n          String state = vp.getString(vp.getColumnIndex(\"state\"));\n          View overlay = null;\n          RelativeLayout.LayoutParams layoutParams =\n              new RelativeLayout.LayoutParams(\n                  RelativeLayout.LayoutParams.MATCH_PARENT,\n                  RelativeLayout.LayoutParams.MATCH_PARENT);\n          layoutParams.addRule(RelativeLayout.CENTER_VERTICAL, 1);\n          if (state.equals(\"PENDING\")) {\n            overlay =\n                ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                    .inflate(R.layout.overlay_void_text, null);\n            ((TextView) overlay).setTextColor(getResources().getColor(R.color.red));\n            ((TextView) overlay).setText(\"VOID REQUEST PENDING\");\n            overlay.setLayoutParams(layoutParams);\n            ((RelativeLayout) child).addView(overlay);\n            child.setOnClickListener(null);\n            child.setOnLongClickListener(null);\n            child.setClickable(false);\n          } else if (state.equals(\"APPROVED\")) {\n            overlay =\n                ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                    .inflate(R.layout.overlay_void_text, null);\n            ((TextView) overlay).setTextColor(getResources().getColor(R.color.green));\n            ((TextView) overlay).setText(\"VOID APPROVED\");\n            overlay.setLayoutParams(layoutParams);\n            ((RelativeLayout) child).addView(overlay);\n            addApprovedVoidPaymentProperies(child);\n          }\n          // vp.close();\n        }\n        ll_info_payments.addView(child);\n        // list.add(pp);\n      } while (payment.moveToNext());\n    }\n\n    rl_notes.setVisibility(View.GONE);\n    LinearLayout ll_notes = (LinearLayout) findViewById(R.id.ll_info_notes);\n    if (notes != null && notes.getCount() > 0) {\n      rl_notes.setVisibility(View.VISIBLE);\n      notes.moveToFirst();\n      ll_notes.removeAllViewsInLayout();\n      View child = null;\n      Date date = null;\n      String str = \"\";\n      int idx = 0;\n      do {\n        child =\n            ((LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.item_note, null);\n        // addNoteProperties(child);\n        str = \"\";\n        date = parseDate(notes.getString(notes.getColumnIndex(\"fromdate\")));\n        if (date != null) str = df.format(date);\n        ((TextView) child.findViewById(R.id.tv_info_refno)).setText(str);\n        str = \"\";\n        date = parseDate(notes.getString(notes.getColumnIndex(\"todate\")));\n        if (date != null) str = df.format(date);\n        ((TextView) child.findViewById(R.id.tv_info_txndate)).setText(str);\n        ((TextView) child.findViewById(R.id.tv_info_remarks))\n            .setText(notes.getString(notes.getColumnIndex(\"remarks\")));\n        // child.setTag(R.id.noteid, notes.getString(notes.getColumnIndex(\"objid\")));\n        // child.setTag(R.id.idx, idx);\n        idx++;\n        ll_notes.addView(child);\n      } while (notes.moveToNext());\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 977, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 95, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ReplacementProxyWebForward(*,int,String,String,String,String,String,String,String,String,*,String,String,boolean,calndr,Calendar)"], "useStart": [130], "useEnd": [465], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/branches/openvpn-als/web-forwards/test/src/net/openvpn/als/webforwards/ReplacementProxyWebForwardTests.java", "rawCode": "  @Override\n  public WebForward getNormalResource() throws Exception {\n    Calendar calendar = Calendar.getInstance();\n    return new ReplacementProxyWebForward(\n        getDefaultRealm().getRealmID(),\n        1,\n        \"http://mail.3sp.co.uk\",\n        \"OWA\",\n        \"Outlook web access.\",\n        \"General\",\n        \"\",\n        \"\",\n        \"None\",\n        \"\",\n        new PropertyList(),\n        \"\",\n        \"\",\n        false,\n        calendar,\n        calendar);\n  }\n"}, {"dataset": "getInstance", "exampleID": 978, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 429, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.add(int,int)", "calndr.getTime()"], "useStart": [1613, 1641, 1692], "useEnd": [1629, 1664, 1703], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mamgjigsaw/sece/tree/master/src/java/dwrScripts/initCapacitadores.java", "rawCode": "  public String getDelegadoxContrato(int idcontrato) {\n    String resultado = \"\";\n    ContratoDaoImpl cdi = new ContratoDaoImpl();\n    Contrato contra = cdi.findById(idcontrato);\n    DelegacionIndiUsuDaoImpl doii = new DelegacionIndiUsuDaoImpl();\n    List<DelegacionIndiUsu> delegados = doii.delegacionxContrato(contra);\n    DelegacionIndiUsu delegado;\n    Iterator<DelegacionIndiUsu> it = delegados.iterator();\n    Calendar c = Calendar.getInstance();\n    Date tiempoDgracia;\n\n    AccesoDaoImpl adi = new AccesoDaoImpl();\n    // var para ultimo acceso del usaurio\n    Date acces;\n    EmailInactividadDaoImpl eidi = new EmailInactividadDaoImpl();\n    EmailInactividad emi;\n    int intentos = 0;\n\n    if (it.hasNext()) {\n      resultado =\n          \"<table border='0' id='resultTable' width ='100%'><tr> <th>Delegado</th> <th>Ultimo Acceso</th> <th>Indicador</th> <th>Correo</th> <th>On-Line</th> </tr>\";\n\n      while (it.hasNext()) {\n        delegado = it.next();\n\n        try {\n          intentos = eidi.intentosEmailInactividadxUsuario(delegado.getUsuario());\n        } // captura si no hay registros de este cliente en la tabla email_inactividad\n        catch (java.lang.NullPointerException ne) {\n          /*si no hay registro de intento de este usuario crea uno con intentos 0*/\n          emi = new EmailInactividad(delegado.getUsuario(), 0);\n          eidi.create(emi);\n        }\n        // metodo que devuelve ultim acceso del usuario tal\n        acces = adi.fechaUltimoAcceso(delegado.getUsuario());\n        // determinar tiempo de inactividad si acceso no es nulo\n        if (acces != null) {\n          c.setTime(acces);\n          c.add(Calendar.DATE, 3);\n          tiempoDgracia = c.getTime();\n          if (new Date().after(tiempoDgracia)) {\n            resultado +=\n                \"<tr style='text-align:center;background-color:#FFF6B3;'> <input type='hidden' value='\"\n                    + delegado.getUsuario().getIdUsuario()\n                    + \"'/>\"\n                    + \" <td align='left' style='text-align:left;padding-left:3%;'><button class='btnSentEmail'>enviar correo</button><span class='cant_emailEnviados'>\"\n                    + intentos\n                    + \"</span>&nbsp;&nbsp;&nbsp;&nbsp;\"\n                    + delegado.getUsuario().getNombre()\n                    + \"</td>\";\n            resultado += \"<td class='tdFechaAcc'>\";\n            resultado += acces;\n            resultado += \"</td>\";\n          } else {\n            resultado +=\n                \"<tr style='text-align:center;'> <td>\"\n                    + delegado.getUsuario().getNombre()\n                    + \"</td>\";\n            resultado += \"<td class='tdFechaAcc'>\";\n            resultado += acces;\n            resultado += \"</td>\";\n          }\n        } else if (acces == null) {\n          resultado +=\n              \"<tr style='text-align:center;'> <td>\" + delegado.getUsuario().getNombre() + \"</td>\";\n          resultado += \"<td class='tdFechaAcc'>\";\n          resultado += \"(No hay registros de accesos)\";\n          resultado += \"</td>\";\n        }\n        resultado += \"<td>\" + delegado.getIndicador().getNombre() + \"</td>\";\n\n        resultado += \"<td>\" + delegado.getUsuario().getCorreo() + \"</td>\";\n\n        resultado += \"<td>\";\n        if (delegado.getUsuario().getEstado() == 1) {\n          resultado +=\n              \"<img src='images/offline-user-icon.png' title ='Usuario no Conectado' alt='Usuario no Conectado'/>\";\n        } else if (delegado.getUsuario().getEstado() == 2) {\n          resultado +=\n              \"<img src='images/user-online-icon.png' title ='Usuario Conectado' alt='Usuario Conectado'/>\";\n        } else if (delegado.getUsuario().getEstado() == 3) {\n          resultado +=\n              \"<img src='images/video-chat-icon.png' title ='Usuario en Videollamada' alt='Usuario en Videollamada'/>\";\n        } else if (delegado.getUsuario().getEstado() == 4) {\n          resultado +=\n              \"<img src='images/remove-user-icon.png' title ='Usuario dado de baja' alt='Usuario dado de baja'/>\";\n        }\n        resultado += \"</td></tr>\";\n      } // fin while\n      resultado += \"</table>\";\n    } // fin if\n\n    return resultado;\n  }\n"}, {"dataset": "getInstance", "exampleID": 979, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 290, "focalAPIEnd": 312, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bobeal/capdemat/tree/master/Model/src/java/fr/cg95/cvq/business/request/leisure/SmsNotificationRequest.java", "rawCode": "  public static SmsNotificationRequest xmlToModel(\n      SmsNotificationRequestDocument smsNotificationRequestDoc) {\n    SmsNotificationRequestDocument.SmsNotificationRequest smsNotificationRequestXml =\n        smsNotificationRequestDoc.getSmsNotificationRequest();\n    Calendar calendar = Calendar.getInstance();\n    LocalTime localTime = new LocalTime();\n    List list = new ArrayList();\n    SmsNotificationRequest smsNotificationRequest = new SmsNotificationRequest();\n    smsNotificationRequest.fillCommonModelInfo(smsNotificationRequest, smsNotificationRequestXml);\n\n    smsNotificationRequest.setCleverSmsContactId(smsNotificationRequestXml.getCleverSmsContactId());\n\n    List<fr.cg95.cvq.business.request.LocalReferentialData> interestsList =\n        new ArrayList<fr.cg95.cvq.business.request.LocalReferentialData>(\n            smsNotificationRequestXml.sizeOfInterestsArray());\n    for (LocalReferentialDataType object : smsNotificationRequestXml.getInterestsArray()) {\n      interestsList.add(fr.cg95.cvq.business.request.LocalReferentialData.xmlToModel(object));\n    }\n    smsNotificationRequest.setInterests(interestsList);\n\n    smsNotificationRequest.setMobilePhone(smsNotificationRequestXml.getMobilePhone());\n\n    smsNotificationRequest.setSubscription(\n        Boolean.valueOf(smsNotificationRequestXml.getSubscription()));\n\n    return smsNotificationRequest;\n  }\n"}, {"dataset": "getInstance", "exampleID": 980, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 413, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "Calendar.after(calndr)"], "useStart": [441, 472], "useEnd": [459, 487], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/e_ui/common/src/main/java/com/funambol/util/DateUtil.java", "rawCode": "  /**\n   * Utility method wrapping Calendar.after method Compares the date field parameter with the date\n   * provided with the constructor answering the question: date from constructor is after the given\n   * param date ?\n   *\n   * @param date The date to be used for comparison\n   * @return true if date from constructor is after given param date\n   */\n  public boolean isAfter(Date date) {\n    Calendar cal2 = Calendar.getInstance();\n    cal2.setTime(date);\n    return cal.after(cal2);\n  }\n"}, {"dataset": "getInstance", "exampleID": 981, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 115, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)", "calndr.add(int,int)", "calndr.add(int,int)", "calndr.getTime()"], "useStart": [214, 249, 287, 347], "useEnd": [243, 281, 317, 360], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SDLLanguageTechnologies/Testy/tree/master/src/main/java/com/sdl/selenium/web/utils/GetData.java", "rawCode": "  public static String getDate(int days, int months, int years, String format, Locale locale) {\n    Calendar now = Calendar.getInstance();\n    SimpleDateFormat formatter = new SimpleDateFormat(format, locale);\n    now.add(Calendar.DATE, +days);\n    now.add(Calendar.MONTH, +months);\n    now.add(Calendar.YEAR, +years);\n    return formatter.format(now.getTime());\n  }\n"}, {"dataset": "getInstance", "exampleID": 982, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 100, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.clear()", "calndr.set(int,int,int)", "calndr.getTime()"], "useStart": [128, 145, 185], "useEnd": [139, 166, 198], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UweTrottmann/QuickDic-Dictionary/tree/master/jars/icu4j-4_8_1_1/main/tests/core/src/com/ibm/icu/dev/test/format/DateFormatRegressionTestJ.java", "rawCode": "  public void Test4358730() {\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    Calendar cal = Calendar.getInstance();\n    cal.clear();\n    cal.set(2001, 11, 10);\n    Date today = cal.getTime();\n\n    sdf.applyPattern(\"MM d y\");\n    logln(sdf.format(today));\n    sdf.applyPattern(\"MM d yy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyyy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyyyy\");\n    logln(sdf.format(today));\n  }\n"}, {"dataset": "getInstance", "exampleID": 983, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 133, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.add(int,int)", "calndr.getTime()", "calndr.add(int,int)", "calndr.getTime()", "calndr.add(int,int)", "calndr.getTime()", "calndr.add(int,int)", "calndr.getTime()"], "useStart": [161, 209, 874, 926, 951, 1004, 1029, 1081], "useEnd": [192, 227, 905, 944, 982, 1022, 1060, 1099], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/motech/MOTECH-Ghana/tree/master/motech-server-core/src/test/java/org/motechproject/server/service/EDDScheduleTest.java", "rawCode": "  public void testPregnantEDDUpdated() {\n    Date date = new Date();\n\n    Patient patient = new Patient(1);\n\n    Calendar calendar = Calendar.getInstance();\n    calendar.add(Calendar.MONTH, 8);\n    Date edd = calendar.getTime();\n\n    List<ExpectedEncounter> encList = new ArrayList<ExpectedEncounter>();\n    encList.add(new ExpectedEncounter());\n\n    Capture<ExpectedEncounter> capturedEncounter = new Capture<ExpectedEncounter>();\n\n    expect(registrarBean.getActivePregnancyDueDate(patient.getPatientId())).andReturn(edd);\n    expect(registrarBean.getExpectedEncounters(patient, eddSchedule.getName())).andReturn(encList);\n\n    expect(registrarBean.saveExpectedEncounter(capture(capturedEncounter)))\n        .andReturn(new ExpectedEncounter())\n        .times(1);\n\n    replay(registrarBean);\n\n    eddSchedule.updateSchedule(patient, date);\n\n    verify(registrarBean);\n\n    calendar.add(Calendar.DATE, -7);\n    Date minDate = calendar.getTime();\n\n    calendar.add(Calendar.DATE, 14);\n    Date lateDate = calendar.getTime();\n\n    calendar.add(Calendar.DATE, 21);\n    Date maxDate = calendar.getTime();\n\n    ExpectedEncounter enc = capturedEncounter.getValue();\n\n    assertEquals(minDate, enc.getMinEncounterDatetime());\n    assertEquals(edd, enc.getDueEncounterDatetime());\n    assertEquals(lateDate, enc.getLateEncounterDatetime());\n    assertEquals(maxDate, enc.getMaxEncounterDatetime());\n  }\n"}, {"dataset": "getInstance", "exampleID": 984, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance(aLocale)", "focalAPIStart": 427, "focalAPIEnd": 463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int)"], "useStart": [700], "useEnd": [729], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/this88mild7/bsg_pcms/tree/master/src/main/java/com/bsg/pcms/utility/BsgDateUtils.java", "rawCode": "  /**\n   * 해당 p_date날짜에 Calendar 객체를 반환함.\n   *\n   * @param p_date\n   * @return Calendar\n   * @see java.util.Calendar\n   *     <p>\n   *     <pre>\n   * - 사용 예\n   * Calendar cal = DateUtil.getCalendarInstance(DateUtil.getCurrentYyyymmdd())\n   * </pre>\n   */\n  public static Calendar getCalendarInstance(String p_date) {\n    // Locale LOCALE_COUNTRY = Locale.KOREA;\n    Locale LOCALE_COUNTRY = Locale.FRANCE;\n    Calendar retCal = Calendar.getInstance(LOCALE_COUNTRY);\n    if (p_date != null && p_date.length() == 8) {\n      int year = Integer.parseInt(p_date.substring(0, 4));\n      int month = Integer.parseInt(p_date.substring(4, 6)) - 1;\n      int date = Integer.parseInt(p_date.substring(6));\n      retCal.set(year, month, date);\n    }\n    return retCal;\n  }\n"}, {"dataset": "getInstance", "exampleID": 985, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 163, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.set(int,int,int,int,int,int)", "calndr.getTime()"], "useStart": [191, 269], "useEnd": [256, 287], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/commoncrawl/commoncrawl-crawler/tree/master/src/org/commoncrawl/util/time/SpreadsheetDate.java", "rawCode": "  /**\n   * Returns a <code>java.util.Date</code> equivalent to this date.\n   *\n   * @return The date.\n   */\n  public Date toDate() {\n    final Calendar calendar = Calendar.getInstance();\n    calendar.set(getYYYY(), getMonth() - 1, getDayOfMonth(), 0, 0, 0);\n    return calendar.getTime();\n  }\n"}, {"dataset": "getInstance", "exampleID": 986, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 102, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calendar.getInstance()", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)", "calndr.get(int)"], "useStart": [130, 169, 233, 267, 302, 344], "useEnd": [146, 191, 257, 292, 334, 375], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stas/pos/tree/master/src-beans/com/openbravo/beans/DateUtils.java", "rawCode": "  public static Date getTodayHours(Date d) {\n    // el dia ajustado a las horeas\n    Calendar ddate = Calendar.getInstance();\n    ddate.setTime(d);\n\n    Calendar dNow = Calendar.getInstance();\n    dNow.clear();\n    dNow.set(\n        ddate.get(Calendar.YEAR),\n        ddate.get(Calendar.MONTH),\n        ddate.get(Calendar.DAY_OF_MONTH),\n        ddate.get(Calendar.HOUR_OF_DAY),\n        0,\n        0);\n\n    return dNow.getTime();\n  }\n"}, {"dataset": "getInstance", "exampleID": 987, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 1338, "focalAPIEnd": 1360, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new UpdateData(String,*,*,*,calndr)", "assertEquals(calndr,Calendar)"], "useStart": [1394, 1800], "useEnd": [1504, 1832], "hasFinally": 1, "cleanUpCall": ["ConnectionServer.stop()", "Socket.close()", "CSThread.join()"], "finallyExpressionStart": 2207, "finallyExpressionEnd": 2215, "finallyBlockStart": 2207, "finallyBlockEnd": 2335, "cleanUpCallStart": [2224, 2241, 2263], "cleanUpCallEnd": [2233, 2255, 2278], "url": "https://github.com/pmlt/comp354/tree/master/code/src/tests/ConnectionServerTest.java", "rawCode": "  @Test\n  public void testSendData() throws UnknownHostException, IOException, InterruptedException {\n    CSThread csThread = new CSThread();\n    csThread.start();\n    // Wait for CS to bind socket...\n    Thread.sleep(1000);\n    Socket socket = new Socket();\n    try {\n      socket.connect(new InetSocketAddress(\"localhost\", 11233));\n      OutputStream stream = socket.getOutputStream();\n\n      // Try sending garbage\n      String msg = \"gfenrwjgfe fbd fbb fwwq\";\n      stream.write(msg.getBytes());\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNull(lastVessel); // Should NOT have called update()\n\n      // Try sending netstring-encoded garbage\n      msg = \"gfenrwjgfe fbd fbb fwwq\";\n      msg = msg.length() + \":\" + msg; // Netstring encoding\n      stream.write(msg.getBytes());\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNull(lastVessel); // Should NOT have called update()\n\n      // Try sending bad vessel values\n      msg = \"{\\\"id\\\":[1,2,3],\\\"type\\\":\\\"WRONGENUMVALUE\\\",\\\"coords\\\":0,\\\"course\\\":{}}\";\n      msg = msg.length() + \":\" + msg; // Netstring encoding\n      stream.write(msg.getBytes());\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNull(lastVessel); // Should NOT have called update()\n\n      // Try sending correct data\n      Calendar curTime = Calendar.getInstance();\n      UpdateData ud =\n          new UpdateData(\n              \"myid\", VesselType.CARGO_BOAT, new Coord(10, -10), new Course(20, -20), curTime);\n      msg = ud.toJSON();\n      msg = msg.length() + \":\" + msg + \",\";\n      stream.write(msg.getBytes()); // Write with netstring encoding\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNotNull(lastVessel);\n      Calendar timestamp = lastVessel.getLastTimestamp();\n      assertEquals(curTime, timestamp);\n      assertEquals(\"myid\", lastVessel.getId());\n      assertEquals(VesselType.CARGO_BOAT, lastVessel.getType());\n\n      try {\n        assertEquals(new Coord(10, -10), lastVessel.getCoord(timestamp));\n        assertEquals(new Course(20, -20), lastVessel.getCourse(timestamp));\n      } catch (Exception e) {\n        fail(\"Caught exception: \" + e.getMessage());\n      }\n    } finally {\n\n      cs.stop();\n      socket.close();\n      csThread.join(); // Wait for ConnectionServer to cleanly shut down\n    }\n  }\n"}, {"dataset": "getInstance", "exampleID": 988, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 75, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.get(int)"], "useStart": [116], "useEnd": [144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/europeana/contrib/tree/master/repox2/repoxCore/branches/repoxCore_12_03_2013/src/main/java/pt/utl/ist/repox/task/ScheduledTask.java", "rawCode": "  public Integer getMonth() {\n    if (firstRun == null) {\n      firstRun = Calendar.getInstance();\n    }\n    return firstRun.get(Calendar.MONTH);\n  }\n"}, {"dataset": "getInstance", "exampleID": 989, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 217, "focalAPIEnd": 239, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.setTime(Date)", "calndr.get(int)"], "useStart": [245, 319], "useEnd": [284, 340], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ewcmsfree/ewcms/tree/master/src/main/java/com/ewcms/content/particular/service/ProjectBasicService.java", "rawCode": "  private String generateCode(ProjectBasic projectBasic) {\n    String zoningCode_code = projectBasic.getZoningCode().getCode();\n    String organizationCode_code = projectBasic.getOrganizationCode();\n    Calendar ca = Calendar.getInstance();\n    ca.setTime(projectBasic.getBuildTime());\n    String year = String.valueOf(ca.get(Calendar.YEAR));\n    String unitId = projectBasic.getUnitId();\n    String code = zoningCode_code + organizationCode_code + year + unitId;\n\n    return code;\n  }\n"}, {"dataset": "getInstance", "exampleID": 990, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "getLog(String,*)"], "tryExpressionStart": 270, "tryExpressionEnd": 274, "tryBlockStart": 270, "tryBlockEnd": 707, "catchExpressionStart": 635, "catchExpressionEnd": 655, "catchBlockStart": 635, "catchBlockEnd": 707, "exceptionHandlingCallStart": [685, 663], "exceptionHandlingCallEnd": [699, 700], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 559, "focalAPIEnd": 581, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.getTime()"], "useStart": [559], "useEnd": [591], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fishkingsin/WristbandProject/tree/master/Wristband/src/com/idthk/wristband/ui/StatisticFragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    displayType = getArguments().getString(EXTRA_DISPLAY_TYPE);\n    mRootView = inflater.inflate(R.layout.statistic_fragment, container, false);\n    try {\n      nextEntryButton = (Button) mRootView.findViewById(R.id.btn_next_entry);\n      nextEntryButton.setOnClickListener(this);\n\n      prevEntryButton = (Button) mRootView.findViewById(R.id.btn_prev_entry);\n      prevEntryButton.setOnClickListener(this);\n      Utilities.setTargetDate(Calendar.getInstance().getTime());\n\n      this.checkButtonVisible();\n\n    } catch (Exception e) {\n      Utilities.getLog(TAG, e.getMessage());\n    }\n    Utilities.publishGraph(\n        getActivity(), mRootView, ((ViewGroup) mRootView.findViewById(R.id.graph1)), displayType);\n    return mRootView;\n  }\n"}, {"dataset": "getInstance", "exampleID": 991, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 1267, "focalAPIEnd": 1289, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setProperty(String,calndr)"], "useStart": [1229], "useEnd": [1290], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.13/kernel-impl/src/test/java/org/sakaiproject/jcr/test/NodeTestData.java", "rawCode": "  /**\n   * Creates two nodes under {@link #TEST_DATA_PATH}: one of type nt:resource and a second node\n   * referencing the first.\n   */\n  public void testFillInTestData() throws RepositoryException, IOException {\n    if (superuser.getRootNode().hasNode(TEST_DATA_PATH)) {\n      // delete previous data\n      superuser.getRootNode().getNode(TEST_DATA_PATH).remove();\n      superuser.save();\n    }\n    // create nodes to testPath\n    StringTokenizer names = new StringTokenizer(TEST_DATA_PATH, \"/\");\n    Node dataRoot = superuser.getRootNode();\n    while (names.hasMoreTokens()) {\n      String name = names.nextToken();\n      if (!dataRoot.hasNode(name)) {\n        dataRoot = dataRoot.addNode(name, testNodeType);\n      } else {\n        dataRoot = dataRoot.getNode(name);\n      }\n    }\n\n    Node resource = dataRoot.addNode(\"myResource\", ntResource);\n    resource.setProperty(jcrEncoding, ENCODING);\n    resource.setProperty(jcrMimeType, \"text/plain\");\n    ByteArrayOutputStream data = new ByteArrayOutputStream();\n    OutputStreamWriter writer = new OutputStreamWriter(data, ENCODING);\n    writer.write(\"Hello w\\u00F6rld.\");\n    writer.close();\n    resource.setProperty(jcrData, new ByteArrayInputStream(data.toByteArray()));\n    resource.setProperty(jcrLastModified, Calendar.getInstance());\n    log.println(\"Adding node: \" + resource.getPath());\n\n    Node resReference = dataRoot.addNode(\"reference\");\n    resReference.setProperty(\"ref\", resource);\n    // make this node itself referenceable\n    resReference.addMixin(mixReferenceable);\n    log.println(\"Adding node: \" + resReference.getPath());\n\n    Node multiReference = dataRoot.addNode(\"multiReference\");\n    Value[] refs = new Value[2];\n    refs[0] = superuser.getValueFactory().createValue(resource);\n    refs[1] = superuser.getValueFactory().createValue(resReference);\n    multiReference.setProperty(\"ref\", refs);\n    log.println(\"Adding node: \" + multiReference.getPath());\n\n    superuser.save();\n  }\n"}, {"dataset": "getInstance", "exampleID": 992, "initialization": ["Locale aLocale = Calendar.getTimeZone(String)"], "initializationStart": [-415], "initializationEnd": [-388], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance(aLocale)", "focalAPIStart": 158, "focalAPIEnd": 207, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calndr.clear()", "calndr.setTimeInMillis(long)", "calendar.getInstance(*)", "assertEquals(calndr,Calendar)"], "useStart": [213, 235, 386, 549], "useEnd": [229, 286, 435, 579], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/peodratash/mina-ftpserver/tree/master/core/src/test/java/org/apache/ftpserver/clienttests/MDTMTest.java", "rawCode": "  public void testMDTMForFile() throws Exception {\n    assertFalse(TEST_FILE1.exists());\n    assertTrue(TEST_FILE1.createNewFile());\n\n    Calendar expected = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n    expected.clear();\n    expected.setTimeInMillis(TEST_FILE1.lastModified());\n    assertEquals(213, client.sendCommand(\"MDTM \" + TEST_FILE1.getName()));\n\n    Calendar actual = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n    actual.clear();\n    actual.setTime(FTP_DATE_FORMAT.parse(client.getReplyString().substring(4).trim()));\n    assertEquals(expected, actual);\n  }\n"}, {"dataset": "getInstance", "exampleID": 993, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance(aLocale)", "focalAPIStart": 1603, "focalAPIEnd": 1631, "followUpCheck": "calndr.get(calendar.YEAR) < 100", "checkType": "IF", "followUpCheckExpressionStart": 3645, "followUpCheckExpressionEnd": 3683, "followUpCheckBlockStart": 3645, "followUpCheckBlockEnd": 3754, "use": ["calndr.set(int,int)", "calndr.set(int,int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.get(int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)", "calndr.set(int,int)"], "useStart": [2918, 3284, 3411, 3497, 3587, 3649, 3690, 3760, 3803, 3841, 3879], "useEnd": [2968, 3333, 3449, 3541, 3624, 3676, 3753, 3797, 3835, 3873, 3916], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pescuma/jfg/tree/master/calendarcombo-src/org/eclipse/nebula/widgets/calendarcombo/DateHelper.java", "rawCode": "  /**\n   * This method assumes the dateFormat has a separator char in it, and that we can use that to\n   * determine what the user entered by using that separator to split up the user entered date, and\n   * then do some logic on it. This is by no means a foolproof method and should not be relied upon\n   * returning 100% correct dates all the time.\n   *\n   * @param str String to parse\n   * @param dateFormat DateFormat to use\n   * @param separators Separator chars that can be encountered\n   * @param locale Locale\n   * @return Calendar\n   * @throws CalendarDateParseException If date could not be parsed\n   * @throws Exception If any step of the parsing failed\n   */\n  public static Calendar slashParse(\n      final String str, final String dateFormat, final char[] separators, final Locale locale)\n      throws CalendarDateParseException, Exception {\n    int start = -1;\n    String splitter = null;\n    String dateFormatToUse = dateFormat;\n    for (int i = 0; i < separators.length; i++) {\n      start = str.indexOf(separators[i]);\n      if (start != -1) {\n        splitter = String.valueOf(separators[i]);\n        break;\n      }\n    }\n    if (start == -1)\n      throw new CalendarDateParseException(\n          \"Failed to find splitter char\", CalendarDateParseException.TYPE_NO_SLPITTER_CHAR);\n\n    // replace dateFormat until we have same splitter\n    for (int i = 0; i < separators.length; i++) {\n      if (String.valueOf(separators[i]).equals(splitter)) continue;\n\n      dateFormatToUse = dateFormatToUse.replaceAll(\"\\\\\" + String.valueOf(separators[i]), splitter);\n    }\n\n    Calendar toReturn = Calendar.getInstance(locale);\n    StringTokenizer st = new StringTokenizer(str, splitter);\n    StringTokenizer st2 = new StringTokenizer(dateFormatToUse, splitter);\n\n    if (st.countTokens() != st2.countTokens())\n      throw new CalendarDateParseException(\n          \"Date format does not match date string in terms of splitter character numbers\",\n          CalendarDateParseException.TYPE_INSUFFICIENT_SPLITTERS);\n\n    // variables we'll be extracting\n    int monthToSet = -1;\n    int dayToSet = -1;\n    int yearToSet = -1;\n\n    // reset, skipping month this time\n    st = new StringTokenizer(str, splitter);\n    st2 = new StringTokenizer(dateFormatToUse, splitter);\n\n    while (st.hasMoreTokens()) {\n      String dateValue = st.nextToken();\n      String dateType = st2.nextToken();\n\n      dateValue = dateValue.replaceAll(\" \", \"\");\n      dateType = dateType.replaceAll(\" \", \"\");\n\n      int calType = getCalendarTypeForString(dateType);\n      // we already did month\n      if (calType == Calendar.MONTH) {\n        monthToSet = Integer.parseInt(dateValue);\n        continue;\n      }\n      if (calType == Calendar.YEAR) {\n        yearToSet = Integer.parseInt(dateValue);\n        continue;\n      }\n      if (calType == Calendar.DATE) {\n        dayToSet = Integer.parseInt(dateValue);\n        continue;\n      }\n\n      toReturn.set(calType, Integer.parseInt(dateValue));\n    }\n\n    // set all date parameters at the same time, or else we'll get month-skipping due to setting a\n    // value later (such as a date that is too high\n    // for the current month). (-1 for month as Calendar class is month-zero-based).\n    if (monthToSet != -1 && dayToSet != -1 && yearToSet != -1) {\n      toReturn.set(yearToSet, monthToSet - 1, dayToSet);\n    } else {\n      // set what we know\n      if (yearToSet != -1) {\n        toReturn.set(Calendar.YEAR, yearToSet);\n      }\n      if (monthToSet != -1) {\n        toReturn.set(Calendar.MONTH, monthToSet - 1);\n      }\n      if (dayToSet != -1) {\n        toReturn.set(Calendar.DATE, dayToSet);\n      }\n    }\n\n    if (toReturn.get(Calendar.YEAR) < 100)\n      toReturn.set(Calendar.YEAR, toReturn.get(Calendar.YEAR) + 1900);\n\n    toReturn.set(Calendar.HOUR_OF_DAY, 0);\n    toReturn.set(Calendar.MINUTE, 0);\n    toReturn.set(Calendar.SECOND, 0);\n    toReturn.set(Calendar.MILLISECOND, 0);\n\n    return toReturn;\n  }\n"}, {"dataset": "getInstance", "exampleID": 994, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 334, "focalAPIEnd": 356, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["putSerializable(String,calndr)"], "useStart": [295], "useEnd": [357], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bedditor/ohtu-Alarmclock/tree/master/beddit_alarm/src/ohtu/beddit/activity/MainActivity.java", "rawCode": "  @Override\n  protected void onSaveInstanceState(Bundle outState) {\n    Log.v(TAG, \"onSaveInstanceState\");\n    outState.putInt(\"minutes\", alarmTimePicker.getMinutes());\n    outState.putInt(\"hours\", alarmTimePicker.getHours());\n    outState.putInt(\"interval\", alarmTimePicker.getInterval());\n    outState.putSerializable(\"tokenCheck\", Calendar.getInstance());\n    super.onSaveInstanceState(outState);\n  }\n"}, {"dataset": "getInstance", "exampleID": 995, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 221, "focalAPIEnd": 243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calendar.get(int)"], "useStart": [221], "useEnd": [262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/philipflohr/AKKtuell/tree/master/AKKtuell/src/org/akk/akktuell/database/SQLiteImpl.java", "rawCode": "  @Override\n  public AkkEvent[] getAllEventsInMonth(int month, int year, DBFields orderBy, int direction) {\n    if ((month >= 0) && (month < 12)) {\n      int y = year;\n      if ((year < 0) || (year > 9999)) {\n        y = Calendar.getInstance().get(Calendar.YEAR);\n      }\n\n      // where date >= 'year-month'; leading 0s will be added to month\n      String from_date = y + \"-\" + String.format(\"%02d\", month);\n\n      // 'year-(next month)'; leading 0s will be added to month,\n      // month and year will be adjusted to take care of year change\n      String to_date = (month == 12) ? (++y + \"-01\") : y + \"-\" + String.format(\"%02d\", ++month);\n\n      return cursorToAkkEventArray(\n          executeRawQuery(\n              \"select * from \" + TABLE + \" where date >= ? and date < ?\",\n              new String[] {from_date, to_date},\n              orderBy,\n              direction));\n    }\n    return null;\n  }\n"}, {"dataset": "getInstance", "exampleID": 996, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 259, "focalAPIEnd": 281, "followUpCheck": "calndr != null", "checkType": "IF", "followUpCheckExpressionStart": 1174, "followUpCheckExpressionEnd": 1195, "followUpCheckBlockStart": 1174, "followUpCheckBlockEnd": 1283, "use": ["calndr.getTime()", "calndr.getTime()", "calndr.getTime()", "calndr.getTime()", "calndr.getTime()"], "useStart": [1257, 8237, 8575, 9782, 10941], "useEnd": [1275, 8255, 8593, 9800, 10959], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bobeal/capdemat/tree/master/Model/src/java/fr/cg95/cvq/business/request/social/DomesticHelpRequest.java", "rawCode": "  public static DomesticHelpRequest xmlToModel(DomesticHelpRequestDocument domesticHelpRequestDoc) {\n    DomesticHelpRequestDocument.DomesticHelpRequest domesticHelpRequestXml =\n        domesticHelpRequestDoc.getDomesticHelpRequest();\n    Calendar calendar = Calendar.getInstance();\n    LocalTime localTime = new LocalTime();\n    List list = new ArrayList();\n    DomesticHelpRequest domesticHelpRequest = new DomesticHelpRequest();\n    domesticHelpRequest.fillCommonModelInfo(domesticHelpRequest, domesticHelpRequestXml);\n\n    domesticHelpRequest.setDhrAllowances(\n        domesticHelpRequestXml.getDhrRequesterIncomes().getDhrAllowances());\n\n    domesticHelpRequest.setDhrComplementaryPensionPlan(\n        domesticHelpRequestXml.getDhrRequesterPensionPlan().getDhrComplementaryPensionPlan());\n\n    if (domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingAddress() != null)\n      domesticHelpRequest.setDhrCurrentDwellingAddress(\n          Address.xmlToModel(\n              domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingAddress()));\n\n    calendar = domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingArrivalDate();\n    if (calendar != null) {\n      domesticHelpRequest.setDhrCurrentDwellingArrivalDate(calendar.getTime());\n    }\n\n    if (domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingKind() != null)\n      domesticHelpRequest.setDhrCurrentDwellingKind(\n          fr.cg95.cvq.business.request.social.DhrDwellingKindType.forString(\n              domesticHelpRequestXml\n                  .getDhrCurrentDwelling()\n                  .getDhrCurrentDwellingKind()\n                  .toString()));\n    else\n      domesticHelpRequest.setDhrCurrentDwellingKind(\n          fr.cg95.cvq.business.request.social.DhrDwellingKindType.getDefaultDhrDwellingKindType());\n\n    if (domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingNetArea() != null)\n      domesticHelpRequest.setDhrCurrentDwellingNetArea(\n          domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingNetArea());\n\n    if (domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingNumberOfRoom() != null)\n      domesticHelpRequest.setDhrCurrentDwellingNumberOfRoom(\n          domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingNumberOfRoom());\n\n    domesticHelpRequest.setDhrCurrentDwellingPhone(\n        domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingPhone());\n\n    if (domesticHelpRequestXml.getDhrCurrentDwelling().getDhrCurrentDwellingStatus() != null)\n      domesticHelpRequest.setDhrCurrentDwellingStatus(\n          fr.cg95.cvq.business.request.social.DhrDwellingStatusType.forString(\n              domesticHelpRequestXml\n                  .getDhrCurrentDwelling()\n                  .getDhrCurrentDwellingStatus()\n                  .toString()));\n    else\n      domesticHelpRequest.setDhrCurrentDwellingStatus(\n          fr.cg95.cvq.business.request.social.DhrDwellingStatusType\n              .getDefaultDhrDwellingStatusType());\n\n    domesticHelpRequest.setDhrFurnitureInvestmentIncome(\n        domesticHelpRequestXml.getDhrRequesterIncomes().getDhrFurnitureInvestmentIncome());\n\n    if (domesticHelpRequestXml.getDhrRequesterGuardian().getDhrGuardianAddress() != null)\n      domesticHelpRequest.setDhrGuardianAddress(\n          Address.xmlToModel(\n              domesticHelpRequestXml.getDhrRequesterGuardian().getDhrGuardianAddress()));\n\n    if (domesticHelpRequestXml.getDhrRequesterGuardian().getDhrGuardianMeasure() != null)\n      domesticHelpRequest.setDhrGuardianMeasure(\n          fr.cg95.cvq.business.request.social.DhrGuardianMeasureType.forString(\n              domesticHelpRequestXml.getDhrRequesterGuardian().getDhrGuardianMeasure().toString()));\n    else\n      domesticHelpRequest.setDhrGuardianMeasure(\n          fr.cg95.cvq.business.request.social.DhrGuardianMeasureType\n              .getDefaultDhrGuardianMeasureType());\n\n    domesticHelpRequest.setDhrGuardianName(\n        domesticHelpRequestXml.getDhrRequesterGuardian().getDhrGuardianName());\n\n    domesticHelpRequest.setDhrHaveFamilyReferent(\n        Boolean.valueOf(domesticHelpRequestXml.getDhrFamilyReferent().getDhrHaveFamilyReferent()));\n\n    domesticHelpRequest.setDhrIncomeTax(\n        domesticHelpRequestXml.getDhrTaxesAmount().getDhrIncomeTax());\n\n    domesticHelpRequest.setDhrIncomesAnnualTotal(\n        domesticHelpRequestXml.getDhrRequesterIncomes().getDhrIncomesAnnualTotal());\n\n    domesticHelpRequest.setDhrIsSpouseRetired(\n        Boolean.valueOf(domesticHelpRequestXml.getDhrSpouseStatus().getDhrIsSpouseRetired()));\n\n    domesticHelpRequest.setDhrNetIncome(\n        domesticHelpRequestXml.getDhrRequesterIncomes().getDhrNetIncome());\n\n    List<fr.cg95.cvq.business.request.social.DhrNotRealAsset> dhrNotRealAssetList =\n        new ArrayList<fr.cg95.cvq.business.request.social.DhrNotRealAsset>(\n            domesticHelpRequestXml.sizeOfDhrNotRealAssetArray());\n    for (DhrNotRealAssetType object : domesticHelpRequestXml.getDhrNotRealAssetArray()) {\n      dhrNotRealAssetList.add(\n          fr.cg95.cvq.business.request.social.DhrNotRealAsset.xmlToModel(object));\n    }\n    domesticHelpRequest.setDhrNotRealAsset(dhrNotRealAssetList);\n\n    domesticHelpRequest.setDhrPensionPlanDetail(\n        domesticHelpRequestXml.getDhrRequesterPensionPlan().getDhrPensionPlanDetail());\n\n    List<fr.cg95.cvq.business.request.social.DhrPreviousDwelling> dhrPreviousDwellingList =\n        new ArrayList<fr.cg95.cvq.business.request.social.DhrPreviousDwelling>(\n            domesticHelpRequestXml.sizeOfDhrPreviousDwellingArray());\n    for (DhrPreviousDwellingType object : domesticHelpRequestXml.getDhrPreviousDwellingArray()) {\n      dhrPreviousDwellingList.add(\n          fr.cg95.cvq.business.request.social.DhrPreviousDwelling.xmlToModel(object));\n    }\n    domesticHelpRequest.setDhrPreviousDwelling(dhrPreviousDwellingList);\n\n    if (domesticHelpRequestXml.getDhrRequesterPensionPlan().getDhrPrincipalPensionPlan() != null)\n      domesticHelpRequest.setDhrPrincipalPensionPlan(\n          fr.cg95.cvq.business.request.social.DhrPrincipalPensionPlanType.forString(\n              domesticHelpRequestXml\n                  .getDhrRequesterPensionPlan()\n                  .getDhrPrincipalPensionPlan()\n                  .toString()));\n    else\n      domesticHelpRequest.setDhrPrincipalPensionPlan(\n          fr.cg95.cvq.business.request.social.DhrPrincipalPensionPlanType\n              .getDefaultDhrPrincipalPensionPlanType());\n\n    List<fr.cg95.cvq.business.request.social.DhrRealAsset> dhrRealAssetList =\n        new ArrayList<fr.cg95.cvq.business.request.social.DhrRealAsset>(\n            domesticHelpRequestXml.sizeOfDhrRealAssetArray());\n    for (DhrRealAssetType object : domesticHelpRequestXml.getDhrRealAssetArray()) {\n      dhrRealAssetList.add(fr.cg95.cvq.business.request.social.DhrRealAsset.xmlToModel(object));\n    }\n    domesticHelpRequest.setDhrRealAsset(dhrRealAssetList);\n\n    domesticHelpRequest.setDhrRealEstateInvestmentIncome(\n        domesticHelpRequestXml.getDhrRequesterIncomes().getDhrRealEstateInvestmentIncome());\n\n    if (domesticHelpRequestXml.getDhrFamilyReferent().getDhrReferentAddress() != null)\n      domesticHelpRequest.setDhrReferentAddress(\n          Address.xmlToModel(\n              domesticHelpRequestXml.getDhrFamilyReferent().getDhrReferentAddress()));\n\n    domesticHelpRequest.setDhrReferentFirstName(\n        domesticHelpRequestXml.getDhrFamilyReferent().getDhrReferentFirstName());\n\n    domesticHelpRequest.setDhrReferentName(\n        domesticHelpRequestXml.getDhrFamilyReferent().getDhrReferentName());\n\n    if (domesticHelpRequestXml.getDhrSpouse().getDhrRequestKind() != null)\n      domesticHelpRequest.setDhrRequestKind(\n          fr.cg95.cvq.business.request.social.DhrRequestKindType.forString(\n              domesticHelpRequestXml.getDhrSpouse().getDhrRequestKind().toString()));\n    else\n      domesticHelpRequest.setDhrRequestKind(\n          fr.cg95.cvq.business.request.social.DhrRequestKindType.getDefaultDhrRequestKindType());\n\n    calendar = domesticHelpRequestXml.getDhrRequester().getDhrRequesterBirthDate();\n    if (calendar != null) {\n      domesticHelpRequest.setDhrRequesterBirthDate(calendar.getTime());\n    }\n\n    domesticHelpRequest.setDhrRequesterBirthPlace(\n        domesticHelpRequestXml.getDhrRequester().getDhrRequesterBirthPlace());\n\n    calendar = domesticHelpRequestXml.getDhrRequester().getDhrRequesterFranceArrivalDate();\n    if (calendar != null) {\n      domesticHelpRequest.setDhrRequesterFranceArrivalDate(calendar.getTime());\n    }\n\n    domesticHelpRequest.setDhrRequesterHaveGuardian(\n        Boolean.valueOf(\n            domesticHelpRequestXml.getDhrRequesterGuardian().getDhrRequesterHaveGuardian()));\n\n    domesticHelpRequest.setDhrRequesterIsFrenchResident(\n        Boolean.valueOf(\n            domesticHelpRequestXml.getDhrRequester().getDhrRequesterIsFrenchResident()));\n\n    if (domesticHelpRequestXml.getDhrRequester().getDhrRequesterNationality() != null)\n      domesticHelpRequest.setDhrRequesterNationality(\n          fr.cg95.cvq.business.users.NationalityType.forString(\n              domesticHelpRequestXml.getDhrRequester().getDhrRequesterNationality().toString()));\n    else\n      domesticHelpRequest.setDhrRequesterNationality(\n          fr.cg95.cvq.business.users.NationalityType.getDefaultNationalityType());\n\n    if (domesticHelpRequestXml.getDhrSpouseStatus().getDhrSpouseAddress() != null)\n      domesticHelpRequest.setDhrSpouseAddress(\n          Address.xmlToModel(domesticHelpRequestXml.getDhrSpouseStatus().getDhrSpouseAddress()));\n\n    calendar = domesticHelpRequestXml.getDhrSpouse().getDhrSpouseBirthDate();\n    if (calendar != null) {\n      domesticHelpRequest.setDhrSpouseBirthDate(calendar.getTime());\n    }\n\n    domesticHelpRequest.setDhrSpouseBirthPlace(\n        domesticHelpRequestXml.getDhrSpouse().getDhrSpouseBirthPlace());\n\n    domesticHelpRequest.setDhrSpouseComplementaryPensionPlan(\n        domesticHelpRequestXml.getDhrSpouseStatus().getDhrSpouseComplementaryPensionPlan());\n\n    domesticHelpRequest.setDhrSpouseEmployer(\n        domesticHelpRequestXml.getDhrSpouseStatus().getDhrSpouseEmployer());\n\n    if (domesticHelpRequestXml.getDhrSpouse().getDhrSpouseFamilyStatus() != null)\n      domesticHelpRequest.setDhrSpouseFamilyStatus(\n          fr.cg95.cvq.business.users.FamilyStatusType.forString(\n              domesticHelpRequestXml.getDhrSpouse().getDhrSpouseFamilyStatus().toString()));\n    else\n      domesticHelpRequest.setDhrSpouseFamilyStatus(\n          fr.cg95.cvq.business.users.FamilyStatusType.getDefaultFamilyStatusType());\n\n    domesticHelpRequest.setDhrSpouseFirstName(\n        domesticHelpRequestXml.getDhrSpouse().getDhrSpouseFirstName());\n\n    calendar = domesticHelpRequestXml.getDhrSpouse().getDhrSpouseFranceArrivalDate();\n    if (calendar != null) {\n      domesticHelpRequest.setDhrSpouseFranceArrivalDate(calendar.getTime());\n    }\n\n    domesticHelpRequest.setDhrSpouseIsFrenchResident(\n        Boolean.valueOf(domesticHelpRequestXml.getDhrSpouse().getDhrSpouseIsFrenchResident()));\n\n    domesticHelpRequest.setDhrSpouseMaidenName(\n        domesticHelpRequestXml.getDhrSpouse().getDhrSpouseMaidenName());\n\n    domesticHelpRequest.setDhrSpouseName(domesticHelpRequestXml.getDhrSpouse().getDhrSpouseName());\n\n    if (domesticHelpRequestXml.getDhrSpouse().getDhrSpouseNationality() != null)\n      domesticHelpRequest.setDhrSpouseNationality(\n          fr.cg95.cvq.business.users.NationalityType.forString(\n              domesticHelpRequestXml.getDhrSpouse().getDhrSpouseNationality().toString()));\n    else\n      domesticHelpRequest.setDhrSpouseNationality(\n          fr.cg95.cvq.business.users.NationalityType.getDefaultNationalityType());\n\n    domesticHelpRequest.setDhrSpousePensionPlanDetail(\n        domesticHelpRequestXml.getDhrSpouseStatus().getDhrSpousePensionPlanDetail());\n\n    if (domesticHelpRequestXml.getDhrSpouseStatus().getDhrSpousePrincipalPensionPlan() != null)\n      domesticHelpRequest.setDhrSpousePrincipalPensionPlan(\n          fr.cg95.cvq.business.request.social.DhrPrincipalPensionPlanType.forString(\n              domesticHelpRequestXml\n                  .getDhrSpouseStatus()\n                  .getDhrSpousePrincipalPensionPlan()\n                  .toString()));\n    else\n      domesticHelpRequest.setDhrSpousePrincipalPensionPlan(\n          fr.cg95.cvq.business.request.social.DhrPrincipalPensionPlanType\n              .getDefaultDhrPrincipalPensionPlanType());\n\n    domesticHelpRequest.setDhrSpouseProfession(\n        domesticHelpRequestXml.getDhrSpouseStatus().getDhrSpouseProfession());\n\n    if (domesticHelpRequestXml.getDhrSpouse().getDhrSpouseTitle() != null)\n      domesticHelpRequest.setDhrSpouseTitle(\n          fr.cg95.cvq.business.users.TitleType.forString(\n              domesticHelpRequestXml.getDhrSpouse().getDhrSpouseTitle().toString()));\n    else\n      domesticHelpRequest.setDhrSpouseTitle(\n          fr.cg95.cvq.business.users.TitleType.getDefaultTitleType());\n\n    domesticHelpRequest.setLocalRate(domesticHelpRequestXml.getDhrTaxesAmount().getLocalRate());\n\n    domesticHelpRequest.setPensions(domesticHelpRequestXml.getDhrRequesterIncomes().getPensions());\n\n    domesticHelpRequest.setProfessionalTaxes(\n        domesticHelpRequestXml.getDhrTaxesAmount().getProfessionalTaxes());\n\n    domesticHelpRequest.setPropertyTaxes(\n        domesticHelpRequestXml.getDhrTaxesAmount().getPropertyTaxes());\n\n    return domesticHelpRequest;\n  }\n"}, {"dataset": "getInstance", "exampleID": 997, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 371, "focalAPIEnd": 393, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map<String, Object>.put(String,calndr)", "processVariableValueEquals(String,calndr)", "calendar.getInstance()", "taskVariableValueEquals(String,calndr)"], "useStart": [409, 1357, 2227, 3258], "useEnd": [439, 1430, 2249, 3328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/erny/activiti/tree/master/modules/activiti-engine/src/test/java/org/activiti/engine/test/api/task/TaskQueryTest.java", "rawCode": "  @Deployment\n  public void testProcessVariableValueEquals() throws Exception {\n    Map<String, Object> variables = new HashMap<String, Object>();\n    variables.put(\"longVar\", 928374L);\n    variables.put(\"shortVar\", (short) 123);\n    variables.put(\"integerVar\", 1234);\n    variables.put(\"stringVar\", \"stringValue\");\n    variables.put(\"booleanVar\", true);\n    Date date = Calendar.getInstance().getTime();\n    variables.put(\"dateVar\", date);\n    variables.put(\"nullVar\", null);\n\n    // Start process-instance with all types of variables\n    ProcessInstance processInstance =\n        runtimeService.startProcessInstanceByKey(\"oneTaskProcess\", variables);\n\n    // Test query matches\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueEquals(\"longVar\", 928374L).count());\n    assertEquals(\n        1,\n        taskService.createTaskQuery().processVariableValueEquals(\"shortVar\", (short) 123).count());\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueEquals(\"integerVar\", 1234).count());\n    assertEquals(\n        1,\n        taskService\n            .createTaskQuery()\n            .processVariableValueEquals(\"stringVar\", \"stringValue\")\n            .count());\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueEquals(\"booleanVar\", true).count());\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueEquals(\"dateVar\", date).count());\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueEquals(\"nullVar\", null).count());\n\n    // Test query for other values on existing variables\n    assertEquals(\n        0, taskService.createTaskQuery().processVariableValueEquals(\"longVar\", 999L).count());\n    assertEquals(\n        0,\n        taskService.createTaskQuery().processVariableValueEquals(\"shortVar\", (short) 999).count());\n    assertEquals(\n        0, taskService.createTaskQuery().processVariableValueEquals(\"integerVar\", 999).count());\n    assertEquals(\n        0, taskService.createTaskQuery().processVariableValueEquals(\"stringVar\", \"999\").count());\n    assertEquals(\n        0, taskService.createTaskQuery().processVariableValueEquals(\"booleanVar\", false).count());\n    Calendar otherDate = Calendar.getInstance();\n    otherDate.add(Calendar.YEAR, 1);\n    assertEquals(\n        0,\n        taskService\n            .createTaskQuery()\n            .processVariableValueEquals(\"dateVar\", otherDate.getTime())\n            .count());\n    assertEquals(\n        0, taskService.createTaskQuery().processVariableValueEquals(\"nullVar\", \"999\").count());\n\n    // Test querying for task variables don't match the process-variables\n    assertEquals(\n        0, taskService.createTaskQuery().taskVariableValueEquals(\"longVar\", 928374L).count());\n    assertEquals(\n        0, taskService.createTaskQuery().taskVariableValueEquals(\"shortVar\", (short) 123).count());\n    assertEquals(\n        0, taskService.createTaskQuery().taskVariableValueEquals(\"integerVar\", 1234).count());\n    assertEquals(\n        0,\n        taskService.createTaskQuery().taskVariableValueEquals(\"stringVar\", \"stringValue\").count());\n    assertEquals(\n        0, taskService.createTaskQuery().taskVariableValueEquals(\"booleanVar\", true).count());\n    assertEquals(0, taskService.createTaskQuery().taskVariableValueEquals(\"dateVar\", date).count());\n    assertEquals(0, taskService.createTaskQuery().taskVariableValueEquals(\"nullVar\", null).count());\n\n    // Test querying for task variables not equals\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueNotEquals(\"longVar\", 999L).count());\n    assertEquals(\n        1,\n        taskService\n            .createTaskQuery()\n            .processVariableValueNotEquals(\"shortVar\", (short) 999)\n            .count());\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueNotEquals(\"integerVar\", 999).count());\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueNotEquals(\"stringVar\", \"999\").count());\n    assertEquals(\n        1,\n        taskService.createTaskQuery().processVariableValueNotEquals(\"booleanVar\", false).count());\n\n    // and query for the existing variable with NOT shoudl result in nothing found:\n    assertEquals(\n        0, taskService.createTaskQuery().processVariableValueNotEquals(\"longVar\", 928374L).count());\n\n    // Test value-only variable equals\n    assertEquals(1, taskService.createTaskQuery().processVariableValueEquals(928374L).count());\n    assertEquals(1, taskService.createTaskQuery().processVariableValueEquals((short) 123).count());\n    assertEquals(1, taskService.createTaskQuery().processVariableValueEquals(1234).count());\n    assertEquals(\n        1, taskService.createTaskQuery().processVariableValueEquals(\"stringValue\").count());\n    assertEquals(1, taskService.createTaskQuery().processVariableValueEquals(true).count());\n    assertEquals(1, taskService.createTaskQuery().processVariableValueEquals(date).count());\n    assertEquals(1, taskService.createTaskQuery().processVariableValueEquals(null).count());\n\n    assertEquals(0, taskService.createTaskQuery().processVariableValueEquals(999999L).count());\n    assertEquals(0, taskService.createTaskQuery().processVariableValueEquals((short) 999).count());\n    assertEquals(0, taskService.createTaskQuery().processVariableValueEquals(9999).count());\n    assertEquals(\n        0,\n        taskService.createTaskQuery().processVariableValueEquals(\"unexistingstringvalue\").count());\n    assertEquals(0, taskService.createTaskQuery().processVariableValueEquals(false).count());\n    assertEquals(\n        0, taskService.createTaskQuery().processVariableValueEquals(otherDate.getTime()).count());\n\n    // Test combination of task-variable and process-variable\n    Task task =\n        taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();\n    taskService.setVariableLocal(task.getId(), \"taskVar\", \"theValue\");\n    taskService.setVariableLocal(task.getId(), \"longVar\", 928374L);\n\n    assertEquals(\n        1,\n        taskService\n            .createTaskQuery()\n            .processVariableValueEquals(\"longVar\", 928374L)\n            .taskVariableValueEquals(\"taskVar\", \"theValue\")\n            .count());\n\n    assertEquals(\n        1,\n        taskService\n            .createTaskQuery()\n            .processVariableValueEquals(\"longVar\", 928374L)\n            .taskVariableValueEquals(\"longVar\", 928374L)\n            .count());\n\n    assertEquals(\n        1,\n        taskService\n            .createTaskQuery()\n            .processVariableValueEquals(928374L)\n            .taskVariableValueEquals(\"theValue\")\n            .count());\n\n    assertEquals(\n        1,\n        taskService\n            .createTaskQuery()\n            .processVariableValueEquals(928374L)\n            .taskVariableValueEquals(928374L)\n            .count());\n  }\n"}, {"dataset": "getInstance", "exampleID": 998, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 96, "focalAPIEnd": 118, "followUpCheck": "calndr.before(v.get(i).getDueDate())", "checkType": "IF", "followUpCheckExpressionStart": 168, "followUpCheckExpressionEnd": 206, "followUpCheckBlockStart": 168, "followUpCheckBlockEnd": 234, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jake2447/JustInTime/tree/master/src/currentAssignPanel.java", "rawCode": "  public void updateDListData() {\n    Vector<StudentAssignment> v = assigns;\n    Calendar cal = Calendar.getInstance();\n\n    for (int i = 0; i < v.size(); i++) {\n      if (cal.before(v.get(i).getDueDate())) dlist.addElement(v.get(i));\n    }\n\n    mem.dataUpdate();\n  }\n"}, {"dataset": "getInstance", "exampleID": 999, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 73, "focalAPIEnd": 95, "followUpCheck": "lastCheckinTime.before(calndr)", "checkType": "IF", "followUpCheckExpressionStart": 600, "followUpCheckExpressionEnd": 636, "followUpCheckBlockStart": 600, "followUpCheckBlockEnd": 723, "use": ["calendar.getInstance()", "calndr.setTimeInMillis(long)", "calndr.add(int,int)"], "useStart": [128, 156, 198], "useEnd": [150, 192, 281], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wyattearp/iDectectProject/tree/master/src/edu/uc/cs/distsys/Node.java", "rawCode": "  public NodeState checkState(long currentTime) {\n    Calendar curTime = Calendar.getInstance();\n    Calendar lastCheckinTime = Calendar.getInstance();\n    curTime.setTimeInMillis(currentTime);\n    curTime.add(Calendar.MILLISECOND, (int) (-1.25 * (double) DetectMain.HB_PERIOD_MS));\n    lastCheckinTime.setTimeInMillis(this.getLastCheckinRcv());\n    if (getState().equals(NodeState.SUSPECT)) {\n      if ((currentTime - suspectTime) >= (3 * DetectMain.HB_PERIOD_MS)) {\n        suspectTime = 0;\n        setState(NodeState.OFFLINE);\n      }\n    } else if (!getState().equals(NodeState.OFFLINE)) {\n      if (lastCheckinTime.before(curTime)) {\n        setState(NodeState.SUSPECT);\n        this.suspectTime = currentTime;\n      }\n    }\n    return state;\n  }\n"}, {"dataset": "getInstance", "exampleID": 1000, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "calndr = calendar.getInstance()", "focalAPIStart": 238, "focalAPIEnd": 260, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["calendar.getInstance()", "calndr.after(Calendar)"], "useStart": [279, 384], "useEnd": [301, 394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SharkHunter/Channel/tree/master/src/com/sharkhunter/channel/ChannelFolder.java", "rawCode": "  private boolean oldCache(String time, File f) {\n    if (time.equals(\"0\")) // never age this entry\n    return false;\n    int t;\n    try {\n      t = Integer.parseInt(time);\n\n    } catch (Exception e) {\n      t = 7;\n    }\n    Calendar c = Calendar.getInstance();\n    Calendar d = Calendar.getInstance();\n    d.setTimeInMillis(f.lastModified());\n    d.add(Calendar.DATE, t);\n    return c.after(d);\n  }\n"}]