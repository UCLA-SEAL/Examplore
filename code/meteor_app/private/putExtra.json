[{"dataset": "putExtra", "exampleID": 2901, "initialization": ["String value = getString(*)", "Intent intent = new Intent(*)"], "initializationStart": [95, 279], "initializationEnd": [143, 309], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setType(String)"], "configurationStart": [315], "configurationEnd": [348], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 354, "focalAPIEnd": 399, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "createChooser(intent,*)"], "useStart": [405, 480], "useEnd": [451, 549], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/telecapoland/jamendo-android/tree/master/src/com/teleca/jamendo/util/Helper.java", "rawCode": "  public static void share(Activity activity, PlaylistEntry entry) {\n    String text =\n        activity.getString(R.string.song_recommendation)\n            + \": \"\n            + String.format(\"http://www.jamendo.com/track/%d\", entry.getTrack().getId());\n\n    Intent shareIntent = new Intent(Intent.ACTION_SEND);\n    shareIntent.setType(\"text/plain\");\n    shareIntent.putExtra(Intent.EXTRA_TEXT, text);\n    shareIntent.putExtra(Intent.EXTRA_SUBJECT, \"\");\n    activity.startActivity(Intent.createChooser(shareIntent, activity.getString(R.string.share)));\n  }\n"}, {"dataset": "putExtra", "exampleID": 2902, "initialization": ["Intent intent = new Intent()"], "initializationStart": [471], "initializationEnd": [483], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putExtra(String,Intent)"], "configurationStart": [489], "configurationEnd": [550], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 556, "focalAPIEnd": 617, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,Parcelable)", "setResult(*,intent)"], "useStart": [723, 795], "useEnd": [789, 823], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andaag/ruterandroid/tree/master/src/com/neuron/trafikanten/Trafikanten.java", "rawCode": "  private void createShortcutStation(StationData station) {\n    final Intent shortcutIntent = new Intent(Intent.ACTION_MAIN);\n    shortcutIntent.setClassName(this, RealtimeView.class.getName());\n    shortcutIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n    final Bundle bundle = new Bundle();\n    station.writeSimpleBundle(bundle);\n    shortcutIntent.putExtras(bundle);\n\n    /*\n     * Setup container\n     */\n    final Intent intent = new Intent();\n    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);\n    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, station.stopName);\n    final Parcelable iconResource = Intent.ShortcutIconResource.fromContext(this, R.drawable.icon);\n    intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, iconResource);\n    setResult(RESULT_OK, intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2903, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [1303], "initializationEnd": [1342], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setAction(String)"], "configurationStart": [1350], "configurationEnd": [1378], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1386, "focalAPIEnd": 1416, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.sendBroadcast(intent)"], "useStart": [1424], "useEnd": [1453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Protips/tree/master/src/com/android/protips/ProtipWidget.java", "rawCode": "  void onReceiveAsync(Context context, Intent intent) {\n    setup(context);\n\n    Resources res = mContext.getResources();\n    mTips = res.getTextArray(mTipSet == 1 ? R.array.tips2 : R.array.tips);\n\n    if (intent.getAction().equals(ACTION_NEXT_TIP)) {\n      mMessage = getNextMessageIndex();\n      SharedPreferences.Editor pref = context.getSharedPreferences(PREFS_NAME, 0).edit();\n      pref.putInt(PREFS_TIP_NUMBER, mMessage);\n      pref.apply();\n      refresh();\n    } else if (intent.getAction().equals(ACTION_POKE)) {\n      blink(intent.getIntExtra(EXTRA_TIMES, 1));\n    } else if (intent.getAction().equals(AppWidgetManager.ACTION_APPWIDGET_ENABLED)) {\n      goodmorning();\n    } else if (intent.getAction().equals(\"android.provider.Telephony.SECRET_CODE\")) {\n      Log.d(\"Protips\", \"ACHIEVEMENT UNLOCKED\");\n      mTipSet = 1 - mTipSet;\n      mMessage = 0;\n\n      SharedPreferences.Editor pref = context.getSharedPreferences(PREFS_NAME, 0).edit();\n      pref.putInt(PREFS_TIP_NUMBER, mMessage);\n      pref.putInt(PREFS_TIP_SET, mTipSet);\n      pref.apply();\n\n      mContext.startActivity(\n          new Intent(Intent.ACTION_MAIN)\n              .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP)\n              .addCategory(Intent.CATEGORY_HOME));\n\n      final Intent bcast = new Intent(context, ProtipWidget.class);\n      bcast.setAction(ACTION_POKE);\n      bcast.putExtra(EXTRA_TIMES, 3);\n      mContext.sendBroadcast(bcast);\n    } else {\n      mIconRes = R.drawable.droidman_open;\n      refresh();\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2904, "initialization": ["Intent intent = new Intent()"], "initializationStart": [78], "initializationEnd": [90], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 147, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,boolean)", "intent.putExtra(String,String)", "getActivity(*,int,intent,int)"], "useStart": [237, 296, 735], "useEnd": [288, 401, 797], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_settings/tree/master/src/com/android/settings/ChooseLockGeneric.java", "rawCode": "    private Intent getBiometricSensorIntent() {\n      Intent fallBackIntent = new Intent().setClass(getActivity(), ChooseLockGeneric.class);\n      fallBackIntent.putExtra(LockPatternUtils.LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK, true);\n      fallBackIntent.putExtra(CONFIRM_CREDENTIALS, false);\n      fallBackIntent.putExtra(\n          EXTRA_SHOW_FRAGMENT_TITLE, R.string.backup_lock_settings_picker_title);\n\n      boolean showTutorial =\n          ALWAY_SHOW_TUTORIAL || !mChooseLockSettingsHelper.utils().isBiometricWeakEverChosen();\n      Intent intent = new Intent();\n      intent.setClassName(\"com.android.facelock\", \"com.android.facelock.SetupIntro\");\n      intent.putExtra(\"showTutorial\", showTutorial);\n      PendingIntent pending = PendingIntent.getActivity(getActivity(), 0, fallBackIntent, 0);\n      intent.putExtra(\"PendingIntent\", pending);\n      return intent;\n    }\n"}, {"dataset": "putExtra", "exampleID": 2905, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [188], "initializationEnd": [210], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setComponent(ComponentName)"], "configurationStart": [218], "configurationEnd": [293], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 301, "focalAPIEnd": 342, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivityForResult(intent,*)"], "useStart": [395], "useEnd": [465], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cens/ohmagePhone/tree/master/src/org/ohmage/prompt/remoteactivity/RemoteActivityPrompt.java", "rawCode": "  /** Creates an Intent from the given 'activityName' and then launches the Intent. */\n  private void launchActivity() {\n    if (callingActivity != null) {\n      Intent activityToLaunch = new Intent(actionName);\n      activityToLaunch.setComponent(new ComponentName(packageName, activityName));\n      activityToLaunch.putExtra(\"input\", input);\n\n      if (isCallable(activityToLaunch)) {\n        callingActivity.startActivityForResult(activityToLaunch, REQUEST_CODE);\n        launched = true;\n        runs++;\n      } else {\n        Toast.makeText(callingActivity, \"Required component is not installed\", Toast.LENGTH_SHORT)\n            .show();\n      }\n    } else {\n      Log.e(TAG, \"The calling Activity was null.\");\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2906, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [74], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setType(String)"], "configurationStart": [110], "configurationEnd": [138], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 144, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createChooser(intent,*)"], "useStart": [210], "useEnd": [269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ushahidi/Ushahidi_Android/tree/master/Core/src/com/ushahidi/android/app/activities/BaseActivity.java", "rawCode": "  protected void shareText(String shareItem) {\n\n    final Intent intent = new Intent(Intent.ACTION_SEND);\n    intent.setType(\"text/plain\");\n    intent.putExtra(Intent.EXTRA_TEXT, shareItem);\n\n    startActivity(Intent.createChooser(intent, getText(R.string.title_share)));\n  }\n"}, {"dataset": "putExtra", "exampleID": 2907, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [102], "initializationEnd": [135], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 141, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivityForResult(intent,int)"], "useStart": [201], "useEnd": [264], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sven-Dawitz/2.3.3-Phone-Merge/tree/master/src/com/android/phone/sip/SipSettings.java", "rawCode": "  private void startSipEditor(final SipProfile profile) {\n    mProfile = profile;\n    Intent intent = new Intent(this, SipEditor.class);\n    intent.putExtra(KEY_SIP_PROFILE, (Parcelable) profile);\n    startActivityForResult(intent, REQUEST_ADD_OR_EDIT_SIP_PROFILE);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2908, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [122], "initializationEnd": [166], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setType(String)", "intent.setData(Uri)"], "configurationStart": [172, 454], "configurationEnd": [197, 486], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 495, "focalAPIEnd": 526, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,boolean)", "intent.putExtra(String,boolean)", "new Intent(intent)", "new Intent(intent)"], "useStart": [534, 573, 610, 647, 685, 766, 1296], "useEnd": [565, 602, 639, 677, 721, 784, 1314], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/clarabayarri/meetme/tree/master/src/com/meetme/profile/ProfileActivity.java", "rawCode": "  private void doCrop() {\n    final ArrayList<CropOption> cropOptions = new ArrayList<CropOption>();\n\n    Intent intent = new Intent(\"com.android.camera.action.CROP\");\n    intent.setType(\"image/*\");\n\n    List<ResolveInfo> list = getPackageManager().queryIntentActivities(intent, 0);\n\n    int size = list.size();\n\n    if (size == 0) {\n      Toast.makeText(this, \"Can not find image crop app\", Toast.LENGTH_SHORT).show();\n\n      return;\n    } else {\n      intent.setData(mImageCaptureUri);\n\n      intent.putExtra(\"outputX\", 200);\n      intent.putExtra(\"outputY\", 200);\n      intent.putExtra(\"aspectX\", 1);\n      intent.putExtra(\"aspectY\", 1);\n      intent.putExtra(\"scale\", true);\n      intent.putExtra(\"return-data\", true);\n\n      if (size == 1) {\n        Intent i = new Intent(intent);\n        ResolveInfo res = list.get(0);\n\n        i.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name));\n\n        startActivityForResult(i, CROP_FROM_CAMERA);\n      } else {\n        for (ResolveInfo res : list) {\n          final CropOption co = new CropOption();\n\n          co.title = getPackageManager().getApplicationLabel(res.activityInfo.applicationInfo);\n          co.icon = getPackageManager().getApplicationIcon(res.activityInfo.applicationInfo);\n          co.appIntent = new Intent(intent);\n\n          co.appIntent.setComponent(\n              new ComponentName(res.activityInfo.packageName, res.activityInfo.name));\n\n          cropOptions.add(co);\n        }\n\n        CropOptionAdapter adapter = new CropOptionAdapter(getApplicationContext(), cropOptions);\n\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setTitle(\"Choose Crop App\");\n        builder.setAdapter(\n            adapter,\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int item) {\n                startActivityForResult(cropOptions.get(item).appIntent, CROP_FROM_CAMERA);\n              }\n            });\n\n        builder.setOnCancelListener(\n            new DialogInterface.OnCancelListener() {\n              @Override\n              public void onCancel(DialogInterface dialog) {\n\n                if (mImageCaptureUri != null) {\n                  getContentResolver().delete(mImageCaptureUri, null, null);\n                  mImageCaptureUri = null;\n                }\n              }\n            });\n\n        AlertDialog alert = builder.create();\n\n        alert.show();\n      }\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2909, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [322], "initializationEnd": [367], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setAction(String)"], "configurationStart": [373], "configurationEnd": [437], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 443, "focalAPIEnd": 515, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,long)", "intent.putExtra(String,boolean)", "intent.putExtra(String,Intent)"], "useStart": [521, 599, 885], "useEnd": [593, 681, 965], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninjanetworks/contacts/tree/master/src/com/android/contacts/ContactSaveService.java", "rawCode": "  /** Creates an intent that can be sent to this service to join two contacts. */\n  public static Intent createJoinContactsIntent(\n      Context context,\n      long contactId1,\n      long contactId2,\n      boolean contactWritable,\n      Class<?> callbackActivity,\n      String callbackAction) {\n    Intent serviceIntent = new Intent(context, ContactSaveService.class);\n    serviceIntent.setAction(ContactSaveService.ACTION_JOIN_CONTACTS);\n    serviceIntent.putExtra(ContactSaveService.EXTRA_CONTACT_ID1, contactId1);\n    serviceIntent.putExtra(ContactSaveService.EXTRA_CONTACT_ID2, contactId2);\n    serviceIntent.putExtra(ContactSaveService.EXTRA_CONTACT_WRITABLE, contactWritable);\n\n    // Callback intent will be invoked by the service once the contacts are joined.\n    Intent callbackIntent = new Intent(context, callbackActivity);\n    callbackIntent.setAction(callbackAction);\n    serviceIntent.putExtra(ContactSaveService.EXTRA_CALLBACK_INTENT, callbackIntent);\n\n    return serviceIntent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2910, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [1094], "initializationEnd": [1121], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 390, "tryExpressionEnd": 394, "tryBlockStart": 390, "tryBlockEnd": 1341, "catchExpressionStart": 1216, "catchExpressionEnd": 1250, "catchBlockStart": 1216, "catchBlockEnd": 1284, "exceptionHandlingCallStart": [1258], "exceptionHandlingCallEnd": [1277], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1129, "focalAPIEnd": 1171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.sendBroadcast(intent)"], "useStart": [1179], "useEnd": [1208], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zoebbmm/Android/tree/master/src/com/project2/utilities/WebAccessor.java", "rawCode": "  /**\n   * Used for courier to confirm an order has completed. If order status is incorrect, return -1\n   *\n   * @param order\n   */\n  public int orderTransactionConfirm(String orderID) {\n\n    // Create a new HttpClient and Post Header\n    HttpClient httpclient = new DefaultHttpClient();\n    HttpPost httppost = new HttpPost(ORDER_URI);\n    ContentValues values = new ContentValues();\n\n    try {\n      // Post to server\n      List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(3);\n      nameValuePairs.add(new BasicNameValuePair(\"orderID\", orderID));\n      nameValuePairs.add(new BasicNameValuePair(\"orderStatus\", Order.STATUS_CLOSED));\n      httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n      httpclient.execute(httppost);\n\n      // Update local database\n      values.put(MySQLiteHelper.COLUMN_ID, orderID);\n      values.put(MySQLiteHelper.COLUMN_ORDERSTATUS, Order.STATUS_CLOSED);\n      database.updateWithOnConflict(\n          MySQLiteHelper.TABLE_ORDERS, values, null, null, SQLiteDatabase.CONFLICT_IGNORE);\n\n      // Update order list\n      Intent intent = new Intent(NEW_INFO_INTENT);\n      intent.putExtra(NEW_INFO_EXTRA, NEW_ORDER);\n      context.sendBroadcast(intent);\n    } catch (ClientProtocolException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return 0;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2911, "initialization": ["Intent intent = new Intent(*,*)", "int value = toPhoneContractType(*)"], "initializationStart": [438, 1062], "initializationEnd": [517, 1096], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setType(String)"], "configurationStart": [523], "configurationEnd": [582], "guardCondition": "value>=0", "guardType": "IF {", "guardExpressionStart": 1106, "guardExpressionEnd": 1120, "guardBlockStart": 1106, "guardBlockEnd": 1194, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1133, "focalAPIEnd": 1183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["putExtra(intent,*,*)", "intent.putExtra(String,int)", "putExtra(intent,*,*)", "putExtra(intent,*,String)", "putExtra(intent,*,String)", "intent.putExtra(String,int)", "putExtra(intent,*,String)", "putExtra(intent,*,String)", "launchIntent(intent)"], "useStart": [1354, 1554, 2015, 2111, 2194, 2376, 2462, 2530, 2602], "useEnd": [1405, 1604, 2098, 2188, 2259, 2442, 2524, 2596, 2622], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ax003d/sichu_android/tree/master/submodules/android/src/com/google/zxing/client/android/result/ResultHandler.java", "rawCode": "  final void addContact(\n      String[] names,\n      String pronunciation,\n      String[] phoneNumbers,\n      String[] phoneTypes,\n      String[] emails,\n      String[] emailTypes,\n      String note,\n      String instantMessenger,\n      String address,\n      String addressType,\n      String org,\n      String title,\n      String url,\n      String birthday) {\n\n    // Only use the first name in the array, if present.\n    Intent intent = new Intent(Intent.ACTION_INSERT_OR_EDIT, ContactsContract.Contacts.CONTENT_URI);\n    intent.setType(ContactsContract.Contacts.CONTENT_ITEM_TYPE);\n    putExtra(intent, ContactsContract.Intents.Insert.NAME, names != null ? names[0] : null);\n\n    putExtra(intent, ContactsContract.Intents.Insert.PHONETIC_NAME, pronunciation);\n\n    int phoneCount =\n        Math.min(phoneNumbers != null ? phoneNumbers.length : 0, Contents.PHONE_KEYS.length);\n    for (int x = 0; x < phoneCount; x++) {\n      putExtra(intent, Contents.PHONE_KEYS[x], phoneNumbers[x]);\n      if (phoneTypes != null && x < phoneTypes.length) {\n        int type = toPhoneContractType(phoneTypes[x]);\n        if (type >= 0) {\n          intent.putExtra(Contents.PHONE_TYPE_KEYS[x], type);\n        }\n      }\n    }\n\n    int emailCount = Math.min(emails != null ? emails.length : 0, Contents.EMAIL_KEYS.length);\n    for (int x = 0; x < emailCount; x++) {\n      putExtra(intent, Contents.EMAIL_KEYS[x], emails[x]);\n      if (emailTypes != null && x < emailTypes.length) {\n        int type = toEmailContractType(emailTypes[x]);\n        if (type >= 0) {\n          intent.putExtra(Contents.EMAIL_TYPE_KEYS[x], type);\n        }\n      }\n    }\n\n    // No field for URL, birthday; use notes\n    StringBuilder aggregatedNotes = new StringBuilder();\n    for (String aNote : new String[] {url, birthday, note}) {\n      if (aNote != null) {\n        if (aggregatedNotes.length() > 0) {\n          aggregatedNotes.append('\\n');\n        }\n        aggregatedNotes.append(aNote);\n      }\n    }\n    if (aggregatedNotes.length() > 0) {\n      putExtra(intent, ContactsContract.Intents.Insert.NOTES, aggregatedNotes.toString());\n    }\n\n    putExtra(intent, ContactsContract.Intents.Insert.IM_HANDLE, instantMessenger);\n    putExtra(intent, ContactsContract.Intents.Insert.POSTAL, address);\n    if (addressType != null) {\n      int type = toAddressContractType(addressType);\n      if (type >= 0) {\n        intent.putExtra(ContactsContract.Intents.Insert.POSTAL_TYPE, type);\n      }\n    }\n    putExtra(intent, ContactsContract.Intents.Insert.COMPANY, org);\n    putExtra(intent, ContactsContract.Intents.Insert.JOB_TITLE, title);\n    launchIntent(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2912, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 438, "focalAPIEnd": 485, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ischweizer/MoSeS--Client-/tree/master/moses/libs/sources-support-v4/src/java/android/support/v4/app/ShareCompat.java", "rawCode": "    /**\n     * Set an array of email addresses as recipients of this share. This replaces all current \"to\"\n     * recipients that have been set so far.\n     *\n     * @param addresses Email addresses to send to\n     * @return This IntentBuilder for method chaining\n     * @see Intent#EXTRA_EMAIL\n     */\n    public IntentBuilder setEmailTo(String[] addresses) {\n      if (mToAddresses != null) {\n        mToAddresses = null;\n      }\n      mIntent.putExtra(Intent.EXTRA_EMAIL, addresses);\n      return this;\n    }\n"}, {"dataset": "putExtra", "exampleID": 2913, "initialization": ["Intent intent = new Intent()"], "initializationStart": [995], "initializationEnd": [1007], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setClass(Context,Class<?>)"], "configurationStart": [1015], "configurationEnd": [1059], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1067, "focalAPIEnd": 1110, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [1118], "useEnd": [1139], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Nemisis/Sms2HoneyComb/tree/master/src/com/asa/texttotab/tablet/MainHoneycombActivity.java", "rawCode": "  public void showMessageFragment(String phoneNumber) {\n    Log.d(TAG, \"showMessageFragment ( \" + phoneNumber + \")\");\n\n    if (isMultiPane()) {\n      // Check what fragment is show\n      MessageFragment message =\n          (MessageFragment) getFragmentManager().findFragmentById(R.id.message);\n      if (message == null) {\n        // Make a new fragment to show this selection.\n        message = MessageFragment.newInstance(phoneNumber);\n\n        // Execute a transaction, replacing any existing fragment with\n        // this one inside the frame\n        Log.d(TAG, \"about to run FragmentTransaction...\");\n        FragmentTransaction ft = getFragmentManager().beginTransaction();\n        ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);\n        // ft.addToBackStatc(\"message\");\n        ft.replace(R.id.message, message);\n        ft.commit();\n      }\n    } else {\n      // In portate mode you need to lauch the messageactivty to display\n      // the messageview\n      Intent intent = new Intent();\n      intent.setClass(this, MessageActivity.class);\n      intent.putExtra(\"phoneNumber\", phoneNumber);\n      startActivity(intent);\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2914, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [99], "initializationEnd": [138], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 144, "focalAPIEnd": 194, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,boolean)", "startActivity(intent)", "startActivity(intent)", "intent.removeExtra(String)", "startActivity(intent)", "startActivity(intent)", "intent.putExtra(String,boolean)", "startActivity(intent)"], "useStart": [200, 243, 289, 338, 395, 418, 463, 516, 571, 620], "useEnd": [237, 283, 331, 354, 411, 457, 479, 532, 614, 636], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_DeskClock/tree/master/tests/src/com/android/deskclock/TestAddAlarm.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    Intent i = new Intent(AlarmClock.ACTION_SET_ALARM);\n    i.putExtra(AlarmClock.EXTRA_MESSAGE, \"New Alarm!\");\n    i.putExtra(AlarmClock.EXTRA_HOUR, 12);\n    i.putExtra(AlarmClock.EXTRA_MINUTES, 27);\n    i.putExtra(AlarmClock.EXTRA_SKIP_UI, true);\n\n    startActivity(i);\n\n    // Should not see a duplicate\n    startActivity(i);\n\n    i.removeExtra(AlarmClock.EXTRA_MESSAGE);\n    startActivity(i);\n    // No dup of null message.\n    startActivity(i);\n\n    // Launch with SetAlarm UI.\n    i.putExtra(AlarmClock.EXTRA_SKIP_UI, false);\n    startActivity(i);\n\n    finish();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2915, "initialization": ["Intent intent = new Intent(*,*)", "Bundle value = new Bundle(int)"], "initializationStart": [97, 285], "initializationEnd": [130, 298], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setAction(String)", "intent.addCategory(String)"], "configurationStart": [136, 187], "configurationEnd": [181, 230], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 374, "focalAPIEnd": 424, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createChooser(intent,String)"], "useStart": [489], "useEnd": [535], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hagemt/libalexandria/tree/master/android/src/lib/alexandria/lannister/Lannister.java", "rawCode": "  public void onPushButton(View target) {\n    /* Spawn a top-level intent */\n    Intent intent = new Intent(this, MLService.class);\n    intent.setAction(Intent.ACTION_SEND_MULTIPLE);\n    intent.addCategory(Intent.CATEGORY_DEFAULT);\n    /* Bundle a new work unit */\n    Bundle bundle = new Bundle(1);\n    // bundle.putParcelable(Homework.UUID, new Homework(new KSVM()));\n    intent.putExtra(MLService.SMALL_WORK_UNIT, bundle);\n    /* Wrap in a prompt TODO do first? */\n    Intent request = Intent.createChooser(intent, \"Adding KSVM...\");\n    this.startService(request);\n    Toast.makeText(this, \"Okay, we'll get right on that.\", Toast.LENGTH_SHORT).show();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2916, "initialization": ["Intent intent = new Intent()"], "initializationStart": [573], "initializationEnd": [585], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putExtra(String,Intent)"], "configurationStart": [597], "configurationEnd": [658], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 670, "focalAPIEnd": 727, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,Bitmap)", "intent.setAction(String)", "setResult(*,intent)"], "useStart": [739, 802, 878], "useEnd": [790, 866, 906], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/astrid/src/com/todoroo/astrid/activity/FilterShortcutActivity.java", "rawCode": "        public void onClick(View v) {\n          Filter filter = (Filter) adapter.getSelection();\n          if (filter == null) {\n            DialogUtilities.okDialog(\n                FilterShortcutActivity.this, getString(R.string.FLA_no_filter_selected), null);\n            return;\n          }\n          Intent shortcutIntent = ShortcutActivity.createIntent((Filter) filter);\n\n          Bitmap bitmap =\n              FilterListFragment.superImposeListIcon(\n                  FilterShortcutActivity.this, filter.listingIcon, filter.listingTitle);\n          Intent intent = new Intent();\n          intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);\n          intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, filter.title);\n          intent.putExtra(Intent.EXTRA_SHORTCUT_ICON, bitmap);\n          intent.setAction(\"com.android.launcher.action.INSTALL_SHORTCUT\");\n          setResult(RESULT_OK, intent);\n          finish();\n        }\n"}, {"dataset": "putExtra", "exampleID": 2917, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 566, "focalAPIEnd": 618, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytown/Phone_ics/tree/master/src/com/android/phone/EmergencyCallbackModeExitDialog.java", "rawCode": "        @Override\n        public void onReceive(Context context, Intent intent) {\n          // Received exit Emergency Callback Mode notification close all dialogs\n          if (intent.getAction().equals(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED)) {\n            if (intent.getBooleanExtra(\"phoneinECMState\", false) == false) {\n              if (mAlertDialog != null) mAlertDialog.dismiss();\n              if (mProgressDialog != null) mProgressDialog.dismiss();\n              EmergencyCallbackModeExitDialog.this.setResult(\n                  RESULT_OK, (new Intent()).putExtra(EXTRA_EXIT_ECM_RESULT, true));\n              finish();\n            }\n          }\n        }\n"}, {"dataset": "putExtra", "exampleID": 2918, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [219], "initializationEnd": [270], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 284, "focalAPIEnd": 359, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivityForResult(intent,int)", "intent.putExtra(String,String)", "startActivityForResult(intent,int)"], "useStart": [373, 656, 752], "useEnd": [412, 738, 793], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/photo/mobile-android/tree/master/app/src/com/trovebox/android/app/UploadActivity.java", "rawCode": "    @Override\n    public void onClick(View v) {\n      switch (v.getId()) {\n        case R.id.select_tags:\n          {\n            TrackerUtils.trackButtonClickEvent(\"select_tags\", getActivity());\n            Intent i = new Intent(getActivity(), SelectTagsActivity.class);\n            i.putExtra(SelectTagsActivity.SELECTED_TAGS, tagsText.getText().toString());\n            startActivityForResult(i, REQUEST_TAGS);\n          }\n          break;\n        case R.id.edit_albums:\n          {\n            TrackerUtils.trackButtonClickEvent(\"select_albums\", getActivity());\n            Intent i = new Intent(getActivity(), SelectAlbumsActivity.class);\n            i.putExtra(SelectAlbumsActivity.SELECTED_ALBUMS, (Parcelable) albumsText.getTag());\n            startActivityForResult(i, REQUEST_ALBUMS);\n          }\n          break;\n        case R.id.button_upload:\n          TrackerUtils.trackButtonClickEvent(\"button_upload\", getActivity());\n          if (!checkAlbumRequiredAndSpecified((StringMapParcelableWrapper) albumsText.getTag())) {\n            return;\n          }\n          if (mUploadImageFile != null) {\n            startUpload(mUploadImageFile, mUploadImageFileOriginal, true, true);\n          } else {\n            GuiUtils.alert(R.string.upload_pick_photo_first);\n            showSelectionDialog();\n          }\n          break;\n        case R.id.button_edit:\n          TrackerUtils.trackButtonClickEvent(\"button_edit\", getActivity());\n\n          getFeatherFragment().startFeather(mUploadImageFile, ACTION_REQUEST_FEATHER);\n          break;\n        case R.id.image_upload:\n          TrackerUtils.trackButtonClickEvent(\"image_upload\", getActivity());\n          if (mUploadImageFile != null) {\n            Intent intent = new Intent();\n            intent.setAction(android.content.Intent.ACTION_VIEW);\n            intent.setDataAndType(Uri.fromFile(mUploadImageFile), \"image/png\");\n            startActivity(intent);\n          } else {\n            showSelectionDialog();\n          }\n          break;\n      }\n    }\n"}, {"dataset": "putExtra", "exampleID": 2919, "initialization": ["String value = Intent.getStringExtra(String)", "Intent intent = new Intent(Context,*)"], "initializationStart": [88, 316], "initializationEnd": [149, 364], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 370, "focalAPIEnd": 429, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getActivity(Context,int,intent,int)"], "useStart": [515], "useEnd": [563], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phonelab/phonelabservices/tree/master/PhonelabServices/src/edu/buffalo/cse/phonelab/ota/OTANotifier.java", "rawCode": "  @Override\n  public void onReceive(Context context, Intent intent1) {\n    String uri = intent1.getStringExtra(Util.DOWNLOADED_OTA_FILE_FILEPATH_URI);\n    String ns = Context.NOTIFICATION_SERVICE;\n    NotificationManager notificationManager = (NotificationManager) context.getSystemService(ns);\n\n    Intent intent = new Intent(context, PHLabOTAUpdateManager.class);\n    intent.putExtra(Util.DOWNLOADED_OTA_FILE_FILEPATH_URI, uri);\n    // intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    PendingIntent activity = PendingIntent.getActivity(context, 0, intent, 0);\n\n    // Notification notification = new Notification(R.drawable.ic_launcher,\n    // \"PhoneLab update available\", System.currentTimeMillis());\n\n    Notification notification =\n        new Notification.Builder(context)\n            .setTicker(\"PhoneLab update available\")\n            .setContentTitle(\"Click here to install.\")\n            .setContentInfo(\"New PhoneLab system update is available.\")\n            .setSmallIcon(R.drawable.phonelab_logo_black)\n            .setContentIntent(activity)\n            .getNotification();\n\n    // notification.flags |= Notification.FLAG_INSISTENT;\n    notification.flags |= Notification.FLAG_AUTO_CANCEL;\n    notification.flags |= Notification.FLAG_NO_CLEAR;\n\n    notification.defaults = Notification.DEFAULT_ALL;\n\n    // notification.setLatestEventInfo(context, \"New PhoneLab system update is available\",\n    // \"Click to Install\", activity);\n\n    notification.number += 1;\n    notificationManager.notify(1729, notification); // make a constant for the id\n  }\n"}, {"dataset": "putExtra", "exampleID": 2920, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [241], "initializationEnd": [281], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 287, "focalAPIEnd": 343, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [349], "useEnd": [370], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/huskysoft/403Interviewer/tree/master/InterviewAnnihilator/src/com/huskysoft/interviewannihilator/ui/MainActivity.java", "rawCode": "  /**\n   * Function used as the onClickHandler of the Question tiles on the main menu of the application.\n   *\n   * @param view The TextView that holds the selected question.\n   */\n  public void openQuestion(View view) {\n    Intent intent = new Intent(this, QuestionActivity.class);\n    intent.putExtra(EXTRA_MESSAGE, (Question) view.getTag());\n    startActivity(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2921, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [173], "initializationEnd": [227], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 279, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sendBroadcast(intent)"], "useStart": [364], "useEnd": [397], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/freekspb/photo-of-the-day/tree/master/src/hram/android/PhotoOfTheDay/appwidget/FastSettings.java", "rawCode": "  @Override\n  public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n    // Подготавливаем Intent для Broadcast\n    Intent changeSttings = new Intent(WidgetBroadcastEnum.CHANGE_SETTINGS_ACTION);\n    // помещаем данные об измененном свойстве\n    changeSttings.putExtra(WidgetBroadcastEnum.SETTINGS_KEY, key);\n    // отправляем\n    this.sendBroadcast(changeSttings);\n\n    super.onSharedPreferenceChanged(sharedPreferences, key);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2922, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [75], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 112, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Guillermoo/unutopia-android/tree/master/francho/RSS Curso Android/src/org/francho/apps/unutopia_android/app/RssIntent.java", "rawCode": "  public static Intent getArticleIntent(String link) {\n    Intent intent = new Intent(ACTION_VIEW_ARTICLE);\n    intent.putExtra(EXTRA_ARTICLE_LINK, link);\n\n    return intent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2923, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 206, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boussouira/android-arabic-reader/tree/master/src/org/geometerplus/android/fbreader/network/AuthenticationActivity.java", "rawCode": "  static Intent registerRunnable(Intent intent, Runnable action) {\n    synchronized (ourOnSuccessRunnableMap) {\n      if (action != null) {\n        ourOnSuccessRunnableMap.put(ourNextCode, action);\n        intent.putExtra(RUNNABLE_KEY, ourNextCode);\n        ++ourNextCode;\n      }\n    }\n    return intent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2924, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [139], "initializationEnd": [169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setClass(Context,Class<?>)"], "configurationStart": [175], "configurationEnd": [208], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 214, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,Bundle)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,boolean)"], "useStart": [289, 366, 443, 531], "useEnd": [360, 437, 525, 589], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Prototik/HoloEverywhere/tree/master/addons/preferences/src/org/holoeverywhere/preference/PreferenceActivity.java", "rawCode": "  public Intent onBuildStartFragmentIntent(\n      String fragmentName, Bundle args, int titleRes, int shortTitleRes) {\n    Intent intent = new Intent(Intent.ACTION_MAIN);\n    intent.setClass(this, getClass());\n    intent.putExtra(PreferenceActivity.EXTRA_SHOW_FRAGMENT, fragmentName);\n    intent.putExtra(PreferenceActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS, args);\n    intent.putExtra(PreferenceActivity.EXTRA_SHOW_FRAGMENT_TITLE, titleRes);\n    intent.putExtra(PreferenceActivity.EXTRA_SHOW_FRAGMENT_SHORT_TITLE, shortTitleRes);\n    intent.putExtra(PreferenceActivity.EXTRA_NO_HEADERS, true);\n    return intent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2925, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [8538], "initializationEnd": [8577], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 8585, "focalAPIEnd": 8639, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [8647], "useEnd": [8674], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cesarvf90/ProyectoRH/tree/master/src/pe/edu/pucp/proyectorh/MainActivity.java", "rawCode": "  @Override\n  public void onItemSelected(String id) {\n    if (dosPaneles) {\n      if (Modulo.MODULO_ACTUAL == Constante.MI_INFORMACION) {\n        if (Modulo.INFORMACION_PERSONAL.equals(id)) { // Información\n          // personal\n          VisualizarInfoColaboradoFragment fragment = new VisualizarInfoColaboradoFragment();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.EQUIPO_TRABAJO.equals(id)) { // Mi equipo de trabajo\n          ConsultarEquipoTrabajoFragment fragment = new ConsultarEquipoTrabajoFragment();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.CONTACTOS.equals(id)) { // Mis contactos\n          ContactosFragment fragment = new ContactosFragment();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.AGENDA.equals(id)) { // Mi agenda\n          AgendaFragment fragment = new AgendaFragment();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n      } else if (Modulo.MODULO_ACTUAL == Constante.RECLUTAMIENTO) {\n        if (Modulo.APROBAR_SOLICITUDES.equals(id)) { // Aprobar\n          // Solicitudes\n          // Oferta Laboral\n          AprobarSolicitudOfertaLaboral fragment = new AprobarSolicitudOfertaLaboral();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.EVALUACION_FASE1.equals(id)) { // Evaluar Postulante\n          // 1ra fase\n          MenuOfertasLaboralesPrimeraFase fragment = new MenuOfertasLaboralesPrimeraFase();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.EVALUACION_FASE3.equals(id)) { // Evaluar Postulante\n          // 3ra fase\n          MenuOfertasLaboralesTerceraFase fragment = new MenuOfertasLaboralesTerceraFase();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.POSTULAR_OFERTA.equals(id)) { // Postular a\n          // Convocatoria\n          PostularOfertaLaboral fragment = new PostularOfertaLaboral();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n\n      } else if (Modulo.MODULO_ACTUAL == Constante.REPORTES) {\n\n        if (Modulo.REPORTE_EVALUACION_360.equals(id)) {\n          Reporte360Grafico fragment = new Reporte360Grafico();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n\n        if (Modulo.REPORTE_HISTORICO_OBJETIVOS.equals(id)) {\n          ReportePersonalBSCPrincipal fragment = new ReportePersonalBSCPrincipal();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n\n        if (Modulo.REPORTE_OFERTAS_LABORALES.equals(id)) {\n          ReporteCubrimientoPrincipal fragment = new ReporteCubrimientoPrincipal();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n\n        if (Modulo.REPORTE_OBJETIVOS_BSC.equals(id)) {\n          ReporteObjetivosBSCPrincipal fragment = new ReporteObjetivosBSCPrincipal();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n      } else if (Modulo.MODULO_ACTUAL == Constante.EVALUACION_360) { // SE\n        // ACTUALIZO\n        if (Modulo.PENDIENTES.equals(id)) { // Rol evaluadores\n          RolEvaluador fragment = new RolEvaluador();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.ROL_EVALUADO.equals(id)) { // Rol de Evaluado\n          RolEvaluadoEver fragment = new RolEvaluadoEver();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.SUBORDINADOS.equals(id)) { // Mis subordinados\n          pe.edu.pucp.proyectorh.evaluacion360.MisSubordinados fragment =\n              new pe.edu.pucp.proyectorh.evaluacion360.MisSubordinados();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n      } else if (Modulo.MODULO_ACTUAL == Constante.LINEA_DE_CARRERA) {\n        if (Modulo.COMPARAR_CAPACIDADES.equals(id)) { // Comparar\n          // capacidades\n          ComparaCapacidad fragment = new ComparaCapacidad();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.CANDIDATOS_X_PUESTO.equals(id)) { // Candidatos por\n          // puesto\n          CandidatosxPuesto fragment = new CandidatosxPuesto();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n\n      } else if (Modulo.MODULO_ACTUAL == Constante.OBJETIVOS) {\n        if (Modulo.OBJETIVOS_EMPRESARIALES.equals(id)) { // Objetivos\n          // Empresa\n          ObjetivosEmpresa fragment = new ObjetivosEmpresa();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.OBJETIVOS_PROPIOS.equals(id)) { // Mis Objetivos\n          MisObjetivos fragment = new MisObjetivos();\n          fragment.indicador = MisObjetivos.IND_MISOBJS;\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.OBJETIVOS_EQUIPO.equals(id)) { // Objetivos\n          // Subordinados\n          // (PARA CREAR\n          // OBJETIVOS PARA MIS SUBORDINADOS -\n          // EVER)\n          MisObjetivos fragment = new MisObjetivos();\n          fragment.indicador = MisObjetivos.IND_SUBORD;\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n\n        if (Modulo.REGISTRAR_AVANCE.equals(id)) { // Registrar Avance\n          RegistroAvance fragment = new RegistroAvance();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.VISUALIZAR_AVANCE.equals(id)) { // Mis Avances\n          VisualizacionAvance fragment = new VisualizacionAvance();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n        if (Modulo.MONITOREO.equals(id)) { // Monitoreo ( PARA VER LOS\n          // OBJETIVOS DE\n          // MIS SUBORDINADOS - CARLOS)\n          Monitoreo fragment = new Monitoreo();\n          getSupportFragmentManager()\n              .beginTransaction()\n              .replace(R.id.opcion_detail_container, fragment)\n              .commit();\n        }\n      } else {\n        Bundle arguments = new Bundle();\n        arguments.putString(DetalleFragment.ARG_ITEM_ID, id);\n        DetalleFragment fragment = new DetalleFragment();\n        fragment.setArguments(arguments);\n        getSupportFragmentManager()\n            .beginTransaction()\n            .replace(R.id.opcion_detail_container, fragment)\n            .commit();\n      }\n    } else {\n      Intent detailIntent = new Intent(this, DetalleActivity.class);\n      detailIntent.putExtra(DetalleFragment.ARG_ITEM_ID, id);\n      startActivity(detailIntent);\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2926, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [110], "initializationEnd": [167], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "info(*)", "warning(*)"], "tryExpressionStart": 74, "tryExpressionEnd": 78, "tryBlockStart": 74, "tryBlockEnd": 433, "catchExpressionStart": 283, "catchExpressionEnd": 304, "catchBlockStart": 283, "catchBlockEnd": 433, "exceptionHandlingCallStart": [379, 312, 401], "exceptionHandlingCallEnd": [392, 393, 426], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 175, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [230], "useEnd": [259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/photon-infotech/android-native-shoppingcart/tree/master/source/src/com/photon/phresco/nativeapp/eshop/activity/OrderReviewActivity.java", "rawCode": "  /** start offers activity */\n  private void startOffersActivity() {\n    try {\n      Intent offersActivity = new Intent(getApplicationContext(), OffersActivity.class);\n      offersActivity.putExtra(currActivity, \"offers\");\n      startActivity(offersActivity);\n      finish();\n    } catch (Exception ex) {\n      PhrescoLogger.info(TAG + \" - startOffersActivity - Exception : \" + ex.toString());\n      PhrescoLogger.warning(ex);\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2927, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [82], "initializationEnd": [128], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 134, "focalAPIEnd": 173, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.startActivity(intent)"], "useStart": [179], "useEnd": [203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bedmondmark/redbus/tree/master/src/org/redbus/ui/arrivaltime/ArrivalTimeActivity.java", "rawCode": "  public static void showActivity(Context context, int stopCode) {\n    Intent i = new Intent(context, ArrivalTimeActivity.class);\n    i.putExtra(\"StopCode\", (long) stopCode);\n    context.startActivity(i);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2928, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [968], "initializationEnd": [1004], "hasTryCatch": 1, "exceptionType": "PackageManager.NameNotFoundException", "exceptionHandlingCall": ["w(String,*)"], "tryExpressionStart": 301, "tryExpressionEnd": 305, "tryBlockStart": 301, "tryBlockEnd": 1470, "catchExpressionStart": 1395, "catchExpressionEnd": 1442, "catchBlockStart": 1395, "catchBlockEnd": 1470, "exceptionHandlingCallStart": [1450], "exceptionHandlingCallEnd": [1463], "configuration": ["intent.addFlags(int)"], "configurationStart": [1014], "configurationEnd": [1073], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1273, "focalAPIEnd": 1327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [1337], "useEnd": [1358], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/monaca/monaca-framework-android/tree/master/BarcodeScannerLibrary/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  /**\n   * We want the help screen to be shown automatically the first time a new version of the app is\n   * run. The easiest way to do this is to check android:versionCode from the manifest, and compare\n   * it to a value stored as a preference.\n   */\n  private boolean showHelpOnFirstLaunch() {\n    try {\n      PackageInfo info = getPackageManager().getPackageInfo(PACKAGE_NAME, 0);\n      int currentVersion = info.versionCode;\n      // Since we're paying to talk to the PackageManager anyway, it makes sense to cache the app\n      // version name here for display in the about box later.\n      this.versionName = info.versionName;\n      SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n      int lastVersion = prefs.getInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN, 0);\n      if (currentVersion > lastVersion) {\n        prefs.edit().putInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN, currentVersion).commit();\n        Intent intent = new Intent(this, HelpActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n        // Show the default page on a clean install, and the what's new page on an upgrade.\n        String page = lastVersion == 0 ? HelpActivity.DEFAULT_PAGE : HelpActivity.WHATS_NEW_PAGE;\n        intent.putExtra(HelpActivity.REQUESTED_PAGE_KEY, page);\n        startActivity(intent);\n        return true;\n      }\n    } catch (PackageManager.NameNotFoundException e) {\n      Log.w(TAG, e);\n    }\n    return false;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2929, "initialization": ["Intent intent = new Intent(*,*)", "String value = getResources()"], "initializationStart": [559, 707], "initializationEnd": [611, 721], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.addFlags(int)"], "configurationStart": [621], "configurationEnd": [680], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 771, "focalAPIEnd": 817, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,Uri)", "intent.setType(String)", "startActivity(intent)"], "useStart": [827, 880, 939, 991], "useEnd": [870, 929, 965, 1012], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gdgturkiye/add2013-android/tree/master/Zxing/src/com/google/zxing/client/android/history/HistoryActivity.java", "rawCode": "  @Override\n  public boolean onOptionsItemSelected(MenuItem item) {\n    int itemId = item.getItemId();\n    if (itemId == R.id.menu_history_send) {\n      CharSequence history = historyManager.buildHistory();\n      Uri historyFile = HistoryManager.saveHistory(history.toString());\n      if (historyFile == null) {\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\n        builder.setMessage(R.string.msg_unmount_usb);\n        builder.setPositiveButton(R.string.button_ok, null);\n        builder.show();\n      } else {\n        Intent intent = new Intent(Intent.ACTION_SEND, Uri.parse(\"mailto:\"));\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n        String subject = getResources().getString(R.string.history_email_title);\n        intent.putExtra(Intent.EXTRA_SUBJECT, subject);\n        intent.putExtra(Intent.EXTRA_TEXT, subject);\n        intent.putExtra(Intent.EXTRA_STREAM, historyFile);\n        intent.setType(\"text/csv\");\n        try {\n          startActivity(intent);\n        } catch (ActivityNotFoundException anfe) {\n          Log.w(TAG, anfe.toString());\n        }\n      }\n    } else if (itemId == R.id.menu_history_clear_text) {\n      AlertDialog.Builder builder = new AlertDialog.Builder(this);\n      builder.setMessage(R.string.msg_sure);\n      builder.setCancelable(true);\n      builder.setPositiveButton(\n          R.string.button_ok,\n          new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int i2) {\n              historyManager.clearHistory();\n              dialog.dismiss();\n              finish();\n            }\n          });\n      builder.setNegativeButton(R.string.button_cancel, null);\n      builder.show();\n    } else {\n      return super.onOptionsItemSelected(item);\n    }\n    return true;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2930, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [277], "initializationEnd": [322], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 328, "focalAPIEnd": 420, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [426], "useEnd": [447], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMPUT301W13T11/FoodBook/tree/master/FooBook/src/ca/ualberta/cmput301w13t11/FoodBook/SearchActivity.java", "rawCode": "  /**\n   * Responds to the \"What can I make?\" button and searches recipes that can be made with the user's\n   * current ingredients in \"My Ingredients\"\n   *\n   * @param The View that is calling the method\n   */\n  public void OnIngredientSearch(View View) {\n    Intent intent = new Intent(this, SearchResultsActivity.class);\n    intent.putExtra(FoodBookApplication.SEARCH_TYPE, FoodBookApplication.ALL_INGREDIENTS_SEARCH);\n    startActivity(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2931, "initialization": ["Intent intent = new Intent()"], "initializationStart": [190], "initializationEnd": [202], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setPackage(String)", "intent.setType(String)"], "configurationStart": [208, 265], "configurationEnd": [259, 293], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 299, "focalAPIEnd": 338, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.setFlags(int)", "Context.startActivity(intent)"], "useStart": [344, 396], "useEnd": [390, 425], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cstdr/cstdr.ningningcat/tree/master/src/cstdr/ningningcat/util/ShareUtil.java", "rawCode": "  /**\n   * 分享微信公众帐号文章网址到Pocket（因为我自己用的很多，所以增加的奇葩功能:)）\n   *\n   * @param context\n   * @param url\n   */\n  public static void shareUrlToPocket(Context context, String url) {\n    Intent intent = new Intent();\n    intent.setPackage(\"com.ideashower.readitlater.pro\");\n    intent.setType(\"text/plain\");\n    intent.putExtra(Intent.EXTRA_TEXT, url);\n    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    context.startActivity(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2932, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [120], "initializationEnd": [159], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.addFlags(int)"], "configurationStart": [167], "configurationEnd": [220], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 228, "focalAPIEnd": 281, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,boolean)", "intent.putExtra(String,boolean)", "Context.sendStickyBroadcast(intent)"], "useStart": [289, 508, 570], "useEnd": [344, 543, 606], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/services/java/com/android/server/usb/UsbDeviceManager.java", "rawCode": "    private void updateUsbState() {\n      // send a sticky broadcast containing current USB state\n      Intent intent = new Intent(UsbManager.ACTION_USB_STATE);\n      intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);\n      intent.putExtra(UsbManager.USB_CONNECTED, mConnected);\n      intent.putExtra(UsbManager.USB_CONFIGURED, mConfigured);\n\n      if (mCurrentFunctions != null) {\n        String[] functions = mCurrentFunctions.split(\",\");\n        for (int i = 0; i < functions.length; i++) {\n          intent.putExtra(functions[i], true);\n        }\n      }\n\n      mContext.sendStickyBroadcast(intent);\n    }\n"}, {"dataset": "putExtra", "exampleID": 2933, "initialization": ["Intent intent = new Intent(Activity,*)"], "initializationStart": [151], "initializationEnd": [201], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 207, "focalAPIEnd": 243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,boolean)", "Activity.startActivity(intent)"], "useStart": [249, 291, 332], "useEnd": [285, 326, 361], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mtwebster/IEmail/tree/master/src/com/mwebster/iemail/activity/setup/AccountSetupBasics.java", "rawCode": "  public static void actionNewAccountWithCredentials(\n      Activity fromActivity, String username, String password, boolean easFlow) {\n    Intent i = new Intent(fromActivity, AccountSetupBasics.class);\n    i.putExtra(EXTRA_USERNAME, username);\n    i.putExtra(EXTRA_PASSWORD, password);\n    i.putExtra(EXTRA_EAS_FLOW, easFlow);\n    fromActivity.startActivity(i);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2934, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [383], "initializationEnd": [421], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 435, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,boolean)", "startActivity(intent)", "intent.putExtra(String,String)", "intent.putExtra(String,boolean)", "startActivity(intent)"], "useStart": [487, 526, 649, 703, 743], "useEnd": [512, 547, 689, 729, 764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fywb251/bsl_impc_android/tree/master/cube-android/src/com/foreveross/chameleon/activity/FacadeActivity.java", "rawCode": "  @Override\n  public boolean dispatchKeyEvent(KeyEvent event) {\n    if (event.getKeyCode() == KeyEvent.KEYCODE_BACK && url != null\n    /* && !url.contains(\"login\") */ ) {\n      if (event.getAction() == KeyEvent.ACTION_DOWN) {\n        if (\"file:///android_asset/www/com.csair.deviceregist/index.html\".equals(url)) {\n          if (PadUtils.isPad(application)) {\n            Intent i = new Intent(this, FacadeActivity.class);\n            i.putExtra(\"value\", URL.PAD_LOGIN_URL);\n            i.putExtra(\"isPad\", true);\n            this.startActivity(i);\n          } else { // 手机\n            Intent i = new Intent(this, FacadeActivity.class);\n            i.putExtra(\"value\", URL.PHONE_LOGIN_URL);\n            i.putExtra(\"isPad\", false);\n            this.startActivity(i);\n          }\n          return true;\n        }\n        Dialog dialog =\n            new AlertDialog.Builder(this)\n                .setTitle(\"提示\")\n                .setMessage(\"确定退出 ？\")\n                .setNegativeButton(\n                    \"取消\",\n                    new DialogInterface.OnClickListener() {\n                      @Override\n                      public void onClick(DialogInterface dialog, int which) {\n                        dialog.dismiss();\n                      }\n                    })\n                .setPositiveButton(\n                    \"确定\",\n                    new DialogInterface.OnClickListener() {\n\n                      @Override\n                      public void onClick(DialogInterface dialog, int which) {\n                        dialog.dismiss();\n                        Application.class\n                            .cast(FacadeActivity.this.getApplicationContext())\n                            .exitApp();\n                        FacadeActivity.this.finish();\n                      }\n                    })\n                .create();\n\n        if (!PadUtils.isPad(this)) {\n          if (this.url.endsWith(\"phone/index.html\")) {\n            dialog.show();\n            return true;\n          } else if (this.url.endsWith(\"#manager\")) {\n            parentFragment.sendJavascript(\"backToMain()\");\n            int index = url.indexOf(\"#manager\");\n            url = url.substring(0, index);\n            return true;\n          } else if (this.url.endsWith(\"phone/login.html\")) {\n            dialog.show();\n            return true;\n          }\n        } else {\n          dialog.show();\n          return true;\n        }\n      }\n    }\n\n    return super.dispatchKeyEvent(event);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2935, "initialization": ["Intent intent = new Intent()"], "initializationStart": [659], "initializationEnd": [671], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setClassName(String,String)"], "configurationStart": [678], "configurationEnd": [753], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 759, "focalAPIEnd": 802, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "Activity.startActivityForResult(intent,int)"], "useStart": [844, 1247], "useEnd": [902, 1300], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cnaut/considerateapp/tree/master/mobilecombat-frontend/frontend-android/src/com/facebook/android/Facebook.java", "rawCode": "  /**\n   * Internal method to handle single sign-on backend for authorize().\n   *\n   * @param activity The Android Activity that will parent the ProxyAuth Activity.\n   * @param applicationId The Facebook application identifier.\n   * @param permissions A list of permissions required for this application. If you do not require\n   *     any permissions, pass an empty String array.\n   * @param activityCode Activity code to uniquely identify the result Intent in the callback.\n   */\n  private boolean startSingleSignOn(\n      Activity activity, String applicationId, String[] permissions, int activityCode) {\n    boolean didSucceed = true;\n    Intent intent = new Intent();\n\n    intent.setClassName(\"com.facebook.katana\", \"com.facebook.katana.ProxyAuth\");\n    intent.putExtra(\"client_id\", applicationId);\n    if (permissions.length > 0) {\n      intent.putExtra(\"scope\", TextUtils.join(\",\", permissions));\n    }\n\n    // Verify that the application whose package name is\n    // com.facebook.katana.ProxyAuth\n    // has the expected FB app signature.\n    if (!validateActivityIntent(activity, intent)) {\n      return false;\n    }\n\n    mAuthActivity = activity;\n    mAuthPermissions = permissions;\n    mAuthActivityCode = activityCode;\n    try {\n      activity.startActivityForResult(intent, activityCode);\n    } catch (ActivityNotFoundException e) {\n      didSucceed = false;\n    }\n\n    return didSucceed;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2936, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [328], "initializationEnd": [367], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 377, "focalAPIEnd": 438, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [448], "useEnd": [464], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wwyz/DotaSpark/tree/master/gg/src/com/examples/gg/loadMore/LoadMore_Twitch.java", "rawCode": "  private void openPlayer(\n      int selectedPosition, Context mContext, int videoPostion, boolean isSave) {\n    switch (selectedPosition) {\n      case 0:\n        // save pref\n        if (isSave) {\n          prefs.edit().putString(\"preferredPlayer\", \"0\").commit();\n        }\n        // Using new video player\n        Intent i = new Intent(mContext, VideoBuffer.class);\n        i.putExtra(\"video\", videolist.get(videoPostion).getVideoId());\n        startActivity(i);\n        break;\n\n      case 1:\n        // save pref\n        if (isSave) {\n          prefs.edit().putString(\"preferredPlayer\", \"1\").commit();\n        }\n\n        // Using old player\n        if (check()) {\n          Intent intent1 = new Intent(mContext, TwitchPlayer.class);\n          intent1.putExtra(\"video\", videolist.get(videoPostion).getVideoId());\n          startActivity(intent1);\n\n        } else {\n          Intent intent2 = new Intent(mContext, FlashInstallerActivity.class);\n          startActivity(intent2);\n        }\n        break;\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2937, "initialization": ["Intent intent = new Intent(Context,*)", "String value = Spinner.getSelectedItem()", "String value = toString()"], "initializationStart": [343, 436, 529], "initializationEnd": [388, 461, 565], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 576, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [895], "useEnd": [919], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMUCognisense/Cognisense/tree/master/Android-Apps/RegistrationApp/src/com/example/locationrepresentation/FindDevices.java", "rawCode": "  @Override\n  public void onClick(View v) {\n    final Context context = this;\n    switch (v.getId()) {\n        // once the user click on the assign button, the receiving of getInfo\n        // trigger will be stopped and user will assign location to the service\n        // he just chose\n      case R.id.searchAssign:\n        Intent assignLoc = new Intent(context, LocationAssignment.class);\n\n        // if no device is found\n        if (devices.getSelectedItem() == null) {\n          return;\n        }\n\n        String serviceID = devices.getSelectedItem().toString();\n\n        assignLoc.putExtra(\"Device\", serviceID);\n        if (isStarted) {\n          // stop the receiving of getInfo trigger\n          Intent stop = new Intent(FindDevices.this, RegistrationService.class);\n          stop.putExtra(\"command\", \"STOP\");\n          startService(stop);\n          isStarted = false;\n        }\n        startActivity(assignLoc);\n        break;\n\n        // once the user hit refresh button, the registration service will start\n        // a new round of searching for services in the home\n      case R.id.searchRefresh:\n        // clear all the info in the current UI\n        ArrayList<String> empty = new ArrayList<String>();\n        populateSearchSpinner(empty);\n        details.setText(\"\");\n\n        // send get info action to all the devices\n        Intent findDevice = new Intent(FindDevices.this, RegistrationService.class);\n        findDevice.putExtra(\"command\", \"FINDDEVICE\");\n        isStarted = true;\n        startService(findDevice);\n        break;\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2938, "initialization": ["Intent intent = new Intent()"], "initializationStart": [60], "initializationEnd": [72], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 122, "focalAPIEnd": 142, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [148], "useEnd": [164], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dichro/Fe-Fi/tree/master/src/to/rcpt/fefi/EyefiCardListActivity.java", "rawCode": "  private void launchEditActivity(long id) {\n    Intent i = new Intent().setClass(this, EyefiCardEditActivity.class);\n    i.putExtra(\"id\", id);\n    startActivity(i);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2939, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [1038], "initializationEnd": [1085], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1091, "focalAPIEnd": 1121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.sendBroadcast(intent)"], "useStart": [1127], "useEnd": [1157], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/tests/coretests/src/android/app/DownloadManagerBaseTest.java", "rawCode": "  /**\n   * Helper to enables or disables airplane mode. If successful, it also broadcasts an intent\n   * indicating that the mode has changed.\n   *\n   * <p>Note: Needs the following permission: android.permission.WRITE_SETTINGS\n   *\n   * @param enable true if airplane mode should be ON, false if it should be OFF\n   */\n  protected void setAirplaneModeOn(boolean enable) throws Exception {\n    int state = enable ? 1 : 0;\n\n    // Change the system setting\n    Settings.System.putInt(mContext.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, state);\n\n    String timeoutMessage =\n        \"Timed out waiting for airplane mode to be \" + (enable ? \"enabled!\" : \"disabled!\");\n\n    // wait for airplane mode to change state\n    int currentWaitTime = 0;\n    while (Settings.System.getInt(\n            mContext.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, -1)\n        != state) {\n      timeoutWait(currentWaitTime, DEFAULT_WAIT_POLL_TIME, DEFAULT_MAX_WAIT_TIME, timeoutMessage);\n    }\n\n    // Post the intent\n    Intent intent = new Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED);\n    intent.putExtra(\"state\", true);\n    mContext.sendBroadcast(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2940, "initialization": ["Intent intent = new Intent()"], "initializationStart": [1190], "initializationEnd": [1202], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1216, "focalAPIEnd": 1260, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["send(Context,*,intent)"], "useStart": [1274], "useEnd": [1329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guhl/platform_frameworks_opt_telephony/tree/master/src/java/com/android/internal/telephony/SMSDispatcher.java", "rawCode": "  /**\n   * Called when SMS send completes. Broadcasts a sentIntent on success. On failure, either sets up\n   * retries or broadcasts a sentIntent with the failure in the result code.\n   *\n   * @param ar AsyncResult passed into the message handler. ar.result should an SmsResponse instance\n   *     if send was successful. ar.userObj should be an SmsTracker instance.\n   */\n  protected void handleSendComplete(AsyncResult ar) {\n    SmsTracker tracker = (SmsTracker) ar.userObj;\n    PendingIntent sentIntent = tracker.mSentIntent;\n\n    if (ar.result != null) {\n      tracker.mMessageRef = ((SmsResponse) ar.result).messageRef;\n    } else {\n      Rlog.d(TAG, \"SmsResponse was null\");\n    }\n\n    if (ar.exception == null) {\n      if (false) {\n        Rlog.d(TAG, \"SMS send complete. Broadcasting \" + \"intent: \" + sentIntent);\n      }\n\n      if (tracker.mDeliveryIntent != null) {\n        // Expecting a status report. Add it to the list.\n        deliveryPendingList.add(tracker);\n      }\n\n      if (sentIntent != null) {\n        try {\n          if (mRemainingMessages > -1) {\n            mRemainingMessages--;\n          }\n\n          if (mRemainingMessages == 0) {\n            Intent sendNext = new Intent();\n            sendNext.putExtra(SEND_NEXT_MSG_EXTRA, true);\n            sentIntent.send(mContext, Activity.RESULT_OK, sendNext);\n          } else {\n            sentIntent.send(Activity.RESULT_OK);\n          }\n        } catch (CanceledException ex) {\n        }\n      }\n    } else {\n      if (false) {\n        Rlog.d(TAG, \"SMS send failed\");\n      }\n\n      int ss = mPhone.getServiceState().getState();\n\n      if (ss != ServiceState.STATE_IN_SERVICE) {\n        handleNotInService(ss, tracker.mSentIntent);\n      } else if ((((CommandException) (ar.exception)).getCommandError()\n              == CommandException.Error.SMS_FAIL_RETRY)\n          && tracker.mRetryCount < MAX_SEND_RETRIES) {\n        // Retry after a delay if needed.\n        // TODO: According to TS 23.040, 9.2.3.6, we should resend\n        // with the same TP-MR as the failed message, and\n        // TP-RD set to 1. However, we don't have a means of\n        // knowing the MR for the failed message (EF_SMSstatus\n        // may or may not have the MR corresponding to this\n        // message, depending on the failure). Also, in some\n        // implementations this retry is handled by the baseband.\n        tracker.mRetryCount++;\n        Message retryMsg = obtainMessage(EVENT_SEND_RETRY, tracker);\n        sendMessageDelayed(retryMsg, SEND_RETRY_DELAY);\n      } else if (tracker.mSentIntent != null) {\n        int error = RESULT_ERROR_GENERIC_FAILURE;\n\n        if (((CommandException) (ar.exception)).getCommandError()\n            == CommandException.Error.FDN_CHECK_FAILURE) {\n          error = RESULT_ERROR_FDN_CHECK_FAILURE;\n        }\n        // Done retrying; return an error to the app.\n        try {\n          Intent fillIn = new Intent();\n          if (ar.result != null) {\n            fillIn.putExtra(\"errorCode\", ((SmsResponse) ar.result).errorCode);\n          }\n          if (mRemainingMessages > -1) {\n            mRemainingMessages--;\n          }\n\n          if (mRemainingMessages == 0) {\n            fillIn.putExtra(SEND_NEXT_MSG_EXTRA, true);\n          }\n\n          tracker.mSentIntent.send(mContext, error, fillIn);\n        } catch (CanceledException ex) {\n        }\n      }\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2941, "initialization": ["byte value = List<ExtendetMarker>.get(int)", "byte value = getCategId()", "Intent intent = new Intent(*,*)"], "initializationStart": [411, 512, 829], "initializationEnd": [434, 582, 882], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 943, "focalAPIEnd": 986, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,byte)", "startActivity(intent)"], "useStart": [1038, 1089], "useEnd": [1081, 1115], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boeserwolf91/Studi-App-Koethen/tree/master/src/de/hsanhalt/inf/studiappkoethen/activities/GoogleMapsActivity.java", "rawCode": "  /**\n   * Starten der Detail-Ansicht\n   *\n   * @param markerId\n   */\n  private void startDetailedView(String markerId) {\n    byte currentCategId = 0;\n    byte currentBuildId = 0;\n    int i = 0;\n    boolean matchedMarkerFound = false;\n    while ((!displayedMarkers.isEmpty())\n        && (i < displayedMarkers.size())\n        && (!matchedMarkerFound)) { // Suche nach den, zum Marker gehoerigen Daten.\n      if (displayedMarkers.get(i).getMarker().getId().equals(markerId)) {\n        currentCategId =\n            displayedMarkers\n                .get(i)\n                .getCategId(); // Bestimmung der Kategorie und der Gebaeude-Id des Markers\n        currentBuildId = displayedMarkers.get(i).getBuildId();\n        matchedMarkerFound = true;\n      }\n      i++;\n    }\n    if (matchedMarkerFound) {\n      Intent intent =\n          new Intent(\n              this, DetailActivity.class); // Erstellung eines Intents fuer die Detail-Ansicht.\n      intent.putExtra(\"category\", currentCategId); // Uebergabe der Kategorie und Gebaeude-ID.\n      intent.putExtra(\"building\", currentBuildId);\n      this.startActivity(intent); // Aufruf der Detail-Ansicht.\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2942, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [211], "initializationEnd": [256], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putExtra(String,Long)"], "configurationStart": [262], "configurationEnd": [306], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 312, "focalAPIEnd": 370, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.startActivity(intent)"], "useStart": [377], "useEnd": [406], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android/tree/master/src/edu/mit/mitmobile2/libraries/BookDetailActivity.java", "rawCode": "  static void launchActivity(Context context, List<BookItem> items, int position) {\n    // load the activity that shows all the detail search results\n    Long key = sBookHashMap.put(items);\n\n    Intent intent = new Intent(context, BookDetailActivity.class);\n    intent.putExtra(BookDetailActivity.KEY, key);\n    intent.putExtra(BookDetailActivity.KEY_POSITION, position);\n\n    context.startActivity(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2943, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [109], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 154, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenKit/openkit-android/tree/master/OpenKitSDK/src/io/openkit/OKLeaderboard.java", "rawCode": "  public static Intent getLeaderboardIntent(Context ctx, int leaderboardID) {\n    Intent leaderboardIntent = new Intent(ctx, OKScoresActivity.class);\n    leaderboardIntent.putExtra(OKLeaderboard.LEADERBOARD_ID_KEY, leaderboardID);\n    return leaderboardIntent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2944, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 171, "focalAPIEnd": 224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytown/Phone_ics/tree/master/src/com/android/phone/EmergencyCallbackModeExitDialog.java", "rawCode": "  /** Closes activity when dialog is dismissed */\n  public void onDismiss(DialogInterface dialog) {\n    EmergencyCallbackModeExitDialog.this.setResult(\n        RESULT_OK, (new Intent()).putExtra(EXTRA_EXIT_ECM_RESULT, false));\n    finish();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2945, "initialization": ["Intent intent = new Intent(String)", "Bundle value = new Bundle()"], "initializationStart": [283, 369], "initializationEnd": [318, 381], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 425, "focalAPIEnd": 462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getService(Context,int,intent,*)", "getService(Context,int,intent,*)"], "useStart": [506, 979], "useEnd": [581, 1054], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vogtp/android-CPU-tuner/tree/master/src/ch/amana/android/cputuner/service/ConfigurationAutoloadService.java", "rawCode": "  public static void scheduleNextEvent(Context context) {\n    Context ctx = context.getApplicationContext();\n    ConfigurationAutoloadModel nextCam = getModelForNextExecution(ctx);\n    AlarmManager am = (AlarmManager) ctx.getSystemService(Context.ALARM_SERVICE);\n    Intent intent = new Intent(ACTION_SCEDULE_AUTOLOAD);\n    if (nextCam != null) {\n      Bundle bundle = new Bundle();\n      nextCam.saveToBundle(bundle);\n      intent.putExtra(EXTRA_VALUES, bundle);\n      PendingIntent operation =\n          PendingIntent.getService(ctx, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n      if (nextCam.isExactScheduling()) {\n        am.setRepeating(AlarmManager.RTC_WAKEUP, nextCam.getNextExecution(), -1, operation);\n      } else {\n        am.setInexactRepeating(\n            AlarmManager.RTC_WAKEUP,\n            nextCam.getNextExecution(),\n            AlarmManager.INTERVAL_FIFTEEN_MINUTES,\n            operation);\n      }\n    } else {\n      PendingIntent operation =\n          PendingIntent.getService(ctx, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n      am.cancel(operation);\n      context.stopService(new Intent(context, ConfigurationAutoloadService.class));\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2946, "initialization": ["String value = EmojUmGridViewAdapter.getPicName(int)", "Intent intent = new Intent(*,*)"], "initializationStart": [248, 474], "initializationEnd": [276, 529], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "e(String,*)"], "tryExpressionStart": 128, "tryExpressionEnd": 132, "tryBlockStart": 128, "tryBlockEnd": 1259, "catchExpressionStart": 1168, "catchExpressionEnd": 1188, "catchBlockStart": 1168, "catchBlockEnd": 1259, "exceptionHandlingCallStart": [1239, 1228], "exceptionHandlingCallEnd": [1251, 1252], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 537, "focalAPIEnd": 590, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,boolean)", "intent.putExtras(Bundle)", "startActivityForResult(intent,*)"], "useStart": [657, 712, 771, 830, 889, 951, 1097], "useEnd": [704, 763, 822, 881, 943, 994, 1160], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xunroudabing/DaBing/tree/master/WeiXinEmoj/src/com/dabing/emoj/fragment/EmotionEmojFragment.java", "rawCode": "  public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n    // TODO Auto-generated method stub\n    try {\n      String name = mObject.getString(\"t\");\n      String menuId = mObject.getString(\"id\");\n      String picname = adapter.getPicName(position);\n      String json = adapter.getData();\n      Log.d(TAG, \"onItemClick:\" + picname);\n      // String url = AppConstant.PIC_SERVER_URL+picname+AppConstant.PIC_ITEM_FULL_PREFIX;\n      Intent intent = new Intent(getActivity(), EmojBrowseViewActivity.class);\n      intent.putExtra(AppConstant.INTENT_PIC_NAME, picname);\n      // intent.putExtra(AppConstant.INTENT_PIC_URL, url);\n      intent.putExtra(AppConstant.INTENT_TITLE, name);\n      intent.putExtra(AppConstant.INTENT_PIC_PARMS, name);\n      intent.putExtra(AppConstant.INTENT_PIC_ARRAY, json);\n      intent.putExtra(AppConstant.INTENT_MENU_ID, menuId);\n      intent.putExtra(AppConstant.INTENT_EMOTION_MODE, true);\n      intent.putExtras(getActivity().getIntent());\n      // intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n      // startActivity(intent);\n      startActivityForResult(intent, AppConstant.REQUEST_COMMON_EMOJ);\n    } catch (Exception e) {\n      // TODO: handle exception\n      Log.e(TAG, e.toString());\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2947, "initialization": ["Intent intent = new Intent()", "Bundle value = new Bundle()"], "initializationStart": [961, 1028], "initializationEnd": [973, 1040], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setComponent(ComponentName)", "value.putString(String,*)"], "configurationStart": [983, 1050], "configurationEnd": [1002, 1109], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1119, "focalAPIEnd": 1150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [1160], "useEnd": [1177], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liwenhaosuper/SysOfIMPS/tree/master/IMPS/src/com/imps/activities/Login.java", "rawCode": "    @Override\n    public void onReceive(Context context, Intent intent) {\n      // TODO Auto-generated method stub\n      String action = intent.getAction();\n      System.out.println(\"!!!login: get broadcast!!! action is \" + action);\n      pd.dismiss();\n      if (\"error_msg\".equals(action)) {\n        errorMsg = intent.getStringExtra(\"message\");\n        showDialog(ERROR);\n        stopConfig();\n        try {\n          initialConfig();\n        } catch (Exception e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      } else if (\"login_success\".equals(action)) {\n        Toast.makeText(\n                Login.this, getResources().getString(R.string.login_success), Toast.LENGTH_SHORT)\n            .show();\n        System.out.println(\"!!!login_success has been received!!!\");\n        UserManager.getInstance().SendFriListReq();\n        ComponentName cn = new ComponentName(Login.this, My_Map.class);\n        Intent ti = new Intent();\n        ti.setComponent(cn);\n        Bundle bundle = new Bundle();\n        bundle.putString(\"mUsername\", account.getText().toString());\n        ti.putExtra(\"username\", bundle);\n        startActivity(ti);\n\n      } else if (\"exit\".equals(action)) {\n        Client.session.close();\n        stopService(new Intent(Login.this, IMService.class));\n        finish();\n      }\n    }\n"}, {"dataset": "putExtra", "exampleID": 2948, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [110], "initializationEnd": [157], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setData(Uri)"], "configurationStart": [295], "configurationEnd": [325], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 331, "focalAPIEnd": 426, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "Intent_addFlagNoAnimation(intent)", "startActivity(intent)"], "useStart": [432, 544, 597], "useEnd": [538, 591, 618], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gaeeyo/Tuboroidon/tree/master/Tuboroid/src/info/narazaki/android/tuboroid/activity/Find2chSearchActivity.java", "rawCode": "  @Override\n  protected void onListItemClick(ListView l, View v, int position, long id) {\n    Intent intent = new Intent(this, ThreadEntryListActivity.class);\n    Find2chResultData result_data = ((Find2chResultAdapter) getListAdapter()).getData(position);\n    String uri = result_data.uri_;\n    intent.setData(Uri.parse(uri));\n    intent.putExtra(ThreadEntryListActivity.INTENT_KEY_MAYBE_THREAD_NAME, result_data.thread_name_);\n    intent.putExtra(\n        ThreadEntryListActivity.INTENT_KEY_MAYBE_ONLINE_COUNT, result_data.online_count_);\n    MigrationSDK5.Intent_addFlagNoAnimation(intent);\n    startActivity(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2949, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [1482], "initializationEnd": [1520], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1526, "focalAPIEnd": 1562, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "startActivity(intent)"], "useStart": [1568, 1626], "useEnd": [1620, 1647], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Supy/SnapVote/tree/master/SnapVote/src/main/java/uct/snapvote/ProcessActivity.java", "rawCode": "  public void signalResult(List<DetectedSquare> squareList) {\n\n    // Save the original image with valid votes identified drawn on it,\n    saveOverlayImage(squareList);\n\n    // Generate tallies for each colour\n    HashMap<Integer, Integer> colourCounts = new HashMap<Integer, Integer>();\n\n    Log.d(\"uct.snapvote\", \"colours\");\n    // first add all the expected colours\n    for (int i = 0; i < colourArray.length; i++) {\n      Log.d(\"uct.snapvote\", \"\" + i + \"\" + colourArray[i]);\n      colourCounts.put(colourArray[i], 0);\n    }\n\n    // now add all the detected squares to the hashmap\n    // ONLY add them, if that colour is expected\n    for (DetectedSquare s : squareList) {\n      int c = s.Colour();\n\n      if (colourCounts.containsKey(c)) {\n        colourCounts.put(c, colourCounts.get(c) + 1);\n      }\n    }\n\n    // Convert map with tallies into a serializable JSON object\n    JSONObject pollResult = new JSONObject();\n    try {\n      JSONArray results = new JSONArray();\n      for (Map.Entry<Integer, Integer> entry : colourCounts.entrySet()) {\n        JSONObject r = new JSONObject();\n        r.put(\"colour\", entry.getKey());\n        r.put(\"count\", entry.getValue());\n        results.put(r);\n      }\n      pollResult.put(\"results\", results);\n\n      pollResult.put(\"date\", new Date().toString());\n\n    } catch (JSONException e) {\n      Log.e(\"uct.snapvote\", \"Failed to encode poll result to JSON.\");\n    }\n\n    // Launch result screen with poll result data.\n    Intent intent = new Intent(this, ResultActivity.class);\n    intent.putExtra(\"FlagNewPoll\", true);\n    intent.putExtra(\"PollResult\", pollResult.toString());\n    startActivity(intent);\n    // close this one\n    finish();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2950, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [153], "initializationEnd": [203], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 213, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivityForResult(intent,int)"], "useStart": [287], "useEnd": [341], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/onyx-intl/orion-viewer/tree/master/mupdf/android/src/com/artifex/mupdfdemo/PrintDialogActivity.java", "rawCode": "    @Override\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n      if (url.startsWith(ZXING_URL)) {\n        Intent intentScan = new Intent(\"com.google.zxing.client.android.SCAN\");\n        intentScan.putExtra(\"SCAN_MODE\", \"QR_CODE_MODE\");\n        try {\n          startActivityForResult(intentScan, ZXING_SCAN_REQUEST);\n        } catch (ActivityNotFoundException error) {\n          view.loadUrl(url);\n        }\n      } else {\n        view.loadUrl(url);\n      }\n      return false;\n    }\n"}, {"dataset": "putExtra", "exampleID": 2951, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [57], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 108, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,boolean)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "startActivityForResult(intent,int)"], "useStart": [153, 187, 226, 265, 301, 334, 369, 403, 434, 469, 500, 548, 596, 629], "useEnd": [181, 220, 259, 295, 328, 363, 397, 428, 463, 494, 542, 590, 622, 681], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bkrieger/fruity/tree/master/src/edu/upenn/cis/fruity/SalesSelectionActivity.java", "rawCode": "  public void onPaymentClick(View view) {\n    Intent i = new Intent(this, SalesPaymentActivity.class);\n\n    i.putExtra(\"ageCategory\", age_category);\n    i.putExtra(\"isMale\", isMale);\n    i.putExtra(\"mixedBag\", mixedBags);\n    i.putExtra(\"smoothie\", smoothies);\n    i.putExtra(\"granola\", granola);\n    i.putExtra(\"apple\", apples);\n    i.putExtra(\"orange\", oranges);\n    i.putExtra(\"grapes\", grapes);\n    i.putExtra(\"pear\", pears);\n    i.putExtra(\"banana\", bananas);\n    i.putExtra(\"kiwi\", kiwis);\n    i.putExtra(\"other1:\" + other1name, other1);\n    i.putExtra(\"other2:\" + other2name, other2);\n    i.putExtra(\"total\", total);\n\n    startActivityForResult(i, SalesSelectionActivity_ID);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2952, "initialization": ["Intent intent = new Intent(MainActivity,*)"], "initializationStart": [250], "initializationEnd": [289], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 297, "focalAPIEnd": 332, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["MainActivity.startService(intent)"], "useStart": [340], "useEnd": [370], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/k-kojak/rgai.android.message.logger/tree/master/src/hu/rgai/android/test/MainActivity.java", "rawCode": "  /** Handles LoadMore button press. */\n  public static void loadMoreMessage() {\n    int coolDown = 5; // sec\n    if (lastLoadMoreEvent == null\n        || lastLoadMoreEvent.getTime() + coolDown * 1000 < new Date().getTime()) {\n      Intent service = new Intent(instance, MainService.class);\n      service.putExtra(\"load_more\", true);\n      instance.startService(service);\n      lastLoadMoreEvent = new Date();\n\n      if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n        // getting height of load button\n        LinearLayout.LayoutParams params =\n            (LinearLayout.LayoutParams)\n                loadIndicator.findViewById(R.id.pbHeaderProgress).getLayoutParams();\n        params.height = loadMoreButton.getHeight();\n        loadIndicator.findViewById(R.id.pbHeaderProgress).setLayoutParams(params);\n        lv.removeFooterView(loadMoreButton);\n        lv.addFooterView(loadIndicator);\n        isLoading = true;\n      } else {\n        Toast.makeText(instance, \"Loading more...\", Toast.LENGTH_LONG).show();\n      }\n    } else {\n      Log.d(\"rgai\", \"@@@skipping load button press for \" + coolDown + \" sec\");\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2953, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [306], "initializationEnd": [365], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 371, "focalAPIEnd": 415, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "startActivity(intent)"], "useStart": [421, 473, 520, 567], "useEnd": [467, 514, 561, 594], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ciph3rzer0/BitBot/tree/master/src/edu/sru/andgate/bitbot/ide/botbuilder/BotBuilderActivity.java", "rawCode": "  /**\n   * Start the mission\n   *\n   * @param v the view that called this.\n   */\n  public void begin(View v) {\n    // Save bot to xml before going to graphics - Possible load from xml inside graphics\n    saveBot(\"test_bot.xml\", \"BotBuilder Bot\");\n\n    // Start up the game engine\n    Intent engineIntent = new Intent(BotBuilderActivity.this, NickGameActivity.class);\n    engineIntent.putExtra(\"Bot\", \"test_bot.xml\");\n    engineIntent.putExtra(\"GameType\", missionType);\n    engineIntent.putExtra(\"MapFile\", mapFile);\n    engineIntent.putExtra(\"Enemy\", enemyFile);\n    startActivity(engineIntent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2954, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [102], "initializationEnd": [135], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 141, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivityForResult(intent,int)"], "useStart": [201], "useEnd": [264], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnlk2-custom/android_packages_apps_Phone/tree/master/src/com/android/phone/sip/SipSettings.java", "rawCode": "  private void startSipEditor(final SipProfile profile) {\n    mProfile = profile;\n    Intent intent = new Intent(this, SipEditor.class);\n    intent.putExtra(KEY_SIP_PROFILE, (Parcelable) profile);\n    startActivityForResult(intent, REQUEST_ADD_OR_EDIT_SIP_PROFILE);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2955, "initialization": ["Intent intent = new Intent()", "Intent intent = new Intent()"], "initializationStart": [385, 3767], "initializationEnd": [397, 3779], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setClass(Context,Class<?>)", "intent.setClass(Context,Class<?>)"], "configurationStart": [405, 3787], "configurationEnd": [481, 3872], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 3880, "focalAPIEnd": 3909, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getActivity(Context,int,intent,int)", "intent.setClass(Context,Class<?>)", "intent.putExtra(String,String)", "getActivity(Context,int,intent,int)"], "useStart": [3936, 4583, 4676, 4732], "useEnd": [3985, 4668, 4705, 4781], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/packages/SystemUI/src/com/android/systemui/usb/StorageNotification.java", "rawCode": "  private void onStorageStateChangedAsync(String path, String oldState, String newState) {\n    Slog.i(\n        TAG, String.format(\"Media {%s} state changed from {%s} -> {%s}\", path, oldState, newState));\n    if (newState.equals(Environment.MEDIA_SHARED)) {\n      /*\n       * Storage is now shared. Modify the UMS notification\n       * for stopping UMS.\n       */\n      Intent intent = new Intent();\n      intent.setClass(mContext, com.android.systemui.usb.UsbStorageActivity.class);\n      PendingIntent pi = PendingIntent.getActivity(mContext, 0, intent, 0);\n      setUsbStorageNotification(\n          com.android.internal.R.string.usb_storage_stop_notification_title,\n          com.android.internal.R.string.usb_storage_stop_notification_message,\n          com.android.internal.R.drawable.stat_sys_warning,\n          false,\n          true,\n          pi);\n    } else if (newState.equals(Environment.MEDIA_CHECKING)) {\n      /*\n       * Storage is now checking. Update media notification and disable\n       * UMS notification.\n       */\n      setMediaStorageNotification(\n          com.android.internal.R.string.ext_media_checking_notification_title,\n          com.android.internal.R.string.ext_media_checking_notification_message,\n          com.android.internal.R.drawable.stat_notify_sdcard_prepare,\n          true,\n          false,\n          null);\n      updateUsbMassStorageNotification(false);\n    } else if (newState.equals(Environment.MEDIA_MOUNTED)) {\n      /*\n       * Storage is now mounted. Dismiss any media notifications,\n       * and enable UMS notification if connected.\n       */\n      setMediaStorageNotification(0, 0, 0, false, false, null);\n      updateUsbMassStorageNotification(mUmsAvailable);\n    } else if (newState.equals(Environment.MEDIA_UNMOUNTED)) {\n      /*\n       * Storage is now unmounted. We may have been unmounted\n       * because the user is enabling/disabling UMS, in which case we don't\n       * want to display the 'safe to unmount' notification.\n       */\n      if (!mStorageManager.isUsbMassStorageEnabled()) {\n        if (oldState.equals(Environment.MEDIA_SHARED)) {\n          /*\n           * The unmount was due to UMS being enabled. Dismiss any\n           * media notifications, and enable UMS notification if connected\n           */\n          setMediaStorageNotification(0, 0, 0, false, false, null);\n          updateUsbMassStorageNotification(mUmsAvailable);\n        } else {\n          /*\n           * Show safe to unmount media notification, and enable UMS\n           * notification if connected.\n           */\n          if (Environment.isExternalStorageRemovable()) {\n            setMediaStorageNotification(\n                com.android.internal.R.string.ext_media_safe_unmount_notification_title,\n                com.android.internal.R.string.ext_media_safe_unmount_notification_message,\n                com.android.internal.R.drawable.stat_notify_sdcard,\n                true,\n                true,\n                null);\n          } else {\n            // This device does not have removable storage, so\n            // don't tell the user they can remove it.\n            setMediaStorageNotification(0, 0, 0, false, false, null);\n          }\n          updateUsbMassStorageNotification(mUmsAvailable);\n        }\n      } else {\n        /*\n         * The unmount was due to UMS being enabled. Dismiss any\n         * media notifications, and disable the UMS notification\n         */\n        setMediaStorageNotification(0, 0, 0, false, false, null);\n        updateUsbMassStorageNotification(false);\n      }\n    } else if (newState.equals(Environment.MEDIA_NOFS)) {\n      /*\n       * Storage has no filesystem. Show blank media notification,\n       * and enable UMS notification if connected.\n       */\n      Intent intent = new Intent();\n      intent.setClass(mContext, com.android.internal.app.ExternalMediaFormatActivity.class);\n      intent.putExtra(\"path\", path);\n      PendingIntent pi = PendingIntent.getActivity(mContext, 0, intent, 0);\n\n      setMediaStorageNotification(\n          com.android.internal.R.string.ext_media_nofs_notification_title,\n          com.android.internal.R.string.ext_media_nofs_notification_message,\n          com.android.internal.R.drawable.stat_notify_sdcard_usb,\n          true,\n          false,\n          pi);\n      updateUsbMassStorageNotification(mUmsAvailable);\n    } else if (newState.equals(Environment.MEDIA_UNMOUNTABLE)) {\n      /*\n       * Storage is corrupt. Show corrupt media notification,\n       * and enable UMS notification if connected.\n       */\n      Intent intent = new Intent();\n      intent.setClass(mContext, com.android.internal.app.ExternalMediaFormatActivity.class);\n      intent.putExtra(\"path\", path);\n      PendingIntent pi = PendingIntent.getActivity(mContext, 0, intent, 0);\n\n      setMediaStorageNotification(\n          com.android.internal.R.string.ext_media_unmountable_notification_title,\n          com.android.internal.R.string.ext_media_unmountable_notification_message,\n          com.android.internal.R.drawable.stat_notify_sdcard_usb,\n          true,\n          false,\n          pi);\n      updateUsbMassStorageNotification(mUmsAvailable);\n    } else if (newState.equals(Environment.MEDIA_REMOVED)) {\n      /*\n       * Storage has been removed. Show nomedia media notification,\n       * and disable UMS notification regardless of connection state.\n       */\n      setMediaStorageNotification(\n          com.android.internal.R.string.ext_media_nomedia_notification_title,\n          com.android.internal.R.string.ext_media_nomedia_notification_message,\n          com.android.internal.R.drawable.stat_notify_sdcard_usb,\n          true,\n          false,\n          null);\n      updateUsbMassStorageNotification(false);\n    } else if (newState.equals(Environment.MEDIA_BAD_REMOVAL)) {\n      /*\n       * Storage has been removed unsafely. Show bad removal media notification,\n       * and disable UMS notification regardless of connection state.\n       */\n      setMediaStorageNotification(\n          com.android.internal.R.string.ext_media_badremoval_notification_title,\n          com.android.internal.R.string.ext_media_badremoval_notification_message,\n          com.android.internal.R.drawable.stat_sys_warning,\n          true,\n          true,\n          null);\n      updateUsbMassStorageNotification(false);\n    } else {\n      Slog.w(TAG, String.format(\"Ignoring unknown state {%s}\", newState));\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2956, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [87], "initializationEnd": [144], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 150, "focalAPIEnd": 182, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.sendBroadcast(intent)"], "useStart": [188], "useEnd": [212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ben7th/pin-2010/tree/master/android/mindpin/src/com/mindpin/receiver/SynDataBroadcastReceiver.java", "rawCode": "  private void send_progress_broadcast(Context context, int progress) {\n    Intent i = new Intent(BroadcastReceiverConstants.ACTION_SYN_DATA_UI);\n    i.putExtra(\"progress\", progress);\n    context.sendBroadcast(i);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2957, "initialization": ["Intent intent = findActivityIntent(Context,String,String)"], "initializationStart": [179], "initializationEnd": [260], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(intent==null)", "guardType": "IF {", "guardExpressionStart": 266, "guardExpressionEnd": 285, "guardBlockStart": 266, "guardBlockEnd": 312, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 318, "focalAPIEnd": 393, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)"], "useStart": [318, 318, 318, 318], "useEnd": [455, 510, 661, 733], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/androideveloper/RAVA-Voting/tree/master/RavaVotingAndroid/libraries/facebook/src/com/facebook/internal/NativeProtocol.java", "rawCode": "  public static Intent createLoginDialog20121101Intent(\n      Context context, String applicationId, ArrayList<String> permissions, String audience) {\n    Intent intent =\n        findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, ACTION_LOGIN_DIALOG);\n    if (intent == null) {\n      return null;\n    }\n\n    intent\n        .putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20121101)\n        .putExtra(EXTRA_PROTOCOL_ACTION, ACTION_LOGIN_DIALOG)\n        .putExtra(EXTRA_APPLICATION_ID, applicationId)\n        .putStringArrayListExtra(EXTRA_PERMISSIONS, ensureDefaultPermissions(permissions))\n        .putExtra(EXTRA_PROTOCOL_CALL_ID, generateCallId())\n        .putExtra(EXTRA_WRITE_PRIVACY, ensureDefaultAudience(audience));\n\n    return intent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2958, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [207], "initializationEnd": [249], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 282, "focalAPIEnd": 312, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [318], "useEnd": [339], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yasushi-saito/AndroidShogi/tree/master/src/com/ysaito/shogi/GameLogListActivity.java", "rawCode": "  private void replayGame(int position) {\n    GameLog log = getObjectAtPosition(position);\n    if (log == null) {\n      Log.d(TAG, \"Invalid item click: \" + position);\n      return;\n    }\n    Intent intent = new Intent(this, ReplayGameActivity.class);\n    Serializable ss = log;\n    intent.putExtra(\"gameLog\", ss);\n    startActivity(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2959, "initialization": ["Intent intent = new Intent()"], "initializationStart": [571], "initializationEnd": [583], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.addCategory(String)", "intent.setAction(String)"], "configurationStart": [589, 638], "configurationEnd": [632, 678], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 684, "focalAPIEnd": 720, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,CharSequence)", "findTargetAppPackage(intent)", "intent.setPackage(String)", "intent.addFlags(int)", "intent.addFlags(int)", "attachMoreExtras(intent)", "Activity.startActivity(intent)"], "useStart": [726, 794, 905, 946, 999, 1064, 1094], "useEnd": [762, 822, 940, 993, 1058, 1088, 1124], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/selesse/WineDB/tree/master/src/main/java/com/google/zxing/integration/android/IntentIntegrator.java", "rawCode": "  /**\n   * Shares the given text by encoding it as a barcode, such that another user can scan the text off\n   * the screen of the device.\n   *\n   * @param text the text string to encode as a barcode\n   * @param type type of data to encode. See {@code com.google.zxing.client.android.Contents.Type}\n   *     constants.\n   * @return the {@link AlertDialog} that was shown to the user prompting them to download the app\n   *     if a prompt was needed, or null otherwise\n   */\n  public final AlertDialog shareText(CharSequence text, CharSequence type) {\n    Intent intent = new Intent();\n    intent.addCategory(Intent.CATEGORY_DEFAULT);\n    intent.setAction(BS_PACKAGE + \".ENCODE\");\n    intent.putExtra(\"ENCODE_TYPE\", type);\n    intent.putExtra(\"ENCODE_DATA\", text);\n    String targetAppPackage = findTargetAppPackage(intent);\n    if (targetAppPackage == null) {\n      return showDownloadDialog();\n    }\n    intent.setPackage(targetAppPackage);\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n    attachMoreExtras(intent);\n    activity.startActivity(intent);\n    return null;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2960, "initialization": ["long value = PluginService.getTransferId(Transfer)", "Intent intent = new Intent(*,*)"], "initializationStart": [161, 276], "initializationEnd": [192, 316], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 322, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [379], "useEnd": [400], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mlegenhausen/mdcf/tree/master/MobileDataCollector/src/de/uniluebeck/itm/mdc/TransferListActivity.java", "rawCode": "  @Override\n  protected void onListItemClick(ListView l, View v, int position, long id) {\n    Transfer transfer = transfers.get(position);\n    long transferId = service.getTransferId(transfer);\n    Log.i(TAG, \"Transfer (\" + transferId + \"): \" + transfer);\n    Intent intent = new Intent(this, TransferActivity.class);\n    intent.putExtra(PluginService.TRANSFER, transferId);\n    startActivity(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2961, "initialization": ["Intent intent = new Intent()"], "initializationStart": [285], "initializationEnd": [297], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 327, "focalAPIEnd": 364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/interdroid/interdroid-swan/tree/master/src/interdroid/swan/SensorInfo.java", "rawCode": "  /**\n   * Returns an intent with component.getClassName() + \"$ConfigurationActivity\" for launching the\n   * sensors configuration activity.\n   *\n   * @return an intent for launching the configuration activity\n   */\n  public final Intent getConfigurationIntent() {\n    Intent result = new Intent().setComponent(component);\n    result.putExtra(\"entityId\", entityId);\n    return result;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2962, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [154], "initializationEnd": [193], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.addFlags(int)"], "configurationStart": [203], "configurationEnd": [282], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 292, "focalAPIEnd": 326, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [336], "useEnd": [357], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunriver/projects/tree/master/android/weiciyuan/src/org/qii/weiciyuan/ui/blackmagic/BlackMagicActivity.java", "rawCode": "  @Override\n  public boolean onOptionsItemSelected(MenuItem item) {\n    switch (item.getItemId()) {\n      case android.R.id.home:\n        Intent intent = new Intent(this, AccountActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.putExtra(\"launcher\", false);\n        startActivity(intent);\n        return true;\n      case R.id.menu_login:\n        if (Utility.isTaskStopped(loginTask)) {\n          loginTask = new LoginTask();\n          loginTask.executeOnExecutor(MyAsyncTask.THREAD_POOL_EXECUTOR);\n        }\n        return true;\n      default:\n        return super.onOptionsItemSelected(item);\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2963, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [173], "initializationEnd": [211], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.addFlags(int)"], "configurationStart": [217], "configurationEnd": [239], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 245, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "sendBroadcast(intent)"], "useStart": [273, 328], "useEnd": [295, 344], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pershoot/android_device_malata_harmony_gtablet/tree/master/overlay/packages/apps/audiofix/src/com/gojimi/audiofix/audiofixservice.java", "rawCode": "  public void toggleHeadset() {\n    Log.d(TAG, \"Notifing Android of Noisy Intent\");\n    Intent intent = new Intent(AudioManager.ACTION_AUDIO_BECOMING_NOISY);\n    Intent i = new Intent(Intent.ACTION_HEADSET_PLUG);\n    i.addFlags(1073741824);\n    i.putExtra(\"state\", 1);\n    i.putExtra(\"name\", \"\");\n    sendBroadcast(intent);\n    sendBroadcast(i);\n    Log.d(TAG, \"Simulated Headset Plugging In\");\n    Log.d(TAG, \"Notifing Android of Second Noisy Intent\");\n    Intent intent2 = new Intent(AudioManager.ACTION_AUDIO_BECOMING_NOISY);\n    Intent i2 = new Intent(Intent.ACTION_HEADSET_PLUG);\n    i2.addFlags(1073741824);\n    i2.putExtra(\"state\", 0);\n    i2.putExtra(\"name\", \"\");\n    sendBroadcast(intent2);\n    sendBroadcast(i2);\n    Log.d(TAG, \"toggleHeadset\");\n    Log.d(TAG, \"Simulated Headset UnPlugging\");\n    stopSelf();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2964, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [214], "initializationEnd": [263], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 273, "focalAPIEnd": 318, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [328], "useEnd": [345], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kanika23oct/beamto/tree/master/src/us/beamto/newplayer/common/SampleListFragment.java", "rawCode": "  @Override\n  public void onListItemClick(ListView lv, View v, int position, long id) {\n    context = (Context) NewMediaPlayerActivity.getActivity();\n    switch ((position + 1)) {\n      case 1:\n        Intent in = new Intent(context, NewMediaPlayerActivity.class);\n        in.putExtra(\"Album_Url\", \"\" + (position + 1));\n        startActivity(in);\n        break;\n\n      case 2:\n        Intent in1 = new Intent(context, NewMediaPlayerActivity.class);\n        in1.putExtra(\"Album_Url\", \"\" + (position + 1));\n        startActivity(in1);\n        break;\n\n      default:\n        Intent in2 = new Intent(context, NewMediaPlayerActivity.class);\n        in2.putExtra(\"Album_Url\", \"\" + 1);\n        startActivity(in2);\n        break;\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2965, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [327], "initializationEnd": [362], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 371, "focalAPIEnd": 442, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)"], "useStart": [450], "useEnd": [519], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gnanda/csci498android/tree/master/LunchList/src/csci498/gnanda/lunchList/FeedActivity.java", "rawCode": "  @SuppressWarnings(\"deprecation\")\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    state = (InstanceState) getLastNonConfigurationInstance();\n\n    if (state == null) {\n      state = new InstanceState();\n      state.handler = new FeedHandler(this);\n\n      Intent i = new Intent(this, FeedService.class);\n\n      i.putExtra(FeedService.EXTRA_URL, getIntent().getStringExtra(FEED_URL));\n      i.putExtra(FeedService.EXTRA_MESSENGER, new Messenger(state.handler));\n\n    } else {\n      if (state.handler != null) {\n        state.handler.attach(this);\n      }\n\n      if (state.feed != null) {\n        setFeed(state.feed);\n      }\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2966, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [101], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 158, "focalAPIEnd": 188, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.sendBroadcast(intent)"], "useStart": [194], "useEnd": [219], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/lorent_video/src/io/vov/vitamio/widget/VideoView.java", "rawCode": "  private void openVideo() {\n    if (mUri == null || mSurfaceHolder == null) return;\n\n    Intent i = new Intent(\"com.android.music.musicservicecommand\");\n    i.putExtra(\"command\", \"pause\");\n    mContext.sendBroadcast(i);\n\n    release(false);\n    try {\n      dialog =\n          DialogUtil.newLoadingVideoDialog(\n              mContext,\n              title + this.getResources().getText(com.lorent.video.R.string.loadingvideo),\n              this.getResources().getText(com.lorent.video.R.string.pleasewait));\n      dialog.show();\n      mDuration = -1;\n      mCurrentBufferPercentage = 0;\n      mMediaPlayer = new MediaPlayer(mContext);\n      mMediaPlayer.setOnPreparedListener(mPreparedListener);\n      mMediaPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);\n      mMediaPlayer.setOnCompletionListener(mCompletionListener);\n      mMediaPlayer.setOnErrorListener(mErrorListener);\n      mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);\n      mMediaPlayer.setOnInfoListener(mInfoListener);\n      mMediaPlayer.setOnSeekCompleteListener(mSeekCompleteListener);\n      mMediaPlayer.setOnSubtitleUpdateListener(mSubtitleUpdateListener);\n      mMediaPlayer.setDataSource(mContext, mUri);\n      mMediaPlayer.setDisplay(mSurfaceHolder);\n      mMediaPlayer.setScreenOnWhilePlaying(true);\n      mMediaPlayer.prepareAsync();\n      mCurrentState = STATE_PREPARING;\n      attachMediaController();\n    } catch (IOException ex) {\n      Log.e(\"Unable to open content: \" + mUri, ex);\n      mCurrentState = STATE_ERROR;\n      mTargetState = STATE_ERROR;\n      mErrorListener.onError(mMediaPlayer, MediaPlayer.MEDIA_ERROR_UNKNOWN, 0);\n      return;\n    } catch (IllegalArgumentException ex) {\n      Log.e(\"Unable to open content: \" + mUri, ex);\n      mCurrentState = STATE_ERROR;\n      mTargetState = STATE_ERROR;\n      mErrorListener.onError(mMediaPlayer, MediaPlayer.MEDIA_ERROR_UNKNOWN, 0);\n      return;\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2967, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 364, "focalAPIEnd": 408, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ischweizer/MoSeS--Client-/tree/master/moses/libs/sources-support-v4/src/java/android/support/v4/app/ShareCompat.java", "rawCode": "    /**\n     * Set an array of email addresses to CC on this share. This replaces all current \"CC\"\n     * recipients that have been set so far.\n     *\n     * @param addresses Email addresses to CC on the share\n     * @return This IntentBuilder for method chaining\n     * @see Intent#EXTRA_CC\n     */\n    public IntentBuilder setEmailCc(String[] addresses) {\n      mIntent.putExtra(Intent.EXTRA_CC, addresses);\n      return this;\n    }\n"}, {"dataset": "putExtra", "exampleID": 2968, "initialization": ["Intent intent = new Intent()"], "initializationStart": [299], "initializationEnd": [311], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 325, "focalAPIEnd": 364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.setClass(Context,Class<?>)"], "useStart": [378], "useEnd": [431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/app/launcher/GDLauncherActivity.java", "rawCode": "  public void handleNotifiy(int what, Object data) {\n\n    LogUtil.d(TAG, \" ==== handleNotifiy === \" + what);\n\n    switch (what) {\n      case GDCommon.MSG_DISK_SPACEWARNING:\n        {\n          String disk = (String) data;\n          if (disk != null && !disk.isEmpty()) {\n            Intent intent = new Intent();\n            intent.putExtra(GDCommon.KeyDisk, disk);\n            intent.setClass(this, GDDiskManagementActivity.class);\n          }\n          break;\n        }\n\n      case GDCommon.MSG_SYSTEM_FORCE_UPGRADE:\n        {\n          notifyUpgrade((String) data, true);\n          break;\n        }\n      case GDCommon.MSG_SYSTEM_UPGRADE:\n        {\n          notifyUpgrade((String) data, false);\n          break;\n        }\n\n      case GDCommon.MSG_UPDATE_COLUMN:\n        {\n          updateColumn();\n          break;\n        }\n\n      case GDCommon.MSG_UPDATE_UIRESOURCE:\n        break;\n      case GDCommon.MSG_UPDATE_PREVIEW:\n        updatePreview();\n        break;\n\n      case GDCommon.MSG_HOMEKEY_PRESSED:\n        {\n          homeKeyPressed();\n          break;\n        }\n\n      case GDCommon.MSG_DEVICE_INIT_FINISHED:\n        {\n          deviceInitFinished();\n          break;\n        }\n\n      default:\n        break;\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2969, "initialization": ["Intent intent = new Intent(*,*,Context,*)"], "initializationStart": [122], "initializationEnd": [232], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putExtra(String,Account)"], "configurationStart": [238], "configurationEnd": [298], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 304, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Context.startService(intent)"], "useStart": [378], "useEnd": [417], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/klnusbaum/UDJ-Android-Client/tree/master/src/org/klnusbaum/udj/PlayerActivity.java", "rawCode": "  private static void setVolume(Context context, Account account, int newVolume) {\n    Intent setPlaybackIntent =\n        new Intent(\n            Constants.ACTION_SET_VOLUME, Constants.PLAYER_URI, context, PlaylistSyncService.class);\n    setPlaybackIntent.putExtra(Constants.ACCOUNT_EXTRA, account);\n    setPlaybackIntent.putExtra(Constants.PLAYER_VOLUME_EXTRA, newVolume);\n    context.startService(setPlaybackIntent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2970, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [59], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 101, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["launchIntent(intent)"], "useStart": [138], "useEnd": [158], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/youknowone/zxing/tree/master/android/src/com/google/zxing/client/android/result/ResultHandler.java", "rawCode": "  final void webSearch(String query) {\n    Intent intent = new Intent(Intent.ACTION_WEB_SEARCH);\n    intent.putExtra(\"query\", query);\n    launchIntent(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2971, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [290], "initializationEnd": [347], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setAction(String)"], "configurationStart": [357], "configurationEnd": [407], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 417, "focalAPIEnd": 472, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startService(intent)"], "useStart": [482], "useEnd": [521], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/travp624/packages_apps_BlackICEControl/tree/master/src/com/blackice/control/service/WeatherRefreshService.java", "rawCode": "  @Override\n  public int onStartCommand(Intent intent, int flags, int startId) {\n    refreshIntervalInMinutes = WeatherPrefs.getRefreshInterval(mContext);\n    if (intent.getAction() != null) {\n      if (intent.getAction().equals(WeatherService.INTENT_WEATHER_REQUEST)) {\n        Intent i = new Intent(getApplicationContext(), WeatherService.class);\n        i.setAction(WeatherService.INTENT_WEATHER_REQUEST);\n        i.putExtra(WeatherService.INTENT_EXTRA_ISMANUAL, false);\n        getApplicationContext().startService(i);\n      }\n    }\n    cancelRefresh();\n    if (refreshIntervalInMinutes != 0) {\n      scheduleRefresh();\n    }\n\n    stopSelf(); // so it won't run in the background eatin up RAM, ^ alarm will restart it\n    return START_STICKY;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2972, "initialization": ["Intent intent = new Intent()"], "initializationStart": [78], "initializationEnd": [90], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 96, "focalAPIEnd": 129, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "setResult(*,intent)"], "useStart": [135, 172], "useEnd": [166, 200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jstakun/gms-world-client/tree/master/GMSLib/src/com/jstakun/gms/android/ui/LayerListActivity.java", "rawCode": "  private void layerAction(String action, String layer) {\n    Intent result = new Intent();\n    result.putExtra(\"action\", action);\n    result.putExtra(\"layer\", layer);\n    setResult(RESULT_OK, result);\n    finish();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2973, "initialization": ["int value = ListExerciseDbHandler.addExercise(String)", "Intent intent = new Intent(*,*)"], "initializationStart": [916, 980], "initializationEnd": [943, 1024], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1034, "focalAPIEnd": 1085, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [1121], "useEnd": [1153], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Rofflarn/Gym-app/tree/master/src/com/Grupp01/gymapp/View/Workout/EditWorkoutActivity.java", "rawCode": "  /**\n   * Listens to the add and cancel button in the dialog\n   *\n   * @param view the view that is clicked\n   */\n  @Override\n  public void onClick(View view) {\n    // User clicked on add when on the dialog to add a new exercise.\n    if (view == ((Button) dialog.findViewById(R.id.add_Button))) {\n      // takes the text from exercise name textfield and puts it to AddExercise intent\n      EditText name = (EditText) dialog.findViewById(R.id.exerciseName);\n      String temp = name.getText().toString();\n      // if the string is empty, prompt for a name\n      if (temp.length() == 0) {\n        // set the editTextfield to\n        name.setHint(R.string.enter_correct_name);\n        name.setHintTextColor(Color.RED);\n      }\n      // Else, create intent and start EditExerciseActivity\n      else {\n        ListExerciseDbHandler dbHandler = new ListExerciseDbHandler(this);\n        dbHandler.open();\n        int id = dbHandler.addExercise(temp);\n        Intent intentAddExercise = new Intent(this, EditExerciseActivity.class);\n        intentAddExercise.putExtra(EXTRA_EXERCISE_NAME, id);\n        dialog.dismiss();\n        startActivity(intentAddExercise);\n      }\n    }\n    // If the user presses the cancel-button, close the dialog.\n    else if (view == ((Button) dialog.findViewById(R.id.cancel_Button))) {\n      dialog.dismiss();\n    }\n    // User is prompted with the \"quit\"-dialog and pressed yes button, close activity\n    else if (view == ((Button) dialog.findViewById(R.id.yes_Button))) {\n      finish();\n    }\n    // User is prompted with the \"quit\"-dialog and pressed no button, close dialog.\n    else if (view == ((Button) dialog.findViewById(R.id.no_Button))) {\n      dialog.dismiss();\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2974, "initialization": ["Intent intent = new Intent()"], "initializationStart": [77], "initializationEnd": [89], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 195, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,int)", "setResult(*,intent)"], "useStart": [282, 356], "useEnd": [344, 384], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tash1207/Gradugation/tree/master/src/com/gradugation/WiresMiniGame.java", "rawCode": "  public void win() {\n    // update the player's credits\n    Intent output = new Intent();\n    // Engineer gets a credit bonus for this minigame\n    if (characterType.equals(\"Engineer\")) {\n      output.putExtra(Event.WIRES_REQUEST_CODE + \"\", CREDITS_EARNED + 1);\n    } else {\n      output.putExtra(Event.WIRES_REQUEST_CODE + \"\", CREDITS_EARNED);\n    }\n    setResult(RESULT_OK, output);\n    alertDialogBuilder = new AlertDialog.Builder(this);\n\n    // set title and message\n    alertDialogBuilder.setTitle(\"Congradugation! You win!\");\n    alertDialogBuilder.setMessage(\"Press Continue.\");\n    alertDialogBuilder.setCancelable(false);\n\n    // create continue button\n    alertDialogBuilder.setNeutralButton(\n        \"Continue\",\n        new DialogInterface.OnClickListener() {\n          public void onClick(DialogInterface dialog, int id) {\n            WiresMiniGame.this.finish();\n          }\n        });\n\n    // create alert dialog\n    alertDialog = alertDialogBuilder.create();\n\n    // show it\n    alertDialog.show();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2975, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [821], "initializationEnd": [857], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 865, "focalAPIEnd": 917, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sendBroadcast(intent)"], "useStart": [925], "useEnd": [993], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bfazen/AccessMRS/tree/master/src/com/alphabetbloc/accessmrs/services/SyncAdapter.java", "rawCode": "  @Override\n  public void onPerformSync(\n      Account account,\n      Bundle extras,\n      String authority,\n      ContentProviderClient provider,\n      final SyncResult syncResult) {\n\n    long before = System.currentTimeMillis();\n    if (App.DEBUG) Log.v(TAG, \"Sync Requested... asking user.\");\n    Thread.currentThread().setName(TAG);\n\n    mSyncManager = new SyncManager(mContext);\n\n    // ask user to sync\n    int count = 0;\n    while (!SyncManager.sStartSync.get() && !SyncManager.sCancelSync.get() && count < 20) {\n      android.os.SystemClock.sleep(1000);\n      count++;\n      if (App.DEBUG) Log.v(TAG, \"Waiting for User with count=\" + count);\n    }\n\n    // sync\n    if (!SyncManager.sCancelSync.get()) {\n      if (App.DEBUG) Log.v(TAG, \"Starting an actual sync\");\n      // Inform Activity\n      Intent broadcast = new Intent(SyncManager.SYNC_MESSAGE);\n      broadcast.putExtra(SyncManager.START_NEW_SYNC, true);\n      LocalBroadcastManager.getInstance(mContext).sendBroadcast(broadcast);\n\n      // Start the Sync\n      performSync(syncResult);\n    } else {\n      if (App.DEBUG) Log.v(TAG, \"User cancelled the sync\");\n    }\n\n    SyncManager.sEndSync.set(true);\n    SyncManager.sStartSync.set(false);\n    SyncManager.sCancelSync.set(false);\n\n    if (App.DEBUG) Log.v(TAG, \"sync is now ending\");\n    if (App.DEBUG)\n      Log.v(\n          \"SYNC BENCHMARK\",\n          \"Total Sync Time: \\n\" + sTimeLog.format(new Date(System.currentTimeMillis() - before)));\n  }\n"}, {"dataset": "putExtra", "exampleID": 2976, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [1211], "initializationEnd": [1246], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1256, "focalAPIEnd": 1303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getBroadcast(Context,int,intent,*)"], "useStart": [1348], "useEnd": [1430], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_frameworks_policies_base/tree/master/phone/com/android/internal/policy/impl/KeyguardViewMediator.java", "rawCode": "  /**\n   * Called to let us know the screen was turned off.\n   *\n   * @param why either {@link WindowManagerPolicy#OFF_BECAUSE_OF_USER}, {@link\n   *     WindowManagerPolicy#OFF_BECAUSE_OF_TIMEOUT} or {@link\n   *     WindowManagerPolicy#OFF_BECAUSE_OF_PROX_SENSOR}.\n   */\n  public void onScreenTurnedOff(int why) {\n    synchronized (this) {\n      mScreenOn = false;\n      if (DEBUG) Log.d(TAG, \"onScreenTurnedOff(\" + why + \")\");\n\n      if (mExitSecureCallback != null) {\n        if (DEBUG) Log.d(TAG, \"pending exit secure callback cancelled\");\n        mExitSecureCallback.onKeyguardExitResult(false);\n        mExitSecureCallback = null;\n        if (!mExternallyEnabled) {\n          hideLocked();\n        }\n      } else if (mShowing) {\n        notifyScreenOffLocked();\n        resetStateLocked();\n      } else if (why == WindowManagerPolicy.OFF_BECAUSE_OF_TIMEOUT) {\n        // if the screen turned off because of timeout, set an alarm\n        // to enable it a little bit later (i.e, give the user a chance\n        // to turn the screen back on within a certain window without\n        // having to unlock the screen)\n        long when = SystemClock.elapsedRealtime() + KEYGUARD_DELAY_MS;\n        Intent intent = new Intent(DELAYED_KEYGUARD_ACTION);\n        intent.putExtra(\"seq\", mDelayedShowingSequence);\n        PendingIntent sender =\n            PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);\n        mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, when, sender);\n        if (DEBUG)\n          Log.d(TAG, \"setting alarm to turn off keyguard, seq = \" + mDelayedShowingSequence);\n      } else if (why == WindowManagerPolicy.OFF_BECAUSE_OF_PROX_SENSOR) {\n        // Do not enable the keyguard if the prox sensor forced the screen off.\n      } else {\n        doKeyguard();\n      }\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2977, "initialization": ["Intent intent = new Intent()"], "initializationStart": [350], "initializationEnd": [362], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 370, "focalAPIEnd": 479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setResult(*,intent)"], "useStart": [487], "useEnd": [513], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/foxykeep/DataDroid/tree/master/DataDroidPoC/src/com/foxykeep/datadroidpoc/ui/crud/CrudSyncPhoneViewActivity.java", "rawCode": "  @Override\n  public void onRequestFinished(Request request, Bundle resultData) {\n    if (mRequestList.contains(request)) {\n      ProgressDialogFragment.dismiss(this);\n      mRequestList.remove(request);\n\n      long[] syncDeletedPhoneIdArray =\n          resultData.getLongArray(PoCRequestFactory.BUNDLE_EXTRA_PHONE_DELETE_DATA);\n\n      Intent data = new Intent();\n      data.putExtra(\n          CrudSyncPhoneListActivity.RESULT_EXTRA_DELETED_PHONE_ID, syncDeletedPhoneIdArray[0]);\n      setResult(RESULT_OK, data);\n      finish();\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2978, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [522], "initializationEnd": [574], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 582, "focalAPIEnd": 644, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bfazen/AccessMRS/tree/master/src/com/alphabetbloc/accessmrs/utilities/LauncherUtil.java", "rawCode": "  private static boolean setupAccount() {\n    // Step 4: Check for sync account -> setup new account if none\n    AccountManager accountManager = AccountManager.get(App.getApp());\n    Account[] accounts =\n        accountManager.getAccountsByType(App.getApp().getString(R.string.app_account_type));\n    if (accounts.length > 0) {\n      // already setup\n      if (App.DEBUG)\n        Log.v(TAG, \"there is an account numer=\" + accounts.length + \"username=\" + accounts[0].name);\n      return true;\n    } else {\n      Intent i = new Intent(App.getApp(), SetupAccountActivity.class);\n      i.putExtra(SetupAccountActivity.LAUNCHED_FROM_ACCT_MGR, false);\n      sLaunchIntent = i;\n      return false;\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2979, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [50], "initializationEnd": [80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.setType(String)"], "configurationStart": [87], "configurationEnd": [110], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 116, "focalAPIEnd": 172, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "createChooser(intent,*)"], "useStart": [178, 240], "useEnd": [219, 296], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yangjiandong/cw-advandroid/tree/master/Introspection/FauxSender/src/com/commonsware/android/fsender/FauxSenderTest.java", "rawCode": "  void sendIt(String theMessage) {\n    Intent i = new Intent(Intent.ACTION_SEND);\n\n    i.setType(\"text/plain\");\n    i.putExtra(Intent.EXTRA_SUBJECT, R.string.share_subject);\n    i.putExtra(Intent.EXTRA_TEXT, theMessage);\n\n    startActivity(Intent.createChooser(i, getString(R.string.share_title)));\n  }\n"}, {"dataset": "putExtra", "exampleID": 2980, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [931], "initializationEnd": [978], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 986, "focalAPIEnd": 1017, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["PhoneApp.sendBroadcast(intent)"], "useStart": [1025], "useEnd": [1051], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytown/Phone_ics/tree/master/src/com/android/phone/EmergencyCallHelper.java", "rawCode": "  /**\n   * Attempt to power on the radio (i.e. take the device out of airplane mode.)\n   *\n   * <p>Additionally, start listening for service state changes; we'll eventually get an\n   * onServiceStateChanged() callback when the radio successfully comes up.\n   */\n  private void powerOnRadio() {\n    if (DBG) log(\"- powerOnRadio()...\");\n\n    // We're about to turn on the radio, so arrange to be notified\n    // when the sequence is complete.\n    registerForServiceStateChanged();\n\n    // If airplane mode is on, we turn it off the same way that the\n    // Settings activity turns it off.\n    if (Settings.System.getInt(mApp.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0)\n        > 0) {\n      if (DBG) log(\"==> Turning off airplane mode...\");\n\n      // Change the system setting\n      Settings.System.putInt(mApp.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0);\n\n      // Post the intent\n      Intent intent = new Intent(Intent.ACTION_AIRPLANE_MODE_CHANGED);\n      intent.putExtra(\"state\", false);\n      mApp.sendBroadcast(intent);\n    } else {\n      // Otherwise, for some strange reason the radio is off\n      // (even though the Settings database doesn't think we're\n      // in airplane mode.) In this case just turn the radio\n      // back on.\n      if (DBG) log(\"==> (Apparently) not in airplane mode; manually powering radio on...\");\n      mPhone.setRadioPower(true);\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2981, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [154], "initializationEnd": [210], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 216, "focalAPIEnd": 296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andraus/BluetoothHidEmu/tree/master/src/andraus/bluetoothhidemu/settings/Settings.java", "rawCode": "  /**\n   * @param duration\n   * @return\n   */\n  public static Intent createBluetoothDiscoverableIntent(final int duration) {\n    Intent bluetoothIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);\n    bluetoothIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, duration);\n\n    return bluetoothIntent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2982, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [128], "initializationEnd": [171], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putExtra(*,ArrayList<Post>)"], "configurationStart": [219], "configurationEnd": [265], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 275, "focalAPIEnd": 327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["tabStartActivityForResult(intent,*,*)", "startActivityForResult(intent,*)"], "useStart": [569, 715], "useEnd": [686, 799], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bi2one/Matji_Sandwich/tree/master/android/src/com/matji/sandwich/listener/GotoPostMainAction.java", "rawCode": "  /** 현재 저장된 {@link Store}의 {@link StoreMainActivity}로 이동한다. */\n  @Override\n  public void onClick(View v) {\n    Intent intent = new Intent(context, PostMainActivity.class);\n    switch (mode) {\n      case POSTS:\n        intent.putExtra(PostMainActivity.POSTS, posts);\n        intent.putExtra(PostMainActivity.POSITION, position);\n        if (((Activity) context).getParent() != null\n            && ((Activity) context).getParent().getParent() instanceof BaseTabActivity) {\n          BaseTabActivity parent = (BaseTabActivity) ((Activity) context).getParent();\n          parent.tabStartActivityForResult(\n              intent, BaseActivity.POST_MAIN_ACTIVITY, (ActivityStartable) context);\n        } else {\n          ((Activity) context).startActivityForResult(intent, BaseActivity.POST_MAIN_ACTIVITY);\n        }\n        break;\n        // case POST_ID:\n        // intent.putExtra(PostMainActivity.POST_ID, post_id);\n        // if (((Activity) context).getParent() != null) {\n        // if (((Activity) context).getParent().getParent() instanceof BaseTabActivity) {\n        // BaseTabActivity parent = (BaseTabActivity) ((Activity) context).getParent();\n        // parent.tabStartActivityForResult(intent, BaseActivity.POST_MAIN_ACTIVITY,\n        // (ActivityStartable) context);\n        // }\n        // } else {\n        // ((Activity) context).startActivityForResult(intent, BaseActivity.POST_MAIN_ACTIVITY);\n        // }\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2983, "initialization": ["Intent intent = new Intent(*,*)", "Intent intent = new Intent(*,*)"], "initializationStart": [83, 135], "initializationEnd": [120, 171], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 178, "focalAPIEnd": 211, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivityForResult(intent,*)"], "useStart": [217], "useEnd": [270], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sriramr79/calorieCounter/tree/master/CalorieCounter/src/edu/upenn/cis350/LoginActivity.java", "rawCode": "  private void login(String un) {\n    Intent i;\n    if (IOBasic.isTeacher(un)) i = new Intent(this, AdminActivity.class);\n    else i = new Intent(this, HomeActivity.class);\n\n    i.putExtra(Constants.UNEXTRA, un);\n    startActivityForResult(i, Constants.LOGIN_SUCCESSFUL);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2984, "initialization": ["Intent intent = new Intent(Intent)"], "initializationStart": [212], "initializationEnd": [234], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 307, "focalAPIEnd": 455, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ushahidi/Ushahidi_Android/tree/master/Libraries/abs/src/com/actionbarsherlock/widget/SearchView.java", "rawCode": "  /** Create and return an Intent that can launch the voice search activity for web search. */\n  private Intent createVoiceWebSearchIntent(Intent baseIntent, SearchableInfo searchable) {\n    Intent voiceIntent = new Intent(baseIntent);\n    ComponentName searchActivity = searchable.getSearchActivity();\n    voiceIntent.putExtra(\n        RecognizerIntent.EXTRA_CALLING_PACKAGE,\n        searchActivity == null ? null : searchActivity.flattenToShortString());\n    return voiceIntent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2985, "initialization": ["Intent intent = new Intent()"], "initializationStart": [122], "initializationEnd": [134], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 140, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "setResult(*,intent)"], "useStart": [181, 221], "useEnd": [215, 256], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/documentation/TextToSpeech_Plugin_Engine_Examples/eSpeakEngine/src/com/google/marvin/espeak/eSpeak.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    Intent data = new Intent();\n    data.putExtra(\"nativelib\", SO_FILE);\n    data.putExtra(\"name\", ENGINE_NAME);\n    setResult(Activity.RESULT_OK, data);\n    finish();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2986, "initialization": ["Intent intent = makeIntent()"], "initializationStart": [282], "initializationEnd": [294], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 300, "focalAPIEnd": 358, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,boolean)", "intent.putExtra(String,String)", "putEndpointerExtra(ContentResolver,intent,*,String,*)", "putEndpointerExtra(ContentResolver,intent,*,String,String)", "putEndpointerExtra(ContentResolver,intent,*,String,*)", "SpeechRecognizer.startListening(intent)"], "useStart": [364, 433, 489, 534, 920, 1125, 1441, 1695], "useEnd": [427, 483, 528, 720, 1119, 1435, 1688, 1735], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phuang/LatinIME/tree/master/java/src/com/android/inputmethod/deprecated/voice/VoiceInput.java", "rawCode": "  /**\n   * Called only when the recognition manager's initialization completed\n   *\n   * @param context context with which {@link #startListening(FieldContext, boolean)} was executed\n   */\n  private void startListeningAfterInitialization(FieldContext context) {\n    Intent intent = makeIntent();\n    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, \"\");\n    intent.putExtra(EXTRA_RECOGNITION_CONTEXT, context.getBundle());\n    intent.putExtra(EXTRA_CALLING_PACKAGE, \"VoiceIME\");\n    intent.putExtra(EXTRA_ALTERNATES, true);\n    intent.putExtra(\n        RecognizerIntent.EXTRA_MAX_RESULTS,\n        SettingsUtil.getSettingsInt(\n            mContext.getContentResolver(), SettingsUtil.LATIN_IME_MAX_VOICE_RESULTS, 1));\n    // Get endpointer params from Gservices.\n    // TODO: Consider caching these values for improved performance on slower devices.\n    final ContentResolver cr = mContext.getContentResolver();\n    putEndpointerExtra(\n        cr,\n        intent,\n        SettingsUtil.LATIN_IME_SPEECH_MINIMUM_LENGTH_MILLIS,\n        EXTRA_SPEECH_MINIMUM_LENGTH_MILLIS,\n        null /* rely on endpointer default */);\n    putEndpointerExtra(\n        cr,\n        intent,\n        SettingsUtil.LATIN_IME_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS,\n        EXTRA_SPEECH_INPUT_COMPLETE_SILENCE_LENGTH_MILLIS,\n        INPUT_COMPLETE_SILENCE_LENGTH_DEFAULT_VALUE_MILLIS\n        /* our default value is different from the endpointer's */ );\n    putEndpointerExtra(\n        cr,\n        intent,\n        SettingsUtil.LATIN_IME_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS,\n        EXTRA_SPEECH_INPUT_POSSIBLY_COMPLETE_SILENCE_LENGTH_MILLIS,\n        null /* rely on endpointer default */);\n\n    mSpeechRecognizer.startListening(intent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2987, "initialization": ["Intent intent = new Intent(*)"], "initializationStart": [374], "initializationEnd": [426], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 434, "focalAPIEnd": 501, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.setComponent(ComponentName)", "getBroadcast(Context,int,intent,*)"], "useStart": [509, 643], "useEnd": [545, 725], "hasFinally": 1, "cleanUpCall": ["restoreCallingIdentity(long)"], "finallyExpressionStart": 735, "finallyExpressionEnd": 743, "finallyBlockStart": 735, "finallyBlockEnd": 798, "cleanUpCallStart": [753], "cleanUpCallEnd": [789], "url": "https://github.com/faux123/android_frameworks_base/tree/master/services/java/com/android/server/AppWidgetService.java", "rawCode": "  void registerForBroadcastsLocked(Provider p, int[] appWidgetIds) {\n    if (p.info.updatePeriodMillis > 0) {\n      // if this is the first instance, set the alarm. otherwise,\n      // rely on the fact that we've already set it and that\n      // PendingIntent.getBroadcast will update the extras.\n      boolean alreadyRegistered = p.broadcast != null;\n      Intent intent = new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);\n      intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS, appWidgetIds);\n      intent.setComponent(p.info.provider);\n      long token = Binder.clearCallingIdentity();\n      try {\n        p.broadcast =\n            PendingIntent.getBroadcast(mContext, 1, intent, PendingIntent.FLAG_UPDATE_CURRENT);\n      } finally {\n        Binder.restoreCallingIdentity(token);\n      }\n      if (!alreadyRegistered) {\n        long period = p.info.updatePeriodMillis;\n        if (period < MIN_UPDATE_PERIOD) {\n          period = MIN_UPDATE_PERIOD;\n        }\n        mAlarmManager.setInexactRepeating(\n            AlarmManager.ELAPSED_REALTIME_WAKEUP,\n            SystemClock.elapsedRealtime() + period,\n            period,\n            p.broadcast);\n      }\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 2988, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [57], "initializationEnd": [96], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putExtras(Bundle)"], "configurationStart": [216], "configurationEnd": [233], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1061, "focalAPIEnd": 1133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,int)", "intent.putExtra(String,String)", "intent.putExtra(String,HashMap<String, Integer>)", "intent.putExtra(String,String)", "startActivity(intent)"], "useStart": [1139, 1210, 1283, 1353, 1444, 1498, 1537, 1578, 1615, 1652, 1691, 1732, 1780, 1830, 1877, 1911, 1943, 1975], "useEnd": [1204, 1277, 1347, 1438, 1492, 1531, 1572, 1609, 1646, 1685, 1726, 1774, 1824, 1870, 1905, 1937, 1969, 1996], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/patrickhulce/food-stand-tracker/tree/master/FruitStandTracker/src/edu/upenn/cis350/project/SaleActivity.java", "rawCode": "  public void go_to_checkout(View view) {\n    Intent i = new Intent(this, PaymentActivity.class);\n\n    Spinner age = (Spinner) findViewById(R.id.choosePerson);\n    String grade = (String) age.getSelectedItem();\n\n    i.putExtras(data);\n    int tempapple = 0, temporange = 0, temppear = 0, tempbanana = 0, tempkiwi = 0, tempgrape = 0;\n    HashMap<String, Integer> fruit = new HashMap<String, Integer>();\n    if (data.get(\"fruit\") == null) {\n      fruit = new HashMap<String, Integer>();\n    } else {\n      fruit = (HashMap<String, Integer>) data.get(\"fruit\");\n      tempapple = fruit.get(\"apple\");\n      temporange = fruit.get(\"orange\");\n      temppear = fruit.get(\"pear\");\n      tempbanana = fruit.get(\"banana\");\n      tempkiwi = fruit.get(\"kiwi\");\n      tempgrape = fruit.get(\"grape\");\n    }\n    fruit.put(\"apple\", apples + tempapple);\n    fruit.put(\"orange\", oranges + temporange);\n    fruit.put(\"pear\", pears + temppear);\n    fruit.put(\"banana\", bananas + tempbanana);\n    fruit.put(\"kiwi\", kiwis + tempkiwi);\n    fruit.put(\"grape\", grapes + tempgrape);\n\n    i.putExtra(\"whole_fruit\", data.getInt(\"whole_fruit\") + temp_whole_fruit);\n    i.putExtra(\"smoothies\", data.getInt(\"smoothies\") + temp_smoothie);\n    i.putExtra(\"mixed_bags\", data.getInt(\"mixed_bag\") + temp_mixed_bag);\n    i.putExtra(\"granolabars\", data.getInt(\"granola\") + temp_granola);\n    i.putExtra(\"total\", temp_whole_fruit + temp_smoothie + temp_mixed_bag + temp_granola);\n    i.putExtra(\"temp_whole_fruit\", temp_whole_fruit);\n    i.putExtra(\"temp_apples\", apples);\n    i.putExtra(\"temp_oranges\", oranges);\n    i.putExtra(\"temp_pears\", pears);\n    i.putExtra(\"temp_kiwis\", kiwis);\n    i.putExtra(\"temp_grapes\", grapes);\n    i.putExtra(\"temp_bananas\", bananas);\n    i.putExtra(\"temp_smoothie\", temp_smoothie);\n    i.putExtra(\"temp_mixed_bag\", temp_mixed_bag);\n    i.putExtra(\"temp_granola\", temp_granola);\n\n    i.putExtra(\"gender\", gender);\n    i.putExtra(\"fruit\", fruit);\n    i.putExtra(\"grade\", grade);\n    this.startActivity(i);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2989, "initialization": ["Intent intent = new Intent()"], "initializationStart": [225], "initializationEnd": [237], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 243, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setResult(*,intent)"], "useStart": [292], "useEnd": [326], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rocapal/cursoAndroidURJC/tree/master/2ndEdition/oscar.alvarez/activtiesMenuDia3/src/com/example/activtiesDia3/NewActivity1.java", "rawCode": "  @Override\n  protected void\n      onPause() { // Esto se puede poner cuando sea para volver a la actividad anterior,este es el\n                  // ultimo punto por el que pasa\n    super.onPause();\n    Intent returnIntent = new Intent();\n    returnIntent.putExtra(Constants.VALUE_3, 3);\n    setResult(RESULT_OK, returnIntent);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2990, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [259], "initializationEnd": [298], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(value[0].contains(\"false\",))", "guardType": "IF {", "guardExpressionStart": 53, "guardExpressionEnd": 80, "guardBlockStart": 53, "guardBlockEnd": 374, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 308, "focalAPIEnd": 334, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startActivity(intent)"], "useStart": [344], "useEnd": [365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferquies/2dam/tree/master/PMUL/Examen/src/com/fernando/examen/MainActivity.java", "rawCode": "    protected void onPostExecute(String[] s) {\n      if (s[0].contains(\"false\")) {\n        Toast toast =\n            Toast.makeText(context, \"Usuario o contraseña incorrectos\", Toast.LENGTH_SHORT);\n        toast.show();\n      } else {\n        Intent intent = new Intent(context, UserActivity.class);\n        intent.putExtra(\"data\", s);\n        startActivity(intent);\n      }\n    }\n"}, {"dataset": "putExtra", "exampleID": 2991, "initialization": ["Intent intent = new Intent()"], "initializationStart": [1307], "initializationEnd": [1319], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1325, "focalAPIEnd": 1384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.getExtras()", "setResult(*,intent)"], "useStart": [1390, 1498, 1523], "useEnd": [1462, 1516, 1551], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmorille/androGister/tree/master/cash-register/src/main/java/eu/ttbox/androgister/sync/authenticator/AuthenticatorActivity.java", "rawCode": "  /**\n   * Called when response is received from the server for authentication request. See\n   * onAuthenticationResult(). Sets the AccountAuthenticatorResult which is sent back to the caller.\n   * We store the authToken that's returned from the server as the 'password' for this account - so\n   * we're never storing the user's actual password locally.\n   *\n   * @param result the confirmCredentials result.\n   */\n  private void finishLogin(String authToken) {\n\n    Log.i(TAG, \"finishLogin()\");\n    final Account account = new Account(mUsername, Constants.ACCOUNT_TYPE);\n    if (mRequestNewAccount) {\n      mAccountManager.addAccountExplicitly(account, mPassword, null);\n      // Configure it to start every 150 seconds\n      // Bundle params = new Bundle();\n      // params.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED, false);\n      // params.putBoolean(ContentResolver.SYNC_EXTRAS_DO_NOT_RETRY, false);\n      // params.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL, false);\n      // ContentResolver.addPeriodicSync(account, ContactsContract.AUTHORITY, params, 150);\n\n      // Set contacts sync for this account.\n      ContentResolver.setSyncAutomatically(account, ContactsContract.AUTHORITY, true);\n    } else {\n      mAccountManager.setPassword(account, mPassword);\n    }\n    final Intent intent = new Intent();\n    intent.putExtra(AccountManager.KEY_ACCOUNT_NAME, mUsername);\n    intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE, Constants.ACCOUNT_TYPE);\n    setAccountAuthenticatorResult(intent.getExtras());\n    setResult(RESULT_OK, intent);\n    finish();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2992, "initialization": ["Intent intent = new Intent(String,*,*,*)"], "initializationStart": [151], "initializationEnd": [208], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 214, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getService(*,int,intent,*)"], "useStart": [306], "useEnd": [380], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/packages-apps-Browser/tree/master/src/com/android/browser/widget/BookmarkWidgetService.java", "rawCode": "  private void updateWidget(RenderResult res) {\n    RemoteViews views = new RemoteViews(getPackageName(), R.layout.bookmarkwidget);\n\n    Intent prev = new Intent(PREV, null, this, BookmarkWidgetService.class);\n    prev.putExtra(EXTRA_ID, res.mId);\n    views.setOnClickPendingIntent(\n        R.id.previous, PendingIntent.getService(this, 0, prev, PendingIntent.FLAG_CANCEL_CURRENT));\n\n    Intent next = new Intent(NEXT, null, this, BookmarkWidgetService.class);\n    next.putExtra(EXTRA_ID, res.mId);\n    views.setOnClickPendingIntent(\n        R.id.next, PendingIntent.getService(this, 0, next, PendingIntent.FLAG_CANCEL_CURRENT));\n\n    // Set the title of the bookmark. Use the url as a backup.\n    String displayTitle = res.mTitle;\n    if (displayTitle == null) {\n      displayTitle = res.mUrl;\n    }\n    views.setTextViewText(R.id.title, displayTitle);\n\n    // Set the image or revert to the progress indicator.\n    if (res.mBitmap != null) {\n      views.setImageViewBitmap(R.id.image, res.mBitmap);\n      views.setViewVisibility(R.id.image, View.VISIBLE);\n      views.setViewVisibility(R.id.progress, View.GONE);\n    } else {\n      views.setViewVisibility(R.id.progress, View.VISIBLE);\n      views.setViewVisibility(R.id.image, View.GONE);\n    }\n\n    // Update the current id.\n    mCurrentId = res.mId;\n\n    AppWidgetManager.getInstance(this)\n        .updateAppWidget(new ComponentName(this, BookmarkWidgetProvider.class), views);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2993, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [1114], "initializationEnd": [1169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1179, "focalAPIEnd": 1227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "getActivity(Context,int,intent,*)"], "useStart": [1237, 1330], "useEnd": [1278, 1414], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bedmondmark/redbus/tree/master/src/org/redbus/ui/alert/TemporalAlert.java", "rawCode": "  public void onAsyncGetBusTimesSuccess(int requestId, List<ArrivalTime> busTimes) {\n    String[] requestedServices = broadcastIntent.getStringArrayExtra(\"Services\");\n    int timeout = broadcastIntent.getIntExtra(\"TimeoutSecs\", -1);\n    if ((requestedServices == null) || (timeout == -1)) return;\n    HashMap<String, Boolean> requestedServicesLookup = new HashMap<String, Boolean>();\n    for (String curService : requestedServices)\n      requestedServicesLookup.put(curService.toLowerCase(), new Boolean(true));\n\n    for (ArrivalTime curTime : busTimes) {\n      if (requestedServicesLookup.containsKey(curTime.service.toLowerCase())\n          && (curTime.arrivalAbsoluteTime == null)\n          && ((curTime.arrivalMinutesLeft * 60) <= timeout)) {\n\n        StringBuffer text = new StringBuffer();\n        text.append(\"The \");\n        text.append(curTime.service);\n        text.append(\" is due\");\n        if (curTime.arrivalMinutesLeft > 0) {\n          text.append(\" in \");\n          text.append(curTime.arrivalMinutesLeft);\n          text.append(\" minutes\");\n        }\n        text.append(\"!\");\n\n        Intent i = new Intent(broadcastContext, ArrivalTimeActivity.class);\n        i.putExtra(\"StopCode\", (long) broadcastStopCode);\n        i.putExtra(\"StopName\", broadcastStopName);\n        PendingIntent contentIntent =\n            PendingIntent.getActivity(broadcastContext, 0, i, PendingIntent.FLAG_CANCEL_CURRENT);\n\n        Notification notification =\n            new Notification(R.drawable.icon38, text, System.currentTimeMillis());\n        notification.defaults |= Notification.DEFAULT_ALL;\n        notification.flags |= Notification.FLAG_AUTO_CANCEL;\n        notification.setLatestEventInfo(broadcastContext, \"Bus alarm!\", text, contentIntent);\n\n        NotificationManager nm =\n            (NotificationManager) broadcastContext.getSystemService(Context.NOTIFICATION_SERVICE);\n        nm.notify(AlertUtils.ALERT_NOTIFICATION_ID, notification);\n        return;\n      }\n    }\n\n    // nothing matched, just reschedule it\n    rescheduleAlarm();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2994, "initialization": ["Intent intent = newLoggingBroadcast(*)"], "initializationStart": [113], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 176, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "Context.sendBroadcast(intent)"], "useStart": [251, 405], "useEnd": [399, 430], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_inputmethods_LatinIME/tree/master/java/src/com/android/inputmethod/voice/VoiceInputLogger.java", "rawCode": "  public void textModifiedByTypingInsertionPunctuation(int length) {\n    setHasLoggingInfo(true);\n    Intent i = newLoggingBroadcast(LoggingEvents.VoiceIme.TEXT_MODIFIED);\n    i.putExtra(LoggingEvents.VoiceIme.EXTRA_TEXT_MODIFIED_LENGTH, length);\n    i.putExtra(\n        LoggingEvents.VoiceIme.EXTRA_TEXT_MODIFIED_TYPE,\n        LoggingEvents.VoiceIme.TEXT_MODIFIED_TYPE_TYPING_INSERTION_PUNCTUATION);\n    mContext.sendBroadcast(i);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2995, "initialization": ["Intent intent = new Intent(Context,*)"], "initializationStart": [775], "initializationEnd": [819], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putExtra(String,XYChart)"], "configurationStart": [882], "configurationEnd": [911], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 917, "focalAPIEnd": 954, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/socialpercon/anki/tree/master/src/org/achartengine/ChartFactory.java", "rawCode": "  /**\n   * Creates a scatter chart intent that can be used to start the graphical view activity.\n   *\n   * @param context the context\n   * @param dataset the multiple series dataset (cannot be null)\n   * @param renderer the multiple series renderer (cannot be null)\n   * @param activityTitle the graphical chart activity title\n   * @return a scatter chart intent\n   * @throws IllegalArgumentException if dataset is null or renderer is null or if the dataset and\n   *     the renderer don't include the same number of series\n   */\n  public static final Intent getScatterChartIntent(\n      Context context,\n      XYMultipleSeriesDataset dataset,\n      XYMultipleSeriesRenderer renderer,\n      String activityTitle) {\n    checkParameters(dataset, renderer);\n    Intent intent = new Intent(context, GraphicalActivity.class);\n    XYChart chart = new ScatterChart(dataset, renderer);\n    intent.putExtra(CHART, chart);\n    intent.putExtra(TITLE, activityTitle);\n    return intent;\n  }\n"}, {"dataset": "putExtra", "exampleID": 2996, "initialization": ["Intent intent = new Intent(*,*)", "Intent intent = new Intent(*,*)", "int value = MultiPlayerModel.getScore()"], "initializationStart": [609, 755, 905], "initializationEnd": [657, 798, 921], "hasTryCatch": 1, "exceptionType": "InternetConnectionException", "exceptionHandlingCall": ["fillInStackTrace()", "error(*)"], "tryExpressionStart": 280, "tryExpressionEnd": 284, "tryBlockStart": 280, "tryBlockEnd": 1591, "catchExpressionStart": 1347, "catchExpressionEnd": 1385, "catchBlockStart": 1347, "catchBlockEnd": 1472, "exceptionHandlingCallStart": [1393, 1421], "exceptionHandlingCallEnd": [1413, 1451], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 976, "focalAPIEnd": 1009, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,int)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "startActivity(intent)"], "useStart": [1017, 1062, 1115, 1148, 1630], "useEnd": [1054, 1107, 1140, 1185, 1651], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ZooTypers/ZooTypers/tree/master/ZooTypers/src/com/example/zootypers/ui/MultiPlayer.java", "rawCode": "  /** Called when the timer runs out; goes to the post game screen. */\n  public final void goToPostGame() {\n    Log.i(\"Multiplayer\", \"Ending game\");\n    // Show game over message before going to post game\n    findViewById(R.id.game_over).setVisibility(0);\n\n    Intent intent;\n    try {\n      // Sets themselves as done with the game\n      model.setUserFinish();\n      // See if opponent completed the game\n      if (!model.isOpponentFinished()) {\n        // Opponent did disconnect; switch to go to appropriate screen\n        Log.w(\"Multiplayer\", \"timed out waiting for opponent to finish\");\n        intent = new Intent(this, PostGameScreenDisconnect.class);\n      } else {\n        Log.e(\"Multiplayer\", \"opponent is finished with game\");\n        intent = new Intent(this, PostGameScreenMulti.class);\n      }\n\n      // Pass scores, background, username, and results to post game screen\n      int myScore = model.getScore();\n      int oppScore = model.getOpponentScore();\n      intent.putExtra(\"score\", myScore);\n      intent.putExtra(\"oppScore\", oppScore);\n      intent.putExtra(\"result\", myScore - oppScore);\n      intent.putExtra(\"bg\", bg);\n      intent.putExtra(\"username\", username);\n\n      // Delete the match\n      model.deleteUser();\n      // Turn off music if it was playing\n      if (playMusic) {\n        mediaPlayer.stop();\n      }\n    } catch (InternetConnectionException e) {\n      e.fillInStackTrace();\n      error(States.error.CONNECTION);\n      return;\n    } catch (InternalErrorException e) {\n      e.fillInStackTrace();\n      error(States.error.INTERNAL);\n      return;\n    }\n    // Go to the post game screen\n    startActivity(intent);\n    finish();\n  }\n"}, {"dataset": "putExtra", "exampleID": 2997, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 295, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hectorxda/MySettings/tree/master/src/com/android/settings/DefaultRingtonePreference.java", "rawCode": "  @Override\n  protected void onPrepareRingtonePickerIntent(Intent ringtonePickerIntent) {\n    super.onPrepareRingtonePickerIntent(ringtonePickerIntent);\n\n    /*\n     * Since this preference is for choosing the default ringtone, it\n     * doesn't make sense to show a 'Default' item.\n     */\n    ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, false);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2998, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [52], "initializationEnd": [79], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["intent.putParcelableArrayListExtra(String,ArrayList<Venue>)"], "configurationStart": [108], "configurationEnd": [162], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 201, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,double)", "intent.putExtra(String,double)", "intent.putExtra(String,String)", "startActivity(intent)"], "useStart": [280, 352, 414, 448], "useEnd": [316, 390, 442, 468], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johnnyman727/NextUp-Android/tree/master/src/com/dotcom/nextup/activities/Home.java", "rawCode": "  public void toMap(View view) {\n    Intent toMap = new Intent(this, Map.class);\n    if (my_venues != null) toMap.putParcelableArrayListExtra(\"venues\", my_venues);\n    if (!Double.isNaN(max_distance)) toMap.putExtra(\"max distance\", max_distance);\n    if (!Double.isNaN(latitude)) toMap.putExtra(\"latitude\", latitude);\n    if (!Double.isNaN(longitude)) toMap.putExtra(\"longitude\", longitude);\n    if (name != null) toMap.putExtra(\"name\", name);\n    startActivity(toMap);\n  }\n"}, {"dataset": "putExtra", "exampleID": 2999, "initialization": ["Intent intent = new Intent(*,*)"], "initializationStart": [328], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(value==null)", "guardType": "IF {", "guardExpressionStart": 165, "guardExpressionEnd": 191, "guardBlockStart": 165, "guardBlockEnd": 284, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 408, "focalAPIEnd": 459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "intent.putExtra(String,String)", "startActivity(intent)"], "useStart": [1191, 1545, 1753, 2105, 2295], "useEnd": [1244, 1598, 1806, 2157, 2330], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world/tree/master/floworld/src/com/tianxia/app/floworld/appreciate/AppreciateTabActivity.java", "rawCode": "  @Override\n  protected void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\n    switch (position) {\n      case 0:\n        // 最新\n        if (latestListUrl == null) {\n          setListData(false);\n          getAppreciateConfig();\n          return;\n        }\n        appreciateListIntent =\n            new Intent(AppreciateTabActivity.this, AppreciateLatestActivity.class);\n        appreciateListIntent.putExtra(\"url\", latestListUrl);\n        if (!PreferencesUtils.getStringPreference(this, \"config\", \"localTime\", \"0\")\n            .equals(PreferencesUtils.getStringPreference(this, \"config\", \"serverTime\", \"0\"))) {\n          PreferencesUtils.setStringPreferences(\n              this,\n              \"config\",\n              \"localTime\",\n              PreferencesUtils.getStringPreference(this, \"config\", \"serverTime\", \"0\"));\n          getAppreciateConfig();\n        }\n        break;\n\n      case 1:\n        // 分类\n        if (categoryListUrl == null) {\n          setListData(false);\n          getAppreciateConfig();\n          return;\n        }\n        appreciateListIntent =\n            new Intent(AppreciateTabActivity.this, AppreciateCategoryActivity.class);\n        appreciateListIntent.putExtra(\"url\", categoryListUrl);\n        break;\n\n      case 2:\n        // 归档\n        if (archiverListUrl == null) {\n          setListData(false);\n          getAppreciateConfig();\n          return;\n        }\n        appreciateListIntent =\n            new Intent(AppreciateTabActivity.this, AppreciateArchiverActivity.class);\n        appreciateListIntent.putExtra(\"url\", archiverListUrl);\n        break;\n\n      case 3:\n        appreciateListIntent =\n            new Intent(AppreciateTabActivity.this, AppreciateSearchActivity.class);\n        appreciateListIntent.putExtra(\"url\", categoryListUrl);\n        break;\n\n      case 4:\n        // 合作\n        if (companyListUrl == null) {\n          setListData(false);\n          getAppreciateConfig();\n          return;\n        }\n        appreciateListIntent =\n            new Intent(AppreciateTabActivity.this, AppreciateCompanyActivity.class);\n        appreciateListIntent.putExtra(\"url\", companyListUrl);\n        break;\n\n      default:\n        appreciateListIntent = null;\n        break;\n    }\n\n    if (appreciateListIntent != null) {\n      startActivity(appreciateListIntent);\n    }\n  }\n"}, {"dataset": "putExtra", "exampleID": 3000, "initialization": ["Intent intent = new Intent(String)"], "initializationStart": [1118], "initializationEnd": [1154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "intent = intent.putExtra(name,value)", "focalAPIStart": 1170, "focalAPIEnd": 1201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sendBroadcast(intent)", "sendBroadcast(intent)", "sendBroadcast(intent)"], "useStart": [1217, 2720, 2927], "useEnd": [1238, 2741, 2948], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/filip-jovanovic/chase_game/tree/master/src/edu/elfak/chasegame/GameService.java", "rawCode": "  private void checkAndProcessColision(LatLng newCoordinates) {\n    for (ObjectOnMap object : buildings) {\n      if (calculateDistance(newCoordinates, object.getLatlng()) < PICKUP_DISTANCE) {\n        if (object.isPoliceStation()) {\n          if (!isThief) refillAmmo();\n        } else if (object.isSafeHouse()) {\n          // Nista se ne desava\n        } else if (object.isBank() && (object.getValue() > 0)) {\n          if (isThief && (!gatheredItems.contains(object))) {\n            int bankId = Integer.valueOf(object.getId());\n            int numOfNecessaryItems = 0, numOfGatheredNecessaryItems = 0;\n            for (int j = 0; j < items.size(); j++) {\n              if (bankId == items.get(j).getBankId()) numOfNecessaryItems++;\n            }\n            for (int j = 0; j < gatheredItems.size(); j++) {\n              if (bankId == gatheredItems.get(j).getBankId()) numOfGatheredNecessaryItems++;\n            }\n\n            if (numOfNecessaryItems == numOfGatheredNecessaryItems) {\n              Log.v(\"BANK ROBED!\", String.valueOf(bankId));\n\n              robbedBanks.add(object);\n\n              Intent intent = new Intent(\"BANK_ROBBED_UPDATE_MAP\");\n              intent.putExtra(\"bank\", object);\n              sendBroadcast(intent);\n\n              Toast.makeText(\n                      this,\n                      \"Banka je opljackana. Prikupljeno je jos \" + object.getValue() + \"$ !\",\n                      Toast.LENGTH_LONG)\n                  .show();\n\n              moneyGathered += object.getValue();\n\n              buildings.remove(object);\n              object.setValue(object.getValue() * (-1));\n              buildings.add(object);\n\n              if (moneyGathered >= MONEY_LIMIT) {\n                HttpHelper.sendGcmMessage(\n                    GCM_THIEF_WIN_TAG, String.valueOf(moneyGathered), defaultReceivers());\n\n                Intent victory = new Intent(\"DISPLAY_DIALOG\");\n                victory.putExtra(\"title\", \"Cestitamo! Pobedili ste!\");\n                sendBroadcast(victory);\n                gameTimer.cancel();\n              } else {\n                HttpHelper.sendGcmMessage(\n                    GCM_BANK_ROBBED_UPDATE_MAP, object.getId(), defaultReceivers());\n              }\n            }\n          }\n        }\n      }\n    }\n    if (isThief && gameStarted) {\n      for (ObjectOnMap object : items) {\n        if (calculateDistance(newCoordinates, object.getLatlng()) < PICKUP_DISTANCE) {\n          if (!gatheredItems.contains(object)) {\n            gatheredItems.add(object);\n            removeMapObject(object);\n            if (object.getName().contains(\"Pancir\")) {\n              vestAvailable = true;\n              Intent intent = new Intent(\"ENABLE_VEST_BUTTON_TAG\");\n              sendBroadcast(intent);\n            } else if (object.getName().contains(\"Ometac\")) {\n              jammerAvailable = true;\n              Intent intent = new Intent(\"ENABLE_JAMMER_BUTTON_TAG\");\n              sendBroadcast(intent);\n            }\n          }\n        }\n      }\n    }\n  }\n"}]