[{"dataset": "setAdd", "exampleID": 7201, "initialization": ["Set set = new HashSet()"], "initializationStart": [118], "initializationEnd": [131], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isASubmachineState(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 99, "guardBlockStart": 50, "guardBlockEnd": 179, "focalAPI": " = set.add(element)", "focalAPIStart": 139, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoSubmachineStateToStateMachine.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isASubmachineState(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7202, "initialization": ["Object element = Map.Entry.getKey()", "Set set = new HashSet()"], "initializationStart": [1206, 1558], "initializationEnd": [1220, 1571], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1599, "focalAPIEnd": 1624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.toArray()"], "useStart": [1830], "useEnd": [1856], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cbsa-informatik-uni-siegen/gtitool/tree/master/jgraph/source/org/jgraph/graph/AttributeMap.java", "rawCode": "  /**\n   * Apply the <code>change</code> to this views attributes. <code>change</code> must be a <code>Map\n   * </code> previously obtained from this object.\n   *\n   * @param change the change to apply\n   * @return a map that may be used to undo the change to target.\n   */\n  public AttributeMap applyMap(Map change) {\n    AttributeMap undo = new AttributeMap();\n    if (change != null) {\n      // Handle Remove All\n      if (GraphConstants.isRemoveAll(change)) {\n        undo.putAll(this);\n        clear();\n      }\n      // Handle Remove Individual\n      Object[] remove = GraphConstants.getRemoveAttributes(change);\n      if (remove != null) {\n        // don't store command\n        for (int i = 0; i < remove.length; i++) {\n          Object oldValue = remove(remove[i]);\n          if (oldValue != null) undo.put(remove[i], oldValue);\n        }\n      }\n      // Attributes that were empty are added to removeattibutes.\n      // Performance and transient memory peak are reduced by lazily\n      // instantiating the set.\n      Set removeAttributes = null;\n      Iterator it = change.entrySet().iterator();\n      while (it.hasNext()) {\n        Map.Entry entry = (Map.Entry) it.next();\n        Object key = entry.getKey();\n        if (!key.equals(GraphConstants.REMOVEALL)\n            && !key.equals(GraphConstants.REMOVEATTRIBUTES)\n            && !key.equals(GraphConstants.VALUE)) {\n          Object oldValue = applyValue(key, entry.getValue());\n          if (oldValue == null) {\n            if (removeAttributes == null) {\n              removeAttributes = new HashSet();\n            }\n            removeAttributes.add(key);\n          } else {\n            undo.put(key, oldValue);\n          }\n        }\n      }\n      if (removeAttributes != null && !removeAttributes.isEmpty()) {\n        GraphConstants.setRemoveAttributes(undo, removeAttributes.toArray());\n      }\n    }\n    return undo;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7203, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["element.set(int,Object)", "set.iterator()"], "configurationStart": [405, 578], "configurationEnd": [437, 597], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 801, "focalAPIEnd": 820, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shevek/spring-rich-client/tree/master/spring-richclient-core/src/main/java/org/springframework/binding/value/support/GrowableIndexAdapter.java", "rawCode": "  protected Object setCollectionValue(int index, Object value) {\n    Object collection = collectionValueModel.getValue();\n    if (collection.getClass().isArray()) {\n      growArrayIfNeccessary(index);\n      Object old = Array.get(value, index);\n      Array.set(collection, index, value);\n      return old;\n    } else if (collection instanceof List) {\n      growCollectionIfNeccessary(index);\n      return ((List) value).set(index, value);\n    } else if (collection instanceof Set) {\n      growCollectionIfNeccessary(index);\n      Set setValue = (Set) value;\n      Iterator it = setValue.iterator();\n      Object old = null;\n      for (int j = 0; it.hasNext(); j++) {\n        Object element = it.next();\n        if (j == index) {\n          old = element;\n          it.remove();\n        }\n      }\n      setValue.add(value);\n      return old;\n    } else {\n      throw new IllegalArgumentException(\"Value must be a collection \" + value);\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7204, "initialization": ["Set set = new HashSet()"], "initializationStart": [99], "initializationEnd": [112], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 120, "focalAPIEnd": 135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoProjectToCollaboration.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (parent instanceof Project) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7205, "initialization": ["Object element = get()"], "initializationStart": [532], "initializationEnd": [555], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 612, "focalAPIEnd": 647, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nocach/ObjectG/tree/master/ObjectG-core/src/main/java/org/objectg/gen/impl/SetGenerator.java", "rawCode": "  @Override\n  protected void addNewObject(\n      Set collection,\n      GenerationConfiguration configuration,\n      GenerationContext contextOfCollection) {\n    GenerationContext contextForGenertingSetObj = getContextForGenericType(contextOfCollection, 0);\n    if (!shouldAddObjectForContext(configuration, contextForGenertingSetObj)) {\n      // we are not generating any value, but have pushed the context, so need to pop manually\n      contextForGenertingSetObj.pop();\n      return;\n    }\n    Object objectForCollection =\n        GenerationSession.get().generate(configuration, contextForGenertingSetObj);\n    collection.add(objectForCollection);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7206, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "element!=null", "guardType": "IF {", "guardExpressionStart": 403, "guardExpressionEnd": 425, "guardBlockStart": 403, "guardBlockEnd": 1564, "focalAPI": " = set.add(element)", "focalAPIStart": 976, "focalAPIEnd": 1000, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)", "set.add(Object)"], "useStart": [1270, 1525], "useEnd": [1294, 1549], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chanwit/groovy/tree/master/src/main/org/codehaus/groovy/binding/BindPath.java", "rawCode": "  /**\n   * Add listeners to a specific object. Updates the bould flags and update set\n   *\n   * @param listener This listener to attach.\n   * @param newObject The object we should read our property off of.\n   * @param updateSet The list of objects we have added listeners to\n   */\n  public void addListeners(PropertyChangeListener listener, Object newObject, Set updateSet) {\n    removeListeners();\n    if (newObject != null) {\n      // check for local synthetics\n      TriggerBinding syntheticTrigger = getSyntheticTriggerBinding(newObject);\n      MetaClass mc = InvokerHelper.getMetaClass(newObject);\n      if (syntheticTrigger != null) {\n        PropertyBinding psb = new PropertyBinding(newObject, propertyName);\n        PropertyChangeProxyTargetBinding proxytb =\n            new PropertyChangeProxyTargetBinding(newObject, propertyName, listener);\n\n        syntheticFullBinding = syntheticTrigger.createBinding(psb, proxytb);\n        syntheticFullBinding.bind();\n        updateSet.add(newObject);\n      } else if (!mc.respondsTo(newObject, \"addPropertyChangeListener\", NAME_PARAMS).isEmpty()) {\n        InvokerHelper.invokeMethod(\n            newObject, \"addPropertyChangeListener\", new Object[] {propertyName, listener});\n        localListener = listener;\n        updateSet.add(newObject);\n      } else if (!mc.respondsTo(newObject, \"addPropertyChangeListener\", GLOBAL_PARAMS).isEmpty()) {\n        InvokerHelper.invokeMethod(newObject, \"addPropertyChangeListener\", listener);\n        globalListener = listener;\n        updateSet.add(newObject);\n      }\n    }\n    currentObject = newObject;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7207, "initialization": ["Object element = Iterator.next()"], "initializationStart": [388], "initializationEnd": [399], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.iterator()", "set.remove(IResource)"], "configurationStart": [316, 1105], "configurationEnd": [343, 1138], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1158, "focalAPIEnd": 1187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [1233], "useEnd": [1262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xored/f4/tree/master/com.xored.fanide.ui/src/com/xored/fanide/internal/ui/explorer/FanNavigatorContentProvider.java", "rawCode": "  /**\n   * Adapted from the Common Navigator Content Provider\n   *\n   * @param javaElements the java elements\n   * @param proposedChildren the proposed children\n   */\n  private void customize(Object[] javaElements, Set proposedChildren) {\n    List elementList = Arrays.asList(javaElements);\n    for (Iterator iter = proposedChildren.iterator(); iter.hasNext(); ) {\n      Object element = iter.next();\n      IResource resource = null;\n      if (element instanceof IResource) {\n        resource = (IResource) element;\n      } else if (element instanceof IAdaptable) {\n        resource = (IResource) ((IAdaptable) element).getAdapter(IResource.class);\n      }\n      if (resource != null) {\n        int i = elementList.indexOf(resource);\n        if (i >= 0) {\n          javaElements[i] = null;\n        }\n      }\n    }\n    for (int i = 0; i < javaElements.length; i++) {\n      Object element = javaElements[i];\n      if (element instanceof IModelElement) {\n        IModelElement cElement = (IModelElement) element;\n        IResource resource = cElement.getResource();\n        if (resource != null) {\n          proposedChildren.remove(resource);\n        }\n        proposedChildren.add(element);\n      } else if (element != null) {\n        proposedChildren.add(element);\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7208, "initialization": ["Set set = new HashSet()", "Object element = NamingEnumeration.next()"], "initializationStart": [690, 1719], "initializationEnd": [703, 1737], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new CertStoreException(String)"], "tryExpressionStart": 709, "tryExpressionEnd": 713, "tryBlockStart": 709, "tryBlockEnd": 2039, "catchExpressionStart": 1799, "catchExpressionEnd": 1819, "catchBlockStart": 1799, "catchBlockEnd": 1913, "exceptionHandlingCallStart": [1833], "exceptionHandlingCallEnd": [1905], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1751, "focalAPIEnd": 1761, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["DirContext.close()"], "finallyExpressionStart": 1914, "finallyExpressionEnd": 1922, "finallyBlockStart": 1914, "finallyBlockEnd": 2039, "cleanUpCallStart": [1973], "cleanUpCallEnd": [1984], "url": "https://github.com/ripple/ripple-lib-java/tree/master/ripple-bouncycastle/src/main/java/org/ripple/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java", "rawCode": "  /**\n   * Returns a Set of byte arrays with the certificate or CRL encodings.\n   *\n   * @param attributeName The attribute name to look for in the LDAP.\n   * @param attributeValue The value the attribute name must have.\n   * @param attrs The attributes in the LDAP which hold the certificate, certificate pair or CRL in\n   *     a found entry.\n   * @return Set of byte arrays with the certificate encodings.\n   */\n  private Set search(String attributeName, String attributeValue, String[] attrs)\n      throws CertStoreException {\n    String filter = attributeName + \"=\" + attributeValue;\n    if (attributeName == null) {\n      filter = null;\n    }\n    DirContext ctx = null;\n    Set set = new HashSet();\n    try {\n\n      ctx = connectLDAP();\n\n      SearchControls constraints = new SearchControls();\n      constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);\n      constraints.setCountLimit(0);\n      for (int i = 0; i < attrs.length; i++) {\n        String temp[] = new String[1];\n        temp[0] = attrs[i];\n        constraints.setReturningAttributes(temp);\n\n        String filter2 = \"(&(\" + filter + \")(\" + temp[0] + \"=*))\";\n        if (filter == null) {\n          filter2 = \"(\" + temp[0] + \"=*)\";\n        }\n        NamingEnumeration results = ctx.search(params.getBaseDN(), filter2, constraints);\n        while (results.hasMoreElements()) {\n          SearchResult sr = (SearchResult) results.next();\n          // should only be one attribute in the attribute set with\n          // one\n          // attribute value as byte array\n          NamingEnumeration enumeration =\n              ((Attribute) (sr.getAttributes().getAll().next())).getAll();\n          while (enumeration.hasMore()) {\n            Object o = enumeration.next();\n            set.add(o);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new CertStoreException(\"Error getting results from LDAP directory \" + e);\n\n    } finally {\n      try {\n        if (null != ctx) {\n          ctx.close();\n        }\n      } catch (Exception e) {\n      }\n    }\n    return set;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7209, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [98, 249], "initializationEnd": [111, 260], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 307, "focalAPIEnd": 319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [493], "useEnd": [505], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sake/bouncycastle-java/tree/master/jdk1.1/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCRLs(CRLSelector selector) throws CertStoreException {\n    Set col = new HashSet();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof CRL) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof CRL) && selector.match((CRL) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7210, "initialization": ["Set set = new HashSet()", "Object element = Map.Entry.getKey()"], "initializationStart": [480, 716], "initializationEnd": [493, 733], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "addedKeys.remove(element,)", "guardType": "IF {", "guardExpressionStart": 741, "guardExpressionEnd": 770, "guardBlockStart": 741, "guardBlockEnd": 1220, "focalAPI": " = set.add(element)", "focalAPIStart": 992, "focalAPIEnd": 1015, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomsontom/emf-databinding-example/tree/master/org.eclipse.core.databinding/src/org/eclipse/core/databinding/observable/Diffs.java", "rawCode": "  /**\n   * Computes the difference between two maps.\n   *\n   * @param oldMap\n   * @param newMap\n   * @return a map diff representing the changes needed to turn oldMap into newMap\n   */\n  public static MapDiff computeMapDiff(Map oldMap, Map newMap) {\n    // starts out with all keys from the new map, we will remove keys from\n    // the old map as we go\n    final Set addedKeys = new HashSet(newMap.keySet());\n    final Set removedKeys = new HashSet();\n    final Set changedKeys = new HashSet();\n    final Map oldValues = new HashMap();\n    final Map newValues = new HashMap();\n    for (Iterator it = oldMap.entrySet().iterator(); it.hasNext(); ) {\n      Map.Entry oldEntry = (Entry) it.next();\n      Object oldKey = oldEntry.getKey();\n      if (addedKeys.remove(oldKey)) {\n        // potentially changed key since it is in oldMap and newMap\n        Object oldValue = oldEntry.getValue();\n        Object newValue = newMap.get(oldKey);\n        if (!Util.equals(oldValue, newValue)) {\n          changedKeys.add(oldKey);\n          oldValues.put(oldKey, oldValue);\n          newValues.put(oldKey, newValue);\n        }\n      } else {\n        removedKeys.add(oldKey);\n        oldValues.put(oldKey, oldEntry.getValue());\n      }\n    }\n    for (Iterator it = addedKeys.iterator(); it.hasNext(); ) {\n      Object newKey = it.next();\n      newValues.put(newKey, newMap.get(newKey));\n    }\n    return new MapDiff() {\n      public Set getAddedKeys() {\n        return addedKeys;\n      }\n\n      public Set getChangedKeys() {\n        return changedKeys;\n      }\n\n      public Set getRemovedKeys() {\n        return removedKeys;\n      }\n\n      public Object getNewValue(Object key) {\n        return newValues.get(key);\n      }\n\n      public Object getOldValue(Object key) {\n        return oldValues.get(key);\n      }\n    };\n  }\n"}, {"dataset": "setAdd", "exampleID": 7211, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [217, 322], "initializationEnd": [230, 333], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 395, "focalAPIEnd": 417, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KDReleng/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.debug.ui/src/org/eclipse/dltk/internal/debug/ui/interpreters/EnvironmentVariableContentProvider.java", "rawCode": "  /**\n   * Returns the list of libraries in the given selection. SubElements are replaced by their parent\n   * libraries.\n   */\n  private Set getSelectedLibraries(IStructuredSelection selection) {\n    Set libraries = new HashSet();\n    for (Iterator iter = selection.iterator(); iter.hasNext(); ) {\n      Object element = iter.next();\n      if (element instanceof EnvironmentVariable) {\n        libraries.add(element);\n      }\n    }\n    return libraries;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7212, "initialization": ["Object element = new Object()"], "initializationStart": [108], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 211, "focalAPIEnd": 235, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.isEmpty()"], "useStart": [370], "useEnd": [396], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/2pirad/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void _testIsReallyWeak() {\n    long timeout = System.currentTimeMillis() + 10000;\n\n    Object o1 = new Object();\n    ReferenceQueue queue = new ReferenceQueue();\n\n    new WeakReference(o1, queue);\n\n    objectUnderTest_.add(o1);\n\n    o1 = null;\n\n    while (queue.poll() == null && System.currentTimeMillis() < timeout) {\n      System.gc();\n    }\n\n    assertTrue(objectUnderTest_.isEmpty());\n  }\n"}, {"dataset": "setAdd", "exampleID": 7213, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.clear()"], "configurationStart": [49], "configurationEnd": [70], "guardCondition": "element!=null", "guardType": "IF {", "guardExpressionStart": 100, "guardExpressionEnd": 116, "guardBlockStart": 100, "guardBlockEnd": 140, "focalAPI": " = set.add(element)", "focalAPIStart": 117, "focalAPIEnd": 139, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joliebig/featurehouse_fstcomp_examples/tree/master/Java/Violet/GraphUtility/com/horstmann/violet/framework/GraphPanel.java", "rawCode": "  private void setSelectedItem(Object obj) {\n    selectedItems.clear();\n    lastSelected = obj;\n    if (obj != null) selectedItems.add(obj);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7214, "initialization": ["Set set = new HashSet()", "Object element = EntrySet.getValue()"], "initializationStart": [48, 199], "initializationEnd": [61, 215], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 223, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sakai-mirror/metaobj/tree/master/metaobj-api/api/src/java/org/sakaiproject/metaobj/shared/model/ElementBean.java", "rawCode": "  public Collection values() {\n    Set values = new HashSet();\n    for (Iterator iter = entrySet().iterator(); iter.hasNext(); ) {\n      EntrySet child = (EntrySet) iter.next();\n      Object value = child.getValue();\n      values.add(value);\n    }\n    return values;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7215, "initialization": ["Object element = new Object()"], "initializationStart": [45], "initializationEnd": [57], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 64, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.contains(Object)", "set.remove(Object)", "set.remove(Object)", "set.contains(Object)"], "useStart": [105, 152, 198, 244], "useEnd": [134, 179, 225, 273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/2pirad/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testRemove() {\n    Object o1 = new Object();\n\n    objectUnderTest_.add(o1);\n    assertTrue(objectUnderTest_.contains(o1));\n    assertTrue(objectUnderTest_.remove(o1));\n    assertFalse(objectUnderTest_.remove(o1));\n    assertFalse(objectUnderTest_.contains(o1));\n  }\n"}, {"dataset": "setAdd", "exampleID": 7216, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [107, 258], "initializationEnd": [120, 269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 324, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [526], "useEnd": [538], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluespark80/example/tree/master/security/src/main/java/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCertificates(CertSelector selector) throws CertStoreException {\n    Set col = new HashSet();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof Certificate) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof Certificate) && selector.match((Certificate) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7217, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1656, "focalAPIEnd": 1669, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cbsa-informatik-uni-siegen/gtitool/tree/master/jgraph/source/org/jgraph/graph/DefaultGraphSelectionModel.java", "rawCode": "  /**\n   * Selects a single cell and updates all datastructures. No listeners are notified. Override this\n   * method to control individual cell selection.\n   */\n  protected boolean select(Set set, Object cell) {\n    AttributeMap attrs = graph.getAttributes(cell);\n    if (!isCellSelected(cell)\n        && graph.getGraphLayoutCache().isVisible(cell)\n        && (attrs == null || GraphConstants.isSelectable(attrs))) {\n      GraphModel model = graph.getModel();\n      // Deselect and Update All Parents\n      Object parent = model.getParent(cell);\n      while (parent != null) {\n        int count = getSelectedChildCount(parent);\n        // Deselect Selected Parents\n        if (count == SELECTED) count = 0;\n        // Increase Child Count\n        count++;\n        setSelectedChildCount(parent, count);\n        // Remove From Selection\n        selection.remove(parent);\n        // Next Parent\n        parent = model.getParent(parent);\n      }\n      // Deselect All Children\n      Object[] tmp = new Object[] {cell};\n      List childs = DefaultGraphModel.getDescendants(model, tmp);\n      // Remove Current Cell From Flat-View\n      // TODO check performance of next line\n      childs.remove(cell);\n      Iterator it = childs.iterator();\n      while (it.hasNext()) {\n        Object child = it.next();\n        if (child != null && !model.isPort(child)) {\n          // Remove Child From Selection\n          selection.remove(child);\n          // Remove Child State\n          cellStates.remove(child);\n        }\n      }\n      // Set Selected State for Current\n      setSelectedChildCount(cell, SELECTED);\n      // Add Current To HashSet and Return\n      return set.add(cell);\n    }\n    return false;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7218, "initialization": ["Set set = new HashSet()", "Object element = readItem(HierarchicalStreamReader,UnmarshallingContext,Set)"], "initializationStart": [107, 233], "initializationEnd": [120, 263], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 294, "focalAPIEnd": 311, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hudson/xstream/tree/master/xstream/src/java/com/thoughtworks/xstream/converters/extended/SubjectConverter.java", "rawCode": "  protected Set populateSet(HierarchicalStreamReader reader, UnmarshallingContext context) {\n    Set set = new HashSet();\n    reader.moveDown();\n    while (reader.hasMoreChildren()) {\n      reader.moveDown();\n      Object elementl = readItem(reader, context, set);\n      reader.moveUp();\n      set.add(elementl);\n    }\n    reader.moveUp();\n    return set;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7219, "initialization": ["Set set = new HashSet(*)", "Object element = Iterator.next()"], "initializationStart": [98, 200], "initializationEnd": [122, 209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.add(String)"], "configurationStart": [253], "configurationEnd": [298], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 323, "focalAPIEnd": 333, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtyley/test-bc-java-cvsimport/tree/master/crypto/src/org/bouncycastle/tsp/TimeStampResponseGenerator.java", "rawCode": "  private Set convert(Set orig) {\n    if (orig == null) {\n      return orig;\n    }\n\n    Set con = new HashSet(orig.size());\n\n    for (Iterator it = orig.iterator(); it.hasNext(); ) {\n      Object o = it.next();\n\n      if (o instanceof String) {\n        con.add(new ASN1ObjectIdentifier((String) o));\n      } else {\n        con.add(o);\n      }\n    }\n\n    return con;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7220, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(set.contains(element,))", "guardType": "IF {", "guardExpressionStart": 70, "guardExpressionEnd": 109, "guardBlockStart": 70, "guardBlockEnd": 136, "focalAPI": " = set.add(element)", "focalAPIStart": 142, "focalAPIEnd": 171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ukcrpb6/jaxen-wmb-extensions/tree/master/src/java/main/org/jaxen/util/StackedIterator.java", "rawCode": "  protected Iterator internalCreateIterator(Object contextNode) {\n    if (this.created.contains(contextNode)) {\n      return null;\n    }\n\n    this.created.add(contextNode);\n\n    return createIterator(contextNode);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7221, "initialization": ["Set set = getConcreteTypedFindingSet()", "Object element = List.remove(int)"], "initializationStart": [199, 366], "initializationEnd": [227, 384], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 392, "focalAPIEnd": 407, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List.add(set)"], "useStart": [585], "useEnd": [612], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/stats-analysis/tree/master/src/gov/nih/nci/caintegrator/studyQueryService/germline/BatchFindingsHandler.java", "rawCode": "  protected final void populateCurrentResultSet(\n      List findings, List toBePopulated, Session session) {\n\n    /* 1. Remove the first 500 objects and add it to a new HashSet */\n    Set toBeSent = getConcreteTypedFindingSet();\n    int size = findings.size();\n    for (int index = 0; (index < size) && (index <= BATCH_OBJECT_INCREMENT); index++) {\n      Object f = findings.remove(0);\n      toBeSent.add(f);\n    }\n\n    /* 2. Add results to toBePopulated after making sure it is empty */\n    do {\n      synchronized (toBePopulated) {\n        if (toBePopulated.size() == 0) {\n          toBePopulated.add(toBeSent);\n          session.clear();\n          break;\n        }\n      }\n      try {\n        Thread.currentThread().sleep(10);\n      } catch (InterruptedException e) {\n        e.printStackTrace(); // no big deal\n      }\n    } while (true);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7222, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "this.items.contains(element,)", "guardType": "IF {", "guardExpressionStart": 220, "guardExpressionEnd": 250, "guardBlockStart": 220, "guardBlockEnd": 355, "focalAPI": " = set.add(element)", "focalAPIStart": 278, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.remove(Object)"], "useStart": [318], "useEnd": [346], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maihde/org.eclipse.rap/tree/master/bundles/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/dialogs/FilteredItemsSelectionDialog.java", "rawCode": "    /**\n     * Sets/unsets given item as duplicate.\n     *\n     * @param item item to change\n     * @param isDuplicate duplicate flag\n     */\n    public void setDuplicateElement(Object item, boolean isDuplicate) {\n      if (this.items.contains(item)) {\n        if (isDuplicate) this.duplicates.add(item);\n        else this.duplicates.remove(item);\n      }\n    }\n"}, {"dataset": "setAdd", "exampleID": 7223, "initialization": ["Set set = new HashSet()", "Object element = getEdgeData()"], "initializationStart": [102, 203], "initializationEnd": [115, 218], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 330, "focalAPIEnd": 347, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mbastian/gephi-maven/tree/master/modules/PartitionAPI/src/main/java/org/gephi/partition/impl/PartitionFactory.java", "rawCode": "  public static boolean isEdgePartitionColumn(AttributeColumn column, Graph graph) {\n    Set values = new HashSet();\n    int nonNullvalues = 0;\n    for (Edge n : graph.getEdges()) {\n      Object value = n.getEdgeData().getAttributes().getValue(column.getIndex());\n      if (value != null) {\n        nonNullvalues++;\n      }\n      values.add(value);\n    }\n    if (values.size()\n        < 9f / 10f * nonNullvalues) { // If #different values is < 9:10 of total non-null values\n      return true;\n    }\n    return false;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7224, "initialization": ["Set set = Map.get(Object)", "Set set = new HashSet()"], "initializationStart": [94, 156], "initializationEnd": [109, 169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 221, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/impulse-org/imp.xform/tree/master/src/org/eclipse/imp/xform/search/ASTSearchTreeContentProvider.java", "rawCode": "  private boolean insertInto(Object parent, Object child, Map map) {\n    Set children = (Set) map.get(parent);\n    if (children == null) {\n      children = new HashSet();\n      map.put(parent, children);\n    }\n    return children.add(child);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7225, "initialization": ["Set set = createDiffSet()", "Object element = Iterator.next()"], "initializationStart": [82, 189], "initializationEnd": [97, 204], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "wrappedSet.remove(element,)", "guardType": "IF {", "guardExpressionStart": 212, "guardExpressionEnd": 243, "guardBlockStart": 212, "guardBlockEnd": 330, "focalAPI": " = set.add(element)", "focalAPIStart": 300, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.isEmpty()", "createSetDiff(*,set)"], "useStart": [360, 411], "useEnd": [378, 463], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/rap/tree/master/bundles/org.eclipse.rap.jface.databinding/src/org/eclipse/jface/internal/databinding/viewers/CheckableCheckedElementsObservableSet.java", "rawCode": "  public boolean removeAll(Collection c) {\n    getterCalled();\n    Set removals = createDiffSet();\n    for (Iterator iterator = c.iterator(); iterator.hasNext(); ) {\n      Object element = iterator.next();\n      if (wrappedSet.remove(element)) {\n        checkable.setChecked(element, false);\n        removals.add(element);\n      }\n    }\n    boolean changed = !removals.isEmpty();\n    if (changed) fireSetChange(Diffs.createSetDiff(Collections.EMPTY_SET, removals));\n    return changed;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7226, "initialization": ["Object element = new Object()"], "initializationStart": [47], "initializationEnd": [59], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.contains(Object)"], "configurationStart": [77], "configurationEnd": [106], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 113, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.contains(Object)"], "useStart": [154], "useEnd": [183], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/2pirad/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testContains() {\n    Object o1 = new Object();\n    assertFalse(objectUnderTest_.contains(o1));\n    objectUnderTest_.add(o1);\n    assertTrue(objectUnderTest_.contains(o1));\n  }\n"}, {"dataset": "setAdd", "exampleID": 7227, "initialization": ["Object element = getParent(Object)"], "initializationStart": [85], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "set!=null && element!=null && !(insertChild(element,child,))", "guardType": "LOOP {", "guardExpressionStart": 107, "guardExpressionEnd": 129, "guardBlockStart": 107, "guardBlockEnd": 384, "focalAPI": " = set.add(element)", "focalAPIStart": 278, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KDReleng/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/search/LevelTreeContentProvider.java", "rawCode": "  protected void insert(Map toAdd, Set toUpdate, Object child) {\n    Object parent = getParent(child);\n    while (parent != null) {\n      if (insertChild(parent, child)) {\n        if (toAdd != null) insertInto(parent, child, toAdd);\n      } else {\n        if (toUpdate != null) toUpdate.add(parent);\n        return;\n      }\n      child = parent;\n      parent = getParent(child);\n    }\n    if (insertChild(fResult, child)) {\n      if (toAdd != null) insertInto(fResult, child, toAdd);\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7228, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [202, 897], "initializationEnd": [215, 906], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.add(String)", "set.addAll(Set)", "set.addAll(Collection)", "set.addAll(Collection)"], "configurationStart": [277, 329, 508, 662], "configurationEnd": [294, 359, 524, 678], "guardCondition": "true||set.contains(source,)||set.contains(target,)", "guardType": "IF {", "guardExpressionStart": 83, "guardExpressionEnd": 101, "guardBlockStart": 83, "guardBlockEnd": 2133, "focalAPI": " = set.add(element)", "focalAPIStart": 1143, "focalAPIEnd": 1155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.removeAll(Set)", "set.remove(String)", "set.toArray()", "set.addAll(Set)", "set.add(String)", "set.add(Object)", "set.remove(String)", "set.toArray()"], "useStart": [1188, 1223, 1257, 1426, 1470, 2007, 2059, 2095], "useEnd": [1213, 1239, 1270, 1456, 1487, 2020, 2075, 2108], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape2/tree/master/coreplugins/AutomaticLayout/src/main/java/org/jgraph/graph/GraphLayoutCache.java", "rawCode": "  protected Object[] addVisibleDependencies(Object[] cells, boolean visible) {\n    if (cells != null) {\n      if (visible) {\n        // Make ports and source and target vertex visible\n        Set all = new HashSet();\n\n        for (int i = 0; i < cells.length; i++) {\n          all.add(cells[i]);\n          // Add ports\n          all.addAll(getPorts(cells[i]));\n\n          // Add source vertex and ports\n          Collection coll = getParentPorts(graphModel.getSource(cells[i]));\n\n          if (coll != null) all.addAll(coll);\n\n          // Add target vertex and ports\n          coll = getParentPorts(graphModel.getTarget(cells[i]));\n\n          if (coll != null) all.addAll(coll);\n        }\n\n        if (showsExistingConnections) {\n          Set tmp = DefaultGraphModel.getEdges(getModel(), cells);\n          Iterator it = tmp.iterator();\n\n          while (it.hasNext()) {\n            Object obj = it.next();\n            Object source = graphModel.getSource(obj);\n            Object target = graphModel.getTarget(obj);\n\n            if ((isVisible(source) || all.contains(source))\n                && (isVisible(target) || all.contains(target))) all.add(obj);\n          }\n        }\n\n        all.removeAll(visibleSet);\n        all.remove(null);\n\n        return all.toArray();\n      } else {\n        if (hidesExistingConnections) {\n          Set all = new HashSet();\n\n          for (int i = 0; i < cells.length; i++) {\n            all.addAll(getPorts(cells[i]));\n            all.add(cells[i]);\n          }\n\n          Iterator it = DefaultGraphModel.getEdges(graphModel, cells).iterator();\n\n          while (it.hasNext()) {\n            Object edge = it.next();\n            Object newSource = graphModel.getSource(edge);\n            Object newTarget = graphModel.getTarget(edge);\n\n            // Note: At this time the cells are not yet hidden\n            if (((newSource != null) && !hasVisibleParent(newSource, all))\n                || ((newTarget != null) && !hasVisibleParent(newTarget, all))) {\n              all.add(edge);\n            }\n          }\n\n          all.remove(null);\n\n          return all.toArray();\n        }\n      }\n    }\n\n    return cells;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7229, "initialization": ["Set set = get()"], "initializationStart": [56], "initializationEnd": [61], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["element.toString()"], "configurationStart": [129], "configurationEnd": [143], "guardCondition": "!(set.contains(element,))", "guardType": "IF {", "guardExpressionStart": 69, "guardExpressionEnd": 91, "guardBlockStart": 69, "guardBlockEnd": 153, "focalAPI": " = set.add(element)", "focalAPIStart": 160, "focalAPIEnd": 172, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AlFranzis/Playground/tree/master/al.franzis.osgi.weaving.equinox/src/al/franzis/osgi/weaving/core/equinox/adaptors/EquinoxWeavingAdaptor.java", "rawCode": "    public void put(Object obj) {\n      Set set = (Set) get();\n      if (set.contains(obj)) {\n        throw new RuntimeException(obj.toString());\n      }\n      set.add(obj);\n    }\n"}, {"dataset": "setAdd", "exampleID": 7230, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [217, 322], "initializationEnd": [230, 333], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 395, "focalAPIEnd": 417, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panchenko/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.debug.ui/src/org/eclipse/dltk/internal/debug/ui/interpreters/EnvironmentVariableContentProvider.java", "rawCode": "  /**\n   * Returns the list of libraries in the given selection. SubElements are replaced by their parent\n   * libraries.\n   */\n  private Set getSelectedLibraries(IStructuredSelection selection) {\n    Set libraries = new HashSet();\n    for (Iterator iter = selection.iterator(); iter.hasNext(); ) {\n      Object element = iter.next();\n      if (element instanceof EnvironmentVariable) {\n        libraries.add(element);\n      }\n    }\n    return libraries;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7231, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 285, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/voberoi/jchord/tree/master/libsrc/bddbddb/src/net/sf/bddbddb/order/OrderConstraintSet.java", "rawCode": "  /**\n   * Get the elements that must be interleaved with this element.\n   *\n   * @param o element\n   * @return collection of interleaved elements, including o\n   */\n  Collection getInterleaved(Object o) {\n    Collection result = new LinkedList();\n    Set visited = new HashSet();\n    result.add(o);\n    visited.add(o);\n    Collection c = objToConstraints.getValues(o);\n    if (c != null) {\n      for (Iterator i = c.iterator(); i.hasNext(); ) {\n        OrderConstraint oc = (OrderConstraint) i.next();\n        if (oc instanceof InterleaveConstraint) {\n          if (o.equals(oc.a)) {\n            if (visited.add(oc.b)) result.add(oc.b);\n          } else {\n            if (visited.add(oc.a)) result.add(oc.a);\n          }\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7232, "initialization": ["Set set = Map.get(Object)", "Set set = new HashSet()"], "initializationStart": [94, 156], "initializationEnd": [109, 169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 221, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AmanziTel/awe-rdt/tree/master/org.rubypeople.rdt.ui/src/org/rubypeople/rdt/internal/ui/search/LevelTreeContentProvider.java", "rawCode": "  private boolean insertInto(Object parent, Object child, Map map) {\n    Set children = (Set) map.get(parent);\n    if (children == null) {\n      children = new HashSet();\n      map.put(parent, children);\n    }\n    return children.add(child);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7233, "initialization": ["Object element = Notification.getNotifier()"], "initializationStart": [293], "initializationEnd": [310], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 375, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.remove(Object)"], "useStart": [859], "useEnd": [887], "hasFinally": 1, "cleanUpCall": ["Set.remove(Object)"], "finallyExpressionStart": 841, "finallyExpressionEnd": 849, "finallyBlockStart": 841, "finallyBlockEnd": 896, "cleanUpCallStart": [859], "cleanUpCallEnd": [887], "url": "https://github.com/dgiormov/javaee.wtp/tree/master/plugins/org.eclipse.jst.j2ee/common/org/eclipse/jst/j2ee/internal/common/CMPJavaChangeSynchronizationAdapter.java", "rawCode": "  /**\n   * Notifies if there is change in the key shape.\n   *\n   * @param Notification msg - Message indicates what has changed.\n   */\n  @Override\n  public void notifyChanged(Notification msg) {\n    if (!isEnabled(getCMP())) {\n      enable(getCMP());\n      return;\n    }\n    Object notifier = msg.getNotifier();\n    if (!updatingSet.contains(notifier)) {\n      try {\n        updatingSet.add(notifier);\n        switch (msg.getEventType()) {\n          case Notification.SET:\n            setNotification(msg);\n            break;\n          case Notification.UNSET:\n            unsetNotification(msg);\n            break;\n          case Notification.REMOVING_ADAPTER:\n            removeAdapterNotification(msg);\n            break;\n          case ReflectionAdaptor.EVENT:\n            jemFlushNotification(msg);\n            break;\n        }\n      } finally {\n        updatingSet.remove(notifier);\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7234, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [107, 258], "initializationEnd": [120, 269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 324, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [526], "useEnd": [538], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/security/src/main/java/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCertificates(CertSelector selector) throws CertStoreException {\n    Set col = new HashSet();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof Certificate) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof Certificate) && selector.match((Certificate) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7235, "initialization": ["Object element = new Object()"], "initializationStart": [45], "initializationEnd": [57], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 64, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.contains(Object)", "set.remove(Object)", "set.remove(Object)", "set.contains(Object)"], "useStart": [105, 152, 198, 244], "useEnd": [134, 179, 225, 273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stuartwdouglas/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testRemove() {\n    Object o1 = new Object();\n\n    objectUnderTest_.add(o1);\n    assertTrue(objectUnderTest_.contains(o1));\n    assertTrue(objectUnderTest_.remove(o1));\n    assertFalse(objectUnderTest_.remove(o1));\n    assertFalse(objectUnderTest_.contains(o1));\n  }\n"}, {"dataset": "setAdd", "exampleID": 7236, "initialization": ["Object element = restoreItemFromMemento(IMemento)"], "initializationStart": [532], "initializationEnd": [570], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "element!=null", "guardType": "IF {", "guardExpressionStart": 580, "guardExpressionEnd": 599, "guardBlockStart": 580, "guardBlockEnd": 646, "focalAPI": " = set.add(element)", "focalAPIStart": 612, "focalAPIEnd": 635, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzonekl/netxstudio/tree/master/screens/com.netxforge.netxstudio.screens/src/com/netxforge/netxstudio/screens/AbstractSmartTableViewer.java", "rawCode": "    /**\n     * Load history elements from memento.\n     *\n     * @param memento memento from which the history will be retrieved\n     */\n    public void load(IMemento memento) {\n\n      XMLMemento historyMemento = (XMLMemento) memento.getChild(rootNodeName);\n\n      if (historyMemento == null) {\n        return;\n      }\n\n      IMemento[] mementoElements = historyMemento.getChildren(infoNodeName);\n      for (int i = 0; i < mementoElements.length; ++i) {\n        IMemento mementoElement = mementoElements[i];\n        Object object = restoreItemFromMemento(mementoElement);\n        if (object != null) {\n          historyList.add(object);\n        }\n      }\n    }\n"}, {"dataset": "setAdd", "exampleID": 7237, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [639, 738], "initializationEnd": [652, 747], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(element==key)", "guardType": "IF {", "guardExpressionStart": 755, "guardExpressionEnd": 774, "guardBlockStart": 755, "guardBlockEnd": 831, "focalAPI": " = set.add(element)", "focalAPIStart": 811, "focalAPIEnd": 830, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.contains(Integer)", "set.equals(Set)", "Set.equals(set)"], "useStart": [990, 1220, 1305], "useEnd": [1010, 1238, 1323], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rwl/j2objc/tree/master/jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/IdentityHashMapTest.java", "rawCode": "  /**\n   * @tests java.util.IdentityHashMap#keySet()\n   * @tests java.util.IdentityHashMap#remove(java.lang.Object)\n   */\n  public void test_keyset_remove() {\n    IdentityHashMap map = new IdentityHashMap();\n\n    Integer key = new Integer(21);\n\n    map.put(new Integer(1), null);\n    map.put(new Integer(11), null);\n    map.put(key, null);\n    map.put(new Integer(31), null);\n    map.put(new Integer(41), null);\n    map.put(new Integer(51), null);\n    map.put(new Integer(61), null);\n    map.put(new Integer(71), null);\n    map.put(new Integer(81), null);\n    map.put(new Integer(91), null);\n\n    Set set = map.keySet();\n\n    Set newset = new HashSet();\n    Iterator it = set.iterator();\n    while (it.hasNext()) {\n      Object element = it.next();\n      if (element == key) {\n        it.remove();\n      } else newset.add(element);\n    }\n    int size = newset.size();\n    assertTrue(\"keyset and newset don't have same size\", newset.size() == size);\n    assertTrue(\"element is in newset \", !newset.contains(key));\n    assertTrue(\"element not removed from keyset\", !set.contains(key));\n    assertTrue(\"element not removed from map\", !map.containsKey(key));\n\n    assertTrue(\"newset and keyset do not have same elements 1\", newset.equals(set));\n    assertTrue(\"newset and keyset do not have same elements 2\", set.equals(newset));\n  }\n"}, {"dataset": "setAdd", "exampleID": 7238, "initialization": ["Set set = new HashSet()", "Object element = List.get(int)"], "initializationStart": [55, 138], "initializationEnd": [68, 153], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 216, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.addAll(Set)", "set.addAll(Set)", "set.addAll(Set)"], "useStart": [392, 867, 1016], "useEnd": [424, 899, 1048], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akosicki/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/ui/preferences/CodeTemplateBlock.java", "rawCode": "  private void export(List selected) {\n    Set datas = new HashSet();\n    for (int i = 0; i < selected.size(); i++) {\n      Object curr = selected.get(i);\n      if (curr instanceof TemplatePersistenceData) {\n        datas.add(curr);\n      } else if (curr instanceof TemplateContextType) {\n        TemplatePersistenceData[] cat = getTemplatesOfContextType((TemplateContextType) curr);\n        datas.addAll(Arrays.asList(cat));\n      } else if (curr instanceof ICodeTemplateCategory) {\n        ICodeTemplateCategory category = (ICodeTemplateCategory) curr;\n        if (category.isGroup()) {\n          TemplateContextType[] types = getTemplateContextTypes(category);\n          for (int j = 0; j < types.length; ++j) {\n            TemplateContextType contextType = types[j];\n            TemplatePersistenceData[] cat = getTemplatesOfContextType(contextType);\n            datas.addAll(Arrays.asList(cat));\n          }\n        } else {\n          TemplatePersistenceData[] cat = getTemplatesOfCategory(category);\n          datas.addAll(Arrays.asList(cat));\n        }\n      }\n    }\n    export((TemplatePersistenceData[]) datas.toArray(new TemplatePersistenceData[datas.size()]));\n  }\n"}, {"dataset": "setAdd", "exampleID": 7239, "initialization": ["Object element = new Object()"], "initializationStart": [89], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.size()"], "configurationStart": [47], "configurationEnd": [70], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 107, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.size()"], "useStart": [153], "useEnd": [176], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stuartwdouglas/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testSize() {\n    assertEquals(0, objectUnderTest_.size());\n    Object o1 = new Object();\n    objectUnderTest_.add(o1);\n    assertEquals(1, objectUnderTest_.size());\n  }\n"}, {"dataset": "setAdd", "exampleID": 7240, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [166, 257], "initializationEnd": [179, 266], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 314, "focalAPIEnd": 325, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(String)"], "useStart": [350], "useEnd": [424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ripple/ripple-lib-java/tree/master/ripple-bouncycastle/src/main/java/org/ripple/bouncycastle/x509/X509AttributeCertStoreSelector.java", "rawCode": "  private Set extractGeneralNames(Collection names) throws IOException {\n    if (names == null || names.isEmpty()) {\n      return new HashSet();\n    }\n    Set temp = new HashSet();\n    for (Iterator it = names.iterator(); it.hasNext(); ) {\n      Object o = it.next();\n      if (o instanceof GeneralName) {\n        temp.add(o);\n      } else {\n        temp.add(GeneralName.getInstance(ASN1Primitive.fromByteArray((byte[]) o)));\n      }\n    }\n    return temp;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7241, "initialization": ["Set set = withComparer(IElementComparer)"], "initializationStart": [560], "initializationEnd": [599], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 605, "focalAPIEnd": 624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["accumulatePendingRemovals(Set,set,Collection)"], "useStart": [630], "useEnd": [693], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomsontom/emf-databinding-example/tree/master/org.eclipse.jface.databinding/src/org/eclipse/jface/internal/databinding/viewers/ObservableCollectionTreeContentProvider.java", "rawCode": "  /**\n   * Returns the set of all elements that would be removed from the known elements set if the given\n   * elements were removed as children of the given parent element.\n   *\n   * @param parent the parent element of the elements being removed\n   * @param elementsToBeRemoved the elements being removed\n   * @return the set of all elements that would be removed from the known elements set\n   */\n  protected Set findPendingRemovals(Object parent, Collection elementsToBeRemoved) {\n    Set result = ViewerElementSet.withComparer(comparer);\n    Set parents = ViewerElementSet.withComparer(comparer);\n    parents.add(parent);\n    accumulatePendingRemovals(result, parents, elementsToBeRemoved);\n    return result;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7242, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [2256, 2387], "initializationEnd": [2269, 2399], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["toString()", "new RuntimeException(*)"], "tryExpressionStart": 171, "tryExpressionEnd": 175, "tryBlockStart": 171, "tryBlockEnd": 2619, "catchExpressionStart": 2542, "catchExpressionEnd": 2564, "catchBlockStart": 2542, "catchBlockEnd": 2619, "exceptionHandlingCallStart": [2599, 2578], "exceptionHandlingCallEnd": [2611, 2612], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 2482, "focalAPIEnd": 2499, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sable/jedd/tree/master/translator/src/polyglot/ext/jedd/types/PhysDom.java", "rawCode": "  public void runSat() throws SemanticException {\n    int numvars = ordMap.size() + (arrMap.size() + setMap.size() + litMap.size()) / 2;\n    if (numvars == 0) return;\n    try {\n      File tmpFile = File.createTempFile(\"domainassign\", \".cnf\");\n      PrintWriter file = new PrintWriter(new FileOutputStream(tmpFile));\n      file.println(\"p cnf \" + numvars + \" \" + cnf.size());\n      for (Iterator clauseIt = cnf.iterator(); clauseIt.hasNext(); ) {\n        final Clause clause = (Clause) clauseIt.next();\n        file.println(clause.toString());\n      }\n      file.close();\n      Process p = Runtime.getRuntime().exec(satSolver + \" \" + tmpFile.getAbsolutePath());\n      BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));\n      String str;\n      String soln = null;\n      while ((str = br.readLine()) != null) {\n        if (STATS) if (str.length() < 1000) System.out.println(str);\n        boolean hasNum = false;\n        boolean hasBad = false;\n        for (int i = 0; i < str.length(); i++) {\n          if (str.charAt(i) == ' ') continue;\n          if (str.charAt(i) == '\\t') continue;\n          if (str.charAt(i) == '-') continue;\n          if (str.charAt(i) >= '0' && str.charAt(i) <= '9') {\n            hasNum = true;\n            continue;\n          }\n          hasBad = true;\n        }\n        if (hasNum && !hasBad) {\n          // this looks like the solution\n          if (soln != null)\n            throw new RuntimeException(\"old solution was \" + soln + \"; now we got \" + str);\n          soln = str;\n        }\n      }\n      boolean pos[] = new boolean[numvars + 1];\n      boolean neg[] = new boolean[numvars + 1];\n      if (soln == null) {\n        unsatCore(tmpFile);\n        throw new SemanticException(\"SAT solver couldn't assign physical domains.\");\n      }\n      StringTokenizer st = new StringTokenizer(soln);\n      while (st.hasMoreTokens()) {\n        String tok = st.nextToken();\n        int i = Integer.parseInt(tok);\n        if (i < 0) neg[-i] = true;\n        else pos[i] = true;\n      }\n      for (int i = 1; i <= numvars; i++) {\n        if (neg[i] && pos[i]) throw new RuntimeException(\"both for \" + i);\n        if (!neg[i] && !pos[i]) throw new RuntimeException(\"neither for \" + i);\n      }\n      solution = new HashSet();\n      for (Iterator litIt = litNumMap.keySet().iterator(); litIt.hasNext(); ) {\n        final Object lit = (Object) litIt.next();\n        Integer i = (Integer) litNumMap.get(lit);\n        if (pos[i.intValue()]) solution.add(lit);\n      }\n      // tmpFile.delete();\n    } catch (IOException e) {\n      throw new RuntimeException(e.toString());\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7243, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(set.contains(element,))", "guardType": "IF {", "guardExpressionStart": 886, "guardExpressionEnd": 925, "guardBlockStart": 886, "guardBlockEnd": 1010, "focalAPI": " = set.add(element)", "focalAPIStart": 1015, "focalAPIEnd": 1044, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cascadeBeforeDelete(EventSource,EntityPersister,Object,*,set)", "cascadeAfterDelete(EventSource,EntityPersister,Object,set)"], "useStart": [1050, 1128], "useEnd": [1122, 1193], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amorfis/hibernate/tree/master/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultDeleteEventListener.java", "rawCode": "  /**\n   * We encountered a delete request on a transient instance.\n   *\n   * <p>This is a deviation from historical Hibernate (pre-3.2) behavior to align with the JPA spec,\n   * which states that transient entities can be passed to remove operation in which case cascades\n   * still need to be performed.\n   *\n   * @param session The session which is the source of the event\n   * @param entity The entity being delete processed\n   * @param cascadeDeleteEnabled Is cascading of deletes enabled\n   * @param persister The entity persister\n   * @param transientEntities A cache of already visited transient entities (to avoid infinite\n   *     recursion).\n   */\n  protected void deleteTransientEntity(\n      EventSource session,\n      Object entity,\n      boolean cascadeDeleteEnabled,\n      EntityPersister persister,\n      Set transientEntities) {\n    LOG.handlingTransientEntity();\n    if (transientEntities.contains(entity)) {\n      LOG.trace(\"Already handled transient entity; skipping\");\n      return;\n    }\n    transientEntities.add(entity);\n    cascadeBeforeDelete(session, persister, entity, null, transientEntities);\n    cascadeAfterDelete(session, persister, entity, transientEntities);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7244, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 654, "focalAPIEnd": 669, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/src/share/classes/sun/java2d/pipe/RenderQueue.java", "rawCode": "  /**\n   * Adds the given Object to the set of hard references, which will prevent that Object from being\n   * disposed until the queue has been flushed completely. This is useful in cases where some\n   * enqueued data could become invalid if the reference Object were garbage collected before the\n   * queue could be processed. (For example, keeping a hard reference to a FontStrike will prevent\n   * any enqueued glyph images associated with that strike from becoming invalid before the queue is\n   * flushed.) The reference set will be cleared immediately after the queue is flushed each time.\n   */\n  public final void addReference(Object ref) {\n    refSet.add(ref);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7245, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [639, 738], "initializationEnd": [652, 747], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(element==key)", "guardType": "IF {", "guardExpressionStart": 755, "guardExpressionEnd": 774, "guardBlockStart": 755, "guardBlockEnd": 831, "focalAPI": " = set.add(element)", "focalAPIStart": 811, "focalAPIEnd": 830, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.contains(Integer)", "set.equals(Set)", "Set.equals(set)"], "useStart": [990, 1220, 1305], "useEnd": [1010, 1238, 1323], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/goodow/j2objc/tree/master/jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/IdentityHashMapTest.java", "rawCode": "  /**\n   * @tests java.util.IdentityHashMap#keySet()\n   * @tests java.util.IdentityHashMap#remove(java.lang.Object)\n   */\n  public void test_keyset_remove() {\n    IdentityHashMap map = new IdentityHashMap();\n\n    Integer key = new Integer(21);\n\n    map.put(new Integer(1), null);\n    map.put(new Integer(11), null);\n    map.put(key, null);\n    map.put(new Integer(31), null);\n    map.put(new Integer(41), null);\n    map.put(new Integer(51), null);\n    map.put(new Integer(61), null);\n    map.put(new Integer(71), null);\n    map.put(new Integer(81), null);\n    map.put(new Integer(91), null);\n\n    Set set = map.keySet();\n\n    Set newset = new HashSet();\n    Iterator it = set.iterator();\n    while (it.hasNext()) {\n      Object element = it.next();\n      if (element == key) {\n        it.remove();\n      } else newset.add(element);\n    }\n    int size = newset.size();\n    assertTrue(\"keyset and newset don't have same size\", newset.size() == size);\n    assertTrue(\"element is in newset \", !newset.contains(key));\n    assertTrue(\"element not removed from keyset\", !set.contains(key));\n    assertTrue(\"element not removed from map\", !map.containsKey(key));\n\n    assertTrue(\"newset and keyset do not have same elements 1\", newset.equals(set));\n    assertTrue(\"newset and keyset do not have same elements 2\", set.equals(newset));\n  }\n"}, {"dataset": "setAdd", "exampleID": 7246, "initialization": ["Object element = new Object()"], "initializationStart": [132], "initializationEnd": [144], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.toArray()"], "configurationStart": [51], "configurationEnd": [77], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 150, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.toArray()"], "useStart": [189], "useEnd": [215], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stuartwdouglas/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testToArray() {\n    Object[] array = objectUnderTest_.toArray();\n\n    assertEquals(0, array.length);\n\n    Object o1 = new Object();\n    objectUnderTest_.add(o1);\n\n    array = objectUnderTest_.toArray();\n\n    assertEquals(1, array.length);\n    assertEquals(o1, array[0]);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7247, "initialization": ["Set set = new ViewerElementSet(IElementComparer)", "Object element = Iterator.next()"], "initializationStart": [82, 261], "initializationEnd": [112, 276], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 544, "focalAPIEnd": 565, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.isEmpty()", "createSetDiff(*,set)"], "useStart": [596, 647], "useEnd": [614, 699], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/rap/tree/master/bundles/org.eclipse.rap.jface.databinding/src/org/eclipse/jface/internal/databinding/viewers/ObservableViewerElementSet.java", "rawCode": "  public boolean retainAll(Collection c) {\n    getterCalled();\n    Set removals = new ViewerElementSet(comparer);\n    Object[] toRetain = c.toArray();\n    outer:\n    for (Iterator iterator = wrappedSet.iterator(); iterator.hasNext(); ) {\n      Object element = iterator.next();\n      // Cannot rely on c.contains(element) because we must compare\n      // elements using IElementComparer.\n      for (int i = 0; i < toRetain.length; i++) {\n        if (comparer.equals(element, toRetain[i])) continue outer;\n      }\n      iterator.remove();\n      removals.add(element);\n    }\n    boolean changed = !removals.isEmpty();\n    if (changed) fireSetChange(Diffs.createSetDiff(Collections.EMPTY_SET, removals));\n    return changed;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7248, "initialization": ["Set set = new HashSet()"], "initializationStart": [108], "initializationEnd": [121], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isAClass(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 89, "guardBlockStart": 50, "guardBlockEnd": 169, "focalAPI": " = set.add(element)", "focalAPIStart": 129, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoClassToNavigableClass.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isAClass(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7249, "initialization": ["Set set = Map.get(Object)", "Set set = new HashSet()"], "initializationStart": [94, 156], "initializationEnd": [109, 169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 221, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacob-carlborg/descent/tree/master/descent.ui/src/descent/internal/ui/search/LevelTreeContentProvider.java", "rawCode": "  private boolean insertInto(Object parent, Object child, Map map) {\n    Set children = (Set) map.get(parent);\n    if (children == null) {\n      children = new HashSet();\n      map.put(parent, children);\n    }\n    return children.add(child);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7250, "initialization": ["Object element = new Object()"], "initializationStart": [44], "initializationEnd": [56], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.isEmpty()"], "configurationStart": [74], "configurationEnd": [100], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 108, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.isEmpty()", "set.clear()", "set.isEmpty()"], "useStart": [151, 185, 227], "useEnd": [177, 209, 253], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/2pirad/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testClear() {\n    Object o1 = new Object();\n\n    assertTrue(objectUnderTest_.isEmpty());\n\n    objectUnderTest_.add(o1);\n\n    assertFalse(objectUnderTest_.isEmpty());\n\n    objectUnderTest_.clear();\n\n    assertTrue(objectUnderTest_.isEmpty());\n  }\n"}, {"dataset": "setAdd", "exampleID": 7251, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.remove(Object)"], "configurationStart": [172], "configurationEnd": [198], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 206, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzonekl/netxstudio/tree/master/screens/com.netxforge.netxstudio.screens/src/com/netxforge/netxstudio/screens/dialog/HierarchyFilteredItemsSelectionDialog.java", "rawCode": "    /**\n     * Adds object to history.\n     *\n     * @param object the item to be added to the history\n     */\n    public synchronized void accessed(Object object) {\n      historyList.remove(object);\n      historyList.add(object);\n    }\n"}, {"dataset": "setAdd", "exampleID": 7252, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [2303, 2371], "initializationEnd": [2316, 2380], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "pols.contains(element,)", "guardType": "IF {", "guardExpressionStart": 2393, "guardExpressionEnd": 2414, "guardBlockStart": 2393, "guardBlockEnd": 2451, "focalAPI": " = set.add(element)", "focalAPIStart": 2429, "focalAPIEnd": 2438, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Set.addAll(set)"], "useStart": [2506], "useEnd": [2535], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sake/bouncycastle-java/tree/master/jdk1.3/org/bouncycastle/jce/provider/RFC3280CertPathUtilities.java", "rawCode": "  protected static PKIXPolicyNode processCertD(\n      CertPath certPath,\n      int index,\n      Set acceptablePolicies,\n      PKIXPolicyNode validPolicyTree,\n      List[] policyNodes,\n      int inhibitAnyPolicy)\n      throws CertPathValidatorException {\n    List certs = certPath.getCertificates();\n    X509Certificate cert = (X509Certificate) certs.get(index);\n    int n = certs.size();\n    // i as defined in the algorithm description\n    int i = n - index;\n    //\n    // (d) policy Information checking against initial policy and\n    // policy mapping\n    //\n    ASN1Sequence certPolicies = null;\n    try {\n      certPolicies =\n          DERSequence.getInstance(\n              CertPathValidatorUtilities.getExtensionValue(\n                  cert, RFC3280CertPathUtilities.CERTIFICATE_POLICIES));\n    } catch (AnnotatedException e) {\n      throw new ExtCertPathValidatorException(\n          \"Could not read certificate policies extension from certificate.\", e, certPath, index);\n    }\n    if (certPolicies != null && validPolicyTree != null) {\n      //\n      // (d) (1)\n      //\n      Enumeration e = certPolicies.getObjects();\n      Set pols = new HashSet();\n\n      while (e.hasMoreElements()) {\n        PolicyInformation pInfo = PolicyInformation.getInstance(e.nextElement());\n        DERObjectIdentifier pOid = pInfo.getPolicyIdentifier();\n\n        pols.add(pOid.getId());\n\n        if (!RFC3280CertPathUtilities.ANY_POLICY.equals(pOid.getId())) {\n          Set pq = null;\n          try {\n            pq = CertPathValidatorUtilities.getQualifierSet(pInfo.getPolicyQualifiers());\n          } catch (CertPathValidatorException ex) {\n            throw new ExtCertPathValidatorException(\n                \"Policy qualifier info set could not be build.\", ex, certPath, index);\n          }\n\n          boolean match = CertPathValidatorUtilities.processCertD1i(i, policyNodes, pOid, pq);\n\n          if (!match) {\n            CertPathValidatorUtilities.processCertD1ii(i, policyNodes, pOid, pq);\n          }\n        }\n      }\n\n      if (acceptablePolicies.isEmpty()\n          || acceptablePolicies.contains(RFC3280CertPathUtilities.ANY_POLICY)) {\n        acceptablePolicies.clear();\n        acceptablePolicies.addAll(pols);\n      } else {\n        Iterator it = acceptablePolicies.iterator();\n        Set t1 = new HashSet();\n\n        while (it.hasNext()) {\n          Object o = it.next();\n\n          if (pols.contains(o)) {\n            t1.add(o);\n          }\n        }\n        acceptablePolicies.clear();\n        acceptablePolicies.addAll(t1);\n      }\n\n      //\n      // (d) (2)\n      //\n      if ((inhibitAnyPolicy > 0) || ((i < n) && CertPathValidatorUtilities.isSelfIssued(cert))) {\n        e = certPolicies.getObjects();\n\n        while (e.hasMoreElements()) {\n          PolicyInformation pInfo = PolicyInformation.getInstance(e.nextElement());\n\n          if (RFC3280CertPathUtilities.ANY_POLICY.equals(pInfo.getPolicyIdentifier().getId())) {\n            Set _apq = CertPathValidatorUtilities.getQualifierSet(pInfo.getPolicyQualifiers());\n            List _nodes = policyNodes[i - 1];\n\n            for (int k = 0; k < _nodes.size(); k++) {\n              PKIXPolicyNode _node = (PKIXPolicyNode) _nodes.get(k);\n\n              Iterator _policySetIter = _node.getExpectedPolicies().iterator();\n              while (_policySetIter.hasNext()) {\n                Object _tmp = _policySetIter.next();\n\n                String _policy;\n                if (_tmp instanceof String) {\n                  _policy = (String) _tmp;\n                } else if (_tmp instanceof DERObjectIdentifier) {\n                  _policy = ((DERObjectIdentifier) _tmp).getId();\n                } else {\n                  continue;\n                }\n\n                boolean _found = false;\n                Iterator _childrenIter = _node.getChildren();\n\n                while (_childrenIter.hasNext()) {\n                  PKIXPolicyNode _child = (PKIXPolicyNode) _childrenIter.next();\n\n                  if (_policy.equals(_child.getValidPolicy())) {\n                    _found = true;\n                  }\n                }\n\n                if (!_found) {\n                  Set _newChildExpectedPolicies = new HashSet();\n                  _newChildExpectedPolicies.add(_policy);\n\n                  PKIXPolicyNode _newChild =\n                      new PKIXPolicyNode(\n                          new ArrayList(),\n                          i,\n                          _newChildExpectedPolicies,\n                          _node,\n                          _apq,\n                          _policy,\n                          false);\n                  _node.addChild(_newChild);\n                  policyNodes[i].add(_newChild);\n                }\n              }\n            }\n            break;\n          }\n        }\n      }\n\n      PKIXPolicyNode _validPolicyTree = validPolicyTree;\n      //\n      // (d) (3)\n      //\n      for (int j = (i - 1); j >= 0; j--) {\n        List nodes = policyNodes[j];\n\n        for (int k = 0; k < nodes.size(); k++) {\n          PKIXPolicyNode node = (PKIXPolicyNode) nodes.get(k);\n          if (!node.hasChildren()) {\n            _validPolicyTree =\n                CertPathValidatorUtilities.removePolicyNode(_validPolicyTree, policyNodes, node);\n            if (_validPolicyTree == null) {\n              break;\n            }\n          }\n        }\n      }\n\n      //\n      // d (4)\n      //\n      Set criticalExtensionOids = cert.getCriticalExtensionOIDs();\n\n      if (criticalExtensionOids != null) {\n        boolean critical =\n            criticalExtensionOids.contains(RFC3280CertPathUtilities.CERTIFICATE_POLICIES);\n\n        List nodes = policyNodes[i];\n        for (int j = 0; j < nodes.size(); j++) {\n          PKIXPolicyNode node = (PKIXPolicyNode) nodes.get(j);\n          node.setCritical(critical);\n        }\n      }\n      return _validPolicyTree;\n    }\n    return null;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7253, "initialization": ["Set set = new HashSet()"], "initializationStart": [115], "initializationEnd": [128], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isAModelElement(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 96, "guardBlockStart": 50, "guardBlockEnd": 176, "focalAPI": " = set.add(element)", "focalAPIStart": 136, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoElementToMachine.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isAModelElement(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7254, "initialization": ["Set set = new HashSet()", "Object element = Map.get(String)"], "initializationStart": [62, 283], "initializationEnd": [75, 296], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "element!=null", "guardType": "IF {", "guardExpressionStart": 306, "guardExpressionEnd": 320, "guardBlockStart": 306, "guardBlockEnd": 361, "focalAPI": " = set.add(element)", "focalAPIStart": 333, "focalAPIEnd": 350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/federation/openfm/source/com/sun/identity/console/agentconfig/WebServiceEditViewBean.java", "rawCode": "  protected Set getChildNames(Set set) {\n    Set childNames = new HashSet();\n    if ((set != null) && !set.isEmpty()) {\n      Map map = getAttrToChildNamesMapping();\n      for (Iterator i = set.iterator(); i.hasNext(); ) {\n        String name = (String) i.next();\n        Object o = map.get(name);\n        if (o != null) {\n          childNames.add(o);\n        }\n      }\n    }\n    return childNames;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7255, "initialization": ["Object element = get(*)"], "initializationStart": [311], "initializationEnd": [339], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "element!=null", "guardType": "IF {", "guardExpressionStart": 350, "guardExpressionEnd": 365, "guardBlockStart": 350, "guardBlockEnd": 403, "focalAPI": " = set.add(element)", "focalAPIStart": 379, "focalAPIEnd": 392, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Download)", "set.toArray(Download[])"], "useStart": [675, 832], "useEnd": [694, 850], "hasFinally": 1, "cleanUpCall": ["AEMonitor.exit()"], "finallyExpressionStart": 732, "finallyExpressionEnd": 740, "finallyBlockStart": 732, "finallyBlockEnd": 776, "cleanUpCallStart": [749], "cleanUpCallEnd": [769], "url": "https://github.com/alevy/comet/tree/master/vuze/org/gudy/azureus2/pluginsimpl/local/download/DownloadManagerImpl.java", "rawCode": "  public Download[] getDownloads() {\n    Set res_l = new LinkedHashSet();\n\n    // we have to use the global manager's ordering as it\n    // hold this\n\n    List dms = global_manager.getDownloadManagers();\n\n    try {\n      listeners_mon.enter();\n\n      for (int i = 0; i < dms.size(); i++) {\n\n        Object dl = download_map.get(dms.get(i));\n\n        if (dl != null) {\n\n          res_l.add(dl);\n        }\n      }\n\n      if (res_l.size() < downloads.size()) {\n\n        // now add in any external downloads\n\n        for (int i = 0; i < downloads.size(); i++) {\n\n          Download download = (Download) downloads.get(i);\n\n          if (!res_l.contains(download)) {\n\n            res_l.add(download);\n          }\n        }\n      }\n    } finally {\n\n      listeners_mon.exit();\n    }\n\n    Download[] res = new Download[res_l.size()];\n\n    res_l.toArray(res);\n\n    return (res);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7256, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [767, 1047], "initializationEnd": [780, 1065], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1255, "focalAPIEnd": 1277, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["primeHierarchyForSelection(Object,set)"], "useStart": [1510], "useEnd": [1559], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzonekl/netxstudio/tree/master/libs.eclipse/org.eclipse.ui.ide/src/org/eclipse/ui/internal/ide/dialogs/ResourceTreeAndListGroup.java", "rawCode": "  /**\n   * Update the selections of the tree elements in items to reflect the new selections provided.\n   *\n   * @param items Map with keys of Object (the tree element) and values of List (the selected list\n   *     elements). NOTE: This method does not special case keys with no values (i.e., a tree\n   *     element with an empty list). If a tree element does not have any selected items, do not\n   *     include the element in the Map.\n   */\n  public void updateSelections(Map items) {\n    // We are replacing all selected items with the given selected items,\n    // so reinitialize everything.\n    this.listViewer.setAllChecked(false);\n    this.treeViewer.setCheckedElements(new Object[0]);\n    this.whiteCheckedTreeItems = new HashSet();\n    Set selectedNodes = new HashSet();\n    checkedStateStore = new HashMap();\n\n    // Update the store before the hierarchy to prevent updating parents before all of the children\n    // are done\n    Iterator keyIterator = items.keySet().iterator();\n    while (keyIterator.hasNext()) {\n      Object key = keyIterator.next();\n      List selections = (List) items.get(key);\n      // Replace the items in the checked state store with those from the supplied items\n      checkedStateStore.put(key, selections);\n      selectedNodes.add(key);\n      // proceed up the tree element hierarchy\n      Object parent = treeContentProvider.getParent(key);\n      if (parent != null) {\n        // proceed up the tree element hierarchy and make sure everything is in the table\n        primeHierarchyForSelection(parent, selectedNodes);\n      }\n    }\n\n    // Update the checked tree items. Since each tree item has a selected\n    // item, all the tree items will be gray checked.\n    treeViewer.setCheckedElements(checkedStateStore.keySet().toArray());\n    treeViewer.setGrayedElements(checkedStateStore.keySet().toArray());\n\n    // Update the listView of the currently selected tree item.\n    if (currentTreeSelection != null) {\n      Object displayItems = items.get(currentTreeSelection);\n      if (displayItems != null) {\n        listViewer.setCheckedElements(((List) displayItems).toArray());\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7257, "initialization": ["Set set = new HashSet()"], "initializationStart": [108], "initializationEnd": [121], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isAState(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 89, "guardBlockStart": 50, "guardBlockEnd": 169, "focalAPI": " = set.add(element)", "focalAPIStart": 129, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoStateToInternalTrans.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isAState(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7258, "initialization": ["Object element = Iterator.next()"], "initializationStart": [636], "initializationEnd": [644], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.addAll(Collection)"], "configurationStart": [506], "configurationEnd": [527], "guardCondition": "!(set.isEmpty())", "guardType": "IF {", "guardExpressionStart": 479, "guardExpressionEnd": 505, "guardBlockStart": 479, "guardBlockEnd": 699, "focalAPI": " = set.add(element)", "focalAPIStart": 658, "focalAPIEnd": 676, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/gmf-runtime/tree/master/org.eclipse.gmf.runtime.diagram.core/src/org/eclipse/gmf/runtime/diagram/core/listener/DiagramEventBroker.java", "rawCode": "  /**\n   * Helper method to add all the listners of the given <code>notifier</code> to the list of\n   * listeners\n   *\n   * @param listenerSet\n   * @param notifier\n   */\n  private void addListenersOfNotifier(\n      Set listenerSet,\n      EObject notifier,\n      Notification event,\n      NotifierToKeyToListenersSetMap listeners) {\n    if (notifier != null) {\n      Collection c = getNotificationListeners(notifier, event.getFeature(), listeners);\n      if (c != null) {\n        if (listenerSet.isEmpty()) listenerSet.addAll(c);\n        else {\n          Iterator i = c.iterator();\n          while (i.hasNext()) {\n            Object o = i.next();\n            listenerSet.add(o);\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7259, "initialization": ["Object element = Iterator.next()"], "initializationStart": [636], "initializationEnd": [644], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.addAll(Collection)"], "configurationStart": [506], "configurationEnd": [527], "guardCondition": "!(set.isEmpty())", "guardType": "IF {", "guardExpressionStart": 479, "guardExpressionEnd": 505, "guardBlockStart": 479, "guardBlockEnd": 699, "focalAPI": " = set.add(element)", "focalAPIStart": 658, "focalAPIEnd": 676, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/plugins/org.eclipse.gmf.runtime.diagram.core/src/org/eclipse/gmf/runtime/diagram/core/listener/DiagramEventBroker.java", "rawCode": "  /**\n   * Helper method to add all the listners of the given <code>notifier</code> to the list of\n   * listeners\n   *\n   * @param listenerSet\n   * @param notifier\n   */\n  private void addListenersOfNotifier(\n      Set listenerSet,\n      EObject notifier,\n      Notification event,\n      NotifierToKeyToListenersSetMap listeners) {\n    if (notifier != null) {\n      Collection c = getNotificationListeners(notifier, event.getFeature(), listeners);\n      if (c != null) {\n        if (listenerSet.isEmpty()) listenerSet.addAll(c);\n        else {\n          Iterator i = c.iterator();\n          while (i.hasNext()) {\n            Object o = i.next();\n            listenerSet.add(o);\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7260, "initialization": ["Set set = new HashSet()", "Object element = MapIterator.next()"], "initializationStart": [324, 401], "initializationEnd": [337, 410], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 585, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(String,)"], "useStart": [552], "useEnd": [598], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/google-web-toolkit/gwt/tree/master/dev/core/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java", "rawCode": "  /** Test that the full list iterator contract is correct. */\n  public void testFullMapIterator() {\n    if (supportsFullIterator() == false) {\n      return;\n    }\n\n    MapIterator it = makeFullMapIterator();\n    Map map = getMap();\n    assertEquals(true, it.hasNext());\n\n    assertEquals(true, it.hasNext());\n    Set set = new HashSet();\n    while (it.hasNext()) {\n      // getKey\n      Object key = it.next();\n      assertSame(\"it.next() should equals getKey()\", key, it.getKey());\n      assertTrue(\"Key must be in map\", map.containsKey(key));\n      assertTrue(\"Key must be unique\", set.add(key));\n\n      // getValue\n      Object value = it.getValue();\n      if (isGetStructuralModify() == false) {\n        assertSame(\"Value must be mapped to key\", map.get(key), value);\n      }\n      assertTrue(\"Value must be in map\", map.containsValue(value));\n\n      verify();\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7261, "initialization": ["Set set = new HashSet()", "Object element = NamingEnumeration.next()"], "initializationStart": [690, 1719], "initializationEnd": [703, 1737], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new CertStoreException(String)"], "tryExpressionStart": 709, "tryExpressionEnd": 713, "tryBlockStart": 709, "tryBlockEnd": 2039, "catchExpressionStart": 1799, "catchExpressionEnd": 1819, "catchBlockStart": 1799, "catchBlockEnd": 1913, "exceptionHandlingCallStart": [1833], "exceptionHandlingCallEnd": [1905], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1751, "focalAPIEnd": 1761, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["DirContext.close()"], "finallyExpressionStart": 1914, "finallyExpressionEnd": 1922, "finallyBlockStart": 1914, "finallyBlockEnd": 2039, "cleanUpCallStart": [1973], "cleanUpCallEnd": [1984], "url": "https://github.com/rtyley/test-bc-java-cvsimport/tree/master/crypto/src/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java", "rawCode": "  /**\n   * Returns a Set of byte arrays with the certificate or CRL encodings.\n   *\n   * @param attributeName The attribute name to look for in the LDAP.\n   * @param attributeValue The value the attribute name must have.\n   * @param attrs The attributes in the LDAP which hold the certificate, certificate pair or CRL in\n   *     a found entry.\n   * @return Set of byte arrays with the certificate encodings.\n   */\n  private Set search(String attributeName, String attributeValue, String[] attrs)\n      throws CertStoreException {\n    String filter = attributeName + \"=\" + attributeValue;\n    if (attributeName == null) {\n      filter = null;\n    }\n    DirContext ctx = null;\n    Set set = new HashSet();\n    try {\n\n      ctx = connectLDAP();\n\n      SearchControls constraints = new SearchControls();\n      constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);\n      constraints.setCountLimit(0);\n      for (int i = 0; i < attrs.length; i++) {\n        String temp[] = new String[1];\n        temp[0] = attrs[i];\n        constraints.setReturningAttributes(temp);\n\n        String filter2 = \"(&(\" + filter + \")(\" + temp[0] + \"=*))\";\n        if (filter == null) {\n          filter2 = \"(\" + temp[0] + \"=*)\";\n        }\n        NamingEnumeration results = ctx.search(params.getBaseDN(), filter2, constraints);\n        while (results.hasMoreElements()) {\n          SearchResult sr = (SearchResult) results.next();\n          // should only be one attribute in the attribute set with\n          // one\n          // attribute value as byte array\n          NamingEnumeration enumeration =\n              ((Attribute) (sr.getAttributes().getAll().next())).getAll();\n          while (enumeration.hasMore()) {\n            Object o = enumeration.next();\n            set.add(o);\n          }\n        }\n      }\n    } catch (Exception e) {\n      throw new CertStoreException(\"Error getting results from LDAP directory \" + e);\n\n    } finally {\n      try {\n        if (null != ctx) {\n          ctx.close();\n        }\n      } catch (Exception e) {\n      }\n    }\n    return set;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7262, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [2304, 2372], "initializationEnd": [2317, 2381], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "pols.contains(element,)", "guardType": "IF {", "guardExpressionStart": 2394, "guardExpressionEnd": 2415, "guardBlockStart": 2394, "guardBlockEnd": 2452, "focalAPI": " = set.add(element)", "focalAPIStart": 2430, "focalAPIEnd": 2439, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Set.addAll(set)"], "useStart": [2507], "useEnd": [2536], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ripple/ripple-lib-java/tree/master/ripple-bouncycastle/src/main/java/org/ripple/bouncycastle/jce/provider/RFC3280CertPathUtilities.java", "rawCode": "  protected static PKIXPolicyNode processCertD(\n      CertPath certPath,\n      int index,\n      Set acceptablePolicies,\n      PKIXPolicyNode validPolicyTree,\n      List[] policyNodes,\n      int inhibitAnyPolicy)\n      throws CertPathValidatorException {\n    List certs = certPath.getCertificates();\n    X509Certificate cert = (X509Certificate) certs.get(index);\n    int n = certs.size();\n    // i as defined in the algorithm description\n    int i = n - index;\n    //\n    // (d) policy Information checking against initial policy and\n    // policy mapping\n    //\n    ASN1Sequence certPolicies = null;\n    try {\n      certPolicies =\n          DERSequence.getInstance(\n              CertPathValidatorUtilities.getExtensionValue(\n                  cert, RFC3280CertPathUtilities.CERTIFICATE_POLICIES));\n    } catch (AnnotatedException e) {\n      throw new ExtCertPathValidatorException(\n          \"Could not read certificate policies extension from certificate.\", e, certPath, index);\n    }\n    if (certPolicies != null && validPolicyTree != null) {\n      //\n      // (d) (1)\n      //\n      Enumeration e = certPolicies.getObjects();\n      Set pols = new HashSet();\n\n      while (e.hasMoreElements()) {\n        PolicyInformation pInfo = PolicyInformation.getInstance(e.nextElement());\n        ASN1ObjectIdentifier pOid = pInfo.getPolicyIdentifier();\n\n        pols.add(pOid.getId());\n\n        if (!RFC3280CertPathUtilities.ANY_POLICY.equals(pOid.getId())) {\n          Set pq = null;\n          try {\n            pq = CertPathValidatorUtilities.getQualifierSet(pInfo.getPolicyQualifiers());\n          } catch (CertPathValidatorException ex) {\n            throw new ExtCertPathValidatorException(\n                \"Policy qualifier info set could not be build.\", ex, certPath, index);\n          }\n\n          boolean match = CertPathValidatorUtilities.processCertD1i(i, policyNodes, pOid, pq);\n\n          if (!match) {\n            CertPathValidatorUtilities.processCertD1ii(i, policyNodes, pOid, pq);\n          }\n        }\n      }\n\n      if (acceptablePolicies.isEmpty()\n          || acceptablePolicies.contains(RFC3280CertPathUtilities.ANY_POLICY)) {\n        acceptablePolicies.clear();\n        acceptablePolicies.addAll(pols);\n      } else {\n        Iterator it = acceptablePolicies.iterator();\n        Set t1 = new HashSet();\n\n        while (it.hasNext()) {\n          Object o = it.next();\n\n          if (pols.contains(o)) {\n            t1.add(o);\n          }\n        }\n        acceptablePolicies.clear();\n        acceptablePolicies.addAll(t1);\n      }\n\n      //\n      // (d) (2)\n      //\n      if ((inhibitAnyPolicy > 0) || ((i < n) && CertPathValidatorUtilities.isSelfIssued(cert))) {\n        e = certPolicies.getObjects();\n\n        while (e.hasMoreElements()) {\n          PolicyInformation pInfo = PolicyInformation.getInstance(e.nextElement());\n\n          if (RFC3280CertPathUtilities.ANY_POLICY.equals(pInfo.getPolicyIdentifier().getId())) {\n            Set _apq = CertPathValidatorUtilities.getQualifierSet(pInfo.getPolicyQualifiers());\n            List _nodes = policyNodes[i - 1];\n\n            for (int k = 0; k < _nodes.size(); k++) {\n              PKIXPolicyNode _node = (PKIXPolicyNode) _nodes.get(k);\n\n              Iterator _policySetIter = _node.getExpectedPolicies().iterator();\n              while (_policySetIter.hasNext()) {\n                Object _tmp = _policySetIter.next();\n\n                String _policy;\n                if (_tmp instanceof String) {\n                  _policy = (String) _tmp;\n                } else if (_tmp instanceof ASN1ObjectIdentifier) {\n                  _policy = ((ASN1ObjectIdentifier) _tmp).getId();\n                } else {\n                  continue;\n                }\n\n                boolean _found = false;\n                Iterator _childrenIter = _node.getChildren();\n\n                while (_childrenIter.hasNext()) {\n                  PKIXPolicyNode _child = (PKIXPolicyNode) _childrenIter.next();\n\n                  if (_policy.equals(_child.getValidPolicy())) {\n                    _found = true;\n                  }\n                }\n\n                if (!_found) {\n                  Set _newChildExpectedPolicies = new HashSet();\n                  _newChildExpectedPolicies.add(_policy);\n\n                  PKIXPolicyNode _newChild =\n                      new PKIXPolicyNode(\n                          new ArrayList(),\n                          i,\n                          _newChildExpectedPolicies,\n                          _node,\n                          _apq,\n                          _policy,\n                          false);\n                  _node.addChild(_newChild);\n                  policyNodes[i].add(_newChild);\n                }\n              }\n            }\n            break;\n          }\n        }\n      }\n\n      PKIXPolicyNode _validPolicyTree = validPolicyTree;\n      //\n      // (d) (3)\n      //\n      for (int j = (i - 1); j >= 0; j--) {\n        List nodes = policyNodes[j];\n\n        for (int k = 0; k < nodes.size(); k++) {\n          PKIXPolicyNode node = (PKIXPolicyNode) nodes.get(k);\n          if (!node.hasChildren()) {\n            _validPolicyTree =\n                CertPathValidatorUtilities.removePolicyNode(_validPolicyTree, policyNodes, node);\n            if (_validPolicyTree == null) {\n              break;\n            }\n          }\n        }\n      }\n\n      //\n      // d (4)\n      //\n      Set criticalExtensionOids = cert.getCriticalExtensionOIDs();\n\n      if (criticalExtensionOids != null) {\n        boolean critical =\n            criticalExtensionOids.contains(RFC3280CertPathUtilities.CERTIFICATE_POLICIES);\n\n        List nodes = policyNodes[i];\n        for (int j = 0; j < nodes.size(); j++) {\n          PKIXPolicyNode node = (PKIXPolicyNode) nodes.get(j);\n          node.setCritical(critical);\n        }\n      }\n      return _validPolicyTree;\n    }\n    return null;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7263, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "set.size()<maxCard_ && !(Tables.isBlank(element,)) && set!=null", "guardType": "IF {", "guardExpressionStart": 161, "guardExpressionEnd": 180, "guardBlockStart": 161, "guardBlockEnd": 321, "focalAPI": " = set.add(element)", "focalAPIStart": 237, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/ttools/src/main/uk/ac/starlink/ttools/filter/StatsFilter.java", "rawCode": "    /**\n     * Submits a value for counting.\n     *\n     * @param obj value\n     */\n    void acceptDatum(Object obj) {\n      if (!Tables.isBlank(obj)) {\n        if (items_ != null) {\n          if (items_.size() < maxCard_) {\n            items_.add(obj);\n          } else {\n            items_ = null;\n          }\n        }\n      }\n    }\n"}, {"dataset": "setAdd", "exampleID": 7264, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [166, 257], "initializationEnd": [179, 266], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 314, "focalAPIEnd": 325, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(String)"], "useStart": [350], "useEnd": [424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bcgit/bc-java/tree/master/prov/src/main/java/org/bouncycastle/x509/X509AttributeCertStoreSelector.java", "rawCode": "  private Set extractGeneralNames(Collection names) throws IOException {\n    if (names == null || names.isEmpty()) {\n      return new HashSet();\n    }\n    Set temp = new HashSet();\n    for (Iterator it = names.iterator(); it.hasNext(); ) {\n      Object o = it.next();\n      if (o instanceof GeneralName) {\n        temp.add(o);\n      } else {\n        temp.add(GeneralName.getInstance(ASN1Primitive.fromByteArray((byte[]) o)));\n      }\n    }\n    return temp;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7265, "initialization": ["Set set = new HashSet()"], "initializationStart": [113], "initializationEnd": [126], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isAClassifier(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 94, "guardBlockStart": 50, "guardBlockEnd": 174, "focalAPI": " = set.add(element)", "focalAPIStart": 134, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoClassifierToStructuralFeature.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isAClassifier(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7266, "initialization": ["Object element = new Object()"], "initializationStart": [90], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.isEmpty()"], "configurationStart": [45], "configurationEnd": [71], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 108, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.isEmpty()"], "useStart": [150], "useEnd": [176], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/2pirad/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testIsEmpty() {\n    assertTrue(objectUnderTest_.isEmpty());\n    Object o1 = new Object();\n    objectUnderTest_.add(o1);\n    assertFalse(objectUnderTest_.isEmpty());\n  }\n"}, {"dataset": "setAdd", "exampleID": 7267, "initialization": ["Set set = Class<? extends Set>.cast(Object)", "Object element = forName(*)"], "initializationStart": [620, 906], "initializationEnd": [640, 944], "hasTryCatch": 1, "exceptionType": "IllegalAccessException", "exceptionHandlingCall": ["error(*,String)"], "tryExpressionStart": 223, "tryExpressionEnd": 227, "tryBlockStart": 223, "tryBlockEnd": 1615, "catchExpressionStart": 1151, "catchExpressionEnd": 1185, "catchBlockStart": 1151, "catchBlockEnd": 1247, "exceptionHandlingCallStart": [1195], "exceptionHandlingCallEnd": [1238], "configuration": ["set.remove(Object)"], "configurationStart": [1008], "configurationEnd": [1030], "guardCondition": "!(set.contains(element,))", "guardType": "IF {", "guardExpressionStart": 964, "guardExpressionEnd": 993, "guardBlockStart": 964, "guardBlockEnd": 1095, "focalAPI": " = set.add(element)", "focalAPIStart": 1063, "focalAPIEnd": 1082, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set(*,set)"], "useStart": [1115], "useEnd": [1140], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rubendramos/unionManager/tree/master/app/controllers/CRUD.java", "rawCode": "    public void deleteValueForeign(String[] idAllValues) {\n\n      Object filloCache;\n      String type = \"java.util.Set\";\n      String property = this.getCampo();\n      Collection todos = Arrays.asList(idAllValues);\n\n      try {\n\n        Class<? extends Set> theClass = Class.forName(type).asSubclass(Set.class);\n        // Class<? extends Model> modelClass =\n        // Class.forName(this.getNomeTipoFillo()).asSubclass(Model.class);\n        Object value =\n            new PropertyDescriptor(property, this.getPai().getClass())\n                .getReadMethod()\n                .invoke(this.getPai());\n        Set obj = theClass.cast(value);\n\n        ObjectType typeFillo = new ObjectType(this.getNomeTipoFillo());\n        Field t = this.getPai().getClass().getDeclaredField(this.getCampo());\n\n        for (Object id : todos) {\n          Model a = typeFillo.findById(id.toString());\n          filloCache = Class.forName(this.getNomeTipoFillo()).cast(a);\n          if (obj.contains(filloCache)) {\n            obj.remove(filloCache);\n          } else {\n            obj.add(filloCache);\n          }\n        }\n\n        t.set(this.getPai(), obj);\n\n      } catch (IllegalAccessException ex) {\n        Logger.error(ex, \"Erro ao pintar a paxina\");\n      } catch (NoSuchFieldException ex) {\n        Logger.error(ex, \"Erro ao pintar a paxina\");\n      } catch (SecurityException ex) {\n        Logger.error(ex, \"Erro ao pintar a paxina\");\n      } catch (ClassNotFoundException ex) {\n        Logger.error(ex, \"Erro ao pintar a paxina\");\n      } catch (Exception ex) {\n        Logger.error(ex, \"Erro ao pintar a paxina\");\n      }\n    }\n"}, {"dataset": "setAdd", "exampleID": 7268, "initialization": ["Set set = new HashSet()", "Object element = getModelEditor()"], "initializationStart": [84, 305], "initializationEnd": [97, 333], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 372, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.transformation.ui/src/org/teiid/designer/transformation/ui/util/TransformationNotificationListener.java", "rawCode": "  private Set getSqlTablesAddedTo(Collection addNotifications) {\n    Set tableSet = new HashSet();\n    Iterator iter = addNotifications.iterator();\n    while (iter.hasNext()) {\n      Notification notification = (Notification) iter.next();\n      // Get the object that changed - table\n      Object table = ModelerCore.getModelEditor().getChangedObject(notification);\n      tableSet.add(table);\n    }\n    return tableSet;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7269, "initialization": ["Set set = Map.get(Object)", "Set set = new HashSet()"], "initializationStart": [94, 156], "initializationEnd": [109, 169], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 221, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akosicki/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/search/LevelTreeContentProvider.java", "rawCode": "  private boolean insertInto(Object parent, Object child, Map map) {\n    Set children = (Set) map.get(parent);\n    if (children == null) {\n      children = new HashSet();\n      map.put(parent, children);\n    }\n    return children.add(child);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7270, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(set.contains(element,))", "guardType": "IF {", "guardExpressionStart": 886, "guardExpressionEnd": 925, "guardBlockStart": 886, "guardBlockEnd": 1010, "focalAPI": " = set.add(element)", "focalAPIStart": 1015, "focalAPIEnd": 1044, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cascadeBeforeDelete(EventSource,EntityPersister,Object,*,set)", "cascadeAfterDelete(EventSource,EntityPersister,Object,set)"], "useStart": [1050, 1128], "useEnd": [1122, 1193], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drepshas/hib-core/tree/master/hibernate-core/src/main/java/org/hibernate/event/internal/DefaultDeleteEventListener.java", "rawCode": "  /**\n   * We encountered a delete request on a transient instance.\n   *\n   * <p>This is a deviation from historical Hibernate (pre-3.2) behavior to align with the JPA spec,\n   * which states that transient entities can be passed to remove operation in which case cascades\n   * still need to be performed.\n   *\n   * @param session The session which is the source of the event\n   * @param entity The entity being delete processed\n   * @param cascadeDeleteEnabled Is cascading of deletes enabled\n   * @param persister The entity persister\n   * @param transientEntities A cache of already visited transient entities (to avoid infinite\n   *     recursion).\n   */\n  protected void deleteTransientEntity(\n      EventSource session,\n      Object entity,\n      boolean cascadeDeleteEnabled,\n      EntityPersister persister,\n      Set transientEntities) {\n    LOG.handlingTransientEntity();\n    if (transientEntities.contains(entity)) {\n      LOG.trace(\"Already handled transient entity; skipping\");\n      return;\n    }\n    transientEntities.add(entity);\n    cascadeBeforeDelete(session, persister, entity, null, transientEntities);\n    cascadeAfterDelete(session, persister, entity, transientEntities);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7271, "initialization": ["Set set = withComparer(IElementComparer)"], "initializationStart": [203], "initializationEnd": [242], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(equal(element,newParent,)) && set==null && !(element==null)", "guardType": "IF {", "guardExpressionStart": 52, "guardExpressionEnd": 71, "guardBlockStart": 52, "guardBlockEnd": 328, "focalAPI": " = set.add(element)", "focalAPIStart": 254, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [295], "useEnd": [319], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomsontom/emf-databinding-example/tree/master/org.eclipse.jface.databinding/src/org/eclipse/jface/internal/databinding/viewers/ObservableCollectionTreeContentProvider.java", "rawCode": "    public void addParent(Object newParent) {\n      if (parent == null) {\n        parent = newParent;\n      } else if (!equal(parent, newParent)) {\n        if (parentSet == null) {\n          parentSet = ViewerElementSet.withComparer(comparer);\n          parentSet.add(parent);\n        }\n        parentSet.add(newParent);\n      }\n    }\n"}, {"dataset": "setAdd", "exampleID": 7272, "initialization": ["Set set = new HashSet()", "Object element = Map.get(Edge)"], "initializationStart": [328, 1022], "initializationEnd": [341, 1040], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "element!=null", "guardType": "IF {", "guardExpressionStart": 1052, "guardExpressionEnd": 1068, "guardBlockStart": 1052, "guardBlockEnd": 1114, "focalAPI": " = set.add(element)", "focalAPIStart": 1083, "focalAPIEnd": 1101, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [1332], "useEnd": [1350], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/plugins/org.eclipse.gmf.runtime.diagram.ui/src/org/eclipse/gmf/runtime/diagram/ui/editparts/ShapeCompartmentEditPart.java", "rawCode": "    /**\n     * Return the set of {@link ConnectionNodeEditPart}s contained in the supplied shape\n     * compartment.\n     *\n     * @param scep a shape compartment.\n     * @return a {@link Set} of {@link ConnectionNodeEditPart}.\n     */\n    protected Set getConnectionNodes(ShapeCompartmentEditPart scep) {\n      Set endPoints = new HashSet();\n      Object modelObject = scep.getModel();\n      if (scep.getViewer() == null || modelObject == null || !(modelObject instanceof View)) {\n        return endPoints;\n      }\n\n      if (((View) modelObject).getDiagram() == null) return endPoints;\n\n      Diagram diagram = ((View) modelObject).getDiagram();\n      Map registry = scep.getViewer().getEditPartRegistry();\n      List edges = diagram.getEdges();\n      Iterator edgesIterator = edges.iterator();\n\n      while (edgesIterator.hasNext()) {\n        Edge edge = (Edge) edgesIterator.next();\n        EditPart endPoint = (EditPart) registry.get(edge.getSource());\n        if (isChildOf(scep, endPoint)) {\n          Object cep = registry.get(edge);\n          if (cep != null) {\n            endPoints.add(cep);\n          }\n          continue;\n        }\n        endPoint = (EditPart) registry.get(edge.getTarget());\n        if (isChildOf(scep, endPoint)) {\n          Object cep = registry.get(edge);\n          if (cep != null) {\n            endPoints.add(cep);\n          }\n        }\n      }\n      return endPoints;\n    }\n"}, {"dataset": "setAdd", "exampleID": 7273, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["element.configure(*)"], "configurationStart": [432], "configurationEnd": [480], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 713, "focalAPIEnd": 733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stuartwdouglas/jacorb/tree/master/src/org/jacorb/notification/util/AbstractObjectPool.java", "rawCode": "  /** lend an object from the pool. */\n  public Object lendObject() {\n    checkIsInitialized();\n\n    Object _result = null;\n\n    synchronized (pool_) {\n      if (!pool_.isEmpty()) {\n        _result = pool_.removeFirst();\n      }\n\n      if (_result == null) {\n        while (!isCreationAllowed()) {\n          poolIsEmpty();\n        }\n      }\n    }\n\n    if (_result == null) {\n      _result = createInstance();\n    }\n\n    try {\n      ((Configurable) _result).configure(this.config_);\n    } catch (ClassCastException cce) {\n      // no worries, just don't configure\n    } catch (ConfigurationException ce) {\n      throw new RuntimeException(\"Could not configure instance\");\n    }\n\n    doActivateObject(_result);\n    active_.add(_result);\n\n    return _result;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7274, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [107, 258], "initializationEnd": [120, 269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 324, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [526], "useEnd": [538], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mlundblad/bc-java/tree/master/prov/src/main/jdk1.1/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCertificates(CertSelector selector) throws CertStoreException {\n    Set col = new HashSet();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof Certificate) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof Certificate) && selector.match((Certificate) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7275, "initialization": ["Set set = Map.get(Object)", "Set set = new HashSet()"], "initializationStart": [264, 335], "initializationEnd": [288, 348], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 409, "focalAPIEnd": 428, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robstryker/webtools.common/tree/master/plugins/org.eclipse.wst.common.ui/src-search/org/eclipse/wst/common/ui/internal/search/SearchResultTreeContentProvider.java", "rawCode": "  /**\n   * returns true if the child already was a child of parent.\n   *\n   * @param parent\n   * @param child\n   * @return Returns <code>trye</code> if the child was added\n   */\n  private boolean insertChild(Object parent, Object child) {\n    Set children = (Set) fChildrenMap.get(parent);\n    if (children == null) {\n      children = new HashSet();\n      fChildrenMap.put(parent, children);\n    }\n    return children.add(child);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7276, "initialization": ["Set set = new HashSet()"], "initializationStart": [114], "initializationEnd": [127], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isAStateVertex(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 95, "guardBlockStart": 50, "guardBlockEnd": 175, "focalAPI": " = set.add(element)", "focalAPIStart": 135, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoStateToIncomingTrans.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isAStateVertex(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7277, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [107, 258], "initializationEnd": [120, 269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 324, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [526], "useEnd": [538], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/main/java/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCertificates(CertSelector selector) throws CertStoreException {\n    Set col = new HashSet();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof Certificate) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof Certificate) && selector.match((Certificate) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7278, "initialization": ["Set set = new HashSet()", "Object element = Map.Entry.getKey()"], "initializationStart": [214, 357], "initializationEnd": [227, 371], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "map.containsKey(element,)", "guardType": "IF {", "guardExpressionStart": 421, "guardExpressionEnd": 446, "guardBlockStart": 421, "guardBlockEnd": 571, "focalAPI": " = set.add(element)", "focalAPIStart": 457, "focalAPIEnd": 477, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createMapDiff(Set,*,set,Map,Map)"], "useStart": [673], "useEnd": [761], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomsontom/emf-databinding-example/tree/master/org.eclipse.core.databinding/src/org/eclipse/core/internal/databinding/property/map/SimplePropertyObservableMap.java", "rawCode": "  public void putAll(Map m) {\n    checkRealm();\n\n    Map map = new HashMap(getMap());\n\n    Map oldValues = new HashMap();\n    Map newValues = new HashMap();\n    Set changedKeys = new HashSet();\n    Set addedKeys = new HashSet();\n    for (Iterator it = m.entrySet().iterator(); it.hasNext(); ) {\n      Map.Entry entry = (Entry) it.next();\n      Object key = entry.getKey();\n      Object newValue = entry.getValue();\n      if (map.containsKey(key)) {\n        changedKeys.add(key);\n        oldValues.put(key, map.get(key));\n      } else {\n        addedKeys.add(key);\n      }\n      map.put(key, newValue);\n\n      newValues.put(key, newValue);\n    }\n\n    MapDiff diff =\n        Diffs.createMapDiff(addedKeys, Collections.EMPTY_SET, changedKeys, oldValues, newValues);\n\n    boolean wasUpdating = updating;\n    updating = true;\n    try {\n      property.setMap(source, map, diff);\n      modCount++;\n    } finally {\n      updating = wasUpdating;\n    }\n\n    notifyIfChanged(null);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7279, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [1507, 3967], "initializationEnd": [1520, 3978], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 4086, "focalAPIEnd": 4107, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.addAll(Set)", "set.add(Object)", "set.addAll(Set)"], "useStart": [4139, 4397, 4456], "useEnd": [4252, 4428, 4598], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kimchy/compass/tree/master/src/main/src/org/compass/gps/device/hibernate/lifecycle/HibernateEventListenerUtils.java", "rawCode": "  public static Collection getUnpersistedCascades(\n      CompassGpsInterfaceDevice compassGps,\n      Object entity,\n      SessionFactoryImplementor sessionFactory,\n      Cascade cascade,\n      Collection visited) {\n    if (visited.contains(entity)) {\n      return Collections.EMPTY_SET;\n    }\n    visited.add(entity);\n\n    ClassMetadata classMetadata = sessionFactory.getClassMetadata(entity.getClass());\n    if (classMetadata == null) {\n      for (Iterator iter = sessionFactory.getAllClassMetadata().values().iterator();\n          iter.hasNext(); ) {\n        ClassMetadata temp = (ClassMetadata) iter.next();\n        if (entity.getClass().equals(temp.getMappedClass(EntityMode.POJO))) {\n          classMetadata = temp;\n          break;\n        }\n      }\n    }\n    Assert.notNull(\n        classMetadata, \"Failed to lookup Hibernate ClassMetadata for entity [\" + entity + \"]\");\n    String entityName = classMetadata.getEntityName();\n    EntityPersister persister = sessionFactory.getEntityPersister(entityName);\n\n    CompassMapping compassMapping = ((InternalCompass) compassGps.getIndexCompass()).getMapping();\n    ClassMapping classMapping = (ClassMapping) compassMapping.getMappingByClass(entity.getClass());\n    if (classMapping == null) {\n      return Collections.EMPTY_SET;\n    }\n\n    // CascadeStyle[] cascadeStyles = persister.getEntityMetamodel().getCascadeStyles();\n    String[] propertyNames = persister.getPropertyNames();\n    Type[] types = persister.getPropertyTypes();\n    Set dependencies = new HashSet();\n    for (int i = 0, len = propertyNames.length; i < len; i++) {\n      // property cascade includes save/update?\n      // CascadeStyle cascadeStyle = cascadeStyles[i];\n      // if (!cascadeStyle.doCascade(CascadingAction.SAVE_UPDATE)) {\n      // continue;\n      // }\n      // property is mapped in Compass?\n      String name = propertyNames[i];\n      Mapping mapping = classMapping.getMapping(name);\n      if (mapping == null) {\n        continue;\n      }\n      // property value is not null?\n      Object propertyValue = persister.getPropertyValue(entity, name, EntityMode.POJO);\n      if (propertyValue == null) {\n        continue;\n      }\n      // find actual property type\n      // todo may not be correct see\n      // http://www.hibernate.org/hib_docs/v3/api/org/hibernate/type/EntityType.html#getReturnedClass()\n      // todo may need to use class name string comparison instead\n      Class propertyType;\n      Type type = types[i];\n      boolean collection = false;\n      if (type instanceof CollectionType) {\n        CollectionType collectionType = (CollectionType) type;\n        propertyType =\n            persister\n                .getFactory()\n                .getCollectionPersister(collectionType.getRole())\n                .getElementType()\n                .getReturnedClass();\n        collection = true;\n      } else {\n        propertyType = type.getReturnedClass();\n      }\n      // Mirroring is cascaded for this property?\n      if (!compassGps.hasMappingForEntityForMirror(propertyType, cascade)) {\n        continue;\n      }\n      // find dependent unpersisted property value(s)\n      ResourceMapping propertyTypeMapping = compassMapping.getMappingByClass(propertyType);\n      Mapping[] idMappings = propertyTypeMapping.getIdMappings();\n      for (int j = 0, jlen = idMappings.length; j < jlen; j++) {\n        ClassPropertyMetaDataMapping idMapping = (ClassPropertyMetaDataMapping) idMappings[j];\n        try {\n          // initiaize the value in case it is lazy (and only for the first time)\n          if (j == 0) {\n            if (propertyValue instanceof HibernateProxy) {\n              propertyValue =\n                  ((HibernateProxy) propertyValue)\n                      .getHibernateLazyInitializer()\n                      .getImplementation();\n            }\n          }\n          if (collection) {\n            for (Iterator iter = ((Collection) propertyValue).iterator(); iter.hasNext(); ) {\n              Object obj = iter.next();\n              Object id = idMapping.getGetter().get(obj);\n              if (id == null) {\n                dependencies.add(obj);\n              }\n              dependencies.addAll(\n                  getUnpersistedCascades(compassGps, obj, sessionFactory, cascade, visited));\n            }\n          } else {\n            Object id = idMapping.getGetter().get(propertyValue);\n            if (id == null) {\n              dependencies.add(propertyValue);\n            }\n            dependencies.addAll(\n                getUnpersistedCascades(\n                    compassGps, propertyValue, sessionFactory, cascade, visited));\n          }\n        } catch (Exception e) {\n          // ignore\n        }\n      }\n    }\n    return dependencies;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7280, "initialization": ["Object element = new Integer(int)"], "initializationStart": [939], "initializationEnd": [963], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printError(String,*)"], "tryExpressionStart": 1016, "tryExpressionEnd": 1020, "tryBlockStart": 1016, "tryBlockEnd": 1219, "catchExpressionStart": 1134, "catchExpressionEnd": 1157, "catchBlockStart": 1134, "catchBlockEnd": 1219, "exceptionHandlingCallStart": [1173], "exceptionHandlingCallEnd": [1204], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1103, "focalAPIEnd": 1118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sciss/SwingOSC/tree/master/src/main/java/de/sciss/swingosc/PeakMeterManager.java", "rawCode": "  private void resortClients() {\n    numTask = 0;\n\n    if (server == null) {\n      meterTimer.stop();\n      if (resp != null) resp.remove();\n      meterBangBndl = null;\n      return;\n    }\n\n    final Integer[] cgetnArgs = new Integer[collActiveClients.size() << 1];\n\n    meterBangBndl = new OSCBundle();\n    final OSCBundle defBndl = new OSCBundle();\n\n    for (int i = 0, k = 0; i < collActiveClients.size(); i++) {\n      final Client mc = (Client) collActiveClients.get(i);\n      if (mc.task) numTask++;\n      meterBangBndl.addPacket(\n          new OSCMessage(\n              \"/n_set\", new Object[] {new Integer(mc.g.getNodeID()), \"t_trig\", new Integer(1)}));\n      cgetnArgs[k++] = new Integer(mc.ctrlBus.getIndex());\n      cgetnArgs[k++] = new Integer(mc.ctrlBus.getNumChannels());\n\n      if (mc.synthDef) {\n        final int numChannels = mc.monoSum ? mc.srcChans.length : 1;\n        if (numChannels > 0) {\n          final Object key = new Integer(numChannels);\n          if (!defSet.contains(key)) {\n            try {\n              defBndl.addPacket(createDef(numChannels).recvMsg());\n              defSet.add(key);\n            } catch (IOException e1) {\n              printError(\"resortClients\", e1);\n            }\n          }\n        }\n      }\n    }\n    meterBangBndl.addPacket(new OSCMessage(\"/c_getn\", cgetnArgs));\n\n    try {\n      if (defBndl.getPacketCount() > 0) {\n        server.sync(defBndl, 4f);\n      }\n      if ((resp != null) && !resp.isListening()) resp.add();\n      if (numTask == 0) {\n        meterTimer.stop();\n      } else {\n        meterTimer.start();\n      }\n    } catch (IOException e1) {\n      printError(\"resortClients\", e1);\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7281, "initialization": ["Object element = Iterator.next()", "Set set = new HashSet()"], "initializationStart": [169, 283], "initializationEnd": [177, 296], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "targetClass.isInstance(element,)", "guardType": "IF {", "guardExpressionStart": 187, "guardExpressionEnd": 219, "guardBlockStart": 187, "guardBlockEnd": 349, "focalAPI": " = set.add(element)", "focalAPIStart": 320, "focalAPIEnd": 338, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dxd/2apl--old-/tree/master/2apl/release/lib/com/sun/jini/discovery/DiscoveryConstraints.java", "rawCode": "    private Set getTargetInstances(Set set) {\n      Set instances = Collections.EMPTY_SET;\n      for (Iterator i = set.iterator(); i.hasNext(); ) {\n        Object obj = i.next();\n        if (targetClass.isInstance(obj)) {\n          if (instances.isEmpty()) {\n            instances = new HashSet();\n          }\n          instances.add(obj);\n        }\n      }\n      return instances;\n    }\n"}, {"dataset": "setAdd", "exampleID": 7282, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [166, 257], "initializationEnd": [179, 266], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 314, "focalAPIEnd": 325, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(String)"], "useStart": [350], "useEnd": [424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sake/bouncycastle-java/tree/master/src/org/bouncycastle/x509/X509AttributeCertStoreSelector.java", "rawCode": "  private Set extractGeneralNames(Collection names) throws IOException {\n    if (names == null || names.isEmpty()) {\n      return new HashSet();\n    }\n    Set temp = new HashSet();\n    for (Iterator it = names.iterator(); it.hasNext(); ) {\n      Object o = it.next();\n      if (o instanceof GeneralName) {\n        temp.add(o);\n      } else {\n        temp.add(GeneralName.getInstance(ASN1Primitive.fromByteArray((byte[]) o)));\n      }\n    }\n    return temp;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7283, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 87, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/federation/library/source/com/sun/identity/saml/AssertionManager.java", "rawCode": "    public boolean addElement(Object obj) {\n      synchronized (keys) {\n        return keys.add(obj);\n      }\n    }\n"}, {"dataset": "setAdd", "exampleID": 7284, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [98, 249], "initializationEnd": [111, 260], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 307, "focalAPIEnd": 319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [493], "useEnd": [505], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/security/src/main/java/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCRLs(CRLSelector selector) throws CertStoreException {\n    Set col = new HashSet();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof CRL) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof CRL) && selector.match((CRL) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7285, "initialization": ["Object element = CheckStateChangedEvent.getElement()", "Set set = createElementSet(*)"], "initializationStart": [89, 176], "initializationEnd": [107, 233], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 241, "focalAPIEnd": 264, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maihde/org.eclipse.rap/tree/master/bundles/org.eclipse.rap.jface.databinding/src/org/eclipse/jface/internal/databinding/viewers/CheckboxViewerCheckedElementsProperty.java", "rawCode": "    public void checkStateChanged(CheckStateChangedEvent event) {\n      Object element = event.getElement();\n      boolean checked = event.getChecked();\n      Set elementSet = createElementSet((StructuredViewer) event.getCheckable());\n      elementSet.add(element);\n      Set additions = checked ? elementSet : Collections.EMPTY_SET;\n      Set removals = checked ? Collections.EMPTY_SET : elementSet;\n      SetDiff diff = Diffs.createSetDiff(additions, removals);\n      fireChange(event.getSource(), diff);\n    }\n"}, {"dataset": "setAdd", "exampleID": 7286, "initialization": ["Object element = convertResourceToModelElement(Object)"], "initializationStart": [523], "initializationEnd": [560], "hasTryCatch": 1, "exceptionType": "ModelException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 230, "tryExpressionEnd": 234, "tryBlockStart": 230, "tryBlockEnd": 389, "catchExpressionStart": 995, "catchExpressionEnd": 1020, "catchBlockStart": 995, "catchBlockEnd": 1108, "exceptionHandlingCallStart": [1066], "exceptionHandlingCallEnd": [1085], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "element instanceof IModelElement && element!=null", "guardType": "IF {", "guardExpressionStart": 570, "guardExpressionEnd": 585, "guardBlockStart": 570, "guardBlockEnd": 763, "focalAPI": " = set.add(element)", "focalAPIStart": 645, "focalAPIEnd": 661, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new SourceModuleVisitor(set)", "set.add(ISourceModule)", "set.add(Object)"], "useStart": [889, 1320, 1407], "useEnd": [922, 1340, 1422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panchenko/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.validators.core/src/org/eclipse/dltk/validators/internal/core/ValidatorUtils.java", "rawCode": "  public static void processResourcesToElements(Object o, final Set elements, final Set resources) {\n    if (o instanceof IResource) {\n      Set els = new HashSet();\n      ResourceVisitor visitor = new ResourceVisitor(els);\n      try {\n        ((IResource) o).accept(visitor);\n      } catch (CoreException e) {\n        if (DLTKCore.DEBUG) {\n          e.printStackTrace();\n        }\n      }\n      for (Iterator iterator = els.iterator(); iterator.hasNext(); ) {\n        Object object = iterator.next();\n\n        Object eo = convertResourceToModelElement(object);\n        if (eo != null) {\n          if (eo instanceof IModelElement) {\n            elements.add(eo);\n          } else if (eo instanceof IResource) {\n            resources.add(eo);\n          }\n        }\n      }\n    } else if (o instanceof IModelElement) {\n      if (o instanceof IParent) {\n        SourceModuleVisitor visitor = new SourceModuleVisitor(elements);\n        try {\n          ((IModelElement) o).accept(visitor);\n        } catch (ModelException e) {\n          if (DLTKCore.DEBUG) {\n            e.printStackTrace();\n          }\n        }\n      } else if (!(o instanceof ISourceModule)) {\n        ISourceModule module =\n            (ISourceModule) ((IModelElement) o).getAncestor(IModelElement.SOURCE_MODULE);\n        if (module != null) {\n          elements.add(module);\n        }\n      } else if (o instanceof ISourceModule) {\n        elements.add(o);\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7287, "initialization": ["Set set = new HashSet()"], "initializationStart": [115], "initializationEnd": [128], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isAStateMachine(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 96, "guardBlockStart": 50, "guardBlockEnd": 176, "focalAPI": " = set.add(element)", "focalAPIStart": 136, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoStateMachineToTop.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isAStateMachine(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7288, "initialization": ["Object element = new Integer(int)", "Set set = new TreeSet()"], "initializationStart": [139, 219], "initializationEnd": [153, 232], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 238, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)", "BeanValidator.validateListOrSetProperty(Object,set,String,Errors,Set)"], "useStart": [261, 1155], "useEnd": [278, 1234], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/astubbs/spring-modules/tree/master/sandbox/validation/src/test/org/springmodules/validation/bean/BeanValidatorTests.java", "rawCode": "  public void testValidateListOrSetProperty_WithSet() throws Exception {\n    final Object root = new Object();\n    final Object element1 = new Integer(1);\n    final Object element2 = new Integer(2);\n    final Set set = new TreeSet();\n    set.add(element1);\n    set.add(element2);\n    final Set validatedObjects = new HashSet();\n\n    BeanValidator validator =\n        new BeanValidator(loader) {\n          private int runCount = 0;\n\n          protected void validateObjectGraphConstraints(\n              Object rootObject, Object obj, Errors errors, Set validatedObjs) {\n            assertSame(root, rootObject);\n            assertSame(BeanValidatorTests.this.errors, errors);\n            assertSame(validatedObjects, validatedObjs);\n            switch (runCount++) {\n              case 0:\n                assertSame(element1, obj);\n                break;\n              case 1:\n                assertSame(element2, obj);\n            }\n          }\n        };\n    validator.setErrorCodeConverter(converter);\n\n    errors.pushNestedPath(\"set[0]\");\n    errors.popNestedPath();\n    errors.pushNestedPath(\"set[1]\");\n    errors.popNestedPath();\n\n    replay();\n    validator.validateListOrSetProperty(root, set, \"set\", errors, validatedObjects);\n    verify();\n  }\n"}, {"dataset": "setAdd", "exampleID": 7289, "initialization": ["Set set = new HashSet()", "Object element = entryToObject(*)"], "initializationStart": [1321, 1409], "initializationEnd": [1334, 1446], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 1454, "focalAPIEnd": 1479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(Set,set)"], "useStart": [1491], "useEnd": [1526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndresGG/sn-8.4/tree/master/db4/test/scr024/src/com/sleepycat/persist/test/BindingTest.java", "rawCode": "  private void checkSecMultiKey(MyEntity entity, String keyName, Set keyValues, Class keyCls)\n      throws DatabaseException {\n\n    /* Get entity metadata. */\n    Class entityCls = entity.getClass();\n    EntityMetadata entityMeta = model.getEntityMetadata(entityCls.getName());\n    assertNotNull(entityMeta);\n\n    /* Get secondary key metadata. */\n    SecondaryKeyMetadata secKeyMeta = entityMeta.getSecondaryKeys().get(keyName);\n    assertNotNull(secKeyMeta);\n\n    /* Create key creator/nullifier. */\n    SecondaryMultiKeyCreator keyCreator =\n        new PersistKeyCreator(\n            catalog, entityMeta, keyCls.getName(), secKeyMeta, false /*rawAcess*/);\n\n    /* Convert entity to bytes. */\n    PersistEntityBinding entityBinding =\n        new PersistEntityBinding(catalog, entityCls.getName(), false);\n    entityBinding.objectToData(entity, dataEntry);\n    entityBinding.objectToKey(entity, keyEntry);\n\n    /* Extract secondary key bytes from entity bytes. */\n    Set<DatabaseEntry> results = new HashSet<DatabaseEntry>();\n    keyCreator.createSecondaryKeys(null, keyEntry, dataEntry, results);\n    assertEquals(keyValues.size(), results.size());\n\n    /* Convert secondary key bytes back to objects. */\n    PersistKeyBinding keyBinding = new PersistKeyBinding(catalog, keyCls.getName(), false);\n    Set keyValues2 = new HashSet();\n    for (DatabaseEntry secKeyEntry : results) {\n      Object keyValue2 = keyBinding.entryToObject(secKeyEntry);\n      keyValues2.add(keyValue2);\n    }\n    assertEquals(keyValues, keyValues2);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7290, "initialization": ["Set set = new HashSet(*)", "Object element = Iterator.next()"], "initializationStart": [98, 200], "initializationEnd": [122, 209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.add(String)"], "configurationStart": [253], "configurationEnd": [298], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 323, "focalAPIEnd": 333, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtyley/test-bc-java-cvsimport/tree/master/crypto/j2me/org/bouncycastle/tsp/TimeStampResponseGenerator.java", "rawCode": "  private Set convert(Set orig) {\n    if (orig == null) {\n      return orig;\n    }\n\n    Set con = new HashSet(orig.size());\n\n    for (Iterator it = orig.iterator(); it.hasNext(); ) {\n      Object o = it.next();\n\n      if (o instanceof String) {\n        con.add(new ASN1ObjectIdentifier((String) o));\n      } else {\n        con.add(o);\n      }\n    }\n\n    return con;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7291, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [98, 249], "initializationEnd": [111, 260], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 307, "focalAPIEnd": 319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.add(Object)"], "useStart": [493], "useEnd": [505], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alevy/comet/tree/master/vuze/org/bouncycastle/jce/provider/CertStoreCollectionSpi.java", "rawCode": "  public Collection engineGetCRLs(CRLSelector selector) throws CertStoreException {\n    Set col = new HashSet();\n    Iterator iter = params.getCollection().iterator();\n\n    if (selector == null) {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if (obj instanceof CRL) {\n          col.add(obj);\n        }\n      }\n    } else {\n      while (iter.hasNext()) {\n        Object obj = iter.next();\n\n        if ((obj instanceof CRL) && selector.match((CRL) obj)) {\n          col.add(obj);\n        }\n      }\n    }\n\n    return col;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7292, "initialization": ["Set set = new HashSet(*)", "Object element = Iterator.next()"], "initializationStart": [98, 200], "initializationEnd": [122, 209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.add(String)"], "configurationStart": [253], "configurationEnd": [298], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 323, "focalAPIEnd": 333, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mlundblad/bc-java/tree/master/pkix/src/main/java/org/bouncycastle/tsp/TimeStampRequest.java", "rawCode": "  private Set convert(Set orig) {\n    if (orig == null) {\n      return orig;\n    }\n\n    Set con = new HashSet(orig.size());\n\n    for (Iterator it = orig.iterator(); it.hasNext(); ) {\n      Object o = it.next();\n\n      if (o instanceof String) {\n        con.add(new ASN1ObjectIdentifier((String) o));\n      } else {\n        con.add(o);\n      }\n    }\n\n    return con;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7293, "initialization": ["Object element = restoreItemFromMemento(IMemento)"], "initializationStart": [532], "initializationEnd": [570], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "element!=null", "guardType": "IF {", "guardExpressionStart": 580, "guardExpressionEnd": 599, "guardBlockStart": 580, "guardBlockEnd": 646, "focalAPI": " = set.add(element)", "focalAPIStart": 612, "focalAPIEnd": 635, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzonekl/netxstudio/tree/master/screens/com.netxforge.netxstudio.screens/src/com/netxforge/netxstudio/screens/dialog/HierarchyFilteredItemsSelectionDialog.java", "rawCode": "    /**\n     * Load history elements from memento.\n     *\n     * @param memento memento from which the history will be retrieved\n     */\n    public void load(IMemento memento) {\n\n      XMLMemento historyMemento = (XMLMemento) memento.getChild(rootNodeName);\n\n      if (historyMemento == null) {\n        return;\n      }\n\n      IMemento[] mementoElements = historyMemento.getChildren(infoNodeName);\n      for (int i = 0; i < mementoElements.length; ++i) {\n        IMemento mementoElement = mementoElements[i];\n        Object object = restoreItemFromMemento(mementoElement);\n        if (object != null) {\n          historyList.add(object);\n        }\n      }\n    }\n"}, {"dataset": "setAdd", "exampleID": 7294, "initialization": ["Object element = Iterator.next()"], "initializationStart": [378], "initializationEnd": [393], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(true||set==null||true) && !(right.containsKey(element,))", "guardType": "IF {", "guardExpressionStart": 97, "guardExpressionEnd": 225, "guardBlockStart": 97, "guardBlockEnd": 273, "focalAPI": " = set.add(element)", "focalAPIStart": 441, "focalAPIEnd": 458, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/rap/tree/master/bundles/org.eclipse.rap.ui.workbench/Eclipse UI/org/eclipse/ui/internal/util/Util.java", "rawCode": "  public static void diff(Map left, Map right, Set leftOnly, Set different, Set rightOnly) {\n    if (left == null\n        || right == null\n        || leftOnly == null\n        || different == null\n        || rightOnly == null) {\n      throw new NullPointerException();\n    }\n\n    Iterator iterator = left.keySet().iterator();\n\n    while (iterator.hasNext()) {\n      Object key = iterator.next();\n\n      if (!right.containsKey(key)) {\n        leftOnly.add(key);\n      } else if (!Util.equals(left.get(key), right.get(key))) {\n        different.add(key);\n      }\n    }\n\n    iterator = right.keySet().iterator();\n\n    while (iterator.hasNext()) {\n      Object key = iterator.next();\n\n      if (!left.containsKey(key)) {\n        rightOnly.add(key);\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7295, "initialization": ["Object element = EObject.eGet(EReference,boolean)"], "initializationStart": [370], "initializationEnd": [393], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.add(EObject)"], "configurationStart": [836], "configurationEnd": [862], "guardCondition": "element!=null && combinedCopyAlwaysSet.contains(element,)==false && getClipboardOperationHelper().isCopyAlways(eObject,ref,element,)", "guardType": "IF {", "guardExpressionStart": 403, "guardExpressionEnd": 471, "guardBlockStart": 403, "guardBlockEnd": 1193, "focalAPI": " = set.add(element)", "focalAPIStart": 1080, "focalAPIEnd": 1108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/plugins/org.eclipse.gmf.runtime.emf.clipboard.core/src/org/eclipse/gmf/runtime/emf/clipboard/core/CopyOperation.java", "rawCode": "  private void getCopyAlwaysObjects(\n      EObject eObject, Set copyAlwaysObjects, Set combinedCopyAlwaysSet) {\n    Iterator refIt = eObject.eClass().getEAllReferences().iterator();\n    EReference ref = null;\n    while (refIt.hasNext()) {\n      ref = (EReference) refIt.next();\n      if ((ref.isContainment() == false) && (eObject.eIsSet(ref))) {\n        Object value = eObject.eGet(ref, true);\n        if (getClipboardOperationHelper().isCopyAlways(eObject, ref, value)) {\n          if (FeatureMapUtil.isMany(eObject, ref)) {\n            List vals = (List) value;\n            if (vals.isEmpty() == false) {\n              Iterator valIt = vals.iterator();\n              while (valIt.hasNext()) {\n                EObject val = (EObject) valIt.next();\n                if (combinedCopyAlwaysSet.contains(val) == false) {\n                  copyAlwaysObjects.add(val);\n                  combinedCopyAlwaysSet.add(val);\n                }\n              }\n            }\n          } else if (value != null) {\n            if (combinedCopyAlwaysSet.contains(value) == false) {\n              copyAlwaysObjects.add(value);\n              combinedCopyAlwaysSet.add(value);\n            }\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7296, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(set.contains(element,))", "guardType": "IF {", "guardExpressionStart": 915, "guardExpressionEnd": 954, "guardBlockStart": 915, "guardBlockEnd": 1039, "focalAPI": " = set.add(element)", "focalAPIStart": 1044, "focalAPIEnd": 1073, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cascadeBeforeDelete(EventSource,EntityPersister,Object,*,set)", "cascadeAfterDelete(EventSource,EntityPersister,Object,set)"], "useStart": [1079, 1157], "useEnd": [1151, 1222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gogoego-gerrit/iucn-sis/tree/master/org.hibernate/src/org/hibernate/event/def/DefaultDeleteEventListener.java", "rawCode": "  /**\n   * We encountered a delete request on a transient instance.\n   *\n   * <p>This is a deviation from historical Hibernate (pre-3.2) behavior to align with the JPA spec,\n   * which states that transient entities can be passed to remove operation in which case cascades\n   * still need to be performed.\n   *\n   * @param session The session which is the source of the event\n   * @param entity The entity being delete processed\n   * @param cascadeDeleteEnabled Is cascading of deletes enabled\n   * @param persister The entity persister\n   * @param transientEntities A cache of already visited transient entities (to avoid infinite\n   *     recursion).\n   */\n  protected void deleteTransientEntity(\n      EventSource session,\n      Object entity,\n      boolean cascadeDeleteEnabled,\n      EntityPersister persister,\n      Set transientEntities) {\n    log.info(\"handling transient entity in delete processing\");\n    if (transientEntities.contains(entity)) {\n      log.trace(\"already handled transient entity; skipping\");\n      return;\n    }\n    transientEntities.add(entity);\n    cascadeBeforeDelete(session, persister, entity, null, transientEntities);\n    cascadeAfterDelete(session, persister, entity, transientEntities);\n  }\n"}, {"dataset": "setAdd", "exampleID": 7297, "initialization": ["Set set = createDiffSet()", "Object element = Iterator.next()"], "initializationStart": [82, 189], "initializationEnd": [97, 204], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "wrappedSet.remove(element,)", "guardType": "IF {", "guardExpressionStart": 212, "guardExpressionEnd": 243, "guardBlockStart": 212, "guardBlockEnd": 330, "focalAPI": " = set.add(element)", "focalAPIStart": 300, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.isEmpty()", "createSetDiff(*,set)"], "useStart": [360, 411], "useEnd": [378, 463], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maihde/org.eclipse.rap/tree/master/bundles/org.eclipse.rap.jface.databinding/src/org/eclipse/jface/internal/databinding/viewers/CheckableCheckedElementsObservableSet.java", "rawCode": "  public boolean removeAll(Collection c) {\n    getterCalled();\n    Set removals = createDiffSet();\n    for (Iterator iterator = c.iterator(); iterator.hasNext(); ) {\n      Object element = iterator.next();\n      if (wrappedSet.remove(element)) {\n        checkable.setChecked(element, false);\n        removals.add(element);\n      }\n    }\n    boolean changed = !removals.isEmpty();\n    if (changed) fireSetChange(Diffs.createSetDiff(Collections.EMPTY_SET, removals));\n    return changed;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7298, "initialization": ["Set set = new HashSet()"], "initializationStart": [114], "initializationEnd": [127], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "Model.getFacade().isAStateVertex(element,)", "guardType": "IF {", "guardExpressionStart": 50, "guardExpressionEnd": 95, "guardBlockStart": 50, "guardBlockEnd": 175, "focalAPI": " = set.add(element)", "focalAPIStart": 135, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prat0318/fop/tree/master/argouml/src/argouml-app/src/org/argouml/ui/explorer/rules/GoStateToOutgoingTrans.java", "rawCode": "  public Set getDependencies(Object parent) {\n    if (Model.getFacade().isAStateVertex(parent)) {\n      Set set = new HashSet();\n      set.add(parent);\n      return set;\n    }\n    return Collections.EMPTY_SET;\n  }\n"}, {"dataset": "setAdd", "exampleID": 7299, "initialization": ["Set set = new HashSet()", "Object element = Iterator.next()"], "initializationStart": [287, 397], "initializationEnd": [300, 408], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["element.intValue()", "set.contains(Object)"], "configurationStart": [430, 572], "configurationEnd": [454, 588], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 597, "focalAPIEnd": 608, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.contains(Object)"], "useStart": [634], "useEnd": [650], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/odf/gavrog/tree/master/test/org/gavrog/jane/fpgroups/TestGroupActions.java", "rawCode": "  public void testOrbit() {\n    final GroupAction orbit0 = GroupActions.orbit(new Integer(0), action2);\n    Assert.assertEquals(1, orbit0.size());\n    final GroupAction orbit1 = GroupActions.orbit(new Integer(1), action2);\n    Assert.assertEquals(4, orbit1.size());\n    final Set seen = new HashSet();\n    final Iterator iter = orbit1.domain();\n    while (iter.hasNext()) {\n      final Object x = iter.next();\n      final int i = ((Integer) x).intValue();\n      Assert.assertTrue(orbit1.isDefinedOn(x));\n      Assert.assertTrue(1 <= i && i <= 4);\n      Assert.assertFalse(seen.contains(x));\n      seen.add(x);\n      Assert.assertTrue(seen.contains(x));\n    }\n  }\n"}, {"dataset": "setAdd", "exampleID": 7300, "initialization": ["Object element = new Object()"], "initializationStart": [80], "initializationEnd": [92], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["set.containsAll(List)"], "configurationStart": [165], "configurationEnd": [198], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = set.add(element)", "focalAPIStart": 206, "focalAPIEnd": 230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set.containsAll(List)", "set.add(Object)", "set.containsAll(List)"], "useStart": [249, 290, 332], "useEnd": [282, 314, 365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/2pirad/jacorb/tree/master/test/regression/src/org/jacorb/test/notification/util/WeakHashSetTest.java", "rawCode": "  public void testContainsAll() {\n    Object o1 = new Object();\n    Object o2 = new Object();\n\n    List all = Arrays.asList(new Object[] {o1, o2});\n\n    assertFalse(objectUnderTest_.containsAll(all));\n\n    objectUnderTest_.add(o1);\n\n    assertFalse(objectUnderTest_.containsAll(all));\n\n    objectUnderTest_.add(o2);\n\n    assertTrue(objectUnderTest_.containsAll(all));\n  }\n"}]