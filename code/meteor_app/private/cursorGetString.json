[{"dataset": "cursorGetString", "exampleID": 1301, "initialization": ["Cursor cursor = query(*,String[],String,*,*)"], "initializationStart": [166], "initializationEnd": [371], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 418, "guardExpressionEnd": 451, "guardBlockStart": 418, "guardBlockEnd": 532, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 473, "focalAPIEnd": 523, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [555], "useEnd": [577], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 539, "finallyExpressionEnd": 547, "finallyBlockStart": 539, "finallyBlockEnd": 584, "cleanUpCallStart": [555], "cleanUpCallEnd": [577], "url": "https://github.com/android/platform_packages_apps_im/tree/master/src/com/android/im/app/ChatSwitcher.java", "rawCode": "  private static String findCategory(ContentResolver resolver, long providerId) {\n    // find the provider category for this chat\n    Cursor providerCursor =\n        resolver.query(\n            Imps.Provider.CONTENT_URI,\n            PROVIDER_CATEGORY_PROJECTION,\n            \"_id = \" + providerId,\n            null /* selection args */,\n            null /* sort order */);\n    String category = null;\n\n    try {\n      if (providerCursor.moveToFirst()) {\n        category = providerCursor.getString(PROVIDER_CATEGORY_COLUMN);\n      }\n    } finally {\n      providerCursor.close();\n    }\n\n    return category;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1302, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [257], "initializationEnd": [290], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "d(String,*)"], "tryExpressionStart": 401, "tryExpressionEnd": 405, "tryBlockStart": 401, "tryBlockEnd": 1247, "catchExpressionStart": 1165, "catchExpressionEnd": 1185, "catchBlockStart": 1165, "catchBlockEnd": 1247, "exceptionHandlingCallStart": [1225, 1195], "exceptionHandlingCallEnd": [1237, 1238], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null) && cursor.moveToFirst()&&cursor!=null", "guardType": "IF {", "guardExpressionStart": 297, "guardExpressionEnd": 316, "guardBlockStart": 297, "guardBlockEnd": 343, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 463, "focalAPIEnd": 482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageName(value)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "useStart": [447, 508, 572, 635, 705, 770, 838, 899, 997, 1092, 1133], "useEnd": [483, 527, 591, 654, 724, 789, 857, 918, 1016, 1111, 1153], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/frgossen/mossTalk/tree/master/src/edu/cis350/mosstalkwords/DatabaseHandler.java", "rawCode": "  public UserStimuli getUserStimuli(String imageName) {\n    SQLiteDatabase db = this.getReadableDatabase();\n    UserStimuli us = null;\n\n    String getUserStimuli = \"select * from \" + tableName + \" where imageName = '\" + imageName + \"'\";\n    Cursor cursor = db.rawQuery(getUserStimuli, null);\n\n    if (cursor == null) {\n      return null;\n    }\n\n    if (cursor.moveToFirst() && cursor != null) {\n      try {\n        us = new UserStimuli();\n        us.setImageName(cursor.getString(0));\n        us.setCategory(cursor.getString(1));\n        us.setIsFavorite(Integer.parseInt(cursor.getString(2)));\n        us.setAttempts(Integer.parseInt(cursor.getString(3)));\n        us.setCorrectAttempts(Integer.parseInt(cursor.getString(4)));\n        us.setSoundHints(Integer.parseInt(cursor.getString(5)));\n        us.setPlaywordHints(Integer.parseInt(cursor.getString(6)));\n        us.setNoHint(Integer.parseInt(cursor.getString(7)));\n\n        Calendar cd = Calendar.getInstance();\n        cd.setTime(new Date(cursor.getString(8)));\n        us.setLastSeen(cd);\n        us.setDifficulty(Double.parseDouble(cursor.getString(9)));\n        us.setUrl(cursor.getString(10));\n\n      } catch (Exception e) {\n        Log.d(\"Exception in parsing\", e.toString());\n      }\n    }\n    return us;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1303, "initialization": ["Cursor cursor = query(String,String[],String,String[],*,*,*)"], "initializationStart": [433], "initializationEnd": [507], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 363, "tryExpressionEnd": 367, "tryBlockStart": 363, "tryBlockEnd": 943, "catchExpressionStart": 673, "catchExpressionEnd": 693, "catchBlockStart": 673, "catchBlockEnd": 766, "exceptionHandlingCallStart": [701], "exceptionHandlingCallEnd": [759], "configuration": ["cursor.moveToFirst()"], "configurationStart": [535], "configurationEnd": [550], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 608, "focalAPIEnd": 622, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()", "cursor.close()"], "useStart": [638, 824], "useEnd": [647, 833], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 767, "finallyExpressionEnd": 775, "finallyBlockStart": 767, "finallyBlockEnd": 943, "cleanUpCallStart": [638], "cleanUpCallEnd": [647], "url": "https://github.com/chrispbailey/ToDo-List-Widget/tree/master/src/org/chrisbailey/todo/db/ToDoDatabase.java", "rawCode": "  /**\n   * Reads the value of the parameter identified by <code>name</code>\n   *\n   * @param name\n   * @return String value of the parameter, <code>null</code> otherwise\n   */\n  private String getVariable(String name) {\n    String[] cols = new String[] {\"value\"};\n    String[] whereArgs = new String[] {name};\n\n    Cursor c = null;\n\n    String result = null;\n    try {\n      SQLiteDatabase db = this.getReadableDatabase();\n      c = db.query(VARIABLE_TABLE_NAME, cols, \"name=?\", whereArgs, null, null, null);\n      boolean hasResult = c.moveToFirst();\n      if (hasResult && !c.isNull(0)) {\n        result = c.getString(0);\n      }\n      c.close();\n      db.close();\n    } catch (Exception e) {\n      Log.e(LOG_TAG, \"Error getting variable [\" + name + \"]\", e);\n    } finally {\n      if (null != c) {\n        try {\n          c.close();\n        } catch (Exception e) {\n          Log.e(LOG_TAG, \"Error closing cursor\", e);\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1304, "initialization": ["Cursor cursor = getDatabaseValue(String)"], "initializationStart": [66], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 107, "guardExpressionEnd": 126, "guardBlockStart": 107, "guardBlockEnd": 139, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 160, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [185], "useEnd": [199], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/k-code/k-car/tree/master/CopProject/Cop/src/main/java/pro/kornev/kcar/cop/providers/ConfigDB.java", "rawCode": "  public synchronized String getUsbDevice() {\n    Cursor cursor = getDatabaseValue(USB_DEVICE_COLUMN);\n    if (cursor == null) return null;\n    String result = cursor.getString(0);\n    cursor.close();\n    return result;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1305, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [1205], "initializationEnd": [1225], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1482, "focalAPIEnd": 1501, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "cursor.getString(int)"], "useStart": [1463, 1533], "useEnd": [1502, 1552], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_Phone/tree/master/src/com/android/phone/EditFdnContactScreen.java", "rawCode": "  /**\n   * We now want to bring up the pin request screen AFTER the contact information is displayed, to\n   * help with user experience.\n   *\n   * <p>Also, process the results from the contact picker.\n   */\n  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (DBG) log(\"onActivityResult request:\" + requestCode + \" result:\" + resultCode);\n\n    switch (requestCode) {\n      case PIN2_REQUEST_CODE:\n        Bundle extras = (intent != null) ? intent.getExtras() : null;\n        if (extras != null) {\n          mPin2 = extras.getString(\"pin2\");\n          if (mAddContact) {\n            addContact();\n          } else {\n            updateContact();\n          }\n        } else if (resultCode != RESULT_OK) {\n          // if they cancelled, then we just cancel too.\n          if (DBG) log(\"onActivityResult: cancelled.\");\n          finish();\n        }\n        break;\n\n        // look for the data associated with this number, and update\n        // the display with it.\n      case CONTACTS_PICKER_CODE:\n        if (resultCode != RESULT_OK) {\n          if (DBG) log(\"onActivityResult: cancelled.\");\n          return;\n        }\n        Cursor cursor =\n            getContentResolver().query(intent.getData(), NUM_PROJECTION, null, null, null);\n        if ((cursor == null) || (!cursor.moveToFirst())) {\n          Log.w(LOG_TAG, \"onActivityResult: bad contact data, no results found.\");\n          return;\n        }\n        mNameField.setText(cursor.getString(0));\n        mNumberField.setText(cursor.getString(1));\n        break;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1306, "initialization": ["Cursor cursor = query(String,String[],String,*,*,*,String)"], "initializationStart": [744], "initializationEnd": [815], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getInt(int)"], "configurationStart": [906, 1029], "configurationEnd": [926, 1045], "guardCondition": "cursor.getCount()>0 && i<cursor.getCount()", "guardType": "IF {", "guardExpressionStart": 871, "guardExpressionEnd": 897, "guardBlockStart": 871, "guardBlockEnd": 1617, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1070, "focalAPIEnd": 1089, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setNome(value)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.moveToNext()"], "useStart": [1056, 1115, 1165, 1214, 1265, 1435, 1478, 1521, 1583], "useEnd": [1090, 1134, 1184, 1233, 1284, 1454, 1497, 1540, 1602], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cainan/TccInatel/tree/master/GerenciadorFinanceiro/src/br/com/tcc/model/database/DatabaseDelegate.java", "rawCode": "  /**\n   * Read the bills of current day\n   *\n   * @param month\n   * @param year\n   */\n  public synchronized ArrayList<Conta> readDailyBills(int day, int month, int year) {\n    // Open Database\n    mDataBase = mDatabaseHelper.getWritableDatabase();\n\n    ArrayList<Conta> arrayConta = new ArrayList<Conta>();\n    Conta conta;\n\n    String[] allColumns = {\n      \"_id\", \"conta\", \"valor\", \"vencimento\", \"notificar\", \"codigo\", \"status\", \"dia\", \"mes\", \"ano\"\n    };\n\n    String where;\n    where = \"dia=\" + day + \" and mes=\" + month + \" and ano=\" + year + \" and status=\" + \"0\";\n    Log.d(\"log\", \"dia \" + day);\n    Log.d(\"log\", \"mes \" + month);\n    Log.d(\"log\", \"ano \" + year);\n\n    // SELECT * FROM CONTAS WHERE MES = ? AND ANO = ?\n    Cursor cursor = mDataBase.query(TABLE_NAME, allColumns, where, null, null, null, \"dia\");\n    Log.d(\"log\", \"cursor: \" + cursor.getCount());\n    if (cursor.getCount() > 0) {\n      cursor.moveToFirst();\n      for (int i = 0; i < cursor.getCount(); i++) {\n        conta = new Conta();\n        conta.setId(cursor.getInt(0));\n        conta.setNome(cursor.getString(1));\n        conta.setValor(cursor.getString(2));\n        conta.setVencimento(cursor.getString(3));\n        conta.setNotificar(cursor.getString(4));\n        conta.setCodigoBarra(cursor.getString(5));\n        if (cursor.getInt(6) == 0) {\n          conta.setPago(false);\n        } else {\n          conta.setPago(true);\n        }\n        conta.setDia(cursor.getString(7));\n        conta.setMes(cursor.getString(8));\n        conta.setAno(cursor.getString(9));\n\n        arrayConta.add(conta);\n        cursor.moveToNext();\n      }\n    }\n\n    // Open Database\n    closeDb();\n\n    return arrayConta;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1307, "initialization": ["Cursor cursor = query(*,String[],String,String[],*,*,*)"], "initializationStart": [345], "initializationEnd": [540], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 582, "guardExpressionEnd": 607, "guardBlockStart": 582, "guardBlockEnd": 659, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 633, "focalAPIEnd": 652, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 686, "followUpCheckExpressionEnd": 713, "followUpCheckBlockStart": 686, "followUpCheckBlockEnd": 750, "use": ["cursor.close()"], "useStart": [665], "useEnd": [679], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ROGUE-JCTD/Arbiter-Android/tree/master/Arbiter-Android/src/com/lmn/Arbiter_Android/DatabaseHelpers/TableHelpers/FeaturesHelper.java", "rawCode": "  private String getGeometryColumn(SQLiteDatabase db, String featureType)\n      throws FeatureHelperException {\n    String[] columns = {\n      GeometryColumnsHelper.FEATURE_GEOMETRY_COLUMN // 0\n    };\n\n    String whereClause = GeometryColumnsHelper.FEATURE_TABLE_NAME + \"=?\";\n    String[] whereArgs = {featureType};\n\n    Cursor cursor =\n        db.query(\n            GeometryColumnsHelper.GEOMETRY_COLUMNS_TABLE_NAME,\n            columns,\n            whereClause,\n            whereArgs,\n            null,\n            null,\n            null);\n\n    String geometryColumn = null;\n\n    if (cursor.moveToFirst()) {\n      geometryColumn = cursor.getString(0);\n    }\n\n    cursor.close();\n\n    if (geometryColumn != null) {\n      return geometryColumn;\n    }\n\n    throw new FeatureHelperException(Errors.NO_GEOMETRY_COLUMN);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1308, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [97], "initializationEnd": [138], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst() && cursor!=null", "guardType": "IF {", "guardExpressionStart": 378, "guardExpressionEnd": 397, "guardBlockStart": 378, "guardBlockEnd": 656, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 513, "focalAPIEnd": 532, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["withAppendedPath(*,value)", "cursor.close()"], "useStart": [464, 585], "useEnd": [533, 599], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/openintents/tree/master/widgets/ShoppingWidget/src/org/openintents/provider/Shopping.java", "rawCode": "  public static Uri getListForItem(Context context, String itemId) {\n    Cursor cursor =\n        context\n            .getContentResolver()\n            .query(\n                Contains.CONTENT_URI,\n                new String[] {Contains.LIST_ID},\n                Contains.ITEM_ID + \" = ?\",\n                new String[] {itemId},\n                Contains.DEFAULT_SORT_ORDER);\n    if (cursor != null) {\n      Uri uri;\n      if (cursor.moveToFirst()) {\n\n        uri = Uri.withAppendedPath(Shopping.Lists.CONTENT_URI, cursor.getString(0));\n\n      } else {\n        uri = null;\n      }\n      cursor.close();\n      return uri;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1309, "initialization": ["Cursor cursor = Context.getContentResolver()", "int columnIndex = Cursor.getColumnIndex(String)"], "initializationStart": [252, 496], "initializationEnd": [280, 554], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getColumnIndex(String)"], "configurationStart": [458, 496], "configurationEnd": [478, 554], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 328, "guardExpressionEnd": 347, "guardBlockStart": 328, "guardBlockEnd": 597, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 569, "focalAPIEnd": 590, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xplodwild/android_packages_apps_Focal/tree/master/src/org/cyanogenmod/focal/Util.java", "rawCode": "  /**\n   * Returns the physical path (on emmc/sd) of the provided URI from MediaGallery\n   *\n   * @param context\n   * @param contentURI\n   * @return\n   */\n  public static String getRealPathFromURI(Context context, Uri contentURI) {\n    Cursor cursor = context.getContentResolver().query(contentURI, null, null, null, null);\n    if (cursor == null) { // Source is Dropbox or other similar local file path\n      return contentURI.getPath();\n    } else {\n      cursor.moveToFirst();\n      int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);\n      return cursor.getString(idx);\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1310, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "CursorIndexOutOfBoundsException", "exceptionHandlingCall": ["toString()", "e(String,String)"], "tryExpressionStart": 56, "tryExpressionEnd": 60, "tryBlockStart": 56, "tryBlockEnd": 255, "catchExpressionStart": 98, "catchExpressionEnd": 140, "catchBlockStart": 98, "catchBlockEnd": 255, "exceptionHandlingCallStart": [172, 148], "exceptionHandlingCallEnd": [184, 204], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 76, "focalAPIEnd": 90, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ccard/csci422FinalProject/tree/master/To_DoList/src/csci422/CandN/to_dolist/ToDoHelper.java", "rawCode": "  public String getId(Cursor c) {\n    String datum;\n    try {\n      datum = c.getString(0);\n    } catch (CursorIndexOutOfBoundsException e) {\n      Log.e(tag, \"Cursor: \" + c.toString() + \" Out of bounds\");\n      datum = \"Error: Can't read database\";\n    }\n    return datum;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1311, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 63, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/java/android/database/MergeCursor.java", "rawCode": "  @Override\n  public String getString(int column) {\n    return mCursor.getString(column);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1312, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 47, "focalAPIEnd": 61, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybakos/csci498android/tree/master/LunchList/src/edu/mines/csci498/ybakos/lunchlist/RestaurantHelper.java", "rawCode": "  public String getName(Cursor c) {\n    return c.getString(1);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1313, "initialization": ["Cursor cursor = query(String,String[],String,String[],*,*,*)"], "initializationStart": [124], "initializationEnd": [208], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 214, "guardExpressionEnd": 239, "guardBlockStart": 214, "guardBlockEnd": 532, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 337, "focalAPIEnd": 356, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIdmodalidadCurso(value)", "cursor.getString(int)", "cursor.getInt(int)"], "useStart": [306, 393, 451], "useEnd": [357, 412, 467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/darklord777/ProyectoCargaAcademica/tree/master/cargaAcademicaEISI/src/sv/ues/fia/cargaacademicaeisi/ControlDB.java", "rawCode": "  public Modalidad_Curso consultarModCurso(String idModCurso) {\n    String[] id = {idModCurso};\n    Cursor cursor =\n        db.query(\"MODALIDAD_CURSO\", camposModCurso, \"IDMODALIDAD = ?\", id, null, null, null);\n    if (cursor.moveToFirst()) {\n      Modalidad_Curso ModalCurso = new Modalidad_Curso();\n      ModalCurso.setIdmodalidadCurso(cursor.getString(0));\n      ModalCurso.setNom_modalidad(cursor.getString(1));\n      ModalCurso.setDescuento_horas(cursor.getInt(2));\n      return ModalCurso;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1314, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [2697], "initializationEnd": [2717], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToNext()", "guardType": "IF {", "guardExpressionStart": 2782, "guardExpressionEnd": 2806, "guardBlockStart": 2782, "guardBlockEnd": 3174, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 2840, "focalAPIEnd": 2859, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "cursor.getString(int)", "cursor.getInt(int)", "cursor.close()", "cursor.close()"], "useStart": [2819, 2892, 2959, 2993, 3036], "useEnd": [2860, 2911, 2975, 3007, 3050], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/doits/Sparse-RSS/tree/master/src/de/shandschuh/sparserss/FeedConfigActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.feedsettings);\n    setResult(RESULT_CANCELED);\n\n    Intent intent = getIntent();\n\n    nameEditText = (EditText) findViewById(R.id.feed_title);\n    urlEditText = (EditText) findViewById(R.id.feed_url);\n    refreshOnlyWifiCheckBox = (CheckBox) findViewById(R.id.wifionlycheckbox);\n\n    if (intent.getAction().equals(Intent.ACTION_INSERT)) {\n      setTitle(R.string.newfeed_title);\n      restoreInstanceState(savedInstanceState);\n      ((Button) findViewById(R.id.button_ok))\n          .setOnClickListener(\n              new OnClickListener() {\n                public void onClick(View v) {\n                  String url = urlEditText.getText().toString();\n\n                  if (!url.startsWith(Strings.HTTP) && !url.startsWith(Strings.HTTPS)) {\n                    url = Strings.HTTP + url;\n                  }\n\n                  Cursor cursor =\n                      getContentResolver()\n                          .query(\n                              FeedData.FeedColumns.CONTENT_URI,\n                              null,\n                              new StringBuilder(FeedData.FeedColumns.URL)\n                                  .append(Strings.DB_ARG)\n                                  .toString(),\n                              new String[] {url},\n                              null);\n\n                  if (cursor.moveToFirst()) {\n                    cursor.close();\n                    Toast.makeText(\n                            FeedConfigActivity.this,\n                            R.string.error_feedurlexists,\n                            Toast.LENGTH_LONG)\n                        .show();\n                  } else {\n                    cursor.close();\n                    ContentValues values = new ContentValues();\n\n                    values.put(\n                        FeedData.FeedColumns.WIFIONLY, refreshOnlyWifiCheckBox.isChecked() ? 1 : 0);\n                    values.put(FeedData.FeedColumns.URL, url);\n                    values.put(FeedData.FeedColumns.ERROR, (String) null);\n\n                    String name = nameEditText.getText().toString();\n\n                    if (name.trim().length() > 0) {\n                      values.put(FeedData.FeedColumns.NAME, name);\n                    }\n                    getContentResolver().insert(FeedData.FeedColumns.CONTENT_URI, values);\n                    setResult(RESULT_OK);\n                    finish();\n                  }\n                }\n              });\n    } else {\n      setTitle(R.string.editfeed_title);\n\n      if (!restoreInstanceState(savedInstanceState)) {\n        Cursor cursor = getContentResolver().query(intent.getData(), PROJECTION, null, null, null);\n\n        if (cursor.moveToNext()) {\n          nameEditText.setText(cursor.getString(0));\n          urlEditText.setText(cursor.getString(1));\n          refreshOnlyWifiCheckBox.setChecked(cursor.getInt(2) == 1);\n          cursor.close();\n        } else {\n          cursor.close();\n          Toast.makeText(FeedConfigActivity.this, R.string.error, Toast.LENGTH_LONG).show();\n          finish();\n        }\n      }\n      ((Button) findViewById(R.id.button_ok))\n          .setOnClickListener(\n              new OnClickListener() {\n                public void onClick(View v) {\n                  String url = urlEditText.getText().toString();\n\n                  Cursor cursor =\n                      getContentResolver()\n                          .query(\n                              FeedData.FeedColumns.CONTENT_URI,\n                              new String[] {FeedData.FeedColumns._ID},\n                              new StringBuilder(FeedData.FeedColumns.URL)\n                                  .append(Strings.DB_ARG)\n                                  .toString(),\n                              new String[] {url},\n                              null);\n\n                  if (cursor.moveToFirst()\n                      && !getIntent().getData().getLastPathSegment().equals(cursor.getString(0))) {\n                    cursor.close();\n                    Toast.makeText(\n                            FeedConfigActivity.this,\n                            R.string.error_feedurlexists,\n                            Toast.LENGTH_LONG)\n                        .show();\n                  } else {\n                    cursor.close();\n                    ContentValues values = new ContentValues();\n\n                    if (!url.startsWith(Strings.HTTP) && !url.startsWith(Strings.HTTPS)) {\n                      url = Strings.HTTP + url;\n                    }\n                    values.put(FeedData.FeedColumns.URL, url);\n\n                    String name = nameEditText.getText().toString();\n\n                    values.put(FeedData.FeedColumns.NAME, name.trim().length() > 0 ? name : null);\n                    values.put(FeedData.FeedColumns.FETCHMODE, 0);\n                    values.put(\n                        FeedData.FeedColumns.WIFIONLY, refreshOnlyWifiCheckBox.isChecked() ? 1 : 0);\n                    values.put(FeedData.FeedColumns.ERROR, (String) null);\n                    getContentResolver().update(getIntent().getData(), values, null, null);\n\n                    setResult(RESULT_OK);\n                    finish();\n                  }\n                }\n              });\n    }\n\n    ((Button) findViewById(R.id.button_cancel))\n        .setOnClickListener(\n            new OnClickListener() {\n              public void onClick(View v) {\n                finish();\n              }\n            });\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1315, "initialization": ["Cursor cursor = CursorLoader.loadInBackground()"], "initializationStart": [879], "initializationEnd": [904], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null) && cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 912, "guardExpressionEnd": 931, "guardBlockStart": 912, "guardBlockEnd": 1771, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1061, "focalAPIEnd": 1080, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "Contact.setDisplayName(value)", "cursor.getInt(int)", "cursor.close()"], "useStart": [1108, 1178, 1444, 1852], "useEnd": [1127, 1213, 1460, 1866], "hasFinally": 1, "cleanUpCall": ["CursorLoader.stopLoading()", "Cursor.close()"], "finallyExpressionStart": 1778, "finallyExpressionEnd": 1786, "finallyBlockStart": 1778, "finallyBlockEnd": 1881, "cleanUpCallStart": [1794, 1852], "cleanUpCallEnd": [1814, 1866], "url": "https://github.com/yuyang226/ContactsWidgetICS/tree/master/ContactsWidgetICS/src/com/gmail/yuyang226/contactswidget/pro/ContactAccessor.java", "rawCode": "  private Contact loadContactById(\n      ContentResolver contentResolver,\n      Context context,\n      long contactId,\n      String sortOrder,\n      boolean showHighRes,\n      boolean supportDirectDial,\n      Rect size) {\n    Contact contact = new Contact();\n    contact.setContactId(contactId);\n    Uri contactUri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, contactId);\n    contact.setContactUri(\n        ContactsContract.Contacts.getLookupUri(context.getContentResolver(), contactUri));\n\n    Uri uri = ContactsContract.Contacts.CONTENT_URI;\n    CursorLoader loader =\n        new CursorLoader(\n            context,\n            uri,\n            CONTACT_PROJECTION,\n            CONTACT_SELECTION,\n            new String[] {String.valueOf(contactId)},\n            sortOrder);\n\n    Cursor cursor = null;\n    try {\n      loader.startLoading();\n      cursor = loader.loadInBackground();\n      if (cursor == null) {\n        // did not find the contact\n        return null;\n      } else if (cursor.moveToFirst()) {\n        String displayName = cursor.getString(1);\n        String photoUri = cursor.getString(2);\n        contact.setContactId(contactId);\n        contact.setDisplayName(displayName);\n        contact.setPhotoUri(photoUri);\n        if (photoUri != null && photoUri.length() > 0) {\n          contact.setPhoto(loadContactPhoto(contentResolver, contactUri, showHighRes, size));\n        }\n        int hasPhoneNumber = cursor.getInt(3);\n        if (supportDirectDial) {\n          if (hasPhoneNumber > 0) {\n            contact.setPhoneNumbers(loadPhoneNumbers(contentResolver, context, contactId));\n          } else {\n            // users want direct dial but this contact has no phone number\n            return null;\n          }\n        }\n      }\n    } finally {\n      loader.stopLoading();\n      if (cursor != null) {\n        cursor.close();\n      }\n    }\n    return contact;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1316, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [91], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [340], "configurationEnd": [360], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 305, "guardExpressionEnd": 331, "guardBlockStart": 305, "guardBlockEnd": 407, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 374, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [412], "useEnd": [426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Settings/tree/master/src/com/android/settings/ApnSettings.java", "rawCode": "  private String getSelectedApnKey() {\n    String key = null;\n\n    Cursor cursor =\n        getContentResolver()\n            .query(\n                PREFERAPN_URI,\n                new String[] {\"_id\"},\n                null,\n                null,\n                Telephony.Carriers.DEFAULT_SORT_ORDER);\n    if (cursor.getCount() > 0) {\n      cursor.moveToFirst();\n      key = cursor.getString(ID_INDEX);\n    }\n    cursor.close();\n    return key;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1317, "initialization": ["Cursor cursor = query(Context,ContentResolver,*,String[],String,*,*)"], "initializationStart": [172], "initializationEnd": [379], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(!(cursor.moveToLast())) && !(cursor==null)", "guardType": "IF {", "guardExpressionStart": 386, "guardExpressionEnd": 405, "guardBlockStart": 386, "guardBlockEnd": 418, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 499, "focalAPIEnd": 535, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["get(value,boolean)", "cursor.close()"], "useStart": [558, 885], "useEnd": [584, 899], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 869, "finallyExpressionEnd": 877, "finallyBlockStart": 869, "finallyBlockEnd": 906, "cleanUpCallStart": [885], "cleanUpCallEnd": [899], "url": "https://github.com/cadavre/android_packages_apps_Mms/tree/master/src/com/android/mms/transaction/MessagingNotification.java", "rawCode": "  private static final MmsSmsDeliveryInfo getSmsNewDeliveryInfo(Context context) {\n    ContentResolver resolver = context.getContentResolver();\n    Cursor cursor =\n        SqliteWrapper.query(\n            context,\n            resolver,\n            Sms.CONTENT_URI,\n            SMS_STATUS_PROJECTION,\n            NEW_DELIVERY_SM_CONSTRAINT,\n            null,\n            Sms.DATE);\n\n    if (cursor == null) return null;\n\n    try {\n      if (!cursor.moveToLast()) return null;\n\n      String address = cursor.getString(COLUMN_SMS_ADDRESS);\n\n      String name = Contact.get(address, true).getName();\n\n      long timeMillis = 3000;\n\n      return new MmsSmsDeliveryInfo(\n          String.format(\n              context.getString(R.string.delivery_toast_body),\n              (name == null) ? address : name.replace('\\n', ' ').replace('\\r', ' ')),\n          timeMillis);\n\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1318, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 157, "focalAPIEnd": 191, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/packages-apps-Contacts/tree/master/src/com/android/contacts/SplitAggregateView.java", "rawCode": "  private void loadEmail(Cursor cursor, RawContactInfo info) {\n    if (info.email == null || cursor.getInt(SplitQuery.IS_PRIMARY) != 0) {\n      info.email = cursor.getString(SplitQuery.EMAIL);\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1319, "initialization": ["int columnIndex = Cursor.getColumnIndexOrThrow(String)"], "initializationStart": [90], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)"], "configurationStart": [90], "configurationEnd": [154], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 189, "focalAPIEnd": 225, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)"], "useStart": [280], "useEnd": [302], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/clauxz/DiscusysforAndroid/tree/master/Discussions/src/jp/ac/tohoku/qse/takahashi/discussions/ui/view/MediaList.java", "rawCode": "    private void fireYoutubeIntent(final Cursor cursor) {\n\n      int youtubeVideoColumn = cursor.getColumnIndexOrThrow(Attachments.Columns.VIDEO_LINK_URL);\n      final String youtubeLink = cursor.getString(youtubeVideoColumn);\n      Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(youtubeLink));\n      mContext.startActivity(intent);\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1320, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToPosition(int)"], "configurationStart": [398], "configurationEnd": [426], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 449, "focalAPIEnd": 502, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "cursor.getString(int)"], "useStart": [510, 599], "useEnd": [578, 650], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MoresbyCoffee/stroll-android/tree/master/libraries/ZXingLib/src/com/google/zxing/client/android/share/BookmarkAdapter.java", "rawCode": "  @Override\n  public View getView(int index, View view, ViewGroup viewGroup) {\n    LinearLayout layout;\n    if (view instanceof LinearLayout) {\n      layout = (LinearLayout) view;\n    } else {\n      LayoutInflater factory = LayoutInflater.from(context);\n      layout = (LinearLayout) factory.inflate(R.layout.bookmark_picker_list_item, viewGroup, false);\n    }\n\n    if (!cursor.isClosed()) {\n      cursor.moveToPosition(index);\n      String title = cursor.getString(BookmarkPickerActivity.TITLE_COLUMN);\n      ((TextView) layout.findViewById(R.id.bookmark_title)).setText(title);\n      String url = cursor.getString(BookmarkPickerActivity.URL_COLUMN);\n      ((TextView) layout.findViewById(R.id.bookmark_url)).setText(url);\n    } // Otherwise... just don't update as the object is shutting down\n    return layout;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1321, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 55, "focalAPIEnd": 75, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "sourceNameToSourceType(value)", "create(*,*,*,*,*,value,CacheType,int,int,int)"], "useStart": [155, 217, 275, 335, 402, 432, 522, 369], "useEnd": [175, 237, 295, 355, 422, 452, 577, 673], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/branches/sng/GeoBeagle/src/com/google/code/geobeagle/database/CacheReaderCursor.java", "rawCode": "  public Geocache getCache() {\n    String sourceName = mCursor.getString(4);\n\n    CacheType cacheType = mGeocacheFactory.cacheTypeFromInt(Integer.parseInt(mCursor.getString(5)));\n    int difficulty = Integer.parseInt(mCursor.getString(6));\n    int terrain = Integer.parseInt(mCursor.getString(7));\n    int container = Integer.parseInt(mCursor.getString(8));\n    return mGeocacheFactory.create(\n        mCursor.getString(2),\n        mCursor.getString(3),\n        mCursor.getDouble(0),\n        mCursor.getDouble(1),\n        mDbToGeocacheAdapter.sourceNameToSourceType(sourceName),\n        sourceName,\n        cacheType,\n        difficulty,\n        terrain,\n        container);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1322, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [317], "configurationEnd": [351], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 601, "focalAPIEnd": 643, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 792, "followUpCheckExpressionEnd": 835, "followUpCheckBlockStart": 792, "followUpCheckBlockEnd": 924, "use": ["setStatus(value)"], "useStart": [929], "useEnd": [953], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninjanetworks/contacts/tree/master/src/com/android/contacts/list/ContactListItemView.java", "rawCode": "  /** Sets the proper icon (star or presence or nothing) and/or status message. */\n  public void showPresenceAndStatusMessage(\n      Cursor cursor, int presenceColumnIndex, int contactStatusColumnIndex) {\n    Drawable icon = null;\n    int presence = 0;\n    if (!cursor.isNull(presenceColumnIndex)) {\n      presence = cursor.getInt(presenceColumnIndex);\n      icon = ContactPresenceIconUtil.getPresenceIcon(getContext(), presence);\n    }\n    setPresence(icon);\n\n    String statusMessage = null;\n    if (contactStatusColumnIndex != 0 && !cursor.isNull(contactStatusColumnIndex)) {\n      statusMessage = cursor.getString(contactStatusColumnIndex);\n    }\n    // If there is no status message from the contact, but there was a presence value, then use\n    // the default status message string\n    if (statusMessage == null && presence != 0) {\n      statusMessage = ContactStatusUtil.getStatusString(getContext(), presence);\n    }\n    setStatus(statusMessage);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1323, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 71, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/droidjunk_packages_apps_Contacts/tree/master/src/com/android/contacts/CallDetailActivityQueryHandler.java", "rawCode": "  private String getSourcePackage(Cursor voicemailCursor) {\n    return voicemailCursor.getString(SOURCE_PACKAGE_COLUMN_INDEX);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1324, "initialization": ["Cursor cursor = query(*,*,String,String[],*)"], "initializationStart": [609], "initializationEnd": [802], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst() && !(cursor==null)", "guardType": "IF {", "guardExpressionStart": 812, "guardExpressionEnd": 826, "guardBlockStart": 812, "guardBlockEnd": 868, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1713, "focalAPIEnd": 1760, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getStatusType(value)", "getStatusChangeCount(value)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getLong(int)", "cursor.close()"], "useStart": [1785, 1960, 2300, 2719, 3140, 3254], "useEnd": [1822, 2004, 2348, 2755, 3176, 3263], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 3234, "finallyExpressionEnd": 3242, "finallyBlockStart": 3234, "finallyBlockEnd": 3274, "cleanUpCallStart": [3254], "cleanUpCallEnd": [3263], "url": "https://github.com/TeamNyx/packages_apps_Exchange/tree/master/exchange2/src/com/android/exchange/EasAccountService.java", "rawCode": "  private int parsePingResult(InputStream is, ContentResolver cr, HashMap<String, Integer> errorMap)\n      throws IOException, StaleFolderListException, IllegalHeartbeatException,\n          CommandStatusException {\n    PingParser pp = new PingParser(is, this);\n    if (pp.parse()) {\n      // True indicates some mailboxes need syncing...\n      // syncList has the serverId's of the mailboxes...\n      mBindArguments[0] = Long.toString(mAccount.mId);\n      mPingChangeList = pp.getSyncList();\n      for (String serverId : mPingChangeList) {\n        mBindArguments[1] = serverId;\n        Cursor c =\n            cr.query(\n                Mailbox.CONTENT_URI,\n                Mailbox.CONTENT_PROJECTION,\n                WHERE_ACCOUNT_KEY_AND_SERVER_ID,\n                mBindArguments,\n                null);\n        if (c == null) throw new ProviderUnavailableException();\n        try {\n          if (c.moveToFirst()) {\n\n            /**\n             * Check the boxes reporting changes to see if there really were any... We do this\n             * because bugs in various Exchange servers can put us into a looping behavior by\n             * continually reporting changes in a mailbox, even when there aren't any.\n             *\n             * <p>This behavior is seemingly random, and therefore we must code defensively by\n             * backing off of push behavior when it is detected.\n             *\n             * <p>One known cause, on certain Exchange 2003 servers, is acknowledged by Microsoft,\n             * and the server hotfix for this case can be found at\n             * http://support.microsoft.com/kb/923282\n             */\n\n            // Check the status of the last sync\n            String status = c.getString(Mailbox.CONTENT_SYNC_STATUS_COLUMN);\n            int type = ExchangeService.getStatusType(status);\n            // This check should always be true...\n            if (type == ExchangeService.SYNC_PING) {\n              int changeCount = ExchangeService.getStatusChangeCount(status);\n              if (changeCount > 0) {\n                errorMap.remove(serverId);\n              } else if (changeCount == 0) {\n                // This means that a ping reported changes in error; we keep a count\n                // of consecutive errors of this kind\n                String name = c.getString(Mailbox.CONTENT_DISPLAY_NAME_COLUMN);\n                Integer failures = errorMap.get(serverId);\n                if (failures == null) {\n                  userLog(\"Last ping reported changes in error for: \", name);\n                  errorMap.put(serverId, 1);\n                } else if (failures > MAX_PING_FAILURES) {\n                  // We'll back off of push for this box\n                  pushFallback(c.getLong(Mailbox.CONTENT_ID_COLUMN));\n                  continue;\n                } else {\n                  userLog(\"Last ping reported changes in error for: \", name);\n                  errorMap.put(serverId, failures + 1);\n                }\n              }\n            }\n\n            // If there were no problems with previous sync, we'll start another one\n            ExchangeService.startManualSync(\n                c.getLong(Mailbox.CONTENT_ID_COLUMN), ExchangeService.SYNC_PING, null);\n          }\n        } finally {\n          c.close();\n        }\n      }\n    }\n    return pp.getSyncStatus();\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1325, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 709, "focalAPIEnd": 753, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(value,int)", "cursor.getString(int)", "put(value,*)", "cursor.getString(int)", "add(value)"], "useStart": [695, 779, 763, 941, 924], "useEnd": [757, 823, 853, 985, 986], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/giletvin/ornidroid/tree/master/ornidroid/src/main/java/fr/ornidroid/service/OrnidroidServiceImpl.java", "rawCode": "  /**\n   * Load select fields from cursor, used to populate the Spinners and closes the cursor\n   *\n   * @param cursor the cursor from the DAO, from a select query on the fields ID and NAME\n   * @param intId true if the id to map from the database is an integer. If false, the id is a\n   *     String (like in the country table)\n   * @return the map, NAME (String)-> ID (Integer)\n   */\n  private SelectFieldsValue loadSelectFieldsFromCursor(final Cursor cursor, final boolean intId) {\n    final Map<String, Integer> mapNameId = new HashMap<String, Integer>();\n    final Map<String, String> mapNameCode = new HashMap<String, String>();\n    // init the map and the list with \"ALL\" with id = 0\n    mapNameId.put(this.activity.getString(R.string.search_all), 0);\n    mapNameCode.put(this.activity.getString(R.string.search_all), BasicConstants.EMPTY_STRING);\n\n    final List<String> fieldsValues = new ArrayList<String>();\n\n    fieldsValues.add(this.activity.getString(R.string.search_all));\n    if (cursor != null) {\n      final int nbResults = cursor.getCount();\n      for (int i = 0; i < nbResults; i++) {\n        cursor.moveToPosition(i);\n        final int idIndex = cursor.getColumnIndexOrThrow(IOrnidroidDAO.ID);\n        final int nameIndex = cursor.getColumnIndexOrThrow(IOrnidroidDAO.NAME_COLUMN_NAME);\n\n        if (intId) {\n          mapNameId.put(cursor.getString(nameIndex), cursor.getInt(idIndex));\n        } else {\n          // in this case, if the id is a string (country code)\n          mapNameCode.put(cursor.getString(nameIndex), cursor.getString(idIndex));\n        }\n        fieldsValues.add(cursor.getString(nameIndex));\n      }\n      cursor.close();\n    }\n    final SelectFieldsValue sfv = new SelectFieldsValue(mapNameId, mapNameCode, fieldsValues);\n    return sfv;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1326, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 654, "focalAPIEnd": 700, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 751, "finallyExpressionEnd": 759, "finallyBlockStart": 751, "finallyBlockEnd": 799, "cleanUpCallStart": [775], "cleanUpCallEnd": [784], "url": "https://github.com/faux123/android_packages_apps_Email/tree/master/src/com/android/exchange/adapter/EmailSyncAdapter.java", "rawCode": "    /*package*/ void deleteParser(ArrayList<Long> deletes, int entryTag) throws IOException {\n      while (nextTag(entryTag) != END) {\n        switch (tag) {\n          case Tags.SYNC_SERVER_ID:\n            String serverId = getValue();\n            // Find the message in this mailbox with the given serverId\n            Cursor c = getServerIdCursor(serverId, MESSAGE_ID_SUBJECT_PROJECTION);\n            try {\n              if (c.moveToFirst()) {\n                deletes.add(c.getLong(MESSAGE_ID_SUBJECT_ID_COLUMN));\n                if (Eas.USER_LOG) {\n                  userLog(\n                      \"Deleting \",\n                      serverId + \", \" + c.getString(MESSAGE_ID_SUBJECT_SUBJECT_COLUMN));\n                }\n              }\n            } finally {\n              c.close();\n            }\n            break;\n          default:\n            skipTag();\n        }\n      }\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1327, "initialization": ["int columnIndex = Cursor.getColumnIndex(String)"], "initializationStart": [580], "initializationEnd": [648], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)"], "configurationStart": [580, 673, 765, 855], "configurationEnd": [648, 736, 831, 917], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 946, "focalAPIEnd": 974, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "cursor.getString(int)"], "useStart": [923, 1006], "useEnd": [975, 1036], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bynkaa/PilotProject/tree/master/src/com/qsoft/pilotproject/adapter/CommentAdapter.java", "rawCode": "  @Override\n  public void bindView(View view, Context context, Cursor cursor) {\n    super.bindView(\n        view, context,\n        cursor); // To change body of overridden methods use File | Settings | File Templates.\n    TextView tvCommentTitle = (TextView) view.findViewById(R.id.tvCommentTitle);\n    TextView tvCommentContent = (TextView) view.findViewById(R.id.tvCommentContent);\n    TextView tvCommentTimeCreated = (TextView) view.findViewById(R.id.tvCommentTimeCreate);\n    ImageView ivCommentAvatar = (ImageView) view.findViewById(R.id.ivCommentIcon);\n    int titleIndex = cursor.getColumnIndex(OnlineDioContract.Comment.COLUMN_DISPLAY_NAME);\n    int contentIndex = cursor.getColumnIndex(OnlineDioContract.Comment.COLUMN_CONTENT);\n    int timeCreatedIndex = cursor.getColumnIndex(OnlineDioContract.Comment.COLUMN_CREATED_AT);\n    int avatarIndex = cursor.getColumnIndex(OnlineDioContract.Comment.COLUMN_AVATAR);\n    tvCommentTitle.setText(cursor.getString(titleIndex));\n    tvCommentContent.setText(cursor.getString(contentIndex));\n    // tvCommentTimeCreated.setText(Utilities.calculatorUpdateTime(cursor.getString(timeCreatedIndex)));\n    // imageLoader.DisplayImage(cursor.getString(avatarIndex), ivCommentAvatar,\n    // R.drawable.content_icon_comment);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1328, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 215, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)"], "useStart": [231, 247], "useEnd": [245, 261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kimcoop/SociaList/tree/master/src/zebrafish/util/DBHelper.java", "rawCode": "  public User getUserByID(int row) {\n\n    String myQuery = \"SELECT * FROM user WHERE id = \" + row;\n    Cursor c = db.rawQuery(myQuery, null);\n\n    if (c != null) c.moveToFirst();\n\n    User u = new User(c.getInt(0), c.getString(1), c.getString(2), c.getString(3));\n    // Log.i(\"DB USER\", \"Name is \" +u.getName());\n    c.close();\n    return u;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1329, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "columnIndex<mColumnCount", "guardType": "IF {", "guardExpressionStart": 154, "guardExpressionEnd": 180, "guardBlockStart": 154, "guardBlockEnd": 240, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 198, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Mms/tree/master/src/com/android/mms/SuggestionsProvider.java", "rawCode": "    public String getString(int column) {\n      // if we're returning one of the columns in the underlying database column\n      // then do so here\n      if (column < mColumnCount) {\n        return mDatabaseCursor.getString(column);\n      }\n\n      // otherwise we're returning one of the synthetic columns.\n      // the constants like INTENT_DATA_COLUMN are offsets relative to\n      // mColumnCount.\n      Row row = mRows.get(mCurrentRow);\n      switch (column - mColumnCount) {\n        case INTENT_DATA_COLUMN:\n          Uri.Builder b = Uri.parse(\"content://mms-sms/search\").buildUpon();\n          b = b.appendQueryParameter(\"pattern\", row.getSnippet());\n          Uri u = b.build();\n          return u.toString();\n        case INTENT_ACTION_COLUMN:\n          return Intent.ACTION_SEARCH;\n        case INTENT_EXTRA_DATA_COLUMN:\n          return row.getSnippet();\n        case INTENT_TEXT_COLUMN:\n          return row.getSnippet();\n        default:\n          return null;\n      }\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1330, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 93, "focalAPIEnd": 122, "followUpCheck": "value == null || value.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 128, "followUpCheckExpressionEnd": 171, "followUpCheckBlockStart": 128, "followUpCheckBlockEnd": 375, "use": ["value.charAt(int)"], "useStart": [242], "useEnd": [258], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/j256/ormlite-android/tree/master/src/main/java/com/j256/ormlite/android/AndroidDatabaseResults.java", "rawCode": "  @Override\n  public char getChar(int columnIndex) throws SQLException {\n    String string = cursor.getString(columnIndex);\n    if (string == null || string.length() == 0) {\n      return 0;\n    } else if (string.length() == 1) {\n      return string.charAt(0);\n    } else {\n      throw new SQLException(\"More than 1 character stored in database column: \" + columnIndex);\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1331, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 248, "focalAPIEnd": 262, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/vovo_android/src/com/lorent/LCCUtil.java", "rawCode": "  public SetupBean getRegisterInfo() {\n    Cursor c = getContentResolver().query(DBProvider.SIP_ACCOUNT_TB_URI, null, null, null, null);\n    SetupBean bean = new SetupBean();\n    if (c.getCount() > 0) {\n      c.moveToFirst();\n      bean.userName = c.getString(1);\n      bean.password = c.getString(2);\n      bean.sipip = c.getString(3);\n      bean.serverPort = Integer.parseInt(c.getString(4));\n      bean.width = Integer.parseInt(c.getString(5));\n      bean.height = Integer.parseInt(c.getString(6));\n      bean.bitrate = Integer.parseInt(c.getString(7));\n    }\n    c.close();\n    return bean;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1332, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 127, "tryExpressionEnd": 131, "tryBlockStart": 127, "tryBlockEnd": 367, "catchExpressionStart": 175, "catchExpressionEnd": 195, "catchBlockStart": 175, "catchBlockEnd": 367, "exceptionHandlingCallStart": [203], "exceptionHandlingCallEnd": [341], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(columnIndex==INVALID_INDEX)", "guardType": "IF {", "guardExpressionStart": 70, "guardExpressionEnd": 95, "guardBlockStart": 70, "guardBlockEnd": 122, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 146, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/widget/SuggestionsAdapter.java", "rawCode": "  private static String getStringOrNull(Cursor cursor, int col) {\n    if (col == INVALID_INDEX) {\n      return null;\n    }\n    try {\n      return cursor.getString(col);\n    } catch (Exception e) {\n      Log.e(\n          LOG_TAG,\n          \"unexpected error retrieving valid column from cursor, \" + \"did the remote process die?\",\n          e);\n      return null;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1333, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 247, "focalAPIEnd": 280, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TextView.setText(value)", "ContactsManagerDbAdater.getOnlineCountContactByGroupName(value)", "ContactsManagerDbAdater.getCountContactByGroupName(value)"], "useStart": [288, 414, 498], "useEnd": [312, 478, 556], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liwenhaosuper/SysOfIMPS/tree/master/IMPS/src/com/imps/activities/FriendTab.java", "rawCode": "    @Override\n    protected void bindGroupView(View view, Context context, Cursor cursor, boolean isExpanded) {\n      // TODO Auto-generated method stub\n      TextView groupName = (TextView) view.findViewById(R.id.groupName);\n      String group = cursor.getString(groupName_index);\n      groupName.setText(group);\n\n      TextView groupCount = (TextView) view.findViewById(R.id.groupCount);\n      int onlineCount = contactsManagerDbAdapter.getOnlineCountContactByGroupName(group);\n      int count = contactsManagerDbAdapter.getCountContactByGroupName(group);\n      groupCount.setText(\"[\" + onlineCount + \"/\" + count + \"]\");\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1334, "initialization": ["Cursor cursor = query(*,String[],*,*,*)"], "initializationStart": [370], "initializationEnd": [433], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [464], "configurationEnd": [481], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 439, "guardExpressionEnd": 455, "guardBlockStart": 439, "guardBlockEnd": 523, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 500, "focalAPIEnd": 516, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajkainthla/phonegap-plugins-all/tree/master/Android/OcrApiService/com/ocrapiservice/OcrApiServicePlugin.java", "rawCode": "  private String getFilePathFromResourcePath(String resourcePath) {\n    String filePath = \"\";\n    // Discussion about the warning\n    // http://simonmacdonald.blogspot.fr/2012/07/phonegap-android-plugins-sometimes-we.html\n    ContentResolver cr = this.cordova.getContext().getContentResolver();\n    String[] projection = {MediaStore.Images.Media.DATA};\n    Cursor cur = cr.query(Uri.parse(resourcePath), projection, null, null, null);\n    if (cur != null) {\n      cur.moveToFirst();\n      filePath = cur.getString(0);\n    }\n\n    return filePath;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1335, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToPosition(int)"], "configurationStart": [435], "configurationEnd": [468], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 474, "guardExpressionEnd": 509, "guardBlockStart": 474, "guardBlockEnd": 1145, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 532, "focalAPIEnd": 590, "followUpCheck": "value.equals(accountName)", "checkType": "IF", "followUpCheckExpressionStart": 757, "followUpCheckExpressionEnd": 876, "followUpCheckBlockStart": 757, "followUpCheckBlockEnd": 1139, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)"], "useStart": [612, 695, 902], "useEnd": [670, 749, 954], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninjanetworks/contacts/tree/master/src/com/android/contacts/editor/RawContactEditorView.java", "rawCode": "  /**\n   * Returns the default group (e.g. \"My Contacts\") for the current raw contact's account. Returns\n   * -1 if there is no such group.\n   */\n  private long getDefaultGroupId() {\n    String accountType = mState.getValues().getAsString(RawContacts.ACCOUNT_TYPE);\n    String accountName = mState.getValues().getAsString(RawContacts.ACCOUNT_NAME);\n    String accountDataSet = mState.getValues().getAsString(RawContacts.DATA_SET);\n    mGroupMetaData.moveToPosition(-1);\n    while (mGroupMetaData.moveToNext()) {\n      String name = mGroupMetaData.getString(GroupMetaDataLoader.ACCOUNT_NAME);\n      String type = mGroupMetaData.getString(GroupMetaDataLoader.ACCOUNT_TYPE);\n      String dataSet = mGroupMetaData.getString(GroupMetaDataLoader.DATA_SET);\n      if (name.equals(accountName)\n          && type.equals(accountType)\n          && Objects.equal(dataSet, accountDataSet)) {\n        long groupId = mGroupMetaData.getLong(GroupMetaDataLoader.GROUP_ID);\n        if (!mGroupMetaData.isNull(GroupMetaDataLoader.AUTO_ADD)\n            && mGroupMetaData.getInt(GroupMetaDataLoader.AUTO_ADD) != 0) {\n          return groupId;\n        }\n      }\n    }\n    return -1;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1336, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [375], "initializationEnd": [400], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 480, "focalAPIEnd": 499, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [505], "useEnd": [519], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Temp1ar/WhereIsMyMoney/tree/master/src/ru/spbau/WhereIsMyMoney2/storage/CardNameSource.java", "rawCode": "  public String getName(String id) {\n    SQLiteDatabase dbR = helper.getReadableDatabase();\n\n    String query =\n        \"SELECT \"\n            + CardNameHelper.COLUMN_NAME\n            + \" FROM \"\n            + CardNameHelper.TABLE_NAME\n            + \" WHERE \"\n            + CardNameHelper.COLUMN_ID\n            + \" = '\"\n            + id\n            + \"'\";\n\n    Cursor cursor = dbR.rawQuery(query, null);\n\n    if (!cursor.moveToFirst()) {\n      return null;\n    }\n\n    String name = cursor.getString(0);\n    cursor.close();\n    dbR.close();\n    return name;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1337, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 961, "focalAPIEnd": 980, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/allankin/gproject/tree/master/TXL/source/client/txl-android/src/txl/contact/dao/CommDirDao.java", "rawCode": "  /**\n   * 根据部门id获取公司通讯录用户\n   *\n   * @param depId\n   * @return\n   */\n  public List<CompanyUser> getCompUserList(String name, Integer depId) {\n    StringBuilder sql =\n        new StringBuilder(\n            \"select user_id,dep_id,name,user_phone,comp_id, \"\n                + \"position,comp_tel,virtual_tel,home_tel,email,\"\n                + \"qq,msn \"\n                + \"from txl_comp_user where 1=1 \");\n    if (depId != null && depId != 0) {\n      sql.append(\" and dep_id=\" + depId);\n    }\n    if (name != null && name.length() > 0) {\n      sql.append(\" and name like '%\" + name + \"%'\");\n    }\n\n    SQLiteDatabase db = dbHelper.getWritableDatabase();\n    Cursor cursor = db.rawQuery(sql.toString(), null);\n    List<CompanyUser> companyUserList = new ArrayList<CompanyUser>();\n    while (cursor.moveToNext()) {\n      CompanyUser compUser = new CompanyUser();\n      compUser.userId = cursor.getInt(0);\n      compUser.depId = cursor.getInt(1);\n      compUser.name = cursor.getString(2);\n      compUser.userPhone = cursor.getString(3);\n      compUser.compId = cursor.getInt(4);\n\n      compUser.position = cursor.getString(5);\n      compUser.compTel = cursor.getString(6);\n      compUser.virtualTel = cursor.getString(7);\n      compUser.homeTel = cursor.getString(8);\n      compUser.email = cursor.getString(9);\n      compUser.qq = cursor.getString(10);\n      compUser.msn = cursor.getString(11);\n      companyUserList.add(compUser);\n    }\n    log.info(\"getCompUserList .... size : \" + companyUserList.size());\n    cursor.close();\n    db.close();\n    return companyUserList;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1338, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 187, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TextView.setText(value)"], "useStart": [158], "useEnd": [207], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codejie/EL/tree/master/src/jie/android/el/fragment/ListFragment.java", "rawCode": "    @Override\n    public void bindView(View view, Context context, Cursor cursor) {\n\n      TextView idx = (TextView) view.findViewById(R.id.textIndex);\n      idx.setText(\"ESL Podcast \" + cursor.getString(0));\n\n      TextView title = (TextView) view.findViewById(R.id.textTitle);\n      title.setText(cursor.getString(1));\n\n      TextView duration = (TextView) view.findViewById(R.id.textDuration);\n      duration.setText(Utils.formatMSec(cursor.getInt(2) * 1000));\n\n      View icon = view.findViewById(R.id.imageView1);\n      if ((cursor.getInt(3) & ListItemFlag.LAST_PLAY) == ListItemFlag.LAST_PLAY) {\n        icon.setVisibility(View.VISIBLE);\n      } else {\n        icon.setVisibility(View.INVISIBLE);\n      }\n\n      view.setId(cursor.getInt(0));\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1339, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(columnIndex==INVALID_INDEX)", "guardType": "IF {", "guardExpressionStart": 49, "guardExpressionEnd": 84, "guardBlockStart": 49, "guardBlockEnd": 111, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 131, "focalAPIEnd": 162, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getDrawableFromResourceValue(value)", "getDefaultIcon1(cursor)"], "useStart": [188, 293], "useEnd": [223, 316], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java", "rawCode": "  private Drawable getIcon1(Cursor cursor) {\n    if (mIconName1Col == INVALID_INDEX) {\n      return null;\n    }\n    String value = cursor.getString(mIconName1Col);\n    Drawable drawable = getDrawableFromResourceValue(value);\n    if (drawable != null) {\n      return drawable;\n    }\n    return getDefaultIcon1(cursor);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1340, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 230, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getInt(int)", "cursor.getString(int)", "populateCommands(value,String,*,String,int)"], "useStart": [288, 349, 415, 516, 573, 807, 1078, 1557, 5713, 5663], "useEnd": [328, 389, 454, 549, 614, 848, 1117, 1597, 5746, 5776], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cens/ohmagePhone/tree/master/src/org/ohmage/activity/SurveyInfoActivity.java", "rawCode": "  @Override\n  public void onLoadFinished(Loader<Cursor> loader, Cursor data) {\n    // ensure that we're on the first record in the cursor\n    if (!data.moveToFirst()) return;\n\n    // populate the views\n    final String surveyID = data.getString(QueryParams.SURVEY_ID);\n    mSurveyTitle = data.getString(QueryParams.SURVEY_TITLE);\n    mCampaignUrn = data.getString(QueryParams.CAMPAIGN_URN);\n    String submitText = data.getString(QueryParams.SUBMIT_TEXT);\n\n    // set the header fields first\n    mHeadertext.setText(data.getString(QueryParams.TITLE));\n    mSubtext.setText(data.getString(QueryParams.CAMPAIGN_NAME));\n    // If we aren't in single campaign mode, show the campaign name\n    mSubtext.setVisibility((ConfigHelper.isSingleCampaignMode()) ? View.GONE : View.VISIBLE);\n\n    final String iconUrl = data.getString(QueryParams.CAMPAIGN_ICON);\n    if (iconUrl == null\n        || mImageLoader.bind(mIconView, iconUrl, null) != ImageLoader.BindResult.OK) {\n      mIconView.setImageResource(R.drawable.apple_logo);\n    }\n\n    // fill in the description\n    mDescView.setText(data.getString(QueryParams.DESCRIPTION));\n\n    // hide our error box; it'll become visible below (and filled w/text) if the status is\n    // appropriate\n    mErrorBox.setVisibility(View.GONE);\n\n    mCampaignUrnValue.setText(mCampaignUrn);\n\n    // set many things on the view according to the campaign status, too\n    mStatusValue.setCompoundDrawablesWithIntrinsicBounds(\n        R.drawable.website_status_other, 0, 0, 0); // start out a default gray sphere\n    mCampaignStatus = data.getInt(QueryParams.CAMPAIGN_STATUS);\n    switch (mCampaignStatus) {\n      case Campaign.STATUS_READY:\n        mStatusValue.setText(R.string.campaign_status_ready);\n        mStatusValue.setCompoundDrawablesWithIntrinsicBounds(R.drawable.website_running, 0, 0, 0);\n        break;\n      case Campaign.STATUS_VAGUE:\n        mStatusValue.setText(R.string.campaign_status_vague);\n        break;\n      case Campaign.STATUS_REMOTE:\n        mStatusValue.setText(R.string.campaign_status_remote);\n        break;\n      case Campaign.STATUS_OUT_OF_DATE:\n        mStatusValue.setText(R.string.campaign_status_out_of_date);\n        mErrorBox.setVisibility(View.VISIBLE);\n        mErrorBox.setText(Html.fromHtml(getString(R.string.campaign_info_errorbox_outofdate)));\n        break;\n      case Campaign.STATUS_NO_EXIST:\n        mStatusValue.setText(R.string.campaign_status_no_exist);\n        mErrorBox.setVisibility(View.VISIBLE);\n        mErrorBox.setText(Html.fromHtml(getString(R.string.campaign_info_errorbox_no_exist)));\n        break;\n      case Campaign.STATUS_STOPPED:\n        mStatusValue.setText(R.string.campaign_status_stopped);\n        mStatusValue.setCompoundDrawablesWithIntrinsicBounds(R.drawable.website_stopped, 0, 0, 0);\n        mErrorBox.setVisibility(View.VISIBLE);\n        mErrorBox.setText(Html.fromHtml(getString(R.string.campaign_info_errorbox_stopped)));\n        break;\n      case Campaign.STATUS_INVALID_USER_ROLE:\n        mStatusValue.setText(R.string.campaign_status_invalid_user_role);\n        mErrorBox.setVisibility(View.VISIBLE);\n        mErrorBox.setText(Html.fromHtml(getString(R.string.campaign_info_errorbox_invalid_role)));\n        break;\n      case Campaign.STATUS_DOWNLOADING:\n        mStatusValue.setText(R.string.campaign_status_downloading);\n        break;\n      default:\n        mStatusValue.setText(R.string.campaign_status_unknown);\n        break;\n    }\n\n    // create an observer to watch the responses table for changes (hopefully)\n    mResponsesObserver =\n        new ContentObserver(mHandler) {\n          @Override\n          public void onChange(boolean selfChange) {\n            // TODO Auto-generated method stub\n            super.onChange(selfChange);\n\n            // set the responses by querying the response table\n            // and getting the number of responses submitted for this campaign\n            Cursor responses =\n                getContentResolver()\n                    .query(\n                        Campaigns.buildResponsesUri(mCampaignUrn, surveyID),\n                        null,\n                        null,\n                        null,\n                        Responses.RESPONSE_DATE);\n            mResponsesValue.setText(\n                getResources()\n                    .getQuantityString(\n                        R.plurals.campaign_info_response_count,\n                        responses.getCount(),\n                        responses.getCount()));\n\n            // also get the date of the last submitted response and populate the last response field\n            if (responses.moveToLast()) {\n              String lastResponseDate =\n                  responses.getString(responses.getColumnIndex(Responses.RESPONSE_DATE));\n              SimpleDateFormat fromUTC = new SimpleDateFormat(\"yyyy-MM-dd k:mm:ss\");\n              SimpleDateFormat toNice = new SimpleDateFormat(\"EEE MMM d yyyy, h:mm a\");\n\n              try {\n                mLastResponseValue.setText(toNice.format(fromUTC.parse(lastResponseDate)));\n              } catch (ParseException e) {\n                mLastResponseValue.setText(\"(not available)\");\n              }\n            } else mLastResponseValue.setText(\"(not available)\");\n\n            responses.close();\n          }\n        };\n\n    // register it to listen for newly submitted responses\n    getContentResolver().registerContentObserver(Responses.CONTENT_URI, true, mResponsesObserver);\n    // and trigger it once to refresh right now\n    mResponsesObserver.onChange(false);\n\n    // get the number of triggers for this survey\n    setTriggerCount();\n\n    // and finally populate the action bar + command tray\n    populateCommands(\n        surveyID, mCampaignUrn, data.getString(QueryParams.TITLE), submitText, mCampaignStatus);\n\n    // and make the entity header visible (although i assume it already was)\n    mEntityHeader.setVisibility(View.VISIBLE);\n\n    // finally, show our content\n    setLoadingVisibility(false);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1341, "initialization": ["Cursor cursor = query(String,String[],String,String[],*,*,*)"], "initializationStart": [110], "initializationEnd": [191], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 197, "guardExpressionEnd": 222, "guardBlockStart": 197, "guardBlockEnd": 456, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 316, "focalAPIEnd": 335, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIddepartamento(value)", "cursor.getString(int)"], "useStart": [285, 370], "useEnd": [336, 389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/darklord777/ProyectoCargaAcademica/tree/master/cargaAcademicaEISI/src/sv/ues/fia/cargaacademicaeisi/ControlDB.java", "rawCode": "  public Departamento consultarDepto(String idepto) {\n    String[] id = {idepto};\n    Cursor cursor =\n        db.query(\"DEPARTAMENTO\", camposDepto, \"IDDEPARTAMENTO = ?\", id, null, null, null);\n    if (cursor.moveToFirst()) {\n      Departamento departamento = new Departamento();\n      departamento.setIddepartamento(cursor.getString(0));\n      departamento.setNom_depto(cursor.getString(1));\n      return departamento;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1342, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(columnIndex==INVALID_INDEX)", "guardType": "IF {", "guardExpressionStart": 49, "guardExpressionEnd": 84, "guardBlockStart": 49, "guardBlockEnd": 111, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 131, "focalAPIEnd": 162, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getDrawableFromResourceValue(value)"], "useStart": [175], "useEnd": [210], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java", "rawCode": "  private Drawable getIcon2(Cursor cursor) {\n    if (mIconName2Col == INVALID_INDEX) {\n      return null;\n    }\n    String value = cursor.getString(mIconName2Col);\n    return getDrawableFromResourceValue(value);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1343, "initialization": ["Cursor cursor = AdapterView<?>.getItemAtPosition(int)"], "initializationStart": [720], "initializationEnd": [756], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 819, "focalAPIEnd": 838, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["EditText.setText(value)"], "useStart": [887], "useEnd": [919], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dayana7789/apprhc/tree/master/src/com/nahmens/rhcimax/adapters/AutocompleteEmpleadoCursorAdapter.java", "rawCode": "  /**\n   * Called by the AutoCompleteTextView field when a choice has been made by the user. Aqui\n   * actualizamos el valor del text edit escondido que almacena el id de la empresa.\n   *\n   * @param listView The ListView containing the choices that were displayed to the user.\n   * @param view The field representing the selected choice\n   * @param position The position of the choice within the list (0-based)\n   * @param id The id of the row that was chosen (as provided by the _id column in the cursor.)\n   */\n  @Override\n  public void onItemClick(AdapterView<?> listView, View view, int position, long id) {\n\n    // Get the cursor, positioned to the corresponding row in the result set\n    Cursor cursor = (Cursor) listView.getItemAtPosition(position);\n\n    // Obtenemos el id del empleado\n    String idEmpleado = cursor.getString(0);\n\n    // Update the parent class's TextView\n    etIdEmpleado.setText(idEmpleado);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1344, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 166, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamSourcery/packages_apps_Contacts/tree/master/src/com/android/contacts/SplitAggregateView.java", "rawCode": "  private void loadNickname(Cursor cursor, RawContactInfo info) {\n    if (info.nickname == null || cursor.getInt(SplitQuery.IS_PRIMARY) != 0) {\n      info.nickname = cursor.getString(SplitQuery.NICKNAME);\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1345, "initialization": ["Cursor cursor = query(Uri,*,*,*,*)"], "initializationStart": [704], "initializationEnd": [815], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.moveToFirst()"], "configurationStart": [834, 862], "configurationEnd": [851, 882], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 899, "focalAPIEnd": 918, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.equals(String)", "cursor.getCount()", "cursor.getCount()", "cursor.getCount()"], "useStart": [899, 1831, 2824, 3602], "useEnd": [935, 1848, 2841, 3619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johanbrook/watchme/tree/master/WatchMeTest/src/se/chalmers/watchmetest/database/WatchMeContentProviderTest.java", "rawCode": "  public void testInsert() {\n    ContentValues values = new ContentValues();\n\n    /*\n     * Test insert into uri_movie\n     */\n    values.put(MoviesTable.COLUMN_TITLE, \"batman\");\n    values.put(MoviesTable.COLUMN_RATING, 1);\n    values.put(MoviesTable.COLUMN_NOTE, \"\");\n    values.put(MoviesTable.COLUMN_DATE, 0);\n    values.put(MoviesTable.COLUMN_IMDB_ID, 0);\n    values.put(MoviesTable.COLUMN_POSTER_LARGE, \"\");\n    values.put(MoviesTable.COLUMN_POSTER_SMALL, \"\");\n\n    Uri tmpUri = contentResolver.insert(uri_movies, values);\n    long movieId = Long.parseLong(tmpUri.getLastPathSegment());\n    // Check that the id of the movie was returned.\n    assertTrue(movieId != 0);\n\n    Cursor cursor =\n        contentResolver.query(\n            uri_movies, null, MoviesTable.COLUMN_MOVIE_ID + \" = \" + movieId, null, null);\n    assertEquals(cursor.getCount(), 1);\n\n    cursor.moveToFirst();\n    assertTrue(cursor.getString(1).equals(\"batman\"));\n\n    /*\n     * Test insert the movie with the same title into uri_movie\n     */\n    values = new ContentValues();\n\n    values.put(MoviesTable.COLUMN_TITLE, \"batman\");\n    values.put(MoviesTable.COLUMN_RATING, 1);\n    values.put(MoviesTable.COLUMN_NOTE, \"\");\n    values.put(MoviesTable.COLUMN_DATE, 0);\n    values.put(MoviesTable.COLUMN_IMDB_ID, 0);\n    values.put(MoviesTable.COLUMN_POSTER_LARGE, \"\");\n    values.put(MoviesTable.COLUMN_POSTER_SMALL, \"\");\n\n    tmpUri = contentResolver.insert(uri_movies, values);\n    long zeroId = Long.parseLong(tmpUri.getLastPathSegment());\n\n    // If the movie already existed insert should return 0.\n    assertEquals(zeroId, 0);\n\n    // Confirms that there exist one and only one movie with the title 'batman'\n    cursor =\n        contentResolver.query(\n            uri_movies, null, MoviesTable.COLUMN_TITLE + \" = 'batman'\", null, null);\n    assertEquals(cursor.getCount(), 1);\n\n    /*\n     * Test insert into uri_tag\n     */\n    values = new ContentValues();\n\n    values.put(TagsTable.COLUMN_NAME, \"tag\");\n    try {\n      tmpUri = contentResolver.insert(uri_tags, values);\n      Assert.fail(\"Should throw UnsupportedOperationException\");\n    } catch (UnsupportedOperationException e) {\n    }\n\n    /*\n     * Test insert into uri_hastag\n     */\n    values = new ContentValues();\n\n    values.put(MoviesTable.COLUMN_MOVIE_ID, movieId);\n    values.put(TagsTable.COLUMN_NAME, \"tag\");\n    tmpUri = contentResolver.insert(uri_hastag, values);\n    long tagId = Long.parseLong(tmpUri.getLastPathSegment());\n\n    cursor =\n        contentResolver.query(\n            uri_hastag,\n            null,\n            HasTagTable.COLUMN_MOVIE_ID\n                + \" = \"\n                + movieId\n                + \" AND \"\n                + HasTagTable.COLUMN_TAG_ID\n                + \" = \"\n                + tagId,\n            null,\n            null);\n    assertEquals(cursor.getCount(), 1);\n\n    /*\n     * Attach a tag to a movie it is already attached to.\n     */\n    tmpUri = contentResolver.insert(uri_hastag, values);\n    zeroId = Long.parseLong(tmpUri.getLastPathSegment());\n\n    // If the attachment already existed insert should return 0.\n    assertEquals(zeroId, 0);\n\n    cursor =\n        contentResolver.query(\n            uri_hastag,\n            null,\n            HasTagTable.COLUMN_MOVIE_ID\n                + \" = \"\n                + movieId\n                + \" AND \"\n                + HasTagTable.COLUMN_TAG_ID\n                + \" = \"\n                + tagId,\n            null,\n            null);\n    /* Confirms that there exist one and only one attachment between the\n     * movie 'batman' and the tag 'tag'\n     */\n    assertEquals(cursor.getCount(), 1);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1346, "initialization": ["Cursor cursor = getContext()"], "initializationStart": [678], "initializationEnd": [690], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 784, "guardExpressionEnd": 804, "guardBlockStart": 784, "guardBlockEnd": 1036, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 835, "focalAPIEnd": 874, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "inferMimeType(String,value)", "cursor.close()"], "useStart": [904, 965, 1063], "useEnd": [942, 998, 1072], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1045, "finallyExpressionEnd": 1053, "finallyBlockStart": 1045, "finallyBlockEnd": 1081, "cleanUpCallStart": [1063], "cleanUpCallEnd": [1072], "url": "https://github.com/mtwebster/IEmail/tree/master/src/com/mwebster/iemail/provider/AttachmentProvider.java", "rawCode": "  /**\n   * Returns the mime type for a given attachment. There are three possible results: - If thumbnail\n   * Uri, always returns \"image/png\" (even if there's no attachment) - If the attachment does not\n   * exist, returns null - Returns the mime type of the attachment\n   */\n  @Override\n  public String getType(Uri uri) {\n    List<String> segments = uri.getPathSegments();\n    String accountId = segments.get(0);\n    String id = segments.get(1);\n    String format = segments.get(2);\n    if (FORMAT_THUMBNAIL.equals(format)) {\n      return \"image/png\";\n    } else {\n      uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, Long.parseLong(id));\n      Cursor c =\n          getContext().getContentResolver().query(uri, MIME_TYPE_PROJECTION, null, null, null);\n      try {\n        if (c.moveToFirst()) {\n          String mimeType = c.getString(MIME_TYPE_COLUMN_MIME_TYPE);\n          String fileName = c.getString(MIME_TYPE_COLUMN_FILENAME);\n          mimeType = inferMimeType(fileName, mimeType);\n          return mimeType;\n        }\n      } finally {\n        c.close();\n      }\n      return null;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1347, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "columnIndex<row.length", "guardType": "LOOP {", "guardExpressionStart": 374, "guardExpressionEnd": 410, "guardBlockStart": 374, "guardBlockEnd": 462, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 432, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 526, "finallyExpressionEnd": 534, "finallyBlockStart": 526, "finallyBlockEnd": 563, "cleanUpCallStart": [542], "cleanUpCallEnd": [556], "url": "https://github.com/TeamNyx/packages_apps_Contacts/tree/master/src/com/android/contacts/list/ProfileAndContactsLoader.java", "rawCode": "  /** Loads the profile into a MatrixCursor. */\n  private MatrixCursor loadProfile() {\n    Cursor cursor =\n        getContext().getContentResolver().query(Profile.CONTENT_URI, mProjection, null, null, null);\n    try {\n      MatrixCursor matrix = new MatrixCursor(mProjection);\n      Object[] row = new Object[mProjection.length];\n      while (cursor.moveToNext()) {\n        for (int i = 0; i < row.length; i++) {\n          row[i] = cursor.getString(i);\n        }\n        matrix.addRow(row);\n      }\n      return matrix;\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1348, "initialization": ["Cursor cursor = SQLiteDatabase.rawQuery(String,String[])"], "initializationStart": [350], "initializationEnd": [468], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["e(*,String,*)"], "tryExpressionStart": 319, "tryExpressionEnd": 323, "tryBlockStart": 319, "tryBlockEnd": 1855, "catchExpressionStart": 1656, "catchExpressionEnd": 1679, "catchBlockStart": 1656, "catchBlockEnd": 1779, "exceptionHandlingCallStart": [1687], "exceptionHandlingCallEnd": [1753], "configuration": ["cursor.getBlob(int)"], "configurationStart": [667], "configurationEnd": [684], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1409, "focalAPIEnd": 1428, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,value)", "cursor.getInt(int)", "cursor.getInt(int)", "cursor.getString(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [1378, 1464, 1516, 1555, 1598, 1826], "useEnd": [1429, 1480, 1532, 1574, 1617, 1840], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1780, "finallyExpressionEnd": 1788, "finallyBlockStart": 1780, "finallyBlockEnd": 1855, "cleanUpCallStart": [1826], "cleanUpCallEnd": [1840], "url": "https://github.com/bestehle/SeapalAndroidApp/tree/master/TouchDB-Android/src/com/couchbase/touchdb/TDDatabase.java", "rawCode": "  /** Constructs an \"_attachments\" dictionary for a revision, to be inserted in its JSON body. */\n  public Map<String, Object> getAttachmentsDictForSequenceWithContent(\n      long sequence, boolean withContent) {\n    assert (sequence > 0);\n\n    Cursor cursor = null;\n\n    String args[] = {Long.toString(sequence)};\n    try {\n      cursor =\n          database.rawQuery(\n              \"SELECT filename, key, type, length, revpos FROM attachments WHERE sequence=?\", args);\n\n      if (!cursor.moveToFirst()) {\n        return null;\n      }\n\n      Map<String, Object> result = new HashMap<String, Object>();\n\n      while (!cursor.isAfterLast()) {\n\n        byte[] keyData = cursor.getBlob(1);\n        TDBlobKey key = new TDBlobKey(keyData);\n        String digestString = \"sha1-\" + Base64.encodeBytes(keyData);\n        String dataBase64 = null;\n        if (withContent) {\n          byte[] data = attachments.blobForKey(key);\n          if (data != null) {\n            dataBase64 = Base64.encodeBytes(data);\n          } else {\n            Log.w(TDDatabase.TAG, \"Error loading attachment\");\n          }\n        }\n\n        Map<String, Object> attachment = new HashMap<String, Object>();\n        if (dataBase64 == null) {\n          attachment.put(\"stub\", true);\n        } else {\n          attachment.put(\"data\", dataBase64);\n        }\n        attachment.put(\"digest\", digestString);\n        attachment.put(\"content_type\", cursor.getString(2));\n        attachment.put(\"length\", cursor.getInt(3));\n        attachment.put(\"revpos\", cursor.getInt(4));\n\n        result.put(cursor.getString(0), attachment);\n\n        cursor.moveToNext();\n      }\n\n      return result;\n\n    } catch (SQLException e) {\n      Log.e(TDDatabase.TAG, \"Error getting attachments for sequence\", e);\n      return null;\n    } finally {\n      if (cursor != null) {\n        cursor.close();\n      }\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1349, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [72], "configurationEnd": [89], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 109, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getDouble(int)", "cursor.getDouble(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getLong(int)", "cursor.getString(int)", "new FavouritesDAO(long,value,double,double,String,long,long,String)"], "useStart": [152, 196, 236, 280, 326, 362, 394], "useEnd": [171, 215, 255, 297, 343, 381, 493], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jstakun/gms-world-client/tree/master/GMSLib/src/com/jstakun/gms/android/data/FavouritesDbDataSource.java", "rawCode": "  private FavouritesDAO cursorToLandmark(Cursor cursor) {\n    long id = cursor.getLong(0);\n    String name = cursor.getString(1);\n    double latitude = cursor.getDouble(2);\n    double longitude = cursor.getDouble(3);\n    String layer = cursor.getString(4);\n    long maxDistance = cursor.getLong(5);\n    long lastCheckinDate = cursor.getLong(6);\n    String key = cursor.getString(7);\n    return new FavouritesDAO(\n        id, name, latitude, longitude, layer, maxDistance, lastCheckinDate, key);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1350, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "CursorIndexOutOfBoundsException", "exceptionHandlingCall": ["toString()", "e(String,String)"], "tryExpressionStart": 366, "tryExpressionEnd": 370, "tryBlockStart": 366, "tryBlockEnd": 565, "catchExpressionStart": 408, "catchExpressionEnd": 450, "catchBlockStart": 408, "catchBlockEnd": 565, "exceptionHandlingCallStart": [482, 458], "exceptionHandlingCallEnd": [494, 514], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 386, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ccard/csci422FinalProject/tree/master/To_DoList/src/csci422/CandN/to_dolist/ToDoHelper.java", "rawCode": "  /**\n   * This returns list the task is in of task in cursor\n   *\n   * @note the cursor that is passed into this must be generated from either getAll or getById\n   * @param c the cursor that contains (or marks) the place of the task\n   * @return string containing the list the task is associated with\n   */\n  public String getList(Cursor c) {\n    String datum;\n    try {\n      datum = c.getString(3);\n    } catch (CursorIndexOutOfBoundsException e) {\n      Log.e(tag, \"Cursor: \" + c.toString() + \" Out of bounds\");\n      datum = \"Error: Can't read database\";\n    }\n    return datum;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1351, "initialization": ["Cursor cursor = rawQuery(*,*)"], "initializationStart": [193], "initializationEnd": [234], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 252, "guardExpressionEnd": 279, "guardBlockStart": 252, "guardBlockEnd": 990, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 311, "focalAPIEnd": 360, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "put(*,value)", "updateSetting(SQLiteDatabase,value,String,ContentValues)", "cursor.close()"], "useStart": [391, 465, 548, 929, 1013], "useEnd": [440, 513, 622, 981, 1027], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 997, "finallyExpressionEnd": 1005, "finallyBlockStart": 997, "finallyBlockEnd": 1034, "cleanUpCallStart": [1013], "cleanUpCallEnd": [1027], "url": "https://github.com/javroch/android_packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/LegacyApiSupport.java", "rawCode": "  /** Brings legacy settings table in sync with the new settings. */\n  public void copySettingsToLegacySettings() {\n    SQLiteDatabase db = mDbHelper.getWritableDatabase();\n    Cursor cursor = db.rawQuery(SettingsMatchQuery.SQL, null);\n    try {\n      while (cursor.moveToNext()) {\n        String accountName = cursor.getString(SettingsMatchQuery.ACCOUNT_NAME);\n        String accountType = cursor.getString(SettingsMatchQuery.ACCOUNT_TYPE);\n        String value = cursor.getString(SettingsMatchQuery.SHOULD_SYNC);\n        mValues.clear();\n        mValues.put(android.provider.Contacts.Settings._SYNC_ACCOUNT, accountName);\n        mValues.put(android.provider.Contacts.Settings._SYNC_ACCOUNT_TYPE, accountType);\n        mValues.put(\n            android.provider.Contacts.Settings.KEY,\n            android.provider.Contacts.Settings.SYNC_EVERYTHING);\n        mValues.put(android.provider.Contacts.Settings.VALUE, value);\n        updateSetting(db, accountName, accountType, mValues);\n      }\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1352, "initialization": ["Cursor cursor = query(Uri,String[],*,*,*)", "Cursor cursor = query(Uri,String[],*,*,*)"], "initializationStart": [1567, 1694], "initializationEnd": [1612, 1741], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()"], "configurationStart": [1838], "configurationEnd": [1858], "guardCondition": "cursor!=null&&cursor.getCount()==1", "guardType": "IF {", "guardExpressionStart": 1778, "guardExpressionEnd": 1823, "guardBlockStart": 1778, "guardBlockEnd": 1976, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1879, "focalAPIEnd": 1898, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [2041], "useEnd": [2055], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1987, "finallyExpressionEnd": 1995, "finallyBlockStart": 1987, "finallyBlockEnd": 2078, "cleanUpCallStart": [2041], "cleanUpCallEnd": [2055], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/media/java/android/media/Ringtone.java", "rawCode": "  private static String getTitle(Context context, Uri uri, boolean followSettingsUri) {\n    Cursor cursor = null;\n    ContentResolver res = context.getContentResolver();\n\n    String title = null;\n\n    if (uri != null) {\n      String authority = uri.getAuthority();\n\n      if (Settings.AUTHORITY.equals(authority)) {\n        if (followSettingsUri) {\n          Uri actualUri =\n              RingtoneManager.getActualDefaultRingtoneUri(\n                  context, RingtoneManager.getDefaultType(uri));\n          String actualTitle = getTitle(context, actualUri, false);\n          title =\n              context.getString(\n                  com.android.internal.R.string.ringtone_default_with_actual, actualTitle);\n        }\n      } else if (RingtoneManager.THEME_AUTHORITY.equals(authority)) {\n        Uri themes = Uri.parse(\"content://com.tmobile.thememanager.themes/themes\");\n        title =\n            stringForQuery(\n                res.query(\n                    themes,\n                    new String[] {\"ringtone_name\"},\n                    \"ringtone_uri = ?\",\n                    new String[] {uri.toString()},\n                    null));\n        if (title == null) {\n          title =\n              stringForQuery(\n                  res.query(\n                      themes,\n                      new String[] {\"notif_ringtone_name\"},\n                      \"notif_ringtone_uri = ?\",\n                      new String[] {uri.toString()},\n                      null));\n        }\n      } else {\n        if (DrmStore.AUTHORITY.equals(authority)) {\n          cursor = res.query(uri, DRM_COLUMNS, null, null, null);\n        } else if (MediaStore.AUTHORITY.equals(authority)) {\n          cursor = res.query(uri, MEDIA_COLUMNS, null, null, null);\n        }\n\n        try {\n          if (cursor != null && cursor.getCount() == 1) {\n            cursor.moveToFirst();\n            return cursor.getString(2);\n          } else {\n            title = uri.getLastPathSegment();\n          }\n        } finally {\n          if (cursor != null) {\n            cursor.close();\n          }\n        }\n      }\n    }\n\n    if (title == null) {\n      title = context.getString(com.android.internal.R.string.ringtone_unknown);\n\n      if (title == null) {\n        title = \"\";\n      }\n    }\n\n    return title;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1353, "initialization": ["Cursor cursor = query(*,String[],*,*,*,*,String)"], "initializationStart": [761], "initializationEnd": [956], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 965, "guardExpressionEnd": 992, "guardBlockStart": 965, "guardBlockEnd": 1843, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1055, "focalAPIEnd": 1074, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["massageHistoryField(value)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)", "close(cursor,SQLiteDatabase)"], "useStart": [1035, 1151, 1247, 1343, 1448, 1796, 1892], "useEnd": [1075, 1170, 1266, 1362, 1465, 1815, 1909], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 1876, "finallyExpressionEnd": 1884, "finallyBlockStart": 1876, "finallyBlockEnd": 1916, "cleanUpCallStart": [1892], "cleanUpCallEnd": [1909], "url": "https://github.com/naoric/my_card/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  /**\n   * Builds a text representation of the scanning history. Each scan is encoded on one line,\n   * terminated by a line break (\\r\\n). The values in each line are comma-separated, and\n   * double-quoted. Double-quotes within values are escaped with a sequence of two double-quotes.\n   * The fields output are:\n   *\n   * <ul>\n   *   <li>Raw text\n   *   <li>Display text\n   *   <li>Format (e.g. QR_CODE)\n   *   <li>Timestamp\n   *   <li>Formatted version of timestamp\n   * </ul>\n   */\n  CharSequence buildHistory() {\n    StringBuilder historyText = new StringBuilder(1000);\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getWritableDatabase();\n      cursor =\n          db.query(\n              DBHelper.TABLE_NAME,\n              COLUMNS,\n              null,\n              null,\n              null,\n              null,\n              DBHelper.TIMESTAMP_COL + \" DESC\");\n\n      while (cursor.moveToNext()) {\n\n        historyText.append('\"').append(massageHistoryField(cursor.getString(0))).append(\"\\\",\");\n        historyText.append('\"').append(massageHistoryField(cursor.getString(1))).append(\"\\\",\");\n        historyText.append('\"').append(massageHistoryField(cursor.getString(2))).append(\"\\\",\");\n        historyText.append('\"').append(massageHistoryField(cursor.getString(3))).append(\"\\\",\");\n\n        // Add timestamp again, formatted\n        long timestamp = cursor.getLong(3);\n        historyText\n            .append('\"')\n            .append(massageHistoryField(EXPORT_DATE_TIME_FORMAT.format(new Date(timestamp))))\n            .append(\"\\\",\");\n\n        // Above we're preserving the old ordering of columns which had formatted data in position 5\n\n        historyText.append('\"').append(massageHistoryField(cursor.getString(4))).append(\"\\\"\\r\\n\");\n      }\n      return historyText;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1354, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 174, "tryExpressionEnd": 178, "tryBlockStart": 174, "tryBlockEnd": 682, "catchExpressionStart": 572, "catchExpressionEnd": 592, "catchBlockStart": 572, "catchBlockEnd": 626, "exceptionHandlingCallStart": [600], "exceptionHandlingCallEnd": [619], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "columnIndex<len", "guardType": "LOOP {", "guardExpressionStart": 417, "guardExpressionEnd": 446, "guardBlockStart": 417, "guardBlockEnd": 527, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 496, "focalAPIEnd": 515, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Cursor.close()", "SQLiteDatabase.close()"], "finallyExpressionStart": 627, "finallyExpressionEnd": 635, "finallyBlockStart": 627, "finallyBlockEnd": 682, "cleanUpCallStart": [643, 665], "cleanUpCallEnd": [657, 675], "url": "https://github.com/yinchuandong/Library/tree/master/src/com/gw/library/base/BaseSqlite.java", "rawCode": "  public ArrayList<HashMap<String, String>> query(String sql, String[] args) {\n    ArrayList<HashMap<String, String>> rowList = new ArrayList<HashMap<String, String>>();\n    try {\n      db = dbh.getReadableDatabase();\n      cursor = db.rawQuery(sql, args);\n      while (cursor.moveToNext()) {\n        HashMap<String, String> colList = new HashMap<String, String>();\n        int len = cursor.getColumnCount();\n        for (int i = 0; i < len; i++) {\n          colList.put(cursor.getColumnName(i), cursor.getString(i));\n        }\n        rowList.add(colList);\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      cursor.close();\n      db.close();\n    }\n    return rowList;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1355, "initialization": ["int columnIndex = Cursor.getColumnIndexOrThrow(String)"], "initializationStart": [84], "initializationEnd": [119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)"], "configurationStart": [84], "configurationEnd": [119], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 140, "focalAPIEnd": 158, "followUpCheck": "value != null && value.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 164, "followUpCheckExpressionEnd": 204, "followUpCheckBlockStart": 164, "followUpCheckBlockEnd": 264, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mondhs/spantus/tree/master/externals/integration/android/spnt-android/src/com/ringdroid/SongMetadataReader.java", "rawCode": "  private String getStringFromColumn(Cursor c, String columnName) {\n    int index = c.getColumnIndexOrThrow(columnName);\n    String value = c.getString(index);\n    if (value != null && value.length() > 0) {\n      return value;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1356, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [112], "initializationEnd": [168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 174, "guardExpressionEnd": 201, "guardBlockStart": 174, "guardBlockEnd": 303, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 250, "focalAPIEnd": 269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createFileByPath(value)", "cursor.close()"], "useStart": [226, 308], "useEnd": [270, 322], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/TextReader/src/org/geometerplus/android/fbreader/library/SQLiteBooksDatabase.java", "rawCode": "  private void updateTables4() {\n    final FileInfoSet fileInfos = new FileInfoSet();\n    final Cursor cursor = myDatabase.rawQuery(\"SELECT file_name FROM Books\", null);\n    while (cursor.moveToNext()) {\n      fileInfos.check(ZLFile.createFileByPath(cursor.getString(0)).getPhysicalFile(), false);\n    }\n    cursor.close();\n    fileInfos.save();\n\n    myDatabase.execSQL(\n        \"CREATE TABLE IF NOT EXISTS RecentBooks(\"\n            + \"book_index INTEGER PRIMARY KEY,\"\n            + \"book_id INTEGER REFERENCES Books(book_id))\");\n    final ArrayList<Long> ids = new ArrayList<Long>();\n\n    final SQLiteStatement statement =\n        myDatabase.compileStatement(\"SELECT book_id FROM Books WHERE file_name = ?\");\n\n    for (int i = 0; i < 20; ++i) {\n      final ZLStringOption option = new ZLStringOption(\"LastOpenedBooks\", \"Book\" + i, \"\");\n      final String fileName = option.getValue();\n      option.setValue(\"\");\n      try {\n        statement.bindString(1, fileName);\n        final long bookId = statement.simpleQueryForLong();\n        if (bookId != -1) {\n          ids.add(bookId);\n        }\n      } catch (SQLException e) {\n      }\n    }\n    saveRecentBookIds(ids);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1357, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [297], "initializationEnd": [353], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 359, "guardExpressionEnd": 386, "guardBlockStart": 359, "guardBlockEnd": 486, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 433, "focalAPIEnd": 452, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createFileByPath(value)", "cursor.close()", "cursor.getLong(int)", "cursor.getString(int)", "cursor.close()"], "useStart": [409, 491, 928, 1011, 1299], "useEnd": [453, 505, 945, 1030, 1313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/TextReader/src/org/geometerplus/android/fbreader/library/SQLiteBooksDatabase.java", "rawCode": "  private void updateTables6() {\n    myDatabase.execSQL(\"ALTER TABLE Bookmarks ADD COLUMN model_id TEXT\");\n\n    myDatabase.execSQL(\"ALTER TABLE Books ADD COLUMN file_id INTEGER\");\n\n    myDatabase.execSQL(\"DELETE FROM Files\");\n    final FileInfoSet infoSet = new FileInfoSet();\n    Cursor cursor = myDatabase.rawQuery(\"SELECT file_name FROM Books\", null);\n    while (cursor.moveToNext()) {\n      infoSet.check(ZLFile.createFileByPath(cursor.getString(0)).getPhysicalFile(), false);\n    }\n    cursor.close();\n    infoSet.save();\n\n    cursor = myDatabase.rawQuery(\"SELECT book_id,file_name FROM Books\", null);\n    final SQLiteStatement deleteStatement =\n        myDatabase.compileStatement(\"DELETE FROM Books WHERE book_id = ?\");\n    final SQLiteStatement updateStatement =\n        myDatabase.compileStatement(\"UPDATE OR IGNORE Books SET file_id = ? WHERE book_id = ?\");\n    while (cursor.moveToNext()) {\n      final long bookId = cursor.getLong(0);\n      final long fileId = infoSet.getId(ZLFile.createFileByPath(cursor.getString(1)));\n\n      if (fileId == -1) {\n        deleteStatement.bindLong(1, bookId);\n        deleteStatement.execute();\n      } else {\n        updateStatement.bindLong(1, fileId);\n        updateStatement.bindLong(2, bookId);\n        updateStatement.execute();\n      }\n    }\n    cursor.close();\n\n    myDatabase.execSQL(\"ALTER TABLE Books RENAME TO Books_Obsolete\");\n    myDatabase.execSQL(\n        \"CREATE TABLE IF NOT EXISTS Books(\"\n            + \"book_id INTEGER PRIMARY KEY,\"\n            + \"encoding TEXT,\"\n            + \"language TEXT,\"\n            + \"title TEXT NOT NULL,\"\n            + \"file_id INTEGER UNIQUE NOT NULL REFERENCES Files(file_id))\");\n    myDatabase.execSQL(\n        \"INSERT INTO Books (book_id,encoding,language,title,file_id) SELECT book_id,encoding,language,title,file_id FROM Books_Obsolete\");\n    myDatabase.execSQL(\"DROP TABLE Books_Obsolete\");\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1358, "initialization": ["Cursor cursor = rawQuery(String,*)"], "initializationStart": [860], "initializationEnd": [924], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [1146], "configurationEnd": [1163], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 1090, "guardExpressionEnd": 1117, "guardBlockStart": 1090, "guardBlockEnd": 1885, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1195, "focalAPIEnd": 1214, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ZLIntegerOption(value,String,int)", "new ZLIntegerOption(value,String,int)", "new ZLIntegerOption(value,String,int)", "new ZLIntegerOption(value,String,int)", "removeGroup(value)", "cursor.close()"], "useStart": [1243, 1336, 1429, 1516, 1837, 1890], "useEnd": [1295, 1393, 1481, 1568, 1878, 1904], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/TextReader/src/org/geometerplus/android/fbreader/library/SQLiteBooksDatabase.java", "rawCode": "  private void updateTables5() {\n    myDatabase.execSQL(\n        \"CREATE TABLE IF NOT EXISTS Bookmarks(\"\n            + \"bookmark_id INTEGER PRIMARY KEY,\"\n            + \"book_id INTEGER NOT NULL REFERENCES Books(book_id),\"\n            + \"bookmark_text TEXT NOT NULL,\"\n            + \"creation_time INTEGER NOT NULL,\"\n            + \"modification_time INTEGER,\"\n            + \"access_time INTEGER,\"\n            + \"access_counter INTEGER NOT NULL,\"\n            + \"paragraph INTEGER NOT NULL,\"\n            + \"word INTEGER NOT NULL,\"\n            + \"char INTEGER NOT NULL)\");\n\n    myDatabase.execSQL(\n        \"CREATE TABLE IF NOT EXISTS BookState(\"\n            + \"book_id INTEGER UNIQUE NOT NULL REFERENCES Books(book_id),\"\n            + \"paragraph INTEGER NOT NULL,\"\n            + \"word INTEGER NOT NULL,\"\n            + \"char INTEGER NOT NULL)\");\n    Cursor cursor = myDatabase.rawQuery(\"SELECT book_id,file_name FROM Books\", null);\n    final SQLiteStatement statement =\n        myDatabase.compileStatement(\n            \"INSERT INTO BookState (book_id,paragraph,word,char) VALUES (?,?,?,?)\");\n    while (cursor.moveToNext()) {\n      final long bookId = cursor.getLong(0);\n      final String fileName = cursor.getString(1);\n      final int position = new ZLIntegerOption(fileName, \"PositionInBuffer\", 0).getValue();\n      final int paragraph = new ZLIntegerOption(fileName, \"Paragraph_\" + position, 0).getValue();\n      final int word = new ZLIntegerOption(fileName, \"Word_\" + position, 0).getValue();\n      final int chr = new ZLIntegerOption(fileName, \"Char_\" + position, 0).getValue();\n      if ((paragraph != 0) || (word != 0) || (chr != 0)) {\n        statement.bindLong(1, bookId);\n        statement.bindLong(2, paragraph);\n        statement.bindLong(3, word);\n        statement.bindLong(4, chr);\n        statement.execute();\n      }\n      ZLConfig.Instance().removeGroup(fileName);\n    }\n    cursor.close();\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1359, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 175, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.moveToLast()", "cursor.getString(int)", "cursor.getString(int)", "value.equals(*)"], "useStart": [417, 553, 830, 898, 880], "useEnd": [443, 578, 862, 931, 932], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/apps/RockLock/src/com/marvin/rocklock/navigation/SongPicker.java", "rawCode": "  /**\n   * Moves music cursor to next valid position\n   *\n   * @return true if we looped in this move\n   */\n  public boolean navigateTracks(int dir) {\n    String currentKey = mMusicCursor.getString(TITLE_KEY);\n    boolean valid = true;\n    boolean hasLooped = false;\n    do {\n\n      boolean success = true;\n      // Move according to direction\n      if (dir > 0) {\n        if (!mMusicCursor.moveToNext()) {\n          mMusicCursor.moveToFirst();\n          success = false;\n        }\n      } else {\n        if (!mMusicCursor.moveToPrevious()) {\n          mMusicCursor.moveToLast();\n          success = false;\n        }\n      }\n      // Make sure we are not looping in search of valid files\n      if (!success) {\n        if (hasLooped) {\n          return false;\n        }\n        hasLooped = true;\n      }\n      File test = new File(mMusicCursor.getString(FILEPATH));\n      valid = !currentKey.equals(mMusicCursor.getString(TITLE_KEY)) && test.exists();\n    } while (!valid);\n    return !hasLooped;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1360, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [548], "initializationEnd": [592], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null && cursor.moveToNext()", "guardType": "IF {", "guardExpressionStart": 689, "guardExpressionEnd": 708, "guardBlockStart": 689, "guardBlockEnd": 941, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 785, "focalAPIEnd": 804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()", "storeFilePathForContentUri(value,String)"], "useStart": [848, 989], "useEnd": [862, 1061], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 828, "finallyExpressionEnd": 836, "finallyBlockStart": 828, "finallyBlockEnd": 873, "cleanUpCallStart": [848], "cleanUpCallEnd": [862], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/webkit/WebViewCore.java", "rawCode": "  /**\n   * Called by JNI. Open a file chooser to upload a file.\n   *\n   * @param acceptType The value of the 'accept' attribute of the input tag associated with this\n   *     file picker.\n   * @return String version of the URI.\n   */\n  private String openFileChooser(String acceptType) {\n    Uri uri = mCallbackProxy.openFileChooser(acceptType);\n    if (uri != null) {\n      String filePath = \"\";\n      // Note - querying for MediaStore.Images.Media.DATA\n      // seems to work for all content URIs, not just images\n      Cursor cursor =\n          mContext\n              .getContentResolver()\n              .query(uri, new String[] {MediaStore.Images.Media.DATA}, null, null, null);\n      if (cursor != null) {\n        try {\n          if (cursor.moveToNext()) {\n            filePath = cursor.getString(0);\n          }\n        } finally {\n          cursor.close();\n        }\n      } else {\n        filePath = uri.getLastPathSegment();\n      }\n      String uriString = uri.toString();\n      BrowserFrame.sJavaBridge.storeFilePathForContentUri(filePath, uriString);\n      return uriString;\n    }\n    return \"\";\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1361, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 327, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Palatis/danbooru-gallery-android/tree/master/DanbooruGallery/src/main/java/tw/idv/palatis/danboorugallery/siteapi/ShimmieAPI.java", "rawCode": "  @Override\n  public Post getPostFromCursor(Host host, Cursor post_cursor, Cursor tags_cursor) {\n    String[] tags;\n    if (tags_cursor != null) {\n      tags_cursor.moveToPosition(-1);\n      tags = new String[tags_cursor.getCount()];\n      while (tags_cursor.moveToNext())\n        tags[tags_cursor.getPosition()] =\n            tags_cursor.getString(PostTagsView.INDEX_KEY_POST_TAG_TAG_NAME);\n    } else tags = new String[0];\n    return new ShimmiePost(\n        host,\n        post_cursor.getInt(PostsTable.INDEX_POST_POST_ID),\n        post_cursor.getInt(PostsTable.INDEX_POST_IMAGE_WIDTH),\n        post_cursor.getInt(PostsTable.INDEX_POST_IMAGE_HEIGHT),\n        new Date(post_cursor.getLong(PostsTable.INDEX_POST_CREATED_AT)),\n        new Date(post_cursor.getLong(PostsTable.INDEX_POST_UPDATED_AT)),\n        post_cursor.getInt(PostsTable.INDEX_POST_FILE_SIZE),\n        post_cursor.getString(PostsTable.INDEX_POST_FILE_URL),\n        post_cursor.getString(PostsTable.INDEX_POST_LARGE_FILE_URL),\n        post_cursor.getString(PostsTable.INDEX_POST_PREVIEW_FILE_URL),\n        tags,\n        post_cursor.getString(PostsTable.INDEX_POST_RATING),\n        post_cursor.getString(PostsTable.INDEX_POST_EXTRA_INFO));\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1362, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 195, "focalAPIEnd": 242, "followUpCheck": "value.equals(previousGroupAccountName)", "checkType": "IF", "followUpCheckExpressionStart": 1213, "followUpCheckExpressionEnd": 1378, "followUpCheckBlockStart": 1213, "followUpCheckBlockEnd": 1427, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)", "cursor.getInt(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "new GroupListItem(value,String,String,long,String,boolean,int)"], "useStart": [269, 339, 403, 465, 529, 987, 1076, 1161, 1446], "useEnd": [316, 382, 444, 505, 573, 1034, 1123, 1204, 1559], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/packages_apps_Contacts/tree/master/src/com/android/contacts/group/GroupBrowseListAdapter.java", "rawCode": "  @Override\n  public GroupListItem getItem(int position) {\n    if (mCursor == null || mCursor.isClosed() || !mCursor.moveToPosition(position)) {\n      return null;\n    }\n    String accountName = mCursor.getString(GroupListLoader.ACCOUNT_NAME);\n    String accountType = mCursor.getString(GroupListLoader.ACCOUNT_TYPE);\n    String dataSet = mCursor.getString(GroupListLoader.DATA_SET);\n    long groupId = mCursor.getLong(GroupListLoader.GROUP_ID);\n    String title = mCursor.getString(GroupListLoader.TITLE);\n    int memberCount = mCursor.getInt(GroupListLoader.MEMBER_COUNT);\n\n    // Figure out if this is the first group for this account name / account type pair by\n    // checking the previous entry. This is to determine whether or not we need to display an\n    // account header in this item.\n    int previousIndex = position - 1;\n    boolean isFirstGroupInAccount = true;\n    if (previousIndex >= 0 && mCursor.moveToPosition(previousIndex)) {\n      String previousGroupAccountName = mCursor.getString(GroupListLoader.ACCOUNT_NAME);\n      String previousGroupAccountType = mCursor.getString(GroupListLoader.ACCOUNT_TYPE);\n      String previousGroupDataSet = mCursor.getString(GroupListLoader.DATA_SET);\n\n      if (accountName.equals(previousGroupAccountName)\n          && accountType.equals(previousGroupAccountType)\n          && Objects.equal(dataSet, previousGroupDataSet)) {\n        isFirstGroupInAccount = false;\n      }\n    }\n\n    return new GroupListItem(\n        accountName, accountType, dataSet, groupId, title, isFirstGroupInAccount, memberCount);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1363, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [106], "configurationEnd": [123], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 149, "focalAPIEnd": 168, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setComment(value)"], "useStart": [130], "useEnd": [169], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/insidepower/eclipseandroid/tree/master/learning/MyApplicationProject/sqliteDataAccessObject/src/main/java/com/example/sqliteDataAccessObject/CommentsDataSource.java", "rawCode": "  private Comment cursorToComment(Cursor cursor) {\n    Comment comment = new Comment();\n    comment.setId(cursor.getLong(0));\n    comment.setComment(cursor.getString(1));\n    return comment;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1364, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [928], "configurationEnd": [942], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1240, "focalAPIEnd": 1266, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getByIds(value,boolean)"], "useStart": [1297], "useEnd": [1343], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Mms/tree/master/src/com/android/mms/data/Conversation.java", "rawCode": "  /**\n   * Fill the specified conversation with the values from the specified cursor, possibly setting\n   * recipients to empty if {@value allowQuery} is false and the recipient IDs are not in cache. The\n   * cursor should be one made via {@link #startQueryForAll}.\n   */\n  private static void fillFromCursor(\n      Context context, Conversation conv, Cursor c, boolean allowQuery) {\n    synchronized (conv) {\n      conv.mThreadId = c.getLong(ID);\n      conv.mDate = c.getLong(DATE);\n      conv.mMessageCount = c.getInt(MESSAGE_COUNT);\n\n      // Replace the snippet with a default value if it's empty.\n      String snippet =\n          MessageUtils.cleanseMmsSubject(\n              context, MessageUtils.extractEncStrFromCursor(c, SNIPPET, SNIPPET_CS));\n      if (TextUtils.isEmpty(snippet)) {\n        snippet = context.getString(R.string.no_subject_view);\n      }\n      conv.mSnippet = snippet;\n\n      conv.setHasUnreadMessages(c.getInt(READ) == 0);\n      conv.mHasError = (c.getInt(ERROR) != 0);\n      conv.mHasAttachment = (c.getInt(HAS_ATTACHMENT) != 0);\n    }\n    // Fill in as much of the conversation as we can before doing the slow stuff of looking\n    // up the contacts associated with this conversation.\n    String recipientIds = c.getString(RECIPIENT_IDS);\n    ContactList recipients = ContactList.getByIds(recipientIds, allowQuery);\n    synchronized (conv) {\n      conv.mRecipients = recipients;\n    }\n\n    if (Log.isLoggable(LogTag.THREAD_CACHE, Log.VERBOSE)) {\n      Log.d(TAG, \"fillFromCursor: conv=\" + conv + \", recipientIds=\" + recipientIds);\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1365, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 2594, "focalAPIEnd": 2613, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)"], "useStart": [2615], "useEnd": [2634], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/valfom/sports-tracker/tree/master/src/com/valfom/sports/tracker/TrackerMapInfoFragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n    mapView = new MapView(getActivity(), \"0gXrA3OG3rX_KPSAWRCG_dSHPmZnlnnmLRUssxg\");\n    MapController mapController = mapView.getController();\n\n    mapController.setZoom(15);\n\n    mapView.setSatellite(false);\n\n    vBtnMap = getLayoutInflater(savedInstanceState).inflate(R.layout.map_btn_map, null);\n    vBtnLock = getLayoutInflater(savedInstanceState).inflate(R.layout.map_btn_lock, null);\n\n    final ImageButton btnMap = (ImageButton) vBtnMap.findViewById(R.id.btnMap);\n\n    btnMap.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            mapView.setSatellite(!mapView.isSatellite());\n\n            btnMap.setImageResource(\n                mapView.isSatellite() ? R.drawable.ic_map : R.drawable.ic_satellite);\n          }\n        });\n\n    final ImageButton btnLock = (ImageButton) vBtnLock.findViewById(R.id.btnLock);\n\n    btnLock.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            ((TrackerInfoActivity) getActivity())\n                .viewPager.setSwipingEnabled(\n                    !((TrackerInfoActivity) getActivity()).viewPager.isSwipingEnabled());\n\n            btnLock.setImageResource(\n                ((TrackerInfoActivity) getActivity()).viewPager.isSwipingEnabled()\n                    ? R.drawable.ic_map_locked\n                    : R.drawable.ic_map_unlocked);\n\n            mapView.setClickable(!mapView.isClickable());\n          }\n        });\n\n    mapView.addView(vBtnMap);\n    mapView.addView(vBtnLock);\n\n    Intent intent = getActivity().getIntent();\n    int trackId = intent.getIntExtra(\"trackId\", -1);\n\n    if (trackId != -1) {\n\n      List<Overlay> mapOverlays = mapView.getOverlays();\n\n      mapOverlays.add(new TrackerRouteOverlay(trackId, true));\n\n      TrackerDB db = new TrackerDB(getActivity());\n\n      Cursor cursor = db.getAllMarkers(trackId);\n\n      if (cursor.getCount() > 0) {\n\n        Drawable marker = getResources().getDrawable(R.drawable.ic_marker);\n\n        TrackerItemizedOverlay itemizedOverlay =\n            new TrackerItemizedOverlay(marker, mapView.getContext(), false);\n\n        for (boolean hasItem = cursor.moveToFirst(); hasItem; hasItem = cursor.moveToNext()) {\n\n          GeoPoint geoPoint = new GeoPoint(cursor.getInt(1), cursor.getInt(2));\n\n          TrackerOverlayItem overlayItem =\n              new TrackerOverlayItem(\n                  cursor.getInt(0), geoPoint, cursor.getString(3), cursor.getString(4));\n\n          itemizedOverlay.addOverlay(overlayItem);\n        }\n\n        mapOverlays.add(itemizedOverlay);\n      }\n    }\n\n    return mapView;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1366, "initialization": ["Cursor cursor = query(*,*,*,*,*)"], "initializationStart": [630], "initializationEnd": [710], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 773, "guardExpressionEnd": 800, "guardBlockStart": 773, "guardBlockEnd": 898, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 839, "focalAPIEnd": 858, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Account(value)", "cursor.close()"], "useStart": [827, 903], "useEnd": [859, 917], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jakenjarvis/Android-OrmLiteContentProvider/tree/master/ormlite-content-provider-library-test/src/com/tojc/ormlite/android/TestOrmLiteSimpleProvider.java", "rawCode": "  public void testContentProviderAcquisition() throws RemoteException {\n    // given\n    Account account1 = new Account(TEST_NAME_1);\n    Account account2 = new Account(TEST_NAME_2);\n    RuntimeExceptionDao<Account, Integer> simpleDao =\n        getHelper().getRuntimeExceptionDao(Account.class);\n    simpleDao.create(account1);\n    simpleDao.create(account2);\n    List<Account> accountList = simpleDao.queryForAll();\n    assertEquals(2, accountList.size());\n\n    // when\n    ContentProviderClient contentProviderClient =\n        this.resolver.acquireContentProviderClient(AccountContract.CONTENT_URI);\n    Cursor cursor =\n        contentProviderClient.query(AccountContract.CONTENT_URI, null, null, null, null);\n\n    // then\n    accountList = new ArrayList<Account>();\n    while (cursor.moveToNext()) {\n      Account account = new Account(cursor.getString(1));\n      accountList.add(account);\n    }\n    cursor.close();\n    contentProviderClient.release();\n\n    assertEquals(2, accountList.size());\n    assertEquals(TEST_NAME_1, accountList.get(0).getName());\n    assertEquals(TEST_NAME_2, accountList.get(1).getName());\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1367, "initialization": ["Cursor cursor = query(String,String[],*,*,String,*,*)"], "initializationStart": [1034], "initializationEnd": [1091], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getInt(int)"], "configurationStart": [1408], "configurationEnd": [1424], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 1294, "guardExpressionEnd": 1321, "guardBlockStart": 1294, "guardBlockEnd": 2733, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1457, "focalAPIEnd": 1476, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setName(value)", "cursor.getLong(int)", "cursor.getString(int)", "cursor.getInt(int)", "cursor.close()"], "useStart": [1437, 1514, 1576, 2669, 2817], "useEnd": [1477, 1531, 1595, 2685, 2831], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 2767, "finallyExpressionEnd": 2775, "finallyBlockStart": 2767, "finallyBlockEnd": 2850, "cleanUpCallStart": [2817], "cleanUpCallEnd": [2831], "url": "https://github.com/nolanlawson/KeepScore/tree/master/KeepScore/src/com/nolanlawson/keepscore/db/GameDBHelper.java", "rawCode": "  public List<GameSummary> findAllGameSummaries() {\n    synchronized (GameDBHelper.class) {\n      String[] columns = {\n        \"g.\" + COLUMN_ID,\n        \"g.\" + COLUMN_NAME,\n        \"g.\" + COLUMN_DATE_SAVED,\n        // player names; the \"separator\" is a trick to ensure that we can cleanly separate the\n        // response,\n        // and put it into the proper order, since group_concat is always unordered in sqlite\n        \"group_concat((ps.name || '\"\n            + GROUP_CONCAT_INNER_SEPARATOR\n            + \"' || ps.playerNumber), '\"\n            + GROUP_CONCAT_SEPARATOR\n            + \"')\",\n        \"max(length(ps.history) - length(replace(ps.history, ',', '')) + 1)\" // num rounds\n      };\n\n      String table =\n          TABLE_GAMES\n              + \" g join \"\n              + TABLE_PLAYER_SCORES\n              + \" ps \"\n              + \" on g.\"\n              + COLUMN_ID\n              + \" = ps.\"\n              + COLUMN_GAME_ID;\n      String groupBy = \"g.\" + COLUMN_ID;\n\n      Cursor cursor = null;\n\n      try {\n\n        cursor = db.query(table, columns, null, null, groupBy, null, null);\n\n        List<GameSummary> result = new ArrayList<GameSummary>();\n\n        // re-use sparse array for performance\n        SparseArray<String> playerNumbersToNames = new SparseArray<String>();\n\n        while (cursor.moveToNext()) {\n          GameSummary gameSummary = new GameSummary();\n\n          gameSummary.setId(cursor.getInt(0));\n          gameSummary.setName(cursor.getString(1));\n          gameSummary.setDateSaved(cursor.getLong(2));\n\n          String playerNumbersAndNames = cursor.getString(3);\n          // sort by player number, get player names in order (no way to do this in sqlite,\n          // unfortunately)\n\n          playerNumbersToNames.clear();\n          for (String playerNumberAndName :\n              StringUtil.split(playerNumbersAndNames, GROUP_CONCAT_SEPARATOR)) {\n            int idx = playerNumberAndName.indexOf(GROUP_CONCAT_INNER_SEPARATOR);\n            String playerName = playerNumberAndName.substring(0, idx);\n            int playerNumber =\n                Integer.parseInt(\n                    playerNumberAndName.substring(idx + GROUP_CONCAT_INNER_SEPARATOR.length()));\n            playerNumbersToNames.put(playerNumber, playerName);\n          }\n          List<String> playerNames = new ArrayList<String>(playerNumbersToNames.size());\n          for (int i = 0, len = playerNumbersToNames.size(); i < len; i++) {\n            int playerNumber = playerNumbersToNames.keyAt(i);\n            playerNames.add(playerNumbersToNames.get(playerNumber));\n          }\n          gameSummary.setPlayerNames(playerNames);\n\n          gameSummary.setNumRounds(cursor.getInt(4));\n\n          result.add(gameSummary);\n        }\n\n        return result;\n\n      } finally {\n        if (cursor != null) {\n          cursor.close();\n        }\n      }\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1368, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [3123], "initializationEnd": [3143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 3466, "focalAPIEnd": 3485, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["onPickActivityResult(value)"], "useStart": [3419], "useEnd": [3486], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_Phone/tree/master/src/com/android/phone/CallFeaturesSetting.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // there are cases where the contact picker may end up sending us more than one\n    // request. We want to ignore the request if we're not in the correct state.\n    if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {\n      boolean failure = false;\n\n      // No matter how the processing of result goes lets clear the flag\n      if (DBG) log(\"mVMProviderSettingsForced: \" + mVMProviderSettingsForced);\n      final boolean isVMProviderSettingsForced = mVMProviderSettingsForced;\n      mVMProviderSettingsForced = false;\n\n      String vmNum = null;\n      if (resultCode != RESULT_OK) {\n        if (DBG) log(\"onActivityResult: vm provider cfg result not OK.\");\n        failure = true;\n      } else {\n        if (data == null) {\n          if (DBG) log(\"onActivityResult: vm provider cfg result has no data\");\n          failure = true;\n        } else {\n          if (data.getBooleanExtra(SIGNOUT_EXTRA, false)) {\n            if (DBG) log(\"Provider requested signout\");\n            if (isVMProviderSettingsForced) {\n              if (DBG) log(\"Going back to previous provider on signout\");\n              switchToPreviousVoicemailProvider();\n            } else {\n              final String victim = getCurrentVoicemailProviderKey();\n              if (DBG) log(\"Relaunching activity and ignoring \" + victim);\n              Intent i = new Intent(ACTION_ADD_VOICEMAIL);\n              i.putExtra(IGNORE_PROVIDER_EXTRA, victim);\n              i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n              this.startActivity(i);\n            }\n            return;\n          }\n          vmNum = data.getStringExtra(VM_NUMBER_EXTRA);\n          if (vmNum == null || vmNum.length() == 0) {\n            if (DBG) log(\"onActivityResult: vm provider cfg result has no vmnum\");\n            failure = true;\n          }\n        }\n      }\n      if (failure) {\n        if (DBG) log(\"Failure in return from voicemail provider\");\n        if (isVMProviderSettingsForced) {\n          switchToPreviousVoicemailProvider();\n        } else {\n          if (DBG) log(\"Not switching back the provider since this is not forced config\");\n        }\n        return;\n      }\n      mChangingVMorFwdDueToProviderChange = isVMProviderSettingsForced;\n      final String fwdNum = data.getStringExtra(FWD_NUMBER_EXTRA);\n\n      // TODO(iliat): It would be nice to load the current network setting for this and\n      // send it to the provider when it's config is invoked so it can use this as default\n      final int fwdNumTime = data.getIntExtra(FWD_NUMBER_TIME_EXTRA, 20);\n\n      if (DBG)\n        log(\n            \"onActivityResult: vm provider cfg result \"\n                + (fwdNum != null ? \"has\" : \" does not have\")\n                + \" forwarding number\");\n      saveVoiceMailAndForwardingNumber(\n          getCurrentVoicemailProviderKey(),\n          new VoiceMailProviderSettings(vmNum, fwdNum, fwdNumTime));\n      return;\n    }\n\n    if (resultCode != RESULT_OK) {\n      if (DBG) log(\"onActivityResult: contact picker result not OK.\");\n      return;\n    }\n\n    Cursor cursor = getContentResolver().query(data.getData(), NUM_PROJECTION, null, null, null);\n    if ((cursor == null) || (!cursor.moveToFirst())) {\n      if (DBG) log(\"onActivityResult: bad contact data, no results found.\");\n      return;\n    }\n\n    switch (requestCode) {\n      case VOICEMAIL_PREF_ID:\n        mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));\n        break;\n      default:\n        // TODO: may need exception here.\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1369, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [123], "configurationEnd": [165], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 188, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)"], "useStart": [256, 322, 386, 450, 512], "useEnd": [301, 365, 429, 491, 555], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sisbell/email/tree/master/emailcommon/src/com/android/emailcommon/provider/EmailContent.java", "rawCode": "    @Override\n    public void restore(Cursor cursor) {\n      mBaseUri = EmailContent.Body.CONTENT_URI;\n      mMessageKey = cursor.getLong(CONTENT_MESSAGE_KEY_COLUMN);\n      mHtmlContent = cursor.getString(CONTENT_HTML_CONTENT_COLUMN);\n      mTextContent = cursor.getString(CONTENT_TEXT_CONTENT_COLUMN);\n      mHtmlReply = cursor.getString(CONTENT_HTML_REPLY_COLUMN);\n      mTextReply = cursor.getString(CONTENT_TEXT_REPLY_COLUMN);\n      mSourceKey = cursor.getLong(CONTENT_SOURCE_KEY_COLUMN);\n      mIntroText = cursor.getString(CONTENT_INTRO_TEXT_COLUMN);\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1370, "initialization": ["Cursor cursor = query(Context,ContentResolver,*,String[],String,*,String)"], "initializationStart": [212], "initializationEnd": [429], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(cursor==null) && !(!(cursor.moveToFirst()))", "guardType": "IF {", "guardExpressionStart": 436, "guardExpressionEnd": 455, "guardBlockStart": 436, "guardBlockEnd": 482, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 582, "focalAPIEnd": 618, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getLong(int)", "cursor.getLong(int)", "cursor.getCount()", "getNewMessageNotificationInfo(value,String,Context,*,*,long,long,*)", "cursor.getLong(int)", "cursor.close()"], "useStart": [640, 697, 755, 1054, 831, 1160, 1245], "useEnd": [673, 729, 782, 1071, 1072, 1192, 1259], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1229, "finallyExpressionEnd": 1237, "finallyBlockStart": 1229, "finallyBlockEnd": 1266, "cleanUpCallStart": [1245], "cleanUpCallEnd": [1259], "url": "https://github.com/erikwt/ParandroidMessaging/tree/master/src/org/parandroid/sms/transaction/MessagingNotification.java", "rawCode": "  public static final MmsSmsNotificationInfo getSmsNewMessageNotificationInfo(\n      Context context, Set<Long> threads) {\n    ContentResolver resolver = context.getContentResolver();\n    Cursor cursor =\n        SqliteWrapper.query(\n            context,\n            resolver,\n            Sms.CONTENT_URI,\n            SMS_STATUS_PROJECTION,\n            NEW_INCOMING_SM_CONSTRAINT,\n            null,\n            Sms.DATE + \" desc\");\n\n    if (cursor == null) {\n      return null;\n    }\n\n    try {\n      if (!cursor.moveToFirst()) {\n        return null;\n      }\n\n      String address = cursor.getString(COLUMN_SMS_ADDRESS);\n      String body = cursor.getString(COLUMN_SMS_BODY);\n      long threadId = cursor.getLong(COLUMN_THREAD_ID);\n      long timeMillis = cursor.getLong(COLUMN_DATE);\n\n      MmsSmsNotificationInfo info =\n          getNewMessageNotificationInfo(\n              address,\n              body,\n              context,\n              R.drawable.stat_notify_sms,\n              null,\n              threadId,\n              timeMillis,\n              cursor.getCount());\n\n      threads.add(threadId);\n      while (cursor.moveToNext()) {\n        threads.add(cursor.getLong(COLUMN_THREAD_ID));\n      }\n\n      return info;\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1371, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getPosition()"], "configurationStart": [115], "configurationEnd": [140], "guardCondition": "cursor.moveToNext() && !(cursor.getString(columnIndex,).equals(currentArtist,))", "guardType": "LOOP {", "guardExpressionStart": 146, "guardExpressionEnd": 178, "guardBlockStart": 146, "guardBlockEnd": 345, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 192, "focalAPIEnd": 221, "followUpCheck": "!cursor.getString(columnIndex).equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 441, "followUpCheckExpressionEnd": 498, "followUpCheckBlockStart": 441, "followUpCheckBlockEnd": 593, "use": ["cursor.moveToFirst()", "cursor.getString(int)", "cursor.moveToNext()", "cursor.getString(int)"], "useStart": [350, 446, 600, 652], "useEnd": [375, 475, 624, 681], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/documentation/RockLockTutorial/RockLock_00/src/com/marvin/rocklock/TagStructuredSongPicker.java", "rawCode": "  public String goNextArtist() {\n    if (!taggedMusicAvailable) {\n      return \"\";\n    }\n    int initialPosition = musicCursor.getPosition();\n    while (musicCursor.moveToNext()) {\n      if (!musicCursor.getString(ARTIST).equals(currentArtist)) {\n        currentArtist = musicCursor.getString(ARTIST);\n        return currentArtist;\n      }\n    }\n    musicCursor.moveToFirst();\n    while (musicCursor.getPosition() < initialPosition) {\n      if (!musicCursor.getString(ARTIST).equals(currentArtist)) {\n        currentArtist = musicCursor.getString(ARTIST);\n        return currentArtist;\n      }\n      musicCursor.moveToNext();\n    }\n    currentArtist = musicCursor.getString(ARTIST);\n    return currentArtist;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1372, "initialization": ["Cursor cursor = query(String,String[],*,*,*,*,*)"], "initializationStart": [358], "initializationEnd": [425], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null&&cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 432, "guardExpressionEnd": 477, "guardBlockStart": 432, "guardBlockEnd": 522, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 495, "focalAPIEnd": 514, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)", "cursor.close()"], "useStart": [486, 528], "useEnd": [515, 542], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ese-unibe-ch/ese2013-team3/tree/master/WordFinder/src/ch/unibe/scg/team3/localDatabase/WordlistHandler.java", "rawCode": "  /**\n   * @return All wordlist ids that are in the database. The ArrayList holds Strings for easier\n   *     conversion to CharSequence[] in the PreferencesActivity.\n   * @see PreferencesActivity\n   */\n  public ArrayList<String> getWordlistIds() {\n\n    ArrayList<String> list = new ArrayList<String>();\n\n    String[] columns = {COL_ID};\n    Cursor cursor = helper.query(TABLE_WORDLIST, columns, null, null, null, null, null);\n\n    while (cursor != null && cursor.moveToNext()) {\n      list.add(cursor.getString(0));\n    }\n\n    cursor.close();\n    return list;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1373, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 48, "focalAPIEnd": 62, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bybeet/csci498android/tree/master/LunchList/src/csci498/bybeet/lunchlist/RestaurantHelper.java", "rawCode": "  public String getPhone(Cursor c) {\n    return c.getString(8);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1374, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IllegalStateException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 357, "tryExpressionEnd": 361, "tryBlockStart": 357, "tryBlockEnd": 791, "catchExpressionStart": 632, "catchExpressionEnd": 664, "catchBlockStart": 632, "catchBlockEnd": 743, "exceptionHandlingCallStart": [672], "exceptionHandlingCallEnd": [709], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 589, "focalAPIEnd": 603, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 744, "finallyExpressionEnd": 752, "finallyBlockStart": 744, "finallyBlockEnd": 791, "cleanUpCallStart": [775], "cleanUpCallEnd": [784], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/provider/Browser.java", "rawCode": "  /**\n   * Returns all the URLs in the history. Requires {@link\n   * android.Manifest.permission#READ_HISTORY_BOOKMARKS}\n   *\n   * @param cr The ContentResolver used to access the database.\n   * @hide pending API council approval\n   */\n  public static final String[] getVisitedHistory(ContentResolver cr) {\n    Cursor c = null;\n    String[] str = null;\n    try {\n      String[] projection = new String[] {\"url\"};\n      c = cr.query(BOOKMARKS_URI, projection, \"visits > 0\", null, null);\n      str = new String[c.getCount()];\n      int i = 0;\n      while (c.moveToNext()) {\n        str[i] = c.getString(0);\n        i++;\n      }\n    } catch (IllegalStateException e) {\n      Log.e(LOGTAG, \"getVisitedHistory\", e);\n      str = new String[0];\n    } finally {\n      if (c != null) c.close();\n    }\n    return str;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1375, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 426, "tryExpressionEnd": 430, "tryBlockStart": 426, "tryBlockEnd": 561, "catchExpressionStart": 493, "catchExpressionEnd": 517, "catchBlockStart": 493, "catchBlockEnd": 561, "exceptionHandlingCallStart": [531], "exceptionHandlingCallEnd": [554], "configuration": ["cursor.moveToPosition(int)"], "configurationStart": [356], "configurationEnd": [389], "guardCondition": "!(cursor==null)", "guardType": "IF {", "guardExpressionStart": 305, "guardExpressionEnd": 326, "guardBlockStart": 305, "guardBlockEnd": 350, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 463, "focalAPIEnd": 484, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new JSONObject(value)", "cursor.getInt(int)", "cursor.getInt(int)", "cursor.getInt(int)"], "useStart": [448, 1680, 1700, 1720], "useEnd": [485, 1698, 1718, 1738], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/oshepherd/Impeller/tree/master/src/eu/e43/impeller/uikit/CommentAdapter.java", "rawCode": "  @Override\n  public View getView(int position, View v, ViewGroup parent) {\n    ActivityWithAccount activity = (ActivityWithAccount) m_ctx.getActivity();\n    if (v == null) {\n      LayoutInflater vi = LayoutInflater.from(m_ctx.getActivity());\n      v = vi.inflate(R.layout.view_comment, null);\n    }\n\n    if (m_cursor == null) {\n      return v;\n    }\n\n    m_cursor.moveToPosition(position);\n    JSONObject comment = null;\n    try {\n      comment = new JSONObject(m_cursor.getString(0));\n    } catch (JSONException e) {\n      throw new RuntimeException(e);\n    }\n\n    AvatarView authorAvatar = (AvatarView) v.findViewById(R.id.commentAuthorAvatar);\n    TextView commentBody = (TextView) v.findViewById(R.id.commentBody);\n    TextView commentMeta = (TextView) v.findViewById(R.id.commentMeta);\n    ImageView image = (ImageView) v.findViewById(R.id.image);\n\n    JSONObject author = comment.optJSONObject(\"author\");\n    if (author != null) {\n      JSONObject imageObj = author.optJSONObject(\"image\");\n      if (imageObj != null)\n        activity.getImageLoader().setImage(authorAvatar, Utils.getImageUrl(activity, imageObj));\n\n      commentMeta.setText(\n          m_ctx.getResources().getString(R.string.comment_meta_by)\n              + \" \"\n              + author.optString(\"displayName\")\n              + \", \"\n              + Utils.humanDate(comment.optString(\"published\")));\n    }\n\n    JSONObject imageObj = comment.optJSONObject(\"image\");\n    if (imageObj != null) {\n      image.setVisibility(View.VISIBLE);\n      activity.getImageLoader().setImage(image, Utils.getImageUrl(activity, imageObj));\n    } else {\n      image.setVisibility(View.GONE);\n    }\n\n    Utils.updateStatebar(v, m_cursor.getInt(1), m_cursor.getInt(2), m_cursor.getInt(3));\n    PumpHtml.setFromHtml(activity, commentBody, comment.optString(\"content\"));\n\n    return v;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1376, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getPosition()"], "configurationStart": [116], "configurationEnd": [141], "guardCondition": "cursor.getString(ARTIST,).equals(currentArtist,)&&cursor.getString(ALBUM,).equals(currentAlbum,)&&!(cursor.getString(columnIndex,).equals(currentTrack,)) && cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 147, "guardExpressionEnd": 179, "guardBlockStart": 147, "guardBlockEnd": 600, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 321, "focalAPIEnd": 349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToPosition(int)", "cursor.getPosition()", "cursor.moveToFirst()", "cursor.getString(int)", "cursor.moveToPosition(int)", "cursor.getPosition()", "cursor.moveToNext()", "cursor.getPosition()", "cursor.getString(int)"], "useStart": [435, 508, 605, 829, 943, 1016, 1109, 1165, 1233], "useEnd": [478, 533, 630, 857, 986, 1041, 1133, 1190, 1261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/documentation/RockLockTutorial/RockLock_00/src/com/marvin/rocklock/TagStructuredSongPicker.java", "rawCode": "  public String peekNextTrack() {\n    if (!taggedMusicAvailable) {\n      return \"\";\n    }\n    int initialPosition = musicCursor.getPosition();\n    while (musicCursor.moveToNext()) {\n      if (musicCursor.getString(ARTIST).equals(currentArtist)\n          && musicCursor.getString(ALBUM).equals(currentAlbum)\n          && !musicCursor.getString(TRACK).equals(currentTrack)) {\n        String track = musicCursor.getString(TRACK);\n        musicCursor.moveToPosition(initialPosition);\n        Log.e(\"peek end 0\", musicCursor.getPosition() + \" \" + getCurrentSongInfo());\n        return track;\n      }\n    }\n    musicCursor.moveToFirst();\n    while (musicCursor.getPosition() < initialPosition) {\n      if (musicCursor.getString(ARTIST).equals(currentArtist)\n          && musicCursor.getString(ALBUM).equals(currentAlbum)\n          && !musicCursor.getString(TRACK).equals(currentTrack)) {\n        String track = musicCursor.getString(TRACK);\n        musicCursor.moveToPosition(initialPosition);\n        Log.e(\"peek end 1\", musicCursor.getPosition() + \" \" + getCurrentSongInfo());\n        return track;\n      }\n      musicCursor.moveToNext();\n    }\n    Log.e(\"peek end 2\", musicCursor.getPosition() + \" \" + getCurrentSongInfo());\n    return musicCursor.getString(TRACK);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1377, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 297, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "useStart": [280, 327, 356, 385, 414, 443, 472, 501, 530], "useEnd": [317, 346, 375, 404, 433, 462, 491, 520, 549], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/squickone/Feed-Me-Seymore/tree/master/src/main/java/com/feedmesomore/dao/SettingsDao.java", "rawCode": "  /**\n   * Converts a Cursor from the Settings Table to a Settings Object.\n   *\n   * @param cursor - Cursor object that contains the Settings data from the Database\n   * @return - Settings\n   */\n  private Settings cursorToSetting(Cursor cursor) {\n    return new Settings(\n        Integer.parseInt(cursor.getString(0)),\n        cursor.getString(1),\n        cursor.getString(2),\n        cursor.getString(3),\n        cursor.getString(4),\n        cursor.getString(5),\n        cursor.getString(6),\n        cursor.getString(7),\n        cursor.getString(8));\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1378, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 322, "tryExpressionEnd": 326, "tryBlockStart": 322, "tryBlockEnd": 1341, "catchExpressionStart": 1154, "catchExpressionEnd": 1174, "catchBlockStart": 1154, "catchBlockEnd": 1252, "exceptionHandlingCallStart": [1182], "exceptionHandlingCallEnd": [1245], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 744, "focalAPIEnd": 760, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1253, "finallyExpressionEnd": 1261, "finallyBlockStart": 1253, "finallyBlockEnd": 1341, "cleanUpCallStart": [1315], "cleanUpCallEnd": [1326], "url": "https://github.com/socialpercon/anki/tree/master/src/com/ichi2/anki/MetaDB.java", "rawCode": "  /**\n   * Stores a custom dictionary for a given deck.\n   *\n   * @param dictionary integer number of dictionary, -1 if not set (standard dictionary will be\n   *     used)\n   */\n  public static void storeLookupDictionary(Context context, long did, int dictionary) {\n    openDBIfClosed(context);\n    Cursor cur = null;\n    try {\n      cur = mMetaDb.rawQuery(\"SELECT _id FROM customDictionary\" + \" WHERE did = \" + did, null);\n      if (cur.moveToNext()) {\n        mMetaDb.execSQL(\n            \"UPDATE customDictionary \"\n                + \"SET did = \"\n                + did\n                + \", \"\n                + \"dictionary=\"\n                + Integer.toString(dictionary)\n                + \" \"\n                + \"WHERE _id=\"\n                + cur.getString(0)\n                + \";\");\n        Log.i(AnkiDroidApp.TAG, \"Store custom dictionary (\" + dictionary + \") for deck \" + did);\n      } else {\n        mMetaDb.execSQL(\n            \"INSERT INTO customDictionary (did, dictionary) VALUES (?, ?)\",\n            new Object[] {did, dictionary});\n        Log.i(AnkiDroidApp.TAG, \"Store custom dictionary (\" + dictionary + \") for deck \" + did);\n      }\n    } catch (Exception e) {\n      Log.e(\"Error\", \"Error storing custom dictionary to MetaDB \", e);\n    } finally {\n      if (cur != null && !cur.isClosed()) {\n        cur.close();\n      }\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1379, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [173], "configurationEnd": [199], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 228, "focalAPIEnd": 256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getLookupUri(long,value)"], "useStart": [280], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zsol/Mms/tree/master/src/com/android/mms/ui/MessageListAdapter.java", "rawCode": "      private boolean onContactIdLoaded(Cursor c, int contactIdColumn, int lookupKeyColumn) {\n        if (c == null || !c.moveToFirst()) return false;\n\n        mContactId = c.getLong(contactIdColumn);\n        String lookupKey = c.getString(lookupKeyColumn);\n        mContactUri = Contacts.getLookupUri(mContactId, lookupKey);\n        mQueryHandler.startQuery(TOKEN_CONTACT_INFO, this, mContactUri, COLUMNS, null, null, null);\n        return true;\n      }\n"}, {"dataset": "cursorGetString", "exampleID": 1380, "initialization": ["Cursor cursor = Context.getContentResolver()", "int columnIndex = Cursor.getColumnIndex(String)"], "initializationStart": [462, 596], "initializationEnd": [490, 641], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndex(String)", "cursor.getColumnIndex(String)"], "configurationStart": [596, 664], "configurationEnd": [641, 709], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 544, "guardExpressionEnd": 571, "guardBlockStart": 544, "guardBlockEnd": 829, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 730, "focalAPIEnd": 757, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "Map<String, Integer>.put(value,int)", "cursor.close()"], "useStart": [774, 805, 835], "useEnd": [797, 822, 849], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/minstrelsy/servestream/tree/master/src/net/sourceforge/servestream/utils/MusicUtils.java", "rawCode": "  private static Map<String, Integer> retrieveAllRows(Context context) {\n    Map<String, Integer> list = new HashMap<String, Integer>();\n\n    // Form an array specifying which columns to return.\n    String[] projection = new String[] {Media.MediaColumns._ID, Media.MediaColumns.URI};\n\n    // Get the base URI for the Media Files table in the Media content provider.\n    Uri mediaFile = Media.MediaColumns.CONTENT_URI;\n\n    // Make the query.\n    Cursor cursor = context.getContentResolver().query(mediaFile, projection, null, null, null);\n\n    while (cursor.moveToNext()) {\n      int uriColumn = cursor.getColumnIndex(Media.MediaColumns.URI);\n      int idColumn = cursor.getColumnIndex(Media.MediaColumns._ID);\n      String uri = cursor.getString(uriColumn);\n      int id = cursor.getInt(idColumn);\n      list.put(uri, id);\n    }\n\n    cursor.close();\n\n    return list;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1381, "initialization": ["Cursor cursor = Context.getContentResolver()", "int columnIndex = Cursor.getColumnIndexOrThrow(String)"], "initializationStart": [435, 555], "initializationEnd": [463, 613], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)", "cursor.moveToFirst()"], "configurationStart": [555, 623], "configurationEnd": [613, 643], "guardCondition": "cursor!=null", "guardType": "IF {", "guardExpressionStart": 507, "guardExpressionEnd": 526, "guardBlockStart": 507, "guardBlockEnd": 730, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 667, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [707], "useEnd": [721], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TianziHou/tzPalette/tree/master/src/com/tzapps/common/utils/UriUtils.java", "rawCode": "  /**\n   * Get a uri's user-friendly display name\n   *\n   * @param context the application context\n   * @param uri the uri to query\n   * @return a user-friendly display name\n   */\n  public static String getUriDisplayName(Context context, Uri uri) {\n    String displayName = null;\n\n    String scheme = uri.getScheme();\n\n    if (scheme.startsWith(\"content\")) {\n      String[] proj = {OpenableColumns.DISPLAY_NAME};\n      Cursor cursor = context.getContentResolver().query(uri, proj, null, null, null);\n\n      if (cursor != null) {\n        int columnIndex = cursor.getColumnIndexOrThrow(OpenableColumns.DISPLAY_NAME);\n        cursor.moveToFirst();\n        displayName = cursor.getString(columnIndex);\n\n        cursor.close();\n      }\n    } else if (scheme.startsWith(\"file\")) {\n      displayName = uri.getLastPathSegment();\n    }\n\n    return displayName;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1382, "initialization": ["Cursor cursor = new MergeCursorWithUniqueId(Cursor[],*)"], "initializationStart": [384], "initializationEnd": [438], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndex(String)", "cursor.moveToFirst()"], "configurationStart": [464, 604], "configurationEnd": [492, 624], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 641, "focalAPIEnd": 673, "followUpCheck": "StringUtils.isNullOrEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 726, "followUpCheckExpressionEnd": 764, "followUpCheckBlockStart": 726, "followUpCheckBlockEnd": 831, "use": ["stripSubject(value)", "cleanupSelected(cursor)", "MessageListAdapter.swapCursor(cursor)"], "useStart": [690, 865, 895], "useEnd": [718, 888, 922], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rsavoye/k9-mail/tree/master/src/com/fsck/k9/fragment/MessageListFragment.java", "rawCode": "  @Override\n  public void onLoadFinished(Loader<Cursor> loader, Cursor data) {\n    // Remove the \"Loading...\" view\n    mPullToRefreshView.setEmptyView(null);\n\n    // Enable pull-to-refresh if allowed\n    if (isPullToRefreshAllowed()) {\n      setPullToRefreshEnabled(true);\n    }\n\n    Cursor cursor;\n    if (mCursors.length > 1) {\n      mCursors[loader.getId()] = data;\n      cursor = new MergeCursorWithUniqueId(mCursors, getComparator());\n      mUniqueIdColumn = cursor.getColumnIndex(\"_id\");\n    } else {\n      cursor = data;\n      mUniqueIdColumn = ID_COLUMN;\n    }\n\n    if (mIsThreadDisplay) {\n      cursor.moveToFirst();\n      mTitle = cursor.getString(SUBJECT_COLUMN);\n      mTitle = Utility.stripSubject(mTitle);\n      if (StringUtils.isNullOrEmpty(mTitle)) {\n        mTitle = getString(R.string.general_no_subject);\n      }\n      refreshTitle();\n    }\n\n    cleanupSelected(cursor);\n\n    mAdapter.swapCursor(cursor);\n\n    resetActionMode();\n    computeBatchDirection();\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1383, "initialization": ["Cursor cursor = new SuggestionsCursor(*)"], "initializationStart": [89], "initializationEnd": [295], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.moveToFirst()", "cursor.getLong(int)"], "configurationStart": [317, 352, 395], "configurationEnd": [334, 372, 444], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 471, "focalAPIEnd": 524, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)", "cursor.moveToNext()", "cursor.getLong(int)", "cursor.getString(int)", "assertEquals(String,value)", "cursor.moveToNext()"], "useStart": [451, 543, 585, 661, 641, 734], "useEnd": [525, 562, 634, 714, 715, 753], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/casidiablo/persistence/tree/master/src/test/java/com/codeslap/persistence/suggestions/SuggestionsCursorTest.java", "rawCode": "  @Test\n  public void suggestionsCursorNoDescriptionTest() {\n    Cursor cursor =\n        new SuggestionsCursor(\n            Arrays.asList(\n                new SuggestionInfo.Builder().setId(1).setText(\"Foo\").build(),\n                new SuggestionInfo.Builder().setId(2).setText(\"Bar\").build()));\n    assertEquals(2, cursor.getCount());\n    assertTrue(cursor.moveToFirst());\n    assertEquals(1, cursor.getLong(SuggestionsCursor.COLUMN_INDEX_ID));\n    assertEquals(\"Foo\", cursor.getString(SuggestionsCursor.COLUMN_INDEX_TEXT));\n\n    assertTrue(cursor.moveToNext());\n    assertEquals(2, cursor.getLong(SuggestionsCursor.COLUMN_INDEX_ID));\n    assertEquals(\"Bar\", cursor.getString(SuggestionsCursor.COLUMN_INDEX_TEXT));\n\n    assertFalse(cursor.moveToNext());\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1384, "initialization": ["Cursor cursor = query(*,String[],*,*,*,*,String)"], "initializationStart": [238], "initializationEnd": [433], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.move(int)"], "configurationStart": [441], "configurationEnd": [464], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 486, "focalAPIEnd": 505, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)", "new Result(value,*,*,*,long)", "close(cursor,SQLiteDatabase)"], "useStart": [530, 573, 617, 659, 702, 852], "useEnd": [549, 592, 634, 678, 772, 869], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 836, "finallyExpressionEnd": 844, "finallyBlockStart": 836, "finallyBlockEnd": 876, "cleanUpCallStart": [852], "cleanUpCallEnd": [869], "url": "https://github.com/cgoines/doweown/tree/master/build/doweown/cordova/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public HistoryItem buildHistoryItem(int number) {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor =\n          db.query(\n              DBHelper.TABLE_NAME,\n              COLUMNS,\n              null,\n              null,\n              null,\n              null,\n              DBHelper.TIMESTAMP_COL + \" DESC\");\n      cursor.move(number + 1);\n      String text = cursor.getString(0);\n      String display = cursor.getString(1);\n      String format = cursor.getString(2);\n      long timestamp = cursor.getLong(3);\n      String details = cursor.getString(4);\n      Result result = new Result(text, null, null, BarcodeFormat.valueOf(format), timestamp);\n      return new HistoryItem(result, display, details);\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1385, "initialization": ["Cursor cursor = query(*,String[],String,*,*)"], "initializationStart": [873], "initializationEnd": [1065], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToFirst()", "cursor.getLong(int)"], "configurationStart": [1288, 1422], "configurationEnd": [1305, 1436], "guardCondition": "!(cursor.isAfterLast()) && cursor!=null&&cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 1204, "guardExpressionEnd": 1242, "guardBlockStart": 1204, "guardBlockEnd": 1763, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1666, "focalAPIEnd": 1682, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(int,*,int,value)", "cursor.moveToNext()", "cursor.close()"], "useStart": [1628, 1728, 1797], "useEnd": [1683, 1744, 1808], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dileepbapat/music/tree/master/src/com/android/music/MusicUtils.java", "rawCode": "  /**\n   * Fills out the given submenu with items for \"new playlist\" and any existing playlists. When the\n   * user selects an item, the application will receive PLAYLIST_SELECTED with the Uri of the\n   * selected playlist, NEW_PLAYLIST if a new playlist should be created, and QUEUE if the \"current\n   * playlist\" was selected.\n   *\n   * @param context The context to use for creating the menu items\n   * @param sub The submenu to add the items to.\n   */\n  public static void makePlaylistMenu(Context context, SubMenu sub) {\n    String[] cols = new String[] {MediaStore.Audio.Playlists._ID, MediaStore.Audio.Playlists.NAME};\n    ContentResolver resolver = context.getContentResolver();\n    if (resolver == null) {\n      System.out.println(\"resolver = null\");\n    } else {\n      String whereclause = MediaStore.Audio.Playlists.NAME + \" != ''\";\n      Cursor cur =\n          resolver.query(\n              MediaStore.Audio.Playlists.EXTERNAL_CONTENT_URI,\n              cols,\n              whereclause,\n              null,\n              MediaStore.Audio.Playlists.NAME);\n      sub.clear();\n      sub.add(1, Defs.QUEUE, 0, R.string.queue);\n      sub.add(1, Defs.NEW_PLAYLIST, 0, R.string.new_playlist);\n      if (cur != null && cur.getCount() > 0) {\n        // sub.addSeparator(1, 0);\n        cur.moveToFirst();\n        while (!cur.isAfterLast()) {\n          Intent intent = new Intent();\n          intent.putExtra(\"playlist\", cur.getLong(0));\n          // if (cur.getInt(0) == mLastPlaylistSelected) {\n          // sub.add(0, MusicBaseActivity.PLAYLIST_SELECTED, cur.getString(1)).setIntent(intent);\n          // } else {\n          sub.add(1, Defs.PLAYLIST_SELECTED, 0, cur.getString(1)).setIntent(intent);\n          // }\n          cur.moveToNext();\n        }\n      }\n      if (cur != null) {\n        cur.close();\n      }\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1386, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 113, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sparkoo/Bugmaze/tree/master/src/cz/sparko/Bugmaze/Model/Score.java", "rawCode": "  private static Score cursorToModel(Cursor cursor) {\n    return new Score(cursor.getLong(0), cursor.getLong(1), cursor.getString(2));\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1387, "initialization": ["Cursor cursor = Context.getContentResolver()"], "initializationStart": [450], "initializationEnd": [474], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["Cursor.getString(int)", "Cursor.getString(int)", "i(String,String)"], "tryExpressionStart": 1862, "tryExpressionEnd": 1866, "tryBlockStart": 1862, "tryBlockEnd": 2832, "catchExpressionStart": 2216, "catchExpressionEnd": 2241, "catchBlockStart": 2216, "catchBlockEnd": 2455, "exceptionHandlingCallStart": [2324, 2409, 2251], "exceptionHandlingCallEnd": [2338, 2423, 2446], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor!=null&&cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 1818, "guardExpressionEnd": 1853, "guardBlockStart": 1818, "guardBlockEnd": 2838, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1915, "focalAPIEnd": 1929, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["tryParseBDay(value)", "cursor.getLong(int)", "cursor.getInt(int)", "cursor.close()"], "useStart": [1902, 2008, 2061, 2867], "useEnd": [1930, 2020, 2072, 2876], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/krtek/Birthday-widget/tree/master/Birthday/src/main/java/cz/krtinec/birthday/data/BirthdayProvider.java", "rawCode": "  public List<EditableEvent> getEvents(Context ctx, long rawContactId) {\n    Log.i(\"Birthday\", \"Going to get events for \" + rawContactId);\n\n    String[] projection =\n        new String[] {\n          ContactsContract.CommonDataKinds.Event._ID,\n          ContactsContract.CommonDataKinds.Event.START_DATE,\n          ContactsContract.CommonDataKinds.Event.TYPE,\n          ContactsContract.CommonDataKinds.Event.LABEL,\n        };\n\n    Cursor c =\n        ctx.getContentResolver()\n            .query(\n                ContactsContract.Data.CONTENT_URI,\n                projection,\n                ContactsContract.Data.RAW_CONTACT_ID\n                    + \"= ? AND \"\n                    + ContactsContract.Data.MIMETYPE\n                    + \"= ? AND \"\n                    + \"(\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY\n                    + \" OR \"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_ANNIVERSARY\n                    + \" OR \"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_CUSTOM\n                    + \" OR \"\n                    + ContactsContract.CommonDataKinds.Event.TYPE\n                    + \"=\"\n                    + ContactsContract.CommonDataKinds.Event.TYPE_OTHER\n                    + \")\",\n                new String[] {\n                  String.valueOf(rawContactId),\n                  ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE\n                },\n                null);\n\n    List<EditableEvent> events = new ArrayList<EditableEvent>();\n    while (c != null && c.moveToNext()) {\n      try {\n        ParseResult parseResult = tryParseBDay(c.getString(1));\n\n        EditableEvent evt =\n            new EditableEvent(\n                c.getLong(0),\n                EventType.getEventType(c.getInt(2)),\n                parseResult.date,\n                parseResult.integrity,\n                c.getString(3));\n\n        events.add(evt);\n\n      } catch (ParseException e) {\n        Log.i(\n            \"Birthday\",\n            \"Skipping \"\n                + c.getString(0)\n                + \" due to unparseable bday date (\"\n                + c.getString(2)\n                + \")\");\n      } catch (IllegalArgumentException e) {\n        Log.i(\n            \"Birthday\",\n            \"Skipping \"\n                + c.getString(0)\n                + \" due to unparseable bday date (\"\n                + c.getString(2)\n                + \")\");\n      } catch (NullPointerException e) {\n        Log.i(\"Birthday\", \"Skipping contact id: \" + c.getString(1) + \" due to NPE.\");\n      }\n    }\n\n    if (c != null) {\n      c.close();\n    }\n    Log.i(\"Birthday\", \"Returning \" + events);\n    return events;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1388, "initialization": ["Cursor cursor = query(*,String[],*,*,*,*,*)"], "initializationStart": [1604], "initializationEnd": [1885], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [2011], "configurationEnd": [2045], "guardCondition": "cursor.moveToNext()", "guardType": "LOOP {", "guardExpressionStart": 1915, "guardExpressionEnd": 1937, "guardBlockStart": 1915, "guardBlockEnd": 2282, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 2097, "focalAPIEnd": 2136, "followUpCheck": "thingId.equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 2152, "followUpCheckExpressionEnd": 2183, "followUpCheckBlockStart": 2152, "followUpCheckBlockEnd": 2268, "use": ["cursor.getPosition()", "new CursorCommentList(cursor,int,int,int)", "cursor.close()"], "useStart": [2213, 2427, 2790], "useEnd": [2228, 2618, 2799], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 2768, "finallyExpressionEnd": 2776, "finallyBlockStart": 2768, "finallyBlockEnd": 2812, "cleanUpCallStart": [2790], "cleanUpCallEnd": [2799], "url": "https://github.com/btmura/rbb/tree/master/src/com/btmura/android/reddit/provider/ThingProvider.java", "rawCode": "  private Bundle insertComment(String accountName, Bundle extras) {\n    String body = getBodyExtra(extras);\n    String parentThingId = getParentThingIdExtra(extras);\n    String thingId = getThingIdExtra(extras);\n\n    SQLiteDatabase db = helper.getWritableDatabase();\n    SQLiteStatement updateSequence = db.compileStatement(UPDATE_SEQUENCE_STATEMENT);\n    db.beginTransaction();\n    try {\n      // Queue an action to sync back the comment to the server.\n      ContentValues values = new ContentValues(7);\n      values.put(CommentActions.COLUMN_ACCOUNT, accountName);\n      values.put(CommentActions.COLUMN_ACTION, CommentActions.ACTION_INSERT);\n      values.put(CommentActions.COLUMN_PARENT_THING_ID, parentThingId);\n      values.put(CommentActions.COLUMN_TEXT, body);\n      values.put(CommentActions.COLUMN_THING_ID, thingId);\n\n      long actionId = db.insert(CommentActions.TABLE_NAME, null, values);\n      if (actionId == -1) {\n        return null;\n      }\n\n      Cursor cursor =\n          db.query(\n              Sessions.TABLE_NAME,\n              SESSION_ID_PROJECTION,\n              Sessions.SELECT_BY_TYPE_AND_THING_ID,\n              Array.of(Sessions.TYPE_COMMENTS, parentThingId),\n              null,\n              null,\n              null);\n      try {\n        while (cursor.moveToNext()) {\n          long sessionId = cursor.getLong(SESSION_INDEX_ID);\n\n          // Get information from the session to figure out here to insert the comment.\n          long headerDbId = -1;\n          int position = -1;\n          int nesting = -1;\n          int sequence = -1;\n          Cursor c =\n              db.query(\n                  Comments.TABLE_NAME,\n                  INSERT_COMMENT_PROJECTION,\n                  Comments.SELECT_BY_SESSION_ID,\n                  Array.of(sessionId),\n                  null,\n                  null,\n                  Comments.SORT_BY_SEQUENCE_AND_ID);\n          try {\n            while (c.moveToNext()) {\n              if (c.getPosition() == 0) {\n                headerDbId = c.getLong(INSERT_COMMENT_INDEX_ID);\n              }\n              String rowThingId = c.getString(INSERT_COMMENT_INDEX_THING);\n              if (thingId.equals(rowThingId)) {\n                position = c.getPosition();\n                break;\n              }\n            }\n            if (headerDbId == -1 || position == -1) {\n              continue;\n            }\n\n            CursorCommentList cl =\n                new CursorCommentList(\n                    c,\n                    INSERT_COMMENT_INDEX_ID,\n                    INSERT_COMMENT_INDEX_NESTING,\n                    INSERT_COMMENT_INDEX_SEQUENCE);\n            nesting = CommentLogic.getInsertNesting(cl, position);\n            sequence = CommentLogic.getInsertSequence(cl, position);\n          } finally {\n            c.close();\n          }\n\n          // Increment the sequence numbers to make room for our comment\n          updateSequence.bindLong(1, sessionId);\n          updateSequence.bindLong(2, sequence);\n          updateSequence.executeUpdateDelete();\n\n          // Insert the placeholder comment with the proper sequence number.\n          values.clear();\n          values.put(Comments.COLUMN_ACCOUNT, accountName);\n          values.put(Comments.COLUMN_AUTHOR, accountName);\n          values.put(Comments.COLUMN_BODY, body);\n          values.put(Comments.COLUMN_COMMENT_ACTION_ID, actionId);\n          values.put(Comments.COLUMN_KIND, Kinds.KIND_COMMENT);\n          values.put(Comments.COLUMN_NESTING, nesting);\n          values.put(Comments.COLUMN_SEQUENCE, sequence);\n          values.put(Comments.COLUMN_SESSION_ID, sessionId);\n          long commentId = db.insert(Comments.TABLE_NAME, null, values);\n          if (commentId == -1) {\n            return null;\n          }\n        }\n      } finally {\n        cursor.close();\n      }\n\n      db.setTransactionSuccessful();\n    } finally {\n      db.endTransaction();\n    }\n\n    ContentResolver cr = getContext().getContentResolver();\n    cr.notifyChange(COMMENT_ACTIONS_URI, null, SYNC);\n    cr.notifyChange(COMMENTS_URI, null, NO_SYNC);\n    return Bundle.EMPTY;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1389, "initialization": ["Cursor cursor = query(boolean,String,String[],*,*,*,*,*,*)", "int columnIndex = Cursor.getColumnIndexOrThrow(String)"], "initializationStart": [308, 482], "initializationEnd": [419, 535], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)", "cursor.moveToFirst()"], "configurationStart": [482, 543], "configurationEnd": [535, 569], "guardCondition": "cursor.getCount()>0", "guardType": "IF {", "guardExpressionStart": 426, "guardExpressionEnd": 458, "guardBlockStart": 426, "guardBlockEnd": 625, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 586, "focalAPIEnd": 618, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.close()"], "useStart": [630], "useEnd": [650], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8885/common/src/main/java-se-android/com/funambol/storage/StringKeyValueSQLiteStore.java", "rawCode": "  /** @see StringKeyValueStore#get(java.lang.String) */\n  public String get(String key) {\n\n    String result = null;\n    if (dbStore == null) {\n      open();\n    }\n    StringBuffer where = new StringBuffer(KEY_COLUMN_NAME);\n    where.append(\"=\\\"\").append(key).append(\"\\\"\");\n    Cursor resultCursor =\n        dbStore.query(\n            true, tableName, QUERY_VALUE_COLUMN, where.toString(), null, null, null, null, null);\n\n    if (resultCursor.getCount() > 0) {\n      int colIndex = resultCursor.getColumnIndexOrThrow(VALUE_COLUMN_NAME);\n      resultCursor.moveToFirst();\n      result = resultCursor.getString(colIndex);\n    }\n    resultCursor.close();\n    return result;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1390, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 270, "focalAPIEnd": 312, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(value)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "useStart": [255, 334, 551, 628, 971, 1222, 1333, 1408, 1971, 2278], "useEnd": [313, 370, 591, 662, 1005, 1257, 1371, 1442, 2010, 2318], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/packages_apps_Mms/tree/master/src/com/android/mms/ui/MessageUtils.java", "rawCode": "  private static String getTextMessageDetails(Context context, Cursor cursor) {\n    Log.d(TAG, \"getTextMessageDetails\");\n\n    StringBuilder details = new StringBuilder();\n    Resources res = context.getResources();\n\n    // Message Type: Text message.\n    details.append(res.getString(R.string.message_type_label));\n    details.append(res.getString(R.string.text_message));\n\n    // Address: ***\n    details.append('\\n');\n    int smsType = cursor.getInt(MessageListAdapter.COLUMN_SMS_TYPE);\n    if (Sms.isOutgoingFolder(smsType)) {\n      details.append(res.getString(R.string.to_address_label));\n    } else {\n      details.append(res.getString(R.string.from_label));\n    }\n    details.append(cursor.getString(MessageListAdapter.COLUMN_SMS_ADDRESS));\n\n    // Sent: ***\n    if (smsType == Sms.MESSAGE_TYPE_INBOX) {\n      long date_sent = cursor.getLong(MessageListAdapter.COLUMN_SMS_DATE_SENT);\n      if (date_sent > 0) {\n        details.append('\\n');\n        details.append(res.getString(R.string.sent_label));\n        details.append(MessageUtils.formatTimeStampString(context, date_sent, true));\n      }\n    }\n\n    // Received: ***\n    details.append('\\n');\n    if (smsType == Sms.MESSAGE_TYPE_DRAFT) {\n      details.append(res.getString(R.string.saved_label));\n    } else if (smsType == Sms.MESSAGE_TYPE_INBOX) {\n      details.append(res.getString(R.string.received_label));\n    } else {\n      details.append(res.getString(R.string.sent_label));\n    }\n\n    long date = cursor.getLong(MessageListAdapter.COLUMN_SMS_DATE);\n    details.append(MessageUtils.formatTimeStampString(context, date, true));\n\n    // Delivered: ***\n    if (smsType == Sms.MESSAGE_TYPE_SENT) {\n      // For sent messages with delivery reports, we stick the delivery time in the\n      // date_sent column (see MessageStatusReceiver).\n      long dateDelivered = cursor.getLong(MessageListAdapter.COLUMN_SMS_DATE_SENT);\n      if (dateDelivered > 0) {\n        details.append('\\n');\n        details.append(res.getString(R.string.delivered_label));\n        details.append(MessageUtils.formatTimeStampString(context, dateDelivered, true));\n      }\n    }\n\n    // Error code: ***\n    int errorCode = cursor.getInt(MessageListAdapter.COLUMN_SMS_ERROR_CODE);\n    if (errorCode != 0) {\n      details.append('\\n').append(res.getString(R.string.error_code_label)).append(errorCode);\n    }\n\n    return details.toString();\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1391, "initialization": ["Cursor cursor = query(Uri,String[],String,String[],*)"], "initializationStart": [754], "initializationEnd": [839], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getCount()", "cursor.getLong(int)"], "configurationStart": [900, 979], "configurationEnd": [912, 1019], "guardCondition": "cursor.moveToNext() && cursor!=null", "guardType": "IF {", "guardExpressionStart": 850, "guardExpressionEnd": 864, "guardBlockStart": 850, "guardBlockEnd": 1825, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1047, "focalAPIEnd": 1091, "followUpCheck": "value != null && value.startsWith(\"/\")", "checkType": "IF", "followUpCheckExpressionStart": 1436, "followUpCheckExpressionEnd": 1477, "followUpCheckBlockStart": 1436, "followUpCheckBlockEnd": 1762, "use": ["cursor.getInt(int)", "cursor.getLong(int)", "value.toLowerCase()", "new FileCacheEntry(long,value,long,int)", "cursor.close()", "cursor.close()", "cursor.getCount()", "cursor.close()"], "useStart": [1118, 1195, 1578, 1652, 1785, 1881, 2089, 2109], "useEnd": [1161, 1246, 1596, 1705, 1794, 1890, 2101, 2118], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1840, "finallyExpressionEnd": 1848, "finallyBlockStart": 1840, "finallyBlockEnd": 1905, "cleanUpCallStart": [1785], "cleanUpCallEnd": [1794], "url": "https://github.com/munjeni/miui_sony_xperia/tree/master/miui/src/frameworks/base/media/java/android/media/MediaScanner.java", "rawCode": "  private void prescan(String filePath, boolean prescanFiles) throws RemoteException {\n    Cursor c = null;\n    String where = null;\n    String[] selectionArgs = null;\n\n    if (mFileCache == null) {\n      mFileCache = new HashMap<String, FileCacheEntry>();\n    } else {\n      mFileCache.clear();\n    }\n    if (mPlayLists == null) {\n      mPlayLists = new ArrayList<FileCacheEntry>();\n    } else {\n      mPlayLists.clear();\n    }\n\n    if (filePath != null) {\n      // query for only one file\n      where = Files.FileColumns.DATA + \"=?\";\n      selectionArgs = new String[] {filePath};\n    }\n\n    // Build the list of files from the content provider\n    try {\n      if (prescanFiles) {\n        // First read existing files from the files table\n\n        c = mMediaProvider.query(mFilesUri, FILES_PRESCAN_PROJECTION, where, selectionArgs, null);\n\n        if (c != null) {\n          mWasEmptyPriorToScan = c.getCount() == 0;\n          while (c.moveToNext()) {\n            long rowId = c.getLong(FILES_PRESCAN_ID_COLUMN_INDEX);\n            String path = c.getString(FILES_PRESCAN_PATH_COLUMN_INDEX);\n            int format = c.getInt(FILES_PRESCAN_FORMAT_COLUMN_INDEX);\n            long lastModified = c.getLong(FILES_PRESCAN_DATE_MODIFIED_COLUMN_INDEX);\n\n            // Only consider entries with absolute path names.\n            // This allows storing URIs in the database without the\n            // media scanner removing them.\n            if (path != null && path.startsWith(\"/\")) {\n              String key = path;\n              if (mCaseInsensitivePaths) {\n                key = path.toLowerCase();\n              }\n\n              FileCacheEntry entry = new FileCacheEntry(rowId, path, lastModified, format);\n              mFileCache.put(key, entry);\n            }\n          }\n          c.close();\n          c = null;\n        }\n      }\n    } finally {\n      if (c != null) {\n        c.close();\n      }\n    }\n\n    // compute original size of images\n    mOriginalCount = 0;\n    c = mMediaProvider.query(mImagesUri, ID_PROJECTION, null, null, null);\n    if (c != null) {\n      mOriginalCount = c.getCount();\n      c.close();\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1392, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getLong(int)"], "configurationStart": [291], "configurationEnd": [310], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 325, "focalAPIEnd": 346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getInt(int)", "cursor.getLong(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getInt(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)"], "useStart": [361, 457, 535, 598, 633, 666, 709, 749], "useEnd": [379, 476, 556, 619, 651, 687, 730, 770], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eyal-lezmy/Android-DataLib/tree/master/Android-DataLib-Sample-Netflix/src/fr/eyal/datalib/sample/netflix/data/model/topgenre/TopGenreBase.java", "rawCode": "  @Override\n  protected void fillObjectFromCursor(final Cursor cursor) {\n    // we initialize the childs tabs\n    itemTopGenre = new ArrayList<ItemTopGenre>();\n\n    // if we have a content\n    if (!cursor.isClosed() && !cursor.isAfterLast()) {\n\n      int i = 0;\n\n      // header\n      _id = cursor.getLong(i++);\n      _url = cursor.getString(i++);\n      _ttl = cursor.getInt(i++);\n      _updatedAt = Calendar.getInstance();\n      _updatedAt.setTimeInMillis(cursor.getLong(i++) * 1000);\n\n      // list of attributes\n      attrVersion = cursor.getString(i++);\n\n      // list of content\n      title = cursor.getString(i++);\n      ttl = cursor.getInt(i++);\n      link = cursor.getString(i++);\n      description = cursor.getString(i++);\n      language = cursor.getString(i++);\n\n    } else {\n      _id = ID_INVALID;\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1393, "initialization": ["int columnIndex = Cursor.getColumnIndexOrThrow(String)"], "initializationStart": [240], "initializationEnd": [301], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.getColumnIndexOrThrow(String)", "cursor.getColumnIndexOrThrow(String)", "cursor.getColumnIndexOrThrow(String)", "cursor.getInt(int)"], "configurationStart": [161, 240, 327, 479], "configurationEnd": [215, 301, 380, 505], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 645, "focalAPIEnd": 673, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TextView.setText(value)", "cursor.getString(int)"], "useStart": [683, 856], "useEnd": [708, 885], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Calendar/tree/master/src/com/android/calendar/event/EditEventView.java", "rawCode": "    @Override\n    public void bindView(View view, Context context, Cursor cursor) {\n      View colorBar = view.findViewById(R.id.color);\n      int colorColumn = cursor.getColumnIndexOrThrow(Calendars.CALENDAR_COLOR);\n      int nameColumn = cursor.getColumnIndexOrThrow(Calendars.CALENDAR_DISPLAY_NAME);\n      int ownerColumn = cursor.getColumnIndexOrThrow(Calendars.OWNER_ACCOUNT);\n      if (colorBar != null) {\n        colorBar.setBackgroundColor(Utils.getDisplayColorFromColor(cursor.getInt(colorColumn)));\n      }\n\n      TextView name = (TextView) view.findViewById(R.id.calendar_name);\n      if (name != null) {\n        String displayName = cursor.getString(nameColumn);\n        name.setText(displayName);\n\n        TextView accountName = (TextView) view.findViewById(R.id.account_name);\n        if (accountName != null) {\n          accountName.setText(cursor.getString(ownerColumn));\n          accountName.setVisibility(TextView.VISIBLE);\n        }\n      }\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1394, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getLocalizedMessage()", "showMessage(String,*,Context)", "logE(String,boolean)", "printStackTrace(*,boolean)"], "tryExpressionStart": 402, "tryExpressionEnd": 406, "tryBlockStart": 402, "tryBlockEnd": 808, "catchExpressionStart": 634, "catchExpressionEnd": 654, "catchBlockStart": 634, "catchBlockEnd": 808, "exceptionHandlingCallStart": [689, 662, 728, 768], "exceptionHandlingCallEnd": [712, 720, 760, 801], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 577, "focalAPIEnd": 596, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tpruvot/android_packages_apps_SQLiteManager/tree/master/src/dk/andsen/asqlitemanager/Database.java", "rawCode": "  /**\n   * Retrieve a list of lookup values for selection lists\n   *\n   * @param foreignKey\n   * @return\n   */\n  public ForeignKeyHolder getFKList2(String foreignKey) {\n    // TODO must be changed to handle lookup tables with code - values\n    // must the return both the foreign key \"code\" and describing text\n    ForeignKeyHolder lists = new ForeignKeyHolder();\n    String[] ids = new String[0];\n    try {\n      Cursor cursor = _db.rawQuery(foreignKey, null);\n      ids = new String[cursor.getCount()];\n      int i = 0;\n      while (cursor.moveToNext()) {\n        ids[i++] = cursor.getString(0);\n      }\n      cursor.close();\n    } catch (Exception e) {\n      Utils.showMessage(\"Error\", e.getLocalizedMessage(), _cont);\n      Utils.logE(\"getFKList\", logging);\n      Utils.printStackTrace(e, logging);\n    }\n    // select [id] from [foreign]\n    // TODO replace field name with *\n    String sql =\n        foreignKey.substring(0, foreignKey.indexOf('['))\n            + \"*\"\n            + foreignKey.substring(foreignKey.indexOf(']') + 1);\n    Utils.logD(\"SQL: \" + sql, logging);\n    String[] texts = new String[0];\n    try {\n      Cursor cursor = _db.rawQuery(sql, null);\n      texts = new String[cursor.getCount()];\n      int i = 0;\n      int cols = cursor.getColumnCount();\n      while (cursor.moveToNext()) {\n        int j = 0;\n        String rowText = \"\";\n        for (j = 0; j < cols; j++) {\n          rowText += cursor.getString(j);\n          if (j < cols - 1) rowText += \" | \";\n        }\n        texts[i++] = rowText;\n      }\n      cursor.close();\n    } catch (Exception e) {\n      Utils.showMessage(\"Error\", e.getLocalizedMessage(), _cont);\n      Utils.logE(\"getFKList\", logging);\n      Utils.printStackTrace(e, logging);\n    }\n    lists.setId(ids);\n    lists.setText(texts);\n    return lists;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1395, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [3123], "initializationEnd": [3143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 3466, "focalAPIEnd": 3485, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["onPickActivityResult(value)"], "useStart": [3419], "useEnd": [3486], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytown/Phone_ics/tree/master/src/com/android/phone/CallFeaturesSetting.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    // there are cases where the contact picker may end up sending us more than one\n    // request. We want to ignore the request if we're not in the correct state.\n    if (requestCode == VOICEMAIL_PROVIDER_CFG_ID) {\n      boolean failure = false;\n\n      // No matter how the processing of result goes lets clear the flag\n      if (DBG) log(\"mVMProviderSettingsForced: \" + mVMProviderSettingsForced);\n      final boolean isVMProviderSettingsForced = mVMProviderSettingsForced;\n      mVMProviderSettingsForced = false;\n\n      String vmNum = null;\n      if (resultCode != RESULT_OK) {\n        if (DBG) log(\"onActivityResult: vm provider cfg result not OK.\");\n        failure = true;\n      } else {\n        if (data == null) {\n          if (DBG) log(\"onActivityResult: vm provider cfg result has no data\");\n          failure = true;\n        } else {\n          if (data.getBooleanExtra(SIGNOUT_EXTRA, false)) {\n            if (DBG) log(\"Provider requested signout\");\n            if (isVMProviderSettingsForced) {\n              if (DBG) log(\"Going back to previous provider on signout\");\n              switchToPreviousVoicemailProvider();\n            } else {\n              final String victim = getCurrentVoicemailProviderKey();\n              if (DBG) log(\"Relaunching activity and ignoring \" + victim);\n              Intent i = new Intent(ACTION_ADD_VOICEMAIL);\n              i.putExtra(IGNORE_PROVIDER_EXTRA, victim);\n              i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n              this.startActivity(i);\n            }\n            return;\n          }\n          vmNum = data.getStringExtra(VM_NUMBER_EXTRA);\n          if (vmNum == null || vmNum.length() == 0) {\n            if (DBG) log(\"onActivityResult: vm provider cfg result has no vmnum\");\n            failure = true;\n          }\n        }\n      }\n      if (failure) {\n        if (DBG) log(\"Failure in return from voicemail provider\");\n        if (isVMProviderSettingsForced) {\n          switchToPreviousVoicemailProvider();\n        } else {\n          if (DBG) log(\"Not switching back the provider since this is not forced config\");\n        }\n        return;\n      }\n      mChangingVMorFwdDueToProviderChange = isVMProviderSettingsForced;\n      final String fwdNum = data.getStringExtra(FWD_NUMBER_EXTRA);\n\n      // TODO(iliat): It would be nice to load the current network setting for this and\n      // send it to the provider when it's config is invoked so it can use this as default\n      final int fwdNumTime = data.getIntExtra(FWD_NUMBER_TIME_EXTRA, 20);\n\n      if (DBG)\n        log(\n            \"onActivityResult: vm provider cfg result \"\n                + (fwdNum != null ? \"has\" : \" does not have\")\n                + \" forwarding number\");\n      saveVoiceMailAndForwardingNumber(\n          getCurrentVoicemailProviderKey(),\n          new VoiceMailProviderSettings(vmNum, fwdNum, fwdNumTime));\n      return;\n    }\n\n    if (resultCode != RESULT_OK) {\n      if (DBG) log(\"onActivityResult: contact picker result not OK.\");\n      return;\n    }\n\n    Cursor cursor = getContentResolver().query(data.getData(), NUM_PROJECTION, null, null, null);\n    if ((cursor == null) || (!cursor.moveToFirst())) {\n      if (DBG) log(\"onActivityResult: bad contact data, no results found.\");\n      return;\n    }\n\n    switch (requestCode) {\n      case VOICEMAIL_PREF_ID:\n        mSubMenuVoicemailSettings.onPickActivityResult(cursor.getString(0));\n        break;\n      default:\n        // TODO: may need exception here.\n    }\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1396, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 1042, "focalAPIEnd": 1071, "followUpCheck": "key.equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 1177, "followUpCheckExpressionEnd": 1203, "followUpCheckBlockStart": 1177, "followUpCheckBlockEnd": 1269, "use": ["cursor.getString(int)", "cursor.moveToNext()", "Map<String, String>.put(value,String)"], "useStart": [1104, 1146, 1280], "useEnd": [1134, 1165, 1321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/packages/SettingsProvider/src/com/android/providers/settings/SettingsBackupAgent.java", "rawCode": "  /**\n   * Given a cursor and a set of keys, extract the required keys and values and write them to a byte\n   * array.\n   *\n   * @param cursor A cursor with settings data.\n   * @param settings The settings to extract.\n   * @return The byte array of extracted values.\n   */\n  private byte[] extractRelevantValues(Cursor cursor, String[] settings) {\n    final int settingsCount = settings.length;\n    byte[][] values = new byte[settingsCount * 2][]; // keys and values\n    if (!cursor.moveToFirst()) {\n      Log.e(TAG, \"Couldn't read from the cursor\");\n      return new byte[0];\n    }\n\n    // Obtain the relevant data in a temporary array.\n    int totalSize = 0;\n    int backedUpSettingIndex = 0;\n    Map<String, String> cachedEntries = new HashMap<String, String>();\n    for (int i = 0; i < settingsCount; i++) {\n      String key = settings[i];\n      String value = cachedEntries.remove(key);\n\n      // If the value not cached, let us look it up.\n      if (value == null) {\n        while (!cursor.isAfterLast()) {\n          String cursorKey = cursor.getString(COLUMN_NAME);\n          String cursorValue = cursor.getString(COLUMN_VALUE);\n          cursor.moveToNext();\n          if (key.equals(cursorKey)) {\n            value = cursorValue;\n            break;\n          }\n          cachedEntries.put(cursorKey, cursorValue);\n        }\n      }\n\n      if (value == null) {\n        continue;\n      }\n\n      // Write the key and value in the intermediary array.\n      byte[] keyBytes = key.getBytes();\n      totalSize += INTEGER_BYTE_COUNT + keyBytes.length;\n      values[backedUpSettingIndex * 2] = keyBytes;\n\n      byte[] valueBytes = value.getBytes();\n      totalSize += INTEGER_BYTE_COUNT + valueBytes.length;\n      values[backedUpSettingIndex * 2 + 1] = valueBytes;\n\n      backedUpSettingIndex++;\n\n      if (DEBUG) {\n        Log.d(TAG, \"Backed up setting: \" + key + \"=\" + value);\n      }\n    }\n\n    // Aggregate the result.\n    byte[] result = new byte[totalSize];\n    int pos = 0;\n    final int keyValuePairCount = backedUpSettingIndex * 2;\n    for (int i = 0; i < keyValuePairCount; i++) {\n      pos = writeInt(result, pos, values[i].length);\n      pos = writeBytes(result, pos, values[i]);\n    }\n    return result;\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1397, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["cursor.moveToPosition(int)"], "configurationStart": [56], "configurationEnd": [88], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 101, "focalAPIEnd": 121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dlew/android-ragefaces/tree/master/project/src/com/idunnolol/ragefaces/adapters/RageFaceDbAdapter.java", "rawCode": "  @Override\n  public Object getItem(int position) {\n    mCursor.moveToPosition(position);\n    return mCursor.getString(1);\n  }\n"}, {"dataset": "cursorGetString", "exampleID": 1398, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 272, "focalAPIEnd": 308, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_mms/tree/master/src/com/android/mms/data/Contact.java", "rawCode": "    private void fillPhoneTypeContact(final Contact contact, final Cursor cursor) {\n      synchronized (contact) {\n        contact.mContactMethodType = CONTACT_METHOD_TYPE_PHONE;\n        contact.mContactMethodId = cursor.getLong(PHONE_ID_COLUMN);\n        contact.mLabel = cursor.getString(PHONE_LABEL_COLUMN);\n        contact.mName = cursor.getString(CONTACT_NAME_COLUMN);\n        contact.mPersonId = cursor.getLong(CONTACT_ID_COLUMN);\n        contact.mPresenceResId = getPresenceIconResourceId(cursor.getInt(CONTACT_PRESENCE_COLUMN));\n        contact.mPresenceText = cursor.getString(CONTACT_STATUS_COLUMN);\n        contact.mNumberE164 = cursor.getString(PHONE_NORMALIZED_NUMBER);\n        contact.mSendToVoicemail = cursor.getInt(SEND_TO_VOICEMAIL) == 1;\n        if (Log.isLoggable(LogTag.CONTACT, Log.DEBUG)) {\n          log(\n              \"fillPhoneTypeContact: name=\"\n                  + contact.mName\n                  + \", number=\"\n                  + contact.mNumber\n                  + \", presence=\"\n                  + contact.mPresenceResId\n                  + \" SendToVoicemail: \"\n                  + contact.mSendToVoicemail);\n        }\n      }\n      byte[] data = loadAvatarData(contact);\n\n      synchronized (contact) {\n        contact.mAvatarData = data;\n      }\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1399, "initialization": ["Cursor cursor = getContentResolver()"], "initializationStart": [2422], "initializationEnd": [2442], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "cursor.moveToFirst()", "guardType": "IF {", "guardExpressionStart": 2771, "guardExpressionEnd": 2810, "guardBlockStart": 2771, "guardBlockEnd": 3049, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 2930, "focalAPIEnd": 2963, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Decrypt(value)", "cursor.close()"], "useStart": [2906, 3058], "useEnd": [2964, 3086], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/avantgarde280/myfeedle/tree/master/core/src/com/shafiq/myfeedle/core/MyfeedleService.java", "rawCode": "    private void updateTwitter(\n        String token,\n        String secret,\n        String accountEsid,\n        int appWidgetId,\n        String widget,\n        long account,\n        int service,\n        int status_count,\n        boolean time24hr,\n        boolean display_profile,\n        int notifications,\n        HttpClient httpClient) {\n      String response;\n      JSONArray statusesArray;\n      ArrayList<String[]> links = new ArrayList<String[]>();\n      final ArrayList<String> notificationSids = new ArrayList<String>();\n      mSimpleDateFormat = null;\n      JSONObject statusObj;\n      JSONObject friendObj;\n      Cursor currentNotifications;\n      String sid;\n      String friend;\n      MyfeedleOAuth myfeedleOAuth = new MyfeedleOAuth(TWITTER_KEY, TWITTER_SECRET, token, secret);\n      // parse the response\n      if ((response =\n              MyfeedleHttpClient.httpResponse(\n                  httpClient,\n                  myfeedleOAuth.getSignedRequest(\n                      new HttpGet(\n                          String.format(TWITTER_URL_FEED, TWITTER_BASE_URL, status_count)))))\n          != null) {\n        // if not a full_refresh, only update the status_bg and icons\n        try {\n          statusesArray = new JSONArray(response);\n          // if there are updates, clear the cache\n          int e2 = statusesArray.length();\n          if (e2 > 0) {\n            removeOldStatuses(widget, Long.toString(account));\n            for (int e = 0; (e < e2) && (e < status_count); e++) {\n              links.clear();\n              statusObj = statusesArray.getJSONObject(e);\n              friendObj = statusObj.getJSONObject(Suser);\n              addStatusItem(\n                  parseDate(statusObj.getString(Screated_at), TWITTER_DATE_FORMAT),\n                  friendObj.getString(Sname),\n                  display_profile ? friendObj.getString(Sprofile_image_url) : null,\n                  statusObj.getString(Stext),\n                  service,\n                  time24hr,\n                  appWidgetId,\n                  account,\n                  statusObj.getString(Sid),\n                  friendObj.getString(Sid),\n                  links,\n                  httpClient);\n            }\n          }\n        } catch (JSONException e) {\n          Log.e(TAG, service + \":\" + e.toString());\n        }\n      }\n      // notifications\n      if (notifications != 0) {\n        currentNotifications =\n            getContentResolver()\n                .query(\n                    Notifications.getContentUri(MyfeedleService.this),\n                    new String[] {Notifications.SID},\n                    Notifications.ACCOUNT + \"=?\",\n                    new String[] {Long.toString(account)},\n                    null);\n        // loop over notifications\n        if (currentNotifications.moveToFirst()) {\n          // store sids, to avoid duplicates when requesting the latest feed\n          sid = mMyfeedleCrypto.Decrypt(currentNotifications.getString(0));\n          if (!notificationSids.contains(sid)) notificationSids.add(sid);\n        }\n        currentNotifications.close();\n        // limit to oldest status\n        String last_sid = null;\n        Cursor last_status =\n            getContentResolver()\n                .query(\n                    Statuses.getContentUri(MyfeedleService.this),\n                    new String[] {Statuses.SID},\n                    Statuses.ACCOUNT + \"=?\",\n                    new String[] {Long.toString(account)},\n                    Statuses.CREATED + \" ASC LIMIT 1\");\n        if (last_status.moveToFirst()) last_sid = mMyfeedleCrypto.Decrypt(last_status.getString(0));\n        last_status.close();\n        // get all mentions since the oldest status for this account\n        if ((response =\n                MyfeedleHttpClient.httpResponse(\n                    httpClient,\n                    myfeedleOAuth.getSignedRequest(\n                        new HttpGet(\n                            String.format(\n                                TWITTER_MENTIONS,\n                                TWITTER_BASE_URL,\n                                last_sid != null\n                                    ? String.format(TWITTER_SINCE_ID, last_sid)\n                                    : \"\")))))\n            != null) {\n          try {\n            statusesArray = new JSONArray(response);\n            for (int i = 0, i2 = statusesArray.length(); i < i2; i++) {\n              statusObj = statusesArray.getJSONObject(i);\n              friendObj = statusObj.getJSONObject(Suser);\n              if (!friendObj.getString(Sid).equals(accountEsid)\n                  && !notificationSids.contains(statusObj.getString(Sid))) {\n                friend = friendObj.getString(Sname);\n                addNotification(\n                    statusObj.getString(Sid),\n                    friendObj.getString(Sid),\n                    friend,\n                    statusObj.getString(Stext),\n                    parseDate(statusObj.getString(Screated_at), TWITTER_DATE_FORMAT),\n                    account,\n                    friend + \" mentioned you on Twitter\");\n              }\n            }\n          } catch (JSONException e) {\n            Log.e(TAG, service + \":\" + e.toString());\n          }\n        }\n      }\n    }\n"}, {"dataset": "cursorGetString", "exampleID": 1400, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = cursor.getString(columnIndex)", "focalAPIStart": 246, "focalAPIEnd": 265, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)"], "useStart": [222], "useEnd": [266], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mangachika/weReportRapidAndroid/tree/master/rapidandroid/org.rapidandroid/src/org/rapidandroid/view/SummaryCursorView.java", "rawCode": "  private void setParsedBottom(Cursor cr) {\n    // mParsedSummaryRow.setText(\"Parsed Data\");\n    int lenresults = mFields.length;\n    for (int i = 0; i < lenresults; i++) {\n      mFieldLabels[i].setText(mFields[i]);\n      mFieldValues[i].setText(cr.getString(i + 2));\n    }\n  }\n"}]