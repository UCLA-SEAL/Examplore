[{"dataset": "setDefaultCloseOperation", "exampleID": 3501, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [289], "initializationEnd": [301], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setTitle(String)"], "configurationStart": [307, 347], "configurationEnd": [329, 395], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 401, "focalAPIEnd": 453, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [459, 477], "useEnd": [471, 499], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcpoison/jgrapht/tree/master/jgrapht-demo/src/main/java/org/jgrapht/demo/JGraphAdapterDemo.java", "rawCode": "  /**\n   * An alternative starting point for this demo, to also allow running this applet as an\n   * application.\n   *\n   * @param args ignored.\n   */\n  public static void main(String[] args) {\n    JGraphAdapterDemo applet = new JGraphAdapterDemo();\n    applet.init();\n\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(applet);\n    frame.setTitle(\"JGraphT Adapter to JGraph Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3502, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [101], "initializationEnd": [113], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(Rectangle)", "jFrame.setSize(Dimension)", "jFrame.setTitle(String)"], "configurationStart": [119, 186, 242], "configurationEnd": [180, 236, 287], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 293, "focalAPIEnd": 357, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "useStart": [363, 1867, 2221, 2583, 2849, 3213, 3553, 3787, 3895, 10902], "useEnd": [406, 1901, 2255, 2617, 2883, 3247, 3587, 3821, 3929, 10936], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kjohann/MasterThesis/tree/master/Loadtests/ClientLauncher/src/main/java/launcher/gui/LauncherWindow.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    frmClientLauncher = new JFrame();\n    frmClientLauncher.setBounds(new Rectangle(200, 50, 600, 500));\n    frmClientLauncher.setSize(new Dimension(600, 500));\n    frmClientLauncher.setTitle(\"Client launcher\");\n    frmClientLauncher.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frmClientLauncher\n        .getContentPane()\n        .setLayout(\n            new FormLayout(\n                new ColumnSpec[] {\n                  FormFactory.RELATED_GAP_COLSPEC,\n                  ColumnSpec.decode(\"default:grow\"),\n                  FormFactory.RELATED_GAP_COLSPEC,\n                  ColumnSpec.decode(\"default:grow\"),\n                },\n                new RowSpec[] {\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  RowSpec.decode(\"default:grow\"),\n                  FormFactory.RELATED_GAP_ROWSPEC,\n                  FormFactory.DEFAULT_ROWSPEC,\n                }));\n\n    JLabel lblAvailableTransportsBy =\n        DefaultComponentFactory.getInstance().createLabel(\"Available transports by framework:\");\n    lblAvailableTransportsBy.setFont(new Font(\"Arial\", Font.BOLD, 18));\n    frmClientLauncher.getContentPane().add(lblAvailableTransportsBy, \"2, 2\");\n\n    JLabel lblSignalrWebsocketsServersentevents =\n        DefaultComponentFactory.getInstance()\n            .createLabel(\"SignalR: webSockets, serverSentEvents, foreverFrame, longPolling\");\n    lblSignalrWebsocketsServersentevents.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    frmClientLauncher.getContentPane().add(lblSignalrWebsocketsServersentevents, \"2, 4\");\n\n    JLabel lblSocketioserverOnly =\n        DefaultComponentFactory.getInstance()\n            .createLabel(\n                \"Socket.IO: (Server only): websocket, htmlfile, xhr-polling, jsonp-polling\");\n    lblSocketioserverOnly.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    frmClientLauncher.getContentPane().add(lblSocketioserverOnly, \"2, 6\");\n\n    JLabel lblPlayWebsocketComet =\n        DefaultComponentFactory.getInstance().createLabel(\"Play: websocket, comet\");\n    lblPlayWebsocketComet.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    frmClientLauncher.getContentPane().add(lblPlayWebsocketComet, \"2, 8\");\n\n    JLabel lblLightstreamerWsstreamingHttpstreaming =\n        DefaultComponentFactory.getInstance()\n            .createLabel(\"Lightstreamer: WS-STREAMING, HTTP-STREAMING, WS-POLLING, HTTP-POLLING\");\n    lblLightstreamerWsstreamingHttpstreaming.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    frmClientLauncher.getContentPane().add(lblLightstreamerWsstreamingHttpstreaming, \"2, 10\");\n\n    JLabel lblSockjsWebsocketXhrstreaming =\n        DefaultComponentFactory.getInstance()\n            .createLabel(\"SockJS: websocket, xhr-streaming, xhr-polling\");\n    lblSockjsWebsocketXhrstreaming.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    frmClientLauncher.getContentPane().add(lblSockjsWebsocketXhrstreaming, \"2, 12\");\n\n    JLabel lblSettings = DefaultComponentFactory.getInstance().createLabel(\"Settings:\");\n    lblSettings.setFont(new Font(\"Arial\", Font.BOLD, 18));\n    frmClientLauncher.getContentPane().add(lblSettings, \"2, 14\");\n\n    JPanel settingsPanel = new JPanel();\n    frmClientLauncher.getContentPane().add(settingsPanel, \"2, 16, fill, fill\");\n    settingsPanel.setLayout(null);\n\n    JLabel lblNumberOfBrowsers = new JLabel(\"Number of browsers:\");\n    lblNumberOfBrowsers.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblNumberOfBrowsers.setBounds(0, 38, 136, 20);\n    settingsPanel.add(lblNumberOfBrowsers);\n\n    txtNumberOfBrowsers = new JTextField();\n    txtNumberOfBrowsers.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtNumberOfBrowsers.setBounds(139, 38, 26, 20);\n    txtNumberOfBrowsers.addKeyListener(listener);\n    settingsPanel.add(txtNumberOfBrowsers);\n    txtNumberOfBrowsers.setColumns(2);\n\n    JLabel lblNewLabel = new JLabel(\"Url for chart API:\");\n    lblNewLabel.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblNewLabel.setBounds(0, 69, 119, 20);\n    settingsPanel.add(lblNewLabel);\n\n    txtChartUrl = new JTextField();\n    txtChartUrl.setText(\"http://localhost/ChartsAPI/api/charts\");\n    txtChartUrl.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtChartUrl.setBounds(116, 69, 152, 20);\n    settingsPanel.add(txtChartUrl);\n    txtChartUrl.setColumns(100);\n\n    JLabel lblSpacingOfXaxis = new JLabel(\"Spacing of x-axis: \");\n    lblSpacingOfXaxis.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblSpacingOfXaxis.setBounds(0, 100, 119, 20);\n    settingsPanel.add(lblSpacingOfXaxis);\n\n    JLabel lblTotalNumberOf = new JLabel(\"Total number of clients:\");\n    lblTotalNumberOf.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblTotalNumberOf.setBounds(0, 138, 152, 20);\n    settingsPanel.add(lblTotalNumberOf);\n\n    JLabel lblConnectionInterval = new JLabel(\"Connection interval (in ms):\");\n    lblConnectionInterval.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblConnectionInterval.setBounds(0, 169, 193, 20);\n    settingsPanel.add(lblConnectionInterval);\n\n    JLabel lblConnectionInterval_1 = new JLabel(\"Message interval (in ms):\");\n    lblConnectionInterval_1.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblConnectionInterval_1.setBounds(0, 200, 165, 20);\n    settingsPanel.add(lblConnectionInterval_1);\n\n    txtSpacing = new JTextField();\n    txtSpacing.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtSpacing.setBounds(129, 100, 26, 20);\n    settingsPanel.add(txtSpacing);\n    txtSpacing.setColumns(2);\n\n    txtNumberOfClientsTotal = new JTextField();\n    txtNumberOfClientsTotal.setEnabled(false);\n    txtNumberOfClientsTotal.setEditable(false);\n    txtNumberOfClientsTotal.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtNumberOfClientsTotal.setBounds(157, 138, 53, 20);\n    settingsPanel.add(txtNumberOfClientsTotal);\n    txtNumberOfClientsTotal.setColumns(4);\n\n    txtConnInterval = new JTextField();\n    txtConnInterval.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtConnInterval.setBounds(190, 170, 53, 20);\n    settingsPanel.add(txtConnInterval);\n    txtConnInterval.setColumns(3);\n\n    txtMessageInterval = new JTextField();\n    txtMessageInterval.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtMessageInterval.setBounds(171, 201, 53, 20);\n    settingsPanel.add(txtMessageInterval);\n    txtMessageInterval.setColumns(4);\n\n    JLabel lblTransport = new JLabel(\"Transport:\");\n    lblTransport.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblTransport.setBounds(278, 36, 119, 20);\n    settingsPanel.add(lblTransport);\n\n    JLabel lblNumberOfClients = new JLabel(\"Number of clients in browser:\");\n    lblNumberOfClients.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblNumberOfClients.setBounds(278, 69, 193, 20);\n    settingsPanel.add(lblNumberOfClients);\n\n    JLabel lblNumberOfMessages = new JLabel(\"Number of messages pr. client:\");\n    lblNumberOfMessages.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblNumberOfMessages.setBounds(278, 103, 210, 20);\n    settingsPanel.add(lblNumberOfMessages);\n\n    JLabel lblTypeOfTest = new JLabel(\"Type of test:\");\n    lblTypeOfTest.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblTypeOfTest.setBounds(278, 138, 90, 20);\n    settingsPanel.add(lblTypeOfTest);\n\n    txtTransport = new JTextField();\n    txtTransport.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtTransport.setBounds(360, 37, 152, 20);\n    settingsPanel.add(txtTransport);\n    txtTransport.setColumns(20);\n\n    txtNumClientsInBrowser = new JTextField();\n    txtNumClientsInBrowser.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtNumClientsInBrowser.setBounds(465, 70, 39, 20);\n    settingsPanel.add(txtNumClientsInBrowser);\n    txtNumClientsInBrowser.addKeyListener(listener);\n    txtNumClientsInBrowser.setColumns(2);\n\n    txtNumMessagesClient = new JTextField();\n    txtNumMessagesClient.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtNumMessagesClient.setColumns(4);\n    txtNumMessagesClient.setBounds(485, 103, 58, 20);\n    settingsPanel.add(txtNumMessagesClient);\n\n    JButton btnStart = new JButton(\"Start\");\n    btnStart.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    btnStart.setBounds(278, 168, 119, 23);\n    btnStart.addActionListener(listener);\n    settingsPanel.add(btnStart);\n\n    JButton btnResetFields = new JButton(\"Reset fields\");\n    btnResetFields.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    btnResetFields.setBounds(407, 168, 119, 23);\n    btnResetFields.addActionListener(listener);\n    settingsPanel.add(btnResetFields);\n\n    ddmTestType = new JComboBox();\n    ddmTestType.setModel(new DefaultComboBoxModel(new String[] {\"Echo\", \"Broadcast\"}));\n    ddmTestType.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    ddmTestType.setBounds(378, 139, 134, 20);\n    settingsPanel.add(ddmTestType);\n\n    JLabel lblFramework = new JLabel(\"Framework:\");\n    lblFramework.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblFramework.setBounds(283, 12, 85, 14);\n    settingsPanel.add(lblFramework);\n\n    ddmFramework = new JComboBox();\n    ddmFramework.setModel(\n        new DefaultComboBoxModel(\n            new String[] {\"SignalR\", \"Socket.IO\", \"Play\", \"Lightstreamer\", \"SockJS\"}));\n    ddmFramework.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    ddmFramework.setBounds(370, 9, 134, 20);\n    settingsPanel.add(ddmFramework);\n\n    lblValidationSummary = new JLabel(\"\");\n    lblValidationSummary.setFont(new Font(\"Arial\", Font.BOLD | Font.ITALIC, 14));\n    lblValidationSummary.setForeground(Color.RED);\n    lblValidationSummary.setBounds(0, 235, 543, 25);\n    settingsPanel.add(lblValidationSummary);\n\n    JLabel lblHost = new JLabel(\"Server url:\");\n    lblHost.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    lblHost.setBounds(0, 12, 136, 14);\n    settingsPanel.add(lblHost);\n\n    txtServerUrl = new JTextField();\n    txtServerUrl.setText(\"http://192.168.137.61\");\n    txtServerUrl.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    txtServerUrl.setColumns(100);\n    txtServerUrl.setBounds(78, 10, 190, 20);\n    settingsPanel.add(txtServerUrl);\n\n    JButton btnClear = new JButton(\"Clear browsers\");\n    btnClear.setFont(new Font(\"Arial\", Font.PLAIN, 14));\n    btnClear.setBounds(335, 200, 136, 23);\n    btnClear.addActionListener(listener);\n    settingsPanel.add(btnClear);\n    frmClientLauncher.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3503, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [80, 130], "configurationEnd": [102, 142], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 148, "focalAPIEnd": 200, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [206, 224], "useEnd": [218, 246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nh2/dsa42/tree/master/teilnehmer/ben/HalloWelt/src/FramePanel.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new FramePanel());\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3504, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [631], "initializationEnd": [643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [664], "configurationEnd": [686], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 814, "focalAPIEnd": 866, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)"], "useStart": [872, 901, 934], "useEnd": [895, 928, 956], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/osate/examples/tree/master/codegen/stepper-motor/usercode-simple/WheelInterface.java", "rawCode": "  public static void main(String[] args) {\n    final WheelInterface demo = new WheelInterface();\n    Button btnStrat = new Button(\"Start\"), btnStop = new Button(\"Stop\");\n    btnStrat.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.addIncrement(1);\n            demo.setVisible(true);\n            // demo.start();\n          }\n        });\n    btnStop.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.stop();\n            demo.setVisible(false);\n          }\n        });\n    JFrame frame = new JFrame();\n    Container cp = frame.getContentPane();\n    cp.add(demo, BorderLayout.CENTER);\n    cp.add(btnStrat, BorderLayout.NORTH);\n    cp.add(btnStop, BorderLayout.SOUTH);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(500, 500);\n    frame.setLocation(500, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3505, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [91], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)"], "configurationStart": [211, 256], "configurationEnd": [233, 279], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 285, "focalAPIEnd": 349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [355], "useEnd": [377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vaadin/gwt/tree/master/dev/core/test/com/google/gwt/dev/SwingTreeLoggerTestApp.java", "rawCode": "  /** @param args ignored */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"SwingTreeLogger test\");\n    SwingLoggerPanel loggerPanel = new SwingLoggerPanel(TreeLogger.INFO, null);\n    frame.getContentPane().add(loggerPanel);\n    frame.setSize(950, 700);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setVisible(true);\n    TreeLogger logger = loggerPanel.getLogger();\n    logger.log(TreeLogger.INFO, \"info 1\");\n    TreeLogger branch = logger.branch(TreeLogger.INFO, \"info branch\");\n    branch.log(TreeLogger.DEBUG, \"debug 1\");\n    branch.log(TreeLogger.ERROR, \"error 1\");\n    TreeLogger dbgBranch = logger.branch(TreeLogger.DEBUG, \"debug branch\");\n    dbgBranch.log(TreeLogger.SPAM, \"spam 1\");\n    dbgBranch.log(TreeLogger.WARN, \"warn 1\");\n    logger.log(TreeLogger.INFO, \"info 2\");\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3506, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [91], "initializationEnd": [103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setContentPane(JLabel)", "jFrame.addKeyListener(StdDraw)", "jFrame.setResizable(boolean)"], "configurationStart": [54, 1012, 1044, 1111], "configurationEnd": [77, 1038, 1069, 1136], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1142, "focalAPIEnd": 1194, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setTitle(String)", "jFrame.setJMenuBar(JMenuBar)", "jFrame.pack()", "jFrame.requestFocusInWindow()", "jFrame.setVisible(boolean)"], "useStart": [1316, 1353, 1393, 1411, 1445], "useEnd": [1347, 1387, 1405, 1439, 1467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IlyaGubarev/Algorithms/tree/master/Java/Algorithms/src/main/java/com/ilyagubarev/algorithms/utils/std/StdDraw.java", "rawCode": "  private static void init() {\n    if (frame != null) frame.setVisible(false);\n    frame = new JFrame();\n    offscreenImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n    onscreenImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n    offscreen = offscreenImage.createGraphics();\n    onscreen = onscreenImage.createGraphics();\n    setXscale();\n    setYscale();\n    offscreen.setColor(DEFAULT_CLEAR_COLOR);\n    offscreen.fillRect(0, 0, width, height);\n    setPenColor();\n    setPenRadius();\n    setFont();\n    clear();\n\n    // add antialiasing\n    RenderingHints hints =\n        new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n    offscreen.addRenderingHints(hints);\n\n    // frame stuff\n    ImageIcon icon = new ImageIcon(onscreenImage);\n    JLabel draw = new JLabel(icon);\n\n    draw.addMouseListener(std);\n    draw.addMouseMotionListener(std);\n\n    frame.setContentPane(draw);\n    frame.addKeyListener(std); // JLabel cannot get keyboard focus\n    frame.setResizable(false);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // closes all windows\n    // frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // closes only current window\n    frame.setTitle(\"Standard Draw\");\n    frame.setJMenuBar(createMenuBar());\n    frame.pack();\n    frame.requestFocusInWindow();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3507, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [66], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setPreferredSize(Dimension)", "jFrame.add(JPanel,GridBagConstraints)", "jFrame.add(JChromeTabbedPane,*)"], "configurationStart": [126, 347, 704], "configurationEnd": [245, 393, 749], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1443, "focalAPIEnd": 1505, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)", "jFrame.add(PlayFrame,*)"], "useStart": [1511, 1533, 1806], "useEnd": [1527, 1559, 1850], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dukeboard/kevoree-corelibrary/tree/master/javase/org.kevoree.library.javase.adaptationSuperviser/src/main/java/org/kevoree/library/javase/adaptationsuperviser/AdaptationSuperviser.java", "rawCode": "  private void initGUI() {\n\n    // initialize GUI\n    rootFrame = new JFrame(\"AdaptationSuperviser @@@\" + getNodeName());\n    rootFrame.setPreferredSize(\n        new Dimension(AdaptationSuperviser.FRAME_WIDTH, AdaptationSuperviser.FRAME_HEIGHT));\n    // Tab content\n    tabContent = new JPanel();\n    tabContent.setLayout(new BorderLayout());\n    rootFrame.add(tabContent, BorderLayout.CENTER);\n\n    // TAB\n    tabbedPane = new JChromeTabbedPane(\"osx\", tabContent);\n    tabbedPane.setPreferredSize(new Dimension(50, 40));\n    tabbedPane.getSize(tabbedPane.getPreferredSize());\n    if (System.getProperty(\"os.name\").toUpperCase().startsWith(\"MAC\")) {\n      tabbedPane.setPaintBackground(false);\n    }\n    rootFrame.add(tabbedPane, BorderLayout.NORTH);\n\n    // TextLog Tab\n    textLogFrame = new ModelHistoryTextLogFrame();\n    textLogFrame.appendSystem(\"/***** CONSOLE INITIALIZED ********/ \");\n    Tab textLogTab = tabbedPane.addTab(\"Event log view\");\n    textLogTab.setInternPanel(textLogFrame);\n    textLogTab.setSelected(true);\n    tabs.put(\"textLogTab\", textLogTab);\n\n    // CurrentModel Tab\n    currentModelViewPanel = new KevoreeModelViewerPanel();\n    Tab currentModelViewTab = tabbedPane.addTab(\"Current model view\");\n    currentModelViewTab.setInternPanel(currentModelViewPanel);\n    currentModelViewTab.setSelected(true);\n    tabs.put(\"currentModelViewTab\", currentModelViewTab);\n\n    // rootFrame.setContentPane(textLogFrame);\n\n    rootFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n    rootFrame.pack();\n    rootFrame.setVisible(true);\n\n    // KevoreeLayout.getInstance().displayTab((JPanel)textLogFrame,getName());\n    if (Boolean.valueOf((String) getDictionary().get(\"allowStepByStep\"))) {\n      // add stepByStep, play and pause buttons\n      playFrame = new PlayFrame();\n      rootFrame.add(playFrame, BorderLayout.SOUTH);\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3508, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [66], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 89, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jalian-systems/Marathon/tree/master/marathon-support/forms-1.2.1/src/tutorial/com/jgoodies/forms/tutorial/util/TutorialApplication.java", "rawCode": "  protected JFrame createFrame(String title) {\n    JFrame frame = new JFrame(title);\n    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    return frame;\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3509, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [9759], "initializationEnd": [9771], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 10073, "catchExpressionStart": 9969, "catchExpressionEnd": 9990, "catchBlockStart": 9969, "catchBlockEnd": 10073, "exceptionHandlingCallStart": [10015, 9998, 9998], "exceptionHandlingCallEnd": [10037, 10038, 10066], "configuration": ["jFrame.setSize(int,int)", "jFrame.add(ScatterPlot,*)"], "configurationStart": [9779, 9833], "configurationEnd": [9802, 9869], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 9878, "focalAPIEnd": 9930, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [9938], "useEnd": [9960], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MichaelGolden/NAVA/tree/master/src/nava/vienna/inverserna/Main.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      Table table = new Table();\n      ViennaRuntime viennaRuntime =\n          new ViennaRuntime(\n              new File(\"C:/Program Files (x86)/ViennaRNA Package/\"), ViennaRuntime.OS.WINDOWS);\n      RNAinverse rnainverse = new RNAinverse(viennaRuntime);\n      IncaRNAtion2 incarnation = new IncaRNAtion2();\n      int incarnationSampleSize = 5;\n      double tempCelsius = 37;\n      // int [] target =\n      // RNAFoldingTools.getPairedSitesFromDotBracketString(\".....(((((.............))))).........(((((((.....)).))..)))...........((((..........))))....(((.(((.....(((......)))......((((((................)))))).))))))...\");\n      int[] target =\n          RNAFoldingTools.getPairedSitesFromDotBracketString(\n              \"(((.((((....((((((((((............(((.......)))))))))))))....)))))))((.......................................................))(((((....((((((((.........))))))))...))))).......(((.....)))......................\");\n      TargetStructure target1 = new TargetStructure(\"target1\", target, 37);\n      // TargetStructure target1 = new\n      // TargetStructure(\"target1\",RNAFoldingTools.getPairedSitesFromDotBracketString(\".((((((((((((....................)))))))))).))(((((((((((((..............)))))))))))))....\"), 37);\n      // TargetStructure target2 = new\n      // TargetStructure(\"target2\",RNAFoldingTools.getPairedSitesFromDotBracketString(\".((((((((((((....................)))))))))).))(((((((((((((..(((...)))...)))))))))))))....\"), 34);\n      ArrayList<TargetStructure> targetStructures = new ArrayList<>();\n      targetStructures.add(target1);\n      // targetStructures.add(target2);\n\n      GCcontentEvaluator linEvaluator = new GCcontentEvaluator();\n      RNAfoldEvaluator rnaFoldEvaluator = new RNAfoldEvaluator(viennaRuntime, true);\n      RNAfoldEvaluator rnaFoldEvaluatorNoPartition = new RNAfoldEvaluator(viennaRuntime, false);\n      AlternativeStructureEvaluator alternativeEvaluator = new AlternativeStructureEvaluator();\n      UNAfoldEvaluator unafoldEvaluator = new UNAfoldEvaluator();\n\n      ParetoOptimization pareto = new ParetoOptimization(0, 3);\n\n      ScatterPlot plot = new ScatterPlot();\n\n      // String sortOnField = \"target1: fscore[target, unafold(mfe, 37.0C)]\";\n      // CandidateComparator comp = new CandidateComparator(sortOnField);\n      // SortedList<ParetoItem> sortedList = new SortedList(comp);\n\n      for (long iter = 0; iter < 1000000; iter++) {\n        plot.x = new ArrayList<>();\n        plot.y = new ArrayList<>();\n        List<String> sequences =\n            incarnation.generateSample(\n                target1.pairedSites, tempCelsius, 0.5, 20, incarnationSampleSize);\n        sequences = sequences.subList(0, Math.min(sequences.size(), incarnationSampleSize));\n\n        ArrayList<MultiTargetAndCandidate> mtcs = new ArrayList<>(sequences.size());\n        for (String sequence : sequences) {\n          MultiTargetAndCandidate mtc = new MultiTargetAndCandidate(targetStructures, sequence);\n          mtcs.add(mtc);\n        }\n\n        System.out.println(linEvaluator);\n        batchEvaluation(mtcs, linEvaluator);\n        System.out.println(rnaFoldEvaluator);\n        batchEvaluation(mtcs, rnaFoldEvaluator);\n        System.out.println(rnaFoldEvaluatorNoPartition);\n        batchEvaluation(mtcs, rnaFoldEvaluatorNoPartition);\n        System.out.println(alternativeEvaluator);\n        batchEvaluation(mtcs, alternativeEvaluator);\n        System.out.println(unafoldEvaluator);\n        batchEvaluation(mtcs, unafoldEvaluator);\n\n        /*\n        System.out.println(linEvaluator);\n        batchEvaluation(mtcs,linEvaluator);\n        System.out.println(rnaFoldEvaluator);\n        batchEvaluation(mtcs,rnaFoldEvaluator);\n        System.out.println(alternativeEvaluator);\n        batchEvaluation(mtcs,alternativeEvaluator);\n        System.out.println(unafoldEvaluator);\n        batchEvaluation(mtcs,unafoldEvaluator);\n\n        ArrayList<String> sortedCriteria = null;\n        for(MultiTargetAndCandidate mtc : mtcs)\n        {\n        pareto.addItem(mtc);\n\n        if(sortedCriteria == null)\n        {\n        sortedCriteria = mtc.getAlphabeticalCriteria();\n        }\n        for(String criterion : sortedCriteria)\n        {\n        table.add(criterion, mtc.getCriterion(criterion).value);\n        }\n\n        System.out.println(pareto.items.size());\n        }*/\n\n        /*for(String s : sequences)\n        {\n        MultiTargetAndCandidate t = new MultiTargetAndCandidate(targetStructures, s);\n        t.addEvaluatedCriteria(linEvaluator.evaluate(t));\n        t.addEvaluatedCriteria(rnaFoldEvaluator.evaluate(t));\n        t.addEvaluatedCriteria(alternativeEvaluator.evaluate(t));\n        t.addEvaluatedCriteria(unafoldEvaluator.evaluate(t));\n        pareto.addItem(t);\n\n        if(sortedCriteria == null)\n        {\n        sortedCriteria = t.getAlphabeticalCriteria();\n        }\n        for(String criterion : sortedCriteria)\n        {\n        table.add(criterion, t.getCriterion(criterion).value);\n        }\n\n        System.out.println(pareto.items.size());\n        }*/\n\n        ArrayList<MultiTargetAndCandidate> mtcs2 = new ArrayList<>(sequences.size());\n\n        boolean refineWithRNAinverse = true;\n        if (refineWithRNAinverse) {\n          // now refine using sequences using rna inverse\n          for (TargetStructure t : targetStructures) {\n            for (MultiTargetAndCandidate mtc : mtcs) {\n              boolean useMFE = false;\n              boolean usePartitionFunction = true;\n              boolean applyConstraintMaskForStackingBases = true;\n              ArrayList<Structure> sample =\n                  rnainverse.inverse(\n                      t.pairedSites,\n                      mtc.sequence,\n                      t.tempCelsius,\n                      2,\n                      useMFE,\n                      usePartitionFunction,\n                      applyConstraintMaskForStackingBases);\n\n              if (sample != null) {\n                for (Structure structure : sample) {\n                  MultiTargetAndCandidate refinedMTC =\n                      new MultiTargetAndCandidate(targetStructures, structure.sequence);\n                  ArrayList<String> criteria = mtc.getAlphabeticalCriteria();\n                  for (String critName : criteria) {\n                    EvaluationValue criterion = mtc.getCriterion(critName);\n                    refinedMTC.setCriterion(\n                        \"sampled::\" + criterion.type.getUniqueIdentifier(), criterion);\n                  }\n                  mtcs2.add(refinedMTC);\n                }\n              }\n              /* if(sample != null)\n              {\n              for(Structure structure : sample)\n              {\n              String sequence = structure.sequence;\n              MultiTargetAndCandidate multiTarget = new MultiTargetAndCandidate(targetStructures, sequence);\n              multiTarget.addEvaluatedCriteria(linEvaluator.evaluate(multiTarget));\n              multiTarget.addEvaluatedCriteria(rnaFoldEvaluator.evaluate(multiTarget));\n              multiTarget.addEvaluatedCriteria(alternativeEvaluator.evaluate(multiTarget));\n              multiTarget.addEvaluatedCriteria(unafoldEvaluator.evaluate(multiTarget));\n              if(sortedCriteria == null)\n              {\n              sortedCriteria = multiTarget.getAlphabeticalCriteria();\n              }\n              pareto.addItem(multiTarget);\n              for(String criterion : sortedCriteria)\n              {\n              table.add(criterion, multiTarget.getCriterion(criterion).value);\n              }\n              System.out.println(pareto.items.size());\n              }\n              }*/\n            }\n          }\n        }\n\n        System.out.println(linEvaluator);\n        batchEvaluation(mtcs2, linEvaluator);\n        System.out.println(rnaFoldEvaluator);\n        batchEvaluation(mtcs2, rnaFoldEvaluator);\n        System.out.println(rnaFoldEvaluatorNoPartition);\n        batchEvaluation(mtcs2, rnaFoldEvaluatorNoPartition);\n        System.out.println(alternativeEvaluator);\n        batchEvaluation(mtcs2, alternativeEvaluator);\n        System.out.println(unafoldEvaluator);\n        batchEvaluation(mtcs2, unafoldEvaluator);\n\n        ArrayList<String> sortedCriteria = null;\n        for (MultiTargetAndCandidate mtc : mtcs2) {\n          pareto.addItem(mtc);\n\n          if (sortedCriteria == null) {\n            sortedCriteria = mtc.getAlphabeticalCriteria();\n          }\n          for (String criterion : sortedCriteria) {\n            table.add(criterion, mtc.getCriterion(criterion).value);\n          }\n\n          System.out.println(pareto.items.size());\n\n          // sortedList.add(mtc);\n        }\n\n        /* for(int i = 0 ; i < sortedList.size() ; i++)\n        {\n        ParetoItem p = sortedList.get(i);\n        System.out.println(i+\":\"+p.getCriterion(sortOnField));\n        }*/\n\n        pareto.items.get(0).printCriteria();\n        table.writeTable(new File(\"inversernatable.txt\"));\n        System.out.println(\"Correlations:\\n\" + table.getPairwiseSpearmanCorrelations());\n\n        // plot.xlab = \"target1_gc_content_paired_sites\";\n        // plot.ylab = \"target1_rnafold_ensemble_prob_37.0C\";\n        plot.xlab = \"target1: rnafold ensemble prob @ 37.0C\";\n        plot.ylab = \"target1: rnafold norm. ensemble defect @ 37.0C\";\n        // plot.ylab = \"target2: rnafold ensemble prob @ 34.0C\";\n\n        ArrayList<String> paretoCriteria = new ArrayList<>();\n        paretoCriteria.add(plot.xlab);\n        paretoCriteria.add(plot.ylab);\n        // pareto.setParetoCriteria(paretoCriteria);\n\n        for (ParetoItem t : pareto.items) {\n          plot.x.add(t.getCriterion(plot.xlab).value);\n          plot.y.add(t.getCriterion(plot.ylab).value);\n        }\n      }\n      JFrame frame = new JFrame();\n      frame.setSize(640, 480);\n\n      plot.repaint();\n      frame.add(plot, BorderLayout.CENTER);\n\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.setVisible(true);\n\n    } catch (Exception ex) {\n      Logger.getLogger(Pareto.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3510, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [352], "initializationEnd": [377], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 383, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [441, 490, 508], "useEnd": [463, 502, 530], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/malaterre/GDCM/tree/master/Utilities/VTK/Examples/Java/AWTMedical3.java", "rawCode": "  public static void main(String s[]) {\n    if (s.length == 0) {\n      return; // need a filename here\n    }\n    File theFile = new File(s[0]);\n    // File theFile = new\n    // File(\"/Users/mmroden/Documents/MVSDownloadDirectory/Documents/1.2.840.113704.1.111.3384.1271766367.5/\");\n    AWTMedical3 panel = new AWTMedical3(theFile);\n\n    JFrame frame = new JFrame(\"AWTMedical3\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(\"Center\", panel);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3511, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [144], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "configurationStart": [1225, 1264, 1293], "configurationEnd": [1247, 1287, 1315], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1322, "focalAPIEnd": 1374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maiklos/squirrel-sql/tree/master/sql12/test/jfctests/net/sourceforge/squirrel_sql/client/update/gui/UpdateSummaryDialogTestUI.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    ApplicationArguments.initialize(new String[] {});\n\n    final JFrame frame = new JFrame(\"Test UpdateManagerDialog\");\n    JButton showDialogButton = new JButton(\"Show UpdateManager Dialog\");\n    JLabel installedVersionLabel = new JLabel(\"InstalledVersion: \");\n    JLabel availableVersionLabel = new JLabel(\"AvailableVersion: \");\n    final JTextField installedVersionTF = new JTextField(\"installedVersion\", 30);\n    final JTextField availableVersionTF = new JTextField(\"availableVersion\", 30);\n    showDialogButton.addActionListener(\n        new ActionListener() {\n          UpdateSummaryDialog dialog = null;\n\n          public void actionPerformed(ActionEvent e) {\n            dialog = new UpdateSummaryDialog(frame, getArtifacts(), null);\n            dialog.setInstalledVersion(installedVersionTF.getText());\n            dialog.setAvailableVersion(availableVersionTF.getText());\n            dialog.setVisible(true);\n          }\n        });\n    JPanel panel = new JPanel();\n\n    panel.add(installedVersionLabel);\n    panel.add(installedVersionTF);\n    panel.add(availableVersionLabel);\n    panel.add(availableVersionTF);\n    panel.add(showDialogButton);\n\n    frame.getContentPane().add(panel);\n    frame.setSize(400, 200);\n    frame.setVisible(true);\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3512, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [74], "initializationEnd": [112], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 118, "focalAPIEnd": 172, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setIconImage(Image)", "jFrame.setJMenuBar(JMenuBar)", "jFrame.setContentPane(JPanel)", "jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [179, 356, 2187, 2224, 2264], "useEnd": [236, 392, 2218, 2258, 2288], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mboyd/DDFv2.0/tree/master/com/dropoutdesign/ddf/client/ClientGUI.java", "rawCode": "  private void createGUI() {\n\n    myPlayer = new Player();\n\n    myFrame = new JFrame(\"Disco Dance Floor Client\");\n    myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    myFrame.setIconImage(new ImageIcon(\"img.jpg\").getImage());\n\n    myPanel = new JPanel(new BorderLayout());\n\n    myPanel.add(createAnimationList(), BorderLayout.LINE_START);\n\n    myFrame.setJMenuBar(createMenuBar());\n\n    JPanel playControls = new JPanel(new BorderLayout());\n\n    playAnimation = new JButton();\n    playAnimation.setIcon(new ImageIcon(ClientGUI.class.getResource(\"images/play.png\")));\n    playAnimation.setEnabled(false);\n    playAnimation.setSize(220, 220);\n    playAnimation.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!myFloor.isConnected()) disconnect();\n            else if (myList.getSelectedValue() != null)\n              myPlayer.playAnimation(myList.getSelectedValue().toString());\n          }\n        });\n    playControls.add(playAnimation, BorderLayout.CENTER);\n\n    pauseAnimation = new JButton();\n    pauseAnimation.setIcon(new ImageIcon(ClientGUI.class.getResource(\"images/pause.png\")));\n    pauseAnimation.setEnabled(false);\n    pauseAnimation.setSize(220, 220);\n    pauseAnimation.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!myFloor.isConnected()) disconnect();\n            else if (myList.getSelectedValue() != null) myPlayer.pauseAnimation();\n          }\n        });\n    playControls.add(pauseAnimation, BorderLayout.WEST);\n\n    stopAnimation = new JButton();\n    stopAnimation.setIcon(new ImageIcon(ClientGUI.class.getResource(\"images/stop.png\")));\n    stopAnimation.setEnabled(false);\n    stopAnimation.setSize(220, 220);\n    stopAnimation.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!myFloor.isConnected()) disconnect();\n            else if (myList.getSelectedValue() != null) myPlayer.stopAnimation();\n          }\n        });\n    playControls.add(stopAnimation, BorderLayout.EAST);\n\n    myPanel.add(playControls, BorderLayout.CENTER);\n    myFrame.setContentPane(myPanel);\n    myFrame.setBounds(0, 0, 1024, 300);\n    myFrame.setVisible(true);\n\n    disconnected();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3513, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [160], "configurationEnd": [182], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 216, "focalAPIEnd": 280, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [286, 304], "useEnd": [298, 326], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dameiers/SI2012/tree/master/src/gui/steps/VoyageMethodStep.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new VoyageMethodStep());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3514, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [682], "initializationEnd": [694], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [700], "configurationEnd": [735], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 741, "focalAPIEnd": 793, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setJMenuBar(JMenuBar)", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()"], "useStart": [876, 2447, 2695, 2808, 2923, 3035, 6206, 6419], "useEnd": [902, 2469, 2717, 2830, 2945, 3057, 6228, 6441], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kresshy/szoftlab4/tree/master/szoftlab4/src/hu/miracleworkers/swing/GUI.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n\n    try {\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (ClassNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (InstantiationException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (UnsupportedLookAndFeelException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    // Egy új frame létrehozása a következő méretekkel\n    frame = new JFrame();\n    frame.setBounds(100, 100, 900, 600);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Menubar hozzáadása a framehez\n    JMenuBar menuBar = new JMenuBar();\n    frame.setJMenuBar(menuBar);\n\n    // Menupont hozzáadása\n    JMenu mnNewMenu = new JMenu(\"J\\u00E1t\\u00E9k\");\n    menuBar.add(mnNewMenu);\n\n    // Menuponthoz elemek hozzáadása\n    // Minden menüpontnak beállítjuk az ActionListenert\n    // Minden menüpontnak beállítjuk az ActionCommandot\n    JMenuItem mntmNewMenuItem = new JMenuItem(\"Ind\\u00EDt\\u00E1s\");\n    mntmNewMenuItem.addActionListener(this);\n    mntmNewMenuItem.setActionCommand(\"start\");\n    mnNewMenu.add(mntmNewMenuItem);\n\n    JMenuItem mntmNewMenuItem_1 = new JMenuItem(\"Kil\\u00E9p\\u00E9s\");\n    mntmNewMenuItem_1.addActionListener(this);\n    mntmNewMenuItem_1.setActionCommand(\"exit\");\n    mnNewMenu.add(mntmNewMenuItem_1);\n\n    // Menupont hozzáadása\n    JMenu mnNewMenu_1 = new JMenu(\"S\\u00FAg\\u00F3\");\n    menuBar.add(mnNewMenu_1);\n\n    // Menuponthoz elemek hozzáadása\n    // Minden menüpontnak beállítjuk az ActionListenert\n    // Minden menüpontnak beállítjuk az ActionCommandot\n    JMenuItem mntmToplista = new JMenuItem(\"Toplista\");\n    mntmToplista.addActionListener(this);\n    mntmToplista.setActionCommand(\"highscore\");\n    mnNewMenu_1.add(mntmToplista);\n\n    JMenuItem mntmSegtsg = new JMenuItem(\"Seg\\u00EDts\\u00E9g\");\n    mntmSegtsg.addActionListener(this);\n    mntmSegtsg.setActionCommand(\"help\");\n    mnNewMenu_1.add(mntmSegtsg);\n\n    JMenuItem mntmCredits = new JMenuItem(\"Credits\");\n    mntmCredits.addActionListener(this);\n    mntmCredits.setActionCommand(\"credits\");\n    mnNewMenu_1.add(mntmCredits);\n\n    // Spring layout beállítása\n    SpringLayout springLayout = new SpringLayout();\n    frame.getContentPane().setLayout(springLayout);\n\n    // A felső panel hozzáadása\n    JPanel panel = new JPanel();\n\n    // spring layout megkötések beállítása\n    springLayout.putConstraint(\n        SpringLayout.NORTH, panel, 0, SpringLayout.NORTH, frame.getContentPane());\n    springLayout.putConstraint(\n        SpringLayout.WEST, panel, 0, SpringLayout.WEST, frame.getContentPane());\n    springLayout.putConstraint(\n        SpringLayout.EAST, panel, 884, SpringLayout.WEST, frame.getContentPane());\n    panel.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));\n    frame.getContentPane().add(panel);\n\n    // Pause gomb hozzáadása a panelhez\n    JButton btnNewButton = new JButton(\"||\");\n    btnNewButton.addActionListener(this);\n    btnNewButton.setActionCommand(\"pause\");\n    btnNewButton.setHorizontalAlignment(SwingConstants.RIGHT);\n\n    remainingPoiosonLabel = new JLabel(\"M\\u00E9reg: 5\");\n    remainingPoiosonLabel.setHorizontalAlignment(SwingConstants.RIGHT);\n\n    remainingDeodorizeLabel = new JLabel(\"Szagtalan\\u00EDt\\u00F3: 5\");\n    remainingDeodorizeLabel.setHorizontalAlignment(SwingConstants.RIGHT);\n\n    // Label hozzáadása\n    // TODO pontszámés nehézségi szint számítása és kiírása\n    lblElteltId = new JLabel(\"Pontsz\\u00E1m: XXXX Neh\\u00E9zs\\u00E9gi szint: XX\");\n    GroupLayout gl_panel = new GroupLayout(panel);\n    gl_panel.setHorizontalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                Alignment.TRAILING,\n                gl_panel\n                    .createSequentialGroup()\n                    .addGap(28)\n                    .addComponent(lblElteltId)\n                    .addPreferredGap(ComponentPlacement.RELATED, 309, Short.MAX_VALUE)\n                    .addComponent(remainingPoiosonLabel)\n                    .addContainerGap(4, 50)\n                    .addComponent(remainingDeodorizeLabel)\n                    .addContainerGap(4, 50)\n                    .addComponent(btnNewButton)\n                    .addContainerGap()));\n    gl_panel.setVerticalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                Alignment.TRAILING,\n                gl_panel\n                    .createSequentialGroup()\n                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(\n                        gl_panel\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(\n                                btnNewButton,\n                                GroupLayout.PREFERRED_SIZE,\n                                23,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(\n                                remainingPoiosonLabel,\n                                GroupLayout.PREFERRED_SIZE,\n                                23,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(\n                                remainingDeodorizeLabel,\n                                GroupLayout.PREFERRED_SIZE,\n                                23,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(lblElteltId))\n                    .addContainerGap()));\n    panel.setLayout(gl_panel);\n    // Ide jön a játéktér\n    // Ez a panelünk lesz a perspektívát megjelenítő nézet\n    JPanel panel_1 = new PerspectivePanel(p);\n    panel_1.addMouseListener(this);\n\n    // A panel hozzáadása a layouthoz\n    springLayout.putConstraint(SpringLayout.NORTH, panel_1, 6, SpringLayout.SOUTH, panel);\n    springLayout.putConstraint(\n        SpringLayout.WEST, panel_1, 10, SpringLayout.WEST, frame.getContentPane());\n    springLayout.putConstraint(SpringLayout.SOUTH, panel_1, 482, SpringLayout.SOUTH, panel);\n    springLayout.putConstraint(SpringLayout.EAST, panel_1, -10, SpringLayout.EAST, panel);\n    frame.getContentPane().add(panel_1);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3515, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [93], "initializationEnd": [110], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 116, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setContentPane(JPanel)", "jFrame.setBounds(int,int,int,int)", "jFrame.setResizable(boolean)", "jFrame.setVisible(boolean)"], "useStart": [224, 261, 322, 355], "useEnd": [255, 316, 349, 379], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mboyd/DDFv2.0/tree/master/com/dropoutdesign/ddf/VirtualFloor.java", "rawCode": "  private void createGUI() {\n    JFrame.setDefaultLookAndFeelDecorated(true);\n\n    myFrame = new JFrame(\"DDF\");\n    myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    myPanel = new JPanel(new BorderLayout());\n\n    myFrame.setContentPane(myPanel);\n    myFrame.setBounds(20, 20, width * 10, height * 10 + 15);\n    myFrame.setResizable(false);\n    myFrame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3516, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [169], "initializationEnd": [181], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(BorderLayout)", "jFrame.setPreferredSize(Dimension)", "jFrame.add(JPanel)", "jFrame.add(RightPanel)", "jFrame.pack()"], "configurationStart": [187, 230, 285, 621, 644], "configurationEnd": [224, 278, 311, 637, 656], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 662, "focalAPIEnd": 714, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()"], "useStart": [720, 906, 984, 1008, 1034, 1193, 1288, 1312, 1338, 1497, 1607, 1631, 1657, 1816, 1880, 1904, 1930], "useEnd": [742, 925, 1000, 1026, 1049, 1212, 1304, 1330, 1353, 1516, 1623, 1649, 1672, 1835, 1896, 1922, 1945], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apic6/MELT/tree/master/src/Viewer/LeftPanel.java", "rawCode": "  public static void main(String argv[]) {\n    Modeller model = new Modeller();\n    model.loadPapers();\n    QuestionPaper paper = model.getPaper(0);\n\n    JFrame frame = new JFrame();\n    frame.setLayout(new GridLayout(1, 0));\n    frame.setPreferredSize(new Dimension(1200, 800));\n\n    frame.add(new LeftPanel());\n\n    RightPanel panel = new RightPanel(paper);\n\n    // frame.add(new RightPanel(paper));\n    // frame.add(new RightPanel(paper.getSection(0)));\n    // frame.add(new RightPanel(paper.getSection(0).getSubSection(0)));\n    // frame.add(new RightPanel(paper.getSection(0).getSubSection(1).getQuestion(0)));\n\n    frame.add(panel);\n\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n\n    while (true) {\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper.getSection(0));\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper.getSection(0).getSubSection(0));\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper.getSection(0).getSubSection(0).getQuestion(0));\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper);\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3517, "initialization": ["JFrame jFrame = new PlanTestFrame()"], "initializationStart": [62], "initializationEnd": [81], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 87, "focalAPIEnd": 139, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [145], "useEnd": [167], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Vanuan/sweethome3d/tree/master/test/com/eteks/sweethome3d/junit/PlanComponentTest.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new PlanTestFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3518, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [160], "configurationEnd": [182], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 211, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [281, 299], "useEnd": [293, 321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ivanstojkovic/doodle/tree/master/feeder/src/main/java/at/tuwien/sbc/feeder/gui/panels/SearchPanel.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new SearchPanel());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3519, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 2498, "focalAPIEnd": 2551, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(Dimension)", "jFrame.add(ViewCanvas,*)", "jFrame.add(JToolBar,String)", "jFrame.setJMenuBar(JMenuBar)", "jFrame.setVisible(boolean)"], "useStart": [2557, 2604, 2650, 2694, 2727], "useEnd": [2598, 2644, 2688, 2721, 2750], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dhale/idh/tree/master/bench/src/fmm/ImagePainter3.java", "rawCode": "  private void makeFrame() {\n    OrbitView view = new OrbitView(_world);\n    view.setAxesOrientation(AxesOrientation.XRIGHT_YOUT_ZDOWN);\n    _canvas = new ViewCanvas(view);\n    _canvas.setView(view);\n\n    // Modes.\n    ModeManager mm = new ModeManager();\n    mm.add(_canvas);\n    OrbitViewMode ovm = new OrbitViewMode(mm);\n    SelectDragMode sdm = new SelectDragMode(mm);\n    PaintBrushMode pbm = new PaintBrushMode(mm);\n\n    JPopupMenu.setDefaultLightWeightPopupEnabled(false);\n    ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);\n\n    // File menu.\n    JMenu fileMenu = new JMenu(\"File\");\n    fileMenu.setMnemonic('F');\n    Action exitAction =\n        new AbstractAction(\"Exit\") {\n          private static final long serialVersionUID = 1L;\n\n          public void actionPerformed(ActionEvent event) {\n            System.exit(0);\n          }\n        };\n    JMenuItem exitItem = fileMenu.add(exitAction);\n    exitItem.setMnemonic('x');\n\n    // Mode menu.\n    JMenu modeMenu = new JMenu(\"Mode\");\n    modeMenu.setMnemonic('M');\n    JMenuItem ovmItem = new ModeMenuItem(ovm);\n    modeMenu.add(ovmItem);\n    JMenuItem sdmItem = new ModeMenuItem(sdm);\n    modeMenu.add(sdmItem);\n    JMenuItem pbmItem = new ModeMenuItem(pbm);\n    modeMenu.add(pbmItem);\n\n    // Paint menu.\n    JMenu paintMenu = new JMenu(\"Paint\");\n    JMenuItem isotropicItem =\n        new JRadioButtonMenuItem(\n            new AbstractAction(\"Isotropic\") {\n              public void actionPerformed(ActionEvent e) {\n                updatePaintTensors(0.0f, 0.0f, 0.0f);\n              }\n            });\n    JMenuItem layersItem =\n        new JRadioButtonMenuItem(\n            new AbstractAction(\"Layers\") {\n              public void actionPerformed(ActionEvent e) {\n                updatePaintTensors(1.0f, 1.0f, 1.0f);\n              }\n            });\n    paintMenu.add(isotropicItem);\n    paintMenu.add(layersItem);\n    ButtonGroup paintGroup = new ButtonGroup();\n    paintGroup.add(isotropicItem);\n    paintGroup.add(layersItem);\n    layersItem.setSelected(true);\n\n    // Menu bar.\n    JMenuBar menuBar = new JMenuBar();\n    menuBar.add(fileMenu);\n    menuBar.add(modeMenu);\n    menuBar.add(paintMenu);\n\n    // Tool bar.\n    JToolBar toolBar = new JToolBar(SwingConstants.VERTICAL);\n    toolBar.setRollover(true);\n    toolBar.add(new ModeToggleButton(ovm));\n    toolBar.add(new ModeToggleButton(sdm));\n    toolBar.add(new ModeToggleButton(pbm));\n    ovm.setActive(true);\n\n    // Frame.\n    _frame = new JFrame();\n    _frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    _frame.setSize(new Dimension(SIZE, SIZE));\n    _frame.add(_canvas, BorderLayout.CENTER);\n    _frame.add(toolBar, BorderLayout.WEST);\n    _frame.setJMenuBar(menuBar);\n    _frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3520, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [1059], "initializationEnd": [1077], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [1083], "configurationEnd": [1106], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1112, "focalAPIEnd": 1164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)"], "useStart": [1170, 1228, 1304, 1343], "useEnd": [1192, 1250, 1337, 1365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johdah/Weka/tree/master/src/main/java/weka/core/json/JSONNode.java", "rawCode": "  /**\n   * Only for testing. Generates a simple JSON object and displays it.\n   *\n   * @param args ignored\n   * @throws Exception if something goes wrong\n   */\n  public static void main(String[] args) throws Exception {\n    // generates the example listed here:\n    // http://en.wikipedia.org/wiki/JSON\n    JSONNode person = new JSONNode();\n    person.addPrimitive(\"firstName\", \"John\");\n    person.addPrimitive(\"lastName\", \"Smith\");\n    JSONNode address = person.addObject(\"address\");\n    address.addPrimitive(\"streetAddress\", \"21 2nd Street\");\n    address.addPrimitive(\"city\", \"New York\");\n    address.addPrimitive(\"state\", \"NY\");\n    address.addPrimitive(\"postalCode\", 10021);\n    JSONNode phonenumbers = person.addArray(\"phoneNumbers\");\n    phonenumbers.addArrayElement(\"212 555-1234\");\n    phonenumbers.addArrayElement(\"646 555-4567\");\n\n    // output in console\n    StringBuffer buffer = new StringBuffer();\n    person.toString(buffer);\n    System.out.println(buffer.toString());\n\n    // display GUI\n    JTree tree = new JTree(person);\n    JFrame frame = new JFrame(\"JSON\");\n    frame.setSize(800, 600);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(new JScrollPane(tree), BorderLayout.CENTER);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3521, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)"], "configurationStart": [80], "configurationEnd": [97], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 103, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)"], "useStart": [161, 179, 218], "useEnd": [173, 212, 240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drossglance/glance-server/tree/master/src/test/java/uk/frequency/glance/test/PositionTraceDebug.java", "rawCode": "  static void showOnFrame(JPanel canvas) {\n    JFrame frame = new JFrame();\n    frame.add(canvas);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3522, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [58], "initializationEnd": [70], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 76, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLayout(BorderLayout)", "jFrame.setSize(int,int)", "jFrame.add(CLabel)", "jFrame.setVisible(boolean)", "jFrame.repaint()"], "useStart": [130, 165, 271, 285, 309], "useEnd": [159, 183, 279, 303, 320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rkipper/AppInventor_RK/tree/master/appinventor/blockslib/src/openblocks/codeblockutil/CLabel.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setLayout(new FlowLayout());\n    f.setSize(500, 75);\n    CLabel c = new CLabel(\"hi\");\n    c.setPreferredSize(new Dimension(400, 50));\n\n    f.add(c);\n    f.setVisible(true);\n    f.repaint();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3523, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [122], "initializationEnd": [192], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 199, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.setPreferredSize(Dimension)", "jFrame.pack()", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)"], "useStart": [257, 305, 358, 376, 415], "useEnd": [279, 352, 370, 409, 437], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alessandro-aglietti/itis-leonardo-da-vinci/tree/master/swingset3/src/com/sun/swingset3/demos/tree/TreeDemo.java", "rawCode": "  /** main method allows us to run as a standalone demo. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(TreeDemo.class.getAnnotation(DemoProperties.class).value());\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new TreeDemo());\n    frame.setPreferredSize(new Dimension(800, 600));\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3524, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [149], "initializationEnd": [171], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(MainFrame)"], "configurationStart": [177, 206], "configurationEnd": [200, 239], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 245, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "useStart": [304, 351], "useEnd": [326, 373], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/bezcurve.java", "rawCode": "  public static void main(String[] args) {\n\n    bezcurve demo = new bezcurve();\n\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"bezcurve\");\n    frame.setSize(500, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3525, "initialization": ["JFrame jFrame = new ShowUIDefaults(String)"], "initializationStart": [58], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 97, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)"], "useStart": [151, 165, 200], "useEnd": [159, 194, 218], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/branches/openvpn-als/ui/src/com/sshtools/ui/swing/ShowUIDefaults.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new ShowUIDefaults(\"UI Defaults\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.pack();\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3526, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 772, "focalAPIEnd": 833, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setPreferredSize(Dimension)", "jFrame.setSize(Dimension)"], "useStart": [839, 882], "useEnd": [876, 910], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jawi/SignalViewTest/tree/master/src/main/java/nl/lxtreme/test/Main.java", "rawCode": "  /** */\n  void init() {\n    if (!isMacOS()) {\n      try {\n        UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\");\n      } catch (Exception exception) {\n        try {\n          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n        } catch (Exception exception2) {\n          System.err.println(\"L&F setting failed!\");\n        }\n      }\n    } else {\n      try {\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n      } catch (Exception exception2) {\n        System.err.println(\"L&F setting failed!\");\n      }\n    }\n\n    this.controller = new SignalDiagramController();\n\n    final Dimension dims = new Dimension(800, 600);\n\n    this.mainFrame = new JFrame(\"OLS Signal View Component - v2\");\n    this.mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    this.mainFrame.setPreferredSize(dims);\n    this.mainFrame.setSize(dims);\n\n    this.menuBar = new JMenuBar();\n\n    final JMenu fileMenu = new JMenu(\"File\");\n    this.menuBar.add(fileMenu);\n\n    final JMenuItem fileExitItem =\n        new JMenuItem(\n            new AbstractAction(\"Exit\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                Main.this.mainFrame.setVisible(false);\n                Main.this.mainFrame.dispose();\n              }\n            });\n    fileMenu.add(fileExitItem);\n\n    final JMenu annotationMenu = new JMenu(\"Annotations\");\n    this.menuBar.add(annotationMenu);\n\n    final JMenuItem switchRenderStyle =\n        new JCheckBoxMenuItem(new SwitchAnnotationRenderingAction(this.controller));\n    annotationMenu.add(switchRenderStyle);\n\n    final JMenu diagramMenu = new JMenu(\"Diagram\");\n    this.menuBar.add(diagramMenu);\n\n    final JMenuItem diagramSnapCursorsItem =\n        new JCheckBoxMenuItem(\n            new AbstractAction(\"Snap Cursors?\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                AbstractButton button = (AbstractButton) aEvent.getSource();\n                Main.this.controller.setSnapModeEnabled(button.getModel().isSelected());\n              }\n            });\n    diagramMenu.add(diagramSnapCursorsItem);\n\n    final JMenuItem diagramEnableCursorsItem =\n        new JCheckBoxMenuItem(\n            new AbstractAction(\"Cursor mode\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                AbstractButton button = (AbstractButton) aEvent.getSource();\n                Main.this.controller.setCursorsVisible(button.getModel().isSelected());\n              }\n            });\n    diagramMenu.add(diagramEnableCursorsItem);\n\n    final JMenuItem diagramEnableMeasureModeItem =\n        new JCheckBoxMenuItem(\n            new AbstractAction(\"Measurement mode\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                AbstractButton button = (AbstractButton) aEvent.getSource();\n                Main.this.controller.setMeasurementMode(button.getModel().isSelected());\n              }\n            });\n    diagramMenu.add(diagramEnableMeasureModeItem);\n\n    // final SampleDataModel model = new SampleDataModel( 256 * 1024, new\n    // AlternatingDataWithSpacesProvider() );\n    final SampleDataModel model = new SampleDataModel(512 * 1024, new CounterDataProvider());\n\n    this.signalDiagram = SignalDiagramComponent.create(this.controller);\n    this.signalDetails = SignalDetailsView.create(this.controller);\n    this.captureDetails = CaptureDetailsView.create(this.controller);\n    this.cursorDetails = CursorDetailsView.create(this.controller);\n    this.measurementDetails = MeasurementView.create(this.controller);\n\n    this.controller.setDataModel(model);\n\n    this.signalDiagram.zoomOriginal();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3527, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [39], "initializationEnd": [51], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [57], "configurationEnd": [76], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 82, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.add(JPanel)"], "useStart": [136, 1114], "useEnd": [154, 1122], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/JavaProgrammingTutorials/MyActionListener.java", "rawCode": "  public void frame() {\n    JFrame f = new JFrame();\n    f.setSize(400, 400);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setVisible(true);\n\n    JPanel p = new JPanel();\n\n    JButton b1 = new JButton(\"Action Listener\");\n\n    // Kanoume register to component mas se ena ActionListener to opoio\n    // ftiaxnoume sto ftero..(xoris alli klasi..) gia logous taxititas\n    // kai mias pou den tha to xanaxrisimopoiisoume...ayton ton ActionListener\n    // Apo tin stigmi pou to component b1 ginei registered ston ActionListener\n    // O actionListener akouei gia opoiodipote event sxetizete me ayto to component\n    b1.addActionListener(\n        new ActionListener() {\n\n          // Molis kapoio event simbei sto b1 component i parakato methodos tha ektelesti\n          // i actionPerformed me parametro to event to opoio sinebei sto component mas..\n          public void actionPerformed(ActionEvent e) {\n            // Tha emfanisoume ena minima me tin boitheia tou JOptionPane\n            JOptionPane.showMessageDialog(null, \"Action Listener is working!!\");\n          }\n        });\n\n    p.add(b1);\n    f.add(p);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3528, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [131], "initializationEnd": [199], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 220, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setResizable(boolean)", "jFrame.setLayout(BorderLayout)", "jFrame.add(JScrollPane,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.pack()", "jFrame.pack()", "jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [292, 328, 1424, 2151, 2321, 2682, 3012, 3218], "useEnd": [322, 369, 1475, 2202, 2338, 2699, 3212, 3245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cbsa-informatik-uni-siegen/gtitool/tree/master/start/source/de/unisiegen/gtitool/start/Start.java", "rawCode": "  /** Shows the java version error {@link JFrame}. */\n  public final void showJavaVersionError() {\n    JFrame jFrameInfo =\n        new JFrame(Messages.getString(\"JavaVersion.Title\", new Object[] {})); // $NON-NLS-1$\n    jFrameInfo.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    jFrameInfo.setResizable(false);\n    jFrameInfo.setLayout(new GridBagLayout());\n\n    GridBagConstraints gridBagConstraints;\n\n    JScrollPane jScrollPaneInfo = new JScrollPane();\n    JTextArea jTextAreaInfo = new JTextArea();\n    JButton jGTIButtonClose = new JButton();\n\n    jScrollPaneInfo.setBorder(null);\n    jTextAreaInfo.setFocusable(false);\n    jTextAreaInfo.setFont(new Font(\"Dialog\", 1, 12)); // $NON-NLS-1$\n    jTextAreaInfo.setOpaque(false);\n    jTextAreaInfo.setBorder(null);\n    jTextAreaInfo.setLineWrap(true);\n    jTextAreaInfo.setWrapStyleWord(true);\n    jTextAreaInfo.setText(\n        Messages.getString(\n            \"JavaVersion.Message\", // $NON-NLS-1$\n            new Object[] {new Double(this.currentJavaVersion), new Double(MIN_JAVA_VERSION)}));\n    jScrollPaneInfo.setViewportView(jTextAreaInfo);\n\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\n    gridBagConstraints.weightx = 1.0;\n    gridBagConstraints.weighty = 1.0;\n    gridBagConstraints.insets = new Insets(16, 16, 5, 16);\n    jFrameInfo.add(jScrollPaneInfo, gridBagConstraints);\n\n    jGTIButtonClose.setFocusable(false);\n    jGTIButtonClose.setText(\n        Messages.getString(\n            \"JavaVersion.Close\", // $NON-NLS-1$\n            new Object[] {}));\n    jGTIButtonClose.addActionListener(\n        new ActionListener() {\n\n          public void actionPerformed(ActionEvent event) {\n            System.exit(0);\n          }\n        });\n\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.fill = GridBagConstraints.NONE;\n    gridBagConstraints.weightx = 0.0;\n    gridBagConstraints.weighty = 0.0;\n    gridBagConstraints.insets = new Insets(5, 16, 16, 16);\n    jFrameInfo.add(jGTIButtonClose, gridBagConstraints);\n\n    int rows = 3;\n    int columns = 16;\n    jTextAreaInfo.setRows(rows);\n    jTextAreaInfo.setColumns(columns);\n    jFrameInfo.pack();\n\n    int heightViewport = jScrollPaneInfo.getViewport().getBounds().height;\n    int heightView = jScrollPaneInfo.getViewport().getView().getBounds().height;\n\n    while ((rows < 10) && (heightView > heightViewport)) {\n      rows++;\n      columns = columns + 2;\n      jTextAreaInfo.setRows(rows);\n      jTextAreaInfo.setColumns(columns);\n      jFrameInfo.pack();\n      heightViewport = jScrollPaneInfo.getViewport().getBounds().height;\n      heightView = jScrollPaneInfo.getViewport().getView().getBounds().height;\n    }\n\n    int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;\n    int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;\n    jFrameInfo.setBounds(\n        (screenWidth / 2) - (jFrameInfo.getWidth() / 2),\n        (screenHeight / 2) - (jFrameInfo.getHeight() / 2),\n        jFrameInfo.getWidth(),\n        jFrameInfo.getHeight());\n    jFrameInfo.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3529, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [76], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 110, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)"], "useStart": [555, 591, 609, 674], "useEnd": [577, 603, 636, 696], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Unidata/thredds/tree/master/ui/src/test/java/ucar/util/prefs/ui/TestPanel2.java", "rawCode": "  /** test */\n  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Test PrefPanel\");\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n\n    TestPanel2 tp = new TestPanel2();\n    // PrefPanel pp = tp.makeTestPanelOld(null);\n    // PrefPanel pp = tp.makeTestPanel(null);\n    // PrefPanel pp = tp.makeTestPanelFirstHeading(null);\n    // PrefPanel pp = tp.make3columns();\n    PrefPanel pp = tp.make3columnsOneLong();\n\n    // PrefPanel pp = tp.makeComboBox();\n    // PrefPanel pp = tp.makeDialog().getPrefPanel();\n\n    frame.getContentPane().add(pp);\n    frame.pack();\n    frame.setLocation(300, 300);\n    // frame.setSize(300, 300);\n    frame.setVisible(true);\n\n    PrefPanel.Dialog d = tp.makeDialog();\n    d.finish();\n    d.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3530, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [90], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 108, "focalAPIEnd": 156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [162, 229, 243], "useEnd": [180, 237, 261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rortian/jung2/tree/master/jung-samples/src/main/java/edu/uci/ics/jung/samples/AnnotationsDemo.java", "rawCode": "  /** a driver for this demo */\n  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().add(new AnnotationsDemo<String, Number>());\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3531, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [242], "initializationEnd": [254], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 260, "focalAPIEnd": 308, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)"], "useStart": [314, 348, 373, 402], "useEnd": [342, 367, 396, 420], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FellowTraveler/otapij/tree/master/otapij-test-gui/src/main/java/com/moneychanger/ui/test/LoadAndShow.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    String path = \"/Users/administrator/Desktop/images.jpeg\";\n    BufferedImage image = ImageIO.read(new File(path));\n    LoadAndShow test = new LoadAndShow(image);\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.add(new JScrollPane(test));\n    f.setSize(400, 400);\n    f.setLocation(200, 200);\n    f.setVisible(true);\n    // showIcon(image);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3532, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [222], "initializationEnd": [244], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(JPanel)"], "configurationStart": [1251], "configurationEnd": [1282], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1289, "focalAPIEnd": 1344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [1350, 1368], "useEnd": [1362, 1390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rex1fernando/linewars/tree/master/trunk/Line_Wars/src/editor/BigFrameworkGuy.java", "rawCode": "  public JList showMultiSelectionBox(\n      List<ConfigType> configs,\n      String frameTitle,\n      String mainButton,\n      final ActionListener callback,\n      boolean allowMultipleSelection) {\n    final JFrame frame = new JFrame(frameTitle);\n\n    typeMaxWidth = 0;\n    JList list = createMulitSelectionList(configs, allowMultipleSelection);\n    JScrollPane scroller = new JScrollPane(list);\n    scroller.setPreferredSize(new Dimension(350, 450));\n\n    JPanel mainPanel = new JPanel();\n    mainPanel.setLayout(new BorderLayout());\n    mainPanel.add(scroller, BorderLayout.CENTER);\n\n    JPanel buttonPanel = new JPanel();\n    JButton delete = new JButton(mainButton);\n    delete.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            callback.actionPerformed(e);\n            frame.dispose();\n          }\n        });\n\n    JButton cancel = new JButton(\"Cancel\");\n    cancel.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            frame.dispose();\n          }\n        });\n\n    buttonPanel.add(delete);\n    buttonPanel.add(cancel);\n\n    mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n    frame.setContentPane(mainPanel);\n\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n\n    return list;\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3533, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [89], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [107], "configurationEnd": [142], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 148, "focalAPIEnd": 200, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()"], "useStart": [809, 2853], "useEnd": [831, 2875], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/formatic-practicas/pruebasJava/tree/master/src/antonio/ConversorWindow.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    frame = new JFrame();\n    frame.setBounds(100, 100, 450, 300);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    grados = new JTextField();\n    grados.setColumns(10);\n\n    JButton btnACelsius = new JButton(\"A Celsius\");\n    btnACelsius.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            String cad = grados.getText();\n            double res = Double.parseDouble(cad);\n            double far = conversor.cToF(res);\n            JLabel l = getResultado();\n            l.setText(\"\" + far);\n          }\n        });\n\n    JButton btnAFarenheit = new JButton(\"A Farenheit\");\n\n    resultado = new JLabel(\"\");\n    GroupLayout groupLayout = new GroupLayout(frame.getContentPane());\n    groupLayout.setHorizontalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addGap(33)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.LEADING)\n                            .addComponent(btnAFarenheit)\n                            .addGroup(\n                                groupLayout\n                                    .createSequentialGroup()\n                                    .addComponent(btnACelsius)\n                                    .addGap(115)\n                                    .addComponent(resultado))\n                            .addComponent(\n                                grados,\n                                GroupLayout.PREFERRED_SIZE,\n                                GroupLayout.DEFAULT_SIZE,\n                                GroupLayout.PREFERRED_SIZE))\n                    .addContainerGap(132, Short.MAX_VALUE)));\n    groupLayout.setVerticalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addGap(39)\n                    .addComponent(\n                        grados,\n                        GroupLayout.PREFERRED_SIZE,\n                        GroupLayout.DEFAULT_SIZE,\n                        GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(btnACelsius)\n                            .addComponent(resultado))\n                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                    .addComponent(btnAFarenheit)\n                    .addContainerGap(132, Short.MAX_VALUE)));\n    frame.getContentPane().setLayout(groupLayout);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3534, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [91], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)"], "configurationStart": [211, 256], "configurationEnd": [233, 279], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 285, "focalAPIEnd": 349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [355], "useEnd": [377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prsebastian/gwt-issue-8215/tree/master/dev/core/test/com/google/gwt/dev/SwingTreeLoggerTestApp.java", "rawCode": "  /** @param args ignored */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"SwingTreeLogger test\");\n    SwingLoggerPanel loggerPanel = new SwingLoggerPanel(TreeLogger.INFO, null);\n    frame.getContentPane().add(loggerPanel);\n    frame.setSize(950, 700);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setVisible(true);\n    TreeLogger logger = loggerPanel.getLogger();\n    logger.log(TreeLogger.INFO, \"info 1\");\n    TreeLogger branch = logger.branch(TreeLogger.INFO, \"info branch\");\n    branch.log(TreeLogger.DEBUG, \"debug 1\");\n    branch.log(TreeLogger.ERROR, \"error 1\");\n    TreeLogger dbgBranch = logger.branch(TreeLogger.DEBUG, \"debug branch\");\n    dbgBranch.log(TreeLogger.SPAM, \"spam 1\");\n    dbgBranch.log(TreeLogger.WARN, \"warn 1\");\n    logger.log(TreeLogger.INFO, \"info 2\");\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3535, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [472], "initializationEnd": [484], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addWindowListener(WindowAdapter)", "jFrame.setSize(int,int)", "jFrame.setTitle(String)"], "configurationStart": [520, 556, 587], "configurationEnd": [550, 581, 775], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 781, "focalAPIEnd": 834, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(MainFrame)", "jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "useStart": [840, 935, 999], "useEnd": [874, 958, 1022], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/RehaKassenbuch/src/rehaKassenbuch/RehaKassenbuch.java", "rawCode": "  /** ***************** */\n  public JFrame getJFrame() {\n    try {\n      UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (InstantiationException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (UnsupportedLookAndFeelException e) {\n      e.printStackTrace();\n    }\n    thisClass = this;\n    jFrame = new JFrame();\n    sqlInfo.setFrame(jFrame);\n    jFrame.addWindowListener(this);\n    jFrame.setSize(1000, 500);\n    jFrame.setTitle(\n        \"Thera-Pi Kassenbuch erstellen / bearbeiten [IK: \"\n            + aktIK\n            + \"] \"\n            + \"[Server-IP: \"\n            + dbIpAndName\n            + \"]\");\n    jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jFrame.setLocationRelativeTo(null);\n    RehaKassenbuchTab kbtab = new RehaKassenbuchTab();\n    jFrame.getContentPane().add(kbtab);\n    kbtab.setHeader(0);\n    jFrame.setVisible(true);\n    thisFrame = jFrame;\n    return jFrame;\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3536, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [62], "initializationEnd": [94], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 100, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setPreferredSize(Dimension)", "jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [313, 367, 410, 428], "useEnd": [361, 389, 422, 450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zyzzyplyx/secret-octo-cyril/tree/master/src/apps/server/visualization/VisualizationPanel.java", "rawCode": "  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Visualization Test\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    Game theGame = GameRepository.getDefaultRepository().getGame(\"biddingTicTacToe\");\n    VisualizationPanel theVisual = new VisualizationPanel(theGame);\n    frame.setPreferredSize(new Dimension(1200, 900));\n    frame.getContentPane().add(theVisual);\n    frame.pack();\n    frame.setVisible(true);\n\n    StateMachine theMachine = new ProverStateMachine();\n    theMachine.initialize(theGame.getRules());\n    try {\n      MachineState theCurrentState = theMachine.getInitialState();\n      do {\n        theVisual.observe(new ServerNewGameStateEvent(theCurrentState));\n        theCurrentState = theMachine.getRandomNextState(theCurrentState);\n        Thread.sleep(2750);\n        System.out.println(\"State: \" + theCurrentState);\n      } while (!theMachine.isTerminal(theCurrentState));\n      theVisual.observe(new ServerNewGameStateEvent(theCurrentState));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3537, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)"], "configurationStart": [302], "configurationEnd": [323], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 331, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.dispose()", "updateComponentTreeUI(jFrame)", "jFrame.pack()", "jFrame.setLocationRelativeTo(MainFrame)"], "useStart": [399, 483, 772, 828, 853], "useEnd": [426, 503, 820, 845, 891], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/javax/swing/border/Test6981576.java", "rawCode": "  public void run() {\n    if (this.infos == null) {\n      this.infos = UIManager.getInstalledLookAndFeels();\n      Thread.currentThread().setUncaughtExceptionHandler(this);\n      JPanel panel = new JPanel();\n      panel.setBorder(this);\n      this.frame = new JFrame(getClass().getSimpleName());\n      this.frame.add(panel);\n      this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      this.frame.setVisible(true);\n    }\n    if (this.index == this.infos.length) {\n      this.frame.dispose();\n    } else {\n      LookAndFeelInfo info = this.infos[this.index % this.infos.length];\n      try {\n        UIManager.setLookAndFeel(info.getClassName());\n      } catch (Exception exception) {\n        System.err.println(\"could not change look and feel\");\n      }\n      SwingUtilities.updateComponentTreeUI(this.frame);\n      this.frame.pack();\n      this.frame.setLocationRelativeTo(null);\n      this.index++;\n      SwingUtilities.invokeLater(this);\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3538, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [110], "initializationEnd": [143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 149, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.pack()", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)"], "useStart": [216, 255, 273, 312], "useEnd": [249, 267, 306, 334], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/student2ua/myTaning/tree/master/src/com/tor/swing/table/RowSorterExample.java", "rawCode": "  public static void createAndShowGUI() {\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"Table Row Rendering\");\n    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    frame.add(new RowSorterExample());\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3539, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [210], "initializationEnd": [239], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 358, "focalAPIEnd": 431, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()"], "useStart": [592], "useEnd": [614], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/corintio/opentestbed/tree/master/src/main/java/ww10/gui/SwingGUI.java", "rawCode": "  void initialize() {\n\n    statusbar = new javax.swing.JProgressBar();\n    actionPanel = new ActionPanel(dataModel);\n    averageProfitPanel = new AverageProfitPanel(dataModel);\n\n    // set up frame\n    frame = new JFrame(\"Wetenschapsweek\");\n    JSplitPane splitPane = new javax.swing.JSplitPane();\n\n    JTabbedPane tabs = new javax.swing.JTabbedPane();\n\n    frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);\n\n    splitPane.setBottomComponent(tabs);\n    splitPane.setLeftComponent(statusbar);\n\n    frame.getContentPane().add(splitPane);\n\n    // this.progressFrame.setExtendedState(Frame.MAXIMIZED_BOTH);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    // this.progressFrame.setSize(1200, 800);\n    this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    statusbar.setStringPainted(true);\n    // setting this causes gnome bars to be on top\n    // this.progressFrame.setResizable(false);\n    this.frame.setLocation(0, 0);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    if (!this.frame.isDisplayable()) {\n      // Can only do this when the frame is not visible\n      this.frame.setUndecorated(true);\n    }\n    GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n    if (gd.isFullScreenSupported()) {\n      gd.setFullScreenWindow(this.frame);\n    } else {\n      // Can't run fullscreen, need to bodge around it (setSize to screen size, etc)\n    }\n    // this.frame.addKeyListener(new KeyListener() {\n    //\n    // public void keyPressed(KeyEvent e) {\n    // }\n    //\n    // public void keyReleased(KeyEvent e) {\n    // }\n    //\n    // public void keyTyped(KeyEvent e) {\n    // if (e.getKeyChar() == 'f') {\n    // // progressFrame.setResizable(false);\n    // // // progressFrame.setUndecorated(true);\n    // // GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n    // // GraphicsDevice graphicsDevice = ge.getDefaultScreenDevice();\n    // // graphicsDevice.setFullScreenWindow(progressFrame);\n    // // //myDevice.setFullScreenWindow(null);\n    // } else if (e.getKeyChar() == 'x') {\n    // System.exit(0);\n    // }\n    // }\n    //\n    // });\n    tabs.addTab(\"Average Profit\", averageProfitPanel);\n    tabs.addTab(\"Actions\", actionPanel);\n\n    this.frame.pack(); // not needed?\n    this.frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3540, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [492], "initializationEnd": [535], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 541, "focalAPIEnd": 593, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [599, 660, 717, 735], "useEnd": [621, 682, 729, 757], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninesunqian/excitedmind/tree/master/prefuse-demos/src/main/java/prefuse/demos/ScatterPlot.java", "rawCode": "  public static void main(String[] argv) {\n    String data = \"/fisher.iris.txt\";\n    String xfield = \"SepalLength\";\n    String yfield = \"PetalLength\";\n    String sfield = \"Species\";\n    if (argv.length >= 3) {\n      data = argv[0];\n      xfield = argv[1];\n      yfield = argv[2];\n      sfield = (argv.length > 3 ? argv[3] : null);\n    }\n\n    final ScatterPlot sp = demo(data, xfield, yfield, sfield);\n    JToolBar toolbar = getEncodingToolbar(sp, xfield, yfield, sfield);\n\n    JFrame frame = new JFrame(\"p r e f u s e | s c a t t e r\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(toolbar, BorderLayout.NORTH);\n    frame.getContentPane().add(sp, BorderLayout.CENTER);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3541, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [68], "initializationEnd": [80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.add(JPanel,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.setBounds(int,int,int,int)"], "configurationStart": [142, 1211, 1405, 1460, 1515, 1572, 3141], "configurationEnd": [157, 1249, 1454, 1509, 1566, 1623, 3174], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 3180, "focalAPIEnd": 3232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [3238], "useEnd": [3260], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Benoker/DockingFrames/tree/master/docking-frames-ext-toolbar/testing/bibliothek/gui/dock/toolbar/TestCloseButton.java", "rawCode": "  public static void main(String[] args) {\n    final JFrame frame = new JFrame();\n    final JPanel pane = new JPanel(new BorderLayout());\n    frame.add(pane);\n\n    final DockFrontend frontend = new DockFrontend(frame);\n\n    // controller.setTheme( new EclipseTheme() );\n\n    frontend\n        .getController()\n        .getProperties()\n        .set(DockTheme.SPAN_FACTORY, new BasicSpanFactory(500, 250));\n    // controller.getProperties().set( DockTheme.SPAN_FACTORY, new NoSpanFactory() );\n\n    // controller.setRestrictedEnvironment( true );\n\n    final ScreenDockStation screen = new ScreenDockStation(frame);\n    frontend.addRoot(\"screen\", screen);\n\n    final ToolbarContainerDockStation west =\n        new ToolbarContainerDockStation(Orientation.VERTICAL, 5);\n    final ToolbarContainerDockStation east =\n        new ToolbarContainerDockStation(Orientation.VERTICAL, 5);\n    final ToolbarContainerDockStation north =\n        new ToolbarContainerDockStation(Orientation.HORIZONTAL, 5);\n    final ToolbarContainerDockStation south =\n        new ToolbarContainerDockStation(Orientation.HORIZONTAL, 5);\n\n    JPanel center = new JPanel();\n    center.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));\n    frame.add(center, BorderLayout.CENTER);\n\n    frontend.addRoot(\"west\", west);\n    frontend.addRoot(\"east\", east);\n    frontend.addRoot(\"north\", north);\n    frontend.addRoot(\"south\", south);\n\n    frame.add(west.getComponent(), BorderLayout.WEST);\n    frame.add(east.getComponent(), BorderLayout.EAST);\n    frame.add(north.getComponent(), BorderLayout.NORTH);\n    frame.add(south.getComponent(), BorderLayout.SOUTH);\n\n    final ToolbarGroupDockStation group = new ToolbarGroupDockStation();\n\n    Icon icon =\n        new Icon() {\n          @Override\n          public void paintIcon(Component c, Graphics g, int x, int y) {\n            g.setColor(Color.RED);\n            g.fillOval(x, y, 40, 40);\n          }\n\n          @Override\n          public int getIconWidth() {\n            return 40;\n          }\n\n          @Override\n          public int getIconHeight() {\n            return 40;\n          }\n        };\n\n    group.drop(createToolbar(true, frontend, icon, icon, icon), 0, 0);\n    group.drop(createToolbar(true, frontend, icon, icon, icon), 0, 1);\n    group.drop(createToolbar(false, frontend, icon, icon), 1, 0);\n    group.drop(createToolbar(true, frontend, icon, icon), 1, 1);\n\n    group.drop(createToolbar(false, frontend, icon, icon), new ToolbarGroupProperty(1, 0, null));\n    group.drop(\n        createToolbar(false, frontend, icon, icon, icon), new ToolbarGroupProperty(3, 2, null));\n    group.drop(\n        createToolbar(true, frontend, icon, icon, icon), new ToolbarGroupProperty(-1, 5, null));\n\n    // Disable the expand state action button\n    // controller.getProperties().set( ExpandableToolbarItemStrategy.STRATEGY, new\n    // DefaultExpandableToolbarItemStrategy(){\n    // @Override\n    // public boolean isEnabled( Dockable item, ExpandedState state ){\n    // return false;\n    // }\n    // } );\n    // group.move( group.getDockable( 0 ), new ToolbarGroupProperty( 2, 1,\n    // null ) );\n\n    west.drop(group);\n\n    frame.setBounds(20, 20, 400, 400);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n    screen.setShowing(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3542, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [325], "initializationEnd": [337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setPreferredSize(Dimension)", "jFrame.setTitle(String)", "jFrame.setLocation(int,int)", "jFrame.setContentPane(JTabbedPaneOrganizer)"], "configurationStart": [343, 394, 423, 492], "configurationEnd": [388, 417, 447, 515], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 521, "focalAPIEnd": 570, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [576, 591], "useEnd": [585, 610], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/Nebraska/src/nebraska/Nebraska.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    if (System.getProperty(\"os.name\").contains(\"Windows\")) {\n      UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel\");\n    }\n    // UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    new Constants();\n    jf = new JFrame();\n    jf.setPreferredSize(new Dimension(1000, 700));\n    jf.setTitle(\"Nebraska\");\n    jf.setLocation(200, 200);\n    jtbo = new JTabbedPaneOrganizer();\n    jf.setContentPane(jtbo);\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jf.pack();\n    jf.setVisible(true);\n    starteOfficeApplication();\n    SwingUtilities.invokeLater(\n        new Runnable() {\n          public void run() {\n            jtbo.setHeader(0);\n          }\n        });\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3543, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [246], "initializationEnd": [258], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 44, "tryExpressionEnd": 48, "tryBlockStart": 44, "tryBlockEnd": 526, "catchExpressionStart": 403, "catchExpressionEnd": 435, "catchBlockStart": 403, "catchBlockEnd": 469, "exceptionHandlingCallStart": [443], "exceptionHandlingCallEnd": [462], "configuration": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "configurationStart": [266, 301, 318], "configurationEnd": [285, 310, 337], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 345, "focalAPIEnd": 394, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/markus1978/clickwatch/tree/master/external/edu.uci.ics.jung/src/samples/graph/southern/TestSouthernWomenBipartite.java", "rawCode": "  public static void main(String[] s) {\n    try {\n      FileReader fr = new FileReader(\"samples/datasets/southern_women_data.txt\");\n\n      System.out.println(\"loading : \");\n\n      JPanel jp = new TestSouthernWomenBipartite(fr);\n      JFrame jf = new JFrame();\n      jf.getContentPane().add(jp);\n      jf.pack();\n      jf.setVisible(true);\n      jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3544, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [63], "initializationEnd": [75], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addKeyListener(Lens)"], "configurationStart": [191], "configurationEnd": [217], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 223, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(Lens)", "jFrame.setSize(Dimension)", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)"], "useStart": [281, 302, 327, 366], "useEnd": [296, 321, 360, 388], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/doubleshow/libsikuli/tree/master/research/src/main/java/org/sikuli/history/Lens.java", "rawCode": "  public static void main(String[] args) {\n\n    JFrame frame = new JFrame();\n\n    Dimension size = new Dimension(640, 480);\n\n    Lens lens = new Lens();\n    lens.show(size, \"long.png\");\n\n    frame.addKeyListener(lens);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.add(lens);\n    frame.setSize(size);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3545, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [445], "initializationEnd": [457], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 465, "focalAPIEnd": 526, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [534, 603, 629], "useEnd": [562, 621, 657], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PerEr/ExtensionTest/tree/master/apps/widgetloader/src/main/java/com/example/prototype/widgetloader/view/TestFrame.java", "rawCode": "  private void onWidgetSelected(String text) {\n    String widgetName = text;\n    String parameters = \"\";\n\n    int ix = text.indexOf(\",\");\n    if (ix > 0) {\n      widgetName = text.substring(0, ix);\n      parameters = text.substring(ix + 1);\n    }\n\n    JComponent widget =\n        widgetRegistry.instantiate(widgetName, PropertyBuilder.fromString(parameters));\n    if (widget != null) {\n      widget.setVisible(true);\n\n      JFrame widgetFrame = new JFrame();\n      widgetFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      widgetFrame.getContentPane().add(widget, BorderLayout.CENTER);\n      widgetFrame.pack();\n      widgetFrame.setVisible(true);\n    } else {\n      logError(\"Failed to instantiate widget \" + widgetName);\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3546, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [68], "initializationEnd": [86], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 92, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JXTabbedPane)", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [558, 579, 608], "useEnd": [573, 602, 630], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaspervandenberg/aida/tree/master/Search/taverna-plugin/src/main/java/org/vle/aid/taverna/components/JXTabbedPane.java", "rawCode": "  public static void main(String[] args) {\n    final JFrame frame = new JFrame(\"Test\");\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    final JXTabbedPane test = new JXTabbedPane();\n    test.add(new JXTitledPanel(\"Bozo\"), \"Bozo\");\n    test.add(new JXTitledPanel(\"Bozi\"), \"Bozi\");\n    test.setClosingAction(\n        new AbstractAction() {\n          public void actionPerformed(ActionEvent e) {\n            JOptionPane.showConfirmDialog(\n                frame, \"You're going to close \" + test.getSelectedIndex());\n          }\n        });\n\n    frame.add(test);\n    frame.setSize(500, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3547, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "configurationStart": [130, 167, 221], "configurationEnd": [161, 187, 241], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 247, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggaavv/Equinox-Clock/tree/master/contiki-2.5/examples/z1/rssi_scanner/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 590, 590);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    panel.handleInput();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3548, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [150], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(MainFrame)"], "configurationStart": [176, 205], "configurationEnd": [199, 238], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 244, "focalAPIEnd": 296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "useStart": [303, 350], "useEnd": [325, 372], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/smooth.java", "rawCode": "  public static void main(String[] args) {\n    smooth demo = new smooth();\n    //\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"smooth\");\n    frame.setSize(500, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3549, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [230], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 258, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [352, 411, 429], "useEnd": [377, 423, 451], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/2.semestr/PJV/NetBeansProjects/NetBeansProjects/graphics/src/graphics/TextDemo.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  private static void createAndShowGUI() {\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"TextDemo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Add contents to the window.\n    frame.add(new TextDemo());\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3550, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [368], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 404, "focalAPIEnd": 456, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setContentPane(JDesktopPane)", "jFrame.setMinimumSize(Dimension)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [509, 583, 3217, 3235], "useEnd": [538, 609, 3229, 3257], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mattloidolt/CS414/tree/master/A4/src/core/KitchenDisplay.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the\n   * event-dispatching thread.\n   */\n  private static void createAndShowGUI(final String[] args) {\n    final Dimension size = Toolkit.getDefaultToolkit().getScreenSize();\n    Color background = new Color(0, 0, 0);\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"PIZZA_STORE_NAME\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JDesktopPane desktop = new JDesktopPane();\n    frame.setContentPane(desktop);\n    desktop.setBackground(background);\n    frame.setMinimumSize(size);\n    desktop.setLayout(new GridBagLayout()); // this is the framing structure\n    GridBagConstraints gBC = new GridBagConstraints();\n    gBC.fill = GridBagConstraints.HORIZONTAL;\n    gBC.weightx = .75;\n    gBC.gridx = 0;\n    gBC.gridy = 0;\n    JLabel heading1 = new JLabel(\"<html><h1>ORDER</h1><hr></html>\");\n    JLabel heading2 = new JLabel(\"<html><h1>COMPLETE?</h1><hr></html>\");\n    heading1.setForeground(Color.white);\n    heading2.setForeground(Color.white);\n\n    desktop.add(heading1, gBC);\n    gBC.gridx = 1;\n    gBC.weightx = .25;\n    desktop.add(heading2, gBC);\n    gBC.gridx = 0;\n    gBC.weightx = .75;\n\n    //////// adding all the orders to the screen /////////\n    DirectoryScanner scanner = new DirectoryScanner();\n    scanner.setIncludes(new String[] {\"**/*.POS\"});\n    scanner.setBasedir(\".\");\n    scanner.setCaseSensitive(false);\n    scanner.scan();\n    final String[] files = scanner.getIncludedFiles();\n    for (int i = 0; i < files.length; i++) {\n      BufferedReader in;\n      String order = \"<html><h2>\";\n      try {\n        in = new BufferedReader(new FileReader(files[i]));\n        order += in.readLine() + \"</h2><table>\";\n        String line = in.readLine();\n        int lineNum = 1;\n        while (line != null) {\n          if (lineNum != 1) {\n            order += \"<tr>\";\n            if (lineNum == 2) order += \"Phone: \";\n            order += line + \"</tr>\";\n          }\n          lineNum++;\n          line = in.readLine();\n        }\n        order += \"</table></html>\";\n        in.close();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      JLabel o = new JLabel(order);\n      o.setForeground(Color.white);\n      gBC.gridy++;\n      desktop.add(o, gBC);\n    }\n    /////////////////////////////////////////////////////////\n\n    ///// adding buttons for marking orders as complete ////\n    gBC.gridy = 0;\n    gBC.gridx = 1;\n    gBC.weightx = .25;\n    for (int i = 0; i < files.length; i++) {\n      JButton done = new JButton(\"Done\");\n      done.setPreferredSize(new Dimension(100, 75));\n      final int k = i;\n      done.addActionListener(\n          new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n              // on button press...\n              File f = new File(files[k]);\n              boolean success = f.delete();\n              if (!success) throw new IllegalArgumentException(\"Delete: deletion failed\");\n              else restartProgram(args);\n            }\n          });\n\n      gBC.gridy++;\n      desktop.add(done, gBC);\n    }\n    ////////////////////////////////////////////////////////\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3551, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [159], "initializationEnd": [171], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setTitle(String)", "jFrame.setBounds(int,int,int,int)"], "configurationStart": [177, 218], "configurationEnd": [212, 260], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 314, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Jereq/Greed-Game/tree/master/src/greedGame/GreedGameGUI.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n\n    // Setup the frame. Generated by WindowBuilder in Eclipse\n    frmGreedGame = new JFrame();\n    frmGreedGame.setTitle(\"Greed Game\");\n    frmGreedGame.setBounds(100, 100, 740, 460);\n    // Custom handling on close, but dispose it\n    frmGreedGame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    // Split up initialization of the two separate panels\n    initializeGamePanel();\n    initializeAddPlayerPanel();\n\n    // Initial update of the window, should overwrite all place-holder\n    // values\n    update(model, null);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3552, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [150], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(MainFrame)"], "configurationStart": [176, 205], "configurationEnd": [199, 238], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 244, "focalAPIEnd": 296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "useStart": [303, 350], "useEnd": [325, 372], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/accnot.java", "rawCode": "  public static void main(String[] args) {\n    accnot demo = new accnot();\n    //\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"accnot\");\n    frame.setSize(250, 250);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3553, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [423], "initializationEnd": [466], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(StyledNonterminalSymbolSetParserPanel)", "jFrame.setBounds(int,int,int,int)"], "configurationStart": [1099, 1156], "configurationEnd": [1148, 1192], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1200, "focalAPIEnd": 1265, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1273], "useEnd": [1296], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cbsa-informatik-uni-siegen/gtitool/tree/master/de.unisiegen.gtitool.ui/test/de/unisiegen/gtitool/ui/style/StyledNonterminalSymbolSetParserPanelTest.java", "rawCode": "  /**\n   * The main method.\n   *\n   * @param arguments The arguments.\n   */\n  public static void main(String[] arguments) {\n    try {\n      TerminalSymbolSet terminalSymbolSet =\n          new DefaultTerminalSymbolSet(\n              new DefaultTerminalSymbol(\"a\"),\n              new DefaultTerminalSymbol(\"b\"), // $NON-NLS-1$//$NON-NLS-2$\n              new DefaultTerminalSymbol(\"c\")); // $NON-NLS-1$\n\n      JFrame jFrame = new JFrame(\"NonterminalSymbolSetPanelTest\"); // $NON-NLS-1$\n      StyledNonterminalSymbolSetParserPanel styledNonterminalSymbolSetParserPanel =\n          new StyledNonterminalSymbolSetParserPanel();\n      styledNonterminalSymbolSetParserPanel.setTerminalSymbolSet(terminalSymbolSet);\n      styledNonterminalSymbolSetParserPanel.addParseableChangedListener(\n          new ParseableChangedListener<NonterminalSymbolSet>() {\n\n            public void parseableChanged(NonterminalSymbolSet newNonterminalSymbolSet) {\n              if (newNonterminalSymbolSet != null) {\n                System.out.println(newNonterminalSymbolSet);\n              }\n            }\n          });\n      jFrame.add(styledNonterminalSymbolSetParserPanel);\n      jFrame.setBounds(300, 300, 400, 300);\n      jFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n      jFrame.setVisible(true);\n    } catch (TerminalSymbolSetException exc) {\n      exc.printStackTrace();\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3554, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [520], "initializationEnd": [532], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 538, "focalAPIEnd": 590, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [690, 729, 747], "useEnd": [712, 741, 769], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sryza/dco/tree/master/thesis/src/main/java/pls/vrp/TestGreedyInitializer.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    File f = new File(\"../vrptests/r1.txt\");\n    VrpProblem problem = VrpReader.readSolomon(f, 100);\n    // seems like more for the first two and less for the last works\n    VrpGreedyInitializer init = new VrpGreedyInitializer(1.0, 1.0, 0);\n    VrpSolution sol = init.nearestNeighborHeuristic(problem);\n    System.out.println(sol.getNumVehicles());\n    System.out.println(sol.getToursCost());\n    System.out.println(sol.verify(problem));\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    VrpPanel panel = new VrpPanel();\n    panel.setScale(problem);\n    panel.setSolution(sol);\n    frame.getContentPane().add(panel);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3555, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [43], "initializationEnd": [66], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setPreferredSize(Dimension)"], "configurationStart": [72], "configurationEnd": [119], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 125, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robotframework/SwingLibrary/tree/master/src/main/java/org/robotframework/swing/testapp/examplesut/TodoListApplication.java", "rawCode": "  private void createFrame() {\n    frame = new JFrame(\"Todo List\");\n    frame.setPreferredSize(new Dimension(300, 300));\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3556, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [70], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [88], "configurationEnd": [123], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 129, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.setJMenuBar(JMenuBar)"], "useStart": [2808, 22188, 22279], "useEnd": [2830, 22210, 22305], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bsnizek/JMapMatching/tree/master/JMapMatchingGUI/src/org/life/sl/mapmatching/gui/JMapMatcherGUI.java", "rawCode": "  /** GUI initialization */\n  private void initialize() {\n    frame = new JFrame();\n    frame.setBounds(100, 100, 723, 517);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    JButton btnMatch = new JButton(\"MATCH !\");\n    btnMatch.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {\n            (new Thread(new JMapMatcherThread(JMapMatcherGUI.this))).start();\n          }\n        });\n    btnMatch.addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseReleased(MouseEvent arg0) {}\n        });\n\n    txtXxxx = new JTextField();\n    txtXxxx.setText(\"please select a shapefile...\");\n    txtXxxx.setColumns(10);\n\n    btnOpenPointThemeDlg = new JButton(\".shp\");\n    btnOpenPointThemeDlg.addActionListener(this);\n\n    JLabel lblNewLabel = new JLabel(\"1B Point Theme:\");\n\n    JLabel lblNewLabel_1 = new JLabel(\"2A Road Network Theme:\");\n\n    txtPleaseSelectANetworkFile = new JTextField();\n    txtPleaseSelectANetworkFile.setText(\"please select a shapefile...\");\n    txtPleaseSelectANetworkFile.setColumns(10);\n\n    btnOpenNetworkFileDlg = new JButton(\".shp\");\n    btnOpenNetworkFileDlg.addActionListener(this);\n\n    JLabel lblGpxFile = new JLabel(\"1A GPX FIle:\");\n\n    txtPleaseSelectAGpxFile = new JTextField();\n    txtPleaseSelectAGpxFile.setText(\"please select a GPX File\");\n    txtPleaseSelectAGpxFile.setColumns(10);\n\n    btnOpenGPSFileDlg = new JButton(\".gpx\");\n    btnOpenGPSFileDlg.addActionListener(this);\n\n    txtPleaseSelectAnOsmFile = new JTextField();\n    txtPleaseSelectAnOsmFile.setText(\"please select an OSM file\");\n    txtPleaseSelectAnOsmFile.setColumns(10);\n\n    btnOsmFileDlg = new JButton(\".osm\");\n    btnOsmFileDlg.addActionListener(this);\n\n    progressBar = new JProgressBar();\n    progressBar.setStringPainted(true);\n\n    JCheckBox chckbxNewCheckBox = new JCheckBox(\"2 B Pull data directly from Open Streetmap\");\n\n    JSeparator separator = new JSeparator();\n\n    txtPleaseCreateA = new JTextField();\n    txtPleaseCreateA.setText(\"please create a GPX file\");\n    txtPleaseCreateA.setColumns(10);\n\n    JButton btngpx = new JButton(\".gpx\");\n\n    txtPleaseCreateA_1 = new JTextField();\n    txtPleaseCreateA_1.setText(\"please create a Shapefile\");\n    txtPleaseCreateA_1.setColumns(10);\n\n    JButton btnshp = new JButton(\".shp\");\n\n    JLabel lblResultPolylineFeature = new JLabel(\"Result Polyline Feature\");\n\n    JLabel lblcOpenstreetmapFile = new JLabel(\"2C OpenStreetmap File\");\n\n    JLabel label_1 = new JLabel(\"Result Polyline Feature\");\n\n    JCheckBox chckbxSingleFileOutput = new JCheckBox(\"Single File Output\");\n    chckbxSingleFileOutput.setToolTipText(\n        \"Tick if you want chosen as well as nonchosen routes in one file.\");\n\n    GroupLayout groupLayout = new GroupLayout(frame.getContentPane());\n    groupLayout.setHorizontalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.TRAILING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.TRAILING)\n                            .addComponent(\n                                progressBar, GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)\n                            .addGroup(\n                                groupLayout\n                                    .createSequentialGroup()\n                                    .addContainerGap(618, Short.MAX_VALUE)\n                                    .addComponent(btnMatch))\n                            .addGroup(\n                                groupLayout\n                                    .createSequentialGroup()\n                                    .addContainerGap(642, Short.MAX_VALUE)\n                                    .addComponent(\n                                        btnOpenNetworkFileDlg,\n                                        GroupLayout.PREFERRED_SIZE,\n                                        75,\n                                        GroupLayout.PREFERRED_SIZE))\n                            .addGroup(\n                                groupLayout\n                                    .createSequentialGroup()\n                                    .addContainerGap(68, Short.MAX_VALUE)\n                                    .addGroup(\n                                        groupLayout\n                                            .createParallelGroup(Alignment.LEADING)\n                                            .addGroup(\n                                                groupLayout\n                                                    .createSequentialGroup()\n                                                    .addGroup(\n                                                        groupLayout\n                                                            .createParallelGroup(Alignment.TRAILING)\n                                                            .addGroup(\n                                                                groupLayout\n                                                                    .createSequentialGroup()\n                                                                    .addComponent(\n                                                                        lblGpxFile,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        82,\n                                                                        GroupLayout.PREFERRED_SIZE)\n                                                                    .addPreferredGap(\n                                                                        ComponentPlacement.RELATED,\n                                                                        269,\n                                                                        Short.MAX_VALUE)\n                                                                    .addComponent(\n                                                                        txtPleaseSelectAGpxFile,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        211,\n                                                                        GroupLayout.PREFERRED_SIZE))\n                                                            .addGroup(\n                                                                groupLayout\n                                                                    .createSequentialGroup()\n                                                                    .addComponent(lblNewLabel)\n                                                                    .addPreferredGap(\n                                                                        ComponentPlacement.RELATED,\n                                                                        250,\n                                                                        Short.MAX_VALUE)\n                                                                    .addComponent(\n                                                                        txtXxxx,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        211,\n                                                                        GroupLayout\n                                                                            .PREFERRED_SIZE)))\n                                                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                                                    .addGroup(\n                                                        groupLayout\n                                                            .createParallelGroup(Alignment.LEADING)\n                                                            .addComponent(btnOpenPointThemeDlg)\n                                                            .addComponent(\n                                                                btnOpenGPSFileDlg,\n                                                                GroupLayout.PREFERRED_SIZE,\n                                                                75,\n                                                                GroupLayout.PREFERRED_SIZE)))\n                                            .addGroup(\n                                                groupLayout\n                                                    .createSequentialGroup()\n                                                    .addComponent(lblcOpenstreetmapFile)\n                                                    .addPreferredGap(\n                                                        ComponentPlacement.RELATED,\n                                                        208,\n                                                        Short.MAX_VALUE)\n                                                    .addComponent(\n                                                        txtPleaseSelectAnOsmFile,\n                                                        GroupLayout.PREFERRED_SIZE,\n                                                        211,\n                                                        GroupLayout.PREFERRED_SIZE)\n                                                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                                                    .addComponent(\n                                                        btnOsmFileDlg,\n                                                        GroupLayout.PREFERRED_SIZE,\n                                                        75,\n                                                        GroupLayout.PREFERRED_SIZE))\n                                            .addGroup(\n                                                groupLayout\n                                                    .createSequentialGroup()\n                                                    .addGroup(\n                                                        groupLayout\n                                                            .createParallelGroup(Alignment.LEADING)\n                                                            .addGroup(\n                                                                groupLayout\n                                                                    .createSequentialGroup()\n                                                                    .addComponent(\n                                                                        lblResultPolylineFeature,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        182,\n                                                                        GroupLayout.PREFERRED_SIZE)\n                                                                    .addPreferredGap(\n                                                                        ComponentPlacement\n                                                                            .UNRELATED)\n                                                                    .addComponent(\n                                                                        separator,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        1,\n                                                                        GroupLayout.PREFERRED_SIZE))\n                                                            .addComponent(\n                                                                label_1,\n                                                                GroupLayout.PREFERRED_SIZE,\n                                                                275,\n                                                                Short.MAX_VALUE))\n                                                    .addPreferredGap(ComponentPlacement.RELATED)\n                                                    .addGroup(\n                                                        groupLayout\n                                                            .createParallelGroup(\n                                                                Alignment.TRAILING, false)\n                                                            .addGroup(\n                                                                groupLayout\n                                                                    .createSequentialGroup()\n                                                                    .addComponent(txtPleaseCreateA)\n                                                                    .addPreferredGap(\n                                                                        ComponentPlacement.RELATED)\n                                                                    .addComponent(\n                                                                        btngpx,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        75,\n                                                                        GroupLayout.PREFERRED_SIZE))\n                                                            .addGroup(\n                                                                groupLayout\n                                                                    .createSequentialGroup()\n                                                                    .addComponent(\n                                                                        txtPleaseCreateA_1,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        204,\n                                                                        GroupLayout.PREFERRED_SIZE)\n                                                                    .addPreferredGap(\n                                                                        ComponentPlacement.RELATED)\n                                                                    .addComponent(\n                                                                        btnshp,\n                                                                        GroupLayout.PREFERRED_SIZE,\n                                                                        75,\n                                                                        GroupLayout.PREFERRED_SIZE))\n                                                            .addComponent(\n                                                                chckbxSingleFileOutput,\n                                                                Alignment.LEADING)))\n                                            .addGroup(\n                                                Alignment.TRAILING,\n                                                groupLayout\n                                                    .createSequentialGroup()\n                                                    .addComponent(lblNewLabel_1)\n                                                    .addPreferredGap(\n                                                        ComponentPlacement.RELATED,\n                                                        192,\n                                                        Short.MAX_VALUE)\n                                                    .addComponent(\n                                                        txtPleaseSelectANetworkFile,\n                                                        GroupLayout.PREFERRED_SIZE,\n                                                        211,\n                                                        GroupLayout.PREFERRED_SIZE)\n                                                    .addGap(87))\n                                            .addComponent(chckbxNewCheckBox))))\n                    .addContainerGap()));\n    groupLayout.setVerticalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addGap(30)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(\n                                txtPleaseSelectAGpxFile,\n                                GroupLayout.PREFERRED_SIZE,\n                                GroupLayout.DEFAULT_SIZE,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(btnOpenGPSFileDlg)\n                            .addComponent(lblGpxFile))\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.LEADING)\n                            .addComponent(btnOpenPointThemeDlg)\n                            .addGroup(\n                                groupLayout\n                                    .createParallelGroup(Alignment.BASELINE)\n                                    .addComponent(\n                                        txtXxxx,\n                                        GroupLayout.PREFERRED_SIZE,\n                                        GroupLayout.DEFAULT_SIZE,\n                                        GroupLayout.PREFERRED_SIZE)\n                                    .addComponent(lblNewLabel)))\n                    .addGap(21)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(btnOpenNetworkFileDlg)\n                            .addComponent(\n                                txtPleaseSelectANetworkFile,\n                                GroupLayout.PREFERRED_SIZE,\n                                GroupLayout.DEFAULT_SIZE,\n                                GroupLayout.PREFERRED_SIZE)\n                            .addComponent(lblNewLabel_1))\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(chckbxNewCheckBox)\n                    .addPreferredGap(ComponentPlacement.RELATED, 18, Short.MAX_VALUE)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(lblcOpenstreetmapFile)\n                            .addComponent(btnOsmFileDlg)\n                            .addComponent(\n                                txtPleaseSelectAnOsmFile,\n                                GroupLayout.PREFERRED_SIZE,\n                                GroupLayout.DEFAULT_SIZE,\n                                GroupLayout.PREFERRED_SIZE))\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.LEADING)\n                            .addGroup(\n                                groupLayout\n                                    .createSequentialGroup()\n                                    .addGap(47)\n                                    .addGroup(\n                                        groupLayout\n                                            .createParallelGroup(Alignment.TRAILING)\n                                            .addComponent(\n                                                separator,\n                                                GroupLayout.PREFERRED_SIZE,\n                                                GroupLayout.DEFAULT_SIZE,\n                                                GroupLayout.PREFERRED_SIZE)\n                                            .addGroup(\n                                                groupLayout\n                                                    .createParallelGroup(Alignment.BASELINE)\n                                                    .addComponent(\n                                                        txtPleaseCreateA,\n                                                        GroupLayout.PREFERRED_SIZE,\n                                                        GroupLayout.DEFAULT_SIZE,\n                                                        GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(btngpx)))\n                                    .addPreferredGap(ComponentPlacement.RELATED)\n                                    .addGroup(\n                                        groupLayout\n                                            .createParallelGroup(Alignment.BASELINE)\n                                            .addComponent(btnshp)\n                                            .addComponent(\n                                                txtPleaseCreateA_1,\n                                                GroupLayout.PREFERRED_SIZE,\n                                                GroupLayout.DEFAULT_SIZE,\n                                                GroupLayout.PREFERRED_SIZE)\n                                            .addComponent(label_1)))\n                            .addGroup(\n                                groupLayout\n                                    .createSequentialGroup()\n                                    .addGap(52)\n                                    .addComponent(lblResultPolylineFeature)))\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(chckbxSingleFileOutput)\n                    .addGap(47)\n                    .addComponent(btnMatch)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(\n                        progressBar,\n                        GroupLayout.PREFERRED_SIZE,\n                        GroupLayout.DEFAULT_SIZE,\n                        GroupLayout.PREFERRED_SIZE)\n                    .addContainerGap()));\n    frame.getContentPane().setLayout(groupLayout);\n\n    JMenuBar menuBar = new JMenuBar();\n    frame.setJMenuBar(menuBar);\n\n    JMenu mnNewMenu = new JMenu(\"File\");\n    menuBar.add(mnNewMenu);\n\n    JMenuItem mntmAbout = new JMenuItem(\"About\");\n    mnNewMenu.add(mntmAbout);\n\n    JMenuItem mntmCloseApplication = new JMenuItem(\"Close Application\");\n    mnNewMenu.add(mntmCloseApplication);\n\n    JMenu mnHelp = new JMenu(\"Help\");\n    menuBar.add(mnHelp);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3557, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(ViewRSSI3D)"], "configurationStart": [154], "configurationEnd": [168], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 174, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [233, 252], "useEnd": [246, 275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggaavv/Equinox-Clock/tree/master/contiki-2.5/examples/z1/rssi_scanner/ViewRSSI3D.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    ViewRSSI3D mc = new ViewRSSI3D();\n    JFrame window = new JFrame(\"3D RSSI Viewer\");\n    window.add(mc);\n    window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    window.pack();\n    window.setVisible(true);\n    mc.handleInput();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3558, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "configurationStart": [130, 167, 221], "configurationEnd": [161, 187, 241], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 247, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maniacbug/contiki-avr-zigduino/tree/master/examples/sky/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 300, 300);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    panel.handleInput();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3559, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "configurationStart": [130, 167, 221], "configurationEnd": [161, 187, 241], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 247, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/retornaz/contiki-cc253x/tree/master/examples/sky/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 300, 300);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    panel.handleInput();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3560, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [56], "initializationEnd": [68], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 90, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [144, 158], "useEnd": [152, 176], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/swingx/tree/master/swingx-core/src/test/java/org/jdesktop/swingx/JXMultiSplitPaneVisualIssues.java", "rawCode": "  public void interactiveModelChange() {\n    JFrame f = new JFrame();\n    prepare(f);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3561, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 127, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/f-breidenstein/rock-paper-scissors/tree/master/src/rps/client/ui/GamePane.java", "rawCode": "  /** Creates an option dialog of \"rock, paper, scissors\" to decide, who starts the match. */\n  public void askInitial() {\n    this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    Object[] options = {\"Schere\", \"Stein\", \"Papier\"};\n    int n =\n        JOptionPane.showOptionDialog(\n            frame,\n            \"Kampf um den Start. \" + \"Womit kämpfst du?\",\n            \"Startkampf\",\n            JOptionPane.YES_NO_CANCEL_OPTION,\n            JOptionPane.QUESTION_MESSAGE,\n            null,\n            options,\n            options[1]);\n    switch (n) {\n      case 0:\n        try {\n          this.game.setInitialChoice(this.player, FigureKind.SCISSORS);\n        } catch (RemoteException e) {\n          // RemoteException\n        }\n        break;\n      case 1:\n        try {\n          this.game.setInitialChoice(this.player, FigureKind.ROCK);\n        } catch (RemoteException e) {\n          // RemoteException\n        }\n        break;\n      case 2:\n        try {\n          this.game.setInitialChoice(this.player, FigureKind.PAPER);\n        } catch (RemoteException e) {\n          // RemoteException\n        }\n        break;\n      default:\n        try {\n          this.game.setInitialChoice(this.player, FigureKind.ROCK);\n        } catch (RemoteException e) {\n          // RemoteException\n        }\n        break;\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3562, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [276], "initializationEnd": [288], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "configurationStart": [348, 377, 417], "configurationEnd": [371, 399, 439], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 445, "focalAPIEnd": 518, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gvtools/gvtools-legacy/tree/master/extensions/extRemoteSensing/src-test-ui/es/idr/teledeteccion/gridmath/gui/CalculatorDialogTest.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n\n    try {\n      UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    } catch (Exception e) {\n      System.err.println(\"No se puede cambiar al LookAndFeel\");\n    }\n\n    JFrame frame = new JFrame();\n    GridMathDialog dialog = new GridMathDialog(null);\n    frame.setSize(650, 400);\n    frame.getContentPane().add(dialog);\n    frame.setVisible(true);\n    frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3563, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [108], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [126], "configurationEnd": [162], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 168, "focalAPIEnd": 220, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()"], "useStart": [226, 474, 1005, 1121, 1366, 1650, 2265, 3228, 3384, 3848, 4345, 4810, 4950, 5076, 5200], "useEnd": [248, 496, 1027, 1143, 1388, 1672, 2287, 3250, 3406, 3870, 4367, 4832, 4972, 5098, 5222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/serprime/Machine-Learning-WS-2012/tree/master/exercise3/knn-java-gui/src/at/ac/tuwien/knn/gui/MainWindow.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    // MAIN\n    //\n    frame = new JFrame();\n    frame.setBounds(100, 100, 1068, 810);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(null);\n\n    JLabel jlDesc =\n        new JLabel(\n            \"Test data points are highlighted by a grey circle. The colors show different classes: (actual : predicted)\");\n    jlDesc.setBounds(35, 740, 800, 20);\n    frame.getContentPane().add(jlDesc);\n\n    // SPINNER K\n    //\n    final JSpinner spinnerK = new JSpinner(new SpinnerNumberModel(defaultK, 1, 100, 1));\n    spinnerK.setBounds(827, 117, 45, 20);\n    spinnerK.addChangeListener(\n        new ChangeListener() {\n          @Override\n          public void stateChanged(ChangeEvent e) {\n            try {\n              panel.updateK((Integer) spinnerK.getModel().getValue());\n            } catch (Exception e1) {\n              e1.printStackTrace();\n            }\n          }\n        });\n    frame.getContentPane().add(spinnerK);\n    JLabel lblK = new JLabel(\"k:\");\n    lblK.setBounds(810, 120, 16, 14);\n    frame.getContentPane().add(lblK);\n\n    // DRAWING PANEL\n    //\n    panel = new DrawingArea(this);\n    panel.setBackground(Color.WHITE);\n    panel.setBorder(new LineBorder(SystemColor.controlDkShadow));\n    panel.setBounds(33, 33, 737, 699);\n    frame.getContentPane().add(panel);\n\n    // SPINNER: PERCENTAGE SPLIT (train/test)\n    //\n    final JSpinner spinnerPercentage = new JSpinner();\n    spinnerPercentage.setBounds(917, 195, 45, 20);\n    spinnerPercentage.setModel(new SpinnerNumberModel(defaultPercentage, 5, 95, 5));\n    frame.getContentPane().add(spinnerPercentage);\n    spinnerPercentage.addChangeListener(\n        new ChangeListener() {\n          @Override\n          public void stateChanged(ChangeEvent e) {\n            try {\n              panel.updatePercentage(\n                  (Integer) spinnerPercentage.getModel().getValue(),\n                  (Integer) spinnerK.getModel().getValue());\n            } catch (Exception e1) {\n              e1.printStackTrace();\n            }\n          }\n        });\n\n    // FILE HANDLING\n    //\n    lbFilename = new JLabel(\"No dataset chosen\");\n    lbFilename.setBounds(810, 73, 232, 20);\n    frame.getContentPane().add(lbFilename);\n    JButton btnOpenFile = new JButton(\"Open file...\");\n    btnOpenFile.addMouseListener(\n        new MouseAdapter() {\n          @Override\n          public void mouseClicked(MouseEvent arg0) {\n            JFileChooser fileChooser = new JFileChooser();\n            fileChooser.setCurrentDirectory(new File(\"./data\"));\n            int returnVal = fileChooser.showOpenDialog(frame);\n            if (returnVal == JFileChooser.APPROVE_OPTION) {\n              try {\n                updateDataFile(\n                    fileChooser.getSelectedFile(), (Integer) spinnerK.getModel().getValue());\n                lbFilename.setText(\"Dataset: \" + fileChooser.getSelectedFile().getName());\n              } catch (Exception e) {\n                lbFilename.setText(\"Error loading data from file.\");\n                e.printStackTrace();\n              }\n            }\n          }\n        });\n    btnOpenFile.setBounds(807, 33, 118, 23);\n    frame.getContentPane().add(btnOpenFile);\n\n    JLabel lblOfTestdata = new JLabel(\"% of Training-Data:\");\n    lblOfTestdata.setBounds(810, 198, 109, 14);\n    frame.getContentPane().add(lblOfTestdata);\n\n    // CHECKBOX: TEST DATA\n    //\n    JCheckBox chckbxShowTestData = new JCheckBox(\"Show Test Data\");\n    chckbxShowTestData.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            panel.updateShowTestData(e.getStateChange() == e.SELECTED);\n          }\n        });\n    chckbxShowTestData.setSelected(true);\n    chckbxShowTestData.setBounds(810, 261, 152, 23);\n    frame.getContentPane().add(chckbxShowTestData);\n\n    // CHECKBOX: TRAINING DATA\n    //\n    JCheckBox chckbxShowTrainingData = new JCheckBox(\"Show Training Data\");\n    chckbxShowTrainingData.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            panel.updateShowTrainingData(e.getStateChange() == e.SELECTED);\n          }\n        });\n    chckbxShowTrainingData.setSelected(true);\n    chckbxShowTrainingData.setBounds(810, 235, 152, 23);\n    frame.getContentPane().add(chckbxShowTrainingData);\n\n    JCheckBox chckbxShowConnection = new JCheckBox(\"Show connection to neighbours\");\n    chckbxShowConnection.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            panel.updateShowConnections(e.getStateChange() == e.SELECTED);\n          }\n        });\n    chckbxShowConnection.setSelected(true);\n    chckbxShowConnection.setBounds(810, 286, 211, 20);\n    frame.getContentPane().add(chckbxShowConnection);\n\n    lblClasses = new JLabel(\"Classes:\");\n    lblClasses.setBounds(810, 425, 76, 14);\n    frame.getContentPane().add(lblClasses);\n\n    lblXAxis = new JLabel(\"x-Axis:\");\n    lblXAxis.setBounds(810, 364, 232, 14);\n    frame.getContentPane().add(lblXAxis);\n\n    lblYAxis = new JLabel(\"y-Axis:\");\n    lblYAxis.setBounds(810, 389, 232, 14);\n    frame.getContentPane().add(lblYAxis);\n\n    // JLabel lblCorrectClassified = new JLabel(\"Correctly classified:\");\n    // lblCorrectClassified.setBounds(810, 332, 232, 14);\n    // frame.getContentPane().add(lblCorrectClassified);\n\n    try {\n      // DistributionGenerator.run();\n      this.updateDataFile(new File(\"data/knn-3-gauss.arff\"), 3);\n      // this.updateDataFile(new File(\"data/knn-data.arff\"), 3);\n      // this.updateDataFile(new File(\"data/knn_benjamin_data.arff\"), 3);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3564, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [83], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 113, "focalAPIEnd": 165, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.getContentPane()", "jFrame.setContentPane(VueNouvelleSession)", "jFrame.setVisible(boolean)"], "useStart": [171, 218, 698, 742], "useEnd": [194, 240, 735, 764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Projet-Tech/Projet_info4_2012/tree/master/ProjectGammon/src/test/java/fr/ujm/tse/info4/pgammon/test/vues/TestVueNouvelleSession.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Test Menu\");\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(816, 638);\n    Container panel = frame.getContentPane();\n    panel.setLayout(new FlowLayout());\n\n    Joueur jBlanc = new Joueur(1, \"ben\", Avatar.CHAT_JAUNE.getPath(), NiveauAssistant.NON_UTILISE);\n    Joueur jNoir = new Joueur(2, \"JM\", Avatar.CHEVAL.getPath(), NiveauAssistant.COMPLET);\n\n    // ParametreJeu param = new ParametreJeu(0, 3, true, jBlanc, jNoir);\n\n    VueNouvelleSession nouvellesession = new VueNouvelleSession();\n\n    nouvellesession.setJoueur1(jBlanc);\n    nouvellesession.setJoueur2(jNoir);\n    frame.setContentPane(nouvellesession);\n\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3565, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [135], "initializationEnd": [147], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 153, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setTitle(String)", "jFrame.setBounds(int,int,int,int)", "jFrame.setLayout(BorderLayout)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.setVisible(boolean)"], "useStart": [207, 244, 281, 501, 564, 633], "useEnd": [238, 275, 312, 558, 626, 651], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/olivergeith/java_batteryiconcreator/tree/master/src/de/og/batterycreator/gui/panels/iconset/IconSet.java", "rawCode": "  /**\n   * For testing purposes !!!\n   *\n   * @param args\n   */\n  public static void main(final String[] args) {\n\n    final JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setTitle(\"Hallo Emmy!!!!!!!\");\n    f.setBounds(200, 200, 640, 600);\n    f.setLayout(new BorderLayout());\n    // final IconSet set = new IconSet(new\n    // File(\"./custom/weather/(AOKP) RR Weather HTC Home Weather\"));\n    final IconSet set = new IconSet(new File(\"./custom/lockhandles\"));\n    f.add(new JLabel(set.getOverview()), BorderLayout.CENTER);\n    f.add(new JLabel(set.getOverviewStripe()), BorderLayout.NORTH);\n\n    f.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3566, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [243], "initializationEnd": [264], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 270, "focalAPIEnd": 325, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [331, 699, 717], "useEnd": [353, 711, 739], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/ttools/src/main/uk/ac/starlink/ttools/plottask/SwingPainter.java", "rawCode": "  /**\n   * Displays a screen component directly.\n   *\n   * @param comp screen component\n   */\n  public void postComponent(Component comp) {\n    JComponent holder = new JPanel(new BorderLayout());\n    holder.add(comp);\n    final JFrame frame = new JFrame(winTitle_);\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    frame.getContentPane().add(holder);\n    Object quitKey = \"quit\";\n    holder.getInputMap().put(KeyStroke.getKeyStroke('q'), quitKey);\n    holder\n        .getActionMap()\n        .put(\n            quitKey,\n            new AbstractAction() {\n              public void actionPerformed(ActionEvent evt) {\n                frame.dispose();\n              }\n            });\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3567, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [59], "initializationEnd": [86], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 92, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [146, 171], "useEnd": [165, 189], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe35/tree/master/Beispiele/Swing-Beispiel/src/com/github/propra12_orga/gui_lecture/SwingBeispiel.java", "rawCode": "  public static void main(String[] args) {\n\n    JFrame f = new JFrame(\"SwingBeispiel\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setSize(300, 200);\n    f.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3568, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [308], "initializationEnd": [334], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(MainGame)", "jFrame.pack()"], "configurationStart": [340, 361], "configurationEnd": [355, 373], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 379, "focalAPIEnd": 431, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setResizable(boolean)", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)"], "useStart": [437, 468, 507], "useEnd": [462, 501, 529], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TrabalhoDeOO/Grupo09/tree/master/trabalhoOO/src/game/MainGame.java", "rawCode": "  public void main(String args[]) {\n    MainGame game = new MainGame();\n\n    game.setPreferredSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n    game.setMaximumSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n    game.setMinimumSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n\n    JFrame frame = new JFrame(MainGame.TITLE);\n    frame.add(game);\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setResizable(false);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n\n    game.start();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3569, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [407], "initializationEnd": [429], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setResizable(boolean)", "jFrame.setPreferredSize(Dimension)", "jFrame.getContentPane()"], "configurationStart": [437, 470, 613], "configurationEnd": [462, 516, 635], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 652, "focalAPIEnd": 704, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setVisible(boolean)", "jFrame.setVisible(boolean)"], "useStart": [712, 732, 773, 2366], "useEnd": [724, 765, 795, 2389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgueret/LinkedData-QA/tree/master/src/main/java/nl/vu/qa_for_lod/MetricsExecutor.java", "rawCode": "  /**\n   * @param withGUI\n   * @param direction\n   * @throws Exception\n   */\n  public void processQueue(boolean withGUI, Direction direction) throws Exception {\n    logger.info(\"Start processing \" + resourceQueue.size() + \" resources\");\n\n    // Create an executor service\n    ExecutorService executorService = Executors.newFixedThreadPool(6);\n\n    // Init the GUI if needed\n    if (withGUI) {\n      frame = new JFrame(\"Progress\");\n      frame.setResizable(false);\n      frame.setPreferredSize(new Dimension(500, 32));\n      bar = new JProgressBar(0, resourceQueue.size());\n      bar.setStringPainted(true);\n      frame.getContentPane().add(bar);\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.pack();\n      frame.setLocationRelativeTo(null);\n      frame.setVisible(true);\n    }\n\n    // Do the processing\n    List<Future<?>> futures = new ArrayList<Future<?>>();\n    for (Resource resource : resourceQueue) {\n      MetricsTask task = new MetricsTask(this, resource, dataFetcher, extraTriples, direction);\n      Future<?> future = executorService.submit(task);\n      futures.add(future);\n    }\n\n    // Wait for all the tasks to be completed\n    for (Future<?> future : futures) {\n      try {\n        future.get();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      } catch (ExecutionException e) {\n        e.printStackTrace();\n      }\n    }\n\n    // Remove all metrics that returned no result\n    Set<Metric> notApplicable = new HashSet<Metric>();\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      if (data.getDistribution(MetricState.BEFORE).equals(data.getDistribution(MetricState.AFTER)))\n        notApplicable.add(metric);\n    }\n    for (Metric metric : notApplicable) metricsData.remove(metric);\n\n    // Do the post processing\n    logger.info(\"Start post-processing\");\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      for (MetricState state : MetricState.values()) {\n        // Ask the metric the distance to the ideal value\n        Distribution observedDistribution = data.getDistribution(state);\n        double dist = metric.getDistanceToIdeal(observedDistribution);\n        data.setDistanceToIdeal(state, dist);\n      }\n    }\n\n    logger.info(\"Done!\");\n\n    // Hide the progress bar\n    if (withGUI) {\n      frame.setVisible(false);\n    }\n\n    // Shutdown the executor\n    executorService.shutdown();\n    try {\n      if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {\n        executorService.shutdownNow();\n        if (!executorService.awaitTermination(60, TimeUnit.SECONDS))\n          System.err.println(\"Pool did not terminate\");\n      }\n    } catch (InterruptedException ie) {\n      executorService.shutdownNow();\n      Thread.currentThread().interrupt();\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3570, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [248], "initializationEnd": [270], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(Dimension)", "jFrame.setLocationRelativeTo(MainFrame)", "jFrame.setResizable(boolean)"], "configurationStart": [276, 327, 373], "configurationEnd": [321, 367, 405], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 447, "focalAPIEnd": 512, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1321], "useEnd": [1350], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andrestaht/FutureTech/tree/master/task1/src/ee/ut/math/tvt/salessystem/ui/tabs/StockTab.java", "rawCode": "  private void popAddItemBox() {\n    addItemPanel = new JPanel(new GridLayout(5, 2));\n\n    nameField = new JTextField();\n    descField = new JTextField();\n    priceField = new JTextField();\n    quantityField = new JTextField();\n\n    addItemFrame = new JFrame(\"Add item\");\n    addItemFrame.setSize(new Dimension(320, 140));\n    addItemFrame.setLocationRelativeTo(null);\n    addItemFrame.setResizable(false);\n    addItemFrame.add(addItemPanel);\n    addItemFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n\n    // add item name textlabel and textfield to panel\n    addItemPanel.add(new JLabel(\"Name: \"));\n    addItemPanel.add(nameField);\n    // add item description textlabel and textfield to panel\n    addItemPanel.add(new JLabel(\"Description: \"));\n    addItemPanel.add(descField);\n    // add item price textlabel and textfield to panel\n    addItemPanel.add(new JLabel(\"Price: \"));\n    addItemPanel.add(priceField);\n    // add item amount textlabel and textfield to panel\n    addItemPanel.add(new JLabel(\"Quantity: \"));\n    addItemPanel.add(quantityField);\n\n    // Initializing confirm and cancel buttons\n    confirmItemAdd = createItemAddConfirmButton();\n    cancelItemAdd = createItemAddCancelButton();\n\n    // Adding the buttons\n    addItemPanel.add(confirmItemAdd);\n    addItemPanel.add(cancelItemAdd);\n\n    addItemFrame.setVisible(true);\n    toggleButtonsEnable(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3571, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [84], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 108, "focalAPIEnd": 168, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [174, 240, 263], "useEnd": [201, 257, 290], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void findButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Find\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdFind(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3572, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(ListGenericSelector<String>)", "jFrame.pack()"], "configurationStart": [720, 1312], "configurationEnd": [750, 1324], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1330, "focalAPIEnd": 1382, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1388], "useEnd": [1410], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rex1fernando/linewars/tree/master/trunk/Line_Wars/src/editor/ListGenericSelector.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    ListGenericSelector<String> selector =\n        new ListGenericSelector<String>(\n            \"Strings\",\n            new GenericListCallback<String>() {\n              @Override\n              public List<String> getSelectionList() {\n                List<String> ret = new ArrayList<String>();\n                ret.add(\"fi\");\n                ret.add(\"fo\");\n                ret.add(\"fumb\");\n                return ret;\n              }\n            },\n            new CustomToString<String>() {\n              @Override\n              public String toString(String obj) {\n                return obj.toUpperCase();\n              }\n            });\n    frame.setContentPane(selector);\n    selector.addListChangeListener(\n        new ListChangeListener<String>() {\n\n          @Override\n          public void objectsRemoved(List<String> removed) {\n            System.out.println(\"removed:\" + removed.toString());\n          }\n\n          @Override\n          public void objectAdded(String added) {\n            System.out.println(\"added:\" + added);\n          }\n\n          @Override\n          public void HighlightChange(List<String> highlighted) {\n            System.out.println(\"highlighted:\" + highlighted.toString());\n          }\n        });\n\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3573, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [1077], "initializationEnd": [1089], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(JPanel)"], "configurationStart": [1095], "configurationEnd": [1118], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 1124, "focalAPIEnd": 1172, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1178], "useEnd": [1196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sessaid/p4-plugins-org.protege.editor.core.application/tree/master/src/org/protege/editor/core/ui/preferences/PreferencesPanelLayoutManager.java", "rawCode": "  public static void main(String[] args) {\n    JPanel panel = new JPanel();\n    panel.setLayout(new PreferencesPanelLayoutManager(panel));\n    panel.add(new JTextField(30), \"Base URI\");\n    panel.add(new JCheckBox(\"Include year\"));\n    panel.add(new JCheckBox(\"Include month\"));\n    panel.add(new JCheckBox(\"Include day\"));\n    panel.add(\n        new JPanel() {\n          /** */\n          private static final long serialVersionUID = 458183481480038217L;\n\n          public Dimension getPreferredSize() {\n            return new Dimension(20, 20);\n          }\n        });\n    panel.add(\n        new JSeparator() {\n          /** */\n          private static final long serialVersionUID = 147186206224716146L;\n\n          public Dimension getPreferredSize() {\n            return new Dimension(100, 5);\n          }\n        });\n    panel.setBorder(BorderFactory.createMatteBorder(30, 30, 30, 30, Color.MAGENTA));\n    JList list = new JList(new Object[] {\"A\", \"B\", \"C\"});\n    list.setPreferredSize(new Dimension(300, 200));\n    panel.add(list, \"Choose a value for me\");\n\n    JFrame f = new JFrame();\n    f.setContentPane(panel);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3574, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [74], "initializationEnd": [86], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "error(*)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 834, "catchExpressionStart": 757, "catchExpressionEnd": 777, "catchBlockStart": 757, "catchBlockEnd": 834, "exceptionHandlingCallStart": [785, 812], "exceptionHandlingCallEnd": [804, 827], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 94, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [584, 644, 707, 727], "useEnd": [606, 666, 719, 749], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/globalModelExchange-ui/src/java/org/cagrid/gme/discoverytools/GMEViewer.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      JFrame frame = new JFrame();\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n      ExtensionDescription ext =\n          (ExtensionDescription)\n              Utils.deserializeDocument(\n                  \"extensions\"\n                      + File.separator\n                      + \"gme-discovery\"\n                      + File.separator\n                      + \"extension.xml\",\n                  ExtensionDescription.class);\n      final GMEViewer panel = new GMEViewer(ext.getDiscoveryExtensionDescription());\n      frame.getContentPane().setLayout(new BorderLayout());\n      frame.getContentPane().add(panel, BorderLayout.CENTER);\n\n      frame.pack();\n      frame.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n      logger.error(e);\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3575, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [808], "initializationEnd": [834], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)"], "configurationStart": [840], "configurationEnd": [863], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 870, "focalAPIEnd": 922, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [928, 946], "useEnd": [940, 968], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidrobert/trainings/tree/master/FJ-16/Argentum/src/main/java/br/com/while42/argentum/graphics/ChartTest.java", "rawCode": "  public static void main(String[] args) {\n    TimeSerie serie =\n        buildTimeSerie(\n            1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 4, 3, 2, 1, 2, 2, 4, 5, 6, 7, 8, 9, 10, 11, 10, 6, 3,\n            2, 6, 7, 8, 9);\n\n    Chart g =\n        new Chart()\n            .title(\"Start graph\")\n            .start(3)\n            .end(32)\n            .withTimeSerie(serie)\n            .withIndicator(new SimpleMovingAverage(new LastValueIndicator()))\n            .withIndicator(new WeightedMovingAverage(new LastValueIndicator()))\n            .withIndicator(new LastValueIndicator())\n            .withIndicator(new SimpleMovingAverage(new FirstValueIndicator()))\n            .withIndicator(new WeightedMovingAverage(new FirstValueIndicator()))\n            .withIndicator(new FirstValueIndicator());\n\n    JFrame frame = new JFrame(\"Minha Janela\");\n    frame.add(g.getPanel());\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3576, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [122], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(SMB_Container)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "configurationStart": [201, 244, 258], "configurationEnd": [209, 252, 276], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 282, "focalAPIEnd": 330, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.validate()", "jFrame.addKeyListener(StdDraw)"], "useStart": [336, 384], "useEnd": [348, 424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mark005/apcsprojects/tree/master/Supa Mobsta Bros/src/supa/mobsta/bros/SMB_Container.java", "rawCode": "  /** @param args the command line arguments */\n  public static void main(String[] args) {\n    arg = args;\n    JFrame f = new JFrame(\"Supa Mobsta Bros\");\n    SMB_Container c = new SMB_Container();\n    f.add(c);\n    c.init();\n    c.start();\n    f.pack();\n    f.setVisible(true);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.validate();\n    c.requestFocusInWindow();\n    f.addKeyListener(c.getKeyListeners()[0]);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3577, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [63], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 108, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setPreferredSize(Dimension)", "jFrame.setVisible(boolean)", "jFrame.pack()"], "useStart": [233, 286, 314], "useEnd": [280, 308, 326], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/djdodson88/BackToSchool/tree/master/BackToSchool/src/main/ClassroomPanel.java", "rawCode": "  public static void main(String args[]) {\n\n    JFrame frame = new JFrame(\"Back to School: Classroom\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    int game = 1;\n\n    // frame.add(new ClassroomPanel(game, 1));\n\n    frame.setPreferredSize(new Dimension(800, 600));\n    frame.setVisible(true);\n    frame.pack();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3578, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [285], "initializationEnd": [297], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)", "jFrame.setResizable(boolean)", "jFrame.setLocation(int,int)", "jFrame.setTitle(String)"], "configurationStart": [303, 332, 360, 391, 450], "configurationEnd": [326, 354, 385, 444, 500], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 506, "focalAPIEnd": 558, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thiagocrowley/Java/tree/master/src/br/com/estudo/corejava/Frame.java", "rawCode": "  public static void main(String[] args) {\n\n    Toolkit kit = Toolkit.getDefaultToolkit();\n    Dimension screenSize = kit.getScreenSize();\n    int screenWidth = screenSize.width;\n    int screeHeight = screenSize.height;\n\n    Image img = kit.getImage(\"images.jpg\");\n\n    JFrame frame = new JFrame();\n    frame.setSize(500, 200);\n    frame.setVisible(true);\n    frame.setResizable(false);\n    frame.setLocation((screeHeight / 2), screenWidth / 6);\n    frame.setTitle(\"Testando Interface Gráfica - TIG\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    System.out.println(screeHeight + \" \" + screenWidth);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3579, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [138], "initializationEnd": [155], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(MainFrame)"], "configurationStart": [161, 190], "configurationEnd": [184, 223], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 229, "focalAPIEnd": 281, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "useStart": [288, 335], "useEnd": [310, 357], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/fog.java", "rawCode": "  public static void main(String[] args) {\n    fog demo = new fog();\n\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"fog\");\n    frame.setSize(450, 150);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3580, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(ViewRSSI3D)"], "configurationStart": [154], "configurationEnd": [168], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 174, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [233, 252], "useEnd": [246, 275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/okoye/Puppet-OS/tree/master/contiki/examples/z1/rssi_scanner/ViewRSSI3D.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    ViewRSSI3D mc = new ViewRSSI3D();\n    JFrame window = new JFrame(\"3D RSSI Viewer\");\n    window.add(mc);\n    window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    window.pack();\n    window.setVisible(true);\n    mc.handleInput();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3581, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [85], "initializationEnd": [97], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 103, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setResizable(boolean)", "jFrame.setVisible(boolean)"], "useStart": [161, 261, 279, 310], "useEnd": [183, 273, 304, 332], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pauldoo/scratch/tree/master/Sknat/src/sknat/view/Main.java", "rawCode": "  public static void main(String[] args) {\n    setLookAndFeel();\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new UnitPropertyEditor(new UnitProperties(0.25, 0.25, 0.25, 0.25)));\n    frame.pack();\n    frame.setResizable(false);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3582, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [39], "initializationEnd": [51], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [57], "configurationEnd": [76], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 82, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.add(JPanel)"], "useStart": [136, 234], "useEnd": [154, 242], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/JavaProgrammingTutorials/MyComboBox.java", "rawCode": "  public void frame() {\n    JFrame f = new JFrame();\n    f.setSize(400, 400);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setVisible(true);\n\n    JPanel p = new JPanel();\n\n    p.add(c);\n    p.add(b);\n    p.add(l);\n\n    f.add(p);\n\n    // Edo kanoume register to component ston listener pou ftaixnoume sto ftero..\n    b.addActionListener(\n        new ActionListener() {\n\n          public void actionPerformed(ActionEvent ev) {\n            String s = c.getSelectedItem().toString();\n            l.setText(s);\n          }\n        });\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3583, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [193], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(BorderLayout)", "jFrame.add(TraceViewPanel,*)"], "configurationStart": [237, 278], "configurationEnd": [272, 324], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 330, "focalAPIEnd": 394, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [400, 418, 448], "useEnd": [412, 442, 470], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Cyberspice/platform_tools_base/tree/master/perflib/src/test/java/com/android/tools/perflib/vmtrace/viz/TraceView.java", "rawCode": "  private static void createAndShowUI() {\n    final TraceViewPanel traceViewPanel = new TraceViewPanel();\n    final VmTraceData traceData = getVmTraceData(TRACE_FILE_NAME);\n\n    JFrame frame = new JFrame(\"TraceViewTestApplication\");\n    frame.setLayout(new BorderLayout());\n    frame.add(traceViewPanel, BorderLayout.CENTER);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setSize(1200, 800);\n    frame.setVisible(true);\n\n    traceViewPanel.setTrace(traceData);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3584, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [144], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(MainFrame)"], "configurationStart": [167, 196], "configurationEnd": [190, 229], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 235, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "useStart": [294, 341], "useEnd": [316, 363], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/aim.java", "rawCode": "  public static void main(String[] args) {\n    aim demo = new aim();\n    //\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"aim\");\n    frame.setSize(500, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3585, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [446], "initializationEnd": [458], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 464, "focalAPIEnd": 516, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)", "new JDialog(jFrame,boolean)"], "useStart": [522, 580, 684, 3486, 3543, 3644], "useEnd": [544, 602, 706, 3498, 3565, 3669], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epsilony/tb/tree/master/src/main/java/net/epsilony/tb/implicit/demo/TriangleContourBuilderDemo.java", "rawCode": "  public void genUI() {\n    genContourBuilder();\n    genContour();\n\n    modelPanel = new BasicModelPanel();\n    mainDrawer = new TriangleContourBuilderDemoDrawer(contourBuilder);\n    modelPanel.addAndSetupModelDrawer(mainDrawer);\n    modelPanel.setPreferredSize(new Dimension(800, 600));\n    modelPanel.addMouseListener(this);\n    modelPanel.addMouseMotionListener(this);\n    modelPanel.addAndSetupModelDrawer(new DraggingDrawer());\n\n    frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(modelPanel, BorderLayout.CENTER);\n\n    JPanel rightPanel = new JPanel();\n    frame.getContentPane().add(rightPanel, BorderLayout.LINE_END);\n    rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));\n\n    ButtonGroup buttonGroup = new ButtonGroup();\n    boolean first = true;\n    LeftRadioListener buttonAction = new LeftRadioListener();\n    List<String> methods = new ArrayList<>(builderMap.keySet());\n    Collections.sort(methods);\n    for (String buttonName : methods) {\n      JRadioButton button = new JRadioButton(buttonName);\n      button.setActionCommand(buttonName);\n      if (first) {\n        button.setSelected(true);\n        first = false;\n      }\n      buttonGroup.add(button);\n      button.addActionListener(buttonAction);\n      rightPanel.add(button);\n    }\n\n    rightPanel.add(Box.createVerticalStrut(2));\n    showGradient = new JCheckBox(\"show gradient\", true);\n    showGradient.setSelected(true);\n    showGradient.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    rightPanel.add(showGradient);\n    unitGradient = new JCheckBox(\"unit gradient\", true);\n    unitGradient.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    rightPanel.add(unitGradient);\n    rightPanel.add(Box.createVerticalStrut(2));\n    unitGradientLength = new JSlider(1, 50);\n    rightPanel.add(unitGradientLength);\n    unitGradientLength.setValue(mainDrawer.nodeDrawer.getUnitGradientLength());\n    unitGradientLength.setEnabled(mainDrawer.nodeDrawer.isDrawGradient());\n    unitGradientLength.setPaintLabels(true);\n    unitGradientLength.setPaintTicks(true);\n    unitGradientLength.setPaintTrack(true);\n    unitGradientLength.setMajorTickSpacing(10);\n    unitGradientLength.setMinorTickSpacing(1);\n    unitGradientLength.addChangeListener(\n        new ChangeListener() {\n          @Override\n          public void stateChanged(ChangeEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    gradientScale = new JFormattedTextField(NumberFormat.getNumberInstance());\n    gradientScale.setValue(mainDrawer.nodeDrawer.getGradientScale());\n    gradientScale.setMaximumSize(new Dimension(Short.MAX_VALUE, 30));\n    rightPanel.add(gradientScale);\n    gradientScale.setEnabled(!mainDrawer.nodeDrawer.isUnitGradient());\n    gradientScale.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    frame.pack();\n    modelPanel.setZoomAllNeeded(true);\n    frame.setVisible(true);\n\n    specificationPanel = new TrackContourSpecificationPanel();\n    dialog = new JDialog(frame, false);\n    dialog.setSize(500, 400);\n    dialog.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n    dialog.getContentPane().add(specificationPanel);\n    dialog.pack();\n    dialog.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3586, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [38], "initializationEnd": [63], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.add(JSpinner,*)", "jFrame.setSize(int,int)"], "configurationStart": [158, 180, 455], "configurationEnd": [174, 217, 478], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 484, "focalAPIEnd": 536, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [542], "useEnd": [564], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RoelSchevenels/Quiz-project/tree/master/Quiz/src/tetris/JuryClient.java", "rawCode": "  public void makeGUI() {\n    frame = new JFrame(\"Jury client\");\n    panel = new JPanel();\n    pieces = new JSpinner(new SpinnerNumberModel(1, 1, 5, 1));\n    frame.add(panel);\n    frame.add(pieces, BorderLayout.NORTH);\n\n    JButton one = new JButton(\"player1\");\n    JButton two = new JButton(\"player2\");\n    ActionHandler ah = new ActionHandler();\n    one.addActionListener(ah);\n    two.addActionListener(ah);\n    panel.add(one);\n    panel.add(two);\n\n    frame.setSize(300, 200);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3587, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [180], "initializationEnd": [380], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 386, "focalAPIEnd": 441, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setContentPane(JComponent)", "jFrame.setResizable(boolean)", "jFrame.setVisible(boolean)"], "useStart": [572, 609, 651, 681], "useEnd": [603, 645, 675, 703], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wizard32/PRO.M.I.S./tree/master/ngcev_2.0/src/ngce/Plot.java", "rawCode": "  protected static void createAndShowPlot() {\n\n    getPoints();\n    JFrame.setDefaultLookAndFeelDecorated(true);\n\n    /*Create and set up the window.*/\n\n    JFrame frame =\n        new JFrame(\n            \"NGCE \"\n                + BuildGraph.version\n                + \" Athens University of Economics and Business\"\n                + \" --- Software Engineering and Security Group \");\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    /*Create and set up the content pane.*/\n    JComponent newContentPane = new Plot();\n    newContentPane.setOpaque(true);\n    frame.setSize(windowX, windowY);\n    frame.setContentPane(newContentPane);\n    frame.setResizable(true);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3588, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [87], "initializationEnd": [111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 117, "focalAPIEnd": 166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [187, 978, 1004], "useEnd": [206, 998, 1023], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IanDarwin/javasrc/tree/master/src/main/java/gui/StyledText.java", "rawCode": "  public static void main(String args[]) throws BadLocationException {\n    JFrame jf = new JFrame(\"StyledText\");\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    Container cp = jf.getContentPane();\n\n    JTextPane pane = new JTextPane();\n    SimpleAttributeSet set = new SimpleAttributeSet();\n    StyleConstants.setBold(set, true);\n\n    // Set the attributes before adding text\n    pane.setCharacterAttributes(set, true);\n    pane.setText(\"Eine \");\n\n    set = new SimpleAttributeSet();\n    StyleConstants.setItalic(set, true);\n    StyleConstants.setForeground(set, Color.red);\n    StyleConstants.setBackground(set, Color.blue);\n\n    Document doc = pane.getStyledDocument();\n    doc.insertString(doc.getLength(), \"Kleine \", set);\n\n    set = new SimpleAttributeSet();\n    StyleConstants.setFontSize(set, 24);\n\n    doc.insertString(doc.getLength(), \"Nachtmusic\", set);\n\n    JScrollPane scrollPane = new JScrollPane(pane);\n    cp.add(scrollPane, BorderLayout.CENTER);\n\n    jf.setSize(400, 300);\n    jf.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3589, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [47], "initializationEnd": [68], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationByPlatform(boolean)"], "configurationStart": [74, 107], "configurationEnd": [101, 144], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 150, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [212], "useEnd": [238], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nodebox/nodebox/tree/master/src/test/java/nodebox/versioncheck/MockBox.java", "rawCode": "  public void start() {\n    JFrame mainFrame = new JFrame(\"MockBox\");\n    mainFrame.setSize(700, 500);\n    mainFrame.setLocationByPlatform(true);\n    mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    mainFrame.setVisible(true);\n    updater.applicationDidFinishLaunching();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3590, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [277], "initializationEnd": [320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 326, "focalAPIEnd": 374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [380, 412, 426], "useEnd": [398, 420, 444], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninesunqian/excitedmind/tree/master/prefuse-demos/src/main/java/prefuse/demos/FisheyeMenu.java", "rawCode": "  /** Run a demonstration of the FisheyeMenu */\n  public static final void main(String[] argv) {\n    // only log warnings\n    LoggerFactory.getLogger(\"prefuse\").setLevel(Level.WARNING);\n\n    FisheyeMenu fm = demo();\n\n    // create and display application window\n    JFrame f = new JFrame(\"p r e f u s e | f i s h e y e\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().add(fm);\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3591, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [9437], "initializationEnd": [9461], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 9775, "catchExpressionStart": 9721, "catchExpressionEnd": 9741, "catchBlockStart": 9721, "catchBlockEnd": 9775, "exceptionHandlingCallStart": [9749], "exceptionHandlingCallEnd": [9768], "configuration": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "configurationStart": [9590, 9623, 9639], "configurationEnd": [9608, 9631, 9657], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 9665, "focalAPIEnd": 9713, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.3.9/src/om/graph/Test.java", "rawCode": "  /**\n   * Main method for testing the graph routines.\n   *\n   * @param args Not used.\n   */\n  public static void main(String[] args) {\n    try {\n      String sCFTest =\n          \"<world id='w1' px='0' py='0' pw='200' ph='200' xleft='0.0' xright='1.0' ybottom='0.0' ytop='1.0'><colourField id='cf'/></world>\";\n\n      String sRoundingTest =\n          \" <world id=\\\"w1\\\" px=\\\"140\\\" py=\\\"58\\\" pw=\\\"290\\\" ph=\\\"255\\\" \\r\\n\"\n              + \" xleft=\\\"0.0\\\" xright=\\\"140.0\\\" ybottom=\\\"0.0\\\" ytop=\\\"2.2\\\">\\r\\n\"\n              + \" <xAxis ticks=\\\"20,10\\\" tickSide=\\\"-\\\" numbers=\\\"20\\\" omitNumbers=\\\"0\\\" label=\\\"temperature / �C\\\" />\\r\\n\"\n              + \" <yAxis maxY=\\\"2.0\\\" ticks=\\\"1,0.1\\\" tickSide=\\\"-\\\" numbers=\\\"0.5\\\" />\\r\\n\"\n              + \" <text x=\\\"15\\\" y=\\\"2.1\\\" text=\\\"pressure / 10���Pa\\\" />\\r\\n\"\n              + \" <text x=\\\"31\\\" y=\\\"2.14\\\" text=\\\"5\\\" />\\r\\n\"\n              + \" <grid maxY=\\\"2.01\\\" xspacing=\\\"10\\\" yspacing=\\\"0.1\\\" />\\r\\n\"\n              + \" <line x='0' y='1.4' x2='100' y2='1.4' lineColour='#f00,graph1'/>\"\n              + \" </world>\";\n      /*\n      String sAxisTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-4.0'>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='-0.5' numbers='0.5' tickSide='-' rotateLabel='no' label='Frogs' numbersFont='10px' labelMargin='-4'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles' labelMargin='8'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='0.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-1.5' numbers='0.5' tickSide='-' label='Frogs'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-2.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-3.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <grid xSpacing='0.2,0.1' ySpacing='0.2' maxY='-3' minY='-3.5'/>\"+\n      \"</world>\";\n\n      String sShapeTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='0' xright='1.0' ytop='1.0' ybottom='0'>\"+\n      \"<rectangle x='0.1' y='0.1' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.2' y='0.2' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.3' y='0.1' x2='0.4' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.4' y='0.2' width='0.1' height='0.1' lineColour='#800'/>\"+\n      \"<rectangle x='0.5' y='0.1' width='0.1' height='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<rectangle x='0.7' y='0.1' x2='0.8' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.7:4' y='0.1:4' x2='0.8:4' y2='0.2:4' lineColour='#800'/>\"+\n\n      \"<ellipse x='0.1' y='0.5' width='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.2' y='0.6' height='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.3' y='0.5' width='0.07' height='0.3' lineColour='#800'/>\"+\n      \"<ellipse x='0.4' y='0.6' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.5' y='0.5' width='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<ellipse x='0.7' y='0.5' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.7:4' y='0.5:4' width='0.1' lineColour='#800'/>\"+\n\n      \"<line x='0.3' y='0.5' x2='0.35' y2='0.15'/>\"+\n      \"<line x='0.5' y='0.5' x2='0.55' y2='0.15' lineWidth='4' lineColour='#800'/>\"+\n      \"</world>\";\n\n      String sTextTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"+\n      \"<text x='0' y='0.9' align='left' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.8' align='centre' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.7' align='right' text='Hello Graph!'/>\"+\n      \"<text x='0.9' y='0' align='left' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.8' y='0' align='centre' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.7' y='0' align='right' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='-0.9' y='0' align='left' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.8' y='0' align='centre' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.7' y='0' align='right' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.9' align='left' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.8' align='centre' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.7' align='right' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0' angle='255' colour='#efe' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='270' colour='#cfc' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='285' colour='#afa' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='300' colour='#8f8' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='315' colour='#6f6' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='330' colour='#4f4' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='345' colour='#2f2' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='0' colour='#000' text='Hello Graph!' font='bold 30px'/>\"+\n      \"</world>\";\n      */\n\n      String sXML =\n          \"<world id='w1' px='90' py='10' pw='200' ph='200' \"\n              + \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"\n              + \" <rectangle x='0' y='0.4' width='1' height='0.2'/>\"\n              + \" <rectangle x='0' y='0' width='0.5' height='0.4' fillColour='#fee'/>\"\n              + \" <rectangle x='0.5' y='0.3' width='0.5' height='0.2' lineColour='#f0f' fillColour='#fff' linewidth='4'/>\"\n              + \" <xAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='both'/>\"\n              + \" <yAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='-'/>\"\n              + \" <function minX='0' colour='#080' lineWidth='2.0' id='thingy'/>\"\n              + \" <parametricFunction minT='0' maxT='6.3' colour='#008' steps='300' lineWidth='1.0' id='thingy2'/>\"\n              + \" <colourField minX='-1' maxX='-0.5' minY='-1' maxY='-0.5' blockSize='1' id='thingy3'/>\"\n              + \"\"\n              + \"\"\n              + \"\"\n              + \"</world>\";\n      String sThisTest = sRoundingTest;\n      Document d = XML.parse(sThisTest);\n      World w =\n          new World(\n              new World.Context() {\n                public Color getColour(String sConstant) {\n                  if (sConstant.equals(\"fg\")) return Color.black;\n                  return null;\n                }\n\n                public boolean useAlternates() {\n                  return false;\n                }\n\n                public String getFontFamily() {\n                  return \"Verdana\";\n                }\n\n                public int getFontSize() {\n                  return 13;\n                }\n              },\n              d.getDocumentElement());\n\n      if (sThisTest == sCFTest) {\n        ColourFieldItem cfi = (ColourFieldItem) w.getItem(\"cf\");\n        cfi.setFunction(\n            new ColourFieldItem.Function() {\n              public Color f(double x, double y) {\n                if (x > 1.0 || y > 1.0 || x < 0.0 || y < 0.0) {\n                  System.err.println(\"Got: \" + x + \",\" + y);\n                  return Color.black;\n                }\n\n                return new Color((float) x, (float) y, 0.5f);\n              }\n            });\n      }\n\n      if (sThisTest == sXML) {\n        ((FunctionItem) w.getItem(\"thingy\"))\n            .setFunction(\n                new FunctionItem.Function() {\n                  public double f(double x) {\n                    return Math.sin(x * 2 * Math.PI);\n                  }\n                });\n\n        ((ParametricFunctionItem) w.getItem(\"thingy2\"))\n            .setFunction(\n                new ParametricFunctionItem.Function() {\n                  public GraphPoint f(double t) {\n                    return new GraphPoint((Math.cos(3.0 * t)), Math.sin(5.0 * t));\n                  }\n                });\n\n        ((ColourFieldItem) w.getItem(\"thingy3\"))\n            .setFunction(\n                new ColourFieldItem.Function() {\n                  public Color f(double x, double y) {\n                    float f1 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.8), 2) + Math.pow(y - (-0.8), 2)));\n                    float f2 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.6), 2) + Math.pow(y - (-0.5), 2)));\n                    return new Color(Math.min(f1, 1.0f), Math.min(f2, 1.0f), 0.0f);\n                  }\n                });\n      }\n\n      int iW = 600, iH = 600, iGraphX = 50, iGraphY = 10, iGraphW = 500, iGraphH = 500;\n      BufferedImage bi = new BufferedImage(iW, iH, BufferedImage.TYPE_INT_RGB);\n      Graphics2D g2 = bi.createGraphics();\n      boolean bAntiAlias = true;\n      g2.setRenderingHint(\n          RenderingHints.KEY_ANTIALIASING,\n          bAntiAlias ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);\n      g2.setRenderingHint(\n          RenderingHints.KEY_TEXT_ANTIALIASING,\n          bAntiAlias\n              ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON\n              : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n      g2.setColor(Color.yellow);\n      g2.fillRect(0, 0, iW, iH);\n      g2.setColor(Color.white);\n      g2.fillRect(iGraphX, iGraphY, iGraphW, iGraphH);\n\n      w.paint(g2);\n\n      JFrame f = new JFrame(\"Graph test\");\n      JLabel l = new JLabel(new ImageIcon(bi));\n      l.setBorder(BorderFactory.createEmptyBorder(100, 100, 100, 100));\n\n      f.getContentPane().add(l);\n      f.pack();\n      f.setVisible(true);\n      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    } catch (Throwable t) {\n      t.printStackTrace();\n    }\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3592, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [200], "initializationEnd": [257], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(MainFrame)"], "configurationStart": [2772, 2953, 3061, 3121], "configurationEnd": [2803, 2975, 3115, 3154], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 3160, "focalAPIEnd": 3212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.show()"], "useStart": [3218], "useEnd": [3230], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Niiner/Nikouli-Makouli-Project/tree/master/src/plug/majorplugin/generalgui/resizable/ResizableComponentDemo.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (Exception ex) {\n      // ignore;\n    }\n\n    JFrame frame = new JFrame(\"Resizable Components - santhosh@fiorano.com\");\n    System.out.println(new JDesktopPane().getLayout());\n\n    final JPanel panel = new JPanel(null);\n    final JPopupMenu popup = new JPopupMenu();\n    final Point location = new Point();\n\n    abstract class AddComponentAction extends AbstractAction {\n      public AddComponentAction(String name) {\n        super(name);\n      }\n\n      protected abstract Component createComponent();\n\n      public void actionPerformed(ActionEvent ae) {\n        Component comp = createComponent();\n        Dimension bounds = comp.getPreferredSize();\n        JResizer resizer = new JResizer(comp);\n        resizer.setBounds(location.x, location.y, bounds.width, bounds.height);\n        panel.add(resizer);\n        panel.repaint();\n        resizer.invalidate();\n        panel.revalidate();\n      }\n    }\n    popup.add(\n        new AddComponentAction(\"Add Tree\") {\n          protected Component createComponent() {\n            return new JTree();\n          }\n        });\n    popup.add(\n        new AddComponentAction(\"Add Table\") {\n          protected Component createComponent() {\n            JTable table =\n                new JTable(\n                    new Object[][] {\n                      {\n                        \"[xxxxxxxxxxxxxxxxxxxxxxxxxxxxx]\",\n                        \"[yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy]\",\n                        \"[zzzzzzzzzzzzzzzzzzzzzzzzzzzz]\"\n                      },\n                      {\n                        \"[xxxxxxxxxxxxxx]\",\n                        \"[yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy]\",\n                        \"[zzzzzzzzzzzzzzzzzzzzzzz]\"\n                      },\n                      {\n                        \"[xxxxxxxxxx]\",\n                        \"[yyyyyyyyyy]\",\n                        \"[zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz]\"\n                      }\n                    },\n                    new String[] {\"col1\", \"col2\", \"col3\"});\n            table.setPreferredScrollableViewportSize(new Dimension(300, 200));\n            return new JScrollPane(table);\n          }\n        });\n\n    panel.addMouseListener(\n        new MouseAdapter() {\n          public void mousePressed(MouseEvent me) {\n            showPopup(me);\n          }\n\n          public void mouseReleased(MouseEvent me) {\n            showPopup(me);\n          }\n\n          private void showPopup(MouseEvent me) {\n            if (me.isPopupTrigger()) {\n              location.setLocation(me.getPoint());\n              popup.show(panel, me.getX(), me.getY());\n            }\n          }\n        });\n\n    frame\n        .getContentPane()\n        .add(\n            new JLabel(\"Right Click and from popup, select the component to add\", JLabel.CENTER),\n            BorderLayout.NORTH);\n    frame.getContentPane().add(panel);\n\n    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n    frame.setSize(screen.width - 100, screen.height - 100);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.show();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3593, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [58], "initializationEnd": [85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "configurationStart": [91, 161, 188, 202], "configurationEnd": [109, 182, 196, 220], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 227, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chasent/Week-of-Code-2013/tree/master/src/UI/Window.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame(\"Octo Centauri\");\n    f.getContentPane().add(new Window());\n    // f.add(new Window());\n    f.setSize(1920, 1080);\n    f.pack();\n    f.setVisible(true);\n\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3594, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [89], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [107], "configurationEnd": [142], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 148, "focalAPIEnd": 200, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getRootPane()"], "useStart": [206, 307, 2907], "useEnd": [228, 329, 2926], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pashamur/chat/tree/master/src/client/Signin.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    frame = new JFrame();\n    frame.setBounds(100, 100, 450, 300);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new CardLayout(0, 0));\n\n    JPanel signin_panel = new JPanel();\n    frame.getContentPane().add(signin_panel, \"name_1367989163741677000\");\n    signin_panel.setLayout(new BoxLayout(signin_panel, BoxLayout.Y_AXIS));\n\n    Component verticalStrut0 = Box.createVerticalStrut(10);\n    signin_panel.add(verticalStrut0);\n\n    JLabel welcome_label = new JLabel(\"Welcome to GUI Chat!\");\n    welcome_label.setBackground(new Color(138, 43, 226));\n    welcome_label.setAlignmentY(0.0f);\n    welcome_label.setAlignmentX(0.5f);\n    welcome_label.setHorizontalAlignment(SwingConstants.CENTER);\n    signin_panel.add(welcome_label);\n\n    Component verticalStrut = Box.createVerticalStrut(20);\n    signin_panel.add(verticalStrut);\n\n    // Box horizontalBox = Box.createHorizontalBox();\n    // signin_panel.add(horizontalBox);\n    Box outerGrid = Box.createHorizontalBox();\n    Box labelBox = Box.createVerticalBox();\n    Box fieldsBox = Box.createVerticalBox();\n    outerGrid.add(labelBox);\n    outerGrid.add(fieldsBox);\n    signin_panel.add(outerGrid);\n\n    JLabel serverLabel = new JLabel(\"Server:\", SwingConstants.TRAILING);\n    labelBox.add(serverLabel);\n    labelBox.add(Box.createRigidArea(new Dimension(5, 5)));\n    // horizontalBox.add(ServerLabeL);\n\n    serverText = new JTextField(\"localhost\");\n    fieldsBox.add(serverText);\n    serverText.setColumns(10);\n\n    // Box PortBox = Box.createHorizontalBox();\n    // signin_panel.add(PortBox);\n\n    JLabel PortLabel = new JLabel(\"Port:\");\n    // PortBox.add(PortLabel);\n    labelBox.add(PortLabel);\n    labelBox.add(Box.createRigidArea(new Dimension(5, 5)));\n\n    PortText = new JTextField(\"1234\");\n    // PortBox.add(PortText);\n    PortText.setColumns(10);\n    fieldsBox.add(PortText);\n\n    Box horizontalBox = Box.createHorizontalBox();\n    labelBox.add(horizontalBox);\n\n    // Box signin_box = Box.createHorizontalBox();\n    // signin_panel.add(signin_box);\n\n    JLabel signin_label = new JLabel(\"Username: \");\n    signin_label.setVerticalAlignment(SwingConstants.TOP);\n    signin_label.setHorizontalAlignment(SwingConstants.TRAILING);\n    signin_label.setLabelFor(serverText);\n    labelBox.add(signin_label);\n    labelBox.add(Box.createRigidArea(new Dimension(0, 3)));\n\n    // signin_box.add(signin_label);\n\n    SigninText = new JTextField();\n    fieldsBox.add(SigninText);\n\n    JButton join_button = new JButton(\"Join Server\");\n    join_button.setAlignmentX(Component.CENTER_ALIGNMENT);\n    SigninListener signinListener =\n        new SigninListener(SigninText, client, serverText, PortText, frame);\n    join_button.addActionListener(signinListener);\n\n    // Make enter key work the same as pressing the Join Server button\n    frame.getRootPane().setDefaultButton(join_button);\n\n    SigninText.setColumns(10);\n\n    SigninText.setMaximumSize(SigninText.getPreferredSize());\n    serverText.setMaximumSize(serverText.getPreferredSize());\n    PortText.setMaximumSize(PortText.getPreferredSize());\n    Component verticalStrut2 = Box.createVerticalStrut(10);\n    signin_panel.add(verticalStrut2);\n\n    signin_panel.add(join_button);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3595, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [89], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)"], "configurationStart": [107], "configurationEnd": [142], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 148, "focalAPIEnd": 200, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()"], "useStart": [5126, 7792], "useEnd": [5148, 7814], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaety/iMat/tree/master/src/grp30/testFrame.java", "rawCode": "  /** Initialize the contents of the frame. */\n  private void initialize() {\n    frame = new JFrame();\n    frame.setBounds(100, 100, 617, 560);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    Integer[] derp = {1, 2, 3};\n\n    JButton btnB = new JButton(\"Herro\");\n    btnB.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent arg0) {}\n        });\n    btnB.setAction(action);\n\n    JButton btnB_1 = new JButton(\"B 2\");\n    btnB_1.setAction(action_2);\n\n    JPanel panel = new JPanel();\n    panel.setBackground(Color.LIGHT_GRAY);\n\n    slidingPanel = new SlidingPanel();\n    slidingPanel.setBackground(Color.ORANGE);\n    JButton btnD = new JButton(\"D 1\");\n\n    JButton btnD_1 = new JButton(\"D 2\");\n\n    JButton btnD_2 = new JButton(\"D 3\");\n    GroupLayout gl_slidingPanel = new GroupLayout(slidingPanel);\n    gl_slidingPanel.setHorizontalGroup(\n        gl_slidingPanel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_slidingPanel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(\n                        gl_slidingPanel\n                            .createParallelGroup(Alignment.LEADING)\n                            .addGroup(\n                                gl_slidingPanel\n                                    .createSequentialGroup()\n                                    .addComponent(btnD)\n                                    .addPreferredGap(ComponentPlacement.RELATED)\n                                    .addComponent(btnD_2))\n                            .addComponent(btnD_1))\n                    .addContainerGap(280, Short.MAX_VALUE)));\n    gl_slidingPanel.setVerticalGroup(\n        gl_slidingPanel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_slidingPanel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(\n                        gl_slidingPanel\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(btnD)\n                            .addComponent(btnD_2))\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(btnD_1)\n                    .addContainerGap(50, Short.MAX_VALUE)));\n    slidingPanel.setLayout(gl_slidingPanel);\n\n    JButton btnA = new JButton(\"A 1\");\n\n    JButton btnA_1 = new JButton(\"A 2\");\n\n    lblAmount = new JLabel(\"amount\");\n    JLabel lblTotal = new JLabel(\"Total:\");\n\n    dnmclblHerro = new DynamicLabel(1200);\n    GroupLayout gl_panel = new GroupLayout(panel);\n    gl_panel.setHorizontalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_panel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(btnA)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(btnA_1)\n                    .addPreferredGap(ComponentPlacement.RELATED, 208, Short.MAX_VALUE)\n                    .addComponent(\n                        dnmclblHerro,\n                        GroupLayout.PREFERRED_SIZE,\n                        GroupLayout.DEFAULT_SIZE,\n                        GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(lblTotal)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(lblAmount)\n                    .addContainerGap()));\n    gl_panel.setVerticalGroup(\n        gl_panel\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                gl_panel\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addGroup(\n                        gl_panel\n                            .createParallelGroup(Alignment.LEADING)\n                            .addGroup(\n                                gl_panel\n                                    .createParallelGroup(Alignment.BASELINE)\n                                    .addComponent(btnA)\n                                    .addComponent(btnA_1))\n                            .addGroup(\n                                gl_panel\n                                    .createParallelGroup(Alignment.BASELINE)\n                                    .addComponent(lblAmount)\n                                    .addComponent(lblTotal)\n                                    .addComponent(\n                                        dnmclblHerro,\n                                        GroupLayout.PREFERRED_SIZE,\n                                        GroupLayout.DEFAULT_SIZE,\n                                        GroupLayout.PREFERRED_SIZE)))\n                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));\n    panel.setLayout(gl_panel);\n\n    searchScrollPane = new SearchScrollPane(this);\n\n    favouritesScrollPane = new FavouritesScrollPane(this);\n    GroupLayout groupLayout = new GroupLayout(frame.getContentPane());\n    groupLayout.setHorizontalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(btnB)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(btnB_1)\n                    .addGap(506))\n            .addComponent(slidingPanel, GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)\n            .addComponent(panel, GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(\n                        searchScrollPane,\n                        GroupLayout.PREFERRED_SIZE,\n                        473,\n                        GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(\n                        favouritesScrollPane, GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)\n                    .addContainerGap()));\n    groupLayout.setVerticalGroup(\n        groupLayout\n            .createParallelGroup(Alignment.LEADING)\n            .addGroup(\n                groupLayout\n                    .createSequentialGroup()\n                    .addComponent(panel, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addComponent(\n                        slidingPanel, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(ComponentPlacement.UNRELATED)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.LEADING)\n                            .addComponent(\n                                favouritesScrollPane,\n                                GroupLayout.DEFAULT_SIZE,\n                                334,\n                                Short.MAX_VALUE)\n                            .addComponent(\n                                searchScrollPane, GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE))\n                    .addPreferredGap(ComponentPlacement.RELATED)\n                    .addGroup(\n                        groupLayout\n                            .createParallelGroup(Alignment.BASELINE)\n                            .addComponent(btnB)\n                            .addComponent(btnB_1))\n                    .addContainerGap()));\n    // slidingPanel.changeState();\n    frame.getContentPane().setLayout(groupLayout);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3596, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [370], "initializationEnd": [382], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 388, "focalAPIEnd": 440, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [666, 732, 750], "useEnd": [688, 744, 772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kayahr/threedee/tree/master/threedee-demos/src/main/java/de/ailis/threedee/demo/AssetDemo.java", "rawCode": "  /**\n   * Main method.\n   *\n   * @param args Command line arguments\n   * @throws IOException When IO error occurs\n   */\n  public static void main(final String args[]) throws IOException {\n    // Create the assets library\n    final Assets assets = new Assets(new ClasspathAssetProvider());\n    assets.addAssets(\"duck\");\n\n    // Create the frame\n    final JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Create the canvas component displaying the scene\n    final SceneCanvas canvas = new SceneCanvas();\n    canvas.setScene(assets.getScenes().iterator().next());\n    canvas.setPreferredSize(new Dimension(640, 480));\n    frame.getContentPane().add(canvas);\n\n    // Display the frame\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3597, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [63], "initializationEnd": [343], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 367, "focalAPIEnd": 415, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.pack()", "jFrame.show()"], "useStart": [421, 475, 2941, 2992, 3006], "useEnd": [439, 493, 2959, 3000, 3014], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/src/share/demo/java2d/J2DBench/src/j2dbench/J2DBench.java", "rawCode": "  public static void startGUI() {\n    final JFrame f =\n        new JFrame(\"J2DBench\") {\n          public Dimension getPreferredSize() {\n            Dimension pref = super.getPreferredSize();\n            pref.width = Math.max(pref.width, 800);\n            pref.height = Math.max(pref.height, 600);\n            return pref;\n          }\n        };\n    guiFrame = f;\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().setLayout(new BorderLayout());\n    f.getContentPane().add(Group.root.getJComponent(), BorderLayout.CENTER);\n    JPanel p = new JPanel();\n    p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));\n    JButton b = new JButton(\"Run Tests...\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!saveOrDiscardLastResults()) {\n              return;\n            }\n            if (verbose.isEnabled()) {\n              System.out.println(e);\n              System.out.println(\"running tests...\");\n            }\n            new Thread(\n                    new Runnable() {\n                      public void run() {\n                        runTests(true);\n                      }\n                    })\n                .start();\n            if (verbose.isEnabled()) {\n              System.out.println(\"done\");\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Load Options\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            JFileChooser fc = getFileChooser();\n            int ret = fc.showOpenDialog(f);\n            if (ret == JFileChooser.APPROVE_OPTION) {\n              String reason = loadOptions(fc.getSelectedFile());\n              if (reason != null) {\n                System.err.println(reason);\n              }\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Save Options\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            JFileChooser fc = getFileChooser();\n            int ret = fc.showSaveDialog(f);\n            if (ret == JFileChooser.APPROVE_OPTION) {\n              String reason = saveOptions(fc.getSelectedFile());\n              if (reason != null) {\n                System.err.println(reason);\n              }\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Save Results\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (saveResults()) {\n              lastResults = null;\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Quit\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!saveOrDiscardLastResults()) {\n              return;\n            }\n            System.exit(0);\n          }\n        });\n    p.add(b);\n\n    f.getContentPane().add(p, BorderLayout.SOUTH);\n    f.pack();\n    f.show();\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3598, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [85], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 110, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [176, 243, 266], "useEnd": [203, 260, 293], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void buildButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Build\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdBuild(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3599, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [199], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 237, "focalAPIEnd": 289, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [296, 328, 346], "useEnd": [321, 340, 368], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stratosphere/stratosphere-sopremo/tree/master/meteor/meteor-client/src/main/java/eu/stratosphere/meteor/client/UiClient.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  private static void createAndShowGUI() {\n    final JFrame frame = new JFrame(\"Meteor UI - Client\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.add(new UiClient());\n\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setDefaultCloseOperation", "exampleID": 3600, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [807], "initializationEnd": [831], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setDefaultCloseOperation(operation)", "focalAPIStart": 837, "focalAPIEnd": 889, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setContentPane(JPanel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [983, 1040, 1058], "useEnd": [1006, 1052, 1080], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GlobalsDB/Challenges/tree/master/2/Gloveny/com/intersys/globals/LogReader/SpringForm.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the\n   * event-dispatching thread.\n   */\n  private static void createAndShowGUI() {\n    String[] labels = {\"Name: \", \"Fax: \", \"Email: \", \"Address: \"};\n    int numPairs = labels.length;\n\n    // Create and populate the panel.\n    JPanel p = new JPanel(new SpringLayout());\n    for (int i = 0; i < numPairs; i++) {\n      JLabel l = new JLabel(labels[i], JLabel.TRAILING);\n      p.add(l);\n      JTextField textField = new JTextField(10);\n      l.setLabelFor(textField);\n      p.add(textField);\n    }\n\n    // Lay out the panel.\n    SpringUtilities.makeCompactGrid(\n        p, numPairs, 2, // rows, cols\n        6, 6, // initX, initY\n        6, 6); // xPad, yPad\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"SpringForm\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Set up the content pane.\n    p.setOpaque(true); // content panes must be opaque\n    frame.setContentPane(p);\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}]