[{"dataset": "getDefaultSharedPreferences", "exampleID": 6101, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 40, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.putInt(String,*)", "sp.putInt(String,*)", "sp.commit()"], "useStart": [105, 190, 253], "useEnd": [184, 247, 266], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mconf/sipdroid/tree/master/src/org/sipdroid/sipua/ui/AutoAnswer.java", "rawCode": "  void saveVolume() {\n    Editor edit = PreferenceManager.getDefaultSharedPreferences(this).edit();\n\n    edit.putInt(\"volume\" + getMode(), am.getStreamVolume(AudioManager.STREAM_RING));\n    edit.putInt(\"ringermode\" + getMode(), am.getRingerMode());\n    edit.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6102, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 195, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(*,String)", "sp.getBoolean(*,*)"], "useStart": [296, 1075], "useEnd": [341, 1192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guzno/WifiListWidget/tree/master/src/se/magnulund/android/wifilistwidget/MainActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    PreferenceManager.setDefaultValues(this, R.xml.preferences, false);\n\n    preferences = PreferenceManager.getDefaultSharedPreferences(this);\n    int theme = getWidgetTheme(Integer.parseInt(preferences.getString(Preferences.THEME, \"1\")));\n\n    this.setTheme(theme);\n\n    setContentView(R.layout.main);\n\n    wifiList = (ListView) findViewById(R.id.wifi_list);\n\n    wifiAdapter = new WifiFilteredScanResultsAdapter(this);\n\n    if (headerView == null) {\n      headerView = new TextView(MainActivity.this);\n      int padding =\n          (int)\n              TypedValue.applyDimension(\n                  TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());\n      headerView.setPadding(padding, padding, padding, padding);\n      wifiList.addHeaderView(headerView);\n    }\n\n    hasMobileNetwork = NetworkUtils.hasMobileNetwork(this);\n\n    if (hasMobileNetwork) {\n      wifiApManager = new WifiApManager(MainActivity.this);\n    }\n\n    hasMobileNetwork =\n        preferences.getBoolean(\n            Preferences.DEVICE_HAS_MOBILE_NETWORK, deviceHasMobileNetwork(MainActivity.this));\n    if (hasMobileNetwork) {\n      wifiApManager = new WifiApManager(MainActivity.this);\n    }\n\n    wifiList.setAdapter(wifiAdapter);\n\n    wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);\n\n    mAdapter = NfcAdapter.getDefaultAdapter(this);\n\n    if (mAdapter != null) { // this device has nfc\n\n      // fetch\n      wifiList.setOnItemClickListener(\n          new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\n\n              FilteredScanResult filteredScanResult =\n                  (FilteredScanResult) wifiAdapter.getItem(position - 1);\n\n              JSONObject netConfiguration = new JSONObject();\n              try {\n                WifiConfiguration wifiConfiguration = filteredScanResult.getWifiConfiguration();\n                netConfiguration.put(\"BSSID\", wifiConfiguration.BSSID);\n                netConfiguration.put(\"SSID\", wifiConfiguration.SSID);\n                netConfiguration.put(\"hiddenSSID\", wifiConfiguration.hiddenSSID);\n                netConfiguration.put(\"preSharedKey\", wifiConfiguration.preSharedKey);\n\n                JSONArray jsonArray = jsonArrayFromBitSet(wifiConfiguration.allowedAuthAlgorithms);\n                netConfiguration.put(\n                    \"allowedAuthAlgorithms\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedAuthAlgorithms));\n                netConfiguration.put(\n                    \"allowedGroupCiphers\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedGroupCiphers));\n                netConfiguration.put(\n                    \"allowedKeyManagement\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedKeyManagement));\n                netConfiguration.put(\n                    \"allowedPairwiseCiphers\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedPairwiseCiphers));\n                netConfiguration.put(\n                    \"allowedProtocols\", jsonArrayFromBitSet(wifiConfiguration.allowedProtocols));\n\n                JSONArray wepkeys = new JSONArray();\n                for (String wepKey : wifiConfiguration.wepKeys) {\n                  if (wepKey != null) {\n                    wepkeys.put(wepKey);\n                  }\n                }\n\n                netConfiguration.put(\"wepKeys\", wepkeys);\n                netConfiguration.put(\"wepTxKeyIndex\", wifiConfiguration.wepTxKeyIndex);\n\n              } catch (JSONException e) {\n                e.printStackTrace();\n              }\n              NdefRecord ndefRecord =\n                  createTextRecord(netConfiguration.toString(), Locale.getDefault(), true);\n              mMessage = new NdefMessage(ndefRecord);\n              mAdapter.setNdefPushMessage(mMessage, MainActivity.this);\n\n              AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);\n              builder.setMessage(\"Beam that sheed\");\n              builder.setCancelable(true);\n              builder.setPositiveButton(\n                  \"Yap\",\n                  new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                      mAdapter.setNdefPushMessage(null, MainActivity.this);\n                      return;\n                    }\n                  });\n              AlertDialog dialog = builder.create();\n              dialog.show();\n            }\n          });\n\n      // Create a generic PendingIntent that will be deliver to this activity. The NFC stack\n      // will fill in the intent with the details of the discovered tag before delivering to\n      // this activity.\n      mPendingIntent =\n          PendingIntent.getActivity(\n              this, 0, new Intent(this, getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);\n\n      /*\n      <action android:name=\"android.nfc.action.NDEF_DISCOVERED\" />\n      <category android:name=\"android.intent.category.DEFAULT\" />\n      <data android:mimeType=\"text/plain\" />\n      */\n\n      /*\n      // Setup an intent filter for all MIME based dispatches\n      IntentFilter ndef = new IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED);\n      ndef.addCategory(\"android.intent.category.DEFAULT\");\n      try {\n      ndef.addDataType(\"text/plain\");\n      } catch (IntentFilter.MalformedMimeTypeException e) {\n      throw new RuntimeException(\"fail\", e);\n      }\n      mFilters = new IntentFilter[]{ndef,};\n\n      // Setup a tech list for all NfcF tags\n      mTechLists = new String[][]{new String[]{NfcF.class.getName()}};\n      */\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6103, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 161, "focalAPIEnd": 212, "followUpCheck": "sp.getBoolean(Constants.KEY_PREF_STARTUP_OPTION,false)", "checkType": "IF", "followUpCheckExpressionStart": 392, "followUpCheckExpressionEnd": 461, "followUpCheckBlockStart": 392, "followUpCheckBlockEnd": 670, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mjeff/temaki/tree/master/src/main/java/com/jmartin/temaki/MainDrawerActivity.java", "rawCode": "  /** Save the current list of lists to SharedPreferences. */\n  public void saveListsToSharedPreferences(String listsJson) {\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n    SharedPreferences.Editor sharedPrefsEditor = getPreferences(MODE_PRIVATE).edit();\n\n    // If the user wants to load the last opened list on startup, save the list's name\n    if (sharedPrefs.getBoolean(Constants.KEY_PREF_STARTUP_OPTION, false)) {\n      sharedPrefsEditor.putString(\n          Constants.LAST_OPENED_LIST_SP_KEY, mainListsFragment.getListName());\n    } else {\n      sharedPrefsEditor.putString(Constants.LAST_OPENED_LIST_SP_KEY, \"\");\n    }\n\n    sharedPrefsEditor.putString(Constants.LISTS_SP_KEY, listsJson);\n    sharedPrefsEditor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6104, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 200, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)", "sp.getString(String,String)"], "useStart": [279, 351], "useEnd": [323, 399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/p524/Tuboroidon524/tree/master/Tuboroid/src/info/narazaki/android/tuboroid/activity/ThreadEntryEditActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.entry_edit);\n\n    pending_ = null;\n\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n    String default_name = pref.getString(PREF_KEY_ENTRY_EDIT_NAME, \"\");\n    String default_mail = pref.getString(PREF_KEY_ENTRY_EDIT_MAIL, \"sage\");\n    EditText name_view = (EditText) findViewById(R.id.entry_edit_name);\n    name_view.setText(default_name);\n\n    EditText mail_view = (EditText) findViewById(R.id.entry_edit_mail);\n    mail_view.setText(default_mail);\n\n    EditText body_view = (EditText) findViewById(R.id.entry_edit_body);\n\n    for (EditText edit_text : new EditText[] {name_view, mail_view, body_view}) {\n      edit_text.getInputExtras(true).putBoolean(\"allowEmoji\", true);\n    }\n\n    // スレッド情報の取得(URLから作れる範囲の暫定のもの)\n    thread_uri_ = getIntent().getData();\n    thread_data_ = ThreadData.factory(thread_uri_);\n    if (thread_data_ == null) return;\n    getAgent().initNewThreadData(thread_data_, null);\n\n    // デフォルトのテキストを設定\n    String default_text = getIntent().getStringExtra(INTENT_KEY_THREAD_DEFAULT_TEXT);\n    if (default_text == null) {\n      default_text = getIntent().getStringExtra(Intent.EXTRA_TEXT);\n    }\n    if (default_text != null) {\n      body_view.setText(default_text);\n    }\n\n    // スレッド情報の読み込み\n    getAgent()\n        .getThreadData(\n            thread_data_,\n            new SQLiteAgent.GetThreadDataResult() {\n              @Override\n              public void onQuery(final ThreadData thread_data) {\n                runOnUiThread(\n                    new Runnable() {\n                      @Override\n                      public void run() {\n                        thread_data_ = thread_data;\n                        setTitle(thread_data_.thread_name_);\n                        EditText entry_edit_body = (EditText) findViewById(R.id.entry_edit_body);\n                        if (entry_edit_body.getText().length() == 0)\n                          entry_edit_body.setText(thread_data_.edit_draft_);\n                      }\n                    });\n              }\n            });\n    progress_dialog_ = new SimpleProgressDialog();\n\n    createButtons();\n\n    initAAButton();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6105, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 61, "focalAPIEnd": 115, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getLong(String,int)"], "useStart": [61], "useEnd": [134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ax003d/sichu_android/tree/master/sichu/src/com/ax003d/sichu/utils/Preferences.java", "rawCode": "  public static long getUserID(Context context) {\n    return PreferenceManager.getDefaultSharedPreferences(context).getLong(\"uid\", -1);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6106, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 68, "focalAPIEnd": 119, "followUpCheck": "sp.getBoolean(\"home_wallpaper_use_check\",false)", "checkType": "IF", "followUpCheckExpressionStart": 125, "followUpCheckExpressionEnd": 187, "followUpCheckBlockStart": 125, "followUpCheckBlockEnd": 646, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nowlauncher/now-launcher/tree/master/NowLauncher/src/com/nowlauncher/nowlauncher/MainActivity.java", "rawCode": "  public void loadWallpaper() {\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n    if (sharedPrefs.getBoolean(\"home_wallpaper_use_check\", false)) {\n      WallpaperManager wallpaperManager = WallpaperManager.getInstance(getApplicationContext());\n      Drawable wallpaperDrawable = wallpaperManager.getDrawable();\n      wallpaperImageView.setImageDrawable(wallpaperDrawable);\n    } else if (wallpaperImageView.getDrawable() != getResources().getDrawable(R.color.background)) {\n      Log.d(\"Wallpaper\", \"Setting Wallpaper to background\");\n      wallpaperImageView.setImageResource(R.color.background);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6107, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 141, "focalAPIEnd": 195, "followUpCheck": "sp.getBoolean(\"notif_wifiOnly\",false)", "checkType": "IF", "followUpCheckExpressionStart": 286, "followUpCheckExpressionEnd": 333, "followUpCheckBlockStart": 286, "followUpCheckBlockEnd": 760, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["WakeLock.release()"], "finallyExpressionStart": 2035, "finallyExpressionEnd": 2043, "finallyBlockStart": 2035, "finallyBlockEnd": 2110, "cleanUpCallStart": [2088], "cleanUpCallEnd": [2103], "url": "https://github.com/zoldar/groundhog-reader/tree/master/src/main/java/com/almarsoft/GroundhogReader/GroupsCheckAlarmReceiver.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void onReceive(Context context, Intent intent) {\n\n    mContext = context;\n    mPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n    // Check if we're under wifi and the option to only check under wifi is enabled\n    if (mPrefs.getBoolean(\"notif_wifiOnly\", false)) {\n      ConnectivityManager connMgr =\n          (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n      NetworkInfo net = connMgr.getActiveNetworkInfo();\n\n      if (net == null || net.getType() != ConnectivityManager.TYPE_WIFI) {\n        Log.i(\n            \"Groundhog\",\n            \"Background Checker: exiting because there is no WIFI and notif_wifiOnly is enabled\");\n        return;\n      }\n    }\n\n    Log.i(\"Groundhog\", \"Starting background check\");\n    PowerManager mgr = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\n    mLock = mgr.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, \"GroundhogLock\");\n    mLock.acquire();\n\n    try {\n      Class postPartypes[] = new Class[2];\n      postPartypes[0] = String.class;\n      postPartypes[1] = Integer.class;\n      Method postCallback = this.getClass().getMethod(\"postCheckMessagesCallBack\", postPartypes);\n\n      ServerManager myServerManager = new ServerManager(context);\n      mServerMessageGetter =\n          new ServerMessageGetter(\n              this,\n              null,\n              null,\n              postCallback,\n              postCallback,\n              context,\n              myServerManager,\n              100,\n              false,\n              true);\n\n      String[] groupsarr = DBUtils.getSubscribedGroups(context);\n      Vector<String> groups = new Vector<String>(groupsarr.length);\n      for (String group : groupsarr) {\n        groups.add(group);\n      }\n      mServerMessageGetter.execute(groups);\n    } catch (NoSuchMethodException e) {\n      e.printStackTrace();\n    } catch (SecurityException e) {\n      e.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      if (mLock != null && mLock.isHeld()) mLock.release();\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6108, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 101, "focalAPIEnd": 152, "followUpCheck": "sp.contains(\"mapDatabase\")", "checkType": "IF", "followUpCheckExpressionStart": 577, "followUpCheckExpressionEnd": 617, "followUpCheckBlockStart": 577, "followUpCheckBlockEnd": 660, "use": ["setMapDatabase(sp)", "sp.getString(String,String)", "sp.getBoolean(String,boolean)", "sp.getBoolean(String,boolean)", "sp.getBoolean(String,boolean)", "sp.getBoolean(String,boolean)", "sp.getBoolean(String,boolean)"], "useStart": [626, 722, 2320, 2403, 2487, 2569, 2647], "useEnd": [653, 766, 2367, 2455, 2535, 2619, 2691], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/opensciencemap/VectorTileMap/tree/master/TileMapApp/src/org/oscim/app/TileMap.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);\n\n    // MapScaleBar mapScaleBar = mapView.getMapScaleBar();\n    // mapScaleBar.setShowMapScaleBar(preferences.getBoolean(\"showScaleBar\",\n    // false));\n    // String scaleBarUnitDefault =\n    // getString(R.string.preferences_scale_bar_unit_default);\n    // String scaleBarUnit = preferences.getString(\"scaleBarUnit\",\n    // scaleBarUnitDefault);\n    // mapScaleBar.setImperialUnits(scaleBarUnit.equals(\"imperial\"));\n\n    if (preferences.contains(\"mapDatabase\")) {\n      setMapDatabase(preferences);\n    }\n    if (preferences.contains(\"theme\")) {\n      String name = preferences.getString(\"theme\", \"OSMARENDER\");\n      InternalRenderTheme theme = null;\n\n      try {\n        theme = InternalRenderTheme.valueOf(name);\n      } catch (IllegalArgumentException e) {\n      }\n      if (theme == null) map.setRenderTheme(InternalRenderTheme.DEFAULT);\n      else map.setRenderTheme(theme);\n    }\n    // try {\n    // String textScaleDefault =\n    // getString(R.string.preferences_text_scale_default);\n    // map.setTextScale(Float.parseFloat(preferences.getString(\"textScale\",\n    // textScaleDefault)));\n    // } catch (NumberFormatException e) {\n    // map.setTextScale(1);\n    // }\n\n    if (preferences.getBoolean(\"fullscreen\", false)) {\n      Log.i(\"mapviewer\", \"FULLSCREEN\");\n      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n      getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n    } else {\n      Log.i(\"mapviewer\", \"NO FULLSCREEN\");\n      getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n    }\n    if (preferences.getBoolean(\"fixOrientation\", true)) {\n      this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n      // this all returns the orientation which is not currently active?!\n      // getWindow().getWindowManager().getDefaultDisplay().getRotation());\n      // getWindow().getWindowManager().getDefaultDisplay().getOrientation());\n    }\n\n    // if (preferences.getBoolean(\"wakeLock\", false) && !mWakeLock.isHeld()) {\n    // mWakeLock.acquire();\n    // }\n\n    boolean drawTileFrames = preferences.getBoolean(\"drawTileFrames\", false);\n    boolean drawTileCoordinates = preferences.getBoolean(\"drawTileCoordinates\", false);\n    boolean disablePolygons = preferences.getBoolean(\"disablePolygons\", false);\n    boolean drawUnmatchedWays = preferences.getBoolean(\"drawUnmatchedWays\", false);\n    boolean debugLabels = preferences.getBoolean(\"debugLabels\", false);\n\n    DebugSettings cur = map.getDebugSettings();\n    if (cur.disablePolygons != disablePolygons\n        || cur.drawTileCoordinates != drawTileCoordinates\n        || cur.drawTileFrames != drawTileFrames\n        || cur.debugTheme != drawUnmatchedWays\n        || cur.debugLabels != debugLabels) {\n\n      DebugSettings debugSettings =\n          new DebugSettings(\n              drawTileCoordinates, drawTileFrames, disablePolygons, drawUnmatchedWays, debugLabels);\n\n      map.setDebugSettings(debugSettings);\n    }\n\n    map.redrawMap(false);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6109, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 202, "focalAPIEnd": 256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [280], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/felixb/smsdroid/tree/master/SMSdroid/src/main/java/de/ub0r/android/smsdroid/PreferencesActivity.java", "rawCode": "  /**\n   * Get text's size from Preferences.\n   *\n   * @param context {@link Context}\n   * @return theme\n   */\n  static boolean decodeDecimalNCR(final Context context) {\n    final SharedPreferences p = PreferenceManager.getDefaultSharedPreferences(context);\n    final boolean b = p.getBoolean(PREFS_DECODE_DECIMAL_NCR, true);\n    Log.d(TAG, \"decode decimal ncr: \", b);\n    return b;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6110, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 197, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,*)"], "useStart": [271], "useEnd": [311], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gabrielemariotti/androiddev/tree/master/GoogleAccount/src/it/gmariotti/android/examples/googleaccount/GDriveActivity.java", "rawCode": "  /** Init service */\n  private void initService() {\n    mCredential = GoogleAccountCredential.usingOAuth2(this, DriveScopes.DRIVE);\n    if (mAccountName == null) {\n      SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n      mAccountName = prefs.getString(PREF_ACCOUNT_NAME, null);\n    }\n\n    if (mAccountName != null) {\n      mCredential.setSelectedAccountName(mAccountName);\n      mService = getDriveService(mCredential);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6111, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 78, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [143], "useEnd": [152], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jordan-thoms/2Degrees-Toolbox/tree/master/Toolbox/src/biz/shadowservices/DegreesToolbox/WidgetInstance.java", "rawCode": "  public void setTextColor(Context c, int color) {\n    SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(c);\n    Editor e = sp.edit();\n    e.putInt(\"widgetSettings[\" + widgetId + \"][textColor]\", color);\n    e.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6112, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 228, "focalAPIEnd": 283, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)"], "useStart": [296], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cyclestreets/android/tree/master/libraries/cyclestreets-core/src/main/java/net/cyclestreets/CycleStreetsPreferences.java", "rawCode": "  private static String getString(final String key, final String defVal) {\n    if (context_ == null) {\n      // Protect against a potential race condition on resume\n      return defVal;\n    }\n    final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context_);\n    return prefs.getString(key, defVal);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6113, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 93, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(String,int)"], "useStart": [163], "useEnd": [188], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kimcoop/SociaList/tree/master/src/edu/pitt/cs1635group3/Activities/Classes/User.java", "rawCode": "  public static int getCurrUser(Context context) {\n    SharedPreferences prefs;\n\n    prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n    int id = prefs.getInt(\"userID\", 0);\n    return id;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6114, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 74, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [74], "useEnd": [172], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ronhuang/FileManager/tree/master/src/org/openintents/filemanager/PreferenceActivity.java", "rawCode": "  static boolean getMediaScanFromPreference(Context context) {\n    return PreferenceManager.getDefaultSharedPreferences(context)\n        .getBoolean(PREFS_MEDIASCAN, false);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6115, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 120, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envsmth/tree/master/EnvSocialApp/src/com/envsocial/android/utils/Preferences.java", "rawCode": "  public static void setStringPreference(Context context, String name, String value) {\n    SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context);\n    SharedPreferences.Editor editor = settings.edit();\n\n    editor.putString(name, value);\n    editor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6116, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 90, "focalAPIEnd": 145, "followUpCheck": "sp.getBoolean(\"top_sort\",false)", "checkType": "IF", "followUpCheckExpressionStart": 151, "followUpCheckExpressionEnd": 191, "followUpCheckBlockStart": 151, "followUpCheckBlockEnd": 241, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chrismccurdy/loot/tree/master/src/net/gumbercules/loot/transaction/TransactionAdapter.java", "rawCode": "  public void sort() {\n    Collections.sort(mOriginalList);\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);\n    if (prefs.getBoolean(\"top_sort\", false)) {\n      Collections.reverse(mOriginalList);\n    }\n    new TransactionFilter()._filter(mConstraint);\n    notifyDataSetChanged();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6117, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 1481, "focalAPIEnd": 1532, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(*,boolean)"], "useStart": [1564], "useEnd": [1629], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gdgturkiye/add2013-android/tree/master/Zxing/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    // CameraManager must be initialized here, not in onCreate(). This is necessary because we don't\n    // want to open the camera driver and measure the screen size if we're going to show the help on\n    // first launch. That led to bugs where the scanning rectangle was the wrong size and partially\n    // off screen.\n    cameraManager = new CameraManager(getApplication());\n\n    viewfinderView = (ViewfinderView) findViewById(R.id.viewfinder_view);\n    viewfinderView.setCameraManager(cameraManager);\n\n    resultView = findViewById(R.id.result_view);\n    statusView = (TextView) findViewById(R.id.status_view);\n\n    handler = null;\n    lastResult = null;\n\n    resetStatusView();\n\n    SurfaceView surfaceView = (SurfaceView) findViewById(R.id.preview_view);\n    SurfaceHolder surfaceHolder = surfaceView.getHolder();\n    if (hasSurface) {\n      // The activity was paused but not stopped, so the surface still exists. Therefore\n      // surfaceCreated() won't be called, so init the camera here.\n      initCamera(surfaceHolder);\n    } else {\n      // Install the callback and wait for surfaceCreated() to init the camera.\n      surfaceHolder.addCallback(this);\n      surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n    }\n\n    beepManager.updatePrefs();\n    ambientLightManager.start(cameraManager);\n\n    inactivityTimer.onResume();\n\n    Intent intent = getIntent();\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    copyToClipboard =\n        prefs.getBoolean(PreferencesActivity.KEY_COPY_TO_CLIPBOARD, true)\n            && (intent == null || intent.getBooleanExtra(Intents.Scan.SAVE_HISTORY, true));\n\n    source = IntentSource.NONE;\n    decodeFormats = null;\n    characterSet = null;\n\n    if (intent != null) {\n\n      String action = intent.getAction();\n      String dataString = intent.getDataString();\n\n      if (Intents.Scan.ACTION.equals(action)) {\n\n        // Scan the formats the intent requested, and return the result to the calling activity.\n        source = IntentSource.NATIVE_APP_INTENT;\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(intent);\n\n        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {\n          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);\n          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);\n          if (width > 0 && height > 0) {\n            cameraManager.setManualFramingRect(width, height);\n          }\n        }\n\n        String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);\n        if (customPromptMessage != null) {\n          statusView.setText(customPromptMessage);\n        }\n\n      } else if (dataString != null\n          && dataString.contains(PRODUCT_SEARCH_URL_PREFIX)\n          && dataString.contains(PRODUCT_SEARCH_URL_SUFFIX)) {\n\n        // Scan only products and send the result to mobile Product Search.\n        source = IntentSource.PRODUCT_SEARCH_LINK;\n        sourceUrl = dataString;\n        decodeFormats = DecodeFormatManager.PRODUCT_FORMATS;\n\n      } else if (isZXingURL(dataString)) {\n\n        // Scan formats requested in query string (all formats if none specified).\n        // If a return URL is specified, send the results there. Otherwise, handle it ourselves.\n        source = IntentSource.ZXING_LINK;\n        sourceUrl = dataString;\n        Uri inputUri = Uri.parse(dataString);\n        scanFromWebPageManager = new ScanFromWebPageManager(inputUri);\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(inputUri);\n      }\n\n      characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6118, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 188, "focalAPIEnd": 242, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [287], "useEnd": [305], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AfzalivE/MI-Chat/tree/master/android-app/src/main/java/com/afzaln/mi_chat/utils/PrefUtils.java", "rawCode": "  /**\n   * Removes all preferences from SharedPreferences\n   *\n   * @param context the context\n   */\n  public static void clearPrefs(Context context) {\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n    SharedPreferences.Editor prefsEditor = sharedPrefs.edit();\n    prefsEditor.clear();\n    prefsEditor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6119, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 337, "focalAPIEnd": 388, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmkl/test/tree/master/Dazzle/src/org/hermit/dazzle/Preferences.java", "rawCode": "  /**\n   * Called when the activity has detected the user's press of the back key. The default\n   * implementation simply finishes the current activity; we override this to update the widget.\n   */\n  private void savePrefs() {\n    // Read the widget settings, and save them to the prefs.\n    int count = 0;\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    SharedPreferences.Editor edit = prefs.edit();\n\n    // Set all the controls.\n    for (DazzleProvider.Control c : DazzleProvider.Control.CONTROLS) {\n      CheckBox checkbox = (CheckBox) findViewById(c.id);\n      boolean enable = checkbox.isChecked();\n      edit.putBoolean(c.pref + \"-\" + widgetId, enable);\n      if (enable) ++count;\n    }\n\n    // If we had no controls selected, put in a brightness control.\n    if (count == 0) {\n      DazzleProvider.Control c;\n      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ECLAIR) c = DazzleProvider.Control.BRIGHTNESS;\n      else c = DazzleProvider.Control.BRIGHTAUTO;\n      edit.putBoolean(c.pref + \"-\" + widgetId, true);\n    }\n\n    edit.commit();\n\n    // Update the widget.\n    DazzleProvider.updateAllWidgets(this);\n\n    // Now send the result intent. It needs the widget ID.\n    Intent result = new Intent();\n    result.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, widgetId);\n    setResult(RESULT_OK, result);\n    finish();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6120, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 66, "focalAPIEnd": 123, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(*,int)", "sp.getString(*,String)", "sp.getString(*,String)", "sp.getString(*,*)", "sp.getString(*,*)", "sp.getString(*,*)", "sp.getString(*,*)", "sp.getBoolean(*,boolean)", "sp.getBoolean(*,boolean)", "sp.getBoolean(*,boolean)", "sp.getString(*,String)", "sp.getBoolean(*,boolean)", "sp.getString(*,String)"], "useStart": [163, 396, 473, 791, 1047, 1276, 1504, 1690, 1851, 2017, 2190, 2375, 2557], "useEnd": [228, 452, 531, 900, 1128, 1359, 1581, 1749, 1911, 2087, 2253, 2454, 2618], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dennischen/daily-money/tree/master/dailymoney/src/com/bottleworks/dailymoney/context/Contexts.java", "rawCode": "  private void reloadPreference() {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(appContext);\n\n    try {\n      pref_workingBookId = prefs.getInt(Constants.PREFS_WORKING_BOOK_ID, pref_workingBookId);\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    if (pref_workingBookId < 0) {\n      pref_workingBookId = 0;\n    }\n\n    try {\n      String pd1 = prefs.getString(Constants.PREFS_PASSWORD, pref_password);\n      String pd2 = prefs.getString(Constants.PREFS_PASSWORDVD, pref_password);\n      if (pd1.equals(pd2)) {\n        pref_password = pd1;\n      } else {\n        pref_password = \"\";\n      }\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n\n    try {\n      pref_detailListLayout =\n          Integer.parseInt(\n              prefs.getString(\n                  Constants.PREFS_DETAIL_LIST_LAYOUT, String.valueOf(pref_detailListLayout)));\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    try {\n      pref_firstdayWeek =\n          Integer.parseInt(\n              prefs.getString(Constants.PREFS_FIRSTDAY_WEEK, String.valueOf(pref_firstdayWeek)));\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    try {\n      pref_startdayMonth =\n          Integer.parseInt(\n              prefs.getString(Constants.PREFS_STARTDAY_MONTH, String.valueOf(pref_startdayMonth)));\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    try {\n      pref_maxRecords =\n          Integer.parseInt(\n              prefs.getString(Constants.PREFS_MAX_RECORDS, String.valueOf(pref_maxRecords)));\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    try {\n      pref_openTestsDesktop = prefs.getBoolean(Constants.PREFS_OPEN_TESTS_DESKTOP, false);\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n\n    try {\n      pref_backupCSV = prefs.getBoolean(Constants.PREFS_BACKUP_CSV, pref_backupCSV);\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    try {\n      pref_allowAnalytics = prefs.getBoolean(Constants.PREFS_ALLOW_ANALYTICS, pref_allowAnalytics);\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    try {\n      pref_csvEncoding = prefs.getString(Constants.PREFS_CSV_ENCODING, pref_csvEncoding);\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n\n    try {\n      pref_hierarachicalReport =\n          prefs.getBoolean(Constants.PREFS_HIERARCHICAL_REPORT, pref_hierarachicalReport);\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n\n    try {\n      pref_lastbackup = prefs.getString(Constants.PREFS_LAST_BACKUP, pref_lastbackup);\n    } catch (Exception x) {\n      Logger.e(x.getMessage());\n    }\n    if (DEBUG) {\n      Logger.d(\"preference : working book \" + pref_workingBookId);\n      Logger.d(\"preference : detail layout \" + pref_detailListLayout);\n      Logger.d(\"preference : firstday of week \" + pref_firstdayWeek);\n      Logger.d(\"preference : startday of month \" + pref_startdayMonth);\n      Logger.d(\"preference : max records \" + pref_maxRecords);\n      Logger.d(\"preference : open tests desktop \" + pref_openTestsDesktop);\n      Logger.d(\"preference : backup csv \" + pref_backupCSV);\n      Logger.d(\"preference : csv encoding \" + pref_csvEncoding);\n      Logger.d(\"preference : last backup \" + pref_lastbackup);\n\n      Logger.d(\"working_folder \" + workingFolder);\n    }\n    calendarHelper.setFirstDayOfWeek(getPrefFirstdayWeek());\n    calendarHelper.setStartDayOfMonth(getPrefStartdayMonth());\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6121, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 108, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,*)"], "useStart": [192], "useEnd": [254], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/COMU/homescreen/tree/master/ayse/YouTube/src/com/comu/android/YouTubeUtility.java", "rawCode": "  public static boolean hasVideoBeenViewed(Context pCtxt, String pVideoId) {\n    SharedPreferences lPrefs = PreferenceManager.getDefaultSharedPreferences(pCtxt);\n\n    String lViewedVideoIds = lPrefs.getString(\"com.keyes.screebl.lastViewedVideoIds\", null);\n\n    if (lViewedVideoIds == null) {\n      return false;\n    }\n\n    String[] lSplitIds = lViewedVideoIds.split(\";\");\n    if (lSplitIds == null || lSplitIds.length == 0) {\n      return false;\n    }\n\n    for (int i = 0; i < lSplitIds.length; i++) {\n      if (lSplitIds[i] != null && lSplitIds[i].equals(pVideoId)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6122, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 335, "focalAPIEnd": 389, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)"], "useStart": [407], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dmonllao/Android_Video_Rest_Client/tree/master/src/com/monllao/david/androidrestclient/User.java", "rawCode": "  /**\n   * Get the phone user pwd (the same for all the accounts)\n   *\n   * <p>If the password was not set it will ask for a password\n   *\n   * @param context The context where the dialog should be displayed\n   * @return The user password\n   */\n  private void initPassword(final Context context) {\n\n    final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n    password = prefs.getString(\"password\", \"\");\n\n    // Request a new pwd if it is the first access\n    if (password == \"\") {\n\n      // Alert dialog\n      AlertDialog.Builder alert = new AlertDialog.Builder(context);\n      alert.setTitle(R.string.set_pwd);\n      alert.setMessage(R.string.set_pwd_info);\n\n      // Input text\n      final EditText input = new EditText(context);\n      input.setTransformationMethod(new PasswordTransformationMethod());\n      alert.setView(input);\n\n      // Listener\n      alert.setPositiveButton(\n          R.string.set_pwd_button,\n          new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int which) {\n              SharedPreferences.Editor editor = prefs.edit();\n              editor.putString(\"password\", input.getText().toString());\n              editor.commit();\n\n              // Now we can create the new user\n              getUserFromServer(context);\n            }\n          });\n\n      alert.show();\n\n      // Get the user from the server\n    } else {\n      getUserFromServer(context);\n    }\n\n    // If the user doesn't set up a password it can continue\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6123, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 93, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getAll()"], "useStart": [179], "useEnd": [205], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ridem/fr.lemet/tree/master/LeMet/src/fr/lemet/application/activity/widgets/TransportsWidgetConfigure.java", "rawCode": "  static void deleteAllSettings(Context context) {\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n    Map<String, ?> allPrefs = sharedPreferences.getAll();\n    SharedPreferences.Editor edit = sharedPreferences.edit();\n    for (String key : allPrefs.keySet()) {\n      if (key.startsWith(\"ArretId\") || key.startsWith(\"LigneId\")) {\n        edit.remove(key);\n      }\n    }\n    edit.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6124, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 74, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)"], "useStart": [166], "useEnd": [212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gaeeyo/Tuboroidon/tree/master/Tuboroid/src/info/narazaki/android/tuboroid/TuboroidApplication.java", "rawCode": "  public int getCurrentScreenOrientation() {\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n    int orientation = Integer.parseInt(pref.getString(\"pref_screen_orientation\", \"0\"));\n\n    switch (orientation) {\n      case 1:\n        return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n      case 2:\n        return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n    }\n    return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6125, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 722, "focalAPIEnd": 776, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(String,int)", "sp.getInt(String,int)"], "useStart": [812, 843], "useEnd": [841, 874], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/erichare/RevMiner-OpenMenu-Integration/tree/master/Android/OpenMenu/src/com/net/rmopenmenu/LoadList.java", "rawCode": "  public Bundle load(String query) {\n    SQLiteDatabase db = new Database(context).getReadableDatabase();\n    ArrayList<Integer> item_ids = new ArrayList<Integer>();\n    ArrayList<String> restaurant_names = new ArrayList<String>();\n    ArrayList<Integer> restaurant_lats = new ArrayList<Integer>();\n    ArrayList<Integer> restaurant_lons = new ArrayList<Integer>();\n    ArrayList<String> restaurant_distances = new ArrayList<String>();\n    ArrayList<String> item_names = new ArrayList<String>();\n    ArrayList<String> item_prices = new ArrayList<String>();\n    ArrayList<String> item_descriptions = new ArrayList<String>();\n    ArrayList<Integer> item_vegs = new ArrayList<Integer>();\n\n    final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n    GeoPoint myLoc = new GeoPoint(prefs.getInt(\"lat\", 47662150), prefs.getInt(\"lon\", -122313237));\n    if (menu) {\n      Cursor cursor =\n          db.query(\"items\", null, \"name LIKE '%\" + query + \"%'\", null, null, null, null);\n      cursor.moveToFirst();\n\n      while (!cursor.isAfterLast()) {\n        item_ids.add(cursor.getInt(cursor.getColumnIndex(\"iid\")));\n        item_names.add(cursor.getString(cursor.getColumnIndex(\"name\")));\n        item_descriptions.add(cursor.getString(cursor.getColumnIndex(\"description\")));\n        String price = cursor.getString(cursor.getColumnIndex(\"price\"));\n        if (price.equals(\"0.00\")) {\n          price = \"Unknown Price\";\n        }\n        item_prices.add(price);\n        item_vegs.add(cursor.getInt(cursor.getColumnIndex(\"veg\")));\n        cursor.moveToNext();\n      }\n\n      for (int i = 0; i < item_ids.size(); i++) {\n        cursor =\n            db.query(\"restaurants_items\", null, \"iid = \" + item_ids.get(i), null, null, null, null);\n        cursor.moveToFirst();\n\n        int rid = cursor.getInt(cursor.getColumnIndex(\"rid\"));\n\n        cursor = db.query(\"restaurants\", null, \"rid = \" + rid, null, null, null, null);\n        cursor.moveToFirst();\n\n        restaurant_names.add(cursor.getString(cursor.getColumnIndex(\"name\")));\n        restaurant_lats.add(cursor.getInt(cursor.getColumnIndex(\"lat\")));\n        restaurant_lons.add(cursor.getInt(cursor.getColumnIndex(\"lon\")));\n\n        double distance =\n            MapFragment.distanceBetween(\n                myLoc,\n                new GeoPoint(\n                    cursor.getInt(cursor.getColumnIndex(\"lat\")),\n                    cursor.getInt(cursor.getColumnIndex(\"lon\"))));\n        restaurant_distances.add(String.format(\"%.1f\", distance));\n      }\n    } else {\n      Cursor cursor =\n          db.query(\"restaurants\", null, \"name LIKE '%\" + query + \"%'\", null, null, null, null);\n      cursor.moveToFirst();\n\n      int rid = cursor.getInt(cursor.getColumnIndex(\"rid\"));\n      String restaurant_name = cursor.getString(cursor.getColumnIndex(\"name\"));\n      int restaurant_lat = cursor.getInt(cursor.getColumnIndex(\"lat\"));\n      int restaurant_lon = cursor.getInt(cursor.getColumnIndex(\"lon\"));\n      double distance =\n          MapFragment.distanceBetween(myLoc, new GeoPoint(restaurant_lat, restaurant_lon));\n\n      cursor = db.query(\"restaurants_items\", null, \"rid = \" + rid, null, null, null, null);\n      cursor.moveToFirst();\n\n      while (!cursor.isAfterLast()) {\n        item_ids.add(cursor.getInt(cursor.getColumnIndex(\"iid\")));\n        cursor.moveToNext();\n      }\n\n      for (int i = 0; i < item_ids.size(); i++) {\n        cursor = db.query(\"items\", null, \"iid = \" + item_ids.get(i), null, null, null, null);\n        cursor.moveToFirst();\n\n        restaurant_names.add(restaurant_name);\n        restaurant_lats.add(restaurant_lat);\n        restaurant_lons.add(restaurant_lon);\n        restaurant_distances.add(String.format(\"%.1f\", distance));\n\n        item_names.add(cursor.getString(cursor.getColumnIndex(\"name\")));\n        String price = cursor.getString(cursor.getColumnIndex(\"price\"));\n        if (price.equals(\"0.00\")) {\n          price = \"Unknown Price\";\n        }\n        item_prices.add(price);\n        item_descriptions.add(cursor.getString(cursor.getColumnIndex(\"description\")));\n        item_vegs.add(cursor.getInt(cursor.getColumnIndex(\"veg\")));\n      }\n    }\n\n    if (db != null) db.close();\n\n    Bundle b = new Bundle();\n    b.putString(\"query\", query);\n    b.putBoolean(\"menu\", menu);\n    b.putIntegerArrayList(\"item_ids\", item_ids);\n    b.putStringArrayList(\"restaurant_names\", restaurant_names);\n    b.putIntegerArrayList(\"restaurant_lats\", restaurant_lats);\n    b.putIntegerArrayList(\"restaurant_lons\", restaurant_lons);\n    b.putStringArrayList(\"restaurant_distances\", restaurant_distances);\n    b.putStringArrayList(\"item_names\", item_names);\n    b.putStringArrayList(\"item_prices\", item_prices);\n    b.putStringArrayList(\"item_descriptions\", item_descriptions);\n    b.putIntegerArrayList(\"item_vegs\", item_vegs);\n\n    ArrayList<Item> item_list = new ArrayList<Item>();\n\n    for (int i = 0; i < item_ids.size(); i++) {\n      boolean mSort = (menu ? prefs.getBoolean(\"sortPrice\", false) : true);\n      Item item =\n          new Item(\n              item_ids.get(i),\n              restaurant_names.get(i),\n              restaurant_lats.get(i),\n              restaurant_lons.get(i),\n              restaurant_distances.get(i),\n              item_names.get(i),\n              item_prices.get(i),\n              item_descriptions.get(i),\n              item_vegs.get(i),\n              mSort);\n      item_list.add(item);\n    }\n\n    Collections.sort(item_list);\n\n    ArrayList<String> combined = new ArrayList<String>();\n    String thisName = \"\";\n    for (Iterator<Item> i = item_list.iterator(); i.hasNext(); ) {\n      Item item = i.next();\n      if (!item.restaurant_name.equals(thisName)) {\n        combined.add(\n            (combined.size() == 0 ? \"\" : \"\\n\\n\")\n                + item.restaurant_name\n                + \"\\n\"\n                + item.restaurant_distance\n                + \" mi.\\n\\n\");\n      }\n      combined.add(\n          item.item_name\n              + (item.item_description.equals(\"\") ? \"\" : \"\\n\" + item.item_description)\n              + (item.item_price.equals(\"Unknown Price\") ? \"\" : \"\\n$\" + item.item_price)\n              + \"\\n\"\n              + (item.item_veg == 1\n                  ? \"We think this IS a vegetarian item\"\n                  : \"We think this is NOT a vegetarian item\"));\n      thisName = item.restaurant_name;\n    }\n\n    b.putStringArrayList(\"combined\", combined);\n\n    return b;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6126, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 104, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [275], "useEnd": [293], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/freshdocs/cmsandroid/tree/master/src/com/zia/freshdocs/preference/CMISPreferencesManager.java", "rawCode": "  public void storeFavorites(Context ctx, Set<NodeRef> favorites) {\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(ctx);\n    byte[] enc = Base64.encodeBase64(SerializationUtils.serialize((Serializable) favorites));\n    Editor prefsEditor = sharedPrefs.edit();\n    prefsEditor.putString(FAVORITES_KEY, new String(enc));\n    prefsEditor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6127, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 223, "focalAPIEnd": 274, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)", "sp.edit()"], "useStart": [305, 465], "useEnd": [351, 483], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wangkenan/d9game/tree/master/src/me/key/appmarket/MyFragmengManager.java", "rawCode": "  @Override\n  public void onCreate(Bundle arg0) {\n    super.onCreate(arg0);\n    setContentView(R.layout.main_bottom);\n    setBehindContentView(R.layout.slide_menu);\n\n    // 第一次启动创建桌面快捷方式\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);\n    boolean isFirstLuncher = preferences.getBoolean(\"isFirstLuncher\", true);\n    if (isFirstLuncher) {\n      ShortcutUtil.createShortCut(this, R.drawable.d9_logo, R.string.app_name);\n      preferences.edit().putBoolean(\"isFirstLuncher\", false).commit();\n    }\n\n    SharedPreferences sp = getSharedPreferences(\"cleandb\", MODE_PRIVATE);\n    boolean cleanDb = sp.getBoolean(\"db\", false);\n    if (!cleanDb) {\n      cleanDatabases(this);\n      Editor edit = sp.edit();\n      edit.putBoolean(\"db\", true);\n      edit.commit();\n    }\n    MarketApplication.getInstance().getAppLication().add(this);\n    startService(new Intent(this, DownloadService.class));\n    appRankInfos = MarketApplication.getInstance().getRankappinfos();\n    appHomeInfos_temp = MarketApplication.getInstance().getHomeAppInfos();\n    db = FinalDb.create(this);\n    findgame = (ImageView) findViewById(R.id.findgame);\n    findApp = (RelativeLayout) findViewById(R.id.rl_findapp_main_bottom);\n    localgame = (TextView) findViewById(R.id.localgame);\n    localgame.setTextColor(getResources().getColor(R.color.focus));\n\n    btnSearch = (ImageView) findViewById(R.id.iv_search_slide_menu);\n\n    findgameTv = (TextView) findViewById(R.id.tv_mainbottom_findgame);\n    rankTv = (TextView) findViewById(R.id.tv_mainbottom_rank);\n    rankgame = (ImageView) findViewById(R.id.rankgame);\n    rankApp = (RelativeLayout) findViewById(R.id.rl_rankapp_main_bottom);\n    inflater = LayoutInflater.from(this);\n    errorview = findViewById(R.id.errorview);\n    btnRefsh = errorview.findViewById(R.id.btn_Refsh);\n    btnRefsh.setOnClickListener(this);\n    localApp = (FrameLayout) findViewById(R.id.fl_localapp_main_bottom);\n    findApp.setOnClickListener(this);\n    rankApp.setOnClickListener(this);\n    localApp.setOnClickListener(this);\n    fm = getSupportFragmentManager();\n    // 获取sd卡地址\n    root = LocalUtils.getRoot(this);\n    fragmentTransaction = getSupportFragmentManager().beginTransaction();\n    findGame_normal = getResources().getDrawable(R.drawable.findgame);\n    findGame_focue = getResources().getDrawable(R.drawable.findgame_focus);\n    local_focue = getResources().getDrawable(R.drawable.localgame_fouce);\n    local_normal = getResources().getDrawable(R.drawable.local);\n    manager_focue = getResources().getDrawable(R.drawable.rank_selected);\n    manager_normal = getResources().getDrawable(R.drawable.rank);\n    localgame.setCompoundDrawablesWithIntrinsicBounds(null, local_focue, null, null);\n    // 预加载内容\n    new AsyncTask<Void, Void, Void>() {\n\n      @Override\n      protected Void doInBackground(Void... params) {\n        Long current = System.currentTimeMillis();\n        /*\n         * String str = ToolHelper.donwLoadToString(Global.GAME_MAIN_URL\n         * + Global.RANK_PAGE); if (str.isEmpty()) { appRankInfos = new\n         * ArrayList<AppInfo>(); } else { ParseRankJson(str); }\n         *\n         * String str2 =\n         * ToolHelper.donwLoadToString(Global.GAME_MAIN_URL +\n         * Global.HOME_PAGE); if (str2.isEmpty()) { appHomeInfos_temp =\n         * new ArrayList<AppInfo>(); } else { ParseHomeJson(str2); }\n         */\n        // if(!firstinstall) {\n        appManaInfos_temp = AppUtils.getUserApps(MyFragmengManager.this, 4000);\n\n        // Editor edit = sp.edit();\n        // edit.putBoolean(\"firstinstall\", true);\n        // for(AppInfo appInfo : appManaInfos_temp) {\n        // InstallAppInfo installAppInfo = new InstallAppInfo(appInfo);\n        // LogUtils.d(\"Local\", installAppInfo.getIdx()+\"idx\");\n        // db.save(installAppInfo);\n        // }\n        // edit.commit();\n        /*\n         * } else { List<InstallAppInfo> installAppInfos =\n         * db.findAll(InstallAppInfo.class); LogUtils.d(\"Local\",\n         * installAppInfos.get(0).getAppName()+\"installAppInfossize\");\n         * appManaInfos_temp = new ArrayList<AppInfo>();\n         * for(InstallAppInfo installAppInfo :installAppInfos) {\n         * LogUtils.d(\"Local\", installAppInfo.getIdx()+\"appInfoidx\");\n         * AppInfo appInfo = new AppInfo(installAppInfo); String\n         * packageName = appInfo.getPackageName(); PackageManager pm =\n         * getPackageManager(); ApplicationInfo info; try { info =\n         * pm.getApplicationInfo(packageName, 0);\n         * appInfo.setAppIcon(info.loadIcon(pm)); } catch\n         * (NameNotFoundException e) { // TODO Auto-generated catch\n         * block e.printStackTrace(); }\n         *\n         * appManaInfos_temp.add(appInfo); } }\n         */\n        List<AppInfo> mAppInfos_temp = new ArrayList<AppInfo>();\n        List<PackageInfo> packages = getPackageManager().getInstalledPackages(0);\n        Long currentMapp = System.currentTimeMillis();\n        mAppInfos_temp =\n            LocalUtils.readLocalGame(MyFragmengManager.this, root + \"d9dir/\", packages);\n        Long currentMappnow = System.currentTimeMillis();\n        LogUtils.d(\"Local\", (currentMappnow - currentMapp) + \"currentMappnow - currentMapp\");\n        LogUtils.d(\"Local\", \"mAppInfos_tempmAppInfos_temp\" + mAppInfos_temp.size());\n        mAppInfos.addAll(mAppInfos_temp);\n        ArrayList<AppInfo> userApps = AppUtils.getUserApps(MyFragmengManager.this, 4000);\n        apknamelist = AppUtils.getInstallAppPackage(MyFragmengManager.this);\n        if (apknamelist == null) {\n          appManagerUpdateInfos_t = new ArrayList<AppInfo>();\n        } else {\n          String str3 =\n              ToolHelper.donwLoadToString(\n                  Global.MAIN_URL + Global.UPGRADEVERSION + \"?apknamelist=\" + apknamelist);\n          ParseUpdateJson(str3);\n        }\n\n        if (userApps == null) {\n          appManagerUpdateInfos = new ArrayList<AppInfo>();\n        } else {\n          appManagerUpdateInfos_t = AppUtils.getCanUpadateApp(userApps, appManagerUpdateInfos_t);\n          appManagerUpdateInfos.clear();\n          appManagerUpdateInfos.addAll(appManagerUpdateInfos_t);\n        }\n\n        List<AppInfo> down_temp = new ArrayList<AppInfo>();\n        down_temp = db.findAll(AppInfo.class);\n        downApplist.clear();\n        downApplist.addAll(down_temp);\n        Collections.reverse(downApplist);\n\n        String str4 =\n            ToolHelper.donwLoadToString(Global.MAIN_URL + Global.APP_CATEGORY + \"?type=\" + 2);\n        LogUtils.d(\"Local\", \"runCategoryData\" + str4);\n        if (str4.isEmpty()) {\n          gcategoryInfoList_temp = null;\n          LogUtils.d(\"Local\", \"runCategoryData\" + str4 + \"str4\");\n\n        } else {\n          ParseCategoryJson(str4);\n        }\n        Long now = System.currentTimeMillis();\n        loadLocaltopList();\n        Long bannertime = System.currentTimeMillis();\n        LogUtils.d(\"Local\", (bannertime - now) + \"nownownownow\");\n\n        String banner = ToolHelper.donwLoadToString(Global.GAME_MAIN_URL + \"/recommednBanner.php\");\n        Long bannertimenow = System.currentTimeMillis();\n        LogUtils.d(\"Local\", bannertimenow - bannertime + \"bannertimenow\");\n        if (banner.isEmpty()) {\n          // TODO\n        } else {\n          ParseBanner(banner);\n        }\n        return null;\n      }\n\n      private void ParseBanner(String bannerstr) {\n        JSONArray jsonArray;\n        banners.clear();\n        try {\n          jsonArray = new JSONArray(bannerstr);\n          int len = jsonArray.length();\n          for (int i = 0; i < len; i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String picurl = jsonObject.getString(\"picurl\");\n            String appid = jsonObject.getString(\"appid\");\n            Banner banner = new Banner();\n            banner.setAppid(appid);\n            banner.setPicurl(picurl);\n            banners.add(banner);\n          }\n        } catch (JSONException e) {\n          e.printStackTrace();\n        }\n      }\n\n      protected void onPostExecute(Void result) {\n        MarketApplication.getInstance().setmAppInfos(mAppInfos);\n        MarketApplication.getInstance().setAppManaInfos_temp(appManaInfos_temp);\n        MarketApplication.getInstance().setDownApplist(downApplist);\n        MarketApplication.getInstance().setRankAppInfos(appRankInfos);\n        MarketApplication.getInstance().setAppManagerUpdateInfos(appManagerUpdateInfos);\n        MarketApplication.getInstance().setHomeAppInfos(appHomeInfos_temp);\n        MarketApplication.getInstance().setBanners(banners);\n        lf = new LocalGameFragment();\n        mf = new MainActivityFragment();\n        ft = fm.beginTransaction();\n        f1 = new RankFragment();\n        // 把对应的view对象区域替换成f1\n        // ft.replace(R.id.tabcontent, lf);\n        ft.add(R.id.tabcontent, mf);\n        ft.add(R.id.tabcontent, f1);\n        ft.add(R.id.tabcontent, lf);\n        ft.show(lf);\n        ft.commitAllowingStateLoss();\n        myHandler.sendEmptyMessage(INMAIN);\n        if (appHomeInfos_temp != null && appRankInfos != null) {\n          for (AppInfo ai : appHomeInfos_temp) {\n            dsb = new DownStateBroadcast();\n            IntentFilter filter = new IntentFilter();\n            String fileName = DownloadService.CreatFileName(ai.getAppName()).getAbsolutePath();\n            filter.addAction(fileName + \"down\");\n            registerReceiver(dsb, filter);\n          }\n          for (AppInfo ai : appRankInfos) {\n            dsbRank = new DownStateBroadcastRank();\n            IntentFilter filter = new IntentFilter();\n            String fileName = DownloadService.CreatFileName(ai.getAppName()).getAbsolutePath();\n            filter.addAction(fileName + \"down\");\n            registerReceiver(dsbRank, filter);\n          }\n        }\n\n        final MenuFragment menuFragment = new MenuFragment();\n        fragmentTransaction.replace(R.id.slide_content, menuFragment);\n        // fragmentTransaction.replace(R.id.content, new\n        // ContentFragment());\n        fragmentTransaction.commitAllowingStateLoss();\n\n        LogUtils.d(\"Main\", \"我已经被加载了哟\");\n        lv = (ListView) findViewById(R.id.category_lv);\n        lv.setDividerHeight(0);\n        LogUtils.d(\"Main\", lv + \"\");\n        /*\n         * ImageButton search_btn = (ImageButton)\n         * findViewById(R.id.search_btn);\n         * search_btn.setOnClickListener(new OnClickListener() {\n         *\n         * @Override public void onClick(View v) { menu.toggle(); } });\n         */\n        MyInstalledReceiver installedReceiver = new MyInstalledReceiver();\n        IntentFilter filter = new IntentFilter();\n\n        filter.addAction(\"android.intent.action.PACKAGE_ADDED\");\n        filter.addDataScheme(\"package\");\n        registerReceiver(installedReceiver, filter);\n        LogUtils.d(\"Main1\", menuCategoryAdapter + \"\");\n        menu = getSlidingMenu();\n        menu.setMode(SlidingMenu.LEFT);\n        menu.setTouchModeAbove(SlidingMenu.TOUCHMODE_FULLSCREEN);\n        /*\n         * menu.setShadowWidthRes(R.dimen.shadow_width);\n         * menu.setShadowDrawable(R.drawable.shadow);\n         */\n        menu.setBehindOffsetRes(R.dimen.slidingmenu_offset);\n        menu.setFadeDegree(0.35f);\n        menu.setOnCloseListener(\n            new OnCloseListener() {\n\n              @Override\n              public void onClose() {\n                LogUtils.d(\"Main\", \"close\");\n              }\n            });\n        menu.setOnOpenedListener(\n            new OnOpenedListener() {\n\n              @Override\n              public void onOpened() {\n                LogUtils.d(\"Main\", \"open\");\n                /*\n                 * Intent intent = new Intent();\n                 * intent.setAction(\"open.menu\"); sendBroadcast(intent);\n                 */\n              }\n            });\n\n        final EditText etSearcher = (EditText) findViewById(R.id.et_search);\n        /*\n         * etSearcher.setOnTouchListener(new OnTouchListener(){\n         *\n         * @Override public boolean onTouch(View arg0, MotionEvent arg1)\n         * { etSearcher.setHint(\"\"); return false; }\n         *\n         * });\n         */\n        btnSearch.setOnClickListener(\n            new OnClickListener() {\n\n              @Override\n              public void onClick(View v) {\n                Intent intent = new Intent();\n                intent.putExtra(\"Search\", etSearcher.getText().toString());\n                intent.setClass(MyFragmengManager.this, SearchActivity.class);\n                startActivity(intent);\n                LogUtils.d(\"MAIN\", \"动画前\");\n                MyFragmengManager.this.overridePendingTransition(\n                    R.anim.left_anim, R.anim.right_anim);\n                LogUtils.d(\"MAIN\", \"动画后\");\n                etSearcher.setText(null);\n              }\n            });\n        etSearcher.setOnFocusChangeListener(\n            new View.OnFocusChangeListener() {\n\n              @Override\n              public void onFocusChange(View v, boolean hasFocus) {\n                // TODO Auto-generated method stub\n                if (hasFocus) {\n                  etSearcher.setHint(\"\");\n                } else {\n                  etSearcher.setHint(\"搜索\");\n                  // 关闭软件盘\n                  InputMethodManager imm =\n                      (InputMethodManager)\n                          MyFragmengManager.this.getSystemService(Context.INPUT_METHOD_SERVICE);\n                  imm.hideSoftInputFromWindow(etSearcher.getWindowToken(), 0);\n                }\n              }\n            });\n\n        etSearcher.addTextChangedListener(\n            new TextWatcher() {\n              private CharSequence temp;\n              private int selectionStart;\n              private int selectionEnd;\n\n              @Override\n              public void afterTextChanged(Editable s) {\n                // TODO Auto-generated method stub\n                int number = s.length();\n                if (number == 0) {\n                  etSearcher.setHint(\"搜索\");\n                }\n              }\n\n              @Override\n              public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n                // TODO Auto-generated method stub\n\n              }\n\n              @Override\n              public void onTextChanged(CharSequence s, int start, int count, int after) {\n                // TODO Auto-generated method stub\n                temp = s;\n              }\n            });\n        etSearcher.setOnEditorActionListener(\n            new OnEditorActionListener() {\n\n              @Override\n              public boolean onEditorAction(TextView tv, int antionId, KeyEvent event) {\n                // TODO Auto-generated method stub\n                Intent intent = new Intent();\n                intent.putExtra(\"Search\", etSearcher.getText().toString());\n                intent.setClass(MyFragmengManager.this, SearchActivity.class);\n                startActivity(intent);\n                LogUtils.d(\"MAIN\", \"动画前\");\n                MyFragmengManager.this.overridePendingTransition(\n                    R.anim.left_anim, R.anim.right_anim);\n                LogUtils.d(\"MAIN\", \"动画后\");\n                etSearcher.setText(null);\n                // etSearcher.setHint(\"搜索\");\n                return false;\n              }\n            });\n        /*\n         * LinearLayout etSeacher = (LinearLayout)\n         * findViewById(R.id.menu_search);\n         * etSeacher.setOnClickListener(new OnClickListener() {\n         *\n         * @Override public void onClick(View v) { Intent intent = new\n         * Intent(); intent.setClass(MyFragmengManager.this,\n         * SearchActivity.class); startActivity(intent);\n         * LogUtils.d(\"MAIN\", \"动画前\");\n         * MyFragmengManager.this.overridePendingTransition(\n         * R.anim.left_anim, R.anim.right_anim); LogUtils.d(\"MAIN\",\n         * \"动画后\"); } });\n         */\n        if (gcategoryInfoList_temp == null) {\n          errorview.setVisibility(View.VISIBLE);\n        } else {\n          menuCategoryAdapter =\n              new MenuCategoryAdapter(MyFragmengManager.this, gcategoryInfoList_temp, lv);\n\n          lv.setAdapter(menuCategoryAdapter);\n\n          // lv.getChildAt(0).setBackgroundColor(getResources().getColor(R.color.classiv_cloor));\n          // lv.getChildAt(0).findViewById(R.id.click_menu).setVisibility(View.VISIBLE);\n          LogUtils.d(\"Main\", lv.getChildCount() + \"\");\n\n          lv.setOnItemClickListener(\n              new OnItemClickListener() {\n\n                @Override\n                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n                  menuFragment.updata(position);\n                  view.setBackgroundResource(R.drawable.slidingmenu_left_background_focus);\n                  for (int i = 0; i < lv.getChildCount(); i++) {\n                    if (i == position) {\n                      continue;\n                    }\n                    LogUtils.d(\"Main\", i + \"\");\n                    lv.getChildAt(i).setBackgroundResource(R.drawable.slidingmenu_left_background);\n                  }\n                }\n              });\n        }\n      };\n    }.execute();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6128, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 56, "focalAPIEnd": 104, "followUpCheck": "PrefUtils.getBoolPreference(sp,R.string.forward_to_sms_key,context)", "checkType": "IF", "followUpCheckExpressionStart": 183, "followUpCheckExpressionEnd": 254, "followUpCheckBlockStart": 183, "followUpCheckBlockEnd": 414, "use": ["getStringPreference(sp,*,Context)", "getStringPreference(sp,*,Context)", "getStringPreference(sp,*,Context)"], "useStart": [295, 958, 1204], "useEnd": [363, 1026, 1273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fedepaol/DroidAlone/tree/master/src/com/fede/EventForwarder.java", "rawCode": "  public void forward() {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(c);\n    boolean forwardedToSms = false;\n    boolean forwardedToMail = false;\n    if (PrefUtils.getBoolPreference(prefs, R.string.forward_to_sms_key, c)) {\n      GeneralUtils.sendSms(\n          PrefUtils.getStringPreference(prefs, R.string.sms_to_forward_key, c), toForward, c);\n      forwardedToSms = true;\n    }\n\n    if (PrefUtils.getBoolPreference(prefs, R.string.forward_to_mail_key, c)) {\n      try {\n        GeneralUtils.sendMail(c, toForward);\n        forwardedToMail = true;\n      } catch (Exception e) {\n        // I made the beer with it\n      }\n    }\n\n    String shortDesc = String.format(\"%s\", toForward);\n    String forwardedToSmsDesc = \"\";\n    String forwardedToMailDesc = \"\";\n\n    if (forwardedToSms) {\n      forwardedToSmsDesc =\n          String.format(\n              \"%s %s\",\n              c.getString(R.string.sent_via_sms),\n              PrefUtils.getStringPreference(prefs, R.string.sms_to_forward_key, c));\n    }\n\n    if (forwardedToMail) {\n      forwardedToMailDesc =\n          String.format(\n              \"%s %s\",\n              c.getString(R.string.sent_via_mail),\n              PrefUtils.getStringPreference(prefs, R.string.mail_to_forward_key, c));\n    }\n    String fullDesc = String.format(\"%s %s %s\", toForward, forwardedToSmsDesc, forwardedToMailDesc);\n\n    GeneralUtils.notifyEvent(\n        shortDesc, fullDesc, DroidContentProviderClient.EventType.FORWARDED_CALL, c);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6129, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 193, "focalAPIEnd": 244, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()", "sp.edit()", "sp.edit()", "sp.edit()", "sp.edit()"], "useStart": [302, 357, 413, 468, 525], "useEnd": [310, 365, 421, 476, 533], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMUCognisense/Cognisense/tree/master/Android-Apps/DoorBell/src/com/example/doorbell/DoorBellConfigurationService.java", "rawCode": "  public void locationReceived(Object triggerData, Object srcServiceId) {\n\n    String[] location;\n    Log.d(TAG, \"Location that is received \" + (String) triggerData);\n    SharedPreferences p = PreferenceManager.getDefaultSharedPreferences(this);\n    location = ((String) triggerData).split(\"\\\\+\");\n    p.edit().putString(\"uhome\", location[0]).commit();\n    p.edit().putString(\"ufloor\", location[1]).commit();\n    p.edit().putString(\"uroom\", location[2]).commit();\n    p.edit().putString(\"uinRoom\", location[3]).commit();\n    p.edit().putString(\"ufavorite\", location[4]).commit();\n    configurationMatch();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6130, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 93, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,*)", "sp.edit()"], "useStart": [171, 293], "useEnd": [210, 310], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/monaca/monaca-framework-android/tree/master/MonacaUtils/src/mobi/monaca/utils/MonacaDevice.java", "rawCode": "  private static String getIDUsingUUID(Context context) {\n    SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);\n    String deviceId = sharedPref.getString(\"device_id\", null);\n    if (deviceId == null) {\n      deviceId = UUID.randomUUID().toString();\n      sharedPref.edit().putString(\"device_id\", deviceId).commit();\n    }\n    return deviceId;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6131, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 112, "focalAPIEnd": 163, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(String,int)", "configureSeekbarDiag(Dialog,String,*,int,String,int,sp)"], "useStart": [311, 228], "useEnd": [355, 438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/peramikic/ARviewer/tree/master/src/com/libresoft/apps/ARviewer/ARPreferences.java", "rawCode": "  @Override\n  protected void onPrepareDialog(int id, Dialog dialog) {\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n\n    switch (id) {\n      case DIALOG_SELECT_THRESHOLD:\n        configureSeekbarDiag(\n            dialog,\n            KEY_DIST_FILTER,\n            sharedPreferences.getInt(KEY_DIST_FILTER, 0),\n            500,\n            \" m.\",\n            1,\n            sharedPreferences);\n        break;\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6132, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 2043, "focalAPIEnd": 2094, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)"], "useStart": [2113], "useEnd": [2148], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/daswolle/DigitalRuler/tree/master/src/com/example/digitalmeasuringtape/MainActivity.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public void Measure() {\n\n    System.out.println(\"Calling Measure\");\n\n    Collect();\n    pi_string = \"calculating\";\n    handler.sendEmptyMessage(0);\n    measurements.trim(greatestX);\n    measurements.unravel();\n\n    // saving data; dev only\n    // String xString = measurements.listToString(measurements.xData, \"x\");\n    // String yString = measurements.listToString(measurements.yData, \"y\");\n    // String tString = measurements.listToString(measurements.tData, \"t\");\n    // measurements.writeGraph(\"graphs.csv\", xString, yString, tString);\n\n    // determine which measurement mode is necessary; deprecated functions here; remove measuring\n    // other axes\n    double d;\n    d = 0;\n    if (!sPrefs.getBoolean(\"MeasureY\", false)) {\n      physics.RemoveGravity(measurements.xData);\n      physics.LowPassFilter(measurements.xData);\n      d = physics.Distance(measurements.xData, measurements.tData);\n    } else if (!sPrefs.getBoolean(\"MeasureZ\", false)) {\n      physics.RemoveGravity(measurements.xData, measurements.yData);\n\n      d = physics.Distance(measurements.xData, measurements.yData, measurements.tData);\n    } else {\n      physics.RemoveGravity(measurements.xData, measurements.yData, measurements.zData);\n\n      d =\n          physics.Distance(\n              measurements.xData, measurements.yData, measurements.zData, measurements.tData);\n    }\n\n    // set up format for decimal places\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMinimumFractionDigits(1);\n    nf.setMaximumFractionDigits(3);\n\n    // set up output for integers\n    NumberFormat wnf = NumberFormat.getInstance();\n    wnf.setMinimumFractionDigits(0);\n    wnf.setMaximumFractionDigits(1);\n\n    String truncate;\n    if (d == 0) truncate = \"0.0\";\n    else {\n      truncate = nf.format(d);\n    }\n    // handle NaN\n    if (d == Float.NaN) {\n      pi_string = \"NaN. Try Again.\";\n    } else if (d < 0) pi_string = \"Eh, Try Again.\";\n    else {\n      // get shared setting for measurement units\n      SharedPreferences sPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n      String y = sPrefs.getString(\"meas_units\", \"0\");\n      int UNITS = Integer.valueOf(y);\n      System.out.println(\"UNITS INT: \" + UNITS);\n      if (UNITS == 0) {\n        // convert to feet\n        System.out.println(\"truncate: \" + truncate);\n        double x = Double.parseDouble(truncate) * 3.28084;\n\n        double f = (x - Math.floor(x)) * 12;\n\n        x = Math.floor(x);\n\n        String result = wnf.format(x);\n        String fraction = wnf.format(f);\n\n        System.out.println(\"double pi_string/truncate: \" + result);\n\n        if (x == 0) {\n          pi_string = fraction + \" in\";\n        } else {\n          pi_string = result + \" ft \" + fraction + \" in\";\n        }\n      } else {\n        pi_string = truncate + \" m\";\n      }\n    }\n    handler.sendEmptyMessage(0);\n    System.out.println(pi_string);\n    System.out.println(\"returning from Measure()\");\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6133, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "PackageManager.NameNotFoundException", "exceptionHandlingCall": ["w(String,*)"], "tryExpressionStart": 301, "tryExpressionEnd": 305, "tryBlockStart": 301, "tryBlockEnd": 1470, "catchExpressionStart": 1395, "catchExpressionEnd": 1442, "catchBlockStart": 1395, "catchBlockEnd": 1470, "exceptionHandlingCallStart": [1450], "exceptionHandlingCallEnd": [1463], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 666, "focalAPIEnd": 717, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(*,int)", "sp.edit()"], "useStart": [743, 854], "useEnd": [802, 866], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/monaca/monaca-framework-android/tree/master/BarcodeScannerLibrary/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  /**\n   * We want the help screen to be shown automatically the first time a new version of the app is\n   * run. The easiest way to do this is to check android:versionCode from the manifest, and compare\n   * it to a value stored as a preference.\n   */\n  private boolean showHelpOnFirstLaunch() {\n    try {\n      PackageInfo info = getPackageManager().getPackageInfo(PACKAGE_NAME, 0);\n      int currentVersion = info.versionCode;\n      // Since we're paying to talk to the PackageManager anyway, it makes sense to cache the app\n      // version name here for display in the about box later.\n      this.versionName = info.versionName;\n      SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n      int lastVersion = prefs.getInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN, 0);\n      if (currentVersion > lastVersion) {\n        prefs.edit().putInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN, currentVersion).commit();\n        Intent intent = new Intent(this, HelpActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);\n        // Show the default page on a clean install, and the what's new page on an upgrade.\n        String page = lastVersion == 0 ? HelpActivity.DEFAULT_PAGE : HelpActivity.WHATS_NEW_PAGE;\n        intent.putExtra(HelpActivity.REQUESTED_PAGE_KEY, page);\n        startActivity(intent);\n        return true;\n      }\n    } catch (PackageManager.NameNotFoundException e) {\n      Log.w(TAG, e);\n    }\n    return false;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6134, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 116, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.registerOnSharedPreferenceChangeListener(*)"], "useStart": [116], "useEnd": [223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMS-Projects/copyit-app/tree/master/android/src/net/mms_projects/copy_it/ui/android/SettingsActivity.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    // Set up a listener whenever a key changes\n    PreferenceManager.getDefaultSharedPreferences(this)\n        .registerOnSharedPreferenceChangeListener(this);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6135, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 125, "focalAPIEnd": 179, "followUpCheck": "sp.getString(\"drawerSearchOptions\",\"1\").equals(\"1\")", "checkType": "IF", "followUpCheckExpressionStart": 619, "followUpCheckExpressionEnd": 685, "followUpCheckBlockStart": 619, "followUpCheckBlockEnd": 1149, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nowlauncher/now-launcher/tree/master/NowLauncher/src/com/nowlauncher/nowlauncher/ApplicationSearchAdapter.java", "rawCode": "    @Override\n    protected FilterResults performFiltering(CharSequence constraint) {\n\n      SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n      FilterResults results = new FilterResults();\n      // We implement here the filter logic\n      if (constraint == null || constraint.length() == 0) {\n        // No filter implemented we return all the list\n        results.values = originalmApplications;\n        results.count = originalmApplications.size();\n      } else {\n        // We perform filtering operation\n        List<AppInfo> nAppList = new ArrayList<AppInfo>();\n\n        if (sharedPrefs.getString(\"drawerSearchOptions\", \"1\").equals(\"1\")) {\n          for (AppInfo p : mApplications) {\n            if (p.label.toString().toUpperCase().contains(constraint.toString().toUpperCase()))\n              nAppList.add(p);\n          }\n        } else if (sharedPrefs.getString(\"drawerSearchOptions\", \"1\").equals(\"2\")) {\n          for (AppInfo p : mApplications) {\n            if (p.label.toString().toUpperCase().startsWith(constraint.toString().toUpperCase()))\n              nAppList.add(p);\n          }\n        }\n\n        results.values = nAppList;\n        results.count = nAppList.size();\n      }\n      return results;\n    }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6136, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 84, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()", "preferenceManager.setDefaultValues(Context,*,boolean)"], "useStart": [140, 171], "useEnd": [148, 243], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/archived/WebVox/src/com/marvin/webvox/BrowserSettings.java", "rawCode": "  /*package*/ void resetDefaultPreferences(Context ctx) {\n    SharedPreferences p = PreferenceManager.getDefaultSharedPreferences(ctx);\n    p.edit().clear().commit();\n    PreferenceManager.setDefaultValues(ctx, R.xml.browser_preferences, true);\n    // reset homeUrl\n    setHomePage(ctx, getFactoryResetHomeUrl(ctx));\n    // reset appcache max size\n    appCacheMaxSize = webStorageSizeManager.getAppCacheMaxSize();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6137, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 731, "focalAPIEnd": 782, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Initalize(sp)"], "useStart": [670], "useEnd": [783], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/edofic/Ichiban/tree/master/eclipse/Ichiban/src/com/abstracttech/ichiban/activities/IchibanActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.pager);\n\n    Data.vibrator = new Vibrate((Vibrator) getSystemService(Context.VIBRATOR_SERVICE));\n\n    // make sure screen stays on\n    PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n    wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK, \"My Tag\");\n\n    // load pages\n    MainPagerAdapter adapter = new MainPagerAdapter();\n    ViewPager myPager = (ViewPager) findViewById(R.id.mypager);\n    myPager.setAdapter(adapter);\n    myPager.setCurrentItem(1);\n\n    // Initialize Preference -> get preference data class\n    com.abstracttech.ichiban.data.Preferences.Initalize(\n        PreferenceManager.getDefaultSharedPreferences(this));\n\n    bt.onCreate(this);\n\n    running = false;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6138, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 80, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dmonllao/Android_Video_Rest_Client/tree/master/src/com/monllao/david/androidrestclient/service/ShareService.java", "rawCode": "  /** Just to register the receivers */\n  public void onCreate() {\n\n    prefs = PreferenceManager.getDefaultSharedPreferences(this);\n\n    // To notify the share end\n    String ns = Context.NOTIFICATION_SERVICE;\n    mNotificationManager = (NotificationManager) getSystemService(ns);\n\n    // Registering receivers\n    IntentFilter addvideofilter = new IntentFilter(AndroidRestClientActivity.ACTION_ADDVIDEO);\n    addVideoReceiver = new AddServerVideoReceiver();\n    registerReceiver(addVideoReceiver, addvideofilter);\n\n    IntentFilter beginsharefilter = new IntentFilter(AndroidRestClientActivity.ACTION_BEGINSHARE);\n    beginShareReceiver = new BeginShareReceiver();\n    registerReceiver(beginShareReceiver, beginsharefilter);\n\n    IntentFilter facebookfilter = new IntentFilter(AndroidRestClientActivity.ACTION_FACEBOOK);\n    facebookTokenReceiver = new FacebookTokenReceiver();\n    registerReceiver(facebookTokenReceiver, facebookfilter);\n\n    IntentFilter twitterfilter = new IntentFilter(AndroidRestClientActivity.ACTION_TWITTER);\n    twitterTokenReceiver = new TwitterTokenReceiver();\n    registerReceiver(twitterTokenReceiver, twitterfilter);\n\n    IntentFilter endsharefilter = new IntentFilter(AndroidRestClientActivity.ACTION_ENDSHARE);\n    endShareReceiver = new EndShareReceiver();\n    registerReceiver(endShareReceiver, endsharefilter);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6139, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 113, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nolanlawson/Catlog/tree/master/Catlog/src/com/nolanlawson/logcat/helper/PreferenceHelper.java", "rawCode": "  public static void setDisplayLimitPreference(Context context, int value) {\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n    Editor editor = sharedPrefs.edit();\n\n    editor.putString(\n        context.getText(R.string.pref_display_limit).toString(), Integer.toString(value));\n\n    editor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6140, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 135, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(*,String)"], "useStart": [323], "useEnd": [430], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/insidepower/eclipseandroid/tree/master/reference/web/Catlog/Catlog/src/com/nolanlawson/logcat/helper/PreferenceHelper.java", "rawCode": "  public static int getDisplayLimitPreference(Context context) {\n\n    if (displayLimit == -1) {\n\n      SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n      String defaultValue = context.getText(R.string.pref_display_limit_default).toString();\n\n      String intAsString =\n          sharedPrefs.getString(\n              context.getText(R.string.pref_display_limit).toString(), defaultValue);\n\n      try {\n        displayLimit = Integer.parseInt(intAsString);\n      } catch (NumberFormatException e) {\n        displayLimit = Integer.parseInt(defaultValue);\n      }\n    }\n\n    return displayLimit;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6141, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 73, "focalAPIEnd": 127, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Geekete/LatvianKeyboard/tree/master/src/com/project/latviankeyboard/altkey/MyKeyboardView.java", "rawCode": "  public void setValues(Context context) {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n    this.backgroundColor = prefs.getInt(\"akBackgroundColor\", Color.BLACK);\n    this.buttonColor = prefs.getInt(\"akBtnColor\", Color.WHITE);\n    this.letterColor = prefs.getInt(\"akLetterColor\", Color.RED);\n    this.borderColor = prefs.getInt(\"akBorderColor\", Color.LTGRAY);\n    this.roundness = prefs.getInt(\"akBtnRoundness\", 1);\n    this.borderWidth = prefs.getInt(\"akBorderWidth\", 2);\n    this.defaultStyle = prefs.getBoolean(\"akDefaultStyle\", true);\n    this.switchSounds = prefs.getBoolean(\"akSwitchSounds\", true);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6142, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 170, "focalAPIEnd": 221, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,*)"], "useStart": [242], "useEnd": [281], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bybeet/csci498android/tree/master/LunchList/src/csci498/bybeet/lunchlist/AlarmActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.alarm);\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    String sound = prefs.getString(\"alarm_ringtone\", null);\n\n    if (sound != null) {\n      player.setAudioStreamType(AudioManager.STREAM_ALARM);\n      try {\n        player.setDataSource(sound);\n        player.setOnPreparedListener(this);\n        player.prepareAsync();\n      } catch (Exception e) {\n        Log.e(\"LunchList\", \"Exception in playing ringtone\", e);\n      }\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6143, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 486, "focalAPIEnd": 537, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)"], "useStart": [577], "useEnd": [611], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ethankhall/Chronos/tree/master/ChronosApp/src/main/java/com/kopysoft/chronos/activities/ClockActivity.java", "rawCode": "  private void sendEmail() {\n    // PayPeriodHolder payPeriodHolder, Job thisJob, Context context\n\n    ProgressDialog dialog =\n        ProgressDialog.show(ClockActivity.this, \"\", \"Generating. Please wait...\");\n\n    PayPeriodHolder pph;\n    if (getSupportActionBar().getSelectedTab().getPosition() == 0) {\n      pph = new PayPeriodHolder(jobId);\n    } else {\n      pph = payHolder;\n    }\n    Email newEmail = new Email(pph, jobId, getApplicationContext());\n\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n    int reportLevel = Integer.valueOf(pref.getString(\"reportLevel\", \"1\"));\n\n    String returnValue;\n    if (reportLevel == 2) {\n      returnValue = newEmail.getBriefView();\n    } else {\n      returnValue = newEmail.getExpandedView();\n    }\n\n    String emailBody = new String(\"Greetings!\\n\\tHere is my time card\\n\");\n    emailBody += returnValue;\n\n    dialog.dismiss();\n\n    // Create email\n    Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);\n    emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, \"Time Card\");\n    emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, emailBody);\n\n    emailIntent.setType(\"message/rfc822\");\n    startActivity(emailIntent);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6144, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "findViewById(*)", "TextView.setText(String)", "setTextColor(*)", "EditText.setText(String)"], "tryExpressionStart": 491, "tryExpressionEnd": 495, "tryBlockStart": 491, "tryBlockEnd": 1380, "catchExpressionStart": 966, "catchExpressionEnd": 986, "catchBlockStart": 966, "catchBlockEnd": 1380, "exceptionHandlingCallStart": [1048, 1103, 1148, 1309, 1352], "exceptionHandlingCallEnd": [1062, 1140, 1301, 1344, 1373], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 584, "focalAPIEnd": 635, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ritnorthstar/Minimap-Client/tree/master/Code/Minimap/src/main/java/com/northstar/minimap/MainActivity.java", "rawCode": "  public void launchSelectionActivity(View view) {\n    Globals state = (Globals) getApplicationContext();\n    Intent selectionIntent = new Intent(this, SelectionActivity.class);\n    EditText ipTextbox = (EditText) findViewById(R.id.server_ip);\n    String serverIP = ipTextbox.getText().toString();\n    String originalIP = serverIP;\n    if (!serverIP.startsWith(\"http://\")) {\n      serverIP = \"http://\" + serverIP;\n    }\n    String ipErrorMessage = \"no error!\";\n    state.log(serverIP);\n\n    try {\n      state.comm.setServerIP(new URL(serverIP));\n\n      SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);\n      SharedPreferences.Editor editor = sharedPref.edit();\n      editor.putString(SettingsActivity.KEY_PREF_IP, originalIP);\n      editor.commit();\n\n      Bundle bundle = new Bundle();\n      bundle.putString(IP_ERROR_MESSAGE, ipErrorMessage);\n      selectionIntent.putExtras(bundle);\n\n      startActivity(selectionIntent);\n    } catch (Exception e) {\n      // Incorrect IP address format\n      ipErrorMessage = e.getMessage();\n\n      TextView errorText = (TextView) findViewById(R.id.ip_error_text_view);\n      errorText.setText(\n          \"\\\"\"\n              + serverIP\n              + \"\\\" isn't a valid IP address.\\nIt should be something like \\\"10.0.2.2:9000\\\"\");\n      errorText.setTextColor(Color.WHITE);\n      ipTextbox.setText(\"\");\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6145, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 116, "focalAPIEnd": 167, "followUpCheck": "!sp.getBoolean(Constants.SETTINGS_SHOW_STATUSBAR,false)", "checkType": "IF", "followUpCheckExpressionStart": 174, "followUpCheckExpressionEnd": 237, "followUpCheckBlockStart": 174, "followUpCheckBlockEnd": 393, "use": ["sp.getBoolean(String,boolean)", "sp.getBoolean(String,boolean)", "sp.getString(String,String)", "sp.getBoolean(String,boolean)", "sp.getInt(String,int)", "sp.getInt(String,int)", "sp.getInt(String,int)"], "useStart": [1346, 1437, 1546, 1613, 1820, 1879, 1939], "useEnd": [1396, 1486, 1596, 1667, 1869, 1929, 1981], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/albb0920/LunaTerm/tree/master/src/tw/loli/lunaTerm/TerminalActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    pref = PreferenceManager.getDefaultSharedPreferences(this);\n\n    if (!pref.getBoolean(Constants.SETTINGS_SHOW_STATUSBAR, false))\n      getWindow()\n          .setFlags(\n              WindowManager.LayoutParams.FLAG_FULLSCREEN,\n              WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n    cm = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);\n\n    setContentView(R.layout.act_terminal);\n    terminalFrame = (FrameLayout) findViewById(R.id.terminalFrame);\n\n    final PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n    this.m_wake_lock =\n        pm.newWakeLock(\n            PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, \"rTerm\");\n    this.m_wake_lock.acquire();\n\n    setVolumeControlStream(AudioManager.STREAM_MUSIC);\n\n    gestureKey = getResources().getStringArray(R.array.gestures_key);\n    gestureDesc = getResources().getStringArray(R.array.gestures_desc);\n\n    for (int i = 0; i < gestureKey.length; i++) {\n      Gesture g = new Gesture(gestureKey[i], gestureDesc[i]);\n      gestureMap.put(g.type, g);\n    }\n\n    GestureView mGestureView = (GestureView) findViewById(R.id.gestureView);\n    mGestureView.setTerminalActivity(this);\n\n    // options\n    termActFlags =\n        (!pref.getBoolean(\"settings_enable_magnifier\", true) ? FLAG_NO_MAGNIFIER : 0)\n            | (pref.getBoolean(\"settings_auto_extractui\", false) ? FLAG_SHOW_EXTRACT_UI : 0)\n            | Integer.parseInt(pref.getString(\"settings_magnifier_behavior\", \"8\"))\n            | (pref.getBoolean(\"settings_magnifier_fullscreen\", true)\n                ? FLAG_MAGNIFIER_FULLSCREEN\n                : 0);\n\n    // This must be AFTER flags are set.\n    mGestureView.setMagnifierParms(\n        pref.getInt(\"settings_magnifier_focus_width\", 30),\n        pref.getInt(\"settings_magnifier_focus_height\", 15),\n        pref.getInt(\"settings_magnifier_zoom\", 20));\n\n    mGestureView.setOnGestureListener(\n        new OnGestureListener() {\n          // TODO: We should make user define this\n          public void onGestureEvent(String gesture) {\n            if (gesture == null || gesture.length() == 0) return;\n\n            if (gesture.equals(\"U\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_UP);\n            } else if (gesture.equals(\"D\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_DOWN);\n            } else if (gesture.equals(\"L\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_LEFT);\n            } else if (gesture.equals(\"R\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_RIGHT);\n            } else if (gesture.equals(\"D,L\")) {\n              pressKey(KeyEvent.KEYCODE_ENTER);\n            } else if (gesture.equals(\"D,R,U\")) {\n              pressKey(KeyEvent.KEYCODE_SPACE);\n            } else if (gesture.equals(\"R,U\")) {\n              // page up\n              pressKey(new byte[] {27, 91, 53, 126});\n            } else if (gesture.equals(\"R,D\")) {\n              // page down\n              pressKey(new byte[] {27, 91, 54, 126});\n            } else if (gesture.equals(\"L,U\")) {\n              // HOME\n              pressKey(new byte[] {27, '[', '1', '~'});\n            } else if (gesture.equals(\"L,D\")) {\n              // END\n              pressKey(new byte[] {27, '[', '4', '~'});\n            } else if (gesture.equals(\"R,D,R\") || gesture.equals(\"R,L,R\")) {\n              // input helper\n              showInputHelper();\n            }\n          }\n\n          public String getGestureText(String gesture) {\n            String desc = \"Unknown Gesture\";\n            Gesture r = gestureMap.get(gesture);\n            if (r != null) desc = r.desc;\n\n            StringBuffer t = new StringBuffer();\n            t.append(\"Gesture:\").append(gesture).append(\" (\").append(desc).append(\")\");\n\n            return t.toString();\n          }\n        });\n\n    if (dbUtils == null) {\n      dbUtils = new DBUtils(this);\n    }\n    functionBtnList = dbUtils.functionsButtonsDelegate.get();\n\n    functionKeyGallery = (Gallery) findViewById(R.id.functionKeyGallery);\n\n    if (functionBtnList.size() > 0) {\n      functionKeyGallery.setAdapter(new FunctionButtonAdapter(this));\n    }\n    functionKeyGallery.setBackgroundColor(Color.alpha(0));\n    functionKeyGallery.setSelection(functionBtnList.size() / 2);\n    functionKeyGallery.setOnItemClickListener(\n        new OnItemClickListener() {\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            String k = functionBtnList.get(position).getKeys();\n            String v = functionBtnList.get(position).getName();\n\n            boolean controlPressed = false;\n            for (char c : k.toCharArray()) {\n              if (c == '^') {\n                controlPressed = true;\n                pressMetaKey(KeyEvent.KEYCODE_DPAD_CENTER);\n              } else {\n                if (controlPressed) {\n                  c = String.valueOf(c).toLowerCase().charAt(0);\n                  KeyEvent[] events = TerminalView.DEFAULT_KEYMAP.getEvents(new char[] {c});\n\n                  pressKey(events[0].getKeyCode());\n                } else {\n                  pressKey(c);\n                }\n                controlPressed = false;\n              }\n            }\n          }\n        });\n\n    mHandler = new RefreshHandler();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6146, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 159, "focalAPIEnd": 213, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/badwtg1111/linphone-android-git/tree/master/src/org/linphone/gcm/GCMService.java", "rawCode": "  @Override\n  protected void onRegistered(Context context, String regId) {\n    Log.d(\"Registered push notification : \" + regId);\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n    SharedPreferences.Editor editor = prefs.edit();\n    editor.putString(context.getString(R.string.push_reg_id_key), regId);\n    editor.commit();\n\n    if (LinphoneManager.isInstanciated()) {\n      try {\n        LinphoneManager.getInstance().initAccounts();\n      } catch (LinphoneCoreException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6147, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 476, "focalAPIEnd": 527, "followUpCheck": "sp.getBoolean(PreferencesActivity.KEY_BULK_MODE,true)", "checkType": "IF", "followUpCheckExpressionStart": 535, "followUpCheckExpressionEnd": 597, "followUpCheckBlockStart": 535, "followUpCheckBlockEnd": 634, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wasn-lab/visual-positioning/tree/master/android/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  @Override\n  public void onSensorChanged(SensorEvent event) {\n    if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {\n      accelerometer_values = (float[]) event.values.clone();\n      calculateAccMagOrientation();\n    } else if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) {\n      magnitude_values = (float[]) event.values.clone();\n    } else if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {\n      gyroFunction(event);\n      SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n      if (prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE, true)) {\n        resetStatusView();\n      }\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6148, "initialization": ["Context context = Context.getApplicationContext()"], "initializationStart": [175], "initializationEnd": [206], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["myUid()", "getSharedPreferences(String,*)"], "tryExpressionStart": 212, "tryExpressionEnd": 216, "tryBlockStart": 212, "tryBlockEnd": 552, "catchExpressionStart": 358, "catchExpressionEnd": 378, "catchBlockStart": 358, "catchBlockEnd": 552, "exceptionHandlingCallStart": [421, 484], "exceptionHandlingCallEnd": [447, 545], "configuration": ["context.getApplicationContext()"], "configurationStart": [175], "configurationEnd": [206], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 238, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [322], "useEnd": [340], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/api/src/com/todoroo/andlib/utility/Preferences.java", "rawCode": "  /** Get preferences object from the context */\n  public static SharedPreferences getPrefs(Context context) {\n    if (preferences != null) return preferences;\n\n    context = context.getApplicationContext();\n    try {\n      preferences = PreferenceManager.getDefaultSharedPreferences(context);\n\n      // try writing\n      preferences.edit().commit();\n\n    } catch (Exception e) {\n      String alternate = \"preferences\" + android.os.Process.myUid(); // $NON-NLS-1$\n      preferences = context.getSharedPreferences(alternate, Context.MODE_PRIVATE);\n    }\n\n    return preferences;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6149, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 99, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [177], "useEnd": [216], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/smitparaggua/thesis-clean/tree/master/AndroidWarrior/src/com/csg/warrior/android/MainActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(this);\n    boolean isFirstRun = sharedPref.getBoolean(\"FIRSTRUN\", true);\n    if (isFirstRun) {\n      String android_id = getMACAddress(this) + getIMEI(this);\n      // TODO: ray sumabog sa nexus 7 code mo :))\n      try {\n\n        android_id = SHA256(android_id);\n        Log.i(\"DAN\", \"First install, generating BLADE UUID\");\n        SharedPreferences.Editor editor = sharedPref.edit();\n        editor.putString(\"BLADE_UUID\", android_id);\n\n        editor.putBoolean(\"FIRSTRUN\", false);\n        editor.commit();\n\n      } catch (Exception e) {\n      }\n      // generate BLADE UUID\n\n    }\n    super.onCreate(savedInstanceState);\n    db = new DatabaseHandler(this);\n    createAddButtonFooter();\n    showMobileKeys();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6150, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 480, "focalAPIEnd": 531, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.registerOnSharedPreferenceChangeListener(*)"], "useStart": [537], "useEnd": [596], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Senseg/Py4A/tree/master/android/PythonForAndroid/src/com/googlecode/pythonforandroid/FileBrowser.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    mBaseDir = getFilesDir();\n    mCurrentDir = mBaseDir;\n    mAdapter = new FileBrowserAdapter(this);\n    mObserver = new FileListObserver();\n    mAdapter.registerDataSetObserver(mObserver);\n    // mConfiguration = ((BaseApplication) getApplication()).getInterpreterConfiguration();\n    mManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);\n    mPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n    mPreferences.registerOnSharedPreferenceChangeListener(this);\n    mPackageManager = getPackageManager();\n    loadPreferences();\n    registerForContextMenu(getListView());\n    updateAndFilterScriptList(mQuery);\n    setListAdapter(mAdapter);\n    handleIntent(getIntent());\n    mPermissionDialog = new Dialog(this);\n    mPermissionDialog.setContentView(R.layout.permissions);\n    mPermissionDialog\n        .findViewById(R.id.btnOk)\n        .setOnClickListener(\n            new View.OnClickListener() {\n              @Override\n              public void onClick(View v) {\n                setPermissions();\n              }\n            });\n    mPermissionDialog\n        .findViewById(R.id.btnCancel)\n        .setOnClickListener(\n            new View.OnClickListener() {\n              @Override\n              public void onClick(View v) {\n                mPermissionDialog.hide();\n              }\n            });\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6151, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 1222, "focalAPIEnd": 1273, "followUpCheck": "sp.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)", "checkType": "IF", "followUpCheckExpressionStart": 1283, "followUpCheckExpressionEnd": 1362, "followUpCheckBlockStart": 1283, "followUpCheckBlockEnd": 1885, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgoines/doweown/tree/master/build/doweown/ios/cordova/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  /**\n   * A valid barcode has been found, so give an indication of success and show the results.\n   *\n   * @param rawResult The contents of the barcode.\n   * @param barcode A greyscale bitmap of the camera data which was decoded.\n   */\n  public void handleDecode(Result rawResult, Bitmap barcode) {\n    inactivityTimer.onActivity();\n    lastResult = rawResult;\n    ResultHandler resultHandler = ResultHandlerFactory.makeResultHandler(this, rawResult);\n\n    boolean fromLiveScan = barcode != null;\n    if (fromLiveScan) {\n      historyManager.addHistoryItem(rawResult, resultHandler);\n      // Then not from history, so beep/vibrate and we have an image to draw on\n      beepManager.playBeepSoundAndVibrate();\n      drawResultPoints(barcode, rawResult);\n    }\n\n    switch (source) {\n      case NATIVE_APP_INTENT:\n      case PRODUCT_SEARCH_LINK:\n        handleDecodeExternally(rawResult, resultHandler, barcode);\n        break;\n      case ZXING_LINK:\n        if (returnUrlTemplate == null) {\n          handleDecodeInternally(rawResult, resultHandler, barcode);\n        } else {\n          handleDecodeExternally(rawResult, resultHandler, barcode);\n        }\n        break;\n      case NONE:\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE, false)) {\n          String message =\n              getResources().getString(fakeR.getId(\"string\", \"msg_bulk_mode_scanned\"))\n                  + \" (\"\n                  + rawResult.getText()\n                  + ')';\n          Toast.makeText(this, message, Toast.LENGTH_SHORT).show();\n          // Wait a moment or else it will scan the same barcode continuously about 3 times\n          restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);\n        } else {\n          handleDecodeInternally(rawResult, resultHandler, barcode);\n        }\n        break;\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6152, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 119, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [196], "useEnd": [248], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mtparet/lo52messaging/tree/master/src/fr/utbm/lo52/messaging/util/Network.java", "rawCode": "  public static InetAddress getWifiAddress(Context mContext) throws IOException {\n\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);\n    boolean isDev = preferences.getBoolean(\"dev_prefs_emulateur\", false);\n\n    if (isDev) {\n      return InetAddress.getByName(\"10.0.2.2\");\n    } else {\n      WifiManager wifi = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);\n      DhcpInfo dhcp = wifi.getDhcpInfo();\n      // handle null somehow\n\n      return InetAddress.getByName(Formatter.formatIpAddress(dhcp.ipAddress));\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6153, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 106, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amanigot/appsevenementandroid/tree/master/src/fr/clivana/lemansnews/c2dm/C2DMRegistrationReceiver.java", "rawCode": "  private void saveRegistrationId(Context context, String registrationId) {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n    Editor edit = prefs.edit();\n    edit.putString(\"authentication\", registrationId);\n    edit.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6154, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 161, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shutoff/car-alarm/tree/master/src/main/java/ru/shutoff/caralarm/Cars.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.cars);\n\n    preferences = PreferenceManager.getDefaultSharedPreferences(this);\n    setupCars();\n\n    lvCars = (ListView) findViewById(R.id.list);\n    lvCars.setAdapter(\n        new BaseAdapter() {\n          @Override\n          public int getCount() {\n            return cars.length;\n          }\n\n          @Override\n          public Object getItem(int position) {\n            return cars[position];\n          }\n\n          @Override\n          public long getItemId(int position) {\n            return position;\n          }\n\n          @Override\n          public View getView(int position, View convertView, ViewGroup parent) {\n            View v = convertView;\n            if (v == null) {\n              LayoutInflater inflater =\n                  (LayoutInflater)\n                      getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n              v = inflater.inflate(R.layout.car_item, null);\n            }\n            TextView tvName = (TextView) v.findViewById(R.id.name);\n            tvName.setText(cars[position].name);\n            tvName.setTag(cars[position].id);\n            tvName.setOnClickListener(\n                new View.OnClickListener() {\n                  @Override\n                  public void onClick(View v) {\n                    setupCar(v.getTag().toString());\n                  }\n                });\n            ImageView ivDelete = (ImageView) v.findViewById(R.id.del);\n            if (cars.length > 1) {\n              ivDelete.setTag(cars[position].id);\n              ivDelete.setOnClickListener(\n                  new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                      deleteCar(v.getTag().toString());\n                    }\n                  });\n              ivDelete.setVisibility(View.VISIBLE);\n            } else {\n              ivDelete.setVisibility(View.GONE);\n            }\n            return v;\n          }\n        });\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6155, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 324, "focalAPIEnd": 378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [324], "useEnd": [394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OrangeTeam/FamilyLink/tree/master/app/src/org/orange/familylink/data/Settings.java", "rawCode": "  /**\n   * 设置用户角色\n   *\n   * @param context\n   * @param value 用户角色。见{@link #PREF_KEY_ROLE}\n   * @return 如果成功保存了新值，返回true\n   */\n  public static boolean setRole(Context context, String value) {\n    if (!\"0\".equals(value) && !\"1\".equals(value))\n      throw new IllegalArgumentException(\"Illegal Argument: \" + value);\n    return PreferenceManager.getDefaultSharedPreferences(context)\n        .edit()\n        .putString(PREF_KEY_ROLE, value)\n        .commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6156, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 266, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(*,boolean)"], "useStart": [367], "useEnd": [480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmobile/themes-platform-packages-apps-Mms/tree/master/src/com/android/mms/transaction/SmsMessageSender.java", "rawCode": "  private boolean queueMessage(long token) throws MmsException {\n    if ((mMessageText == null) || (mNumberOfDests == 0)) {\n      // Don't try to send an empty message.\n      throw new MmsException(\"Null message body or dest.\");\n    }\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);\n    boolean requestDeliveryReport =\n        prefs.getBoolean(\n            MessagingPreferenceActivity.SMS_DELIVERY_REPORT_MODE, DEFAULT_DELIVERY_REPORT_MODE);\n\n    for (int i = 0; i < mNumberOfDests; i++) {\n      try {\n        Sms.addMessageToUri(\n            mContext.getContentResolver(),\n            Uri.parse(\"content://sms/queued\"),\n            mDests[i],\n            mMessageText,\n            null,\n            mTimestamp,\n            true /* read */,\n            requestDeliveryReport,\n            mThreadId);\n      } catch (SQLiteException e) {\n        SqliteWrapper.checkSQLiteException(mContext, e);\n      }\n    }\n    // Notify the SmsReceiverService to send the message out\n    mContext.sendBroadcast(\n        new Intent(SmsReceiverService.ACTION_SEND_MESSAGE, null, mContext, SmsReceiver.class));\n    return false;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6157, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 135, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/feelinglucky/Tracker/tree/master/src/com/gracecode/tracker/service/Recorder.java", "rawCode": "  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    this.context = getApplicationContext();\n    this.sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n\n    this.nameHelper = new ArchiveNameHelper(context);\n    this.helper = new Helper(context);\n    if (serviceBinder == null) {\n      serviceBinder = new ServiceBinder();\n    }\n\n    boolean autoStart = sharedPreferences.getBoolean(Preference.AUTO_START, false);\n    boolean alreadyStarted = (serviceBinder.getStatus() == ServiceBinder.STATUS_RECORDING);\n\n    if (autoStart || alreadyStarted) {\n      if (alreadyStarted) {\n        serviceBinder.resetStatus();\n      }\n      serviceBinder.startRecord();\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6158, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 67, "focalAPIEnd": 121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)"], "useStart": [67], "useEnd": [153], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/le0pard/android_coocoo_afisha/tree/master/src/ua/in/leopard/androidCoocooAfisha/EditPreferences.java", "rawCode": "  public static String getTheaterUrl(Context context) {\n    return PreferenceManager.getDefaultSharedPreferences(context).getString(THEATERS_URL_KEY, \"\");\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6159, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": -1195, "focalAPIEnd": -1131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()", "preferenceManager.getDefaultSharedPreferences(*)", "sp.edit()"], "useStart": [-968, 254, 357], "useEnd": [-959, 318, 366], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mconf/sipdroid/tree/master/src/org/sipdroid/codecs/Codecs.java", "rawCode": "  public static void check() {\n    HashMap<String, String> old = new HashMap<String, String>(codecs.size());\n\n    for (Codec c : codecs) {\n      c.update();\n      old.put(c.name(), c.getValue());\n      if (!c.isLoaded()) {\n        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(Receiver.mContext);\n        SharedPreferences.Editor e = sp.edit();\n\n        e.putString(c.key(), \"never\");\n        e.commit();\n      }\n    }\n\n    for (Codec c : codecs)\n      if (!old.get(c.name()).equals(\"never\")) {\n        c.init();\n        if (c.isLoaded()) {\n          SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(Receiver.mContext);\n          SharedPreferences.Editor e = sp.edit();\n\n          e.putString(c.key(), old.get(c.name()));\n          e.commit();\n          c.init();\n        } else c.fail();\n      }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6160, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 896, "focalAPIEnd": 947, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [984], "useEnd": [1032], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cadavre/android_packages_apps_Mms/tree/master/src/com/android/mms/ui/ConversationList.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);\n    setContentView(R.layout.conversation_list_screen);\n\n    mQueryHandler = new ThreadListQueryHandler(getContentResolver());\n\n    ListView listView = getListView();\n    listView.setOnCreateContextMenuListener(mConvListOnCreateContextMenuListener);\n    listView.setOnKeyListener(mThreadListKeyListener);\n    listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);\n    listView.setMultiChoiceModeListener(new ModeCallback());\n\n    // Tell the list view which view to display when the list is empty\n    View emptyView = findViewById(R.id.empty);\n    listView.setEmptyView(emptyView);\n\n    initListAdapter();\n\n    setupActionBar();\n\n    mTitle = getString(R.string.app_label);\n\n    mHandler = new Handler();\n    mPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n    boolean checkedMessageLimits = mPrefs.getBoolean(CHECKED_MESSAGE_LIMITS, false);\n    if (DEBUG) Log.v(TAG, \"checkedMessageLimits: \" + checkedMessageLimits);\n    if (!checkedMessageLimits || DEBUG) {\n      runOneTimeStorageLimitCheckForLegacyMessages();\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6161, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 96, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(String,int)", "sp.edit()"], "useStart": [187, 304], "useEnd": [223, 315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Mms/tree/master/src/com/android/mms/util/CacheManager.java", "rawCode": "  private static void removeOldFilesIfNecessary(Context context) {\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    int n = 0;\n    try {\n      n = pref.getInt(KEY_CACHE_UP_TO_DATE, 0);\n    } catch (Throwable t) {\n      // ignore.\n    }\n    if (n != 0) return;\n    pref.edit().putInt(KEY_CACHE_UP_TO_DATE, 1).commit();\n\n    clear(context);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6162, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 110, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(*,*)", "loadChannels(sp)"], "useStart": [191, 315], "useEnd": [241, 346], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KalyanAkella/blipit/tree/master/android/BlipItMain/src/com/thoughtworks/blipit/activities/BlipItPrefActivity.java", "rawCode": "  @Override\n  protected void onStart() {\n    super.onStart();\n    final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n    String allChannelsStr = sharedPreferences.getString(AD_CHANNELS_KEY, null);\n    if (allChannelsStr == null || allChannelsStr.length() == 0) {\n      loadChannels(sharedPreferences);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6163, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 138, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dennischen/daily-money/tree/master/dailymoney/src/com/bottleworks/dailymoney/context/Contexts.java", "rawCode": "  public void setWorkingBookId(int id) {\n    if (id < 0) {\n      id = 0;\n    }\n    pref_workingBookId = id;\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(appContext);\n    SharedPreferences.Editor editor = prefs.edit();\n    editor.putInt(Constants.PREFS_WORKING_BOOK_ID, id);\n    editor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6164, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 266, "focalAPIEnd": 331, "followUpCheck": "sp.getBoolean(\"autologin\",false)", "checkType": "IF", "followUpCheckExpressionStart": 1487, "followUpCheckExpressionEnd": 1531, "followUpCheckBlockStart": 1487, "followUpCheckBlockEnd": 1567, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mastersofandroid/LoadSensing/tree/master/LoadSensingApp/src/com/loadsensing/app/LoginActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);\n    super.onCreate(savedInstanceState);\n\n    // load up the layout\n    setContentView(R.layout.login);\n\n    SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(LoginActivity.this);\n\n    // Set \"Remember username and password\" 1/0 if checked/unchecked\n    CheckBox rememberUserPassword = (CheckBox) findViewById(R.id.remember_user_password);\n    rememberUserPassword.setOnClickListener(\n        new View.OnClickListener() {\n          public void onClick(View v) {\n            if (getSharedPreference(\"saveusername\").equals(\"1\")) {\n              setSharedPreference(\"saveusername\", \"0\");\n            } else {\n              setSharedPreference(\"saveusername\", \"1\");\n            }\n          }\n        });\n\n    // Restore preferences if \"Remember username and password\" is checked\n    if (getSharedPreference(\"saveusername\").equals(\"1\")) {\n\n      rememberUserPassword.setChecked(true);\n      EditText editText = (EditText) findViewById(R.id.txt_username);\n      editText.setText(getSharedPreference(\"login\"));\n      editText = (EditText) findViewById(R.id.txt_password);\n      editText.setText(getSharedPreference(\"password\"));\n    }\n\n    // get the button resource in the xml file and assign it to a local\n    // variable of type Button\n    Button login = (Button) findViewById(R.id.login_button);\n    login.setOnClickListener(this);\n\n    if (settings.getBoolean(\"autologin\", false)) {\n      login.performClick();\n    }\n\n    // Delete session\n    setSharedPreference(\"session\", \"\");\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6165, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 319, "focalAPIEnd": 370, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [319], "useEnd": [386], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/EditOperationActivity.java", "rawCode": "  private void insertOperation() {\n    OperationDataSource dataSource = new OperationDataSource(this);\n    dataSource.insert(\n        date,\n        desc,\n        CurrencyUtils.getDouble(value),\n        opType,\n        event.getId(),\n        categoryId.getId(),\n        currencyId.getId(),\n        placeId.getId());\n    PreferenceManager.getDefaultSharedPreferences(this)\n        .edit()\n        .putLong(SettingsFragment.CURRENT_EVENT_MODE_EVENT_ID, event.getId())\n        .commit();\n    Toast.makeText(getApplicationContext(), R.string.op_created, Toast.LENGTH_SHORT).show();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6166, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 99, "focalAPIEnd": 154, "followUpCheck": "!TextUtils.isEmpty(sp)", "checkType": "IF", "followUpCheckExpressionStart": 222, "followUpCheckExpressionEnd": 264, "followUpCheckBlockStart": 222, "followUpCheckBlockEnd": 358, "use": ["parse(sp)"], "useStart": [294], "useEnd": [322], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BoD/bikey/tree/master/handheld/src/main/java/org/jraf/android/bikey/backend/ride/RideManager.java", "rawCode": "  @WorkerThread\n  @Nullable\n  public Uri getCurrentRide() {\n    String currentRideUriStr =\n        PreferenceManager.getDefaultSharedPreferences(mContext)\n            .getString(Constants.PREF_CURRENT_RIDE_URI, null);\n    if (!TextUtils.isEmpty(currentRideUriStr)) {\n      Uri currentRideUri = Uri.parse(currentRideUriStr);\n      return currentRideUri;\n    }\n    return null;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6167, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 80, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jamesemorgan/AndroidWeatherSlider/tree/master/src/main/java/com/morgan/design/android/util/PreferenceUtils.java", "rawCode": "  private static SharedPreferences getPrefs(final Context context) {\n    return PreferenceManager.getDefaultSharedPreferences(context);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6168, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 123, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nolanlawson/KeepScore/tree/master/KeepScore/src/com/nolanlawson/keepscore/helper/PreferenceHelper.java", "rawCode": "  public static void setBooleanPreference(int resId, boolean value, Context context) {\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n    Editor editor = sharedPrefs.edit();\n    editor.putBoolean(context.getString(resId), value);\n    editor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6169, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 85, "focalAPIEnd": 136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [168], "useEnd": [210], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gschoeni/csci498/tree/master/LunchList/src/apt/tutorial/OnAlarmReceiver.java", "rawCode": "  public void onReceive(Context ctxt, Intent intent) {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctxt);\n    boolean useNotification = prefs.getBoolean(\"use_notification\", true);\n\n    if (useNotification) {\n      NotificationManager manager =\n          (NotificationManager) ctxt.getSystemService(Context.NOTIFICATION_SERVICE);\n      Notification note =\n          new Notification(\n              R.drawable.stat_notify_chat, \"It's time for lunch!\", System.currentTimeMillis());\n      PendingIntent i =\n          PendingIntent.getActivity(ctxt, 0, new Intent(ctxt, AlarmActivity.class), 0);\n      note.setLatestEventInfo(ctxt, \"LunchList\", \"It's time for lunch! Aren't you hungry?\", i);\n      note.flags |= Notification.FLAG_AUTO_CANCEL;\n\n      String sound = prefs.getString(\"alarm_ringtone\", null);\n\n      if (sound != null) {\n        note.sound = Uri.parse(sound);\n        note.audioStreamType = AudioManager.STREAM_ALARM;\n      }\n\n      manager.notify(NOTIFY_ME_ID, note);\n    } else {\n      Intent i = new Intent(ctxt, AlarmActivity.class);\n\n      i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n      ctxt.startActivity(i);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6170, "initialization": ["Context context = Instrumentation.getTargetContext()"], "initializationStart": [287], "initializationEnd": [321], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 361, "focalAPIEnd": 415, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.putString(*,String)", "sp.putString(*,String)", "sp.Editor.commit()"], "useStart": [428, 502, 574], "useEnd": [496, 568, 589], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMPUT301W13T06/classproject/tree/master/integration-tests/src/main/java/com/cmput301/recipebot/test/MainActivityTest.java", "rawCode": "  /**\n   * Set up some Preferences for testing. {@link MainActivity} checks these on it's start, and\n   * launches {@link com.cmput301.recipebot.ui.GetUserActivity} if doesn't find these.\n   */\n  private void setupTestPreferences(Instrumentation instrumentation) {\n    Context context = instrumentation.getTargetContext();\n    SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();\n    editor.putString(AppConstants.KEY_USER_EMAIL, \"f2prateek@gmail.com\");\n    editor.putString(AppConstants.KEY_USER_NAME, \"Prateek Srivastava\");\n    editor.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6171, "initialization": ["Context context = getStaticApplicationContext()"], "initializationStart": [56], "initializationEnd": [99], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 137, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(*,*)", "sp.getString(*,*)"], "useStart": [269, 340], "useEnd": [315, 393], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hellfyre/Yet-Another-Opening-Hours-App/tree/master/src/org/yaoha/ApiConnector.java", "rawCode": "  private static void setConsumer() {\n    Context ctx = YaohaActivity.getStaticApplicationContext();\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(ctx);\n    oauthToken = oauthTokenSecret = null;\n    consumer = null;\n    oauthToken = preferences.getString(OAuth.OAUTH_TOKEN, null);\n    oauthTokenSecret = preferences.getString(OAuth.OAUTH_TOKEN_SECRET, null);\n    if (oauthToken != null && oauthTokenSecret != null) {\n      consumer = new CommonsHttpOAuthConsumer(C.CONSUMER_KEY, C.CONSUMER_SECRET);\n      consumer.setTokenWithSecret(oauthToken, oauthTokenSecret);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6172, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 825, "focalAPIEnd": 876, "followUpCheck": "sp.getBoolean(\"notificationVibrate\",false)", "checkType": "IF", "followUpCheckExpressionStart": 882, "followUpCheckExpressionEnd": 933, "followUpCheckBlockStart": 882, "followUpCheckBlockEnd": 991, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wnayes/event-spark-android/tree/master/app/src/com/appchallenge/eventspark/NotificationService.java", "rawCode": "  /**\n   * Creates our service notifications from a list of new events.\n   *\n   * @param newEvents Events the user has not seen before and should be notified about.\n   * @return A builder for our notification that can be given to the Android system.\n   */\n  private NotificationCompat.Builder buildNotification(ArrayList<Event> newEvents) {\n    NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this);\n    mBuilder.setSmallIcon(R.drawable.notification_logo);\n    String title =\n        getResources()\n            .getQuantityString(R.plurals.new_events_nearby, newEvents.size(), newEvents.size());\n    mBuilder.setContentTitle(title);\n    mBuilder.setContentText(newEvents.get(0).getTitle());\n    mBuilder.setAutoCancel(true);\n\n    // Enable vibrate if the user requested it.\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    if (prefs.getBoolean(\"notificationVibrate\", false))\n      mBuilder.setDefaults(Notification.DEFAULT_VIBRATE);\n\n    // Create an explicit intent.\n    Intent resultIntent;\n\n    // Create a \"big view\" style that shows the names of the first few events when expanded (>4.1\n    // only)\n    if (newEvents.size() > 1) {\n      NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();\n      inboxStyle.setBigContentTitle(title);\n      for (int i = 0; i < newEvents.size(); ++i) inboxStyle.addLine(newEvents.get(i).getTitle());\n      mBuilder.setStyle(inboxStyle);\n\n      // With multiple events, send the user to the map.\n      resultIntent = new Intent(this, EventViewer.class);\n      resultIntent.putParcelableArrayListExtra(\"newEvents\", newEvents);\n    } else {\n      // A single event notification should send the user to the event details page directly.\n      resultIntent = new Intent(this, EventDetails.class);\n      resultIntent.putExtra(\"event\", newEvents.get(0));\n      resultIntent.putExtra(\"userLocation\", this.userLocation);\n    }\n\n    // The stack builder object will contain an artificial back stack for the started Activity.\n    // This ensures that navigating backward from the Activity leads out of your application to the\n    // Home screen.\n    TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);\n\n    // Adds the back stack for the Intent (but not the Intent itself)\n    stackBuilder.addParentStack(newEvents.size() > 1 ? EventViewer.class : EventDetails.class);\n    // Adds the Intent that starts the Activity to the top of the stack\n    stackBuilder.addNextIntent(resultIntent);\n    PendingIntent resultPendingIntent =\n        stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);\n    mBuilder.setContentIntent(resultPendingIntent);\n    return mBuilder;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6173, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 90, "focalAPIEnd": 141, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)"], "useStart": [227], "useEnd": [274], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dennischen/daily-money/tree/master/dailymoney/src/com/bottleworks/dailymoney/ui/PrefsActivity.java", "rawCode": "  private void setPrefSummary(String prefKey) {\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n    Preference p = findPreference(prefKey);\n    if (p != null) {\n      p.setSummary(sharedPreferences.getString(prefKey, \"Unknown\"));\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6174, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 185, "focalAPIEnd": 236, "followUpCheck": "sp.getString(\"drawer_animation\",\"1\").equals(\"1\")", "checkType": "IF", "followUpCheckExpressionStart": 2885, "followUpCheckExpressionEnd": 2948, "followUpCheckBlockStart": 2885, "followUpCheckBlockEnd": 3869, "use": ["sp.getString(String,String)", "sp.getString(String,String)"], "useStart": [300, 385], "useEnd": [341, 429], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nowlauncher/now-launcher/tree/master/NowLauncher/src/com/nowlauncher/nowlauncher/MainActivity.java", "rawCode": "  public void CreateViewsscroll() {\n\n    // Divide la lista delle applicazioni in altri array, creando la lista delle app delle varie\n    // pagine\n\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n    double numappxpage;\n    int drawerrows = Integer.parseInt(sharedPrefs.getString(\"drawer_rows\", \"4\"));\n    int drawercolumns = Integer.parseInt(sharedPrefs.getString(\"drawer_coloums\", \"4\"));\n    numappxpage = drawerrows * drawercolumns;\n    int npage = (int) StrictMath.ceil(mApplications.size() / numappxpage);\n\n    // Split the mApplications array into others array. Each array correspond to the application\n    // array in each drawer page\n    splittedarray = new ArrayList[npage];\n    for (int i = 0; i < npage; i++) {\n      splittedarray[i] = new ArrayList();\n    }\n    for (int page = 0; page < npage; page++) {\n      for (int app = 0; app < numappxpage; app++) {\n        if (page * numappxpage + app < mApplications.size())\n          splittedarray[page].add(mApplications.get(page * (int) numappxpage + app));\n      }\n    }\n\n    findViewById(R.id.drawerlist).setVisibility(View.GONE);\n    findViewById(R.id.pager).setVisibility(View.VISIBLE);\n\n    // Create an array of GridView (drawer page) and populate it with slittedarray\n    applicationsAdaptersArray = new ArrayList<ApplicationsAdapter>();\n    GridView[] gridViewsApps = new GridView[npage];\n    for (int app = 0; app < gridViewsApps.length; app++) {\n      gridViewsApps[app] = new GridView(this);\n      gridViewsApps[app].setNumColumns(drawercolumns);\n      gridViewsApps[app].setStretchMode(GridView.STRETCH_COLUMN_WIDTH);\n      final ApplicationsAdapter applicationsAdapterHorizontal =\n          new ApplicationsAdapter(splittedarray[app], gridViewsApps[app], this, drawerrows);\n      applicationsAdaptersArray.add(applicationsAdapterHorizontal);\n      gridViewsApps[app].setAdapter(applicationsAdapterHorizontal);\n      gridViewsApps[app].setOnItemClickListener(\n          new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {\n              Intent intent = applicationsAdapterHorizontal.getIntent(position);\n              startActivity(intent);\n            }\n          });\n      gridViewsApps[app].setTag(\"HorizontalDrawerTag\");\n      registerForContextMenu(gridViewsApps[app]);\n    }\n\n    // Set the adapter to the viewPager\n    MyPagerAdapter adapter = new MyPagerAdapter(gridViewsApps);\n    myPager = (ViewPagerAnim) findViewById(R.id.pager);\n    myPager.setAdapter(adapter);\n    myPager.setCurrentItem(0);\n\n    // Set the underlinePageIndicator to the viewPager of the drawer\n    UnderlinePageIndicator titleIndicator = (UnderlinePageIndicator) findViewById(R.id.titles);\n    titleIndicator.setViewPager(myPager);\n    // Check preferences and set the animation\n    if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"1\")) {\n      myPager.setPageTransformer(true, null);\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"2\")) {\n      myPager.setPageTransformer(true, new DepthPageTransformer());\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"3\")) {\n      myPager.setPageTransformer(true, new ZoomOutPageTransformer());\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"4\")) {\n      myPager.setPageTransformer(true, new CubeTransformer(true));\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"5\")) {\n      myPager.setPageTransformer(true, new CubeTransformer(false));\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"6\")) {\n      myPager.setPageTransformer(true, new RotateTransformer());\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"7\")) {\n      myPager.setPageTransformer(true, new RotateInTransformer());\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6175, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 628, "focalAPIEnd": 679, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [719], "useEnd": [730], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/onyx-intl/orion-viewer/tree/master/orion-viewer/src/universe/constellation/orion/viewer/prefs/OrionTapActivity.java", "rawCode": "  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    if (resultCode == Activity.RESULT_OK) {\n      if (active_view != null) {\n        TextView view =\n            (TextView) active_view.findViewById(isLong ? R.id.longClick : R.id.shortClick);\n        int code = data.getIntExtra(\"code\", 0);\n        Action action = Action.getAction(code);\n        myCode[index][isLong ? 1 : 0] = action.getCode();\n        view.setText(getResources().getString(action.getName()));\n\n        int i = index / 3;\n        int j = index % 3;\n        Common.d(index + \" \" + i + \" \" + j);\n        SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n        SharedPreferences.Editor ed = pref.edit();\n        ed.putInt(getKey(i, j, isLong), action.getCode());\n        ed.commit();\n      }\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6176, "initialization": ["Context context = getApplicationContext()"], "initializationStart": [1939], "initializationEnd": [1962], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 2199, "focalAPIEnd": 2269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,*)"], "useStart": [2491], "useEnd": [2558], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skullone/android_firewall/tree/master/src/com/jtschohl/androidfirewall/MainActivity.java", "rawCode": "  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode == RESULT_OK && Api.CUSTOM_SCRIPT_MSG.equals(data.getAction())) {\n      final String script = data.getStringExtra(Api.SCRIPT_EXTRA);\n      final String script2 = data.getStringExtra(Api.SCRIPT2_EXTRA);\n      setCustomScript(script, script2);\n    }\n    if (requestCode == IMPORT_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_import_successfully, Toast.LENGTH_SHORT).show();\n      Api.applications = null;\n      showOrLoadApplications();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      toggleUserSettings(getApplicationContext());\n    }\n    if (requestCode == EXPORT_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_export_successfully, Toast.LENGTH_SHORT).show();\n      String exportedName = data.getStringExtra(Api.EXPORT_EXTRA);\n      Api.exportRulesToFile(MainActivity.this, exportedName);\n    }\n    if (requestCode == MANAGE_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_file_deleted, Toast.LENGTH_SHORT).show();\n      manageRuleFiles();\n    }\n    if (requestCode == LOAD_PROFILE_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.profileapplied, Toast.LENGTH_SHORT).show();\n      Api.applications = null;\n      showOrLoadApplications();\n      refreshHeader();\n      refreshSpinner();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      toggleUserSettings(getApplicationContext());\n      if (Api.isEnabled(getApplicationContext())) {\n        Api.applyIptablesRules(getApplicationContext(), true);\n      } else {\n        Api.saveRules(getApplicationContext());\n      }\n    }\n    if (requestCode == EDIT_PROFILE_REQUEST && resultCode == RESULT_OK) {\n      updateSpinner();\n    }\n    if (requestCode == USER_SETTINGS_REQUEST && resultCode == RESULT_OK) {\n      SharedPreferences prefs =\n          PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n      Intent intent = getIntent();\n      finish();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      String language = prefs.getString(\"locale\", Locale.getDefault().getDisplayLanguage());\n      Api.changeLanguage(getApplicationContext(), language);\n      startActivity(intent);\n    }\n    // for debugging purposes\n    // if (resultCode == RESULT_CANCELED)\n    // Toast.makeText(this, \"Operation Canceled\",\n    // Toast.LENGTH_SHORT).show();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6177, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 328, "focalAPIEnd": 379, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["preferenceManager.setDefaultValues(*,*,boolean)"], "useStart": [533], "useEnd": [598], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hach-que/ConnectBot/tree/master/src/org/connectbot/SettingsActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    try {\n      addPreferencesFromResource(R.xml.preferences);\n    } catch (ClassCastException e) {\n      Log.e(TAG, \"Shared preferences are corrupt! Resetting to default values.\");\n\n      SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);\n\n      // Blow away all the preferences\n      SharedPreferences.Editor editor = preferences.edit();\n      editor.clear();\n      editor.commit();\n\n      PreferenceManager.setDefaultValues(this, R.xml.preferences, true);\n\n      // Since they were able to get to the Settings activity, they already agreed to the EULA\n      editor = preferences.edit();\n      editor.putBoolean(PreferenceConstants.EULA, true);\n      editor.commit();\n\n      addPreferencesFromResource(R.xml.preferences);\n    }\n\n    // TODO: add parse checking here to make sure we have integer value for scrollback\n\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6178, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 122, "focalAPIEnd": 176, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.edit()"], "useStart": [122], "useEnd": [192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ax003d/sichu_android/tree/master/sichu/src/com/ax003d/sichu/utils/Preferences.java", "rawCode": "  public static void setSyncID(Context context, String category, int id) {\n    Log.d(\"sync_id\", category + \" \" + id);\n    PreferenceManager.getDefaultSharedPreferences(context)\n        .edit()\n        .putLong(\"sync_id_\" + category, id)\n        .commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6179, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 450, "focalAPIEnd": 501, "followUpCheck": "sp.getBoolean(\"rabbit reminder alert service\",true)", "checkType": "IF", "followUpCheckExpressionStart": 507, "followUpCheckExpressionEnd": 567, "followUpCheckBlockStart": 507, "followUpCheckBlockEnd": 633, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lminaudier-pyxis/Rabbit-Reminder/tree/master/Rabbit Reminder/src/com/pyxistech/android/rabbitreminder/activities/AlertListActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.alert_list);\n\n    Resources res = getResources();\n    getListView().setCacheColorHint(0);\n    getListView().setDivider(res.getDrawable(android.R.drawable.divider_horizontal_bright));\n\n    AlertListAdapter adapter = new AlertListAdapter(this, new AlertList());\n\n    refreshList(adapter);\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    if (prefs.getBoolean(\"rabbit reminder alert service\", true)) {\n      startService(new Intent(this, AlertService.class));\n    }\n\n    setListAdapter(adapter);\n    registerForContextMenu(getListView());\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6180, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 329, "focalAPIEnd": 380, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [423], "useEnd": [466], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/standolson/WordPlayAssistant/tree/master/WordPlayAdvLib/src/com/ppp/wordplayadvlib/activities/WordPlayActivity.java", "rawCode": "  @Override\n  public void onActivityResult(int requestCode, int resultCode, Intent data) {\n\n    switch (requestCode) {\n      case UserPrefsActivity:\n\n        // We've returned from setting preferences. Apply the only one we\n        // know about now by adding or removing the notification icon.\n        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        boolean newNotificationSetting = prefs.getBoolean(\"notification_bar\", false);\n        if (newNotificationSetting != notificationIconEnabled) {\n          if (newNotificationSetting) {\n            Intent intent = new Intent(this, getClass());\n            addRestartNotification(intent);\n          } else removeNotification();\n          notificationIconEnabled = newNotificationSetting;\n        }\n        break;\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6181, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 200, "focalAPIEnd": 254, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(*,boolean)", "sp.getBoolean(*,boolean)", "sp.getString(*,*)"], "useStart": [279, 2607, 2859], "useEnd": [348, 2737, 2928], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnlk2-custom/android_packages_apps_mms/tree/master/src/com/android/mms/transaction/MessagingNotification.java", "rawCode": "  private static void notifyFailed(\n      Context context, boolean isDownload, long threadId, boolean noisy) {\n    // TODO factor out common code for creating notifications\n    SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);\n\n    boolean enabled = sp.getBoolean(MessagingPreferenceActivity.NOTIFICATION_ENABLED, true);\n    if (!enabled) {\n      return;\n    }\n\n    NotificationManager nm =\n        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n\n    // Strategy:\n    // a. If there is a single failure notification, tapping on the notification goes\n    // to the compose view.\n    // b. If there are two failure it stays in the thread view. Selecting one undelivered\n    // thread will dismiss one undelivered notification but will still display the\n    // notification.If you select the 2nd undelivered one it will dismiss the notification.\n\n    long[] msgThreadId = {0};\n    int totalFailedCount = getUndeliveredMessageCount(context, msgThreadId);\n\n    Intent failedIntent;\n    Notification notification = new Notification();\n    String title;\n    String description;\n    if (totalFailedCount > 1) {\n      description =\n          context.getString(\n              R.string.notification_failed_multiple, Integer.toString(totalFailedCount));\n      title = context.getString(R.string.notification_failed_multiple_title);\n\n      failedIntent = new Intent(context, ConversationList.class);\n    } else {\n      title =\n          isDownload\n              ? context.getString(R.string.message_download_failed_title)\n              : context.getString(R.string.message_send_failed_title);\n\n      description = context.getString(R.string.message_failed_body);\n      failedIntent = new Intent(context, ComposeMessageActivity.class);\n      if (isDownload) {\n        // When isDownload is true, the valid threadId is passed into this function.\n        failedIntent.putExtra(\"failed_download_flag\", true);\n      } else {\n        threadId = (msgThreadId[0] != 0 ? msgThreadId[0] : 0);\n        failedIntent.putExtra(\"undelivered_flag\", true);\n      }\n      failedIntent.putExtra(\"thread_id\", threadId);\n    }\n\n    failedIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    PendingIntent pendingIntent =\n        PendingIntent.getActivity(context, 0, failedIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n\n    notification.icon = R.drawable.stat_notify_sms_failed;\n\n    notification.tickerText = title;\n\n    notification.setLatestEventInfo(context, title, description, pendingIntent);\n\n    if (noisy) {\n      boolean vibrate =\n          sp.getBoolean(\n              MessagingPreferenceActivity.NOTIFICATION_VIBRATE,\n              false /* don't vibrate by default */);\n      if (vibrate) {\n        notification.defaults |= Notification.DEFAULT_VIBRATE;\n      }\n\n      String ringtoneStr = sp.getString(MessagingPreferenceActivity.NOTIFICATION_RINGTONE, null);\n      notification.sound = TextUtils.isEmpty(ringtoneStr) ? null : Uri.parse(ringtoneStr);\n    }\n\n    if (isDownload) {\n      nm.notify(DOWNLOAD_FAILED_NOTIFICATION_ID, notification);\n    } else {\n      nm.notify(MESSAGE_FAILED_NOTIFICATION_ID, notification);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6182, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 291, "focalAPIEnd": 345, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)", "sp.getInt(String,*)"], "useStart": [372, 599], "useEnd": [418, 659], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ktoonsez/AOKP-I777/tree/master/packages/apps/ROMControl/src/com/aokp/romcontrol/fragments/GammaTuningPreference.java", "rawCode": "  /**\n   * Restore screen color tuning from SharedPreferences. (Write to kernel.)\n   *\n   * @param context The context to read the SharedPreferences from\n   */\n  public static void restore(Context context) {\n    if (!isSupported()) {\n      return;\n    }\n\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);\n    Boolean bFirstTime = sharedPrefs.getBoolean(\"FirstTimeGamma\", true);\n    for (int i = 0; i < SEEK_BARS.length; i++) {\n      String filePath = SEEK_BARS[i].filePath;\n      String sDefaultValue = KernelUtils.readOneLine(filePath);\n      int iValue = sharedPrefs.getInt(filePath, Integer.valueOf(sDefaultValue));\n      if (bFirstTime) KernelUtils.writeValue(filePath, \"0\");\n      else KernelUtils.writeValue(filePath, String.valueOf((long) iValue));\n    }\n    if (bFirstTime) {\n      SharedPreferences.Editor editor = sharedPrefs.edit();\n      editor.putBoolean(\"FirstTimeGamma\", false);\n      editor.commit();\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6183, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 108, "focalAPIEnd": 162, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.contains(*)"], "useStart": [176], "useEnd": [239], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nolanlawson/AppTracker/tree/master/AppTracker/src/com/nolanlawson/apptracker/helper/PreferenceHelper.java", "rawCode": "  public static boolean checkIfAppExists(Context context, int appWidgetId) {\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n    return prefs.contains(getSortTypePreferenceName(context, appWidgetId));\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6184, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 1556, "focalAPIEnd": 1607, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)"], "useStart": [1642], "useEnd": [1695], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kansas9000/myvlc/tree/master/vlc-android/src/org/videolan/vlc/AudioService.java", "rawCode": "  @Override\n  public void onCreate() {\n    super.onCreate();\n\n    // Get libVLC instance\n    try {\n      mLibVLC = Util.getLibVlcInstance();\n    } catch (LibVlcException e) {\n      e.printStackTrace();\n    }\n\n    mCallback = new HashMap<IAudioServiceCallback, Integer>();\n    mMediaList = new ArrayList<Media>();\n    mPrevious = new Stack<Media>();\n    mEventHandler = EventHandler.getInstance();\n    mRemoteControlClientReceiverComponent =\n        new ComponentName(getPackageName(), RemoteControlClientReceiver.class.getName());\n\n    // Make sure the audio player will acquire a wake-lock while playing. If we don't do\n    // that, the CPU might go to sleep while the song is playing, causing playback to stop.\n    PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n    mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);\n\n    IntentFilter filter = new IntentFilter();\n    filter.setPriority(Integer.MAX_VALUE);\n    filter.addAction(ACTION_REMOTE_BACKWARD);\n    filter.addAction(ACTION_REMOTE_PLAYPAUSE);\n    filter.addAction(ACTION_REMOTE_PLAY);\n    filter.addAction(ACTION_REMOTE_PAUSE);\n    filter.addAction(ACTION_REMOTE_STOP);\n    filter.addAction(ACTION_REMOTE_FORWARD);\n    filter.addAction(ACTION_REMOTE_LAST_PLAYLIST);\n    filter.addAction(ACTION_WIDGET_INIT);\n    filter.addAction(Intent.ACTION_HEADSET_PLUG);\n    filter.addAction(AudioManager.ACTION_AUDIO_BECOMING_NOISY);\n    filter.addAction(VLCApplication.SLEEP_INTENT);\n    registerReceiver(serviceReceiver, filter);\n\n    final SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n    boolean stealRemoteControl = pref.getBoolean(\"enable_steal_remote_control\", false);\n\n    if (!Util.isFroyoOrLater() || stealRemoteControl) {\n      /* Backward compatibility for API 7 */\n      filter = new IntentFilter();\n      if (stealRemoteControl) filter.setPriority(Integer.MAX_VALUE);\n      filter.addAction(Intent.ACTION_MEDIA_BUTTON);\n      mRemoteControlClientReceiver = new RemoteControlClientReceiver();\n      registerReceiver(mRemoteControlClientReceiver, filter);\n    }\n\n    AudioUtil.prepareCacheFolder(this);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6185, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 129, "focalAPIEnd": 180, "followUpCheck": "!sp.getBoolean(\"INITIALIZED\",false)", "checkType": "IF", "followUpCheckExpressionStart": 186, "followUpCheckExpressionEnd": 230, "followUpCheckBlockStart": 186, "followUpCheckBlockEnd": 387, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/albb0920/LunaTerm/tree/master/src/tw/loli/lunaTerm/AddressBookActivity.java", "rawCode": "  @Override\n  public void onResume() {\n    super.onResume();\n\n    if (dbUtils == null) dbUtils = new DBUtils(this);\n\n    prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    if (!prefs.getBoolean(\"INITIALIZED\", false)) {\n      initHost();\n      initFunctionBtns();\n      Editor editor = prefs.edit();\n      editor.putBoolean(\"INITIALIZED\", true);\n      editor.commit();\n    }\n\n    this.getListView()\n        .setOnItemClickListener(\n            new OnItemClickListener() {\n              public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                Host host = getRealHost(position);\n                Log.i(TAG, host.getHost());\n                connect(host);\n              }\n            });\n    this.registerForContextMenu(this.getListView());\n\n    update();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6186, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 155, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(String,String)", "preferenceManager.getDefaultSharedPreferences(*)", "preferenceManager.getDefaultSharedPreferences(*)"], "useStart": [227, 494, 1033], "useEnd": [262, 545, 1084], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asksven/BetterWifiOnOff/tree/master/BetterWifiOnOff/src/com/asksven/betterwifionoff/PreferencesActivity.java", "rawCode": "  /** @see android.app.Activity#onCreate(Bundle) */\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n    String theme = sharedPrefs.getString(\"theme\", \"1\");\n    if (theme.equals(\"1\")) {\n      this.setTheme(R.style.Theme_Sherlock);\n    } else {\n      this.setTheme(R.style.Theme_Sherlock_Light_DarkActionBar);\n    }\n\n    super.onCreate(savedInstanceState);\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    if (prefs.getBoolean(\"expert_mode\", false)) {\n      addPreferencesFromResource(R.xml.advanced_preferences);\n    } else {\n      addPreferencesFromResource(R.xml.preferences);\n    }\n\n    if (!Configuration.isFullVersion(this)) {\n      try {\n        // sample action: findPreference(\"my-pref-here\").setEnabled(false);\n      } catch (Exception e) {\n        Log.e(TAG, \"An error occured while loading the preferences.\");\n      }\n    }\n    // Set up a listener whenever a key changes\n    PreferenceManager.getDefaultSharedPreferences(this)\n        .registerOnSharedPreferenceChangeListener(this);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6187, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 81, "focalAPIEnd": 136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["isEmpty(sp)", "parse(sp)"], "useStart": [304, 335], "useEnd": [332, 355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mconf/sipdroid/tree/master/src/org/sipdroid/sipua/ui/SipRingtonePreference.java", "rawCode": "  @Override\n  protected Uri onRestoreRingtone() {\n    String uriString =\n        PreferenceManager.getDefaultSharedPreferences(mContext)\n            .getString(\n                org.sipdroid.sipua.ui.Settings.PREF_SIPRINGTONE,\n                Settings.System.DEFAULT_RINGTONE_URI.toString());\n    return !TextUtils.isEmpty(uriString) ? Uri.parse(uriString) : null;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6188, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 112, "focalAPIEnd": 166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/TransportsRennes/tree/master/TransportsBordeaux/src/fr/ybo/transportsbordeaux/activity/widgets/TransportsWidget21Configure.java", "rawCode": "  static ArretFavori loadSettings(Context context, int appWidgetId) {\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n    ArretFavori favori = new ArretFavori();\n    favori.arretId = sharedPreferences.getString(\"21ArretId_\" + appWidgetId, null);\n    favori.ligneId = sharedPreferences.getString(\"21LigneId_\" + appWidgetId, null);\n    if (favori.arretId == null || favori.ligneId == null) {\n      return null;\n    }\n    return favori;\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6189, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 97, "focalAPIEnd": 148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(String,boolean)", "sp.getString(String,*)"], "useStart": [180, 848], "useEnd": [222, 887], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tonnguye/csci498android/tree/master/LunchList/src/csci498/tonnguye/lunchlist/OnAlarmRecevier.java", "rawCode": "  @Override\n  public void onReceive(Context ctxt, Intent intent) {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctxt);\n    boolean useNotification = prefs.getBoolean(\"use_notification\", true);\n\n    if (useNotification) {\n      // can extract this into its own function\n      NotificationManager mgr =\n          (NotificationManager) ctxt.getSystemService(Context.NOTIFICATION_SERVICE);\n      Notification note =\n          new Notification(\n              R.drawable.stat_notify_chat, \"It's time for lunch!\", System.currentTimeMillis());\n      PendingIntent i =\n          PendingIntent.getActivity(ctxt, 0, new Intent(ctxt, AlarmActivity.class), 0);\n      note.setLatestEventInfo(ctxt, \"LunchList\", \"It's time for lunch! Aren't you hungry?\", i);\n      note.flags |= Notification.FLAG_AUTO_CANCEL;\n\n      String sound = prefs.getString(\"alarm_ringtone\", null);\n\n      if (sound != null) {\n        note.sound = Uri.parse(sound);\n        note.audioStreamType = AudioManager.STREAM_ALARM;\n      }\n      mgr.notify(NOTIFY_ME_ID, note);\n    } else {\n      Intent i = new Intent(ctxt, AlarmActivity.class);\n\n      i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n\n      ctxt.startActivity(i);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6190, "initialization": ["Context context = getActivity()"], "initializationStart": [69], "initializationEnd": [82], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 115, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(*,int)", "sp.getInt(*,int)"], "useStart": [204, 741], "useEnd": [274, 811], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ax003d/aa_doorphone/tree/master/tests/src/org/linphone/test/AccountsTest.java", "rawCode": "  public void testCDeleteConfiguredAccount() {\n    Context context = getActivity();\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());\n    int nbAccountsBefore = prefs.getInt(getActivity().getString(R.string.pref_extra_accounts), 0);\n\n    solo.waitForActivity(\"LinphoneActivity\", 2000);\n    solo.assertCurrentActivity(\"Expected Linphone Activity\", LinphoneActivity.class);\n\n    solo.clickOnView(solo.getView(R.id.settings));\n    Assert.assertTrue(solo.searchText(\"wizard15@sip.linphone.org\"));\n\n    solo.clickOnText(\"wizard15@sip.linphone.org\");\n    selectItemInListOnUIThread(7);\n    solo.clickOnText(context.getString(R.string.pref_delete_account));\n\n    solo.goBack();\n\n    int nbAccountsAfter = prefs.getInt(getActivity().getString(R.string.pref_extra_accounts), 0);\n    Assert.assertEquals(nbAccountsBefore - 1, nbAccountsAfter);\n    Log.testSuccess(\"Deleting existing SIP account\");\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6191, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 955, "focalAPIEnd": 1006, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SuikoHero38/CraveParty/tree/master/FINAL/JakeWharton-ActionBarSherlock-e5c2d1c/library/src/com/exypnos/craveparty/controller/SettingActivity.java", "rawCode": "  @Override\n  public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {\n    switch (arg2) {\n      case 3:\n        if (mLocale.toString().substring(0, 2).equals(\"en\")) {\n          mLocale = new Locale(\"id\");\n        } else {\n          mLocale = new Locale(\"en\");\n        }\n        Locale.setDefault(mLocale);\n        Configuration config_en = new Configuration();\n        config_en.locale = mLocale;\n        getBaseContext()\n            .getResources()\n            .updateConfiguration(config_en, getBaseContext().getResources().getDisplayMetrics());\n\n        Configuration config = new Configuration();\n        config.locale = mLocale;\n        this.getApplicationContext().getResources().updateConfiguration(config, null);\n\n        Intent intent2 = new Intent(getApplicationContext(), SettingActivity.class);\n        finish();\n        startActivity(intent2);\n        break;\n      case 4:\n        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n        Editor editor = sharedPreferences.edit();\n        editor.remove(\"token\");\n        editor.commit();\n        Intent intent = new Intent(SettingActivity.this, SettingActivity.class);\n        intent = new Intent(this, LoginActivity.class);\n        intent.addFlags(\n            Intent.FLAG_ACTIVITY_CLEAR_TOP\n                | Intent.FLAG_ACTIVITY_NEW_TASK\n                | Intent.FLAG_ACTIVITY_CLEAR_TASK);\n        startActivity(intent);\n        finish();\n        break;\n\n      default:\n        break;\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6192, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 65, "focalAPIEnd": 116, "followUpCheck": "sp", "checkType": "IF", "followUpCheckExpressionStart": 161, "followUpCheckExpressionEnd": 178, "followUpCheckBlockStart": 161, "followUpCheckBlockEnd": 1110, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/telecapoland/jamendo-android/tree/master/src/com/teleca/jamendo/activity/SplashscreenActivity.java", "rawCode": "  final void showTutorial() {\n    boolean showTutorial =\n        PreferenceManager.getDefaultSharedPreferences(this).getBoolean(FIRST_RUN_PREFERENCE, true);\n    if (showTutorial) {\n      final TutorialDialog dlg = new TutorialDialog(this);\n      dlg.setOnDismissListener(\n          new DialogInterface.OnDismissListener() {\n            @Override\n            public void onDismiss(DialogInterface dialog) {\n              CheckBox cb = (CheckBox) dlg.findViewById(R.id.toggleFirstRun);\n              if (cb != null && cb.isChecked()) {\n                SharedPreferences prefs =\n                    PreferenceManager.getDefaultSharedPreferences(SplashscreenActivity.this);\n                prefs.edit().putBoolean(FIRST_RUN_PREFERENCE, false).commit();\n              }\n              endAnimationHandler.removeCallbacks(endAnimationRunnable);\n              endAnimationHandler.postDelayed(endAnimationRunnable, 2000);\n            }\n          });\n      dlg.show();\n\n    } else {\n      endAnimationHandler.removeCallbacks(endAnimationRunnable);\n      endAnimationHandler.postDelayed(endAnimationRunnable, 1500);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6193, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 102, "focalAPIEnd": 156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getLayoutByStyleName(Context,String,sp)"], "useStart": [230], "useEnd": [297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tedk/Dash/tree/master/main/src/main/java/com/google/android/apps/dashclock/configuration/AppearanceConfig.java", "rawCode": "  public static int getCurrentDateLayout(Context context) {\n    String currentDateStyleName =\n        PreferenceManager.getDefaultSharedPreferences(context)\n            .getString(PREF_STYLE_DATE, DATE_STYLE_NAMES[0]);\n    return getLayoutByStyleName(context, COMPONENT_DATE, currentDateStyleName);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6194, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 68, "focalAPIEnd": 119, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.unregisterOnSharedPreferenceChangeListener(*)"], "useStart": [68], "useEnd": [177], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitchtech/android-context/tree/master/src/edu/fsu/cs/contextprovider/sensor/AccelerometerService.java", "rawCode": "  private void stopService() {\n    sm.unregisterListener(this);\n    PreferenceManager.getDefaultSharedPreferences(this)\n        .unregisterOnSharedPreferenceChangeListener(this);\n    unregisterReceiver(restartIntentReceiver);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6195, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 100, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["RunListenerApi.onSoundSettingChange(sp)"], "useStart": [492], "useEnd": [530], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ZPI/ZPI-Android/tree/master/ZPI1/src/com/pwr/zpi/MainScreenActivity.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    boolean soundEnabled =\n        PreferenceManager.getDefaultSharedPreferences(this)\n            .getBoolean(getString(R.string.key_aplication_sound), false);\n    new GetAllRunsFromDB().execute(new Void[0]);\n    if (!mIsBound) {\n      doBindService();\n    } else {\n      try {\n        if (isServiceConnected) {\n          gpsStatus = GPSServiceStatus.values()[api.getGPSStatus()];\n          handleGPSStatusChange();\n          api.onSoundSettingChange(soundEnabled);\n          Log.i(TAG, \"changed sound settings in servie\");\n        }\n      } catch (RemoteException e) {\n        Log.w(TAG, \"Failed to get gpsStatus \", e);\n      }\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6196, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 93, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getAll()"], "useStart": [179], "useEnd": [205], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/TransportsRennes/tree/master/TransportsRennes/src/fr/ybo/transportsrennes/activity/widgets/TransportsWidgetLowResConfigure.java", "rawCode": "  static void deleteAllSettings(Context context) {\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);\n    Map<String, ?> allPrefs = sharedPreferences.getAll();\n    SharedPreferences.Editor edit = sharedPreferences.edit();\n    for (String key : allPrefs.keySet()) {\n      if (key.startsWith(\"LowResArretId\") || key.startsWith(\"LowResLigneId\")) {\n        edit.remove(key);\n      }\n    }\n    edit.commit();\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6197, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 86, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/droidjunk_packages_apps_Contacts/tree/master/src/com/android/contacts/util/AccountPromptUtils.java", "rawCode": "  private static SharedPreferences getSharedPreferences(Context context) {\n    return PreferenceManager.getDefaultSharedPreferences(context);\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6198, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 472, "focalAPIEnd": 527, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getString(*,String)", "sp.getString(*,String)"], "useStart": [561, 693], "useEnd": [615, 742], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamSourcery/packages_apps_Phone/tree/master/src/com/android/phone/NotificationMgr.java", "rawCode": "  /**\n   * Update notification about no service of user selected operator\n   *\n   * @param serviceState Phone service state\n   */\n  void updateNetworkSelection(int serviceState) {\n    if (TelephonyCapabilities.supportsNetworkSelection(mPhone)) {\n      // get the shared preference of network_selection.\n      // empty is auto mode, otherwise it is the operator alpha name\n      // in case there is no operator name, check the operator numeric\n      SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(mContext);\n      String networkSelection = sp.getString(PhoneBase.NETWORK_SELECTION_NAME_KEY, \"\");\n      if (TextUtils.isEmpty(networkSelection)) {\n        networkSelection = sp.getString(PhoneBase.NETWORK_SELECTION_KEY, \"\");\n      }\n\n      if (DBG)\n        log(\n            \"updateNetworkSelection()...\"\n                + \"state = \"\n                + serviceState\n                + \" new network \"\n                + networkSelection);\n\n      if (serviceState == ServiceState.STATE_OUT_OF_SERVICE\n          && !TextUtils.isEmpty(networkSelection)) {\n        if (!mSelectedUnavailableNotify) {\n          showNetworkSelection(networkSelection);\n          mSelectedUnavailableNotify = true;\n        }\n      } else {\n        if (mSelectedUnavailableNotify) {\n          cancelNetworkSelection();\n          mSelectedUnavailableNotify = false;\n        }\n      }\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6199, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 1499, "focalAPIEnd": 1550, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getBoolean(*,boolean)"], "useStart": [1582], "useEnd": [1647], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/magmapus/PGApp/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    // CameraManager must be initialized here, not in onCreate(). This is necessary because we don't\n    // want to open the camera driver and measure the screen size if we're going to show the help on\n    // first launch. That led to bugs where the scanning rectangle was the wrong size and partially\n    // off screen.\n    cameraManager = new CameraManager(getApplication());\n\n    viewfinderView = (ViewfinderView) findViewById(fakeR.getId(\"id\", \"viewfinder_view\"));\n    viewfinderView.setCameraManager(cameraManager);\n\n    resultView = findViewById(fakeR.getId(\"id\", \"result_view\"));\n    statusView = (TextView) findViewById(fakeR.getId(\"id\", \"status_view\"));\n\n    handler = null;\n    lastResult = null;\n\n    resetStatusView();\n\n    SurfaceView surfaceView = (SurfaceView) findViewById(fakeR.getId(\"id\", \"preview_view\"));\n    SurfaceHolder surfaceHolder = surfaceView.getHolder();\n    if (hasSurface) {\n      // The activity was paused but not stopped, so the surface still exists. Therefore\n      // surfaceCreated() won't be called, so init the camera here.\n      initCamera(surfaceHolder);\n    } else {\n      // Install the callback and wait for surfaceCreated() to init the camera.\n      surfaceHolder.addCallback(this);\n      surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n    }\n\n    beepManager.updatePrefs();\n\n    inactivityTimer.onResume();\n\n    Intent intent = getIntent();\n\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    copyToClipboard =\n        prefs.getBoolean(PreferencesActivity.KEY_COPY_TO_CLIPBOARD, true)\n            && (intent == null || intent.getBooleanExtra(Intents.Scan.SAVE_HISTORY, true));\n\n    // source = IntentSource.NONE;\n    source = IntentSource.NATIVE_APP_INTENT;\n    decodeFormats = null;\n    characterSet = null;\n\n    if (intent != null) {\n\n      String action = intent.getAction();\n      String dataString = intent.getDataString();\n\n      if (Intents.Scan.ACTION.equals(action)) {\n\n        // Scan the formats the intent requested, and return the result to the calling activity.\n        source = IntentSource.NATIVE_APP_INTENT;\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(intent);\n\n        if (intent.hasExtra(Intents.Scan.WIDTH) && intent.hasExtra(Intents.Scan.HEIGHT)) {\n          int width = intent.getIntExtra(Intents.Scan.WIDTH, 0);\n          int height = intent.getIntExtra(Intents.Scan.HEIGHT, 0);\n          if (width > 0 && height > 0) {\n            cameraManager.setManualFramingRect(width, height);\n          }\n        }\n\n        String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);\n        if (customPromptMessage != null) {\n          statusView.setText(customPromptMessage);\n        }\n\n      } else if (dataString != null\n          && dataString.contains(PRODUCT_SEARCH_URL_PREFIX)\n          && dataString.contains(PRODUCT_SEARCH_URL_SUFFIX)) {\n\n        // Scan only products and send the result to mobile Product Search.\n        source = IntentSource.PRODUCT_SEARCH_LINK;\n        sourceUrl = dataString;\n        decodeFormats = DecodeFormatManager.PRODUCT_FORMATS;\n\n      } else if (isZXingURL(dataString)) {\n\n        // Scan formats requested in query string (all formats if none specified).\n        // If a return URL is specified, send the results there. Otherwise, handle it ourselves.\n        source = IntentSource.ZXING_LINK;\n        sourceUrl = dataString;\n        Uri inputUri = Uri.parse(sourceUrl);\n        returnUrlTemplate = inputUri.getQueryParameter(RETURN_URL_PARAM);\n        returnRaw = inputUri.getQueryParameter(RAW_PARAM) != null;\n        decodeFormats = DecodeFormatManager.parseDecodeFormats(inputUri);\n      }\n\n      characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET);\n    }\n  }\n"}, {"dataset": "getDefaultSharedPreferences", "exampleID": 6200, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["context.getPackageName()"], "configurationStart": [102], "configurationEnd": [126], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "sp = preferenceManager.getDefaultSharedPreferences(context)", "focalAPIStart": 176, "focalAPIEnd": 230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sp.getInt(String,int)"], "useStart": [560], "useEnd": [614], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hectorxda/CMParts/tree/master/src/com/cyanogenmod/cmparts/provider/RenderFXWidgetProvider.java", "rawCode": "  public void updateState(Context context, int appWidgetId) {\n    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget);\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n    views.setOnClickPendingIntent(R.id.btn, getLaunchPendingIntent(context, appWidgetId, 0));\n\n    if (this.RenderFXServiceRunning(context)) {\n      views.setImageViewResource(R.id.img_torch, R.drawable.render_on);\n    } else {\n      views.setImageViewResource(R.id.img_torch, R.drawable.render_off);\n    }\n\n    int renderFx = prefs.getInt(\"widget_render_effect_\" + appWidgetId, 1);\n\n    switch (renderFx) {\n      case 1:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_night));\n        break;\n      case 2:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_terminal));\n        break;\n      case 3:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_blue));\n        break;\n      case 4:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_amber));\n        break;\n      case 5:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_salmon));\n        break;\n      case 6:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_fuscia));\n        break;\n      case 7:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_calibrated));\n        break;\n      case 8:\n        views.setTextViewText(\n            R.id.ind,\n            context.getResources().getString(R.string.widget_render_effect_calibrated_red));\n        break;\n      case 9:\n        views.setTextViewText(\n            R.id.ind,\n            context.getResources().getString(R.string.widget_render_effect_calibrated_cool));\n        break;\n      case 10:\n        views.setTextViewText(\n            R.id.ind, context.getResources().getString(R.string.widget_render_effect_red));\n        break;\n      default:\n        views.setTextViewText(R.id.ind, context.getResources().getString(R.string.renderfx_temp));\n    }\n\n    final AppWidgetManager gm = AppWidgetManager.getInstance(context);\n    gm.updateAppWidget(appWidgetId, views);\n  }\n"}]