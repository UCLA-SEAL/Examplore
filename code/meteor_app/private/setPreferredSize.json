[{"dataset": "setPreferredSize", "exampleID": 3601, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [267], "initializationEnd": [291], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(*)"], "configurationStart": [297], "configurationEnd": [354], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 360, "focalAPIEnd": 423, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setResizable(boolean)", "new LoginDialog(jFrame)"], "useStart": [429, 523], "useEnd": [458, 550], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hcix/CSC531/tree/master/Project/src/program/Core.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  private static void createAndShowLoginGUI() {\n    // Create and set up the frame to place the login window in\n    JFrame loginFrame = new JFrame(\"UMPD Login\");\n    loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    loginFrame.setPreferredSize(SwingHelper.LOGIN_DIALOG_DIMENSION);\n    loginFrame.setResizable(true);\n\n    // Display the login dialog\n    LoginDialog loginDialog = new LoginDialog(loginFrame);\n    loginDialog.setVisible(true);\n\n    // If login attempt(s) was/were not successful, exit the program\n    if (!loginDialog.isSuccessful()) {\n      System.exit(0);\n    }\n  }\n"}, {"dataset": "setPreferredSize", "exampleID": 3602, "initialization": ["Dimension preferredSize = new Dimension(int,int)"], "initializationStart": [675], "initializationEnd": [698], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(*)"], "configurationStart": [772], "configurationEnd": [833], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 839, "focalAPIEnd": 876, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(Dimension)"], "useStart": [882], "useEnd": [910], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jawi/SignalViewTest/tree/master/src/main/java/nl/lxtreme/test/Main.java", "rawCode": "  /** */\n  void init() {\n    if (!isMacOS()) {\n      try {\n        UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\");\n      } catch (Exception exception) {\n        try {\n          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n        } catch (Exception exception2) {\n          System.err.println(\"L&F setting failed!\");\n        }\n      }\n    } else {\n      try {\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n      } catch (Exception exception2) {\n        System.err.println(\"L&F setting failed!\");\n      }\n    }\n\n    this.controller = new SignalDiagramController();\n\n    final Dimension dims = new Dimension(800, 600);\n\n    this.mainFrame = new JFrame(\"OLS Signal View Component - v2\");\n    this.mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    this.mainFrame.setPreferredSize(dims);\n    this.mainFrame.setSize(dims);\n\n    this.menuBar = new JMenuBar();\n\n    final JMenu fileMenu = new JMenu(\"File\");\n    this.menuBar.add(fileMenu);\n\n    final JMenuItem fileExitItem =\n        new JMenuItem(\n            new AbstractAction(\"Exit\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                Main.this.mainFrame.setVisible(false);\n                Main.this.mainFrame.dispose();\n              }\n            });\n    fileMenu.add(fileExitItem);\n\n    final JMenu annotationMenu = new JMenu(\"Annotations\");\n    this.menuBar.add(annotationMenu);\n\n    final JMenuItem switchRenderStyle =\n        new JCheckBoxMenuItem(new SwitchAnnotationRenderingAction(this.controller));\n    annotationMenu.add(switchRenderStyle);\n\n    final JMenu diagramMenu = new JMenu(\"Diagram\");\n    this.menuBar.add(diagramMenu);\n\n    final JMenuItem diagramSnapCursorsItem =\n        new JCheckBoxMenuItem(\n            new AbstractAction(\"Snap Cursors?\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                AbstractButton button = (AbstractButton) aEvent.getSource();\n                Main.this.controller.setSnapModeEnabled(button.getModel().isSelected());\n              }\n            });\n    diagramMenu.add(diagramSnapCursorsItem);\n\n    final JMenuItem diagramEnableCursorsItem =\n        new JCheckBoxMenuItem(\n            new AbstractAction(\"Cursor mode\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                AbstractButton button = (AbstractButton) aEvent.getSource();\n                Main.this.controller.setCursorsVisible(button.getModel().isSelected());\n              }\n            });\n    diagramMenu.add(diagramEnableCursorsItem);\n\n    final JMenuItem diagramEnableMeasureModeItem =\n        new JCheckBoxMenuItem(\n            new AbstractAction(\"Measurement mode\") {\n              private static final long serialVersionUID = 1L;\n\n              @Override\n              public void actionPerformed(final ActionEvent aEvent) {\n                AbstractButton button = (AbstractButton) aEvent.getSource();\n                Main.this.controller.setMeasurementMode(button.getModel().isSelected());\n              }\n            });\n    diagramMenu.add(diagramEnableMeasureModeItem);\n\n    // final SampleDataModel model = new SampleDataModel( 256 * 1024, new\n    // AlternatingDataWithSpacesProvider() );\n    final SampleDataModel model = new SampleDataModel(512 * 1024, new CounterDataProvider());\n\n    this.signalDiagram = SignalDiagramComponent.create(this.controller);\n    this.signalDetails = SignalDetailsView.create(this.controller);\n    this.captureDetails = CaptureDetailsView.create(this.controller);\n    this.cursorDetails = CursorDetailsView.create(this.controller);\n    this.measurementDetails = MeasurementView.create(this.controller);\n\n    this.controller.setDataModel(model);\n\n    this.signalDiagram.zoomOriginal();\n  }\n"}, {"dataset": "setPreferredSize", "exampleID": 3603, "initialization": ["JFrame jFrame = new JFrame(String)", "Dimension preferredSize = new Dimension(*,*)", "Dimension preferredSize = new Dimension(*,*)"], "initializationStart": [252, 375, 496], "initializationEnd": [276, 459, 572], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(Dimension)"], "configurationStart": [583], "configurationEnd": [607], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 617, "focalAPIEnd": 650, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setMaximumSize(Dimension)", "jFrame.setMinimumSize(Dimension)", "jFrame.setResizable(boolean)", "jFrame.add(JLabel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [660, 701, 742, 778, 820, 842], "useEnd": [691, 732, 767, 810, 832, 864], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fsteen/monopoly-for-the-gods/tree/master/src/edu/brown/cs32/MFTG/gui/gameboard/Railroad.java", "rawCode": "    @Override\n    public void mouseClicked(MouseEvent e) {\n      if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {\n        nextView();\n        update();\n      }\n      if (e.getButton() == MouseEvent.BUTTON3) {\n        JFrame frame = new JFrame(\"Deed Cards\");\n\n        Dimension dimension;\n        if (_deeds.size() < 4)\n          dimension =\n              new Dimension(Constants.DEED_WIDTH + 10, _deeds.size() * Constants.DEED_HEIGHT + 25);\n        else\n          dimension = new Dimension(2 * Constants.DEED_WIDTH + 10, 2 * Constants.DEED_HEIGHT + 25);\n\n        frame.setSize(dimension);\n        frame.setPreferredSize(dimension);\n        frame.setMaximumSize(dimension);\n        frame.setMinimumSize(dimension);\n        frame.setResizable(false);\n\n        frame.add(new DeedPopup(_deeds));\n        frame.pack();\n        frame.setVisible(true);\n      }\n    }\n"}, {"dataset": "setPreferredSize", "exampleID": 3604, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 144, "focalAPIEnd": 176, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/duke-compsci308-spring2013/vooga/tree/master/src/vooga/towerdefense/view/TDView.java", "rawCode": "  /**\n   * sets the size of the view.\n   *\n   * @param dimension\n   */\n  public void setSize(Dimension dimension) {\n    mySize = dimension;\n    myFrame.setPreferredSize(mySize);\n  }\n"}, {"dataset": "setPreferredSize", "exampleID": 3605, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addWindowListener(WindowListener)"], "configurationStart": [299], "configurationEnd": [332], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 2917, "focalAPIEnd": 2950, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JTabbedPane)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [2979, 3006, 3024], "useEnd": [3000, 3018, 3046], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eliask/SDP2011-Robotniks/tree/master/communication/lejos_nxj/projects/pctools/lejos/pc/tools/NXJControl.java", "rawCode": "  /** Run the program */\n  private void run() {\n    // Close connection and exit when frame windows closed\n    WindowListener listener =\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent w) {\n            closeAll();\n            System.exit(0);\n          }\n        };\n    frame.addWindowListener(listener);\n    conn.addLogListener(new ToolsLogger());\n    control = this;\n\n    // Search Button: search for NXTs\n    searchButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            search();\n          }\n        });\n\n    // Connect Button: connect to selected NXT\n    connectButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            connect();\n          }\n        });\n\n    // Data log Connect Button: connect to the Data Logger\n    dataDownloadButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            recordCount = 0;\n\n            try {\n              rowLength = Integer.parseInt(dataColumns.getText());\n            } catch (NumberFormatException ex) {\n              System.out.println(dataColumns.getText() + \" is not a number, default reset to 8\");\n            }\n\n            dvc.startDownload();\n          }\n        });\n\n    // Monitor Update Button: get values being monitored\n    monitorUpdateButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            getSensorValues();\n            updateSensors();\n          }\n        });\n\n    lcpButton.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            if (appProtocol == getAppProtocol()) return;\n            if (lcpButton.isSelected()) {\n              createLCPTabs();\n              appProtocol = LCP;\n            }\n          }\n        });\n\n    rconsoleButton.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            if (appProtocol == getAppProtocol()) return;\n            if (rconsoleButton.isSelected()) {\n              createConsoleTabs();\n              appProtocol = RCONSOLE;\n            }\n          }\n        });\n\n    datalogButton.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            if (appProtocol == getAppProtocol()) return;\n            if (datalogButton.isSelected()) {\n              createDataLogTabs();\n              appProtocol = DATALOG;\n            }\n          }\n        });\n\n    // Create the panels\n    createNXTSelectionPanel();\n    createConsolePanel();\n    createDataPanel();\n    createMonitorPanel();\n    createControlPanel();\n    createMiscellaneousPanel();\n\n    // set the size of the files panel\n    filesPanel.setPreferredSize(filesPanelSize);\n\n    // Set up the frame\n    frame.setPreferredSize(frameSize);\n\n    createLCPTabs();\n\n    frame.add(tabbedPane);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setPreferredSize", "exampleID": 3606, "initialization": ["Dimension preferredSize = new Dimension(int,int)"], "initializationStart": [758], "initializationEnd": [788], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jFrame!=null", "guardType": "IF {", "guardExpressionStart": 1439, "guardExpressionEnd": 1458, "guardBlockStart": 1439, "guardBlockEnd": 1607, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 1467, "focalAPIEnd": 1496, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(Dimension)"], "useStart": [1504], "useEnd": [1524], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Icy-imaging/Icy-Kernel/tree/master/icy/gui/util/WindowPositionSaver.java", "rawCode": "  public void loadDimension(Dimension defaultDim) {\n    final int w, h;\n\n    if (defaultDim == null) {\n      w = 300;\n      h = 300;\n    } else {\n      w = defaultDim.width;\n      h = defaultDim.height;\n    }\n\n    // minimum size is 10 pixels\n    int widthC = Math.max(preferences.getInt(ID_WC, w), 10);\n    int heightC = Math.max(preferences.getInt(ID_HC, h), 10);\n    int widthI = Math.max(preferences.getInt(ID_WI, w), 10);\n    int heightI = Math.max(preferences.getInt(ID_HI, h), 10);\n    int widthE = Math.max(preferences.getInt(ID_WE, w), 10);\n    int heightE = Math.max(preferences.getInt(ID_HE, h), 10);\n\n    final Dimension dimC = new Dimension(widthC, heightC);\n    final Dimension dimI = new Dimension(widthI, heightI);\n    final Dimension dimE = new Dimension(widthE, heightE);\n\n    if (mainFrame != null) {\n      // set size only else we cannot pack anymore the frame for detached mode\n      mainFrame.setSize(dimE);\n    } else if (icyFrame != null) {\n      icyFrame.setPreferredSizeExternal(dimE);\n      icyFrame.setSizeExternal(dimE);\n      icyFrame.setPreferredSizeInternal(dimI);\n      icyFrame.setSizeInternal(dimI);\n    } else if (extPanel != null) {\n      extPanel.setPreferredSize(dimC);\n\n      // get the panel frame\n      final IcyFrame f = extPanel.getFrame();\n\n      f.setPreferredSizeExternal(dimE);\n      f.setSizeExternal(dimE);\n      f.setPreferredSizeInternal(dimI);\n      f.setSizeInternal(dimI);\n    } else if (jFrame != null) {\n      jFrame.setPreferredSize(dimE);\n      jFrame.setSize(dimE);\n    } else if (component != null) {\n      component.setPreferredSize(dimC);\n    }\n  }\n"}, {"dataset": "setPreferredSize", "exampleID": 3607, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 55, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setMinimumSize(Dimension)", "jFrame.setMaximumSize(Dimension)", "jFrame.setSize(Dimension)"], "useStart": [94, 131, 168], "useEnd": [125, 162, 192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ga-m3dv/ga-worldwind-suite/tree/master/Animator/src/main/java/au/gov/ga/worldwind/animator/application/Animator.java", "rawCode": "  private void setFrameSize(Dimension frameSize) {\n    frame.setPreferredSize(frameSize);\n    frame.setMinimumSize(frameSize);\n    frame.setMaximumSize(frameSize);\n    frame.setSize(frameSize);\n  }\n"}, {"dataset": "setPreferredSize", "exampleID": 3608, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addWindowListener(WindowListener)"], "configurationStart": [299], "configurationEnd": [332], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 2917, "focalAPIEnd": 2950, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JTabbedPane)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [2979, 3006, 3024], "useEnd": [3000, 3018, 3046], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tubs-legolabor-teamprojekt/schach/tree/master/lejos_nxj/projects/pctools/lejos/pc/tools/NXJControl.java", "rawCode": "  /** Run the program */\n  private void run() {\n    // Close connection and exit when frame windows closed\n    WindowListener listener =\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent w) {\n            closeAll();\n            System.exit(0);\n          }\n        };\n    frame.addWindowListener(listener);\n    conn.addLogListener(new ToolsLogger());\n    control = this;\n\n    // Search Button: search for NXTs\n    searchButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            search();\n          }\n        });\n\n    // Connect Button: connect to selected NXT\n    connectButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            connect();\n          }\n        });\n\n    // Data log Connect Button: connect to the Data Logger\n    dataDownloadButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            recordCount = 0;\n\n            try {\n              rowLength = Integer.parseInt(dataColumns.getText());\n            } catch (NumberFormatException ex) {\n              System.out.println(dataColumns.getText() + \" is not a number, default reset to 8\");\n            }\n\n            dvc.startDownload();\n          }\n        });\n\n    // Monitor Update Button: get values being monitored\n    monitorUpdateButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            getSensorValues();\n            updateSensors();\n          }\n        });\n\n    lcpButton.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            if (appProtocol == getAppProtocol()) return;\n            if (lcpButton.isSelected()) {\n              createLCPTabs();\n              appProtocol = LCP;\n            }\n          }\n        });\n\n    rconsoleButton.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            if (appProtocol == getAppProtocol()) return;\n            if (rconsoleButton.isSelected()) {\n              createConsoleTabs();\n              appProtocol = RCONSOLE;\n            }\n          }\n        });\n\n    datalogButton.addChangeListener(\n        new ChangeListener() {\n          public void stateChanged(ChangeEvent e) {\n            if (appProtocol == getAppProtocol()) return;\n            if (datalogButton.isSelected()) {\n              createDataLogTabs();\n              appProtocol = DATALOG;\n            }\n          }\n        });\n\n    // Create the panels\n    createNXTSelectionPanel();\n    createConsolePanel();\n    createDataPanel();\n    createMonitorPanel();\n    createControlPanel();\n    createMiscellaneousPanel();\n\n    // set the size of the files panel\n    filesPanel.setPreferredSize(filesPanelSize);\n\n    // Set up the frame\n    frame.setPreferredSize(frameSize);\n\n    createLCPTabs();\n\n    frame.add(tabbedPane);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setPreferredSize", "exampleID": 3609, "initialization": ["JFrame jFrame = new JFrame(String)", "Dimension preferredSize = new Dimension(*,*)", "Dimension preferredSize = new Dimension(*,*)"], "initializationStart": [258, 381, 502], "initializationEnd": [282, 465, 578], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(Dimension)"], "configurationStart": [589], "configurationEnd": [613], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 623, "focalAPIEnd": 656, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setMaximumSize(Dimension)", "jFrame.setMinimumSize(Dimension)", "jFrame.setResizable(boolean)", "jFrame.add(JLabel)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [666, 707, 748, 784, 826, 848], "useEnd": [697, 738, 773, 816, 838, 870], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fsteen/monopoly-for-the-gods/tree/master/src/edu/brown/cs32/MFTG/gui/gameboard/ColorGroup.java", "rawCode": "    @Override\n    public void mouseClicked(MouseEvent e) {\n      if (e.getButton() == MouseEvent.BUTTON1 && e.getClickCount() == 2) {\n        /* nextView();\n        update(); */\n      }\n      if (e.getButton() == MouseEvent.BUTTON3) {\n        JFrame frame = new JFrame(\"Deed Cards\");\n\n        Dimension dimension;\n        if (_deeds.size() < 4)\n          dimension =\n              new Dimension(Constants.DEED_WIDTH + 10, _deeds.size() * Constants.DEED_HEIGHT + 25);\n        else\n          dimension = new Dimension(2 * Constants.DEED_WIDTH + 10, 2 * Constants.DEED_HEIGHT + 25);\n\n        frame.setSize(dimension);\n        frame.setPreferredSize(dimension);\n        frame.setMaximumSize(dimension);\n        frame.setMinimumSize(dimension);\n        frame.setResizable(false);\n\n        frame.add(new DeedPopup(_deeds));\n        frame.pack();\n        frame.setVisible(true);\n      }\n    }\n"}, {"dataset": "setPreferredSize", "exampleID": 3610, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [110], "initializationEnd": [127], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(JPanel)"], "configurationStart": [161], "configurationEnd": [192], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setPreferredSize(preferredSize)", "focalAPIStart": 198, "focalAPIEnd": 228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(*)", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.setJMenuBar(ToolBarArea)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [234, 397, 580, 747, 889, 928, 948], "useEnd": [288, 421, 604, 771, 921, 942, 972], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/th365thli/SLogo/tree/master/src/view/Canvas.java", "rawCode": "  /** Creates the Toolbar and Display, Turtle and Command Areas */\n  public void createGUI() {\n\n    myFrame = new JFrame(TITLE);\n    myPanel = new JPanel();\n    myFrame.setContentPane(myPanel);\n    myFrame.setPreferredSize(SIZE);\n    myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // for turtle sprite display\n    myTurtleArea = new TurtleArea(TURTLE_AREA_SIZE, myTurtle, this);\n    myFrame.getContentPane().add(myTurtleArea, BorderLayout.CENTER);\n\n    // for turtle status display\n    myDisplayArea = new DisplayArea(DISPLAY_AREA_SIZE, myTurtle, myController);\n    myFrame.getContentPane().add(myDisplayArea, BorderLayout.EAST);\n\n    // for user input display\n    myInputArea = new CommandArea(COMMAND_AREA_SIZE, myController);\n    myFrame.getContentPane().add(myInputArea, BorderLayout.SOUTH);\n\n    // add tool bar area\n    myMenusArea = new ToolBarArea(myController);\n    myFrame.setJMenuBar(myMenusArea);\n\n    myFrame.pack();\n    myFrame.setVisible(true);\n  }\n"}]