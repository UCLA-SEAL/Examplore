[{"dataset": "jSONObjectGetString", "exampleID": 4301, "initialization": ["JSONObject jSONObject = new JSONObject()", "JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [338, 452], "initializationEnd": [354, 474], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 538, "focalAPIEnd": 584, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setName(value)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getString(String)"], "useStart": [519, 613, 682, 759], "useEnd": [585, 652, 722, 804], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunqimin09/FirstApp/tree/master/AppTellOut/src/com/tellout/util/JsonParse.java", "rawCode": "  /**\n   * 世界排行\n   *\n   * @param baseEntity\n   * @return\n   * @throws JSONException\n   */\n  private static BaseEntity ParseWorldRank(BaseEntity baseEntity) throws JSONException {\n    List<UserEntity> list = new ArrayList<UserEntity>();\n    JSONArray array = baseEntity.getResultObject().getJSONArray(\"worldRank\");\n    JSONObject object = new JSONObject();\n    UserEntity userEntity = null;\n    for (int i = 0; i < array.length(); i++) {\n      object = array.getJSONObject(i);\n      userEntity = new UserEntity();\n      userEntity.setName(object.getString(DbConstant.DB_USER_NICK_NAME));\n      userEntity.setScore(object.getInt(DbConstant.DB_USER_SCORE));\n      userEntity.setSalary(object.getInt(DbConstant.DB_USER_SALARY));\n      userEntity.setIndustry_name(object.getString(DbConstant.DB_INDUSTRY_NAME));\n      list.add(userEntity);\n    }\n    baseEntity.setList(list);\n    return baseEntity;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4302, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [605], "initializationEnd": [635], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 311, "tryExpressionEnd": 315, "tryBlockStart": 311, "tryBlockEnd": 1720, "catchExpressionStart": 1621, "catchExpressionEnd": 1645, "catchBlockStart": 1621, "catchBlockEnd": 1720, "exceptionHandlingCallStart": [1694], "exceptionHandlingCallEnd": [1713], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 732, "focalAPIEnd": 772, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setNomSaison(value)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [705, 1080, 1160], "useEnd": [773, 1120, 1199], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pronoschallenge/pronoschallenge-android/tree/master/src/fr/pronoschallenge/profil/ProfilPagedViewAdapter.java", "rawCode": "  private List<PalmaresEntry> getPalmares(String userName) {\n    List<PalmaresEntry> palmaresEntries = new ArrayList<PalmaresEntry>();\n\n    String strPalmares =\n        RestClient.get(\n            new QueryBuilder(profilActivity.getAssets(), \"/rest/palmares/\" + userName + \"/\")\n                .getUri());\n\n    try {\n      // A Simple JSONObject Creation\n      JSONObject json = new JSONObject(strPalmares);\n\n      // A Simple JSONObject Parsing\n      JSONArray palmaresArray = json.getJSONArray(\"palmares\");\n      for (int i = 0; i < palmaresArray.length(); i++) {\n        JSONObject jsonPalmaresEntry = palmaresArray.getJSONObject(i);\n\n        PalmaresEntry palmaresEntry = new PalmaresEntry();\n        palmaresEntry.setNomSaison(jsonPalmaresEntry.getString(\"nomSaison\"));\n        // Recherche des championnats li�s � la saison\n        while (jsonPalmaresEntry.getString(\"nomSaison\").equals(palmaresEntry.getNomSaison())\n            && i < palmaresArray.length()) {\n          PalmaresDetailEntry palmaresDetail = new PalmaresDetailEntry();\n          palmaresDetail.setTypeChamp(jsonPalmaresEntry.getString(\"typeChamp\"));\n          palmaresDetail.setNumPlace(jsonPalmaresEntry.getString(\"numPlace\"));\n          palmaresEntry.setPalmaresDetail(palmaresDetail);\n          // Entité JSON suivante\n          i++;\n          if (i < palmaresArray.length()) {\n            jsonPalmaresEntry = palmaresArray.getJSONObject(i);\n          }\n        }\n        // Repositionnement sur l'entité JSON adéquate\n        if (i < palmaresArray.length()) {\n          i--;\n        }\n        palmaresEntries.add(palmaresEntry);\n      }\n\n    } catch (JSONException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    return palmaresEntries;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4303, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [545], "initializationEnd": [592], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 526, "tryExpressionEnd": 530, "tryBlockStart": 526, "tryBlockEnd": 700, "catchExpressionStart": 640, "catchExpressionEnd": 665, "catchBlockStart": 640, "catchBlockEnd": 700, "exceptionHandlingCallStart": [673], "exceptionHandlingCallEnd": [693], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 608, "focalAPIEnd": 631, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["StringBuilder.append(value)"], "useStart": [706], "useEnd": [741], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xujiangwei/smart-server/tree/master/smart-cellet/src/smart/old/action/task/SlaServiceLevelListListener.java", "rawCode": "  @Override\n  public void onAction(ActionDialect action) {\n\n    // 使用同步方式进行请求。\n    // 因为 onAction 方法是由 Cell Cloud 的 action dialect 进行回调的，\n    // 该方法独享一个线程，因此可以在此线程里进行阻塞式的调用。\n    // 因此，可以用同步方式请求 HTTP API 。\n\n    // URL\n    HostConfig serviceDeskConfig = new ServiceDeskHostConfig();\n    HostConfigContext context = new HostConfigContext(serviceDeskConfig);\n    StringBuilder url =\n        new StringBuilder(context.getAPIHost()).append(\"/\").append(API.SERVICELEVELLIST);\n    JSONObject json = null;\n    String bpiId = null;\n    try {\n      json = new JSONObject(action.getParamAsString(\"data\"));\n      bpiId = json.getString(\"bpiId\");\n\n    } catch (JSONException e2) {\n      e2.printStackTrace();\n    }\n\n    url.append(\"?bpiId=\").append(bpiId);\n    System.out.println(\"获取服务级别的URL:\" + url.toString());\n    // 创建请求\n    Request request = this.getHttpClient().newRequest(url.toString());\n    request.method(HttpMethod.GET);\n\n    Properties params = new Properties();\n    // 发送请求\n    ContentResponse response = null;\n    try {\n      response = request.send();\n    } catch (InterruptedException e1) {\n      e1.printStackTrace();\n    } catch (TimeoutException e1) {\n      e1.printStackTrace();\n    } catch (ExecutionException e1) {\n      e1.printStackTrace();\n    }\n    JSONObject jo = null;\n    switch (response.getStatus()) {\n      case HttpStatus.OK_200:\n        byte[] bytes = response.getContent();\n\n        if (null != bytes) {\n          // 获取从 Web 服务器上返回的数据\n          String content = new String(bytes, Charset.forName(\"UTF-8\"));\n          System.out.println(content);\n          try {\n            jo = new JSONObject(content);\n            System.out.println(\"响应服务级别请求的返回值为：:\" + jo);\n\n            // 设置参数\n            params.addProperty(new ObjectProperty(\"data\", jo));\n\n            // 响应动作，即向客户端发送 ActionDialect\n            this.response(Action.SERVICELEVELLIST, params);\n\n          } catch (JSONException e) {\n            e.printStackTrace();\n          }\n        } else {\n          this.reportHTTPError(Action.SERVICELEVELLIST);\n        }\n\n        break;\n      default:\n        Logger.w(IncidentListListener.class, \"返回响应码：\" + response.getStatus());\n        jo = new JSONObject();\n        try {\n          jo.put(\"status\", 900);\n        } catch (JSONException e) {\n          e.printStackTrace();\n        }\n\n        // 设置参数\n        params.addProperty(new ObjectProperty(\"data\", jo));\n\n        // 响应动作，即向客户端发送 ActionDialect\n        this.response(Action.SERVICELEVELLIST, params);\n        break;\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4304, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [1249], "initializationEnd": [1280], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 1006, "tryExpressionEnd": 1010, "tryBlockStart": 1006, "tryBlockEnd": 1995, "catchExpressionStart": 1931, "catchExpressionEnd": 1951, "catchBlockStart": 1931, "catchBlockEnd": 1995, "exceptionHandlingCallStart": [1965], "exceptionHandlingCallEnd": [1988], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1306, "focalAPIEnd": 1329, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.optString(String)", "jSONObject.optString(String)", "ActivitiField.setName(value)"], "useStart": [1362, 1425, 1517], "useEnd": [1393, 1454, 1533], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluesoft-rnd/signavio-core-mirror/tree/master/platform extensions/bpmn20xmlbasic/src/de/hpi/bpmn2_0/factory/node/TaskFactory.java", "rawCode": "  @Property(name = \"tasktype\", value = \"Service\")\n  public ServiceTask createServiceTask(GenericShape shape) {\n    ServiceTask task = new ServiceTask();\n\n    task.setId(shape.getResourceId());\n    task.setName(shape.getProperty(\"name\"));\n\n    String implementation = shape.getProperty(\"implementation\");\n    if (implementation != null && !(implementation.length() == 0))\n      task.setImplementation(ServiceImplementation.fromValue(implementation));\n\n    /* Define Operation of the service task */\n    String operationString = shape.getProperty(\"operationref\");\n    if (operationString != null && !(operationString.length() == 0)) {\n      Operation operation = new Operation();\n      operation.setId(operationString);\n      task.setOperationRef(new QName(operationString));\n    }\n    String activitiServiceClassName = shape.getProperty(\"activiti_class\");\n    if (activitiServiceClassName != null && !(activitiServiceClassName.length() == 0)) {\n      task.setClassName(activitiServiceClassName);\n    }\n\n    try {\n      JSONArray activitiFields = shape.getPropertyJsonArray(\"activiti_fields\");\n      if (activitiFields != null && activitiFields.length() != 0) {\n        for (int i = 0; i < activitiFields.length(); i++) {\n          JSONObject field = activitiFields.getJSONObject(i);\n          String name = field.getString(\"name\");\n          String stringValue = field.optString(\"string_value\");\n          String expression = field.optString(\"expression\");\n\n          ActivitiField af = new ActivitiField();\n          af.setName(name);\n          if (stringValue != null && !stringValue.trim().isEmpty()) af.setStringValue(stringValue);\n          if (expression != null && !expression.trim().isEmpty()) af.setExpression(expression);\n          if (task.getExtensionElements() == null) {\n            task.setExtensionElements(new ExtensionElements());\n          }\n          task.getExtensionElements().add(af);\n        }\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return task;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4305, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(\"Status-Code\",)&&jSONObject.has(\"Reason-Phrase\",)", "guardType": "IF {", "guardExpressionStart": 875, "guardExpressionEnd": 928, "guardBlockStart": 875, "guardBlockEnd": 1490, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 947, "focalAPIEnd": 975, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JSONObject.append(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "JSONObject.append(value)", "jSONObject.getString(String)"], "useStart": [937, 1016, 1084, 1192, 1277, 1367, 1357, 1895], "useEnd": [976, 1043, 1113, 1214, 1304, 1395, 1396, 1915], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LearningRegistry/LearningRegistry/tree/master/data-pumps/adl/RIMList-LR/src/org/json/HTTP.java", "rawCode": "  /**\n   * Convert a JSONObject into an HTTP header. A request header must contain\n   *\n   * <pre>{\n   * Method: \"POST\" (for example),\n   * \"Request-URI\": \"/\" (for example),\n   * \"HTTP-Version\": \"HTTP/1.1\" (for example)\n   * }</pre>\n   *\n   * A response header must contain\n   *\n   * <pre>{\n   * \"HTTP-Version\": \"HTTP/1.1\" (for example),\n   * \"Status-Code\": \"200\" (for example),\n   * \"Reason-Phrase\": \"OK\" (for example)\n   * }</pre>\n   *\n   * Any other members of the JSONObject will be output as HTTP fields. The result will end with two\n   * CRLF pairs.\n   *\n   * @param jo A JSONObject\n   * @return An HTTP header string.\n   * @throws JSONException if the object does not contain enough information.\n   */\n  public static String toString(JSONObject jo) throws JSONException {\n    Iterator keys = jo.keys();\n    String string;\n    StringBuffer sb = new StringBuffer();\n    if (jo.has(\"Status-Code\") && jo.has(\"Reason-Phrase\")) {\n      sb.append(jo.getString(\"HTTP-Version\"));\n      sb.append(' ');\n      sb.append(jo.getString(\"Status-Code\"));\n      sb.append(' ');\n      sb.append(jo.getString(\"Reason-Phrase\"));\n    } else if (jo.has(\"Method\") && jo.has(\"Request-URI\")) {\n      sb.append(jo.getString(\"Method\"));\n      sb.append(' ');\n      sb.append('\"');\n      sb.append(jo.getString(\"Request-URI\"));\n      sb.append('\"');\n      sb.append(' ');\n      sb.append(jo.getString(\"HTTP-Version\"));\n    } else {\n      throw new JSONException(\"Not enough material for an HTTP header.\");\n    }\n    sb.append(CRLF);\n    while (keys.hasNext()) {\n      string = keys.next().toString();\n      if (!string.equals(\"HTTP-Version\")\n          && !string.equals(\"Status-Code\")\n          && !string.equals(\"Reason-Phrase\")\n          && !string.equals(\"Method\")\n          && !string.equals(\"Request-URI\")\n          && !jo.isNull(string)) {\n        sb.append(string);\n        sb.append(\": \");\n        sb.append(jo.getString(string));\n        sb.append(CRLF);\n      }\n    }\n    sb.append(CRLF);\n    return sb.toString();\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4306, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [541], "initializationEnd": [568], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 649, "focalAPIEnd": 676, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setMessage(value)", "jSONObject.getString(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)"], "useStart": [621, 762, 872, 996], "useEnd": [677, 786, 893, 1026], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbaye/repo/tree/master/android/src/com/socmaps/util/ServerResponseParser.java", "rawCode": "  /**\n   * Parse server (JSON) response and returns FacebookErrorResponse object.\n   *\n   * @param response would be String converted from server response (JSON file)\n   * @return FacebookErrorResponse object\n   * @see com.socmaps.entity.FacebookErrorResponse\n   */\n  public static FacebookErrorResponse parseFacebookError(String response) {\n    FacebookErrorResponse fbResponseEntity = new FacebookErrorResponse();\n\n    try {\n\n      JSONObject jObj = new JSONObject(response);\n      if (!jObj.isNull(\"error\")) {\n        JSONObject errObj = jObj.getJSONObject(\"error\");\n        if (!errObj.isNull(\"message\")) {\n          fbResponseEntity.setMessage(errObj.getString(\"message\"));\n        }\n        if (!errObj.isNull(\"type\")) {\n          fbResponseEntity.setType(errObj.getString(\"type\"));\n        }\n        if (!errObj.isNull(\"code\")) {\n          fbResponseEntity.setCode(errObj.getInt(\"code\"));\n        }\n        if (!errObj.isNull(\"error_subcode\")) {\n          fbResponseEntity.setErrorSubCode(errObj.getInt(\"error_subcode\"));\n        }\n      }\n    } catch (JSONException e) {\n      // TODO: handle exception\n    }\n\n    return fbResponseEntity;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4307, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 267, "focalAPIEnd": 290, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alibaba/fastjson/tree/master/src/test/java/com/alibaba/json/bvt/ByteArrayFieldTest_2.java", "rawCode": "  public void test_0() throws Exception {\n    Entity entity = new Entity(\"中华人民共和国\");\n    String text = JSON.toJSONString(entity);\n    JSONObject json = JSON.parseObject(text);\n    Assert.assertEquals(\n        TestUtils.encodeToBase64String(entity.getValue(), false), json.getString(\"value\"));\n\n    Entity entity2 = JSON.parseObject(text, Entity.class);\n    Assert.assertEquals(\"中华人民共和国\", new String(entity2.getValue(), \"UTF-8\"));\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4308, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [593], "initializationEnd": [619], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 486, "tryExpressionEnd": 490, "tryBlockStart": 486, "tryBlockEnd": 1146, "catchExpressionStart": 1088, "catchExpressionEnd": 1112, "catchBlockStart": 1088, "catchBlockEnd": 1146, "exceptionHandlingCallStart": [1120], "exceptionHandlingCallEnd": [1139], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 646, "focalAPIEnd": 679, "followUpCheck": "value.equals(\"InvalidSessionID\")", "checkType": "IF", "followUpCheckExpressionStart": 687, "followUpCheckExpressionEnd": 728, "followUpCheckBlockStart": 687, "followUpCheckBlockEnd": 1081, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/perexis/io-group-coordination-system/tree/master/MobileClient/src/pl/edu/agh/io/coordinator/utils/net/JSonProxy.java", "rawCode": "  @Override\n  public void removeItemFromUser(User user, UserItem item)\n      throws InvalidSessionIDException, InvalidUserException, InvalidUserItemException,\n          CouldNotRemoveException, NetworkException {\n    Map<String, Object> paramsInString = new HashMap<String, Object>();\n    paramsInString.put(\"sessionID\", SESSION_ID);\n    paramsInString.put(\"user\", user.getId());\n    paramsInString.put(\"item\", item.getId());\n    JSONObject params = new JSONObject(paramsInString);\n    try {\n      String jsonString = getJSonString(\"removeItemFromUser\", params);\n      JSONObject jsonObject = new JSONObject(jsonString);\n      String exception = jsonObject.getString(\"exception\");\n      if (exception.equals(\"InvalidSessionID\")) {\n        throw new InvalidSessionIDException();\n      } else if (exception.equals(\"InvalidUser\")) {\n        throw new InvalidUserException();\n      } else if (exception.equals(\"InvalidUserItem\")) {\n        throw new InvalidUserItemException();\n      } else if (exception.equals(\"CouldNotRemove\")) {\n        throw new CouldNotRemoveException();\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4309, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [313], "initializationEnd": [339], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 213, "tryExpressionEnd": 217, "tryBlockStart": 213, "tryBlockEnd": 880, "catchExpressionStart": 822, "catchExpressionEnd": 846, "catchBlockStart": 822, "catchBlockEnd": 880, "exceptionHandlingCallStart": [854], "exceptionHandlingCallEnd": [873], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 366, "focalAPIEnd": 399, "followUpCheck": "value.equals(\"InvalidSessionID\")", "checkType": "IF", "followUpCheckExpressionStart": 407, "followUpCheckExpressionEnd": 448, "followUpCheckBlockStart": 407, "followUpCheckBlockEnd": 815, "use": ["jSONObject.getJSONArray(String)"], "useStart": [539], "useEnd": [572], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/perexis/io-group-coordination-system/tree/master/MobileClient/src/pl/edu/agh/io/coordinator/utils/net/JSonProxy.java", "rawCode": "  @Override\n  public List<Message> getMessages() throws InvalidSessionIDException, NetworkException {\n    List<Message> toReturn = new LinkedList<Message>();\n    JSONObject params = createSessionOnlyParams();\n    try {\n      String jsonString = getJSonString(\"getMessages\", params);\n      JSONObject jsonObject = new JSONObject(jsonString);\n      String exception = jsonObject.getString(\"exception\");\n      if (exception.equals(\"InvalidSessionID\")) {\n        throw new InvalidSessionIDException();\n      } else {\n        JSONArray array = jsonObject.getJSONArray(\"retval\");\n        int limit = array.length();\n        for (int i = 0; i < limit; ++i) {\n          JSONObject jsonMessage = array.getJSONObject(i);\n          Message message = new Message(jsonMessage);\n          toReturn.add(message);\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    Comparator<Message> comparator =\n        new Comparator<Message>() {\n          @Override\n          public int compare(Message lhs, Message rhs) {\n            long ltime = lhs.getSentTime();\n            long rtime = rhs.getSentTime();\n            if (ltime < rtime) {\n              return -1;\n            } else if (ltime > rtime) {\n              return 1;\n            } else {\n              return 0;\n            }\n          }\n        };\n    Collections.sort(toReturn, comparator);\n    return toReturn;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4310, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [545], "initializationEnd": [568], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 249, "tryExpressionEnd": 253, "tryBlockStart": 249, "tryBlockEnd": 1177, "catchExpressionStart": 1123, "catchExpressionEnd": 1143, "catchBlockStart": 1123, "catchBlockEnd": 1177, "exceptionHandlingCallStart": [1151], "exceptionHandlingCallEnd": [1170], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 590, "focalAPIEnd": 612, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseDouble(value)"], "useStart": [629], "useEnd": [653], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DanDragan/Voice-Tasker/tree/master/src/ncit/android/voicetasker/Activity_Load.java", "rawCode": "  private void init(ArrayList<ListItem> list) {\n\n    dir = getExternalFilesDir(null);\n    subdir = Activity_ListDir.getSubDirName();\n    fileName = Activity_Show.getFileName();\n\n    File myInput = new File(dir + \"/\" + subdir + \"/\" + fileName);\n\n    try {\n      FileReader in = new FileReader(myInput);\n\n      StringWriter sw = new StringWriter();\n\n      char[] b = new char[1024 * 64];\n      while (in.read(b) > 0) {\n        sw.write(b);\n      }\n\n      String s = sw.toString();\n      JSONArray jArray = new JSONArray(s);\n      JSONObject bud = jArray.getJSONObject(0);\n      String budg = bud.getString(\"price\");\n      budget = Double.parseDouble(budg);\n      tvBudget.setText(\"BUDGET : \" + budget);\n\n      for (int i = 1; i < jArray.length(); i++) {\n        JSONObject obj = jArray.getJSONObject(i);\n\n        boolean status = obj.getBoolean(\"status\");\n        String price = obj.getString(\"price\");\n        String name = obj.getString(\"name\");\n        list.add(new ListItem(name, price, status));\n      }\n\n      in.close();\n\n      tvTotal.setText(\"TOTAL : \" + String.valueOf(getTotal()));\n\n      calculateTotal();\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4311, "initialization": ["JSONObject jSONObject = parseJson(String)"], "initializationStart": [249], "initializationEnd": [273], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["w(String,String)"], "tryExpressionStart": 78, "tryExpressionEnd": 82, "tryBlockStart": 78, "tryBlockEnd": 1756, "catchExpressionStart": 1338, "catchExpressionEnd": 1362, "catchBlockStart": 1338, "catchBlockEnd": 1432, "exceptionHandlingCallStart": [1372], "exceptionHandlingCallEnd": [1423], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 303, "focalAPIEnd": 324, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)"], "useStart": [352], "useEnd": [372], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajc-optimus/android-lib/tree/master/OAuth/Code/FaceBookApp/src/com/optimus/mobile/MainActivity.java", "rawCode": "    public void onComplete(final String response, final Object state) {\n      try {\n        // process the response here: executed in background thread\n        Log.i(\"Facebook-Example\", \"Response: \" + response.toString());\n        JSONObject json = Util.parseJson(response);\n        final String name = json.getString(\"bio\");\n        final String id = json.getString(\"id\");\n\n        URL img_value = null;\n        img_value = new URL(\"http://graph.facebook.com/\" + id + \"/picture?type=large\");\n        final Bitmap mIcon1 =\n            BitmapFactory.decodeStream(img_value.openConnection().getInputStream());\n\n        MainActivity.this.runOnUiThread(\n            new Runnable() {\n              public void run() {\n                ImageView user_picture = (ImageView) findViewById(R.id.ivProfilEpIC);\n                user_picture.setImageBitmap(mIcon1);\n              }\n            });\n        // then post the processed result back to the UI thread\n        // if we do not do this, an runtime exception will be generated\n        // e.g. \"CalledFromWrongThreadException: Only the original\n        // thread that created a view hierarchy can touch its views.\"\n        MainActivity.this.runOnUiThread(\n            new Runnable() {\n              public void run() {\n                mText.setText(name);\n              }\n            });\n      } catch (JSONException e) {\n        Log.w(\"Facebook-Example\", \"JSON Error in response\");\n      } catch (FacebookError e) {\n        Log.w(\"Facebook-Example\", \"Facebook Error: \" + e.getMessage());\n      } catch (MalformedURLException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      } catch (IOException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4312, "initialization": ["JSONObject jSONObject = fromObject(*)"], "initializationStart": [1170], "initializationEnd": [1209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1227, "focalAPIEnd": 1251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.startsWith(String)"], "useStart": [1227], "useEnd": [1271], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lmco/eurekastreams/tree/master/server/src/test/java/org/eurekastreams/server/service/restlets/StreamResourceTest.java", "rawCode": "  /**\n   * Test representing as JSON with a bad request.\n   *\n   * @throws Exception exception.\n   */\n  @Test\n  public void representTestBadParse() throws Exception {\n    // no callback in attributes, JSON response\n    final String query = \"\";\n    final String osId = \"guid\";\n    sut.setPathOverride(\"/resources/stream/guid/query/keywords/test\");\n\n    final Request request = mockery.mock(Request.class);\n    final Map<String, Object> attributes = new HashMap<String, Object>();\n    attributes.put(\"query\", query);\n    attributes.put(\"mode\", \"query\");\n    attributes.put(\"openSocialId\", osId);\n\n    mockery.checking(\n        new Expectations() {\n          {\n            allowing(request).getAttributes();\n            will(returnValue(attributes));\n\n            oneOf(principalDao).execute(\"guid\");\n            will(returnValue(principal));\n\n            oneOf(serviceActionController)\n                .execute(with(any(ServiceActionContext.class)), with(equal(action)));\n            will(throwException(new Exception(\"Something went wrong\")));\n          }\n        });\n\n    sut.initParams(request);\n\n    Representation actual = sut.represent(null);\n\n    JSONObject json = JSONObject.fromObject(actual.getText());\n\n    assertTrue(json.getString(\"status\").startsWith(\"Error\"));\n\n    mockery.assertIsSatisfied();\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4313, "initialization": ["JSONObject jSONObject = parseJson(String)"], "initializationStart": [104], "initializationEnd": [128], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["retry()"], "tryExpressionStart": 72, "tryExpressionEnd": 76, "tryBlockStart": 72, "tryBlockEnd": 1464, "catchExpressionStart": 1363, "catchExpressionEnd": 1387, "catchBlockStart": 1363, "catchBlockEnd": 1413, "exceptionHandlingCallStart": [1397], "exceptionHandlingCallEnd": [1404], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 156, "focalAPIEnd": 176, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [211, 272, 331], "useEnd": [239, 299, 355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Aulie/Freerider/tree/master/Freerider/src/no/ntnu/idi/socialhitchhiking/facebook/FBConnectionActivity.java", "rawCode": "    public void onComplete(final String response, Object state) {\n      try {\n        JSONObject json = Util.parseJson(response);\n        final String id = json.getString(\"id\");\n        final String firstName = json.getString(\"first_name\");\n        final String surName = json.getString(\"last_name\");\n        final String gender = json.getString(\"gender\");\n\n        FBConnectionActivity.this.runOnUiThread(\n            fbc =\n                new Runnable() {\n                  public void run() {\n                    User login = new User(firstName, id);\n                    login.setSurname(surName);\n                    // Setting gender\n                    if (gender.equals(\"male\")) {\n                      login.setGender(\"m\");\n                    } else if (gender.equals(\"female\")) {\n                      login.setGender(\"f\");\n                    }\n                    // username.setText(\"Welcome: \" + name+\"\\n ID: \"+id);\n                    Message msg = new Message();\n\n                    if (newUser(login.getID())) {\n                      System.out.println(\"Brukeren er NY!\");\n                      // new UserRequest(RequestType.CREATE_USER, login);\n                      newUserBoolean = true;\n                    }\n                    msg.obj = login;\n                    handler.sendMessage(msg);\n                  }\n                });\n      } catch (JSONException e) {\n        retry();\n      } catch (FacebookError e) {\n        retry();\n      }\n    }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4314, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 112, "tryExpressionEnd": 116, "tryBlockStart": 112, "tryBlockEnd": 393, "catchExpressionStart": 339, "catchExpressionEnd": 359, "catchBlockStart": 339, "catchBlockEnd": 393, "exceptionHandlingCallStart": [367], "exceptionHandlingCallEnd": [386], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 187, "focalAPIEnd": 221, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/guodian/parse/SmartHomeDataHandler.java", "rawCode": "  public static ResultData parseExecuteModeResult(String data) {\n    ResultData result = new ResultData();\n\n    try {\n      JSONObject jb = new JSONObject(data);\n      result.Exception = jb.getString(JsonTag.TAGException);\n      result.Reason = jb.getString(JsonTag.TAGReason);\n      result.Result = jb.getString(JsonTag.TAGResult);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return result;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4315, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 276, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONObject(String)", "jSONObject.put(String,String)", "jSONObject.getString(String)", "bindJSON(Class<? extends Series>,jSONObject)"], "useStart": [319, 359, 405, 742], "useEnd": [353, 385, 432, 775], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jenkinsci/plot-plugin/tree/master/src/main/java/hudson/plugins/plot/SeriesFactory.java", "rawCode": "  /**\n   * Using file and label and the Stapler request, create a subclass of series that can process the\n   * type selected.\n   *\n   * @param formData JSON data for series\n   */\n  public static Series createSeries(JSONObject formData, StaplerRequest req) {\n    String file = formData.getString(\"file\");\n    formData = formData.getJSONObject(\"fileType\");\n    formData.put(\"file\", file);\n    String type = formData.getString(\"value\");\n    Class<? extends Series> typeClass = null;\n\n    if (\"properties\".equals(type)) {\n      typeClass = PropertiesSeries.class;\n    } else if (\"csv\".equals(type)) {\n      typeClass = CSVSeries.class;\n    } else if (\"xml\".equals(type)) {\n      typeClass = XMLSeries.class;\n    }\n\n    return typeClass != null ? req.bindJSON(typeClass, formData) : null;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4316, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [357], "initializationEnd": [384], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "e(String,*)"], "tryExpressionStart": 284, "tryExpressionEnd": 288, "tryBlockStart": 284, "tryBlockEnd": 838, "catchExpressionStart": 777, "catchExpressionEnd": 797, "catchBlockStart": 777, "catchBlockEnd": 838, "exceptionHandlingCallStart": [816, 805], "exceptionHandlingCallEnd": [830, 831], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 406, "focalAPIEnd": 431, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Menuplan.parseDate(value)", "jSONObject.getJSONArray(String)"], "useStart": [439, 484], "useEnd": [459, 513], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ese-unibe-ch/ese2013-team7/tree/master/Programming/Mensa@Unibe/src/com/ese2013/mensaunibe/model/menu/MenuData.java", "rawCode": "  /**\n   * returns the daily menu of a specific mensa\n   *\n   * @param mensaId\n   * @return Menuplan of one day\n   */\n  public Menuplan getMenuList(int mensaId) {\n    Menuplan plan = new Menuplan();\n    rq.setUrl(String.format(ApiUrl.API_DAILY_MENU, mensaId));\n    rq.execute();\n\n    try {\n      JSONObject js = rq.getJSONData();\n      JSONObject content = js.getJSONObject(\"content\");\n      String date = content.getString(\"date\");\n      plan.parseDate(date);\n      JSONArray list = content.getJSONArray(\"menus\");\n\n      for (int i = 0; i < list.length(); i++) {\n        DailyMenuBuilder mb = new DailyMenuBuilder();\n        mb.parseJson(list.getJSONObject(i));\n        DailyMenu menu = mb.create();\n        plan.add(menu);\n        plan.setDate(menu.getDate());\n      }\n    } catch (Exception e) {\n      Log.e(TAG, e.getMessage());\n    }\n    return plan;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4317, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["toString()", "e(String,*,*)"], "tryExpressionStart": 117, "tryExpressionEnd": 121, "tryBlockStart": 117, "tryBlockEnd": 264, "catchExpressionStart": 173, "catchExpressionEnd": 197, "catchBlockStart": 173, "catchBlockEnd": 264, "exceptionHandlingCallStart": [218, 207], "exceptionHandlingCallEnd": [230, 234], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 138, "focalAPIEnd": 163, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggounot/BnfData/tree/master/src/eu/gounot/bnfdata/util/JsonHelper.java", "rawCode": "  public static String getStringOrNull(JSONObject jsonObject, String key) {\n    if (!jsonObject.isNull(key)) {\n      try {\n        return jsonObject.getString(key);\n      } catch (JSONException e) {\n        Log.e(TAG, e.toString(), e);\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4318, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(\"Status-Code\",)&&jSONObject.has(\"Reason-Phrase\",)", "guardType": "IF {", "guardExpressionStart": 867, "guardExpressionEnd": 918, "guardBlockStart": 867, "guardBlockEnd": 1472, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 937, "focalAPIEnd": 964, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JSONObject.append(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "JSONObject.append(value)", "jSONObject.getString(String)"], "useStart": [927, 1005, 1072, 1177, 1261, 1350, 1340, 1836], "useEnd": [965, 1031, 1100, 1198, 1287, 1377, 1378, 1850], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/celer/detroit-scheme/tree/master/lib/json/json/org/json/HTTP.java", "rawCode": "  /**\n   * Convert a JSONObject into an HTTP header. A request header must contain\n   *\n   * <pre>{\n   * Method: \"POST\" (for example),\n   * \"Request-URI\": \"/\" (for example),\n   * \"HTTP-Version\": \"HTTP/1.1\" (for example)\n   * }</pre>\n   *\n   * A response header must contain\n   *\n   * <pre>{\n   * \"HTTP-Version\": \"HTTP/1.1\" (for example),\n   * \"Status-Code\": \"200\" (for example),\n   * \"Reason-Phrase\": \"OK\" (for example)\n   * }</pre>\n   *\n   * Any other members of the JSONObject will be output as HTTP fields. The result will end with two\n   * CRLF pairs.\n   *\n   * @param o A JSONObject\n   * @return An HTTP header string.\n   * @throws JSONException if the object does not contain enough information.\n   */\n  public static String toString(JSONObject o) throws JSONException {\n    Iterator keys = o.keys();\n    String s;\n    StringBuffer sb = new StringBuffer();\n    if (o.has(\"Status-Code\") && o.has(\"Reason-Phrase\")) {\n      sb.append(o.getString(\"HTTP-Version\"));\n      sb.append(' ');\n      sb.append(o.getString(\"Status-Code\"));\n      sb.append(' ');\n      sb.append(o.getString(\"Reason-Phrase\"));\n    } else if (o.has(\"Method\") && o.has(\"Request-URI\")) {\n      sb.append(o.getString(\"Method\"));\n      sb.append(' ');\n      sb.append('\"');\n      sb.append(o.getString(\"Request-URI\"));\n      sb.append('\"');\n      sb.append(' ');\n      sb.append(o.getString(\"HTTP-Version\"));\n    } else {\n      throw new JSONException(\"Not enough material for an HTTP header.\");\n    }\n    sb.append(CRLF);\n    while (keys.hasNext()) {\n      s = keys.next().toString();\n      if (!s.equals(\"HTTP-Version\")\n          && !s.equals(\"Status-Code\")\n          && !s.equals(\"Reason-Phrase\")\n          && !s.equals(\"Method\")\n          && !s.equals(\"Request-URI\")\n          && !o.isNull(s)) {\n        sb.append(s);\n        sb.append(\": \");\n        sb.append(o.getString(s));\n        sb.append(CRLF);\n      }\n    }\n    sb.append(CRLF);\n    return sb.toString();\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4319, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "w(String,*)"], "tryExpressionStart": 684, "tryExpressionEnd": 688, "tryBlockStart": 684, "tryBlockEnd": 1389, "catchExpressionStart": 1252, "catchExpressionEnd": 1274, "catchBlockStart": 1252, "catchBlockEnd": 1319, "exceptionHandlingCallStart": [1295, 1284], "exceptionHandlingCallEnd": [1309, 1310], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1144, "focalAPIEnd": 1168, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)"], "useStart": [1170], "useEnd": [1201], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pobrienjhu/ase_w4156/tree/master/ASE - Android/SurveySays/src/edu/columbia/w4156/ase/android/MainActivity.java", "rawCode": "    @Override\n    protected List<EventListEntry> doInBackground(GetEventsTaskArgs... params) {\n      ArrayList<EventListEntry> results = new ArrayList<EventListEntry>();\n      GetEventsTaskArgs args = params[0];\n      this.receiver = args.getReceiver();\n      String controller = \"getEvents\" + (args.isPublicEvents() ? \"Public\" : \"Private\") + \".do\";\n      URI uri = null;\n      try {\n        uri = new URI(args.getBaseUrl() + \"/app/\" + controller);\n      } catch (URISyntaxException e) {\n        Log.w(TAG, e.getMessage());\n        return results;\n      }\n\n      DefaultHttpClient httpClient = Common.getHttpClient(uri, args.getSession());\n      HttpGet get = new HttpGet(uri);\n      try {\n        HttpResponse response = httpClient.execute(get);\n        JSONArray array =\n            new JSONArray(Common.inputStreamToString(response.getEntity().getContent()));\n        int length = array.length();\n        results.ensureCapacity(length);\n        for (int i = 0; i < length; i++) {\n          JSONObject object = array.getJSONObject(i);\n          EventListEntry entry =\n              new EventListEntry(\n                  object.getLong(\"id\"), object.getString(\"name\"), object.getString(\"description\"));\n          results.add(entry);\n        }\n      } catch (IOException e) {\n        Log.w(TAG, e.getMessage());\n      } catch (JSONException e) {\n        Log.w(TAG, e.getMessage());\n      }\n      return results;\n    }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4320, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 267, "focalAPIEnd": 291, "followUpCheck": "!this.defaultsForProperty.containsKey(value)", "checkType": "IF", "followUpCheckExpressionStart": 480, "followUpCheckExpressionEnd": 526, "followUpCheckBlockStart": 480, "followUpCheckBlockEnd": 593, "use": ["jSONObject.getString(String)", "jSONObject.optBoolean(String)", "jSONObject.optString(String)"], "useStart": [311, 399, 446], "useEnd": [337, 427, 473], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/editor/server/src/de/hpi/bpmn2_0/migration/MigrationHelper.java", "rawCode": "  /**\n   * Associates the properties with their types and initial values\n   *\n   * @param prefix\n   * @param property\n   * @throws JSONException\n   */\n  private void setDefinitionsForProperty(String prefix, JSONObject property) throws JSONException {\n    String id = property.getString(\"id\");\n    String type = property.getString(\"type\");\n\n    Object value;\n\n    if (type.equals(\"Boolean\")) value = property.optBoolean(\"value\");\n    else value = property.optString(\"value\");\n\n    if (!this.defaultsForProperty.containsKey(id))\n      this.defaultsForProperty.put(prefix + id, value.toString());\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4321, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new CloudException(*)"], "tryExpressionStart": 242, "tryExpressionEnd": 246, "tryBlockStart": 242, "tryBlockEnd": 2829, "catchExpressionStart": 2763, "catchExpressionEnd": 2787, "catchBlockStart": 2763, "catchBlockEnd": 2829, "exceptionHandlingCallStart": [2801], "exceptionHandlingCallEnd": [2822], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 286, "focalAPIEnd": 306, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/greese/dasein-cloud-openstack/tree/master/src/main/java/org/dasein/cloud/openstack/nova/os/ext/rackspace/db/RackspaceRDBMS.java", "rawCode": "  private @Nullable Database toDatabase(@Nonnull ProviderContext ctx, @Nullable JSONObject json)\n      throws CloudException, InternalException {\n    if (json == null) {\n      return null;\n    }\n\n    String regionId = ctx.getRegionId();\n\n    try {\n      String dbId = (json.has(\"id\") ? json.getString(\"id\") : null);\n\n      if (dbId == null) {\n        return null;\n      }\n\n      String name = (json.has(\"name\") ? json.getString(\"name\") : null);\n\n      if (name == null) {\n        name = \"RDBMS MySQL #\" + dbId;\n      }\n\n      DatabaseState currentState = DatabaseState.PENDING;\n      String status = (json.has(\"status\") ? json.getString(\"status\") : null);\n\n      if (status != null) {\n        if (status.equalsIgnoreCase(\"BUILD\") || status.equalsIgnoreCase(\"building\")) {\n          currentState = DatabaseState.PENDING;\n        } else if (status.equalsIgnoreCase(\"ACTIVE\") || status.equalsIgnoreCase(\"AVAILABLE\")) {\n          currentState = DatabaseState.AVAILABLE;\n        } else if (status.equalsIgnoreCase(\"RESIZE\")) {\n          currentState = DatabaseState.MODIFYING;\n        } else if (status.equalsIgnoreCase(\"SHUTDOWN\")) {\n          currentState = DatabaseState.RESTARTING;\n        } else if (status.equalsIgnoreCase(\"BLOCKED\")) {\n          currentState = DatabaseState.PENDING;\n        } else {\n          System.out.println(\"DEBUG OS Rackspace DB STATE: \" + status);\n        }\n      }\n      long created =\n          (json.has(\"created\") ? getProvider().parseTimestamp(json.getString(\"created\")) : -1L);\n\n      String hostname = (json.has(\"hostname\") ? json.getString(\"hostname\") : null);\n      String flavor = null;\n\n      if (json.has(\"flavor\")) {\n        JSONObject f = json.getJSONObject(\"flavor\");\n\n        if (f != null && f.has(\"id\")) {\n          flavor = f.getString(\"id\");\n        }\n      }\n      int size = 0;\n\n      if (json.has(\"volume\")) {\n        JSONObject v = json.getJSONObject(\"volume\");\n\n        if (v != null && v.has(\"size\")) {\n          size = v.getInt(\"size\");\n        }\n      }\n      int port = (json.has(\"port\") ? json.getInt(\"port\") : 3306);\n\n      Database database = new Database();\n\n      database.setAdminUser(null);\n      database.setAllocatedStorageInGb(size);\n      database.setCreationTimestamp(created);\n      database.setCurrentState(currentState);\n      database.setEngine(DatabaseEngine.MYSQL);\n      database.setHighAvailability(false);\n      database.setHostName(hostname);\n      database.setHostPort(port);\n      database.setName(name);\n      database.setProductSize(flavor + \":\" + size);\n      database.setProviderDatabaseId(dbId);\n      database.setProviderDataCenterId(regionId + \"-a\");\n      database.setProviderOwnerId(getTenantId());\n      database.setProviderRegionId(regionId);\n      return database;\n    } catch (JSONException e) {\n      throw new CloudException(e);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4322, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [1038], "initializationEnd": [1067], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new IOException(*)"], "tryExpressionStart": 803, "tryExpressionEnd": 807, "tryBlockStart": 803, "tryBlockEnd": 2582, "catchExpressionStart": 2519, "catchExpressionEnd": 2543, "catchBlockStart": 2519, "catchBlockEnd": 2582, "exceptionHandlingCallStart": [2557], "exceptionHandlingCallEnd": [2575], "configuration": ["jSONObject.getLong(String)", "jSONObject.getJSONArray(String)", "jSONObject.getLong(String)", "jSONObject.getInt(String)"], "configurationStart": [1092, 1256, 1548, 1597], "configurationEnd": [1119, 1286, 1576, 1625], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1656, "focalAPIEnd": 1685, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getLong(String)"], "useStart": [1711, 1775], "useEnd": [1740, 1802], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elka-projekt/cs-voltdb/tree/master/src/frontend/org/voltdb/export/ExportProtoMessage.java", "rawCode": "  /**\n   * Provide a simple accessor to read the list of advertised data sources returned as the payload\n   * to an open response.\n   *\n   * @return List of data sources advertised with an open response.\n   * @throws IOException\n   */\n  public Pair<ArrayList<AdvertisedDataSource>, ArrayList<String>> getAdvertisedDataSourcesAndNodes()\n      throws IOException {\n    if (!isOpenResponse()) {\n      return null;\n    }\n\n    ArrayList<AdvertisedDataSource> sources = new ArrayList<AdvertisedDataSource>();\n    ArrayList<String> nodes = new ArrayList<String>();\n    Pair<ArrayList<AdvertisedDataSource>, ArrayList<String>> retval =\n        new Pair<ArrayList<AdvertisedDataSource>, ArrayList<String>>(sources, nodes);\n\n    byte stringBytes[] = new byte[m_data.remaining()];\n    m_data.get(stringBytes);\n    try {\n      JSONObject jsObj = new JSONObject(new String(stringBytes, Charsets.UTF_8));\n\n      JSONArray sourcesArray = jsObj.getJSONArray(\"sources\");\n      for (int i = 0; i < sourcesArray.length(); i++) {\n        JSONObject source = sourcesArray.getJSONObject(i);\n        long version = source.getLong(\"adVersion\");\n        if (version != 0) {\n          throw new IOException(\"Unexpected ad version \" + version);\n        }\n        JSONArray columns = source.getJSONArray(\"columns\");\n        ArrayList<VoltType> types = new ArrayList<VoltType>(columns.length());\n        ArrayList<String> names = new ArrayList<String>(columns.length());\n        ArrayList<Integer> lengths = new ArrayList<Integer>(columns.length());\n\n        long generation = source.getLong(\"generation\");\n        int p_id = source.getInt(\"partitionId\");\n        String t_signature = source.getString(\"signature\");\n        String t_name = source.getString(\"tableName\");\n        long sysStartTimestamp = source.getLong(\"startTime\");\n\n        for (int jj = 0; jj < columns.length(); jj++) {\n          JSONObject column = columns.getJSONObject(jj);\n          names.add(column.getString(\"name\"));\n          types.add(VoltType.get((byte) column.getInt(\"type\")));\n          lengths.add(column.getInt(\"length\"));\n        }\n        sources.add(\n            new AdvertisedDataSource(\n                p_id, t_signature, t_name, sysStartTimestamp, generation, names, types, lengths));\n      }\n\n      // deserialize the list of running hosts\n      JSONArray hostsArray = jsObj.getJSONArray(\"clusterMetadata\");\n      for (int i = 0; i < hostsArray.length(); i++) {\n        String hostname = hostsArray.getString(i);\n\n        nodes.add(hostname);\n      }\n    } catch (JSONException e) {\n      throw new IOException(e);\n    }\n\n    return retval;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4323, "initialization": ["JSONObject jSONObject = callJson(*)"], "initializationStart": [268], "initializationEnd": [304], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 316, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmidde/JenkinsBlame/tree/master/src/de/fhb/sq/JenkinsJsonParser.java", "rawCode": "  /**\n   * holt den aktuellen Status des letzten Build\n   *\n   * @return gibt blue oder red zurueck, null im Fehlerfall\n   */\n  @Override\n  public String getColor() {\n\n    String tree = \"tree=color\", s = null;\n    jdc = new JenkinsDataCaller();\n    try {\n      json = jdc.callJson(getGeneralURL() + tree);\n      s = json.getString(\"color\");\n    } catch (IOException e) {\n      s = null;\n    } catch (JSONException e) {\n      s = null;\n    }\n    return s;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4324, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [176], "initializationEnd": [208], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 217, "guardExpressionEnd": 253, "guardBlockStart": 217, "guardBlockEnd": 306, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 261, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.trim()"], "useStart": [261], "useEnd": [305], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluesoft-rnd/signavio-core-mirror/tree/master/platform extensions/diagram core/src/org/oryxeditor/server/diagram/generic/GenericDiagramBuilder.java", "rawCode": "  protected String parseStencilsetNamespaceInternal(JSONObject json) throws JSONException {\n    if (json != null && json.has(\"stencilset\")) {\n      JSONObject jsonStencilset = json.getJSONObject(\"stencilset\");\n\n      if (jsonStencilset.has(\"namespace\")) return jsonStencilset.getString(\"namespace\").trim();\n    }\n    return null;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4325, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 130, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "MappingTable.getCRC(value)", "MappingTable.getName(value)", "jSONObject.getString(String)"], "useStart": [195, 260, 305, 352], "useEnd": [236, 280, 326, 394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/user_profile/sapisync/src/main/java/com/funambol/sapisync/SapiSyncStrategy.java", "rawCode": "  private ItemComparisonResult compareItems(JSONObject item, MappingTable mapping)\n      throws JSONException {\n    String guid = item.getString(SapiSyncManager.ID_FIELD);\n    String remoteCRC = item.getString(SapiSyncManager.CRC_FIELD);\n    String localCRC = mapping.getCRC(guid);\n    String localName = mapping.getName(guid);\n    String remoteName = item.getString(SapiSyncManager.NAME_FIELD);\n\n    // We need to know if the content or the metadata changed\n    if (Log.isLoggable(Log.DEBUG)) {\n      Log.debug(TAG_LOG, \"Comparing items corresponding to id \" + guid);\n      Log.debug(TAG_LOG, \"Local name \" + localName + \" local CRC \" + localCRC);\n      Log.debug(TAG_LOG, \"Remote name \" + remoteName + \" remote CRC \" + remoteCRC);\n    }\n\n    boolean contentEqual = (localCRC != null && localCRC.equals(remoteCRC));\n    boolean metaEqual = (localName != null && localName.equals(remoteName));\n\n    return new ItemComparisonResult(contentEqual, metaEqual);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4326, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [371], "initializationEnd": [397], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 658, "focalAPIEnd": 676, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setId(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [639, 711, 773, 836, 896, 961], "useEnd": [677, 734, 800, 860, 920, 990], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wanglu0919/chianwuxi_android/tree/master/chinaw/src/com/wuxi/app/engine/HotPostService.java", "rawCode": "  /**\n   * 解析热点话题类帖子回复单条数据\n   *\n   * @param jsonArray\n   * @return\n   * @throws JSONException\n   */\n  private List<HotPostReply> getHotPostReplies(JSONArray jsonArray) throws JSONException {\n    if (jsonArray != null) {\n      List<HotPostReply> hotPostReplies = new ArrayList<HotPostReply>();\n\n      for (int i = 0; i < jsonArray.length(); i++) {\n        JSONObject jb = jsonArray.getJSONObject(i);\n\n        HotPostWrapper hotPostWrapper = new HotPostWrapper();\n        HotPostReplyWrapper hotPostReplyWrapper = hotPostWrapper.new HotPostReplyWrapper();\n        HotPostReply hotPostReply = hotPostReplyWrapper.new HotPostReply();\n\n        hotPostReply.setId(jb.getString(\"id\"));\n        hotPostReply.setContent(jb.getString(\"content\"));\n        hotPostReply.setHotreviewid(jb.getString(\"hotreviewid\"));\n        hotPostReply.setSenduser(jb.getString(\"senduser\"));\n        hotPostReply.setSendtime(jb.getString(\"sendtime\"));\n        hotPostReply.setAnswercontent(jb.getString(\"answercontent\"));\n\n        hotPostReplies.add(hotPostReply);\n      }\n\n      return hotPostReplies;\n    }\n\n    return null;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4327, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["toString()", "e(String,String)", "printStackTrace()"], "tryExpressionStart": 159, "tryExpressionEnd": 163, "tryBlockStart": 159, "tryBlockEnd": 1904, "catchExpressionStart": 1601, "catchExpressionEnd": 1625, "catchBlockStart": 1601, "catchBlockEnd": 1754, "exceptionHandlingCallStart": [1707, 1674, 1728], "exceptionHandlingCallEnd": [1719, 1720, 1747], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 405, "focalAPIEnd": 437, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setFirstName(value)", "jSONObject.getString(String)", "jSONObject.getDouble(String)", "jSONObject.getDouble(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getDouble(String)", "jSONObject.getString(String)", "jSONObject.getDouble(String)", "jSONObject.getString(String)", "jSONObject.toString(int)"], "useStart": [392, 460, 509, 552, 599, 707, 759, 813, 862, 919, 1515], "useEnd": [438, 491, 535, 578, 629, 738, 788, 843, 889, 953, 1536], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rotinom/CSE-5324/tree/master/MyTutor/src/com/mytutor/profile/Profile.java", "rawCode": "  /**\n   * Pull data out of a JSON encoded string\n   *\n   * @param data\n   */\n  public void deserialize(String email, String data) {\n    setEmail(email);\n\n    try {\n      // Get a session\n      ServerSession session = ServerSession.create();\n\n      json_ = new JSONArray(data);\n\n      for (int i = 0; i < json_.length(); i++) {\n        JSONObject json_data = json_.getJSONObject(i);\n\n        setFirstName(json_data.getString(\"firstName\"));\n        setLastName(json_data.getString(\"lastName\"));\n        lat_ = json_data.getDouble(\"lat\");\n        lon_ = json_data.getDouble(\"lon\");\n        setZipCode(json_data.getString(\"zipcode\"));\n        premium_ = (0 != json_data.getInt(\"premium\"));\n        setSchedule(json_data.getString(\"schedule\"));\n        rating_ = json_data.getDouble(\"rating\");\n        setProfileText(json_data.getString(\"profile\"));\n        rate_ = json_data.getDouble(\"rate\");\n\n        String subcat_id = json_data.getString(\"subCategory\");\n        String subcat = new String();\n\n        String category = new String();\n\n        category = session.getCategory(subcat_id);\n        subcat = session.getSubcategoryNameFromId(subcat_id);\n\n        // Create a list in the map if necessary\n        if (!getCategories().containsKey(category)) {\n          ArrayList<String> subcat_list = new ArrayList<String>();\n          getCategories().put(category, subcat_list);\n        }\n\n        // Append the subcategory to our main category list\n        getCategories().get(category).add(subcat);\n\n        String s = json_data.toString(i);\n        Log.d(\"Profile\", \"Deserialized: \" + s);\n      }\n\n    } catch (JSONException e) {\n      // TODO Auto-generated catch block\n      Log.e(\"Profile\", \"Exception! \" + e.toString());\n      e.printStackTrace();\n    } catch (Exception e) {\n      // TODO Auto-generated catch block\n      Log.e(\"Profile\", \"Exception! \" + e.toString());\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4328, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new ScreenConfigException(*)"], "tryExpressionStart": 221, "tryExpressionEnd": 225, "tryBlockStart": 221, "tryBlockEnd": 359, "catchExpressionStart": 286, "catchExpressionEnd": 310, "catchBlockStart": 286, "catchBlockEnd": 359, "exceptionHandlingCallStart": [324], "exceptionHandlingCallEnd": [352], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 248, "focalAPIEnd": 278, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 364, "followUpCheckExpressionEnd": 389, "followUpCheckBlockStart": 364, "followUpCheckBlockEnd": 961, "use": ["JSONObject.split(value)"], "useStart": [420], "useEnd": [467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/branches/crux/5.1/crux-dev/src/main/java/org/cruxframework/crux/core/rebind/screen/ViewFactory.java", "rawCode": "  /**\n   * @param view\n   * @param elem\n   * @throws ScreenConfigException\n   */\n  private void parseViewUseFormatterAttribute(View view, JSONObject elem)\n      throws ScreenConfigException {\n    String formatterStr;\n    try {\n      formatterStr = elem.getString(\"useFormatter\");\n    } catch (JSONException e) {\n      throw new ScreenConfigException(e);\n    }\n    if (formatterStr != null) {\n      String[] formatters = RegexpPatterns.REGEXP_COMMA.split(formatterStr);\n      for (String formatter : formatters) {\n        formatter = formatter.trim();\n        if (!StringUtils.isEmpty(formatter)) {\n          if (Formatters.getFormatter(formatter) == null) {\n            throw new ScreenConfigException(\n                \"Formatter [\"\n                    + formatter\n                    + \"], declared on view [\"\n                    + view.getId()\n                    + \"], not found!\");\n          }\n          view.addFormatter(formatter);\n        }\n      }\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4329, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 240, "guardExpressionEnd": 268, "guardBlockStart": 240, "guardBlockEnd": 381, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 291, "focalAPIEnd": 320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equals(value)"], "useStart": [352], "useEnd": [373], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/5.0.4/Crux/src/core/org/cruxframework/crux/core/rebind/screen/ViewFactory.java", "rawCode": "  /**\n   * Test if a target json object represents a View definition for Crux.\n   *\n   * @param cruxObject\n   * @return\n   * @throws JSONException\n   */\n  private boolean isScreenDefinition(JSONObject cruxObject) throws JSONException {\n    if (cruxObject.has(\"_type\")) {\n      String type = cruxObject.getString(\"_type\");\n      return (type != null && \"screen\".equals(type));\n    }\n    return false;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4330, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 311, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [350, 393, 427], "useEnd": [383, 417, 453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anbangr/trusted-mr/tree/master/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesApps.java", "rawCode": "  public void verifyAppAttemptsInfo(JSONObject info, RMAppAttempt appAttempt)\n      throws JSONException, Exception {\n\n    assertEquals(\"incorrect number of elements\", 6, info.length());\n\n    verifyAppAttemptInfoGeneric(\n        appAttempt,\n        info.getInt(\"id\"),\n        info.getLong(\"startTime\"),\n        info.getString(\"containerId\"),\n        info.getString(\"nodeHttpAddress\"),\n        info.getString(\"nodeId\"),\n        info.getString(\"logsLink\"));\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4331, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["showSystemErrorMessage(String)"], "tryExpressionStart": 864, "tryExpressionEnd": 868, "tryBlockStart": 864, "tryBlockEnd": 2210, "catchExpressionStart": 2061, "catchExpressionEnd": 2085, "catchBlockStart": 2061, "catchBlockEnd": 2210, "exceptionHandlingCallStart": [2093], "exceptionHandlingCallEnd": [2203], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 899, "focalAPIEnd": 928, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "appendYailForFormProperties(String,jSONObject,boolean,StringBuilder)", "getComponentParent(value,String,JSONObject)", "StringBuilder.append(value)", "getYailForComponentPropertiesHelper(String,JSONObject,StringBuilder,value)"], "useStart": [952, 1097, 1411, 1647, 1920], "useEnd": [981, 1173, 1470, 1877, 2002], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rkipper/AppInventor_RK/tree/master/appinventor/blockslib/src/openblocks/yacodeblocks/YABlockCompiler.java", "rawCode": "  /**\n   * Get the Yail expression to evaluate to set the properties of a component, and (except in the\n   * case of a form) to add the component to it parent. This code does not recurse into the\n   * subcomponents. The callers of this procedure need to do the recursion.\n   *\n   * @param formName The name of the form that contains the component\n   * @param formProperties a JSON description of the form\n   * @param jsonToWalk a JSON description of this component\n   * @param includeComments a boolean saying whether top include the block comments in the code as\n   *     Yail comments\n   * @return the Yail code as a string\n   */\n  public static String getYailForComponentProperties(\n      String formName,\n      final JSONObject formProperties,\n      JSONObject jsonToWalk,\n      boolean includeComments) {\n    StringBuilder yailCode = new StringBuilder();\n    try {\n      String componentName = jsonToWalk.getString(\"$Name\");\n\n      String genus = jsonToWalk.getString(\"$Type\");\n      if (genus.equals(\"Form\")) {\n        // the Yail code for a form is different from other components.\n        appendYailForFormProperties(formName, jsonToWalk, includeComments, yailCode);\n      } else {\n        // if this component is not itself a form, generate the\n        // Yail code that adds the component to its parent, followed by\n        // the code that sets each property of the component\n        String parent = getComponentParent(componentName, formName, formProperties);\n        String code = \"\";\n        // add the component\n        if (includeComments) {\n          code += YAIL_COMMENT_MAJOR + componentName + YAIL_LINE_FEED;\n        }\n        yailCode\n            .append(code)\n            .append(YAIL_ADD_COMPONENT)\n            .append(parent)\n            .append(YAIL_SPACER)\n            .append(genus)\n            .append(YAIL_SPACER)\n            .append(componentName)\n            .append(YAIL_SPACER);\n        getYailForComponentPropertiesHelper(formName, jsonToWalk, yailCode, componentName);\n        yailCode.append(YAIL_CLOSE_BLOCK);\n      }\n    } catch (JSONException e) {\n      FeedbackReporter.showSystemErrorMessage(\n          \"Error generating component Yail for source \" + jsonToWalk);\n    }\n    return yailCode.toString();\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4332, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.containsKey(name,)", "guardType": "IF {", "guardExpressionStart": 104, "guardExpressionEnd": 137, "guardBlockStart": 104, "guardBlockEnd": 192, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 158, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setId(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getInteger(String)", "jSONObject.getInteger(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [146, 259, 366, 466, 573, 683, 789], "useEnd": [185, 289, 397, 494, 606, 714, 819], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jior/isdp/tree/master/workspace/glaf-isdp/src/main/java/com/glaf/isdp/util/RoleUse2JsonFactory.java", "rawCode": "  public static RoleUse2 jsonToObject(JSONObject jsonObject) {\n    RoleUse2 model = new RoleUse2();\n    if (jsonObject.containsKey(\"id\")) {\n      model.setId(jsonObject.getString(\"id\"));\n    }\n    if (jsonObject.containsKey(\"roleId\")) {\n      model.setRoleId(jsonObject.getString(\"roleId\"));\n    }\n    if (jsonObject.containsKey(\"useType\")) {\n      model.setUseType(jsonObject.getString(\"useType\"));\n    }\n    if (jsonObject.containsKey(\"pid\")) {\n      model.setPid(jsonObject.getInteger(\"pid\"));\n    }\n    if (jsonObject.containsKey(\"treeType\")) {\n      model.setTreeType(jsonObject.getInteger(\"treeType\"));\n    }\n    if (jsonObject.containsKey(\"userchk\")) {\n      model.setUserchk(jsonObject.getString(\"userchk\"));\n    }\n    if (jsonObject.containsKey(\"treeId\")) {\n      model.setTreeId(jsonObject.getString(\"treeId\"));\n    }\n\n    return model;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4333, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [408], "initializationEnd": [436], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 460, "focalAPIEnd": 486, "followUpCheck": "value.equals(\"postLineCalculated\") || value.equals(\"segment_attribute\") || value.equals(\"attribute\")", "checkType": "IF", "followUpCheckExpressionStart": 520, "followUpCheckExpressionEnd": 648, "followUpCheckBlockStart": 520, "followUpCheckBlockEnd": 999, "use": ["deserialize(jSONObject,String,*)", "deserialize(jSONObject,String,*)", "jSONObject.getJSONObject(String)"], "useStart": [721, 890, 1040], "useEnd": [798, 965, 1097], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/WorkSheetJSONDeserializer.java", "rawCode": "  private void deserializeOptions(\n      JSONObject workSheetDefinitionJSON, WorkSheetDefinition workSheetDefinition)\n      throws Exception {\n    JSONArray optionsJSON =\n        workSheetDefinitionJSON.getJSONArray(WorkSheetSerializationUtils.FIELDS_OPTIONS);\n    WorksheetFieldsOptions options = new WorksheetFieldsOptions();\n    for (int i = 0; i < optionsJSON.length(); i++) {\n\n      JSONObject aField = optionsJSON.getJSONObject(i);\n      String nature = aField.getString(\"nature\");\n      Field field = null;\n      if (nature.equals(\"postLineCalculated\")\n          || nature.equals(\"segment_attribute\")\n          || nature.equals(\"attribute\")) {\n        Attribute attribute =\n            (Attribute)\n                SerializationManager.deserialize(aField, \"application/json\", Attribute.class);\n        field = attribute;\n      } else {\n        Measure measure =\n            (Measure) SerializationManager.deserialize(aField, \"application/json\", Measure.class);\n        field = measure;\n      }\n\n      JSONObject optionsForFieldJSON = aField.getJSONObject(WorkSheetSerializationUtils.OPTIONS);\n      Iterator optionsForFieldKeysIt = optionsForFieldJSON.keys();\n      List<FieldOption> fieldOptionList = new ArrayList<FieldOption>();\n      while (optionsForFieldKeysIt.hasNext()) {\n        String name = (String) optionsForFieldKeysIt.next();\n        Object value = optionsForFieldJSON.get(name);\n        FieldOption o = WorksheetFieldsOptions.createOption(field, name, value);\n        fieldOptionList.add(o);\n      }\n\n      FieldOptions fieldOptions = new FieldOptions();\n      fieldOptions.setField(field);\n      fieldOptions.setOptions(fieldOptionList);\n\n      options.addFieldOptions(fieldOptions);\n    }\n    workSheetDefinition.setFieldsOptions(options);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4334, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 38, "tryExpressionEnd": 42, "tryBlockStart": 38, "tryBlockEnd": 461, "catchExpressionStart": 403, "catchExpressionEnd": 427, "catchBlockStart": 403, "catchBlockEnd": 461, "exceptionHandlingCallStart": [435], "exceptionHandlingCallEnd": [454], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 73, "focalAPIEnd": 107, "followUpCheck": "value", "checkType": "LOOP {", "followUpCheckExpressionStart": 127, "followUpCheckExpressionEnd": 156, "followUpCheckBlockStart": 127, "followUpCheckBlockEnd": 396, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Jastamo/UF/tree/master/Todo2/NextTask/src/se/nextapp/task/full/xml/hierarchy/HierarchyChild.java", "rawCode": "  public boolean isExpandable() {\n    try {\n      String[] childrenIds = object.getString(App.CHILDREN_IDS).split(\",\");\n\n      for (String id : childrenIds) {\n        if (!parent.getData().has(id)) continue;\n\n        if (new JSONObject(parent.getData().getString(id)).getString(App.TYPE).equals(App.FOLDER)) {\n          if (!parent.isSelected(Integer.parseInt(id))) return true;\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n\n    return false;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4335, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [314], "initializationEnd": [359], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 380, "focalAPIEnd": 404, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setType(value)", "jSONObject.getString(String)"], "useStart": [365, 428], "useEnd": [405, 454], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dashanzi/idiomgame/tree/master/src/dashanzi/android/util/Json2BeansUtil.java", "rawCode": "  private static GetUserInfoResponseMsg getGetUserInfoResponseFromJsonStr(String jsonStr)\n      throws JSONException {\n    if (jsonStr == null) {\n      return null;\n    }\n\n    GetUserInfoResponseMsg result = new GetUserInfoResponseMsg();\n    JSONObject dataJson = new JSONObject(jsonStr);\n\n    JSONObject header = dataJson.getJSONObject(Constants.JSON.HEADER);\n    result.setType(header.getString(\"type\"));\n    result.setStatus(header.getString(\"status\"));\n\n    JSONObject body = dataJson.getJSONObject(Constants.JSON.BODY);\n\n    result.setName(body.getString(\"name\"));\n    result.setGender(body.getString(\"gender\"));\n    result.setScore(body.getString(\"score\"));\n    result.setLevel(body.getString(\"level\"));\n\n    return result;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4336, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [2089], "initializationEnd": [2111], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 2193, "focalAPIEnd": 2218, "followUpCheck": "value.endsWith(\"lock\") && activePermissions.has(value)&& Generic.PermissionIncludesWritable(activePermissions.getJSONObject(value).getString(\"actionGroup\"))", "checkType": "IF", "followUpCheckExpressionStart": 3178, "followUpCheckExpressionEnd": 3465, "followUpCheckBlockStart": 3178, "followUpCheckBlockEnd": 5093, "use": ["value.indexOf(*)", "value.startsWith(String)", "value.substring(int,int)", "ResourceNameUI(Spec,value)", "JSONObject.getJSONObject(value)"], "useStart": [2345, 2561, 2632, 2804, 3393], "useEnd": [2388, 2589, 2687, 2846, 3438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/cspi-webui/src/main/java/org/collectionspace/chain/csp/webui/record/RecordRead.java", "rawCode": "  private JSONArray getPermissions(Storage storage, JSONObject activePermissionInfo)\n      throws ExistException, UnimplementedException, UnderlyingStorageException, JSONException,\n          UIException {\n    final String WORKFLOW_DELETE_RESOURCE_TAIL = WORKFLOW_SUB_RESOURCE + \"delete\";\n    final String WORKFLOW_LOCK_RESOURCE_TAIL = WORKFLOW_SUB_RESOURCE + \"lock\";\n\n    JSONArray set = new JSONArray();\n    JSONObject activePermissions = new JSONObject();\n\n    // log.info(activePermissionInfo.toString());\n    // we are ignoring pagination so this will return the first 40 roles only\n    // UI doesn't know what it wants to do about pagination etc\n    // mark active roles\n    if (activePermissionInfo.has(\"permission\")) {\n      JSONArray active = activePermissionInfo.getJSONArray(\"permission\");\n      for (int j = 0; j < active.length(); j++) {\n        if (active.getJSONObject(j).length() != 0) {\n          activePermissions.put(\n              active.getJSONObject(j).getString(\"resourceName\"), active.getJSONObject(j));\n        }\n      }\n    }\n\n    JSONObject mergedPermissions = new JSONObject();\n\n    // get all permissions\n    int pageNum = 0;\n    JSONObject permrestrictions = new JSONObject();\n    permrestrictions.put(\"queryTerm\", \"actGrp\");\n    permrestrictions.put(\"queryString\", \"CRUDL\");\n    // Passing page size 0 gets all the perms in one call.\n    permrestrictions.put(\"pageSize\", Integer.toString(pageNum));\n    String permbase = spec.getRecordByWebUrl(\"permission\").getID();\n    JSONObject returndata = searcher.getJSON(storage, permrestrictions, \"items\", permbase);\n\n    // While loop since perms do not return pagination info - must call till no more\n    // while(returndata.has(\"items\") && returndata.getJSONArray(\"items\").length()>0){\n    // Using pageSize=0, we get all perms in one call, so no need to loop\n    if (returndata.has(\"items\") && returndata.getJSONArray(\"items\").length() > 0) {\n\n      // merge active and nonactive\n      JSONArray items = returndata.getJSONArray(\"items\");\n      for (int i = 0; i < items.length(); i++) {\n        JSONObject item = items.getJSONObject(i);\n        JSONObject permission = new JSONObject();\n        String resourceName = item.getString(\"summary\");\n        String resourceNameUI;\n        // Need to get baseResource for workflow perms\n        int startWorkflowSubResource = resourceName.indexOf(WORKFLOW_SUB_RESOURCE);\n        if (startWorkflowSubResource > 0) { // Contains the workflow subresource\n          // Get the base resource that the workflow is related to\n          int start = (resourceName.startsWith(\"/\")) ? 1 : 0;\n          String baseResource = resourceName.substring(start, startWorkflowSubResource);\n          resourceNameUI = Generic.ResourceNameUI(spec, baseResource);\n        } else {\n          resourceNameUI = Generic.ResourceNameUI(spec, resourceName);\n        }\n        permission.put(\"resourceName\", resourceNameUI);\n        String permlevel = \"none\";\n\n        Record recordForPermResource = Generic.RecordNameServices(spec, resourceNameUI);\n\n        if ((startWorkflowSubResource > 0) && (recordForPermResource != null)) {\n          // Handle the lock workflow resource\n          if (recordForPermResource.supportsLocking()\n              && resourceName.endsWith(\"lock\")\n              && activePermissions.has(resourceName)\n              && Generic.PermissionIncludesWritable(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"))) {\n            // If we have write or delete perms on the workflow resource, set the permLevel\n            // on the base resource.\n            // Should be, but UI not ready: permission.put(\"permission\", Generic.LOCK_PERMISSION);\n            if (!mergedPermissions.has(resourceNameUI)) {\n              // With no other knowledge, assume lock perm means writable\n              permission.put(\"permission\", Generic.WRITE_PERMISSION);\n              mergedPermissions.put(resourceNameUI, permission);\n            } else {\n              // We could check it and make sure it makes sense, but we have to trust that the UI\n              // has\n              // done something reasonable by not combining lock perm with read-only or other\n              // silliness.\n            }\n          }\n          // Handle the delete workflow resource\n          else if (recordForPermResource.hasSoftDeleteMethod()\n              && resourceName.endsWith(\"delete\")\n              && activePermissions.has(resourceName)\n              && Generic.PermissionIncludesWritable(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"))) {\n            // If we have write or delete perms on the workflow resource, set the permLevel\n            // on the base resource.\n            permission.put(\"permission\", Generic.DELETE_PERMISSION);\n            mergedPermissions.put(resourceNameUI, permission);\n          } else {\n            // Filter these out - no need to model them, as we do not support them\n            // This is a performance improvement so we do not have to handle them on\n            // update.\n          }\n        } else if (activePermissions.has(resourceName) && !mergedPermissions.has(resourceNameUI)) {\n          permlevel =\n              Generic.PermissionLevelString(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"));\n\n          permission.put(\"permission\", permlevel);\n          mergedPermissions.put(resourceNameUI, permission);\n        } else if (!mergedPermissions.has(resourceNameUI)) {\n          permlevel = \"none\";\n\n          permission.put(\"permission\", permlevel);\n          mergedPermissions.put(resourceNameUI, permission);\n        }\n      }\n\n      // pageNum++;\n      // permrestrictions.put(\"pageNum\", Integer.toString(pageNum));\n      // returndata = searcher.getJSON(storage,permrestrictions,\"items\",permbase);\n    }\n\n    // change soft workflow to main Delete\n\n    // now put the permissions in order...\n    String[] recordsweburl = spec.getAllRecordsOrdered();\n\n    for (String weburl : recordsweburl) {\n      if (mergedPermissions.has(weburl)) {\n        Object value = mergedPermissions.get(weburl);\n        set.put(value);\n      }\n    }\n    Iterator rit = mergedPermissions.keys();\n    while (rit.hasNext()) {\n      String key = (String) rit.next();\n      Object value = mergedPermissions.get(key);\n\n      if (!spec.hasRecordByWebUrl(key)) {\n        set.put(value);\n      }\n    }\n\n    return set;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4337, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 118, "guardExpressionEnd": 144, "guardBlockStart": 118, "guardBlockEnd": 197, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 163, "focalAPIEnd": 190, "followUpCheck": "value.equalsIgnoreCase(\"\")", "checkType": "IF", "followUpCheckExpressionStart": 203, "followUpCheckExpressionEnd": 236, "followUpCheckBlockStart": 203, "followUpCheckBlockEnd": 587, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/europeana/contrib/tree/master/ntua/mint2/src/main/java/gr/ntua/ivml/mint/mapping/MappingVersionControl.java", "rawCode": "  private static JSONObject convert(JSONObject object) {\n    JSONObject result = object;\n    String version = \"\";\n    if (object.has(\"version\")) {\n      version = object.getString(\"version\");\n    }\n\n    if (version.equalsIgnoreCase(\"\")) {\n      // first mapping version had no version info\n      result = result.element(\"version\", \"1.0\");\n      // first mapping version had static template, set root to lidoWrap and remove the template so\n      // that the mapping manager can rebuild it\n      result = result.element(\"root\", \"lidoWrap\");\n      result = result.discard(\"template\");\n    }\n\n    return result;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4338, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [1249], "initializationEnd": [1273], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1219, "tryExpressionEnd": 1223, "tryBlockStart": 1219, "tryBlockEnd": 2091, "catchExpressionStart": 1950, "catchExpressionEnd": 1974, "catchBlockStart": 1950, "catchBlockEnd": 2091, "exceptionHandlingCallStart": [2037], "exceptionHandlingCallEnd": [2056], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [1398], "configurationEnd": [1428], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1745, "focalAPIEnd": 1774, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map<String, String[]>.put(value,String[])"], "useStart": [1888], "useEnd": [1922], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bryanjimenez/empanada/tree/master/cache/cache/src/cache_controller/FileReader.java", "rawCode": "  public void run() {\n    runThread = true;\n\n    while (runThread) {\n      // Sleep on every iteration\n      try {\n\n        Thread.sleep(SLEEP_TIME);\n      } catch (InterruptedException e) {\n        // Should never happen\n        e.printStackTrace();\n      }\n\n      // Read file\n      File outputFile = new File(OUTPUT_FILE_LOCATION);\n\n      if (outputFile.exists()) {\n        // Get scanner for the file\n        Scanner filescan = null;\n        try {\n          filescan = new Scanner(outputFile);\n        } catch (FileNotFoundException e) {\n          // File was just deleted\n          e.printStackTrace();\n          continue;\n        }\n\n        Map<String, String[]> parsedTweets = new HashMap<String, String[]>();\n\n        while (filescan.hasNextLine()) {\n          String line = filescan.nextLine();\n\n          // Get values from tweet\n          String[] lineSplit = line.split(\"\\t\");\n          String tweetFilter = lineSplit[FILE_FILTER_INDEX];\n          String tweetStr = lineSplit[FILE_JSON_INDEX];\n          String tweetRating = lineSplit[FILE_RATING_INDEX];\n\n          JSONObject tweetJson = null;\n          String tweetID = null;\n          String tweetLat = null;\n          String tweetLng = null;\n\n          try {\n            tweetJson = new JSONObject(tweetStr);\n\n            // Get coordinates\n            if (tweetStr.indexOf(\"\\\"geo\\\": null\") == -1) {\n\n              JSONObject geo = tweetJson.getJSONObject(\"geo\");\n\n              JSONArray coordinates = geo.getJSONArray(\"coordinates\");\n              tweetLat = Double.toString(coordinates.getDouble(JSON_LAT_INDEX)); // Latitude\n              tweetLng = Double.toString(coordinates.getDouble(JSON_LONG_INDEX)); // Longitude\n\n              // Get tweet ID\n              tweetID = tweetJson.getString(\"id_str\"); // ID\n\n              String[] columns = {tweetFilter, tweetStr, tweetLat, tweetLng, tweetRating};\n              parsedTweets.put(tweetID, columns);\n            }\n          } catch (JSONException e) {\n            // json not formatted properly, skip\n            e.printStackTrace();\n            continue;\n          }\n        }\n\n        filescan.close();\n\n        // Add to HBase\n        HBaseConnection hbase = new HBaseConnection();\n\n        try {\n          hbase.put(parsedTweets);\n        } catch (IOException e) {\n          // Not written to HBase, don't delete the file\n          e.printStackTrace();\n          continue;\n        }\n\n        // Erase file\n        outputFile.setWritable(true);\n        outputFile.delete();\n      }\n    }\n\n    threadFinished = true;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4339, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [152], "initializationEnd": [173], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String)", "JSONObject.getString(String)", "makeText(*,*,*)", "show()"], "tryExpressionStart": 71, "tryExpressionEnd": 75, "tryBlockStart": 71, "tryBlockEnd": 937, "catchExpressionStart": 727, "catchExpressionEnd": 747, "catchBlockStart": 727, "catchBlockEnd": 937, "exceptionHandlingCallStart": [757, 854, 818, 818], "exceptionHandlingCallEnd": [808, 888, 908, 928], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 270, "focalAPIEnd": 289, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setKey(value)", "jSONObject.getString(String)"], "useStart": [386, 444], "useEnd": [415, 464], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teleportR/TeleportR/tree/master/src/org/teleportr/activity/Autocompletion.java", "rawCode": "    @Override\n    protected void onPostExecute(JSONArray json) {\n      try {\n        for (int i = 0; i < json.length(); i++) {\n          JSONObject j = json.getJSONObject(i).getJSONObject(\"download\");\n          if (!getPreferenceScreen().getSharedPreferences().contains(j.getString(\"file\"))) {\n            CheckBoxPreference c = new CheckBoxPreference(Autocompletion.this);\n            c.setKey(j.getString(\"file\"));\n            String title = j.getString(\"title\");\n            c.setTitle(title.split(\" \")[0]);\n            c.setSummary(title.substring(title.indexOf(\" \")));\n            c.setOnPreferenceClickListener(Autocompletion.this);\n            getPreferenceScreen().addItemFromInflater(c);\n          }\n        }\n      } catch (Exception e) {\n        Log.e(TAG, \"problem parsing nearby downloads json\");\n        Toast.makeText(Autocompletion.this, getString(R.string.download_error), Toast.LENGTH_LONG)\n            .show();\n      }\n      progress.dismiss();\n      super.onPostExecute(json);\n    }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4340, "initialization": ["String name = Iterator<String>.next()"], "initializationStart": [321], "initializationEnd": [332], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 363, "focalAPIEnd": 392, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JSONObject.put(String,value)"], "useStart": [340], "useEnd": [393], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/editor/server/src/de/hpi/epc/json/EPCDiagramJsonImporter.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  protected void addPropertyMap(DiagramObject o, JSONObject jsonProperties) throws JSONException {\n    Iterator<String> keys = (Iterator<String>) jsonProperties.keys();\n    Map<String, String> propertiesMap = new HashMap<String, String>();\n    while (keys.hasNext()) {\n      String key = keys.next();\n      propertiesMap.put(key, jsonProperties.getString(key));\n    }\n    o.setProperties(propertiesMap);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4341, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [694], "initializationEnd": [714], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [765], "configurationEnd": [780], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 809, "focalAPIEnd": 836, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONObject(String)", "jSONObject.getString(String)", "jSONObject.getJSONArray(String)", "new Idea(int,value,String[],Spark[],String,String,Comment[])"], "useStart": [865, 1107, 1944, 2057, 2117, 2700], "useEnd": [888, 1132, 1968, 2083, 2144, 2776], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cangevine/STEAMnet/tree/master/android/src/APIHandlers/GetIdeaForDetail.java", "rawCode": "    Idea parseData(String data) throws JSONException {\n      // Ideas\n      final String ID = \"id\";\n      final String DESCRIPTION = \"description\";\n      final String TAGS = \"tags\";\n      final String SPARKS = \"sparks\";\n      final String USER = \"user\";\n      // Sparks (currently unused)\n      final String SPARK_TYPE = \"spark_type\";\n      final String CONTENT_TYPE = \"content_type\";\n      final String CONTENT = \"content\";\n      final String CREATED_AT = \"created_at\";\n      final String COMMENTS = \"comments\";\n      final String COMMENT_TEXT = \"comment_text\";\n      final String NAME = \"name\";\n      final String FILE = \"file\";\n\n      // getting JSON string from URL\n      JSONObject json = new JSONObject(data);\n\n      // Getting Idea parameters\n      int id = json.getInt(ID);\n      String description = json.getString(DESCRIPTION);\n      JSONArray tagsJSON = json.getJSONArray(TAGS);\n      String[] tags = new String[tagsJSON.length()];\n      for (int i = 0; i < tagsJSON.length(); i++) {\n        tags[i] = tagsJSON.getString(i);\n      }\n\n      // Getting Array of Sparks\n      JSONArray sparksJSON = json.getJSONArray(SPARKS);\n      Spark[] sparks = new Spark[sparksJSON.length()];\n      for (int i = 0; i < sparksJSON.length(); i++) {\n        Log.v(\"Get idea for detail\", \"One spark retrieved\");\n        JSONObject s = sparksJSON.getJSONObject(i);\n\n        int sparkId = s.getInt(ID);\n        String sparkDate = s.getString(CREATED_AT);\n        char sparkContentType = s.getString(CONTENT_TYPE).charAt(0);\n        char sparkType = s.getString(SPARK_TYPE).charAt(0);\n        String content = s.getString(CONTENT);\n\n        Spark newSpark = new Spark(sparkId, sparkType, sparkContentType, content, sparkDate);\n        if (s.has(FILE)) {\n          String fileUrl = s.getString(FILE);\n          newSpark.setCloudLink(fileUrl);\n        }\n        sparks[i] = newSpark;\n      }\n      // Getting Array of Users\n      JSONObject firstUserJSON = json.getJSONObject(USER);\n      String firstUser = firstUserJSON.getString(NAME);\n\n      String firstCreatedAt = json.getString(CREATED_AT);\n\n      JSONArray ideaComments = json.getJSONArray(COMMENTS);\n      Comment[] comments = new Comment[ideaComments.length()];\n      for (int i = 0; i < ideaComments.length(); i++) {\n        JSONObject c = ideaComments.getJSONObject(i);\n        int curCommentId = c.getInt(ID);\n        String curCommentContent = c.getString(COMMENT_TEXT);\n        JSONObject curCommentUser = c.getJSONObject(USER);\n        String curCommentUsername = curCommentUser.getString(NAME);\n        Comment newComment = new Comment(curCommentId, curCommentContent, curCommentUsername);\n        comments[i] = newComment;\n      }\n\n      return new Idea(id, description, tags, sparks, firstUser, firstCreatedAt, comments);\n    }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4342, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [270], "initializationEnd": [291], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 315, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONObject(String)", "SmartStore.countQuerySoup(value,QuerySpec)", "new StoreCursor(value,QuerySpec,int,int)"], "useStart": [373, 1725, 1887], "useEnd": [403, 1771, 1938], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudspokes/mobile_campus/tree/master/aau/android/VFConnector/src/com/salesforce/androidsdk/phonegap/SmartStorePlugin.java", "rawCode": "  /**\n   * Native implementation of pgQuerySoup\n   *\n   * @param args\n   * @param callbackId\n   * @return\n   * @throws JSONException\n   */\n  private PluginResult querySoup(JSONArray args, String callbackId) throws JSONException {\n    // Parse args\n    JSONObject arg0 = args.getJSONObject(0);\n    String soupName = arg0.getString(SOUP_NAME);\n    JSONObject querySpecJson = arg0.getJSONObject(QUERY_SPEC);\n    QueryType queryType = QueryType.valueOf(querySpecJson.getString(QUERY_TYPE));\n    String path = querySpecJson.isNull(INDEX_PATH) ? null : querySpecJson.getString(INDEX_PATH);\n    String matchKey = querySpecJson.isNull(MATCH_KEY) ? null : querySpecJson.getString(MATCH_KEY);\n    String beginKey = querySpecJson.isNull(BEGIN_KEY) ? null : querySpecJson.getString(BEGIN_KEY);\n    String endKey = querySpecJson.isNull(END_KEY) ? null : querySpecJson.getString(END_KEY);\n    String likeKey = querySpecJson.isNull(LIKE_KEY) ? null : querySpecJson.getString(LIKE_KEY);\n    Order order = Order.valueOf(querySpecJson.optString(ORDER, \"ascending\"));\n    int pageSize = querySpecJson.getInt(PAGE_SIZE);\n\n    // Building query spec\n    QuerySpec querySpec = null;\n    switch (queryType) {\n      case exact:\n        querySpec = QuerySpec.buildExactQuerySpec(path, matchKey, pageSize);\n        break;\n      case range:\n        querySpec = QuerySpec.buildRangeQuerySpec(path, beginKey, endKey, order, pageSize);\n        break;\n      case like:\n        querySpec = QuerySpec.buildLikeQuerySpec(path, likeKey, order, pageSize);\n        break;\n      default:\n        throw new RuntimeException(\"Fell through switch: \" + queryType);\n    }\n\n    // Run query\n    SmartStore smartStore = ForceApp.APP.getSmartStore();\n    int countRows = smartStore.countQuerySoup(soupName, querySpec);\n    int totalPages = countRows / querySpec.pageSize + 1;\n\n    // Build store cursor\n    StoreCursor storeCursor = new StoreCursor(soupName, querySpec, totalPages, 0);\n    storeCursors.put(storeCursor.cursorId, storeCursor);\n\n    // Build json result\n    JSONObject result = storeCursor.toJSON(smartStore);\n\n    // Done\n    return new PluginResult(PluginResult.Status.OK, result);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4343, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 130, "focalAPIEnd": 156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "SocialUserAccount.setName(value)"], "useStart": [176, 221, 268, 344], "useEnd": [202, 249, 298, 375], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/klwork-social/main/tree/master/src/main/java/com/klwork/business/domain/service/SocialTencentService.java", "rawCode": "  public void updateSocialUserAccountByThird(\n      SocialUserAccount socialUserAccount, JSONObject userInfo) {\n    String name = userInfo.getString(\"name\");\n    String nick = userInfo.getString(\"nick\");\n    String uid = userInfo.getString(\"openid\");\n    String url = userInfo.getString(\"homepage\");\n    socialUserAccount.setWeiboUid(uid);\n    socialUserAccount.setName(name);\n    socialUserAccount.setUrl(url);\n    socialUserAccount.setUserScreenName(nick);\n    socialUserAccount.setType(getSocialTypeInt());\n    socialUserAccountService.updateSocialUserAccount(socialUserAccount);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4344, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 107, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setOrientation(value)"], "useStart": [150], "useEnd": [177], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mduduzik/flowframe/tree/master/editors/oryx/frontend/src/main/java/de/hpi/cpn/elements/CPNArc.java", "rawCode": "  public void readJSONorientation(JSONObject modelElement) throws JSONException {\n    String orientation = modelElement.getString(\"orientation\");\n    setOrientation(orientation);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4345, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 103, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertNotNull(value)"], "useStart": [89], "useEnd": [127], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnipper/AndroidSurvey/tree/master/test/org/adaptlab/chpir/android/survey/Models/SurveyTest.java", "rawCode": "  @Test\n  public void shouldHaveJsonStringUuid() throws Exception {\n    setUpJson();\n    assertNotNull(json2.getString(\"uuid\"));\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4346, "initialization": ["JSONObject jSONObject = JSONArray.get(int)"], "initializationStart": [937], "initializationEnd": [945], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 376, "tryExpressionEnd": 380, "tryBlockStart": 376, "tryBlockEnd": 1632, "catchExpressionStart": 1574, "catchExpressionEnd": 1594, "catchBlockStart": 1574, "catchBlockEnd": 1632, "exceptionHandlingCallStart": [1604], "exceptionHandlingCallEnd": [1623], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 969, "focalAPIEnd": 995, "followUpCheck": "!exceptions.contains(Integer.parseInt(value))", "checkType": "IF", "followUpCheckExpressionStart": 1061, "followUpCheckExpressionEnd": 1147, "followUpCheckBlockStart": 1061, "followUpCheckBlockEnd": 1555, "use": ["jSONObject.getString(String)"], "useStart": [1021], "useEnd": [1049], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sage-Bionetworks/workflow/tree/master/tools/gePipeline/src/main/java/org/sagebionetworks/gepipeline/DataModifier.java", "rawCode": "  public static void migrateDatasets(\n      int origProjectID,\n      int newProjectID,\n      String datasetNameSubstring,\n      Collection<Integer> exceptions,\n      String user,\n      String pw)\n      throws SynapseException {\n    Synapse synapse = getSynapse(user, pw);\n    int offset = 1;\n    int total = 0;\n    int batchSize = 20;\n    do {\n      int movedCount = 0;\n      try {\n        JSONObject o =\n            synapse.query(\n                \"select * from dataset where parentId==\"\n                    + origProjectID\n                    + \" LIMIT \"\n                    + batchSize\n                    + \" OFFSET \"\n                    + offset);\n        total = (int) o.getLong(\"totalNumberOfResults\");\n        System.out.println(\"\" + offset + \"->\" + (offset + batchSize - 1) + \" of \" + total);\n        JSONArray a = o.getJSONArray(\"results\");\n        for (int i = 0; i < a.length(); i++) {\n          JSONObject ds = (JSONObject) a.get(i);\n          String id = ds.getString(\"dataset.id\");\n          String name = ds.getString(\"dataset.name\");\n          if (name.contains(datasetNameSubstring) && !exceptions.contains(Integer.parseInt(id))) {\n            // then move the dataset to the new project\n            String datasetUri = \"/dataset/\" + id;\n            JSONObject dsjson = new JSONObject();\n            dsjson.put(\"parentId\", \"\" + newProjectID);\n            synapse.updateSynapseEntity(REPO_ENDPOINT, datasetUri, dsjson);\n            System.out.println(\"Moved \" + name + \" to project \" + newProjectID);\n            movedCount++;\n          }\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      offset += batchSize - movedCount;\n    } while (offset <= total);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4347, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 128, "focalAPIEnd": 156, "followUpCheck": "!StringUtils.equals(value,uniqueName)", "checkType": "IF", "followUpCheckExpressionStart": 286, "followUpCheckExpressionEnd": 336, "followUpCheckBlockStart": 286, "followUpCheckBlockEnd": 471, "use": ["ensureUniqueJobName(*,value)", "jSONObject.remove(String)", "jSONObject.put(String,String)", "jSONObject.put(String,String)"], "useStart": [190, 345, 378, 420], "useEnd": [280, 370, 412, 464], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iPlantCollaborativeOpenSource/metadactyl/tree/master/src/main/java/org/iplantc/workflow/experiment/FapiJobRequestFormatter.java", "rawCode": "  /** Ensures that the job name is unique for the user. */\n  private void ensureJobNameUniqueness() {\n    String originalName = experiment.getString(\"name\");\n    String uniqueName =\n        jobNameUniquenessEnsurer.ensureUniqueJobName(userDetails.getShortUsername(), originalName);\n    if (!StringUtils.equals(originalName, uniqueName)) {\n      experiment.remove(\"name\");\n      experiment.put(\"name\", uniqueName);\n      experiment.put(\"display_name\", originalName);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4348, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [959], "initializationEnd": [983], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getJSONArray(String)"], "configurationStart": [1016], "configurationEnd": [1049], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1160, "focalAPIEnd": 1185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "assertEquals(value,*)", "jSONObject.has(String)"], "useStart": [1187, 1147, 1248], "useEnd": [1228, 1229, 1266], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/tomcat-main/src/test/java/org/collectionspace/chain/csp/persistence/services/vocab/TestNameThroughWebapp.java", "rawCode": "  public void testNamesAdvSearch() throws Exception {\n    ServletTester jetty = tester.setupJetty();\n    log.info(\"NAME: NamesSearch: test_start\");\n    // tester.GETData(\"/quick-reset\",jetty);\n    // Create the entry we are going to check for\n    JSONObject data = createTrivialAuthItem(PERSON_TERMLIST_ELEMENT, \"XXXTESTRaul Castro\");\n    HttpTester out = tester.POSTData(TestBase.MAIN_PERSON_INSTANCE_PATH + \"/\", data, jetty);\n    String url = out.getHeader(\"Location\");\n    JSONObject payload = new JSONObject();\n    JSONObject searchfields = new JSONObject();\n\n    searchfields.put(TERM_DISPLAYNAME_ELEMENT, \"XXXTESTR*\");\n\n    payload.put(\"operation\", \"or\");\n    payload.put(\"fields\", searchfields);\n\n    out = tester.POSTData(TestBase.MAIN_PERSON_INSTANCE_PATH + \"/search\", payload, jetty, \"GET\");\n\n    JSONArray results = new JSONObject(out.getContent()).getJSONArray(\"results\");\n    for (int i = 0; i < results.length(); i++) {\n      JSONObject entry = results.getJSONObject(i);\n      JSONArray displayNames = entry.getJSONArray(DISPLAY_NAMES);\n      assertTrue(displayNames.getString(0).toLowerCase().contains(\"xxxtestraul castro\"));\n      assertEquals(entry.getString(\"number\"), entry.getString(TERM_DISPLAYNAME_ELEMENT));\n      assertTrue(entry.has(\"refid\"));\n    }\n\n    // Delete the entry from the database\n    tester.DELETEData(\"/vocabularies/\" + url, jetty);\n    log.info(\"NAME: NamesSearch: test_start\");\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4349, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getAbsolutePath()", "new IllegalArgumentException(String)"], "tryExpressionStart": 94, "tryExpressionEnd": 98, "tryBlockStart": 94, "tryBlockEnd": 842, "catchExpressionStart": 672, "catchExpressionEnd": 692, "catchBlockStart": 672, "catchBlockEnd": 842, "exceptionHandlingCallStart": [810, 706], "exceptionHandlingCallEnd": [834, 835], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 444, "focalAPIEnd": 466, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.replace(String,String)", "new File(value)"], "useStart": [501, 595], "useEnd": [537, 609], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluesoft-rnd/signavio-core-mirror/tree/master/editor/buildApps/src/com/signavio/buildapps/sscompress/SSCompressor.java", "rawCode": "  private static File getStencilSet(String namespace, File ssConf, String ssDirString) {\n\n    try {\n      StringBuffer jsonObjStr = readFile(ssConf);\n      JSONArray jsonObj = new JSONArray(jsonObjStr.toString());\n      for (int i = 0; i < jsonObj.length(); i++) {\n        JSONObject ssObj = jsonObj.getJSONObject(i);\n        if (ssObj.has(\"namespace\") && ssObj.getString(\"namespace\").equals(namespace)) {\n          String path = ssDirString + ssObj.getString(\"uri\");\n          File ssFile = new File(path.replace(\".json\", \"-nosvg.json\"));\n          if (!ssFile.exists()) {\n            ssFile = new File(path);\n          }\n          return ssFile;\n        }\n      }\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\n          \"Cannot find stencilset with namespace \" + namespace + \" in \" + ssConf.getAbsolutePath());\n    }\n    throw new IllegalArgumentException(\n        \"Cannot find stencilset with namespace \" + namespace + \" in \" + ssConf.getAbsolutePath());\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4350, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)&&jSONObject.getString(name,)!=null&&jSONObject.getString(\"errorCode\",).equals(ERROR_CODE,)", "guardType": "IF {", "guardExpressionStart": 1049, "guardExpressionEnd": 1178, "guardBlockStart": 1049, "guardBlockEnd": 1264, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1086, "focalAPIEnd": 1109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ResultException(value)", "paserUser(jSONObject)"], "useStart": [1197, 1281], "useEnd": [1241, 1294], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wanglu0919/chianwuxi_android/tree/master/chinaw/src/com/wuxi/app/engine/UserService.java", "rawCode": "  /**\n   * wanglu 泰得利通 用户注册 params 表单参数\n   *\n   * @return\n   * @throws NetException\n   * @throws JSONException\n   * @throws NODataException\n   * @throws ResultException\n   */\n  public User resgistUser(Map<String, String> params)\n      throws NetException, JSONException, NODataException, ResultException {\n\n    if (!checkNet()) {\n      throw new NetException(Constants.ExceptionMessage.NO_NET); // 检查网络\n    }\n\n    StringBuffer sb = new StringBuffer();\n    for (Map.Entry<String, String> paramSet : params.entrySet()) {\n\n      sb.append(paramSet.getKey()).append(\"=\").append(paramSet.getValue()).append(\"&\");\n    }\n\n    sb.deleteCharAt(sb.length() - 1); // 删除最后一个字符\n\n    String url = Constants.Urls.REGIST_URL + \"?\" + sb.toString();\n    LogUtil.i(TAG, url);\n    String resultStr = httpUtils.executeGetToString(url, TIME_OUT);\n\n    if (resultStr != null) {\n\n      JSONObject jsonObject = new JSONObject(resultStr);\n\n      Object o = jsonObject.get(\"result\");\n      if (!o.toString().equals(\"null\")) {\n\n        JSONObject jb = (JSONObject) o;\n\n        if (jb.has(\"message\")\n            && jb.getString(\"message\") != null\n            && jb.getString(\"errorCode\").equals(ERROR_CODE)) {\n          throw new ResultException(jb.getString(\"message\")); // 处理注册错误信息\n        }\n\n        return paserUser(jb);\n      }\n\n    } else {\n      throw new NODataException(Constants.ExceptionMessage.NODATA_MEG);\n    }\n    return null;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4351, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [85], "initializationEnd": [126], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 153, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONObject(String)", "new SMSSendResponse(value,String)"], "useStart": [286, 445], "useEnd": [329, 484], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/attdevsupport/ATT_APIPlatform_SampleApps/tree/master/RESTFul/SMS/Java/app1/src/main/java/com/att/api/sms/model/SMSSendResponse.java", "rawCode": "  public static SMSSendResponse valueOf(JSONObject jobj) {\n    JSONObject response = jobj.getJSONObject(\"outboundSMSResponse\");\n    final String msgId = response.getString(\"messageId\");\n\n    String resourceUrl = null;\n    if (response.has(\"resourceReference\")) {\n      JSONObject ref = response.getJSONObject(\"resourceReference\");\n      if (ref.has(\"resourceURL\")) {\n        resourceUrl = ref.getString(\"resourceURL\");\n      }\n    }\n\n    return new SMSSendResponse(msgId, resourceUrl);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4352, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 135, "focalAPIEnd": 171, "followUpCheck": "!Leader().equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 305, "followUpCheckExpressionEnd": 334, "followUpCheckBlockStart": 305, "followUpCheckBlockEnd": 400, "use": ["jSONObject.getJSONArray(String)", "GameInstance.setLeader(value)"], "useStart": [252, 343], "useEnd": [297, 369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mit-cml/appinventor-sources/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/GameClient.java", "rawCode": "  private void updateInstanceInfo(JSONObject responseObject) throws JSONException {\n    boolean newLeader = false;\n    String leader = responseObject.getString(LEADER_KEY);\n    List<String> receivedPlayers =\n        JsonUtil.getStringListFromJsonArray(responseObject.getJSONArray(PLAYERS_LIST_KEY));\n\n    if (!Leader().equals(leader)) {\n      instance.setLeader(leader);\n      newLeader = true;\n    }\n\n    PlayerListDelta playersDelta = instance.setPlayers(receivedPlayers);\n    if (playersDelta != PlayerListDelta.NO_CHANGE) {\n      for (final String player : playersDelta.getPlayersRemoved()) {\n        PlayerLeft(player);\n      }\n      for (final String player : playersDelta.getPlayersAdded()) {\n        PlayerJoined(player);\n      }\n    }\n\n    if (newLeader) {\n      NewLeader(Leader());\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4353, "initialization": ["JSONObject jSONObject = HttpServletRequest.getAttribute(String)"], "initializationStart": [768], "initializationEnd": [794], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new RequestException(String,*)"], "tryExpressionStart": 803, "tryExpressionEnd": 807, "tryBlockStart": 803, "tryBlockEnd": 4926, "catchExpressionStart": 1371, "catchExpressionEnd": 1393, "catchBlockStart": 1371, "catchBlockEnd": 1473, "exceptionHandlingCallStart": [1413], "exceptionHandlingCallEnd": [1460], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 868, "focalAPIEnd": 891, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.replace(String,String)", "jSONObject.getString(String)", "getJSONString(value,String,FsAccessToken,HttpServletRequest)", "loadObject(value,FsAccessToken)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [907, 1032, 1181, 1648, 3764, 3881, 4273], "useEnd": [936, 1061, 1220, 1701, 3795, 3911, 4304], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dryabkov/activiti-modeler-experiment/tree/master/platform/src/com/signavio/editor/handler/EditorHandler.java", "rawCode": "  /**\n   * Implementation of a GET request\n   *\n   * @param req\n   * @param res\n   * @param identifier\n   * @throws Exception\n   */\n  @Override\n  @HandlerMethodActivation\n  public <T extends FsSecureBusinessObject> void doGet(\n      HttpServletRequest req, HttpServletResponse res, FsAccessToken token, T sbo) {\n\n    // check for firefox\n    if (!isSupported(req)) {\n      // show firefox page\n      addJSPAttributes(req);\n      try {\n        req.getRequestDispatcher(\"/WEB-INF/jsp/browser.jsp\").include(req, res);\n      } catch (ServletException e) {\n        throw new RequestException(\"servletException\", e);\n      } catch (IOException e) {\n        throw new IORequestException(e);\n      }\n    } else {\n      // return editor\n      JSONObject jParams = (JSONObject) req.getAttribute(\"params\");\n\n      try {\n        // get id of model or revision\n        String id = jParams.getString(\"id\");\n\n        id = id.replace(\"/directory/\", \"\");\n\n        String revision = null;\n\n        if (jParams.has(\"revision\")) {\n          revision = jParams.getString(\"revision\");\n        }\n\n        if (jParams.has(\"data\")) {\n          // editor requested model data (json)\n          String json = getJSONString(id, revision, token, req);\n          res.setStatus(200);\n          res.setContentType(\"application/json\");\n          try {\n            res.getWriter().print(json);\n          } catch (IOException e) {\n            throw new RequestException(\"platform.ioexception\", e);\n          }\n        } else {\n          FsAccount account = token.getAccount();\n\n          try {\n            // try to get the sbo for the id\n            FsSecureBusinessObject tempsbo = FsSecurityManager.getInstance().loadObject(id, token);\n\n            if (tempsbo instanceof FsModel) {\n              // check, if sbo is a model\n              FsModel model = (FsModel) tempsbo;\n              // set location\n              res.setHeader(\"location\", req.getRequestURL() + \"?id=\" + id);\n              // print xhtml site\n              sendEditorXHTML(res, model.getName(), account);\n            }\n            // else if (sbo instanceof ModelRevision) {\n            // //check, if sbo is a model revision\n            // ModelRevision rev = (ModelRevision) tempsbo;\n            // Model model = (Model) SecurityManager.getInstance().loadObject(rev.getModelId(),\n            // token);\n            //\n            // sendEditorXHTML(res, model.getName(), account);\n            // }\n            else {\n              throw new RequestException(\"editor.invalidIdentifier\");\n            }\n\n          } catch (BusinessObjectDoesNotExistException e) {\n            // id is no existing model/revision, get info from session\n            // Map<String,String> tempModelInfo = (Map<String,String>)\n            // req.getSession().getAttribute(id);\n            addJSPAttributes(req);\n\n            // Properties translation = TranslationFactory.getTranslation(token);\n\n            req.setAttribute(\"title\", \"New Process\");\n            req.setAttribute(\"language\", account.getLanguageCode());\n            req.setAttribute(\"country\", account.getCountryCode());\n\n            // set location\n            res.setHeader(\"location\", req.getRequestURL() + \"?id=\" + id);\n\n            // try {\n            sendEditorXHTML(res, \"New Process\", account);\n            // req.getRequestDispatcher(\"/WEB-INF/jsp/editor.jsp\").include(req, res);\n            // } catch (ServletException e1) {\n            // throw new RequestException(\"servletException\", e1);\n            // } catch (IOException e1) {\n            // throw new IORequestException(e1);\n            // }\n          }\n        }\n\n      } catch (JSONException e) {\n        // no id supplied, get stencilset namespace and directory id\n        try {\n          String stencilset = jParams.getString(\"stencilset\");\n\n          // TODO check validity of stencilset namespace\n\n          String dirId = jParams.getString(\"directory\");\n\n          UUID uuid = UUID.getUUID();\n\n          Map<String, String> tempModelInfo = new HashMap<String, String>();\n          tempModelInfo.put(\"stencilset\", stencilset);\n          tempModelInfo.put(\"directory\", dirId);\n          tempModelInfo.put(\"id\", uuid.toString());\n          if (jParams.has(\"extensions\")) {\n            tempModelInfo.put(\"extensions\", jParams.getString(\"extensions\"));\n          }\n          req.getSession().setAttribute(uuid.toString(), tempModelInfo);\n\n          // Uses the variable from the properties because of http and https problems!\n          // The servlet doesn't know if there is a secure https connection.\n          String url =\n              Platform.getInstance().getPlatformProperties().getServerName() + req.getRequestURI();\n\n          res.sendRedirect(url + \"?id=\" + uuid.toString());\n        } catch (JSONException e2) {\n          res.setStatus(405);\n        } catch (IOException e3) {\n          throw new RequestException(\"platform.ioexception\", e3);\n        }\n      }\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4354, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [511], "initializationEnd": [531], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [548], "configurationEnd": [568], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 592, "focalAPIEnd": 619, "followUpCheck": "!checkHandshake(value,params)", "checkType": "IF", "followUpCheckExpressionStart": 815, "followUpCheckExpressionEnd": 851, "followUpCheckBlockStart": 815, "followUpCheckBlockEnd": 1061, "use": ["jSONObject.getJSONArray(String)", "RpcReceiverManager.getMethodDescriptor(value)"], "useStart": [646, 1209], "useEnd": [676, 1252], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Senseg/Py4A/tree/master/android/Common/src/com/googlecode/android_scripting/jsonrpc/JsonRpcServer.java", "rawCode": "  @Override\n  protected void handleConnection(Socket socket) throws Exception {\n    RpcReceiverManager receiverManager = mRpcReceiverManagerFactory.create();\n    BufferedReader reader =\n        new BufferedReader(new InputStreamReader(socket.getInputStream()), 8192);\n    PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);\n    boolean passedAuthentication = false;\n    String data;\n    while ((data = reader.readLine()) != null) {\n      Log.v(\"Received: \" + data);\n      JSONObject request = new JSONObject(data);\n      int id = request.getInt(\"id\");\n      String method = request.getString(\"method\");\n      JSONArray params = request.getJSONArray(\"params\");\n\n      // First RPC must be _authenticate if a handshake was specified.\n      if (!passedAuthentication && mHandshake != null) {\n        if (!checkHandshake(method, params)) {\n          SecurityException exception = new SecurityException(\"Authentication failed!\");\n          send(writer, JsonRpcResult.error(id, exception));\n          shutdown();\n          throw exception;\n        }\n        passedAuthentication = true;\n        send(writer, JsonRpcResult.result(id, true));\n        continue;\n      }\n\n      MethodDescriptor rpc = receiverManager.getMethodDescriptor(method);\n      if (rpc == null) {\n        send(writer, JsonRpcResult.error(id, new RpcError(\"Unknown RPC.\")));\n        continue;\n      }\n      try {\n        send(writer, JsonRpcResult.result(id, rpc.invoke(receiverManager, params)));\n      } catch (Throwable t) {\n        Log.e(\"Invocation error.\", t);\n        send(writer, JsonRpcResult.error(id, t));\n      }\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4355, "initialization": ["JSONObject jSONObject = success(RefineBroker,HttpServletRequest,HttpServletResponse,*,String,String,String,String,String,*,String,String)"], "initializationStart": [243], "initializationEnd": [544], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["fail()"], "tryExpressionStart": 143, "tryExpressionEnd": 147, "tryBlockStart": 143, "tryBlockEnd": 3098, "catchExpressionStart": 3050, "catchExpressionEnd": 3070, "catchBlockStart": 3050, "catchBlockEnd": 3098, "exceptionHandlingCallStart": [3078], "exceptionHandlingCallEnd": [3091], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 566, "focalAPIEnd": 590, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "success(RefineBroker,HttpServletRequest,HttpServletResponse,*,String,String,String,String,String,value)"], "useStart": [1911, 2850], "useEnd": [1935, 2941], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdunck/google-refine/tree/master/broker/core/tests/src/com/google/refine/broker/tests/RefineBrokerTests.java", "rawCode": "  @Test\n  public void testLocksCellBlocks() {\n    String project = \"proj3\";\n    String user = \"testuser\";\n    String user2 = \"testuser2\";\n\n    try {\n      logger.info(\"--- obtain CELL lock on project ---\");\n      JSONObject result =\n          success(\n              broker,\n              request,\n              response,\n              OBTAIN_LOCK,\n              \"pid\",\n              project,\n              \"uid\",\n              user,\n              \"locktype\",\n              Integer.toString(CELL),\n              \"lockvalue\",\n              \"1,1\");\n      String lock = result.getString(\"lock\");\n\n      logger.info(\"--- other user must fail to obtain lock on the same CELL, COL or ALL ---\");\n      failure(\n          broker,\n          request,\n          response,\n          OBTAIN_LOCK,\n          \"pid\",\n          project,\n          \"uid\",\n          user2,\n          \"locktype\",\n          Integer.toString(ALL),\n          \"lockvalue\",\n          \"\");\n      failure(\n          broker,\n          request,\n          response,\n          OBTAIN_LOCK,\n          \"pid\",\n          project,\n          \"uid\",\n          user2,\n          \"locktype\",\n          Integer.toString(COL),\n          \"lockvalue\",\n          \"1\");\n      failure(\n          broker,\n          request,\n          response,\n          OBTAIN_LOCK,\n          \"pid\",\n          project,\n          \"uid\",\n          user2,\n          \"locktype\",\n          Integer.toString(CELL),\n          \"lockvalue\",\n          \"1,1\");\n\n      logger.info(\"--- but succeed in getting a CELL lock on a cell in another column ---\");\n      result =\n          success(\n              broker,\n              request,\n              response,\n              OBTAIN_LOCK,\n              \"pid\",\n              project,\n              \"uid\",\n              user2,\n              \"locktype\",\n              Integer.toString(CELL),\n              \"lockvalue\",\n              \"2,1\");\n      String lock2 = result.getString(\"lock\");\n\n      logger.info(\"--- now it's our first user's turn to fail to get lock ---\");\n      failure(\n          broker,\n          request,\n          response,\n          OBTAIN_LOCK,\n          \"pid\",\n          project,\n          \"uid\",\n          user,\n          \"locktype\",\n          Integer.toString(ALL),\n          \"lockvalue\",\n          \"\");\n      failure(\n          broker,\n          request,\n          response,\n          OBTAIN_LOCK,\n          \"pid\",\n          project,\n          \"uid\",\n          user,\n          \"locktype\",\n          Integer.toString(COL),\n          \"lockvalue\",\n          \"2\");\n      failure(\n          broker,\n          request,\n          response,\n          OBTAIN_LOCK,\n          \"pid\",\n          project,\n          \"uid\",\n          user,\n          \"locktype\",\n          Integer.toString(CELL),\n          \"lockvalue\",\n          \"2,1\");\n\n      logger.info(\"--- release the locks ---\");\n      success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user, \"lock\", lock);\n      success(broker, request, response, RELEASE_LOCK, \"pid\", project, \"uid\", user2, \"lock\", lock2);\n    } catch (Exception e) {\n      Assert.fail();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4356, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(\"Status-Code\",)&&jSONObject.has(\"Reason-Phrase\",)", "guardType": "IF {", "guardExpressionStart": 875, "guardExpressionEnd": 928, "guardBlockStart": 875, "guardBlockEnd": 1490, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 947, "focalAPIEnd": 975, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JSONObject.append(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "JSONObject.append(value)", "jSONObject.getString(String)"], "useStart": [937, 1016, 1084, 1192, 1277, 1367, 1357, 1895], "useEnd": [976, 1043, 1113, 1214, 1304, 1395, 1396, 1915], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/soartech/soar/tree/master/Domains/SoarQnA/src/main/java/org/json/HTTP.java", "rawCode": "  /**\n   * Convert a JSONObject into an HTTP header. A request header must contain\n   *\n   * <pre>{\n   * Method: \"POST\" (for example),\n   * \"Request-URI\": \"/\" (for example),\n   * \"HTTP-Version\": \"HTTP/1.1\" (for example)\n   * }</pre>\n   *\n   * A response header must contain\n   *\n   * <pre>{\n   * \"HTTP-Version\": \"HTTP/1.1\" (for example),\n   * \"Status-Code\": \"200\" (for example),\n   * \"Reason-Phrase\": \"OK\" (for example)\n   * }</pre>\n   *\n   * Any other members of the JSONObject will be output as HTTP fields. The result will end with two\n   * CRLF pairs.\n   *\n   * @param jo A JSONObject\n   * @return An HTTP header string.\n   * @throws JSONException if the object does not contain enough information.\n   */\n  public static String toString(JSONObject jo) throws JSONException {\n    Iterator keys = jo.keys();\n    String string;\n    StringBuffer sb = new StringBuffer();\n    if (jo.has(\"Status-Code\") && jo.has(\"Reason-Phrase\")) {\n      sb.append(jo.getString(\"HTTP-Version\"));\n      sb.append(' ');\n      sb.append(jo.getString(\"Status-Code\"));\n      sb.append(' ');\n      sb.append(jo.getString(\"Reason-Phrase\"));\n    } else if (jo.has(\"Method\") && jo.has(\"Request-URI\")) {\n      sb.append(jo.getString(\"Method\"));\n      sb.append(' ');\n      sb.append('\"');\n      sb.append(jo.getString(\"Request-URI\"));\n      sb.append('\"');\n      sb.append(' ');\n      sb.append(jo.getString(\"HTTP-Version\"));\n    } else {\n      throw new JSONException(\"Not enough material for an HTTP header.\");\n    }\n    sb.append(CRLF);\n    while (keys.hasNext()) {\n      string = keys.next().toString();\n      if (!string.equals(\"HTTP-Version\")\n          && !string.equals(\"Status-Code\")\n          && !string.equals(\"Reason-Phrase\")\n          && !string.equals(\"Method\")\n          && !string.equals(\"Request-URI\")\n          && !jo.isNull(string)) {\n        sb.append(string);\n        sb.append(\": \");\n        sb.append(jo.getString(string));\n        sb.append(CRLF);\n      }\n    }\n    sb.append(CRLF);\n    return sb.toString();\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4357, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 266, "focalAPIEnd": 289, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["forName(value)", "jSONObject.keys()", "jSONObject.get(String)"], "useStart": [326, 685, 839], "useEnd": [346, 696, 852], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/camsys/onebusaway-gtfs-modules/tree/master/onebusaway-gtfs-transformer/src/main/java/org/onebusaway/gtfs_transformer/factory/TransformFactory.java", "rawCode": "  private void handleTransformOperation(GtfsTransformer transformer, String line, JSONObject json)\n      throws JSONException {\n\n    if (!json.has(\"class\"))\n      throw new IllegalArgumentException(\"transform does not specify a class: \" + line);\n\n    String value = json.getString(\"class\");\n\n    try {\n\n      Class<?> clazz = Class.forName(value);\n      Object factoryObj = clazz.newInstance();\n      if (!(factoryObj instanceof GtfsTransformStrategy))\n        throw new IllegalArgumentException(\n            \"factory object is not an instance of GtfsTransformStrategy: \" + clazz.getName());\n      BeanWrapper wrapped = BeanWrapperFactory.wrap(factoryObj);\n      for (Iterator<?> it = json.keys(); it.hasNext(); ) {\n        String key = (String) it.next();\n        if (key.equals(\"op\") || key.equals(\"class\")) continue;\n        Object v = json.get(key);\n        wrapped.setPropertyValue(key, v);\n      }\n\n      transformer.addTransform((GtfsTransformStrategy) factoryObj);\n    } catch (Exception ex) {\n      throw new IllegalStateException(\"error instantiating class: \" + value, ex);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4358, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 165, "focalAPIEnd": 184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thest1/Android-VKontakte-SDK/tree/master/AndroidVkSdk/src/com/perm/kate/api/Reply.java", "rawCode": "  public static Reply parse(JSONObject o) throws JSONException {\n    Reply r = new Reply();\n    r.id = o.getLong(\"id\");\n    r.date = o.optLong(\"date\");\n    r.text = o.getString(\"text\");\n    return r;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4359, "initialization": ["JSONObject jSONObject = setRestricted(UIRequest,*,*,*,boolean,*)"], "initializationStart": [210], "initializationEnd": [273], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getMessage()", "new UIException(String,*)"], "tryExpressionStart": 125, "tryExpressionEnd": 129, "tryBlockStart": 125, "tryBlockEnd": 1360, "catchExpressionStart": 824, "catchExpressionEnd": 848, "catchBlockStart": 824, "catchBlockEnd": 944, "exceptionHandlingCallStart": [919, 862], "exceptionHandlingCallEnd": [933, 937], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [306], "configurationEnd": [348], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 369, "focalAPIEnd": 399, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getJSON(Storage,JSONObject,value,String)", "createTraverser(UIRequest,*,String,JSONObject,JSONObject,value,int)"], "useStart": [503, 689], "useEnd": [543, 772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/cspi-webui/src/main/java/org/collectionspace/chain/csp/webui/record/RecordSearchList.java", "rawCode": "  private void advancedSearch(Storage storage, UIRequest ui, String path, JSONObject params)\n      throws UIException {\n\n    try {\n\n      JSONObject results = new JSONObject();\n      JSONObject restrictedkey = GenericSearch.setRestricted(ui, null, null, null, true, this.r);\n      JSONObject restriction = restrictedkey.getJSONObject(\"restriction\");\n      String key = restrictedkey.getString(\"key\");\n      GenericSearch.buildQuery(this.r, params, restriction);\n\n      key = \"results\";\n\n      results = getJSON(storage, restriction, key, base);\n\n      // cache for record traverser\n      if (results.has(\"pagination\") && results.getJSONObject(\"pagination\").has(\"separatelists\")) {\n        GenericSearch.createTraverser(ui, this.r.getID(), \"\", results, restriction, key, 1);\n      }\n      ui.sendJSONResponse(results);\n    } catch (JSONException e) {\n      throw new UIException(\"JSONException during advancedSearch \" + e.getMessage(), e);\n    } catch (ExistException e) {\n      throw new UIException(\"ExistException during search_or_list\", e);\n    } catch (UnimplementedException e) {\n      throw new UIException(\"UnimplementedException during search_or_list\", e);\n    } catch (UnderlyingStorageException x) {\n      UIException uiexception = new UIException(x.getMessage(), x.getStatus(), x.getUrl(), x);\n      ui.sendJSONResponse(uiexception.getJSON());\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4360, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [663], "initializationEnd": [684], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 735, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "ResultSet<Author>.get(value)"], "useStart": [849, 910], "useEnd": [885, 930], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zostay/CPAN-Sidekick/tree/master/src/com/qubling/sidekick/fetch/cpan/AuthorDetailsFetcher.java", "rawCode": "  @Override\n  protected void consumeResponse(JSONObject response) throws JSONException {\n\n    ResultSet<Author> authors = getResultSet();\n\n    JSONObject topHits = response.getJSONObject(\"hits\");\n    if (topHits == null) {\n      Log.e(\"AuthorDetailsFetcher\", \"Unexpected response (top hits missing): \" + response);\n      return;\n    }\n\n    JSONArray hits = topHits.getJSONArray(\"hits\");\n    if (hits == null) {\n      Log.e(\"AuthorDetailsFetcher\", \"Unexpected response (nested hits missing): \" + response);\n      return;\n    }\n\n    // Log.d(\"AuthorDetailsFetcher\", response.toString());\n\n    for (int i = 0; i < hits.length(); i++) {\n      JSONObject jsonAuthor = hits.getJSONObject(i).getJSONObject(\"_source\");\n\n      String pauseId = jsonAuthor.getString(\"pauseid\");\n      String fullName = jsonAuthor.getString(\"name\");\n      String gravatarUrl = jsonAuthor.getString(\"gravatar_url\");\n\n      Author author = authors.get(pauseId);\n      if (author != null) {\n        author.setFullName(fullName);\n        author.setGravatarUrl(gravatarUrl);\n        // Log.d(\"AuthorDetailsFetcher\", \"Setting author Gravatar \" + author.getPauseId() + \": \" +\n        // gravatarUrl);\n      }\n      // else {\n      // Log.d(\"AuthorDetailsFetcher\", \"Not setting author Gravatar \" + pauseId);\n      // }\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4361, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 262, "focalAPIEnd": 295, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shamansir/vimeoid/tree/master/apk/src/org/vimeoid/dto/advanced/PortraitsData.java", "rawCode": "  private static Portrait extractFromJson(JSONObject jsonObj) throws JSONException {\n    final Portrait portrait = new Portrait();\n    portrait.width = jsonObj.getInt(FieldsKeys.WIDTH);\n    portrait.height = jsonObj.getInt(FieldsKeys.HEIGHT);\n    portrait.url = jsonObj.getString(FieldsKeys.URL);\n    return portrait;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4362, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [1336], "initializationEnd": [1363], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1395, "focalAPIEnd": 1421, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "new FacebookError(value,*,int)"], "useStart": [1423, 1377], "useEnd": [1446, 1450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emolinablas/CoretelProject/tree/master/libs externas/facebook/src/com/facebook/android/Util.java", "rawCode": "  /**\n   * Parse a server response into a JSON Object. This is a basic implementation using\n   * org.json.JSONObject representation. More sophisticated applications may wish to do their own\n   * parsing.\n   *\n   * <p>The parsed JSON is checked for a variety of error fields and a FacebookException is thrown\n   * if an error condition is set, populated with the error message and error type or code if\n   * available.\n   *\n   * @param response - string representation of the response\n   * @return the response as a JSON Object\n   * @throws JSONException - if the response is not valid JSON\n   * @throws FacebookError - if an error condition is set\n   */\n  @Deprecated\n  public static JSONObject parseJson(String response) throws JSONException, FacebookError {\n    // Edge case: when sending a POST request to /[post_id]/likes\n    // the return value is 'true' or 'false'. Unfortunately\n    // these values cause the JSONObject constructor to throw\n    // an exception.\n    if (response.equals(\"false\")) {\n      throw new FacebookError(\"request failed\");\n    }\n    if (response.equals(\"true\")) {\n      response = \"{value : true}\";\n    }\n    JSONObject json = new JSONObject(response);\n\n    // errors set by the server are not consistent\n    // they depend on the method and endpoint\n    if (json.has(\"error\")) {\n      JSONObject error = json.getJSONObject(\"error\");\n      throw new FacebookError(error.getString(\"message\"), error.getString(\"type\"), 0);\n    }\n    if (json.has(\"error_code\") && json.has(\"error_msg\")) {\n      throw new FacebookError(\n          json.getString(\"error_msg\"), \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_code\")) {\n      throw new FacebookError(\"request failed\", \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_msg\")) {\n      throw new FacebookError(json.getString(\"error_msg\"));\n    }\n    if (json.has(\"error_reason\")) {\n      throw new FacebookError(json.getString(\"error_reason\"));\n    }\n    return json;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4363, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [1162], "initializationEnd": [1188], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["JSONObject.getString(String)"], "tryExpressionStart": 1199, "tryExpressionEnd": 1203, "tryBlockStart": 1199, "tryBlockEnd": 3096, "catchExpressionStart": 1846, "catchExpressionEnd": 1878, "catchBlockStart": 1846, "catchBlockEnd": 2873, "exceptionHandlingCallStart": [1933], "exceptionHandlingCallEnd": [1983], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1233, "focalAPIEnd": 1275, "followUpCheck": "surveyItem.getId().equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 1384, "followUpCheckExpressionEnd": 1424, "followUpCheckBlockStart": 1384, "followUpCheckBlockEnd": 1505, "use": ["processPromptResponse(Prompt,jSONObject,Integer)", "jSONObject.getString(String)"], "useStart": [1766, 1933], "useEnd": [1833, 1983], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ohmage/server/tree/master/src/org/ohmage/domain/campaign/SurveyResponse.java", "rawCode": "  /**\n   * Processes an JSONArray of survey responses based on their survey item counterparts.\n   *\n   * @param surveyItems The survey items to which the responses should pertain.\n   * @param currArray A JSONArray of JSONObjects where each object is a response.\n   * @param repeatableSetIteration If this is processing the responses of a repeatable set, then\n   *     this is the iteration of that repeatable set. Otherwise, it may be null.\n   * @return A map of a response's index to its Response object.\n   * @throws DomainException Thrown if any of the responses are invalid either syntactically or as\n   *     compared to the survey objects.\n   */\n  private Map<Integer, Response> processResponses(\n      final Map<Integer, SurveyItem> surveyItems,\n      final JSONArray currArray,\n      final Integer repeatableSetIteration,\n      final Set<String> allowedPromptIds,\n      final boolean allowPartialSurvey)\n      throws DomainException {\n\n    int numResponses = currArray.length();\n    Map<Integer, Response> results = new HashMap<Integer, Response>(numResponses);\n\n    for (int i = 0; i < numResponses; i++) {\n      try {\n        JSONObject currResponse = currArray.getJSONObject(i);\n\n        try {\n          String promptId = currResponse.getString(JSON_KEY_PROMPT_ID);\n          Prompt prompt = null;\n          for (SurveyItem surveyItem : surveyItems.values()) {\n            if (surveyItem.getId().equals(promptId)) {\n              prompt = (Prompt) surveyItem;\n              break;\n            }\n          }\n          if (prompt == null) {\n            throw new DomainException(\n                ErrorCode.SURVEY_INVALID_RESPONSES, \"The prompt ID is unknown: \" + promptId);\n          }\n\n          results.put(\n              prompt.getIndex(),\n              processPromptResponse(prompt, currResponse, repeatableSetIteration));\n        } catch (JSONException notPrompt) {\n          try {\n            String repeatableSetId = currResponse.getString(JSON_KEY_REPEATABLE_SET_ID);\n            RepeatableSet repeatableSet = null;\n            for (SurveyItem surveyItem : surveyItems.values()) {\n              if (surveyItem.getId().equals(repeatableSetId)) {\n                repeatableSet = (RepeatableSet) surveyItem;\n              }\n            }\n            if (repeatableSet == null) {\n              throw new DomainException(\n                  ErrorCode.SURVEY_INVALID_RESPONSES,\n                  \"The repeatable set ID is unknown: \" + repeatableSetId);\n            }\n\n            results.put(\n                repeatableSet.getIndex(),\n                processRepeatableSet(repeatableSet, currResponse, allowedPromptIds));\n          } catch (JSONException notRepeatableSet) {\n            throw new DomainException(\n                ErrorCode.SURVEY_INVALID_RESPONSES,\n                \"The response wasn't a prompt response or repeatable set.\");\n          }\n        } catch (ClassCastException e) {\n          throw new DomainException(\n              ErrorCode.SURVEY_INVALID_RESPONSES,\n              \"The response and XML disagree on the type of a survey item.\",\n              e);\n        }\n      } catch (JSONException e) {\n        throw new DomainException(\n            ErrorCode.SURVEY_INVALID_RESPONSES, \"A response was not valid JSON.\");\n      }\n    }\n\n    // For survey update, allow partial survey response.\n    if (allowPartialSurvey == false) {\n      // Cycle through the prompts and ensure that a response exists for each\n      // prompt, unless it was masked.\n      for (SurveyItem surveyItem : surveyItems.values()) {\n        // If it's a message, it won't have a response.\n        if (!(surveyItem instanceof Message)) {\n          String surveyItemId = surveyItem.getId();\n\n          // If it's not part of the mask, throw an exception.\n          if ((allowedPromptIds != null) && (!allowedPromptIds.contains(surveyItemId))) {\n\n            continue;\n          }\n\n          boolean found = false;\n\n          for (Response response : results.values()) {\n            if (response.getId().equals(surveyItemId)) {\n              found = true;\n              break;\n            }\n          }\n\n          if (!found) {\n            throw new DomainException(\n                ErrorCode.SURVEY_INVALID_RESPONSES,\n                \"The response is missing a response for the prompt: \" + surveyItemId);\n          }\n        }\n      }\n    }\n\n    return results;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4364, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 286, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getRegistryObjectById(value)", "updateMetadata(RegistryPackageImpl,jSONObject)"], "useStart": [363, 563], "useEnd": [397, 588], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skrusche63/AMES-Web-Service/tree/master/ames-web-service/src/de/kp/ames/web/core/domain/model/RegistryPackage.java", "rawCode": "  /**\n   * Update RegistryPackage from JSON representation\n   *\n   * @param jForm\n   * @return\n   * @throws Exception\n   */\n  public RegistryObjectImpl update(JSONObject jForm) throws Exception {\n\n    /*\n     * Determine registry package from unique identifier\n     */\n    String rid = jForm.getString(RIM_ID);\n\n    RegistryPackageImpl rp = (RegistryPackageImpl) jaxrLCM.getRegistryObjectById(rid);\n    if (rp == null)\n      throw new Exception(\"[RegistryPackage] RegistryObject with id <\" + rid + \"> does not exist.\");\n\n    /*\n     * Update metadata\n     */\n    updateMetadata(rp, jForm);\n\n    /*\n     * Indicate as updated\n     */\n    this.created = false;\n\n    return rp;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4365, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 98, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dfci-cccb/mev/tree/master/annotation/server/src/main/java/com/google/refine/util/JSONUtilities.java", "rawCode": "  public static String getString(JSONObject obj, String key, String def) {\n    try {\n      return obj.getString(key);\n    } catch (JSONException e) {\n      return def;\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4366, "initialization": ["JSONObject jSONObject = Map<String, JSONObject>.get(String)", "JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [589, 666], "initializationEnd": [617, 689], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["Log.error(String)"], "tryExpressionStart": 556, "tryExpressionEnd": 560, "tryBlockStart": 556, "tryBlockEnd": 1582, "catchExpressionStart": 1131, "catchExpressionEnd": 1155, "catchBlockStart": 1131, "catchBlockEnd": 1471, "exceptionHandlingCallStart": [1234], "exceptionHandlingCallEnd": [1390], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jSONObject.isNull(name,))", "guardType": "IF {", "guardExpressionStart": 797, "guardExpressionEnd": 826, "guardBlockStart": 797, "guardBlockEnd": 1078, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1039, "focalAPIEnd": 1066, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["set(value)"], "useStart": [1024], "useEnd": [1067], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kyluka/hive/tree/master/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/GenericUDTFJSONTuple.java", "rawCode": "  @Override\n  public void process(Object[] o) throws HiveException {\n\n    if (o[0] == null) {\n      forward(nullCols);\n      return;\n    }\n    // get the path expression for the 1st row only\n    if (!pathParsed) {\n      for (int i = 0; i < numCols; ++i) {\n        paths[i] = ((StringObjectInspector) inputOIs[i + 1]).getPrimitiveJavaObject(o[i + 1]);\n      }\n      pathParsed = true;\n    }\n\n    String jsonStr = ((StringObjectInspector) inputOIs[0]).getPrimitiveJavaObject(o[0]);\n    if (jsonStr == null) {\n      forward(nullCols);\n      return;\n    }\n    try {\n      JSONObject jsonObj = jsonObjectCache.get(jsonStr);\n      if (jsonObj == null) {\n        jsonObj = new JSONObject(jsonStr);\n        jsonObjectCache.put(jsonStr, jsonObj);\n      }\n\n      for (int i = 0; i < numCols; ++i) {\n        if (jsonObj.isNull(paths[i])) {\n          retCols[i] = null;\n        } else {\n          if (retCols[i] == null) {\n            retCols[i] = cols[i]; // use the object pool rather than creating a new object\n          }\n          retCols[i].set(jsonObj.getString(paths[i]));\n        }\n      }\n      forward(retCols);\n      return;\n    } catch (JSONException e) {\n      // parsing error, invalid JSON string\n      if (!seenErrors) {\n        LOG.error(\n            \"The input is not a valid JSON string: \"\n                + jsonStr\n                + \". Skipping such error messages in the future.\");\n        seenErrors = true;\n      }\n      forward(nullCols);\n      return;\n    } catch (Throwable e) {\n      LOG.error(\"JSON parsing/evaluation exception\" + e);\n      forward(nullCols);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4367, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 57, "tryExpressionEnd": 61, "tryBlockStart": 57, "tryBlockEnd": 627, "catchExpressionStart": 528, "catchExpressionEnd": 552, "catchBlockStart": 528, "catchBlockEnd": 627, "exceptionHandlingCallStart": [601], "exceptionHandlingCallEnd": [620], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 86, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "SessionStorage.SavePreferences(String,value)"], "useStart": [142, 200, 372], "useEnd": [174, 232, 413], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dipen2512/Scheduler/tree/master/SchedulerApp/src/com/schedulerapp/activities/LoginActivity.java", "rawCode": "  private void SaveSession(JSONObject jsonObject) {\n\n    try {\n\n      String userId = jsonObject.getString(\"userId\");\n      String username = jsonObject.getString(\"username\");\n      String fullname = jsonObject.getString(\"fullname\");\n\n      Log.d(\"SonnySP\", \"UserId: \" + userId + \", Username: \" + username);\n\n      SessionStorage storage = new SessionStorage(this);\n      storage.SavePreferences(\"userId\", userId);\n      storage.SavePreferences(\"username\", username);\n      storage.SavePreferences(\"fullname\", fullname);\n\n    } catch (JSONException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4368, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["JSONObject.put(String,String)"], "tryExpressionStart": 91, "tryExpressionEnd": 95, "tryBlockStart": 91, "tryBlockEnd": 2769, "catchExpressionStart": 2430, "catchExpressionEnd": 2455, "catchBlockStart": 2430, "catchBlockEnd": 2508, "exceptionHandlingCallStart": [2465], "exceptionHandlingCallEnd": [2499], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [852], "configurationEnd": [886], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1203, "focalAPIEnd": 1241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["pow(int,value)", "jSONObject.getString(String)", "jSONObject.put(String,String)"], "useStart": [1582, 2384, 2465], "useEnd": [1613, 2420, 2499], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/oferfrid/PrecisExciteTCP/tree/master/mmstudio/src/org/micromanager/acquisition/VirtualAcquisitionDisplay.java", "rawCode": "  public static JSONObject getDisplaySettingsFromSummary(JSONObject summaryMetadata) {\n    try {\n      JSONObject displaySettings = new JSONObject();\n\n      JSONArray chColors = MDUtils.getJSONArrayMember(summaryMetadata, \"ChColors\");\n      JSONArray chNames = MDUtils.getJSONArrayMember(summaryMetadata, \"ChNames\");\n      JSONArray chMaxes, chMins;\n      if (summaryMetadata.has(\"ChContrastMin\")) {\n        chMins = MDUtils.getJSONArrayMember(summaryMetadata, \"ChContrastMin\");\n      } else {\n        chMins = new JSONArray();\n        for (int i = 0; i < chNames.length(); i++) chMins.put(0);\n      }\n      if (summaryMetadata.has(\"ChContrastMax\")) {\n        chMaxes = MDUtils.getJSONArrayMember(summaryMetadata, \"ChContrastMax\");\n      } else {\n        int max = 65536;\n        if (summaryMetadata.has(\"BitDepth\"))\n          max = (int) (Math.pow(2, summaryMetadata.getInt(\"BitDepth\")) - 1);\n        chMaxes = new JSONArray();\n        for (int i = 0; i < chNames.length(); i++) chMaxes.put(max);\n      }\n\n      int numComponents = MDUtils.getNumberOfComponents(summaryMetadata);\n\n      JSONArray channels = new JSONArray();\n      if (numComponents > 1) // RGB\n      {\n        int rgbChannelBitDepth = summaryMetadata.getString(\"PixelType\").endsWith(\"32\") ? 8 : 16;\n        for (int k = 0; k < 3; k++) {\n          JSONObject channelObject = new JSONObject();\n          channelObject.put(\"Color\", rgb[k].getRGB());\n          channelObject.put(\"Name\", rgbNames[k]);\n          channelObject.put(\"Gamma\", 1.0);\n          channelObject.put(\"Min\", 0);\n          channelObject.put(\"Max\", Math.pow(2, rgbChannelBitDepth) - 1);\n          channels.put(channelObject);\n        }\n      } else {\n        for (int k = 0; k < chNames.length(); ++k) {\n          String name = (String) chNames.get(k);\n          int color = chColors.getInt(k);\n          int min = chMins.getInt(k);\n          int max = chMaxes.getInt(k);\n          JSONObject channelObject = new JSONObject();\n          channelObject.put(\"Color\", color);\n          channelObject.put(\"Name\", name);\n          channelObject.put(\"Gamma\", 1.0);\n          channelObject.put(\"Min\", min);\n          channelObject.put(\"Max\", max);\n          channels.put(channelObject);\n        }\n      }\n\n      displaySettings.put(\"Channels\", channels);\n\n      JSONObject comments = new JSONObject();\n      String summary = \"\";\n      try {\n        summary = summaryMetadata.getString(\"Comment\");\n      } catch (JSONException ex) {\n        summaryMetadata.put(\"Comment\", \"\");\n      }\n      comments.put(\"Summary\", summary);\n      displaySettings.put(\"Comments\", comments);\n      return displaySettings;\n    } catch (Exception e) {\n      ReportingUtils.showError(\"Error creating display settigns from summary metadata\");\n      return null;\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4369, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 116, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setUsage(value)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [102, 169, 226], "useEnd": [145, 201, 258], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yuyang226/FlickrjApi4Android/tree/master/flickrj-android/src/main/java/com/googlecode/flickrjandroid/machinetags/MachinetagsInterface.java", "rawCode": "  private Pair parsePair(JSONObject nsElement) throws JSONException {\n    Pair pair = new Pair();\n    pair.setUsage(nsElement.getString(\"usage\"));\n    pair.setNamespace(nsElement.getString(\"namespace\"));\n    pair.setPredicate(nsElement.getString(\"predicate\"));\n    return pair;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4370, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 81, "focalAPIEnd": 101, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "new SMSDeliveryInfo(value,String,String)"], "useStart": [127, 180, 226], "useEnd": [152, 212, 263], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/attdevsupport/ATT_APIPlatform_SampleApps/tree/master/RESTFul/SMS/Java/app1/src/main/java/com/att/api/sms/model/SMSDeliveryInfo.java", "rawCode": "  public static SMSDeliveryInfo valueOf(JSONObject jobj) {\n    final String id = jobj.getString(\"Id\");\n    final String addr = jobj.getString(\"Address\");\n    final String status = jobj.getString(\"DeliveryStatus\");\n\n    return new SMSDeliveryInfo(id, addr, status);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4371, "initialization": ["JSONObject jSONObject = parseJson(String)"], "initializationStart": [124], "initializationEnd": [148], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["ProgressDialog.dismiss()", "JSONObject.getString(String)", "getMessage()", "setText(*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 840, "catchExpressionStart": 568, "catchExpressionEnd": 592, "catchBlockStart": 568, "catchBlockEnd": 701, "exceptionHandlingCallStart": [602, 636, 677, 628], "exceptionHandlingCallEnd": [618, 674, 691, 692], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 184, "focalAPIEnd": 209, "followUpCheck": "TextUtils.isEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 219, "followUpCheckExpressionEnd": 253, "followUpCheckBlockStart": 219, "followUpCheckBlockEnd": 559, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/proxy-gen/codegen/tree/master/samples/platform/android/facebook/java/facebook-android-sdk-3.0.1/samples/Hackbook/src/com/facebook/android/UploadPhotoResultDialog.java", "rawCode": "    @Override\n    public void onComplete(final String response, final Object state) {\n      try {\n        JSONObject json = Util.parseJson(response);\n        final String pictureURL = json.getString(\"picture\");\n        if (TextUtils.isEmpty(pictureURL)) {\n          setText(\"Error getting \\'picture\\' field of the photo\");\n        } else {\n          mHandler.post(\n              new Runnable() {\n                @Override\n                public void run() {\n                  new FetchImage().execute(pictureURL);\n                }\n              });\n        }\n      } catch (JSONException e) {\n        dialog.dismiss();\n        setText(activity.getString(R.string.exception) + e.getMessage());\n      } catch (FacebookError e) {\n        dialog.dismiss();\n        setText(activity.getString(R.string.facebook_error) + e.getMessage());\n      }\n    }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4372, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 501, "focalAPIEnd": 527, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alibaba/mdrill/tree/master/trunk/adhoc-mdrill/src/main/java/com/alimama/mdrill/ui/service/utils/WebServiceParams.java", "rawCode": "  public static HigoJoinParams[] parseJoins(String leftjoin, GetPartions.Shards shard)\n      throws JSONException {\n    if (leftjoin == null || leftjoin.trim().isEmpty()) {\n      return new HigoJoinParams[0];\n    }\n    JSONArray jsonStr = new JSONArray(leftjoin.trim());\n    HigoJoinParams[] rtn = new HigoJoinParams[jsonStr.length()];\n    for (int i = 0; i < jsonStr.length(); i++) {\n      JSONObject obj = jsonStr.getJSONObject(i);\n      HigoJoinParams p = new HigoJoinParams();\n      p.tablename = obj.getString(\"tablename\");\n      p.hdfsPath = obj.getString(\"path\") + \"/part-00000\";\n      p.fq = WebServiceParams.fqList(false, obj.getString(\"fq\"), shard, null);\n      p.fl = obj.getString(\"fl\").split(\",\");\n      p.leftkey = obj.getString(\"leftkey\");\n      p.rightkey = obj.getString(\"rightkey\");\n      p.returnPrefix = obj.getString(\"prefix\");\n      p.sort = obj.has(\"sort\") ? obj.getString(\"sort\") : \"\";\n      rtn[i] = p;\n    }\n    return rtn;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4373, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [200], "initializationEnd": [222], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 353, "focalAPIEnd": 380, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [336, 462, 793], "useEnd": [381, 491, 812], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/auxgroup-sanxing/Sesame/tree/master/sesame-studio/src/main/java/com/sanxing/studio/action/SQLExplorer.java", "rawCode": "  private boolean saveDataSources(JSONArray datas) throws Exception {\n    List dataSources = new ArrayList();\n    int i = 0;\n    for (int len = datas.length(); i < len; ++i) {\n      JSONObject data = datas.getJSONObject(i);\n      Element datasource = new Element(\"datasource\");\n\n      Element jndiName = new Element(\"jndi-name\");\n      jndiName.setText(data.getString(\"jndi-name\"));\n\n      Element tsmanager = new Element(\"transaction\");\n      tsmanager.setText(data.getString(\"transaction\"));\n\n      Element appInfo = new Element(\"app-info\");\n      for (Iterator keys = data.keys(); keys.hasNext(); ) {\n        String key = (String) keys.next();\n        if ((!(key.equals(\"jndi-name\"))) && (!(key.equals(\"transaction\")))) {\n          Element child = new Element(key);\n          child.setText(data.getString(key));\n          appInfo.addContent(child);\n        }\n      }\n      datasource.addContent(jndiName);\n      datasource.addContent(tsmanager);\n      datasource.addContent(appInfo);\n\n      dataSources.add(datasource);\n    }\n    Configuration.setDataSources(dataSources);\n    return true;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4374, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()", "e(String,String)"], "tryExpressionStart": 684, "tryExpressionEnd": 688, "tryBlockStart": 684, "tryBlockEnd": 1438, "catchExpressionStart": 1306, "catchExpressionEnd": 1330, "catchBlockStart": 1306, "catchBlockEnd": 1438, "exceptionHandlingCallStart": [1383, 1412], "exceptionHandlingCallEnd": [1402, 1429], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 885, "focalAPIEnd": 911, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "ArrayList<String>.add(value)"], "useStart": [941, 1055], "useEnd": [968, 1073], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoralex911/Quirofano-App-Movil/tree/master/Quirofano/src/com/hu/quirofano/AccionTransoperatorio.java", "rawCode": "  public void mostrarPersonal(String registro_id) throws JSONException {\n    personal.clear();\n\n    String val = \"\";\n    String value = \"\";\n    String cont = \"\";\n\n    ArrayList<NameValuePair> datosEnviar = new ArrayList<NameValuePair>();\n    datosEnviar.add(new BasicNameValuePair(\"registro_id\", registro_id));\n\n    // JSONObject json_objeto;\n    JSONArray jdata = envio.getserverdata(datosEnviar, URL_connect1);\n    // System.out.println(\"jdata = \"+jdata.getString(0));\n    System.out.println(jdata.toString());\n    System.out.println(\"largo de jdata = \" + jdata.length());\n    if (jdata != null && jdata.length() > 0) {\n      // JSONObject json_data; //creamos un objeto JSON\n      try {\n\n        for (int n = 0; n < jdata.length(); n++) {\n          // st.clear();\n          System.out.println(\"vuelta:\" + n);\n          JSONObject json_data = jdata.getJSONObject(n);\n          val = json_data.getString(\"dat\"); // nombre\n          value = json_data.getString(\"dato\"); // tipo\n\n          ArrayList<String> temporary = new ArrayList<String>();\n\n          temporary.add(val);\n          temporary.add(value);\n\n          Log.e(\"log-st\", \"array temprary = \" + temporary);\n\n          personal.add(temporary);\n          // st.clear();\n        }\n        Log.e(\"array personal\", \"personal = \" + personal);\n      } catch (JSONException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n        Log.e(\"hi\", \"hi\");\n      }\n    } // Fin de if(comprueba si lo obtenido no es \"null\")\n    else { // json obtenido invalido verificar parte WEB.\n      Log.e(\"JSON \", \"ERROR\");\n      // return st;\n    }\n  } // Fin de mostrarPersonal\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4375, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)&&jSONObject.has(\"childShapes\",)", "guardType": "IF {", "guardExpressionStart": 552, "guardExpressionEnd": 610, "guardBlockStart": 552, "guardBlockEnd": 874, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 630, "focalAPIEnd": 660, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JSONObject.put(value,JSONObject)", "jSONObject.getJSONArray(String)"], "useStart": [619, 701], "useEnd": [669, 735], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/editor/server/src/org/oryxeditor/server/diagram/DiagramBuilder.java", "rawCode": "  /**\n   * Prepare a model JSON for analyze, resolves the hierarchical structure creates a HashMap which\n   * contains all resourceIds as keys and for each key the JSONObject, all id are keys of this map\n   *\n   * @param object\n   * @return a HashMap keys: all ressourceIds values: all child JSONObjects\n   * @throws JSONException\n   */\n  public static HashMap<String, JSONObject> flatRessources(JSONObject object) throws JSONException {\n    HashMap<String, JSONObject> result = new HashMap<String, JSONObject>();\n\n    // no cycle in hierarchies!!\n    if (object.has(\"resourceId\") && object.has(\"childShapes\")) {\n      result.put(object.getString(\"resourceId\"), object);\n      JSONArray childShapes = object.getJSONArray(\"childShapes\");\n      for (int i = 0; i < childShapes.length(); i++) {\n        result.putAll(flatRessources(childShapes.getJSONObject(i)));\n      }\n    }\n    ;\n\n    return result;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4376, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [310], "initializationEnd": [333], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 419, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["findEventIdOnServer(value)", "jSONObject.put(String,String)"], "useStart": [634, 754], "useEnd": [662, 777], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/v10/client/src/main/java/com/funambol/client/test/calendar/CalendarRobot.java", "rawCode": "  public void saveEventOnServerAsJSON(String jsonObj) throws Throwable {\n\n    // Unescape the parameter\n    jsonObj = StringUtil.replaceAll(jsonObj, \"&quot;\", \"\\\"\");\n    jsonObj = StringUtil.replaceAll(jsonObj, \"&comma;\", \",\");\n\n    Log.trace(TAG_LOG, \"JSON event is: \" + jsonObj);\n\n    JSONObject jsonEvent = new JSONObject(jsonObj);\n    // If the values are not available, an excpetion is thrown\n    String summary = jsonEvent.getString(\"summary\");\n\n    Log.trace(TAG_LOG, \"summary=\" + summary);\n\n    SapiHandler sapiHandler = getSapiHandler();\n    Vector params = new Vector();\n\n    // Is this an add or an update?\n    String id = findEventIdOnServer(summary);\n\n    Log.trace(TAG_LOG, \"Server id=\" + id);\n    boolean add;\n\n    if (id != null) {\n      jsonEvent.put(\"id\", id);\n      add = false;\n    } else {\n      add = true;\n    }\n\n    params.addElement(\"data=\" + jsonEvent.toString());\n    JSONObject resp;\n    if (add) {\n      resp = sapiHandler.query(\"calendar\", \"eventcreate\", params, null, null);\n    } else {\n      resp = sapiHandler.query(\"calendar\", \"eventmodify\", params, null, null);\n    }\n\n    if (id == null) {\n      id = resp.getString(\"id\");\n      Log.debug(TAG_LOG, \"The new event has id=\" + id);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4377, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.containsKey(name,)", "guardType": "IF {", "guardExpressionStart": 128, "guardExpressionEnd": 161, "guardBlockStart": 128, "guardBlockEnd": 216, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 182, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setId(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [170, 281, 389, 496, 601], "useEnd": [209, 310, 421, 526, 631], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jior/isdp/tree/master/workspace/glaf-isdp/src/main/java/com/glaf/isdp/util/CellRepInfoChartJsonFactory.java", "rawCode": "  public static CellRepInfoChart jsonToObject(JSONObject jsonObject) {\n    CellRepInfoChart model = new CellRepInfoChart();\n    if (jsonObject.containsKey(\"id\")) {\n      model.setId(jsonObject.getString(\"id\"));\n    }\n    if (jsonObject.containsKey(\"topid\")) {\n      model.setTopid(jsonObject.getString(\"topid\"));\n    }\n    if (jsonObject.containsKey(\"nameLine\")) {\n      model.setNameLine(jsonObject.getString(\"nameLine\"));\n    }\n    if (jsonObject.containsKey(\"dnameX\")) {\n      model.setDnameX(jsonObject.getString(\"dnameX\"));\n    }\n    if (jsonObject.containsKey(\"dnameY\")) {\n      model.setDnameY(jsonObject.getString(\"dnameY\"));\n    }\n\n    return model;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4378, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 964, "focalAPIEnd": 995, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anbangr/trusted-mr/tree/master/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesCapacitySched.java", "rawCode": "  private void verifySubQueue(\n      JSONObject info, String q, float parentAbsCapacity, float parentAbsMaxCapacity)\n      throws JSONException, Exception {\n    int numExpectedElements = 11;\n    boolean isParentQueue = true;\n    if (!info.has(\"queues\")) {\n      numExpectedElements = 20;\n      isParentQueue = false;\n    }\n    assertEquals(\"incorrect number of elements\", numExpectedElements, info.length());\n\n    QueueInfo qi = isParentQueue ? new QueueInfo() : new LeafQueueInfo();\n    qi.capacity = (float) info.getDouble(\"capacity\");\n    qi.usedCapacity = (float) info.getDouble(\"usedCapacity\");\n    qi.maxCapacity = (float) info.getDouble(\"maxCapacity\");\n    qi.absoluteCapacity = (float) info.getDouble(\"absoluteCapacity\");\n    qi.absoluteMaxCapacity = (float) info.getDouble(\"absoluteMaxCapacity\");\n    qi.absoluteUsedCapacity = (float) info.getDouble(\"absoluteUsedCapacity\");\n    qi.numApplications = info.getInt(\"numApplications\");\n    qi.usedResources = info.getString(\"usedResources\");\n    qi.queueName = info.getString(\"queueName\");\n    qi.state = info.getString(\"state\");\n\n    verifySubQueueGeneric(q, qi, parentAbsCapacity, parentAbsMaxCapacity);\n\n    if (isParentQueue) {\n      JSONArray arr = info.getJSONObject(\"queues\").getJSONArray(\"queue\");\n      // test subqueues\n      for (int i = 0; i < arr.length(); i++) {\n        JSONObject obj = arr.getJSONObject(i);\n        String q2 = q + \".\" + obj.getString(\"queueName\");\n        verifySubQueue(obj, q2, qi.absoluteCapacity, qi.absoluteMaxCapacity);\n      }\n    } else {\n      LeafQueueInfo lqi = (LeafQueueInfo) qi;\n      lqi.numActiveApplications = info.getInt(\"numActiveApplications\");\n      lqi.numPendingApplications = info.getInt(\"numPendingApplications\");\n      lqi.numContainers = info.getInt(\"numContainers\");\n      lqi.maxApplications = info.getInt(\"maxApplications\");\n      lqi.maxApplicationsPerUser = info.getInt(\"maxApplicationsPerUser\");\n      lqi.maxActiveApplications = info.getInt(\"maxActiveApplications\");\n      lqi.maxActiveApplicationsPerUser = info.getInt(\"maxActiveApplicationsPerUser\");\n      lqi.userLimit = info.getInt(\"userLimit\");\n      lqi.userLimitFactor = (float) info.getDouble(\"userLimitFactor\");\n      verifyLeafQueueGeneric(q, lqi);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4379, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [828], "initializationEnd": [864], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [920], "configurationEnd": [938], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 964, "focalAPIEnd": 994, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "checkStringMatch(String,String,value)"], "useStart": [1016, 1075, 1119], "useEnd": [1048, 1111, 1305], "hasFinally": 1, "cleanUpCall": ["MockRM.stop()"], "finallyExpressionStart": 1549, "finallyExpressionEnd": 1557, "finallyBlockStart": 1549, "finallyBlockEnd": 1581, "cleanUpCallStart": [1565], "cleanUpCallEnd": [1574], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesNodes.java", "rawCode": "  @Test\n  public void testNodesQueryHealthyInvalid() throws JSONException, Exception {\n    WebResource r = resource();\n    rm.registerNode(\"h1:1234\", 5120);\n    rm.registerNode(\"h2:1235\", 5121);\n\n    try {\n      r.path(\"ws\")\n          .path(\"v1\")\n          .path(\"cluster\")\n          .path(\"nodes\")\n          .queryParam(\"healthy\", \"tr\")\n          .accept(MediaType.APPLICATION_JSON)\n          .get(JSONObject.class);\n      fail(\"should have thrown exception querying invalid healthy string\");\n    } catch (UniformInterfaceException ue) {\n      ClientResponse response = ue.getResponse();\n      assertEquals(Status.BAD_REQUEST, response.getClientResponseStatus());\n      assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n      JSONObject msg = response.getEntity(JSONObject.class);\n      JSONObject exception = msg.getJSONObject(\"RemoteException\");\n      assertEquals(\"incorrect number of elements\", 3, exception.length());\n      String message = exception.getString(\"message\");\n      String type = exception.getString(\"exception\");\n      String classname = exception.getString(\"javaClassName\");\n      WebServicesTestUtils.checkStringMatch(\n          \"exception message\",\n          \"java.lang.Exception: Error: You must specify either true or false to query on health\",\n          message);\n      WebServicesTestUtils.checkStringMatch(\"exception type\", \"BadRequestException\", type);\n      WebServicesTestUtils.checkStringMatch(\n          \"exception classname\", \"org.apache.hadoop.yarn.webapp.BadRequestException\", classname);\n\n    } finally {\n      rm.stop();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4380, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [585], "initializationEnd": [608], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["toString()", "w(String,*)"], "tryExpressionStart": 230, "tryExpressionEnd": 234, "tryBlockStart": 230, "tryBlockEnd": 1197, "catchExpressionStart": 1131, "catchExpressionEnd": 1155, "catchBlockStart": 1131, "catchBlockEnd": 1197, "exceptionHandlingCallStart": [1177, 1163], "exceptionHandlingCallEnd": [1189, 1190], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 637, "focalAPIEnd": 678, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "new ClientUser(value,String,String)"], "useStart": [709, 866, 957], "useEnd": [751, 908, 1002], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/choclover/StudentPalClient/tree/master/src/com/studentpal/app/handler/MessageHandler.java", "rawCode": "  private Set<ClientUser> saveManagedDevsInfoToDB(JSONObject jsonResObj) {\n    if (jsonResObj == null) {\n      Logger.w(TAG, \"Input result obj should NOT be NULL\");\n      return null;\n    }\n\n    Set<ClientUser> result = null;\n    try {\n      JSONArray devAry = null;\n      if (jsonResObj.has(Event.TAGNAME_DEVICES)) {\n        devAry = jsonResObj.getJSONArray(Event.TAGNAME_DEVICES);\n      }\n\n      if (devAry != null && devAry.length() > 0) {\n        result = new HashSet<ClientUser>(devAry.length());\n\n        for (int i = 0; i < devAry.length(); i++) {\n          JSONObject devObj = devAry.getJSONObject(i);\n          String phoneNo = devObj.getString(Event.TAGNAME_PHONE_NUM);\n          String phoneImsi = devObj.getString(Event.TAGNAME_PHONE_IMSI);\n          String phoneImei = null;\n          if (devObj.has(Event.TAGNAME_PHONE_IMEI)) {\n            phoneImei = devObj.getString(Event.TAGNAME_PHONE_IMEI);\n          }\n\n          ClientUser managedDev = new ClientUser(phoneNo, phoneImsi, phoneImei);\n          result.add(managedDev);\n        }\n\n        DBaseManager.getInstance().saveManagedDevInfoToDB(result);\n      }\n\n    } catch (JSONException e) {\n      Logger.w(TAG, e.toString());\n    }\n\n    DataManager.getInstance().setManagedDevs(result);\n\n    return result;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4381, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [1322], "initializationEnd": [1349], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1381, "focalAPIEnd": 1407, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "new FacebookError(value,*,int)"], "useStart": [1409, 1363], "useEnd": [1432, 1436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/matiasf/GeoRedTSI2/tree/master/GeoRed/source/facebook/src/com/facebook/android/Util.java", "rawCode": "  /**\n   * Parse a server response into a JSON Object. This is a basic implementation using\n   * org.json.JSONObject representation. More sophisticated applications may wish to do their own\n   * parsing.\n   *\n   * <p>The parsed JSON is checked for a variety of error fields and a FacebookException is thrown\n   * if an error condition is set, populated with the error message and error type or code if\n   * available.\n   *\n   * @param response - string representation of the response\n   * @return the response as a JSON Object\n   * @throws JSONException - if the response is not valid JSON\n   * @throws FacebookError - if an error condition is set\n   */\n  public static JSONObject parseJson(String response) throws JSONException, FacebookError {\n    // Edge case: when sending a POST request to /[post_id]/likes\n    // the return value is 'true' or 'false'. Unfortunately\n    // these values cause the JSONObject constructor to throw\n    // an exception.\n    if (response.equals(\"false\")) {\n      throw new FacebookError(\"request failed\");\n    }\n    if (response.equals(\"true\")) {\n      response = \"{value : true}\";\n    }\n    JSONObject json = new JSONObject(response);\n\n    // errors set by the server are not consistent\n    // they depend on the method and endpoint\n    if (json.has(\"error\")) {\n      JSONObject error = json.getJSONObject(\"error\");\n      throw new FacebookError(error.getString(\"message\"), error.getString(\"type\"), 0);\n    }\n    if (json.has(\"error_code\") && json.has(\"error_msg\")) {\n      throw new FacebookError(\n          json.getString(\"error_msg\"), \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_code\")) {\n      throw new FacebookError(\"request failed\", \"\", Integer.parseInt(json.getString(\"error_code\")));\n    }\n    if (json.has(\"error_msg\")) {\n      throw new FacebookError(json.getString(\"error_msg\"));\n    }\n    if (json.has(\"error_reason\")) {\n      throw new FacebookError(json.getString(\"error_reason\"));\n    }\n    return json;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4382, "initialization": ["JSONObject jSONObject = getDataFromResponse(JSONObject)"], "initializationStart": [467], "initializationEnd": [496], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 504, "guardExpressionEnd": 525, "guardBlockStart": 504, "guardBlockEnd": 590, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 558, "focalAPIEnd": 580, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseLong(value)"], "useStart": [543], "useEnd": [581], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us9098/sapisync/src/main/java/com/funambol/sapisync/SapiSyncHandler.java", "rawCode": "  /**\n   * @param source\n   * @return\n   */\n  public long getUserAvailableServerQuota(String remoteUri) throws SapiException {\n    JSONObject response;\n    try {\n      response = sapiQueryWithRetries(\"media\", \"get-storage-space\", null, null, null);\n\n      if (SapiResultError.hasError(response)) {\n        checkForCommonSapiErrorCodesAndThrowSapiException(\n            response, \"Error in get user available server quota call\", true);\n      }\n      JSONObject data = getDataFromResponse(response);\n      if (data.has(\"free\")) {\n        return Long.parseLong(data.getString(\"free\"));\n      }\n      return -1;\n\n    } catch (NotSupportedCallException e) {\n      throw SapiException.SAPI_EXCEPTION_CALL_NOT_SUPPORTED;\n    } catch (IOException ioe) {\n      throw SapiException.SAPI_EXCEPTION_NO_CONNECTION;\n    } catch (JSONException e) {\n      throw SapiException.SAPI_EXCEPTION_UNKNOWN;\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4383, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 162, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "new CommitFile(value,List<Line>,String,String)"], "useStart": [213, 263, 315, 399], "useEnd": [240, 293, 344, 446], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HugoLnx/parrott/tree/master/src/main/java/br/com/parrot/github/finder/CommitFilesFinder.java", "rawCode": "  private CommitFile parseCommitFile(JSONObject fileJson) throws JSONException {\n    if (!fileJson.has(\"patch\")) {\n      return null;\n    }\n    String filename = fileJson.getString(\"filename\");\n    String patch = fileJson.getString(\"patch\");\n    String blobUri = fileJson.getString(\"blob_url\");\n    String rawUri = fileJson.getString(\"raw_url\");\n\n    List<Line> text = parsePath(patch);\n\n    return new CommitFile(filename, text, blobUri, rawUri);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4384, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [1686], "initializationEnd": [1714], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new EnvSocialContentException(String,*,*)"], "tryExpressionStart": 1492, "tryExpressionEnd": 1496, "tryBlockStart": 1492, "tryBlockEnd": 2264, "catchExpressionStart": 2020, "catchExpressionEnd": 2044, "catchBlockStart": 2020, "catchBlockEnd": 2141, "exceptionHandlingCallStart": [2058], "exceptionHandlingCallEnd": [2134], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1760, "focalAPIEnd": 1782, "followUpCheck": "value != null && !value.equalsIgnoreCase(\"null\")", "checkType": "IF", "followUpCheckExpressionStart": 1793, "followUpCheckExpressionEnd": 1844, "followUpCheckBlockStart": 1793, "followUpCheckBlockEnd": 1977, "use": ["getFullPath(value)", "getAnnotationsList(Context,value,Location,boolean)"], "useStart": [1864, 1916], "useEnd": [1885, 1965], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envsmth/tree/master/EnvSocialApp/src/com/envsocial/android/api/Annotation.java", "rawCode": "  private static List<Annotation> getAnnotationsList(\n      Context context, String annotationRequestUrl, Location location, boolean retrieveAll)\n      throws EnvSocialComException, EnvSocialContentException {\n\n    // get data of the user executing this action\n    String userUri = Preferences.getUserUri(context);\n    AppClient client = new AppClient(context);\n\n    // append virtual access flag to the request url\n    // if location is null, the flag will have been set earlier in the url\n    if (location != null) {\n      boolean virtualAccess = location.hasVirtualAccess();\n      annotationRequestUrl =\n          Url.appendOrReplaceParameter(\n              annotationRequestUrl, \"virtual\", Boolean.toString(virtualAccess));\n    }\n\n    HttpResponse response;\n    String responseData;\n\n    try {\n      response = client.makeGetRequest(annotationRequestUrl);\n      responseData = EntityUtils.toString(response.getEntity());\n    } catch (Exception e) {\n      throw new EnvSocialComException(userUri, HttpMethod.GET, EnvSocialResource.ANNOTATION, e);\n    }\n\n    // Check the status code\n    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n      // Log.d(TAG, \"[DEBUG]>> Error response on annotations list: \" + responseData);\n      throw EnvSocialComException.newInstanceFrom(\n          response.getStatusLine().getStatusCode(),\n          userUri,\n          HttpMethod.GET,\n          EnvSocialResource.ANNOTATION,\n          null);\n    }\n\n    // If SC_OK, parse response\n    try {\n      List<Annotation> annotations = parse(context, responseData, location);\n\n      // if we want to consume the entire annotations list\n      if (retrieveAll) {\n        JSONObject meta = new JSONObject(responseData).getJSONObject(\"meta\");\n        String next = meta.getString(\"next\");\n\n        if (next != null && !next.equalsIgnoreCase(\"null\")) {\n          next = Url.getFullPath(next);\n          annotations.addAll(getAnnotationsList(context, next, location, true));\n        }\n      }\n\n      return annotations;\n\n    } catch (JSONException e) {\n      throw new EnvSocialContentException(responseData, EnvSocialResource.ANNOTATION, e);\n    } catch (ParseException e) {\n      throw new EnvSocialContentException(responseData, EnvSocialResource.ANNOTATION, e);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4385, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 276, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pankajkainthla/phonegap-plugins-all/tree/master/Android/InAppBilling/net/robotmedia/billing/model/Transaction.java", "rawCode": "  public static Transaction parse(JSONObject json) throws JSONException {\n    final Transaction transaction = new Transaction();\n    final int response = json.getInt(PURCHASE_STATE);\n    transaction.purchaseState = PurchaseState.valueOf(response);\n    transaction.productId = json.getString(PRODUCT_ID);\n    transaction.packageName = json.getString(PACKAGE_NAME);\n    transaction.purchaseTime = json.getLong(PURCHASE_TIME);\n    transaction.orderId = json.optString(ORDER_ID, null);\n    transaction.notificationId = json.optString(NOTIFICATION_ID, null);\n    transaction.developerPayload = json.optString(DEVELOPER_PAYLOAD, null);\n    return transaction;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4386, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getClass()", "getSimpleName()", "toString()", "i(*,String)"], "tryExpressionStart": 67, "tryExpressionEnd": 71, "tryBlockStart": 67, "tryBlockEnd": 2686, "catchExpressionStart": 2561, "catchExpressionEnd": 2581, "catchBlockStart": 2561, "catchBlockEnd": 2686, "exceptionHandlingCallStart": [2595, 2595, 2666, 2589], "exceptionHandlingCallEnd": [2605, 2621, 2678, 2679], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 1339, "focalAPIEnd": 1373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [1387, 1445, 1501, 1551, 1599, 1650, 1699, 1746, 1797, 1846, 1899, 1951, 2003, 2056, 2106, 2159, 2229], "useEnd": [1431, 1487, 1537, 1585, 1636, 1685, 1732, 1783, 1832, 1885, 1937, 1989, 2042, 2092, 2145, 2198, 2263], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMEUD/tdd/tree/master/petru-ciobanu/MoodAgenda/CorporateServices/src/com/carrefour/services/ImportService.java", "rawCode": "  public void syncUpdateEvents(String username, String sync) {\n    try {\n      HttpClient httpclient = new DefaultHttpClient(Utils.getHttpParams());\n      HttpPost httppost = new HttpPost(Utils.SERVICE_URL_SYNC_UPDATE_EVENTS);\n      List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);\n      nameValuePairs.add(new BasicNameValuePair(\"username\", username));\n      nameValuePairs.add(new BasicNameValuePair(\"sync\", sync));\n      httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n      HttpResponse response = httpclient.execute(httppost);\n      HttpEntity entity = response.getEntity();\n      InputStream is = entity.getContent();\n      int ch;\n      StringBuffer b = new StringBuffer();\n      while ((ch = is.read()) != -1) {\n        b.append((char) ch);\n      }\n      String s = b.toString();\n      is.close();\n      JSONObject jso = new JSONObject(s);\n      if (jso.getInt(\"id_evenement\") == 0) {\n        Log.i(getClass().getSimpleName(), \"REST ENDPOINT SYNC_UPDATE_EVENTS QUERY IS NULL \");\n      } else {\n        Log.i(getClass().getSimpleName(), \"REST ENDPOINT SYNC_UPDATE_EVENTS QUERY IS NOT NULL\");\n        DatabaseConnector dbConnector = new DatabaseConnector(sharedContext);\n        dbConnector.open();\n        dbConnector.updateSync(\n            2,\n            jso.getInt(\"id_evenement\"),\n            jso.getString(\"evenement_libelle\"),\n            jso.getString(\"evenement_datedebutvalidite\"),\n            jso.getString(\"evenement_datefinvalidite\"),\n            jso.getString(\"evenement_datedebut\"),\n            jso.getString(\"evenement_datefin\"),\n            jso.getString(\"evenement_heuredebut\"),\n            jso.getString(\"evenement_heurefin\"),\n            jso.getString(\"evenement_detail\"),\n            jso.getString(\"evenement_nomfichier\"),\n            jso.getString(\"evenement_priorite\"),\n            jso.getString(\"evenement_stpdatemodif\"),\n            jso.getString(\"evenement_stpdatecrea\"),\n            jso.getString(\"evenement_stputilcrea\"),\n            jso.getString(\"evenement_stputilmodif\"),\n            jso.getString(\"evenement_stpstatut\"),\n            jso.getString(\"evenement_stpdatepubli\"),\n            jso.getString(\"evenement_stputilpubli\"),\n            \"3\",\n            jso.getString(\"evenement_deleted\"));\n        ;\n        dbConnector.close();\n        // SET SYNC STATUS 2 ON BOTH SIZE\n        syncUpdateId(\n            \"frfsamb\",\n            String.valueOf(jso.getInt(\"id_evenement\")),\n            String.valueOf(jso.getInt(\"evenement_id_android\")),\n            \"2\",\n            \"3\");\n      }\n    } catch (Exception e) {\n      Log.i(getClass().getSimpleName(), \"ERROR REST ENDPOINT SYNC_UPDATE_EVENTS\" + e.toString());\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4387, "initialization": ["JSONObject jSONObject = TCPMessageHandler.readMessageAsJSONObject()"], "initializationStart": [3056], "initializationEnd": [3089], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["JSONObject.put(String,String)", "JSONObject.put(String,String)", "getMessage()", "w(String,*)", "JSONObject.put(String,JSONObject)"], "tryExpressionStart": 1329, "tryExpressionEnd": 1333, "tryBlockStart": 1329, "tryBlockEnd": 5874, "catchExpressionStart": 4096, "catchExpressionEnd": 4116, "catchBlockStart": 4096, "catchBlockEnd": 4357, "exceptionHandlingCallStart": [3781, 4181, 4274, 4263, 4307], "exceptionHandlingCallEnd": [3810, 4245, 4288, 4289, 4340], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.getString(\"type\",).equals(\"invoke\",) && jSONObject.has(\"type\",)", "guardType": "IF {", "guardExpressionStart": 3101, "guardExpressionEnd": 3125, "guardBlockStart": 3101, "guardBlockEnd": 5430, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 3217, "focalAPIEnd": 3241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getString(String)", "jSONObject.getJSONObject(String)", "jSONObject.getInt(String)", "RPCService.accessMethod(value,String,JSONObject)", "JSONObject.put(String,jSONObject)", "JSONObject.put(String,jSONObject)", "JSONObject.put(String,jSONObject)", "JSONObject.put(String,jSONObject)"], "useStart": [3273, 3334, 3556, 3685, 3907, 4307, 4745, 5253], "useEnd": [3300, 3363, 3576, 3723, 3940, 4340, 4778, 5286], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/djmailhot/CSE461projects/tree/master/Net/src/edu/uw/cs/cse461/Net/RPC/RPCThread.java", "rawCode": "  @Override\n  public void run() {\n    try {\n      socket = new ServerSocket(portNum);\n      Log.v(TAG, \"Server set up at port: \" + portNum);\n    } catch (IOException e) {\n      Log.e(TAG, \"Failure to create ServerSocket\");\n      return;\n    }\n    // attempt to set the timeout between successive checks of _timeToClose flag\n    try {\n      socket.setSoTimeout(_timeOut);\n    } catch (SocketException e) {\n      e.printStackTrace();\n      return;\n    }\n    Log.v(\"RPCThread\", \"Server ready to accept clients\");\n    // loop until time to close\n    boolean error = false;\n    boolean timeout = false;\n    Socket s = null;\n    int id = 1;\n    while (true) {\n      // set up socket to accept. Code hangs on .accept() until a connection is established or\n      // TIMEOUT ms have passed.\n      TCPMessageHandler handler = null;\n      try {\n        s = socket.accept();\n        s.setSoTimeout(_timeOut);\n        handler = new TCPMessageHandler(s);\n        handler.setMaxReadLength(Integer.MAX_VALUE);\n        Log.v(TAG, \"run: TCP connection established.\");\n      } catch (SocketTimeoutException e) {\n        timeout = true;\n      } catch (IOException e) {\n        Log.e(TAG, \"run: IOException on accept.\");\n        error = true;\n      }\n      if (!error && !timeout) {\n        String host = s.getInetAddress().getHostAddress();\n        try {\n          Log.v(TAG, \"reading from client\");\n          JSONObject handshake = handler.readMessageAsJSONObject();\n          if (handshake.has(\"type\")) {\n            if (handshake.getString(\"type\").equals(\"control\")) {\n              JSONObject successMsg = new JSONObject();\n              successMsg.put(\"id\", id);\n              id++;\n              successMsg.put(\"host\", host);\n              successMsg.put(\"callid\", handshake.getInt(\"id\"));\n              successMsg.put(\"type\", \"OK\");\n              handler.sendMessage(successMsg);\n              Log.v(TAG, \"received handshake\");\n            } else {\n              JSONObject errorMsg = new JSONObject();\n              errorMsg.put(\"id\", id);\n              id++;\n              errorMsg.put(\"host\", host);\n              errorMsg.put(\"callid\", -1);\n              errorMsg.put(\"type\", \"ERROR\");\n              errorMsg.put(\"msg\", \"Error establishing connection\");\n              handler.sendMessage(errorMsg);\n              Log.w(TAG, \"received improper handshake\");\n              s.close();\n              handler.discard();\n              break;\n            }\n          } else {\n            JSONObject errorMsg = new JSONObject();\n            errorMsg.put(\"id\", id);\n            id++;\n            errorMsg.put(\"host\", host);\n            errorMsg.put(\"callid\", -1);\n            errorMsg.put(\"type\", \"ERROR\");\n            errorMsg.put(\"msg\", \"Error establishing connection\");\n            handler.sendMessage(errorMsg);\n            Log.w(TAG, \"received potential handshake that was not formulated correctly\");\n            s.close();\n            handler.discard();\n            break;\n          }\n          Log.v(TAG, \"reading request from client\");\n          JSONObject request = handler.readMessageAsJSONObject();\n          if (request.has(\"type\")) {\n            if (request.getString(\"type\").equals(\"invoke\")) {\n              String app = request.getString(\"app\");\n              String method = request.getString(\"method\");\n              JSONObject args = request.getJSONObject(\"args\");\n              JSONObject response = new JSONObject();\n              response.put(\"id\", id);\n              id++;\n              response.put(\"host\", host);\n              response.put(\"callid\", request.getInt(\"id\"));\n              try {\n                Log.v(TAG, \"Evaluating request\");\n                JSONObject result = parent.accessMethod(app, method, args);\n                if (result == null) {\n                  response.put(\"type\", \"ERROR\");\n                  response.put(\"message\", \"That method/app does not exist\");\n                  response.put(\"callargs\", request);\n                } else {\n                  response.put(\"type\", \"OK\");\n                  response.put(\"value\", result);\n                }\n              } catch (Exception e) {\n                response.put(\"type\", \"ERROR\");\n                response.put(\"message\", \"The method called caused an exception\");\n                Log.w(TAG, e.getMessage());\n                response.put(\"callargs\", request);\n              }\n              handler.sendMessage(response);\n            } else {\n              JSONObject errorMsg = new JSONObject();\n              errorMsg.put(\"id\", id);\n              id++;\n              errorMsg.put(\"host\", host);\n              errorMsg.put(\"callid\", -1);\n              errorMsg.put(\"type\", \"ERROR\");\n              errorMsg.put(\"message\", \"Error receiving request\");\n              errorMsg.put(\"callargs\", request);\n              handler.sendMessage(errorMsg);\n              Log.w(TAG, \"received potential request that was not formulated correctly\");\n            }\n          } else {\n            JSONObject errorMsg = new JSONObject();\n            errorMsg.put(\"id\", id);\n            id++;\n            errorMsg.put(\"host\", host);\n            errorMsg.put(\"callid\", -1);\n            errorMsg.put(\"type\", \"ERROR\");\n            errorMsg.put(\"message\", \"Error receiving request\");\n            errorMsg.put(\"callargs\", request);\n            handler.sendMessage(errorMsg);\n            Log.w(TAG, \"received potential request that was not formulated correctly\");\n          }\n\n        } catch (NullPointerException e) {\n          Log.e(TAG, \"run: socket connection closed unexpectedly\");\n        } catch (SocketTimeoutException e) {\n          Log.e(TAG, \"run: socket timeout while waiting for request\");\n        } catch (IOException e) {\n          Log.e(TAG, \"run: IOException when reading from socket\");\n        } catch (JSONException e) {\n          Log.e(TAG, \"run: JSONException when reading from socket\");\n        }\n      }\n      if (!timeout) {\n        try {\n          Log.v(TAG, \"run: Attempting to close connection\");\n          s.close();\n          handler.discard();\n          handler = null;\n          s = null;\n        } catch (IOException e) {\n          Log.e(TAG, \"failed to close socket to client\");\n        }\n      }\n\n      // check if time to close; close if it is\n      if (_timeToClose) {\n        try {\n          socket.close();\n          Log.v(TAG, \"closed server socket\");\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n        return;\n      }\n      error = false;\n      timeout = false;\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4388, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [428], "initializationEnd": [457], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 107, "tryExpressionEnd": 111, "tryBlockStart": 107, "tryBlockEnd": 859, "catchExpressionStart": 801, "catchExpressionEnd": 825, "catchBlockStart": 801, "catchBlockEnd": 859, "exceptionHandlingCallStart": [833], "exceptionHandlingCallEnd": [852], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 486, "focalAPIEnd": 509, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setDescription(value)"], "useStart": [469], "useEnd": [510], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/platform-infrastructure/sns/socialdata/src/main/java/org/societies/platform/socialdata/converters/GroupConverterFromLinkedin.java", "rawCode": "  @Override\n  public List<Group> load(String data) {\n\n    List<Group> groups = new ArrayList<Group>();\n    try {\n      JSONObject jsonData = new JSONObject(data);\n      if (jsonData.has(DATA)) {\n        JSONArray jgroups = jsonData.getJSONArray(DATA);\n        for (int i = 0; i < jgroups.length(); i++) {\n          Group g = new GroupImpl();\n          JSONObject jGroup = jgroups.getJSONObject(i);\n\n          JSONObject gInfo = jGroup.getJSONObject(\"group\");\n          g.setDescription(gInfo.getString(\"name\"));\n          g.setId(new GroupId(Type.groupId, \"linkedin:\" + gInfo.getString(\"id\")));\n\n          if (jGroup.has(\"membershipState\")) {\n            g.setTitle(\"linkedin:\" + jGroup.getJSONObject(\"membershipState\").getString(\"code\"));\n          }\n          groups.add(g);\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n\n    return groups;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4389, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 188, "tryExpressionEnd": 192, "tryBlockStart": 188, "tryBlockEnd": 543, "catchExpressionStart": 485, "catchExpressionEnd": 509, "catchBlockStart": 485, "catchBlockEnd": 543, "exceptionHandlingCallStart": [517], "exceptionHandlingCallEnd": [536], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 207, "focalAPIEnd": 230, "followUpCheck": "value.indexOf(\".\") != -1", "checkType": "IF", "followUpCheckExpressionStart": 373, "followUpCheckExpressionEnd": 401, "followUpCheckBlockStart": 373, "followUpCheckBlockEnd": 478, "use": ["NetdiskFile.setName(value)", "jSONObject.getLong(String)", "jSONObject.getString(String)", "value.lastIndexOf(String)", "value.substring(*)"], "useStart": [238, 291, 341, 446, 431], "useEnd": [263, 312, 364, 467, 468], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rongjihuang/bc-framework/tree/master/bc-netdisk/src/main/java/cn/bc/netdisk/web/struts2/NetdiskFileAction.java", "rawCode": "  /**\n   * 保存一份文件\n   *\n   * @param json1 前台返回的文件数据\n   * @param netdiskFile 文件对象\n   * @return\n   */\n  public void saveFile(JSONObject json1, NetdiskFile netdiskFile) {\n    String name;\n    try {\n      name = json1.getString(\"name\");\n      netdiskFile.setName(name);\n      netdiskFile.setSize(json1.getLong(\"size\"));\n      netdiskFile.setPath(json1.getString(\"path\"));\n      if (name.indexOf(\".\") != -1) {\n        netdiskFile.setExt(name.substring(name.lastIndexOf(\".\")));\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    netdiskFile.setStatus(BCConstants.STATUS_ENABLED);\n    netdiskFile.setType(NetdiskFile.TYPE_FILE);\n    SystemContext context = this.getSystyemContext();\n    // 设置创建人信息\n    netdiskFile.setFileDate(Calendar.getInstance());\n    netdiskFile.setAuthor(context.getUserHistory());\n    this.netdiskFileService.save(netdiskFile);\n    jsonObject.put(\"success\", true);\n    jsonObject.put(\"msg\", \"上传成功！\");\n    this.json = jsonObject.toString();\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4390, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 124, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new JSONObject(value)"], "useStart": [109], "useEnd": [161], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/editor/server/src/de/hpi/cpn/elements/CPNTransition.java", "rawCode": "  public void readJSONproperties(JSONObject modelElement) throws JSONException {\n    JSONObject properties = new JSONObject(modelElement.getString(\"properties\"));\n    this.parse(properties);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4391, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getLong(String)"], "configurationStart": [131, 204, 271], "configurationEnd": [180, 252, 312], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 337, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImdbLink(value)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [319, 423, 505, 585, 659, 737, 819, 899, 981], "useEnd": [391, 478, 558, 634, 709, 790, 871, 956, 1040], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mobmewireless/tvticker/tree/master/src/in/mobme/tvticker/rpcclient/MediaJsonParser.java", "rawCode": "  public Media parseJsonMedia(JSONObject mediaObj) throws JSONException {\n    Media media = new Media();\n    media.setCategoryType(mediaObj.getInt(Constants.RPC.Media.CATEGORY_TAG));\n    media.setChannel(mediaObj.getInt(Constants.RPC.Media.CHANNEL_TAG));\n    media.setId(mediaObj.getLong(Constants.RPC.Media._ID));\n    media.setImdbLink(mediaObj.getString(Constants.RPC.Media.IMDB_INFO_TAG));\n    media.setMediaDescription(mediaObj.getString(Constants.RPC.Media.DESCRIPTION_TAG));\n    media.setMediaThumb(mediaObj.getString(Constants.RPC.Media.THUMBNAIL_TAG));\n    media.setMediaTitle(mediaObj.getString(Constants.RPC.Media.TITLE_TAG));\n    media.setSeriesID(mediaObj.getInt(Constants.RPC.Media.SERIES_ID_TAG));\n    media.setThumbnailID(mediaObj.getInt(Constants.RPC.Media.THUMBNAIL_ID_TAG));\n    media.setShowDuration(mediaObj.getString(Constants.RPC.Media.DURATION_TAG));\n    media.setShowEndTime(mediaObj.getString(Constants.RPC.Media.SHOW_TIME_END_TAG));\n    media.setShowTime(mediaObj.getString(Constants.RPC.Media.SHOW_TIME_START_TAG));\n    return media;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4392, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 560, "tryExpressionEnd": 564, "tryBlockStart": 560, "tryBlockEnd": 995, "catchExpressionStart": 929, "catchExpressionEnd": 953, "catchBlockStart": 929, "catchBlockEnd": 995, "exceptionHandlingCallStart": [965], "exceptionHandlingCallEnd": [984], "configuration": ["jSONObject.toString()", "jSONObject.getBoolean(String)"], "configurationStart": [140, 191], "configurationEnd": [157, 219], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 593, "focalAPIEnd": 620, "followUpCheck": "\"\".equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 632, "followUpCheckExpressionEnd": 655, "followUpCheckBlockStart": 632, "followUpCheckBlockEnd": 841, "use": ["jSONObject.getString(String)", "showDialog(*,*,value)"], "useStart": [684, 852], "useEnd": [714, 917], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Memetro/memetro-android-app/tree/master/src/com/memetro/android/register/CredentialsActivity.java", "rawCode": "    protected void onPostExecute(JSONObject result) {\n      if (pdialog.isShowing()) pdialog.dismiss();\n\n      if (Config.DEBUG) Log.d(TAG, result.toString());\n\n      try {\n        success = result.getBoolean(\"success\");\n      } catch (JSONException e) {\n        e.printStackTrace();\n      }\n\n      if (success) {\n        Toast.makeText(context, getString(R.string.register_ok), Toast.LENGTH_SHORT).show();\n        Intent intent = new Intent(getApplicationContext(), MainActivity.class);\n        startActivity(intent);\n        finish();\n      } else {\n        try {\n          String message = result.getString(\"message\");\n          if (\"\".equals(message)) {\n            String code = result.getString(\"error_code\");\n            if (\"R005\".equals(code)) {\n              message = getString(R.string.min_pass_lenght);\n            }\n          }\n          MemetroDialog.showDialog(CredentialsActivity.this, null, message);\n        } catch (JSONException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4393, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["JSONObject.getString(String)", "toLowerCase()"], "tryExpressionStart": 129, "tryExpressionEnd": 133, "tryBlockStart": 129, "tryBlockEnd": 718, "catchExpressionStart": 619, "catchExpressionEnd": 643, "catchBlockStart": 619, "catchBlockEnd": 718, "exceptionHandlingCallStart": [658, 658], "exceptionHandlingCallEnd": [697, 711], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 153, "focalAPIEnd": 177, "followUpCheck": "historyUserId.equals(value) && ActFmPreferenceService.userId().equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 234, "followUpCheckExpressionEnd": 309, "followUpCheckBlockStart": 234, "followUpCheckBlockEnd": 612, "use": ["jSONObject.getString(String)"], "useStart": [199], "useEnd": [225], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/astrid/src/com/todoroo/astrid/adapter/UpdateAdapter.java", "rawCode": "  @SuppressWarnings(\"nls\")\n  private static String userDisplay(Context context, String historyUserId, JSONObject userJson) {\n    try {\n      String id = userJson.getString(\"id\");\n      String name = userJson.getString(\"name\");\n\n      if (historyUserId.equals(id) && ActFmPreferenceService.userId().equals(id))\n        return context.getString(R.string.history_yourself);\n      else if (ActFmPreferenceService.userId().equals(id))\n        return context.getString(R.string.history_you);\n      else if (RemoteModel.isValidUuid(id)) return name;\n      else return context.getString(R.string.history_a_deleted_user);\n    } catch (JSONException e) {\n      return context.getString(R.string.ENA_no_user).toLowerCase();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4394, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [791], "initializationEnd": [842], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 118, "tryExpressionEnd": 122, "tryBlockStart": 118, "tryBlockEnd": 1835, "catchExpressionStart": 1734, "catchExpressionEnd": 1759, "catchBlockStart": 1734, "catchBlockEnd": 1835, "exceptionHandlingCallStart": [1808], "exceptionHandlingCallEnd": [1828], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 969, "focalAPIEnd": 991, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setUnit(value)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [954, 1036, 1108], "useEnd": [992, 1061, 1131], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/b0m0x/PSE-Augmented-Reality-for-Pervasive-Computing/tree/master/Vision/src/vision/model/JSONConverter.java", "rawCode": "  /** */\n  public void convert() {\n    this.resetList();\n    String stream = getJSONStream();\n    JSONObject jo;\n\n    try {\n      jo = new JSONObject(stream);\n      for (int sensorid = 0; sensorid < jo.length(); sensorid++) {\n\n        JSONObject lvl1 = jo.getJSONObject(JSONObject.getNames(jo)[sensorid]);\n        sensor = new Sensor();\n\n        for (int type = 0;\n            type\n                < jo.getJSONObject(JSONObject.getNames(jo)[sensorid])\n                    .getJSONObject(\"data\")\n                    .length();\n            type++) {\n\n          JSONObject lvl2 = lvl1.getJSONObject(\"data\");\n          JSONObject temp =\n              jo.getJSONObject(JSONObject.getNames(jo)[sensorid]).getJSONObject(\"data\");\n          Sample sample = new Sample();\n\n          JSONObject lvl3 = lvl2.getJSONObject(JSONObject.getNames(lvl2)[type]);\n\n          // sample.setSensor(sensor);\n\n          sample.setType(JSONObject.getNames(lvl2)[type]);\n          sample.setUnit(lvl3.getString(\"unit\"));\n          sample.setUpdate(Long.parseLong(lvl3.getString(\"updated\")));\n          sample.setValue(Float.parseFloat(lvl3.getString(\"value\")));\n\n          sensor.addToSamples(sample);\n        }\n\n        JSONArray ja = lvl1.getJSONArray(\"tags\");\n        for (int i = 0; i < ja.length(); i++) {\n          sensor.addToTags(ja.getString(i));\n        }\n        sensor.setUpdate(Long.parseLong(lvl1.getString(\"updated\")));\n        sensor.setDescription(lvl1.getString(\"description\"));\n\n        double lat = lvl1.getDouble(\"latitude\");\n        double lon = lvl1.getDouble(\"longitude\");\n        sensor.setPosition(getLocalCoordinates(lat, lon));\n        sensor.setId(JSONObject.getNames(jo)[sensorid]);\n\n        this.addSensorToList();\n      }\n\n    } catch (JSONException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4395, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.optJSONObject(String)", "jSONObject.optJSONObject(String)"], "configurationStart": [203, 610], "configurationEnd": [229, 640], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 821, "focalAPIEnd": 855, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseAssigneeType(value)", "jSONObject.optJSONObject(String)", "jSONObject.getBoolean(String)"], "useStart": [803, 900, 1107], "useEnd": [856, 934, 1145], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/behrica/jira-rest-java-client/tree/master/atlassian-jira-rest-java-client/src/main/java/com/atlassian/jira/rest/client/internal/json/ComponentJsonParser.java", "rawCode": "  @Override\n  public Component parse(JSONObject json) throws JSONException {\n    final BasicComponent basicComponent = BasicComponentJsonParser.parseBasicComponent(json);\n    final JSONObject leadJson = json.optJSONObject(\"lead\");\n    final BasicUser lead = leadJson != null ? JsonParseUtil.parseBasicUser(leadJson) : null;\n    final String assigneeTypeStr = JsonParseUtil.getOptionalString(json, \"assigneeType\");\n    final Component.AssigneeInfo assigneeInfo;\n    if (assigneeTypeStr != null) {\n      final AssigneeType assigneeType = parseAssigneeType(assigneeTypeStr);\n      final JSONObject assigneeJson = json.optJSONObject(\"assignee\");\n      final BasicUser assignee =\n          assigneeJson != null ? JsonParseUtil.parseBasicUser(assigneeJson) : null;\n      final AssigneeType realAssigneeType = parseAssigneeType(json.getString(\"realAssigneeType\"));\n      final JSONObject realAssigneeJson = json.optJSONObject(\"realAssignee\");\n      final BasicUser realAssignee =\n          realAssigneeJson != null ? JsonParseUtil.parseBasicUser(realAssigneeJson) : null;\n      final boolean isAssigneeTypeValid = json.getBoolean(\"isAssigneeTypeValid\");\n      assigneeInfo =\n          new Component.AssigneeInfo(\n              assignee, assigneeType, realAssignee, realAssigneeType, isAssigneeTypeValid);\n    } else {\n      assigneeInfo = null;\n    }\n\n    return new Component(\n        basicComponent.getSelf(),\n        basicComponent.getName(),\n        basicComponent.getDescription(),\n        lead,\n        assigneeInfo);\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4396, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 82, "tryExpressionEnd": 86, "tryBlockStart": 82, "tryBlockEnd": 693, "catchExpressionStart": 594, "catchExpressionEnd": 618, "catchBlockStart": 594, "catchBlockEnd": 693, "exceptionHandlingCallStart": [667], "exceptionHandlingCallEnd": [686], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 106, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)", "new User(value,int,int,boolean,int,int)"], "useStart": [156, 284, 347, 407, 464, 512], "useEnd": [186, 319, 376, 438, 496, 586], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tae1560/battler_dog/tree/master/src/contest/lab/gala/data/User.java", "rawCode": "  public static User parseJson(JSONObject jsonFriend) {\n    User user = null;\n    try {\n      String id = jsonFriend.getString(\"id\");\n      int character = jsonFriend.getInt(\"character\");\n      // int number_of_combo = jsonFriend.getInt(\"number_of_combo\");\n      int number_of_wins = jsonFriend.getInt(\"number_of_wins\");\n      boolean is_logon = (jsonFriend.getInt(\"is_logon\") == 1);\n      int total_wins = jsonFriend.getInt(\"total_wins\");\n      int total_loses = jsonFriend.getInt(\"total_loses\");\n\n      user = new User(id, character, number_of_wins, is_logon, total_wins, total_loses);\n    } catch (JSONException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    return user;\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4397, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["LogE(String,*)"], "tryExpressionStart": 169, "tryExpressionEnd": 173, "tryBlockStart": 169, "tryBlockEnd": 429, "catchExpressionStart": 350, "catchExpressionEnd": 370, "catchBlockStart": 350, "catchBlockEnd": 429, "exceptionHandlingCallStart": [378], "exceptionHandlingCallEnd": [422], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 198, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getInt(String)", "onEventDuration(Context,value,int)"], "useStart": [250, 284], "useEnd": [276, 342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yuye-liu/cocostudioSampleGmae/tree/master/cocos2d-x-2.2.0/plugin/plugins/umeng/proj.android/src/org/cocos2dx/plugin/AnalyticsUmeng.java", "rawCode": "  protected void logEventWithDuration(JSONObject eventInfo) {\n    LogD(\"logEventWithDuration invoked! event : \" + eventInfo.toString());\n    if (!isValid()) return;\n    try {\n      String eventId = eventInfo.getString(\"Param1\");\n      int duration = eventInfo.getInt(\"Param2\");\n      MobclickAgent.onEventDuration(mContext, eventId, duration);\n    } catch (Exception e) {\n      LogE(\"Exception in logEventWithDuration\", e);\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4398, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [368], "initializationEnd": [393], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.optJSONArray(String)"], "configurationStart": [459], "configurationEnd": [506], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 713, "focalAPIEnd": 743, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(value,HashSet<String>)", "jSONObject.optJSONArray(String)", "jSONObject.getString(String)", "setDefinitionsForProperty(value,JSONObject)", "jSONObject.getString(String)", "put(value,HashSet<String>)"], "useStart": [685, 831, 1186, 1155, 1287, 1257], "useEnd": [762, 872, 1216, 1234, 1317, 1330], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/editor/server/src/de/hpi/bpmn2_0/migration/MigrationHelper.java", "rawCode": "  /**\n   * Parses the StencilSet for Stencils and enlists them with their belonging propertyPackages and\n   * properties\n   *\n   * @param stencils\n   * @throws JSONException\n   */\n  private void parseStencils(JSONArray stencils) throws JSONException {\n    if (stencils != null) {\n      for (int i = 0; i < stencils.length(); i++) {\n        JSONObject currentStencil = stencils.getJSONObject(i);\n\n        /* find all propertyPackages */\n        JSONArray pp = currentStencil.optJSONArray(\"propertyPackages\");\n        HashSet<String> propertyPackages = new HashSet<String>();\n\n        if (pp != null) for (int j = 0; j < pp.length(); j++) propertyPackages.add(pp.getString(j));\n\n        this.packagesForStencil.put(currentStencil.getString(\"id\"), propertyPackages);\n\n        /* find all extra properties */\n        JSONArray props = currentStencil.optJSONArray(\"properties\");\n        HashSet<String> properties = new HashSet<String>();\n\n        if (props != null)\n          for (int j = 0; j < props.length(); j++) {\n            JSONObject currentProperty = props.getJSONObject(j);\n\n            properties.add(currentProperty.getString(\"id\"));\n\n            this.setDefinitionsForProperty(currentStencil.getString(\"id\"), currentProperty);\n          }\n\n        this.propertiesForStencil.put(currentStencil.getString(\"id\"), properties);\n      }\n    }\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4399, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [252], "initializationEnd": [279], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["i(String,String)"], "tryExpressionStart": 160, "tryExpressionEnd": 164, "tryBlockStart": 160, "tryBlockEnd": 503, "catchExpressionStart": 414, "catchExpressionEnd": 434, "catchBlockStart": 414, "catchBlockEnd": 503, "exceptionHandlingCallStart": [442], "exceptionHandlingCallEnd": [496], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 301, "focalAPIEnd": 330, "followUpCheck": "value.equals(\"Gecko:Ready\")", "checkType": "IF", "followUpCheckExpressionStart": 339, "followUpCheckExpressionEnd": 370, "followUpCheckBlockStart": 339, "followUpCheckBlockEnd": 407, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mmoutenot/SandFox/tree/master/embedding/android/GeckoAppShell.java", "rawCode": "  public static String handleGeckoMessage(String message) {\n    //\n    // {\"gecko\": {\n    // \"type\": \"value\",\n    // \"event_specific\": \"value\",\n    // ....\n    try {\n      JSONObject json = new JSONObject(message);\n      final JSONObject geckoObject = json.getJSONObject(\"gecko\");\n      String type = geckoObject.getString(\"type\");\n\n      if (type.equals(\"Gecko:Ready\")) {\n        onAppShellReady();\n      }\n    } catch (Exception e) {\n      Log.i(LOG_FILE_NAME, \"handleGeckoMessage throws \" + e);\n    }\n\n    return \"\";\n  }\n"}, {"dataset": "jSONObjectGetString", "exampleID": 4400, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [743], "initializationEnd": [765], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 343, "tryExpressionEnd": 347, "tryBlockStart": 343, "tryBlockEnd": 1482, "catchExpressionStart": 1416, "catchExpressionEnd": 1444, "catchBlockStart": 1416, "catchBlockEnd": 1482, "exceptionHandlingCallStart": [1452], "exceptionHandlingCallEnd": [1475], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = jSONObject.getString(name)", "focalAPIStart": 801, "focalAPIEnd": 831, "followUpCheck": "true || value.equals(primaryRepos)", "checkType": "IF", "followUpCheckExpressionStart": 848, "followUpCheckExpressionEnd": 911, "followUpCheckBlockStart": 848, "followUpCheckBlockEnd": 1346, "use": ["getRepoPatientId(value)", "getEventObject(JSONObject,String,*,*,value,*,*)"], "useStart": [1137, 977], "useEnd": [1171, 1286], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/medcafe/medCafe/tree/master/src/org/mitre/medcafe/model/Event.java", "rawCode": "  public static ArrayList<Event> getEventsFromCache(\n      PatientCache cache, String primary, String[] events, String userName) {\n    ArrayList<Event> eventList = new ArrayList<Event>();\n    String[] listOfEvents = getEventList();\n    String[] objectNames = getPatientCacheObjectList();\n    String primaryRepos = cache.getPrimaryRepos();\n    try {\n\n      for (String event : events) {\n        for (int i = 0; i < listOfEvents.length; i++) {\n          if (event.equals(listOfEvents[i]) && objectNames[i] != null) {\n\n            JSONObject obj = cache.retrieveObjectList(objectNames[i]);\n            JSONArray array = obj.getJSONArray(\"repositoryList\");\n            for (int j = 0; j < array.length(); j++) {\n\n              JSONObject resObj = array.getJSONObject(j);\n              String repository = resObj.getString(\"repository\");\n\n              if (!primary.equals(\"true\") || repository.equals(primaryRepos)) {\n                ArrayList<Event> newList =\n                    getEventObject(\n                        resObj,\n                        userName,\n                        cache.getDatabasePatientId(),\n                        cache.getRepoPatientId(repository),\n                        repository,\n                        event,\n                        getIcons().get(event));\n                eventList.addAll(newList);\n              }\n            }\n            break;\n          }\n        }\n      }\n    } catch (JSONException jsonE) {\n      jsonE.printStackTrace();\n    }\n\n    return eventList;\n  }\n"}]