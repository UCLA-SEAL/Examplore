[{"dataset": "simpleDateFormatFormat", "exampleID": 7601, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String,*)"], "initializationStart": [252], "initializationEnd": [309], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.setTimeZone(TimeZone)"], "configurationStart": [367], "configurationEnd": [391], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 501, "focalAPIEnd": 517, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/goodow/j2objc/tree/master/jre_emul/android/libcore/luni/src/main/java/java/util/Date.java", "rawCode": "  /**\n   * Returns the string representation of this {@code Date} in GMT in the format {@code \"22 Jun 1999\n   * 13:02:00 GMT\"}.\n   *\n   * @deprecated use {@link DateFormat}\n   */\n  @Deprecated\n  public String toGMTString() {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"d MMM y HH:mm:ss 'GMT'\", Locale.US);\n    TimeZone gmtZone = TimeZone.getTimeZone(\"GMT\");\n    sdf.setTimeZone(gmtZone);\n    GregorianCalendar gc = new GregorianCalendar(gmtZone);\n    gc.setTimeInMillis(milliseconds);\n    return sdf.format(this);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7602, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [72], "initializationEnd": [112], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 125, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SWE574-2011F-Group1/Project-0/tree/master/app/models/Activity.java", "rawCode": "  public String getFormattedCreationDate() {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd.MM.yyyy HH:mm\");\n    return sdf.format(this.creationTime);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7603, "initialization": ["Date date = new Date()"], "initializationStart": [260], "initializationEnd": [270], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 305, "focalAPIEnd": 325, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Logger.info(date)"], "useStart": [276], "useEnd": [326], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tracktopell/PerfumeriaMarlen_V_0_9/tree/master/pmarlen-desktop-client/src/test/java/com/pmarlen/client/TestPersistenceCliente.java", "rawCode": "  @Test\n  public void testCrearEditarYBorrarCliente() {\n    if (!displayExist()) {\n      logger.info(\"==> 0: Test aborted DISPLAY NOT EXIST!\");\n      return;\n    }\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");\n    Date currDate = new Date();\n    logger.info(\"==> 1:start:\" + sdf.format(currDate));\n\n    ApplicationStarter applicationStarter = ApplicationStarter.getInstance();\n\n    try {\n      applicationStarter.beginProcess(\n          new ProgressProcessListener() {\n\n            int internalProgress;\n\n            @Override\n            public void updateProgress(int prog, String msg) {\n              internalProgress = prog;\n              logger.info(\"==> updateProgress:\" + prog + \" : \" + msg);\n            }\n\n            @Override\n            public int getProgress() {\n              return internalProgress;\n            }\n          },\n          null,\n          false);\n    } catch (BusinessException e) {\n      logger.error(\n          \"Error: lm=\" + e.getMessage(),\n          ApplicationInfo.getLocalizedMessage(\"APPLICATION_STARTER_TITLE\"),\n          e);\n      Assert.fail(e.getMessage());\n    } catch (Exception e) {\n      logger.error(\n          \"Error: lm2=\" + e.getMessage(),\n          ApplicationInfo.getLocalizedMessage(\"APPLICATION_STARTER_TITLE\"),\n          e);\n      Assert.fail(e.getMessage());\n    }\n    logger.info(\"==>> 2: Ready to login.\");\n\n    AbstractXmlApplicationContext context = applicationStarter.getContext();\n\n    logger.info(\"==>> 3: context is null ?\" + (context == null));\n    assertNotNull(\"Context is null\" + (context == null), context);\n\n    PersistEntityWithTransactionDAO persistEntityWithTransactionDAO =\n        context.getBean(\"persistEntityWithTransactionDAO\", PersistEntityWithTransactionDAO.class);\n\n    logger.info(\"==>> 4: persistEntityWithTransactionDAO=\" + persistEntityWithTransactionDAO);\n\n    GetListDataBusinesJPAController getListDataBusinesJPAController =\n        context.getBean(\"getListDataBusinesJPAController\", GetListDataBusinesJPAController.class);\n\n    List<Cliente> findClienteEntities =\n        getListDataBusinesJPAController.findClienteEntities(true, 100, 0);\n\n    for (Cliente ci : findClienteEntities) {\n      try {\n        logger.info(\"\\t==>> 5: findClienteEntities[]:\" + ci.getId() + \",\" + ci.getRazonSocial());\n      } catch (Exception ex) {\n        logger.error(ex.getMessage());\n        Assert.fail();\n      }\n    }\n\n    Cliente clienteNuevo = new Cliente();\n\n    clienteNuevo.setCalle(\"CALLE\");\n    // clienteNuevo.setDescripcionRuta(\"DESCRIPCION RUTA\");\n    clienteNuevo.setEmail(\"email@mail.com\");\n    // clienteNuevo.setFaxes(\"12345678\");\n    clienteNuevo.setFechaCreacion(new Date());\n    clienteNuevo.setNombreEstablecimiento(\"NOMBRE ESTABLECIMIENTO\");\n    clienteNuevo.setNumExterior(\"NEXT\");\n    clienteNuevo.setNumInterior(\"NINT\");\n    clienteNuevo.setObservaciones(\"OBSERVACINES\");\n    // clienteNuevo.setPlazoDePago(1);\n    clienteNuevo.setRfc(\"EAGA8012254X2\");\n    clienteNuevo.setRazonSocial(\"RAZON SOCIAL XXX\");\n    clienteNuevo.setPoblacion(new Poblacion(5));\n\n    logger.info(\"\\t==>> 6 fill Cliente: ok, before insert: CLiente.Id=\" + clienteNuevo.getId());\n\n    try {\n      persistEntityWithTransactionDAO.persistCliente(clienteNuevo);\n    } catch (Exception ex) {\n      logger.error(ex.getMessage());\n      Assert.fail();\n    }\n\n    List<Cliente> findClienteAfterEntities =\n        getListDataBusinesJPAController.findClienteEntities(true, 100, 0);\n\n    logger.info(\"\\t==>> 7 after insert\");\n    for (Cliente ci : findClienteAfterEntities) {\n      try {\n        logger.info(\n            \"\\t==>> 7.1: findClienteAfterEntities[]:\" + ci.getId() + \",\" + ci.getRazonSocial());\n      } catch (Exception ex) {\n        logger.error(ex.getMessage());\n        Assert.fail();\n      }\n    }\n\n    Assert.assertEquals(\n        \"No son ==\", findClienteEntities.size() + 1, findClienteAfterEntities.size());\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7604, "initialization": ["Date date = new Date()"], "initializationStart": [264], "initializationEnd": [274], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 294, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addMapEntry(date,String,String,String,String,CodeSelectionV2,String,SpecSelectionV2,String)"], "useStart": [414], "useEnd": [598], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/derekqian/coDoc/tree/master/edu.pdx.svl.coDoc.cdc/src/edu/pdx/svl/coDoc/cdc/datacenter/CDCModelV2.java", "rawCode": "  public void addMapEntry(\n      String parentfolderuuid,\n      String codefilename,\n      CodeSelectionV2 codeselpath,\n      String specfilename,\n      SpecSelectionV2 specselpath,\n      String comment) {\n    Properties props = System.getProperties();\n    date = new Date();\n    String time = ft.format(date);\n    String creater = props.getProperty(\"user.name\");\n    String os = props.getProperty(\"os.name\");\n    addMapEntry(\n        time,\n        os,\n        creater,\n        parentfolderuuid,\n        codefilename,\n        codeselpath,\n        specfilename,\n        specselpath,\n        comment);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7605, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 82, "focalAPIEnd": 103, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenNMS/installer/tree/master/izpack/src/lib/com/izforge/izpack/uninstaller/SelfModifier.java", "rawCode": "  private void log(Throwable t) {\n    if (checkLog() != null) {\n      log.println(isoPoint.format(date) + \" Phase \" + phase + \": \" + t.getMessage());\n      t.printStackTrace(log);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7606, "initialization": ["Date date = new Date(*)"], "initializationStart": [108], "initializationEnd": [142], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 163, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chrismccurdy/loot/tree/master/src/net/gumbercules/loot/premium/export/ExportThread.java", "rawCode": "  private String getQuickenExportString(HashMap<String, Object> trans) {\n    String out = \"\";\n\n    Date d = new Date((Long) trans.get(\"date\"));\n\n    String date = mSdf.format(d);\n    out += \"D\" + date + \"\\n\";\n    out += \"P\" + trans.get(\"party\") + \"\\n\";\n\n    double amount = (Double) trans.get(\"amount\");\n    String format_str = (amount > 0 ? \"%010.2f\" : \"%011.2f\");\n\n    String amt = String.format(format_str, amount);\n    out += \"T\" + amt + \"\\n\";\n\n    int check_num = (Integer) trans.get(\"check_num\");\n    if (check_num > 0) {\n      out += \"N\" + check_num + \"\\n\";\n    }\n\n    if (trans.containsKey(\"tags\")) {\n      out += \"M\" + (String) trans.get(\"tags\") + \"\\n\";\n    }\n\n    out += \"^\\n\";\n\n    return out;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7607, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 269, "guardExpressionEnd": 293, "guardBlockStart": 269, "guardBlockEnd": 394, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 332, "focalAPIEnd": 366, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(date)"], "useStart": [302], "useEnd": [367], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joshlong/si-extensions-testbed/tree/master/sesia_smack_jabber_api_3_1_0/src/main/java/org/jivesoftware/smackx/workgroup/packet/QueueOverview.java", "rawCode": "  public String toXML() {\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"<\").append(ELEMENT_NAME).append(\" xmlns=\\\"\").append(NAMESPACE).append(\"\\\">\");\n\n    if (userCount != -1) {\n      buf.append(\"<count>\").append(userCount).append(\"</count>\");\n    }\n    if (oldestEntry != null) {\n      buf.append(\"<oldest>\").append(DATE_FORMATTER.format(oldestEntry)).append(\"</oldest>\");\n    }\n    if (averageWaitTime != -1) {\n      buf.append(\"<time>\").append(averageWaitTime).append(\"</time>\");\n    }\n    if (status != null) {\n      buf.append(\"<status>\").append(status).append(\"</status>\");\n    }\n    buf.append(\"</\").append(ELEMENT_NAME).append(\">\");\n\n    return buf.toString();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7608, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 337, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ylang/18-641Java/tree/master/facebook-android-sdk-3.0.1/samples/BooleanOGSample/src/com/facebook/samples/booleanog/LogicActivity.java", "rawCode": "  private void updateCursor(Iterable<ActionRow> publishedItems) {\n    MatrixCursor cursor = createEmptyCursor();\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.getDefault());\n\n    int id = 0;\n    for (ActionRow item : publishedItems) {\n      Object[] row = new Object[3];\n      row[0] = id++;\n      row[1] = dateFormat.format(item.publishDate);\n      row[2] = item.actionText;\n      cursor.addRow(row);\n    }\n\n    friendActivityAdapter.changeCursor(cursor);\n    friendActivityAdapter.notifyDataSetChanged();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7609, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 167, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ser87ch/SABS_proj_rft/tree/master/ru/sabstest/ED101.java", "rawCode": "  @Override\n  public String toStr(String razd, boolean addShift) {\n    String str = \"\";\n\n    str =\n        Integer.toString(accDocNo)\n            + razd\n            + new SimpleDateFormat(\"ddMMyyyy\").format(accDocDate)\n            + razd\n            + transKind\n            + razd\n            + Integer.toString(sum).substring(0, Integer.toString(sum).length() - 2)\n            + \".\"\n            + Integer.toString(sum)\n                .substring(Integer.toString(sum).length() - 2, Integer.toString(sum).length())\n            + razd\n            + paytKind.toString()\n            + razd\n            + payer.bic\n            + razd\n            + payer.correspAcc\n            + razd\n            + payer.personalAcc\n            + razd\n            + payer.inn\n            + razd\n            + payer.kpp\n            + razd\n            + (addShift ? \"+{ExtEnd}\" : \"\")\n            + payer.name\n            + razd\n            + payee.bic\n            + razd\n            + payee.correspAcc\n            + razd\n            + payee.personalAcc\n            + razd\n            + payee.inn\n            + razd\n            + payee.kpp\n            + razd\n            + (addShift ? \"+{ExtEnd}\" : \"\")\n            + payee.name\n            + razd\n            + priority\n            + razd\n            + tax.drawerStatus;\n    if (!tax.drawerStatus.equals(\"\") && tax.drawerStatus != null)\n      str =\n          str\n              + razd\n              + tax.cbc\n              + razd\n              + tax.okato\n              + razd\n              + tax.paytReason\n              + razd\n              + tax.taxPeriod\n              + razd\n              + tax.docNo\n              + razd\n              + tax.docDate\n              + razd\n              + tax.taxPaytKind;\n\n    str =\n        str\n            + razd\n            + purpose\n            + razd\n            + razd\n            + new SimpleDateFormat(\"ddMMyyyy\").format(chargeOffDate)\n            + razd\n            + new SimpleDateFormat(\"ddMMyyyy\").format(receiptDate)\n            + razd\n            + razd;\n    return str;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7610, "initialization": ["SimpleDateFormat simpleDateFormat = get(*,String)"], "initializationStart": [112], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null)", "guardType": "IF {", "guardExpressionStart": 53, "guardExpressionEnd": 70, "guardBlockStart": 53, "guardBlockEnd": 83, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 183, "focalAPIEnd": 199, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jclehner/rxdroid/tree/master/src/main/java/at/jclehner/rxdroid/util/DateTime.java", "rawCode": "  public static String toDateString(Date date) {\n    if (date == null) return null;\n\n    SimpleDateFormat sdf = PerThreadInstance.get(SimpleDateFormat.class, DATE_FORMAT);\n    return sdf.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7611, "initialization": ["Date date = new Date(long)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String,*)"], "initializationStart": [789, 845], "initializationEnd": [811, 911], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.setTimeZone(TimeZone)"], "configurationStart": [923], "configurationEnd": [966], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1008, "focalAPIEnd": 1023, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(String,date)"], "useStart": [978], "useEnd": [1024], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AllBinary/phoneme-components-cdc/tree/master/src/share/foundation/classes/sun/net/www/protocol/file/FileURLConnection.java", "rawCode": "  private void initializeHeaders() {\n    try {\n      connect();\n      exists = file.exists();\n    } catch (IOException e) {\n    }\n    if (!initializedHeaders || !exists) {\n      length = file.length();\n      lastModified = file.lastModified();\n\n      if (!isDirectory) {\n        FileNameMap map = java.net.URLConnection.getFileNameMap();\n        contentType = map.getContentTypeFor(filename);\n        if (contentType != null) {\n          properties.add(CONTENT_TYPE, contentType);\n        }\n        properties.add(CONTENT_LENGTH, String.valueOf(length));\n\n        /*\n         * Format the last-modified field into the preferred\n         * Internet standard - ie: fixed-length subset of that\n         * defined by RFC 1123\n         */\n        if (lastModified != 0) {\n          Date date = new Date(lastModified);\n          SimpleDateFormat fo = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss 'GMT'\", Locale.US);\n          fo.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n          properties.add(LAST_MODIFIED, fo.format(date));\n        }\n      } else {\n        properties.add(CONTENT_TYPE, TEXT_PLAIN);\n      }\n      initializedHeaders = true;\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7612, "initialization": ["Date date = Calendar.getTime()"], "initializationStart": [538], "initializationEnd": [564], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1791, "focalAPIEnd": 1848, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List<String>.add(date)", "List<String>.add(date)", "List<String>.add(date)", "simpleDateFormat.format(Date)"], "useStart": [1911, 1944, 1977, 3556], "useEnd": [1936, 1969, 2002, 3605], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/TransportsRennes/tree/master/TransportsCommun/src/fr/ybo/transportscommun/donnees/modele/Horaire.java", "rawCode": "  private static Cursor getProchainHorairesAsCursor(\n      String ligneId, String arretId, Calendar calendar, Integer macroDirection)\n      throws SQLiteException {\n    int now = calendar.get(Calendar.HOUR_OF_DAY) * 60 + calendar.get(Calendar.MINUTE);\n    Calendar calendarLaVeille = Calendar.getInstance();\n    calendarLaVeille.add(Calendar.DATE, -1);\n\n    int uneJournee = 24 * 60;\n    // Réquète.\n    List<String> selectionArgs = new ArrayList<String>(7);\n    StringBuilder requete = new StringBuilder();\n    if (!JoursFeries.is1erMai(calendarLaVeille.getTime())) {\n      requete.append(\n          \"select (Horaire.heureDepart - :uneJournee) as _id, :veille0 as today, Calendrier.id as calendrierId, \");\n      requete.append(\n          \"Trajet.id as trajetId, Horaire.stopSequence as stopSequence, Direction.direction as direction \");\n      requete.append(\"from Calendrier, Horaire_\");\n      requete.append(ligneId);\n      requete.append(\" as Horaire, Trajet, Direction \");\n      requete.append(\"where \");\n      requete.append(\" Calendrier.dateDebut <= :veille1\");\n      requete.append(\" and Calendrier.dateFin >= :veille2\");\n      requete.append(\" and \");\n      requete.append(clauseWhereForCalendrier(calendarLaVeille));\n      requete.append(\" and Trajet.id = Horaire.trajetId\");\n      requete.append(\" and Trajet.calendrierId = Calendrier.id\");\n      requete.append(\" and Trajet.directionId = Direction.id\");\n      requete.append(\" and Trajet.ligneId = :routeId1\");\n      if (macroDirection != null) {\n        requete.append(\" and Trajet.macroDirection = :macroDirection1\");\n      }\n      requete.append(\" and Horaire.arretId = :arretId1\");\n      requete.append(\" and Horaire.terminus = 0\");\n      requete.append(\" and Horaire.heureDepart >= :maintenantHier \");\n\n      String veille = FORMAT_DATE_CALENDRIER.format(calendarLaVeille.getTime());\n      selectionArgs.add(Integer.toString(uneJournee));\n      selectionArgs.add(veille);\n      selectionArgs.add(veille);\n      selectionArgs.add(veille);\n      selectionArgs.add(ligneId);\n      if (macroDirection != null) {\n        selectionArgs.add(macroDirection.toString());\n      }\n      selectionArgs.add(arretId);\n      selectionArgs.add(Integer.toString(now + uneJournee));\n    }\n    if (!JoursFeries.is1erMai(calendar.getTime())) {\n      if (requete.length() > 0) {\n        requete.append(\"UNION \");\n      }\n      requete.append(\n          \"select Horaire.heureDepart as _id, :today0 as today, Calendrier.id as calendrierId, \");\n      requete.append(\n          \"Trajet.id as trajetId, Horaire.stopSequence as stopSequence, Direction.direction as direction \");\n      requete.append(\"from Calendrier, Horaire_\");\n      requete.append(ligneId);\n      requete.append(\" as Horaire, Trajet, Direction \");\n      requete.append(\"where \");\n\n      requete.append(\" Calendrier.dateDebut <= :today1\");\n      requete.append(\" and Calendrier.dateFin >= :today2\");\n      requete.append(\" and \");\n      requete.append(clauseWhereForCalendrier(calendar));\n      requete.append(\" and Trajet.id = Horaire.trajetId\");\n      requete.append(\" and Trajet.calendrierId = Calendrier.id\");\n      requete.append(\" and Trajet.directionId = Direction.id\");\n      requete.append(\" and Trajet.ligneId = :routeId2\");\n      if (macroDirection != null) {\n        requete.append(\" and Trajet.macroDirection = :macroDirection2\");\n      }\n      requete.append(\" and Horaire.arretId = :arretId2\");\n      requete.append(\" and Horaire.terminus = 0\");\n      requete.append(\" and Horaire.heureDepart >= :maintenant\");\n\n      String today = FORMAT_DATE_CALENDRIER.format(calendar.getTime());\n      selectionArgs.add(today);\n      selectionArgs.add(today);\n      selectionArgs.add(today);\n      selectionArgs.add(ligneId);\n      if (macroDirection != null) {\n        selectionArgs.add(macroDirection.toString());\n      }\n      selectionArgs.add(arretId);\n      selectionArgs.add(Integer.toString(now));\n    }\n    requete.append(\" order by _id \");\n    LOG_YBO.debug(\"Requete : \" + requete.toString());\n    LOG_YBO.debug(\"SelectionArgs : \" + selectionArgs);\n    return AbstractTransportsApplication.getDataBaseHelper()\n        .executeSelectQuery(requete.toString(), selectionArgs);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7613, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1404, "focalAPIEnd": 1439, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.format(Date)"], "useStart": [1490], "useEnd": [1526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ciaranj/luntbuild/tree/master/luntbuild-prototype-core/src/com/luntsys/luntbuild/vcs/SvnExeAdaptor.java", "rawCode": "  public Revisions getRevisionsSince(Date sinceDate, Schedule workingSchedule, Project antProject) {\n    String workingDir = workingSchedule.getWorkDirRaw();\n    Revisions revisions = new Revisions();\n    Commandline cmdLine = buildSvnExecutable();\n    Iterator it = getModules().iterator();\n    while (it.hasNext()) {\n      SvnExeModule module = (SvnExeModule) it.next();\n      if (Luntbuild.isEmpty(module.getLabel())) {\n        cmdLine.clearArgs();\n        cmdLine.createArgument().setValue(\"log\");\n        String url =\n            Luntbuild.concatPath(\n                getUrlBase(),\n                mapPathByBranchLabel(module.getSrcPath(), module.getBranch(), module.getLabel()));\n        cmdLine.createArgument().setValue(url);\n        if (getUser() != null && !getUser().trim().equals(\"\")) {\n          cmdLine.createArgument().setValue(\"--username\");\n          cmdLine.createArgument().setValue(getUser());\n          if (getPassword() != null && !getPassword().equals(\"\")) {\n            cmdLine.createArgument().setValue(\"--password\");\n            Commandline.Argument arg = cmdLine.createArgument();\n            arg.setValue(getPassword());\n            arg.setDescriptiveValue(\"******\");\n          }\n        }\n        cmdLine.createArgument().setLine(\"--non-interactive -v --xml -r\");\n        cmdLine\n            .createArgument()\n            .setValue(\n                \"{\"\n                    + INPUT_DATE_FORMAT.format(sinceDate)\n                    + \"}:{\"\n                    + INPUT_DATE_FORMAT.format(new Date())\n                    + \"}\");\n        final StringBuffer buffer = new StringBuffer();\n        new MyExecTask(\"log\", antProject, workingDir, cmdLine, null, SVN_COMMAND_INPUT, -1) {\n          public void handleStdout(String line) {\n            buffer.append(line);\n            buffer.append(\"\\n\");\n          }\n        }.execute();\n        SAXReader reader = new SAXReader();\n        try {\n          Document doc = reader.read(new StringReader(buffer.toString()));\n          Iterator itElement = doc.getRootElement().elementIterator(\"logentry\");\n          while (itElement.hasNext()) {\n            Element logEntry = (Element) itElement.next();\n            String dateString = logEntry.element(\"date\").getText();\n            Date revisionDate =\n                OUTPUT_DATE_FORMAT.parse(dateString.substring(0, dateString.indexOf('Z') - 3));\n            if (revisionDate.before(sinceDate)) continue;\n            Element authorElement = logEntry.element(\"author\");\n            if (authorElement != null) revisions.getChangeLogins().add(authorElement.getText());\n            revisions\n                .getChangeLogs()\n                .add(\n                    \"----------------------------------------------------------------------------------------------------------------------\");\n            if (authorElement != null)\n              revisions\n                  .getChangeLogs()\n                  .add(\n                      \"r\"\n                          + logEntry.attribute(\"revision\").getText()\n                          + \" | \"\n                          + authorElement.getText()\n                          + \" | \"\n                          + revisionDate.toString());\n            else\n              revisions\n                  .getChangeLogs()\n                  .add(\n                      \"r\"\n                          + logEntry.attribute(\"revision\").getText()\n                          + \" | \"\n                          + \"anonymous\"\n                          + \" | \"\n                          + revisionDate.toString());\n\n            //\n            // 2005.06.21 - ghenry@lswe.com --> check for commit msg\n            //\n            Element msgElement = logEntry.element(\"msg\");\n            if (msgElement != null && msgElement.getText().trim().length() != 0) {\n              revisions\n                  .getChangeLogs()\n                  .add(\n                      \"----------------------------------------------------------------------------------------------------------------------\");\n              revisions.getChangeLogs().add(msgElement.getText());\n              revisions\n                  .getChangeLogs()\n                  .add(\n                      \"----------------------------------------------------------------------------------------------------------------------\");\n            }\n            //\n\n            revisions.getChangeLogs().add(\"Changed paths:\");\n            Iterator itPath = logEntry.element(\"paths\").elementIterator(\"path\");\n            while (itPath.hasNext()) {\n              Element path = (Element) itPath.next();\n              revisions\n                  .getChangeLogs()\n                  .add(\" \" + path.attribute(\"action\").getText() + \" \" + path.getText());\n              revisions.setFileModified(true);\n            }\n            revisions.getChangeLogs().add(\"\");\n          }\n        } catch (DocumentException e) {\n          throw new RuntimeException(e);\n        } catch (ParseException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n    return revisions;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7614, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 818, "focalAPIEnd": 873, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["date.replace(String,String)", "date.replace(String,String)", "simpleDateFormat.format(Date)", "date.replace(String,String)", "date.replace(String,String)", "simpleDateFormat.format(Date)", "date.replace(String,String)", "date.replace(String,String)"], "useStart": [818, 818, 1059, 1059, 1059, 1238, 1238, 1238], "useEnd": [908, 946, 1114, 1149, 1187, 1278, 1298, 1315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/api/src/com/todoroo/andlib/utility/DateUtilities.java", "rawCode": "  /**\n   * @param context android context\n   * @param date date to format\n   * @return date, with month, day, and year\n   */\n  @SuppressWarnings(\"nls\")\n  public static String getDateString(Context context, Date date, boolean includeYear) {\n    String month =\n        DateUtils.getMonthString(date.getMonth() + Calendar.JANUARY, DateUtils.LENGTH_MEDIUM);\n    String value;\n    String standardDate;\n    // united states, you are special\n    Locale locale = Locale.getDefault();\n    if (arrayBinaryContains(locale.getLanguage(), \"ja\", \"ko\", \"zh\")\n        || arrayBinaryContains(locale.getCountry(), \"BZ\", \"CA\", \"KE\", \"MN\", \"US\"))\n      value = \"'#' d'$'\";\n    else value = \"d'$' '#'\";\n    if (includeYear) value += \", yyyy\";\n    if (arrayBinaryContains(locale.getLanguage(), \"ja\", \"zh\")) {\n      standardDate =\n          new SimpleDateFormat(value)\n              .format(date)\n              .replace(\"#\", month)\n              .replace(\"$\", \"\\u65E5\"); // $NON-NLS-1$\n    } else if (\"ko\".equals(Locale.getDefault().getLanguage())) {\n      standardDate =\n          new SimpleDateFormat(value)\n              .format(date)\n              .replace(\"#\", month)\n              .replace(\"$\", \"\\uC77C\"); // $NON-NLS-1$\n    } else {\n      standardDate = new SimpleDateFormat(value).format(date).replace(\"#\", month).replace(\"$\", \"\");\n    }\n    return standardDate;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7615, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = Calendar.getTime()"], "initializationStart": [4658, 11568], "initializationEnd": [4705, 11581], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 11602, "focalAPIEnd": 11618, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.format(Date)"], "useStart": [11648], "useEnd": [11663], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/QADM/SCG/tree/master/opentaps-1.5/opentaps/opentaps-common/src/common/org/opentaps/common/reporting/etl/UtilEtl.java", "rawCode": "  /**\n   * Runs an ETL job.\n   *\n   * @param jobFileName the name of the job, eg: \"sales_tax_statement_etl_job.kjb\"\n   * @param reportsPath the path to the job, eg:\n   *     \"component://financials/webapp/financials/reports/repository\"\n   * @param jobParameters job parameters\n   * @exception KettleException if an error occurs\n   */\n  public static void runJob(\n      String jobFileName, String reportsPath, Map<String, String> jobParameters)\n      throws KettleException {\n\n    EnvUtil.environmentInit();\n    RepositoryMeta repinfo = null;\n    UserInfo userinfo = null;\n    Job job = null;\n\n    StringBuffer optionRepname,\n        optionUsername,\n        optionPassword,\n        optionJobname,\n        optionDirname,\n        optionFilename,\n        optionLoglevel;\n    StringBuffer optionLogfile,\n        optionLogfileOld,\n        optionListdir,\n        optionListjobs,\n        optionListrep,\n        optionNorep,\n        optionVersion;\n\n    LogWriter log = LogWriter.getInstance(LogWriter.LOG_LEVEL_BASIC);\n\n    String jobDirPath = \"\";\n    String jobFilePath = \"\";\n    String jobFilenameTemplate = \"/${jobFilename}\";\n    try {\n      jobDirPath = ComponentLocationResolver.getBaseLocation(reportsPath).toString();\n      jobFilePath =\n          ComponentLocationResolver.getBaseLocation(\n                  FlexibleStringExpander.expandString(\n                      reportsPath + jobFilenameTemplate,\n                      UtilMisc.toMap(\"jobFilename\", jobFileName)))\n              .toString();\n    } catch (MalformedURLException muex) {\n      log.logError(STRING_KITCHEN, \"Error resolving ETL files path.\", muex);\n    }\n\n    optionRepname = new StringBuffer();\n    optionUsername = new StringBuffer();\n    optionPassword = new StringBuffer();\n    optionJobname = new StringBuffer();\n    optionDirname = new StringBuffer();\n    optionFilename = new StringBuffer(jobFilePath);\n    optionLoglevel = new StringBuffer();\n    optionLogfile = new StringBuffer();\n    optionLogfileOld = new StringBuffer();\n    optionListdir = new StringBuffer();\n    optionListdir = new StringBuffer();\n    optionListjobs = new StringBuffer();\n    optionListrep = new StringBuffer();\n    optionNorep = new StringBuffer();\n    optionVersion = new StringBuffer();\n\n    String kettleRepname = Const.getEnvironmentVariable(\"KETTLE_REPOSITORY\", null);\n    String kettleUsername = Const.getEnvironmentVariable(\"KETTLE_USER\", null);\n    String kettlePassword = Const.getEnvironmentVariable(\"KETTLE_PASSWORD\", null);\n\n    if (!Const.isEmpty(kettleRepname)) {\n      optionRepname = new StringBuffer(kettleRepname);\n    }\n    if (!Const.isEmpty(kettleUsername)) {\n      optionUsername = new StringBuffer(kettleUsername);\n    }\n    if (!Const.isEmpty(kettlePassword)) {\n      optionPassword = new StringBuffer(kettlePassword);\n    }\n\n    LogWriter.setConsoleAppenderDebug();\n\n    if (Const.isEmpty(optionLogfile) && !Const.isEmpty(optionLogfileOld)) {\n      // if the old style of logging name is filled in, and the new one is not\n      // overwrite the new by the old\n      optionLogfile = optionLogfileOld;\n    }\n\n    if (Const.isEmpty(optionLogfile)) {\n      log = LogWriter.getInstance(LogWriter.LOG_LEVEL_BASIC);\n    } else {\n      log = LogWriter.getInstance(optionLogfile.toString(), true, LogWriter.LOG_LEVEL_BASIC);\n    }\n\n    if (!Const.isEmpty(optionLoglevel)) {\n      log.setLogLevel(optionLoglevel.toString());\n      log.logMinimal(STRING_KITCHEN, \"Logging is at level : \" + log.getLogLevelDesc());\n    }\n\n    if (!Const.isEmpty(optionVersion)) {\n      BuildVersion buildVersion = BuildVersion.getInstance();\n      log.logBasic(\n          \"Pan\",\n          \"Kettle version \"\n              + Const.VERSION\n              + \", build \"\n              + buildVersion.getVersion()\n              + \", build date : \"\n              + buildVersion.getBuildDate());\n      // if (a.length==1) System.exit(6);\n    }\n\n    // Start the action...\n    //\n    if (!Const.isEmpty(optionRepname) && !Const.isEmpty(optionUsername)) {\n      log.logDetailed(STRING_KITCHEN, \"Repository and username supplied\");\n    }\n\n    log.logMinimal(STRING_KITCHEN, \"Start of run.\");\n\n    /* Load the plugins etc.*/\n    try {\n      StepLoader.init();\n    } catch (KettleException e) {\n      log.logError(STRING_KITCHEN, \"Error loading steps... halting Kitchen!\", e);\n    }\n    StepLoader stepLoader = StepLoader.getInstance();\n\n    /* Load the plugins etc.*/\n    try {\n      JobEntryLoader.init();\n    } catch (KettleException e) {\n      log.logError(STRING_KITCHEN, \"Error loading job entries & plugins... halting Kitchen!\", e);\n      return;\n    }\n\n    Date start, stop;\n    Calendar cal;\n    SimpleDateFormat df = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");\n    cal = Calendar.getInstance();\n    start = cal.getTime();\n\n    log.logDebug(STRING_KITCHEN, \"Allocate new job.\");\n    JobMeta jobMeta = new JobMeta(log);\n\n    // In case we use a repository...\n    Repository repository = null;\n\n    try {\n      // Read kettle job specified on command-line?\n      if (!Const.isEmpty(optionRepname) || !Const.isEmpty(optionFilename)) {\n        log.logDebug(STRING_KITCHEN, \"Parsing command line options.\");\n        if (!Const.isEmpty(optionRepname) && !\"Y\".equalsIgnoreCase(optionNorep.toString())) {\n          log.logDebug(STRING_KITCHEN, \"Loading available repositories.\");\n          RepositoriesMeta repsinfo = new RepositoriesMeta(log);\n          if (repsinfo.readData()) {\n            log.logDebug(STRING_KITCHEN, \"Finding repository [\" + optionRepname + \"]\");\n            repinfo = repsinfo.findRepository(optionRepname.toString());\n            if (repinfo != null) {\n              // Define and connect to the repository...\n              log.logDebug(STRING_KITCHEN, \"Allocate & connect to repository.\");\n              repository = new Repository(log, repinfo, userinfo);\n              if (repository.connect(\"Kitchen commandline\")) {\n                RepositoryDirectory directory = repository.getDirectoryTree(); // Default = root\n\n                // Find the directory name if one is specified...\n                if (!Const.isEmpty(optionDirname)) {\n                  directory = repository.getDirectoryTree().findDirectory(optionDirname.toString());\n                }\n\n                if (directory != null) {\n                  // Check username, password\n                  log.logDebug(STRING_KITCHEN, \"Check supplied username and password.\");\n                  userinfo =\n                      new UserInfo(\n                          repository, optionUsername.toString(), optionPassword.toString());\n                  if (userinfo.getID() > 0) {\n                    // Load a job\n                    if (!Const.isEmpty(optionJobname)) {\n                      log.logDebug(STRING_KITCHEN, \"Load the job info...\");\n                      jobMeta = new JobMeta(log, repository, optionJobname.toString(), directory);\n                      log.logDebug(STRING_KITCHEN, \"Allocate job...\");\n                      job = new Job(log, stepLoader, repository, jobMeta);\n                    } else if (\"Y\".equalsIgnoreCase(optionListjobs.toString())) {\n                      // List the jobs in the repository\n                      log.logDebug(\n                          STRING_KITCHEN, \"Getting list of jobs in directory: \" + directory);\n                      String[] jobnames = repository.getJobNames(directory.getID());\n                      for (int i = 0; i < jobnames.length; i++) {\n                        log.logError(jobnames[i], MODULE);\n                      }\n                    } else if (\"Y\".equalsIgnoreCase(optionListdir.toString())) {\n                      // List the directories in the repository\n                      String[] dirnames = repository.getDirectoryNames(directory.getID());\n                      for (int i = 0; i < dirnames.length; i++) {\n                        log.logError(dirnames[i], MODULE);\n                      }\n                    }\n                  } else {\n                    log.logError(\"ERROR: Can't verify username and password.\", MODULE);\n                    userinfo = null;\n                    repinfo = null;\n                  }\n                } else {\n                  log.logError(\n                      \"ERROR: Can't find the supplied directory [\" + optionDirname + \"]\", MODULE);\n                  userinfo = null;\n                  repinfo = null;\n                }\n              } else {\n                log.logError(\"ERROR: Can't connect to the repository.\", MODULE);\n              }\n            } else {\n              log.logError(\"ERROR: No repository provided, can't load job.\", MODULE);\n            }\n          } else {\n            log.logError(\"ERROR: No repositories defined on this system.\", MODULE);\n          }\n        }\n\n        // Try to load if from file anyway.\n        if (!Const.isEmpty(optionFilename) && job == null) {\n          jobMeta = new JobMeta(log, optionFilename.toString(), null, null);\n          job = new Job(log, stepLoader, null, jobMeta);\n        }\n      } else if (\"Y\".equalsIgnoreCase(optionListrep.toString())) {\n        RepositoriesMeta ri = new RepositoriesMeta(log);\n        if (ri.readData()) {\n          log.logError(\"List of repositories:\", MODULE);\n          for (int i = 0; i < ri.nrRepositories(); i++) {\n            RepositoryMeta rinfo = ri.getRepository(i);\n            log.logError(\n                \"#\" + (i + 1) + \" : \" + rinfo.getName() + \" [\" + rinfo.getDescription() + \"] \",\n                MODULE);\n          }\n        } else {\n          log.logError(\"ERROR: Unable to read/parse the repositories XML file.\", MODULE);\n        }\n      }\n    } catch (KettleException e) {\n      job = null;\n      jobMeta = null;\n      log.logError(\"Processing stopped because of an error: \" + e.getMessage(), MODULE);\n    }\n\n    if (job == null) {\n      if (!\"Y\".equalsIgnoreCase(optionListjobs.toString())\n          && !\"Y\".equalsIgnoreCase(optionListdir.toString())\n          && !\"Y\".equalsIgnoreCase(optionListrep.toString())) {\n        log.logError(\"ERROR: Kitchen can't continue because the job couldn't be loaded.\", MODULE);\n      }\n    }\n\n    Result result = null;\n\n    // int returnCode=0;\n\n    try {\n      job.initializeVariablesFrom(null);\n      if (jobParameters != null) {\n        job.getJobMeta().setInternalKettleVariables(job);\n        final Set<String> stringSet = jobParameters.keySet();\n        for (String key : stringSet) {\n          job.setParameterValue(key, jobParameters.get(key));\n          job.setVariable(key, jobParameters.get(key));\n        }\n      }\n\n      // set the path to where the transformation files are located\n      job.setVariable(\"transformationsPath\", jobDirPath);\n\n      // set all parameters as internal variables\n      job.getJobMeta().setInternalKettleVariables(job);\n      result = job.execute(); // Execute the selected job.\n      job.endProcessing(\"end\", result); // The bookkeeping...\n    } catch (KettleJobException je) {\n      if (result == null) {\n        result = new Result();\n      }\n      result.setNrErrors(1L);\n\n      try {\n        job.endProcessing(\"error\", result);\n      } catch (KettleJobException je2) {\n        log.logError(job.getName(), \"A serious error occured : \" + je2.getMessage());\n        // returnCode = 2;\n      }\n    } finally {\n      if (repository != null) {\n        repository.disconnect();\n      }\n    }\n\n    log.logMinimal(STRING_KITCHEN, \"Finished!\");\n\n    if (result != null && result.getNrErrors() != 0) {\n      log.logError(STRING_KITCHEN, \"Finished with errors\");\n      // returnCode = 1;\n    }\n    cal = Calendar.getInstance();\n    stop = cal.getTime();\n    String begin = df.format(start).toString();\n    String end = df.format(stop).toString();\n\n    log.logMinimal(STRING_KITCHEN, \"Start=\" + begin + \", Stop=\" + end);\n    long millis = stop.getTime() - start.getTime();\n    log.logMinimal(STRING_KITCHEN, \"Processing ended after \" + (millis / 1000) + \" seconds.\");\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7616, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1090, "focalAPIEnd": 1141, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Qi4j/qi4j-sdk/tree/master/libraries/rest-common/src/main/java/org/qi4j/library/rest/common/table/TableBuilder.java", "rawCode": "  public TableBuilder rows(Iterable<?> rowObjects) {\n    boolean no_format = false;\n    boolean no_values = false;\n    if (tableQuery != null && tableQuery.options() != null) {\n      if (tableQuery.options().contains(\"no_format\")) no_format = true;\n      if (tableQuery != null && tableQuery.options().contains(\"no_values\")) no_values = true;\n    }\n\n    for (Object rowObject : rowObjects) {\n      row();\n      for (Column column : tableBuilder.prototype().cols().get()) {\n        Object v = null;\n        String f = null;\n        Function valueFunction = columns.get(column.id().get()).getValueFunction();\n        if (!no_values && valueFunction != null) v = valueFunction.map(rowObject);\n        Function formattedFunction = columns.get(column.id().get()).getFormattedFunction();\n        if (!no_format && formattedFunction != null) f = (String) formattedFunction.map(rowObject);\n        else if (v != null) {\n          if (column.columnType().get().equals(Table.DATETIME)) f = Dates.toUtcString((Date) v);\n          else if (column.columnType().get().equals(Table.DATE))\n            f = new SimpleDateFormat(\"yyyy-MM-dd\").format((Date) v);\n          else if (column.columnType().get().equals(Table.TIME_OF_DAY))\n            f = new SimpleDateFormat(\"HH:mm:ss\").format((Date) v);\n          else f = v.toString();\n        }\n\n        cell(v, f);\n      }\n      endRow();\n    }\n\n    return this;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7617, "initialization": ["Date date = new Date()"], "initializationStart": [1704], "initializationEnd": [1714], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1979, "focalAPIEnd": 2023, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/payhum/codebase/tree/master/Payhum/src/com/openhr/zipfile/PayZipDownload.java", "rawCode": "  public ActionForward execute(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n\n    ConfigData configpay = ConfigDataFactory.findByName(PayhumConstants.PAYROLLDATE_ID);\n    String payRunDate = configpay.getConfigValue();\n\n    Calendar currDtCal = Calendar.getInstance();\n\n    // Zero out the hour, minute, second, and millisecond\n    currDtCal.set(Calendar.HOUR_OF_DAY, 0);\n    currDtCal.set(Calendar.MINUTE, 0);\n    currDtCal.set(Calendar.SECOND, 0);\n    currDtCal.set(Calendar.MILLISECOND, 0);\n\n    List<PayrollDate> payrollDates = new ArrayList<PayrollDate>();\n    List<EmpPayrollMap> employees = new ArrayList<EmpPayrollMap>();\n\n    List<PayrollDate> pds = PayrollFactory.findPayrollDateByID(Integer.parseInt(payRunDate));\n\n    payrollDates.addAll(PayrollFactory.findPayrollDateByBranch(pds.get(0).getBranchId().getId()));\n\n    List<Payroll> prd =\n        EmpPayTaxFactroy.findPayrollByIDAndBranch(payRunDate, pds.get(0).getBranchId().getId());\n    employees.addAll(EmpPayTaxFactroy.findTaxMonthlyForEmployeeByDate(prd.get(0)));\n\n    List<Payroll> payRuns =\n        PayrollFactory.findAllPayrollRunsPerBranch(pds.get(0).getBranchId().getId());\n    Integer divNo = PayhumUtil.remainingPaycycles(payrollDates, payRuns);\n\n    Integer mulNO =\n        PayrollFactory.findAllPayrollRunsPerBranch(prd.get(0).getBranchId().getId()).size();\n\n    boolean monthly = false;\n    List<PayPeriodData> payPeriods = PayPeriodFactory.findAll();\n    for (PayPeriodData ppd : payPeriods) {\n      if (ppd.getPeriodName().equalsIgnoreCase(\"Monthly\")) {\n        monthly = true;\n        break;\n      }\n    }\n\n    Date now = new Date();\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(pds.get(0).getRunDateofDateObject());\n    cal.set(Calendar.HOUR_OF_DAY, 0);\n    cal.set(Calendar.MINUTE, 0);\n    cal.set(Calendar.SECOND, 0);\n    cal.set(Calendar.MILLISECOND, 0);\n\n    String monthYear = new SimpleDateFormat(\"MMM_yyyy\").format(now);\n\n    String fileName =\n        \"Paystubs_\"\n            + pds.get(0).getBranchId().getCompanyId().getName()\n            + \"_\"\n            + pds.get(0).getBranchId().getName()\n            + \"_Payroll_\"\n            + monthYear\n            + \".zip\";\n\n    fileName = fileName.replace(\" \", \"_\");\n\n    response.setContentType(\"application/zip\");\n    response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n\n    ServletOutputStream os = response.getOutputStream();\n\n    ZipOutputStream zos = new ZipOutputStream(os);\n\n    PdfFactory.zipFileDownload(zos, employees, mulNO, divNo, monthly, pds.get(0));\n\n    zos.flush();\n\n    zos.close();\n\n    os.flush();\n    os.close();\n\n    return mapping.findForward(\"masteradmin.form\");\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7618, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 380, "focalAPIEnd": 404, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/emf.texo/tree/master/core/org.eclipse.emf.texo/src/org/eclipse/emf/texo/utils/ModelUtils.java", "rawCode": "  /**\n   * Converts a Date to a valid XML String. Note: method is synchronized as it uses a shared {@link\n   * SimpleDateFormat} instance.\n   *\n   * @param dt the Date to format\n   * @return the String format of a {@link Date}, the standard xml format is used:\n   *     yyyy-MM-dd'T'HH:mm:ss.S'Z'\n   */\n  public static synchronized String convertToXML(final Date dt) {\n    return xmlDateFormat.format(dt);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7619, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(*)"], "initializationStart": [229], "initializationEnd": [271], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 284, "focalAPIEnd": 300, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/tags/blojsom-1_6-RC1/blojsom/src/org/ignition/blojsom/util/BlojsomUtils.java", "rawCode": "  /**\n   * Return a date in ISO 8601 style http://www.w3.org/TR/NOTE-datetime\n   *\n   * @param date Date\n   * @return Date formatted as ISO 8601\n   */\n  public static String getISO8601Date(Date date) {\n    SimpleDateFormat sdf = new SimpleDateFormat(ISO_8601_DATE_FORMAT);\n    return sdf.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7620, "initialization": ["Date date = OaiPmhRecord.getRecordDatestampDate()"], "initializationStart": [735], "initializationEnd": [766], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 731, "guardExpressionEnd": 775, "guardBlockStart": 731, "guardBlockEnd": 953, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 846, "focalAPIEnd": 903, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeCharacters(date)"], "useStart": [826], "useEnd": [904], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/uq-eresearch/oztrack/tree/master/src/main/java/org/oztrack/view/OaiPmhRecordWriter.java", "rawCode": "  public void write(OaiPmhRecord record) throws XMLStreamException {\n    if (StringUtils.isBlank(record.getOaiPmhRecordIdentifier())) {\n      throw new IllegalArgumentException(\"Record must have OAI-PMH identifier\");\n    }\n\n    if (!headerOnly) {\n      out.writeStartElement(\"record\");\n    }\n\n    out.writeStartElement(\"header\");\n\n    // A unique identifier unambiguously identifies an item within a repository.\n    // The format of the unique identifier must correspond to that of the URI syntax.\n    // http://www.openarchives.org/OAI/2.0/openarchivesprotocol.htm#UniqueIdentifier\n    out.writeStartElement(\"identifier\");\n    out.writeCharacters(record.getOaiPmhRecordIdentifier());\n    out.writeEndElement(); // identifier\n\n    if (record.getRecordDatestampDate() != null) {\n      out.writeStartElement(\"datestamp\");\n      out.writeCharacters(utcDateTimeFormat.format(record.getRecordDatestampDate()));\n      out.writeEndElement(); // datestamp\n    }\n\n    if (record.getOaiPmhSetSpecs() != null) {\n      for (String setSpec : record.getOaiPmhSetSpecs()) {\n        out.writeStartElement(\"setSpec\");\n        out.writeCharacters(setSpec);\n        out.writeEndElement(); // setSpec\n      }\n    }\n\n    out.writeEndElement(); // header\n\n    if (!headerOnly) {\n      out.writeStartElement(\"metadata\");\n      if (metadataFormat.equals(OAI_DC)) {\n        writeOaiDcRepositoryMetadataElement(record);\n      } else if (metadataFormat.equals(RIF_CS)) {\n        writeRifCsRepositoryMetadataElement(record);\n      }\n      out.writeEndElement(); // metadata\n    }\n\n    if (!headerOnly) {\n      out.writeEndElement(); // record\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7621, "initialization": ["Date date = new Date()"], "initializationStart": [230], "initializationEnd": [240], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 277, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/derekqian/coDoc/tree/master/edu.pdx.svl.coDoc.cdc/src/edu/pdx/svl/coDoc/cdc/datacenter/CDCModelV2.java", "rawCode": "  public void addSpecFileEntry(String filename) {\n    if (body.specfiles.getFileEntryId(filename) == null) {\n      Properties props = System.getProperties();\n      String uuid = body.specfiles.addFileEntry(filename);\n      date = new Date();\n      hist.addOperation(\n          ft.format(date)\n              + \"#\"\n              + props.getProperty(\"os.name\")\n              + \"#\"\n              + props.getProperty(\"user.name\")\n              + \"#add#specfileentry#\"\n              + uuid);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7622, "initialization": ["Date date = new Date()"], "initializationStart": [609], "initializationEnd": [619], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 637, "focalAPIEnd": 686, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stumoodie/PathwayEditor/tree/master/libs/apache-log4j-1.2.15/contribs/EirikLygre/DailyFileAppender1.java", "rawCode": "  /**\n   * Set the current output file.\n   *\n   * <p>The function will compute a new filename, and open a new file only when the name has\n   * changed.\n   *\n   * <p>The function is automatically called once a day, to allow for daily files -- the purpose of\n   * this class.\n   */\n  public synchronized void setFile(String fileName, boolean append) throws IOException {\n\n    /* Compute filename, but only if fileNamePattern is specified */\n    if (fileNamePattern == null) {\n      errorHandler.error(\"Missing file pattern (\" + FILE_NAME_PATTERN_OPTION + \") in setFile().\");\n      return;\n    }\n\n    Date now = new Date();\n\n    fileName = new SimpleDateFormat(fileNamePattern).format(now);\n    if (fileName.equals(currentFileName)) return;\n\n    /* Set up next filename checkpoint */\n    DailyFileAppenderCalendar c = new DailyFileAppenderCalendar();\n    c.rollToNextDay();\n    nextFilenameComputingMillis = c.getTimeInMillis();\n\n    currentFileName = fileName;\n\n    super.setFile(fileName, append);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7623, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [519], "initializationEnd": [546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null)", "guardType": "IF {", "guardExpressionStart": 439, "guardExpressionEnd": 457, "guardBlockStart": 439, "guardBlockEnd": 591, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 568, "focalAPIEnd": 584, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ovitas/compass2/tree/master/core/src/main/java/no/ovitas/compass2/util/DateUtil.java", "rawCode": "  /**\n   * This method generates a string representation of a date's date/time in the format you specify\n   * on input\n   *\n   * @param aMask the date pattern the string is in\n   * @param aDate a date object\n   * @return a formatted string representation of the date\n   * @see java.text.SimpleDateFormat\n   */\n  public static String getDateTime(String aMask, Date aDate) {\n    SimpleDateFormat df = null;\n    String returnValue = \"\";\n\n    if (aDate == null) {\n      log.error(\"aDate is null!\");\n    } else {\n      df = new SimpleDateFormat(aMask);\n      returnValue = df.format(aDate);\n    }\n\n    return (returnValue);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7624, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = new Date()", "Date date = SimpleDateFormat.parse(String)"], "initializationStart": [154, 327, 367], "initializationEnd": [185, 337, 386], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.parse(String)", "simpleDateFormat.parse(String)"], "configurationStart": [367, 404], "configurationEnd": [386, 421], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 642, "focalAPIEnd": 663, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(date)", "simpleDateFormat.format(Date)", "simpleDateFormat.format(Date)"], "useStart": [623, 689, 813], "useEnd": [664, 708, 836], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jarvis-su/codes/tree/master/dataOperation/src/main/java/sqlite/Main.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    // method();\n    String formatStr = \"yyyy-MM-dd HH:mm:ss\";\n    SimpleDateFormat sdf = new SimpleDateFormat(formatStr);\n    String beginStr = \"2013-06-04 18:34:49\";\n    String endStr = \"2013-06-04 19:00:00\";\n    Date beginDate = new Date();\n    Date endDate = new Date();\n    try {\n      beginDate = sdf.parse(beginStr);\n      endDate = sdf.parse(endStr);\n\n      float hours = (float) ((endDate.getTime() - beginDate.getTime()) / 1000.0 / 60.0 / 60.0);\n      System.out.println(hours);\n    } catch (ParseException e) {\n      e.printStackTrace();\n    }\n    System.out.println(sdf.format(beginDate));\n    System.out.println(sdf.format(endDate));\n\n    Calendar c = Calendar.getInstance();\n    c.set(Calendar.HOUR_OF_DAY, 20);\n    System.out.println(sdf.format(c.getTime()));\n\n    getNonWorkingHours(beginDate, endDate);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7625, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 731, "tryExpressionEnd": 735, "tryBlockStart": 731, "tryBlockEnd": 2683, "catchExpressionStart": 2171, "catchExpressionEnd": 2195, "catchBlockStart": 2171, "catchBlockEnd": 2230, "exceptionHandlingCallStart": [2203], "exceptionHandlingCallEnd": [2223], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1899, "focalAPIEnd": 1929, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.format(Date)"], "useStart": [1973], "useEnd": [2002], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 2348, "finallyExpressionEnd": 2356, "finallyBlockStart": 2348, "finallyBlockEnd": 2683, "cleanUpCallStart": [2410], "cleanUpCallEnd": [2424], "url": "https://github.com/kef/hieos/tree/master/src/logbrowser/src/java/com/vangent/hieos/logbrowser/servlets/GetDateServlet.java", "rawCode": "  /**\n   * @param req\n   * @param res\n   */\n  public void doGet(HttpServletRequest req, HttpServletResponse res) {\n    PreparedStatement dateStatement = null;\n    Log log = new Log();\n    try {\n      Connection con = log.getConnection();\n      System.out.println(\"LOG (dateStatement) = \" + this.sqlCommand);\n      dateStatement = con.prepareStatement(this.sqlCommand);\n    } catch (SQLException e) {\n      logger.error(e);\n    } catch (LoggerException e) {\n      logger.error(e);\n    }\n    if (dateStatement == null) {\n      try {\n        log.closeConnection();\n        return; // EARLY EXIT: Can not continue processing\n      } catch (LoggerException ex) {\n        logger.error(ex);\n      }\n    }\n    ResultSet result = null;\n    try {\n      result = dateStatement.executeQuery();\n      TreeSet<Date> set = new TreeSet<Date>();\n      SimpleDateFormat sdf = null;\n      SimpleDateFormat sdf2 = null;\n      if (req.getParameter(\"formatDisplayed\") == null) {\n        sdf = new SimpleDateFormat(\"yyyy-MMM dd\");\n      } else {\n        sdf = new SimpleDateFormat(req.getParameter(\"formatDisplayed\"));\n      }\n      if (req.getParameter(\"formatValue\") == null) {\n        sdf2 = new SimpleDateFormat(\"yyyy-MM-dd\");\n      } else {\n        sdf2 = new SimpleDateFormat(req.getParameter(\"formatValue\"));\n      }\n      Timestamp timeStamp = null;\n      String stringTmp = null;\n      Date d = null;\n      while (result.next()) {\n        timeStamp = result.getTimestamp(1);\n        stringTmp = sdf.format(timeStamp);\n        d = sdf.parse(stringTmp);\n        set.add(d);\n      }\n      Object[] stArray = set.toArray();\n      StringBuffer time = new StringBuffer();\n      res.setContentType(\"text/xml\");\n      time.append(\"<select>\");\n      time.append(\"<option value ='0' ></option>\\n\");\n      for (int i = stArray.length - 1; i > -1; i--) {\n        time.append(\n            \"<option value ='\"\n                + sdf2.format((Date) stArray[i])\n                + \"' > \"\n                + sdf.format((Date) stArray[i])\n                + \"</option>\\n\");\n      }\n      time.append(\"</select >\");\n      stArray = null;\n      res.getWriter().write(time.toString());\n      time = null;\n    } catch (SQLException e1) {\n      e1.printStackTrace();\n    } catch (ParseException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (result != null) {\n          result.close();\n        }\n        if (dateStatement != null) {\n          dateStatement.close();\n        }\n        log.closeConnection();\n      } catch (LoggerException ex) {\n        logger.error(ex);\n      } catch (SQLException se) {\n        logger.error(se);\n      }\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7626, "initialization": ["Date date = SimpleDateFormat.parse(String)"], "initializationStart": [394], "initializationEnd": [421], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.parse(String)"], "configurationStart": [394], "configurationEnd": [421], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 798, "focalAPIEnd": 820, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.format(Date)"], "useStart": [1081], "useEnd": [1103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/Reha/src/hmrCheck/HMRCheck.java", "rawCode": "  /** *************************************** */\n  @SuppressWarnings(\"deprecation\")\n  public static String hmrLetztesDatum(\n      String startdatum, int differenz, boolean samstagistwerktag) {\n    // SimpleDateFormat sd = new SimpleDateFormat(\"dd.MM.yyyy\");\n    int i = 0;\n    int werktage = 0;\n    Date date = null;\n    // System.out.println(\"Übergabe = \"+startdatum);\n\n    try {\n      date = sdDeutsch.parse(startdatum);\n    } catch (ParseException e) {\n      e.printStackTrace();\n    }\n\n    // System.out.println(\"geparstes Datum = \"+sd.format(date));\n    while (true) {\n      // System.out.println(\"Getestetes Datum = \"+sd.format(date));\n      if ((!(date.getDay() % 7 == 0)) && (samstagistwerktag)) {\n        if (!istFeiertag(date)) {\n          if (werktage == differenz) {\n            return sdDeutsch.format(date);\n          }\n          werktage++;\n        }\n      } else if ((!(date.getDay() % 7 == 0))\n          && (!samstagistwerktag)\n          && (!(date.getDay() % 6 == 0))) {\n        if (!istFeiertag(date)) {\n          if (werktage == differenz) {\n            return sdDeutsch.format(date);\n          }\n          werktage++;\n        }\n      }\n      i++;\n      date = new Date(date.getTime() + (24 * 60 * 60 * 1000));\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7627, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 55, "guardExpressionEnd": 72, "guardBlockStart": 55, "guardBlockEnd": 153, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 88, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cenkcivici/SkWorkShop/tree/master/Common/src/test/com/sk/util/TestUtil.java", "rawCode": "  public static String toStringFormat(Date date) {\n    if (date != null) {\n      return dateFormatter.format(date);\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7628, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 459, "guardExpressionEnd": 484, "guardBlockStart": 459, "guardBlockEnd": 656, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 603, "focalAPIEnd": 636, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(date)"], "useStart": [579], "useEnd": [637], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neiraza/rakuphotomail-parent/tree/master/rakuphotomail/src/main/java/jp/co/fttx/rakuphotomail/mail/store/ImapStore.java", "rawCode": "    protected Message[] getMessages(\n        final int start,\n        final int end,\n        Date earliestDate,\n        final boolean includeDeleted,\n        final MessageRetrievalListener listener)\n        throws MessagingException {\n\n      if (start < 1 || end < 1 || end < start) {\n        throw new MessagingException(String.format(\"Invalid message set %d %d\", start, end));\n      }\n      final StringBuilder dateSearchString = new StringBuilder();\n      if (earliestDate != null) {\n        dateSearchString.append(\" SINCE \");\n        synchronized (RFC3501_DATE) {\n          dateSearchString.append(RFC3501_DATE.format(earliestDate));\n        }\n      }\n\n      ImapSearcher searcher =\n          new ImapSearcher() {\n            public List<ImapResponse> search() throws IOException, MessagingException {\n              return executeSimpleCommand(\n                  String.format(\n                      \"UID SEARCH %d:%d%s\" + (includeDeleted ? \"\" : \" NOT DELETED\"),\n                      start,\n                      end,\n                      dateSearchString));\n            }\n          };\n      return search(searcher, listener);\n    }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7629, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat()", "Date date = Calendar.getTime()"], "initializationStart": [57, 185], "initializationEnd": [79, 198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.applyPattern(String)"], "configurationStart": [205], "configurationEnd": [231], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 243, "focalAPIEnd": 260, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["logln(date)", "simpleDateFormat.applyPattern(String)", "simpleDateFormat.format(Date)", "logln(date)", "simpleDateFormat.applyPattern(String)", "simpleDateFormat.format(Date)", "logln(date)", "simpleDateFormat.applyPattern(String)", "simpleDateFormat.format(Date)", "logln(date)", "simpleDateFormat.applyPattern(String)", "simpleDateFormat.format(Date)", "logln(date)"], "useStart": [237, 267, 306, 300, 331, 371, 365, 396, 437, 431, 462, 504, 498], "useEnd": [261, 294, 323, 324, 359, 388, 389, 425, 454, 455, 492, 521, 522], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UweTrottmann/QuickDic-Dictionary/tree/master/jars/icu4j-4_8_1_1/main/tests/core/src/com/ibm/icu/dev/test/format/DateFormatRegressionTestJ.java", "rawCode": "  public void Test4358730() {\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    Calendar cal = Calendar.getInstance();\n    cal.clear();\n    cal.set(2001, 11, 10);\n    Date today = cal.getTime();\n\n    sdf.applyPattern(\"MM d y\");\n    logln(sdf.format(today));\n    sdf.applyPattern(\"MM d yy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyyy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyyyy\");\n    logln(sdf.format(today));\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7630, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = LogMessage.getClientDate()"], "initializationStart": [228, 430], "initializationEnd": [269, 456], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 464, "guardExpressionEnd": 487, "guardBlockStart": 464, "guardBlockEnd": 583, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 544, "focalAPIEnd": 573, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(date)"], "useStart": [529], "useEnd": [574], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dlitvinov/FastEMFStore.core/tree/master/org.eclipse.emf.emfstore.client.ui/src/org/eclipse/emf/emfstore/client/ui/views/scm/SCMLabelProvider.java", "rawCode": "  private String getText(ChangePackage changePackage) {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Change Package\");\n    if (changePackage.getLogMessage() != null) {\n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd, HH:mm\");\n      LogMessage logMessage = changePackage.getLogMessage();\n      builder.append(\" [\");\n      builder.append(logMessage.getAuthor());\n      Date clientDate = logMessage.getClientDate();\n      if (clientDate != null) {\n        builder.append(\" @ \");\n        builder.append(dateFormat.format(clientDate));\n      }\n      builder.append(\"] \");\n      builder.append(logMessage.getMessage());\n    }\n    return builder.toString();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7631, "initialization": ["Date date = Attributes.getValue(String)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(*)", "Date date = new Date()"], "initializationStart": [933, 1551, 1609], "initializationEnd": [955, 1590, 1619], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1668, "focalAPIEnd": 1681, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["transformDate(date)"], "useStart": [1649], "useEnd": [1682], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tizzit/tizzit/tree/master/tizzit-cocoon-components/src/main/java/org/tizzit/cocoon/generic/transformation/UtilTransformer.java", "rawCode": "  @Override\n  public void startElement(String uri, String localName, String qName, Attributes attrs)\n      throws SAXException {\n    this.lastElement = qName;\n    if (qName.startsWith(UtilTransformer.NAME_SPACE)) {\n      if (localName.equalsIgnoreCase(\"dateDiff\")) { // $NON-NLS-1$\n        this.resultFormat = attrs.getValue(\"dateFormat\"); // $NON-NLS-1$\n        if (log.isDebugEnabled())\n          log.debug(\"found resultFormat: \" + this.resultFormat); // $NON-NLS-1$\n        this.resultLanguage = attrs.getValue(\"lang\"); // $NON-NLS-1$\n        if (log.isDebugEnabled())\n          log.debug(\"found resultLanguage: \" + this.resultLanguage); // $NON-NLS-1$\n        contentHandler.startElement(uri, localName, qName, attrs);\n      } else if (localName.equalsIgnoreCase(\"date\")) { // $NON-NLS-1$\n        String d = null;\n        d = attrs.getValue(\"diff\"); // $NON-NLS-1$\n        if (d != null) {\n          this.diff = Integer.parseInt(attrs.getValue(\"diff\")); // $NON-NLS-1$\n        } else {\n          diff = 0;\n        }\n        this.sourceFormat = attrs.getValue(\"dateFormat\"); // $NON-NLS-1$\n        AttributesImpl newAttr = new AttributesImpl();\n        newAttr.addAttribute(\n            \"\",\n            \"dateFormat\",\n            \"dateFormat\",\n            \"CDATA\",\n            this.resultFormat); // $NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n        contentHandler.startElement(\"\", localName, localName, newAttr); // $NON-NLS-1$\n      } else if (localName.equalsIgnoreCase(\"currentDate\")) { // $NON-NLS-1$\n        SimpleDateFormat sdf = new SimpleDateFormat(this.sourceFormat);\n        Date d = new Date();\n        String resultDate = this.transformDate(sdf.format(d));\n        contentHandler.characters(resultDate.toCharArray(), 0, resultDate.length());\n      }\n    } else {\n      contentHandler.startElement(uri, localName, qName, attrs);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7632, "initialization": ["Date date = new SimpleDateFormat(String)"], "initializationStart": [131], "initializationEnd": [176], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 81, "tryExpressionEnd": 85, "tryBlockStart": 81, "tryBlockEnd": 491, "catchExpressionStart": 422, "catchExpressionEnd": 447, "catchBlockStart": 422, "catchBlockEnd": 491, "exceptionHandlingCallStart": [461], "exceptionHandlingCallEnd": [484], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 240, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moonjava/moonjava-flight/tree/master/src/main/java/br/com/moonjava/flight/util/FormatDateTime.java", "rawCode": "  public static String parseToStringDateTime(String value, String country) {\n    try {\n      String time = null;\n      Date date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").parse(value);\n      if (country.equals(\"US\")) {\n        time = new SimpleDateFormat(\"MM/dd/yyyy hh:mm:ss aa\").format(date);\n      } else {\n        time = new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\").format(date);\n      }\n      return time;\n    } catch (ParseException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7633, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [108], "initializationEnd": [136], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 73, "tryExpressionEnd": 77, "tryBlockStart": 73, "tryBlockEnd": 229, "catchExpressionStart": 175, "catchExpressionEnd": 195, "catchBlockStart": 175, "catchBlockEnd": 229, "exceptionHandlingCallStart": [203], "exceptionHandlingCallEnd": [222], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 151, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/util/DateUtil.java", "rawCode": "  public static String getStringFromDate(Date date, String format) {\n    try {\n      SimpleDateFormat sdf = new SimpleDateFormat(format);\n      return sdf.format(date);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7634, "initialization": ["Date date = new Date()", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(*)"], "initializationStart": [266, 304], "initializationEnd": [276, 342], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 458, "focalAPIEnd": 474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["convertStringToDate(date)"], "useStart": [536], "useEnd": [570], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nkhoang/ja12sec02jav/tree/master/struts-core/src/main/java/com/nkhoang/util/DateUtil.java", "rawCode": "  /**\n   * This method returns the current date in the format: MM/dd/yyyy\n   *\n   * @return the current date\n   * @throws ParseException when String doesn't match the expected format\n   */\n  public static Calendar getToday() throws ParseException {\n    Date today = new Date();\n    SimpleDateFormat df = new SimpleDateFormat(getDatePattern());\n\n    // This seems like quite a hack (date -> string -> date),\n    // but it works ;-)\n    String todayAsString = df.format(today);\n    Calendar cal = new GregorianCalendar();\n    cal.setTime(convertStringToDate(todayAsString));\n\n    return cal;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7635, "initialization": ["Date date = new Date(long)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [83, 138], "initializationEnd": [102, 166], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 179, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xplodwild/android_packages_apps_Focal/tree/master/src/org/cyanogenmod/focal/pano/PanoUtil.java", "rawCode": "  public static String createName(String format, long dateTaken) {\n    Date date = new Date(dateTaken);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(format);\n    return dateFormat.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7636, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = new Date()"], "initializationStart": [1241, 1307], "initializationEnd": [1284, 1317], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 48, "tryExpressionEnd": 52, "tryBlockStart": 48, "tryBlockEnd": 3457, "catchExpressionStart": 2700, "catchExpressionEnd": 2720, "catchBlockStart": 2700, "catchBlockEnd": 2762, "exceptionHandlingCallStart": [2732], "exceptionHandlingCallEnd": [2751], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1428, "focalAPIEnd": 1447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.parse(String)", "simpleDateFormat.format(Date)", "simpleDateFormat.parse(String)"], "useStart": [1418, 1485, 1475], "useEnd": [1448, 1504, 1505], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/firefoxmmx2/jdy/tree/master/src/com/aisino2/publicsystem/action/QyzlxxAction.java", "rawCode": "  public String insert() throws Exception {\n    try {\n      Qyzlxx setQyzlxx = new Qyzlxx();\n      Qyzlxxfj QyzlxxFj = new Qyzlxxfj();\n      Object[] child = {QyzlxxFj}; // / 绑定子属性\n\n      qyzlxx = (Qyzlxx) this.setClass(setQyzlxx, child);\n      // 取得附件\n      /* uploadpath=qyzlxx.getFjmc();\n      if(uploadpath!=null||!uploadpath.equals(\"\")){\n      fjupload(uploadpath);\n      }*/\n      ActionContext ctx = ActionContext.getContext();\n      HttpServletRequest request = (HttpServletRequest) ctx.get(ServletActionContext.HTTP_REQUEST);\n      HttpSession session = request.getSession();\n      List csjbxxList = (List) session.getAttribute(\"seesionCslist\");\n      session.removeAttribute(\"seesionCslist\");\n      user = (User) session.getAttribute(Constants.userKey);\n      String departName = user.getDepartment().getDepartname();\n      String depertCode0 = StringUtil.trimEven0(user.getDepartment().getDepartcode());\n      if (depertCode0.length() < 12) {\n        depertCode0 = depertCode0 + \"00000000000\";\n        depertCode0 = depertCode0.substring(0, 12);\n      }\n      String userName = user.getUsername();\n      // Qyzlxx setQyzlxx=new Qyzlxx();\n      java.util.Calendar c = java.util.Calendar.getInstance();\n      SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n      Date nowtime = new Date();\n      setQyzlxx.setFbr(userName);\n      setQyzlxx.setFbdwdm(depertCode0);\n      System.out.println(sdf.parse(sdf.format(nowtime)));\n      setQyzlxx.setFbsj(sdf.parse(sdf.format(nowtime)));\n      // setQyzlxx.setFbsj(sdf.parse(sdf.format(nowtime)));\n      setQyzlxx.setHylbdm(qyzlxx.getHylbdm());\n      setQyzlxx.setHylb(\"营业性娱乐场所\");\n      setQyzlxx.setFbdwmc(departName);\n      setQyzlxx.setScbz(0);\n\n      List qyzlxxfj = new ArrayList();\n      List fj_list = qyzlxx.getLXctbfjList();\n      String serviceFile =\n          ServletActionContext.getRequest()\n              .getSession()\n              .getServletContext()\n              .getRealPath(\"uploadTemp\"); // /读取文件的目录\n      for (int i = 0; i < fj_list.size(); i++) {\n\n        Qyzlxxfj zl_fj = new Qyzlxxfj();\n        qyzlxx_fj = (Qyzlxxfj) fj_list.get(i);\n        String fjmc = qyzlxx_fj.getFjmc(); // 文件名称\n\n        String[] fjlxarray = fjmc.split(\"\\\\.\");\n        String fjlx = fjlxarray[fjlxarray.length - 1]; // //得到附件类型\n\n        String fjbase = qyzlxx_fj.getFjbase(); // /得到附件的临时文件名\n        sun.misc.BASE64Decoder base64Decoder = new sun.misc.BASE64Decoder();\n        BufferedInputStream bis = null;\n        byte[] fjnr = null; // /附件内容\n\n        try {\n          bis = new BufferedInputStream(new FileInputStream(serviceFile + \"\\\\\" + fjbase));\n          fjnr = new byte[bis.available()];\n          bis.read(fjnr);\n        } catch (Exception e) {\n          e.printStackTrace();\n        } finally {\n          try {\n            if (bis != null) {\n              bis.close();\n            }\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n\n        ///////// 删除临时文件夹中的文件\n        File file = new File(serviceFile + \"\\\\\" + fjbase);\n        if (file.exists()) {\n          file.delete(); // 删除文件\n        }\n        //////////////////\n\n        zl_fj.setFjmc(fjmc);\n        zl_fj.setFjlx(fjlx);\n        zl_fj.setFjnr(fjnr);\n        qyzlxxfj.add(zl_fj);\n      }\n      setQyzlxx.setFj_obj(qyzlxxfj);\n      qyzlxx = qyzlxxService.insertQyzlxx(setQyzlxx);\n\n    } catch (Exception e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    // qyzlxx=qyzlxxService.insertQyzlxx(qyzlxx);\n    this.result = \"success\";\n    return \"success\";\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7637, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [385], "initializationEnd": [418], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null)", "guardType": "IF {", "guardExpressionStart": 302, "guardExpressionEnd": 319, "guardBlockStart": 302, "guardBlockEnd": 344, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 433, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jeromexu/ubank/tree/master/src/java/main/com/ufinity/marchant/ubank/common/DateUtil.java", "rawCode": "  /**\n   * format Date to String <br>\n   * Note: if Date is null or occur exception, then return empty string\n   *\n   * @param date Date obj\n   * @param datePattern date string pattern\n   * @return date string\n   * @author zdxue\n   */\n  public static String format(Date date, String datePattern) {\n    if (date == null) {\n      return \"\";\n    }\n\n    try {\n      SimpleDateFormat sdf = new SimpleDateFormat(datePattern);\n      return sdf.format(date);\n    } catch (Exception e) {\n      return \"\";\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7638, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 114, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mcarniel/oswing/tree/master/src/org/openswing/swing/pivottable/client/PivotTable.java", "rawCode": "  private Object formatValue(Object obj) {\n    if (obj != null) {\n      if (obj instanceof java.util.Date) return sdf.format((java.util.Date) obj);\n      else if (obj instanceof Number) {\n        Number num = (Number) obj;\n        if (num.longValue() == num.doubleValue()) return new Long((num.longValue()));\n        else return num;\n      } else return obj;\n    } else return obj;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7639, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "println(Object)", "Object.getClass()", "println(*)"], "tryExpressionStart": 511, "tryExpressionEnd": 515, "tryBlockStart": 511, "tryBlockEnd": 974, "catchExpressionStart": 807, "catchExpressionEnd": 828, "catchBlockStart": 807, "catchBlockEnd": 974, "exceptionHandlingCallStart": [838, 868, 922, 903], "exceptionHandlingCallEnd": [858, 893, 938, 939], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 681, "focalAPIEnd": 714, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JFormattedTextField.setText(date)"], "useStart": [982], "useEnd": [1001], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/RehaSql/src/rehaSql/DateTableCellEditor.java", "rawCode": "  public Component getTableCellEditorComponent(\n      JTable table, Object value, boolean isSelected, int row, int column) {\n    JFormattedTextField ftf =\n        (JFormattedTextField)\n            super.getTableCellEditorComponent(table, value, isSelected, row, column);\n\n    String insstr = \" . . \";\n    if (value == null) {\n      insstr = \" . . \";\n      ftf.setText(insstr);\n    } else if (((Object) value).toString().trim().equals(\"\")) {\n      insstr = \" . . \";\n      ftf.setText(insstr);\n    } else {\n      try {\n        if (value instanceof java.lang.String) {\n          insstr = String.valueOf(value);\n        } else if (value instanceof java.util.Date) {\n          insstr = datumsFormat.format((Date) value);\n        }\n\n        // insstr = DatFunk.sDatInDeutsch(((Object)value).toString() );\n      } catch (Exception ex) {\n        ex.printStackTrace();\n        System.out.println(value);\n        System.out.println(value.getClass());\n        insstr = \" . . \";\n      }\n\n      ftf.setText(insstr);\n    }\n    ftf.requestFocus();\n    ftf.setCaretColor(Color.BLACK);\n    ftf.requestFocus();\n    ftf.setSelectionStart(0);\n    ftf.setSelectionEnd(0);\n    ftf.selectAll();\n    // ftf.setSelectionEnd(insstr.length()-1);\n    ftf.setCaretPosition(0);\n    // System.out.println(\"Caret gesetzt auf ->\"+ftf.getCaretPosition());\n\n    return ftf;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7640, "initialization": ["Date date = getProperty(String,*)"], "initializationStart": [976], "initializationEnd": [1021], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1065, "focalAPIEnd": 1122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/germanescobar/mokai/tree/master/mokai-connectors/mokai-smpp-server/src/main/java/org/mokai/connector/smpp/SmppServerConnector.java", "rawCode": "  @Override\n  public void process(Message message) throws Exception {\n    DeliverSm deliverSm = new DeliverSm();\n\n    boolean isDLR =\n        message.getProperty(\"isDLR\", Boolean.class) == null\n            ? false\n            : message.getProperty(\"isDLR\", Boolean.class) == true;\n    if (isDLR) {\n      deliverSm.setEsmClass((byte) 0x04);\n      deliverSm.setSourceAddress(\n          new Address().withAddress(message.getProperty(\"from\", String.class)));\n      deliverSm.setDestAddress(new Address().withAddress(message.getProperty(\"to\", String.class)));\n\n      SimpleDateFormat sdf = new SimpleDateFormat(\"yyMMddhhmm\");\n\n      StringBuffer text = new StringBuffer();\n      text.append(\"id:\" + message.getProperty(\"messageId\", String.class) + \" \");\n      text.append(\"sub:\" + fixTo(message.getProperty(\"submitted\", Integer.class), 3) + \" \");\n      text.append(\"dlvrd:\" + fixTo(message.getProperty(\"delivered\", Integer.class), 3) + \" \");\n      String strSubmitDate =\n          message.getProperty(\"submitDate\", Date.class) == null\n              ? \"\"\n              : sdf.format(message.getProperty(\"submitDate\", Date.class));\n      text.append(\"submit date:\" + strSubmitDate + \" \");\n      String strDoneDate =\n          message.getProperty(\"doneDate\", Date.class) == null\n              ? \"\"\n              : sdf.format(message.getProperty(\"doneDate\", Date.class));\n      text.append(\"done date:\" + strDoneDate + \" \");\n      text.append(\"stat:\" + message.getProperty(\"finalStatus\", String.class) + \" \");\n      text.append(\"err:0 \");\n      text.append(\"text: \");\n\n      deliverSm.setShortMessage(CharsetUtil.encode(text.toString(), CharsetUtil.CHARSET_GSM));\n    } else {\n      deliverSm.setSourceAddress(\n          new Address().withAddress(message.getProperty(\"from\", String.class)));\n      deliverSm.setDestAddress(new Address().withAddress(message.getProperty(\"to\", String.class)));\n      deliverSm.setShortMessage(\n          CharsetUtil.encode(message.getProperty(\"text\", String.class), CharsetUtil.CHARSET_GSM));\n    }\n\n    Collection<SmppSession> sessions = smppServer.getSessions();\n    for (SmppSession session : sessions) {\n      session.sendRequest(deliverSm, 20000);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7641, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 292, "focalAPIEnd": 308, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ridem/fr.lemet/tree/master/TransportsMetzHelper/src/fr/ybo/transportsrenneshelper/util/GetAndContructZip.java", "rawCode": "  /**\n   * Récupère l'URL du fichier Keolis à partir d'une date donnée.\n   *\n   * @param date la date.\n   * @return l'url.\n   * @throws MalformedURLException ne doit pas arriver.\n   */\n  private URL getUrlKeolisFromDate(Date date) throws MalformedURLException {\n    return new URL(BASE_URL + SDF.format(date) + EXTENSION_URL);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7642, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [177], "initializationEnd": [220], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.setTimeZone(SimpleTimeZone)"], "configurationStart": [228], "configurationEnd": [257], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 273, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hoevenvd/java_for_weather/tree/master/src/org/tom/weather/astro/AstroFormat.java", "rawCode": "  public static String getGMTDateString(Date instant) {\n    try {\n      SimpleTimeZone tzGMT = (SimpleTimeZone) TimeZone.getTimeZone(\"GMT\");\n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy.MM.dd HH:mm zz\");\n      dateFormat.setTimeZone(tzGMT);\n      return (dateFormat.format(instant));\n    } catch (Exception e) {\n      return (\"\");\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7643, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 41, "guardExpressionEnd": 61, "guardBlockStart": 41, "guardBlockEnd": 148, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 77, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mattburns/OddPrints/tree/master/op-gae/src/com/oddprints/dao/Coupon.java", "rawCode": "  public String getExpiresString() {\n    if (expires != null) {\n      return ISO_DATE_FORMATTER.format(expires);\n    } else {\n      return \"\";\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7644, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [447], "initializationEnd": [482], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null)", "guardType": "IF {", "guardExpressionStart": 106, "guardExpressionEnd": 123, "guardBlockStart": 106, "guardBlockEnd": 147, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 495, "focalAPIEnd": 510, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rwilson/J2Free/tree/master/lib/src/java/org/j2free/jsp/el/DateTimeUtils.java", "rawCode": "  /**\n   * @param date\n   * @return\n   */\n  public static String formatDateMinPrecision(Date date) {\n\n    if (date == null) return Constants.EMPTY;\n\n    Calendar now = Calendar.getInstance();\n    Calendar spec = Calendar.getInstance();\n    spec.setTime(date);\n\n    long diff = now.get(Calendar.DAY_OF_YEAR) - spec.get(Calendar.DAY_OF_YEAR);\n    if (diff == 0) return \"Today\";\n    else if (diff == 1) return \"Yesterday\";\n\n    SimpleDateFormat df = new SimpleDateFormat(\"MMM d, yyyy\");\n    return df.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7645, "initialization": ["Date date = new Date(long)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [514, 566], "initializationEnd": [542, 594], "hasTryCatch": 1, "exceptionType": "IllegalArgumentException", "exceptionHandlingCall": ["Date.toString()"], "tryExpressionStart": 548, "tryExpressionEnd": 552, "tryBlockStart": 548, "tryBlockEnd": 723, "catchExpressionStart": 642, "catchExpressionEnd": 677, "catchBlockStart": 642, "catchBlockEnd": 723, "exceptionHandlingCallStart": [692], "exceptionHandlingCallEnd": [716], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 609, "focalAPIEnd": 634, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-2_19-FINAL/blojsom-2.0/src/org/blojsom/blog/Trackback.java", "rawCode": "  /**\n   * Return the trackback date formatted with a specified date format\n   *\n   * @param format Date format\n   * @return <code>null</code> if the format is null, otherwise returns the trackback date formatted\n   *     to the specified format. If the format is invalid, returns\n   *     <tt>trackbackDate.toString()</tt>\n   * @since blojsom 2.19\n   */\n  public String getDateAsFormat(String format) {\n    if (format == null) {\n      return null;\n    }\n\n    SimpleDateFormat sdf = null;\n    Date trackbackDate = new Date(_trackbackDateLong);\n    try {\n      sdf = new SimpleDateFormat(format);\n      return sdf.format(trackbackDate);\n    } catch (IllegalArgumentException e) {\n      return trackbackDate.toString();\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7646, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String,*)"], "initializationStart": [267], "initializationEnd": [314], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.setTimeZone(TimeZone)"], "configurationStart": [320], "configurationEnd": [342], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 372, "focalAPIEnd": 388, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Header(Object,date)"], "useStart": [355], "useEnd": [389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dekellum/iudex/tree/master/iudex-http/src/main/java/iudex/http/Headers.java", "rawCode": "  /**\n   * Create a header from name and Date value in HTTP-date (1.1) format RFC 1123 (update/subset of\n   * RFC 822),.\n   */\n  public static Header createDateHeader(Object name, Date value) {\n    // Create new each time for thread safety.\n    SimpleDateFormat df = new SimpleDateFormat(HTTP_DATE_FORM, Locale.US);\n    df.setTimeZone(TZ_GMT);\n    return new Header(name, df.format(value));\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7647, "initialization": ["Date date = new Date(long)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [1459, 1504], "initializationEnd": [1473, 1529], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1604, "focalAPIEnd": 1621, "followUpCheck": "date.equals(\"1\")", "checkType": "IF", "followUpCheckExpressionStart": 1665, "followUpCheckExpressionEnd": 1685, "followUpCheckBlockStart": 1665, "followUpCheckBlockEnd": 1761, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mytcg/GameCardsBB/tree/master/GameCardsDev/src/net/mytcg/dev/ui/custom/AuctionField.java", "rawCode": "  public void paint(Graphics g) {\n    // int _xPts[] = {0,0,getPreferredWidth(),getPreferredWidth()};\n    // int _yPts[] = {0,getPreferredHeight(),getPreferredHeight(),0};\n    // g.drawTexturedPath(_xPts,_yPts,null,null,0,0,Fixed32.ONE,0,0,Fixed32.ONE,Const.getBackground());\n\n    g.setColor(Const.FONTCOLOR);\n\n    g.drawBitmap(5, 5, image.getWidth(), getPreferredHeight(), image, 0, 0);\n\n    Font _font = getFont();\n    _font = _font.derive(Const.TYPE, Const.FONT + 2);\n    g.setFont(_font);\n\n    int height = 4;\n\n    g.drawText(auction.getDesc(), image.getWidth() + 10, height);\n\n    height += Const.FONT + 4;\n    if (!auction.getPrice().equals(\"0\")) {\n      g.drawText(\"Current bid: \" + auction.getPrice(), image.getWidth() + 10, height);\n    } else {\n      g.drawText(\"Opening bid: \" + auction.getOpeningBid(), image.getWidth() + 10, height);\n    }\n\n    height += Const.FONT + 4;\n    g.drawText(\"Buy Out: \" + auction.getBuyNowPrice(), image.getWidth() + 10, height);\n    if (!auction.getPrice().equals(\"0\")) {\n      height += Const.FONT + 4;\n      g.drawText(\"Bidder: \" + auction.getLastBidUser(), image.getWidth() + 10, height);\n    }\n    height += Const.FONT + 4;\n    g.drawText(\"Seller: \" + auction.getUsername(), image.getWidth() + 10, height);\n    height += Const.FONT + 4;\n\n    long end = new Date(HttpDateParser.parse(auction.getEndDate())).getTime();\n    long current = System.currentTimeMillis();\n\n    long diff = end - current;\n\n    Date test = new Date(diff);\n\n    SimpleDateFormat days = new SimpleDateFormat(\"d\");\n    SimpleDateFormat hours = new SimpleDateFormat(\"H\");\n    String day = days.format(test);\n    String hour = hours.format(test);\n    if (day.equals(\"1\")) {\n      day = day + \" Day \";\n    } else {\n      day = day + \" Days \";\n    }\n\n    if (hour.equals(\"1\")) {\n      hour = hour + \" Hour\";\n    } else {\n      hour = hour + \" Hours\";\n    }\n\n    g.drawText(\"\" + day + hour, image.getWidth() + 10, height);\n\n    _font = _font.derive(Font.PLAIN, Const.FONT);\n    g.setFont(_font);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7648, "initialization": ["Date date = new Date()"], "initializationStart": [787], "initializationEnd": [797], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 933, "focalAPIEnd": 944, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.format(Date)"], "useStart": [1021], "useEnd": [1032], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/editor/server/src/de/hpi/bpmn/serialization/erdf/BPMNeRDFSerialization.java", "rawCode": "  public StringBuilder getSerializationHeader() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"<div id=\\\"oryx-canvas123\\\" class=\\\"-oryx-canvas\\\">\");\n    sb.append(\"<span class=\\\"oryx-type\\\">http://b3mn.org/stencilset/bpmn1.1#BPMNDiagram</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-id\\\">\"\n            + (this.context.getDiagramId() == null ? \"\" : this.context.getDiagramId())\n            + \"</span>\");\n    sb.append(\"<span class=\\\"oryx-name\\\">\" + this.context.getDiagramName() + \"</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-version\\\"></span><span class=\\\"oryx-author\\\"></span><span class=\\\"oryx-language\\\">English</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-expressionlanguage\\\"></span><span class=\\\"oryx-querylanguage\\\"></span>\");\n\n    Date d = new Date();\n    SimpleDateFormat f = new SimpleDateFormat(\"dd/MM/yy\");\n\n    sb.append(\n        \"<span class=\\\"oryx-creationdate\\\">\"\n            + f.format(d)\n            + \"</span><span class=\\\"oryx-modificationdate\\\">\"\n            + f.format(d)\n            + \"</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-pools\\\"></span><span class=\\\"oryx-documentation\\\"></span><span class=\\\"oryx-mode\\\">writable</span>\");\n    sb.append(\"<span class=\\\"oryx-mode\\\">fullscreen</span>\");\n    sb.append(\"<a rel=\\\"oryx-stencilset\\\" href=\\\"/oryx/stencilsets/bpmn1.1/bpmn1.1.json\\\"/>\");\n\n    for (String i : this.context.getResourceIDs()) {\n      sb.append(\"<a rel=\\\"oryx-render\\\" href=\\\"#resource\" + i + \"\\\"/>\");\n    }\n    sb.append(\"</div>\");\n\n    return sb;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7649, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 269, "guardExpressionEnd": 293, "guardBlockStart": 269, "guardBlockEnd": 394, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 332, "focalAPIEnd": 366, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(date)"], "useStart": [302], "useEnd": [367], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lboynton/XMPP-Client/tree/master/lib/smack/source/org/jivesoftware/smackx/workgroup/packet/QueueOverview.java", "rawCode": "  public String toXML() {\n    StringBuilder buf = new StringBuilder();\n    buf.append(\"<\").append(ELEMENT_NAME).append(\" xmlns=\\\"\").append(NAMESPACE).append(\"\\\">\");\n\n    if (userCount != -1) {\n      buf.append(\"<count>\").append(userCount).append(\"</count>\");\n    }\n    if (oldestEntry != null) {\n      buf.append(\"<oldest>\").append(DATE_FORMATTER.format(oldestEntry)).append(\"</oldest>\");\n    }\n    if (averageWaitTime != -1) {\n      buf.append(\"<time>\").append(averageWaitTime).append(\"</time>\");\n    }\n    if (status != null) {\n      buf.append(\"<status>\").append(status).append(\"</status>\");\n    }\n    buf.append(\"</\").append(ELEMENT_NAME).append(\">\");\n\n    return buf.toString();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7650, "initialization": ["Date date = new Date()"], "initializationStart": [120], "initializationEnd": [130], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 153, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/obiba/magma/tree/master/magma-api/src/test/java/org/obiba/magma/type/DateTypeTest.java", "rawCode": "  private void assertValueOfUsingDateFormat(String dateFormat) {\n    DateType dt = DateType.get();\n    Date dateValue = new Date();\n    String dateStr = new SimpleDateFormat(dateFormat).format(dateValue);\n    Value value = dt.valueOf(dateStr);\n    assertThat(value.getValue()).isEqualTo(new MagmaDate(dateValue));\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7651, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = GregorianCalendar.getTime()"], "initializationStart": [250, 300], "initializationEnd": [282, 313], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 326, "focalAPIEnd": 342, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/INCF/eeg2/tree/master/src/main/java/cz/zcu/kiv/eegdatabase/logic/util/BookingRoomUtils.java", "rawCode": "  /**\n   * Gets time in hh:mm:ss format from GregorianCalendar.\n   *\n   * @param cal Input GregorianCalendar.\n   * @return Retrieved time.\n   * @see #timeFormat\n   */\n  public static String getTime(GregorianCalendar cal) {\n    SimpleDateFormat sdf = new SimpleDateFormat(timeFormat);\n    Date date = cal.getTime();\n    return sdf.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7652, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = SimpleDateFormat.parse(String)"], "initializationStart": [1257, 1326], "initializationEnd": [1286, 1344], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["getInstance(*)", "log(String,*,*)", "exit(int)"], "tryExpressionStart": 1307, "tryExpressionEnd": 1311, "tryBlockStart": 1307, "tryBlockEnd": 1509, "catchExpressionStart": 2547, "catchExpressionEnd": 2572, "catchBlockStart": 2547, "catchBlockEnd": 2702, "exceptionHandlingCallStart": [2580, 2580, 2680], "exceptionHandlingCallEnd": [2627, 2672, 2695], "configuration": ["simpleDateFormat.parse(String)"], "configurationStart": [1326], "configurationEnd": [1344], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1570, "focalAPIEnd": 1586, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new JLabel(date)", "simpleDateFormat.parse(String)", "simpleDateFormat.parse(String)"], "useStart": [1700, 2303, 2325], "useEnd": [1721, 2323, 2345], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gillesB/semantischeOperabilitaet2013/tree/master/SI-Hauptprojekt/src/de/htw/gui/TimeFrameChooser/TimeFrameChooser.java", "rawCode": "  private void initCalendarDisplay() {\n    calendarBaseLayer = new JPanel();\n    calendarBaseLayer.setLayout(new GridBagLayout());\n    calendarBaseLayer.setBackground(new Color(205, 205, 205));\n\n    GridBagConstraints constraints = new GridBagConstraints();\n    constraints.anchor = GridBagConstraints.CENTER;\n    constraints.insets = new Insets(1, 1, 1, 1);\n    constraints.fill = GridBagConstraints.NONE;\n\n    constraints.gridx = 3;\n    constraints.gridy = 1;\n    constraints.gridheight = 1;\n    constraints.gridwidth = 1;\n    constraints.weightx = 999;\n    constraints.weighty = 1;\n\n    // add labels for weekdays\n    for (int i = 0; i < 7; ++i) {\n      JButton temp = new JButton(String.valueOf(Day.getByID(i + 1)));\n      final int finalI = i;\n      temp.addActionListener(\n          new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n              toggleByDayID(finalI);\n            }\n          });\n      calendarBaseLayer.add(temp, constraints);\n      constraints.gridx += 2;\n    }\n\n    // add time frames\n    constraints.gridx = 1;\n    constraints.gridy = 3;\n    constraints.weighty = 999;\n    constraints.weightx = 1;\n    constraints.anchor = GridBagConstraints.NORTH;\n\n    SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\");\n    Date date;\n    try {\n      date = sdf.parse(\"07:00\");\n    } catch (Exception e) {\n      RootLogger.getInstance(LoggerNames.MAIN_LOGGER)\n          .log(\"Error creating Table Data\", Level.SEVERE, e);\n      return;\n    }\n    for (int i = 0; i < 16; ++i) {\n      String timeFrame = sdf.format(date);\n      date.setTime(date.getTime() + ONE_HOUR);\n      timeFrame += \" - \" + sdf.format(date);\n      JLabel temp = new JLabel(timeFrame);\n      timeLabels.add(temp);\n      calendarBaseLayer.add(temp, constraints);\n      constraints.gridy += 2;\n    }\n\n    // create calendar like look\n    constraints.gridx = 3;\n    constraints.gridy = 3;\n    constraints.weighty = 999;\n    constraints.anchor = GridBagConstraints.CENTER;\n    constraints.fill = GridBagConstraints.BOTH;\n    try {\n      for (int i = 0; i < 7; ++i) {\n        constraints.gridy = 3;\n        for (int j = 0; j < 16; ++j) {\n          String[] tArray = timeLabels.get(j).getText().split(\"-\");\n          TimeFramePanel temp =\n              new TimeFramePanel(sdf.parse(tArray[0]), sdf.parse(tArray[1]), Day.getByID(i + 1));\n          timeFramePanels.add(temp);\n          calendarBaseLayer.add(temp, constraints);\n          constraints.gridy += 2;\n        }\n        constraints.gridx += 2;\n      }\n    } catch (ParseException e) {\n      RootLogger.getInstance(LoggerNames.MAIN_LOGGER).log(\"Error Parsing Times!\", Level.SEVERE, e);\n      System.exit(-1);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7653, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 82, "focalAPIEnd": 103, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codehaus/izpack/tree/master/izpack-util/src/main/java/com/izforge/izpack/util/SelfModifier.java", "rawCode": "  private void log(Throwable t) {\n    if (checkLog() != null) {\n      log.println(isoPoint.format(date) + \" Phase \" + phase + \": \" + t.getMessage());\n      t.printStackTrace(log);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7654, "initialization": ["Date date = new Date(long)"], "initializationStart": [221], "initializationEnd": [244], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 250, "guardExpressionEnd": 265, "guardBlockStart": 250, "guardBlockEnd": 341, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 281, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scottcain/chado_test/tree/master/XMLTools/GameChadoConv/conv/gametochadx/DateConv.java", "rawCode": "  public static String GameTimestampToChadoDate(String the_Timestamp) {\n    long gametimestamp = 0;\n    try {\n      gametimestamp = Long.decode(the_Timestamp).longValue();\n    } catch (Exception ex) {\n    }\n    Date dt = new Date(gametimestamp);\n    if (dt != null) {\n      return ChadoFormat.format(dt);\n    } else {\n      return \"0\";\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7655, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["date.setTime(*)"], "configurationStart": [40], "configurationEnd": [80], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 105, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/branches/4.3/src/lib/com/izforge/izpack/uninstaller/SelfModifier.java", "rawCode": "  private void errlog(String msg) {\n    date.setTime(System.currentTimeMillis());\n    System.err.println(isoPoint.format(date) + \" Phase \" + phase + \": \" + msg);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7656, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 103, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Macarse/TDA/tree/master/presentation/src/main/java/com/tda/presentation/controller/WelcomeController.java", "rawCode": "    @Override\n    public String getAsText() {\n      if (getValue() == null) return null;\n\n      return simpleDateFormat.format((Date) getValue());\n    }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7657, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = new Date()"], "initializationStart": [98, 151], "initializationEnd": [132, 161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 186, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(date,String)"], "useStart": [750], "useEnd": [781], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Zmo/Nerompi/tree/master/Nerompi2/test/fi/helsinki/cs/nero/test/TestReportWriter.java", "rawCode": "  public void testODSContainsCorrectDate() throws IOException {\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd.MM.yyyy\");\n    Date today = new Date();\n    String expResult = dateFormat.format(today);\n\n    File f = new File(\"TestReportWriter.ods\");\n    Vector<Vector<Object>> dateData = new Vector();\n    Vector<Object> row = new Vector();\n    row.add(\"eka\");\n    row.add(today);\n    dateData.add(row);\n    dateData.add(row);\n\n    JTable table = new JTable(dateData, columns);\n    table.setAutoCreateRowSorter(true);\n\n    ReportWriter instance = new ReportWriter(table, \"ods\");\n    instance.print(f, \"ods\");\n\n    Sheet sheet = SpreadSheet.createFromFile(f).getSheet(0);\n    String result = sheet.getCellAt(1, 1).getValue().toString();\n    assertEquals(expResult, result);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7658, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "simpleDateFormat!=null", "guardType": "IF {", "guardExpressionStart": 77, "guardExpressionEnd": 151, "guardBlockStart": 77, "guardBlockEnd": 451, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 170, "focalAPIEnd": 198, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(date)", "simpleDateFormat.parse(String)"], "useStart": [162, 216], "useEnd": [199, 248], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RamesesDev/osiris2/tree/master/client/rameses-client-ui/src/com/rameses/rcp/control/XDateField.java", "rawCode": "  private final void showFormattedValue(boolean formatted) {\n    try {\n      if (formatted && outputFormatter != null && !ValueUtil.isEmpty(getText())) {\n        setText(outputFormatter.format(date));\n        date = outputFormatter.parse(getText());\n      } else {\n\n        if (ValueUtil.isEmpty(getText())) setText(\"\");\n        else {\n          setText(inputFormatter.format(date));\n          date = inputFormatter.parse(getText());\n        }\n      }\n    } catch (Exception ex) {\n    }\n\n    if (!formatted) selectAll();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7659, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "null!=date", "guardType": "IF {", "guardExpressionStart": 1086, "guardExpressionEnd": 1108, "guardBlockStart": 1086, "guardBlockEnd": 1462, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1292, "focalAPIEnd": 1320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addCommandArgument(date)"], "useStart": [1424], "useEnd": [1453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/and146/SPLAT-ARI/tree/master/ant/src/main/org/apache/tools/ant/taskdefs/cvslib/ChangeLogTask.java", "rawCode": "  /**\n   * Execute task\n   *\n   * @exception BuildException if something goes wrong executing the cvs command\n   */\n  public void execute() throws BuildException {\n    File savedDir = inputDir; // may be altered in validate\n\n    try {\n\n      validate();\n      final Properties userList = new Properties();\n\n      loadUserlist(userList);\n\n      for (int i = 0, size = cvsUsers.size(); i < size; i++) {\n        final CvsUser user = (CvsUser) cvsUsers.get(i);\n        user.validate();\n        userList.put(user.getUserID(), user.getDisplayname());\n      }\n\n      setCommand(\"log\");\n\n      if (getTag() != null) {\n        CvsVersion myCvsVersion = new CvsVersion();\n        myCvsVersion.setProject(getProject());\n        myCvsVersion.setTaskName(\"cvsversion\");\n        myCvsVersion.setCvsRoot(getCvsRoot());\n        myCvsVersion.setCvsRsh(getCvsRsh());\n        myCvsVersion.setPassfile(getPassFile());\n        myCvsVersion.setDest(inputDir);\n        myCvsVersion.execute();\n        if (myCvsVersion.supportsCvsLogWithSOption()) {\n          addCommandArgument(\"-S\");\n        }\n      }\n      if (null != startDate) {\n        final SimpleDateFormat outputDate = new SimpleDateFormat(\"yyyy-MM-dd\");\n\n        // We want something of the form: -d \">=YYYY-MM-dd\"\n        final String dateRange = \">=\" + outputDate.format(startDate);\n\n        // Supply '-d' as a separate argument - Bug# 14397\n        addCommandArgument(\"-d\");\n        addCommandArgument(dateRange);\n      }\n\n      // Check if list of files to check has been specified\n      if (!filesets.isEmpty()) {\n        final Enumeration e = filesets.elements();\n\n        while (e.hasMoreElements()) {\n          final FileSet fileSet = (FileSet) e.nextElement();\n          final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());\n          final String[] files = scanner.getIncludedFiles();\n\n          for (int i = 0; i < files.length; i++) {\n            addCommandArgument(files[i]);\n          }\n        }\n      }\n\n      final ChangeLogParser parser = new ChangeLogParser();\n      final RedirectingStreamHandler handler = new RedirectingStreamHandler(parser);\n\n      log(getCommand(), Project.MSG_VERBOSE);\n\n      setDest(inputDir);\n      setExecuteStreamHandler(handler);\n      try {\n        super.execute();\n      } finally {\n        final String errors = handler.getErrors();\n\n        if (null != errors) {\n          log(errors, Project.MSG_ERR);\n        }\n      }\n      final CVSEntry[] entrySet = parser.getEntrySetAsArray();\n      final CVSEntry[] filteredEntrySet = filterEntrySet(entrySet);\n\n      replaceAuthorIdWithName(userList, filteredEntrySet);\n\n      writeChangeLog(filteredEntrySet);\n\n    } finally {\n      inputDir = savedDir;\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7660, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = getDate()"], "initializationStart": [112, 156], "initializationEnd": [146, 184], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getStackTraceString(*)", "lanzarDialogoError(*,String,*)"], "tryExpressionStart": 242, "tryExpressionEnd": 246, "tryBlockStart": 242, "tryBlockEnd": 602, "catchExpressionStart": 382, "catchExpressionEnd": 402, "catchBlockStart": 382, "catchBlockEnd": 602, "exceptionHandlingCallStart": [540, 412], "exceptionHandlingCallEnd": [592, 593], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null||true", "guardType": "IF {", "guardExpressionStart": 152, "guardExpressionEnd": 233, "guardBlockStart": 152, "guardBlockEnd": 608, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 269, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.format(Date)", "poblarMovimientos(*,*,date,String)"], "useStart": [332, 1116], "useEnd": [372, 1241], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/OpenOmoikane/tree/master/branches/SmartPOS/main/src/omoikane/formularios/MovimientosAlmacen.java", "rawCode": "  public void resetTable() {\n    String fechaDesde = \"\";\n    String fechaHasta = \"\";\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n    if (this.txtFechaDesde.getDate() != null || this.txtFechaHasta.getDate() != null) {\n      try {\n        fechaDesde = sdf.format(this.txtFechaDesde.getDate());\n        fechaHasta = sdf.format(this.txtFechaHasta.getDate());\n      } catch (Exception e) {\n        omoikane.sistema.Dialogos.lanzarDialogoError(\n            null,\n            \"Error en el registro: Fecha inválida\",\n            omoikane.sistema.Herramientas.getStackTraceString(e));\n      }\n    }\n\n    String[] columnas = {\n      \"Fecha\", \"ID Movimiento\", \"Folio\", \"Almacen\", \"Descripción\", \"Tipo\", \"Monto\"\n    };\n    this.movimientos.setModel(\n        new DefaultTableModel() {\n          boolean[] canEdit = new boolean[] {false, false, false, false, false, false, false};\n\n          public boolean isCellEditable(int rowIndex, int columnIndex) {\n            return canEdit[columnIndex];\n          }\n        });\n\n    ((DefaultTableModel) this.movimientos.getModel()).setColumnIdentifiers(columnas);\n    omoikane.principal.Almacenes.poblarMovimientos(\n        this.movimientos, this.txtBusqueda.getText(), fechaDesde, fechaHasta);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7661, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null)", "guardType": "IF {", "guardExpressionStart": 76, "guardExpressionEnd": 93, "guardBlockStart": 76, "guardBlockEnd": 149, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 125, "focalAPIEnd": 148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenNTF/SocialSDK/tree/master/sdk/com.ibm.sbt.core/src/main/java/com/ibm/sbt/services/client/base/serializers/BaseEntitySerializer.java", "rawCode": "    public static String toString(DateFormat dateFormat, Date date) {\n      if (date == null) return null;\n      else return dateFormat.format(date);\n    }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7662, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 714, "focalAPIEnd": 758, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wi3sl/sese/tree/master/BlueHotel/src/blue/hotel/gui/ReservationTableColorRenderer.java", "rawCode": "  public Component getTableCellRendererComponent(\n      JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n    Component renderer =\n        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n\n    if (column == 0) {\n      renderer.setBackground(Color.GRAY);\n      renderer.setForeground(Color.WHITE);\n      return renderer;\n    } else if (column > 0) {\n      renderer.setBackground(Color.GREEN);\n    }\n\n    int day = (Integer) table.getModel().getValueAt(row, 0);\n    String roomName = table.getModel().getColumnName(column);\n\n    String tmpDate =\n        (String) (day < 10 ? \"0\" + day : String.valueOf(day))\n            + \".\"\n            + new SimpleDateFormat(\"MM.yyyy\").format(date);\n\n    for (Date d : rooms.get(roomName)) {\n      if (tmpDate.equals(new SimpleDateFormat(\"dd.MM.yyyy\").format(d))) {\n        renderer.setBackground(Color.RED);\n      }\n    }\n\n    return renderer;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7663, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [131], "initializationEnd": [165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 178, "focalAPIEnd": 217, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenLMIS/open-lmis/tree/master/modules/core/src/main/java/org/openlmis/core/domain/ProcessingPeriod.java", "rawCode": "  @SuppressWarnings(\"unused\")\n  public String getStringStartDate() throws ParseException {\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n    return simpleDateFormat.format(this.startDate);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7664, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [255], "initializationEnd": [291], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 209, "guardExpressionEnd": 223, "guardBlockStart": 209, "guardBlockEnd": 366, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 306, "focalAPIEnd": 319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ese-unibe-ch/ese2010-team4/tree/master/qa/app/models/helper/DateFormatter.java", "rawCode": "  /**\n   * Turns the Date object d into a String using the format given in the constant DATE_FORMAT_de.\n   *\n   * @param d the d\n   * @return the string\n   */\n  public static String dateToString(Date d) {\n    if (d != null) {\n      SimpleDateFormat fmt = new SimpleDateFormat(DATE_FORMAT_de);\n      return fmt.format(d);\n    } else {\n      return \"dd-mm-yyyy\";\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7665, "initialization": ["Date date = new Date(*)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String,*)"], "initializationStart": [71, 136], "initializationEnd": [107, 193], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 213, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["OnItemSelectedListener.onRssItemSelected(date)"], "useStart": [264], "useEnd": [296], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/leeivan/mobile-ecommerce-android-education/tree/master/02-fragment-dynamic/src/com/pinecone/technology/mcommerce/learning/android/chapter03/MyListFragment.java", "rawCode": "  public void updateDetail() {\n    // Create fake data\n    Date date = new Date(System.currentTimeMillis());\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.CHINA);\n    String time = sdf.format(date);\n    // Send data to Activity\n    listener.onRssItemSelected(time);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7666, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [413], "initializationEnd": [456], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ExceptionConverter(*)"], "tryExpressionStart": 284, "tryExpressionEnd": 288, "tryBlockStart": 284, "tryBlockEnd": 1424, "catchExpressionStart": 1354, "catchExpressionEnd": 1374, "catchBlockStart": 1354, "catchBlockEnd": 1424, "exceptionHandlingCallStart": [1390], "exceptionHandlingCallEnd": [1415], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 506, "focalAPIEnd": 525, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Phrase(date,Font)"], "useStart": [495], "useEnd": [538], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/r351574nc3/kfs-maven/tree/master/kfs-parent/core/src/main/java/org/kuali/kfs/gl/report/TransactionReport.java", "rawCode": "    /**\n     * Generates the end page for this transaction report\n     *\n     * @see com.lowagie.text.pdf.PdfPageEventHelper#onEndPage(com.lowagie.text.pdf.PdfWriter,\n     *     com.lowagie.text.Document)\n     */\n    public void onEndPage(PdfWriter writer, Document document) {\n      try {\n        Rectangle page = document.getPageSize();\n        PdfPTable head = new PdfPTable(3);\n        SimpleDateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");\n        PdfPCell cell = new PdfPCell(new Phrase(sdf.format(runDate), headerFont));\n        cell.setBorder(Rectangle.NO_BORDER);\n        head.addCell(cell);\n\n        cell = new PdfPCell(new Phrase(title, headerFont));\n        cell.setBorder(Rectangle.NO_BORDER);\n        cell.setHorizontalAlignment(PdfPCell.ALIGN_CENTER);\n        head.addCell(cell);\n\n        cell = new PdfPCell(new Phrase(\"Page: \" + new Integer(writer.getPageNumber()), headerFont));\n        cell.setBorder(Rectangle.NO_BORDER);\n        cell.setHorizontalAlignment(PdfPCell.ALIGN_RIGHT);\n        head.addCell(cell);\n\n        head.setTotalWidth(page.width() - document.leftMargin() - document.rightMargin());\n        head.writeSelectedRows(\n            0,\n            -1,\n            document.leftMargin(),\n            page.height() - document.topMargin() + head.getTotalHeight(),\n            writer.getDirectContent());\n      } catch (Exception e) {\n        throw new ExceptionConverter(e);\n      }\n    }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7667, "initialization": ["Date date = new Date()"], "initializationStart": [1636], "initializationEnd": [1646], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1778, "focalAPIEnd": 1792, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["date.toString()"], "useStart": [1778], "useEnd": [1803], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/timherman76/leggo/tree/master/src/com/leggo/MainActivity.java", "rawCode": "  public boolean onOptionsItemSelected(MenuItem item) {\n    Intent i = null;\n    switch (item.getItemId()) {\n      case R.id.action_settings:\n        i = new Intent(this, SettingsActivity.class);\n        startActivity(i);\n        break;\n      case R.id.action_manage:\n        i = new Intent(this, ManageActivity.class);\n        startActivity(i);\n        break;\n      case R.id.action_search:\n        ActionBar actionBar = getActionBar();\n        // actionBar.hide();\n        actionBar.setCustomView(R.layout.searchbar);\n        EditText search =\n            (EditText) actionBar.getCustomView().findViewById(R.id.action_searchfield);\n        search.setOnEditorActionListener(\n            new OnEditorActionListener() {\n\n              @Override\n              public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n                articles = Article.search(v.getText().toString(), articles);\n                listArticles();\n                ActionBar actionBar = getActionBar();\n                actionBar.setDisplayOptions(\n                    ActionBar.DISPLAY_SHOW_HOME | ActionBar.DISPLAY_SHOW_HOME);\n                return false;\n              }\n            });\n        actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME);\n        // actionBar.show();\n\n        break;\n      case R.id.action_refresh:\n        if (Utils.networkAvailability(this)) {\n          GetArticlesCommand refresh = new GetArticlesCommand();\n          GetArticles get = new GetArticles(this);\n          SimpleDateFormat df = new SimpleDateFormat(\"HH:mm\");\n          get.execute(refresh);\n          Date now = new Date();\n          TextView refreshBar = (TextView) findViewById(R.id.main_refresh_bar);\n          refreshBar.setText(\"Last Refreshed: \" + df.format(now).toString());\n        }\n        break;\n    }\n    return true;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7668, "initialization": ["Date date = new Date()"], "initializationStart": [68], "initializationEnd": [78], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 99, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dexafree/Incidencias/tree/master/src/com/dexafree/incidencias/MainActivity.java", "rawCode": "  public boolean comparaFecha(String fechahora) {\n\n    Date cDate = new Date();\n    String fDate = new SimpleDateFormat(\"yyyy-MM-dd\").format(cDate);\n\n    // CREAMOS EL STRING YEAR, MONTH... PARA SACAR SOLO LOS PRIMEROS DIGITOS PARA INICIAR LA\n    // COMPARACION\n    String year = new SimpleDateFormat(\"yyyy\").format(cDate);\n    String month = new SimpleDateFormat(\"MM\").format(cDate);\n    String day = new SimpleDateFormat(\"dd\").format(cDate);\n\n    String yearpas = fechahora.substring(0, 4);\n    String monthpas = fechahora.substring(5, 7);\n    String daypas = fechahora.substring(8, 10);\n\n    int dayInt = Integer.parseInt(day);\n    int daypasInt = Integer.parseInt(daypas);\n\n    if (year.equals(yearpas)) {\n\n      if (month.equals(monthpas)) {\n        if (dayInt == daypasInt) {\n          return true;\n        } else if (dayInt == (daypasInt - 1)) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7669, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(*)"], "initializationStart": [80], "initializationEnd": [153], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 180, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(date)"], "useStart": [159], "useEnd": [211], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbendig/mucommander/tree/master/src/main/com/mucommander/ui/dialog/pref/general/GeneralPanel.java", "rawCode": "  private void updatePreviewLabel() {\n    SimpleDateFormat dateFormat =\n        new SimpleDateFormat(getDateFormatString() + \" \" + getTimeFormatString());\n    previewLabel.setText(dateFormat.format(exampleDate));\n    previewLabel.repaint();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7670, "initialization": ["Date date = DateTimeField.getDateTime()"], "initializationStart": [154], "initializationEnd": [191], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null)", "guardType": "IF {", "guardExpressionStart": 197, "guardExpressionEnd": 214, "guardBlockStart": 197, "guardBlockEnd": 227, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 271, "focalAPIEnd": 294, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbundle/jbundle/tree/master/base/base/src/main/java/org/jbundle/base/db/xmlutil/XmlUtilities.java", "rawCode": "  /**\n   * Encode date time field.\n   *\n   * @param field\n   * @return\n   */\n  public static String encodeDateTime(DateTimeField field) {\n    Date date = ((DateTimeField) field).getDateTime();\n    if (date == null) return null;\n    if (field instanceof TimeField) return timeFormat.format(date);\n    else if (field instanceof DateField) return dateFormat.format(date);\n    else // if (field instanceof DateTimeField)\n    return dateTimeFormat.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7671, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null)", "guardType": "IF {", "guardExpressionStart": 45, "guardExpressionEnd": 62, "guardBlockStart": 45, "guardBlockEnd": 87, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 99, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thelabtech/staffsite-java/tree/master/services-src/source/org/alt60m/crs/model/Person.java", "rawCode": "  private String formatDate(Date date) {\n    if (date == null) {\n      return \"\";\n    }\n    return simpleDateFormat.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7672, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [1760], "initializationEnd": [1792], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["Writer.write(String)"], "tryExpressionStart": 1712, "tryExpressionEnd": 1716, "tryBlockStart": 1712, "tryBlockEnd": 2022, "catchExpressionStart": 1947, "catchExpressionEnd": 1967, "catchBlockStart": 1947, "catchBlockEnd": 2022, "exceptionHandlingCallStart": [1989], "exceptionHandlingCallEnd": [2001], "configuration": ["simpleDateFormat.setTimeZone(TimeZone)"], "configurationStart": [1814], "configurationEnd": [1867], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1898, "focalAPIEnd": 1924, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(date)"], "useStart": [1889], "useEnd": [1925], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akvo/akvo-flow/tree/master/GAE/src/org/waterforpeople/mapping/dataexport/RawDataExporter.java", "rawCode": "  private void exportInstances(Writer pw, List<String> idList) throws Exception {\n    Map<String, String> instances =\n        BulkDataServiceClient.fetchInstanceIds(\n            surveyId, serverBase, apiKey, false, null, null, null);\n    if (instances != null) {\n      String imagePrefix = imgPrefix != null ? imgPrefix : IMAGE_PREFIX;\n\n      if (imagePrefix != null && !imagePrefix.endsWith(\"/\")) {\n        imagePrefix = imagePrefix + \"/\";\n      }\n\n      int i = 0;\n      for (Entry<String, String> instanceEntry : instances.entrySet()) {\n        String instanceId = instanceEntry.getKey();\n        String dateString = instanceEntry.getValue();\n        if (instanceId != null && instanceId.trim().length() > 0) {\n          try {\n            Map<String, String> responses = new HashMap<>();\n            /*\n             * BulkDataServiceClient.fetchQuestionResponses(instanceId, serverBase,\n             * apiKey);\n             */\n\n            if (responses != null && responses.size() > 0) {\n              pw.write(instanceId);\n              pw.write(\"\\t\");\n              pw.write(dateString);\n              pw.write(\"\\t\");\n              SurveyInstanceDto dto =\n                  BulkDataServiceClient.findSurveyInstance(\n                      Long.parseLong(instanceId.trim()), serverBase, apiKey);\n              if (dto != null) {\n                String name = dto.getSubmitterName();\n                if (name != null) {\n                  pw.write(\n                      dto.getSubmitterName().replaceAll(\"\\n\", \" \").replaceAll(\"\\t\", \" \").trim());\n                }\n                pw.write(\"\\t\");\n                Long duration = dto.getSurveyalTime();\n                if (duration != null) {\n                  try {\n                    SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n                    df.setTimeZone(java.util.TimeZone.getTimeZone(\"GMT\"));\n                    pw.write(df.format(duration * 1000));\n                  } catch (Exception e) {\n                    pw.write(\"\");\n                  }\n                }\n              }\n              for (String key : idList) {\n                String val = responses.get(key);\n                pw.write(\"\\t\");\n                if (val != null) {\n                  QuestionDto qdto = questionMap != null ? questionMap.get(key) : null;\n                  if (qdto != null && QuestionType.GEO == qdto.getType()) {\n                    String[] geoParts = val.split(\"\\\\|\");\n                    int count = 0;\n                    for (count = 0; count < Math.min(geoParts.length, 3); count++) {\n                      if (count > 0) {\n                        pw.write(\"\\t\");\n                      }\n                      pw.write(geoParts[count]);\n                    }\n                    // now handle any missing fields\n                    for (int j = count; j < 3; j++) {\n                      pw.write(\"\\t\");\n                    }\n                  } else {\n                    if (qdto != null\n                        && (QuestionType.PHOTO == qdto.getType()\n                            || QuestionType.VIDEO == qdto.getType())) {\n                      final int filenameIndex = val.lastIndexOf(\"/\") + 1;\n                      if (filenameIndex > 0 && filenameIndex < val.length()) {\n                        val = imagePrefix + val.substring(filenameIndex);\n                      }\n                    }\n                    pw.write(val.replaceAll(\"\\n\", \" \").trim());\n                  }\n                }\n              }\n\n              pw.write(\"\\n\");\n              pw.flush();\n              i++;\n              log.debug(\"Row: \" + i);\n              responses = null;\n            }\n          } catch (Exception ex) {\n            log.error(\"Swallow the exception for now and continue\", ex);\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7673, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 358, "focalAPIEnd": 417, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/indiff/dolphin/tree/master/texcel/set/src/com/tan/bean/Schedule.java", "rawCode": "  @Override\n  public String toString() {\n    // return \"Schedule [実際の着手日=\" + actualStartDate + \", 仕様理解進捗率=\" + understandRate + \",\n    // 単体テスト設計進捗率=\"\n    // + utdRate + \", 単体テスト設計レビュー進捗率=\" + utdReviewRate + \", 製造（コーディング）進捗率=\" + codingRate + \",\n    // CDI進捗率=\" + cdiRate\n    // + \", 単体テスト進捗率=\" + utRate + \"]\";\n\n    return \"Schedule\\r\\n{\\r\\n実際の着手日=\"\n        + new SimpleDateFormat(\"yyyy年MM月dd日\").format(actualStartDate)\n        + \",\\r\\n仕様理解進捗率=\"\n        + understandRate\n        + \",\\r\\n単体テスト設計進捗率=\"\n        + utdRate\n        + \",\\r\\n単体テスト設計レビュー進捗率=\"\n        + utdReviewRate\n        + \",\\r\\n製造（コーディング）進捗率=\"\n        + codingRate\n        + \",\\r\\nCDI進捗率=\"\n        + cdiRate\n        + \",\\r\\n単体テスト進捗率=\"\n        + utRate\n        + \"\\r\\n}\";\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7674, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 170, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/commons/tree/master/ode_trunk/scheduler-simple/src/main/java/org/apache/ode/scheduler/simple/Job.java", "rawCode": "  @Override\n  public String toString() {\n    SimpleDateFormat f = (SimpleDateFormat) DATE_FORMAT.clone();\n    return \"Job \"\n        + jobId\n        + \" time: \"\n        + f.format(schedDate)\n        + \" transacted: \"\n        + transacted\n        + \" persisted: \"\n        + persisted\n        + \" details: \"\n        + detail;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7675, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat()", "Date date = new Date()"], "initializationStart": [459, 498], "initializationEnd": [481, 508], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.applyPattern(String)"], "configurationStart": [547], "configurationEnd": [575], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 595, "focalAPIEnd": 610, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.applyPattern(String)", "simpleDateFormat.format(Date)", "simpleDateFormat.applyPattern(String)", "simpleDateFormat.format(Date)", "simpleDateFormat.applyPattern(String)", "simpleDateFormat.format(Date)"], "useStart": [740, 804, 907, 958, 1063, 1115], "useEnd": [782, 819, 935, 973, 1092, 1130], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panbasten/BA/tree/master/kettle/kettle-base/src/main/java/org/pentaho/di/job/entries/movefiles/JobEntryMoveFiles.java", "rawCode": "  private String getMoveDestinationFilename(String shortsourcefilename, String DateFormat)\n      throws Exception {\n    String shortfilename = shortsourcefilename;\n    int lenstring = shortsourcefilename.length();\n    int lastindexOfDot = shortfilename.lastIndexOf('.');\n    if (lastindexOfDot == -1) lastindexOfDot = lenstring;\n\n    if (isAddMovedDateBeforeExtension()) shortfilename = shortfilename.substring(0, lastindexOfDot);\n\n    SimpleDateFormat daf = new SimpleDateFormat();\n    Date now = new Date();\n\n    if (DateFormat != null) {\n      daf.applyPattern(DateFormat);\n      String dt = daf.format(now);\n      shortfilename += dt;\n    } else {\n\n      if (isSpecifyMoveFormat() && !Const.isEmpty(getMovedDateTimeFormat())) {\n        daf.applyPattern(getMovedDateTimeFormat());\n        String dt = daf.format(now);\n        shortfilename += dt;\n      } else {\n        if (isAddMovedDate()) {\n          daf.applyPattern(\"yyyyMMdd\");\n          String d = daf.format(now);\n          shortfilename += \"_\" + d;\n        }\n        if (isAddMovedTime()) {\n          daf.applyPattern(\"HHmmssSSS\");\n          String t = daf.format(now);\n          shortfilename += \"_\" + t;\n        }\n      }\n    }\n    if (isAddMovedDateBeforeExtension())\n      shortfilename += shortsourcefilename.substring(lastindexOfDot, lenstring);\n\n    return shortfilename;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7676, "initialization": ["Date date = new Date(*)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(*)"], "initializationStart": [151, 438], "initializationEnd": [202, 492], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new GlobalizationError(*)"], "tryExpressionStart": 127, "tryExpressionEnd": 131, "tryBlockStart": 127, "tryBlockEnd": 682, "catchExpressionStart": 581, "catchExpressionEnd": 602, "catchBlockStart": 581, "catchBlockEnd": 682, "exceptionHandlingCallStart": [616], "exceptionHandlingCallEnd": [675], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 556, "focalAPIEnd": 572, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,date)"], "useStart": [539], "useEnd": [573], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thedracle/cordova-android-chromeview/tree/master/framework/src/org/apache/cordova/Globalization.java", "rawCode": "  private JSONObject getDateToString(JSONArray options) throws GlobalizationError {\n    JSONObject obj = new JSONObject();\n    try {\n      Date date = new Date((Long) options.getJSONObject(0).get(DATE));\n\n      // get formatting pattern from android device (Will only have device specific formatting for\n      // short form of date) or options supplied\n      JSONObject datePattern = getDatePattern(options);\n      SimpleDateFormat fmt = new SimpleDateFormat(datePattern.getString(\"pattern\"));\n\n      // return formatted date\n      return obj.put(\"value\", fmt.format(date));\n    } catch (Exception ge) {\n      throw new GlobalizationError(GlobalizationError.FORMATTING_ERROR);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7677, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [92], "initializationEnd": [121], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 134, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cnyangyifeng/otp/tree/master/src/main/java/cn/xdf/me/otp/common/utils/TimeUtils.java", "rawCode": "  public static String covertDateStr(Date date, String pattern) {\n    SimpleDateFormat df = new SimpleDateFormat(pattern);\n    return df.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7678, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date.compareTo(midnight,)<0) && date.compareTo(endOfThisWeek,)<0 && date.compareTo(now,)>0 && !(date.compareTo(midnightTomorrow,)<0)", "guardType": "IF {", "guardExpressionStart": 1210, "guardExpressionEnd": 1236, "guardBlockStart": 1210, "guardBlockEnd": 2153, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 2025, "focalAPIEnd": 2052, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UWCS/choob/tree/master/src/main/java/uk/co/uwcs/choob/modules/DateModule.java", "rawCode": "  /** Prettyprint a date */\n  public static final String absoluteDateFormat(final Date da) {\n    // Some definitions.\n    final SimpleDateFormat dayNameFormatter = new SimpleDateFormat(\"EEEE\");\n    final Calendar cda = new GregorianCalendar();\n    cda.setTime(da);\n\n    final Calendar cnow = new GregorianCalendar();\n    final Date now = cnow.getTime();\n    final Date midnight =\n        new GregorianCalendar(\n                cnow.get(Calendar.YEAR),\n                cnow.get(Calendar.MONTH),\n                cnow.get(Calendar.DAY_OF_MONTH),\n                24,\n                0,\n                0)\n            .getTime();\n    final Date midnightTomorrow =\n        new GregorianCalendar(\n                cnow.get(Calendar.YEAR),\n                cnow.get(Calendar.MONTH),\n                cnow.get(Calendar.DAY_OF_MONTH),\n                48,\n                0,\n                0)\n            .getTime();\n    final Date endOfThisWeek =\n        new GregorianCalendar(\n                cnow.get(Calendar.YEAR),\n                cnow.get(Calendar.MONTH),\n                cnow.get(Calendar.DAY_OF_MONTH) + 7,\n                0,\n                0,\n                0)\n            .getTime();\n    // </definitions>\n\n    if (da.compareTo(now) > 0) // It's in the future, we can cope with it.\n    {\n      if (da.compareTo(midnight) < 0) // It's before midnight tonight.\n      return shortTime(cda)\n            + \" \"\n            + // 9pm\n            (cda.get(Calendar.HOUR_OF_DAY) < 18 ? \"today\" : \"tonight\");\n\n      if (da.compareTo(midnightTomorrow)\n          < 0) // It's before midnight tomorrow and not before midnight today, it's tomorrow.\n      return shortTime(cda)\n            + // 9pm\n            \" tomorrow \"\n            + // tomorrow\n            futurePeriodOfDayString(cda); // evening\n\n      if (da.compareTo(endOfThisWeek)\n          < 0) // It's not tomorrow, but it is some time when the week-day names alone mean\n               // something.\n      return shortTime(cda)\n            + \" \"\n            + // 9pm\n            dayNameFormatter.format(da)\n            + \" \"\n            + // Monday\n            futurePeriodOfDayString(cda); // evening\n    }\n\n    return da.toString();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7679, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String,*)"], "initializationStart": [249], "initializationEnd": [290], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 311, "focalAPIEnd": 327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dayana7789/apprhc/tree/master/src/com/nahmens/rhcimax/utils/FormatoFecha.java", "rawCode": "  /**\n   * Funcion que da formato gringo a una fecha.\n   *\n   * @param date\n   * @return fecha con formato gringo\n   */\n  public static String darFormatoDateTimeUS(Date date) {\n    String myFormat = \"yyyy-MM-dd HH:mm:ss\";\n    SimpleDateFormat sdf = new SimpleDateFormat(myFormat, Locale.US);\n    String fecha = sdf.format(date);\n\n    return fecha;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7680, "initialization": ["Date date = new Date(*)", "Date date = new Date(*)", "Date date = new Date(*)", "Date date = new Date(*)", "Date date = new Date(*)", "Date date = new Date(*)", "Date date = new Date(*)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [595, 940, 1323, 1683, 2074, 2448, 2863, 2974], "initializationEnd": [619, 964, 1347, 1707, 2098, 2472, 2887, 3014], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["date.getMonth()", "date.getMonth()", "date.getDate()", "date.getDate()"], "configurationStart": [1425, 1732, 2176, 2497], "configurationEnd": [1437, 1744, 2187, 2508], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 3030, "focalAPIEnd": 3043, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Vector<Comparable>.add(date)", "List<String>.add(date)", "simpleDateFormat.format(Date)", "Vector<Comparable>.add(date)", "List<String>.add(date)"], "useStart": [3152, 3175, 3470, 4214, 4237], "useEnd": [3163, 3183, 3483, 4225, 4245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vahokif/jmt/tree/master/src/jmt/gui/jwat/trafficAnalysis/panels/GraphArrivalPanel.java", "rawCode": "  /** Is the method invoked to set the values in the table */\n  public void setTable(int j) {\n    rows = new Vector<Vector<Comparable>>();\n    DecimalFormat df = new DecimalFormat(\"0.00000000\");\n    int f = 0;\n    Vector<Comparable> line;\n    Date d = null;\n    double[] temp;\n    List<String> l = new Vector<String>();\n\n    String s;\n\n    switch (j) {\n      case (0):\n        res = new double[ArrYear.size()];\n        // ew.getTAP().redraw(ArrYear,0);\n        for (int i = 0; i < ArrYear.size(); i++) {\n\n          line = new Vector<Comparable>();\n          temp = ArrYear.get(i);\n          d = new Date((long) temp[0]);\n          line.add(new Integer(f));\n          f++;\n          s = new String(\"\" + d.getYear());\n          line.add(s);\n          l.add(s);\n          line.add(new Double(df.format(temp[1] / 31104000)));\n          res[i] = temp[1] / 31104000;\n          rows.add(line);\n        }\n        temp = ArrYear.get(0);\n        d = new Date((long) temp[0]);\n        s = new String(\"\" + d.getYear());\n        graph.setXLabel(currentIndex + \" from \" + s);\n        break;\n      case (1):\n        res = new double[ArrMonth.size()];\n        // ew.getTAP().redraw(ArrMonth,1);\n        for (int i = 0; i < ArrMonth.size(); i++) {\n\n          line = new Vector<Comparable>();\n          temp = ArrMonth.get(i);\n          d = new Date((long) temp[0]);\n          line.add(new Integer(f));\n          f++;\n          s = new String(d.getMonth() + \"/\" + d.getYear());\n          line.add(s);\n          l.add(s);\n          line.add(new Double(df.format(temp[1] / 2592000)));\n          res[i] = temp[1] / 2592000;\n          rows.add(line);\n        }\n        temp = ArrMonth.get(0);\n        d = new Date((long) temp[0]);\n        s = new String(d.getMonth() + \"/\" + d.getYear());\n        graph.setXLabel(currentIndex + \" from \" + s);\n        break;\n      case (2):\n        res = new double[ArrDay.size()];\n        // ew.getTAP().redraw(ArrDay,2);\n        for (int i = 0; i < ArrDay.size(); i++) {\n\n          line = new Vector<Comparable>();\n          temp = ArrDay.get(i);\n          d = new Date((long) temp[0]);\n          line.add(new Integer(f));\n          f++;\n          s = new String(d.getDate() + \"/\" + d.getMonth() + \"/\" + d.getYear());\n          line.add(s);\n          l.add(s);\n          line.add(new Double(df.format(temp[1] / 86400)));\n          res[i] = temp[1] / 86400;\n          rows.add(line);\n        }\n        temp = ArrDay.get(0);\n        d = new Date((long) temp[0]);\n        s = new String(d.getDate() + \"/\" + d.getMonth() + \"/\" + d.getYear());\n        graph.setXLabel(currentIndex + \" from \" + s);\n        break;\n      case (3):\n        res = new double[ArrHour.size()];\n        // ew.getTAP().redraw(ArrHour,3);\n        for (int i = 0; i < ArrHour.size(); i++) {\n\n          line = new Vector<Comparable>();\n          temp = ArrHour.get(i);\n          d = new Date((long) temp[0]);\n          line.add(new Integer(f));\n          f++;\n\n          SimpleDateFormat dfo = new SimpleDateFormat(\"dd/MM/yyyy HH.00\");\n          s = dfo.format(d);\n          // s=new String(d.getDate()+\"/\"+d.getMonth()+\"/\"+d.getYear()+\" \"+d.getHours()+\".00\");\n\n          line.add(s);\n          l.add(s);\n          line.add(new Double(df.format(temp[1] / 3600)));\n          res[i] = temp[1] / 3600;\n          rows.add(line);\n        }\n        temp = ArrHour.get(0);\n        d = new Date((long) temp[0]);\n\n        SimpleDateFormat dfo = new SimpleDateFormat(\"dd/MM/yyyy HH.00\");\n        s = dfo.format(d);\n        // s=new String(d.getDate()+\"/\"+d.getMonth()+\"/\"+d.getYear()+\" \"+d.getHours()+\".00\");\n\n        graph.setXLabel(currentIndex + \" from \" + s);\n        break;\n      case (4):\n        res = new double[ArrMinute.size()];\n        // ew.getTAP().redraw(ArrMinute,4);\n        for (int i = 0; i < ArrMinute.size(); i++) {\n\n          line = new Vector<Comparable>();\n          temp = ArrMinute.get(i);\n          d = new Date((long) temp[0]);\n          line.add(new Integer(f));\n          f++;\n          SimpleDateFormat dfoM = new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");\n          // s=new String(d.getDate()+\"/\"+d.getMonth()+\"/\"+d.getYear()+\"\n          // \"+d.getHours()+\".\"+d.getMinutes());\n          s = dfoM.format(d);\n          line.add(s);\n          l.add(s);\n          line.add(new Double(df.format(temp[1] / 60)));\n          res[i] = temp[1] / 60;\n          rows.add(line);\n        }\n        temp = ArrMinute.get(0);\n        d = new Date((long) temp[0]);\n\n        SimpleDateFormat dfoM = new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");\n        s = dfoM.format(d);\n\n        s =\n            new String(\n                d.getDate()\n                    + \"/\"\n                    + d.getMonth()\n                    + \"/\"\n                    + d.getYear()\n                    + \" \"\n                    + d.getHours()\n                    + \".\"\n                    + d.getMinutes());\n        graph.setXLabel(currentIndex + \" from \" + s);\n        break;\n    }\n\n    Xmin.setModel(new SpinnerListModel(l));\n    Xmax.setModel(new SpinnerListModel(l));\n    Xmax.setValue(l.get(l.size() - 1));\n    left.remove(tableScrollPane);\n\n    table = new JTable(rows, columnHeads);\n    table.setEnabled(false);\n    table.getColumnModel().getColumn(0).setMaxWidth(30);\n    table.getColumnModel().getColumn(1).setPreferredWidth(65);\n    table.getColumnModel().getColumn(2).setPreferredWidth(65);\n    table.setRowHeight(18);\n    tableScrollPane = new JScrollPane(table);\n    tableScrollPane.setPreferredSize(new Dimension(160, tableScrollPane.getPreferredSize().height));\n    left.add(tableScrollPane, BorderLayout.CENTER);\n\n    mainPanel.updateUI();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7681, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["date.setTime(*)"], "configurationStart": [108], "configurationEnd": [140], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(date)"], "useStart": [147], "useEnd": [180], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jeyboy/MUSIC/tree/master/lib/audiotagger/org/jaudiotagger/logging/LogFormatter.java", "rawCode": "  public final String format(final LogRecord record) {\n    final StringBuffer sb = new StringBuffer();\n\n    date.setTime(record.getMillis());\n\n    sb.append(sfDateOut.format(date));\n\n    String recordName;\n\n    if (record.getSourceClassName() != null) {\n      recordName = record.getSourceClassName() + \":\" + record.getSourceMethodName();\n    } else {\n      recordName = record.getLoggerName() + \":\";\n    }\n    if (recordName != null) {\n      sb.append(recordName);\n      sb.append(\":\");\n    }\n    final String message = formatMessage(record);\n    sb.append(record.getLevel().getLocalizedName());\n    sb.append(\": \");\n    sb.append(message);\n    sb.append(lineSeparator);\n\n    if (record.getThrown() != null) {\n      try {\n        final StringWriter sw = new StringWriter();\n        final PrintWriter pw = new PrintWriter(sw);\n        record.getThrown().printStackTrace(pw);\n        pw.close();\n        sb.append(sw.toString());\n      } catch (Exception ex) {\n      }\n    }\n    return sb.toString();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7682, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 225, "focalAPIEnd": 279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/feelinglucky/Tracker/tree/master/src/com/gracecode/tracker/service/ArchiveNameHelper.java", "rawCode": "  public static File getStorageDirectory(Date date) {\n    String saveDirectory =\n        getExternalStoragePath()\n            + File.separator\n            + SAVED_EXTERNAL_DIRECTORY\n            + File.separator\n            + new SimpleDateFormat(GROUP_BY_EACH_MONTH).format(date);\n\n    // 如果保存目录不存在，则自动创建个\n    File saveDirectoryFile = new File(saveDirectory);\n    if (!saveDirectoryFile.isDirectory()) {\n      saveDirectoryFile.mkdirs();\n    }\n\n    return saveDirectoryFile;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7683, "initialization": ["Date date = Person.getBirthday()"], "initializationStart": [129], "initializationEnd": [144], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 160, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/btpka3/btpka3.github.com/tree/master/java/spring/jdo/first-spring-jdo/src/main/java/me/test/first/spring/jdo/Main.java", "rawCode": "  public static void printPerson(Person p) {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n    String bithStr = p.getBirthday() == null ? \"\" : sdf.format(p.getBirthday());\n    String imgStr = null;\n    try {\n      if (p.getImgData() != null) {\n        imgStr = new String(p.getImgData(), \"UTF-16\");\n      }\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    }\n    System.out.printf(\n        \"ID:%d, NAME:%s, AGE:%d, isMale?%s, Birthday:%s, IMG:%s\\n\",\n        p.getId(), p.getName(), p.getAge(), p.getMale(), bithStr, imgStr);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7684, "initialization": ["Date date = new Date(*)"], "initializationStart": [1274], "initializationEnd": [1310], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1334, "focalAPIEnd": 1357, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nexr/RHive/tree/master/RHive/inst/javasrc/src/com/nexr/rhive/hadoop/FSUtils.java", "rawCode": "  public static String[][] ls(String src, String defaultFS) throws IOException {\n    Configuration conf = getConf(defaultFS);\n\n    Path srcPath = new Path(src);\n    FileSystem fs = null;\n\n    List<FileStatus> items = new ArrayList<FileStatus>();\n    try {\n      fs = srcPath.getFileSystem(conf);\n      FileStatus[] stats = fs.globStatus(srcPath);\n      if (stats != null) {\n        for (FileStatus stat : stats) {\n          if (!stat.isDir()) {\n            items.add(stat);\n          } else {\n            Path path = stat.getPath();\n            FileStatus files[] = fs.listStatus(path);\n            if (files != null) {\n              for (FileStatus file : files) {\n                items.add(file);\n              }\n            }\n          }\n        }\n      }\n    } finally {\n      closeFileSystem(fs);\n    }\n\n    String[][] rlist = new String[6][items.size()];\n    for (int i = 0; i < 6; i++) {\n      rlist[i] = new String[items.size()];\n    }\n\n    for (int i = 0; i < 6; i++) {\n      for (int j = 0; j < items.size(); j++) {\n        FileStatus item = items.get(j);\n\n        rlist[0][j] = item.getPermission().toString();\n        rlist[1][j] = item.getOwner();\n        rlist[2][j] = item.getGroup();\n        rlist[3][j] = String.valueOf(item.getLen());\n\n        Date date = new Date(item.getModificationTime());\n        rlist[4][j] = dateFormat.format(date);\n        rlist[5][j] = item.getPath().toUri().getPath();\n      }\n    }\n\n    return rlist;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7685, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [541], "initializationEnd": [569], "hasTryCatch": 1, "exceptionType": "IllegalArgumentException", "exceptionHandlingCall": ["Date.toString()"], "tryExpressionStart": 523, "tryExpressionEnd": 527, "tryBlockStart": 523, "tryBlockEnd": 692, "catchExpressionStart": 614, "catchExpressionEnd": 649, "catchBlockStart": 614, "catchBlockEnd": 692, "exceptionHandlingCallStart": [664], "exceptionHandlingCallEnd": [685], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(date==null||true)", "guardType": "IF {", "guardExpressionStart": 416, "guardExpressionEnd": 457, "guardBlockStart": 416, "guardBlockEnd": 484, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 584, "focalAPIEnd": 606, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-2_09-final/blojsom-2.0/src/org/blojsom/blog/BlogEntry.java", "rawCode": "  /**\n   * Return the blog entry date formatted with a specified date format\n   *\n   * @since blojsom 1.9.3\n   * @param format Date format\n   * @return <code>null</code> if the entry date or format is null, otherwise returns the entry date\n   *     formatted to the specified format. If the format is invalid, returns\n   *     <tt>entryDate.toString()</tt>\n   */\n  public String getDateAsFormat(String format) {\n    if (_entryDate == null || format == null) {\n      return null;\n    }\n\n    SimpleDateFormat sdf = null;\n    try {\n      sdf = new SimpleDateFormat(format);\n      return sdf.format(_entryDate);\n    } catch (IllegalArgumentException e) {\n      return _entryDate.toString();\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7686, "initialization": ["Date date = new Date()", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [502, 540], "initializationEnd": [512, 585], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 610, "focalAPIEnd": 625, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(date)"], "useStart": [591], "useEnd": [626], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AdoHe/AdsDeliver/tree/master/AdsDeliver_Server/src/edu/tongji/se/action/ImageUploadAction.java", "rawCode": "  @Override\n  public String execute() throws FileNotFoundException, IOException {\n\n    Random r = new Random();\n    // 生成随机文件名：当前年月日时分秒+五位随机数（为了在实际项目中防止文件同名而进行的处理）\n    int rannum = (int) (r.nextDouble() * (99999 - 10000 + 1)) + 10000; // 获取随机数\n\n    System.out.println(type);\n    System.out.println(imageFileName);\n    imageFileName = new Date().getTime() + \"_\" + rannum + getExtention(imageFileName);\n    System.out.println(imageFileName);\n    System.out.println(new Date().getTime());\n    Date date = new Date();\n    SimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss E\");\n    System.out.println(sf.format(date));\n\n    String path = \"/upload/\";\n\n    String realPathAddress = ServletActionContext.getServletContext().getRealPath(path);\n    System.out.println(realPathAddress);\n    File folder = new File(realPathAddress);\n    if (!folder.exists()) {\n      folder.mkdirs();\n    }\n\n    // 服务器上文件的真实路径\n    String realFileAddress =\n        ServletActionContext.getServletContext().getRealPath(path + imageFileName);\n    File realFile = new File(realFileAddress);\n\n    FileOutputStream outStream = new FileOutputStream(realFile);\n    FileInputStream inStream = new FileInputStream(image);\n\n    byte[] buffer = new byte[1024];\n    int length = 0;\n\n    while ((length = inStream.read(buffer)) > 0) {\n      outStream.write(buffer, 0, length);\n    }\n\n    inStream.close();\n    outStream.close();\n\n    if (type.equals(\"banner\")) {\n      String cutBannerImageName =\n          ImageUploadAction.cutImage(realFileAddress, imageFileName, 72, 72);\n      System.out.println(cutBannerImageName);\n    } else {\n      String cutContentImageName =\n          ImageUploadAction.cutImage(realFileAddress, imageFileName, 540, 480);\n      System.out.println(cutContentImageName);\n    }\n    imageFilePath = ServletActionContext.getRequest().getContextPath() + path + imageFileName;\n    /*File imageFile = new File(imageFilePath);\n\n    try {\n    FileUtils.copyFile(image, imageFile);\n    } catch (IOException e) {\n    e.printStackTrace();\n    }\n    ImageIcon bi=new ImageIcon(imageFile.getPath());\n    bi.setImage(bi.getImage().getScaledInstance(50, 40, Image.SCALE_DEFAULT));\n    System.out.println(bi.getIconHeight()+\" \"+bi.getIconWidth());\n    setImageHeigth(bi.getIconHeight());\n    setImageWidth(bi.getIconWidth());*/\n    return SUCCESS;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7687, "initialization": ["Date date = new Date(long)"], "initializationStart": [561], "initializationEnd": [578], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 682, "focalAPIEnd": 715, "followUpCheck": "!dateStamp.equals(date)", "checkType": "IF", "followUpCheckExpressionStart": 779, "followUpCheckExpressionEnd": 809, "followUpCheckBlockStart": 779, "followUpCheckBlockEnd": 1003, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bbockelm/DBS/tree/master/Servers/tomcat-mon/org/cms/dbs/catalina/valves/GridAccessLogValve.java", "rawCode": "  /**\n   * Log the specified message to the log file, switching files if the date has changed since the\n   * previous log call.\n   *\n   * @param message Message to be logged\n   * @param date the current Date object (so this method doesn't need to create a new one)\n   */\n  public void log(String message, Date date) {\n\n    if (rotatable) {\n      // Only do a logfile switch check once a second, max.\n      long systime = System.currentTimeMillis();\n      if ((systime - rotationLastChecked) > 1000) {\n\n        // We need a new currentDate\n        currentDate = new Date(systime);\n        rotationLastChecked = systime;\n\n        // Check for a change of date\n        String tsDate = dateFormatter.format(currentDate);\n\n        // If the date has changed, switch log files\n        if (!dateStamp.equals(tsDate)) {\n          synchronized (this) {\n            if (!dateStamp.equals(tsDate)) {\n              close();\n              dateStamp = tsDate;\n              open();\n            }\n          }\n        }\n      }\n    }\n\n    // Log this message\n    if (writer != null) {\n      writer.println(message);\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7688, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 52, "focalAPIEnd": 78, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vogtp/android-clockcard/tree/master/src/ch/almana/android/stechkarte/view/activity/ExportTimestamps.java", "rawCode": "  private String formatDate(Date date) {\n    return mmddyyyFromat.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7689, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 81, "focalAPIEnd": 143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["date.toString()", "simpleDateFormat.format(Date)", "date.toString()"], "useStart": [81, 256, 256], "useEnd": [154, 318, 329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BloatIt/bloatit/tree/master/main/src/main/java/com/bloatit/mail/TxtEntry.java", "rawCode": "  public String generate() {\n    if (url != null) {\n      return \" \"\n          + new SimpleDateFormat(\"EEEE HH:mm\", l.getLocale()).format(date).toString()\n          + \" — \"\n          + tr\n          + url.externalUrlString();\n    }\n    return \" \"\n        + new SimpleDateFormat(\"EEEE HH:mm\", l.getLocale()).format(date).toString()\n        + \" — \"\n        + tr;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7690, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)", "Date date = new Date(*)"], "initializationStart": [170, 222], "initializationEnd": [209, 246], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 289, "focalAPIEnd": 305, "followUpCheck": "!date.equals(simpleDateFormat.parse(date))", "checkType": "IF", "followUpCheckExpressionStart": 324, "followUpCheckExpressionEnd": 357, "followUpCheckBlockStart": 324, "followUpCheckBlockEnd": 451, "use": ["SimpleDateFormat.parse(date)", "simpleDateFormat.setTimeZone(SimpleTimeZone)", "simpleDateFormat.format(Date)", "SimpleDateFormat.parse(date)"], "useStart": [341, 725, 756, 885], "useEnd": [355, 744, 772, 900], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaffe/kaffe/tree/master/test/regression/DateFormatTest.java", "rawCode": "  public static void main(String args[]) throws Exception {\n    SimpleDateFormat sdf;\n    String str;\n    Date date;\n\n    System.out.println(\"Same time zone\");\n    sdf = new SimpleDateFormat(\"yyMMddHHmmssSSS\");\n    date = new Date(1098968427000L); // 04-10-28 13:00:27 GMT+00:00\n    str = sdf.format(date);\n\n    try {\n      if (!date.equals(sdf.parse(str))) {\n        System.out.println(\"Dates don't match? \" + date + \" != \" + sdf.parse(str));\n      }\n    } catch (ParseException e) {\n      System.err.println(\"Parse error at position \" + e.getErrorOffset());\n      e.printStackTrace();\n    }\n\n    SimpleTimeZone tz = new SimpleTimeZone(0, \"Z\");\n    SimpleDateFormat sdf2;\n\n    System.out.println(\"Different time zone\");\n    sdf.setTimeZone(tz);\n    str = sdf.format(date);\n    str += \"GMT+00:00\";\n    sdf2 = new SimpleDateFormat(\"yyMMddHHmmssSSSz\");\n\n    try {\n      if (!date.equals(sdf2.parse(str))) {\n        System.out.println(\"Dates don't match? \" + date + \" != \" + sdf2.parse(str));\n      }\n    } catch (ParseException e) {\n      System.err.println(\"Parse error at position \" + e.getErrorOffset());\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7691, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(*)"], "initializationStart": [344], "initializationEnd": [382], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 312, "guardExpressionEnd": 330, "guardBlockStart": 312, "guardBlockEnd": 427, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 404, "focalAPIEnd": 420, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tibistibi/mTor/tree/master/src/main/java/nl/bhit/mtor/util/DateUtil.java", "rawCode": "  /**\n   * This method attempts to convert an Oracle-formatted date in the form dd-MMM-yyyy to mm/dd/yyyy.\n   *\n   * @param aDate date from database as a string\n   * @return formatted string for the ui\n   */\n  public static String getDate(Date aDate) {\n    SimpleDateFormat df;\n    String returnValue = \"\";\n\n    if (aDate != null) {\n      df = new SimpleDateFormat(getDatePattern());\n      returnValue = df.format(aDate);\n    }\n\n    return returnValue;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7692, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [58], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 250, "focalAPIEnd": 264, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TechBridgeWorld/BrailleWritingTutor/tree/master/BWTEmulator/source/JettyServer/src/edu/cmu/ui/ControllerUI.java", "rawCode": "  private String getMessages() {\n    SimpleDateFormat d = new SimpleDateFormat(\"HH:mm:ss \");\n    StringBuffer sb = new StringBuffer();\n\n    SortedSet<Date> keySet = new TreeSet<Date>(messages.keySet());\n    for (Date date : keySet) {\n      sb.append(d.format(date) + \":\" + messages.get(date) + \"<br/>\");\n    }\n\n    return sb.toString();\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7693, "initialization": ["Date date = new Date()", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [305, 343], "initializationEnd": [315, 377], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 405, "focalAPIEnd": 424, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DeliveryReceipt.setSubmit_date(date)", "DeliveryReceipt.setDone_date(date)"], "useStart": [651, 693], "useEnd": [687, 727], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bruceMacLeod/motech-server-pillreminder-0.18/tree/master/tools/SMPPSim/src/java/com/seleniumsoftware/SMPPSim/Smsc.java", "rawCode": "  public synchronized void prepareDeliveryReceipt(\n      SubmitSM smppmsg, String messageID, byte state, int sub, int dlvrd, int err) {\n    int esm_class = 4;\n    if (state == PduConstants.ENROUTE) esm_class = 32;\n    DeliveryReceipt receipt = new DeliveryReceipt(smppmsg, esm_class);\n    Date rightNow = new Date();\n    SimpleDateFormat df = new SimpleDateFormat(\"yyMMddHHmm\");\n    String dateAsString = df.format(rightNow);\n    receipt.setMessage_id(messageID);\n    String s = \"000\" + sub;\n    int l = s.length();\n    receipt.setSub(s.substring(l - 3, l));\n    s = \"000\" + dlvrd;\n    l = s.length();\n    receipt.setDlvrd(s.substring(l - 3, l));\n    receipt.setSubmit_date(dateAsString);\n    receipt.setDone_date(dateAsString);\n    String err_string = \"000\" + err;\n    err_string = err_string.substring(err_string.length() - 3, err_string.length());\n    receipt.setErr(err_string);\n    logger.finest(\"sm_len=\" + smppmsg.getSm_length() + \",message=\" + smppmsg.getShort_message());\n    if (smppmsg.getSm_length() > 19) receipt.setText(new String(smppmsg.getShort_message(), 0, 20));\n    else if (smppmsg.getSm_length() > 0)\n      receipt.setText(new String(smppmsg.getShort_message(), 0, smppmsg.getSm_length()));\n    receipt.setDeliveryReceiptMessage(state);\n    try {\n      if (SMPPSim.getDelayReceiptsBy() <= 0) {\n        iq.addMessage(receipt);\n      } else {\n        drq.delayDeliveryReceipt(receipt);\n      }\n    } catch (InboundQueueFullException e) {\n      logger.warning(\"Failed to create delivery receipt because the Inbound Queue is full\");\n    }\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7694, "initialization": ["Date date = new Date()", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [73, 120], "initializationEnd": [83, 163], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 191, "focalAPIEnd": 216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mycase/webdebate/tree/master/src/webdebate-portlet/docroot/WEB-INF/src/com/arguments/support/Logger.java", "rawCode": "  private static String getRenderRequestLogFilePath() {\n    Date myNow = new Date();\n    SimpleDateFormat myFormatter = new SimpleDateFormat(\"yyyy.MM.dd.HH.mm.ss\");\n    String myDateString = myFormatter.format(myNow);\n    return \"/tmp/MakeYourCase.\" + myDateString + \".renderRequest.json\";\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7695, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [66], "initializationEnd": [100], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 127, "guardExpressionEnd": 151, "guardBlockStart": 127, "guardBlockEnd": 178, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 156, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/araqne/logdb/tree/master/araqne-logdb-client/src/main/java/org/araqne/logdb/client/IndexInfo.java", "rawCode": "  @Override\n  public String toString() {\n    SimpleDateFormat f = new SimpleDateFormat(\"yyyy-MM-dd\");\n    String s = null;\n    if (minIndexDay != null) s = f.format(minIndexDay);\n\n    String bloomFilterConfig = \"bloomfilter=\" + useBloomFilter;\n    if (useBloomFilter) {\n      bloomFilterConfig += \"[lv0: \" + bloomFilterCapacity0 + \", \" + bloomFilterErrorRate0 + \", \";\n      bloomFilterConfig += \"lv1: \" + bloomFilterCapacity1 + \", \" + bloomFilterErrorRate1 + \"]\";\n    }\n\n    return \"table=\"\n        + tableName\n        + \", index=\"\n        + indexName\n        + \",\"\n        + bloomFilterConfig\n        + \", tokenizer=\"\n        + tokenizerName\n        + \", tokenizer configs=\"\n        + tokenizerConfigs\n        + \", base path=\"\n        + basePath\n        + \", min index day=\"\n        + s\n        + \", build past index=\"\n        + buildPastIndex;\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7696, "initialization": ["Date date = EnrollmentOrder.getEnrollmentDate()", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [1913, 1976], "initializationEnd": [1938, 2010], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 2031, "focalAPIEnd": 2054, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["simpleDateFormat.format(Date)", "simpleDateFormat.format(Date)", "ReportXml.addValue(String,date)"], "useStart": [2073, 2175, 2228], "useEnd": [2116, 2215, 2275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/INOC-IT/Granite/tree/master/services/src/main/java/ru/sgu/csit/inoc/deansoffice/services/impl/ReferenceServiceImpl.java", "rawCode": "  private void build(ReportXml report, Student student, String purpose) {\n    if (purpose == null) {\n      purpose = \"\";\n    }\n    putDefaultValues(report.getValuesMap());\n    report.addValue(\"FACULTY_FULLNAME\", student.getSpeciality().getFaculty().getFullName());\n    report.addValue(\"FACULTY_SHORTNAME\", student.getSpeciality().getFaculty().getShortName());\n\n    report.addValue(\n        \"FACULTY_DEAN\", student.getSpeciality().getFaculty().getDean().generateShortName(true));\n\n    report.addValue(\n        \"RECTOR\",\n        student\n            .getSpeciality()\n            .getFaculty()\n            .getAdministration()\n            .getRector()\n            .generateShortName(true));\n    report.addValue(\n        \"RECTOR_DEGREE\",\n        student.getSpeciality().getFaculty().getAdministration().getRector().getDegree());\n\n    report.addValue(\n        \"Student.fullName_dat\",\n        student.getLastNameDative()\n            + \" \"\n            + student.getFirstNameDative()\n            + \" \"\n            + student.getMiddleNameDative());\n    report.addValue(\"Student.lastName_dat\", student.getLastNameDative());\n    report.addValue(\"Student.firstName_dat\", student.getFirstNameDative());\n    report.addValue(\"Student.middleName_dat\", student.getMiddleNameDative());\n\n    report.addValue(\"Student.courseNumber\", student.getGroup().getCourse().toString());\n\n    EnrollmentOrder order = student.getEnrollmentOrder();\n    String division = \"неизвестного\";\n\n    switch (student.getDivision()) {\n      case INTRAMURAL:\n        division = \"очного\";\n        break;\n      case EXTRAMURAL:\n        division = \"заочного\";\n        break;\n      case EVENINGSTUDY:\n        division = \"вечернего\";\n        break;\n    }\n    report.addValue(\"Student.division_rad\", division);\n\n    String startDate = \"\";\n    String endDate = \"\";\n    String orderNumber = \"\";\n    String orderDate = \"\";\n\n    if (order != null) {\n      Date date = order.getEnrollmentDate();\n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd.MM.yyyy\");\n\n      startDate = dateFormat.format(date);\n\n      endDate = dateFormat.format(student.getReleaseDate());\n      orderNumber = order.getNumber();\n      orderDate = dateFormat.format(order.getSignedDate());\n    }\n\n    report.addValue(\"Student.startDate\", startDate); // \"01.09.2007\"\n    report.addValue(\"Student.endDate\", endDate); // \"01.07.2012\"\n    report.addValue(\"Student.order.number\", orderNumber); // \"22-0107\"\n    report.addValue(\"Student.order.date\", orderDate); // \"12.08.2007\"\n\n    String studyForm = \"неизвестная\";\n\n    switch (student.getStudyForm()) {\n      case BUDGET:\n        studyForm = \"бюджетная\";\n        break;\n      case COMMERCIAL:\n        studyForm = \"коммерческая\";\n        break;\n    }\n    report.addValue(\"Student.studyForm\", studyForm);\n    report.addValue(\"Purpose\", purpose);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7697, "initialization": ["Date date = new Date(long)", "SimpleDateFormat simpleDateFormat = new SimpleDateFormat(*)"], "initializationStart": [62, 117], "initializationEnd": [81, 181], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 195, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_LegacyCamera/tree/master/src/com/android/camera/VideoCamera.java", "rawCode": "  private String createName(long dateTaken) {\n    Date date = new Date(dateTaken);\n    SimpleDateFormat dateFormat = new SimpleDateFormat(getString(R.string.video_file_name_format));\n\n    return dateFormat.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7698, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String,*)"], "initializationStart": [92], "initializationEnd": [133], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["simpleDateFormat.setTimeZone(TimeZone)"], "configurationStart": [139], "configurationEnd": [167], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 181, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arago/rike/tree/master/arago-portlet-util/src/main/java/de/arago/portlet/jsp/AbstractUserService.java", "rawCode": "  @Override\n  public String formatDate(Date date, String format) {\n    SimpleDateFormat f = new SimpleDateFormat(format, getLocale());\n    f.setTimeZone(getTimeZone());\n\n    return f.format(date);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7699, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String)"], "initializationStart": [278], "initializationEnd": [310], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 403, "focalAPIEnd": 429, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["date.length()", "date.substring(int,*)", "date.length()", "date.substring(*)"], "useStart": [462, 442, 508, 491], "useEnd": [477, 482, 523, 528], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jonnyzzz/maragogype/tree/master/tags/v1.5/java/com/xerox/amazonws/sdb/DataUtils.java", "rawCode": "  /**\n   * Encodes date value into string format that can be compared lexicographically\n   *\n   * @param date date value to be encoded\n   * @return string representation of the date value\n   */\n  public static String encodeDate(Date date) {\n    SimpleDateFormat dateFormatter = new SimpleDateFormat(dateFormat);\n    /* Java doesn't handle ISO8601 nicely: need to add ':' manually */\n    String result = dateFormatter.format(date);\n    return result.substring(0, result.length() - 2) + \":\" + result.substring(result.length() - 2);\n  }\n"}, {"dataset": "simpleDateFormatFormat", "exampleID": 7700, "initialization": ["SimpleDateFormat simpleDateFormat = new SimpleDateFormat(String,*)"], "initializationStart": [1250], "initializationEnd": [1301], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "date!=null", "guardType": "IF {", "guardExpressionStart": 1196, "guardExpressionEnd": 1218, "guardBlockStart": 1196, "guardBlockEnd": 1444, "focalAPI": "date = simpleDateFormat.format(date)", "focalAPIStart": 1325, "focalAPIEnd": 1346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setValue(date)"], "useStart": [1402], "useEnd": [1437], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/maven-scm/tree/master/maven-scm-providers/maven-scm-provider-clearcase/src/main/java/org/apache/maven/scm/provider/clearcase/command/changelog/ClearCaseChangeLogCommand.java", "rawCode": "  /**\n   * ClearCase LT version doesn't support the attribut -fmt and -since for command lhistory.\n   *\n   * @param workingDirectory\n   * @param branch\n   * @param startDate\n   * @return The command line\n   */\n  public static Commandline createCommandLine(\n      File workingDirectory, ScmBranch branch, Date startDate) {\n    Commandline command = new Commandline();\n    command.setExecutable(\"cleartool\");\n    command.createArg().setValue(\"lshistory\");\n\n    command.setWorkingDirectory(workingDirectory.getAbsolutePath());\n\n    Settings settings = ClearCaseUtil.getSettings();\n    String userFormat =\n        StringUtils.isEmpty(settings.getChangelogUserFormat())\n            ? \"\"\n            : settings.getChangelogUserFormat();\n\n    StringBuilder format = new StringBuilder();\n    format.append(\"NAME:%En\\\\n\");\n    format.append(\"DATE:%Nd\\\\n\");\n    format.append(\"COMM:%-12.12o - %o - %c - Activity: %[activity]p\\\\n\");\n    format.append(\"USER:%\" + userFormat + \"u\\\\n\");\n    format.append(\"REVI:%Ln\\\\n\");\n\n    command.createArg().setValue(\"-fmt\");\n    command.createArg().setValue(format.toString());\n    command.createArg().setValue(\"-recurse\");\n    command.createArg().setValue(\"-nco\");\n\n    if (startDate != null) {\n      SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MMM-yyyy\", Locale.ENGLISH);\n\n      String start = sdf.format(startDate);\n\n      command.createArg().setValue(\"-since\");\n\n      command.createArg().setValue(start);\n    }\n\n    // TODO: End date?\n\n    if (branch != null && StringUtils.isNotEmpty(branch.getName())) {\n      command.createArg().setValue(\"-branch\");\n\n      command.createArg().setValue(branch.getName());\n    }\n\n    return command;\n  }\n"}]