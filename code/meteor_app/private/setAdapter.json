[{"dataset": "setAdapter", "exampleID": 5101, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/java/android/app/ListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5102, "initialization": ["ListView listView = getListView()", "ListAdapter adapter = ListView.getAdapter()"], "initializationStart": [114, 513], "initializationEnd": [127, 534], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setItemsCanFocus(boolean)", "listView.addHeaderView(Button)", "listView.addFooterView(Button)", "listView.getAdapter()"], "configurationStart": [133, 285, 442, 513], "configurationEnd": [164, 315, 472, 534], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 540, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/tests/coretests/src/android/widget/listview/ListWithHeaders.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final ListView listView = getListView();\n    listView.setItemsCanFocus(true);\n\n    for (int i = 0; i < 12; i++) {\n      Button header = new Button(this);\n      header.setText(\"Header View\");\n      listView.addHeaderView(header);\n    }\n\n    for (int i = 0; i < 12; i++) {\n      Button footer = new Button(this);\n      footer.setText(\"Footer View\");\n      listView.addFooterView(footer);\n    }\n\n    final ListAdapter adapter = listView.getAdapter();\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5103, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitmel/Locast-Android/tree/master/src/android/support/v4_map/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5104, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new DayArrayAdapter(*,List<Day>)"], "initializationStart": [1066, 3446], "initializationEnd": [1097, 3486], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setOnItemClickListener(OnItemClickListener)", "listView.setOnItemLongClickListener(OnItemLongClickListener)"], "configurationStart": [3573, 3624], "configurationEnd": [3618, 3677], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 3683, "focalAPIEnd": 3715, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setSelection(int)"], "useStart": [3756], "useEnd": [3810], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sniderzero/UTPRO/tree/master/UltitrackPro/src/com/appsmarttech/ut90/Days_Fragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    View vDays = inflater.inflate(R.layout.days_fragment, container, false);\n    // setting actionbar details\n    actionBar = getSherlockActivity().getSupportActionBar();\n    actionBar.setDisplayUseLogoEnabled(true);\n    actionBar.setDisplayShowTitleEnabled(true);\n    actionBar.setDisplayShowHomeEnabled(true);\n    actionBar.setDisplayHomeAsUpEnabled(true);\n\n    // open preferences\n    spPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\n\n    // declare preference editor\n    ePreferences = spPreferences.edit();\n\n    // boolean for tracking the presence of the cab\n    bActionPresent = false;\n\n    // grabbing the active program from preferences\n    sActiveProgram = spPreferences.getString(\"kActiveProgram\", \"1\");\n\n    // converting it to Integer\n    iActiveProgram = Integer.valueOf(sActiveProgram);\n\n    // assigning listview to listview widget\n    lvDays = (ListView) vDays.findViewById(R.id.lvDays);\n\n    // telling it that it has an actionbar\n    setHasOptionsMenu(true);\n\n    // declaring intents\n    inExerDetails = new Intent(getActivity(), ExerDetail_Activity.class);\n\n    // opening database\n    db = (new DBHelper_activity(getActivity()));\n\n    // getting the name of the program based on the program id in preferences\n    pActiveProgram = db.getProgram(iActiveProgram);\n\n    // setting activity title based on selected program\n    getActivity().setTitle(pActiveProgram.getName());\n\n    // building list of days based on program ID\n    Days = db.getAllProgramDays(iActiveProgram);\n\n    // building the onclick listener for the lvPrograms Listview\n    lvDaysListener =\n        new OnItemClickListener() {\n\n          @Override\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            if (bActionPresent) { // if the action bar is up, just update the selected day\n              // grabbing the selected item from lvPrograms\n              dSelected = (Day) (lvDays.getItemAtPosition(position));\n              mActionMode.setTitle(dSelected.getName());\n            } else {\n              // grabbing the selected day object\n              dSelected = (Day) (lvDays.getItemAtPosition(position));\n              // putting the dayID of the selected day in a bundle to send to the next activity\n              inExerDetails.putExtra(\"DAY_ID\", dSelected.getDayID());\n              inExerDetails.putExtra(\"ROW_ID\", dSelected.getID());\n              // launching the exercise details activity\n              startActivity(inExerDetails);\n            }\n          }\n        };\n    // building the long onclick listener for the lvPrograms listview\n\n    lvDaysLongListener =\n        new OnItemLongClickListener() {\n\n          @Override\n          public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\n            // grabbing the selected item from lvPrograms\n            dSelected = (Day) (lvDays.getItemAtPosition(position));\n            // grabbing dayname to update the action bar with\n            sDayName = dSelected.getName();\n            // launching the contextual action bar\n            mActionMode = getSherlockActivity().startActionMode(new mActionModeCallback());\n            return true;\n          }\n        };\n\n    // setting up days adapter\n    lvDaysAdapter = new DayArrayAdapter(getActivity(), Days);\n\n    // setting click listener, long click listener, and adapter to the listview\n    lvDays.setOnItemClickListener(lvDaysListener);\n    lvDays.setOnItemLongClickListener(lvDaysLongListener);\n    lvDays.setAdapter(lvDaysAdapter);\n    // scrolling to first exercise\n    lvDays.setSelection(db.getNextDay(iActiveProgram) - 2);\n\n    return vDays;\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5105, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tisoft/xmlvm/tree/master/src/acl/android/android/app/ListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5106, "initialization": ["ListView listView = new ListView(*)"], "initializationStart": [118], "initializationEnd": [144], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 90, "tryExpressionEnd": 94, "tryBlockStart": 90, "tryBlockEnd": 1040, "catchExpressionStart": 982, "catchExpressionEnd": 1002, "catchBlockStart": 982, "catchBlockEnd": 1040, "exceptionHandlingCallStart": [1012], "exceptionHandlingCallEnd": [1031], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "adapter!=null&&adapter.getCount()>0", "guardType": "IF {", "guardExpressionStart": 33, "guardExpressionEnd": 81, "guardBlockStart": 33, "guardBlockEnd": 1046, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 154, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(OnItemClickListener)", "listView.setDivider(Drawable)", "listView.measure(int,int)", "new PopupWindow(listView,*,*,boolean)"], "useStart": [187, 228, 533, 711], "useEnd": [218, 251, 691, 772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guardianproject/JustPayPhone/tree/master/app/src/info/guardianproject/justpayphone/app/views/DropdownSpinner.java", "rawCode": "  private void showPopup() {\n    if (mAdapter != null && mAdapter.getCount() > 0) {\n      try {\n        ListView lv = new ListView(getContext());\n        lv.setAdapter(mAdapter);\n        lv.setOnItemClickListener(this);\n        lv.setDivider(mDivider);\n\n        Rect rectGlobal = new Rect();\n        this.getGlobalVisibleRect(rectGlobal);\n\n        Rect rectGlobalParent = new Rect();\n        ((View) this.getParent()).getGlobalVisibleRect(rectGlobalParent);\n\n        int maxHeight = rectGlobalParent.bottom - rectGlobal.top;\n        lv.measure(\n            MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.EXACTLY),\n            MeasureSpec.makeMeasureSpec(maxHeight, MeasureSpec.AT_MOST));\n\n        mPopup = new PopupWindow(lv, getWidth(), lv.getMeasuredHeight(), true);\n        mPopup.setOutsideTouchable(true);\n        mPopup.setBackgroundDrawable(mDropDownBackground);\n        mPopup.showAtLocation(this, Gravity.TOP | Gravity.LEFT, rectGlobal.left, rectGlobal.top);\n\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5107, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 130, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Prototik/HoloEverywhere/tree/master/library/src/org/holoeverywhere/app/ListActivity.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5108, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitmel/memory-traces/tree/master/src/android/support/v4_map/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5109, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 80, "guardExpressionEnd": 97, "guardBlockStart": 80, "guardBlockEnd": 123, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 98, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Throy/freezing-ninja/tree/master/GeoRedUy.Client/src/georeduy/client/util/SlideMenu.java", "rawCode": "  public void setAdapter(ListAdapter adapter) {\n    this.adapter = adapter;\n    if (list != null) list.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5110, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new ListAdapter()"], "initializationStart": [594, 642], "initializationEnd": [622, 659], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 665, "focalAPIEnd": 702, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/guodian/app/mypower/GDBillActivity.java", "rawCode": "  public void initializeView() {\n    super.initializeView();\n\n    StrYear = getResources().getString(R.string.ch_year);\n    StrMonth = getResources().getString(R.string.ch_month);\n\n    mUserNameView = (TextView) findViewById(R.id.user_name);\n    mDeviceNoView = (TextView) findViewById(R.id.device_no);\n    mAddressView = (TextView) findViewById(R.id.user_address);\n    mItemsCountView = (TextView) findViewById(R.id.items_number);\n    mYearSpinner = (GDSpinner) findViewById(R.id.year_spinner);\n    mMonthSpinner = (GDSpinner) findViewById(R.id.month_spinner);\n\n    mBillListView = (ListView) findViewById(R.id.bill_list);\n    mBillAdaper = new ListAdapter();\n    mBillListView.setAdapter(mBillAdaper);\n\n    mQueryButton = (Button) findViewById(R.id.mypower_query_button);\n\n    mQueryButton.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            queryBillData();\n          }\n        });\n\n    mUserNameView.setText(mUserName == null ? \"\" : mUserName);\n    mDeviceNoView.setText(mDeviceNo == null ? \"\" : mDeviceNo);\n    mAddressView.setText(mAddress == null ? \"\" : mAddress);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5111, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 56, "focalAPIEnd": 82, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tumb1er/RutubeAppProject/tree/master/RutubeFeed/src/ru/rutube/RutubeFeed/ui/FeedFragment.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    sgView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5112, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [267, 328], "initializationEnd": [294, 351], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 357, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setCacheColorHint(int)", "listView.setVerticalFadingEdgeEnabled(boolean)", "registerForContextMenu(listView)"], "useStart": [387, 418, 464], "useEnd": [412, 457, 492], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/TransparentListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    getWindow().setBackgroundDrawable(getResources().getDrawable(R.drawable.gradient));\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n    list.setCacheColorHint(0);\n    list.setVerticalFadingEdgeEnabled(true);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5113, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 540, "focalAPIEnd": 572, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Pw4rr1er/DemoBirthday/tree/master/src/com/appndroid/crick20/ui/LayoutOne.java", "rawCode": "  @Override\n  public void onResume() {\n    // TODO Auto-generated method stub\n    super.onResume();\n    int recordCount = getDataFromDB(\"Group1\");\n    fillData(lv);\n\n    super.onResume();\n    db =\n        getActivity()\n            .openOrCreateDatabase(\"worldcupt20.db\", SQLiteDatabase.CREATE_IF_NECESSARY, null);\n\n    m_cursor =\n        db.rawQuery(\n            \"select * from schedule where gang ='\" + \"Group1\" + \"' AND WinnerTeam =''\", null);\n    m_cursor.moveToFirst();\n    m_adapter = new upcomingAdapter(context, m_cursor, true);\n    upcominglv.setAdapter(m_adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5114, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [178, 239], "initializationEnd": [205, 262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 268, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerForContextMenu(listView)"], "useStart": [299], "useEnd": [327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/ListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5115, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 123, "guardExpressionEnd": 141, "guardBlockStart": 123, "guardBlockEnd": 403, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 150, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/practo/ActionBarSherlock/tree/master/library/src/org/holoeverywhere/app/ListFragment.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5116, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [178, 239], "initializationEnd": [205, 262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 268, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerForContextMenu(listView)"], "useStart": [299], "useEnd": [327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/ListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5117, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new HistoryAdapter(*,List<HistoryItem>)"], "initializationStart": [97, 243], "initializationEnd": [142, 283], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 291, "focalAPIEnd": 315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMS-Projects/copyit-app/tree/master/android/src/net/mms_projects/copy_it/activities/HistoryActivity.java", "rawCode": "    @Override\n    protected void onPostExecute(Cursor cursor) {\n      ListView list = (ListView) this.activity.findViewById(android.R.id.list);\n\n      List<HistoryItem> items = HistoryListFactory.buildList(cursor);\n      ListAdapter adapter = new HistoryAdapter(this.activity, items);\n      list.setAdapter(adapter);\n\n      this.database.close();\n    }\n"}, {"dataset": "setAdapter", "exampleID": 5118, "initialization": ["ListView listView = getListView()", "ListAdapter adapter = ListView.getAdapter()"], "initializationStart": [114, 513], "initializationEnd": [127, 534], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setItemsCanFocus(boolean)", "listView.addHeaderView(Button)", "listView.addFooterView(Button)", "listView.getAdapter()"], "configurationStart": [133, 285, 442, 513], "configurationEnd": [164, 315, 472, 534], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 540, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/tests/FrameworkTest/src/com/android/frameworktest/listview/ListWithHeaders.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final ListView listView = getListView();\n    listView.setItemsCanFocus(true);\n\n    for (int i = 0; i < 12; i++) {\n      Button header = new Button(this);\n      header.setText(\"Header View\");\n      listView.addHeaderView(header);\n    }\n\n    for (int i = 0; i < 12; i++) {\n      Button footer = new Button(this);\n      footer.setText(\"Footer View\");\n      listView.addFooterView(footer);\n    }\n\n    final ListAdapter adapter = listView.getAdapter();\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5119, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [87], "initializationEnd": [117], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.removeAllViewsInLayout()"], "configurationStart": [123], "configurationEnd": [152], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 158, "focalAPIEnd": 182, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sallesma/IF-Android/tree/master/src/com/imaginariumfestival/android/artists/ArtistsActivity.java", "rawCode": "  private void computeListToView(ListAdapter adapter) {\n    ListView list = (ListView) findViewById(R.id.artistsList);\n    list.removeAllViewsInLayout();\n    list.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5120, "initialization": ["ListView listView = findViewById(int)", "ListAdapter adapter = createAdapter(T[])"], "initializationStart": [145, 424], "initializationEnd": [165, 446], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 516, "focalAPIEnd": 540, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setVisibility(*)"], "useStart": [550], "useEnd": [582], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neuf/DNSapp/tree/master/src/com/studentersamfundet/app/ui/lists/BaseListActivity.java", "rawCode": "    @Override\n    protected void onPostExecute(Boolean result) {\n      isUpdated = true;\n\n      if (result) {\n        ListView list = (ListView) findViewById(idList);\n        T[] objects = getObjects();\n\n        ProgressBar pb = (ProgressBar) findViewById(idProgressBar);\n        if (pb != null) pb.setVisibility(View.GONE);\n\n        Log.i(\"DNSapp\", \"Showing \" + objects.length + \" objects.\");\n        ListAdapter adapter = createAdapter(objects);\n        if (adapter == null) {\n          return;\n        }\n\n        list.setAdapter(adapter);\n        list.setVisibility(View.VISIBLE);\n\n      } else {\n        Toast toast =\n            Toast.makeText(context, R.string.error_noconnection_noupdate, Toast.LENGTH_LONG);\n        toast.show();\n      }\n    }\n"}, {"dataset": "setAdapter", "exampleID": 5121, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 4417, "focalAPIEnd": 4447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [4488, 4542], "useEnd": [4532, 4578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/com/android/internal/app/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n\n    /* Get all the different background required */\n    int fullDark = a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.popup_full_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.popup_top_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.popup_center_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.popup_bottom_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.popup_full_bright);\n    int topBright = a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.popup_top_bright);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.popup_center_bright);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.popup_bottom_bright);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.popup_bottom_medium);\n\n    /*\n     * We now set the background of all of the sections of the alert.\n     * First collect together each section that is being displayed along\n     * with whether it is on a light or dark background, then run through\n     * them setting their backgrounds. This is complicated because we need\n     * to correctly use the full, top, middle, and bottom graphics depending\n     * on how many views they are and where they appear.\n     */\n\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n\n    /* The contentPanel displays either a custom text message or\n     * a ListView. If it's text we should use the dark background\n     * for ListView we should use the light background. If neither\n     * are there the contentPanel will be hidden so set it as null.\n     */\n    views[pos] = (contentPanel.getVisibility() == View.GONE) ? null : contentPanel;\n    light[pos] = mListView != null;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n\n    if (lastView != null) {\n      if (setView) {\n\n        /* ListViews will use the Bright background but buttons use\n         * the Medium background.\n         */\n        lastView.setBackgroundResource(\n            lastLight ? (hasButtons ? bottomMedium : bottomBright) : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n\n    /* TODO: uncomment section below. The logic for this should be if\n     * it's a Contextual menu being displayed AND only a Cancel button\n     * is shown then do this.\n     */\n    // if (hasButtons && (mListView != null)) {\n\n    /* Yet another *special* case. If there is a ListView with buttons\n     * don't put the buttons on the bottom but instead put them in the\n     * footer of the ListView this will allow more items to be\n     * displayed.\n     */\n\n    /*\n    contentPanel.setBackgroundResource(bottomBright);\n    buttonPanel.setBackgroundResource(centerMedium);\n    ViewGroup parent = (ViewGroup) mWindow.findViewById(R.id.parentPanel);\n    parent.removeView(buttonPanel);\n    AbsListView.LayoutParams params = new AbsListView.LayoutParams(\n    AbsListView.LayoutParams.MATCH_PARENT,\n    AbsListView.LayoutParams.MATCH_PARENT);\n    buttonPanel.setLayoutParams(params);\n    mListView.addFooterView(buttonPanel);\n    */\n    // }\n\n    if ((mListView != null) && (mAdapter != null)) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5122, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/frameworks_support/tree/master/v4/java/android/support/v4/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5123, "initialization": ["ListAdapter adapter = new ChievosListAdapter(*,*,*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [247, 385], "initializationEnd": [352, 408], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 414, "focalAPIEnd": 438, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/david-sabata/DungeonsAndStudents/tree/master/src/cz/davidsabata/at/postareg/immandbeta120803/achievments/AchievmentsActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_achievments);\n\n    GameService gameService = GameService.getInstance();\n    ListAdapter adapter =\n        new ChievosListAdapter(\n            getResources(), getLayoutInflater(), gameService.getAllAchievments());\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5124, "initialization": ["ListAdapter adapter = new ListAdapter()"], "initializationStart": [498], "initializationEnd": [515], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["adapter.setDataSet(StepPrice[])"], "configurationStart": [753], "configurationEnd": [783], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 845, "focalAPIEnd": 875, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/guodian/app/mypower/GDPriceDlgFragment.java", "rawCode": "  private void initializeView() {\n\n    mStrHan = mActivity.getResources().getString(R.string.suffix_str_han);\n    mStrStep1 = mActivity.getResources().getString(R.string.str_step_1);\n    mStrStep2 = mActivity.getResources().getString(R.string.str_step_2);\n    mStrStep3 = mActivity.getResources().getString(R.string.str_step_3);\n\n    List<StepPrice> stepPrices = null;\n    if (mPriceData != null) {\n      stepPrices = mPriceData.StepPriceList;\n    }\n\n    if (stepPrices != null) {\n      mAdapter = new ListAdapter();\n      StepPrice[] stepPrice = new StepPrice[stepPrices.size()];\n      for (int i = 0; i < stepPrice.length; i++) {\n        stepPrice[i] = stepPrices.get(i);\n      }\n\n      LogUtil.d(TAG, \" ==== step size = \" + stepPrice.length);\n\n      mAdapter.setDataSet(stepPrice);\n      LogUtil.d(TAG, \" === listview = \" + mListView);\n      mListView.setAdapter(mAdapter);\n    } else {\n      ToastUtil.showToast(getActivity(), R.string.load_data_is_null);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5125, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [267, 328], "initializationEnd": [294, 351], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 357, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setCacheColorHint(int)", "listView.setVerticalFadingEdgeEnabled(boolean)", "registerForContextMenu(listView)"], "useStart": [387, 418, 464], "useEnd": [412, 457, 492], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/TransparentListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    getWindow().setBackgroundDrawable(getResources().getDrawable(R.drawable.gradient));\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n    list.setCacheColorHint(0);\n    list.setVerticalFadingEdgeEnabled(true);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5126, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 275, "focalAPIEnd": 304, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CapsuleMe/Capsule/tree/master/GreenDroid/src/greendroid/app/GDListActivity.java", "rawCode": "  /**\n   * Provides the Adapter for the ListView handled by this {@link GDListActivity}\n   *\n   * @param adapter The ListAdapter to set.\n   */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureLayout();\n      mAdapter = adapter;\n      mListView.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5127, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 164, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgeo/cgeo/tree/master/main/thirdparty/android/support/v4/app/FragmentListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public synchronized void setListAdapter(final ListAdapter adapter) {\n    ensureList();\n    mAdapter = adapter;\n    mList.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5128, "initialization": ["ListView listView = getListView()", "ListAdapter adapter = ListView.getAdapter()"], "initializationStart": [114, 513], "initializationEnd": [127, 534], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setItemsCanFocus(boolean)", "listView.addHeaderView(Button)", "listView.addFooterView(Button)", "listView.getAdapter()"], "configurationStart": [133, 285, 442, 513], "configurationEnd": [164, 315, 472, 534], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 540, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/tests/FrameworkTest/src/com/android/frameworktest/listview/ListWithHeaders.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final ListView listView = getListView();\n    listView.setItemsCanFocus(true);\n\n    for (int i = 0; i < 12; i++) {\n      Button header = new Button(this);\n      header.setText(\"Header View\");\n      listView.addHeaderView(header);\n    }\n\n    for (int i = 0; i < 12; i++) {\n      Button footer = new Button(this);\n      footer.setText(\"Footer View\");\n      listView.addFooterView(footer);\n    }\n\n    final ListAdapter adapter = listView.getAdapter();\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5129, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 545, "focalAPIEnd": 579, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Pw4rr1er/DemoBirthday/tree/master/src/com/appndroid/crick20/ui/LayoutTwo.java", "rawCode": "  @Override\n  public void onResume() {\n    // TODO Auto-generated method stub\n    super.onResume();\n    int recordCount = getDataFromDB(\"Group2\");\n    fillData(lv1);\n\n    super.onResume();\n    db =\n        getActivity()\n            .openOrCreateDatabase(\"worldcupt20.db\", SQLiteDatabase.CREATE_IF_NECESSARY, null);\n\n    m_cursor1 =\n        db.rawQuery(\n            \"select * from schedule where gang ='\" + \"Group2\" + \"' AND WinnerTeam =''\", null);\n    m_cursor1.moveToFirst();\n    m_adapter1 = new upcomingAdapter(context, m_cursor1, true);\n    upcominglv1.setAdapter(m_adapter1);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5130, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 4417, "focalAPIEnd": 4447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [4488, 4542], "useEnd": [4532, 4578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/com/android/internal/app/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n\n    /* Get all the different background required */\n    int fullDark = a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.popup_full_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.popup_top_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.popup_center_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.popup_bottom_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.popup_full_bright);\n    int topBright = a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.popup_top_bright);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.popup_center_bright);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.popup_bottom_bright);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.popup_bottom_medium);\n\n    /*\n     * We now set the background of all of the sections of the alert.\n     * First collect together each section that is being displayed along\n     * with whether it is on a light or dark background, then run through\n     * them setting their backgrounds. This is complicated because we need\n     * to correctly use the full, top, middle, and bottom graphics depending\n     * on how many views they are and where they appear.\n     */\n\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n\n    /* The contentPanel displays either a custom text message or\n     * a ListView. If it's text we should use the dark background\n     * for ListView we should use the light background. If neither\n     * are there the contentPanel will be hidden so set it as null.\n     */\n    views[pos] = (contentPanel.getVisibility() == View.GONE) ? null : contentPanel;\n    light[pos] = mListView != null;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n\n    if (lastView != null) {\n      if (setView) {\n\n        /* ListViews will use the Bright background but buttons use\n         * the Medium background.\n         */\n        lastView.setBackgroundResource(\n            lastLight ? (hasButtons ? bottomMedium : bottomBright) : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n\n    /* TODO: uncomment section below. The logic for this should be if\n     * it's a Contextual menu being displayed AND only a Cancel button\n     * is shown then do this.\n     */\n    // if (hasButtons && (mListView != null)) {\n\n    /* Yet another *special* case. If there is a ListView with buttons\n     * don't put the buttons on the bottom but instead put them in the\n     * footer of the ListView this will allow more items to be\n     * displayed.\n     */\n\n    /*\n    contentPanel.setBackgroundResource(bottomBright);\n    buttonPanel.setBackgroundResource(centerMedium);\n    ViewGroup parent = (ViewGroup) mWindow.findViewById(R.id.parentPanel);\n    parent.removeView(buttonPanel);\n    AbsListView.LayoutParams params = new AbsListView.LayoutParams(\n    AbsListView.LayoutParams.MATCH_PARENT,\n    AbsListView.LayoutParams.MATCH_PARENT);\n    buttonPanel.setLayoutParams(params);\n    mListView.addFooterView(buttonPanel);\n    */\n    // }\n\n    if ((mListView != null) && (mAdapter != null)) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5131, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new DesktopDetailArrayAdapter(*,*,*)"], "initializationStart": [846, 980], "initializationEnd": [880, 1088], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 1096, "focalAPIEnd": 1118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setVisibility(*)"], "useStart": [1397], "useEnd": [1424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Develman/IliConnect/tree/master/IliConnect/src/com/android/iliConnect/SchreibtischDetailActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.schreibtisch_detail_layout);\n    Intent intent = getIntent();\n\n    MainActivity.currentActivity = this;\n    instance = this;\n\n    final String kurs = intent.getStringExtra(\"CourseName\");\n\n    ((TextView) (findViewById(R.id.courseName1))).setText(kurs);\n\n    Item item = null;\n    final int position = intent.getIntExtra(\"position\", -1);\n    if (position > -1) {\n      item = MainActivity.instance.localDataProvider.desktopItems.DesktopItem.get(position);\n    }\n\n    if (intent.getSerializableExtra(\"Item\") != null) {\n      item = (Item) intent.getSerializableExtra(\"Item\");\n    }\n\n    selectedCourse = item.ref_id;\n    selectedCourseName = item.title;\n    itemType = item.type;\n\n    final ListView lv = (ListView) findViewById(R.id.desktop_content);\n\n    if (item.Item != null && item.getItems().size() > 0) {\n      ListAdapter adapter =\n          new DesktopDetailArrayAdapter(\n              getApplicationContext(), R.id.desktop_content, item.getItems());\n      lv.setAdapter(adapter);\n      ((TextView) (findViewById(R.id.courseDesc1))).setVisibility(View.GONE);\n    } else {\n      // falls Kurs keine Inhalte hat, Meldung anzeigen.\n      ((TextView) (findViewById(R.id.courseDesc1)))\n          .setText(\"Dem Kurs wurden noch keine Inhalte hinzugefügt.\");\n      lv.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5132, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [470], "initializationEnd": [499], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 557, "focalAPIEnd": 585, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/activity/EventListActivity.java", "rawCode": "  private void fillEventList() {\n    if (listAdapter == null || dataChanged) {\n      dataChanged = false;\n      EventDataSource dataSource = new EventDataSource(this);\n      List<Event> events = dataSource.getEventList();\n      listAdapter = new EventListViewAdapter(this, events);\n      for (Event e : events) {\n        new EventExpensesAsyncLoader(this, this).execute(e.getId());\n      }\n    }\n    ListAdapter adapter = listAdapter;\n    ListView listView = (ListView) findViewById(R.id.event_list);\n    // trigger filter to it being applied on resume\n    listView.setAdapter(adapter);\n    EventListActivity.this\n        .listAdapter\n        .getFilter()\n        .filter(((SearchView) findViewById(R.id.event_SearchView)).getQuery());\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5133, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new ExplanationListAdapterView(*,ArrayList<String>,ArrayList<String>)"], "initializationStart": [627, 838], "initializationEnd": [650, 887], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 895, "focalAPIEnd": 923, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setVisibility(*)"], "useStart": [944], "useEnd": [977], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SmruthiManjunath/owncloud_friends/tree/master/src/com/owncloud/android/ui/activity/GenericExplanationActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Intent intent = getIntent();\n    String message = intent.getStringExtra(MESSAGE);\n    ArrayList<String> list = intent.getStringArrayListExtra(EXTRA_LIST);\n    ArrayList<String> list2 = intent.getStringArrayListExtra(EXTRA_LIST_2);\n\n    setContentView(R.layout.generic_explanation);\n\n    if (message != null) {\n      TextView textView = (TextView) findViewById(R.id.message);\n      textView.setText(message);\n      textView.setMovementMethod(new ScrollingMovementMethod());\n    }\n\n    ListView listView = (ListView) findViewById(R.id.list);\n    if (list != null && list.size() > 0) {\n      // ListAdapter adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1,\n      // list);\n      ListAdapter adapter = new ExplanationListAdapterView(this, list, list2);\n      listView.setAdapter(adapter);\n    } else {\n      listView.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5134, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/app/ListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5135, "initialization": ["ListAdapter adapter = new BaseAdapter()", "ListView listView = ListView.findViewById(int)"], "initializationStart": [192, 957], "initializationEnd": [919, 984], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 990, "focalAPIEnd": 1022, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/accessibilityservice/src/android/accessibilityservice/cts/AccessibilityEndToEndTestActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.end_to_end_test);\n\n    ListAdapter listAdapter =\n        new BaseAdapter() {\n          public View getView(int position, View convertView, ViewGroup parent) {\n            TextView textView = (TextView) View.inflate(context, R.layout.list_view_row, null);\n            textView.setText((String) getItem(position));\n            return textView;\n          }\n\n          public long getItemId(int position) {\n            return position;\n          }\n\n          public Object getItem(int position) {\n            if (position == 0) {\n              return context.getString(R.string.first_list_item);\n            } else {\n              return context.getString(R.string.second_list_item);\n            }\n          }\n\n          public int getCount() {\n            return 2;\n          }\n        };\n\n    ListView listView = (ListView) findViewById(R.id.listview);\n    listView.setAdapter(listAdapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5136, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null&&adapter!=null", "guardType": "IF {", "guardExpressionStart": 2589, "guardExpressionEnd": 2631, "guardBlockStart": 2589, "guardBlockEnd": 2816, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 2640, "focalAPIEnd": 2670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [2711, 2765], "useEnd": [2755, 2801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/practo/ActionBarSherlock/tree/master/library/src/org/holoeverywhere/internal/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n    int fullDark =\n        a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.dialog_full_holo_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.dialog_top_holo_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.dialog_middle_holo_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.dialog_bottom_holo_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.dialog_full_holo_dark);\n    int topBright =\n        a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.dialog_top_holo_dark);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.dialog_middle_holo_dark);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.dialog_bottom_holo_dark);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.dialog_bottom_holo_dark);\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n    views[pos] = contentPanel.getVisibility() == View.GONE ? null : contentPanel;\n    light[pos] = mListView != null;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n    if (lastView != null) {\n      if (setView) {\n        lastView.setBackgroundResource(\n            lastLight ? hasButtons ? bottomMedium : bottomBright : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n    if (mListView != null && mAdapter != null) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5137, "initialization": ["ListAdapter adapter = new InspectionSimpleCursorAdapter(*,*,Cursor,String[],int[])"], "initializationStart": [1498], "initializationEnd": [1618], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 1782, "focalAPIEnd": 1815, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(OnItemClickListener)", "listView.setOnItemLongClickListener(OnItemLongClickListener)"], "useStart": [1821, 1885], "useEnd": [1879, 1951], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wangshukunwsk/Inspection/tree/master/SourceCode/src/com/bchd/inspection/ui/FindWorkerInfo.java", "rawCode": "  public void updatelistview(String Name) {\n\n    String col1 = \"PostTypeID as _id\"; // 获取第1列 使用Cursor相关的Adapter时需要一个自增的列，且名字必需为 _id\n    String col2 = \"Name\";\n    String col3 = \"WorkGroupName\";\n    String col4 = \"TicketRoomName\";\n    String col5 = \"PostTypeName\";\n    String col6 = \"WorkID\";\n    String col7 = \"WorkGroupID\";\n\n    String[] ColumnNames = {col1, col2, col3, col4, col5, col6, col7};\n    int[] ColumnControls =\n        new int[] {R.id.col1, R.id.col2, R.id.col3, R.id.col4, R.id.col5, R.id.col6, R.id.col7};\n    // String Selections = \"\";\n    // String[] SelectionsArgs = {\"%\"+ Name +\"%\"};\n    String GroupBy =\n        \" PostTypeID,Name,WorkGroupName,TicketRoomName,PostTypeName,WorkID,WorkGroupID \";\n    String Having = \" Name like '%\" + Name + \"%' AND PostTypeID not in (1,2,120)\";\n    String OrderBy = \"PDisplayOrder,CDisplayOrder,HDisplayOrder,TDisplayOrder,GDisplayOrder,WorkID\";\n    // 清cursor\n    if ((_result != null) && (!_result.isClosed())) {\n      Log.e(\"lily\", \"GetTableInfos Cursor :close\");\n      _result.close();\n    }\n    _result =\n        _commdata.GetTableInfos(\n            _db, \"View_Mobile_WorkIDInfo\", ColumnNames, null, null, GroupBy, Having, OrderBy);\n\n    ColumnNames[0] = \"_id\"; // 获取第1列 使用Cursor相关的Adapter时需要一个自增的列，且名字必需为 _id\n\n    if (!_result.moveToNext()) {\n      Toast.makeText(FindWorkerInfo.this, \"无类似人员信息！\", Toast.LENGTH_SHORT);\n    } else {\n      ll_data.setVisibility(View.VISIBLE);\n    }\n    _result.moveToFirst();\n    ListAdapter adapter =\n        new InspectionSimpleCursorAdapter(\n            this, R.layout.listview_workerinfo, _result, ColumnNames, ColumnControls);\n\n    // layout为listView的布局文件，包括三个TextView，用来显示三个列名所对应的值\n    // ColumnNames为数据库的表的列名\n    // 最后一个参数是int[]类型的，为view类型的id，用来显示ColumnNames列名所对应的值。view的类型为TextView\n    lv_workerInfo.setAdapter(adapter);\n    lv_workerInfo.setOnItemClickListener(new ItemClickEvent());\n    lv_workerInfo.setOnItemLongClickListener(new ItemLongClickEvent());\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5138, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [269], "initializationEnd": [307], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 313, "focalAPIEnd": 341, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/DictionaryElementPickerFragment.java", "rawCode": "  private void fillList() {\n    List<T> objs = dataSource.getEntityList();\n    adapterZ = new DictionaryListViewAdapter<T>(getActivity(), objs);\n    // trigger filter to it being applied on resume\n\n    ListAdapter adapter = adapterZ;\n    ListView listView = (ListView) view.findViewById(R.id.dictionarylist);\n    listView.setAdapter(adapter);\n    this.adapterZ.getFilter().filter(((SearchView) view.findViewById(R.id.dic_search)).getQuery());\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5139, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new ListAdapter()"], "initializationStart": [191, 245], "initializationEnd": [227, 262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 268, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/app/GDDrmInfoDialog.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.publication_drminfo_view);\n\n    mDrmInfoList = (ListView) findViewById(R.id.athorization_info);\n\n    mAdapter = new ListAdapter();\n    mDrmInfoList.setAdapter(mAdapter);\n\n    if (mDrmInfo != null) {\n      updateView();\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5140, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [178, 239], "initializationEnd": [205, 262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 268, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerForContextMenu(listView)"], "useStart": [299], "useEnd": [327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/ListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5141, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 56, "focalAPIEnd": 80, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(OnItemClickListener)", "listView.setOnItemLongClickListener(OnItemLongClickListener)"], "useStart": [86, 138], "useEnd": [132, 192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RaffaeleSgarro/abc/tree/master/src/com/zybnet/abc/view/IndexView.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    list.setAdapter(adapter);\n    list.setOnItemClickListener(itemClickListener);\n    list.setOnItemLongClickListener(itemLongClickListener);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5142, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 4417, "focalAPIEnd": 4447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [4488, 4542], "useEnd": [4532, 4578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/com/android/internal/app/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n\n    /* Get all the different background required */\n    int fullDark = a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.popup_full_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.popup_top_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.popup_center_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.popup_bottom_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.popup_full_bright);\n    int topBright = a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.popup_top_bright);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.popup_center_bright);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.popup_bottom_bright);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.popup_bottom_medium);\n\n    /*\n     * We now set the background of all of the sections of the alert.\n     * First collect together each section that is being displayed along\n     * with whether it is on a light or dark background, then run through\n     * them setting their backgrounds. This is complicated because we need\n     * to correctly use the full, top, middle, and bottom graphics depending\n     * on how many views they are and where they appear.\n     */\n\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n\n    /* The contentPanel displays either a custom text message or\n     * a ListView. If it's text we should use the dark background\n     * for ListView we should use the light background. If neither\n     * are there the contentPanel will be hidden so set it as null.\n     */\n    views[pos] = (contentPanel.getVisibility() == View.GONE) ? null : contentPanel;\n    light[pos] = mListView != null;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n\n    if (lastView != null) {\n      if (setView) {\n\n        /* ListViews will use the Bright background but buttons use\n         * the Medium background.\n         */\n        lastView.setBackgroundResource(\n            lastLight ? (hasButtons ? bottomMedium : bottomBright) : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n\n    /* TODO: uncomment section below. The logic for this should be if\n     * it's a Contextual menu being displayed AND only a Cancel button\n     * is shown then do this.\n     */\n    // if (hasButtons && (mListView != null)) {\n\n    /* Yet another *special* case. If there is a ListView with buttons\n     * don't put the buttons on the bottom but instead put them in the\n     * footer of the ListView this will allow more items to be\n     * displayed.\n     */\n\n    /*\n    contentPanel.setBackgroundResource(bottomBright);\n    buttonPanel.setBackgroundResource(centerMedium);\n    ViewGroup parent = (ViewGroup) mWindow.findViewById(R.id.parentPanel);\n    parent.removeView(buttonPanel);\n    AbsListView.LayoutParams params = new AbsListView.LayoutParams(\n    AbsListView.LayoutParams.MATCH_PARENT,\n    AbsListView.LayoutParams.MATCH_PARENT);\n    buttonPanel.setLayoutParams(params);\n    mListView.addFooterView(buttonPanel);\n    */\n    // }\n\n    if ((mListView != null) && (mAdapter != null)) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5143, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [361], "initializationEnd": [396], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 403, "focalAPIEnd": 431, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cyclestreets/android/tree/master/libraries/cyclestreets-view/src/main/java/net/cyclestreets/util/Dialog.java", "rawCode": "  public static AlertDialog listViewDialog(\n      final Context context,\n      final int titleResId,\n      final ListAdapter adapter,\n      final DialogInterface.OnClickListener yesAction,\n      final DialogInterface.OnClickListener noAction) {\n    final View layout = View.inflate(context, R.layout.listdialog, null);\n    final ListView listView = ((ListView) layout.findViewById(R.id.list_view));\n    listView.setAdapter(adapter);\n\n    final AlertDialog.Builder builder = newBuilder(context);\n    if (titleResId != -1) builder.setTitle(titleResId);\n    if (yesAction != null) builder.setPositiveButton(\"OK\", yesAction);\n\n    final DialogInterface.OnClickListener noActionListener =\n        noAction != null ? noAction : MessageBox.NoAction;\n    builder.setNegativeButton(\"Cancel\", noActionListener);\n    builder.setOnCancelListener(\n        new DialogInterface.OnCancelListener() {\n          @Override\n          public void onCancel(DialogInterface dialog) {\n            noActionListener.onClick(dialog, -1);\n          }\n        });\n\n    builder.setView(layout);\n\n    return show(builder);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5144, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 123, "guardExpressionEnd": 141, "guardBlockStart": 123, "guardBlockEnd": 403, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 150, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dodyg/AndroidRivers/tree/master/HoloEverywhere-master/library/src/org/holoeverywhere/app/ListFragment.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5145, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new BandSetArrayAdapter(*,List<BandSet>)"], "initializationStart": [1111, 1898], "initializationEnd": [1148, 1946], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setOnItemClickListener(OnItemClickListener)"], "configurationStart": [2033], "configurationEnd": [2084], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 2090, "focalAPIEnd": 2128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sniderzero/UTPRO/tree/master/UltitrackPro/src/com/appsmarttech/ut90/BandSet_Fragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    View vBandSet = inflater.inflate(R.layout.bandset_fragment, container, false);\n\n    // open preferences\n    spPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\n\n    // declare preference editor\n    ePreferences = spPreferences.edit();\n\n    // grabbing the active program from preferences\n    sActiveBand = spPreferences.getString(\"kActiveBandSet\", \"0\");\n\n    // converting it to Integer\n    iActiveBand = Integer.valueOf(sActiveBand);\n\n    // changing action bar settings\n    actionBar = getSherlockActivity().getSupportActionBar();\n\n    // sets home button as enabled (the app icon in the left corner)\n    setHasOptionsMenu(true);\n    actionBar.setHomeButtonEnabled(true);\n    actionBar.setDisplayShowHomeEnabled(true);\n    actionBar.setDisplayHomeAsUpEnabled(true);\n\n    // setting activity title\n    getActivity().setTitle(\"Select Bands\");\n\n    // assigning listview to listview widget\n    lvBandSet = (ListView) vBandSet.findViewById(R.id.lvBandSet);\n\n    // declearing database helper\n    db = (new DBHelper_activity(getActivity()));\n\n    // building list of programs\n    List<BandSet> BandSets = db.getAllBandSets();\n\n    // building the onclick listener for the lvPrograms Listview\n    lvBandSetListener =\n        new OnItemClickListener() {\n\n          @Override\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n            // grabbing the selected item from lvPrograms\n            bsSelected = (BandSet) (lvBandSet.getItemAtPosition(position));\n            View v = null;\n\n            // going to list of days\n            // startActivity(inDays);\n            diaglogBands(v);\n          }\n        };\n\n    // setting up adapter\n    lvBandSetAdapter = new BandSetArrayAdapter(getActivity(), BandSets);\n\n    // setting click listener, long click listener, and adapter to the listview\n    lvBandSet.setOnItemClickListener(lvBandSetListener);\n    lvBandSet.setAdapter(lvBandSetAdapter);\n\n    return vBandSet;\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5146, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 4417, "focalAPIEnd": 4447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [4488, 4542], "useEnd": [4532, 4578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/com/android/internal/app/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n\n    /* Get all the different background required */\n    int fullDark = a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.popup_full_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.popup_top_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.popup_center_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.popup_bottom_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.popup_full_bright);\n    int topBright = a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.popup_top_bright);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.popup_center_bright);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.popup_bottom_bright);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.popup_bottom_medium);\n\n    /*\n     * We now set the background of all of the sections of the alert.\n     * First collect together each section that is being displayed along\n     * with whether it is on a light or dark background, then run through\n     * them setting their backgrounds. This is complicated because we need\n     * to correctly use the full, top, middle, and bottom graphics depending\n     * on how many views they are and where they appear.\n     */\n\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n\n    /* The contentPanel displays either a custom text message or\n     * a ListView. If it's text we should use the dark background\n     * for ListView we should use the light background. If neither\n     * are there the contentPanel will be hidden so set it as null.\n     */\n    views[pos] = (contentPanel.getVisibility() == View.GONE) ? null : contentPanel;\n    light[pos] = mListView != null;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n\n    if (lastView != null) {\n      if (setView) {\n\n        /* ListViews will use the Bright background but buttons use\n         * the Medium background.\n         */\n        lastView.setBackgroundResource(\n            lastLight ? (hasButtons ? bottomMedium : bottomBright) : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n\n    /* TODO: uncomment section below. The logic for this should be if\n     * it's a Contextual menu being displayed AND only a Cancel button\n     * is shown then do this.\n     */\n    // if (hasButtons && (mListView != null)) {\n\n    /* Yet another *special* case. If there is a ListView with buttons\n     * don't put the buttons on the bottom but instead put them in the\n     * footer of the ListView this will allow more items to be\n     * displayed.\n     */\n\n    /*\n    contentPanel.setBackgroundResource(bottomBright);\n    buttonPanel.setBackgroundResource(centerMedium);\n    ViewGroup parent = (ViewGroup) mWindow.findViewById(R.id.parentPanel);\n    parent.removeView(buttonPanel);\n    AbsListView.LayoutParams params = new AbsListView.LayoutParams(\n    AbsListView.LayoutParams.MATCH_PARENT,\n    AbsListView.LayoutParams.MATCH_PARENT);\n    buttonPanel.setLayoutParams(params);\n    mListView.addFooterView(buttonPanel);\n    */\n    // }\n\n    if ((mListView != null) && (mAdapter != null)) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5147, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robomorphine/strictmode/tree/master/src/strictmode-viewer-app/src/com/robomorphine/strictmode/viewer/fragment/ConfigurableListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5148, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jjongpark/qwer-lib/tree/master/src/com/lge/app/floating/FloatableListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5149, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 80, "focalAPIEnd": 104, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vogtp/android-CPU-tuner/tree/master/src/ch/amana/android/cputuner/view/widget/ListPopupWindowStandalone.java", "rawCode": "  public void setAdapter(ListAdapter adapter) {\n    this.adapter = adapter;\n    list.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5150, "initialization": ["ListAdapter adapter = new ListAdapter(Context,ArrayList<Object>)"], "initializationStart": [98], "initializationEnd": [134], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 143, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(OnItemClickListener)"], "useStart": [186], "useEnd": [223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lbaye/repo/tree/master/android/src/com/socmaps/widget/SearchResultDialog.java", "rawCode": "  private void generateList() {\n\n    if (objcetList != null) {\n\n      ListAdapter myListAdapter = new ListAdapter(context, objcetList);\n\n      listView.setAdapter(myListAdapter);\n\n      listView.setOnItemClickListener(this);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5151, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/uservoice/uservoice-android-sdk/tree/master/UserVoiceSDK/src/com/uservoice/uservoicesdk/compatibility/FragmentListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5152, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5153, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 545, "focalAPIEnd": 577, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Pw4rr1er/DemoBirthday/tree/master/src/com/appndroid/crick20/ui/tabtest.java", "rawCode": "  @Override\n  protected void onResume() {\n    // TODO Auto-generated method stub\n    int recordCount = getDataFromDB(\"Group1\");\n    fillData(lv);\n\n    recordCount = getDataFromDB(\"Group2\");\n    fillData(lv1);\n    super.onResume();\n    db = openOrCreateDatabase(\"worldcupt20.db\", SQLiteDatabase.CREATE_IF_NECESSARY, null);\n\n    m_cursor =\n        db.rawQuery(\n            \"select * from schedule where gang ='\" + \"Group1\" + \"' AND WinnerTeam =''\", null);\n    m_cursor.moveToFirst();\n    m_adapter = new upcomingAdapter(this, m_cursor, true);\n    upcominglv.setAdapter(m_adapter);\n\n    m_cursor1 =\n        db.rawQuery(\n            \"select * from schedule where gang ='\" + \"Group2\" + \"' AND WinnerTeam =''\", null);\n    m_cursor1.moveToFirst();\n    m_adapter1 = new upcomingAdapter(this, m_cursor1, true);\n    upcominglv1.setAdapter(m_adapter1);\n    // Log.d(\"cursor\", \"cursor count is \" + m_cursor.getCount() + \"-\"\n    // + m_cursor1.getCount());\n    if (menuOut) {\n      menu.setVisibility(View.INVISIBLE);\n      menuOut = false;\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5154, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 52, "focalAPIEnd": 76, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ax003d/sichu_android/tree/master/sichu/src/com/ax003d/sichu/widget/NavigationWidget.java", "rawCode": "  public void setAdapter(ListAdapter adapter) {\n    list.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5155, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new ListAdapter(ArrayList<ListItem>,*)"], "initializationStart": [177, 665], "initializationEnd": [202, 692], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["adapter.setSubject(*)"], "configurationStart": [698], "configurationEnd": [722], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 729, "focalAPIEnd": 755, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setClickable(boolean)", "listView.setTextFilterEnabled(boolean)", "registerForContextMenu(listView)"], "useStart": [761, 792, 832], "useEnd": [786, 825, 862], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DanDragan/Voice-Tasker/tree/master/src/ncit/android/voicetasker/Activity_Load.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_shopping);\n\n    lvShop = (ListView) findViewById(R.id.lvShop);\n\n    btnSpeak = (Button) findViewById(R.id.btnSpeak_shop);\n    btnReset = (Button) findViewById(R.id.btnReset_shop);\n    btnSave = (Button) findViewById(R.id.btnSave_shop);\n    btnEdit_shop = (Button) findViewById(R.id.btnEditBudget);\n\n    tvTotal = (TextView) findViewById(R.id.tvTotal);\n    tvBudget = (TextView) findViewById(R.id.tvBudget);\n\n    total = 0;\n    speechBudget = false;\n\n    list = new ArrayList<ListItem>();\n    this.init(list);\n\n    adapter = new ListAdapter(list, this);\n    adapter.setSubject(this);\n\n    lvShop.setAdapter(adapter);\n    lvShop.setClickable(true);\n    lvShop.setTextFilterEnabled(true);\n\n    registerForContextMenu(lvShop);\n\n    btnSpeak.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            speechWhere = false;\n            speechFunction(\"What would you like to add, Master?\");\n          }\n        });\n\n    btnSave.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            PromptDialog dlg =\n                new PromptDialog(Activity_Load.this, fileName) {\n\n                  @Override\n                  public boolean onOkClicked(String input) {\n                    // do something\n                    setOkClicked(input);\n\n                    return true; // true = close dialog\n                  }\n                };\n\n            dlg.show();\n          }\n        });\n\n    btnReset.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            adapter.notifyDataSetChanged();\n            adapter.notifyDataSetInvalidated();\n            total = 0;\n            tvTotal.setText(\"TOTAL : \");\n            tvTotal.setTextColor(Color.rgb(0, 0, 0));\n            list.clear();\n          }\n        });\n\n    btnEdit_shop.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            speechBudget = true;\n            speechFunction(\"Please tell me your budget, Master\");\n          }\n        });\n\n    tvBudget.setOnLongClickListener(\n        new View.OnLongClickListener() {\n\n          @Override\n          public boolean onLongClick(View v) {\n\n            PromptDialog dlg =\n                new PromptDialog(Activity_Load.this, String.valueOf(budget), \"budget\") {\n\n                  @Override\n                  public boolean onOkClicked(String input) {\n\n                    try {\n                      String newBudget = input.replaceAll(\"([^\\\\d\\\\.])*\", \"\");\n                      if (!newBudget.equals(\"\")) {\n                        tvBudget.setText(\"BUDGET : \" + newBudget);\n                        budget = Double.parseDouble(newBudget);\n\n                        calculateTotal();\n                      }\n                    } catch (Exception e) {\n                      e.printStackTrace();\n                      return false;\n                    }\n                    return true; // true = close dialog\n                  }\n                };\n\n            dlg.show();\n\n            return true;\n          }\n        });\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5156, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null&&adapter!=null", "guardType": "IF {", "guardExpressionStart": 2589, "guardExpressionEnd": 2631, "guardBlockStart": 2589, "guardBlockEnd": 2816, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 2640, "focalAPIEnd": 2670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [2711, 2765], "useEnd": [2755, 2801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dodyg/AndroidRivers/tree/master/HoloEverywhere-master/library/src/org/holoeverywhere/internal/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n    int fullDark =\n        a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.dialog_full_holo_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.dialog_top_holo_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.dialog_middle_holo_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.dialog_bottom_holo_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.dialog_full_holo_dark);\n    int topBright =\n        a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.dialog_top_holo_dark);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.dialog_middle_holo_dark);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.dialog_bottom_holo_dark);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.dialog_bottom_holo_dark);\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n    views[pos] = contentPanel.getVisibility() == View.GONE ? null : contentPanel;\n    light[pos] = mListView != null;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n    if (lastView != null) {\n      if (setView) {\n        lastView.setBackgroundResource(\n            lastLight ? hasButtons ? bottomMedium : bottomBright : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n    if (mListView != null && mAdapter != null) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5157, "initialization": ["ListAdapter adapter = new ListAdapter(ArrayList<CarFacade>,*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [293, 349], "initializationEnd": [318, 372], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 378, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setClickListener(listView)"], "useStart": [406], "useEnd": [426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gkiko/MyAuto/tree/master/src/com/example/myauto/MainActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.tab1);\n\n    thisActivity = this;\n    ls =\n        (ArrayList<CarFacade>) getIntent().getExtras().getSerializable(FirstPageActivity.bundleKey);\n\n    adapter = new ListAdapter(ls, this);\n    ListView lv = (ListView) findViewById(R.id.tab1);\n    lv.setAdapter(adapter);\n    setClickListener(lv);\n\n    downloader.addMyChangeListener(this);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5158, "initialization": ["ListView listView = getListView()", "ListAdapter adapter = ListView.getAdapter()"], "initializationStart": [114, 513], "initializationEnd": [127, 534], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setItemsCanFocus(boolean)", "listView.addHeaderView(Button)", "listView.addFooterView(Button)", "listView.getAdapter()"], "configurationStart": [133, 285, 442, 513], "configurationEnd": [164, 315, 472, 534], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 540, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/tests/coretests/src/android/widget/listview/ListWithHeaders.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final ListView listView = getListView();\n    listView.setItemsCanFocus(true);\n\n    for (int i = 0; i < 12; i++) {\n      Button header = new Button(this);\n      header.setText(\"Header View\");\n      listView.addHeaderView(header);\n    }\n\n    for (int i = 0; i < 12; i++) {\n      Button footer = new Button(this);\n      footer.setText(\"Footer View\");\n      listView.addFooterView(footer);\n    }\n\n    final ListAdapter adapter = listView.getAdapter();\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5159, "initialization": ["ListView listView = getListView()", "ListAdapter adapter = ListView.getAdapter()"], "initializationStart": [114, 513], "initializationEnd": [127, 534], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setItemsCanFocus(boolean)", "listView.addHeaderView(Button)", "listView.addFooterView(Button)", "listView.getAdapter()"], "configurationStart": [133, 285, 442, 513], "configurationEnd": [164, 315, 472, 534], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 540, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/tests/coretests/src/android/widget/listview/ListWithHeaders.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final ListView listView = getListView();\n    listView.setItemsCanFocus(true);\n\n    for (int i = 0; i < 12; i++) {\n      Button header = new Button(this);\n      header.setText(\"Header View\");\n      listView.addHeaderView(header);\n    }\n\n    for (int i = 0; i < 12; i++) {\n      Button footer = new Button(this);\n      footer.setText(\"Footer View\");\n      listView.addFooterView(footer);\n    }\n\n    final ListAdapter adapter = listView.getAdapter();\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5160, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/java/android/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5161, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 179, "focalAPIEnd": 204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/greendroid/GreenDroid/src/greendroid/app/GDListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureLayout();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5162, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5163, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new ListAdapter(*)"], "initializationStart": [159, 207], "initializationEnd": [190, 228], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 234, "focalAPIEnd": 268, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/app/settings/GDProductsActivity.java", "rawCode": "  public void initializeView() {\n    super.initializeView();\n\n    mSmartcardNumberView = (TextView) findViewById(R.id.card_id);\n    mProductsList = (ListView) findViewById(R.id.product_list);\n    mAdapter = new ListAdapter(this);\n    mProductsList.setAdapter(mAdapter);\n\n    mSNLabelStr = getResources().getString(R.string.smartcard_number);\n    mSmartcardNumberView.setText(mSNLabelStr);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5164, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/openintents/tree/master/compatibility/AndroidSupportV2/src/android/support/v2/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5165, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/app/ListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5166, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new ListAdapter(*)"], "initializationStart": [201, 267], "initializationEnd": [247, 288], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 506, "focalAPIEnd": 538, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zwycid/dimension-drive-downside/tree/master/master/src/mju/t3rd/sailingtext/lk/option/tutorial/Tutorial.java", "rawCode": "  public void init() {\n    blank = (TextView) this.findViewById(R.id.OptionTutorialTextviewBlank);\n    title = (TextView) this.findViewById(R.id.OptionTutorialTextviewTitle);\n    listView = (ListView) this.findViewById(R.id.OptionTutorialListView);\n    listAdapter = new ListAdapter(this);\n\n    LKAndroid.initBlankView(blank, getPreferTextSizeForWindow(TEXT, LARGE));\n\n    title.setTextSize(getPreferTextSizeForWindow(TEXT, LARGE));\n    LKAndroid.initTextViewShadow(title, (int) title.getTextSize());\n\n    listView.setAdapter(listAdapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5167, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [61], "initializationEnd": [98], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 104, "focalAPIEnd": 135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(OnItemClickListener)"], "useStart": [141], "useEnd": [181], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xa17d/MTS/tree/master/MTSApp/src/moco/android/mtsdevice/salvage/SalvageListActivity.java", "rawCode": "  private void initContent() {\n\n    patientView = (ListView) findViewById(R.id.patientSalvageView);\n    patientView.setAdapter(adapter);\n    patientView.setOnItemClickListener(this);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5168, "initialization": ["ListAdapter adapter = new PlayerListAdapter(*,*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [286, 387], "initializationEnd": [354, 416], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 422, "focalAPIEnd": 446, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/david-sabata/DungeonsAndStudents/tree/master/src/cz/davidsabata/at/postareg/immandbeta120803/PlayersSetupActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_players_setup);\n\n    GameService gameService = GameService.getInstance();\n    gameService.setGameStateListener(this);\n\n    ListAdapter adapter = new PlayerListAdapter(getLayoutInflater(), gameService.getPlayers());\n    ListView list = (ListView) findViewById(R.id.playerList);\n    list.setAdapter(adapter);\n\n    findViewById(R.id.run).setOnClickListener(this);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5169, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 130, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/practo/ActionBarSherlock/tree/master/library/src/org/holoeverywhere/app/ListActivity.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5170, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 4548, "focalAPIEnd": 4578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [4619, 4673], "useEnd": [4663, 4709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/com/android/internal/app/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n\n    /* Get all the different background required */\n    int fullDark = a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.popup_full_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.popup_top_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.popup_center_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.popup_bottom_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.popup_full_bright);\n    int topBright = a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.popup_top_bright);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.popup_center_bright);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.popup_bottom_bright);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.popup_bottom_medium);\n    int centerMedium =\n        a.getResourceId(R.styleable.AlertDialog_centerMedium, R.drawable.popup_center_medium);\n\n    /*\n     * We now set the background of all of the sections of the alert.\n     * First collect together each section that is being displayed along\n     * with whether it is on a light or dark background, then run through\n     * them setting their backgrounds. This is complicated because we need\n     * to correctly use the full, top, middle, and bottom graphics depending\n     * on how many views they are and where they appear.\n     */\n\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n\n    /* The contentPanel displays either a custom text message or\n     * a ListView. If it's text we should use the dark background\n     * for ListView we should use the light background. If neither\n     * are there the contentPanel will be hidden so set it as null.\n     */\n    views[pos] = (contentPanel.getVisibility() == View.GONE) ? null : contentPanel;\n    light[pos] = mListView == null ? false : true;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n\n    if (lastView != null) {\n      if (setView) {\n\n        /* ListViews will use the Bright background but buttons use\n         * the Medium background.\n         */\n        lastView.setBackgroundResource(\n            lastLight ? (hasButtons ? bottomMedium : bottomBright) : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n\n    /* TODO: uncomment section below. The logic for this should be if\n     * it's a Contextual menu being displayed AND only a Cancel button\n     * is shown then do this.\n     */\n    // if (hasButtons && (mListView != null)) {\n\n    /* Yet another *special* case. If there is a ListView with buttons\n     * don't put the buttons on the bottom but instead put them in the\n     * footer of the ListView this will allow more items to be\n     * displayed.\n     */\n\n    /*\n    contentPanel.setBackgroundResource(bottomBright);\n    buttonPanel.setBackgroundResource(centerMedium);\n    ViewGroup parent = (ViewGroup) mWindow.findViewById(R.id.parentPanel);\n    parent.removeView(buttonPanel);\n    AbsListView.LayoutParams params = new AbsListView.LayoutParams(\n    AbsListView.LayoutParams.FILL_PARENT,\n    AbsListView.LayoutParams.FILL_PARENT);\n    buttonPanel.setLayoutParams(params);\n    mListView.addFooterView(buttonPanel);\n    */\n    // }\n\n    if ((mListView != null) && (mAdapter != null)) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5171, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 123, "guardExpressionEnd": 141, "guardBlockStart": 123, "guardBlockEnd": 403, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 150, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Prototik/HoloEverywhere/tree/master/library/src/org/holoeverywhere/app/ListFragment.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5172, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/core/java/android/app/ListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5173, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 186, "guardExpressionEnd": 207, "guardBlockStart": 186, "guardBlockEnd": 237, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 208, "focalAPIEnd": 236, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/github/gauges-android/tree/master/app/src/main/java/com/github/mobile/gauges/ui/ItemListFragment.java", "rawCode": "  /**\n   * Set list adapter to use on list view\n   *\n   * @param adapter\n   * @return this fragment\n   */\n  protected ItemListFragment<E> setListAdapter(final ListAdapter adapter) {\n    if (listView != null) listView.setAdapter(adapter);\n    return this;\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5174, "initialization": ["ListAdapter adapter = ListView.getAdapter()", "ListAdapter adapter = new StationsAdapter(*,ArrayList<Station>)"], "initializationStart": [208, 279], "initializationEnd": [230, 342], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.getAdapter()"], "configurationStart": [208], "configurationEnd": [230], "guardCondition": "adapter==null", "guardType": "IF {", "guardExpressionStart": 238, "guardExpressionEnd": 258, "guardBlockStart": 238, "guardBlockEnd": 569, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 352, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shaobin0604/misc/tree/master/HttpClientAsyncTask/src/cn/yo2/aquarium/example/httpclientasynctask/HttpClientAsyncTaskActivity.java", "rawCode": "    @Override\n    protected void onCancelled() {\n      MyLog.i(\"onCancelled\");\n      mInfo.setText(\"onCancelled\");\n\n      ArrayList<Station> stations = new ArrayList<Station>(0);\n\n      ListAdapter adapter = mListView.getAdapter();\n      if (adapter == null) {\n        adapter = new StationsAdapter(HttpClientAsyncTaskActivity.this, stations);\n        mListView.setAdapter(adapter);\n      } else {\n        StationsAdapter stationsAdapter = (StationsAdapter) adapter;\n        stationsAdapter.setStations(stations);\n        stationsAdapter.notifyDataSetChanged();\n      }\n\n      mViewFlipper.setDisplayedChild(CHILD_LIST_VIEW);\n    }\n"}, {"dataset": "setAdapter", "exampleID": 5175, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [267, 328], "initializationEnd": [294, 351], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 357, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setCacheColorHint(int)", "listView.setVerticalFadingEdgeEnabled(boolean)", "registerForContextMenu(listView)"], "useStart": [387, 418, 464], "useEnd": [412, 457, 492], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/TransparentListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    getWindow().setBackgroundDrawable(getResources().getDrawable(R.drawable.gradient));\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n    list.setCacheColorHint(0);\n    list.setVerticalFadingEdgeEnabled(true);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5176, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new HistoryArrayAdapter(*,List<Stat>)"], "initializationStart": [382, 1025], "initializationEnd": [419, 1070], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 1113, "focalAPIEnd": 1151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sniderzero/UTPRO/tree/master/UltitrackPro/src/com/appsmarttech/ut90/History_Fragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    View vHistory = inflater.inflate(R.layout.history_fragment, container, false);\n    // initializing db\n    db = (new DBHelper_activity(getActivity()));\n    // initialize widgets\n    ListView lvHistory = (ListView) vHistory.findViewById(R.id.lvHistory);\n    tvTime = (TextView) vHistory.findViewById(R.id.tvTime);\n    tvReps = (TextView) vHistory.findViewById(R.id.tvRep);\n    tvWeight = (TextView) vHistory.findViewById(R.id.tvWeight);\n    tvBand = (TextView) vHistory.findViewById(R.id.tvBand);\n    tvNotes = (TextView) vHistory.findViewById(R.id.tvNotes);\n    // grab exerID and exerType passed from the activity\n    e = getArguments().getInt(\"kExerID\");\n    iExerType = getArguments().getInt(\"kExerType\");\n    // grabbing list of stats from exercise passed by activity\n    Stats = db.getExerciseStats(e);\n    // setting up adapter\n    lvHistoryAdapter = new HistoryArrayAdapter(getActivity(), Stats);\n\n    // setting adapter to lvHistory\n    lvHistory.setAdapter(lvHistoryAdapter);\n\n    // hiding certain fields based on the exercise type\n    switch (iExerType) {\n      case 1:\n        tvTime.setVisibility(View.GONE);\n        break;\n\n      case 2:\n        tvReps.setVisibility(View.GONE);\n        tvWeight.setVisibility(View.GONE);\n        tvBand.setVisibility(View.GONE);\n    }\n\n    return vHistory;\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5177, "initialization": ["ListAdapter adapter = new GroupListAdapter(*,List<Group>)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [791, 906], "initializationEnd": [825, 938], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.removeAllViewsInLayout()"], "configurationStart": [946], "configurationEnd": [980], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 988, "focalAPIEnd": 1017, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/otternq/RandomName/tree/master/src/com/nickotter/randomname/MainActivity.java", "rawCode": "  public void loadLists() {\n\n    Log.v(LOGTAG, \"loadLists - current group=\" + this.currentGroupArrayIndex);\n\n    // Set up the action bar.\n    ActionBar actionBar = getSupportActionBar();\n    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);\n    actionBar.removeAllTabs();\n\n    List<Group> groups = databaseCRUD.query_group();\n\n    if (groups == null) {\n\n      Intent i = new Intent(MainActivity.this, AddGroup.class);\n      startActivity(i);\n    } else {\n\n      // Toast toast = Toast.makeText(this, \"There are \" + groups.size() + \" groups\",\n      // Toast.LENGTH_SHORT);\n      // toast.show();\n\n      Log.v(LOGTAG, \"passing groups list to adapter\");\n      // ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, R.layout.list_item, groups);\n      ListAdapter adapter = new GroupListAdapter(this, groups);\n\n      Log.v(LOGTAG, \"setting adapter\");\n      ListView groupList = (ListView) findViewById(R.id.groupListView);\n      groupList.removeAllViewsInLayout();\n      groupList.setAdapter(adapter);\n\n      // end content to display groups in slider\n\n      // set up tabs\n\n      // List<Group> groups = databaseCRUD.query_group();\n\n      Log.v(\n          LOGTAG,\n          \"loadLists - current group name=\" + groups.get(this.currentGroupArrayIndex).getName());\n\n      List<MyList> lists = databaseCRUD.query_list(groups.get(this.currentGroupArrayIndex));\n\n      // For each of the lists, add a tab to the action bar.\n      if (lists != null) {\n        Log.v(LOGTAG, \"loadlist - lists != null\");\n        for (MyList list : lists) {\n          // Create a tab with text corresponding to the page title defined by\n          // the adapter. Also specify this Activity object, which implements\n          // the TabListener interface, as the callback (listener) for when\n          // this tab is selected.\n\n          Log.v(LOGTAG, \"adding tab for:\" + list.getName() + \" with id=\" + list.getID());\n\n          Tab tab1 =\n              actionBar\n                  .newTab()\n                  .setText(list.getName())\n                  .setTabListener(new TabListener<DBList>(this, \"Basic\", DBList.class));\n\n          Bundle arguments = new Bundle();\n\n          List<Item> listItems = databaseCRUD.query_item(list);\n          if (listItems != null) {\n\n            for (Item tempItem : listItems) {\n              Log.v(LOGTAG, \"found entry for itemID=\" + tempItem.getID());\n            }\n\n            arguments.putSerializable(\"items\", (Serializable) listItems);\n            arguments.putInt(\"currentGroup\", list.getGroupID());\n\n            tab1.setTag(arguments);\n            actionBar.addTab(tab1);\n          } else {\n            Log.v(LOGTAG, \"No Items detected\");\n            // Intent iitem = new Intent(this, AddItem.class);\n            // iitem.putExtra(\"groupId\", list.getGroupID());\n            // startActivity(iitem);\n          }\n        }\n      } else {\n        Log.v(LOGTAG, \"Group contained no lists\");\n        // Intent ilist = new Intent(this, AddList.class);\n        // ilist.putExtra(\"groupId\", currentGroup);\n        // startActivity(ilist);\n\n      }\n      Log.v(LOGTAG, \"\\tcurrent tab count\" + actionBar.getTabCount());\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5178, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/java/android/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5179, "initialization": ["ListView listView = getView()"], "initializationStart": [698], "initializationEnd": [707], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 761, "focalAPIEnd": 789, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/operations/OperationListFragment.java", "rawCode": "  private void fillOperationList() {\n    event = new EventDataSource(this.getActivity()).getEventById(event.getId());\n    if (adapterZ == null || dataChanged) {\n      dataChanged = false;\n      currencyPairs =\n          new CurrencyPairDataSource(this.getActivity()).getCurrencyPairMapByEventId(event.getId());\n      operations =\n          new OperationDataSource(this.getActivity()).getOperationListByEventId(event.getId());\n      adapterZ = new OperationsListViewAdapter(this.getActivity(), operations);\n      adapterZ.setCurrencyPairRates(currencyPairs);\n      adapterZ.setPrimaryCurrency(event.getPrimaryCurrency());\n    }\n    ListAdapter adapter = adapterZ;\n    ListView listView = (ListView) getView().findViewById(R.id.op_list);\n    fillEventInfo();\n    listView.setAdapter(adapter);\n    OperationListFragment.this\n        .adapterZ\n        .getFilter()\n        .filter(((SearchView) getView().findViewById(R.id.uni_op_searchView)).getQuery());\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5180, "initialization": ["ListView listView = ListView.findViewById(int)", "ListAdapter adapter = new ListAdapter(ArrayList<ListItem>,*)"], "initializationStart": [536, 675], "initializationEnd": [561, 702], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["adapter.setSubject(*)"], "configurationStart": [708], "configurationEnd": [732], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 738, "focalAPIEnd": 764, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setClickable(boolean)", "listView.setTextFilterEnabled(boolean)", "registerForContextMenu(listView)"], "useStart": [770, 801, 840], "useEnd": [795, 834, 870], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DanDragan/Voice-Tasker/tree/master/src/ncit/android/voicetasker/Activity_Shopping.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_shopping);\n\n    btnSpeak_shop = (Button) findViewById(R.id.btnSpeak_shop);\n    btnReset_shop = (Button) findViewById(R.id.btnReset_shop);\n    btnSave_shop = (Button) findViewById(R.id.btnSave_shop);\n    btnEdit_shop = (Button) findViewById(R.id.btnEditBudget);\n\n    tvTotal = (TextView) findViewById(R.id.tvTotal);\n    tvBudget = (TextView) findViewById(R.id.tvBudget);\n\n    lvshop = (ListView) findViewById(R.id.lvShop);\n\n    list = new ArrayList<ListItem>();\n    budget = 0;\n    total = 0;\n\n    speechBudget = false;\n\n    adapter = new ListAdapter(list, this);\n    adapter.setSubject(this);\n    lvshop.setAdapter(adapter);\n    lvshop.setClickable(true);\n    lvshop.setTextFilterEnabled(true);\n    registerForContextMenu(lvshop);\n\n    dir = getExternalFilesDir(null);\n\n    btnSpeak_shop.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            speechWhere = false;\n            speechFunction(\"What would you like to add, Master?\");\n          }\n        });\n\n    btnSave_shop.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            PromptDialog dlg =\n                new PromptDialog(Activity_Shopping.this, R.string.title, R.string.enter_comment) {\n\n                  @Override\n                  public boolean onOkClicked(String input) {\n                    // do something\n                    setOkClicked(input);\n\n                    return true; // true = close dialog\n                  }\n                };\n\n            dlg.show();\n          }\n        });\n\n    btnReset_shop.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            adapter.notifyDataSetChanged();\n            adapter.notifyDataSetInvalidated();\n            total = 0;\n            tvTotal.setText(\"TOTAL : \");\n            tvTotal.setTextColor(Color.rgb(0, 0, 0));\n            list.clear();\n          }\n        });\n\n    btnEdit_shop.setOnClickListener(\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            speechBudget = true;\n            speechFunction(\"Please tell me your budget, Master\");\n          }\n        });\n\n    tvBudget.setOnLongClickListener(\n        new View.OnLongClickListener() {\n\n          @Override\n          public boolean onLongClick(View v) {\n\n            PromptDialog dlg =\n                new PromptDialog(Activity_Shopping.this, String.valueOf(budget), \"budget\") {\n\n                  @Override\n                  public boolean onOkClicked(String input) {\n\n                    try {\n                      String newBudget = input.replaceAll(\"([^\\\\d\\\\.])*\", \"\");\n                      if (!newBudget.equals(\"\")) {\n                        tvBudget.setText(\"BUDGET : \" + newBudget);\n                        budget = Double.parseDouble(newBudget);\n\n                        calculateTotal();\n                      }\n                    } catch (Exception e) {\n                      e.printStackTrace();\n                      return false;\n                    }\n                    return true; // true = close dialog\n                  }\n                };\n\n            dlg.show();\n\n            return true;\n          }\n        });\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5181, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "adapter!=null && listView!=null", "guardType": "IF {", "guardExpressionStart": 27, "guardExpressionEnd": 44, "guardBlockStart": 27, "guardBlockEnd": 350, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 84, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Throy/freezing-ninja/tree/master/GeoRedUy.Client/src/georeduy/client/util/SlideMenu.java", "rawCode": "  public void fill() {\n    if (list != null) {\n      if (adapter != null) {\n        list.setAdapter(adapter);\n      }\n      /*else {\n      SlideMenuAdapter.MenuDesc[] items = new SlideMenuAdapter.MenuDesc[5];\n      //fill the menu-items here\n      SlideMenuAdapter adap = new SlideMenuAdapter(act, items);\n      list.setAdapter(adap);\n      }*/\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5182, "initialization": ["ListAdapter adapter = new ListAdapter(CustomActivity,ContactCheckedArray)"], "initializationStart": [311], "initializationEnd": [349], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.getFirstVisiblePosition()", "listView.getChildAt(int)"], "configurationStart": [146, 196], "configurationEnd": [181, 219], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 355, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(ListAdapter)", "listView.setSelectionFromTop(int,int)"], "useStart": [390, 453], "useEnd": [431, 494], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kwatson7/ShareBear/tree/master/src/com/instantPhotoShare/Activities/AddUsersToGroup.java", "rawCode": "  /** Update the visible view if things have changed. */\n  private void updateVisibleView() {\n\n    // save index and top position\n    int index = mListView.getFirstVisiblePosition();\n    View v = mListView.getChildAt(0);\n    int top = (v == null) ? 0 : v.getTop();\n\n    // set adapter\n    ListAdapter adapter = new ListAdapter(mAct, mContactChecked);\n    mListView.setAdapter(adapter);\n    mListView.setOnItemClickListener(adapter);\n\n    // restore\n    mListView.setSelectionFromTop(index, top);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5183, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [246], "initializationEnd": [283], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 289, "focalAPIEnd": 320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xa17d/MTS/tree/master/MTSApp/src/moco/android/mtsdevice/therapy/TherapyListActivity.java", "rawCode": "  private void initContent() {\n\n    area = (TextView) findViewById(R.id.textViewTherapyListArea);\n\n    area.setText(\"Behandlungsplatz \" + Area.getActiveArea().toString());\n    area.setTextColor(Area.getAreaColor());\n\n    patientView = (ListView) findViewById(R.id.patientTherapyView);\n    patientView.setAdapter(adapter);\n\n    // TODO Listener\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5184, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [178, 239], "initializationEnd": [205, 262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 268, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerForContextMenu(listView)"], "useStart": [299], "useEnd": [327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/ListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5185, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [398], "initializationEnd": [429], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 487, "focalAPIEnd": 515, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/EventCurrenciesListActivity.java", "rawCode": "  private void fillCurrenciesList() {\n    if (adapterZ == null) {\n      CurrencyPairDataSource dataSource = new CurrencyPairDataSource(this);\n      List<CurrencyPair> cps = dataSource.getCurrencyPairListByEventId(event.getId());\n      adapterZ = new EventCurrenciesListViewAdapter(this, cps, event.getPrimaryCurrency());\n    }\n    ListAdapter adapter = adapterZ;\n    ListView listView = (ListView) findViewById(R.id.currencylist);\n    // trigger filter to it being applied on resume\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5186, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 275, "focalAPIEnd": 304, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cldellow/Ballero/tree/master/src/main/java/greendroid/src/greendroid/app/GDListActivity.java", "rawCode": "  /**\n   * Provides the Adapter for the ListView handled by this {@link GDListActivity}\n   *\n   * @param adapter The ListAdapter to set.\n   */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureLayout();\n      mAdapter = adapter;\n      mListView.setAdapter(adapter);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5187, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fywb251/bsl_impc_android/tree/master/cube-android/src/android/support/v4/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5188, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 52, "focalAPIEnd": 82, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ouchadam/fang/tree/master/app/src/main/java/com/ouchadam/fang/presentation/drawer/FangDrawer.java", "rawCode": "  public void setAdapter(ListAdapter adapter) {\n    drawerList.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5189, "initialization": ["ListView listView = getView()"], "initializationStart": [351], "initializationEnd": [360], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 400, "focalAPIEnd": 428, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nkostyukovich/acctrip/tree/master/src/com/dzebsu/acctrip/dictionary/DictionaryListFragment.java", "rawCode": "  private void fillList() {\n    if (adapterZ == null || dataChanged) {\n      dataChanged = false;\n      List<T> objs = dataSource.getEntityList();\n      adapterZ = new DictionaryListViewAdapter<T>(getActivity(), objs);\n      // trigger filter to it being applied on resume\n\n    }\n    ListAdapter adapter = adapterZ;\n    ListView listView = (ListView) getView().findViewById(R.id.dictionarylist);\n    listView.setAdapter(adapter);\n    this.adapterZ\n        .getFilter()\n        .filter(((SearchView) getView().findViewById(R.id.dic_search)).getQuery());\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5190, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["adapter.setAsAdapterFor(ListView)"], "configurationStart": [373], "configurationEnd": [434], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 455, "focalAPIEnd": 479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setVisibility(*)", "listView.setVisibility(*)"], "useStart": [635, 746], "useEnd": [668, 782], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cayhorstmann/cinequest/tree/master/Android/src/edu/sjsu/cinequest/CinequestTabActivity.java", "rawCode": "  /**\n   * Set a adaper for the current listview. Call this method at the end of\n   * showHeaderSeparatedFilms(List) method after adaper has been populated with items.\n   *\n   * @param adp adapter for the listview\n   */\n  protected final void setListViewAdapter(ListAdapter adp) {\n    // set correct list adapter\n    if (adp instanceof SeparatedListIndexedAdapter) {\n      ((SeparatedListIndexedAdapter) adp).setAsAdapterFor(listview);\n    } else {\n      listview.setAdapter(adp);\n    }\n\n    // if there are no items in the list, hide the listview,\n    // and show the emptytextmsg, and vice versa\n    if (adp.getCount() == 0) {\n      listview.setVisibility(View.GONE);\n      mEmptyListViewMessage.setVisibility(View.VISIBLE);\n    } else {\n      listview.setVisibility(View.VISIBLE);\n      mEmptyListViewMessage.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5191, "initialization": ["ListAdapter adapter = new ListAdapter(CustomActivity,ContactCheckedArray)"], "initializationStart": [311], "initializationEnd": [349], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.getFirstVisiblePosition()", "listView.getChildAt(int)"], "configurationStart": [146, 196], "configurationEnd": [181, 219], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 355, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(ListAdapter)", "listView.setSelectionFromTop(int,int)"], "useStart": [390, 453], "useEnd": [431, 494], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kwatson7/ShareBear/tree/master/src/com/instantPhotoShare/Activities/AddUsersToGroup2.java", "rawCode": "  /** Update the visible view if things have changed. */\n  private void updateVisibleView() {\n\n    // save index and top position\n    int index = mListView.getFirstVisiblePosition();\n    View v = mListView.getChildAt(0);\n    int top = (v == null) ? 0 : v.getTop();\n\n    // set adapter\n    ListAdapter adapter = new ListAdapter(mAct, mContactChecked);\n    mListView.setAdapter(adapter);\n    mListView.setOnItemClickListener(adapter);\n\n    // restore\n    mListView.setSelectionFromTop(index, top);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5192, "initialization": ["ListView listView = getListView()", "ListAdapter adapter = ListView.getAdapter()"], "initializationStart": [114, 513], "initializationEnd": [127, 534], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["listView.setItemsCanFocus(boolean)", "listView.addHeaderView(Button)", "listView.addFooterView(Button)", "listView.getAdapter()"], "configurationStart": [133, 285, 442, 513], "configurationEnd": [164, 315, 472, 534], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 540, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/tests/coretests/src/android/widget/listview/ListWithHeaders.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    final ListView listView = getListView();\n    listView.setItemsCanFocus(true);\n\n    for (int i = 0; i < 12; i++) {\n      Button header = new Button(this);\n      header.setText(\"Header View\");\n      listView.addHeaderView(header);\n    }\n\n    for (int i = 0; i < 12; i++) {\n      Button footer = new Button(this);\n      footer.setText(\"Footer View\");\n      listView.addFooterView(footer);\n    }\n\n    final ListAdapter adapter = listView.getAdapter();\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5193, "initialization": ["ListView listView = new ListView(Activity)", "ListAdapter adapter = getListAdapter()"], "initializationStart": [2452, 2510], "initializationEnd": [2474, 2526], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 2534, "focalAPIEnd": 2563, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["AlertDialog.Builder.setView(listView)"], "useStart": [2571], "useEnd": [2597], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/webinos/Webinos-Platform/tree/master/webinos/platform/android/app/src/org/webinos/app/wrt/ui/WidgetImportHelper.java", "rawCode": "  Dialog createDialog(int id) {\n    if (id == WidgetListActivity.SCANNING_DIALOG) {\n      ProgressDialog progressDialog = new ProgressDialog(activity);\n      progressDialog.setMessage(activity.getString(R.string.scanning_storage_card));\n      return progressDialog;\n    }\n    if (id == WidgetListActivity.NO_WIDGETS_DIALOG) {\n      AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n      builder\n          .setMessage(\"No widgets found\")\n          .setCancelable(false)\n          .setPositiveButton(\n              \"Scan again\",\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                  dialog.cancel();\n                  scan();\n                }\n              })\n          .setNegativeButton(\n              \"Cancel\",\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                  dialog.cancel();\n                }\n              });\n      return builder.create();\n    }\n    if (id == WidgetListActivity.FOUND_WIDGETS_DIALOG) {\n      AlertDialog.Builder builder = new AlertDialog.Builder(activity);\n      builder\n          .setMessage(\"Available widgets\")\n          .setCancelable(false)\n          .setPositiveButton(\n              \"Install\",\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                  ArrayList<String> selected = new ArrayList<String>();\n                  for (int i = 0; i < wgtFiles.size(); i++) {\n                    String wgtPath = wgtFiles.get(i);\n                    Boolean isChecked = checkedState.get(wgtPath);\n                    if (isChecked != null && isChecked.booleanValue()) {\n                      selected.add(wgtPath);\n                    }\n                  }\n                  Intent installIntent = new Intent(activity, WidgetInstallActivity.class);\n                  installIntent.putExtra(\"path\", selected.toArray(new String[selected.size()]));\n                  activity.startActivity(installIntent);\n                  dialog.cancel();\n                }\n              })\n          .setNegativeButton(\n              \"Cancel\",\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                  dialog.cancel();\n                }\n              });\n      ListView foundList = new ListView(activity);\n      final ListAdapter adapter = getListAdapter();\n      foundList.setAdapter(adapter);\n      builder.setView(foundList);\n      return builder.create();\n    }\n    return null;\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5194, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [178, 239], "initializationEnd": [205, 262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 268, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerForContextMenu(listView)"], "useStart": [299], "useEnd": [327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/ListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5195, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 123, "guardExpressionEnd": 141, "guardBlockStart": 123, "guardBlockEnd": 403, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 150, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/practo/ActionBarSherlock/tree/master/library/src/com/actionbarsherlock/plus/SherlockListPlusFragment.java", "rawCode": "  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5196, "initialization": ["ListAdapter adapter = new SimpleListAdapter(*)", "ListView listView = ListView.findViewById(int)"], "initializationStart": [267, 328], "initializationEnd": [294, 351], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 357, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setCacheColorHint(int)", "listView.setVerticalFadingEdgeEnabled(boolean)", "registerForContextMenu(listView)"], "useStart": [387, 418, 464], "useEnd": [412, 457, 492], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/tests/HwAccelerationTest/src/com/android/test/hwui/TransparentListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    getWindow().setBackgroundDrawable(getResources().getDrawable(R.drawable.gradient));\n    setContentView(R.layout.list_activity);\n\n    ListAdapter adapter = new SimpleListAdapter(this);\n\n    ListView list = (ListView) findViewById(R.id.list);\n    list.setAdapter(adapter);\n    list.setCacheColorHint(0);\n    list.setVerticalFadingEdgeEnabled(true);\n\n    registerForContextMenu(list);\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5197, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "listView!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 188, "guardBlockStart": 170, "guardBlockEnd": 450, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 197, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ischweizer/MoSeS--Client-/tree/master/moses/libs/sources-support-v4/src/java/android/support/v4/app/ListFragment.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    boolean hadAdapter = mAdapter != null;\n    mAdapter = adapter;\n    if (mList != null) {\n      mList.setAdapter(adapter);\n      if (!mListShown && !hadAdapter) {\n        // The list was hidden, and previously didn't have an\n        // adapter. It is now time to show it.\n        setListShown(true, getView().getWindowToken() != null);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5198, "initialization": ["ListView listView = ListView.findViewById(int)"], "initializationStart": [264], "initializationEnd": [299], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 2605, "focalAPIEnd": 2635, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setOnItemClickListener(OnItemClickListener)"], "useStart": [4337], "useEnd": [4372], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apps4av/avare/tree/master/app/src/main/java/com/ds/avare/utils/FolderPreference.java", "rawCode": "  @Override\n  protected View onCreateDialogView() {\n    LayoutInflater layoutInflater =\n        (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    View view = layoutInflater.inflate(R.layout.folder, null);\n\n    mListView = (ListView) view.findViewById(R.id.folder_list);\n    mPathView = (TextView) view.findViewById(R.id.folder_text_path);\n    mButton = (Button) view.findViewById(R.id.folder_button_internal);\n    mButtonSDCard = (Button) view.findViewById(R.id.folder_button_sdcard);\n    mButtonExternal = (Button) view.findViewById(R.id.folder_button_external);\n\n    /*\n     * Bring up permission\n     */\n    if (PackageManager.PERMISSION_GRANTED\n        != ContextCompat.checkSelfPermission(\n            mContext, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n      ActivityCompat.requestPermissions(\n          (Activity) mContext, new String[] {Manifest.permission.WRITE_EXTERNAL_STORAGE}, 101);\n    }\n\n    mButton.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            init(mContext.getFilesDir().getAbsolutePath());\n            loadFileList();\n            mListView.setAdapter(mAdapter);\n          }\n        });\n\n    mButtonExternal.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            /*\n             * Bring up preferences\n             */\n            String path =\n                Environment.getExternalStorageDirectory().getAbsolutePath()\n                    + \"/Android/data/\"\n                    + \"com.ds.avare\";\n            new File(path).mkdirs();\n            init(path);\n            loadFileList();\n            mListView.setAdapter(mAdapter);\n            // Show help for kitkat+ users\n            Toast.makeText(mContext, mContext.getString(R.string.folderHelp), Toast.LENGTH_LONG)\n                .show();\n          }\n        });\n\n    mButtonSDCard.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n\n            /*\n             * Bring up preferences\n             */\n            String path = \"/\" + \"sdcard\" + \"/Android/data/\" + \"com.ds.avare\";\n            new File(path).mkdirs();\n            init(path);\n            loadFileList();\n            mListView.setAdapter(mAdapter);\n            // Show help for kitkat+ users\n            Toast.makeText(mContext, mContext.getString(R.string.folderHelp), Toast.LENGTH_LONG)\n                .show();\n          }\n        });\n\n    /*\n     * Load files from the disk in a list\n     */\n    loadFileList();\n    mListView.setAdapter(mAdapter);\n\n    /*\n     * On click, change folders\n     */\n    OnItemClickListener l =\n        new OnItemClickListener() {\n\n          @Override\n          public void onItemClick(AdapterView<?> parent, View view, int which, long id) {\n\n            mChosenFile = mFileList[which].file;\n            File sel = new File(mPath + \"/\" + mChosenFile);\n            if (sel.isDirectory() && sel.canRead()) {\n              mFirstLevel = false;\n\n              /*\n               * Adds chosen directory to list\n               */\n              mStr.add(mChosenFile);\n              mFileList = null;\n              mPath = new File(sel + \"\");\n            }\n            /*\n             * Checks if 'up' was clicked\n             */\n            else if (mChosenFile.equals(mContext.getString(R.string.Up)) && !sel.exists()) {\n\n              /*\n               * present directory removed from list\n               */\n              String s = mStr.remove(mStr.size() - 1);\n\n              /*\n               * mPath modified to exclude present directory\n               */\n              mPath = new File(mPath.toString().substring(0, mPath.toString().lastIndexOf(s)));\n              mFileList = null;\n\n              /*\n               * if there are no more directories in the list, then\n               * its the first level\n               */\n              if (mStr.isEmpty()) {\n                mFirstLevel = true;\n              }\n            } else {\n              /*\n               * This directory is not writeable\n               */\n              return;\n            }\n            /*\n             * Reload after click\n             */\n            loadFileList();\n            mListView.setAdapter(mAdapter);\n          }\n        };\n\n    mListView.setOnItemClickListener(l);\n\n    return view;\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5199, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 4548, "focalAPIEnd": 4578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["listView.setItemChecked(int,boolean)", "listView.setSelection(int)"], "useStart": [4619, 4673], "useEnd": [4663, 4709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/core/java/com/android/internal/app/AlertController.java", "rawCode": "  private void setBackground(\n      LinearLayout topPanel,\n      LinearLayout contentPanel,\n      View customPanel,\n      boolean hasButtons,\n      TypedArray a,\n      boolean hasTitle,\n      View buttonPanel) {\n\n    /* Get all the different background required */\n    int fullDark = a.getResourceId(R.styleable.AlertDialog_fullDark, R.drawable.popup_full_dark);\n    int topDark = a.getResourceId(R.styleable.AlertDialog_topDark, R.drawable.popup_top_dark);\n    int centerDark =\n        a.getResourceId(R.styleable.AlertDialog_centerDark, R.drawable.popup_center_dark);\n    int bottomDark =\n        a.getResourceId(R.styleable.AlertDialog_bottomDark, R.drawable.popup_bottom_dark);\n    int fullBright =\n        a.getResourceId(R.styleable.AlertDialog_fullBright, R.drawable.popup_full_bright);\n    int topBright = a.getResourceId(R.styleable.AlertDialog_topBright, R.drawable.popup_top_bright);\n    int centerBright =\n        a.getResourceId(R.styleable.AlertDialog_centerBright, R.drawable.popup_center_bright);\n    int bottomBright =\n        a.getResourceId(R.styleable.AlertDialog_bottomBright, R.drawable.popup_bottom_bright);\n    int bottomMedium =\n        a.getResourceId(R.styleable.AlertDialog_bottomMedium, R.drawable.popup_bottom_medium);\n    int centerMedium =\n        a.getResourceId(R.styleable.AlertDialog_centerMedium, R.drawable.popup_center_medium);\n\n    /*\n     * We now set the background of all of the sections of the alert.\n     * First collect together each section that is being displayed along\n     * with whether it is on a light or dark background, then run through\n     * them setting their backgrounds. This is complicated because we need\n     * to correctly use the full, top, middle, and bottom graphics depending\n     * on how many views they are and where they appear.\n     */\n\n    View[] views = new View[4];\n    boolean[] light = new boolean[4];\n    View lastView = null;\n    boolean lastLight = false;\n\n    int pos = 0;\n    if (hasTitle) {\n      views[pos] = topPanel;\n      light[pos] = false;\n      pos++;\n    }\n\n    /* The contentPanel displays either a custom text message or\n     * a ListView. If it's text we should use the dark background\n     * for ListView we should use the light background. If neither\n     * are there the contentPanel will be hidden so set it as null.\n     */\n    views[pos] = (contentPanel.getVisibility() == View.GONE) ? null : contentPanel;\n    light[pos] = mListView == null ? false : true;\n    pos++;\n    if (customPanel != null) {\n      views[pos] = customPanel;\n      light[pos] = mForceInverseBackground;\n      pos++;\n    }\n    if (hasButtons) {\n      views[pos] = buttonPanel;\n      light[pos] = true;\n    }\n\n    boolean setView = false;\n    for (pos = 0; pos < views.length; pos++) {\n      View v = views[pos];\n      if (v == null) {\n        continue;\n      }\n      if (lastView != null) {\n        if (!setView) {\n          lastView.setBackgroundResource(lastLight ? topBright : topDark);\n        } else {\n          lastView.setBackgroundResource(lastLight ? centerBright : centerDark);\n        }\n        setView = true;\n      }\n      lastView = v;\n      lastLight = light[pos];\n    }\n\n    if (lastView != null) {\n      if (setView) {\n\n        /* ListViews will use the Bright background but buttons use\n         * the Medium background.\n         */\n        lastView.setBackgroundResource(\n            lastLight ? (hasButtons ? bottomMedium : bottomBright) : bottomDark);\n      } else {\n        lastView.setBackgroundResource(lastLight ? fullBright : fullDark);\n      }\n    }\n\n    /* TODO: uncomment section below. The logic for this should be if\n     * it's a Contextual menu being displayed AND only a Cancel button\n     * is shown then do this.\n     */\n    // if (hasButtons && (mListView != null)) {\n\n    /* Yet another *special* case. If there is a ListView with buttons\n     * don't put the buttons on the bottom but instead put them in the\n     * footer of the ListView this will allow more items to be\n     * displayed.\n     */\n\n    /*\n    contentPanel.setBackgroundResource(bottomBright);\n    buttonPanel.setBackgroundResource(centerMedium);\n    ViewGroup parent = (ViewGroup) mWindow.findViewById(R.id.parentPanel);\n    parent.removeView(buttonPanel);\n    AbsListView.LayoutParams params = new AbsListView.LayoutParams(\n    AbsListView.LayoutParams.FILL_PARENT,\n    AbsListView.LayoutParams.FILL_PARENT);\n    buttonPanel.setLayoutParams(params);\n    mListView.addFooterView(buttonPanel);\n    */\n    // }\n\n    if ((mListView != null) && (mAdapter != null)) {\n      mListView.setAdapter(mAdapter);\n      if (mCheckedItem > -1) {\n        mListView.setItemChecked(mCheckedItem, true);\n        mListView.setSelection(mCheckedItem);\n      }\n    }\n  }\n"}, {"dataset": "setAdapter", "exampleID": 5200, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = listView.setAdapter(adapter)", "focalAPIStart": 177, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/app/ListActivity.java", "rawCode": "  /** Provide the cursor for the list view. */\n  public void setListAdapter(ListAdapter adapter) {\n    synchronized (this) {\n      ensureList();\n      mAdapter = adapter;\n      mList.setAdapter(adapter);\n    }\n  }\n"}]