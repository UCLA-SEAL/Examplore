[{"dataset": "getJSONArray", "exampleID": 4101, "initialization": ["JSONObject jSONObject = new JSONObject(String)", "String name = Iterator<String>.next()"], "initializationStart": [389, 511], "initializationEnd": [409, 522], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 358, "tryExpressionEnd": 362, "tryBlockStart": 358, "tryBlockEnd": 1396, "catchExpressionStart": 1334, "catchExpressionEnd": 1358, "catchBlockStart": 1334, "catchBlockEnd": 1396, "exceptionHandlingCallStart": [1368], "exceptionHandlingCallEnd": [1387], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 731, "focalAPIEnd": 752, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 764, "followUpCheckExpressionEnd": 802, "followUpCheckBlockStart": 764, "followUpCheckBlockEnd": 1314, "use": ["array.getJSONObject(int)"], "useStart": [832], "useEnd": [852], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/EnderWiggin/Haven-and-Hearth-client-modified-by-Ender/tree/master/src/haven/Config.java", "rawCode": "  private static void loadHighlight() {\n    try {\n      FileInputStream fstream;\n      fstream = new FileInputStream(\"highlight.conf\");\n      BufferedReader br = new BufferedReader(new InputStreamReader(fstream, \"UTF-8\"));\n      String data = \"\";\n      String strLine;\n      while ((strLine = br.readLine()) != null) {\n        data += strLine;\n      }\n      try {\n        JSONObject cfg = new JSONObject(data);\n        Iterator<String> keys = cfg.keys();\n        while (keys.hasNext()) {\n          String key = keys.next();\n          Set<String> group = new HashSet<String>();\n          Set<String> group2 = new HashSet<String>();\n          hlgroups.put(key, group);\n          hlcgroups.put(key, group2);\n          JSONArray arr = cfg.getJSONArray(key);\n          for (int i = 0; i < arr.length(); i++) {\n            JSONObject o = arr.getJSONObject(i);\n            String name = o.getString(\"name\");\n            String icon = null;\n            if (!o.isNull(\"icon\")) {\n              icon = o.getString(\"icon\");\n            }\n            HLInfo inf = new HLInfo(name, icon);\n            if (!o.isNull(\"color\")) {\n              inf.setColor(new Color(Integer.parseInt(o.getString(\"color\"), 16)));\n            }\n            hlcfg.put(name, inf);\n            group.add(name);\n            group2.add(name);\n          }\n        }\n\n      } catch (JSONException e) {\n        e.printStackTrace();\n      }\n      br.close();\n      fstream.close();\n    } catch (FileNotFoundException e) {\n    } catch (IOException e) {\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4102, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [379], "initializationEnd": [406], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 311, "tryExpressionEnd": 315, "tryBlockStart": 311, "tryBlockEnd": 1720, "catchExpressionStart": 1621, "catchExpressionEnd": 1645, "catchBlockStart": 1621, "catchBlockEnd": 1720, "exceptionHandlingCallStart": [1694], "exceptionHandlingCallEnd": [1713], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 478, "focalAPIEnd": 507, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 515, "followUpCheckExpressionEnd": 563, "followUpCheckBlockStart": 515, "followUpCheckBlockEnd": 1613, "use": ["array.getJSONObject(int)", "array.getJSONObject(int)"], "useStart": [605, 1386], "useEnd": [635, 1416], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pronoschallenge/pronoschallenge-android/tree/master/src/fr/pronoschallenge/profil/ProfilPagedViewAdapter.java", "rawCode": "  private List<PalmaresEntry> getPalmares(String userName) {\n    List<PalmaresEntry> palmaresEntries = new ArrayList<PalmaresEntry>();\n\n    String strPalmares =\n        RestClient.get(\n            new QueryBuilder(profilActivity.getAssets(), \"/rest/palmares/\" + userName + \"/\")\n                .getUri());\n\n    try {\n      // A Simple JSONObject Creation\n      JSONObject json = new JSONObject(strPalmares);\n\n      // A Simple JSONObject Parsing\n      JSONArray palmaresArray = json.getJSONArray(\"palmares\");\n      for (int i = 0; i < palmaresArray.length(); i++) {\n        JSONObject jsonPalmaresEntry = palmaresArray.getJSONObject(i);\n\n        PalmaresEntry palmaresEntry = new PalmaresEntry();\n        palmaresEntry.setNomSaison(jsonPalmaresEntry.getString(\"nomSaison\"));\n        // Recherche des championnats li�s � la saison\n        while (jsonPalmaresEntry.getString(\"nomSaison\").equals(palmaresEntry.getNomSaison())\n            && i < palmaresArray.length()) {\n          PalmaresDetailEntry palmaresDetail = new PalmaresDetailEntry();\n          palmaresDetail.setTypeChamp(jsonPalmaresEntry.getString(\"typeChamp\"));\n          palmaresDetail.setNumPlace(jsonPalmaresEntry.getString(\"numPlace\"));\n          palmaresEntry.setPalmaresDetail(palmaresDetail);\n          // Entité JSON suivante\n          i++;\n          if (i < palmaresArray.length()) {\n            jsonPalmaresEntry = palmaresArray.getJSONObject(i);\n          }\n        }\n        // Repositionnement sur l'entité JSON adéquate\n        if (i < palmaresArray.length()) {\n          i--;\n        }\n        palmaresEntries.add(palmaresEntry);\n      }\n\n    } catch (JSONException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    return palmaresEntries;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4103, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [381], "initializationEnd": [401], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getAnonymousLogger()", "log(*,String,int)"], "tryExpressionStart": 342, "tryExpressionEnd": 346, "tryBlockStart": 342, "tryBlockEnd": 1954, "catchExpressionStart": 1601, "catchExpressionEnd": 1625, "catchBlockStart": 1601, "catchBlockEnd": 1716, "exceptionHandlingCallStart": [835, 1633], "exceptionHandlingCallEnd": [862, 1709], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 516, "focalAPIEnd": 544, "followUpCheck": "e < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 553, "followUpCheckExpressionEnd": 595, "followUpCheckBlockStart": 553, "followUpCheckBlockEnd": 1594, "use": ["array.getJSONObject(int)"], "useStart": [631], "useEnd": [655], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/play-project/play-eventadapters/tree/master/play-eventadapter-facebook/src/main/java/eu/play_project/play_eventadapter_facebook/FacebookRealtimeServlet.java", "rawCode": "  @Override\n  public void doPost(final HttpServletRequest req, final HttpServletResponse resp)\n      throws IOException {\n    Logger.getAnonymousLogger().info(\"Invoking doPost.\");\n\n    final BufferedReader reader = req.getReader();\n\n    String line = reader.readLine();\n    Logger.getAnonymousLogger().info(\"JSON Notification: \" + line);\n    try {\n\n      final JSONObject change = new JSONObject(line);\n      if (!\"user\".equals(change.getString(\"object\"))) {\n        return;\n      }\n\n      final JSONArray entries = change.getJSONArray(\"entry\");\n\n      for (int e = 0; e < entries.length(); ++e) {\n        final JSONObject entry = entries.getJSONObject(e);\n\n        String facebookUserId = entry.getString(\"uid\");\n        String facebookTime = entry.getString(\"time\");\n\n        String token = udb.getTokenbyID(facebookUserId);\n        Logger.getAnonymousLogger().info(\"Token is \" + token);\n\n        final JSONObject facebookUserInfo = new JSONObject(getUserInfo(facebookUserId, token));\n        Logger.getAnonymousLogger().info(\"Userinfo JSON is \" + facebookUserInfo);\n\n        final JSONArray facebookStatusArray = new JSONArray(getStatus(token));\n        Logger.getAnonymousLogger().info(\"Statusupdate JSON is \" + facebookStatusArray);\n\n        Set<FacebookStatusFeedEvent> events =\n            createEventModels(facebookTime, facebookUserId, facebookUserInfo, facebookStatusArray);\n\n        for (FacebookStatusFeedEvent event : events) {\n          Document payload = XMLHelper.createDocumentFromString(EventHelpers.serialize(event));\n\n          eventSender.notify(payload);\n        }\n      }\n    } catch (JSONException e) {\n      Logger.getAnonymousLogger().log(Level.SEVERE, \"Error in doPost Notify: \", e);\n    } catch (SAXException e) {\n      Logger.getAnonymousLogger().log(Level.SEVERE, \"Error in doPost: \", e);\n    } catch (ParseException e) {\n      Logger.getAnonymousLogger().log(Level.SEVERE, \"Error in reading Facebook JSON data: \", e);\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4104, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [284], "initializationEnd": [307], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["d(String,String)", "printStackTrace()"], "tryExpressionStart": 61, "tryExpressionEnd": 65, "tryBlockStart": 61, "tryBlockEnd": 501, "catchExpressionStart": 392, "catchExpressionEnd": 412, "catchBlockStart": 392, "catchBlockEnd": 501, "exceptionHandlingCallStart": [420, 475], "exceptionHandlingCallEnd": [467, 494], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject!=null&&jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 315, "guardExpressionEnd": 351, "guardBlockStart": 315, "guardBlockEnd": 385, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 359, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jortizcs/sfs_applications/tree/master/mobile_audit/src/mobile/SFS/Util.java", "rawCode": "  public static JSONArray getIncidentPaths(String url) {\n    try {\n      Log.i(\"UTIL\", \"getting incident paths: \" + url + \"?incident_paths=true\");\n      String respStr = CurlOpsReal.get(url + \"?incident_paths=true\");\n      Log.i(\"UTIL\", \"respStr=\" + respStr);\n\n      JSONObject obj = new JSONObject(respStr);\n      if (obj != null && obj.has(\"paths\")) return obj.getJSONArray(\"paths\");\n    } catch (Exception e) {\n      Log.d(\"UTIL\", \"Problem getting incident paths\");\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4105, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [116], "initializationEnd": [135], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 86, "tryExpressionEnd": 90, "tryBlockStart": 86, "tryBlockEnd": 604, "catchExpressionStart": 531, "catchExpressionEnd": 551, "catchBlockStart": 531, "catchBlockEnd": 604, "exceptionHandlingCallStart": [578], "exceptionHandlingCallEnd": [597], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [157, 219], "configurationEnd": [180, 242], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 290, "focalAPIEnd": 317, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseJSONArraytoString(array)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getString(String)"], "useStart": [267, 345, 401, 448, 497], "useEnd": [318, 372, 426, 472, 522], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/ISBNDemo/ISBNTest/src/com/example/isbn/test/Util.java", "rawCode": "  public BookInfo parseBookInfo(String str) {\n    BookInfo info = new BookInfo();\n    try {\n      JSONObject json = new JSONObject(str);\n      info.setTitle(json.getString(\"title\"));\n      info.setBitmap(DownloadBitmap(json.getString(\"image\")));\n      info.setAuthor(parseJSONArraytoString(json.getJSONArray(\"author\")));\n      info.setPublisher(json.getString(\"publisher\"));\n      info.setPublishDate(json.getString(\"pubdate\"));\n      info.setISBN(json.getString(\"isbn13\"));\n      info.setSummary(json.getString(\"summary\"));\n    } catch (Exception e) {\n      info = null;\n      e.printStackTrace();\n    }\n    return info;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4106, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "CouchDBException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 104, "tryExpressionEnd": 108, "tryBlockStart": 104, "tryBlockEnd": 656, "catchExpressionStart": 536, "catchExpressionEnd": 563, "catchBlockStart": 536, "catchBlockEnd": 597, "exceptionHandlingCallStart": [571], "exceptionHandlingCallEnd": [590], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 299, "focalAPIEnd": 346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Wolfy42/RoadrunnerAndroid/tree/master/src/at/roadrunner/android/controller/ContainerController.java", "rawCode": "  public ArrayList<JSONObject> getContainers() {\n    ArrayList<JSONObject> listOfContainers = null;\n    try {\n      String containers = new RequestWorker(_context).getContainerNames();\n      if (containers != null) {\n        listOfContainers = new ArrayList<JSONObject>();\n        JSONArray array = new JSONObject(containers).getJSONArray(\"rows\");\n\n        for (int i = 0; i < array.length(); i++) {\n          listOfContainers.add(array.getJSONObject(i).getJSONObject(\"value\"));\n        }\n        return listOfContainers;\n      }\n    } catch (CouchDBException e) {\n      e.printStackTrace();\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4107, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["JSONObject.put(String,boolean)"], "tryExpressionStart": 362, "tryExpressionEnd": 366, "tryBlockStart": 362, "tryBlockEnd": 1379, "catchExpressionStart": 803, "catchExpressionEnd": 827, "catchBlockStart": 803, "catchBlockEnd": 1273, "exceptionHandlingCallStart": [906], "exceptionHandlingCallEnd": [971], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 400, "focalAPIEnd": 439, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 449, "followUpCheckExpressionEnd": 495, "followUpCheckBlockStart": 449, "followUpCheckBlockEnd": 794, "use": ["array.get(int)", "jSONObject.put(String,boolean)"], "useStart": [548, 906], "useEnd": [566, 971], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maqetta/maqetta/tree/master/maqetta.server.orion/src/maqetta/server/orion/MaqettaProjectDecorator.java", "rawCode": "  public void addAtributesFor(HttpServletRequest request, URI resource, JSONObject representation) {\n    IPath resourcePath =\n        new Path(\n            request.getServletPath()\n                + (request.getPathInfo() == null ? \"\" : request.getPathInfo()));\n\n    if (\"/workspace\".equals(request.getServletPath()) && resourcePath.segmentCount() == 2) {\n      try {\n        JSONArray projObjects = representation.getJSONArray(\"Children\");\n        for (int i = 0; i < projObjects.length(); i++) {\n          JSONObject projectObject = (JSONObject) projObjects.get(i);\n          if (checkMaqettaProject(projectObject)) {\n            projectObject.put(IDavinciServerConstants.MAQETTA_PROJECT, true);\n          } else {\n            projectObject.put(\"maqettaProject\", false);\n          }\n        }\n      } catch (JSONException e) {\n        try {\n          if (checkMaqettaProject(representation))\n            representation.put(IDavinciServerConstants.MAQETTA_PROJECT, true);\n          else representation.put(\"rootFolder\", true);\n        } catch (JSONException e1) {\n          // TODO Auto-generated catch block\n          e1.printStackTrace();\n        } catch (CoreException e2) {\n          // TODO Auto-generated catch block\n          e2.printStackTrace();\n        }\n      } catch (CoreException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    } else if (\"/file\".equals(request.getServletPath())) {\n      try {\n\n        /* if we get here, we're getting file contents from workspace. so need a way to check if its already a project\n         *\n         */\n\n        JSONArray projObjects = representation.getJSONArray(\"Children\");\n        for (int i = 0; i < projObjects.length(); i++) {\n          JSONObject projectObject = (JSONObject) projObjects.get(i);\n          if (projectObject.getBoolean(\"Directory\")) projectObject.put(\"maqettaProject\", false);\n        }\n\n      } catch (JSONException e) {\n        try {\n\n          representation.put(IDavinciServerConstants.MAQETTA_PROJECT, true);\n\n        } catch (JSONException e1) {\n          // TODO Auto-generated catch block\n          e1.printStackTrace();\n        }\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4108, "initialization": ["JSONObject jSONObject = readObject(String)"], "initializationStart": [129], "initializationEnd": [146], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 172, "focalAPIEnd": 204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONArray(int)"], "useStart": [279], "useEnd": [302], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bitsofproof/supernode/tree/master/api/src/test/java/com/bitsofproof/supernode/api/BIP39Test.java", "rawCode": "  @Test\n  public void bip39EncodeDecodeTest() throws IOException, JSONException, ValidationException {\n    JSONObject testData = readObject(TESTS);\n    JSONArray english = testData.getJSONArray(\"english\");\n    for (int i = 0; i < testData.length(); ++i) {\n      JSONArray test = english.getJSONArray(i);\n      byte[] m = BIP39.decode(test.getString(1), \"BOP\");\n      assertTrue(test.getString(1).equals(BIP39.encode(m, \"BOP\")));\n    }\n    SecureRandom random = new SecureRandom();\n    for (int i = 0; i < 1000; ++i) {\n      byte[] secret = new byte[32];\n      random.nextBytes(secret);\n      String e = BIP39.encode(secret, \"BOP\");\n      assertTrue(Arrays.equals(BIP39.decode(e, \"BOP\"), secret));\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4109, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 94, "focalAPIEnd": 115, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdunck/google-refine/tree/master/main/src/com/google/refine/util/JSONUtilities.java", "rawCode": "  public static int[] getIntArray(JSONObject obj, String key) {\n    try {\n      JSONArray a = obj.getJSONArray(key);\n      int[] r = new int[a.length()];\n\n      for (int i = 0; i < r.length; i++) {\n        r[i] = a.getInt(i);\n      }\n\n      return r;\n    } catch (JSONException e) {\n      return new int[0];\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4110, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [212], "initializationEnd": [251], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["new StoreException(*)"], "tryExpressionStart": 102, "tryExpressionEnd": 106, "tryBlockStart": 102, "tryBlockEnd": 774, "catchExpressionStart": 534, "catchExpressionEnd": 566, "catchBlockStart": 534, "catchBlockEnd": 608, "exceptionHandlingCallStart": [580], "exceptionHandlingCallEnd": [601], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [333], "configurationEnd": [362], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 415, "focalAPIEnd": 444, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 452, "followUpCheckExpressionEnd": 492, "followUpCheckBlockStart": 452, "followUpCheckBlockEnd": 527, "use": ["array.getJSONObject(int)"], "useStart": [503], "useEnd": [525], "hasFinally": 1, "cleanUpCall": ["unfreeze()"], "finallyExpressionStart": 741, "finallyExpressionEnd": 749, "finallyBlockStart": 741, "finallyBlockEnd": 774, "cleanUpCallStart": [757], "cleanUpCallEnd": [767], "url": "https://github.com/luisparravicini/caliboro/tree/master/src/main/java/ar/com/ktulu/caliboro/BonesStore.java", "rawCode": "  public void load() {\n    File bonesPath = getBonesPath();\n    if (!bonesPath.exists()) return;\n\n    try {\n      freeze();\n\n      InputStreamReader reader = new FileReader(bonesPath);\n      JSONObject auxData = new JSONObject(new JSONTokener(reader));\n      reader.close();\n\n      data = createRootNode();\n      data.setLastImageId(auxData.getInt(\"lastImageId\"));\n      data.clearBones();\n\n      JSONArray bones = auxData.getJSONArray(\"bones\");\n      for (int i = 0; i < bones.length(); i++) addObject(bones.getJSONObject(i));\n    } catch (FileNotFoundException e) {\n      throw new StoreException(e);\n    } catch (JSONException e) {\n      throw new StoreException(e);\n    } catch (IOException e) {\n      throw new StoreException(e);\n    } finally {\n      unfreeze();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4111, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new TwitterException(*)"], "tryExpressionStart": 67, "tryExpressionEnd": 71, "tryBlockStart": 67, "tryBlockEnd": 387, "catchExpressionStart": 311, "catchExpressionEnd": 339, "catchBlockStart": 311, "catchBlockEnd": 387, "exceptionHandlingCallStart": [353], "exceptionHandlingCallEnd": [380], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 104, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/florhaf/ravent/tree/master/service/lib/twitter4j-2.2.6/twitter4j-core/src/main/java/twitter4j/internal/json/HashtagEntityJSONImpl.java", "rawCode": "  private void init(JSONObject json) throws TwitterException {\n    try {\n      JSONArray indicesArray = json.getJSONArray(\"indices\");\n      this.start = indicesArray.getInt(0);\n      this.end = indicesArray.getInt(1);\n\n      if (!json.isNull(\"text\")) {\n        this.text = json.getString(\"text\");\n      }\n    } catch (JSONException jsone) {\n      throw new TwitterException(jsone);\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4112, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 127, "focalAPIEnd": 161, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 169, "followUpCheckExpressionEnd": 211, "followUpCheckBlockStart": 169, "followUpCheckBlockEnd": 277, "use": ["array.getString(int)", "jSONObject.getJSONArray(String)"], "useStart": [247, 302], "useEnd": [267, 351], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vaadin/gwt/tree/master/dev/core/src/com/google/gwt/core/ext/soyc/coderef/EntityDescriptorJsonTranslator.java", "rawCode": "    private void updateEntity(EntityDescriptor entity, JSONObject jsonObject) throws JSONException {\n      JSONArray jsNames = jsonObject.getJSONArray(ENTITY_JS);\n      for (int i = 0; i < jsNames.length(); i++) {\n        entity.addObfuscatedName(jsNames.getString(i));\n      }\n      JSONArray frags = jsonObject.getJSONArray(EntityRecorder.FRAGMENTS);\n      for (int i = 0; i < frags.length(); i++) {\n        JSONObject frag = frags.getJSONObject(i);\n        entity.addFragment(\n            new Fragment(\n                frag.getInt(EntityRecorder.FRAGMENT_ID),\n                frag.getInt(EntityRecorder.FRAGMENT_SIZE)));\n      }\n    }\n"}, {"dataset": "getJSONArray", "exampleID": 4113, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [77], "initializationEnd": [157], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.get(String)", "jSONObject.getBoolean(String)"], "configurationStart": [177, 229], "configurationEnd": [195, 257], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 289, "focalAPIEnd": 319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.length()", "array.get(int)"], "useStart": [339, 376], "useEnd": [353, 388], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/newtonik/preppa/tree/master/lib/tapestry-src-5.0.18/tapestry-core/src/test/java/org/apache/tapestry5/json/JSONObjectTest.java", "rawCode": "  @Test\n  public void object_from_string() {\n    JSONObject object =\n        new JSONObject(\"{ fred: \\\"flintstone\\\", caveman: true, friends: [\\\"barney\\\"] }\");\n\n    assertEquals(object.get(\"fred\"), \"flintstone\");\n    assertEquals(object.getBoolean(\"caveman\"), true);\n\n    JSONArray array = object.getJSONArray(\"friends\");\n\n    assertEquals(array.length(), 1);\n    assertEquals(array.get(0), \"barney\");\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4114, "initialization": ["JSONObject jSONObject = fromObject(*)"], "initializationStart": [596], "initializationEnd": [643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 673, "focalAPIEnd": 712, "followUpCheck": "index < array.size()", "checkType": "LOOP", "followUpCheckExpressionStart": 756, "followUpCheckExpressionEnd": 812, "followUpCheckBlockStart": 756, "followUpCheckBlockEnd": 3918, "use": ["array.getJSONObject(int)"], "useStart": [845], "useEnd": [877], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lmco/eurekastreams/tree/master/server/src/main/java/org/eurekastreams/server/service/opensocial/gadgets/spec/GadgetMetaDataHttpFetcher.java", "rawCode": "  /**\n   * This method converts the MetaData JSON into a List of GadgetMetaData objects.\n   *\n   * @param inGadgetsJSON raw results from the metadata request.\n   * @param gadgetDefs Map of gadget definitions with the string key as the gadget def url.\n   * @return List of GadgetMetaData objects from the request.\n   */\n  private List<GadgetMetaDataDTO> mapGadgetMetaDataJSONToObject(\n      final String inGadgetsJSON, final Map<String, GeneralGadgetDefinition> gadgetDefs) {\n    List<GadgetMetaDataDTO> currentGadgetMetaData = new ArrayList<GadgetMetaDataDTO>();\n    JSONObject gadgetsMetaData = JSONObject.fromObject(inGadgetsJSON.toString());\n    JSONArray gadgetsJSON = gadgetsMetaData.getJSONArray(\"gadgets\");\n    GadgetMetaDataDTO currentGadget;\n\n    for (int index = 0; index < gadgetsJSON.size(); index++) {\n      JSONObject gadgetJSON = gadgetsJSON.getJSONObject(index);\n      currentGadget = new GadgetMetaDataDTO(gadgetDefs.get(gadgetJSON.get(\"url\")));\n      // set the user prefs here as a list.\n      currentGadget.setTitle(gadgetJSON.containsKey(\"title\") ? gadgetJSON.getString(\"title\") : \"\");\n      currentGadget.setAuthor(\n          gadgetJSON.containsKey(\"author\") ? gadgetJSON.getString(\"author\") : \"\");\n      currentGadget.setDescription(\n          gadgetJSON.containsKey(\"description\") ? gadgetJSON.getString(\"description\") : \"\");\n      JSONObject gadgetUserPrefsJSON = gadgetJSON.getJSONObject(\"userPrefs\");\n      List<UserPrefDTO> userPrefs = new ArrayList<UserPrefDTO>();\n      UserPrefDTO currentUserPref;\n      JSONObject currentUserPrefJSON;\n      String currentUserPrefKey;\n      for (Object userPrefKey : gadgetUserPrefsJSON.keySet()) {\n        currentUserPrefKey = (String) userPrefKey;\n        currentUserPrefJSON = gadgetUserPrefsJSON.getJSONObject(currentUserPrefKey);\n        currentUserPref = new UserPrefDTO();\n        currentUserPref.setName(currentUserPrefKey);\n        currentUserPref.setDisplayName(currentUserPrefJSON.getString(\"displayName\"));\n        currentUserPref.setDataType(currentUserPrefJSON.getString(\"type\"));\n        currentUserPref.setDefaultValue(currentUserPrefJSON.getString(\"default\"));\n        if (currentUserPref.getDataType().name() == DataType.ENUM.name()) {\n          // Unordered easy access map of enum values.\n          Map<String, String> enumValues = new HashMap<String, String>();\n          String enumKey;\n          String userPrefEnumValue;\n          // parse enum values here\n          for (Object enumKeyObject : currentUserPrefJSON.getJSONObject(\"enumValues\").keySet()) {\n            enumKey = (String) enumKeyObject;\n            userPrefEnumValue =\n                (String) currentUserPrefJSON.getJSONObject(\"enumValues\").get(enumKey);\n            enumValues.put(enumKey, userPrefEnumValue);\n          }\n          currentUserPref.setEnumValues(enumValues);\n\n          // Ordered enum values for creating preferences.\n          List<EnumValuePairDTO> orderedEnumValues = new LinkedList<EnumValuePairDTO>();\n          JSONArray orderedEnumValuesJson = currentUserPrefJSON.getJSONArray(\"orderedEnumValues\");\n          JSONObject currentOrderedEnumValueJson;\n          for (int arrayIndex = 0; arrayIndex < orderedEnumValuesJson.size(); arrayIndex++) {\n            currentOrderedEnumValueJson = orderedEnumValuesJson.getJSONObject(arrayIndex);\n            orderedEnumValues.add(\n                new EnumValuePairDTO(\n                    currentOrderedEnumValueJson.getString(\"value\"),\n                    currentOrderedEnumValueJson.getString(\"displayValue\")));\n          }\n          currentUserPref.setOrderedEnumValues(orderedEnumValues);\n        }\n\n        if (currentUserPrefJSON.containsKey(\"required\")) {\n          currentUserPref.setRequired(currentUserPrefJSON.getString(\"required\"));\n        }\n        userPrefs.add(currentUserPref);\n      }\n      currentGadget.setUserPrefs(userPrefs);\n      currentGadgetMetaData.add(currentGadget);\n    }\n    return currentGadgetMetaData;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4115, "initialization": ["JSONObject jSONObject = toJSON(String)", "JSONObject jSONObject = toJSON(String)"], "initializationStart": [539, 980], "initializationEnd": [566, 1007], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "error(*,*)"], "tryExpressionStart": 219, "tryExpressionEnd": 223, "tryBlockStart": 219, "tryBlockEnd": 2676, "catchExpressionStart": 2613, "catchExpressionEnd": 2633, "catchBlockStart": 2613, "catchBlockEnd": 2676, "exceptionHandlingCallStart": [2651, 2641], "exceptionHandlingCallEnd": [2665, 2669], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [594, 653], "configurationEnd": [631, 679], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1037, "focalAPIEnd": 1083, "followUpCheck": "j < array.size()", "checkType": "LOOP", "followUpCheckExpressionStart": 1091, "followUpCheckExpressionEnd": 1133, "followUpCheckBlockStart": 1091, "followUpCheckBlockEnd": 1443, "use": ["array.getJSONObject(int)", "array.getJSONObject(int)", "array.getJSONObject(int)", "array.getJSONObject(int)"], "useStart": [1163, 1295, 1373, 1902], "useEnd": [1189, 1321, 1399, 1928], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NewMediaCenter/MobileWeb/tree/master/sakai/impl/src/main/java/org/kuali/mobility/sakai/service/SakaiSiteServiceImpl.java", "rawCode": "  public Site findSite(String siteId, String user) {\n    Site site = new Site();\n    String instructorName = null;\n    String instructorId = null;\n    String courseDescription = null;\n    String courseTitle = null;\n    try {\n      String url =\n          configParamService.findValueByName(\"Sakai.Url.Base\") + \"site/\" + siteId + \".json\";\n      ResponseEntity<InputStream> is = oncourseOAuthService.oAuthGetRequest(user, url, \"text/html\");\n      String json = IOUtils.toString(is.getBody(), \"UTF-8\");\n      JSONObject jsonObj = (JSONObject) JSONSerializer.toJSON(json);\n      courseDescription = jsonObj.getString(\"shortDescription\");\n      courseTitle = jsonObj.getString(\"title\");\n\n      url =\n          configParamService.findValueByName(\"Sakai.Url.Base\")\n              + \"participant.json?siteId=\"\n              + siteId;\n      is = oncourseOAuthService.oAuthGetRequest(user, url, \"text/html\");\n      json = IOUtils.toString(is.getBody(), \"UTF-8\");\n      jsonObj = (JSONObject) JSONSerializer.toJSON(json);\n      JSONArray itemArray = jsonObj.getJSONArray(\"participant_collection\");\n      for (int j = 0; j < itemArray.size(); j++) {\n        String roleTitle = itemArray.getJSONObject(j).getString(\"roleTitle\");\n        if (roleTitle.equalsIgnoreCase(\"Instructor\")) {\n          instructorId = itemArray.getJSONObject(j).getString(\"displayID\");\n          instructorName = itemArray.getJSONObject(j).getString(\"displayName\");\n        }\n      }\n\n      // check for available tools\n      url = configParamService.findValueByName(\"Sakai.Url.Base\") + \"site/\" + siteId + \"/pages.json\";\n      is = oncourseOAuthService.oAuthGetRequest(user, url, \"text/html\");\n      json = IOUtils.toString(is.getBody(), \"UTF-8\");\n      itemArray = (JSONArray) JSONSerializer.toJSON(json);\n      List<String> availableTools = new ArrayList<String>();\n      for (int j = 0; j < itemArray.size(); j++) {\n        String title = itemArray.getJSONObject(j).getString(\"title\");\n        if (title != null && !title.isEmpty()) {\n          availableTools.add(title);\n        }\n      }\n\n      if (availableTools.contains(\"Announcements\")) site.setHasAnnouncementsTool(true);\n      if (availableTools.contains(\"Assignments\")) site.setHasAssignmentsTool(true);\n      if (availableTools.contains(\"Forums\")) site.setHasForumsTool(true);\n      if (availableTools.contains(\"Grades\")) site.setHasGradesTool(true);\n      if (availableTools.contains(\"Messages\")) site.setHasMessagesTool(true);\n      if (availableTools.contains(\"Resources\")) site.setHasResourcesTool(true);\n      if (availableTools.contains(\"Roster\")) site.setHasRosterTool(true);\n\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n    }\n\n    site.setId(siteId);\n    site.setInstructorId(instructorId);\n    site.setInstructorName(instructorName);\n    site.setDescription(courseDescription);\n    site.setTitle(courseTitle);\n\n    try {\n      List<String> courseSiteIdList = new ArrayList<String>();\n      courseSiteIdList.add(site.getId());\n      List<ViewDetailedEvent> listViewEvents =\n          calendarEventOAuthService.retrieveCourseEvents(user, courseSiteIdList);\n      for (ViewDetailedEvent event : listViewEvents) {\n        if (event.getRecurrenceMessage() != null && !event.getRecurrenceMessage().isEmpty()) {\n          site.setMeetingTime(\n              event.getRecurrenceMessage().replace(\"This event recurs\", \"This class meets\"));\n        }\n        if (event.getLocation() != null && !event.getLocation().isEmpty()) {\n          site.setLocation(event.getLocation());\n        }\n        if (event.getLocationId() != null && !event.getLocationId().isEmpty()) {\n          site.setBuildingCode(event.getLocationId());\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n    }\n\n    return site;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4116, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [313], "initializationEnd": [339], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 213, "tryExpressionEnd": 217, "tryBlockStart": 213, "tryBlockEnd": 880, "catchExpressionStart": 822, "catchExpressionEnd": 846, "catchBlockStart": 822, "catchBlockEnd": 880, "exceptionHandlingCallStart": [854], "exceptionHandlingCallEnd": [873], "configuration": ["jSONObject.getString(String)"], "configurationStart": [366], "configurationEnd": [399], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 539, "focalAPIEnd": 572, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.length()", "array.getJSONObject(int)"], "useStart": [594, 687], "useEnd": [608, 709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/perexis/io-group-coordination-system/tree/master/MobileClient/src/pl/edu/agh/io/coordinator/utils/net/JSonProxy.java", "rawCode": "  @Override\n  public List<Message> getMessages() throws InvalidSessionIDException, NetworkException {\n    List<Message> toReturn = new LinkedList<Message>();\n    JSONObject params = createSessionOnlyParams();\n    try {\n      String jsonString = getJSonString(\"getMessages\", params);\n      JSONObject jsonObject = new JSONObject(jsonString);\n      String exception = jsonObject.getString(\"exception\");\n      if (exception.equals(\"InvalidSessionID\")) {\n        throw new InvalidSessionIDException();\n      } else {\n        JSONArray array = jsonObject.getJSONArray(\"retval\");\n        int limit = array.length();\n        for (int i = 0; i < limit; ++i) {\n          JSONObject jsonMessage = array.getJSONObject(i);\n          Message message = new Message(jsonMessage);\n          toReturn.add(message);\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    Comparator<Message> comparator =\n        new Comparator<Message>() {\n          @Override\n          public int compare(Message lhs, Message rhs) {\n            long ltime = lhs.getSentTime();\n            long rtime = rhs.getSentTime();\n            if (ltime < rtime) {\n              return -1;\n            } else if (ltime > rtime) {\n              return 1;\n            } else {\n              return 0;\n            }\n          }\n        };\n    Collections.sort(toReturn, comparator);\n    return toReturn;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4117, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [140], "initializationEnd": [174], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 180, "guardExpressionEnd": 205, "guardBlockStart": 180, "guardBlockEnd": 265, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 213, "focalAPIEnd": 242, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jortizcs/sfs_applications/tree/master/ConnAccessSampler/src/sfs/lib/Util.java", "rawCode": "  public static JSONArray getChildren(String url) throws JSONException {\n    Log.i(\"UTIL\", \"getChildren.url=\" + url);\n    JSONObject json = new JSONObject(getJsonString(url));\n    if (json.has(\"children\")) return json.getJSONArray(\"children\");\n    else return null;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4118, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new JSONObject(String)", "JSONObject.getJSONObject(String)"], "tryExpressionStart": 141, "tryExpressionEnd": 145, "tryBlockStart": 141, "tryBlockEnd": 1041, "catchExpressionStart": 491, "catchExpressionEnd": 515, "catchBlockStart": 491, "catchBlockEnd": 1041, "exceptionHandlingCallStart": [711, 711], "exceptionHandlingCallEnd": [735, 761], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 174, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONObject(String)"], "useStart": [711], "useEnd": [761], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/siga111/PFM/tree/master/ANDROID/src/main/pfmandroid/getdata/RetrieveTransferData.java", "rawCode": "  @Override\n  protected void onPostExecute(String result) {\n    // Attempt to extract an array of currencies (more than one in database)\n    try {\n      JSONArray getArray = new JSONObject(currency).getJSONArray(\"currency\");\n\n      for (int i = 0; i < getArray.length(); i++) {\n        int id = ((JSONObject) getArray.get(i)).getInt(\"id\");\n        String code = ((JSONObject) getArray.get(i)).getString(\"code\");\n        DataStorage.typesOfCurrency.add(new Currency(id, code));\n      }\n    } catch (JSONException e) {\n      // If we reach here, it means we couldn't find currency array (only one in database)\n      // Create a single currency, extracted from database.\n      try {\n        JSONObject getObject = new JSONObject(currency).getJSONObject(\"currency\");\n        int id = getObject.getInt(\"id\");\n        String code = getObject.getString(\"code\");\n        DataStorage.typesOfCurrency.add(new Currency(id, code));\n      } catch (JSONException e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n      }\n    }\n\n    // Try to extract an array of wallets.\n    try {\n      JSONArray getArray = new JSONObject(wallets).getJSONArray(\"account\");\n\n      // Add all wallets and for each wallet, every currency without any amount.\n      for (int i = 0; i < getArray.length(); i++) {\n        int id = ((JSONObject) getArray.get(i)).getInt(\"id\");\n        String name = ((JSONObject) getArray.get(i)).getString(\"name\");\n        DataStorage.listOfWallets.add(new Wallet(id, name));\n        for (int j = 0; j < DataStorage.typesOfCurrency.size(); j++) {\n          DataStorage.listOfWallets\n              .get(i)\n              .addMoney(\n                  new Money(\n                      DataStorage.typesOfCurrency.get(j).getId(),\n                      DataStorage.typesOfCurrency.get(j).getCode()));\n        }\n      }\n    } catch (JSONException e) {\n      // If we are here, there is no array -> Only one wallet for the user, extract it.\n      try {\n        JSONObject getObject = new JSONObject(wallets).getJSONObject(\"account\");\n        int id = getObject.getInt(\"id\");\n        String name = getObject.getString(\"name\");\n        DataStorage.listOfWallets.add(new Wallet(id, name));\n        for (int j = 0; j < DataStorage.typesOfCurrency.size(); j++) {\n          DataStorage.listOfWallets\n              .get(DataStorage.listOfWallets.size() - 1)\n              .addMoney(\n                  new Money(\n                      DataStorage.typesOfCurrency.get(j).getId(),\n                      DataStorage.typesOfCurrency.get(j).getCode()));\n        }\n      } catch (JSONException e1) {\n        // TODO Auto-generated catch block\n        e1.printStackTrace();\n      }\n    }\n\n    GetBalanceInfo innertask = new GetBalanceInfo();\n    innertask.execute();\n\n    try {\n      innertask.get();\n    } catch (InterruptedException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (ExecutionException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    if (dialog.isShowing()) {\n      dialog.dismiss();\n    }\n\n    context.displayData();\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4119, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [150], "initializationEnd": [176], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 120, "tryExpressionEnd": 124, "tryBlockStart": 120, "tryBlockEnd": 949, "catchExpressionStart": 891, "catchExpressionEnd": 915, "catchBlockStart": 891, "catchBlockEnd": 949, "exceptionHandlingCallStart": [923], "exceptionHandlingCallEnd": [942], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 206, "focalAPIEnd": 231, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 357, "followUpCheckExpressionEnd": 401, "followUpCheckBlockStart": 357, "followUpCheckBlockEnd": 884, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world/tree/master/floworld/src/com/tianxia/app/floworld/identification/IdentificationTabActivity.java", "rawCode": "  private void setAppreciateCategoryList(String jsonString) {\n    mAppLoadingLinearLayout.setVisibility(View.GONE);\n    try {\n      JSONObject json = new JSONObject(jsonString);\n      JSONArray jsonArray = json.getJSONArray(\"list\");\n      listData = new ArrayList<AppreciateCategoryInfo>();\n      AppreciateCategoryInfo appreciateCategoryInfo = null;\n      for (int i = 0; i < jsonArray.length(); i++) {\n        appreciateCategoryInfo = new AppreciateCategoryInfo();\n        appreciateCategoryInfo.filename = jsonArray.getJSONObject(i).optString(\"filename\");\n        appreciateCategoryInfo.category = jsonArray.getJSONObject(i).optString(\"category\");\n        appreciateCategoryInfo.thumbnail = jsonArray.getJSONObject(i).optString(\"thumbnail\");\n        appreciateCategoryInfo.count = jsonArray.getJSONObject(i).optString(\"count\");\n        listData.add(appreciateCategoryInfo);\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    adapter = new Adapter(IdentificationTabActivity.this);\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4120, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 180, "focalAPIEnd": 260, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 330, "followUpCheckExpressionEnd": 371, "followUpCheckBlockStart": 330, "followUpCheckBlockEnd": 451, "use": ["array.getJSONObject(int)"], "useStart": [419], "useEnd": [442], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/WorkSheetJSONDeserializer.java", "rawCode": "  private void deserializeGlobalFilters(\n      JSONObject workSheetDefinitionJSON, WorkSheetDefinition workSheetDefinition)\n      throws Exception {\n    JSONArray gfJSON =\n        workSheetDefinitionJSON.getJSONArray(WorkSheetSerializationUtils.GLOBAL_FILTERS);\n    List<Attribute> globalFilters = new ArrayList<Attribute>();\n    for (int i = 0; i < gfJSON.length(); i++) {\n      globalFilters.add(deserializeAttribute(gfJSON.getJSONObject(i)));\n    }\n    workSheetDefinition.setGlobalFilters(globalFilters);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4121, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 90, "tryExpressionEnd": 94, "tryBlockStart": 90, "tryBlockEnd": 205, "catchExpressionStart": 147, "catchExpressionEnd": 171, "catchBlockStart": 147, "catchBlockEnd": 205, "exceptionHandlingCallStart": [179], "exceptionHandlingCallEnd": [198], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 112, "focalAPIEnd": 139, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 259, "followUpCheckExpressionEnd": 301, "followUpCheckBlockStart": 259, "followUpCheckBlockEnd": 496, "use": ["array.getJSONObject(int)"], "useStart": [368], "useEnd": [392], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jspenc45/CMC/tree/master/CubicMeterCommunityApp/src/com/example/cubicmetercommunity/classes/Group.java", "rawCode": "  public static List<Group> getGroups(JSONObject obj) {\n    JSONArray records = null;\n    try {\n      records = obj.getJSONArray(\"records\");\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    List<Group> groups = new ArrayList<Group>();\n    for (int i = 0; i < records.length(); i++) {\n      Group group = null;\n      try {\n        group = new Group(records.getJSONObject(i));\n      } catch (JSONException e) {\n        e.printStackTrace();\n      }\n      groups.add(group);\n    }\n    return groups;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4122, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [350], "initializationEnd": [383], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new HBaseRestException(String,*)"], "tryExpressionStart": 312, "tryExpressionEnd": 316, "tryBlockStart": 312, "tryBlockEnd": 864, "catchExpressionStart": 761, "catchExpressionEnd": 785, "catchBlockStart": 761, "catchBlockEnd": 864, "exceptionHandlingCallStart": [799], "exceptionHandlingCallEnd": [857], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 395, "focalAPIEnd": 443, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 451, "followUpCheckExpressionEnd": 487, "followUpCheckBlockStart": 451, "followUpCheckBlockEnd": 754, "use": ["array.getJSONObject(int)", "array.getJSONObject(int)"], "useStart": [563, 694], "useEnd": [581, 712], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/holstad/hbase/tree/master/src/java/org/apache/hadoop/hbase/rest/parser/JsonRestParser.java", "rawCode": "  public RowUpdateDescriptor getRowUpdateDescriptor(byte[] input, byte[][] pathSegments)\n      throws HBaseRestException {\n\n    RowUpdateDescriptor rud = new RowUpdateDescriptor();\n    JSONArray a;\n\n    rud.setTableName(Bytes.toString(pathSegments[0]));\n    rud.setRowName(Bytes.toString(pathSegments[2]));\n\n    try {\n      JSONObject updateObject = new JSONObject(new String(input));\n      a = updateObject.getJSONArray(RESTConstants.COLUMNS);\n      for (int i = 0; i < a.length(); i++) {\n        rud.getColVals()\n            .put(\n                Bytes.toBytes(a.getJSONObject(i).getString(RESTConstants.NAME)),\n                org.apache.hadoop.hbase.util.Base64.decode(\n                    a.getJSONObject(i).getString(RESTConstants.VALUE)));\n      }\n    } catch (JSONException e) {\n      throw new HBaseRestException(\"Error parsing row update json\", e);\n    }\n    return rud;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4123, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 147, "tryExpressionEnd": 151, "tryBlockStart": 147, "tryBlockEnd": 361, "catchExpressionStart": 289, "catchExpressionEnd": 313, "catchBlockStart": 289, "catchBlockEnd": 361, "exceptionHandlingCallStart": [329], "exceptionHandlingCallEnd": [352], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 108, "guardExpressionEnd": 138, "guardBlockStart": 108, "guardBlockEnd": 367, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 175, "focalAPIEnd": 209, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 219, "followUpCheckExpressionEnd": 255, "followUpCheckBlockStart": 219, "followUpCheckBlockEnd": 280, "use": ["array.getString(int)"], "useStart": [264], "useEnd": [278], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sage-Bionetworks/workflow/tree/master/lib/lib-workflow/src/main/java/org/sagebionetworks/workflow/ScriptResult.java", "rawCode": "  public List<String> getStringListResult(String key) {\n    List<String> ans = new ArrayList<String>();\n    if (structuredOutput.has(key)) {\n      try {\n        JSONArray a = structuredOutput.getJSONArray(key);\n        for (int i = 0; i < a.length(); i++) ans.add(a.getString(i));\n      } catch (JSONException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    return ans;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4124, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [357], "initializationEnd": [384], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "e(String,*)"], "tryExpressionStart": 284, "tryExpressionEnd": 288, "tryBlockStart": 284, "tryBlockEnd": 838, "catchExpressionStart": 777, "catchExpressionEnd": 797, "catchBlockStart": 777, "catchBlockEnd": 838, "exceptionHandlingCallStart": [816, 805], "exceptionHandlingCallEnd": [830, 831], "configuration": ["jSONObject.getString(String)"], "configurationStart": [406], "configurationEnd": [431], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 484, "focalAPIEnd": 513, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 522, "followUpCheckExpressionEnd": 561, "followUpCheckBlockStart": 522, "followUpCheckBlockEnd": 770, "use": ["array.getJSONObject(int)"], "useStart": [639], "useEnd": [660], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ese-unibe-ch/ese2013-team7/tree/master/Programming/Mensa@Unibe/src/com/ese2013/mensaunibe/model/menu/MenuData.java", "rawCode": "  /**\n   * returns the daily menu of a specific mensa\n   *\n   * @param mensaId\n   * @return Menuplan of one day\n   */\n  public Menuplan getMenuList(int mensaId) {\n    Menuplan plan = new Menuplan();\n    rq.setUrl(String.format(ApiUrl.API_DAILY_MENU, mensaId));\n    rq.execute();\n\n    try {\n      JSONObject js = rq.getJSONData();\n      JSONObject content = js.getJSONObject(\"content\");\n      String date = content.getString(\"date\");\n      plan.parseDate(date);\n      JSONArray list = content.getJSONArray(\"menus\");\n\n      for (int i = 0; i < list.length(); i++) {\n        DailyMenuBuilder mb = new DailyMenuBuilder();\n        mb.parseJson(list.getJSONObject(i));\n        DailyMenu menu = mb.create();\n        plan.add(menu);\n        plan.setDate(menu.getDate());\n      }\n    } catch (Exception e) {\n      Log.e(TAG, e.getMessage());\n    }\n    return plan;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4125, "initialization": ["JSONObject jSONObject = LogDAO.getAllLog(int,int)"], "initializationStart": [169], "initializationEnd": [192], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 200, "tryExpressionEnd": 204, "tryBlockStart": 200, "tryBlockEnd": 852, "catchExpressionStart": 747, "catchExpressionEnd": 771, "catchBlockStart": 747, "catchBlockEnd": 852, "exceptionHandlingCallStart": [824], "exceptionHandlingCallEnd": [843], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 231, "focalAPIEnd": 260, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 316, "followUpCheckExpressionEnd": 355, "followUpCheckBlockStart": 316, "followUpCheckBlockEnd": 716, "use": ["array.getJSONObject(int)"], "useStart": [415], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/psh24053/tempposconsole/tree/master/tuan/TempPosConsole/source/TempPosConsole/src/cn/panshihao/pos/view/logWindow.java", "rawCode": "    @Override\n    public Log[] doInBackground(String... params) {\n      // TODO Auto-generated method stub\n\n      LogDAO dao = new LogDAO();\n      JSONObject response = dao.getAllLog(0, 10000);\n      try {\n        JSONArray list = response.getJSONArray(\"list\");\n        Log[] Logs = new Log[list.length()];\n\n        for (int i = 0; i < list.length(); i++) {\n          Log f = new Log();\n          JSONObject item = list.getJSONObject(i);\n          f.setLog_content(item.getString(\"con\"));\n          f.setLog_id(item.getInt(\"lid\"));\n          f.setLog_time(item.getLong(\"tim\"));\n          f.setUser_id(item.getInt(\"uid\"));\n          f.putValue(\"log_username\", item.getString(\"name\"));\n          Logs[i] = f;\n        }\n\n        return Logs;\n      } catch (JSONException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n\n      return null;\n    }\n"}, {"dataset": "getJSONArray", "exampleID": 4126, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [619], "initializationEnd": [687], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getMessage()", "d(String,*)"], "tryExpressionStart": 596, "tryExpressionEnd": 600, "tryBlockStart": 596, "tryBlockEnd": 2155, "catchExpressionStart": 2074, "catchExpressionEnd": 2100, "catchBlockStart": 2074, "catchBlockEnd": 2155, "exceptionHandlingCallStart": [2131, 2108], "exceptionHandlingCallEnd": [2147, 2148], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.get(\"status\",).equals(\"success\",)", "guardType": "IF {", "guardExpressionStart": 695, "guardExpressionEnd": 740, "guardBlockStart": 695, "guardBlockEnd": 2067, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 792, "focalAPIEnd": 825, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 836, "followUpCheckExpressionEnd": 887, "followUpCheckBlockStart": 836, "followUpCheckBlockEnd": 2059, "use": ["array.getJSONObject(int)"], "useStart": [925], "useEnd": [958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kogeva/Reactr/tree/master/Reactr/src/main/java/reactr/network/ReactorApi.java", "rawCode": "  public ArrayList<MessageEntity> getMessages(Integer from, Integer to) {\n    postParams = new HashMap<String, ContentBody>();\n    ArrayList<MessageEntity> messageArray = new ArrayList<MessageEntity>();\n\n    try {\n      postParams.put(\"user_id\", new StringBody((new Integer(userId)).toString()));\n      postParams.put(\"session_hash\", new StringBody(session_token));\n      postParams.put(\"from\", new StringBody(from.toString()));\n      postParams.put(\"to\", new StringBody(to.toString()));\n    } catch (UnsupportedEncodingException exp) {\n      Log.d(\"Reactor API: \", exp.getMessage());\n    }\n\n    try {\n      jsonData = new JSONObject(networkManager.sendRequest(GET_MESSAGES, postParams));\n      if (jsonData.get(\"status\").equals(\"success\")) {\n        JSONArray messageJSONArray = (JSONArray) jsonData.getJSONArray(\"messages\");\n\n        for (int i = 0; i < messageJSONArray.length(); i++) {\n          JSONObject messageJson = messageJSONArray.getJSONObject(i);\n          MessageEntity messageEntity =\n              new MessageEntity(\n                  messageJson.getInt(\"id\"),\n                  messageJson.getInt(\"from_user\"),\n                  messageJson.getInt(\"to_user\"),\n                  messageJson.getString(\"text\"),\n                  messageJson.getString(\"photo\"),\n                  messageJson.getString(\"reaction_photo\"),\n                  messageJson.getJSONObject(\"created_at\").getString(\"date\"),\n                  messageJson.getBoolean(\"from_me\"),\n                  (!messageJson.getString(\"is_read\").equals(\"null\"))\n                      ? messageJson.getBoolean(\"is_read\")\n                      : false,\n                  messageJson.getString(\"username\"),\n                  messageJson.getString(\"to_username\"),\n                  messageJson.getBoolean(\"deleted\"));\n\n          int timeZone =\n              Integer.parseInt(messageJson.getJSONObject(\"created_at\").getString(\"timezone_type\"));\n          messageEntity.setCreatedAt(convertTime(messageEntity.getCreatedAt(), timeZone));\n\n          messageArray.add(i, messageEntity);\n        }\n      }\n    } catch (JSONException exp) {\n      Log.d(\"Reactor API: \", exp.getMessage());\n    }\n    return messageArray;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4127, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [387], "initializationEnd": [407], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["getMessage()", "d(String,String)"], "tryExpressionStart": 301, "tryExpressionEnd": 305, "tryBlockStart": 301, "tryBlockEnd": 936, "catchExpressionStart": 628, "catchExpressionEnd": 662, "catchBlockStart": 628, "catchBlockEnd": 731, "exceptionHandlingCallStart": [707, 670], "exceptionHandlingCallEnd": [723, 724], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [426], "configurationEnd": [457], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 540, "focalAPIEnd": 573, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONObject(int)"], "useStart": [540], "useEnd": [590], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/tags/LastVersionForSDK1.1/shell/src/com/google/marvin/shell/StreetLocator.java", "rawCode": "  /**\n   * Queries the map server and obtains the reverse geocoded address of the specified location.\n   *\n   * @param lat The latitude in degrees\n   * @param lon The longitude in degrees\n   * @return Returns the reverse geocoded address\n   */\n  public String getAddress(double lat, double lon) {\n    try {\n      String resp = getResult(makeGeoURL(lat, lon));\n      JSONObject jsonObj = new JSONObject(resp);\n      int code = jsonObj.getJSONObject(\"Status\").getInt(\"code\");\n      if (code == 200) {\n        return extendShorts(\n            jsonObj.getJSONArray(\"Placemark\").getJSONObject(0).getString(\"address\"));\n      }\n    } catch (MalformedURLException mue) {\n      Log.d(\"Locator\", \"Malformed URL: \" + mue.getMessage());\n    } catch (IOException e) {\n      Log.d(\"Locator\", \"Error reading from Map server: \" + e.toString());\n    } catch (JSONException e) {\n      Log.d(\"Locator\", \"Error in JSON response: \" + e.getMessage());\n    }\n    return null;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4128, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [238], "initializationEnd": [262], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 213, "tryExpressionEnd": 217, "tryBlockStart": 213, "tryBlockEnd": 511, "catchExpressionStart": 457, "catchExpressionEnd": 477, "catchBlockStart": 457, "catchBlockEnd": 511, "exceptionHandlingCallStart": [485], "exceptionHandlingCallEnd": [504], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 299, "focalAPIEnd": 355, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseList(array)", "jSONObject.getJSONArray(String)"], "useStart": [289, 393], "useEnd": [356, 448], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dbstar/dbstar/tree/master/DbstarLauncher/src/com/dbstar/guodian/parse/PowerConsumptionTrendDataHandler.java", "rawCode": "  public static PowerConsumptionTrend parse(String data) {\n    String jsonData = data.substring(1, data.length() - 1);\n    PowerConsumptionTrend trend = new PowerConsumptionTrend();\n    JSONObject jsonObject;\n    try {\n      jsonObject = new JSONObject(jsonData);\n      trend.HuanBiList = parseList(jsonObject.getJSONArray(JsonTag.TAGPeriodOfLastYearList));\n      trend.TongBiList = parseList(jsonObject.getJSONArray(JsonTag.TAGComOfSamePeriodList));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return trend;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4129, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [834], "initializationEnd": [889], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new IOException(*)"], "tryExpressionStart": 803, "tryExpressionEnd": 807, "tryBlockStart": 803, "tryBlockEnd": 2582, "catchExpressionStart": 2519, "catchExpressionEnd": 2543, "catchBlockStart": 2519, "catchBlockEnd": 2582, "exceptionHandlingCallStart": [2557], "exceptionHandlingCallEnd": [2575], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 923, "focalAPIEnd": 952, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 960, "followUpCheckExpressionEnd": 1007, "followUpCheckBlockStart": 960, "followUpCheckBlockEnd": 2253, "use": ["array.getJSONObject(int)", "jSONObject.getJSONArray(String)"], "useStart": [1038, 2331], "useEnd": [1067, 2368], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elka-projekt/cs-voltdb/tree/master/src/frontend/org/voltdb/export/ExportProtoMessage.java", "rawCode": "  /**\n   * Provide a simple accessor to read the list of advertised data sources returned as the payload\n   * to an open response.\n   *\n   * @return List of data sources advertised with an open response.\n   * @throws IOException\n   */\n  public Pair<ArrayList<AdvertisedDataSource>, ArrayList<String>> getAdvertisedDataSourcesAndNodes()\n      throws IOException {\n    if (!isOpenResponse()) {\n      return null;\n    }\n\n    ArrayList<AdvertisedDataSource> sources = new ArrayList<AdvertisedDataSource>();\n    ArrayList<String> nodes = new ArrayList<String>();\n    Pair<ArrayList<AdvertisedDataSource>, ArrayList<String>> retval =\n        new Pair<ArrayList<AdvertisedDataSource>, ArrayList<String>>(sources, nodes);\n\n    byte stringBytes[] = new byte[m_data.remaining()];\n    m_data.get(stringBytes);\n    try {\n      JSONObject jsObj = new JSONObject(new String(stringBytes, Charsets.UTF_8));\n\n      JSONArray sourcesArray = jsObj.getJSONArray(\"sources\");\n      for (int i = 0; i < sourcesArray.length(); i++) {\n        JSONObject source = sourcesArray.getJSONObject(i);\n        long version = source.getLong(\"adVersion\");\n        if (version != 0) {\n          throw new IOException(\"Unexpected ad version \" + version);\n        }\n        JSONArray columns = source.getJSONArray(\"columns\");\n        ArrayList<VoltType> types = new ArrayList<VoltType>(columns.length());\n        ArrayList<String> names = new ArrayList<String>(columns.length());\n        ArrayList<Integer> lengths = new ArrayList<Integer>(columns.length());\n\n        long generation = source.getLong(\"generation\");\n        int p_id = source.getInt(\"partitionId\");\n        String t_signature = source.getString(\"signature\");\n        String t_name = source.getString(\"tableName\");\n        long sysStartTimestamp = source.getLong(\"startTime\");\n\n        for (int jj = 0; jj < columns.length(); jj++) {\n          JSONObject column = columns.getJSONObject(jj);\n          names.add(column.getString(\"name\"));\n          types.add(VoltType.get((byte) column.getInt(\"type\")));\n          lengths.add(column.getInt(\"length\"));\n        }\n        sources.add(\n            new AdvertisedDataSource(\n                p_id, t_signature, t_name, sysStartTimestamp, generation, names, types, lengths));\n      }\n\n      // deserialize the list of running hosts\n      JSONArray hostsArray = jsObj.getJSONArray(\"clusterMetadata\");\n      for (int i = 0; i < hostsArray.length(); i++) {\n        String hostname = hostsArray.getString(i);\n\n        nodes.add(hostname);\n      }\n    } catch (JSONException e) {\n      throw new IOException(e);\n    }\n\n    return retval;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4130, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.keys()", "jSONObject.getString(String)"], "configurationStart": [372, 494], "configurationEnd": [389, 526], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 3062, "focalAPIEnd": 3102, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONObject(int)", "jSONObject.getJSONArray(String)", "array.getJSONObject(int)", "jSONObject.getJSONArray(String)", "array.getJSONObject(int)"], "useStart": [3263, 3683, 3884, 5145, 5360], "useEnd": [3289, 3723, 3910, 5185, 5386], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apavlo/h-store/tree/master/src/frontend/edu/brown/catalog/CatalogKey.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  private static <T extends CatalogType> T getFromKey(\n      Database catalog_db, JSONObject jsonObject, Class<T> catalog_class) throws JSONException {\n    if (debug.val) LOG.debug(\"Retrieving catalog key for \" + jsonObject);\n    T catalog_child = null;\n    CatalogType catalog_parent = null;\n\n    String parent_key = CollectionUtil.first(jsonObject.keys());\n    String orig_parent_key = parent_key;\n    String multiattribute_key = null;\n    String child_key = jsonObject.getString(parent_key);\n\n    // SPECIAL CASE: MultiAttribute\n    if (parent_key.contains(MULTIATTRIBUTE_DELIMITER)) {\n      String split[] = MULTIATTRIBUTE_DELIMITER_REGEX.split(parent_key);\n      assert (split.length == 2);\n      parent_key = split[0];\n      multiattribute_key = split[1];\n    }\n\n    List<Class<?>> superclasses = ClassUtil.getSuperClasses(catalog_class);\n\n    // Get the parent based on the type of the object they want back\n    if (superclasses.contains(Column.class)\n        || catalog_class.equals(Index.class)\n        || catalog_class.equals(Constraint.class)\n        || catalog_class.equals(MaterializedViewInfo.class)) {\n      catalog_parent = catalog_db.getTables().get(parent_key);\n    } else if (catalog_class.equals(Statement.class)\n        || superclasses.contains(ProcParameter.class)) {\n      catalog_parent = catalog_db.getProcedures().get(parent_key);\n    } else if (catalog_class.equals(Table.class) || catalog_class.equals(Procedure.class)) {\n      catalog_parent = catalog_db;\n    } else if (catalog_class.equals(Host.class)) {\n      catalog_parent = (Cluster) catalog_db.getParent();\n      // SPECIAL CASE: StmtParameter\n    } else if (catalog_class.equals(StmtParameter.class)) {\n      String split[] = PARENT_DELIMITER_REGEX.split(parent_key);\n      assert (split.length == 2);\n      Procedure catalog_proc = catalog_db.getProcedures().getIgnoreCase(split[0]);\n      assert (catalog_proc != null);\n      catalog_parent = catalog_proc.getStatements().getIgnoreCase(split[1]);\n    }\n    // Don't throw this error because it may be a dynamic catalog type that\n    // we use for the Markov stuff\n    // } else {\n    // assert(false) : \"Unexpected Catalog key type '\" + catalog_class +\n    // \"'\";\n    // }\n\n    // It's ok for the parent to be missing, but it's *not* ok if the child\n    // is missing\n    if (catalog_parent != null) {\n      if (debug.val) {\n        LOG.debug(\"Catalog Parent: \" + CatalogUtil.getDisplayName(catalog_parent));\n        LOG.debug(\"MultiAttribute Key: \" + multiattribute_key);\n        LOG.debug(\"Child Key: \" + child_key);\n      }\n      // COLUMN\n      if (superclasses.contains(Column.class)) {\n        // SPECIAL CASE: Replicated Column\n        if (child_key.equals(ReplicatedColumn.COLUMN_NAME)) {\n          catalog_child = (T) ReplicatedColumn.get((Table) catalog_parent);\n\n          // SPECIAL CASE: VerticalPartitionColumn\n        } else if (multiattribute_key != null\n            && multiattribute_key.equalsIgnoreCase(VerticalPartitionColumn.PREFIX)) {\n          JSONArray jsonArray = jsonObject.getJSONArray(orig_parent_key);\n          Column params[] = new Column[jsonArray.length()];\n          for (int i = 0; i < params.length; i++) {\n            params[i] = getFromKey(catalog_db, jsonArray.getJSONObject(i), Column.class);\n          } // FOR\n          assert (params.length == 2) : \"Invalid VerticalPartitionColumn Key: \" + child_key;\n          catalog_child = (T) VerticalPartitionColumn.get(params[0], (MultiColumn) params[1]);\n\n          // SPECIAL CASE: MultiColumn\n        } else if (multiattribute_key != null && multiattribute_key.equals(MultiColumn.PREFIX)) {\n          JSONArray jsonArray = jsonObject.getJSONArray(orig_parent_key);\n          Column params[] = new Column[jsonArray.length()];\n          for (int i = 0; i < params.length; i++) {\n            params[i] = getFromKey(catalog_db, jsonArray.getJSONObject(i), Column.class);\n            assert (params[i] != null) : \"Invalid catalog key \" + jsonArray.getJSONObject(i);\n          } // FOR\n          assert (params.length > 0) : \"Invalid MultiColumn Key: \" + child_key;\n          catalog_child = (T) MultiColumn.get(params);\n\n          // Regular Columns\n        } else {\n          catalog_child = (T) ((Table) catalog_parent).getColumns().getIgnoreCase(child_key);\n        }\n\n        // INDEX\n      } else if (superclasses.contains(Index.class)) {\n        catalog_child = (T) ((Table) catalog_parent).getIndexes().getIgnoreCase(child_key);\n\n        // CONSTRAINT\n      } else if (superclasses.contains(Constraint.class)) {\n        catalog_child = (T) ((Table) catalog_parent).getConstraints().getIgnoreCase(child_key);\n\n        // MATERIALIZEDVIEW\n      } else if (superclasses.contains(MaterializedViewInfo.class)) {\n        catalog_child = (T) ((Table) catalog_parent).getViews().getIgnoreCase(child_key);\n\n        // PROCPARAMETER\n      } else if (superclasses.contains(ProcParameter.class)) {\n\n        // SPECIAL CASE: MultiProcParameter\n        if (multiattribute_key != null\n            && multiattribute_key.equalsIgnoreCase(MultiProcParameter.PREFIX)) {\n          JSONArray jsonArray = jsonObject.getJSONArray(orig_parent_key);\n          ProcParameter params[] = new ProcParameter[jsonArray.length()];\n          for (int i = 0; i < params.length; i++) {\n            params[i] = getFromKey(catalog_db, jsonArray.getJSONObject(i), ProcParameter.class);\n          } // FOR\n          assert (params.length > 1) : \"Invalid MultiProcParameter Key: \" + child_key;\n          catalog_child = (T) MultiProcParameter.get(params);\n\n          // Regular ProcParameter\n        } else {\n          catalog_child = (T) ((Procedure) catalog_parent).getParameters().getIgnoreCase(child_key);\n        }\n\n        // STATEMENT\n      } else if (superclasses.contains(Statement.class)) {\n        catalog_child = (T) ((Procedure) catalog_parent).getStatements().getIgnoreCase(child_key);\n\n        // STMTPARAMETER\n      } else if (superclasses.contains(StmtParameter.class)) {\n        catalog_child = (T) ((Statement) catalog_parent).getParameters().get(child_key);\n\n        // TABLE\n      } else if (superclasses.contains(Table.class)) {\n        catalog_child = (T) ((Database) catalog_parent).getTables().getIgnoreCase(child_key);\n        if (catalog_child == null) {\n          LOG.debug(\"TABLES: \" + CatalogUtil.debug(((Database) catalog_parent).getTables()));\n        }\n\n        // PROCEDURE\n      } else if (superclasses.contains(Procedure.class)) {\n        catalog_child = (T) ((Database) catalog_parent).getProcedures().getIgnoreCase(child_key);\n\n        // HOST\n      } else if (superclasses.contains(Host.class)) {\n        catalog_child = (T) ((Cluster) catalog_parent).getHosts().getIgnoreCase(child_key);\n\n        // UNKNOWN!\n      } else {\n        LOG.fatal(\"Invalid child class '\" + catalog_class + \"' for catalog key \" + child_key);\n        assert (false);\n      }\n      return (catalog_child);\n    }\n    return (null);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4131, "initialization": ["JSONObject jSONObject = fromObject(String)", "String name = String.substring(int,int)"], "initializationStart": [90, 476], "initializationEnd": [117, 499], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["name.indexOf(String)", "name.substring(*)", "name.substring(int,int)"], "configurationStart": [381, 423, 476], "configurationEnd": [397, 447, 499], "guardCondition": "name.endsWith(\"]\",)", "guardType": "IF {", "guardExpressionStart": 336, "guardExpressionEnd": 358, "guardBlockStart": 336, "guardBlockEnd": 878, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 527, "focalAPIEnd": 551, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.get(int)", "array.getJSONArray(int)", "jSONObject.get(String)"], "useStart": [699, 774, 854], "useEnd": [715, 799, 869], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/auxgroup-sanxing/Sesame/tree/master/sesame-component/process-ec/src/main/java/com/sanxing/sesame/ext/xslt/StringUtil.java", "rawCode": "  public static String fromJson(String json, String expression) {\n    JSONObject object = JSONObject.fromObject(json);\n    String[] properties = expression.split(\"\\\\.\");\n    Object value = null;\n    for (int i = 0; i < properties.length; i++) {\n      if (object == null) {\n        break;\n      }\n      String key = properties[i];\n      if (key.endsWith(\"]\")) {\n        int index = key.indexOf(\"[\");\n        String[] idxs = key.substring(index + 1).split(\"\\\\[\");\n        key = key.substring(0, index);\n        JSONArray array = object.getJSONArray(key);\n        for (int j = 0; j < idxs.length; j++) {\n          index = Integer.parseInt(idxs[j].substring(0, idxs[j].indexOf(\"]\")));\n          value = array.get(index);\n          if (j < idxs.length - 1) {\n            array = array.getJSONArray(index);\n          }\n        }\n      } else {\n        value = object.get(key);\n      }\n      if (i < properties.length - 1) {\n        object = (JSONObject) value;\n      }\n    }\n    return value == null ? \"\" : value.toString();\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4132, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["i(String,String,*)"], "tryExpressionStart": 451, "tryExpressionEnd": 455, "tryBlockStart": 451, "tryBlockEnd": 624, "catchExpressionStart": 538, "catchExpressionEnd": 562, "catchBlockStart": 538, "catchBlockEnd": 624, "exceptionHandlingCallStart": [572], "exceptionHandlingCallEnd": [615], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 479, "focalAPIEnd": 528, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mmoutenot/SandFox/tree/master/mobile/android/base/AboutHomeContent.java", "rawCode": "  private void readRecommendedAddons(final Activity activity) {\n    final String addonsFilename = \"recommended-addons.json\";\n    String jsonString;\n    try {\n      jsonString = GeckoApp.mAppContext.getProfile().readFile(addonsFilename);\n    } catch (IOException ioe) {\n      Log.i(LOGTAG, \"filestream is null\");\n      jsonString = readFromZipFile(activity, addonsFilename);\n    }\n\n    JSONArray addonsArray = null;\n    if (jsonString != null) {\n      try {\n        addonsArray = new JSONObject(jsonString).getJSONArray(\"addons\");\n      } catch (JSONException e) {\n        Log.i(LOGTAG, \"error reading json file\", e);\n      }\n    }\n\n    final JSONArray array = addonsArray;\n    GeckoApp.mAppContext.mMainHandler.post(\n        new Runnable() {\n          public void run() {\n            try {\n              if (array == null || array.length() == 0) {\n                mAddons.hide();\n                return;\n              }\n\n              for (int i = 0; i < array.length(); i++) {\n                JSONObject jsonobj = array.getJSONObject(i);\n\n                final View row =\n                    mInflater.inflate(\n                        R.layout.abouthome_addon_row, mAddons.getItemsContainer(), false);\n                ((TextView) row.findViewById(R.id.addon_title)).setText(jsonobj.getString(\"name\"));\n                ((TextView) row.findViewById(R.id.addon_version))\n                    .setText(jsonobj.getString(\"version\"));\n\n                String iconUrl = jsonobj.getString(\"iconURL\");\n                String pageUrl = getPageUrlFromIconUrl(iconUrl);\n\n                final String homepageUrl = jsonobj.getString(\"homepageURL\");\n                row.setOnClickListener(\n                    new View.OnClickListener() {\n                      public void onClick(View v) {\n                        if (mUriLoadCallback != null) mUriLoadCallback.callback(homepageUrl);\n                      }\n                    });\n\n                Favicons favicons = GeckoApp.mAppContext.mFavicons;\n                favicons.loadFavicon(\n                    pageUrl,\n                    iconUrl,\n                    new Favicons.OnFaviconLoadedListener() {\n                      public void onFaviconLoaded(String url, Drawable favicon) {\n                        if (favicon != null) {\n                          ImageView icon = (ImageView) row.findViewById(R.id.addon_icon);\n                          icon.setImageDrawable(favicon);\n                        }\n                      }\n                    });\n\n                mAddons.addItem(row);\n              }\n\n              mAddons.show();\n            } catch (JSONException e) {\n              Log.i(LOGTAG, \"error reading json file\", e);\n            }\n          }\n        });\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4133, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 333, "focalAPIEnd": 368, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONObject(int)"], "useStart": [395], "useEnd": [418], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Frolle/Schmaps/tree/master/src/com/chalmers/schmaps/GoogleMapSearchLocation.java", "rawCode": "  /**\n   * Parses json response from google directions api\n   *\n   * @param returnedJson\n   */\n  public void parseJson(JSONObject returnedJson) {\n\n    JSONObject step, startLocation, endLocation;\n    int srcLat, srcLng, destLat, destLng;\n    GeoPoint geo;\n    geoList = new ArrayList<GeoPoint>();\n\n    try {\n      JSONArray routes = returnedJson.getJSONArray(\"routes\");\n      JSONObject route = routes.getJSONObject(0);\n      // Take all legs from the route\n      JSONArray legs = route.getJSONArray(\"legs\");\n      // Grab first leg\n      JSONObject leg = legs.getJSONObject(0);\n      // Grab all the steps from the led\n      JSONArray steps = leg.getJSONArray(\"steps\");\n\n      for (int count = 0; count < steps.length(); count++) {\n        Log.e(\"Json\", \"b\");\n        // the json returns start and end for each step, we only want one geopoint of each position\n        // that is why we only get the start once and then get the end\n        // we add the geopoint to an array of geopoints\n        if (count == 0) {\n          step = steps.getJSONObject(0);\n\n          startLocation = step.getJSONObject(\"start_location\");\n\n          srcLat = (int) (startLocation.getDouble(\"lat\") * CONVERTTOGEOPOINTVALUE);\n          srcLng = (int) (startLocation.getDouble(\"lng\") * CONVERTTOGEOPOINTVALUE);\n\n          geo = new GeoPoint(srcLat, srcLng);\n          geoList.add(0, geo);\n        }\n        step = steps.getJSONObject(count);\n\n        endLocation = step.getJSONObject(\"end_location\");\n        destLat = (int) (endLocation.getDouble(\"lat\") * CONVERTTOGEOPOINTVALUE);\n        destLng = (int) (endLocation.getDouble(\"lng\") * CONVERTTOGEOPOINTVALUE);\n\n        geo = new GeoPoint(destLat, destLng);\n        geoList.add(count + 1, geo);\n      }\n\n      // creata an overlay and canvas so we can draw the path\n      pathOverlay = new PathOverlay(geoList);\n      Canvas canvas = new Canvas();\n\n      // adds the overay to the list of overlays and calls the draw-method to dra it\n      mapOverlays.add(pathOverlay);\n      pathOverlay.draw(canvas, mapView, true);\n      mapView.postInvalidate();\n\n    } catch (JSONException e) {\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4134, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 179, "focalAPIEnd": 259, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 332, "followUpCheckExpressionEnd": 378, "followUpCheckBlockStart": 332, "followUpCheckBlockEnd": 1712, "use": ["array.getJSONObject(int)"], "useStart": [408], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBIQbeEngine/src/it/eng/spagobi/engines/worksheet/serializer/json/WorkSheetJSONDeserializer.java", "rawCode": "  private void deserializeOptions(\n      JSONObject workSheetDefinitionJSON, WorkSheetDefinition workSheetDefinition)\n      throws Exception {\n    JSONArray optionsJSON =\n        workSheetDefinitionJSON.getJSONArray(WorkSheetSerializationUtils.FIELDS_OPTIONS);\n    WorksheetFieldsOptions options = new WorksheetFieldsOptions();\n    for (int i = 0; i < optionsJSON.length(); i++) {\n\n      JSONObject aField = optionsJSON.getJSONObject(i);\n      String nature = aField.getString(\"nature\");\n      Field field = null;\n      if (nature.equals(\"postLineCalculated\")\n          || nature.equals(\"segment_attribute\")\n          || nature.equals(\"attribute\")) {\n        Attribute attribute =\n            (Attribute)\n                SerializationManager.deserialize(aField, \"application/json\", Attribute.class);\n        field = attribute;\n      } else {\n        Measure measure =\n            (Measure) SerializationManager.deserialize(aField, \"application/json\", Measure.class);\n        field = measure;\n      }\n\n      JSONObject optionsForFieldJSON = aField.getJSONObject(WorkSheetSerializationUtils.OPTIONS);\n      Iterator optionsForFieldKeysIt = optionsForFieldJSON.keys();\n      List<FieldOption> fieldOptionList = new ArrayList<FieldOption>();\n      while (optionsForFieldKeysIt.hasNext()) {\n        String name = (String) optionsForFieldKeysIt.next();\n        Object value = optionsForFieldJSON.get(name);\n        FieldOption o = WorksheetFieldsOptions.createOption(field, name, value);\n        fieldOptionList.add(o);\n      }\n\n      FieldOptions fieldOptions = new FieldOptions();\n      fieldOptions.setField(field);\n      fieldOptions.setOptions(fieldOptionList);\n\n      options.addFieldOptions(fieldOptions);\n    }\n    workSheetDefinition.setFieldsOptions(options);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4135, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 680, "guardExpressionEnd": 723, "guardBlockStart": 680, "guardBlockEnd": 1050, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 751, "focalAPIEnd": 798, "followUpCheck": "j < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 806, "followUpCheckExpressionEnd": 847, "followUpCheckBlockStart": 806, "followUpCheckBlockEnd": 1044, "use": ["array.getJSONObject(int)", "array.getJSONObject(int)"], "useStart": [862, 950], "useEnd": [885, 973], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/cspi-webui/src/main/java/org/collectionspace/chain/csp/webui/record/RecordRead.java", "rawCode": "  private JSONArray getPermissions(Storage storage, JSONObject activePermissionInfo)\n      throws ExistException, UnimplementedException, UnderlyingStorageException, JSONException,\n          UIException {\n    final String WORKFLOW_DELETE_RESOURCE_TAIL = WORKFLOW_SUB_RESOURCE + \"delete\";\n    final String WORKFLOW_LOCK_RESOURCE_TAIL = WORKFLOW_SUB_RESOURCE + \"lock\";\n\n    JSONArray set = new JSONArray();\n    JSONObject activePermissions = new JSONObject();\n\n    // log.info(activePermissionInfo.toString());\n    // we are ignoring pagination so this will return the first 40 roles only\n    // UI doesn't know what it wants to do about pagination etc\n    // mark active roles\n    if (activePermissionInfo.has(\"permission\")) {\n      JSONArray active = activePermissionInfo.getJSONArray(\"permission\");\n      for (int j = 0; j < active.length(); j++) {\n        if (active.getJSONObject(j).length() != 0) {\n          activePermissions.put(\n              active.getJSONObject(j).getString(\"resourceName\"), active.getJSONObject(j));\n        }\n      }\n    }\n\n    JSONObject mergedPermissions = new JSONObject();\n\n    // get all permissions\n    int pageNum = 0;\n    JSONObject permrestrictions = new JSONObject();\n    permrestrictions.put(\"queryTerm\", \"actGrp\");\n    permrestrictions.put(\"queryString\", \"CRUDL\");\n    // Passing page size 0 gets all the perms in one call.\n    permrestrictions.put(\"pageSize\", Integer.toString(pageNum));\n    String permbase = spec.getRecordByWebUrl(\"permission\").getID();\n    JSONObject returndata = searcher.getJSON(storage, permrestrictions, \"items\", permbase);\n\n    // While loop since perms do not return pagination info - must call till no more\n    // while(returndata.has(\"items\") && returndata.getJSONArray(\"items\").length()>0){\n    // Using pageSize=0, we get all perms in one call, so no need to loop\n    if (returndata.has(\"items\") && returndata.getJSONArray(\"items\").length() > 0) {\n\n      // merge active and nonactive\n      JSONArray items = returndata.getJSONArray(\"items\");\n      for (int i = 0; i < items.length(); i++) {\n        JSONObject item = items.getJSONObject(i);\n        JSONObject permission = new JSONObject();\n        String resourceName = item.getString(\"summary\");\n        String resourceNameUI;\n        // Need to get baseResource for workflow perms\n        int startWorkflowSubResource = resourceName.indexOf(WORKFLOW_SUB_RESOURCE);\n        if (startWorkflowSubResource > 0) { // Contains the workflow subresource\n          // Get the base resource that the workflow is related to\n          int start = (resourceName.startsWith(\"/\")) ? 1 : 0;\n          String baseResource = resourceName.substring(start, startWorkflowSubResource);\n          resourceNameUI = Generic.ResourceNameUI(spec, baseResource);\n        } else {\n          resourceNameUI = Generic.ResourceNameUI(spec, resourceName);\n        }\n        permission.put(\"resourceName\", resourceNameUI);\n        String permlevel = \"none\";\n\n        Record recordForPermResource = Generic.RecordNameServices(spec, resourceNameUI);\n\n        if ((startWorkflowSubResource > 0) && (recordForPermResource != null)) {\n          // Handle the lock workflow resource\n          if (recordForPermResource.supportsLocking()\n              && resourceName.endsWith(\"lock\")\n              && activePermissions.has(resourceName)\n              && Generic.PermissionIncludesWritable(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"))) {\n            // If we have write or delete perms on the workflow resource, set the permLevel\n            // on the base resource.\n            // Should be, but UI not ready: permission.put(\"permission\", Generic.LOCK_PERMISSION);\n            if (!mergedPermissions.has(resourceNameUI)) {\n              // With no other knowledge, assume lock perm means writable\n              permission.put(\"permission\", Generic.WRITE_PERMISSION);\n              mergedPermissions.put(resourceNameUI, permission);\n            } else {\n              // We could check it and make sure it makes sense, but we have to trust that the UI\n              // has\n              // done something reasonable by not combining lock perm with read-only or other\n              // silliness.\n            }\n          }\n          // Handle the delete workflow resource\n          else if (recordForPermResource.hasSoftDeleteMethod()\n              && resourceName.endsWith(\"delete\")\n              && activePermissions.has(resourceName)\n              && Generic.PermissionIncludesWritable(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"))) {\n            // If we have write or delete perms on the workflow resource, set the permLevel\n            // on the base resource.\n            permission.put(\"permission\", Generic.DELETE_PERMISSION);\n            mergedPermissions.put(resourceNameUI, permission);\n          } else {\n            // Filter these out - no need to model them, as we do not support them\n            // This is a performance improvement so we do not have to handle them on\n            // update.\n          }\n        } else if (activePermissions.has(resourceName) && !mergedPermissions.has(resourceNameUI)) {\n          permlevel =\n              Generic.PermissionLevelString(\n                  activePermissions.getJSONObject(resourceName).getString(\"actionGroup\"));\n\n          permission.put(\"permission\", permlevel);\n          mergedPermissions.put(resourceNameUI, permission);\n        } else if (!mergedPermissions.has(resourceNameUI)) {\n          permlevel = \"none\";\n\n          permission.put(\"permission\", permlevel);\n          mergedPermissions.put(resourceNameUI, permission);\n        }\n      }\n\n      // pageNum++;\n      // permrestrictions.put(\"pageNum\", Integer.toString(pageNum));\n      // returndata = searcher.getJSON(storage,permrestrictions,\"items\",permbase);\n    }\n\n    // change soft workflow to main Delete\n\n    // now put the permissions in order...\n    String[] recordsweburl = spec.getAllRecordsOrdered();\n\n    for (String weburl : recordsweburl) {\n      if (mergedPermissions.has(weburl)) {\n        Object value = mergedPermissions.get(weburl);\n        set.put(value);\n      }\n    }\n    Iterator rit = mergedPermissions.keys();\n    while (rit.hasNext()) {\n      String key = (String) rit.next();\n      Object value = mergedPermissions.get(key);\n\n      if (!spec.hasRecordByWebUrl(key)) {\n        set.put(value);\n      }\n    }\n\n    return set;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4136, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [1398], "initializationEnd": [1428], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1219, "tryExpressionEnd": 1223, "tryBlockStart": 1219, "tryBlockEnd": 2091, "catchExpressionStart": 1950, "catchExpressionEnd": 1974, "catchBlockStart": 1950, "catchBlockEnd": 2091, "exceptionHandlingCallStart": [2037], "exceptionHandlingCallEnd": [2056], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1469, "focalAPIEnd": 1500, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getDouble(int)", "array.getDouble(int)"], "useStart": [1543, 1636], "useEnd": [1580, 1674], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bryanjimenez/empanada/tree/master/cache/cache/src/cache_controller/FileReader.java", "rawCode": "  public void run() {\n    runThread = true;\n\n    while (runThread) {\n      // Sleep on every iteration\n      try {\n\n        Thread.sleep(SLEEP_TIME);\n      } catch (InterruptedException e) {\n        // Should never happen\n        e.printStackTrace();\n      }\n\n      // Read file\n      File outputFile = new File(OUTPUT_FILE_LOCATION);\n\n      if (outputFile.exists()) {\n        // Get scanner for the file\n        Scanner filescan = null;\n        try {\n          filescan = new Scanner(outputFile);\n        } catch (FileNotFoundException e) {\n          // File was just deleted\n          e.printStackTrace();\n          continue;\n        }\n\n        Map<String, String[]> parsedTweets = new HashMap<String, String[]>();\n\n        while (filescan.hasNextLine()) {\n          String line = filescan.nextLine();\n\n          // Get values from tweet\n          String[] lineSplit = line.split(\"\\t\");\n          String tweetFilter = lineSplit[FILE_FILTER_INDEX];\n          String tweetStr = lineSplit[FILE_JSON_INDEX];\n          String tweetRating = lineSplit[FILE_RATING_INDEX];\n\n          JSONObject tweetJson = null;\n          String tweetID = null;\n          String tweetLat = null;\n          String tweetLng = null;\n\n          try {\n            tweetJson = new JSONObject(tweetStr);\n\n            // Get coordinates\n            if (tweetStr.indexOf(\"\\\"geo\\\": null\") == -1) {\n\n              JSONObject geo = tweetJson.getJSONObject(\"geo\");\n\n              JSONArray coordinates = geo.getJSONArray(\"coordinates\");\n              tweetLat = Double.toString(coordinates.getDouble(JSON_LAT_INDEX)); // Latitude\n              tweetLng = Double.toString(coordinates.getDouble(JSON_LONG_INDEX)); // Longitude\n\n              // Get tweet ID\n              tweetID = tweetJson.getString(\"id_str\"); // ID\n\n              String[] columns = {tweetFilter, tweetStr, tweetLat, tweetLng, tweetRating};\n              parsedTweets.put(tweetID, columns);\n            }\n          } catch (JSONException e) {\n            // json not formatted properly, skip\n            e.printStackTrace();\n            continue;\n          }\n        }\n\n        filescan.close();\n\n        // Add to HBase\n        HBaseConnection hbase = new HBaseConnection();\n\n        try {\n          hbase.put(parsedTweets);\n        } catch (IOException e) {\n          // Not written to HBase, don't delete the file\n          e.printStackTrace();\n          continue;\n        }\n\n        // Erase file\n        outputFile.setWritable(true);\n        outputFile.delete();\n      }\n    }\n\n    threadFinished = true;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4137, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [543], "initializationEnd": [563], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [620], "configurationEnd": [643], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 701, "focalAPIEnd": 739, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 900, "followUpCheckExpressionEnd": 946, "followUpCheckBlockStart": 900, "followUpCheckBlockEnd": 1061, "use": ["jSONObject.getJSONArray(String)", "array.getInt(int)"], "useStart": [772, 997], "useEnd": [813, 1018], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/klossalex/walkingarchive-backend/tree/master/src/main/java/org/walkingarchive/backend/controller/TradeController.java", "rawCode": "  /**\n   * Updates a previously created trade with the given information in the JSON parameter.\n   *\n   * @param json - a String of JSON spcifying the id of the Trade to modify, a list of integer ids\n   *     for 'givingCards', and a list of integer ids for 'receivingCards'\n   * @return HTTP Response ok with the newly modified Tade information as a JSON object\n   * @throws Exception\n   */\n  @POST\n  @Path(\"update\")\n  @Consumes(MediaType.APPLICATION_JSON)\n  public Response update(String json) throws Exception {\n    JSONObject jsonObject = new JSONObject(json);\n    Trade trade = TradeDAO.getInstance().getTradeForId(jsonObject.getInt(\"id\"));\n    trade.setActive(true);\n    JSONArray cardsGiving = jsonObject.getJSONArray(\"givingCards\");\n    JSONArray cardsReceiving = jsonObject.getJSONArray(\"receivingCards\");\n\n    trade.removeAllCardsFromGiving();\n    trade.removeAllCardsFromReceiving();\n\n    for (int i = 0; i < cardsGiving.length(); i++) {\n      Card card = CardDAO.getInstance().getCard(cardsGiving.getInt(i));\n      trade.addCardToGiving(card);\n    }\n    for (int i = 0; i < cardsReceiving.length(); i++) {\n      Card card = CardDAO.getInstance().getCard(cardsReceiving.getInt(i));\n      trade.addCardToReceiving(card);\n    }\n\n    trade = TradeDAO.getInstance().updateTrade(trade);\n\n    return Response.ok(trade, MediaType.APPLICATION_JSON).build();\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4138, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [169], "initializationEnd": [194], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 219, "focalAPIEnd": 243, "followUpCheck": "j < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 253, "followUpCheckExpressionEnd": 290, "followUpCheckBlockStart": 253, "followUpCheckBlockEnd": 392, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ichmed/BOLT/tree/master/BOLT/src/editor/Editor.java", "rawCode": "  ArrayList<String> getGroups() {\n    ArrayList<String> groups = new ArrayList<>();\n    try {\n      for (int i = 0; i < entities.length(); i++) {\n        JSONObject o = entities.getJSONObject(i);\n        JSONArray gr = o.getJSONArray(\"groups\");\n        for (int j = 0; j < gr.length(); j++) {\n          if (!groups.contains(\"$\" + gr.getString(j))) groups.add(\"$\" + gr.getString(j));\n        }\n      }\n    } catch (Exception e) {\n    }\n    Collections.sort(groups);\n    return groups;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4139, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 314, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.put(JSONObject)"], "useStart": [586], "useEnd": [616], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/editor/server/src/de/hpi/bpmn2xpdl/XPDLWorkflowProcess.java", "rawCode": "  public void writeTransitions(JSONObject modelElement) throws JSONException {\n    if (getTransitions() != null) {\n      ArrayList<XPDLTransition> transitionsList = getTransitions().getTransitions();\n      if (transitionsList != null) {\n        initializeChildShapes(modelElement);\n        JSONArray childShapes = modelElement.getJSONArray(\"childShapes\");\n\n        for (int i = 0; i < transitionsList.size(); i++) {\n          JSONObject newTransition = new JSONObject();\n          XPDLTransition transition = transitionsList.get(i);\n          transition.write(newTransition);\n          childShapes.put(newTransition);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4140, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [98], "initializationEnd": [118], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 148, "focalAPIEnd": 183, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 345, "followUpCheckExpressionEnd": 391, "followUpCheckBlockStart": 345, "followUpCheckBlockEnd": 841, "use": ["array.getJSONObject(int)", "array.getJSONObject(int)"], "useStart": [417, 959], "useEnd": [445, 987], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bluesoft-rnd/signavio-core-mirror/tree/master/platform/src/pl/net/bluesoft/rnd/processtool/editor/AperteWorkflowDefinitionGenerator.java", "rawCode": "  private JSONObject enrichModelerDataForBpmn20() throws JSONException {\n    JSONObject jsonObj = new JSONObject(json);\n    JSONArray childShapes = jsonObj.getJSONArray(\"childShapes\");\n    Map<String, JSONObject> outgoingMap = new HashMap<String, JSONObject>();\n    Map<String, JSONObject> resourceIdMap = new HashMap<String, JSONObject>();\n    for (int i = 0; i < childShapes.length(); i++) {\n      JSONObject obj = childShapes.getJSONObject(i);\n      fixBounds(obj);\n      fixDockers(obj);\n      resourceIdMap.put(obj.getString(\"resourceId\"), obj);\n      if (obj.has(\"outgoing\")) {\n        JSONArray outgoing = obj.getJSONArray(\"outgoing\");\n        for (int j = 0; j < outgoing.length(); j++) {\n          JSONObject outobj = outgoing.getJSONObject(j);\n          outgoingMap.put(outobj.getString(\"resourceId\"), obj);\n        }\n      }\n    } // update user step with assignment data\n    for (int i = 0; i < childShapes.length(); i++) {\n      JSONObject obj = childShapes.getJSONObject(i);\n      String stencilId = obj.getJSONObject(\"stencil\").getString(\"id\");\n\n      if (\"Task\".equals(stencilId)) {\n        String taskType = obj.getJSONObject(\"properties\").getString(\"tasktype\");\n        if (\"User\".equals(taskType)) {\n          enrichBpmn20AssignmentConfig(obj, resourceIdMap);\n        } else {\n          enrichBpmn20JavaTask(obj, resourceIdMap);\n        }\n      } else if (\"SequenceFlow\".equals(stencilId)) {\n        enrichBpmn20SequenceFlow(obj, outgoingMap, resourceIdMap);\n      } else if (\"Exclusive_Databased_Gateway\".equals(stencilId)) {\n\n      }\n    }\n    return jsonObj;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4141, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [694], "initializationEnd": [714], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)", "jSONObject.getString(String)"], "configurationStart": [765, 809], "configurationEnd": [780, 836], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 865, "focalAPIEnd": 888, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 949, "followUpCheckExpressionEnd": 992, "followUpCheckBlockStart": 949, "followUpCheckBlockEnd": 1043, "use": ["jSONObject.getJSONArray(String)", "jSONObject.getJSONObject(String)", "jSONObject.getString(String)", "jSONObject.getJSONArray(String)"], "useStart": [1107, 1944, 2057, 2117], "useEnd": [1132, 1968, 2083, 2144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cangevine/STEAMnet/tree/master/android/src/APIHandlers/GetIdeaForDetail.java", "rawCode": "    Idea parseData(String data) throws JSONException {\n      // Ideas\n      final String ID = \"id\";\n      final String DESCRIPTION = \"description\";\n      final String TAGS = \"tags\";\n      final String SPARKS = \"sparks\";\n      final String USER = \"user\";\n      // Sparks (currently unused)\n      final String SPARK_TYPE = \"spark_type\";\n      final String CONTENT_TYPE = \"content_type\";\n      final String CONTENT = \"content\";\n      final String CREATED_AT = \"created_at\";\n      final String COMMENTS = \"comments\";\n      final String COMMENT_TEXT = \"comment_text\";\n      final String NAME = \"name\";\n      final String FILE = \"file\";\n\n      // getting JSON string from URL\n      JSONObject json = new JSONObject(data);\n\n      // Getting Idea parameters\n      int id = json.getInt(ID);\n      String description = json.getString(DESCRIPTION);\n      JSONArray tagsJSON = json.getJSONArray(TAGS);\n      String[] tags = new String[tagsJSON.length()];\n      for (int i = 0; i < tagsJSON.length(); i++) {\n        tags[i] = tagsJSON.getString(i);\n      }\n\n      // Getting Array of Sparks\n      JSONArray sparksJSON = json.getJSONArray(SPARKS);\n      Spark[] sparks = new Spark[sparksJSON.length()];\n      for (int i = 0; i < sparksJSON.length(); i++) {\n        Log.v(\"Get idea for detail\", \"One spark retrieved\");\n        JSONObject s = sparksJSON.getJSONObject(i);\n\n        int sparkId = s.getInt(ID);\n        String sparkDate = s.getString(CREATED_AT);\n        char sparkContentType = s.getString(CONTENT_TYPE).charAt(0);\n        char sparkType = s.getString(SPARK_TYPE).charAt(0);\n        String content = s.getString(CONTENT);\n\n        Spark newSpark = new Spark(sparkId, sparkType, sparkContentType, content, sparkDate);\n        if (s.has(FILE)) {\n          String fileUrl = s.getString(FILE);\n          newSpark.setCloudLink(fileUrl);\n        }\n        sparks[i] = newSpark;\n      }\n      // Getting Array of Users\n      JSONObject firstUserJSON = json.getJSONObject(USER);\n      String firstUser = firstUserJSON.getString(NAME);\n\n      String firstCreatedAt = json.getString(CREATED_AT);\n\n      JSONArray ideaComments = json.getJSONArray(COMMENTS);\n      Comment[] comments = new Comment[ideaComments.length()];\n      for (int i = 0; i < ideaComments.length(); i++) {\n        JSONObject c = ideaComments.getJSONObject(i);\n        int curCommentId = c.getInt(ID);\n        String curCommentContent = c.getString(COMMENT_TEXT);\n        JSONObject curCommentUser = c.getJSONObject(USER);\n        String curCommentUsername = curCommentUser.getString(NAME);\n        Comment newComment = new Comment(curCommentId, curCommentContent, curCommentUsername);\n        comments[i] = newComment;\n      }\n\n      return new Idea(id, description, tags, sparks, firstUser, firstCreatedAt, comments);\n    }\n"}, {"dataset": "getJSONArray", "exampleID": 4142, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["d(*,String)"], "tryExpressionStart": 3235, "tryExpressionEnd": 3239, "tryBlockStart": 3235, "tryBlockEnd": 5397, "catchExpressionStart": 5313, "catchExpressionEnd": 5337, "catchBlockStart": 5313, "catchBlockEnd": 5397, "exceptionHandlingCallStart": [5345], "exceptionHandlingCallEnd": [5390], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [1177], "configurationEnd": [1206], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 3256, "focalAPIEnd": 3292, "followUpCheck": "array != null", "checkType": "IF", "followUpCheckExpressionStart": 3300, "followUpCheckExpressionEnd": 3319, "followUpCheckBlockStart": 3300, "followUpCheckBlockEnd": 5306, "use": ["array.get(int)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "getJsonString(jSONObject,String)", "getJsonString(jSONObject,String)", "jSONObject.getJSONArray(String)", "getJsonString(jSONObject,String)", "jSONObject.getJSONArray(String)"], "useStart": [3416, 5474, 7664, 11750, 14642, 16625, 17172, 17821, 20038, 21099], "useEnd": [3429, 5504, 7697, 11787, 14669, 16655, 17206, 17849, 20072, 21129], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudspokes/mobile_campus/tree/master/aau/android/SalesforceSDK/libs/incubator-cordova-android-framework/src/org/apache/cordova/ContactAccessorSdk5.java", "rawCode": "  /**\n   * Creates a new contact and stores it in the database\n   *\n   * @param id the raw contact id which is required for linking items to the contact\n   * @param contact the contact to be saved\n   * @param account the account to be saved under\n   */\n  private String modifyContact(\n      String id, JSONObject contact, String accountType, String accountName) {\n    // Get the RAW_CONTACT_ID which is needed to insert new values in an already existing contact.\n    // But not needed to update existing values.\n    int rawId = (new Integer(getJsonString(contact, \"rawId\"))).intValue();\n\n    // Create a list of attributes to add to the contact database\n    ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();\n\n    // Add contact type\n    ops.add(\n        ContentProviderOperation.newUpdate(ContactsContract.RawContacts.CONTENT_URI)\n            .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, accountType)\n            .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, accountName)\n            .build());\n\n    // Modify name\n    JSONObject name;\n    try {\n      String displayName = getJsonString(contact, \"displayName\");\n      name = contact.getJSONObject(\"name\");\n      if (displayName != null || name != null) {\n        ContentProviderOperation.Builder builder =\n            ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                .withSelection(\n                    ContactsContract.Data.CONTACT_ID\n                        + \"=? AND \"\n                        + ContactsContract.Data.MIMETYPE\n                        + \"=?\",\n                    new String[] {\n                      id, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE\n                    });\n\n        if (displayName != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, displayName);\n        }\n\n        String familyName = getJsonString(name, \"familyName\");\n        if (familyName != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, familyName);\n        }\n        String middleName = getJsonString(name, \"middleName\");\n        if (middleName != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME, middleName);\n        }\n        String givenName = getJsonString(name, \"givenName\");\n        if (givenName != null) {\n          builder.withValue(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, givenName);\n        }\n        String honorificPrefix = getJsonString(name, \"honorificPrefix\");\n        if (honorificPrefix != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.PREFIX, honorificPrefix);\n        }\n        String honorificSuffix = getJsonString(name, \"honorificSuffix\");\n        if (honorificSuffix != null) {\n          builder.withValue(\n              ContactsContract.CommonDataKinds.StructuredName.SUFFIX, honorificSuffix);\n        }\n\n        ops.add(builder.build());\n      }\n    } catch (JSONException e1) {\n      Log.d(LOG_TAG, \"Could not get name\");\n    }\n\n    // Modify phone numbers\n    JSONArray phones = null;\n    try {\n      phones = contact.getJSONArray(\"phoneNumbers\");\n      if (phones != null) {\n        for (int i = 0; i < phones.length(); i++) {\n          JSONObject phone = (JSONObject) phones.get(i);\n          String phoneId = getJsonString(phone, \"id\");\n          // This is a new phone so do a DB insert\n          if (phoneId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Phone.NUMBER, getJsonString(phone, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Phone.TYPE,\n                getPhoneType(getJsonString(phone, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing phone so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Phone._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          phoneId, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Phone.NUMBER,\n                        getJsonString(phone, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Phone.TYPE,\n                        getPhoneType(getJsonString(phone, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get phone numbers\");\n    }\n\n    // Modify emails\n    JSONArray emails = null;\n    try {\n      emails = contact.getJSONArray(\"emails\");\n      if (emails != null) {\n        for (int i = 0; i < emails.length(); i++) {\n          JSONObject email = (JSONObject) emails.get(i);\n          String emailId = getJsonString(email, \"id\");\n          // This is a new email so do a DB insert\n          if (emailId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Email.DATA, getJsonString(email, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Email.TYPE,\n                getContactType(getJsonString(email, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing email so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Email._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          emailId, ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Email.DATA, getJsonString(email, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Email.TYPE,\n                        getContactType(getJsonString(email, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get emails\");\n    }\n\n    // Modify addresses\n    JSONArray addresses = null;\n    try {\n      addresses = contact.getJSONArray(\"addresses\");\n      if (addresses != null) {\n        for (int i = 0; i < addresses.length(); i++) {\n          JSONObject address = (JSONObject) addresses.get(i);\n          String addressId = getJsonString(address, \"id\");\n          // This is a new address so do a DB insert\n          if (addressId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.TYPE,\n                getAddressType(getJsonString(address, \"type\")));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS,\n                getJsonString(address, \"formatted\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.STREET,\n                getJsonString(address, \"streetAddress\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.CITY,\n                getJsonString(address, \"locality\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.REGION,\n                getJsonString(address, \"region\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE,\n                getJsonString(address, \"postalCode\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY,\n                getJsonString(address, \"country\"));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing address so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.StructuredPostal._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          addressId,\n                          ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.TYPE,\n                        getAddressType(getJsonString(address, \"type\")))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS,\n                        getJsonString(address, \"formatted\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.STREET,\n                        getJsonString(address, \"streetAddress\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.CITY,\n                        getJsonString(address, \"locality\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.REGION,\n                        getJsonString(address, \"region\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.POSTCODE,\n                        getJsonString(address, \"postalCode\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.StructuredPostal.COUNTRY,\n                        getJsonString(address, \"country\"))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get addresses\");\n    }\n\n    // Modify organizations\n    JSONArray organizations = null;\n    try {\n      organizations = contact.getJSONArray(\"organizations\");\n      if (organizations != null) {\n        for (int i = 0; i < organizations.length(); i++) {\n          JSONObject org = (JSONObject) organizations.get(i);\n          String orgId = getJsonString(org, \"id\");\n          // This is a new organization so do a DB insert\n          if (orgId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.TYPE,\n                getOrgType(getJsonString(org, \"type\")));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.DEPARTMENT,\n                getJsonString(org, \"department\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.COMPANY, getJsonString(org, \"name\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Organization.TITLE, getJsonString(org, \"title\"));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing organization so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Organization._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          orgId, ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.TYPE,\n                        getOrgType(getJsonString(org, \"type\")))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.DEPARTMENT,\n                        getJsonString(org, \"department\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.COMPANY,\n                        getJsonString(org, \"name\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Organization.TITLE,\n                        getJsonString(org, \"title\"))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get organizations\");\n    }\n\n    // Modify IMs\n    JSONArray ims = null;\n    try {\n      ims = contact.getJSONArray(\"ims\");\n      if (ims != null) {\n        for (int i = 0; i < ims.length(); i++) {\n          JSONObject im = (JSONObject) ims.get(i);\n          String imId = getJsonString(im, \"id\");\n          // This is a new IM so do a DB insert\n          if (imId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE);\n            contentValues.put(ContactsContract.CommonDataKinds.Im.DATA, getJsonString(im, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Im.TYPE,\n                getContactType(getJsonString(im, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing IM so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Im._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {imId, ContactsContract.CommonDataKinds.Im.CONTENT_ITEM_TYPE})\n                    .withValue(ContactsContract.CommonDataKinds.Im.DATA, getJsonString(im, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Im.TYPE,\n                        getContactType(getJsonString(im, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get emails\");\n    }\n\n    // Modify note\n    String note = getJsonString(contact, \"note\");\n    ops.add(\n        ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n            .withSelection(\n                ContactsContract.Data.CONTACT_ID\n                    + \"=? AND \"\n                    + ContactsContract.Data.MIMETYPE\n                    + \"=?\",\n                new String[] {id, ContactsContract.CommonDataKinds.Note.CONTENT_ITEM_TYPE})\n            .withValue(ContactsContract.CommonDataKinds.Note.NOTE, note)\n            .build());\n\n    // Modify nickname\n    String nickname = getJsonString(contact, \"nickname\");\n    if (nickname != null) {\n      ops.add(\n          ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n              .withSelection(\n                  ContactsContract.Data.CONTACT_ID\n                      + \"=? AND \"\n                      + ContactsContract.Data.MIMETYPE\n                      + \"=?\",\n                  new String[] {id, ContactsContract.CommonDataKinds.Nickname.CONTENT_ITEM_TYPE})\n              .withValue(ContactsContract.CommonDataKinds.Nickname.NAME, nickname)\n              .build());\n    }\n\n    // Modify urls\n    JSONArray websites = null;\n    try {\n      websites = contact.getJSONArray(\"urls\");\n      if (websites != null) {\n        for (int i = 0; i < websites.length(); i++) {\n          JSONObject website = (JSONObject) websites.get(i);\n          String websiteId = getJsonString(website, \"id\");\n          // This is a new website so do a DB insert\n          if (websiteId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE);\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Website.DATA, getJsonString(website, \"value\"));\n            contentValues.put(\n                ContactsContract.CommonDataKinds.Website.TYPE,\n                getContactType(getJsonString(website, \"type\")));\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing website so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Website._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          websiteId, ContactsContract.CommonDataKinds.Website.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Website.DATA,\n                        getJsonString(website, \"value\"))\n                    .withValue(\n                        ContactsContract.CommonDataKinds.Website.TYPE,\n                        getContactType(getJsonString(website, \"type\")))\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get websites\");\n    }\n\n    // Modify birthday\n    String birthday = getJsonString(contact, \"birthday\");\n    if (birthday != null) {\n      ops.add(\n          ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n              .withSelection(\n                  ContactsContract.Data.CONTACT_ID\n                      + \"=? AND \"\n                      + ContactsContract.Data.MIMETYPE\n                      + \"=? AND \"\n                      + ContactsContract.CommonDataKinds.Event.TYPE\n                      + \"=?\",\n                  new String[] {\n                    id,\n                    ContactsContract.CommonDataKinds.Event.CONTENT_ITEM_TYPE,\n                    new String(\"\" + ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY)\n                  })\n              .withValue(\n                  ContactsContract.CommonDataKinds.Event.TYPE,\n                  ContactsContract.CommonDataKinds.Event.TYPE_BIRTHDAY)\n              .withValue(ContactsContract.CommonDataKinds.Event.START_DATE, birthday)\n              .build());\n    }\n\n    // Modify photos\n    JSONArray photos = null;\n    try {\n      photos = contact.getJSONArray(\"photos\");\n      if (photos != null) {\n        for (int i = 0; i < photos.length(); i++) {\n          JSONObject photo = (JSONObject) photos.get(i);\n          String photoId = getJsonString(photo, \"id\");\n          byte[] bytes = getPhotoBytes(getJsonString(photo, \"value\"));\n          // This is a new photo so do a DB insert\n          if (photoId == null) {\n            ContentValues contentValues = new ContentValues();\n            contentValues.put(ContactsContract.Data.RAW_CONTACT_ID, rawId);\n            contentValues.put(\n                ContactsContract.Data.MIMETYPE,\n                ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE);\n            contentValues.put(ContactsContract.Data.IS_SUPER_PRIMARY, 1);\n            contentValues.put(ContactsContract.CommonDataKinds.Photo.PHOTO, bytes);\n\n            ops.add(\n                ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)\n                    .withValues(contentValues)\n                    .build());\n          }\n          // This is an existing photo so do a DB update\n          else {\n            ops.add(\n                ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)\n                    .withSelection(\n                        ContactsContract.CommonDataKinds.Photo._ID\n                            + \"=? AND \"\n                            + ContactsContract.Data.MIMETYPE\n                            + \"=?\",\n                        new String[] {\n                          photoId, ContactsContract.CommonDataKinds.Photo.CONTENT_ITEM_TYPE\n                        })\n                    .withValue(ContactsContract.Data.IS_SUPER_PRIMARY, 1)\n                    .withValue(ContactsContract.CommonDataKinds.Photo.PHOTO, bytes)\n                    .build());\n          }\n        }\n      }\n    } catch (JSONException e) {\n      Log.d(LOG_TAG, \"Could not get photos\");\n    }\n\n    boolean retVal = true;\n\n    // Modify contact\n    try {\n      mApp.getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);\n    } catch (RemoteException e) {\n      Log.e(LOG_TAG, e.getMessage(), e);\n      Log.e(LOG_TAG, Log.getStackTraceString(e), e);\n      retVal = false;\n    } catch (OperationApplicationException e) {\n      Log.e(LOG_TAG, e.getMessage(), e);\n      Log.e(LOG_TAG, Log.getStackTraceString(e), e);\n      retVal = false;\n    }\n\n    // if the save was a succes return the contact ID\n    if (retVal) {\n      return id;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4143, "initialization": ["JSONObject jSONObject = JSONArray.get(int)", "String name = getResources()"], "initializationStart": [448, 489], "initializationEnd": [461, 503], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["d(String,String)", "printStackTrace()"], "tryExpressionStart": 398, "tryExpressionEnd": 402, "tryBlockStart": 398, "tryBlockEnd": 1207, "catchExpressionStart": 1067, "catchExpressionEnd": 1091, "catchBlockStart": 1067, "catchBlockEnd": 1207, "exceptionHandlingCallStart": [1099, 1181], "exceptionHandlingCallEnd": [1173, 1200], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 567, "focalAPIEnd": 600, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.toString()", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)"], "useStart": [635, 755, 946], "useEnd": [652, 787, 980], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alexsikora/Starcraft-Tracker-Android/tree/master/src/illinois/sweng/sctracker/TeamStatusActivity.java", "rawCode": "  /** Receives favorites list from server, processes and updates shared prefs */\n  public void handleServerResponseData(JSONArray values) {\n    Log.d(TAG, \"Receiving favorites data\");\n\n    String prefsName = getResources().getString(R.string.favoriteSharedPrefs);\n    SharedPreferences prefs = getSharedPreferences(prefsName, MODE_PRIVATE);\n    SharedPreferences.Editor editor = prefs.edit();\n\n    try {\n      JSONObject firstEntry = (JSONObject) (values.get(0));\n\n      String eventKey = getResources().getString(R.string.favoriteEventKey);\n      JSONArray events = firstEntry.getJSONArray(eventKey);\n      editor.putString(eventKey, events.toString());\n\n      String teamKey = getResources().getString(R.string.favoriteTeamKey);\n      JSONArray teams = firstEntry.getJSONArray(teamKey);\n      editor.putString(teamKey, teams.toString());\n\n      String playerKey = getResources().getString(R.string.favoritePlayerKey);\n      JSONArray players = firstEntry.getJSONArray(playerKey);\n      editor.putString(playerKey, players.toString());\n\n      editor.commit();\n    } catch (JSONException e) {\n      Log.d(TAG, \"There was an error reading the JSON returned from the server\");\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4144, "initialization": ["JSONObject jSONObject = new JSONObject(JSONTokener)"], "initializationStart": [1375], "initializationEnd": [1398], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1218, "tryExpressionEnd": 1222, "tryBlockStart": 1218, "tryBlockEnd": 2017, "catchExpressionStart": 1823, "catchExpressionEnd": 1855, "catchBlockStart": 1823, "catchBlockEnd": 1893, "exceptionHandlingCallStart": [1865], "exceptionHandlingCallEnd": [1884], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)"], "configurationStart": [1434, 1492], "configurationEnd": [1458, 1514], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1542, "focalAPIEnd": 1576, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 1587, "followUpCheckExpressionEnd": 1625, "followUpCheckBlockStart": 1587, "followUpCheckBlockEnd": 1695, "use": ["array.getJSONObject(int)"], "useStart": [1662], "useEnd": [1682], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/easysoa/EasySOA-Incubation/tree/master/easysoa-samples/easysoa-samples-axxx/adapter-prototype/src/main/java/proto/bdaccess/AdapterService.java", "rawCode": "  /** start of the osgi bundle. Read the json config file. */\n  @Validate\n  public void start() {\n    businessSLA = new ArrayList<BusinessSLA>();\n    /*\n     * BusinessSLA temp = new BusinessSLA(70, 70, 70, new HoursPeriod(0,\n     * 1440), new HoursPeriod(420, 1320), new HoursPeriod(600, 1080),\n     * \"smarttravel.com\", \"meteo_service\"); businessSLA.add(temp); temp =\n     * new BusinessSLA(70, 60, 50, new HoursPeriod(0, 1440), new\n     * HoursPeriod(420, 1320), new HoursPeriod(600, 1080),\n     * \"smarttravel.com\", \"exchg_rate_service\"); businessSLA.add(temp); temp\n     * = new BusinessSLA(70, 60, 50, new HoursPeriod(0, 1440), new\n     * HoursPeriod(420, 1320), new HoursPeriod(600, 1080),\n     * \"smarttravel.com\", \"translation_service\"); businessSLA.add(temp);\n     */\n    SimpleDateFormat formate = new SimpleDateFormat(\"yyyy-MM-dd_HH:mm\");\n\n    try {\n      System.out.println(\"Processing jasmine QoS events data\");\n\n      String path =\n          System.getenv(\"JONAS_BASE\")\n              + System.getProperty(\"file.separator\")\n              + \"conf\"\n              + System.getProperty(\"file.separator\")\n              + \"easysoa-adapter.json\";\n\n      InputStream inputStream;\n      JSONObject config;\n\n      try {\n        inputStream = new FileInputStream(path);\n\n        JSONTokener tokener = new JSONTokener(new InputStreamReader(inputStream));\n\n        config = new JSONObject(tokener);\n\n        dateFrom = formate.parse(config.getString(\"from\"));\n        dateTo = formate.parse(config.getString(\"to\"));\n\n        JSONArray sla = config.getJSONArray(\"BusinessSLA\");\n\n        for (int i = 0; i < sla.length(); i++) {\n          businessSLA.add(readSLA(sla.getJSONObject(i)));\n        }\n        inputStream.close();\n\n        exportData(dateFrom, dateTo);\n\n        calculIndicatorsFromTo(dateFrom, dateTo);\n      } catch (FileNotFoundException e) {\n        e.printStackTrace();\n      } catch (JSONException e) {\n        e.printStackTrace();\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    } catch (ParseException e) {\n      e.printStackTrace();\n    }\n    calculTodayIndicators();\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4145, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.get(String)", "jSONObject.getString(String)"], "configurationStart": [349, 778], "configurationEnd": [377, 812], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1006, "focalAPIEnd": 1043, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toJava(array)", "jSONObject.getBoolean(String)", "jSONObject.get(String)", "jSONObject.getString(String)", "jSONObject.getJSONArray(String)", "toJava(array)", "jSONObject.getString(String)"], "useStart": [1084, 1304, 1963, 2476, 2615, 2685, 3658], "useEnd": [1113, 1339, 1987, 2506, 2648, 2714, 3685], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vivo-project/Vitro/tree/master/webapp/src/edu/cornell/mannlib/vitro/webapp/edit/n3editing/configuration/preprocessors/ManagePagePreprocessor.java", "rawCode": "  private void addInputsToSubmission(ProcessDataGetterN3 pn, int counter, JSONObject jsonObject) {\n    List<String> literalLabels = pn.getLiteralVarNamesBase();\n    List<String> uriLabels = pn.getUriVarNamesBase();\n\n    for (String literalLabel : literalLabels) {\n      List<String> literalValues = new ArrayList<String>();\n      Object jsonValue = jsonObject.get(literalLabel);\n      // Var names will depend on which data getter object this is on the page, so depends on\n      // counter\n      String submissionLiteralName = pn.getVarName(literalLabel, counter);\n      // Single value\n      if (jsonValue instanceof String) {\n        // TODO: Deal with multiple submission values\n        // This retrieves the value for this particular json object\n        String jsonString = jsonObject.getString(literalLabel);\n        jsonString = pn.replaceEncodedQuotesWithEscapedQuotes(jsonString);\n        literalValues.add(jsonString);\n      } else if (jsonValue instanceof JSONArray) {\n        JSONArray values = jsonObject.getJSONArray(literalLabel);\n        literalValues = (List<String>) JSONSerializer.toJava(values);\n        // Replacing encoded quotes here as well\n        this.replaceEncodedQuotesInList(pn, literalValues);\n      } else if (jsonValue instanceof Boolean) {\n        Boolean booleanValue = jsonObject.getBoolean(literalLabel);\n        // Adds string version\n        literalValues.add(booleanValue.toString());\n      }\n      String[] literalValuesSubmission = new String[literalValues.size()];\n      literalValuesSubmission = literalValues.toArray(literalValuesSubmission);\n      // This adds literal, connecting the field with\n      submission.addLiteralToForm(\n          editConfiguration,\n          editConfiguration.getField(submissionLiteralName),\n          submissionLiteralName,\n          literalValuesSubmission);\n    }\n\n    for (String uriLabel : uriLabels) {\n      List<String> uriValues = new ArrayList<String>();\n      Object jsonValue = jsonObject.get(uriLabel);\n      // Var names will depend on which data getter object this is on the page, so depends on\n      // counter\n      String submissionUriName = pn.getVarName(uriLabel, counter);\n      // if single value, then, add to values\n      if (jsonValue instanceof String) {\n        // Var names will depend on which data getter object this is on the page, so depends on\n        // counter\n        // This retrieves the value for this particular json object and adds to list\n        uriValues.add(jsonObject.getString(uriLabel));\n\n      } else if (jsonValue instanceof JSONArray) {\n        // multiple values\n        JSONArray values = jsonObject.getJSONArray(uriLabel);\n        uriValues = (List<String>) JSONSerializer.toJava(values);\n\n      } else {\n        // This may include JSON Objects but no way to deal with these right now\n      }\n      String[] uriValuesSubmission = new String[uriValues.size()];\n\n      uriValuesSubmission = uriValues.toArray(uriValuesSubmission);\n      // This adds literal, connecting the field with the value\n      submission.addUriToForm(editConfiguration, submissionUriName, uriValuesSubmission);\n    }\n\n    // To get data getter uris, check if editing an existing set and include those as form inputs\n    if (editConfiguration.isParamUpdate()) {\n      // Although this is editing an existing page, new content might have been added which would\n      // not include\n      // existing data getter URIs, so important to check whether the key exists within the json\n      // object in the first place\n      String dataGetterURISubmissionName = pn.getDataGetterVarName(counter);\n      if (jsonObject.containsKey(\"URI\")) {\n        String URIValue = jsonObject.getString(\"URI\");\n        if (URIValue != null) {\n          log.debug(\"Existing URI for data getter found: \" + URIValue);\n          submission.addUriToForm(\n              editConfiguration, dataGetterURISubmissionName, new String[] {URIValue});\n        }\n      } else {\n        // if the URI is not included in the json object, this is a NEW data getter\n        // and as such as we must ensure the URI is created\n        submission.addUriToForm(\n            editConfiguration,\n            dataGetterURISubmissionName,\n            new String[] {EditConfigurationConstants.NEW_URI_SENTINEL});\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4146, "initialization": ["JSONObject jSONObject = Synapse.query(String)"], "initializationStart": [417], "initializationEnd": [651], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 376, "tryExpressionEnd": 380, "tryBlockStart": 376, "tryBlockEnd": 1632, "catchExpressionStart": 1574, "catchExpressionEnd": 1594, "catchBlockStart": 1574, "catchBlockEnd": 1632, "exceptionHandlingCallStart": [1604], "exceptionHandlingCallEnd": [1623], "configuration": ["jSONObject.getLong(String)"], "configurationStart": [675], "configurationEnd": [708], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 824, "focalAPIEnd": 849, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 859, "followUpCheckExpressionEnd": 895, "followUpCheckBlockStart": 859, "followUpCheckBlockEnd": 1565, "use": ["array.get(int)"], "useStart": [937], "useEnd": [945], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sage-Bionetworks/workflow/tree/master/tools/gePipeline/src/main/java/org/sagebionetworks/gepipeline/DataModifier.java", "rawCode": "  public static void migrateDatasets(\n      int origProjectID,\n      int newProjectID,\n      String datasetNameSubstring,\n      Collection<Integer> exceptions,\n      String user,\n      String pw)\n      throws SynapseException {\n    Synapse synapse = getSynapse(user, pw);\n    int offset = 1;\n    int total = 0;\n    int batchSize = 20;\n    do {\n      int movedCount = 0;\n      try {\n        JSONObject o =\n            synapse.query(\n                \"select * from dataset where parentId==\"\n                    + origProjectID\n                    + \" LIMIT \"\n                    + batchSize\n                    + \" OFFSET \"\n                    + offset);\n        total = (int) o.getLong(\"totalNumberOfResults\");\n        System.out.println(\"\" + offset + \"->\" + (offset + batchSize - 1) + \" of \" + total);\n        JSONArray a = o.getJSONArray(\"results\");\n        for (int i = 0; i < a.length(); i++) {\n          JSONObject ds = (JSONObject) a.get(i);\n          String id = ds.getString(\"dataset.id\");\n          String name = ds.getString(\"dataset.name\");\n          if (name.contains(datasetNameSubstring) && !exceptions.contains(Integer.parseInt(id))) {\n            // then move the dataset to the new project\n            String datasetUri = \"/dataset/\" + id;\n            JSONObject dsjson = new JSONObject();\n            dsjson.put(\"parentId\", \"\" + newProjectID);\n            synapse.updateSynapseEntity(REPO_ENDPOINT, datasetUri, dsjson);\n            System.out.println(\"Moved \" + name + \" to project \" + newProjectID);\n            movedCount++;\n          }\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      offset += batchSize - movedCount;\n    } while (offset <= total);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4147, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [161], "configurationEnd": [199], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 297, "guardExpressionEnd": 340, "guardBlockStart": 297, "guardBlockEnd": 564, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 372, "focalAPIEnd": 419, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 427, "followUpCheckExpressionEnd": 472, "followUpCheckBlockStart": 427, "followUpCheckBlockEnd": 558, "use": ["array.getJSONObject(int)"], "useStart": [505], "useEnd": [532], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mit-cml/appinventor-sources/tree/master/appinventor/buildserver/src/com/google/appinventor/buildserver/FormPropertiesAnalyzer.java", "rawCode": "  private static void collectComponentTypes(\n      JSONObject componentProperties, Set<String> componentTypes) throws JSONException {\n    String componentType = componentProperties.getString(\"$Type\");\n    componentTypes.add(componentType);\n\n    // Recursive call to collect nested components.\n    if (componentProperties.has(\"$Components\")) {\n      JSONArray components = componentProperties.getJSONArray(\"$Components\");\n      for (int i = 0; i < components.length(); i++) {\n        collectComponentTypes(components.getJSONObject(i), componentTypes);\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4148, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [1985], "initializationEnd": [2008], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1960, "tryExpressionEnd": 1964, "tryBlockStart": 1960, "tryBlockEnd": 4682, "catchExpressionStart": 4540, "catchExpressionEnd": 4564, "catchBlockStart": 4540, "catchBlockEnd": 4610, "exceptionHandlingCallStart": [4578], "exceptionHandlingCallEnd": [4597], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "\"success\".equals(jSONObject.get(\"status\",),) && !(\"\".equals(jSONObject.get(name,),))&&jSONObject.get(name,)!=null", "guardType": "IF {", "guardExpressionStart": 2022, "guardExpressionEnd": 2063, "guardBlockStart": 2022, "guardBlockEnd": 4387, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 2184, "focalAPIEnd": 2213, "followUpCheck": "array.length() > 5", "checkType": "IF", "followUpCheckExpressionStart": 2336, "followUpCheckExpressionEnd": 2356, "followUpCheckBlockStart": 2336, "followUpCheckBlockEnd": 2461, "use": ["array.length()", "array.getJSONObject(int)", "jSONObject.remove(String)", "jSONObject.put(String,JSONArray)", "jSONObject.put(String,long)", "jSONObject.put(String,int)", "jSONObject.put(String,String)", "jSONObject.put(String,String)", "new ObjectProperty(String,jSONObject)", "jSONObject.put(String,int)", "new ObjectProperty(String,jSONObject)"], "useStart": [2340, 2601, 4084, 4125, 4171, 4217, 4258, 4336, 4493, 5062, 5208], "useEnd": [2351, 2620, 4107, 4153, 4199, 4240, 4283, 4372, 4525, 5085, 5240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xujiangwei/smart-server/tree/master/smart-cellet/src/smart/old/action/resource/InterfInFlowListener.java", "rawCode": "  @Override\n  public void onAction(ActionDialect action) {\n    // 使用同步的方式进行请求\n    // 注意：因为onAction方法是由Cell Cloud的action dialect进行回调的\n    // 该方法独享一个线程，因此可以在此线程里进行阻塞式的调用\n    // 因此，这里可以用同步的方式请求HTTP API\n\n    // 获取参数\n    JSONObject json = null;\n    long moId = 0;\n    int rangeInHour = 0;\n    try {\n      json = new JSONObject(action.getParamAsString(\"data\"));\n      moId = json.getInt(\"moId\");\n      rangeInHour = json.getInt(\"rangeInHour\");\n    } catch (JSONException e1) {\n      e1.printStackTrace();\n    }\n\n    // URL\n    HostConfig memConfig = new MonitorSystemHostConfig();\n    HostConfigContext context = new HostConfigContext(memConfig);\n    StringBuilder url =\n        new StringBuilder(context.getAPIHost())\n            .append(\"/\")\n            .append(API.INTERFACEINFLOW)\n            .append(\"/\")\n            .append(moId)\n            .append(\"/fInOctets/?rangeInHour=\")\n            .append(rangeInHour);\n\n    // 创建请求\n    Request request = this.getHttpClient().newRequest(url.toString());\n    request.method(HttpMethod.GET);\n\n    // 填写数据内容\n    DeferredContentProvider dcp = new DeferredContentProvider();\n    RequestContentCapsule capsule = new RequestContentCapsule();\n    capsule.append(\"moId\", moId);\n    capsule.append(\"rangeInHour\", rangeInHour);\n    dcp.offer(capsule.toBuffer());\n    dcp.close();\n    request.content(dcp);\n\n    // 发送请求\n    ContentResponse response = null;\n\n    try {\n      response = request.send();\n    } catch (InterruptedException e1) {\n      e1.printStackTrace();\n    } catch (TimeoutException e1) {\n      e1.printStackTrace();\n    } catch (ExecutionException e1) {\n      e1.printStackTrace();\n    }\n\n    Properties params = new Properties();\n    JSONObject data = null;\n    switch (response.getStatus()) {\n      case HttpStatus.OK_200:\n        byte[] bytes = response.getContent();\n\n        if (null != bytes) {\n\n          // 获取从Web服务器返回的数据\n          String content = new String(bytes, Charset.forName(\"UTF-8\"));\n\n          try {\n            data = new JSONObject(content);\n            if (\"success\".equals(data.get(\"status\"))) {\n\n              if (!\"\".equals(data.get(\"dataList\")) && data.get(\"dataList\") != null) {\n                JSONArray ja = data.getJSONArray(\"dataList\");\n                DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n                int l = 0;\n                if (ja.length() > 5) {\n                  l = 5;\n                } else {\n                  l = ja.length();\n                }\n\n                JSONArray jadata = new JSONArray();\n                for (int i = 0; i < l; i++) {\n                  JSONObject jsonData = ja.getJSONObject(i);\n                  JSONArray ja1 = jsonData.getJSONArray(\"data\");\n                  JSONArray ja2 = new JSONArray();\n\n                  // long memid = jsonData.getLong(\"mosn\");\n\n                  for (int j = 0; j < ja1.length(); j++) {\n                    JSONArray jsonData1 = ja1.getJSONArray(j);\n                    JSONObject jo = new JSONObject();\n\n                    if (null == jsonData1.get(0)\n                        || \"\".equals(jsonData1.get(0))\n                        || \"null\".equals(jsonData1.get(0))\n                        || (jsonData1.get(0)).equals(null)) {\n                      jo.put(\"usage\", 0);\n\n                    } else {\n                      jo.put(\"usage\", Float.valueOf((String) jsonData1.get(0)));\n                    }\n                    jo.put(\"collectTime\", df.parse((String) jsonData1.get(1)).getTime());\n                    ja2.put(jo);\n\n                    // Double flow = Double\n                    // .valueOf((String) jsonData1.get(0));\n                    // long timestamp = df.parse(\n                    // (String) jsonData1.get(1))\n                    // .getTime();\n\n                  }\n                  jsonData.remove(\"data\");\n                  jsonData.put(\"data\", ja2);\n                  String s = jsonData.getString(\"moPath\");\n                  jsonData.put(\"name\", s.split(\"> \")[1]);\n                  jsonData.remove(\"kpi\");\n\n                  jadata.put(jsonData);\n                }\n\n                data.remove(\"dataList\");\n                data.put(\"dataList\", jadata);\n                data.put(\"resourceId\", moId);\n                data.put(\"status\", 300);\n                data.put(\"errorInfo\", \"\");\n              }\n            } else {\n              data.put(\"errorInfo\", \"未获取到相关kpi数据\");\n            }\n\n            System.out.println(\"ifInFlow： \" + data);\n            // 设置参数\n            params.addProperty(new ObjectProperty(\"data\", data));\n          } catch (JSONException e) {\n            e.printStackTrace();\n          } catch (ParseException e) {\n            e.printStackTrace();\n          }\n\n          // 响应动作，即向客户端发送ActionDialect\n          // 参数tracker是一次动作的追踪标识符\n          this.response(Action.INTERFACEFLOW, params);\n        } else {\n          this.reportHTTPError(Action.INTERFACEFLOW);\n        }\n        break;\n      default:\n        Logger.w(InterfInFlowListener.class, \"返回响应码:\" + response.getStatus());\n\n        try {\n          data = new JSONObject();\n          data.put(\"status\", 900);\n        } catch (JSONException e) {\n          e.printStackTrace();\n        }\n\n        // 设置参数\n        params.addProperty(new ObjectProperty(\"data\", data));\n\n        // 响应动作，即向客户端发送 ActionDialect\n        this.response(Action.INTERFACEFLOW, params);\n        break;\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4149, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 827, "focalAPIEnd": 883, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/tomcat-main/src/test/java/org/collectionspace/chain/csp/persistence/services/vocab/TestNameThroughWebapp.java", "rawCode": "  public void testNamesAdvSearch() throws Exception {\n    ServletTester jetty = tester.setupJetty();\n    log.info(\"NAME: NamesSearch: test_start\");\n    // tester.GETData(\"/quick-reset\",jetty);\n    // Create the entry we are going to check for\n    JSONObject data = createTrivialAuthItem(PERSON_TERMLIST_ELEMENT, \"XXXTESTRaul Castro\");\n    HttpTester out = tester.POSTData(TestBase.MAIN_PERSON_INSTANCE_PATH + \"/\", data, jetty);\n    String url = out.getHeader(\"Location\");\n    JSONObject payload = new JSONObject();\n    JSONObject searchfields = new JSONObject();\n\n    searchfields.put(TERM_DISPLAYNAME_ELEMENT, \"XXXTESTR*\");\n\n    payload.put(\"operation\", \"or\");\n    payload.put(\"fields\", searchfields);\n\n    out = tester.POSTData(TestBase.MAIN_PERSON_INSTANCE_PATH + \"/search\", payload, jetty, \"GET\");\n\n    JSONArray results = new JSONObject(out.getContent()).getJSONArray(\"results\");\n    for (int i = 0; i < results.length(); i++) {\n      JSONObject entry = results.getJSONObject(i);\n      JSONArray displayNames = entry.getJSONArray(DISPLAY_NAMES);\n      assertTrue(displayNames.getString(0).toLowerCase().contains(\"xxxtestraul castro\"));\n      assertEquals(entry.getString(\"number\"), entry.getString(TERM_DISPLAYNAME_ELEMENT));\n      assertTrue(entry.has(\"refid\"));\n    }\n\n    // Delete the entry from the database\n    tester.DELETEData(\"/vocabularies/\" + url, jetty);\n    log.info(\"NAME: NamesSearch: test_start\");\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4150, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [135], "configurationEnd": [171], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 252, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getStringListFromJsonArray(array)"], "useStart": [216], "useEnd": [298], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mit-cml/appinventor-sources/tree/master/appinventor/components/src/com/google/appinventor/components/runtime/GameClient.java", "rawCode": "  private void updateInstanceInfo(JSONObject responseObject) throws JSONException {\n    boolean newLeader = false;\n    String leader = responseObject.getString(LEADER_KEY);\n    List<String> receivedPlayers =\n        JsonUtil.getStringListFromJsonArray(responseObject.getJSONArray(PLAYERS_LIST_KEY));\n\n    if (!Leader().equals(leader)) {\n      instance.setLeader(leader);\n      newLeader = true;\n    }\n\n    PlayerListDelta playersDelta = instance.setPlayers(receivedPlayers);\n    if (playersDelta != PlayerListDelta.NO_CHANGE) {\n      for (final String player : playersDelta.getPlayersRemoved()) {\n        PlayerLeft(player);\n      }\n      for (final String player : playersDelta.getPlayersAdded()) {\n        PlayerJoined(player);\n      }\n    }\n\n    if (newLeader) {\n      NewLeader(Leader());\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4151, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 229, "tryExpressionEnd": 233, "tryBlockStart": 229, "tryBlockEnd": 868, "catchExpressionStart": 633, "catchExpressionEnd": 657, "catchBlockStart": 633, "catchBlockEnd": 708, "exceptionHandlingCallStart": [842], "exceptionHandlingCallEnd": [861], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jSONObject==null)", "guardType": "IF {", "guardExpressionStart": 151, "guardExpressionEnd": 180, "guardBlockStart": 151, "guardBlockEnd": 193, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 315, "focalAPIEnd": 356, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 364, "followUpCheckExpressionEnd": 407, "followUpCheckBlockStart": 364, "followUpCheckBlockEnd": 803, "use": ["array.getJSONObject(int)", "array.getJSONObject(String)"], "useStart": [443, 443], "useEnd": [468, 493], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Genshin/SpreeWarehouseAndroid/tree/master/src/org/genshin/warehouse/products/Products.java", "rawCode": "  private ArrayList<Product> processProductContainer(JSONObject productContainer) {\n    ArrayList<Product> collection = new ArrayList<Product>();\n\n    if (productContainer == null) return null;\n\n    // Pick apart JSON object\n    try {\n      this.count = productContainer.getInt(\"count\");\n      JSONArray products = productContainer.getJSONArray(\"products\");\n      for (int i = 0; i < products.length(); i++) {\n        JSONObject productJSON = products.getJSONObject(i).getJSONObject(\"product\");\n\n        // TODO put this in variant stuff\n        String sku = \"\";\n        try {\n          sku = productJSON.getString(\"sku\");\n        } catch (JSONException e) {\n          // No SKU\n          sku = \"\";\n        }\n\n        Product product = new Product(productJSON);\n\n        collection.add(product);\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n\n    list = collection;\n    return collection;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4152, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [511], "initializationEnd": [531], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)", "jSONObject.getString(String)"], "configurationStart": [548, 592], "configurationEnd": [568, 619], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 646, "focalAPIEnd": 676, "followUpCheck": "!checkHandshake(method,array)", "checkType": "IF", "followUpCheckExpressionStart": 815, "followUpCheckExpressionEnd": 851, "followUpCheckBlockStart": 815, "followUpCheckBlockEnd": 1061, "use": ["MethodDescriptor.invoke(RpcReceiverManager,array)"], "useStart": [1440], "useEnd": [1475], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Senseg/Py4A/tree/master/android/Common/src/com/googlecode/android_scripting/jsonrpc/JsonRpcServer.java", "rawCode": "  @Override\n  protected void handleConnection(Socket socket) throws Exception {\n    RpcReceiverManager receiverManager = mRpcReceiverManagerFactory.create();\n    BufferedReader reader =\n        new BufferedReader(new InputStreamReader(socket.getInputStream()), 8192);\n    PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);\n    boolean passedAuthentication = false;\n    String data;\n    while ((data = reader.readLine()) != null) {\n      Log.v(\"Received: \" + data);\n      JSONObject request = new JSONObject(data);\n      int id = request.getInt(\"id\");\n      String method = request.getString(\"method\");\n      JSONArray params = request.getJSONArray(\"params\");\n\n      // First RPC must be _authenticate if a handshake was specified.\n      if (!passedAuthentication && mHandshake != null) {\n        if (!checkHandshake(method, params)) {\n          SecurityException exception = new SecurityException(\"Authentication failed!\");\n          send(writer, JsonRpcResult.error(id, exception));\n          shutdown();\n          throw exception;\n        }\n        passedAuthentication = true;\n        send(writer, JsonRpcResult.result(id, true));\n        continue;\n      }\n\n      MethodDescriptor rpc = receiverManager.getMethodDescriptor(method);\n      if (rpc == null) {\n        send(writer, JsonRpcResult.error(id, new RpcError(\"Unknown RPC.\")));\n        continue;\n      }\n      try {\n        send(writer, JsonRpcResult.result(id, rpc.invoke(receiverManager, params)));\n      } catch (Throwable t) {\n        Log.e(\"Invocation error.\", t);\n        send(writer, JsonRpcResult.error(id, t));\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4153, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 80, "tryExpressionEnd": 84, "tryBlockStart": 80, "tryBlockEnd": 500, "catchExpressionStart": 442, "catchExpressionEnd": 466, "catchBlockStart": 442, "catchBlockEnd": 500, "exceptionHandlingCallStart": [474], "exceptionHandlingCallEnd": [493], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [178], "configurationEnd": [204], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 271, "focalAPIEnd": 298, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 306, "followUpCheckExpressionEnd": 347, "followUpCheckBlockStart": 306, "followUpCheckBlockEnd": 435, "use": ["array.getJSONObject(int)"], "useStart": [401], "useEnd": [424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shi-314/AngryKings/tree/master/src/com/angrykings/Keyframe.java", "rawCode": "  @Override\n  public void fromJson(JSONObject json) throws JSONException {\n\n    try {\n      this.timestampSec = json.getDouble(\"t\");\n      this.cannonballData = new KeyframeData(json.getJSONObject(\"ball\"));\n\n      this.castleBlocksData.clear();\n\n      JSONArray blocks = json.getJSONArray(\"castle\");\n      for (int i = 0; i < blocks.length(); i++) {\n        this.castleBlocksData.add(new KeyframeData(blocks.getJSONObject(i)));\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4154, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [4852], "initializationEnd": [4884], "hasTryCatch": 1, "exceptionType": "InvalidInputException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 6525, "catchExpressionStart": 6385, "catchExpressionEnd": 6417, "catchBlockStart": 6385, "catchBlockEnd": 6470, "exceptionHandlingCallStart": [6444], "exceptionHandlingCallEnd": [6463], "configuration": ["jSONObject.getDouble(String)"], "configurationStart": [5114], "configurationEnd": [5151], "guardCondition": "jSONObject.getBoolean(\"Success\",)", "guardType": "IF {", "guardExpressionStart": 5040, "guardExpressionEnd": 5084, "guardBlockStart": 5040, "guardBlockEnd": 6297, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 5983, "focalAPIEnd": 6025, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["SetElectricityGraph(array)"], "useStart": [5963], "useEnd": [6026], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ian-Wright1979/INB372-Solar/tree/master/INB372-SolarAndroid/src/solar/solarAndroid/SolarPowerCalculator.java", "rawCode": "  private void originalSubmit(View view) throws InvalidInputException {\n    try {\n      Float panelEfficiency =\n          InputChecking.getPanelEfficiency(\n              ((EditText) findViewById(R.id.PanelEfficiency)).getText().toString());\n      Float inverterEfficiency =\n          InputChecking.getInverterEfficiency(\n              ((EditText) findViewById(R.id.InverterEfficiency)).getText().toString());\n      String address =\n          InputChecking.getAddress(((EditText) findViewById(R.id.Address)).getText().toString());\n      Button panelOrientationButton = ((Button) findViewById(R.id.PanelOrientation));\n      if (panelOrientationButton.getText().toString().equals(\"Click to set\"))\n        panelOrientationButton.setText(orientationText);\n      String orientation = InputChecking.getOrientation(Float.toString(actualOrientation));\n      Button panelAngleButton = ((Button) findViewById(R.id.PanelAngle));\n      if (panelAngleButton.getText().toString().equals(\"Click to set\"))\n        panelAngleButton.setText(Float.toString(actualAngle));\n      Float angle = InputChecking.getAngle(Float.toString(actualAngle));\n      // Integer sunlight = getSunlight();\n      Float consumption =\n          InputChecking.getAngle(\n              ((EditText) findViewById(R.id.PowerConsumption)).getText().toString());\n      Float tariff =\n          InputChecking.getTariff(\n              ((Spinner) findViewById(R.id.TariffRate)).getSelectedItem().toString());\n      Integer panelQuantity =\n          InputChecking.getPanelQuantity(\n              ((EditText) findViewById(R.id.PanelQuantity)).getText().toString());\n      String panelManufacturer =\n          InputChecking.getPanelManufacturer(\n              ((Spinner) findViewById(R.id.PanelManufacturer)).getSelectedItem().toString());\n      String panelModel =\n          InputChecking.getPanelModel(\n              ((Spinner) findViewById(R.id.PanelModel)).getSelectedItem().toString());\n      String inverterManufacturer =\n          InputChecking.getInverterManufacturer(\n              ((Spinner) findViewById(R.id.InverterManufacturer)).getSelectedItem().toString());\n      String inverterModel =\n          InputChecking.getInverterModel(\n              ((Spinner) findViewById(R.id.InverterModel)).getSelectedItem().toString());\n\n      // Create a new HttpClient and Post Header\n      ConnectivityManager connec =\n          (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n      if (connec.getActiveNetworkInfo().isAvailable()) {\n        HttpClient httpclient = new DefaultHttpClient();\n        HttpPost httppost =\n            new HttpPost(\n                baseServletAddress\n                    + \"solarServlet\"); // 10.0.2.2 magic thing that accesses localhost from emulator\n\n        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"panelManufacturer\", panelManufacturer));\n        nameValuePairs.add(new BasicNameValuePair(\"panelModel\", panelModel));\n        nameValuePairs.add(new BasicNameValuePair(\"panelEfficiency\", panelEfficiency.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"panelQty\", panelQuantity.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"orientation\", orientation.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"angle\", angle.toString()));\n\n        nameValuePairs.add(new BasicNameValuePair(\"inverterManufacturer\", inverterManufacturer));\n        nameValuePairs.add(new BasicNameValuePair(\"inverterModel\", inverterModel));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"inverterEfficiency\", inverterEfficiency.toString()));\n\n        // nameValuePairs.add(new BasicNameValuePair(\"sunlight\", sunlight.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"consumption\", consumption.toString()));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"latitude\", Double.toString(lastKnownLocation.getLatitude())));\n        nameValuePairs.add(\n            new BasicNameValuePair(\"longitude\", Double.toString(lastKnownLocation.getLongitude())));\n        nameValuePairs.add(new BasicNameValuePair(\"address\", address.toString()));\n        nameValuePairs.add(new BasicNameValuePair(\"tariff\", tariff.toString()));\n\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"c\");\n        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"d\");\n        // Execute HTTP Post Request\n        HttpResponse response = httpclient.execute(httppost);\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"e\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"e\");\n        JSONObject jObject = new JSONObject(EntityUtils.toString(response.getEntity()));\n        JSONObject savingsJSONObject = jObject.getJSONObject(\"Savings\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"f\");\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"f\");\n        if (savingsJSONObject.getBoolean(\"Success\")) {\n          Double savings = savingsJSONObject.getDouble(\"Amount\");\n          savings = Math.round(savings * 100.0) / 100.0;\n          DecimalFormat f = new DecimalFormat(\"#.00\");\n          ((TextView) findViewById(R.id.Savings)).setText(\"$\" + f.format(savings));\n          resultsTab(view);\n          findViewById(R.id.Results).setEnabled(true);\n\n          // graphView = new LineGraphView(this, \"Electricity Generated\");\n\n          // graphView.setVisibility(View.GONE);\n          graphViewInstantiated = true;\n\n          graphView = new LineGraphView(this, \"Electricity Generated\");\n          graphView.setShowLegend(true);\n          graphView.setLegendAlign(LegendAlign.TOP);\n          graphView.setHorizontalLabels(\n              new String[] {\n                \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n              });\n\n          SetElectricityGraph(savingsJSONObject.getJSONArray(\"DailyGen\"));\n          TableLayout layout = (TableLayout) findViewById(R.id.layout);\n          layout.addView(graphView);\n\n          // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"g\");\n          // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"g\");\n        }\n        // ((EditText)findViewById(R.id.PanelOrientation)).setText(\"h\");\n      }\n    } catch (InvalidInputException e) {\n      // do stuffs\n      e.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4155, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [164], "initializationEnd": [194], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jSONObject==null)", "guardType": "IF {", "guardExpressionStart": 200, "guardExpressionEnd": 220, "guardBlockStart": 200, "guardBlockEnd": 334, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 357, "focalAPIEnd": 385, "followUpCheck": "array == null", "checkType": "IF", "followUpCheckExpressionStart": 391, "followUpCheckExpressionEnd": 408, "followUpCheckBlockStart": 391, "followUpCheckBlockEnd": 525, "use": ["array.getJSONObject(int)", "array.getJSONObject(String)"], "useStart": [663, 663], "useEnd": [684, 709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zostay/CPAN-Sidekick/tree/master/src/com/qubling/sidekick/fetch/cpan/AuthorDetailsFetcher.java", "rawCode": "  @Override\n  protected void consumeResponse(JSONObject response) throws JSONException {\n\n    ResultSet<Author> authors = getResultSet();\n\n    JSONObject topHits = response.getJSONObject(\"hits\");\n    if (topHits == null) {\n      Log.e(\"AuthorDetailsFetcher\", \"Unexpected response (top hits missing): \" + response);\n      return;\n    }\n\n    JSONArray hits = topHits.getJSONArray(\"hits\");\n    if (hits == null) {\n      Log.e(\"AuthorDetailsFetcher\", \"Unexpected response (nested hits missing): \" + response);\n      return;\n    }\n\n    // Log.d(\"AuthorDetailsFetcher\", response.toString());\n\n    for (int i = 0; i < hits.length(); i++) {\n      JSONObject jsonAuthor = hits.getJSONObject(i).getJSONObject(\"_source\");\n\n      String pauseId = jsonAuthor.getString(\"pauseid\");\n      String fullName = jsonAuthor.getString(\"name\");\n      String gravatarUrl = jsonAuthor.getString(\"gravatar_url\");\n\n      Author author = authors.get(pauseId);\n      if (author != null) {\n        author.setFullName(fullName);\n        author.setGravatarUrl(gravatarUrl);\n        // Log.d(\"AuthorDetailsFetcher\", \"Setting author Gravatar \" + author.getPauseId() + \": \" +\n        // gravatarUrl);\n      }\n      // else {\n      // Log.d(\"AuthorDetailsFetcher\", \"Not setting author Gravatar \" + pauseId);\n      // }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4156, "initialization": ["JSONObject jSONObject = RestResponse.asJSONObject()"], "initializationStart": [389], "initializationEnd": [412], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 506, "focalAPIEnd": 543, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONObject(int)"], "useStart": [506], "useEnd": [560], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/forcedotcom/SalesforceMobileSDK-Android/tree/master/libs/test/SalesforceSDKTest/src/com/salesforce/androidsdk/rest/RestClientTest.java", "rawCode": "  /**\n   * Testing a describe global call to the server - check response\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testDescribeGlobal() throws Exception {\n    RestResponse response =\n        restClient.sendSync(RestRequest.getRequestForDescribeGlobal(TestCredentials.API_VERSION));\n    checkResponse(response, HttpURLConnection.HTTP_OK, false);\n    JSONObject jsonResponse = response.asJSONObject();\n    checkKeys(jsonResponse, \"encoding\", \"maxBatchSize\", \"sobjects\");\n    checkKeys(\n        jsonResponse.getJSONArray(\"sobjects\").getJSONObject(0),\n        LNAME,\n        \"label\",\n        \"custom\",\n        \"keyPrefix\");\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4157, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [149], "initializationEnd": [173], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 113, "tryExpressionEnd": 117, "tryBlockStart": 113, "tryBlockEnd": 574, "catchExpressionStart": 497, "catchExpressionEnd": 521, "catchBlockStart": 497, "catchBlockEnd": 574, "exceptionHandlingCallStart": [529], "exceptionHandlingCallEnd": [548], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [221], "configurationEnd": [246], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 304, "focalAPIEnd": 337, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getString(String)", "array.getString(String)"], "useStart": [386, 451], "useEnd": [422, 480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/flintinatux/neverbelate/tree/master/src/com/madhackerdesigns/neverbelate/reg/GeoCoder.java", "rawCode": "  private GeoCodeResult parseJsonResponse(String response) {\n    GeoCodeResult result = new GeoCodeResult();\n    try {\n      JSONObject resultSet = (new JSONObject(response)).getJSONObject(\"ResultSet\");\n      int found = resultSet.getInt(\"Found\");\n      if (found > 0) {\n        JSONObject firstResult = resultSet.getJSONArray(\"Results\").getJSONObject(0);\n        result.setCountryCode(firstResult.getString(\"countrycode\"));\n        result.setZipCode(firstResult.getString(\"uzip\"));\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n      return null;\n    }\n    return result;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4158, "initialization": ["JSONObject jSONObject = getTopology(*)"], "initializationStart": [139], "initializationEnd": [178], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)", "jSONObject.getInt(String)", "jSONObject.getInt(String)"], "configurationStart": [200, 247, 299], "configurationEnd": [224, 276, 321], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 345, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addHosts(int,jSONObject)"], "useStart": [436], "useEnd": [467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elka-projekt/cs-voltdb/tree/master/tests/frontend/org/voltdb/compiler/TestClusterCompiler.java", "rawCode": "  public void testAddHostsToNonKsafe() throws JSONException {\n    ClusterConfig config = new ClusterConfig(2, 6, 0);\n    JSONObject topo = config.getTopology(Arrays.asList(0, 1));\n    assertEquals(2, topo.getInt(\"hostcount\"));\n    assertEquals(6, topo.getInt(\"sites_per_host\"));\n    assertEquals(0, topo.getInt(\"kfactor\"));\n    assertEquals(12, topo.getJSONArray(\"partitions\").length());\n\n    VoltDB.ignoreCrash = true;\n    try {\n      ClusterConfig.addHosts(2, topo);\n      fail(\"Shouldn't allow adding more than one node\");\n    } catch (AssertionError e) {\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4159, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [171], "initializationEnd": [197], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 76, "tryExpressionEnd": 80, "tryBlockStart": 76, "tryBlockEnd": 1215, "catchExpressionStart": 1143, "catchExpressionEnd": 1167, "catchBlockStart": 1143, "catchBlockEnd": 1215, "exceptionHandlingCallStart": [1183], "exceptionHandlingCallEnd": [1206], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [273], "configurationEnd": [304], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 661, "guardExpressionEnd": 686, "guardBlockStart": 661, "guardBlockEnd": 1106, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 724, "focalAPIEnd": 753, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 765, "followUpCheckExpressionEnd": 812, "followUpCheckBlockStart": 765, "followUpCheckBlockEnd": 1096, "use": ["array.getJSONObject(int)"], "useStart": [853], "useEnd": [882], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lukeweber/libjingle-override/tree/master/talk/examples/android/src/org/appspot/apprtc/AppRTCClient.java", "rawCode": "    private MediaConstraints constraintsFromJSON(String jsonString) {\n      try {\n        MediaConstraints constraints = new MediaConstraints();\n        JSONObject json = new JSONObject(jsonString);\n        if (json.has(\"mandatory\")) {\n          JSONObject mandatoryJSON = json.getJSONObject(\"mandatory\");\n          JSONArray mandatoryKeys = mandatoryJSON.names();\n          for (int i = 0; i < mandatoryKeys.length(); ++i) {\n            String key = (String) mandatoryKeys.getString(i);\n            String value = mandatoryJSON.getString(key);\n            constraints.mandatory.add(new MediaConstraints.KeyValuePair(key, value));\n          }\n        }\n        if (json.has(\"optional\")) {\n          JSONArray optionalJSON = json.getJSONArray(\"optional\");\n          for (int i = 0; i < optionalJSON.length(); ++i) {\n            JSONObject keyValueDict = optionalJSON.getJSONObject(i);\n            String key = keyValueDict.names().getString(0);\n            String value = keyValueDict.getString(key);\n            constraints.optional.add(new MediaConstraints.KeyValuePair(key, value));\n          }\n        }\n        return constraints;\n      } catch (JSONException e) {\n        throw new RuntimeException(e);\n      }\n    }\n"}, {"dataset": "getJSONArray", "exampleID": 4160, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new AssertionError(String)"], "tryExpressionStart": 195, "tryExpressionEnd": 199, "tryBlockStart": 195, "tryBlockEnd": 384, "catchExpressionStart": 294, "catchExpressionEnd": 318, "catchBlockStart": 294, "catchBlockEnd": 384, "exceptionHandlingCallStart": [332], "exceptionHandlingCallEnd": [377], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(jSONObject.isNull(name,))", "guardType": "IF {", "guardExpressionStart": 89, "guardExpressionEnd": 118, "guardBlockStart": 89, "guardBlockEnd": 145, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 255, "focalAPIEnd": 285, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createLocationList(array)"], "useStart": [219], "useEnd": [286], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andynicholson/Vidiom/tree/master/twitter4j/twitter4j-core/src/main/java/twitter4j/TrendsJSONImpl.java", "rawCode": "  private static Location extractLocation(JSONObject json) throws TwitterException {\n    if (json.isNull(\"locations\")) {\n      return null;\n    }\n    ResponseList<Location> locations = null;\n    try {\n      locations = LocationJSONImpl.createLocationList(json.getJSONArray(\"locations\"));\n    } catch (JSONException e) {\n      throw new AssertionError(\"locations can't be null\");\n    }\n    Location location;\n    if (0 != locations.size()) {\n      location = locations.get(0);\n    } else {\n      location = null;\n    }\n    return location;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4161, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [562], "initializationEnd": [588], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [612], "configurationEnd": [663], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 774, "focalAPIEnd": 834, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.length()", "array.getJSONObject(int)"], "useStart": [851, 952], "useEnd": [880, 989], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envsmth/tree/master/EnvSocialApp/src/com/envsocial/android/utils/LocationHistory.java", "rawCode": "  /**\n   * Method to retrieve JSON-serialized contents of this LocationHistory tracker from the\n   * application's shared preferences.\n   *\n   * @parameter jsonString the JSON-serialized string containing the entries to be included in the\n   *     LocationHistory\n   * @return the obtained LocationHistory\n   * @throws JSONException if an error occurs when reading from the json string\n   * @throws ParseException\n   */\n  public static LocationHistory fromJSON(String jsonString) throws JSONException, ParseException {\n    JSONObject serializedLocationHistory = new JSONObject(jsonString);\n\n    int maxEntries = serializedLocationHistory.getInt(MAX_ENTRIES_LABEL);\n    LocationHistory locationHistory = new LocationHistory(maxEntries);\n\n    JSONArray trackedLocationsList = serializedLocationHistory.getJSONArray(LOCATIONS_LIST_LABEL);\n\n    int len = trackedLocationsList.length();\n    for (int i = 0; i < len; i++) {\n      JSONObject locationObject = trackedLocationsList.getJSONObject(i);\n      Location location = Location.fromSerialized(locationObject.toString());\n\n      String locationType = location.isEnvironment() ? Location.ENVIRONMENT : Location.AREA;\n      String locationId = location.getId();\n      String locationKey = locationType + \"_\" + locationId;\n\n      locationHistory.put(locationKey, location);\n    }\n\n    return locationHistory;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4162, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 115, "focalAPIEnd": 163, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 478, "followUpCheckExpressionEnd": 528, "followUpCheckBlockStart": 478, "followUpCheckBlockEnd": 629, "use": ["jSONObject.getJSONArray(String)", "array.getJSONObject(int)"], "useStart": [198, 557], "useEnd": [246, 589], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/manabone/codemonkey/tree/master/codemonkey-core/src/main/java/com/codemonkey/service/GenericServiceImpl.java", "rawCode": "  public void doBatchedSave(JSONObject body, CustomConversionService ccService) {\n\n    JSONArray recordsToModify = body.getJSONArray(ExtConstant.RECORDS_TO_MODIFY);\n\n    JSONArray recordsToDelete = body.getJSONArray(ExtConstant.RECORDS_TO_DELETE);\n\n    for (int i = 0; i < recordsToDelete.length(); i++) {\n      JSONObject params = recordsToDelete.getJSONObject(i);\n\n      Long id = params.getLong(ExtConstant.ID);\n      if (id != null) {\n        delete(id);\n      }\n    }\n\n    for (int i = 0; i < recordsToModify.length(); i++) {\n      JSONObject params = recordsToModify.getJSONObject(i);\n      doSave(params, ccService);\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4163, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [270], "initializationEnd": [296], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [327], "configurationEnd": [374], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 673, "focalAPIEnd": 724, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 730, "followUpCheckExpressionEnd": 776, "followUpCheckBlockStart": 730, "followUpCheckBlockEnd": 1352, "use": ["array.getJSONObject(int)", "array.getJSONObject(int)", "array.getJSONObject(int)", "array.getJSONObject(int)"], "useStart": [847, 983, 1073, 1214], "useEnd": [875, 1011, 1101, 1242], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/easysoa/EasySOA/tree/master/easysoa-proxy/easysoa-proxy-core/easysoa-proxy-core-scaffolderproxy/src/main/java/org/easysoa/scaffolding/wsdltemplate/WSRequest.java", "rawCode": "  /**\n   * Parse a JSON expression and transform it to a WSRequest object\n   *\n   * @param jsonString\n   * @return\n   * @throws JSONException\n   */\n  public static final WSRequest parseJSON(String jsonString) throws JSONException {\n    JSONObject jsonParametersObject = new JSONObject(jsonString);\n    JSONObject jsonRequest = jsonParametersObject.getJSONObject(\"wsRequest\");\n    WSRequest request = new WSRequest();\n    request.service = jsonRequest.getString(\"service\");\n    request.binding = jsonRequest.getString(\"binding\");\n    request.operation = jsonRequest.getString(\"operation\");\n    request.wsdlUrl = jsonRequest.getString(\"wsdlUrl\");\n    JSONArray paramsArray = jsonParametersObject.getJSONArray(\"formParameters\");\n    for (int i = 0; i < paramsArray.length(); i++) {\n      if (!request\n          .getParamList()\n          .containsKey(paramsArray.getJSONObject(i).getString(\"paramName\"))) {\n        List<String> valueList = new ArrayList<String>();\n        valueList.add(paramsArray.getJSONObject(i).getString(\"paramValue\"));\n        request.getParamList().put(paramsArray.getJSONObject(i).getString(\"paramName\"), valueList);\n      } else {\n        request\n            .getParamList()\n            .get(paramsArray.getJSONObject(i).getString(\"paramName\"))\n            .add(paramsArray.getJSONObject(i).getString(\"paramValue\"));\n      }\n    }\n    return request;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4164, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getBoolean(String)", "jSONObject.getJSONObject(String)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getJSONObject(String)", "jSONObject.getJSONObject(String)", "jSONObject.get(String)", "jSONObject.getJSONObject(String)"], "configurationStart": [122, 216, 417, 490, 625, 651, 784, 919, 1017, 1175], "configurationEnd": [145, 241, 454, 513, 649, 670, 812, 943, 1031, 1198], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 1213, "guardExpressionEnd": 1281, "guardBlockStart": 1213, "guardBlockEnd": 1809, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1359, "focalAPIEnd": 1382, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.length()", "array.getJSONObject(int)"], "useStart": [1406, 1494], "useEnd": [1420, 1516], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johan/gridworks/tree/master/src/main/java/com/metaweb/gridworks/protograph/Protograph.java", "rawCode": "  protected static Node reconstructNode(JSONObject o) throws JSONException {\n    Node node = null;\n\n    String nodeType = o.getString(\"nodeType\");\n    if (nodeType.startsWith(\"cell-as-\")) {\n      String columnName = o.getString(\"columnName\");\n\n      if (\"cell-as-topic\".equals(nodeType)) {\n        if (o.has(\"type\")) {\n          node =\n              new CellTopicNode(\n                  columnName,\n                  o.getBoolean(\"createForNoReconMatch\"),\n                  reconstructType(o.getJSONObject(\"type\")));\n        }\n      } else if (\"cell-as-value\".equals(nodeType)) {\n        node = new CellValueNode(columnName, o.getString(\"valueType\"), o.getString(\"lang\"));\n      } else if (\"cell-as-key\".equals(nodeType)) {\n        node = new CellKeyNode(columnName, reconstructTopic(o.getJSONObject(\"namespace\")));\n      }\n    } else if (\"topic\".equals(nodeType)) {\n      node = new FreebaseTopicNode(reconstructTopic(o.getJSONObject(\"topic\")));\n    } else if (\"value\".equals(nodeType)) {\n      node = new ValueNode(o.get(\"value\"), o.getString(\"valueType\"), o.getString(\"lang\"));\n    } else if (\"anonymous\".equals(nodeType)) {\n      node = new AnonymousNode(reconstructType(o.getJSONObject(\"type\")));\n    }\n\n    if (node != null && node instanceof NodeWithLinks && o.has(\"links\")) {\n      NodeWithLinks node2 = (NodeWithLinks) node;\n\n      JSONArray links = o.getJSONArray(\"links\");\n      int linkCount = links.length();\n\n      for (int j = 0; j < linkCount; j++) {\n        JSONObject oLink = links.getJSONObject(j);\n\n        node2.addLink(\n            new Link(\n                reconstructProperty(oLink.getJSONObject(\"property\")),\n                oLink.has(\"target\") && !oLink.isNull(\"target\")\n                    ? reconstructNode(oLink.getJSONObject(\"target\"))\n                    : null));\n      }\n    }\n\n    return node;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4165, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [447], "initializationEnd": [473], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 495, "focalAPIEnd": 519, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONObject(int)"], "useStart": [543], "useEnd": [563], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anbangr/trusted-mr/tree/master/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/test/java/org/apache/hadoop/mapreduce/v2/app/webapp/TestAMWebServicesJobs.java", "rawCode": "  @Test\n  public void testJobsDefault() throws JSONException, Exception {\n    WebResource r = resource();\n    ClientResponse response =\n        r.path(\"ws\").path(\"v1\").path(\"mapreduce\").path(\"jobs\").get(ClientResponse.class);\n    assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n    JSONObject json = response.getEntity(JSONObject.class);\n    assertEquals(\"incorrect number of elements\", 1, json.length());\n    JSONObject jobs = json.getJSONObject(\"jobs\");\n    JSONArray arr = jobs.getJSONArray(\"job\");\n    JSONObject info = arr.getJSONObject(0);\n    Job job = appContext.getJob(MRApps.toJobID(info.getString(\"id\")));\n    verifyAMJob(info, job);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4166, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [166], "initializationEnd": [205], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 116, "tryExpressionEnd": 120, "tryBlockStart": 116, "tryBlockEnd": 765, "catchExpressionStart": 699, "catchExpressionEnd": 719, "catchBlockStart": 699, "catchBlockEnd": 765, "exceptionHandlingCallStart": [733], "exceptionHandlingCallEnd": [752], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "HTTPComms.checkError(jSONObject.getInt(APIConstants.RETURN_CODE,),)", "guardType": "IF {", "guardExpressionStart": 219, "guardExpressionEnd": 291, "guardBlockStart": 219, "guardBlockEnd": 686, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 412, "focalAPIEnd": 459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["convertJSONArrayToDishArray(array)"], "useStart": [351], "useEnd": [460], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rodericj/TopDish/tree/master/server/old/java/TopDishAndroid/src/com/topdish/activity/SearchMapActivity.java", "rawCode": "        @Override\n        public void doSuccess(Message msg) {\n          Log.d(TAG, \"Search Successful\");\n          try {\n            final JSONObject resultObject = new JSONObject(String.valueOf(msg.obj));\n            if (HTTPComms.checkError(resultObject.getInt(APIConstants.RETURN_CODE))) {\n              mAppState.dishes.putAll(\n                  DishUtils.convertJSONArrayToDishArray(\n                      resultObject.getJSONArray(DishConstants.DISHES)));\n              Log.d(TAG, \"Added \" + mAppState.dishes.size() + \" dishes.\");\n\n              placeDishes();\n\n            } else\n              Toast.makeText(SearchMapActivity.this, \"No Dishes Found\", Toast.LENGTH_LONG).show();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n          placeDishes();\n\n          // progressBar.setVisibility(ProgressBar.INVISIBLE);\n          changeProgressVisibility(ProgressBar.INVISIBLE);\n        }\n"}, {"dataset": "getJSONArray", "exampleID": 4167, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["w(String,String,*)", "setAdapter(*)", "setText(*)"], "tryExpressionStart": 58, "tryExpressionEnd": 62, "tryBlockStart": 58, "tryBlockEnd": 1157, "catchExpressionStart": 986, "catchExpressionEnd": 1010, "catchBlockStart": 986, "catchBlockEnd": 1157, "exceptionHandlingCallStart": [1018, 1068, 1107], "exceptionHandlingCallEnd": [1060, 1099, 1150], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [82], "configurationEnd": [114], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 252, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONObject(int)", "jSONObject.optString(String)"], "useStart": [537, 781], "useEnd": [561, 809], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/android application/libreria/src/com/google/zxing/client/android/book/SearchBookContentsActivity.java", "rawCode": "  private void handleSearchResults(JSONObject json) {\n    try {\n      int count = json.getInt(\"number_of_results\");\n      headerView.setText(\"Found \" + (count == 1 ? \"1 result\" : count + \" results\"));\n      if (count > 0) {\n        JSONArray results = json.getJSONArray(\"search_results\");\n        SearchBookContentsResult.setQuery(queryTextView.getText().toString());\n        List<SearchBookContentsResult> items = new ArrayList<SearchBookContentsResult>(count);\n        for (int x = 0; x < count; x++) {\n          items.add(parseResult(results.getJSONObject(x)));\n        }\n        resultListView.setOnItemClickListener(new BrowseBookListener(this, items));\n        resultListView.setAdapter(new SearchBookContentsAdapter(this, items));\n      } else {\n        String searchable = json.optString(\"searchable\");\n        if (\"false\".equals(searchable)) {\n          headerView.setText(R.string.msg_sbc_book_not_searchable);\n        }\n        resultListView.setAdapter(null);\n      }\n    } catch (JSONException e) {\n      Log.w(TAG, \"Bad JSON from book search\", e);\n      resultListView.setAdapter(null);\n      headerView.setText(R.string.msg_sbc_failed);\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4168, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [351], "initializationEnd": [379], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [405], "configurationEnd": [425], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 463, "focalAPIEnd": 490, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jsonToByteArray(array)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)"], "useStart": [447, 527, 594], "useEnd": [491, 552, 624], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tigoe/BeginningNFC/tree/master/HotelKeyMaker/plugins/com.chariotsolutions.nfc.plugin/src/webworks/src/com/chariotsolutions/nfc/plugin/Util.java", "rawCode": "  static NDEFRecord[] jsonToNdefRecords(String ndefMessageAsJSON)\n      throws JSONException, NFCException {\n    Logger.log(ndefMessageAsJSON);\n    JSONArray jsonRecords = new JSONArray(ndefMessageAsJSON);\n\n    NDEFRecord[] records = new NDEFRecord[jsonRecords.length()];\n    for (int i = 0; i < jsonRecords.length(); i++) {\n      JSONObject record = jsonRecords.getJSONObject(i);\n      byte tnf = (byte) record.getInt(\"tnf\");\n      byte[] type = jsonToByteArray(record.getJSONArray(\"type\"));\n      byte[] id = jsonToByteArray(record.getJSONArray(\"id\"));\n      byte[] payload = jsonToByteArray(record.getJSONArray(\"payload\"));\n\n      records[i] = new NDEFRecord();\n      records[i].setId(new String(id));\n      records[i].setType(tnf, new String(type));\n      records[i].setPayload(payload);\n    }\n    return records;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4169, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new CruxGeneratorException(String)"], "tryExpressionStart": 441, "tryExpressionEnd": 445, "tryBlockStart": 441, "tryBlockEnd": 848, "catchExpressionStart": 617, "catchExpressionEnd": 641, "catchBlockStart": 617, "catchBlockEnd": 848, "exceptionHandlingCallStart": [657], "exceptionHandlingCallEnd": [839], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 475, "focalAPIEnd": 509, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getJSONObject(int)"], "useStart": [475], "useEnd": [526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/branches/components/crux-widgets/5.3/src/main/java/org/cruxframework/crux/widgets/rebind/deviceadaptivegrid/DeviceAdaptiveGridFactory.java", "rawCode": "    private void autoCreateDataSourceColumnDefinitions(\n        SourcePrinter out,\n        JSONObject gridElem,\n        JClassType dtoType,\n        String gridId,\n        String colDefs,\n        org.cruxframework.crux.core.client.datasource.annotation.ColumnDefinitions\n            columnDefinitions) {\n      String dtoClassName = dtoType.getParameterizedQualifiedSourceName();\n\n      JSONObject[] deviceChildren = new JSONObject[2];\n\n      try {\n        deviceChildren[0] = gridElem.getJSONArray(\"_children\").getJSONObject(0);\n        deviceChildren[1] = gridElem.getJSONArray(\"_children\").getJSONObject(1);\n      } catch (JSONException e) {\n        throw new CruxGeneratorException(\n            \"Error parsing dataSource device Columns widget [\"\n                + gridId\n                + \"], must contain both large and small columns.\");\n      }\n\n      for (int deviceIndex = 0; deviceIndex < deviceChildren.length; deviceIndex++) {\n\n        JSONArray colElems =\n            widgetCreator.ensureChildren(deviceChildren[deviceIndex], false, gridId);\n        int colsSize = colElems.length();\n        if (colsSize > 0) {\n          for (int i = 0; i < colsSize; i++) {\n            JSONObject colElem = colElems.optJSONObject(i);\n            if (colElem != null) {\n              String columnType = getChildName(colElem);\n              if (\"dataColumn\".equals(columnType)) {\n                StringBuilder getValueExpression = new StringBuilder();\n                String colKey = colElem.optString(\"key\");\n\n                if (!isDatasourceColumnBound(colKey, columnDefinitions)) {\n                  JType propType;\n                  try {\n                    propType =\n                        JClassUtils.buildGetValueExpression(\n                            getValueExpression, dtoType, colKey, \"recordObject\", true);\n                  } catch (Exception e) {\n                    throw new CruxGeneratorException(\n                        \"Grid [\" + gridId + \"] has an invalid column [\" + colKey + \"].\");\n                  }\n\n                  JClassType comparableType =\n                      getWidgetCreator()\n                          .getContext()\n                          .getTypeOracle()\n                          .findType(Comparable.class.getCanonicalName());\n\n                  boolean isSortable =\n                      (propType.isPrimitive() != null)\n                          || (comparableType.isAssignableFrom((JClassType) propType));\n                  String propTypeName = JClassUtils.getGenericDeclForType(propType);\n                  out.println(\n                      colDefs\n                          + \".addColumn(new \"\n                          + org.cruxframework.crux.core.client.datasource.ColumnDefinition.class\n                              .getCanonicalName()\n                          + \"<\"\n                          + propTypeName\n                          + \",\"\n                          + dtoClassName\n                          + \">(\"\n                          + EscapeUtils.quote(colKey)\n                          + \",\"\n                          + isSortable\n                          + \"){\");\n                  out.println(\n                      \"public \" + propTypeName + \" getValue(\" + dtoClassName + \" recordObject){\");\n                  out.println(\"return \" + getValueExpression.toString());\n                  out.println(\"}\");\n                  out.println(\"});\");\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n"}, {"dataset": "getJSONArray", "exampleID": 4170, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new ScreenConfigException(String,*)"], "tryExpressionStart": 299, "tryExpressionEnd": 303, "tryBlockStart": 299, "tryBlockEnd": 958, "catchExpressionStart": 799, "catchExpressionEnd": 823, "catchBlockStart": 799, "catchBlockEnd": 958, "exceptionHandlingCallStart": [839], "exceptionHandlingCallEnd": [949], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 264, "guardExpressionEnd": 290, "guardBlockStart": 264, "guardBlockEnd": 964, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 334, "focalAPIEnd": 364, "followUpCheck": "array != null", "checkType": "IF", "followUpCheckExpressionStart": 374, "followUpCheckExpressionEnd": 395, "followUpCheckBlockStart": 374, "followUpCheckBlockEnd": 790, "use": ["array.getJSONObject(int)"], "useStart": [489], "useEnd": [514], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/4.0.1 4697/Crux/src/core/org/cruxframework/crux/core/rebind/screen/ScreenFactory.java", "rawCode": "  /**\n   * @param elem\n   * @param screen\n   * @param widgetId\n   * @param widget\n   * @throws ScreenConfigException\n   */\n  private void createWidgetChildren(JSONObject elem, Screen screen, String widgetId, Widget widget)\n      throws ScreenConfigException {\n    if (elem.has(\"_children\")) {\n      try {\n        JSONArray children = elem.getJSONArray(\"_children\");\n        if (children != null) {\n          for (int i = 0; i < children.length(); i++) {\n            JSONObject childElem = children.getJSONObject(i);\n            if (isValidWidget(childElem)) {\n              Widget child = createWidget(childElem, screen);\n              child.setParent(widget);\n            } else {\n              createWidgetChildren(childElem, screen, widgetId, widget);\n            }\n          }\n        }\n      } catch (JSONException e) {\n        throw new ScreenConfigException(\n            \"Can not create widget [\" + widgetId + \"]. Verify the widget type.\", e);\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4171, "initialization": ["JSONObject jSONObject = toJSON(String)"], "initializationStart": [876], "initializationEnd": [906], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 832, "tryExpressionEnd": 836, "tryBlockStart": 832, "tryBlockEnd": 1820, "catchExpressionStart": 1766, "catchExpressionEnd": 1786, "catchBlockStart": 1766, "catchBlockEnd": 1820, "exceptionHandlingCallStart": [1794], "exceptionHandlingCallEnd": [1813], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 938, "focalAPIEnd": 963, "followUpCheck": "i < array.size()", "checkType": "LOOP", "followUpCheckExpressionStart": 971, "followUpCheckExpressionEnd": 1015, "followUpCheckBlockStart": 971, "followUpCheckBlockEnd": 1758, "use": ["array.getString(int)"], "useStart": [1079], "useEnd": [1103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LATC/24-7-platform/tree/master/latc-platform/runtime/trunk/src/com/deri/latc/translator/ListTranslator.java", "rawCode": "  /**\n   * Translate JSON list of tasks to TreeMap. <br>\n   * filtering the task regarding the blacklist file\n   *\n   * @param request JSON list of task\n   */\n  public void translateMember(final String request) {\n    final ArrayList<String> blacklist = new ArrayList<String>();\n\n    try {\n      if (new File(\"blacklist\").exists()) {\n        final BufferedReader in = new BufferedReader(new FileReader(\"blacklist\"));\n\n        String readLine;\n        while ((readLine = in.readLine()) != null) {\n          readLine = readLine.replace(\"->\", \"To\");\n          blacklist.add(readLine.toLowerCase());\n        }\n      }\n    } catch (FileNotFoundException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    try {\n\n      JSONObject json = (JSONObject) JSONSerializer.toJSON(request);\n      JSONArray suggestions = json.getJSONArray(\"task\");\n      for (int i = 0; i < suggestions.size(); i++) {\n        JSONObject item = (JSONObject) JSONSerializer.toJSON(suggestions.getString(i));\n        StringTokenizer st = new StringTokenizer(item.getString(\"title\"), \" \", false);\n        String title = \"\";\n        while (st.hasMoreElements()) title += st.nextElement();\n        title = title.replace(\"->\", \"To\");\n        if (blacklist.contains(title.toLowerCase())) title = \"**\" + title;\n        if (item.getBoolean(\"executable\"))\n          LinkingConfigs.put(\n              title,\n              item.getString(\"identifier\")\n                  + '#'\n                  + item.getString(\"created\")\n                  + '#'\n                  + item.getString(\"modified\")\n                  + '#'\n                  + item.getString(\"author\"));\n      }\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4172, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [630], "configurationEnd": [660], "guardCondition": "jSONObject.has(\"resourceId\",)&&jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 552, "guardExpressionEnd": 610, "guardBlockStart": 552, "guardBlockEnd": 874, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 701, "focalAPIEnd": 735, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 743, "followUpCheckExpressionEnd": 789, "followUpCheckBlockStart": 743, "followUpCheckBlockEnd": 868, "use": ["array.getJSONObject(int)"], "useStart": [829], "useEnd": [857], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/editor/server/src/org/oryxeditor/server/diagram/DiagramBuilder.java", "rawCode": "  /**\n   * Prepare a model JSON for analyze, resolves the hierarchical structure creates a HashMap which\n   * contains all resourceIds as keys and for each key the JSONObject, all id are keys of this map\n   *\n   * @param object\n   * @return a HashMap keys: all ressourceIds values: all child JSONObjects\n   * @throws JSONException\n   */\n  public static HashMap<String, JSONObject> flatRessources(JSONObject object) throws JSONException {\n    HashMap<String, JSONObject> result = new HashMap<String, JSONObject>();\n\n    // no cycle in hierarchies!!\n    if (object.has(\"resourceId\") && object.has(\"childShapes\")) {\n      result.put(object.getString(\"resourceId\"), object);\n      JSONArray childShapes = object.getJSONArray(\"childShapes\");\n      for (int i = 0; i < childShapes.length(); i++) {\n        result.putAll(flatRessources(childShapes.getJSONObject(i)));\n      }\n    }\n    ;\n\n    return result;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4173, "initialization": ["JSONObject jSONObject = getResource(String,String,*,boolean)"], "initializationStart": [517], "initializationEnd": [567], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["toString()", "new CloudException(*,int,String,String)"], "tryExpressionStart": 629, "tryExpressionEnd": 633, "tryBlockStart": 629, "tryBlockEnd": 1150, "catchExpressionStart": 912, "catchExpressionEnd": 936, "catchBlockStart": 912, "catchBlockEnd": 1150, "exceptionHandlingCallStart": [1123, 954], "exceptionHandlingCallEnd": [1138, 1139], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject!=null&&jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 576, "guardExpressionEnd": 618, "guardBlockStart": 576, "guardBlockEnd": 1158, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 662, "focalAPIEnd": 692, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 705, "followUpCheckExpressionEnd": 744, "followUpCheckBlockStart": 705, "followUpCheckBlockEnd": 901, "use": ["array.getJSONObject(int)"], "useStart": [788], "useEnd": [809], "hasFinally": 1, "cleanUpCall": ["end()"], "finallyExpressionStart": 1189, "finallyExpressionEnd": 1197, "finallyBlockStart": 1189, "finallyBlockEnd": 1226, "cleanUpCallStart": [1205], "cleanUpCallEnd": [1219], "url": "https://github.com/greese/dasein-cloud-openstack/tree/master/src/main/java/org/dasein/cloud/openstack/nova/os/ext/rackspace/db/RackspaceRDBMS.java", "rawCode": "  @Override\n  public @Nonnull Iterable<ResourceStatus> listDatabaseStatus()\n      throws CloudException, InternalException {\n    APITrace.begin(getProvider(), \"RDBMS.listDatabaseStatus\");\n    try {\n      ProviderContext ctx = getProvider().getContext();\n\n      if (ctx == null) {\n        throw new InternalException(\"No context exists for this request\");\n      }\n      NovaMethod method = new NovaMethod(getProvider());\n      List<ResourceStatus> databases = new ArrayList<ResourceStatus>();\n\n      JSONObject json = method.getResource(SERVICE, RESOURCE, null, false);\n\n      if (json != null && json.has(\"instances\")) {\n        try {\n          JSONArray list = json.getJSONArray(\"instances\");\n\n          for (int i = 0; i < list.length(); i++) {\n            ResourceStatus db = toStatus(list.getJSONObject(i));\n\n            if (db != null) {\n              databases.add(db);\n            }\n          }\n        } catch (JSONException e) {\n          throw new CloudException(\n              CloudErrorType.COMMUNICATION,\n              200,\n              \"invalidJson\",\n              \"Missing JSON element for instances in \" + json.toString());\n        }\n      }\n      return databases;\n    } finally {\n      APITrace.end();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4174, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getString(String)"], "configurationStart": [95], "configurationEnd": [117], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 482, "focalAPIEnd": 513, "followUpCheck": "i < array.size()", "checkType": "LOOP", "followUpCheckExpressionStart": 519, "followUpCheckExpressionEnd": 562, "followUpCheckBlockStart": 519, "followUpCheckBlockEnd": 633, "use": ["array.getJSONObject(int)"], "useStart": [597], "useEnd": [624], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rmarianski/geoserver-exts/tree/master/importer/src/main/java/org/opengeo/data/importer/rest/ImportJSONIO.java", "rawCode": "  public TransformChain transformChain(JSONObject json) throws IOException {\n    String type = json.getString(\"type\");\n    TransformChain chain = null;\n    if (\"VectorTransformChain\".equalsIgnoreCase(type)) {\n      chain = new VectorTransformChain();\n    } else if (\"RasterTransformChain\".equalsIgnoreCase(type)) {\n      chain = new RasterTransformChain();\n    } else {\n      throw new IOException(\"Unable to parse transformChain of type \" + type);\n    }\n    JSONArray transforms = json.getJSONArray(\"transforms\");\n    for (int i = 0; i < transforms.size(); i++) {\n      chain.add(importTransform(transforms.getJSONObject(i)));\n    }\n    return chain;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4175, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 67, "tryExpressionEnd": 71, "tryBlockStart": 67, "tryBlockEnd": 3818, "catchExpressionStart": 3732, "catchExpressionEnd": 3756, "catchBlockStart": 3732, "catchBlockEnd": 3818, "exceptionHandlingCallStart": [3764], "exceptionHandlingCallEnd": [3783], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 99, "focalAPIEnd": 134, "followUpCheck": "array.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 451, "followUpCheckExpressionEnd": 477, "followUpCheckBlockStart": 451, "followUpCheckBlockEnd": 3567, "use": ["array.getJSONObject(int)"], "useStart": [1109], "useEnd": [1133], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mollyproject/mollyandroid/tree/master/src/org/mollyproject/android/view/apps/search/SearchTask.java", "rawCode": "  @Override\n  public void updateView(JSONObject jsonContent) {\n    try {\n      JSONArray results = jsonContent.getJSONArray(\"results\");\n      LayoutInflater inflater = page.getLayoutInflater();\n      LinearLayout generalResultsLayout =\n          (LinearLayout) inflater.inflate(R.layout.general_search_results_page, null);\n\n      LinearLayout resultsLayout =\n          (LinearLayout) generalResultsLayout.findViewById(R.id.generalResultsList);\n\n      if (results.length() == 0) {\n        // No results found\n        ((TextView) resultsLayout.findViewById(R.id.searchResultsHeader))\n            .setText(\"Sorry, your search returns no results. \" + \"Please try again.\");\n      } else if (results.length()\n          == 1) // & results.getJSONObject(0).getBoolean(\"redirect_if_sole_result\"))\n      {\n        // treat the sole-result case as a special case\n      } else {\n        ((TextView) resultsLayout.findViewById(R.id.searchResultsHeader))\n            .setText(\"Results for \\\"\" + MyApplication.generalQuery[0] + \"\\\"\");\n        for (int i = 0; i < results.length(); i++) {\n          final JSONObject result = results.getJSONObject(i);\n          LinearLayout thisResult =\n              (LinearLayout) inflater.inflate(R.layout.general_search_result, null);\n          resultsLayout.addView(thisResult);\n          thisResult.setLayoutParams(Page.paramsWithLine);\n          ImageView appIcon = (ImageView) thisResult.findViewById(R.id.generalSearchIcon);\n          appIcon.setImageResource(\n              MyApplication.getImgResourceId(result.get(\"application\") + \":index_img\"));\n\n          String text = new String();\n          // title\n          text = text + result.getString(\"title\") + \"<br />\";\n\n          // additional text:\n          if (!result.isNull(\"additional\")) {\n            text = text + result.getString(\"additional\") + \"<br />\";\n          }\n\n          // search excerpts:\n          if (!result.isNull(\"excerpt\")) {\n            text = text + result.getString(\"excerpt\");\n          }\n          // text\n          TextView infoText = (TextView) thisResult.findViewById(R.id.generalSearchText);\n          infoText.setText(Html.fromHtml(text));\n\n          thisResult.setOnClickListener(\n              new OnClickListener() {\n\n                @Override\n                public void onClick(View v) {\n                  try {\n                    String app = result.getString(\"application\");\n                    if (app.equals(\"places\")) {\n                      JSONObject entity = result.getJSONObject(\"entity\");\n                      MyApplication.placesArgs[0] = entity.getString(\"identifier_scheme\");\n                      MyApplication.placesArgs[1] = entity.getString(\"identifier_value\");\n                      Intent myIntent =\n                          new Intent(page, MyApplication.getPageClass(MollyModule.PLACES_ENTITY));\n                      page.startActivityForResult(myIntent, 0);\n                    } else if (app.equals(\"podcasts\")) {\n                      String indSlug = result.getString(\"url\").replace(\"/podcasts/\", \"\");\n                      MyApplication.indPodcastSlug = indSlug;\n                      Intent myIntent =\n                          new Intent(\n                              page,\n                              MyApplication.getPageClass(MollyModule.INDIVIDUAL_PODCAST_PAGE));\n                      page.startActivityForResult(myIntent, 0);\n                    }\n\n                  } catch (JSONException e) {\n                    e.printStackTrace();\n                  }\n                }\n              });\n        }\n      }\n      page.getContentLayout().removeAllViews();\n      page.getContentLayout().addView(generalResultsLayout);\n      ((ContentPage) page).doneProcessingJSON();\n    } catch (JSONException e) {\n      e.printStackTrace();\n      jsonException = true;\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4176, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["toString()", "w(String,*)"], "tryExpressionStart": 230, "tryExpressionEnd": 234, "tryBlockStart": 230, "tryBlockEnd": 1197, "catchExpressionStart": 1131, "catchExpressionEnd": 1155, "catchBlockStart": 1131, "catchBlockEnd": 1197, "exceptionHandlingCallStart": [1177, 1163], "exceptionHandlingCallEnd": [1189, 1190], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,) && !(jSONObject==null)", "guardType": "IF {", "guardExpressionStart": 79, "guardExpressionEnd": 102, "guardBlockStart": 79, "guardBlockEnd": 189, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 335, "focalAPIEnd": 381, "followUpCheck": "array != null && array.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 398, "followUpCheckExpressionEnd": 440, "followUpCheckBlockStart": 398, "followUpCheckBlockEnd": 1123, "use": ["array.length()", "array.getJSONObject(int)"], "useStart": [420, 585], "useEnd": [435, 608], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/choclover/StudentPalClient/tree/master/src/com/studentpal/app/handler/MessageHandler.java", "rawCode": "  private Set<ClientUser> saveManagedDevsInfoToDB(JSONObject jsonResObj) {\n    if (jsonResObj == null) {\n      Logger.w(TAG, \"Input result obj should NOT be NULL\");\n      return null;\n    }\n\n    Set<ClientUser> result = null;\n    try {\n      JSONArray devAry = null;\n      if (jsonResObj.has(Event.TAGNAME_DEVICES)) {\n        devAry = jsonResObj.getJSONArray(Event.TAGNAME_DEVICES);\n      }\n\n      if (devAry != null && devAry.length() > 0) {\n        result = new HashSet<ClientUser>(devAry.length());\n\n        for (int i = 0; i < devAry.length(); i++) {\n          JSONObject devObj = devAry.getJSONObject(i);\n          String phoneNo = devObj.getString(Event.TAGNAME_PHONE_NUM);\n          String phoneImsi = devObj.getString(Event.TAGNAME_PHONE_IMSI);\n          String phoneImei = null;\n          if (devObj.has(Event.TAGNAME_PHONE_IMEI)) {\n            phoneImei = devObj.getString(Event.TAGNAME_PHONE_IMEI);\n          }\n\n          ClientUser managedDev = new ClientUser(phoneNo, phoneImsi, phoneImei);\n          result.add(managedDev);\n        }\n\n        DBaseManager.getInstance().saveManagedDevInfoToDB(result);\n      }\n\n    } catch (JSONException e) {\n      Logger.w(TAG, e.toString());\n    }\n\n    DataManager.getInstance().setManagedDevs(result);\n\n    return result;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4177, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["new MMAcqDataException(*)"], "tryExpressionStart": 370, "tryExpressionEnd": 374, "tryBlockStart": 370, "tryBlockEnd": 741, "catchExpressionStart": 671, "catchExpressionEnd": 695, "catchBlockStart": 671, "catchBlockEnd": 741, "exceptionHandlingCallStart": [709], "exceptionHandlingCallEnd": [734], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 382, "guardExpressionEnd": 432, "guardBlockStart": 382, "guardBlockEnd": 554, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 456, "focalAPIEnd": 510, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.put(int,String)", "jSONObject.put(String,JSONArray)"], "useStart": [562, 604], "useEnd": [596, 663], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/astraw/micromanager1.3/tree/master/mmstudio/src/org/micromanager/metadata/AcquisitionData.java", "rawCode": "  /**\n   * Sets a channel name for a specified channel index\n   *\n   * @param channelIdx - channel index\n   * @param name - label\n   * @throws MMAcqDataException\n   */\n  public void setChannelName(int channelIdx, String name) throws MMAcqDataException {\n    if (channels_ <= channelIdx) throw new MMAcqDataException(ERR_CHANNEL_INDEX);\n\n    JSONArray channelNames;\n\n    try {\n      if (summary_.has(SummaryKeys.CHANNEL_NAMES_ARRAY))\n        channelNames = summary_.getJSONArray(SummaryKeys.CHANNEL_NAMES_ARRAY);\n      else channelNames = new JSONArray();\n\n      channelNames.put(channelIdx, name);\n      summary_.put(SummaryKeys.CHANNEL_NAMES_ARRAY, channelNames);\n    } catch (JSONException e) {\n      throw new MMAcqDataException(e);\n    }\n    channelNames_[channelIdx] = name;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4178, "initialization": ["JSONObject jSONObject = getNetworks(*,*,boolean)", "JSONObject jSONObject = getServers(*,*,boolean)"], "initializationStart": [479, 561], "initializationEnd": [531, 612], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["getMessage()", "Logger.error(String)", "printStackTrace()", "toString()", "new CloudException(*,int,String,String)"], "tryExpressionStart": 688, "tryExpressionEnd": 692, "tryBlockStart": 688, "tryBlockEnd": 1415, "catchExpressionStart": 1077, "catchExpressionEnd": 1101, "catchBlockStart": 1077, "catchBlockEnd": 1415, "exceptionHandlingCallStart": [1173, 1111, 1198, 1392, 1233], "exceptionHandlingCallEnd": [1187, 1188, 1217, 1405, 1406], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject!=null&&jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 702, "guardExpressionEnd": 738, "guardBlockStart": 702, "guardBlockEnd": 1068, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 768, "focalAPIEnd": 794, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 807, "followUpCheckExpressionEnd": 846, "followUpCheckBlockStart": 807, "followUpCheckBlockEnd": 1058, "use": ["array.getJSONObject(int)"], "useStart": [886], "useEnd": [907], "hasFinally": 1, "cleanUpCall": ["end()"], "finallyExpressionStart": 1444, "finallyExpressionEnd": 1452, "finallyBlockStart": 1444, "finallyBlockEnd": 1481, "cleanUpCallStart": [1460], "cleanUpCallEnd": [1474], "url": "https://github.com/greese/dasein-cloud-openstack/tree/master/src/main/java/org/dasein/cloud/openstack/nova/os/network/Quantum.java", "rawCode": "  @Override\n  public @Nonnull Iterable<Subnet> listSubnets(@Nonnull String inVlanId)\n      throws CloudException, InternalException {\n    APITrace.begin(getProvider(), \"VLAN.listSubnets\");\n    try {\n      if (!getNetworkType().equals(QuantumType.QUANTUM)) {\n        return Collections.emptyList();\n      }\n      NovaMethod method = new NovaMethod((NovaOpenStack) getProvider());\n      JSONObject ob = null;\n\n      if (getNetworkType().equals(QuantumType.QUANTUM)) {\n        ob = method.getNetworks(getSubnetResource(), null, false);\n      } else {\n        ob = method.getServers(getSubnetResource(), null, false);\n      }\n      ArrayList<Subnet> subnets = new ArrayList<Subnet>();\n\n      try {\n        if (ob != null && ob.has(\"subnets\")) {\n          JSONArray list = ob.getJSONArray(\"subnets\");\n\n          for (int i = 0; i < list.length(); i++) {\n            Subnet subnet = toSubnet(list.getJSONObject(i), null);\n\n            if (subnet != null && subnet.getProviderVlanId().equals(inVlanId)) {\n              subnets.add(subnet);\n            }\n          }\n        }\n      } catch (JSONException e) {\n        logger.error(\"Unable to identify expected values in JSON: \" + e.getMessage());\n        e.printStackTrace();\n        throw new CloudException(\n            CloudErrorType.COMMUNICATION,\n            200,\n            \"invalidJson\",\n            \"Missing JSON element for subnets in \" + ob.toString());\n      }\n      return subnets;\n    } finally {\n      APITrace.end();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4179, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [1280], "initializationEnd": [1306], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.length()"], "configurationStart": [1360], "configurationEnd": [1373], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1398, "focalAPIEnd": 1422, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.length()"], "useStart": [1476], "useEnd": [1490], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/TestRMWebServicesApps.java", "rawCode": "  @Test\n  public void testAppsQueryFinishBeginEnd() throws JSONException, Exception {\n    rm.start();\n    MockNM amNodeManager = rm.registerNode(\"amNM:1234\", 2048);\n    long start = System.currentTimeMillis();\n    Thread.sleep(1);\n    RMApp app1 = rm.submitApp(1024);\n    amNodeManager.nodeHeartbeat(true);\n    // finish App\n    MockAM am = rm.sendAMLaunched(app1.getCurrentAppAttempt().getAppAttemptId());\n    am.registerAppAttempt();\n    am.unregisterAppAttempt();\n    amNodeManager.nodeHeartbeat(\n        app1.getCurrentAppAttempt().getAppAttemptId(), 1, ContainerState.COMPLETE);\n\n    rm.submitApp(1024);\n    rm.submitApp(1024);\n    long end = System.currentTimeMillis();\n\n    WebResource r = resource();\n    ClientResponse response =\n        r.path(\"ws\")\n            .path(\"v1\")\n            .path(\"cluster\")\n            .path(\"apps\")\n            .queryParam(\"finishedTimeBegin\", String.valueOf(start))\n            .queryParam(\"finishedTimeEnd\", String.valueOf(end))\n            .accept(MediaType.APPLICATION_JSON)\n            .get(ClientResponse.class);\n    assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType());\n    JSONObject json = response.getEntity(JSONObject.class);\n    assertEquals(\"incorrect number of elements\", 1, json.length());\n    JSONObject apps = json.getJSONObject(\"apps\");\n    assertEquals(\"incorrect number of elements\", 1, apps.length());\n    JSONArray array = apps.getJSONArray(\"app\");\n    assertEquals(\"incorrect number of elements\", 1, array.length());\n    rm.stop();\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4180, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [732], "initializationEnd": [757], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 785, "focalAPIEnd": 818, "followUpCheck": "null != array && array.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 826, "followUpCheckExpressionEnd": 870, "followUpCheckBlockStart": 826, "followUpCheckBlockEnd": 1516, "use": ["array.getJSONObject(int)"], "useStart": [1028], "useEnd": [1052], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wanglu0919/chianwuxi_android/tree/master/chinaw/src/com/wuxi/app/engine/ReplyStatisticsService.java", "rawCode": "  /**\n   * 获取各信箱部门答复率总数统计\n   *\n   * @throws NODataException\n   * @throws JSONException\n   * @throws NetException\n   */\n  public List<StatisticsLetter> getLettersStatistics(int letter_type, int year, int month)\n      throws JSONException, NetException, NODataException {\n    if (!checkNet()) {\n      throw new NetException(Constants.ExceptionMessage.NO_NET);\n    }\n\n    String url =\n        Constants.Urls.LETTERS_STATISTICS_URL\n            + \"?type=\"\n            + letter_type\n            + \"&year=\"\n            + year\n            + \"&month=\"\n            + month;\n\n    System.out.println(\"--->\" + url);\n\n    String reslutStr = httpUtils.executeGetToString(url, TIME_OUT);\n\n    if (reslutStr != null) {\n      JSONObject jsonObject = new JSONObject(reslutStr);\n      JSONArray jresult = jsonObject.getJSONArray(\"result\");\n      if (null != jresult && jresult.length() > 0) {\n        List<StatisticsLetter> letters = new ArrayList<StatisticsLetter>();\n        for (int i = 0; i < jresult.length(); i++) {\n          JSONObject jb = jresult.getJSONObject(i);\n          StatisticsLetter letter = new StatisticsLetter();\n\n          letter.setDepname(jb.getString(\"depname\"));\n          letter.setAcceptedNum(jb.getInt(\"acceptedNum\"));\n          letter.setReplyNum(jb.getInt(\"replyNum\"));\n          letter.setReplyRate(jb.getString(\"replyRate\"));\n          letter.setReplyDay(jb.getString(\"replyDay\"));\n          letter.setNull(jb.getBoolean(\"null\"));\n          letters.add(letter);\n        }\n        return letters;\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4181, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 971, "focalAPIEnd": 1027, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/application/tree/master/tomcat-main/src/test/java/org/collectionspace/chain/storage/TestServiceThroughWebapp.java", "rawCode": "  @Test\n  public void testSearch() throws Exception {\n    // one aardvark, one non-aardvark\n    UTF8SafeHttpTester out =\n        tester.jettyDoUTF8(\n            jetty,\n            \"POST\",\n            \"/tenant/core/cataloging/\",\n            tester.makeSimpleRequest(tester.getResourceString(\"obj3-search.json\")));\n    assertEquals(201, out.getStatus());\n    String id1 = out.getHeader(\"Location\");\n    String good = id1.split(\"/\")[2];\n    out =\n        tester.jettyDoUTF8(\n            jetty,\n            \"POST\",\n            \"/tenant/core/cataloging/\",\n            tester.makeSimpleRequest(tester.getResourceString(\"obj3.json\")));\n    String id2 = out.getHeader(\"Location\");\n    String bad = id2.split(\"/\")[2];\n    assertEquals(201, out.getStatus());\n    // search\n    out = tester.jettyDoUTF8(jetty, \"GET\", \"/tenant/core/cataloging/search?query=aardvark\", null);\n    assertEquals(200, out.getStatus());\n    log.info(out.getContent());\n    // check\n    JSONArray results = new JSONObject(out.getContent()).getJSONArray(\"results\");\n    boolean found = false;\n    for (int i = 0; i < results.length(); i++) {\n      String csid = results.getJSONObject(i).getString(\"csid\");\n      if (good.equals(csid)) found = true;\n      if (bad.equals(csid)) assertTrue(false);\n    }\n    assertTrue(found);\n    /* clean up */\n    out = tester.jettyDoUTF8(jetty, \"DELETE\", \"/tenant/core\" + id1, null);\n    out = tester.jettyDoUTF8(jetty, \"DELETE\", \"/tenant/core\" + id2, null);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4182, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [141], "initializationEnd": [161], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 107, "tryExpressionEnd": 111, "tryBlockStart": 107, "tryBlockEnd": 859, "catchExpressionStart": 801, "catchExpressionEnd": 825, "catchBlockStart": 801, "catchBlockEnd": 859, "exceptionHandlingCallStart": [833], "exceptionHandlingCallEnd": [852], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 169, "guardExpressionEnd": 192, "guardBlockStart": 169, "guardBlockEnd": 794, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 223, "focalAPIEnd": 250, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 260, "followUpCheckExpressionEnd": 302, "followUpCheckBlockStart": 260, "followUpCheckBlockEnd": 786, "use": ["array.getJSONObject(int)"], "useStart": [372], "useEnd": [396], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/platform-infrastructure/sns/socialdata/src/main/java/org/societies/platform/socialdata/converters/GroupConverterFromLinkedin.java", "rawCode": "  @Override\n  public List<Group> load(String data) {\n\n    List<Group> groups = new ArrayList<Group>();\n    try {\n      JSONObject jsonData = new JSONObject(data);\n      if (jsonData.has(DATA)) {\n        JSONArray jgroups = jsonData.getJSONArray(DATA);\n        for (int i = 0; i < jgroups.length(); i++) {\n          Group g = new GroupImpl();\n          JSONObject jGroup = jgroups.getJSONObject(i);\n\n          JSONObject gInfo = jGroup.getJSONObject(\"group\");\n          g.setDescription(gInfo.getString(\"name\"));\n          g.setId(new GroupId(Type.groupId, \"linkedin:\" + gInfo.getString(\"id\")));\n\n          if (jGroup.has(\"membershipState\")) {\n            g.setTitle(\"linkedin:\" + jGroup.getJSONObject(\"membershipState\").getString(\"code\"));\n          }\n          groups.add(g);\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n\n    return groups;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4183, "initialization": ["JSONObject jSONObject = fromObject(String)"], "initializationStart": [1793], "initializationEnd": [1820], "hasTryCatch": 1, "exceptionType": "ParserException", "exceptionHandlingCall": ["getMessage()", "addLocalMessage(*)"], "tryExpressionStart": 1757, "tryExpressionEnd": 1761, "tryBlockStart": 1757, "tryBlockEnd": 2067, "catchExpressionStart": 3788, "catchExpressionEnd": 3814, "catchBlockStart": 3788, "catchBlockEnd": 3876, "exceptionHandlingCallStart": [3850, 3826], "exceptionHandlingCallEnd": [3864, 3865], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.containsKey(name,)", "guardType": "IF {", "guardExpressionStart": 1834, "guardExpressionEnd": 1871, "guardBlockStart": 1834, "guardBlockEnd": 1960, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1911, "focalAPIEnd": 1944, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addAll(array)"], "useStart": [1888], "useEnd": [1945], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spullara/maptool/tree/master/src/net/rptools/maptool/client/functions/MacroLinkFunction.java", "rawCode": "  /**\n   * Runs the macro specified by the link.\n   *\n   * @param link the link to the macro.\n   * @param setVars should the variables be set in the macro context as well as passed in as\n   *     macro.args.\n   */\n  public void runMacroLink(String link, boolean setVars) {\n    if (link == null || link.length() == 0) {\n      return;\n    }\n    Matcher m = macroLink.matcher(link);\n\n    if (m.matches()) {\n      OutputTo outputTo;\n      String macroName = \"\";\n      String args = \"\";\n      Set<String> outputToPlayers = new HashSet<String>();\n\n      if (m.group(1).equalsIgnoreCase(\"macro\")) {\n\n        String who = m.group(3);\n        if (who.equalsIgnoreCase(\"self\")) {\n          outputTo = OutputTo.SELF;\n        } else if (who.equalsIgnoreCase(\"gm\")) {\n          outputTo = OutputTo.GM;\n        } else if (who.equalsIgnoreCase(\"none\")) {\n          outputTo = OutputTo.NONE;\n        } else if (who.equalsIgnoreCase(\"all\") || who.equalsIgnoreCase(\"say\")) {\n          outputTo = OutputTo.ALL;\n        } else if (who.equalsIgnoreCase(\"gm-self\") || who.equalsIgnoreCase(\"gmself\")) {\n          outputTo = OutputTo.SELF_AND_GM;\n        } else if (who.equalsIgnoreCase(\"list\")) {\n          outputTo = OutputTo.LIST;\n        } else {\n          outputTo = OutputTo.NONE;\n        }\n        macroName = m.group(2);\n\n        String val = m.group(5);\n        if (val != null) {\n          try {\n            Double.parseDouble(val);\n            // Do nothing as its a number\n          } catch (NumberFormatException e) {\n            try {\n              val = argsToStrPropList(val);\n            } catch (ParserException e1) {\n              MapTool.addLocalMessage(\"Error running macro link: \" + e1.getMessage());\n            }\n          }\n          args = val;\n          try {\n            JSONObject jobj = JSONObject.fromObject(args);\n            if (jobj.containsKey(\"mlOutputList\")) {\n              outputToPlayers.addAll(jobj.getJSONArray(\"mlOutputList\"));\n            }\n          } catch (Exception e) {\n            // Do nothing as we just dont populate the list.\n          }\n        }\n\n        String[] targets = m.group(4).split(\",\");\n        Zone zone = MapTool.getFrame().getCurrentZoneRenderer().getZone();\n\n        try {\n          for (String t : targets) {\n            if (t.equalsIgnoreCase(\"impersonated\")) {\n              Token token;\n              GUID guid = MapTool.getFrame().getCommandPanel().getIdentityGUID();\n              if (guid != null)\n                token = MapTool.getFrame().getCurrentZoneRenderer().getZone().getToken(guid);\n              else token = zone.resolveToken(MapTool.getFrame().getCommandPanel().getIdentity());\n              MapToolVariableResolver resolver = new MapToolVariableResolver(token);\n              String output = MapTool.getParser().runMacro(resolver, token, macroName, args);\n              doOutput(token, outputTo, output, outputToPlayers); // TODO\n            } else if (t.equalsIgnoreCase(\"selected\")) {\n              for (GUID id : MapTool.getFrame().getCurrentZoneRenderer().getSelectedTokenSet()) {\n                Token token = zone.getToken(id);\n                MapToolVariableResolver resolver = new MapToolVariableResolver(token);\n                String output = MapTool.getParser().runMacro(resolver, token, macroName, args);\n                doOutput(token, outputTo, output, outputToPlayers);\n              }\n            } else {\n              Token token = zone.resolveToken(t);\n              MapToolVariableResolver resolver = new MapToolVariableResolver(token);\n              String output = MapTool.getParser().runMacro(resolver, token, macroName, args);\n              doOutput(token, outputTo, output, outputToPlayers);\n            }\n          }\n        } catch (AbortFunctionException e) {\n          // Do nothing\n        } catch (ParserException e) {\n          MapTool.addLocalMessage(e.getMessage());\n        }\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4184, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 284, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stephenc/redmine-java-api/tree/master/src/main/java/org/redmine/ta/internal/json/JsonInput.java", "rawCode": "  /**\n   * Returns a json array as \"not-null\" value.\n   *\n   * @param obj object to get a value from.\n   * @param field field to get a value from.\n   * @return json array.\n   */\n  public static JSONArray getArrayNotNull(JSONObject obj, String field) throws JSONException {\n    return obj.getJSONArray(field);\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4185, "initialization": ["JSONObject jSONObject = new JSONObject()"], "initializationStart": [152], "initializationEnd": [168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.put(String,JSONArray)", "jSONObject.put(String,JSONObject)"], "configurationStart": [174, 200], "configurationEnd": [194, 220], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 241, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertSame(JSONArray,array)", "jSONObject.getJSONObject(String)", "jSONObject.getJSONObject(String)", "jSONObject.getJSONArray(String)", "jSONObject.optJSONArray(String)", "jSONObject.optJSONObject(String)", "jSONObject.optJSONArray(String)", "jSONObject.optJSONObject(String)"], "useStart": [227, 288, 334, 431, 531, 580, 633, 685], "useEnd": [268, 315, 361, 457, 557, 607, 659, 712], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/json/src/test/java/org/json/JSONObjectTest.java", "rawCode": "  public void testJSONObjects() throws JSONException {\n    JSONObject object = new JSONObject();\n\n    JSONArray a = new JSONArray();\n    JSONObject b = new JSONObject();\n    object.put(\"foo\", a);\n    object.put(\"bar\", b);\n\n    assertSame(a, object.getJSONArray(\"foo\"));\n    assertSame(b, object.getJSONObject(\"bar\"));\n    try {\n      object.getJSONObject(\"foo\");\n      fail();\n    } catch (JSONException e) {\n    }\n    try {\n      object.getJSONArray(\"bar\");\n      fail();\n    } catch (JSONException e) {\n    }\n    assertEquals(a, object.optJSONArray(\"foo\"));\n    assertEquals(b, object.optJSONObject(\"bar\"));\n    assertEquals(null, object.optJSONArray(\"bar\"));\n    assertEquals(null, object.optJSONObject(\"foo\"));\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4186, "initialization": ["JSONObject jSONObject = JSONArray.getJSONObject(int)"], "initializationStart": [295], "initializationEnd": [323], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.getInt(String)"], "configurationStart": [349], "configurationEnd": [369], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 407, "focalAPIEnd": 434, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jsonToByteArray(array)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)"], "useStart": [391, 471, 538], "useEnd": [435, 496, 568], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tigoe/BeginningNFC/tree/master/FoursquareCheckin/platforms/android/src/com/chariotsolutions/nfc/plugin/Util.java", "rawCode": "  static NdefRecord[] jsonToNdefRecords(String ndefMessageAsJSON) throws JSONException {\n    JSONArray jsonRecords = new JSONArray(ndefMessageAsJSON);\n    NdefRecord[] records = new NdefRecord[jsonRecords.length()];\n    for (int i = 0; i < jsonRecords.length(); i++) {\n      JSONObject record = jsonRecords.getJSONObject(i);\n      byte tnf = (byte) record.getInt(\"tnf\");\n      byte[] type = jsonToByteArray(record.getJSONArray(\"type\"));\n      byte[] id = jsonToByteArray(record.getJSONArray(\"id\"));\n      byte[] payload = jsonToByteArray(record.getJSONArray(\"payload\"));\n      records[i] = new NdefRecord(tnf, type, id, payload);\n    }\n    return records;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4187, "initialization": ["JSONObject jSONObject = executeCalabashCommand(*)"], "initializationStart": [102], "initializationEnd": [158], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 313, "tryExpressionEnd": 317, "tryBlockStart": 313, "tryBlockEnd": 698, "catchExpressionStart": 644, "catchExpressionEnd": 664, "catchBlockStart": 644, "catchBlockEnd": 698, "exceptionHandlingCallStart": [672], "exceptionHandlingCallEnd": [691], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 354, "focalAPIEnd": 393, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.getString(int)"], "useStart": [423], "useEnd": [452], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/calabash-driver/calabash-driver/tree/master/calabash-driver-client/src/main/java/sh/calaba/driver/client/model/impl/DeviceImpl.java", "rawCode": "  @Override\n  public File takeScreenshot(String path) {\n    File file = null;\n    JSONObject result = executeCalabashCommand(CalabashCommands.TAKE_SCREENSHOT);\n    if (result == null || !result.has(\"bonusInformation\")) {\n      throw new CalabashException(\"An error occured while taking a screenshot.\");\n    }\n    try {\n      JSONArray bonusInformation = result.getJSONArray(\"bonusInformation\");\n      String base64String = bonusInformation.getString(0);\n\n      byte[] img64 = Base64.decodeBase64(base64String);\n      file = new File(path);\n      FileOutputStream os = new FileOutputStream(file);\n      os.write(img64);\n      os.close();\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return file;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4188, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 199, "tryExpressionEnd": 203, "tryBlockStart": 199, "tryBlockEnd": 2089, "catchExpressionStart": 1990, "catchExpressionEnd": 2010, "catchBlockStart": 1990, "catchBlockEnd": 2089, "exceptionHandlingCallStart": [2018], "exceptionHandlingCallEnd": [2082], "configuration": ["jSONObject.getDouble(String)", "jSONObject.getDouble(String)"], "configurationStart": [338, 441], "configurationEnd": [363, 466], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 683, "focalAPIEnd": 715, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 835, "followUpCheckExpressionEnd": 880, "followUpCheckBlockStart": 835, "followUpCheckBlockEnd": 1865, "use": ["array.get(int)"], "useStart": [921], "useEnd": [938], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/context-management/LocationManagement/src/main/java/org/societies/context/location/management/impl/PZWrapperImpl.java", "rawCode": "  private IUserLocation toIUserLocation(JSONObject jsonObject) {\n    log.debug(\"start method 'toIUserLocation' \\t Json: \" + jsonObject);\n\n    IUserLocation userLocation = new UserLocationImpl();\n    try {\n      // verifies that the JSON object is valid\n      if (!isJsonValid(jsonObject)) {\n        return null;\n      }\n\n      double x = jsonObject.getDouble(\"x\");\n      userLocation.setXCoordinate(new CoordinateImpl(x));\n\n      double y = jsonObject.getDouble(\"y\");\n      userLocation.setYCoordinate(new CoordinateImpl(y));\n\n      // double z = ((Double)jsonObject.get(\"z\")).doubleValue();\n      // userLocation.setZCoordinate(new CoordinateImpl(z));\n\n      JSONArray zonesArray = jsonObject.getJSONArray(\"zones\");\n      List<IZone> zonesList = new ArrayList<IZone>();\n      IZone zone = null;\n      JSONObject currZoneObject;\n      for (int i = 0; i < zonesArray.length(); i++) {\n        currZoneObject = (JSONObject) zonesArray.get(i);\n        zone = new ZoneImpl();\n\n        String value = currZoneObject.getString(\"personalTag\");\n        ITag personalTag = new TagImpl(value);\n        zone.setPersonalTag(personalTag);\n\n        JSONArray jSONArrayTags = currZoneObject.getJSONArray(\"tags\");\n        List<ITag> tagCollection = new ArrayList<ITag>();\n        for (int j = 0; j < jSONArrayTags.length(); j++) {\n          String str = jSONArrayTags.get(j).toString();\n          tagCollection.add(new TagImpl(str));\n        }\n        zone.setTags(tagCollection);\n\n        long zoneId = ((Number) currZoneObject.get(\"id\")).longValue();\n        IZoneId zoneIdObj = new ZoneIdImpl();\n        zoneIdObj.setId(zoneId);\n        zone.setId(zoneIdObj);\n\n        zone.setType(currZoneObject.getString(\"type\"));\n        zone.setName(currZoneObject.getString(\"name\"));\n        zone.setDescription(currZoneObject.getString(\"description\"));\n        zonesList.add(zone);\n      }\n\n      userLocation.setZones(zonesList);\n\n      log.debug(\"finish method 'toIUserLocation' \\t Json: \" + jsonObject);\n\n    } catch (Exception e) {\n      log.error(\"Exception was caught: JSON object- \" + jsonObject, e);\n    }\n    return userLocation;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4189, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 206, "focalAPIEnd": 238, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 244, "followUpCheckExpressionEnd": 282, "followUpCheckBlockStart": 244, "followUpCheckBlockEnd": 956, "use": ["array.getJSONObject(int)", "array.get(String)", "array.getJSONObject(int)", "array.get(String)", "array.getJSONObject(int)", "array.get(String)", "array.getJSONObject(int)"], "useStart": [403, 403, 491, 491, 550, 616, 722], "useEnd": [423, 436, 511, 525, 570, 655, 742], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/milneti/PayBack/tree/master/PayBack/src/com/example/payback/User.java", "rawCode": "  static ArrayList<BaseTransaction> makeTransLendList(JSONObject obj, String uEmail)\n      throws JSONException {\n    ArrayList<BaseTransaction> list = new ArrayList<BaseTransaction>();\n    JSONArray arr = obj.getJSONArray(\"transactions\");\n    for (int i = 0; i < arr.length(); i++) {\n      BaseTransaction trans = new BaseTransaction();\n      trans.setLenderEmail(uEmail);\n      trans.setBorrowerEmail(arr.getJSONObject(i).get(\"Email\").toString());\n      trans.setAmount(Double.parseDouble(arr.getJSONObject(i).get(\"Amount\").toString()));\n      if (arr.getJSONObject(i).has(\"Description\"))\n        trans.setComment(arr.getJSONObject(i).get(\"Description\").toString());\n      else trans.setComment(\"No Comment\");\n      if (arr.getJSONObject(i).getString(\"ResolvedFlag\").equalsIgnoreCase(\"0\")) {\n        trans.setResolved(false);\n      } else trans.setResolved(true);\n      trans.setID(arr.getJSONObject(i).getString(\"TransID\"));\n      list.add(trans);\n    }\n    return list;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4190, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [647], "initializationEnd": [698], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 118, "tryExpressionEnd": 122, "tryBlockStart": 118, "tryBlockEnd": 1835, "catchExpressionStart": 1734, "catchExpressionEnd": 1759, "catchBlockStart": 1734, "catchBlockEnd": 1835, "exceptionHandlingCallStart": [1808], "exceptionHandlingCallEnd": [1828], "configuration": ["jSONObject.getJSONObject(String)"], "configurationStart": [577], "configurationEnd": [603], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 1209, "focalAPIEnd": 1234, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 1244, "followUpCheckExpressionEnd": 1281, "followUpCheckBlockStart": 1244, "followUpCheckBlockEnd": 1338, "use": ["array.getString(int)", "jSONObject.getString(String)", "jSONObject.getString(String)", "jSONObject.getDouble(String)", "jSONObject.getDouble(String)"], "useStart": [1311, 1379, 1438, 1492, 1541], "useEnd": [1326, 1404, 1467, 1518, 1568], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/b0m0x/PSE-Augmented-Reality-for-Pervasive-Computing/tree/master/Vision/src/vision/model/JSONConverter.java", "rawCode": "  /** */\n  public void convert() {\n    this.resetList();\n    String stream = getJSONStream();\n    JSONObject jo;\n\n    try {\n      jo = new JSONObject(stream);\n      for (int sensorid = 0; sensorid < jo.length(); sensorid++) {\n\n        JSONObject lvl1 = jo.getJSONObject(JSONObject.getNames(jo)[sensorid]);\n        sensor = new Sensor();\n\n        for (int type = 0;\n            type\n                < jo.getJSONObject(JSONObject.getNames(jo)[sensorid])\n                    .getJSONObject(\"data\")\n                    .length();\n            type++) {\n\n          JSONObject lvl2 = lvl1.getJSONObject(\"data\");\n          JSONObject temp =\n              jo.getJSONObject(JSONObject.getNames(jo)[sensorid]).getJSONObject(\"data\");\n          Sample sample = new Sample();\n\n          JSONObject lvl3 = lvl2.getJSONObject(JSONObject.getNames(lvl2)[type]);\n\n          // sample.setSensor(sensor);\n\n          sample.setType(JSONObject.getNames(lvl2)[type]);\n          sample.setUnit(lvl3.getString(\"unit\"));\n          sample.setUpdate(Long.parseLong(lvl3.getString(\"updated\")));\n          sample.setValue(Float.parseFloat(lvl3.getString(\"value\")));\n\n          sensor.addToSamples(sample);\n        }\n\n        JSONArray ja = lvl1.getJSONArray(\"tags\");\n        for (int i = 0; i < ja.length(); i++) {\n          sensor.addToTags(ja.getString(i));\n        }\n        sensor.setUpdate(Long.parseLong(lvl1.getString(\"updated\")));\n        sensor.setDescription(lvl1.getString(\"description\"));\n\n        double lat = lvl1.getDouble(\"latitude\");\n        double lon = lvl1.getDouble(\"longitude\");\n        sensor.setPosition(getLocalCoordinates(lat, lon));\n        sensor.setId(JSONObject.getNames(jo)[sensorid]);\n\n        this.addSensorToList();\n      }\n\n    } catch (JSONException e1) {\n      // TODO Auto-generated catch block\n      e1.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4191, "initialization": ["JSONObject jSONObject = new JSONObject(String)", "String name = Iterator<String>.next()"], "initializationStart": [395, 517], "initializationEnd": [415, 528], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 364, "tryExpressionEnd": 368, "tryBlockStart": 364, "tryBlockEnd": 886, "catchExpressionStart": 824, "catchExpressionEnd": 848, "catchBlockStart": 824, "catchBlockEnd": 886, "exceptionHandlingCallStart": [858], "exceptionHandlingCallEnd": [877], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 646, "focalAPIEnd": 667, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 679, "followUpCheckExpressionEnd": 717, "followUpCheckBlockStart": 679, "followUpCheckBlockEnd": 804, "use": ["array.getString(int)"], "useStart": [746], "useEnd": [762], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/EnderWiggin/Haven-and-Hearth-client-modified-by-Ender/tree/master/src/haven/Config.java", "rawCode": "  private static void loadCurrentHighlight() {\n    try {\n      FileInputStream fstream;\n      fstream = new FileInputStream(\"highlight.cfg\");\n      BufferedReader br = new BufferedReader(new InputStreamReader(fstream, \"UTF-8\"));\n      String data = \"\";\n      String strLine;\n      while ((strLine = br.readLine()) != null) {\n        data += strLine;\n      }\n      try {\n        JSONObject cfg = new JSONObject(data);\n        Iterator<String> keys = cfg.keys();\n        while (keys.hasNext()) {\n          String key = keys.next();\n          Set<String> group = new HashSet<String>();\n          hlcgroups.put(key, group);\n          JSONArray arr = cfg.getJSONArray(key);\n          for (int i = 0; i < arr.length(); i++) {\n            String name = arr.getString(i);\n            group.add(name);\n          }\n        }\n\n      } catch (JSONException e) {\n        e.printStackTrace();\n      }\n      br.close();\n      fstream.close();\n    } catch (FileNotFoundException e) {\n      // e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4192, "initialization": ["JSONObject jSONObject = createWPListJson(JsonFile,boolean)"], "initializationStart": [184], "initializationEnd": [216], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 222, "tryExpressionEnd": 226, "tryBlockStart": 222, "tryBlockEnd": 722, "catchExpressionStart": 623, "catchExpressionEnd": 647, "catchBlockStart": 623, "catchBlockEnd": 722, "exceptionHandlingCallStart": [696], "exceptionHandlingCallEnd": [715], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 252, "focalAPIEnd": 277, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.put(JSONObject)", "JsonFile.saveJsonToFile(jSONObject,String,boolean)"], "useStart": [537, 560], "useEnd": [552, 615], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heyongjian/joy_launcher/tree/master/src/com/joy/launcher2/network/handler/WallpaperHandler.java", "rawCode": "  /**\n   * 将一条信息写入jsonfile\n   *\n   * @param wi\n   * @param jsonFile\n   */\n  public static void putJsonToNative(final WallpaperInfo wi, final JsonFile jsonFile) {\n    JSONObject json = createWPListJson(jsonFile, true);\n    try {\n      JSONArray items = json.getJSONArray(\"item\");\n      JSONObject item = new JSONObject();\n      item.put(\"id\", wi.id);\n      item.put(\"size\", wi.size);\n      item.put(\"name\", wi.wallpaperName);\n      item.put(\"icon\", wi.urls[0]);\n      item.put(\"preview\", wi.url);\n      item.put(\"url\", wi.urls[1]);\n      items.put(item);\n      jsonFile.saveJsonToFile(json, \"native_json_item\", true);\n    } catch (JSONException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4193, "initialization": ["JSONObject jSONObject = new JSONObject(String)"], "initializationStart": [329], "initializationEnd": [356], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["cleanupTables()", "new EnvSocialContentException(String,*,*)"], "tryExpressionStart": 253, "tryExpressionEnd": 257, "tryBlockStart": 253, "tryBlockEnd": 1071, "catchExpressionStart": 929, "catchExpressionEnd": 954, "catchBlockStart": 929, "catchBlockEnd": 1071, "exceptionHandlingCallStart": [962, 991], "exceptionHandlingCallEnd": [977, 1064], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 427, "focalAPIEnd": 459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)", "insertSessions(array)"], "useStart": [510, 593, 693, 747], "useEnd": [547, 625, 738, 776], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asorici/envived-client/tree/master/src/com/envived/android/features/program/ProgramDbHelper.java", "rawCode": "  private void insertProgram() throws EnvSocialContentException {\n    // perform initial insertion of the program if and only if the database is created\n    // Log.d(TAG, \"Inserting program\");\n\n    String programJSON = feature.getSerializedData();\n\n    try {\n      // Parse program's JSON\n      JSONObject program = (JSONObject) new JSONObject(programJSON).getJSONObject(\"program\");\n      JSONArray sessionsArray = (JSONArray) program.getJSONArray(\"sessions\");\n      JSONArray presentationsArray = (JSONArray) program.getJSONArray(\"presentations\");\n      JSONArray speakersArray = (JSONArray) program.getJSONArray(\"speakers\");\n      JSONArray presentationSpeakersArray =\n          (JSONArray) program.getJSONArray(\"presentation_speakers\");\n\n      insertSessions(sessionsArray);\n      insertPresentations(presentationsArray);\n      insertSpeakers(speakersArray);\n      insertPresentationSpeakers(presentationSpeakersArray);\n    } catch (JSONException ex) {\n      cleanupTables();\n      throw new EnvSocialContentException(programJSON, EnvSocialResource.FEATURE, ex);\n    }\n\n    dbStatus = DB_POPULATED;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4194, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 638, "guardExpressionEnd": 686, "guardBlockStart": 638, "guardBlockEnd": 1038, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 725, "focalAPIEnd": 777, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 785, "followUpCheckExpressionEnd": 837, "followUpCheckBlockStart": 785, "followUpCheckBlockEnd": 1032, "use": ["array.getJSONObject(int)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONObject(String)", "jSONObject.getJSONArray(String)", "jSONObject.getJSONArray(String)"], "useStart": [863, 1130, 1914, 4056, 4558], "useEnd": [897, 1185, 1962, 4108, 4614], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tooflya/project-birds/tree/master/proj.android/src/com/soomla/store/data/StoreInfo.java", "rawCode": "  /** Private functions * */\n  private static void fromJSONObject(JSONObject jsonObject) throws JSONException {\n    mVirtualItems = new HashMap<String, VirtualItem>();\n    mPurchasableItems = new HashMap<String, PurchasableVirtualItem>();\n    mGoodsCategories = new HashMap<String, VirtualCategory>();\n    mGoodsUpgrades = new HashMap<String, List<UpgradeVG>>();\n\n    mCurrencyPacks = new LinkedList<VirtualCurrencyPack>();\n    mGoods = new LinkedList<VirtualGood>();\n    mCategories = new LinkedList<VirtualCategory>();\n    mCurrencies = new LinkedList<VirtualCurrency>();\n    mNonConsumables = new LinkedList<NonConsumableItem>();\n\n    if (jsonObject.has(JSONConsts.STORE_CURRENCIES)) {\n      JSONArray virtualCurrencies = jsonObject.getJSONArray(JSONConsts.STORE_CURRENCIES);\n      for (int i = 0; i < virtualCurrencies.length(); i++) {\n        JSONObject o = virtualCurrencies.getJSONObject(i);\n        VirtualCurrency c = new VirtualCurrency(o);\n        mCurrencies.add(c);\n\n        mVirtualItems.put(c.getItemId(), c);\n      }\n    }\n\n    if (jsonObject.has(JSONConsts.STORE_CURRENCYPACKS)) {\n      JSONArray currencyPacks = jsonObject.getJSONArray(JSONConsts.STORE_CURRENCYPACKS);\n      for (int i = 0; i < currencyPacks.length(); i++) {\n        JSONObject o = currencyPacks.getJSONObject(i);\n        VirtualCurrencyPack pack = new VirtualCurrencyPack(o);\n        mCurrencyPacks.add(pack);\n\n        mVirtualItems.put(pack.getItemId(), pack);\n\n        PurchaseType purchaseType = pack.getPurchaseType();\n        if (purchaseType instanceof PurchaseWithMarket) {\n          mPurchasableItems.put(\n              ((PurchaseWithMarket) purchaseType).getGoogleMarketItem().getProductId(), pack);\n        }\n      }\n    }\n\n    // The order in which VirtualGoods are created matters!\n    // For example: VGU and VGP depend on other VGs\n    if (jsonObject.has(JSONConsts.STORE_GOODS)) {\n      JSONObject virtualGoods = jsonObject.getJSONObject(JSONConsts.STORE_GOODS);\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_SU)) {\n        JSONArray suGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_SU);\n        for (int i = 0; i < suGoods.length(); i++) {\n          JSONObject o = suGoods.getJSONObject(i);\n          SingleUseVG g = new SingleUseVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_LT)) {\n        JSONArray ltGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_LT);\n        for (int i = 0; i < ltGoods.length(); i++) {\n          JSONObject o = ltGoods.getJSONObject(i);\n          LifetimeVG g = new LifetimeVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_EQ)) {\n        JSONArray eqGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_EQ);\n        for (int i = 0; i < eqGoods.length(); i++) {\n          JSONObject o = eqGoods.getJSONObject(i);\n          EquippableVG g = new EquippableVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_PA)) {\n        JSONArray paGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_PA);\n        for (int i = 0; i < paGoods.length(); i++) {\n          JSONObject o = paGoods.getJSONObject(i);\n          SingleUsePackVG g = new SingleUsePackVG(o);\n          addVG(g);\n        }\n      }\n\n      if (virtualGoods.has(JSONConsts.STORE_GOODS_UP)) {\n        JSONArray upGoods = virtualGoods.getJSONArray(JSONConsts.STORE_GOODS_UP);\n        for (int i = 0; i < upGoods.length(); i++) {\n          JSONObject o = upGoods.getJSONObject(i);\n          UpgradeVG g = new UpgradeVG(o);\n          addVG(g);\n\n          List<UpgradeVG> upgrades = mGoodsUpgrades.get(g.getGoodItemId());\n          if (upgrades == null) {\n            upgrades = new ArrayList<UpgradeVG>();\n            mGoodsUpgrades.put(g.getGoodItemId(), upgrades);\n          }\n          upgrades.add(g);\n        }\n      }\n    }\n\n    // Categories depend on virtual goods. That's why the have to be initialized after!\n    if (jsonObject.has(JSONConsts.STORE_CATEGORIES)) {\n      JSONArray virtualCategories = jsonObject.getJSONArray(JSONConsts.STORE_CATEGORIES);\n      for (int i = 0; i < virtualCategories.length(); i++) {\n        JSONObject o = virtualCategories.getJSONObject(i);\n        VirtualCategory category = new VirtualCategory(o);\n        mCategories.add(category);\n        for (String goodItemId : category.getGoodsItemIds()) {\n          mGoodsCategories.put(goodItemId, category);\n        }\n      }\n    }\n\n    if (jsonObject.has(JSONConsts.STORE_NONCONSUMABLES)) {\n      JSONArray nonConsumables = jsonObject.getJSONArray(JSONConsts.STORE_NONCONSUMABLES);\n      for (int i = 0; i < nonConsumables.length(); i++) {\n        JSONObject o = nonConsumables.getJSONObject(i);\n        NonConsumableItem non = new NonConsumableItem(o);\n        mNonConsumables.add(non);\n\n        mVirtualItems.put(non.getItemId(), non);\n\n        PurchaseType purchaseType = non.getPurchaseType();\n        if (purchaseType instanceof PurchaseWithMarket) {\n          mPurchasableItems.put(\n              ((PurchaseWithMarket) purchaseType).getGoogleMarketItem().getProductId(), non);\n        }\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4195, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject.has(name,)", "guardType": "IF {", "guardExpressionStart": 241, "guardExpressionEnd": 275, "guardBlockStart": 241, "guardBlockEnd": 456, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 302, "focalAPIEnd": 340, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 348, "followUpCheckExpressionEnd": 388, "followUpCheckBlockStart": 348, "followUpCheckBlockEnd": 450, "use": ["array.getString(int)"], "useStart": [422], "useEnd": [440], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/oryx-neffics/tree/master/editor/server/src/org/oryxeditor/server/diagram/DiagramBuilder.java", "rawCode": "  /**\n   * adds all json extension to an diagram\n   *\n   * @param modelJSON\n   * @param current\n   * @throws JSONException\n   */\n  private static void parseSsextensions(JSONObject modelJSON, Diagram current)\n      throws JSONException {\n    if (modelJSON.has(\"ssextensions\")) {\n      JSONArray array = modelJSON.getJSONArray(\"ssextensions\");\n      for (int i = 0; i < array.length(); i++) {\n        current.addSsextension(array.getString(i));\n      }\n    }\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4196, "initialization": ["JSONObject jSONObject = retrieveObjectList(*)"], "initializationStart": [545], "initializationEnd": [585], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 343, "tryExpressionEnd": 347, "tryBlockStart": 343, "tryBlockEnd": 1482, "catchExpressionStart": 1416, "catchExpressionEnd": 1444, "catchBlockStart": 1416, "catchBlockEnd": 1482, "exceptionHandlingCallStart": [1452], "exceptionHandlingCallEnd": [1475], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 617, "focalAPIEnd": 651, "followUpCheck": "j < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 665, "followUpCheckExpressionEnd": 705, "followUpCheckBlockStart": 665, "followUpCheckBlockEnd": 1360, "use": ["array.getJSONObject(int)"], "useStart": [743], "useEnd": [765], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/medcafe/medCafe/tree/master/src/org/mitre/medcafe/model/Event.java", "rawCode": "  public static ArrayList<Event> getEventsFromCache(\n      PatientCache cache, String primary, String[] events, String userName) {\n    ArrayList<Event> eventList = new ArrayList<Event>();\n    String[] listOfEvents = getEventList();\n    String[] objectNames = getPatientCacheObjectList();\n    String primaryRepos = cache.getPrimaryRepos();\n    try {\n\n      for (String event : events) {\n        for (int i = 0; i < listOfEvents.length; i++) {\n          if (event.equals(listOfEvents[i]) && objectNames[i] != null) {\n\n            JSONObject obj = cache.retrieveObjectList(objectNames[i]);\n            JSONArray array = obj.getJSONArray(\"repositoryList\");\n            for (int j = 0; j < array.length(); j++) {\n\n              JSONObject resObj = array.getJSONObject(j);\n              String repository = resObj.getString(\"repository\");\n\n              if (!primary.equals(\"true\") || repository.equals(primaryRepos)) {\n                ArrayList<Event> newList =\n                    getEventObject(\n                        resObj,\n                        userName,\n                        cache.getDatabasePatientId(),\n                        cache.getRepoPatientId(repository),\n                        repository,\n                        event,\n                        getIcons().get(event));\n                eventList.addAll(newList);\n              }\n            }\n            break;\n          }\n        }\n      }\n    } catch (JSONException jsonE) {\n      jsonE.printStackTrace();\n    }\n\n    return eventList;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4197, "initialization": ["JSONObject jSONObject = JSONObject.getJSONObject(String)"], "initializationStart": [185], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 327, "focalAPIEnd": 371, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 428, "followUpCheckExpressionEnd": 468, "followUpCheckBlockStart": 428, "followUpCheckBlockEnd": 534, "use": ["array.getJSONObject(int)"], "useStart": [504], "useEnd": [526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shamansir/vimeoid/tree/master/apk/src/org/vimeoid/dto/advanced/User.java", "rawCode": "  public static User[] collectListFromJson(JSONObject jsonObj) throws JSONException {\n    if (!jsonObj.has(FieldsKeys.MULTIPLE_KEY)) return new User[0];\n    final JSONObject jsonColl = jsonObj.getJSONObject(FieldsKeys.MULTIPLE_KEY);\n    if (!jsonColl.has(FieldsKeys.SINGLE_KEY)) return new User[0];\n    final JSONArray array = jsonColl.getJSONArray(FieldsKeys.SINGLE_KEY);\n    final User[] users = new User[array.length()];\n    for (int i = 0; i < array.length(); i++) {\n      users[i] = extractFromJson(array.getJSONObject(i));\n    }\n    return users;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4198, "initialization": ["JSONObject jSONObject = toJson(*)"], "initializationStart": [261], "initializationEnd": [303], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jSONObject.has(String)"], "configurationStart": [320], "configurationEnd": [363], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 397, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["array.length()", "array.getJSONObject(int)", "array.getJSONObject(int)"], "useStart": [471, 528, 1132], "useEnd": [493, 558, 1162], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iPlantCollaborativeOpenSource/metadactyl/tree/master/src/test/java/org/iplantc/workflow/integration/json/TitoNotificationSetMarshallerTest.java", "rawCode": "  /**\n   * Verifies that the marshaller correctly marshals the fields in the notifications.\n   *\n   * @throws JSONException if a JSON error occurs.\n   */\n  @Test\n  public void shouldMarshalNotifications() throws JSONException {\n    JSONObject notificationSet = marshaller.toJson(createNotificationSet());\n    assertTrue(notificationSet.has(\"wizard_notifications\"));\n\n    JSONArray notifications = notificationSet.getJSONArray(\"wizard_notifications\");\n    assertEquals(2, notifications.length());\n\n    JSONObject notification1 = notifications.getJSONObject(0);\n    assertEquals(\"firstnotification_sender\", notification1.getString(\"sender\"));\n    assertEquals(\"updateData\", notification1.getString(\"type\"));\n    assertTrue(notification1.has(\"receivers\"));\n\n    JSONArray receivers1 = notification1.getJSONArray(\"receivers\");\n    assertEquals(3, receivers1.length());\n    assertEquals(\"firstnotification_firstreceiver\", receivers1.getString(0));\n    assertEquals(\"firstnotification_secondreceiver\", receivers1.getString(1));\n    assertEquals(\"firstnotification_thirdreceiver\", receivers1.getString(2));\n\n    JSONObject notification2 = notifications.getJSONObject(1);\n    assertEquals(\"secondnotification_sender\", notification2.getString(\"sender\"));\n    assertEquals(\"doSomething\", notification2.getString(\"type\"));\n    assertTrue(notification2.has(\"receivers\"));\n\n    JSONArray receivers2 = notification2.getJSONArray(\"receivers\");\n    assertEquals(1, receivers2.length());\n    assertEquals(\"secondnotification_firstreceiver\", receivers2.getString(0));\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4199, "initialization": ["JSONObject jSONObject = new JSONObject(*)"], "initializationStart": [360], "initializationEnd": [385], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 326, "tryExpressionEnd": 330, "tryBlockStart": 326, "tryBlockEnd": 853, "catchExpressionStart": 795, "catchExpressionEnd": 819, "catchBlockStart": 795, "catchBlockEnd": 853, "exceptionHandlingCallStart": [827], "exceptionHandlingCallEnd": [846], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jSONObject!=null", "guardType": "IF {", "guardExpressionStart": 393, "guardExpressionEnd": 414, "guardBlockStart": 393, "guardBlockEnd": 788, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 452, "focalAPIEnd": 487, "followUpCheck": "array != null && array.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 497, "followUpCheckExpressionEnd": 555, "followUpCheckBlockStart": 497, "followUpCheckBlockEnd": 780, "use": ["array.length()", "array.getJSONObject(String)"], "useStart": [527, 594], "useEnd": [550, 651], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WISE-Community/WISE-VLE/tree/master/src/main/java/vle/domain/work/StepWork.java", "rawCode": "  /**\n   * Returns the timestamp of the latest NodeState in this StepWork. This is the same as the\n   * NodeStateId. If no NodeState exists in this StepWork, return 0.\n   *\n   * @return 0 or the timestamp of the latest NodeState in this StepWork.\n   */\n  public long getLastNodeStateTimestamp() {\n    long timestamp = 0;\n\n    try {\n      JSONObject dataJSON = new JSONObject(this.data);\n      if (dataJSON != null) {\n        JSONArray nodeStateArray = dataJSON.getJSONArray(\"nodeStates\");\n        if (nodeStateArray != null && nodeStateArray.length() > 0) {\n          JSONObject nodeStateObj = nodeStateArray.getJSONObject(nodeStateArray.length() - 1);\n          if (nodeStateObj.has(\"timestamp\")) {\n            timestamp = nodeStateObj.getLong(\"timestamp\");\n          }\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n\n    return timestamp;\n  }\n"}, {"dataset": "getJSONArray", "exampleID": 4200, "initialization": ["JSONObject jSONObject = APIProxy.getSchedule(String)"], "initializationStart": [126], "initializationEnd": [156], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()", "new AMException(*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 546, "catchExpressionStart": 455, "catchExpressionEnd": 479, "catchBlockStart": 455, "catchBlockEnd": 546, "exceptionHandlingCallStart": [487, 521], "exceptionHandlingCallEnd": [506, 539], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "array = jSONObject.getJSONArray(name)", "focalAPIStart": 264, "focalAPIEnd": 295, "followUpCheck": "i < array.length()", "checkType": "LOOP", "followUpCheckExpressionStart": 304, "followUpCheckExpressionEnd": 345, "followUpCheckBlockStart": 304, "followUpCheckBlockEnd": 426, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cloudspokes/mobile_campus/tree/master/aau/android/AAUCampus_SFSDK1.3/src/com/appirio/mobile/aau/nativemap/MapManager.java", "rawCode": "  public ArrayList<RouteStopSchedule> getSchedule(String stopName) throws AMException {\n    try {\n      JSONObject schedule = mapProxy.getSchedule(stopName);\n      ArrayList<RouteStopSchedule> result = new ArrayList<RouteStopSchedule>();\n\n      JSONArray routes = schedule.getJSONArray(\"routes\");\n\n      for (int i = 0; i < routes.length(); i++) {\n        result.add(new RouteStopSchedule((JSONObject) routes.get(i)));\n      }\n\n      return result;\n    } catch (JSONException e) {\n      e.printStackTrace();\n\n      throw new AMException(e);\n    }\n  }\n"}]