[{"dataset": "encode", "exampleID": 9801, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(String)"], "tryExpressionStart": 392, "tryExpressionEnd": 396, "tryBlockStart": 392, "tryBlockEnd": 548, "catchExpressionStart": 455, "catchExpressionEnd": 495, "catchBlockStart": 455, "catchBlockEnd": 548, "exceptionHandlingCallStart": [509], "exceptionHandlingCallEnd": [541], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 411, "focalAPIEnd": 447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cjdelisle/xwiki-newstore/tree/master/xwiki-platform-store-filesystem-attachments/src/main/java/org/xwiki/store/attachments/util/internal/GenericFileUtils.java", "rawCode": "  /**\n   * Get a URL encoded version of the string. same as URLEncoder.encode(toEncode, \"UTF-8\") but the\n   * checked exception is caught since UTF-8 is mandatory for all Java virtual machines.\n   *\n   * @param toEncode the string to URL encode.\n   * @return a URL encoded version of toEncode.\n   * @see #getURLDecoded(String)\n   */\n  static String getURLEncoded(final String toEncode) {\n    try {\n      return URLEncoder.encode(toEncode, CHARSET);\n    } catch (UnsupportedEncodingException ex) {\n      throw new RuntimeException(NO_CHARSET);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9802, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new IllegalArgumentException(*)"], "tryExpressionStart": 82, "tryExpressionEnd": 86, "tryBlockStart": 82, "tryBlockEnd": 298, "catchExpressionStart": 195, "catchExpressionEnd": 240, "catchBlockStart": 195, "catchBlockEnd": 298, "exceptionHandlingCallStart": [254], "exceptionHandlingCallEnd": [291], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 101, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biafra23/AmDroid/tree/master/httpclientandroidlib/src/ch/boye/httpclientandroidlib/client/utils/URLEncodedUtils.java", "rawCode": "  private static String encode(final String content, final String encoding) {\n    try {\n      return URLEncoder.encode(content, encoding != null ? encoding : HTTP.DEFAULT_CONTENT_CHARSET);\n    } catch (UnsupportedEncodingException problem) {\n      throw new IllegalArgumentException(problem);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9803, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 848, "focalAPIEnd": 880, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)"], "useStart": [822], "useEnd": [881], "hasFinally": 1, "cleanUpCall": ["HttpEntity.consumeContent()"], "finallyExpressionStart": 2470, "finallyExpressionEnd": 2478, "finallyBlockStart": 2470, "finallyBlockEnd": 2560, "cleanUpCallStart": [2519], "cleanUpCallEnd": [2545], "url": "https://github.com/voxeolabs/moho/tree/master/moho-impl/src/main/java/com/voxeo/moho/imified/ImifiedEndpointImpl.java", "rawCode": "  @Override\n  public void sendText(final TextableEndpoint from, final String text, final String type)\n      throws IOException {\n    ImifiedEndpointImpl bot = null;\n    if (from instanceof ImifiedEndpointImpl) {\n      bot = (ImifiedEndpointImpl) from;\n    } else {\n      throw new IllegalArgumentException(\"The from endpoint is not an ImifiedEndpoint instance.\");\n    }\n\n    final HttpPost post = new HttpPost(_driver.getIMifiedURL());\n\n    final String up = bot.getImifiedUserName() + \":\" + bot.getImifiedPasswd();\n    final String value = \"Basic \" + new String(Base64.encodeBase64(up.getBytes(\"UTF-8\")), \"UTF-8\");\n    post.addHeader(\"Authorization\", value);\n\n    final StringBuilder sb = new StringBuilder();\n    sb.append(\"botkey=\").append(bot.getKey());\n    sb.append(\"&apimethod=send&userkey=\").append(getKey());\n    sb.append(\"&msg=\").append(URLEncoder.encode(text, \"UTF-8\"));\n\n    final HttpEntity en = new StringEntity(sb.toString());\n    post.setEntity(en);\n    post.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    post.setHeader(\"Connection\", \"keep-alive\");\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\n          \"Sending message from \"\n              + bot.getAddress()\n              + \" to \"\n              + getAddress()\n              + \", content:\"\n              + sb.toString());\n    }\n    HttpEntity resEntity = null;\n    try {\n      final HttpResponse response = _driver.execute(post);\n      resEntity = response.getEntity();\n      final BufferedReader reader =\n          new BufferedReader(new InputStreamReader(resEntity.getContent()));\n\n      if (resEntity\n          .getContentType()\n          .getValue()\n          .trim()\n          .toLowerCase()\n          .startsWith(\"application/xml\")) {\n        String firstLine = null;\n        do {\n          firstLine = reader.readLine();\n        } while (firstLine.trim().length() == 0);\n\n        if (!(firstLine.indexOf(\"stat=\\\"ok\\\"\") > 0)) {\n          final StringBuilder output = new StringBuilder();\n          output.append(firstLine).append(\"\\r\\n\");\n          String line = null;\n          while ((line = reader.readLine()) != null) {\n            output.append(line).append(\"\\r\\n\");\n          }\n          throw new IOException(\"Imified returned error:\" + output.toString());\n        }\n      } else {\n        throw new IOException(\"Imified returned error message:\" + reader.readLine());\n      }\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Message sent.\");\n      }\n    } finally {\n      if (resEntity != null) {\n        resEntity.consumeContent();\n      }\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9804, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 801, "focalAPIEnd": 841, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(*,String)", "urlEncoder.encode(*,String)"], "useStart": [786, 893, 1214], "useEnd": [842, 949, 1262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/unsupported/sfs/src/main/java/org/geotools/data/sfs/SFSFilterVisitor.java", "rawCode": "  /**\n   * Finish up building the URL, and return it as a string.\n   *\n   * @param builder StringBuilder that contains the base URL from which to start adding URL\n   *     properties.\n   * @param hasProperties Does the given URL already contains other properties?\n   * @return Returns the URL with the newly added properties for filtering.\n   */\n  public String finish(StringBuilder builder, boolean hasProperties)\n      throws UnsupportedEncodingException {\n\n    this.hasProperties = hasProperties;\n\n    List<String> props = new ArrayList<String>(properties.keySet());\n    if (sortProperties) {\n      Collections.sort(queryable);\n      Collections.sort(props);\n    }\n\n    // Add all properties to the URL:\n    for (String property : props) {\n      builder.append(getGlueChar());\n      builder.append(URLEncoder.encode(property, strEncoding));\n\n      builder.append(\"=\");\n      builder.append(URLEncoder.encode(properties.get(property), strEncoding));\n    }\n\n    // Add queryable properties to the URL if needed:\n    if (queryable != null && queryable.size() > 0) {\n      builder.append(getGlueChar());\n      builder.append(\"queryable=\");\n      for (int i = 0; i < queryable.size(); i++) {\n\n        builder.append(URLEncoder.encode(queryable.get(i), strEncoding));\n        if (i < queryable.size() - 1) {\n          builder.append(\",\");\n        }\n      }\n    }\n\n    // Cleanup:\n    properties.clear();\n    queryable.clear();\n    return builder.toString();\n  }\n"}, {"dataset": "encode", "exampleID": 9805, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 216, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hex705/tiles/tree/master/eclipse/labels/src/labelsANDgraph.java", "rawCode": "  public void sendToServer(String message)\n      throws\n          Exception { // from\n                      // http://docs.oracle.com/javase/tutorial/networking/urls/readingWriting.html\n\n    String stringToReverse = URLEncoder.encode(message, \"UTF-8\");\n\n    URL url = new URL(\"http://www.deadpixel.ca/tiles/template.cgi\");\n    URLConnection connection = url.openConnection();\n    connection.setDoOutput(true);\n\n    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n    out.write(\"message=\" + stringToReverse);\n    out.close();\n\n    BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n    String decodedString;\n    while ((decodedString = in.readLine()) != null) {\n      System.out.println(decodedString);\n    }\n    in.close();\n  }\n"}, {"dataset": "encode", "exampleID": 9806, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["fatal(String,*)"], "tryExpressionStart": 82, "tryExpressionEnd": 86, "tryBlockStart": 82, "tryBlockEnd": 247, "catchExpressionStart": 148, "catchExpressionEnd": 187, "catchBlockStart": 148, "catchBlockEnd": 247, "exceptionHandlingCallStart": [197], "exceptionHandlingCallEnd": [238], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "s!=null", "guardType": "IF {", "guardExpressionStart": 54, "guardExpressionEnd": 73, "guardBlockStart": 54, "guardBlockEnd": 253, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 105, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robertomarin/repoai/tree/master/ligaai/src/main/java/ai/liga/ligaai/util/EncoderUtils.java", "rawCode": "  public static String encodeUrl(String string) {\n    if (string != null) {\n      try {\n        string = URLEncoder.encode(string, ENCODE);\n      } catch (UnsupportedEncodingException e) {\n        logger.fatal(\"Encode não suportado?!\", e);\n      }\n    }\n    return string;\n  }\n"}, {"dataset": "encode", "exampleID": 9807, "initialization": ["String s = DownloadResource.getDownloadName()"], "initializationStart": [781], "initializationEnd": [808], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "s!=null", "guardType": "IF {", "guardExpressionStart": 777, "guardExpressionEnd": 817, "guardBlockStart": 777, "guardBlockEnd": 1302, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 994, "focalAPIEnd": 1049, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/exoplatform/aio-portal/tree/master/webui/eXo/src/main/java/org/exoplatform/web/command/handler/DownloadHandler.java", "rawCode": "  @SuppressWarnings(\"unused\")\n  public void execute(WebAppController controller, HttpServletRequest req, HttpServletResponse res)\n      throws Exception {\n    res.setHeader(\"Cache-Control\", \"private max-age=600, s-maxage=120\");\n    ExoContainer container = ExoContainerContext.getCurrentContainer();\n    DownloadService dservice =\n        (DownloadService) container.getComponentInstanceOfType(DownloadService.class);\n    DownloadResource dresource = dservice.getDownloadResource(resourceId);\n    if (dresource == null) {\n      res.setContentType(\"text/plain\");\n      res.getWriter()\n          .write(\n              \"NO DOWNDLOAD RESOURCE CONTENT OR YOU DO NOT HAVE THE RIGHT TO ACCESS THE CONTENT\");\n      return;\n    }\n    String userAgent = req.getHeader(\"User-Agent\");\n    if (dresource.getDownloadName() != null) {\n      if (userAgent != null && userAgent.contains(\"MSIE\")) {\n        res.setHeader(\n            \"Content-Disposition\",\n            \"attachment;filename=\\\"\"\n                + URLEncoder.encode(dresource.getDownloadName(), \"UTF-8\")\n                + \"\\\"\");\n      } else {\n        res.setHeader(\n            \"Content-Disposition\",\n            \"attachment; filename*=utf-8''\"\n                + URLEncoder.encode(dresource.getDownloadName(), \"UTF-8\")\n                + \"\");\n      }\n    }\n    res.setContentType(dresource.getResourceMimeType());\n    InputStream is = dresource.getInputStream();\n    byte[] buf = new byte[is.available()];\n    is.read(buf);\n    res.setContentType(dresource.getResourceMimeType());\n    res.getOutputStream().write(buf);\n    is.close();\n  }\n"}, {"dataset": "encode", "exampleID": 9808, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 67, "focalAPIEnd": 98, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SharkHunter/Channel/tree/master/src/com/sharkhunter/channel/ChannelUtil.java", "rawCode": "  public static String escape(String str) {\n    try {\n      return URLEncoder.encode(str, \"UTF-8\");\n    } catch (Exception e) {\n      // Channels.debug(\"esc err \"+e);\n    }\n    return str;\n  }\n"}, {"dataset": "encode", "exampleID": 9809, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new AuthenticationException(*)"], "tryExpressionStart": 81, "tryExpressionEnd": 85, "tryBlockStart": 81, "tryBlockEnd": 1118, "catchExpressionStart": 1041, "catchExpressionEnd": 1065, "catchBlockStart": 1041, "catchBlockEnd": 1118, "exceptionHandlingCallStart": [1079], "exceptionHandlingCallEnd": [1111], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 510, "focalAPIEnd": 543, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["PrintWriter.append(str)"], "useStart": [487], "useEnd": [544], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/morrisford/OPenWonderland-Protocol/tree/master/core/src/classes/org/jdesktop/wonderland/common/login/AuthenticationServiceImpl.java", "rawCode": "  public boolean isTokenValid(String token) throws AuthenticationException {\n    try {\n      URL u = new URL(getAuthenticationURL() + \"/isTokenValid\");\n      HttpURLConnection uc = (HttpURLConnection) u.openConnection();\n      uc.setRequestMethod(\"POST\");\n      uc.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n      uc.setDoOutput(true);\n      uc.setDoInput(true);\n\n      PrintWriter pr = new PrintWriter(new OutputStreamWriter(uc.getOutputStream()));\n      pr.append(\"tokenid=\" + URLEncoder.encode(token, \"UTF-8\"));\n      pr.close();\n\n      logger.fine(\n          \"IsTokenValid response: \" + uc.getResponseCode() + \": \" + uc.getResponseMessage());\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n      String line;\n      while ((line = br.readLine()) != null) {\n        logger.finest(\"IsTokenValid response line: \" + line);\n\n        if (line.startsWith(\"boolean=\")) {\n          return Boolean.parseBoolean(line.substring(\"boolean=\".length()));\n        }\n      }\n    } catch (IOException ioe) {\n      throw new AuthenticationException(ioe);\n    }\n\n    throw new AuthenticationException(\"No validation in response\");\n  }\n"}, {"dataset": "encode", "exampleID": 9810, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 294, "focalAPIEnd": 349, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URL(String,String,int,str)"], "useStart": [146], "useEnd": [350], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.ua/tree/master/org.eclipse.ua.tests/help/org/eclipse/ua/tests/help/webapp/service/AdvancedSearchServiceTest.java", "rawCode": "  @Test\n  public void testRemoteSearchXMLSchemaExactMatchFound() throws Exception {\n    int port = WebappManager.getPort();\n    URL url =\n        new URL(\n            \"http\",\n            \"localhost\",\n            port,\n            \"/help/vs/service/advancedsearch?searchWord=\"\n                + URLEncoder.encode(\"\\\"jehcyqpfjs vkrhjewiwh\\\"\", \"UTF-8\"));\n    URL schemaUrl = new URL(\"http\", \"localhost\", port, \"/help/test/schema/xml/advancedsearch.xsd\");\n    String schema = schemaUrl.toString();\n    String uri = url.toString();\n    String result = SchemaValidator.testXMLSchema(uri, schema);\n\n    assertEquals(\"URL: \\\"\" + uri + \"\\\" is \", \"valid\", result);\n  }\n"}, {"dataset": "encode", "exampleID": 9811, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,String,*)"], "tryExpressionStart": 308, "tryExpressionEnd": 312, "tryBlockStart": 308, "tryBlockEnd": 588, "catchExpressionStart": 381, "catchExpressionEnd": 420, "catchBlockStart": 381, "catchBlockEnd": 588, "exceptionHandlingCallStart": [506, 489, 489], "exceptionHandlingCallEnd": [526, 527, 581], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 344, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/watermint/SourceColon/tree/master/src/main/java/org/watermint/sourcecolon/org/opensolaris/opengrok/web/Util.java", "rawCode": "  /**\n   * wrapper arround UTF-8 URL encoding of a string\n   *\n   * @param q query to be encoded. If {@code null}, an empty string will be used instead.\n   * @return null if fail, otherwise the encoded string\n   * @see URLEncoder#encode(String, String)\n   */\n  public static String URIEncode(String q) {\n    try {\n      return q == null ? \"\" : URLEncoder.encode(q, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      // Should not happen. UTF-8 must be supported by JVMs.\n      Logger.getLogger(Util.class.getName()).log(Level.WARNING, \"Failed to URL-encode UTF-8: \", e);\n    }\n    return null;\n  }\n"}, {"dataset": "encode", "exampleID": 9812, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 954, "focalAPIEnd": 1001, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)"], "useStart": [919], "useEnd": [1002], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue/tree/master/src/java/org/infoglue/cms/applications/common/actions/SubscriptionsAction.java", "rawCode": "  public String doUpdateGlobalSubscription() throws Exception {\n    SubscriptionVO subscriptionVO = subscriptionsController.getSubscriptionVOWithId(subscriptionId);\n\n    subscriptionVO.setIsGlobal(true);\n    subscriptionVO.setInterceptionPointId(interceptionPointId);\n    subscriptionVO.setName(name);\n\n    List<SubscriptionFilterVO> subscriptionFilterVOList = new ArrayList<SubscriptionFilterVO>();\n\n    int i = 0;\n    String filterType = this.getRequest().getParameter(\"filterType_\" + i);\n    logger.info(\"filterType[\" + i + \"]:\" + filterType);\n    while (filterType != null && !filterType.equals(\"\") && filterType != \"-1\") {\n      String[] filterConditions = this.getRequest().getParameterValues(\"filterCondition_\" + i);\n      StringBuffer filterConditionStringBuffer = new StringBuffer();\n      for (int j = 0; j < filterConditions.length; j++) {\n        if (j > 0) filterConditionStringBuffer.append(\",\");\n        filterConditionStringBuffer.append(URLEncoder.encode(filterConditions[j], \"utf-8\"));\n      }\n\n      String andParagraph = this.getRequest().getParameter(\"andParagraph_\" + i);\n      if (andParagraph == null || andParagraph.equals(\"\")) andParagraph = \"true\";\n\n      SubscriptionFilterVO subscriptionFilterVO = new SubscriptionFilterVO();\n      subscriptionFilterVO.setFilterType(filterType);\n      subscriptionFilterVO.setFilterCondition(filterConditionStringBuffer.toString());\n      subscriptionFilterVO.setIsAndCondition(new Boolean(andParagraph));\n      subscriptionFilterVOList.add(subscriptionFilterVO);\n\n      i++;\n      filterType = this.getRequest().getParameter(\"filterType_\" + i);\n      logger.info(\"filterType[\" + i + \"]:\" + filterType);\n    }\n\n    subscriptionsController.update(subscriptionVO, subscriptionFilterVOList);\n\n    return \"successGlobalSubscriptions\";\n  }\n"}, {"dataset": "encode", "exampleID": 9813, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(UrlUtils.isUrl(s,))", "guardType": "IF {", "guardExpressionStart": 80, "guardExpressionEnd": 106, "guardBlockStart": 80, "guardBlockEnd": 168, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 180, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openshift/openshift-java-client/tree/master/src/main/java/com/openshift/internal/client/httpclient/request/FormUrlEncodedMediaType.java", "rawCode": "  private String encode(String value) throws UnsupportedEncodingException {\n    if (UrlUtils.isUrl(value)) {\n      // don't encode url payload\n      return value;\n    }\n    return URLEncoder.encode(value, UTF8);\n  }\n"}, {"dataset": "encode", "exampleID": 9814, "initialization": ["String s = Individual.getURI()", "String s = Individual.getURI()"], "initializationStart": [110, 190], "initializationEnd": [122, 202], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["Individual.getName()"], "tryExpressionStart": 79, "tryExpressionEnd": 83, "tryBlockStart": 79, "tryBlockEnd": 495, "catchExpressionStart": 421, "catchExpressionEnd": 460, "catchBlockStart": 421, "catchBlockEnd": 495, "exceptionHandlingCallStart": [475], "exceptionHandlingCallEnd": [488], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 257, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vivo-project/Vitro/tree/master/webapp/src/edu/cornell/mannlib/vitro/webapp/controller/edit/listing/ListingControllerWebUtils.java", "rawCode": "  public static synchronized String formatIndividualLink(Individual ind) {\n    try {\n      System.out.println(ind.getURI());\n      String nameStr = (ind.getName() != null) ? ind.getName() : ind.getURI();\n      return \"<a href=\\\"entityEdit?uri=\"\n          + URLEncoder.encode(ind.getURI(), \"UTF-8\")\n          + \"\\\">\"\n          + nameStr\n          + \"</a>\";\n    } catch (NullPointerException npe) {\n      return \"?\";\n    } catch (UnsupportedEncodingException e) {\n      return ind.getName();\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9815, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 210, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdwyah/orig-myhippocampus/tree/master/src/test/java/com/aavu/server/service/impl/SubjectServiceImplTest.java", "rawCode": "  public void testFoo()\n      throws URISyntaxException, MalformedURLException, UnsupportedEncodingException {\n    String s = \"http://www.google.com/\";\n    String s2 = \"something with spaces\";\n\n    String ss = URLEncoder.encode(s2, \"UTF-8\");\n\n    URL url = new URL(s + ss);\n\n    assertFalse(url.toString().contains(\" \"));\n  }\n"}, {"dataset": "encode", "exampleID": 9816, "initialization": ["String s = capitalize(String,String)"], "initializationStart": [841], "initializationEnd": [869], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": [], "tryExpressionStart": 104, "tryExpressionEnd": 108, "tryBlockStart": 104, "tryBlockEnd": 2042, "catchExpressionStart": 1979, "catchExpressionEnd": 2001, "catchBlockStart": 1979, "catchBlockEnd": 2042, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 934, "focalAPIEnd": 968, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(String,String)"], "useStart": [1011], "useEnd": [1044], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tulskiy/musique/tree/master/musique-core/src/main/java/com/tulskiy/musique/gui/LyricsPanel.java", "rawCode": "    private void searchLyrics(String artist, String title, StringBuilder sb) throws IOException {\n      try {\n        // String search = \"http://lyrics.wikia.com/Special:Search?search=\";\n        // search += URLEncoder.encode(artist, \"utf-8\");\n        // search += \"+\";\n        // search += URLEncoder.encode(title, \"utf-8\");\n        //\n        // URL searchURL = new URL(search);\n        // Scanner scan = new Scanner(searchURL.openStream());\n        // StringBuilder content = new StringBuilder();\n        // while (scan.hasNextLine())\n        // content.append(scan.nextLine());\n        //\n        // Matcher matcher =\n        // Pattern.compile(\"http://lyrics.wikia.com/wiki/[^\\\"]*\").matcher(content);\n        // if (!matcher.find()) {\n        // return;\n        // }\n        String search = \"http://lyrics.wikia.com/\";\n        artist = Util.capitalize(artist, \"_\");\n        title = Util.capitalize(title, \"_\");\n        search += URLEncoder.encode(artist, \"utf-8\");\n        search += \":\";\n        search += URLEncoder.encode(title, \"utf-8\");\n\n        URL url = new URL(search);\n        InputStream is = url.openStream();\n        Scanner fi = new Scanner(is);\n        while (fi.hasNextLine()) {\n          String s = fi.nextLine();\n          if (s.startsWith(\"<div class='lyricbox'\")) {\n            int index = s.lastIndexOf(\"</div>\");\n            if (index > 0 && s.length() > 6) s = s.substring(index);\n            s = s.replaceAll(\"<br />\", \"\\n\");\n            s = s.replaceAll(\"(<!--)|(<.*?>)\", \"\");\n            Matcher m = Pattern.compile(\"&#(\\\\d+);\").matcher(s);\n            m.reset();\n            StringBuffer buffer = new StringBuffer();\n            while (m.find()) {\n              String group = m.group(1);\n              char ch = (char) Integer.valueOf(group).shortValue();\n              m.appendReplacement(buffer, String.valueOf(ch));\n            }\n            m.appendTail(buffer);\n            sb.append(buffer);\n          }\n        }\n        fi.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n      }\n    }\n"}, {"dataset": "encode", "exampleID": 9817, "initialization": ["String s = HttpServletRequest.getParameter(String)"], "initializationStart": [793], "initializationEnd": [821], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ServletException(*)"], "tryExpressionStart": 1109, "tryExpressionEnd": 1113, "tryBlockStart": 1109, "tryBlockEnd": 1289, "catchExpressionStart": 2375, "catchExpressionEnd": 2395, "catchBlockStart": 2375, "catchBlockEnd": 2439, "exceptionHandlingCallStart": [2409], "exceptionHandlingCallEnd": [2432], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1388, "focalAPIEnd": 1444, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.replaceAll(String,String)"], "useStart": [1478], "useEnd": [1511], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenNTF/SocialSDK/tree/master/domino/com.ibm.xsp.sbtsdk/src/main/java/com/ibm/xsp/extlib/sbt/files/type/DropboxFiles.java", "rawCode": "  @Override\n  public void serviceProxy(HttpServletRequest request, HttpServletResponse servletResponse)\n      throws ServletException, IOException {\n    // TODO make use of findUrl functionality here instead of cloning the EndpointBean\n    try {\n      String endpointName = request.getParameter(PARAM_ENDPOINT_NAME);\n      if (StringUtil.isEmpty(endpointName)) {\n        endpointName = TYPE;\n      }\n      Endpoint bean = EndpointFactory.getEndpoint(endpointName);\n\n      if (bean == null) {\n        throw new ServletException(\"AuthorizationBean not found in application scope\");\n      }\n\n      // TODO - padraic review with phil what clone is about\n      AbstractEndpoint clonedBean = (AbstractEndpoint) bean;\n      clonedBean.setUrl(\"https://api-content.dropbox.com/\");\n\n      String path = request.getParameter(\"path\");\n\n      // DropboxFiles Service - https://api-content.dropbox.com/<version>/files/dropbox/<path>\n      DropboxService svc = new DropboxService(endpointName);\n      String href = buildHref(path, bean);\n      HandlerInputStream handler = new HandlerInputStream();\n      Object file;\n      try {\n        file = svc.get(href, handler).getData();\n      } catch (ClientServicesException e) {\n        throw new FacesExceptionEx(e, \"Failed to execute proxy request\");\n      }\n\n      servletResponse.setContentType(request.getParameter(\"mimeType\"));\n\n      String nameUTF8 = URLEncoder.encode(request.getParameter(\"path\"), \"utf-8\"); // $NON-NLS-1$\n      nameUTF8 = nameUTF8.replaceAll(\"\\\\+\", \"%20\"); // $NON-NLS-1$ //$NON-NLS-2$\n\n      // PEDS954UQU\n      String userAgent = request.getHeader(\"User-Agent\"); // $NON-NLS-1$\n      if (StringUtil.isNotEmpty(userAgent) && userAgent.contains(\"Firefox\")) // $NON-NLS-1$\n        // use the format of value of non-acsii charset: filename*=\"utf8''nameUTF8\"\n        servletResponse.setHeader(\n            \"Content-Disposition\",\n            \"attachment; filename*=\\\"utf8\\'\\'\"\n                + nameUTF8\n                + '\"'); // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$\n      else\n        servletResponse.setHeader(\n            \"Content-Disposition\",\n            \"attachment; filename=\" + nameUTF8 + \"\"); // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$\n\n      OutputStream out = servletResponse.getOutputStream();\n      try {\n        StreamUtil.copyStream((InputStream) file, out);\n      } finally {\n        out.close();\n      }\n    } catch (Exception e) {\n      throw new ServletException(e);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9818, "initialization": ["String s = encodeBytes(byte[],*)"], "initializationStart": [398], "initializationEnd": [452], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 488, "focalAPIEnd": 538, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["SamlRedirectMessage.setSignature(str)"], "useStart": [545], "useEnd": [604], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seam/security/tree/master/external/src/main/java/org/jboss/seam/security/external/saml/SamlSignatureUtilForRedirectBinding.java", "rawCode": "  public void sign(SamlRedirectMessage urlEncodedRedirectMessage, PrivateKey signingKey)\n      throws IOException, GeneralSecurityException {\n    urlEncodedRedirectMessage.setSignatureAlgorithm(\n        getXMLSignatureAlgorithmURI(signingKey.getAlgorithm()));\n\n    byte[] signature = computeSignature(urlEncodedRedirectMessage.createQueryString(), signingKey);\n\n    String base64encodedSignature = Base64.encodeBytes(signature, Base64.DONT_BREAK_LINES);\n\n    String urlEncodedSignature = URLEncoder.encode(base64encodedSignature, \"UTF-8\");\n\n    urlEncodedRedirectMessage.setSignature(urlEncodedSignature);\n  }\n"}, {"dataset": "encode", "exampleID": 9819, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 836, "focalAPIEnd": 885, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iolsen/harmonium/tree/master/org/dazeend/harmonium/screens/NowPlayingScreen.java", "rawCode": "  @Override\n  public boolean handleEnter(Object arg, boolean isReturn) {\n    boolean status = super.handleEnter(arg, isReturn);\n\n    // Set the background when entering the screen\n\n    // constants used for screen layout\n    double screenHeight = this.app.getHeight();\n    double screenWidth = this.app.getWidth();\n    double aspectRatio = screenWidth / screenHeight;\n\n    // Display the background image\n    if (this.app.isInSimulator()) {\n      // We are in the simulator, so set a PNG background.\n\n      // Change the background based on the new aspect ratio.\n      if ((aspectRatio > 1.7) && (aspectRatio < 1.8)) {\n        // The current aspect ratio is approximately 16:9.\n        // Use the high definition background meant for 720p.\n        String url = this.getContext().getBaseURI().toString();\n\n        try {\n          url += URLEncoder.encode(\"now_playing_720.png\", \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n        }\n\n        this.app.getRoot().setResource(this.createStream(url, \"image/png\", true));\n      } else {\n        // Default background is standard definition 640 x 480 (4:3)\n        this.app.getRoot().setResource(\"now_playing_sd.png\");\n      }\n    } else {\n      // We are running on a real TiVo, so use an MPEG background to conserve memory.\n\n      // Change the background based on the new aspect ratio.\n      if ((aspectRatio > 1.7) && (aspectRatio < 1.8)) {\n        // The current aspect ratio is approximately 16:9.\n        // Use the high definition background meant for 720p.\n        this.app.getRoot().setResource(\"now_playing_720.mpg\");\n      } else {\n        // Default background is standard definition 640 x 480 (4:3)\n        this.app.getRoot().setResource(\"now_playing_sd.mpg\");\n      }\n    }\n\n    return status;\n  }\n"}, {"dataset": "encode", "exampleID": 9820, "initialization": ["String s = getAsString(*,*,Object)"], "initializationStart": [1368], "initializationEnd": [1412], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1432, "focalAPIEnd": 1470, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/primefaces-extensions/core/tree/master/src/main/java/org/primefaces/extensions/util/RequestParameterBuilder.java", "rawCode": "  /**\n   * Convertes give value to JSON and encodes the converted value with a proper encoding. Data type\n   * is sometimes required, especially for Java generic types, because type information is erased at\n   * runtime and the conversion to JSON will not work properly.\n   *\n   * @param value value to be converted and encoded\n   * @param type data type of the value object. Any primitive type, array, non generic or generic\n   *     type is supported. Data type is sometimes required to convert a value to a JSON\n   *     representation. All data types should be fully qualified. Examples: \"boolean\" \"int\"\n   *     \"long[]\" \"java.lang.String\" \"java.util.Date\" \"java.util.Collection<java.lang.Integer>\"\n   *     \"java.util.Map<java.lang.String, com.durr.FooPair<java.lang.Integer, java.util.Date>>\"\n   *     \"com.durr.FooNonGenericClass\" \"com.durr.FooGenericClass<java.lang.String,\n   *     java.lang.Integer>\" \"com.durr.FooGenericClass<int[],\n   *     com.durr.FooGenericClass<com.durr.FooNonGenericClass, java.lang.Boolean>>\".\n   * @return String converted and encoded value\n   * @throws UnsupportedEncodingException DOCUMENT_ME\n   */\n  public String encodeJson(Object value, String type) throws UnsupportedEncodingException {\n    jsonConverter.setType(type);\n\n    String jsonValue;\n    if (value == null) {\n      jsonValue = \"null\";\n    } else {\n      jsonValue = jsonConverter.getAsString(null, null, value);\n    }\n\n    return URLEncoder.encode(jsonValue, encoding);\n  }\n"}, {"dataset": "encode", "exampleID": 9821, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 178, "tryExpressionEnd": 182, "tryBlockStart": 178, "tryBlockEnd": 1496, "catchExpressionStart": 1373, "catchExpressionEnd": 1405, "catchBlockStart": 1373, "catchBlockEnd": 1439, "exceptionHandlingCallStart": [1413], "exceptionHandlingCallEnd": [1432], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 238, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sigmarkarl/world/tree/master/frislbok/src/org/simmi/server/FrislbokServiceImpl.java", "rawCode": "  @Override\n  public String login(String user, String password) {\n    // cookies = this.getThreadLocalRequest().getCookies();\n    // CookieManager cm = new CookieManager();\n\n    try {\n      String query = \"login?user=\" + user + \"&pwd=\" + URLEncoder.encode(password, \"UTF8\");\n      // String query = URLEncoder.encode( stuff, \"UTF8\" );\n      URL url = new URL(\"http://www.islendingabok.is/ib_app/\" + query);\n      URLConnection uc = url.openConnection();\n      uc.connect();\n\n      String headerName = null;\n      for (int i = 1; (headerName = uc.getHeaderFieldKey(i)) != null; i++) {\n        this.log(headerName);\n        if (headerName.equalsIgnoreCase(\"Set-Cookie\")) {\n          String cookie = uc.getHeaderField(i);\n          cookie = cookie.substring(0, cookie.indexOf(\";\"));\n          // String cookieName = cookie.substring(0, cookie.indexOf(\"=\"));\n          // String cookieValue = cookie.substring(cookie.indexOf(\"=\") + 1, cookie.length());\n          if (cookiestr.length() == 0) cookiestr = cookie;\n          else cookiestr += \"; \" + cookie;\n        }\n      }\n      // System.err.println( query );\n      InputStream is = uc.getInputStream();\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n      int c = is.read();\n      while (c != -1) {\n        baos.write(c);\n        c = is.read();\n      }\n      is.close();\n      return baos.toString();\n    } catch (MalformedURLException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "encode", "exampleID": 9822, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "java.io.UnsupportedEncodingException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 469, "tryExpressionEnd": 473, "tryBlockStart": 469, "tryBlockEnd": 927, "catchExpressionStart": 851, "catchExpressionEnd": 898, "catchBlockStart": 851, "catchBlockEnd": 927, "exceptionHandlingCallStart": [906], "exceptionHandlingCallEnd": [920], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 549, "focalAPIEnd": 593, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["encodeText(str,String,String)", "urlEncoder.encode(String,String)"], "useStart": [710, 799], "useEnd": [775, 843], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-276/kernel-util/src/main/java/org/sakaiproject/util/Web.java", "rawCode": "  /**\n   * * Encode filename (accomodating UTF-8 characters) for specific browser download/access * Sadly,\n   * Mozilla uses a different encoding scheme than everyone else * Sadly, Safari has a known bug\n   * where doesn't correctly translate encoding for user * * This method require inclusion of the\n   * javamail mail package.\n   */\n  public static String encodeFileName(HttpServletRequest req, String fileName) {\n    String agent = req.getHeader(\"USER-AGENT\");\n    try {\n      if (agent != null && agent.indexOf(\"MSIE\") >= 0)\n        fileName = java.net.URLEncoder.encode(fileName, \"UTF8\");\n      else if (agent != null && agent.indexOf(\"Mozilla\") >= 0 && agent.indexOf(\"Safari\") == -1)\n        fileName = javax.mail.internet.MimeUtility.encodeText(fileName, \"UTF8\", \"B\");\n      else fileName = java.net.URLEncoder.encode(fileName, \"UTF8\");\n    } catch (java.io.UnsupportedEncodingException e) {\n      M_log.error(e);\n    }\n\n    return fileName;\n  }\n"}, {"dataset": "encode", "exampleID": 9823, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new UnexpectedException(*)"], "tryExpressionStart": 46, "tryExpressionEnd": 50, "tryBlockStart": 46, "tryBlockEnd": 251, "catchExpressionStart": 165, "catchExpressionEnd": 204, "catchBlockStart": 165, "catchBlockEnd": 251, "exceptionHandlingCallStart": [218], "exceptionHandlingCallEnd": [244], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 62, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.replace(String,String)", "str.replace(String,String)"], "useStart": [103, 136], "useEnd": [124, 157], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lenik/jazz/tree/master/bas/layer-3/bas-c3/src/main/java/net/bodz/bas/c/java/net/CURL.java", "rawCode": "  public static String encode(String s) {\n    try {\n      s = URLEncoder.encode(s, \"utf-8\");\n      s = s.replace(\"%3A\", \":\");\n      s = s.replace(\"%5C\", \"/\");\n    } catch (UnsupportedEncodingException e) {\n      throw new UnexpectedException(e);\n    }\n    return s;\n  }\n"}, {"dataset": "encode", "exampleID": 9824, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["fatal(String,*)", "new RuntimeException(String)"], "tryExpressionStart": 65, "tryExpressionEnd": 69, "tryBlockStart": 65, "tryBlockEnd": 560, "catchExpressionStart": 368, "catchExpressionEnd": 408, "catchBlockStart": 368, "catchBlockEnd": 560, "exceptionHandlingCallStart": [416, 503], "exceptionHandlingCallEnd": [489, 553], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 100, "focalAPIEnd": 133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["OutputStreamWriter.write(str)"], "useStart": [1471], "useEnd": [1490], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/motech/MOTECH-Mobile/tree/master/motech-mobile-omp/src/main/java/org/motechproject/mobile/omp/manager/clickatell/ClickatellGatewayManagerImpl.java", "rawCode": "  public String getMessageStatus(GatewayResponse response) {\n    try {\n      postData = \"api_id=\" + URLEncoder.encode(apiId, \"UTF-8\");\n      postData += \"&user=\" + URLEncoder.encode(user, \"UTF-8\");\n      postData += \"&password=\" + URLEncoder.encode(password, \"UTF-8\");\n      postData += \"&apimsgid=\" + URLEncoder.encode(response.getGatewayMessageId(), \"UTF-8\");\n    } catch (UnsupportedEncodingException ex) {\n      logger.fatal(\"Error constructing request: parameter encoding failed\", ex);\n      throw new RuntimeException(\"Error constructing message\");\n    }\n\n    // Create a url and open a connection to it\n    URL url;\n    URLConnection conn;\n\n    try {\n      url = new URL(baseUrl + \"querymsg\");\n      conn = url.openConnection();\n      conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    } catch (MalformedURLException ex) {\n      logger.fatal(\"Error initializing Clikatell Gateway: invalid url\", ex);\n      throw new RuntimeException(\"Invalid gatewat URL\");\n    } catch (IOException ex) {\n      logger.fatal(\"Error iitializing Clickatell Gateway: unable to open URL connection\", ex);\n      throw new RuntimeException(\"Could not connect to gateway\");\n    }\n    // Read in the gateway response\n    BufferedReader in;\n    String data = \"\";\n    String gatewayResponse = \"\";\n\n    // Flush the post data to the url\n    try {\n      conn.setDoOutput(true);\n      OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\n      out.write(postData);\n      out.flush();\n\n      in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n      while ((data = in.readLine()) != null) gatewayResponse += data + \"\\n\";\n\n      // Close the connections to the url reader and writer\n      out.close();\n      in.close();\n    } catch (IOException ex) {\n      logger.fatal(\"Error processing gateway request\", ex);\n      throw new RuntimeException(\"Unable to communicate with gateway\");\n    }\n\n    return gatewayResponse;\n  }\n"}, {"dataset": "encode", "exampleID": 9825, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 517, "focalAPIEnd": 733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["RestClient.restGet(str)"], "useStart": [758], "useEnd": [784], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mfebrianto/ces/tree/master/src/main/java/edu/unsw/cse/comp9323/group1/DAOs/CourseAverageRatingDAO.java", "rawCode": "  /**\n   * This method will get the course rating based on course name\n   *\n   * @param course_name\n   * @return\n   * @throws URISyntaxException\n   * @throws HttpException\n   * @throws UnsupportedEncodingException\n   * @throws ParseException\n   */\n  public double getCourseRatingByName(String course_name)\n      throws URISyntaxException, HttpException, UnsupportedEncodingException, ParseException {\n    // client.oauth2Login( client.getUserCredentials());\n    String newRestUri =\n        \"/query/?q=\"\n            + URLEncoder.encode(\n                \"SELECT rating__c \"\n                    + \"FROM course_average_rating__c WHERE courseName__c='\"\n                    + course_name\n                    + \"'\",\n                \"UTF-8\");\n\n    String response = client.restGet(newRestUri);\n    JSONParser parser = new JSONParser();\n    Object obj = parser.parse(response);\n    JSONObject jsonObject = (JSONObject) obj;\n\n    JSONArray listOfRecords = (JSONArray) jsonObject.get(\"records\");\n    if (listOfRecords.size() > 0) {\n      JSONObject jsonAttribute = (JSONObject) listOfRecords.get(0);\n      return Double.parseDouble(jsonAttribute.get(\"rating__c\").toString());\n    }\n\n    return 0;\n  }\n"}, {"dataset": "encode", "exampleID": 9826, "initialization": ["String s = HttpServletRequest.getParameter(String)", "String s = String.trim()", "String s = replace(*,char)", "String s = decode(String,String)", "String s = tidyValue(String)", "String s = String.replace(String,String)"], "initializationStart": [266, 614, 779, 935, 1254, 1332], "initializationEnd": [304, 641, 840, 983, 1297, 1370], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["s.trim()", "s.replace(*,char)", "s.replace(String,String)"], "configurationStart": [614, 779, 1332], "configurationEnd": [641, 840, 1370], "guardCondition": "StringUtils.isNotEmpty(s,)&&s.trim().length()>0", "guardType": "IF {", "guardExpressionStart": 489, "guardExpressionEnd": 582, "guardBlockStart": 489, "guardBlockEnd": 1871, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1682, "focalAPIEnd": 1730, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SIB-Colombia/sib-dataportal/tree/master/portal-web/src/main/java/org/gbif/portal/web/controller/RedirectToRestUrlController.java", "rawCode": "  /**\n   * Performs the initial blanket search.\n   *\n   * @param request\n   * @param response\n   * @return\n   */\n  public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)\n      throws Exception {\n    String originalRequestParam = request.getParameter(requestParamName);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Original request parameter: \" + originalRequestParam);\n    }\n    String path = request.getContextPath() + redirectRootUrl;\n\n    if (StringUtils.isNotEmpty(originalRequestParam) && originalRequestParam.trim().length() > 0) {\n      originalRequestParam = originalRequestParam.trim();\n      if (supportWildcardSubstitution) {\n        for (int i = 0; i < supportedWildcards.length; i++) {\n          originalRequestParam = originalRequestParam.replace(supportedWildcards[i], wildcard);\n        }\n      }\n      try {\n        if (decodeArgument) {\n          originalRequestParam = URLDecoder.decode(originalRequestParam, \"UTF-8\");\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"URL decoded value: \" + originalRequestParam);\n          }\n        }\n        // replace whitespace with underscores for appearances\n        if (whitespace2Underscores) {\n          originalRequestParam = QueryHelper.tidyValue(originalRequestParam);\n          originalRequestParam = originalRequestParam.replace(\" \", \"_\");\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"pretty print value: \" + originalRequestParam);\n          }\n        }\n\n      } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n      }\n\n      String pathSuffix = originalRequestParam;\n      if (encodePath) {\n        pathSuffix = URLEncoder.encode(originalRequestParam, \"UTF-8\");\n      }\n      path = path + pathSuffix;\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Redirecting to: \" + path);\n      }\n    }\n    response.setCharacterEncoding(\"UTF-8\");\n    response.sendRedirect(path);\n    return null;\n  }\n"}, {"dataset": "encode", "exampleID": 9827, "initialization": ["String s = getContextPath()"], "initializationStart": [731], "initializationEnd": [755], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1098, "focalAPIEnd": 1139, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["HttpServletResponse.sendRedirect(str)"], "useStart": [1676], "useEnd": [1714], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue2/tree/master/src/java/org/infoglue/cms/security/InfoGlueBasicAuthenticationModule.java", "rawCode": "  public boolean logoutUser(HttpServletRequest request, HttpServletResponse response)\n      throws Exception {\n    String returnAddress = null;\n\n    logger.info(\"loginUrl:\" + this.loginUrl);\n    logger.info(\"logoutUrl:\" + this.logoutUrl);\n    logger.info(\"successLoginUrl:\" + this.successLoginUrl);\n\n    if (this.logoutUrl != null && this.logoutUrl.equals(\"Login!logout.action\")) {\n      String referer = request.getHeader(\"Referer\");\n\n      if (referer == null || referer.indexOf(\"ViewStructureToolToolBar.action\") != -1)\n        referer = \"/\";\n\n      logger.info(\"successLoginUrl:\" + successLoginUrl);\n      if (successLoginUrl != null) {\n        returnAddress = \"\" + successLoginUrl;\n      } else {\n        returnAddress = \"\" + request.getContextPath() + \"/ViewCMSTool.action\";\n      }\n\n      logger.info(\"returnAddress:\" + returnAddress);\n      // String redirectAddress = request.getContextPath() +\n      // \"/ExtranetLogin!loginForm.action?returnAddress=\" + URLEncoder.encode(returnAddress,\n      // \"UTF-8\");\n\n      String redirectAddress =\n          \"\" + this.loginUrl + \"?referringUrl=\" + URLEncoder.encode(returnAddress, \"utf-8\");\n      logger.info(\"redirectAddress in InfoGlueBasicAuth module:\" + returnAddress);\n      response.sendRedirect(returnAddress);\n\n      return true;\n    } else {\n      if (CmsPropertyHandler.getApplicationName().equals(\"cms\")) {\n        String redirectAddress =\n            \"\"\n                + this.logoutUrl\n                + \"?returnAddress=\"\n                + URLEncoder.encode(request.getContextPath() + \"/ViewCMSTool.action\", \"utf-8\");\n        logger.info(\"redirectAddress in InfoGlueBasicAuth module:\" + redirectAddress);\n        response.sendRedirect(redirectAddress);\n\n        return true;\n      } else return false;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9828, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "s!=null", "guardType": "IF {", "guardExpressionStart": 1088, "guardExpressionEnd": 1111, "guardBlockStart": 1088, "guardBlockEnd": 1197, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1151, "focalAPIEnd": 1189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["StringBuffer.append(str)"], "useStart": [1120], "useEnd": [1190], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/splat/src/main/uk/ac/starlink/splat/vo/SSAQuery.java", "rawCode": "  public String getQueryURLText() throws UnsupportedEncodingException {\n\n    // Note that some baseURLs may have an embedded ?.\n    StringBuffer buffer = new StringBuffer(baseURL);\n    if (baseURL.indexOf('?') == -1) {\n      // No ? in URL.\n      buffer.append(\"?\");\n    } else if (!baseURL.endsWith(\"?\") && !baseURL.endsWith(\"&\")) {\n      // Contains ? but not at end. Also doesn't end with &\n      buffer.append(\"&\");\n    }\n    // Else ends with a ?, so that's OK already.\n\n    // Start with \"VERSION=1.0&REQUEST=queryData\".\n    // buffer.append( SSAPVERSION + \"&REQUEST=queryData\" );\n    // (MCN 04.2012) At the moment Splat will not send any version information, because\n    // it causes more problems than it helps... To be changed later\n    buffer.append(\"REQUEST=queryData\");\n\n    // Add basic search parameters, POS or TARGETNAME, FORMAT and SIZE.\n    // TO DO this way you cannot search for objects in the position 0,0. Should be done in a more\n    // elegant way\n    if (queryRA != null || queryDec != null) {\n      buffer.append(\"&POS=\" + queryRA + \",\" + queryDec);\n    } else if (targetName != null) {\n      buffer.append(\"&TARGETNAME=\" + URLEncoder.encode(targetName, \"UTF-8\"));\n    }\n    if (queryFormat != null && !queryFormat.equalsIgnoreCase(\"None\")) {\n      buffer.append(\"&FORMAT=\" + queryFormat);\n    }\n    if (queryRadius > 0) buffer.append(\"&SIZE=\" + queryRadius);\n    if (queryMaxrec > 0) buffer.append(\"&MAXREC=\" + queryMaxrec);\n\n    // The spectral bandpass. SSAP spec allows \"lower/upper\" range,\n    // or bounded from above or below.\n    if ((queryBandUpper != null && queryBandUpper.length() > 0)\n        && (queryBandLower != null && queryBandLower.length() > 0)) {\n      buffer.append(\"&BAND=\" + queryBandLower + \"/\" + queryBandUpper);\n    } else if (queryBandUpper != null && queryBandUpper.length() > 0) {\n      buffer.append(\"&BAND=\" + \"/\" + queryBandUpper);\n    } else if (queryBandLower != null && queryBandLower.length() > 0) {\n      buffer.append(\"&BAND=\" + queryBandLower + \"/\");\n    }\n\n    // The time coverage. Assume \"lower/upper\" range or includes\n    // a single value.\n    if ((queryTimeUpper != null && queryTimeUpper.length() > 0)\n        && (queryTimeLower != null && queryTimeLower.length() > 0)) {\n      buffer.append(\"&TIME=\" + queryTimeLower + \"/\" + queryTimeUpper);\n    } else if (queryTimeLower != null && queryTimeLower.length() > 0) {\n      buffer.append(\"&TIME=\" + queryTimeLower + \"/\");\n    } else if (queryTimeUpper != null && queryTimeUpper.length() > 0) {\n      buffer.append(\"&TIME=\" + \"/\" + queryTimeUpper);\n    }\n\n    // Wavelength and flux calibrations.\n    if (waveCalib != null && !waveCalib.equalsIgnoreCase(\"None\")) {\n      buffer.append(\"&WAVECALIB=\" + waveCalib);\n    }\n    if (fluxCalib != null && !fluxCalib.equalsIgnoreCase(\"None\")) {\n      buffer.append(\"&FLUXCALIB=\" + fluxCalib);\n    }\n    return buffer.toString();\n  }\n"}, {"dataset": "encode", "exampleID": 9829, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s)", "focalAPIStart": 73, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/getrailo/railo/tree/master/railo-java/railo-core/src/railo/runtime/net/http/HttpServletResponseWrap.java", "rawCode": "  @Override\n  public String encodeRedirectUrl(String value) {\n    return URLEncoder.encode(value);\n  }\n"}, {"dataset": "encode", "exampleID": 9830, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 244, "focalAPIEnd": 279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["replace(String,str)"], "useStart": [372], "useEnd": [403], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cse218/fbreader/tree/master/src/org/geometerplus/fbreader/network/opds/OPDSNetworkLink.java", "rawCode": "  public ZLNetworkRequest simpleSearchRequest(String pattern, NetworkOperationData data) {\n    final UrlInfo info = getUrlInfo(UrlInfo.Type.Search);\n    if (info == null || info.Url == null) {\n      return null;\n    }\n    try {\n      pattern = URLEncoder.encode(pattern, \"utf-8\");\n    } catch (UnsupportedEncodingException e) {\n    }\n    return createNetworkData(\n        info.Url.replace(\"%s\", pattern), info.Mime, (OPDSCatalogItem.State) data);\n  }\n"}, {"dataset": "encode", "exampleID": 9831, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 175, "tryExpressionEnd": 179, "tryBlockStart": 175, "tryBlockEnd": 2019, "catchExpressionStart": 1914, "catchExpressionEnd": 1935, "catchBlockStart": 1914, "catchBlockEnd": 2019, "exceptionHandlingCallStart": [1943], "exceptionHandlingCallEnd": [2012], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1122, "focalAPIEnd": 1166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(str)"], "useStart": [1092], "useEnd": [1167], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UniMelb-source/vitro-core-1.3/tree/master/webapp/src/edu/cornell/mannlib/vitro/webapp/utils/pageDataGetter/IndividualsForClassesDataGetter.java", "rawCode": "  private void processRestrictionClasses(\n      VitroRequest vreq,\n      ServletContext context,\n      HashMap<String, Object> data,\n      List<String> restrictClasses) {\n    try {\n      VClassGroup restrictClassesGroup = new VClassGroup();\n      restrictClassesGroup.setURI(\"restrictClasses\");\n\n      List<VClass> restrictVClasses = new ArrayList<VClass>();\n\n      List<String> urlEncodedRestrictClasses = new ArrayList<String>();\n      if (restrictClasses.size() > 0) {\n        // classes for restriction are not displayed so don't need to include their class individual\n        // counts\n        for (String restrictClassUri : restrictClasses) {\n          VClass vclass =\n              vreq.getWebappDaoFactory().getVClassDao().getVClassByURI(restrictClassUri);\n          if (vclass != null) {\n            log.debug(\"Found restrict class and adding to list \" + restrictClassUri);\n            restrictVClasses.add(vclass);\n          } else {\n            log.error(\"Error occurred, vclass does not exist for this uri \" + restrictClassUri);\n          }\n          // Assuming utf-8?\n          urlEncodedRestrictClasses.add(URLEncoder.encode(restrictClassUri, \"UTF-8\"));\n        }\n\n        restrictClassesGroup.setVitroClassList(restrictVClasses);\n        restrictClassesGroup.setIndividualCount(restrictVClasses.size());\n      } else {\n\n      }\n      String[] restrictClassesArray = new String[urlEncodedRestrictClasses.size()];\n      restrictClassesArray = urlEncodedRestrictClasses.toArray(restrictClassesArray);\n\n      // In case just want uris\n      log.debug(\n          \"Variable name for including restriction classes \" + getRestrictClassesTemplateName());\n      data.put(getRestrictClassesTemplateName(), StringUtils.join(restrictClassesArray, \",\"));\n      data.put(\"restrictVClasses\", restrictVClasses);\n      // not sure if this is useful\n      data.put(\"restrictVClassGroup\", restrictClassesGroup);\n    } catch (Exception ex) {\n      log.error(\"An error occurred in processing restriction classes \", ex);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9832, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(s==null)", "guardType": "IF {", "guardExpressionStart": 271, "guardExpressionEnd": 289, "guardBlockStart": 271, "guardBlockEnd": 316, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 341, "focalAPIEnd": 371, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-2_05-final/blojsom-2.0/src/org/blojsom/util/BlojsomUtils.java", "rawCode": "  /**\n   * Return an input string URL encoded\n   *\n   * @param input Input string\n   * @return URL encoded string or <code>null</code> if either the input was null or there is a\n   *     encoding exception\n   */\n  public static final String urlEncode(String input) {\n    if (input == null) {\n      return null;\n    }\n\n    try {\n      return URLEncoder.encode(input, UTF8);\n    } catch (UnsupportedEncodingException e) {\n      return input;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9833, "initialization": ["String s = SAMLAuthenticationStatementFacade.buildSignedAuthenticationStatement(String)"], "initializationStart": [1895], "initializationEnd": [1957], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new ServletException(*)"], "tryExpressionStart": 1803, "tryExpressionEnd": 1807, "tryBlockStart": 1803, "tryBlockEnd": 2880, "catchExpressionStart": 2808, "catchExpressionEnd": 2828, "catchBlockStart": 2808, "catchBlockEnd": 2880, "exceptionHandlingCallStart": [2846], "exceptionHandlingCallEnd": [2869], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 2231, "focalAPIEnd": 2267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Cookie(*,str)"], "useStart": [2189], "useEnd": [2268], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ESGF/esg-orp/tree/master/src/java/main/esg/orp/orp/PostAuthenticationFilter.java", "rawCode": "  public void doFilter(\n      final ServletRequest request, final ServletResponse response, final FilterChain chain)\n      throws IOException, ServletException {\n\n    final HttpServletRequest req = (HttpServletRequest) request;\n    final HttpServletResponse resp = (HttpServletResponse) response;\n    final HttpSession session = req.getSession();\n    final String url = req.getRequestURL().toString();\n    final URL reqURL = new URL(url);\n\n    final SecurityContext secCtx = SecurityContextHolder.getContext();\n    final Authentication auth = secCtx.getAuthentication();\n    if (LOG.isDebugEnabled())\n      LOG.debug(\n          \"URL=\"\n              + url\n              + \" Security context authentication=\"\n              + auth\n              + \" Session id=\"\n              + session.getId());\n\n    if (auth != null\n        && (auth instanceof OpenIDAuthenticationToken\n            || auth instanceof PreAuthenticatedAuthenticationToken)) {\n\n      final String openid = auth.getName();\n      if (LOG.isDebugEnabled()) LOG.debug(\"User is authenticated, openid=\" + openid);\n\n      // retrieve OpenID Exchange Attributes\n      if (auth instanceof OpenIDAuthenticationToken) {\n        final OpenIDAuthenticationToken token = (OpenIDAuthenticationToken) auth;\n        final List<OpenIDAttribute> attributes = token.getAttributes();\n        if (LOG.isDebugEnabled()) {\n          for (OpenIDAttribute attribute : attributes) {\n            LOG.info(\n                \"Retrieved OpenID attribute=\"\n                    + attribute.getName()\n                    + \" type=\"\n                    + attribute.getType()\n                    + \" value=\"\n                    + attribute.getValues().get(0));\n          }\n        }\n      }\n\n      if (WebUtils.getCookie(req, Parameters.OPENID_SAML_COOKIE) == null) {\n\n        try {\n\n          // build signed authentication statement\n          final String authstmt = samlStatementFacade.buildSignedAuthenticationStatement(openid);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Authentication statement:\");\n            LOG.debug(authstmt);\n          }\n\n          // set cookie (value must be encoded)\n          final Cookie cookie =\n              new Cookie(Parameters.OPENID_SAML_COOKIE, URLEncoder.encode(authstmt, \"UTF-8\"));\n          // cookie.setSecure(true); // cookie will be transmitted only over HTTPS\n          cookie.setMaxAge(-1); // cookie will be deleted when session is terminated\n          cookie.setDomain(reqURL.getHost()); // cookie sent to all applications on this host\n          cookie.setPath(\"/\"); // cookie will be sent to all pages in web application\n          resp.addCookie(cookie);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Setting authentication cookie:\");\n            this.printCookie(cookie);\n          }\n\n        } catch (Exception e) {\n          throw new ServletException(e);\n        }\n\n      } else {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Found authentication cookie:\");\n          this.printCookie(WebUtils.getCookie(req, Parameters.OPENID_SAML_COOKIE));\n        }\n      }\n\n      // redirect\n      if (session.getAttribute(Parameters.OPENID_REDIRECT) != null) {\n        final String redirect = (String) session.getAttribute(Parameters.OPENID_REDIRECT);\n        if (LOG.isDebugEnabled()) LOG.debug(\"Redirecting to: \" + redirect);\n        // remove \"redirect\" parameter from session\n        session.removeAttribute(Parameters.OPENID_REDIRECT);\n        resp.sendRedirect(redirect);\n      } else {\n        chain.doFilter(request, response);\n      }\n\n    } else {\n\n      // set HTTP STATUS CODE = 401 while returning login page on redirect\n      // note: don't do this for any other URL\n      if (url.endsWith(Parameters.LOGIN_URL)\n          && StringUtils.hasText((String) session.getAttribute(Parameters.OPENID_REDIRECT))) {\n        resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n      }\n\n      // keep processing\n      chain.doFilter(request, response);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9834, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "DomainException", "exceptionHandlingCall": ["warn(String,*)"], "tryExpressionStart": 2618, "tryExpressionEnd": 2622, "tryBlockStart": 2618, "tryBlockEnd": 5343, "catchExpressionStart": 5235, "catchExpressionEnd": 5261, "catchBlockStart": 5235, "catchBlockEnd": 5343, "exceptionHandlingCallStart": [5273], "exceptionHandlingCallEnd": [5332], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 3432, "focalAPIEnd": 3496, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(*,String)", "urlEncoder.encode(*,String)", "urlEncoder.encode(*,String)", "urlEncoder.encode(*,String)", "append(str)", "urlEncoder.encode(*,String)", "urlEncoder.encode(*,String)", "urlEncoder.encode(*,String)"], "useStart": [3363, 3572, 3814, 3935, 4551, 4486, 4691, 4912, 5033], "useEnd": [3497, 3678, 3880, 4004, 4615, 4616, 4768, 4978, 5098], "hasFinally": 1, "cleanUpCall": ["JsonGenerator.close()"], "finallyExpressionStart": 5930, "finallyExpressionEnd": 5938, "finallyBlockStart": 5930, "finallyBlockEnd": 6133, "cleanUpCallStart": [6003], "cleanUpCallEnd": [6020], "url": "https://github.com/ohmage/server/tree/master/src/org/ohmage/request/omh/OmhReadRequest.java", "rawCode": "  @Override\n  public void respond(\n      final HttpServletRequest httpRequest, final HttpServletResponse httpResponse) {\n\n    LOGGER.info(\"Responding to an OMH read request.\");\n\n    // If either request has failed, set the response's status code.\n    if (isFailed()) {\n      if (ErrorCode.SYSTEM_GENERAL_ERROR.equals(getAnnotator().getErrorCode())) {\n\n        httpResponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n      } else {\n        httpResponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n      }\n\n      super.respond(httpRequest, httpResponse, null);\n      return;\n    } else if (userRequest.isFailed()) {\n      if (ErrorCode.SYSTEM_GENERAL_ERROR.equals(userRequest.getAnnotator().getErrorCode())) {\n\n        httpResponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n      } else {\n        httpResponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n      }\n\n      // Then, force the request to respond.\n      userRequest.respond(httpRequest, httpResponse);\n      return;\n    } else if (userRequest instanceof OmhReadResponder) {\n      OmhReadResponder omhReadResponder = (OmhReadResponder) userRequest;\n\n      // Refresh the token cookie.\n      userRequest.refreshTokenCookie(httpResponse);\n\n      // Expire the response, but this may be a bad idea.\n      expireResponse(httpResponse);\n\n      // Set the content type to JSON.\n      httpResponse.setContentType(\"application/json\");\n\n      // Connect a stream to the response.\n      OutputStream outputStream;\n      try {\n        outputStream = getOutputStream(httpRequest, httpResponse);\n      } catch (IOException e) {\n        LOGGER.warn(\"Could not connect to the output stream.\", e);\n        return;\n      }\n\n      // Create the generator that will stream to the requester.\n      JsonGenerator generator;\n      try {\n        generator = JSON_FACTORY.createJsonGenerator(outputStream);\n      } catch (IOException generatorException) {\n        LOGGER.error(\"Could not create the JSON generator.\", generatorException);\n\n        try {\n          outputStream.close();\n        } catch (IOException streamCloseException) {\n          LOGGER.warn(\"Could not close the output stream.\", streamCloseException);\n        }\n\n        return;\n      }\n\n      try {\n        // Start the response object.\n        generator.writeStartObject();\n\n        // Create the \"success\" message.\n        generator.writeStringField(\"result\", \"success\");\n\n        // Create the metadata.\n        generator.writeObjectFieldStart(\"metadata\");\n\n        // Write the count.\n        generator.writeNumberField(\"count\", omhReadResponder.getNumDataPoints());\n\n        try {\n          // Build the root string for the previous and next\n          // pointers.\n          StringBuilder rootBuilder = buildRootPreviousNextString();\n\n          // For the previous pointer, add the number to skip.\n          if (numToSkip > 0) {\n            // Clone the root string for the previous string.\n            StringBuilder previousBuilder = new StringBuilder(rootBuilder);\n\n            // The number of results to return in the previous page\n            // is either, all of the data points before this page\n            // or the same number that were returned from this\n            // request.\n            long prevNumToReturn = Math.min(numToSkip, numToReturn);\n\n            // Add the number of points to skip.\n            previousBuilder\n                .append('&')\n                .append(URLEncoder.encode(InputKeys.OMH_NUM_TO_SKIP, URL_ENCODING_UTF_8))\n                .append('=')\n                .append(\n                    URLEncoder.encode(\n                        Long.toString(numToSkip - prevNumToReturn), URL_ENCODING_UTF_8));\n\n            // Add the number of points to return.\n            previousBuilder\n                .append('&')\n                .append(URLEncoder.encode(InputKeys.OMH_NUM_TO_RETURN, URL_ENCODING_UTF_8))\n                .append('=')\n                .append(URLEncoder.encode(Long.toString(prevNumToReturn), URL_ENCODING_UTF_8));\n\n            // Write the previous pointer.\n            generator.writeStringField(\"previous\", previousBuilder.toString());\n          }\n\n          // If we filled this page, then there might be another.\n          if (numToReturn == omhReadResponder.getNumDataPoints()) {\n            // Clone the root string for the previous string.\n            StringBuilder nextBuilder = new StringBuilder(rootBuilder);\n\n            // For the next pointer, add the number to skip.\n            nextBuilder\n                .append('&')\n                .append(URLEncoder.encode(InputKeys.OMH_NUM_TO_SKIP, URL_ENCODING_UTF_8))\n                .append('=')\n                .append(\n                    URLEncoder.encode(Long.toString(numToSkip + numToReturn), URL_ENCODING_UTF_8));\n\n            // For the next pointer, add the number to return.\n            nextBuilder\n                .append('&')\n                .append(URLEncoder.encode(InputKeys.OMH_NUM_TO_RETURN, URL_ENCODING_UTF_8))\n                .append('=')\n                .append(URLEncoder.encode(Long.toString(numToReturn), URL_ENCODING_UTF_8));\n\n            // Write the next pointer.\n            generator.writeStringField(\"next\", nextBuilder.toString());\n          }\n        } catch (DomainException e) {\n          LOGGER.warn(\"There was an error building the root URL.\", e);\n        }\n\n        // End the metadata.\n        generator.writeEndObject();\n\n        // Start the data.\n        generator.writeArrayFieldStart(\"data\");\n\n        // Dispatch the writing of the data to the request.\n        omhReadResponder.respond(generator, columns);\n\n        // End the data.\n        generator.writeEndArray();\n\n        // End the response object.\n        generator.writeEndObject();\n      } catch (JsonGenerationException e) {\n        LOGGER.error(e);\n      } catch (IOException e) {\n        LOGGER.error(e);\n      } catch (DomainException e) {\n        LOGGER.error(e);\n      } finally {\n        // Flush and close the writer.\n        try {\n          generator.close();\n        } catch (IOException e) {\n          LOGGER.info(\"Could not close the generator.\", e);\n        }\n      }\n    } else {\n      userRequest.respond(httpRequest, httpResponse);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9835, "initialization": ["String s = File.getPath()"], "initializationStart": [617], "initializationEnd": [637], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 656, "focalAPIEnd": 694, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["VoltProjectBuilder.addSchema(str)"], "useStart": [760], "useEnd": [789], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elka-projekt/cs-voltdb/tree/master/tests/frontend/org/voltdb/TestSimpleCJK.java", "rawCode": "  ServerThread startup() throws UnsupportedEncodingException {\n    String simpleSchema =\n        \"create table cjk (\"\n            + \"sval1 varchar(1024) not null, \"\n            + \"sval2 varchar(1024) default 'foo', \"\n            + \"sval3 varchar(1024) default 'bar', \"\n            + \"PRIMARY KEY(sval1));\";\n\n    /*String simpleSchema =\n    \"create table cjk (\" +\n    \"sval1 varchar(20) not null, \" +\n    \"sval2 varchar(20) default 'foo', \" +\n    \"sval3 varchar(20) default 'bar', \" +\n    \"PRIMARY KEY(sval1));\";*/\n\n    File schemaFile = VoltProjectBuilder.writeStringToTempFile(simpleSchema);\n    String schemaPath = schemaFile.getPath();\n    schemaPath = URLEncoder.encode(schemaPath, \"UTF-8\");\n\n    VoltProjectBuilder builder = new VoltProjectBuilder();\n    builder.addSchema(schemaPath);\n    builder.addPartitionInfo(\"cjk\", \"sval1\");\n    builder.addStmtProcedure(\"Insert\", \"insert into cjk values (?,?,?);\");\n    builder.addStmtProcedure(\"Select\", \"select * from cjk;\");\n    builder.setHTTPDPort(8095);\n    boolean success = builder.compile(Configuration.getPathToCatalogForTest(\"cjk.jar\"), 1, 1, 0);\n    assertTrue(success);\n\n    VoltDB.Configuration config = new VoltDB.Configuration();\n    config.m_pathToCatalog = Configuration.getPathToCatalogForTest(\"cjk.jar\");\n    config.m_pathToDeployment = builder.getPathToDeployment();\n    ServerThread server = new ServerThread(config);\n    server.start();\n    server.waitForInitialization();\n\n    return server;\n  }\n"}, {"dataset": "encode", "exampleID": 9836, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 70, "focalAPIEnd": 98, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/karussell/Jetwick/tree/master/src/main/java/de/jetwick/util/Helper.java", "rawCode": "  public static String urlEncode(String str) {\n    try {\n      return URLEncoder.encode(str, UTF8);\n    } catch (UnsupportedEncodingException ex) {\n      return str;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9837, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 468, "tryExpressionEnd": 472, "tryBlockStart": 468, "tryBlockEnd": 715, "catchExpressionStart": 620, "catchExpressionEnd": 670, "catchBlockStart": 620, "catchBlockEnd": 715, "exceptionHandlingCallStart": [678], "exceptionHandlingCallEnd": [708], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 499, "focalAPIEnd": 612, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kiniry-teaching/UCD/tree/master/COMP30050-2008/users/BHarty/construct/src/org/construct_infrastructure/component/datastorage/viewer/DataStoreMetadataTableModelAdaptor.java", "rawCode": "  /**\n   * This method constructs a meta-ID from the parts of a Statement.\n   *\n   * @param a_subject the subject we are interested in.\n   * @param a_predicate the predicate linking the subject and object.\n   * @param an_object the object we are interested in.\n   * @return the meta-id for the given Statement.\n   */\n  private String constructStmtGuid(\n      final Resource a_subject, final Property a_predicate, final RDFNode an_object) {\n    String result = \"\";\n    try {\n      result =\n          URLEncoder.encode(\n              (a_subject.toString() + a_predicate.toString() + an_object.toString()), \"UTF-8\");\n    } catch (UnsupportedEncodingException an_exception) {\n      an_exception.printStackTrace();\n    }\n    return result;\n    // return (a_subject.toString() + \"@\" + a_predicate.toString() + \"@\" +\n    // an_object.toString())\n    // .replace('#', '$');\n  }\n"}, {"dataset": "encode", "exampleID": 9838, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "java.io.UnsupportedEncodingException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 469, "tryExpressionEnd": 473, "tryBlockStart": 469, "tryBlockEnd": 927, "catchExpressionStart": 851, "catchExpressionEnd": 898, "catchBlockStart": 851, "catchBlockEnd": 927, "exceptionHandlingCallStart": [906], "exceptionHandlingCallEnd": [920], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 549, "focalAPIEnd": 593, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["encodeText(str,String,String)", "urlEncoder.encode(String,String)"], "useStart": [710, 799], "useEnd": [775, 843], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.2/kernel-util/src/main/java/org/sakaiproject/util/Web.java", "rawCode": "  /**\n   * * Encode filename (accomodating UTF-8 characters) for specific browser download/access * Sadly,\n   * Mozilla uses a different encoding scheme than everyone else * Sadly, Safari has a known bug\n   * where doesn't correctly translate encoding for user * * This method require inclusion of the\n   * javamail mail package.\n   */\n  public static String encodeFileName(HttpServletRequest req, String fileName) {\n    String agent = req.getHeader(\"USER-AGENT\");\n    try {\n      if (agent != null && agent.indexOf(\"MSIE\") >= 0)\n        fileName = java.net.URLEncoder.encode(fileName, \"UTF8\");\n      else if (agent != null && agent.indexOf(\"Mozilla\") >= 0 && agent.indexOf(\"Safari\") == -1)\n        fileName = javax.mail.internet.MimeUtility.encodeText(fileName, \"UTF8\", \"B\");\n      else fileName = java.net.URLEncoder.encode(fileName, \"UTF8\");\n    } catch (java.io.UnsupportedEncodingException e) {\n      M_log.error(e);\n    }\n\n    return fileName;\n  }\n"}, {"dataset": "encode", "exampleID": 9839, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 195, "focalAPIEnd": 237, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbcpollak/UrlRewriteFilter/tree/master/src/test/org/tuckey/web/filters/urlrewriteviacontainer/WebappDecodeUtf8Test.java", "rawCode": "  /** */\n  public void testTestUtf() throws ServletException, IOException {\n    String utfSampleString = \"Fêtel'haïvolapük\";\n    GetMethod method =\n        new GetMethod(getBaseUrl() + \"/utf/\" + URLEncoder.encode(utfSampleString, \"UTF8\") + \"/\");\n    method.setRequestHeader(\"Accept-Encoding\", \"utf8\");\n    method.setFollowRedirects(false);\n    client.executeMethod(method);\n    assertEquals(\n        getBaseUrl() + \"/utf-redir/done/\", method.getResponseHeader(\"Location\").getValue());\n  }\n"}, {"dataset": "encode", "exampleID": 9840, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 219, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new HttpURI(str)"], "useStart": [190], "useEnd": [253], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jetty-project/jetty-plugin-support/tree/master/jetty-server/src/test/java/org/eclipse/jetty/server/HttpURITest.java", "rawCode": "  @Test\n  public void testExtB() throws Exception {\n    for (String value :\n        new String[] {\"a\", \"abcdABCD\", \"\\u00C0\", \"\\u697C\", \"\\uD869\\uDED5\", \"\\uD840\\uDC08\"}) {\n      HttpURI uri = new HttpURI(\"/path?value=\" + URLEncoder.encode(value, \"UTF-8\"));\n\n      MultiMap<String> parameters = new MultiMap<String>();\n      uri.decodeQueryTo(parameters, \"UTF-8\");\n      assertEquals(value, parameters.get(\"value\"));\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9841, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["log(*)"], "tryExpressionStart": 49, "tryExpressionEnd": 53, "tryBlockStart": 49, "tryBlockEnd": 190, "catchExpressionStart": 117, "catchExpressionEnd": 156, "catchBlockStart": 117, "catchBlockEnd": 190, "exceptionHandlingCallStart": [164], "exceptionHandlingCallEnd": [183], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 68, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/ui/preferences/NewScriptProjectPreferencePage.java", "rawCode": "  private static String encode(String str) {\n    try {\n      return URLEncoder.encode(str, fgDefaultEncoding);\n    } catch (UnsupportedEncodingException e) {\n      DLTKUIPlugin.log(e);\n    }\n    return \"\"; // $NON-NLS-1$\n  }\n"}, {"dataset": "encode", "exampleID": 9842, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 73, "focalAPIEnd": 102, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jintrone/TurkSnet/tree/master/src/main/java/edu/mit/cci/turkit/util/U.java", "rawCode": "  public static String escapeURL(String s) throws Exception {\n    return URLEncoder.encode(s, \"UTF-8\");\n  }\n"}, {"dataset": "encode", "exampleID": 9843, "initialization": ["String s = decode(String,String)"], "initializationStart": [235], "initializationEnd": [271], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 286, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iisihub/CAP/tree/master/cap-core/src/main/java/com/iisigroup/cap/utils/CapWebUtil.java", "rawCode": "  /**\n   * 下載檔名中文依IE及FireFox做區分\n   *\n   * @param request HttpServletRequest\n   * @param fileName 前端要顯示的檔案名稱\n   * @return String\n   */\n  public static String encodeFileName(Request request, String fileName) {\n    try {\n      fileName = URLDecoder.decode(fileName, \"utf-8\");\n      return URLEncoder.encode(fileName, \"UTF8\");\n    } catch (UnsupportedEncodingException e) {\n      return fileName;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9844, "initialization": ["String s = getPartialTermUtf8()"], "initializationStart": [439], "initializationEnd": [459], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(String)"], "tryExpressionStart": 487, "tryExpressionEnd": 491, "tryBlockStart": 487, "tryBlockEnd": 685, "catchExpressionStart": 568, "catchExpressionEnd": 608, "catchBlockStart": 568, "catchBlockEnd": 685, "exceptionHandlingCallStart": [622], "exceptionHandlingCallEnd": [678], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 511, "focalAPIEnd": 560, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/services/tree/master/services/person/client/src/test/java/org/collectionspace/services/client/test/PersonAuthoritySearchTest.java", "rawCode": "  /**\n   * Reads an item list by partial term, with a partial term that contains at least one Unicode\n   * UTF-8 character (outside the USASCII range).\n   *\n   * @throws Exception\n   */\n  @Test(\n    dataProvider = \"testName\",\n    groups = {\"readListByPartialTerm\"},\n    dependsOnMethods = {\"partialTermMatch\"}\n  )\n  public void partialTermMatchUTF8(String testName) throws Exception {\n    int numMatchesFound = 0;\n    String partialTerm = getPartialTermUtf8();\n    String ptEncoded;\n    try {\n      ptEncoded = URLEncoder.encode(partialTerm, UTF8_CHARSET_NAME);\n    } catch (UnsupportedEncodingException ex) {\n      throw new RuntimeException(\"Broken VM does not support UTF-8\");\n    }\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Attempting match on partial term '\"\n              + partialTerm\n              + \"', Encoded:'\"\n              + ptEncoded\n              + \"' ...\");\n    }\n    numMatchesFound = readItemListWithFilters(testName, knownResourceId, partialTerm, null);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\n          \"Found \"\n              + numMatchesFound\n              + \" match(es), expected \"\n              + NUM_MATCHES_EXPECTED_SPECIFIC\n              + \" match(es).\");\n    }\n    Assert.assertEquals(numMatchesFound, NUM_MATCHES_EXPECTED_SPECIFIC);\n  }\n"}, {"dataset": "encode", "exampleID": 9845, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["toString()", "new BadQueryException(*)"], "tryExpressionStart": 1500, "tryExpressionEnd": 1504, "tryBlockStart": 1500, "tryBlockEnd": 1683, "catchExpressionStart": 1588, "catchExpressionEnd": 1627, "catchBlockStart": 1588, "catchBlockEnd": 1683, "exceptionHandlingCallStart": [1663, 1641], "exceptionHandlingCallEnd": [1675, 1676], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1522, "focalAPIEnd": 1579, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)"], "useStart": [1512], "useEnd": [1580], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iipc/openwayback/tree/master/wayback-core/src/main/java/org/archive/wayback/resourceindex/NutchResourceIndex.java", "rawCode": "  protected String getRequestUrl(WaybackRequest wbRequest) throws BadQueryException {\n\n    String urlStr = wbRequest.getRequestUrl();\n    String exactDateStr = wbRequest.getReplayTimestamp();\n    if (exactDateStr != null && exactDateStr.length() == 0) {\n      exactDateStr = null;\n    }\n    String endDateStr = wbRequest.getEndTimestamp();\n    if (endDateStr == null || endDateStr.length() == 0) {\n      endDateStr = Timestamp.latestTimestamp().getDateStr();\n    }\n    String startDateStr = wbRequest.getStartTimestamp();\n    if (startDateStr == null || startDateStr.length() == 0) {\n      startDateStr = Timestamp.earliestTimestamp().getDateStr();\n    }\n    int hitsPerPage = wbRequest.getResultsPerPage();\n    if (hitsPerPage < 1) {\n      throw new BadQueryException(\"Hits per page must be positive\");\n    }\n    if (hitsPerPage > maxRecords) {\n      throw new BadQueryException(\"Hits per page must be less than \" + maxRecords);\n    }\n    int start = (wbRequest.getPageNum() - 1) * hitsPerPage;\n    if (urlStr == null || urlStr.length() <= 0) {\n      throw new BadQueryException(\"Url is empty.\");\n    }\n    // Construct the search url.\n    MutableString ms = new MutableString(this.searchUrlBase).append(\"?query=\");\n    // Add 'date:...+' to query string.\n    ms.append(\"date%3A\").append(startDateStr).append('-').append(endDateStr);\n    ms.append('+');\n    // Add 'url:URL'.\n    if (wbRequest.isUrlQueryRequest()) {\n      ms.append(\"url%3A\");\n    } else {\n      ms.append(\"exacturl%3A\");\n    }\n    try {\n      ms.append(java.net.URLEncoder.encode(\"\\\"\" + urlStr + \"\\\"\", \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      throw new BadQueryException(e.toString());\n    }\n    ms.append(\"&hitsPerPage=\").append(hitsPerPage);\n    ms.append(\"&start=\").append(start);\n    ms.append(\"&dedupField=site\");\n    // As we are always searching agains an url, a\n    // higher perDup/Site will return just more versions\n    ms.append(\"&hitsPerDup=\").append(hitsPerPage);\n    ms.append(\"&hitsPerSite=\").append(hitsPerPage);\n\n    return ms.toString();\n  }\n"}, {"dataset": "encode", "exampleID": 9846, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new IntelliSMSException(*,String,*)"], "tryExpressionStart": 463, "tryExpressionEnd": 467, "tryBlockStart": 463, "tryBlockEnd": 1116, "catchExpressionStart": 950, "catchExpressionEnd": 989, "catchBlockStart": 950, "catchBlockEnd": 1116, "exceptionHandlingCallStart": [1003], "exceptionHandlingCallEnd": [1109], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 502, "focalAPIEnd": 539, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jtreg/FrontlineSMS/tree/master/src/main/java/IntelliSoftware/SMSGateway/SDK/IntelliSMSJavaSDK/Internal/SMSGatewayProxy.java", "rawCode": "  public SendStatusCollection SendWapPushMessage(\n      String sUsername,\n      String sPassword,\n      String sTo,\n      String sFrom,\n      String sTitle,\n      String sHRef,\n      boolean bRequestDeliveryRpt)\n      throws IntelliSMSException {\n    String sUrl = \"smsgateway/default.aspx\";\n\n    String sTitleProcessed = StringUtils.TruncateString(sTitle, 300);\n    String sHRefProcessed = StringUtils.TruncateString(sHRef, 300);\n\n    String sFormData = \"\";\n    try {\n      sFormData += \"username=\" + URLEncoder.encode(sUsername, \"UTF-8\") + \"&\";\n      sFormData += \"password=\" + URLEncoder.encode(sPassword, \"UTF-8\") + \"&\";\n      sFormData += \"to=\" + URLEncoder.encode(sTo, \"UTF-8\") + \"&\";\n      sFormData += \"from=\" + URLEncoder.encode(sFrom, \"UTF-8\") + \"&\";\n      sFormData += \"type=4&\";\n      sFormData += \"text=\" + URLEncoder.encode(sTitleProcessed, \"UTF-8\") + \"&\";\n      sFormData += \"href=\" + URLEncoder.encode(sHRefProcessed, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IntelliSMSException(\n          ResultCodes.InternalError, \"Unable to encode supplied text strings\", e);\n    }\n\n    if (bRequestDeliveryRpt) {\n      sFormData += \"&delrpt=1\";\n    }\n\n    SMSGatewayRequestResult objSMSGatewayRequestResult =\n        m_SMSGatewayService.MakeServiceRequest(sUrl, sFormData, \"ID:\", true);\n\n    SendStatusCollection objSendStatusCollection =\n        PopulateSendStatus(sTo, objSMSGatewayRequestResult);\n\n    return objSendStatusCollection;\n  }\n"}, {"dataset": "encode", "exampleID": 9847, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new IllegalStateException()"], "tryExpressionStart": 52, "tryExpressionEnd": 56, "tryBlockStart": 52, "tryBlockEnd": 195, "catchExpressionStart": 108, "catchExpressionEnd": 147, "catchBlockStart": 108, "catchBlockEnd": 195, "exceptionHandlingCallStart": [161], "exceptionHandlingCallEnd": [188], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 71, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fathomdb/cloud/tree/master/fathomcloud-client/src/main/java/io/fathom/cloud/openstack/client/SimpleRestClient.java", "rawCode": "  protected static String urlEscape(String s) {\n    try {\n      return URLEncoder.encode(s, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new IllegalStateException();\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9848, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 8150, "focalAPIEnd": 8217, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Cookie(String,str)", "urlEncoder.encode(String,String)", "new Cookie(String,str)"], "useStart": [8109, 8969, 8902], "useEnd": [8218, 9036, 9037], "hasFinally": 1, "cleanUpCall": ["Transaction.rollback()"], "finallyExpressionStart": 9706, "finallyExpressionEnd": 9714, "finallyBlockStart": 9706, "finallyBlockEnd": 9789, "cleanUpCallStart": [9756], "cleanUpCallEnd": [9770], "url": "https://github.com/sushain97/contestManagement/tree/master/src/contestWebsite/AdminPanel.java", "rawCode": "  @Override\n  public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    UserCookie userCookie = UserCookie.getCookie(req);\n    boolean loggedIn = userCookie != null && userCookie.authenticate();\n    if (loggedIn && userCookie.isAdmin()) {\n      Map<String, String[]> params = req.getParameterMap();\n\n      DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();\n      Transaction txn = datastore.beginTransaction(TransactionOptions.Builder.withXG(true));\n      try {\n        Entity info = Retrieve.contestInfo();\n        Entity contestInfo = info != null ? info : new Entity(\"contestInfo\");\n        String view = params.get(\"view\")[0];\n\n        boolean testingMode;\n        if (view.equals(\"general\")) {\n          testingMode = params.get(\"testing\") != null && !params.containsKey(\"changePass\");\n        } else if (contestInfo.hasProperty(\"testingMode\")) {\n          testingMode = (boolean) contestInfo.getProperty(\"testingMode\");\n        } else {\n          testingMode = false;\n        }\n\n        String[] stringPropNames = {}, textPropNames = {};\n\n        if (view.equals(\"general\")) {\n          contestInfo.setProperty(\"levels\", StringUtils.join(params.get(\"levels\"), \"+\"));\n          contestInfo.setProperty(\"price\", Integer.parseInt(params.get(\"price\")[0]));\n          contestInfo.setProperty(\"testingMode\", testingMode);\n          contestInfo.setProperty(\"complete\", params.get(\"complete\") != null);\n          contestInfo.setProperty(\"hideFullNames\", params.get(\"fullnames\") != null);\n\n          stringPropNames =\n              new String[] {\n                \"title\",\n                \"endDate\",\n                \"startDate\",\n                \"editStartDate\",\n                \"editEndDate\",\n                \"classificationQuestion\",\n                \"testDownloadURL\"\n              };\n        } else if (view.equals(\"tabulation\")) {\n          for (Level level : Level.values()) {\n            String[] docNames = params.get(\"doc\" + level.getName());\n            if (docNames != null) {\n              contestInfo.setProperty(\"doc\" + level.getName(), docNames[0]);\n            }\n\n            String[] schoolGroupsParam = params.get(level.toString() + \"SchoolGroups\");\n            if (schoolGroupsParam != null) {\n              try {\n                Yaml yaml = new Yaml();\n                Map<String, List<String>> schoolGroups =\n                    (Map<String, List<String>>) yaml.load(schoolGroupsParam[0]);\n                Map<String, String> schoolGroupNames = new HashMap<String, String>();\n                if (schoolGroups == null) {\n                  schoolGroups = new HashMap<String, List<String>>();\n                }\n                for (Entry<String, List<String>> schoolGroupEntry : schoolGroups.entrySet()) {\n                  for (String school : schoolGroupEntry.getValue()) {\n                    schoolGroupNames.put(school, schoolGroupEntry.getKey());\n                  }\n                }\n                contestInfo.setProperty(\n                    level.toString() + \"SchoolGroups\", new Text(schoolGroupsParam[0]));\n                contestInfo.setProperty(\n                    level.toString() + \"SchoolGroupsNames\",\n                    new Text(new Yaml().dump(schoolGroupNames)));\n              } catch (Exception e) {\n                e.printStackTrace();\n                resp.sendError(HttpServletResponse.SC_BAD_REQUEST, e.toString());\n                return;\n              }\n            }\n          }\n\n          for (Subject subject : Subject.values()) {\n            String[] subjectColors = params.get(\"color\" + subject.getName());\n            if (subjectColors != null) {\n              contestInfo.setProperty(\"color\" + subject.getName(), subjectColors[0]);\n            }\n          }\n\n          if (params.get(\"submitType\")[0].equals(\"enqueueTabulationTask\")) {\n            Queue queue = QueueFactory.getDefaultQueue();\n            TaskOptions options =\n                withUrl(\"/tabulate\").retryOptions(RetryOptions.Builder.withTaskRetryLimit(0));\n\n            for (Level level : Level.values()) {\n              String[] docNames = params.get(\"doc\" + level.getName());\n              if (docNames != null) {\n                options.param(\"doc\" + level.getName(), docNames[0]);\n              }\n            }\n\n            queue.add(options);\n          }\n        } else if (view.equals(\"content\")) {\n          GeoPt location =\n              new GeoPt(\n                  Float.parseFloat(params.get(\"location_lat\")[0]),\n                  Float.parseFloat(params.get(\"location_long\")[0]));\n          contestInfo.setProperty(\"location\", location);\n\n          Yaml yaml = new Yaml();\n          String[] mapPropNames = {\"schedule\", \"directions\"};\n          for (String propName : mapPropNames) {\n            String text = params.get(propName)[0];\n\n            try {\n              @SuppressWarnings(\"unused\")\n              HashMap<String, String> map = (HashMap<String, String>) yaml.load(text);\n              contestInfo.setProperty(propName, new Text(text));\n            } catch (Exception e) {\n              e.printStackTrace();\n              resp.sendError(HttpServletResponse.SC_BAD_REQUEST, e.toString());\n              return;\n            }\n          }\n\n          String slideshowText = params.get(\"slideshow\")[0];\n          try {\n            @SuppressWarnings(\"unused\")\n            ArrayList<ArrayList<String>> list =\n                (ArrayList<ArrayList<String>>) yaml.load(slideshowText);\n            contestInfo.setProperty(\"slideshow\", new Text(slideshowText));\n          } catch (Exception e) {\n            e.printStackTrace();\n            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, e.toString());\n            return;\n          }\n\n          stringPropNames = new String[] {\"school\", \"address\"};\n          textPropNames = new String[] {\"aboutText\"};\n        } else if (view.equals(\"awards\")) {\n          JSONObject awardCriteria = new JSONObject(), qualifyingCriteria = new JSONObject();\n          ;\n          for (Entry<String, String[]> entry : params.entrySet()) {\n            if (entry.getKey().startsWith(\"counts_\")) {\n              awardCriteria.put(\n                  entry.getKey().replace(\"counts_\", \"\"), Integer.parseInt(entry.getValue()[0]));\n            } else if (entry.getKey().startsWith(\"qualifying_\")) {\n              if (!entry.getValue()[0].isEmpty()) {\n                qualifyingCriteria.put(\n                    entry.getKey().replace(\"qualifying_\", \"\"),\n                    Integer.parseInt(entry.getValue()[0]));\n              }\n            }\n          }\n          contestInfo.setProperty(\"awardCriteria\", new Text(awardCriteria.toString()));\n          contestInfo.setProperty(\"qualifyingCriteria\", new Text(qualifyingCriteria.toString()));\n        } else if (view.equals(\"emails\")) {\n          stringPropNames = new String[] {\"email\", \"account\"};\n          textPropNames = new String[] {\"forgotPassEmail\", \"questionEmail\", \"registrationEmail\"};\n        } else if (view.equals(\"apis\")) {\n          stringPropNames =\n              new String[] {\n                \"OAuth2ClientSecret\",\n                \"OAuth2ClientId\",\n                \"siteVerification\",\n                \"publicKey\",\n                \"privateKey\"\n              };\n          textPropNames = new String[] {\"googleAnalytics\"};\n        }\n\n        for (String propName : stringPropNames) {\n          contestInfo.setProperty(propName, params.get(propName)[0]);\n        }\n\n        for (String propName : textPropNames) {\n          contestInfo.setProperty(propName, new Text(params.get(propName)[0]));\n        }\n\n        datastore.put(contestInfo);\n\n        Query query =\n            new Query(\"user\")\n                .setFilter(new FilterPredicate(\"user-id\", FilterOperator.EQUAL, \"admin\"));\n        Entity user = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(1)).get(0);\n        String hash = (String) user.getProperty(\"hash\");\n        String salt = (String) user.getProperty(\"salt\");\n\n        if (testingMode) {\n          String newHash = Password.getSaltedHash(\"password\");\n          resp.addCookie(\n              new Cookie(\n                  \"user-id\", URLEncoder.encode(\"admin\" + \"$\" + newHash.split(\"\\\\$\")[1], \"UTF-8\")));\n\n          user.setProperty(\"salt\", newHash.split(\"\\\\$\")[0]);\n          user.setProperty(\"hash\", newHash.split(\"\\\\$\")[1]);\n          datastore.put(user);\n          resp.sendRedirect(\"/adminPanel?updated=1\");\n        } else if (params.containsKey(\"changePass\")) {\n          String curPassword = params.get(\"curPassword\")[0];\n          String confPassword = params.get(\"confPassword\")[0];\n          String newPassword = params.get(\"newPassword\")[0];\n\n          if (Password.check(curPassword, salt + \"$\" + hash)) {\n            if (confPassword.equals(newPassword)) {\n              String newHash = Password.getSaltedHash(newPassword);\n              resp.addCookie(\n                  new Cookie(\n                      \"user-id\",\n                      URLEncoder.encode(\"admin\" + \"$\" + newHash.split(\"\\\\$\")[1], \"UTF-8\")));\n\n              user.setProperty(\"salt\", newHash.split(\"\\\\$\")[0]);\n              user.setProperty(\"hash\", newHash.split(\"\\\\$\")[1]);\n              datastore.put(user);\n              resp.sendRedirect(\"/adminPanel?updated=1\");\n            } else {\n              resp.sendRedirect(\"/adminPanel?confPassError=1\");\n            }\n          } else {\n            resp.sendRedirect(\"/adminPanel?passError=1\");\n          }\n        } else {\n          resp.sendRedirect(\"/adminPanel?updated=1\");\n        }\n        txn.commit();\n      } catch (Exception e) {\n        e.printStackTrace();\n        resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.toString());\n      } finally {\n        if (txn.isActive()) {\n          txn.rollback();\n        }\n      }\n    } else {\n      resp.sendError(\n          HttpServletResponse.SC_FORBIDDEN,\n          \"Contest Administrator privileges required for that operation\");\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9849, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 251, "tryExpressionEnd": 255, "tryBlockStart": 251, "tryBlockEnd": 393, "catchExpressionStart": 310, "catchExpressionEnd": 349, "catchBlockStart": 310, "catchBlockEnd": 393, "exceptionHandlingCallStart": [363], "exceptionHandlingCallEnd": [386], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 270, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mogotest/selenium/tree/master/selenium/src/java/com/thoughtworks/selenium/DefaultRemoteCommand.java", "rawCode": "  /**\n   * Encodes the text as an URL using UTF-8.\n   *\n   * @param text the text too encode\n   * @return the encoded URI string\n   * @see URLEncoder#encode(java.lang.String, java.lang.String)\n   */\n  public static String urlEncode(String text) {\n    try {\n      return URLEncoder.encode(text, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9850, "initialization": ["String s = String.replace(String,String)"], "initializationStart": [185], "initializationEnd": [225], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 233, "tryExpressionEnd": 237, "tryBlockStart": 233, "tryBlockEnd": 425, "catchExpressionStart": 348, "catchExpressionEnd": 387, "catchBlockStart": 348, "catchBlockEnd": 425, "exceptionHandlingCallStart": [397], "exceptionHandlingCallEnd": [416], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 283, "focalAPIEnd": 318, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/TextReader/src/com/svo/laohan/util/StringUtil.java", "rawCode": "  /**\n   * 对URL编码\n   *\n   * @param uri 下载地址或者路径\n   * @return\n   */\n  public static String encode(String uri) {\n    if (uri.startsWith(\"http://bcs.duapp.com/\")) {\n      String downUrl = uri.replace(\"http://bcs.duapp.com/\", \"\");\n      try {\n        downUrl = \"http://bcs.duapp.com/\" + URLEncoder.encode(downUrl, \"utf-8\").replace(\"%2F\", \"/\");\n      } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n      }\n      return downUrl;\n    } else if (uri.startsWith(\"/\")) {\n      try {\n        return \"http://bcs.duapp.com/laohan\" + URLEncoder.encode(uri, \"utf-8\").replace(\"%2F\", \"/\");\n      } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n      }\n      return \"\";\n    } else {\n      return uri;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9851, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new Error(String,*)"], "tryExpressionStart": 1218, "tryExpressionEnd": 1222, "tryBlockStart": 1218, "tryBlockEnd": 1489, "catchExpressionStart": 1328, "catchExpressionEnd": 1367, "catchBlockStart": 1328, "catchBlockEnd": 1489, "exceptionHandlingCallStart": [1427], "exceptionHandlingCallEnd": [1478], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1246, "focalAPIEnd": 1284, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.replace(char,char)"], "useStart": [1246], "useEnd": [1302], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mmx900/ManalithBot/tree/master/ManalithBotWeb/app/name/fraser/neil/plaintext/diff_match_patch.java", "rawCode": "    /**\n     * Emmulate GNU diff's format. Header: @@ -382,8 +481,9 @@ Indicies are printed as 1-based, not\n     * 0-based.\n     *\n     * @return The GNU diff string.\n     */\n    public String toString() {\n      String coords1, coords2;\n      if (this.length1 == 0) {\n        coords1 = this.start1 + \",0\";\n      } else if (this.length1 == 1) {\n        coords1 = Integer.toString(this.start1 + 1);\n      } else {\n        coords1 = (this.start1 + 1) + \",\" + this.length1;\n      }\n      if (this.length2 == 0) {\n        coords2 = this.start2 + \",0\";\n      } else if (this.length2 == 1) {\n        coords2 = Integer.toString(this.start2 + 1);\n      } else {\n        coords2 = (this.start2 + 1) + \",\" + this.length2;\n      }\n      StringBuilder text = new StringBuilder();\n      text.append(\"@@ -\").append(coords1).append(\" +\").append(coords2).append(\" @@\\n\");\n      // Escape the body of the patch with %xx notation.\n      for (Diff aDiff : this.diffs) {\n        switch (aDiff.operation) {\n          case INSERT:\n            text.append('+');\n            break;\n          case DELETE:\n            text.append('-');\n            break;\n          case EQUAL:\n            text.append(' ');\n            break;\n        }\n        try {\n          text.append(URLEncoder.encode(aDiff.text, \"UTF-8\").replace('+', ' ')).append(\"\\n\");\n        } catch (UnsupportedEncodingException e) {\n          // Not likely on modern system.\n          throw new Error(\"This system does not support UTF-8.\", e);\n        }\n      }\n      return unescapeForEncodeUriCompatability(text.toString());\n    }\n"}, {"dataset": "encode", "exampleID": 9852, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 595, "focalAPIEnd": 788, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaliste/unitime/tree/master/JavaSource/org/unitime/timetable/tags/Registration.java", "rawCode": "  public int doEndTag() throws JspException {\n    switch (iMethod) {\n      case hasMessage:\n        return EVAL_PAGE;\n      case message:\n        try {\n          if (Registration.sNote != null) pageContext.getOut().println(Registration.sNote);\n        } catch (IOException e) {\n        }\n        return EVAL_PAGE;\n      case status:\n        if (sMessage == null) return EVAL_PAGE;\n        try {\n          pageContext.getOut().println(sMessage);\n          if (isUpdate()) {\n            if (getSessionContext().hasPermission(Right.Registration)) {\n              String backUrl =\n                  URLEncoder.encode(\n                      ((HttpServletRequest) pageContext.getRequest()).getRequestURL().toString()\n                          + \"?refresh=1\",\n                      \"ISO-8859-1\");\n              pageContext\n                  .getOut()\n                  .println(\n                      \"<br><span style=\\\"font-size: x-small;\\\">Click <a \"\n                          + \"onMouseOver=\\\"this.style.cursor='hand';this.style.cursor='pointer';\\\" \"\n                          + \"onClick=\\\"showGwtDialog('UniTime \"\n                          + Constants.VERSION\n                          + \" Registration', 'https://unitimereg.appspot.com?key=\"\n                          + sKey\n                          + \"&back=\"\n                          + backUrl\n                          + \"', '750px', '75%');\\\" \"\n                          + \"title='UniTime \"\n                          + Constants.VERSION\n                          + \" Registration'>here</a> to \"\n                          + (sRegistered ? \"update the current registration\" : \"register\")\n                          + \".\"\n                          + \"</span>\");\n              pageContext\n                  .getOut()\n                  .println(\n                      \"<script>function gwtOnLoad() { gwtShowMessage(\\\"\"\n                          + sMessage\n                          + \"<br><span style='font-size: x-small;'>Click <a \"\n                          + \"onMouseOver=\\\\\\\"this.style.cursor='hand';this.style.cursor='pointer';\\\\\\\" \"\n                          + \"onCLick=\\\\\\\"showGwtDialog('UniTime \"\n                          + Constants.VERSION\n                          + \" Registration', 'https://unitimereg.appspot.com?key=\"\n                          + sKey\n                          + \"&back=\"\n                          + backUrl\n                          + \"', '750px', '75%');\\\\\\\" \"\n                          + \"title='UniTime \"\n                          + Constants.VERSION\n                          + \" Registration'>here</a> to \"\n                          + (sRegistered ? \"update the current registration\" : \"register\")\n                          + \".\"\n                          + \"</span>\\\"); }</script>\");\n            } else {\n              pageContext\n                  .getOut()\n                  .println(\n                      \"<script>function gwtOnLoad() { gwtShowMessage(\\\"\"\n                          + sMessage\n                          + \"\\\"); }</script>\");\n            }\n          }\n        } catch (IOException e) {\n        }\n        return EVAL_PAGE;\n      default:\n        return EVAL_PAGE;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9853, "initialization": ["String s = getLabel()"], "initializationStart": [144], "initializationEnd": [157], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["getMessage()", "new ClusterException(*)"], "tryExpressionStart": 177, "tryExpressionEnd": 181, "tryBlockStart": 177, "tryBlockEnd": 358, "catchExpressionStart": 254, "catchExpressionEnd": 293, "catchBlockStart": 254, "catchBlockEnd": 358, "exceptionHandlingCallStart": [332, 311], "exceptionHandlingCallEnd": [346, 347], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 201, "focalAPIEnd": 242, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dvn/dvn-svn-import-test4/tree/master/text-app/trunk/src/text-ear/text-war/src/java/edu/harvard/iq/text/ClusterSolution.java", "rawCode": "  public String getClusterLabels() {\n    String str = \"\";\n    for (ClusterInfo ci : clusterInfoList) {\n      // str+=(ci.getLabel());\n      if (ci.getLabel() != null) {\n        try {\n\n          str += URLEncoder.encode(ci.getLabel(), \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          throw new ClusterException(e.getMessage());\n        }\n      }\n      str += this.CLUSTER_LABEL_DELIMITER;\n    }\n    return str;\n  }\n"}, {"dataset": "encode", "exampleID": 9854, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 180, "tryExpressionEnd": 184, "tryBlockStart": 180, "tryBlockEnd": 518, "catchExpressionStart": 410, "catchExpressionEnd": 430, "catchBlockStart": 410, "catchBlockEnd": 518, "exceptionHandlingCallStart": [438], "exceptionHandlingCallEnd": [485], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 288, "focalAPIEnd": 327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/beangle/library/tree/master/commons/web/src/main/java/org/beangle/commons/web/util/RequestUtils.java", "rawCode": "  public static String encodeAttachName(HttpServletRequest request, String attach_name) {\n    String agent = request.getHeader(\"USER-AGENT\");\n    String newName = attach_name;\n    try {\n      if (null != agent && (agent.contains(\"MSIE\") || agent.contains(\"Trident\"))) {\n        newName = URLEncoder.encode(attach_name, \"UTF-8\");\n      } else {\n        newName = new BCoder().encode(attach_name);\n      }\n    } catch (Exception e) {\n      logger.error(\"cannot encode \" + attach_name, e);\n      return attach_name;\n    }\n    return newName;\n  }\n"}, {"dataset": "encode", "exampleID": 9855, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 218, "focalAPIEnd": 250, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Adamki11s/QuestX/tree/master/src/com/adamki11s/metrics/Metrics.java", "rawCode": "  /**\n   * Encode text as UTF-8\n   *\n   * @param text the text to encode\n   * @return the encoded text, as UTF-8\n   */\n  private static String encode(final String text) throws UnsupportedEncodingException {\n    return URLEncoder.encode(text, \"UTF-8\");\n  }\n"}, {"dataset": "encode", "exampleID": 9856, "initialization": ["String s = getKey()"], "initializationStart": [659], "initializationEnd": [673], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new IllegalStateException(*)"], "tryExpressionStart": 499, "tryExpressionEnd": 503, "tryBlockStart": 499, "tryBlockEnd": 1173, "catchExpressionStart": 1081, "catchExpressionEnd": 1120, "catchBlockStart": 1081, "catchBlockEnd": 1173, "exceptionHandlingCallStart": [1136], "exceptionHandlingCallEnd": [1164], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 882, "focalAPIEnd": 922, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(*,String)"], "useStart": [1007], "useEnd": [1049], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 2520, "finallyExpressionEnd": 2528, "finallyBlockStart": 2520, "finallyBlockEnd": 2595, "cleanUpCallStart": [2566], "cleanUpCallEnd": [2576], "url": "https://github.com/SiteView/NEWECC9.2/tree/master/releng/org.eclipse.epp.mpc.core/src/org/eclipse/epp/internal/mpc/core/service/RemoteMarketplaceService.java", "rawCode": "  @SuppressWarnings({\"unchecked\"})\n  protected T processRequest(String baseUri, String relativePath, IProgressMonitor monitor)\n      throws CoreException {\n    checkConfiguration();\n    if (baseUri == null || relativePath == null) {\n      throw new IllegalArgumentException();\n    }\n\n    String uri = baseUri;\n    if (!uri.endsWith(\"/\") && !relativePath.startsWith(\"/\")) { // $NON-NLS-1$ //$NON-NLS-2$\n      uri += '/';\n    }\n    uri += relativePath;\n\n    if (requestMetaParameters != null) {\n      try {\n        boolean hasQueryString = uri.indexOf('?') != -1;\n        for (Map.Entry<String, String> param : requestMetaParameters.entrySet()) {\n          if (param.getKey() == null) {\n            continue;\n          }\n          if (hasQueryString) {\n            uri += '&';\n          } else {\n            hasQueryString = true;\n            uri += '?';\n          }\n          uri += URLEncoder.encode(param.getKey(), UTF_8);\n          uri += '=';\n          if (param.getValue() != null) {\n            uri += URLEncoder.encode(param.getValue(), UTF_8);\n          }\n        }\n      } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n      }\n    }\n\n    URI location;\n    try {\n      location = new URI(uri);\n    } catch (URISyntaxException e) {\n      String message = NLS.bind(Messages.DefaultMarketplaceService_invalidLocation, uri);\n      throw new CoreException(createErrorStatus(message, e));\n    }\n\n    final Unmarshaller unmarshaller = new Unmarshaller();\n    monitor.beginTask(\n        NLS.bind(Messages.DefaultMarketplaceService_retrievingDataFrom, baseUri), 100);\n    try {\n      SAXParserFactory parserFactory = SAXParserFactory.newInstance();\n      parserFactory.setNamespaceAware(true);\n      final XMLReader xmlReader;\n      try {\n        xmlReader = parserFactory.newSAXParser().getXMLReader();\n      } catch (Exception e1) {\n        throw new IllegalStateException(e1);\n      }\n      xmlReader.setContentHandler(unmarshaller);\n\n      InputStream in = transport.stream(location, monitor);\n      try {\n        monitor.worked(30);\n\n        // FIXME how can the charset be determined?\n        Reader reader = new InputStreamReader(new BufferedInputStream(in), UTF_8);\n        try {\n          xmlReader.parse(new InputSource(reader));\n        } catch (final SAXException e) {\n          MarketplaceClientCore.error(\n              NLS.bind(Messages.DefaultMarketplaceService_parseError, location.toString()), e);\n          throw new IOException(e.getMessage());\n        }\n      } finally {\n        if (in != null) {\n          in.close();\n        }\n      }\n    } catch (IOException e) {\n      if (e.getCause() instanceof OperationCanceledException) {\n        throw new CoreException(Status.CANCEL_STATUS);\n      }\n      String message =\n          NLS.bind(\n              Messages.DefaultMarketplaceService_cannotCompleteRequest_reason,\n              location.toString(),\n              e.getMessage());\n      throw new CoreException(createErrorStatus(message, e));\n    } finally {\n      monitor.done();\n    }\n\n    Object model = unmarshaller.getModel();\n    if (model == null) {\n      // if we reach here this should never happen\n      throw new IllegalStateException();\n    } else {\n      try {\n        return (T) model;\n      } catch (Exception e) {\n        String message =\n            NLS.bind(\n                Messages.DefaultMarketplaceService_unexpectedResponseContent,\n                model.getClass().getSimpleName());\n        throw new CoreException(createErrorStatus(message, null));\n      }\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9857, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 50, "tryExpressionEnd": 54, "tryBlockStart": 50, "tryBlockEnd": 218, "catchExpressionStart": 135, "catchExpressionEnd": 174, "catchBlockStart": 135, "catchBlockEnd": 218, "exceptionHandlingCallStart": [188], "exceptionHandlingCallEnd": [211], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 69, "focalAPIEnd": 102, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.replaceAll(String,String)"], "useStart": [69], "useEnd": [127], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neo4j-attic/server/tree/master/server/src/main/java/org/neo4j/server/rest/domain/URIHelper.java", "rawCode": "  public static String encode(String value) {\n    try {\n      return URLEncoder.encode(value, \"utf-8\").replaceAll(\"\\\\+\", \"%20\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9858, "initialization": ["String s = Enumeration<?>.nextElement()"], "initializationStart": [234], "initializationEnd": [249], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["Log.error(String)"], "tryExpressionStart": 117, "tryExpressionEnd": 121, "tryBlockStart": 117, "tryBlockEnd": 606, "catchExpressionStart": 501, "catchExpressionEnd": 541, "catchBlockStart": 501, "catchBlockEnd": 606, "exceptionHandlingCallStart": [549], "exceptionHandlingCallEnd": [599], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "req.getParameterValues(s,)", "guardType": "LOOP {", "guardExpressionStart": 259, "guardExpressionEnd": 308, "guardBlockStart": 259, "guardBlockEnd": 486, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 331, "focalAPIEnd": 363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(*,String)"], "useStart": [321, 414], "useEnd": [364, 447], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.3.3/kernel-util/src/main/java/org/sakaiproject/util/Validator.java", "rawCode": "  public static String generateQueryString(HttpServletRequest req) {\n    StringBuilder sb = new StringBuilder();\n    try {\n      for (Enumeration<?> e = req.getParameterNames(); e.hasMoreElements(); ) {\n        String name = (String) e.nextElement();\n        for (String value : req.getParameterValues(name)) {\n          sb.append(URLEncoder.encode(name, \"UTF-8\"))\n              .append(\"=\")\n              .append(URLEncoder.encode(value, \"UTF-8\"))\n              .append(\"&\");\n        }\n      }\n    } catch (UnsupportedEncodingException ex) {\n      M_log.error(\"No UTF-8 Encoding on this JVM, !!!!\");\n    }\n    if (sb.length() < 1) return null;\n    return sb.substring(0, sb.length() - 1);\n  }\n"}, {"dataset": "encode", "exampleID": 9859, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 70, "focalAPIEnd": 99, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jianglei/movie/tree/master/src/com/umeng/core/utils/StringUtil.java", "rawCode": "  public static String encodeGBK(String str) {\n    try {\n      return URLEncoder.encode(str, \"GBK\");\n    } catch (UnsupportedEncodingException e) {\n      return str;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9860, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new MotechException(String)"], "tryExpressionStart": 325, "tryExpressionEnd": 329, "tryBlockStart": 325, "tryBlockEnd": 543, "catchExpressionStart": 383, "catchExpressionEnd": 422, "catchBlockStart": 383, "catchBlockEnd": 543, "exceptionHandlingCallStart": [436], "exceptionHandlingCallEnd": [536], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 344, "focalAPIEnd": 375, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/motech/GHANA-National/tree/master/ghana-national-core/src/main/java/org/motechproject/ghana/national/builder/IVRCallbackUrlBuilder.java", "rawCode": "  public String outboundCallUrl(String patientId) {\n    String url =\n        \"http://\"\n            + host\n            + \":\"\n            + port\n            + \"/\"\n            + contextPath\n            + \"/verboice/ivr?&Digits=\"\n            + patientId\n            + \"&type=verboice&ln=en&tree=OutboundDecisionTree&trP=Lw\";\n    try {\n      return URLEncoder.encode(url, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new MotechException(\n          \"Encountered exception while encoding verboice outbound url, \" + url);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9861, "initialization": ["String s = String.replace(String,String)"], "initializationStart": [326], "initializationEnd": [368], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 488, "tryExpressionEnd": 492, "tryBlockStart": 488, "tryBlockEnd": 690, "catchExpressionStart": 576, "catchExpressionEnd": 615, "catchBlockStart": 576, "catchBlockEnd": 690, "exceptionHandlingCallStart": [664], "exceptionHandlingCallEnd": [683], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(s.endsWith(\".gif\",))", "guardType": "IF {", "guardExpressionStart": 431, "guardExpressionEnd": 456, "guardBlockStart": 431, "guardBlockEnd": 482, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 537, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jnrainerds/jnrain-android/tree/master/app/src/main/java/org/jnrain/mobile/ui/JNRainURLImageGetter.java", "rawCode": "  @Override\n  protected String transformRelativeSource(String source) {\n    // XXX Kludge to avoid having to deal with 302 and cookies\n    // This is only needed to interface w/ KBS, will be thrown once\n    // we switch to the weiyu infrastructure.\n    String tmp = source;\n    if (tmp.startsWith(\"downip.php\")) {\n      tmp = source.replace(\"downip.php\", \"bbscon.php\");\n    }\n\n    // Bypass the thumbnail gateway for GIF files\n    if (tmp.endsWith(\".gif\")) {\n      return tmp;\n    }\n\n    try {\n      return \"http://mobpic.jnrain.com/\" + URLEncoder.encode(tmp, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    return tmp;\n  }\n"}, {"dataset": "encode", "exampleID": 9862, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 55, "tryExpressionEnd": 59, "tryBlockStart": 55, "tryBlockEnd": 199, "catchExpressionStart": 116, "catchExpressionEnd": 155, "catchBlockStart": 116, "catchBlockEnd": 199, "exceptionHandlingCallStart": [169], "exceptionHandlingCallEnd": [192], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 74, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Nerdwin15/stash-jenkins-postreceive-webhook/tree/master/src/main/java/com/nerdwin15/stash/webhook/Notifier.java", "rawCode": "  private static String urlEncode(String string) {\n    try {\n      return URLEncoder.encode(string, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9863, "initialization": ["String s = getKey()"], "initializationStart": [577], "initializationEnd": [587], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new HttpClientException(String,*)"], "tryExpressionStart": 149, "tryExpressionEnd": 153, "tryBlockStart": 149, "tryBlockEnd": 7147, "catchExpressionStart": 1073, "catchExpressionEnd": 1112, "catchBlockStart": 1073, "catchBlockEnd": 1224, "exceptionHandlingCallStart": [1167], "exceptionHandlingCallEnd": [1211], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 655, "focalAPIEnd": 695, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(String,String)"], "useStart": [644, 746], "useEnd": [696, 787], "hasFinally": 1, "cleanUpCall": ["UncloseableInputStream.forceClose()"], "finallyExpressionStart": 6717, "finallyExpressionEnd": 6725, "finallyBlockStart": 6717, "finallyBlockEnd": 7147, "cleanUpCallStart": [7069], "cleanUpCallEnd": [7095], "url": "https://github.com/pixmob/freemobilenetstat/tree/master/deps/httpclient/src/org/pixmob/httpclient/HttpRequestBuilder.java", "rawCode": "  public HttpResponse execute() throws HttpClientException {\n    HttpURLConnection conn = null;\n    UncloseableInputStream payloadStream = null;\n    try {\n      if (parameters != null && !parameters.isEmpty()) {\n        final StringBuilder buf = new StringBuilder(256);\n        if (HTTP_GET.equals(method) || HTTP_HEAD.equals(method)) {\n          buf.append('?');\n        }\n\n        int paramIdx = 0;\n        for (final Map.Entry<String, String> e : parameters.entrySet()) {\n          if (paramIdx != 0) {\n            buf.append(\"&\");\n          }\n          final String name = e.getKey();\n          final String value = e.getValue();\n          buf.append(URLEncoder.encode(name, CONTENT_CHARSET))\n              .append(\"=\")\n              .append(URLEncoder.encode(value, CONTENT_CHARSET));\n          ++paramIdx;\n        }\n\n        if (!contentSet\n            && (HTTP_POST.equals(method)\n                || HTTP_DELETE.equals(method)\n                || HTTP_PUT.equals(method))) {\n          try {\n            content = buf.toString().getBytes(CONTENT_CHARSET);\n          } catch (UnsupportedEncodingException e) {\n            // Unlikely to happen.\n            throw new HttpClientException(\"Encoding error\", e);\n          }\n        } else {\n          uri += buf;\n        }\n      }\n\n      conn = (HttpURLConnection) new URL(uri).openConnection();\n      conn.setConnectTimeout(hc.getConnectTimeout());\n      conn.setReadTimeout(hc.getReadTimeout());\n      conn.setAllowUserInteraction(false);\n      conn.setInstanceFollowRedirects(false);\n      conn.setRequestMethod(method);\n      conn.setUseCaches(false);\n      conn.setDoInput(true);\n\n      if (headers != null && !headers.isEmpty()) {\n        for (final Map.Entry<String, List<String>> e : headers.entrySet()) {\n          final List<String> values = e.getValue();\n          if (values != null) {\n            final String name = e.getKey();\n            for (final String value : values) {\n              conn.addRequestProperty(name, value);\n            }\n          }\n        }\n      }\n\n      if (cookies != null && !cookies.isEmpty()\n          || hc.getInMemoryCookies() != null && !hc.getInMemoryCookies().isEmpty()) {\n        final StringBuilder cookieHeaderValue = new StringBuilder(256);\n        prepareCookieHeader(cookies, cookieHeaderValue);\n        prepareCookieHeader(hc.getInMemoryCookies(), cookieHeaderValue);\n        conn.setRequestProperty(\"Cookie\", cookieHeaderValue.toString());\n      }\n\n      final String userAgent = hc.getUserAgent();\n      if (userAgent != null) {\n        conn.setRequestProperty(\"User-Agent\", userAgent);\n      }\n\n      conn.setRequestProperty(\"Connection\", \"close\");\n      conn.setRequestProperty(\"Location\", uri);\n      conn.setRequestProperty(\"Referrer\", uri);\n      conn.setRequestProperty(\"Accept-Encoding\", \"gzip,deflate\");\n      conn.setRequestProperty(\"Accept-Charset\", CONTENT_CHARSET);\n\n      if (conn instanceof HttpsURLConnection) {\n        setupSecureConnection(hc.getContext(), (HttpsURLConnection) conn);\n      }\n\n      if (HTTP_POST.equals(method) || HTTP_DELETE.equals(method) || HTTP_PUT.equals(method)) {\n        if (content != null) {\n          conn.setDoOutput(true);\n          if (!contentSet) {\n            conn.setRequestProperty(\n                \"Content-Type\", \"application/x-www-form-urlencoded; charset=\" + CONTENT_CHARSET);\n          } else if (contentType != null) {\n            conn.setRequestProperty(\"Content-Type\", contentType);\n          }\n          conn.setFixedLengthStreamingMode(content.length);\n\n          final OutputStream out = conn.getOutputStream();\n          out.write(content);\n          out.flush();\n        } else {\n          conn.setFixedLengthStreamingMode(0);\n        }\n      }\n\n      for (final HttpRequestHandler connHandler : reqHandlers) {\n        try {\n          connHandler.onRequest(conn);\n        } catch (HttpClientException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new HttpClientException(\"Failed to prepare request to \" + uri, e);\n        }\n      }\n\n      conn.connect();\n\n      final int statusCode = conn.getResponseCode();\n      if (statusCode == -1) {\n        throw new HttpClientException(\"Invalid response from \" + uri);\n      }\n      if (!expectedStatusCodes.isEmpty() && !expectedStatusCodes.contains(statusCode)) {\n        throw new HttpClientException(\n            \"Expected status code \" + expectedStatusCodes + \", got \" + statusCode);\n      } else if (expectedStatusCodes.isEmpty() && statusCode / 100 != 2) {\n        throw new HttpClientException(\"Expected status code 2xx, got \" + statusCode);\n      }\n\n      final Map<String, List<String>> headerFields = conn.getHeaderFields();\n      final Map<String, String> inMemoryCookies = hc.getInMemoryCookies();\n      if (headerFields != null) {\n        final List<String> newCookies = headerFields.get(\"Set-Cookie\");\n        if (newCookies != null) {\n          for (final String newCookie : newCookies) {\n            final String rawCookie = newCookie.split(\";\", 2)[0];\n            final int i = rawCookie.indexOf('=');\n            final String name = rawCookie.substring(0, i);\n            final String value = rawCookie.substring(i + 1);\n            inMemoryCookies.put(name, value);\n          }\n        }\n      }\n\n      if (isStatusCodeError(statusCode)) {\n        // Got an error: cannot read input.\n        payloadStream = new UncloseableInputStream(getErrorStream(conn));\n      } else {\n        payloadStream = new UncloseableInputStream(getInputStream(conn));\n      }\n      final HttpResponse resp =\n          new HttpResponse(\n              statusCode,\n              payloadStream,\n              headerFields == null ? NO_HEADERS : headerFields,\n              inMemoryCookies);\n      if (handler != null) {\n        try {\n          handler.onResponse(resp);\n        } catch (HttpClientException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new HttpClientException(\"Error in response handler\", e);\n        }\n      } else {\n        final File temp =\n            File.createTempFile(\"httpclient-req-\", \".cache\", hc.getContext().getCacheDir());\n        resp.preload(temp);\n        temp.delete();\n      }\n      return resp;\n    } catch (SocketTimeoutException e) {\n      if (handler != null) {\n        try {\n          handler.onTimeout();\n          return null;\n        } catch (HttpClientException e2) {\n          throw e2;\n        } catch (Exception e2) {\n          throw new HttpClientException(\"Error in response handler\", e2);\n        }\n      } else {\n        throw new HttpClientException(\"Response timeout from \" + uri, e);\n      }\n    } catch (IOException e) {\n      throw new HttpClientException(\"Connection failed to \" + uri, e);\n    } finally {\n      if (conn != null) {\n        if (payloadStream != null) {\n          // Fully read Http response:\n          // http://docs.oracle.com/javase/6/docs/technotes/guides/net/http-keepalive.html\n          try {\n            while (payloadStream.read(buffer) != -1) {;\n            }\n          } catch (IOException ignore) {\n          }\n          payloadStream.forceClose();\n        }\n        conn.disconnect();\n      }\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9864, "initialization": ["String s = TDUser.getApiKey()"], "initializationStart": [1939], "initializationEnd": [1955], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 2342, "focalAPIEnd": 2386, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["HttpServletResponse.sendRedirect(str)"], "useStart": [2023], "useEnd": [2387], "hasFinally": 1, "cleanUpCall": ["PrintWriter.flush()", "PrintWriter.close()"], "finallyExpressionStart": 3070, "finallyExpressionEnd": 3078, "finallyBlockStart": 3070, "finallyBlockEnd": 3121, "cleanUpCallStart": [3086, 3104], "cleanUpCallEnd": [3096, 3114], "url": "https://github.com/rodericj/TopDish/tree/master/server/old/java/TopDish/src/com/topdish/api/GoogleLoginServlet.java", "rawCode": "  /**\n   * Handles both a POST and a GET <br>\n   * Note: This is required as the POST will come from a Mobile User, where as the GET will occur on\n   * redirect from Google Auth\n   *\n   * @param req - the request\n   * @param resp - the response\n   * @throws ServletException\n   * @throws IOException\n   */\n  private void doLogic(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n\n    // Get Writer\n    final PrintWriter pw = resp.getWriter();\n\n    try {\n\n      // Get redirection url\n      final String redirect = req.getParameter(APIConstants.REDIRECT);\n\n      Logger.getLogger(TAG).info(\"Final Redirection is: \" + redirect);\n\n      // If login was successful (or user is already logged in)\n      if (TDUserService.isGoogleUser(req)) {\n        Logger.getLogger(TAG).info(\"User logged in, redirecting to: \" + redirect);\n\n        try {\n\n          TDUser user = null;\n\n          try {\n            // Get the user\n            user = TDUserService.getUser(req.getSession());\n          } catch (Exception e) {\n\n            Logger.getLogger(TAG).info(e.getMessage() + \" means no user.\");\n          }\n\n          if (null == user) {\n            Logger.getLogger(TAG).info(\"No user exists, creating a new user\");\n            final User gUser = UserServiceFactory.getUserService().getCurrentUser();\n            final String nickname =\n                (null != gUser.getNickname()\n                        && !gUser.getNickname().isEmpty()\n                        && gUser.getNickname().indexOf(\"@\") >= 0\n                    ? (gUser.getNickname().substring(0, gUser.getNickname().indexOf(\"@\")))\n                    : gUser.getEmail());\n            user = new TDUser(gUser, nickname, gUser.getEmail());\n            Datastore.put(user);\n          } else {\n            Logger.getLogger(TAG).info(\"User \" + user.getKey() + \" found.\");\n          }\n\n          Logger.getLogger(TAG).info(\"User's API Key is: \" + user.getApiKey());\n\n          // Redirect to given url with the TDUser Id\n          resp.sendRedirect(\n              redirect\n                  + (redirect.contains(\"?\") ? \"&\" : \"?\")\n                  + UserConstants.TDUSER_ID\n                  + \"=\"\n                  + user.getKey().getId()\n                  + \"&\"\n                  + UserConstants.API_KEY\n                  + \"=\"\n                  + URLEncoder.encode(user.getApiKey(), \"UTF-8\"));\n        } catch (Exception e) {\n          Logger.getLogger(TAG).error(e.getMessage(), e);\n          // Ensure some kind of redirect\n          resp.sendRedirect(redirect);\n        }\n      } else {\n        // Create a url\n        final String url = TDUserService.getGoogleLoginURL(\"/api/googleAuth?redirect=\" + redirect);\n        Logger.getLogger(TAG).info(\"User not logged in. Sending to Google Auth, URL: \" + url);\n\n        // Redirect to that url\n        resp.sendRedirect(url);\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      Logger.getLogger(TAG).error(e.getMessage());\n      // Notify of error\n      pw.write(APIUtils.generateJSONFailureMessage(e));\n    } finally {\n      pw.flush();\n      pw.close();\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9865, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 273, "focalAPIEnd": 315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RedirectResolution(str)"], "useStart": [171], "useEnd": [316], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/europeana/contrib/tree/master/repox/branches/repox_rhine/src/main/java/pt/utl/ist/repox/web/action/dataProvider/CreateEditDataSourceActionBean.java", "rawCode": "  public Resolution cancelDataSource() throws UnsupportedEncodingException {\n    // context.getMessages().add(new LocalizableMessage(\"common.cancel.message\"));\n    return new RedirectResolution(\n        \"/dataProvider/ViewDataProvider.action?dataProviderId=\"\n            + URLEncoder.encode(dataProviderId, \"UTF-8\"));\n  }\n"}, {"dataset": "encode", "exampleID": 9866, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 211, "focalAPIEnd": 245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URL(String,String,int,str)"], "useStart": [141], "useEnd": [246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.ua/tree/master/org.eclipse.ua.tests/help/org/eclipse/ua/tests/help/remote/ContextServletTest.java", "rawCode": "  protected Element[] getContextsFromServlet(String phrase) throws Exception {\n    int port = WebappManager.getPort();\n    URL url =\n        new URL(\n            \"http\", \"localhost\", port, \"/help/context?id=\" + URLEncoder.encode(phrase, \"UTF-8\"));\n    return makeServletCall(url);\n  }\n"}, {"dataset": "encode", "exampleID": 9867, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "java.io.UnsupportedEncodingException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 469, "tryExpressionEnd": 473, "tryBlockStart": 469, "tryBlockEnd": 927, "catchExpressionStart": 851, "catchExpressionEnd": 898, "catchBlockStart": 851, "catchBlockEnd": 927, "exceptionHandlingCallStart": [906], "exceptionHandlingCallEnd": [920], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 549, "focalAPIEnd": 593, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["encodeText(str,String,String)", "urlEncoder.encode(String,String)"], "useStart": [710, 799], "useEnd": [775, 843], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.3/kernel-util/src/main/java/org/sakaiproject/util/Web.java", "rawCode": "  /**\n   * * Encode filename (accomodating UTF-8 characters) for specific browser download/access * Sadly,\n   * Mozilla uses a different encoding scheme than everyone else * Sadly, Safari has a known bug\n   * where doesn't correctly translate encoding for user * * This method require inclusion of the\n   * javamail mail package.\n   */\n  public static String encodeFileName(HttpServletRequest req, String fileName) {\n    String agent = req.getHeader(\"USER-AGENT\");\n    try {\n      if (agent != null && agent.indexOf(\"MSIE\") >= 0)\n        fileName = java.net.URLEncoder.encode(fileName, \"UTF8\");\n      else if (agent != null && agent.indexOf(\"Mozilla\") >= 0 && agent.indexOf(\"Safari\") == -1)\n        fileName = javax.mail.internet.MimeUtility.encodeText(fileName, \"UTF8\", \"B\");\n      else fileName = java.net.URLEncoder.encode(fileName, \"UTF8\");\n    } catch (java.io.UnsupportedEncodingException e) {\n      M_log.error(e);\n    }\n\n    return fileName;\n  }\n"}, {"dataset": "encode", "exampleID": 9868, "initialization": ["String s = URL.toString()"], "initializationStart": [317], "initializationEnd": [331], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 355, "focalAPIEnd": 393, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URI(str)"], "useStart": [347], "useEnd": [394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eduardodaluz/xfire/tree/master/xfire-core/src/main/org/codehaus/xfire/util/Resolver.java", "rawCode": "  private void tryClasspath(String uriStr) throws IOException {\n    if (uriStr.startsWith(\"classpath:\")) {\n      uriStr = uriStr.substring(10);\n    }\n\n    URL url = ClassLoaderUtils.getResource(uriStr, getClass());\n\n    if (url == null) {\n      tryRemote(uriStr);\n    } else {\n      try {\n        String decodedURL = url.toString();\n        uri = new URI(URLEncoder.encode(decodedURL, \"UTF-8\"));\n      } catch (URISyntaxException e) {\n        // this occurs when you have spaces instead of '%20'...\n      }\n      is = url.openStream();\n      this.url = url;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9869, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 261, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(File,str)"], "useStart": [247], "useEnd": [304], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ScootrNova/ClassyGames/tree/master/projects/android/facebook/src/com/facebook/NativeAppCallAttachmentStore.java", "rawCode": "  File getAttachmentFile(UUID callId, String attachmentName, boolean createDirs)\n      throws IOException {\n    File dir = getAttachmentsDirectoryForCall(callId, createDirs);\n    if (dir == null) {\n      return null;\n    }\n\n    try {\n      return new File(dir, URLEncoder.encode(attachmentName, \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      return null;\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9870, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 432, "focalAPIEnd": 472, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(String,String)", "urlEncoder.encode(String,String)"], "useStart": [803, 1178], "useEnd": [843, 1218], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/marleau/cs122b_p3/tree/master/WebContent/WEB-INF/sources/Fabflix/ListResults.java", "rawCode": "  private void showRppOptions(\n      PrintWriter out,\n      String searchBy,\n      String arg,\n      String order,\n      Integer page,\n      Integer resultsPerPage)\n      throws UnsupportedEncodingException {\n    // ===Results per page\n    out.println(\"Results per page: \");\n\n    if (!(resultsPerPage == 5)) {\n      out.println(\n          \"<a href=\\\"ListResults?by=\"\n              + searchBy\n              + \"&arg=\"\n              + java.net.URLEncoder.encode(arg, \"UTF-8\")\n              + \"&page=\"\n              + page\n              + \"&rpp=5&order=\"\n              + order\n              + \"\\\">5</a>\");\n    } else {\n      out.println(\"5\");\n    }\n\n    if (!(resultsPerPage == 25)) {\n      out.println(\n          \"<a href=\\\"ListResults?by=\"\n              + searchBy\n              + \"&arg=\"\n              + java.net.URLEncoder.encode(arg, \"UTF-8\")\n              + \"&page=\"\n              + page\n              + \"&rpp=25&order=\"\n              + order\n              + \"\\\">25</a>\");\n    } else {\n      out.println(\"25\");\n    }\n\n    if (!(resultsPerPage == 100)) {\n      out.println(\n          \"<a href=\\\"ListResults?by=\"\n              + searchBy\n              + \"&arg=\"\n              + java.net.URLEncoder.encode(arg, \"UTF-8\")\n              + \"&page=\"\n              + page\n              + \"&rpp=100&order=\"\n              + order\n              + \"\\\">100</a>\");\n    } else {\n      out.println(\"100\");\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9871, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 546, "tryExpressionEnd": 550, "tryBlockStart": 546, "tryBlockEnd": 723, "catchExpressionStart": 615, "catchExpressionEnd": 655, "catchBlockStart": 615, "catchBlockEnd": 723, "exceptionHandlingCallStart": [669], "exceptionHandlingCallEnd": [716], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 567, "focalAPIEnd": 607, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fvilla/imt/tree/master/org.integratedmodelling.thinklab.core/src/main/java/org/integratedmodelling/utils/Escape.java", "rawCode": "  /**\n   * Synonym for <tt>URLEncoder.encode(String, \"UTF-8\")</tt>.\n   *\n   * <p>Used to ensure that HTTP query strings are in proper form, by escaping special characters\n   * such as spaces.\n   *\n   * <p>It is important to note that if a query string appears in an <tt>HREF</tt> attribute, then\n   * there are two issues - ensuring the query string is valid HTTP (it is URL-encoded), and\n   * ensuring it is valid HTML (ensuring the ampersand is escaped).\n   */\n  public static String forURL(String aURLFragment) {\n    String result = null;\n    try {\n      result = URLEncoder.encode(aURLFragment, \"UTF-8\");\n    } catch (UnsupportedEncodingException ex) {\n      throw new RuntimeException(\"UTF-8 not supported\", ex);\n    }\n    return result;\n  }\n"}, {"dataset": "encode", "exampleID": 9872, "initialization": ["String s = Iterator<String>.next()"], "initializationStart": [654], "initializationEnd": [666], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 783, "focalAPIEnd": 815, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(*,String)"], "useStart": [770, 866], "useEnd": [816, 903], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/transmart/transmartApp/tree/master/src/java/net/balusc/util/HttpServletUtil.java", "rawCode": "  /**\n   * Create a query string based on the given parameter map and the given charset encoding.\n   *\n   * @param parameterMap The parameter map to be processed as query parameters.\n   * @param charset The encoding to be applied.\n   * @return The parameter map as query string.\n   * @throws UnsupportedEncodingException If the given charset is not supported.\n   */\n  public static String createQuery(Map<String, String[]> parameterMap, String charset)\n      throws UnsupportedEncodingException {\n    StringBuilder query = new StringBuilder();\n\n    for (Iterator<String> names = parameterMap.keySet().iterator(); names.hasNext(); ) {\n      String name = names.next();\n      String[] values = parameterMap.get(name);\n\n      for (int i = 0; i < values.length; ) {\n        query.append(URLEncoder.encode(name, charset));\n        query.append(\"=\");\n        query.append(URLEncoder.encode(values[i], charset));\n\n        if (++i < values.length) {\n          query.append(\"&\");\n        }\n      }\n\n      if (names.hasNext()) {\n        query.append(\"&\");\n      }\n    }\n\n    return query.toString();\n  }\n"}, {"dataset": "encode", "exampleID": 9873, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s)", "focalAPIStart": 369, "focalAPIEnd": 399, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(String)"], "useStart": [452], "useEnd": [478], "hasFinally": 1, "cleanUpCall": ["TestHttpClient.getConnectionManager()", "shutdown()"], "finallyExpressionStart": 835, "finallyExpressionEnd": 843, "finallyBlockStart": 835, "finallyBlockEnd": 898, "cleanUpCallStart": [851, 851], "cleanUpCallEnd": [880, 891], "url": "https://github.com/undertow-io/undertow/tree/master/servlet/src/test/java/io/undertow/servlet/test/response/contenttype/ContentTypeCharsetTestCase.java", "rawCode": "  private void runtest(\n      String contentType, String charset, String expectedContentType, String expectedBody)\n      throws Exception {\n    TestHttpClient client = new TestHttpClient();\n    try {\n      HttpGet get =\n          new HttpGet(\n              DefaultServer.getDefaultServerURL()\n                  + \"/servletContext/test?contentType=\"\n                  + URLEncoder.encode(contentType)\n                  + \"&charset=\"\n                  + URLEncoder.encode(charset));\n      HttpResponse result = client.execute(get);\n      Assert.assertEquals(StatusCodes.OK, result.getStatusLine().getStatusCode());\n      final String response = HttpClientUtils.readResponse(result);\n      Assert.assertEquals(expectedContentType, result.getHeaders(\"Content-Type\")[0].getValue());\n      Assert.assertEquals(expectedBody, response);\n    } finally {\n      client.getConnectionManager().shutdown();\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9874, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s)", "focalAPIStart": 120, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(String)", "makeRequest(str)"], "useStart": [189, 249], "useEnd": [216, 265], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/isenseDev/iSENSE-Hardware/tree/master/Hardware/Vernier/src/REST/RestAPI.java", "rawCode": "  public void login(String username, String password) {\n    String url =\n        \"method=login&username=\"\n            + URLEncoder.encode(username)\n            + \"&password=\"\n            + URLEncoder.encode(password);\n\n    try {\n      String data = makeRequest(url);\n\n      // Parse JSON Result\n      JSONObject o = new JSONObject(data);\n      session_key = o.getJSONObject(\"data\").getString(\"session\");\n      uid = o.getJSONObject(\"data\").getInt(\"uid\");\n\n      if (isLoggedIn()) {\n        this.username = username;\n      }\n\n    } catch (MalformedURLException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9875, "initialization": ["String s = normalize(String)", "String s = cleanSpaces(String)", "String s = String.replace(String,String)", "String s = String.toLowerCase()"], "initializationStart": [248, 350, 394, 437], "initializationEnd": [264, 371, 420, 459], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["s.replace(String,String)", "s.toLowerCase()"], "configurationStart": [394, 437], "configurationEnd": [420, 459], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 534, "focalAPIEnd": 579, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gissolutions/jsimpleutils/tree/master/src/main/java/org/gissolutions/jsimpleutils/text/Slugifier.java", "rawCode": "  public String buildSlug(String input) throws UnsupportedEncodingException {\n    if (input == null || input.length() == 0) return \"\";\n    String toReturn = input;\n    if (SlugAttribute.REPLACE_SPECIAL_CHARS.is(this.attributes)) {\n      toReturn = normalize(input);\n    }\n    if (SlugAttribute.REPLACE_MULTI_SPACES.is(attributes)) {\n      toReturn = cleanSpaces(toReturn);\n    }\n    toReturn = toReturn.replace(\" \", \"-\");\n    toReturn = toReturn.toLowerCase();\n    if (SlugAttribute.CHANGE_ENCODING.is(attributes)) {\n      toReturn = URLEncoder.encode(toReturn, DEFAULT_ENCODING);\n    }\n    return toReturn;\n  }\n"}, {"dataset": "encode", "exampleID": 9876, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 237, "focalAPIEnd": 280, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DSpace/DSpace-SVN-Deprecated/tree/master/dspace-lni/dspace-lni-core/src/main/java/org/dspace/app/dav/DAVResource.java", "rawCode": "  /**\n   * Mostly sugar around catching the UnsupportedEncodingException.\n   *\n   * @param handle the handle\n   * @return URL-encoded version of handle\n   */\n  protected static String encodeHandle(String handle) {\n    try {\n      return java.net.URLEncoder.encode(handle, \"UTF-8\");\n    } catch (java.io.UnsupportedEncodingException ue) {\n      // highly unlikely.\n    }\n    return \"\";\n  }\n"}, {"dataset": "encode", "exampleID": 9877, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 261, "focalAPIEnd": 305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,str,*)"], "useStart": [699], "useEnd": [764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ilrt/bitton/tree/master/facets-spring3-freemarker/src/test/java/org/ilrt/wf/facets/web/freemarker/FacetStateUrlMethodTest.java", "rawCode": "  @Test\n  public void testReplacingExistingFacetParameter()\n      throws TemplateModelException, UnsupportedEncodingException {\n\n    final String replacementValue = \"subjects:british_history\";\n\n    final String expectedUrl =\n        baseUri + \"?\" + key + \"=\" + URLEncoder.encode(replacementValue, \"UTF-8\");\n\n    // set the request with an initial replacementValue\n    request.setRequestURI(baseUri);\n    request.addParameter(key, historyValue);\n    args.add(requestHashModel);\n\n    // key/value that should replace the value above in the new URL\n    args.add(new SimpleScalar(key));\n    args.add(new SimpleScalar(replacementValue));\n\n    SimpleScalar scalar = (SimpleScalar) method.exec(args);\n\n    assertEquals(\"Unexpected url\", expectedUrl, scalar.getAsString());\n  }\n"}, {"dataset": "encode", "exampleID": 9878, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 128, "tryExpressionEnd": 132, "tryBlockStart": 128, "tryBlockEnd": 294, "catchExpressionStart": 192, "catchExpressionEnd": 231, "catchBlockStart": 192, "catchBlockEnd": 294, "exceptionHandlingCallStart": [268], "exceptionHandlingCallEnd": [287], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 150, "focalAPIEnd": 183, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)"], "useStart": [140], "useEnd": [184], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/deegree/deegree3/tree/master/deegree-core/deegree-core-protocol/deegree-protocol-wfs/src/main/java/org/deegree/protocol/wfs/AbstractWFSRequestKVPAdapter.java", "rawCode": "  protected static void appendFirstKVP(StringBuffer sb, String key, String value) {\n    sb.append(key);\n    sb.append('=');\n    try {\n      sb.append(URLEncoder.encode(value, \"UTF-8\"));\n    } catch (UnsupportedEncodingException e) {\n      // should never happen\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9879, "initialization": ["String enc = current()"], "initializationStart": [79], "initializationEnd": [102], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(*,String)"], "tryExpressionStart": 353, "tryExpressionEnd": 357, "tryBlockStart": 353, "tryBlockEnd": 630, "catchExpressionStart": 546, "catchExpressionEnd": 566, "catchBlockStart": 546, "catchBlockEnd": 630, "exceptionHandlingCallStart": [580], "exceptionHandlingCallEnd": [617], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 381, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(*,String)"], "useStart": [371, 468], "useEnd": [414, 502], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/deanhiller/databus/tree/master/webapp/play1.3.x/framework/src/play/mvc/Scope.java", "rawCode": "    public String urlEncode() {\n      checkAndParse();\n      String encoding = Http.Response.current().encoding;\n      StringBuilder ue = new StringBuilder();\n      for (String key : data.keySet()) {\n        if (key.equals(\"body\")) {\n          continue;\n        }\n        String[] values = data.get(key);\n        for (String value : values) {\n          try {\n            ue.append(URLEncoder.encode(key, encoding))\n                .append(\"=\")\n                .append(URLEncoder.encode(value, encoding))\n                .append(\"&\");\n          } catch (Exception e) {\n            Logger.error(e, \"Error (encoding ?)\");\n          }\n        }\n      }\n      return ue.toString();\n    }\n"}, {"dataset": "encode", "exampleID": 9880, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 1346, "focalAPIEnd": 1391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(String,String)", "str.getBytes(String)"], "useStart": [1444, 1527], "useEnd": [1483, 1554], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sigmarkarl/world/tree/master/smasogur/src/org/simmi/server/SmasagaServiceImpl.java", "rawCode": "  public static boolean dropboxSave(\n      String target,\n      String tokenkey,\n      String tokensecret,\n      String fname,\n      byte[] contents,\n      HttpServlet servlet)\n      throws IOException {\n    Map<String, String> parameters = new TreeMap<String, String>();\n    // URL u;\n    // fname = OAuth.percentEncode(fname);//URLEncoder.encode(fname, \"UTF-8\");\n    // String origname = fname;\n\n    servlet.log(fname);\n    String fnameDecoded = URLDecoder.decode(fname, \"UTF-8\");\n    // fname.\n    // fname = fname.replace(\" \", \"%20\");\n    // servlet.log( fname );\n    parameters.put(\"file\", fname);\n    parameters.put(\"oauth_consumer_key\", \"jemmmn3c5ot8rdu\");\n    parameters.put(\"oauth_token\", tokenkey);\n    parameters.put(\"oauth_timestamp\", Long.toString(System.currentTimeMillis() / 1000));\n    parameters.put(\"oauth_signature_method\", \"HMAC-SHA1\");\n    parameters.put(\"oauth_nonce\", Long.toString(Math.abs(new Random().nextLong())));\n    parameters.put(\"oauth_version\", \"1.0\");\n\n    String paramstr = null;\n    for (String par : parameters.keySet()) {\n      if (paramstr == null) paramstr = par + \"=\" + parameters.get(par);\n      else paramstr += \"&\" + par + \"=\" + parameters.get(par);\n    }\n\n    // String keyString = OAuth.percentEncode(\"9or8lsn165d44qv\") + '&' +\n    // OAuth.percentEncode(tokensecret);\n    String keyString =\n        URLEncoder.encode(\"9or8lsn165d44qv\", \"UTF-8\").replace(\"+\", \"%20\")\n            + '&'\n            + URLEncoder.encode(tokensecret, \"UTF-8\").replace(\"+\", \"%20\");\n    byte[] keyBytes = keyString.getBytes(\"UTF-8\");\n\n    String MAC_NAME = \"HmacSHA1\";\n    // Base64 base64 = new Base64();\n    SecretKey key = new SecretKeySpec(keyBytes, MAC_NAME);\n    Mac mac = null;\n    try {\n      mac = Mac.getInstance(MAC_NAME);\n      mac.init(key);\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n    } catch (InvalidKeyException e) {\n      e.printStackTrace();\n    }\n\n    String sign = getSignature(\"POST\", target, paramstr, mac);\n    parameters.put(\"oauth_signature\", sign);\n\n    URL url = new URL(target);\n    HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();\n\n    String dispstr =\n        \"Content-Disposition: form-data; name=\\\"file\\\"; filename=\\\"\" + fname + \"\\\"\\n\\n\";\n    httpConnection.setRequestMethod(\"POST\");\n    httpConnection.setDoInput(true);\n    httpConnection.setDoOutput(true);\n    String[] incl = {\n      \"file\",\n      \"oauth_token\",\n      \"oauth_consumer_key\",\n      \"oauth_version\",\n      \"oauth_signature_method\",\n      \"oauth_timestamp\",\n      \"oauth_nonce\",\n      \"oauth_signature\"\n    };\n    String stuff = getParamstr(parameters, Arrays.asList(incl));\n    httpConnection.setRequestProperty(\"Authorization\", \"OAuth \" + stuff);\n    httpConnection.setRequestProperty(\n        \"Content-Type\",\n        \"multipart/form-data; boundary=46-B_DuxmY9qurDm33PMiHpZ2dP7Lr\"); // req.getContentType());\n\n    String cont = \"--46-B_DuxmY9qurDm33PMiHpZ2dP7Lr\\n\";\n    cont += dispstr;\n    // cont += filecontents;\n    cont += \"\\n--46-B_DuxmY9qurDm33PMiHpZ2dP7Lr--\\n\";\n    int clen = cont.length() + contents.length;\n\n    httpConnection.setRequestProperty(\"Content-Length\", \"\" + clen);\n    httpConnection.setRequestProperty(\n        \"Accept\", \"text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\");\n    httpConnection.setRequestProperty(\"Connection\", \"keep-alive\");\n    httpConnection.setRequestProperty(\"Expect\", \"100-Continue\");\n\n    OutputStream os = httpConnection.getOutputStream();\n    os.write(\"--46-B_DuxmY9qurDm33PMiHpZ2dP7Lr\\n\".getBytes());\n    os.write(dispstr.getBytes());\n    os.write(contents);\n    os.write(\"\\n--46-B_DuxmY9qurDm33PMiHpZ2dP7Lr--\\n\".getBytes());\n\n    InputStream is = httpConnection.getInputStream();\n    byte[] bb = new byte[256];\n    int r = is.read(bb);\n    String s = \"\";\n    while (r > 0) {\n      s += new String(bb, 0, r);\n      r = is.read(bb);\n    }\n    is.close();\n    os.close();\n\n    int resp = httpConnection.getResponseCode();\n    System.out.println(s);\n    System.out.println(resp);\n    servlet.log(\"response: \" + resp + \" \" + s);\n\n    httpConnection.disconnect();\n\n    return resp >= 200 && resp < 300;\n  }\n"}, {"dataset": "encode", "exampleID": 9881, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 599, "focalAPIEnd": 680, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,str)"], "useStart": [556], "useEnd": [681], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/asascience-open/ncSOS/tree/master/src/test/java/com/asascience/ncsos/GOBasePlatformTest.java", "rawCode": "  public static void setUpClass() throws Exception {\n    NcSOSTest.setUpClass();\n\n    // Modify the outputs\n    outputDir =\n        baseOutputDir\n            + NcSOSTest.systemSeparator\n            + \"GetObservation-Platform\"\n            + NcSOSTest.systemSeparator;\n    exampleDir =\n        baseExampleDir\n            + NcSOSTest.systemSeparator\n            + \"GetObservation-Platform\"\n            + NcSOSTest.systemSeparator;\n\n    // Create output directories if they don't exist\n    new File(outputDir).mkdirs();\n    new File(exampleDir).mkdirs();\n\n    kvp.put(\n        \"responseFormat\",\n        URLEncoder.encode(\"text/xml;subtype=\\\"om/1.0.0/profiles/ioos_sos/1.0\\\"\", \"UTF-8\"));\n    kvp.put(\"request\", \"GetObservation\");\n    kvp.put(\"version\", \"1.0.0\");\n    kvp.put(\"service\", \"SOS\");\n  }\n"}, {"dataset": "encode", "exampleID": 9882, "initialization": ["String s = Enumeration<?>.nextElement()"], "initializationStart": [234], "initializationEnd": [249], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["Log.error(String)"], "tryExpressionStart": 117, "tryExpressionEnd": 121, "tryBlockStart": 117, "tryBlockEnd": 606, "catchExpressionStart": 501, "catchExpressionEnd": 541, "catchBlockStart": 501, "catchBlockEnd": 606, "exceptionHandlingCallStart": [549], "exceptionHandlingCallEnd": [599], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "req.getParameterValues(s,)", "guardType": "LOOP {", "guardExpressionStart": 259, "guardExpressionEnd": 308, "guardBlockStart": 259, "guardBlockEnd": 486, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 331, "focalAPIEnd": 363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(*,String)"], "useStart": [321, 414], "useEnd": [364, 447], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.3.0-b07/kernel-util/src/main/java/org/sakaiproject/util/Validator.java", "rawCode": "  public static String generateQueryString(HttpServletRequest req) {\n    StringBuilder sb = new StringBuilder();\n    try {\n      for (Enumeration<?> e = req.getParameterNames(); e.hasMoreElements(); ) {\n        String name = (String) e.nextElement();\n        for (String value : req.getParameterValues(name)) {\n          sb.append(URLEncoder.encode(name, \"UTF-8\"))\n              .append(\"=\")\n              .append(URLEncoder.encode(value, \"UTF-8\"))\n              .append(\"&\");\n        }\n      }\n    } catch (UnsupportedEncodingException ex) {\n      M_log.error(\"No UTF-8 Encoding on this JVM, !!!!\");\n    }\n    if (sb.length() < 1) return null;\n    return sb.substring(0, sb.length() - 1);\n  }\n"}, {"dataset": "encode", "exampleID": 9883, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 100, "tryExpressionEnd": 104, "tryBlockStart": 100, "tryBlockEnd": 245, "catchExpressionStart": 160, "catchExpressionEnd": 200, "catchBlockStart": 160, "catchBlockEnd": 245, "exceptionHandlingCallStart": [214], "exceptionHandlingCallEnd": [238], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 119, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rrkommer/gwiki/tree/master/plugins/gwiki-fssvn/src/main/java/com/googlecode/sardine/util/SardineUtil.java", "rawCode": "  /** Hides the irritating declared exception. */\n  public static String encode(String value) {\n    try {\n      return URLEncoder.encode(value, \"utf-8\");\n    } catch (UnsupportedEncodingException ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9884, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 164, "tryExpressionEnd": 168, "tryBlockStart": 164, "tryBlockEnd": 953, "catchExpressionStart": 899, "catchExpressionEnd": 919, "catchBlockStart": 899, "catchBlockEnd": 953, "exceptionHandlingCallStart": [927], "exceptionHandlingCallEnd": [946], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 249, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sendRequest(str,*)"], "useStart": [320], "useEnd": [355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IKANOW/Infinit.e/tree/master/core/infinit.e.data_model/src/com/ikanow/infinit/e/data_model/driver/InfiniteDriver.java", "rawCode": "  public List<SourcePojo> getSourcePending(String communityIdList, ResponseObject responseObject) {\n    List<SourcePojo> sources = new ArrayList<SourcePojo>();\n    try {\n      String getSourceAddress =\n          apiRoot + \"config/source/pending/\" + URLEncoder.encode(communityIdList, \"UTF-8\");\n\n      String getResult = sendRequest(getSourceAddress, null);\n      ResponsePojo internal_response = ResponsePojo.fromApi(getResult, ResponsePojo.class);\n      shallowCopy(responseObject, internal_response.getResponse());\n\n      // TODO I'm passing null as the commids currently, I think this will return all commids and\n      // not wipe based on permissions\n      if (responseObject.isSuccess())\n        sources =\n            ApiManager.mapListFromApi(\n                (JsonElement) internal_response.getData(),\n                SourcePojo.listType(),\n                new SourcePojoApiMap(null));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    return sources;\n  }\n"}, {"dataset": "encode", "exampleID": 9885, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 112, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape2/tree/master/application/src/main/java/cytoscape/data/writers/CyAttributesWriter.java", "rawCode": "  private String encodeString(String in) throws UnsupportedEncodingException {\n    if (doEncoding) {\n      in = URLEncoder.encode(in, ENCODING_SCHEME);\n    }\n\n    return in;\n  }\n"}, {"dataset": "encode", "exampleID": 9886, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "MalformedURLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 766, "tryExpressionEnd": 770, "tryBlockStart": 766, "tryBlockEnd": 2311, "catchExpressionStart": 1862, "catchExpressionEnd": 1894, "catchBlockStart": 1862, "catchBlockEnd": 1932, "exceptionHandlingCallStart": [1904], "exceptionHandlingCallEnd": [1923], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 826, "focalAPIEnd": 862, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URL(str)"], "useStart": [796], "useEnd": [863], "hasFinally": 1, "cleanUpCall": ["HttpURLConnection.disconnect()"], "finallyExpressionStart": 2120, "finallyExpressionEnd": 2128, "finallyBlockStart": 2120, "finallyBlockEnd": 2311, "cleanUpCallStart": [2195], "cleanUpCallEnd": [2218], "url": "https://github.com/yibinlin/hw2-team18/tree/master/src/main/java/edu/cmu/lti/oaqa/openqa/test/team18/retrieval/WikiRedirectParser.java", "rawCode": "  /**\n   * Find synonyms. If a keyterm is a alias (redirected word) in Wikipedia, return the authentic\n   * main word in Wikipedia.<br>\n   * If a keyterm is an authentic main word in Wikipediam, then return all its aliases (redirects).\n   *\n   * @param aKeyterm a keyterm produced in keytern extraction phase.\n   * @return its synonyms as described above.\n   */\n  public List<String> findSynonyms(String aKeyterm) {\n    List<String> res = new LinkedList<String>();\n\n    if (isReachable(HOST, PORT)) { // if it is not reachable, then we return an empty list.\n      HttpURLConnection connection = null;\n      OutputStreamWriter wr = null;\n      BufferedReader rd = null;\n      StringBuilder sb = null;\n      String line = null;\n\n      URL serverAddress = null;\n\n      try {\n        serverAddress = new URL(PAGE_URL + \"str[]=\" + URLEncoder.encode(aKeyterm, \"UTF-8\"));\n        // set up out communications stuff\n        connection = null;\n\n        // Set up the initial connection\n        connection = (HttpURLConnection) serverAddress.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setDoOutput(true);\n        connection.setReadTimeout(100000);\n\n        connection.connect();\n\n        // get the output stream writer and write the output to the server\n        // not needed in this example\n        // wr = new OutputStreamWriter(connection.getOutputStream());\n        // wr.write(\"\");\n        // wr.flush();\n\n        // read the result from the server\n        rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        sb = new StringBuilder();\n\n        while ((line = rd.readLine()) != null) {\n          String[] synonymPair = line.split(\";\");\n          for (String s : synonymPair) {\n            if (!s.equalsIgnoreCase(aKeyterm)) {\n              res.add(s);\n            }\n          }\n        }\n\n      } catch (MalformedURLException e) {\n        e.printStackTrace();\n      } catch (ProtocolException e) {\n        e.printStackTrace();\n      } catch (IOException e) {\n        e.printStackTrace();\n      } catch (Exception e) {\n        e.printStackTrace();\n      } finally {\n        // close the connection, set all objects to null\n        connection.disconnect();\n        rd = null;\n        sb = null;\n        wr = null;\n        connection = null;\n      }\n    }\n    return res;\n  }\n"}, {"dataset": "encode", "exampleID": 9887, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 189, "focalAPIEnd": 220, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yangjiandong/sshapp/tree/master/application/pm/src/main/java/org/ssh/pm/common/service/HzService.java", "rawCode": "  /** 访问ehcache, 使用JSON字符串存放对象以节约空间. */\n  private Hz getHzFromEhcache(String one) {\n    // TODO\n    // 不能直接用汉字作为spyMemcachedClient的key\n    String one_code = one;\n    try {\n      one_code = URLEncoder.encode(one, \"UTF-8\");\n    } catch (Exception e) {\n      // TODO: handle exception\n    }\n\n    String key = CacheUtil.HZK + one_code;\n\n    Hz hz = null;\n    String jsonString = (String) CacheUtil.getCache(CacheUtil.HZK, key);\n    logger.debug(\"get key:\" + key + \",jsonString:\" + jsonString);\n    if (jsonString == null) {\n      // hz = hzDao.findOne(one);\n      hz = hzDao.findOneBy(\"hz\", one);\n      if (hz != null) {\n        jsonString = jsonBinder.toJson(hz);\n        // spyMemcachedClient.set(key, MemcachedObjectType.HZK.getExpiredTime(), jsonString);\n\n        CacheUtil.setCache(CacheUtil.HZK, key, jsonString);\n      }\n    } else {\n      hz = jsonBinder.fromJson(jsonString, Hz.class);\n    }\n    return hz;\n  }\n"}, {"dataset": "encode", "exampleID": 9888, "initialization": ["String s = populateGotoParameterValue()"], "initializationStart": [981], "initializationEnd": [1009], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s)", "focalAPIStart": 1097, "focalAPIEnd": 1123, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(str)", "urlEncoder.encode(*)", "urlEncoder.encode(*)"], "useStart": [1085, 1365, 1449], "useEnd": [1124, 1400, 1485], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/j2eeagents/agentsdk/source/com/sun/identity/agents/filter/AmFilterRequestContext.java", "rawCode": "  /**\n   * Returns a URL that can be used to redirect the current request which may be lacking sufficient\n   * credentials to the Identity Server Authentication service.\n   *\n   * @param amWebPolicyResult an optional policy result object that may be carrying any applicable\n   *     advices.\n   * @param gotoURL the goto parameter Value\n   * @return a String representation of a URL that can be used to redirect the current request to\n   *     the authentication service.\n   * @throws AgentException in the event when no login URL for Identity Server authentication\n   *     service is available.\n   */\n  public String getAuthRedirectURL(AmWebPolicyResult amWebPolicyResult, String gotoURL)\n      throws AgentException {\n\n    StringBuffer buff = new StringBuffer();\n    String loginURL = getLoginURL();\n    buff.append(loginURL);\n\n    if (loginURL.indexOf(\"?\") != -1) {\n      buff.append(\"&\");\n    } else {\n      buff.append(\"?\");\n    }\n\n    if (gotoURL == null) {\n      gotoURL = populateGotoParameterValue();\n    }\n\n    buff.append(getGotoParameterName());\n    buff.append(\"=\");\n    buff.append(URLEncoder.encode(gotoURL));\n\n    if ((amWebPolicyResult != null) && amWebPolicyResult.hasNameValuePairs()) {\n      NameValuePair[] nvp = amWebPolicyResult.getNameValuePairs();\n\n      buff.append(\"&\");\n\n      for (int i = 0; i < nvp.length; i++) {\n        buff.append(URLEncoder.encode(nvp[i].getName()));\n        buff.append(\"=\");\n        buff.append(URLEncoder.encode(nvp[i].getValue()));\n\n        if (i != nvp.length - 1) {\n          buff.append(\"&\");\n        }\n      }\n    }\n\n    String redirectURL = buff.toString();\n\n    return redirectURL;\n  }\n"}, {"dataset": "encode", "exampleID": 9889, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 6933, "tryExpressionEnd": 6937, "tryBlockStart": 6933, "tryBlockEnd": 7280, "catchExpressionStart": 7148, "catchExpressionEnd": 7187, "catchBlockStart": 7148, "catchBlockEnd": 7280, "exceptionHandlingCallStart": [7248], "exceptionHandlingCallEnd": [7267], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 7016, "focalAPIEnd": 7134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sakai-mirror/sam/tree/master/samigo-app/src/java/org/sakaiproject/tool/assessment/rsf/producers/BeginAssessmentProducer.java", "rawCode": "  public void fillComponents(\n      UIContainer tofill, ViewParameters viewparams, ComponentChecker checker) {\n    BeginAssessmentViewParameters params = null;\n    String alias = \"\";\n    if (viewparams != null) {\n      params = (BeginAssessmentViewParameters) viewparams;\n      alias = params.pubReference;\n    } else {\n      log.warn(\"Something bad... we have no viewparams\");\n    }\n\n    // Begin cut and past (with small deviations) from existing LoginServlet that currently does\n    // the job of url aliased assessment delivery in Samigo, some of this could possibly be removed\n    // unless this just replaces the LoginServlet someday.\n\n    HttpSession httpSession = httpServletRequest.getSession(true);\n    httpSession.setMaxInactiveInterval(3600); // one hour\n    PersonBean person =\n        (PersonBean)\n            ContextUtil.lookupBeanFromExternalServlet(\n                \"person\", httpServletRequest, httpServletResponse);\n    // we are going to use the delivery bean to flag that this access is via url\n    // this is the flag that we will use in deliverAssessment.jsp to decide what\n    // button to display - daisyf\n    DeliveryBean delivery =\n        (DeliveryBean)\n            ContextUtil.lookupBeanFromExternalServlet(\n                \"delivery\", httpServletRequest, httpServletResponse);\n    // For SAK-7132.\n    // As this class is only used for taking assessment via URL,\n    // there should not be any assessment grading data at this point\n    delivery.setAssessmentGrading(null);\n    delivery.setActionString(\"takeAssessmentViaUrl\");\n\n    // reset timer in case this is a timed assessment\n    delivery.setTimeElapse(\"0\");\n    delivery.setLastTimer(0);\n    delivery.setTimeLimit(\"0\");\n    delivery.setBeginAssessment(true);\n\n    delivery.setNumberRetake(-1);\n    delivery.setActualNumberRetake(-1);\n\n    // set path\n    delivery.setContextPath(httpServletRequest.getContextPath());\n\n    // 1. get publishedAssessment and check if anonymous is allowed\n    // 2. If so, goto welcome.faces\n    // 3. If not, goto login.faces\n    // both pages will set agentId and then direct user to BeginAssessment\n    PublishedAssessmentService service = new PublishedAssessmentService();\n    PublishedAssessmentFacade pub = service.getPublishedAssessment(alias);\n\n    delivery.setAssessmentId(pub.getPublishedAssessmentId().toString());\n    delivery.setAssessmentTitle(pub.getTitle());\n    delivery.setHonorPledge(\n        pub.getAssessmentMetaDataByLabel(\"honorpledge_isInstructorEditable\") != null\n            && pub.getAssessmentMetaDataByLabel(\"honorpledge_isInstructorEditable\")\n                .toLowerCase()\n                .equals(\"true\"));\n    delivery.setPublishedAssessment(pub);\n\n    String path = null;\n\n    String agentIdString = \"\";\n    boolean isAuthorized = false;\n    boolean isAuthenticated = false;\n\n    // Determine if assessment accept Anonymous Users. If so, starting in version 2.0.1\n    // all users will be authenticated as anonymous for the assessment in this case.\n    // boolean anonymousAllowed = false;\n    String releaseTo = pub.getAssessmentAccessControl().getReleaseTo();\n    if (releaseTo != null && releaseTo.indexOf(\"Anonymous Users\") > -1) {\n      // anonymousAllowed = true;\n      agentIdString = AgentFacade.createAnonymous();\n      isAuthenticated = true;\n      isAuthorized = true;\n      delivery.setAnonymousLogin(true);\n      person.setAnonymousId(agentIdString);\n    } else { // check membership\n      agentIdString = httpServletRequest.getRemoteUser();\n      isAuthenticated = (agentIdString != null && !(\"\").equals(agentIdString));\n      if (isAuthenticated) {\n        isAuthorized = checkMembership(pub);\n        // in 2.2, agentId is differnt from httpServletRequest.getRemoteUser()\n        agentIdString = AgentFacade.getAgentString();\n      }\n    }\n\n    log.debug(\"*** agentIdString: \" + agentIdString);\n\n    // check if assessment is available\n    // We are getting the total no. of submission (for grade) per assessment\n    // by the given agent at the same time\n    boolean assessmentIsAvailable = assessmentIsAvailable(service, agentIdString, pub, delivery);\n    if (isAuthorized) {\n      if (!assessmentIsAvailable) {\n        UIBranchContainer.make(tofill, \"assessmentNotAvailable:\");\n        // TODO added info on why\n      } else {\n        // if assessment is available, set it in delivery bean for display in deliverAssessment.jsp\n        BeginDeliveryActionListener listener = new BeginDeliveryActionListener();\n        listener.processAction(null);\n\n        UIForm form = UIForm.make(tofill, \"takeAssessmentForm:\");\n\n        String url =\n            \"/samigo-app/servlet/Login?id=\"\n                + pub.getAssessmentMetaDataByLabel(AssessmentMetaDataIfc.ALIAS)\n                + \"&fromDirect=true\";\n\n        UICommand.make(form, \"takeAssessment\", messageLocator.getMessage(\"begin_assessment_\"), null)\n            .decorate(new UITooltipDecorator(messageLocator.getMessage(\"begin_assessment_\")))\n            .decorate(\n                new UIFreeAttributeDecorator(\"onclick\", \"window.location.href='\" + url + \"'\"));\n        // UILink.make(form, \"takeAssessment\", url);\n\n        UIOutput.make(form, \"assessmentTitle\", delivery.getAssessmentTitle());\n        UIOutput.make(form, \"courseName\", delivery.getCourseName());\n        UIOutput.make(form, \"creatorName\", delivery.getCreatorName());\n\n        if (delivery.getHasTimeLimit()) {\n          UIBranchContainer timeLimit = UIBranchContainer.make(form, \"timeLimit:\");\n          UIOutput.make(timeLimit, \"timeLimit\", delivery.getTimeLimit());\n          UIOutput.make(timeLimit, \"timeLimitHour\", delivery.getTimeLimit_hour() + \"\");\n          UIOutput.make(timeLimit, \"timeLimitMin\", delivery.getTimeLimit_minute() + \"\");\n        } else {\n          UIBranchContainer noTimeLimit = UIBranchContainer.make(form, \"noTimeLimit:\");\n          UIOutput.make(noTimeLimit, \"timeLimit\", delivery.getTimeLimit());\n        }\n\n        if (!delivery.getAnonymousLogin() && !delivery.getSettings().isUnlimitedAttempts()) {\n          UIBranchContainer limited = UIBranchContainer.make(tofill, \"limited:\");\n          UIOutput.make(limited, \"maxAttempts\", delivery.getSettings().getMaxAttempts() + \"\");\n          UIOutput.make(limited, \"remaining\", delivery.getSubmissionsRemaining() + \"\");\n        } else if (!delivery.getAnonymousLogin() && delivery.getSettings().isUnlimitedAttempts()) {\n          UIBranchContainer.make(tofill, \"unlimited:\");\n        }\n\n        if (delivery.getDueDate() != null) {\n          UIBranchContainer duedate = UIBranchContainer.make(tofill, \"duedate:\");\n          UIOutput.make(duedate, \"duedate\", delivery.getDueDateString());\n        }\n      }\n    } else { // notAuthorized\n      if (!isAuthenticated) {\n        if (AgentFacade.isStandaloneEnvironment()) {\n          delivery.setActionString(null);\n          path = delivery.getPortal();\n        } else {\n          delivery.setActionString(null);\n          try {\n            path =\n                \"/authn/login?url=\"\n                    + URLEncoder.encode(\n                        httpServletRequest.getRequestURL().toString() + \"?pubId=\" + alias, \"UTF-8\");\n          } catch (UnsupportedEncodingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        log.info(\"** servlet path=\" + httpServletRequest.getRequestURL().toString());\n        String url = httpServletRequest.getRequestURL().toString();\n        String context = httpServletRequest.getContextPath();\n        String finalUrl = url.substring(0, url.lastIndexOf(context)) + path;\n        log.info(\"**** finalUrl = \" + finalUrl);\n        try {\n          httpServletResponse.sendRedirect(finalUrl);\n        } catch (IOException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      } else { // isAuthenticated but not authorized\n        UIBranchContainer.make(tofill, \"accessDenied:\");\n        // TODO added info on why\n      }\n    }\n\n    // End cut and paste from LoginServlet (with small deviations)\n  }\n"}, {"dataset": "encode", "exampleID": 9890, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s)", "focalAPIStart": 442, "focalAPIEnd": 470, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/indrek-koue/SERP-Tracker-Android/tree/master/src/com/inc/im/serptracker/data/access/Download.java", "rawCode": "  public static String generateEscapedQueryString(Activity a, Keyword k) {\n\n    String userSearchEngine;\n\n    if (new Boolean(a.getString(R.string.isPremium))) {\n      // get value from preference\n      userSearchEngine =\n          PreferenceManager.getDefaultSharedPreferences(a).getString(\"prefLocalize\", \"Google.com\");\n    } else {\n      userSearchEngine = \"google.com\";\n    }\n\n    return \"http://www.\" + userSearchEngine + \"/search?q=\" + URLEncoder.encode(k.keyword);\n  }\n"}, {"dataset": "encode", "exampleID": 9891, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 173, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(*,String)"], "useStart": [446], "useEnd": [480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robovm/robovm/tree/master/tests/libcore/luni/src/test/java/org/apache/harmony/luni/tests/java/net/URLEncoderTest.java", "rawCode": "  /** URLEncoder#encode(String, String) */\n  public void test_encodeLjava_lang_StringLjava_lang_String() throws Exception {\n    // Regression for HARMONY-24\n    try {\n      URLEncoder.encode(\"str\", \"unknown_enc\");\n      fail(\"Assert 0: Should throw UEE for invalid encoding\");\n    } catch (UnsupportedEncodingException e) {\n    } catch (UnsupportedCharsetException e) {\n      // expected\n    }\n\n    // Regression for HARMONY-1233\n    try {\n      URLEncoder.encode(null, \"harmony\");\n      fail(\"NullPointerException expected\");\n    } catch (NullPointerException expected) {\n    } catch (UnsupportedCharsetException expected) {\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9892, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["log(*)"], "tryExpressionStart": 49, "tryExpressionEnd": 53, "tryBlockStart": 49, "tryBlockEnd": 188, "catchExpressionStart": 117, "catchExpressionEnd": 156, "catchBlockStart": 117, "catchBlockEnd": 188, "exceptionHandlingCallStart": [164], "exceptionHandlingCallEnd": [181], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 68, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacob-carlborg/descent/tree/master/descent.ui/src/descent/internal/ui/preferences/NewJavaProjectPreferencePage.java", "rawCode": "  private static String encode(String str) {\n    try {\n      return URLEncoder.encode(str, fgDefaultEncoding);\n    } catch (UnsupportedEncodingException e) {\n      JavaPlugin.log(e);\n    }\n    return \"\"; // $NON-NLS-1$\n  }\n"}, {"dataset": "encode", "exampleID": 9893, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new Error(String,*)"], "tryExpressionStart": 542, "tryExpressionEnd": 546, "tryBlockStart": 542, "tryBlockEnd": 869, "catchExpressionStart": 702, "catchExpressionEnd": 741, "catchBlockStart": 702, "catchBlockEnd": 869, "exceptionHandlingCallStart": [805], "exceptionHandlingCallEnd": [856], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 601, "focalAPIEnd": 639, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["str.replace(char,char)"], "useStart": [601], "useEnd": [657], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SeekingFor/jfniki/tree/master/alien/src/name/fraser/neil/plaintext/diff_match_patch.java", "rawCode": "  /**\n   * Crush the diff into an encoded string which describes the operations required to transform\n   * text1 into text2. E.g. =3\\t-2\\t+ing -> Keep 3 chars, delete 2 chars, insert 'ing'. Operations\n   * are tab-separated. Inserted text is escaped using %xx notation.\n   *\n   * @param diffs Array of diff tuples.\n   * @return Delta text.\n   */\n  public String diff_toDelta(LinkedList<Diff> diffs) {\n    StringBuilder text = new StringBuilder();\n    for (Diff aDiff : diffs) {\n      switch (aDiff.operation) {\n        case INSERT:\n          try {\n            text.append(\"+\")\n                .append(URLEncoder.encode(aDiff.text, \"UTF-8\").replace('+', ' '))\n                .append(\"\\t\");\n          } catch (UnsupportedEncodingException e) {\n            // Not likely on modern system.\n            throw new Error(\"This system does not support UTF-8.\", e);\n          }\n          break;\n        case DELETE:\n          text.append(\"-\").append(aDiff.text.length()).append(\"\\t\");\n          break;\n        case EQUAL:\n          text.append(\"=\").append(aDiff.text.length()).append(\"\\t\");\n          break;\n      }\n    }\n    String delta = text.toString();\n    if (delta.length() != 0) {\n      // Strip off trailing tab character.\n      delta = delta.substring(0, delta.length() - 1);\n      delta = unescapeForEncodeUriCompatability(delta);\n    }\n    return delta;\n  }\n"}, {"dataset": "encode", "exampleID": 9894, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(s==null||true||s.equals(\"\",)||true)", "guardType": "IF {", "guardExpressionStart": 114, "guardExpressionEnd": 203, "guardBlockStart": 114, "guardBlockEnd": 226, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 350, "focalAPIEnd": 393, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(String,String)", "urlEncoder.encode(String,String)"], "useStart": [446, 613], "useEnd": [494, 654], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/linking12/WeiChat/tree/master/src/main/java/net/chat/utils/BaiduAPI.java", "rawCode": "  public static String navagation(String origin, String destination, String city)\n      throws IOException {\n\n    if (origin == null || destination == null || origin.equals(\"\") || destination.equals(\"\"))\n      return \"暂时无法导航\";\n\n    URL url =\n        new URL(\n            \"http://api.map.baidu.com/direction/v1?mode=driving&origin=\"\n                + java.net.URLEncoder.encode(origin, \"utf-8\")\n                + \"&destination=\"\n                + java.net.URLEncoder.encode(destination, \"utf-8\")\n                + \"&origin_region=\"\n                + city\n                + \"&destination_region=\"\n                + java.net.URLEncoder.encode(city, \"utf-8\")\n                + \"&output=json&ak=\"\n                + ak);\n    URLConnection connection = url.openConnection();\n    connection.setDoOutput(true);\n    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), \"utf-8\");\n    // remember to clean up\n    out.flush();\n    out.close();\n    String res;\n    InputStream l_urlStream;\n    l_urlStream = connection.getInputStream();\n    BufferedReader in = new BufferedReader(new InputStreamReader(l_urlStream, \"UTF-8\"));\n    StringBuilder sb = new StringBuilder(\"\");\n    while ((res = in.readLine()) != null) {\n      sb.append(res.trim());\n    }\n    String str = sb.toString();\n    StringBuilder st = new StringBuilder();\n    try {\n      JSONObject jsonObject = JSONObject.fromObject(str);\n      JSONObject ob = jsonObject.getJSONObject(\"result\").getJSONArray(\"routes\").getJSONObject(0);\n      JSONArray steps = ob.getJSONArray(\"steps\");\n      for (int i = 0; i < steps.size(); i++) {\n        String instruction = (String) steps.getJSONObject(i).get(\"instructions\");\n        instruction =\n            StringUtils.replaceEach(\n                instruction,\n                new String[] {\"<b>\", \"</b>\", \"<font color=\\\"0x000000\\\"\", \"</font>\", \">\", \"起点\"},\n                new String[] {\"\", \"\", \"\", \"\", \"\", \"您当前的位置\"});\n        st.append(instruction + \"\\n\");\n      }\n    } catch (Exception e) {\n      st.append(\"你上传位置暂时无法导航\");\n    }\n    return st.toString();\n  }\n"}, {"dataset": "encode", "exampleID": 9895, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 873, "focalAPIEnd": 905, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URL(str)"], "useStart": [1010], "useEnd": [1022], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rodericj/TopDish/tree/master/server/old/java/TopDish/src/com/topdish/util/FacebookUtils.java", "rawCode": "  /**\n   * Given a \"code\" call the Facebook Auth server and returns the values returned by Facebook\n   *\n   * @param code - the \"code\" recieved from Facebook Auth\n   * @return a map containing name values of all data returned by Facebook\n   */\n  public static Map<String, String> getAccessToken(final String code) throws Exception {\n\n    Logger.getLogger(TAG).info(\"Running with the Code: \" + code);\n\n    final Map<String, String> toBeReturned = new HashMap<String, String>();\n\n    final String redirectURL = FacebookConstants.FACEBOOK_BASE_REDIRECT_URI + \"/facebookLogin\";\n\n    final String url =\n        \"https://graph.facebook.com/oauth/access_token?client_id=\"\n            + FacebookConstants.APP_ID\n            + \"&redirect_uri=\"\n            + redirectURL\n            + \"&client_secret=\"\n            + FacebookConstants.APP_SECRET\n            + \"&code=\"\n            + URLEncoder.encode(code, \"UTF-8\");\n\n    // response.sendRedirect(url);\n    Logger.getLogger(TAG).info(\"URL : \" + url);\n\n    URL address = new URL(url);\n\n    // Create the request\n    // TODO: Remove when GAE fixing bug\n    HTTPRequest httpReq = new HTTPRequest(address, HTTPMethod.GET, doNotValidateCertificate());\n\n    // Get the response\n    HTTPResponse httpResp = URLFetchServiceFactory.getURLFetchService().fetch(httpReq);\n\n    // Get the fields from text returned\n    final String fields = new String(httpResp.getContent());\n\n    Logger.getLogger(TAG).info(\"Final: \" + fields);\n\n    // Break fields along &\n    final String[] brokenUpFields = fields.split(\"&\");\n\n    // Traverse fields\n    for (final String field : brokenUpFields) {\n      // Split on an equals\n      final String[] curFields = field.split(\"=\");\n      // Check that it split name value and none are null\n      if (curFields.length == 2\n          && (null != curFields[0] && !curFields[0].isEmpty())\n          && (null != curFields[1] && !curFields[1].isEmpty())) {\n\n        Logger.getLogger(TAG).info(\"Adding: \" + curFields[0] + \"\\t:\\t\" + curFields[1]);\n\n        // Put in the map\n        toBeReturned.put(curFields[0], curFields[1]);\n      }\n    }\n\n    return toBeReturned;\n  }\n"}, {"dataset": "encode", "exampleID": 9896, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 456, "tryExpressionEnd": 460, "tryBlockStart": 456, "tryBlockEnd": 1679, "catchExpressionStart": 1273, "catchExpressionEnd": 1312, "catchBlockStart": 1273, "catchBlockEnd": 1368, "exceptionHandlingCallStart": [1320], "exceptionHandlingCallEnd": [1339], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 581, "focalAPIEnd": 620, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new BasicNameValuePair(String,str)"], "useStart": [544], "useEnd": [621], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bradkittenbrink/seabiscuit-autocheckin/tree/master/CPAndroid/src/com/coffeeandpower/utils/HttpUtil.java", "rawCode": "  /**\n   * Send F2F accept\n   *\n   * @param userId\n   * @return\n   */\n  public DataHolder sendF2FAccept(int userId) {\n\n    DataHolder result = new DataHolder(AppCAP.HTTP_ERROR, internetConnectionErrorMsg, null);\n\n    client.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);\n\n    HttpPost post = new HttpPost(AppCAP.URL_WEB_SERVICE + AppCAP.URL_API);\n\n    List<NameValuePair> params = new ArrayList<NameValuePair>();\n\n    try {\n      params.add(new BasicNameValuePair(\"action\", \"f2fAccept\"));\n      params.add(new BasicNameValuePair(\"greeter_id\", URLEncoder.encode(userId + \"\", \"utf-8\")));\n\n      post.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n\n      // Execute HTTP Post Request\n      HttpResponse response = client.execute(post);\n      HttpEntity resEntity = response.getEntity();\n\n      String responseString = EntityUtils.toString(resEntity);\n      if (Constants.enableApiJsonLogging)\n        RootActivity.log(\"HttpUtil_sendF2FAccept: \" + responseString);\n\n      if (responseString != null) {\n\n        JSONObject json = new JSONObject(responseString);\n        if (json != null) {\n\n          result.setHandlerCode(AppCAP.HTTP_REQUEST_SUCCEEDED); // change\n          // this\n          return result;\n        }\n      }\n\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n      return result;\n\n    } catch (ClientProtocolException e) {\n      e.printStackTrace();\n      return result;\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      return result;\n\n    } catch (JSONException e) {\n      e.printStackTrace();\n      result.setResponseMessage(\"JSON Parsing Error: \" + e);\n      return result;\n    }\n    return result;\n  }\n"}, {"dataset": "encode", "exampleID": 9897, "initialization": ["String s = Iterator<String>.next()"], "initializationStart": [299], "initializationEnd": [307], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 359, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["urlEncoder.encode(*,String)"], "useStart": [427], "useEnd": [478], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/buglabs/bug-osgi/tree/master/com.buglabs.bug.legacy/com/buglabs/util/simplerestclient/HTTPRequest.java", "rawCode": "  /** turns a map into a key=value property string for sending to bugnet */\n  public static String propertyString(Map<String, String> props) throws IOException {\n    String propstr = new String();\n    String key;\n    for (Iterator<String> i = props.keySet().iterator(); i.hasNext(); ) {\n      key = i.next();\n      propstr =\n          propstr\n              + URLEncoder.encode(key, \"UTF-8\")\n              + \"=\"\n              + URLEncoder.encode((String) props.get(key), \"UTF-8\");\n      if (i.hasNext()) {\n        propstr = propstr + \"&\";\n      }\n    }\n    return propstr;\n  }\n"}, {"dataset": "encode", "exampleID": 9898, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 144, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/crux/5.1.1/crux-dev/src/main/java/org/cruxframework/crux/core/rebind/rest/BodyParameterHandler.java", "rawCode": "  private void buildFormStringForSimpleType(StringBuilder str, String parameterName)\n      throws UnsupportedEncodingException {\n    str.append(URLEncoder.encode(parameterName, \"UTF-8\") + \"={\" + parameterName + \"}\");\n  }\n"}, {"dataset": "encode", "exampleID": 9899, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["unchecked(*)"], "tryExpressionStart": 85, "tryExpressionEnd": 89, "tryBlockStart": 85, "tryBlockEnd": 240, "catchExpressionStart": 157, "catchExpressionEnd": 196, "catchBlockStart": 157, "catchBlockEnd": 240, "exceptionHandlingCallStart": [210], "exceptionHandlingCallEnd": [233], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 104, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kai8406/cmop/tree/master/src/main/java/com/sobey/framework/utils/Encodes.java", "rawCode": "  /** URL 编码, Encode默认为UTF-8. */\n  public static String urlEncode(String part) {\n    try {\n      return URLEncoder.encode(part, DEFAULT_URL_ENCODING);\n    } catch (UnsupportedEncodingException e) {\n      throw Exceptions.unchecked(e);\n    }\n  }\n"}, {"dataset": "encode", "exampleID": 9900, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = urlEncoder.encode(s,enc)", "focalAPIStart": 170, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CraftFire/CraftCommons/tree/master/src/main/java/com/craftfire/commons/analytics/AnalyticsItem.java", "rawCode": "  /**\n   * Returns the key of the data item encoded in UTF-8.\n   *\n   * @return key of the data item in UTF-8\n   */\n  public String getKeyUTF8() {\n    try {\n      return URLEncoder.encode(this.key, \"UTF-8\");\n    } catch (UnsupportedEncodingException ignore) {\n      return this.key;\n    }\n  }\n"}]