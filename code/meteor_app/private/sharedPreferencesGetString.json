[{"dataset": "sharedPreferencesGetString", "exampleID": 7501, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(Activity)"], "initializationStart": [72], "initializationEnd": [127], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 170, "focalAPIEnd": 238, "followUpCheck": "value != null && value.trim().length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 244, "followUpCheckExpressionEnd": 320, "followUpCheckBlockStart": 244, "followUpCheckBlockEnd": 347, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Develman/IliConnect/tree/master/android/src/com/google/zxing/client/android/result/ResultHandler.java", "rawCode": "  private String parseCustomSearchURL() {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);\n    String customProductSearch =\n        prefs.getString(PreferencesActivity.KEY_CUSTOM_PRODUCT_SEARCH, null);\n    if (customProductSearch != null && customProductSearch.trim().length() == 0) {\n      return null;\n    }\n    return customProductSearch;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7502, "initialization": ["SharedPreferences sharedPreferences = getPrefsForBook(String)"], "initializationStart": [89], "initializationEnd": [114], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sharedPreferences.contains(key,)", "guardType": "IF {", "guardExpressionStart": 121, "guardExpressionEnd": 156, "guardBlockStart": 121, "guardBlockEnd": 246, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 201, "focalAPIEnd": 238, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fromJSON(String,value)"], "useStart": [172], "useEnd": [239], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NightWhistler/PageTurner/tree/master/src/net/nightwhistler/pageturner/Configuration.java", "rawCode": "  public List<HighLight> getHightLights(String fileName) {\n    SharedPreferences prefs = getPrefsForBook(fileName);\n\n    if (prefs.contains(KEY_HIGHLIGHTS)) {\n      return HighLight.fromJSON(fileName, prefs.getString(KEY_HIGHLIGHTS, \"[]\"));\n    }\n\n    return new ArrayList<>();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7503, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 251, "focalAPIEnd": 360, "followUpCheck": "value.equals(VALUE_DISCOVERABLE_TIMEOUT_NEVER)", "checkType": "IF", "followUpCheckExpressionStart": 369, "followUpCheckExpressionEnd": 427, "followUpCheckBlockStart": 369, "followUpCheckBlockEnd": 810, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ktoonsez/AOKP-I777/tree/master/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothDiscoverableEnabler.java", "rawCode": "  private int getDiscoverableTimeout() {\n    if (mTimeoutSecs != -1) {\n      return mTimeoutSecs;\n    }\n\n    int timeout = SystemProperties.getInt(SYSTEM_PROPERTY_DISCOVERABLE_TIMEOUT, -1);\n    if (timeout < 0) {\n      String timeoutValue =\n          mSharedPreferences.getString(\n              KEY_DISCOVERABLE_TIMEOUT, VALUE_DISCOVERABLE_TIMEOUT_TWO_MINUTES);\n\n      if (timeoutValue.equals(VALUE_DISCOVERABLE_TIMEOUT_NEVER)) {\n        timeout = DISCOVERABLE_TIMEOUT_NEVER;\n      } else if (timeoutValue.equals(VALUE_DISCOVERABLE_TIMEOUT_ONE_HOUR)) {\n        timeout = DISCOVERABLE_TIMEOUT_ONE_HOUR;\n      } else if (timeoutValue.equals(VALUE_DISCOVERABLE_TIMEOUT_FIVE_MINUTES)) {\n        timeout = DISCOVERABLE_TIMEOUT_FIVE_MINUTES;\n      } else {\n        timeout = DISCOVERABLE_TIMEOUT_TWO_MINUTES;\n      }\n    }\n    mTimeoutSecs = timeout;\n    return timeout;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7504, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 121, "focalAPIEnd": 163, "followUpCheck": "value.length() > 0", "checkType": "IF", "followUpCheckExpressionStart": 169, "followUpCheckExpressionEnd": 197, "followUpCheckBlockStart": 169, "followUpCheckBlockEnd": 257, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teeds/iiNet-Usage/tree/master/iiNet Usage/src/au/id/teda/volumeusage/helper/AccountHelper.java", "rawCode": "  public boolean usernameExists() {\n    // Log.d(DEBUG_TAG, \"AccountHelper > usernameExists()\");\n    String myUsername = mySettings.getString(\"iinet_username\", \"\");\n    if (myUsername.length() > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7505, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["Editor.getMessage()", "toString()", "e(String,*)"], "tryExpressionStart": 661, "tryExpressionEnd": 665, "tryBlockStart": 661, "tryBlockEnd": 2000, "catchExpressionStart": 1923, "catchExpressionEnd": 1943, "catchBlockStart": 1923, "catchBlockEnd": 2000, "exceptionHandlingCallStart": [1967, 1967, 1951], "exceptionHandlingCallEnd": [1981, 1992, 1993], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 1731, "focalAPIEnd": 1761, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.edit()"], "useStart": [1786], "useEnd": [1795], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yukkigogo/cyberhoodwatch/tree/master/src/com/sociam/android/message/MessageUpAsyncTask.java", "rawCode": "  @Override\n  protected Integer doInBackground(String... params) {\n\n    String user_id = params[0];\n    String user_id_code = params[1];\n    String lat = params[2];\n    String lon = params[3];\n    String date_time = params[4];\n    // Log.e(\"sociam\", \"result??\" + date_time);\n    String message = params[5];\n    String tags = params[6];\n\n    HttpClient client = new DefaultHttpClient();\n    HttpPost hpost = new HttpPost(\"http://sociamvm-yi1g09.ecs.soton.ac.uk/messageupandroid.php\");\n\n    ResponseHandler<String> responseHandler = new BasicResponseHandler();\n    MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n\n    try {\n      multipartEntity.addPart(\"user_id\", new StringBody(user_id));\n      multipartEntity.addPart(\"id_code\", new StringBody(user_id_code));\n      multipartEntity.addPart(\"lat\", new StringBody(lat));\n      multipartEntity.addPart(\"lon\", new StringBody(lon));\n      multipartEntity.addPart(\"date\", new StringBody(date_time));\n      multipartEntity.addPart(\"message\", new StringBody(message));\n      if (tags != \"\") multipartEntity.addPart(\"tags\", new StringBody(tags));\n\n      hpost.setEntity(multipartEntity);\n      String response = client.execute(hpost, responseHandler);\n      Log.v(\"sociam\", \"message response \" + response);\n\n      String[] str = response.split(\"\\n\");\n\n      String match = \"message_id\";\n\n      Pattern p = Pattern.compile(match);\n      for (int i = 0; i < str.length; i++) {\n        // Log.e(\"sociam\",str[i]);\n        Matcher m = p.matcher(str[i]);\n        if (m.find()) {\n          String[] str2 = str[i].split(\",\");\n\n          if (str2[1].equals(\"false\")) {\n            postSuccess = false;\n\n          } else {\n\n            String past_msg = sp.getString(\"message_id\", \"\");\n            Editor e = sp.edit();\n            e.putString(\"message_id\", past_msg + \",\" + str2[1]);\n            e.commit();\n          }\n        }\n      }\n\n    } catch (Exception e) {\n      Log.e(\"sociam\", e.getMessage().toString());\n    }\n\n    return 0;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7506, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 125, "focalAPIEnd": 162, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getAll(value)"], "useStart": [111], "useEnd": [163], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gschoeni/csci498/tree/master/LunchList/src/apt/tutorial/LunchFragment.java", "rawCode": "  private void initList() {\n    if (restaurants != null) {\n      restaurants.close();\n    }\n\n    restaurants = helper.getAll(prefs.getString(\"sort_order\", \"name\"));\n    restaurantsAdapter = new RestaurantAdapter(restaurants);\n    setListAdapter(restaurantsAdapter);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7507, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences()"], "initializationStart": [796], "initializationEnd": [826], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 1050, "focalAPIEnd": 1190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Date(value)"], "useStart": [1028], "useEnd": [1191], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heskew-riotapps/WordAndroid/tree/master/src/com/riotapps/word/hooks/PlayerService.java", "rawCode": "  public static Player handleAuthResponse(String result) { // InputStream iStream){\n    Gson gson = new Gson(); // wrap json return into a single call that takes a type\n\n    // Logger.w(TAG, \"handlePlayerResponse incoming json=\" + IOHelper.streamToString(iStream));\n    // Reader reader = new InputStreamReader(iStream);\n    // //serverResponseObject.response.getEntity().getContent());\n\n    Logger.d(TAG, \"handleAuthResponse result=\" + result.length() + \" \" + result);\n\n    Player storedPlayer = getPlayerFromLocal();\n\n    Type type = new TypeToken<Player>() {}.getType();\n    Player player = gson.fromJson(result, type);\n\n    /// save player info to shared preferences\n    // userId and auth_token ...email and password should have been stored before this call\n    SharedPreferences settings = Storage.getSharedPreferences();\n    SharedPreferences.Editor editor = settings.edit();\n\n    // Logger.w(TAG, \"handlePlayerResponse auth=\" + player.getAuthToken() + \" \" +\n    // gson.toJson(player));\n    Date completedDate =\n        new Date(\n            settings.getString(\n                Constants.USER_PREFS_LATEST_COMPLETED_GAME_DATE,\n                Constants.DEFAULT_COMPLETED_GAMES_DATE));\n\n    Logger.d(TAG, \"handlePlayerResponse about to getPlayerFromLocal\");\n    // manage the local completed games list, only keep 10 max in the list. roll off older games.\n    // do this before the player is stored locally\n\n    storedPlayer.setId(player.getId());\n    storedPlayer.setNickname(player.getNickname());\n    storedPlayer.setFirstName(player.getFirstName());\n    storedPlayer.setLastName(player.getLastName());\n    storedPlayer.setGravatar(player.getGravatar());\n    storedPlayer.setFB(player.getFB());\n    storedPlayer.setNumWins(player.getNumWins());\n    storedPlayer.setAuthToken(player.getAuthToken());\n    storedPlayer.setEmail(player.getEmail());\n    storedPlayer.setNoInterstitialAdsOption(player.isNoInterstitialAdsOption());\n    storedPlayer.setLastRefreshDate(player.getLastRefreshDate());\n\n    long now = Utils.convertNanosecondsToMilliseconds(System.nanoTime());\n\n    editor.putLong(Constants.USER_PREFS_PLAYER_CHECK_TIME, now);\n    editor.putString(Constants.USER_PREFS_LATEST_COMPLETED_GAME_DATE, completedDate.toGMTString());\n    editor.putString(Constants.USER_PREFS_AUTH_TOKEN, storedPlayer.getAuthToken());\n    editor.putString(Constants.USER_PREFS_USER_ID, storedPlayer.getId());\n    editor.putString(Constants.USER_PREFS_PLAYER_JSON, gson.toJson(storedPlayer));\n    // Check if we're running on GingerBread or above\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\n      // If so, call apply()\n      editor.apply();\n      // if not\n    } else {\n      // Call commit()\n      editor.commit();\n    }\n\n    player = null;\n    gson = null;\n    result = null;\n\n    return storedPlayer;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7508, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 72, "focalAPIEnd": 101, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decrypt(value)"], "useStart": [141], "useEnd": [151], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/isenseDev/iSENSE-Hardware/tree/master/Android/iSENSE Imports/src/edu/uml/cs/isense/supplements/ObscuredSharedPreferences.java", "rawCode": "  public long getLong(String key, long defValue) {\n    final String v = delegate.getString(key, null);\n    return v != null ? Long.parseLong(decrypt(v)) : defValue;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7509, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 167, "focalAPIEnd": 198, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getLong(String,int)", "TextView.setText(value)"], "useStart": [217, 267, 314, 351], "useEnd": [249, 298, 342, 374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WableMaker/wableAndroid/tree/master/Wable/src/com/thx/bizcat/tab/gobiz/PostRequestActivity.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\n    if (requestCode == 0 && resultCode == RESULT_OK) {\n\n      strDesc = pref.getString(\"TEMP_DESC\", \"\");\n      strPrice = pref.getString(\"TEMP_PRICE\", \"\");\n      strTime = pref.getString(\"TEMP_TIME\", \"\");\n      ticks = pref.getLong(\"TEMP_TICK\", 0);\n\n      tvDesc.setText(strDesc);\n      tvPrice.setText(strPrice);\n      tvTime.setText(strTime);\n    }\n\n    super.onActivityResult(requestCode, resultCode, data);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7510, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["sharedPreferences.getBoolean(String,boolean)"], "configurationStart": [67], "configurationEnd": [113], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 164, "focalAPIEnd": 234, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)"], "useStart": [147, 287, 410], "useEnd": [235, 357, 478], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jwf/Humansense-Android-App/tree/master/src/ca/mcgill/hs/plugin/GPSLogger.java", "rawCode": "  @Override\n  protected void onPluginStart() {\n    pluginEnabled = prefs.getBoolean(GPS_LOGGER_ENABLE_PREF, true);\n    minUpdateDistance =\n        Integer.parseInt(prefs.getString(GPS_LOGGER_DISTANCE_PREF, GPS_LOGGER_DISTANCE_DEFAULT));\n    minUpdateFrequency =\n        Integer.parseInt(prefs.getString(GPS_LOGGER_INTERVAL_PREF, GPS_LOGGER_INTERVAL_DEFAULT));\n    gpsTimeoutInMillis =\n        Integer.parseInt(prefs.getString(GPS_LOGGER_TIMEOUT_PREF, GPS_LOGGER_TIMEOUT_DEFAULT));\n    if (!pluginEnabled) {\n      return;\n    }\n    startListeningForLocationUpdates();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7511, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 75, "focalAPIEnd": 119, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map<String, Theme>.get(value)"], "useStart": [139], "useEnd": [159], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pixmob/freemobilenetstat/tree/master/src/org/pixmob/freemobile/netstat/MonitorService.java", "rawCode": "  private int getStatIcon(MobileOperator op) {\n    final String themeKey = prefs.getString(SP_KEY_THEME, THEME_DEFAULT);\n    Theme theme = THEMES.get(themeKey);\n    if (theme == null) {\n      theme = THEMES.get(THEME_DEFAULT);\n    }\n\n    if (MobileOperator.FREE_MOBILE.equals(op)) {\n      return theme.freeIcon;\n    } else if (MobileOperator.ORANGE.equals(op)) {\n      return theme.orangeIcon;\n    }\n    return android.R.drawable.ic_dialog_alert;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7512, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,*)"], "initializationStart": [746], "initializationEnd": [798], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 837, "focalAPIEnd": 896, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(value)"], "useStart": [828], "useEnd": [897], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/opensciencemap/VectorTileMap/tree/master/TileMapApp/src/org/oscim/app/filepicker/FilePicker.java", "rawCode": "  @TargetApi(11)\n  @Override\n  protected void onResume() {\n    super.onResume();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) getActionBar().hide();\n\n    // check if the full screen mode should be activated\n    // if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(\"fullscreen\",\n    // false)) {\n    // getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n    // getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n    // } else {\n    // getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n    // getWindow().addFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n    // }\n\n    // restore the current directory\n    SharedPreferences preferences = getSharedPreferences(PREFERENCES_FILE, MODE_PRIVATE);\n    this.currentDirectory = new File(preferences.getString(CURRENT_DIRECTORY, DEFAULT_DIRECTORY));\n    if (!this.currentDirectory.exists() || !this.currentDirectory.canRead()) {\n      this.currentDirectory = new File(DEFAULT_DIRECTORY);\n    }\n    browseToCurrentDirectory();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7513, "initialization": ["SharedPreferences sharedPreferences = getPreferences(*)"], "initializationStart": [60], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 159, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)"], "useStart": [144, 218, 277], "useEnd": [197, 255, 314], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ktsutsu/ISBN9784798124339/tree/master/ServerCheck/src/com/example/servercheck/ServerCheck.java", "rawCode": "  private void getPrefer() {\n    SharedPreferences prefer = getPreferences(MODE_WORLD_READABLE);\n    // プリファレンスをセットする。空なら、デフォルトでhttp://をセット\n    edit01.setText(prefer.getString(\"server1\", DEF_HTTP));\n    edit02.setText(prefer.getString(\"server2\", DEF_HTTP));\n    edit03.setText(prefer.getString(\"server3\", DEF_HTTP));\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7514, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 50, "focalAPIEnd": 84, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/carnero/cgeo-original/tree/master/src/carnero/cgeo/original/libs/Settings.java", "rawCode": "  public void reloadCacheType() {\n    cacheType = prefs.getString(\"cachetype\", null);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7515, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences()"], "initializationStart": [553], "initializationEnd": [583], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 620, "focalAPIEnd": 752, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "new Date(value)"], "useStart": [799, 1175], "useEnd": [937, 1198], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heskew-riotapps/WordAndroid/tree/master/src/com/riotapps/word/hooks/PlayerService.java", "rawCode": "  public static String setupAuthTokenCheckWithGame(Context ctx, String authToken, String gameId)\n      throws DesignByContractException {\n    Gson gson = new Gson();\n\n    NetworkConnectivity connection = new NetworkConnectivity(ApplicationContext.getAppContext());\n    // are we connected to the web?\n    Check.Require(\n        connection.checkNetworkConnectivity() == true, ctx.getString(R.string.msg_not_connected));\n\n    Check.Require(authToken.length() > 0, ctx.getString(R.string.validation_auth_token_required));\n\n    SharedPreferences settings = Storage.getSharedPreferences();\n    String completedDate =\n        settings.getString(\n            Constants.USER_PREFS_LATEST_COMPLETED_GAME_DATE,\n            Constants.DEFAULT_COMPLETED_GAMES_DATE);\n    String lastAlertActivationDate =\n        settings.getString(\n            Constants.USER_PREFS_LATEST_COMPLETED_GAME_DATE,\n            Constants.DEFAULT_LAST_ALERT_ACTIVATION_DATE);\n    TransportAuthTokenWithGame player = new TransportAuthTokenWithGame();\n    player.setToken(authToken);\n    player.setGameId(gameId);\n    player.setGcmRegistrationId(PlayerService.getRegistrationId());\n    player.setCompletedGameDate(new Date(completedDate));\n    player.setLastAlertActivationDate(lastAlertActivationDate);\n\n    return gson.toJson(player);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7516, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [195], "initializationEnd": [246], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 296, "focalAPIEnd": 341, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)", "sharedPreferences.getBoolean(String,boolean)"], "useStart": [279, 1075], "useEnd": [342, 1192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guzno/WifiListWidget/tree/master/src/se/magnulund/android/wifilistwidget/MainActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    PreferenceManager.setDefaultValues(this, R.xml.preferences, false);\n\n    preferences = PreferenceManager.getDefaultSharedPreferences(this);\n    int theme = getWidgetTheme(Integer.parseInt(preferences.getString(Preferences.THEME, \"1\")));\n\n    this.setTheme(theme);\n\n    setContentView(R.layout.main);\n\n    wifiList = (ListView) findViewById(R.id.wifi_list);\n\n    wifiAdapter = new WifiFilteredScanResultsAdapter(this);\n\n    if (headerView == null) {\n      headerView = new TextView(MainActivity.this);\n      int padding =\n          (int)\n              TypedValue.applyDimension(\n                  TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());\n      headerView.setPadding(padding, padding, padding, padding);\n      wifiList.addHeaderView(headerView);\n    }\n\n    hasMobileNetwork = NetworkUtils.hasMobileNetwork(this);\n\n    if (hasMobileNetwork) {\n      wifiApManager = new WifiApManager(MainActivity.this);\n    }\n\n    hasMobileNetwork =\n        preferences.getBoolean(\n            Preferences.DEVICE_HAS_MOBILE_NETWORK, deviceHasMobileNetwork(MainActivity.this));\n    if (hasMobileNetwork) {\n      wifiApManager = new WifiApManager(MainActivity.this);\n    }\n\n    wifiList.setAdapter(wifiAdapter);\n\n    wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);\n\n    mAdapter = NfcAdapter.getDefaultAdapter(this);\n\n    if (mAdapter != null) { // this device has nfc\n\n      // fetch\n      wifiList.setOnItemClickListener(\n          new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\n\n              FilteredScanResult filteredScanResult =\n                  (FilteredScanResult) wifiAdapter.getItem(position - 1);\n\n              JSONObject netConfiguration = new JSONObject();\n              try {\n                WifiConfiguration wifiConfiguration = filteredScanResult.getWifiConfiguration();\n                netConfiguration.put(\"BSSID\", wifiConfiguration.BSSID);\n                netConfiguration.put(\"SSID\", wifiConfiguration.SSID);\n                netConfiguration.put(\"hiddenSSID\", wifiConfiguration.hiddenSSID);\n                netConfiguration.put(\"preSharedKey\", wifiConfiguration.preSharedKey);\n\n                JSONArray jsonArray = jsonArrayFromBitSet(wifiConfiguration.allowedAuthAlgorithms);\n                netConfiguration.put(\n                    \"allowedAuthAlgorithms\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedAuthAlgorithms));\n                netConfiguration.put(\n                    \"allowedGroupCiphers\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedGroupCiphers));\n                netConfiguration.put(\n                    \"allowedKeyManagement\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedKeyManagement));\n                netConfiguration.put(\n                    \"allowedPairwiseCiphers\",\n                    jsonArrayFromBitSet(wifiConfiguration.allowedPairwiseCiphers));\n                netConfiguration.put(\n                    \"allowedProtocols\", jsonArrayFromBitSet(wifiConfiguration.allowedProtocols));\n\n                JSONArray wepkeys = new JSONArray();\n                for (String wepKey : wifiConfiguration.wepKeys) {\n                  if (wepKey != null) {\n                    wepkeys.put(wepKey);\n                  }\n                }\n\n                netConfiguration.put(\"wepKeys\", wepkeys);\n                netConfiguration.put(\"wepTxKeyIndex\", wifiConfiguration.wepTxKeyIndex);\n\n              } catch (JSONException e) {\n                e.printStackTrace();\n              }\n              NdefRecord ndefRecord =\n                  createTextRecord(netConfiguration.toString(), Locale.getDefault(), true);\n              mMessage = new NdefMessage(ndefRecord);\n              mAdapter.setNdefPushMessage(mMessage, MainActivity.this);\n\n              AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);\n              builder.setMessage(\"Beam that sheed\");\n              builder.setCancelable(true);\n              builder.setPositiveButton(\n                  \"Yap\",\n                  new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                      mAdapter.setNdefPushMessage(null, MainActivity.this);\n                      return;\n                    }\n                  });\n              AlertDialog dialog = builder.create();\n              dialog.show();\n            }\n          });\n\n      // Create a generic PendingIntent that will be deliver to this activity. The NFC stack\n      // will fill in the intent with the details of the discovered tag before delivering to\n      // this activity.\n      mPendingIntent =\n          PendingIntent.getActivity(\n              this, 0, new Intent(this, getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);\n\n      /*\n      <action android:name=\"android.nfc.action.NDEF_DISCOVERED\" />\n      <category android:name=\"android.intent.category.DEFAULT\" />\n      <data android:mimeType=\"text/plain\" />\n      */\n\n      /*\n      // Setup an intent filter for all MIME based dispatches\n      IntentFilter ndef = new IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED);\n      ndef.addCategory(\"android.intent.category.DEFAULT\");\n      try {\n      ndef.addDataType(\"text/plain\");\n      } catch (IntentFilter.MalformedMimeTypeException e) {\n      throw new RuntimeException(\"fail\", e);\n      }\n      mFilters = new IntentFilter[]{ndef,};\n\n      // Setup a tech list for all NfcF tags\n      mTechLists = new String[][]{new String[]{NfcF.class.getName()}};\n      */\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7517, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [200], "initializationEnd": [251], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 279, "focalAPIEnd": 323, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)"], "useStart": [351], "useEnd": [399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/p524/Tuboroidon524/tree/master/Tuboroid/src/info/narazaki/android/tuboroid/activity/ThreadEntryEditActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.entry_edit);\n\n    pending_ = null;\n\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n    String default_name = pref.getString(PREF_KEY_ENTRY_EDIT_NAME, \"\");\n    String default_mail = pref.getString(PREF_KEY_ENTRY_EDIT_MAIL, \"sage\");\n    EditText name_view = (EditText) findViewById(R.id.entry_edit_name);\n    name_view.setText(default_name);\n\n    EditText mail_view = (EditText) findViewById(R.id.entry_edit_mail);\n    mail_view.setText(default_mail);\n\n    EditText body_view = (EditText) findViewById(R.id.entry_edit_body);\n\n    for (EditText edit_text : new EditText[] {name_view, mail_view, body_view}) {\n      edit_text.getInputExtras(true).putBoolean(\"allowEmoji\", true);\n    }\n\n    // スレッド情報の取得(URLから作れる範囲の暫定のもの)\n    thread_uri_ = getIntent().getData();\n    thread_data_ = ThreadData.factory(thread_uri_);\n    if (thread_data_ == null) return;\n    getAgent().initNewThreadData(thread_data_, null);\n\n    // デフォルトのテキストを設定\n    String default_text = getIntent().getStringExtra(INTENT_KEY_THREAD_DEFAULT_TEXT);\n    if (default_text == null) {\n      default_text = getIntent().getStringExtra(Intent.EXTRA_TEXT);\n    }\n    if (default_text != null) {\n      body_view.setText(default_text);\n    }\n\n    // スレッド情報の読み込み\n    getAgent()\n        .getThreadData(\n            thread_data_,\n            new SQLiteAgent.GetThreadDataResult() {\n              @Override\n              public void onQuery(final ThreadData thread_data) {\n                runOnUiThread(\n                    new Runnable() {\n                      @Override\n                      public void run() {\n                        thread_data_ = thread_data;\n                        setTitle(thread_data_.thread_name_);\n                        EditText entry_edit_body = (EditText) findViewById(R.id.entry_edit_body);\n                        if (entry_edit_body.getText().length() == 0)\n                          entry_edit_body.setText(thread_data_.edit_draft_);\n                      }\n                    });\n              }\n            });\n    progress_dialog_ = new SimpleProgressDialog();\n\n    createButtons();\n\n    initAAButton();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7518, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 301, "focalAPIEnd": 338, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 346, "followUpCheckExpressionEnd": 364, "followUpCheckBlockStart": 346, "followUpCheckBlockEnd": 406, "use": ["put(*,value)"], "useStart": [375], "useEnd": [397], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neiraza/k-9/tree/master/src/com/fsck/k9/preferences/FolderSettings.java", "rawCode": "  public static Map<String, String> getFolderSettings(\n      SharedPreferences storage, String uuid, String folderName) {\n    Map<String, String> result = new HashMap<String, String>();\n    String prefix = uuid + \".\" + folderName + \".\";\n    for (String key : SETTINGS.keySet()) {\n      String value = storage.getString(prefix + key, null);\n      if (value != null) {\n        result.put(key, value);\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7519, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 51, "focalAPIEnd": 95, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)"], "useStart": [108], "useEnd": [129], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geeksville/Gaggle/tree/master/src/com/geeksville/gaggle/GagglePrefs.java", "rawCode": "  public int getGPSUpdateFreq() {\n    String val = prefs.getString(\"gps_update_freq_pref\", \"5\");\n    return Integer.parseInt(val);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7520, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [211], "initializationEnd": [270], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 283, "focalAPIEnd": 322, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/telephony/java/com/android/internal/telephony/PhoneBase.java", "rawCode": "  /** Method to retrieve the saved operator id from the Shared Preferences */\n  private String getSavedNetworkSelection() {\n    // open the shared preferences and search with our key.\n    SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getContext());\n    return sp.getString(NETWORK_SELECTION_KEY, \"\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7521, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 2179, "focalAPIEnd": 2246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "new GoogleReaderArticleSource(value,String)"], "useStart": [2268, 2715], "useEnd": [2336, 2755], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helianbobo/FlipDroid/tree/master/app/src/com/goal98/flipdroid2/activity/PageActivity.java", "rawCode": "  public void reload() {\n    current = null;\n    next = null;\n    previous = null;\n    preparingWindow = null;\n    bottomBar.hideUpdate();\n    currentPageIndex = -1;\n    PagingStrategy pagingStrategy = null;\n    if (accountType.equals(TikaConstants.TYPE_SINA_WEIBO)\n        || accountType.equals(TikaConstants.TYPE_MY_SINA_WEIBO)) {\n      //// Log.v(TAG, \"accountType\" + accountType);\n      if (isWeiboMode()) pagingStrategy = new WeiboPagingStrategy(this);\n      else pagingStrategy = new FixedPagingStrategy(this, 2);\n\n      pagingStrategy.setNoMoreArticleListener(\n          new NoMoreArticleListener() {\n            public void onNoMoreArticle() throws NoMoreStatusException {\n              // Log.d(\"cache system\", \"no more articles, refreshing repo\");\n              repo.refresh(repo.getRefreshingToken());\n            }\n          });\n\n      repo = new ContentRepo(pagingStrategy, refreshingSemaphore);\n\n      SinaToken sinaToken = SinaAccountUtil.getToken(PageActivity.this);\n      ArticleFilter filter;\n      if (isWeiboMode()) filter = new NullArticleFilter();\n      else filter = new ContainsLinkOrImageFilter(new NullArticleFilter());\n\n      source =\n          new SinaArticleSource(\n              true, sinaToken.getToken(), sinaToken.getTokenSecret(), sourceId, filter);\n\n    } else if (accountType.equals(TikaConstants.TYPE_RSS)\n        || accountType.equals(Constants.TYPE_BAIDUSEARCH)) {\n      pagingStrategy = new FixedPagingStrategy(this, 2);\n      pagingStrategy.setNoMoreArticleListener(\n          new NoMoreArticleListener() {\n            public void onNoMoreArticle() throws NoMoreStatusException {\n              throw new NoMoreStatusException();\n            }\n          });\n\n      repo = new ContentRepo(pagingStrategy, refreshingSemaphore);\n      cachedArticleSource =\n          new CachedArticleSource(\n              new RemoteRSSArticleSource(contentUrl, sourceName, sourceImageURL),\n              this,\n              new SourceCache(sourceContentDB),\n              rssurlDB);\n      cachedArticleSource.loadSourceFromCache();\n      source = cachedArticleSource;\n    } else if (accountType.equals(TikaConstants.TYPE_GOOGLE_READER)) {\n      String sid = preferences.getString(GoogleAccountActivity.GOOGLE_ACCOUNT_SID, \"\");\n      String auth = preferences.getString(GoogleAccountActivity.GOOGLE_ACCOUNT_AUTH, \"\");\n\n      pagingStrategy = new FixedPagingStrategy(this, 2);\n      pagingStrategy.setNoMoreArticleListener(\n          new NoMoreArticleListener() {\n            public void onNoMoreArticle() throws NoMoreStatusException {\n              throw new NoMoreStatusException();\n            }\n          });\n      repo = new ContentRepo(pagingStrategy, refreshingSemaphore);\n      source = new GoogleReaderArticleSource(sid, auth);\n    } else if (accountType.equals(Constants.TYPE_TAOBAO)) {\n\n      pagingStrategy = new FixedPagingStrategy(this, 2);\n      pagingStrategy.setNoMoreArticleListener(\n          new NoMoreArticleListener() {\n            public void onNoMoreArticle() throws NoMoreStatusException {\n              throw new NoMoreStatusException();\n            }\n          });\n\n      repo = new ContentRepo(pagingStrategy, refreshingSemaphore);\n      source = new TaobaoArticleSource(sourceName, this.getApplicationContext());\n    }\n\n    repo.setArticleSource(source);\n\n    headerText.setText(sourceName);\n    if (sourceImageURL != null && sourceImageURL.length() != 0) {\n      headerImageView.setImageUrl(sourceImageURL);\n      headerImageView.loadImage();\n      headerImageView.setRoundImage(true);\n      headerImageView.setBackgroundResource(R.drawable.border);\n    } else {\n      int maxTitle = 7;\n\n      if (sourceName != null && sourceName.length() >= maxTitle)\n        headerImageView.setVisibility(View.GONE);\n      else headerImageView.setVisibility(View.INVISIBLE);\n    }\n\n    slidingWindows = new PageViewSlidingWindows(5, repo, pageViewFactory, 2);\n    current = pageViewFactory.createFirstPage();\n    handler.post(\n        new Runnable() {\n          @Override\n          public void run() {\n            current.renderBeforeLayout();\n          }\n        });\n    shadow = new LinearLayout(PageActivity.this);\n    shadow.setBackgroundColor(Color.parseColor(\"#10999999\"));\n\n    shadow2 = new LinearLayout(PageActivity.this);\n    shadow2.setBackgroundColor(Color.parseColor(\"#FFDDDDDD\"));\n\n    shadowParams =\n        new LinearLayout.LayoutParams(\n            LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT);\n    pageViewLayoutParamsFront =\n        new FrameLayout.LayoutParams(\n            FrameLayout.LayoutParams.FILL_PARENT, FrameLayout.LayoutParams.FILL_PARENT);\n    pageViewLayoutParamsBack = pageViewLayoutParamsFront;\n    flipPage(true);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7522, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 87, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "new AccessToken(value,String)"], "useStart": [147, 215], "useEnd": [192, 245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thiendamvam/WhyQ/tree/master/Code/src/whyq/utils/twitter/TwitterUtils.java", "rawCode": "  public static boolean isAuthenticated(SharedPreferences prefs) {\n\n    String token = prefs.getString(OAuth.OAUTH_TOKEN, \"\");\n    String secret = prefs.getString(OAuth.OAUTH_TOKEN_SECRET, \"\");\n\n    AccessToken a = new AccessToken(token, secret);\n    Twitter twitter = new TwitterFactory().getInstance();\n    twitter.setOAuthConsumer(Constants.CONSUMER_KEY, Constants.CONSUMER_SECRET);\n    twitter.setOAuthAccessToken(a);\n\n    try {\n      twitter.getAccountSettings();\n      return true;\n    } catch (TwitterException e) {\n      return false;\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7523, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [101], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sharedPreferences.contains(key,)", "guardType": "IF {", "guardExpressionStart": 665, "guardExpressionEnd": 699, "guardBlockStart": 665, "guardBlockEnd": 1042, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 722, "focalAPIEnd": 766, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getBoolean(String,boolean)"], "useStart": [837, 2320, 2403, 2487, 2569, 2647], "useEnd": [870, 2367, 2455, 2535, 2619, 2691], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/opensciencemap/VectorTileMap/tree/master/TileMapApp/src/org/oscim/app/TileMap.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);\n\n    // MapScaleBar mapScaleBar = mapView.getMapScaleBar();\n    // mapScaleBar.setShowMapScaleBar(preferences.getBoolean(\"showScaleBar\",\n    // false));\n    // String scaleBarUnitDefault =\n    // getString(R.string.preferences_scale_bar_unit_default);\n    // String scaleBarUnit = preferences.getString(\"scaleBarUnit\",\n    // scaleBarUnitDefault);\n    // mapScaleBar.setImperialUnits(scaleBarUnit.equals(\"imperial\"));\n\n    if (preferences.contains(\"mapDatabase\")) {\n      setMapDatabase(preferences);\n    }\n    if (preferences.contains(\"theme\")) {\n      String name = preferences.getString(\"theme\", \"OSMARENDER\");\n      InternalRenderTheme theme = null;\n\n      try {\n        theme = InternalRenderTheme.valueOf(name);\n      } catch (IllegalArgumentException e) {\n      }\n      if (theme == null) map.setRenderTheme(InternalRenderTheme.DEFAULT);\n      else map.setRenderTheme(theme);\n    }\n    // try {\n    // String textScaleDefault =\n    // getString(R.string.preferences_text_scale_default);\n    // map.setTextScale(Float.parseFloat(preferences.getString(\"textScale\",\n    // textScaleDefault)));\n    // } catch (NumberFormatException e) {\n    // map.setTextScale(1);\n    // }\n\n    if (preferences.getBoolean(\"fullscreen\", false)) {\n      Log.i(\"mapviewer\", \"FULLSCREEN\");\n      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n      getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n    } else {\n      Log.i(\"mapviewer\", \"NO FULLSCREEN\");\n      getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n      getWindow().addFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);\n    }\n    if (preferences.getBoolean(\"fixOrientation\", true)) {\n      this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n      // this all returns the orientation which is not currently active?!\n      // getWindow().getWindowManager().getDefaultDisplay().getRotation());\n      // getWindow().getWindowManager().getDefaultDisplay().getOrientation());\n    }\n\n    // if (preferences.getBoolean(\"wakeLock\", false) && !mWakeLock.isHeld()) {\n    // mWakeLock.acquire();\n    // }\n\n    boolean drawTileFrames = preferences.getBoolean(\"drawTileFrames\", false);\n    boolean drawTileCoordinates = preferences.getBoolean(\"drawTileCoordinates\", false);\n    boolean disablePolygons = preferences.getBoolean(\"disablePolygons\", false);\n    boolean drawUnmatchedWays = preferences.getBoolean(\"drawUnmatchedWays\", false);\n    boolean debugLabels = preferences.getBoolean(\"debugLabels\", false);\n\n    DebugSettings cur = map.getDebugSettings();\n    if (cur.disablePolygons != disablePolygons\n        || cur.drawTileCoordinates != drawTileCoordinates\n        || cur.drawTileFrames != drawTileFrames\n        || cur.debugTheme != drawUnmatchedWays\n        || cur.debugLabels != debugLabels) {\n\n      DebugSettings debugSettings =\n          new DebugSettings(\n              drawTileCoordinates, drawTileFrames, disablePolygons, drawUnmatchedWays, debugLabels);\n\n      map.setDebugSettings(debugSettings);\n    }\n\n    map.redrawMap(false);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7524, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [197], "initializationEnd": [248], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 271, "focalAPIEnd": 311, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 324, "followUpCheckExpressionEnd": 349, "followUpCheckBlockStart": 324, "followUpCheckBlockEnd": 460, "use": ["GoogleAccountCredential.setSelectedAccountName(value)"], "useStart": [358], "useEnd": [406], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gabrielemariotti/androiddev/tree/master/GoogleAccount/src/it/gmariotti/android/examples/googleaccount/GDriveActivity.java", "rawCode": "  /** Init service */\n  private void initService() {\n    mCredential = GoogleAccountCredential.usingOAuth2(this, DriveScopes.DRIVE);\n    if (mAccountName == null) {\n      SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n      mAccountName = prefs.getString(PREF_ACCOUNT_NAME, null);\n    }\n\n    if (mAccountName != null) {\n      mCredential.setSelectedAccountName(mAccountName);\n      mService = getDriveService(mCredential);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7525, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(Context)"], "initializationStart": [228], "initializationEnd": [283], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 296, "focalAPIEnd": 324, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cyclestreets/android/tree/master/libraries/cyclestreets-core/src/main/java/net/cyclestreets/CycleStreetsPreferences.java", "rawCode": "  private static String getString(final String key, final String defVal) {\n    if (context_ == null) {\n      // Protect against a potential race condition on resume\n      return defVal;\n    }\n    final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context_);\n    return prefs.getString(key, defVal);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7526, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 72, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["e(String,value)", "sharedPreferences.getString(String,String)", "value.split(String)"], "useStart": [56, 125, 125], "useEnd": [101, 153, 164], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yukkigogo/cyberhoodwatch/tree/master/src/com/sociam/android/ReportDetailDialogFragment.java", "rawCode": "  public boolean isMyCrimeReport(String crime_id) {\n    Log.e(\"sociam\", sp.getString(\"crime_id\", \"\"));\n    String[] crimes = sp.getString(\"crime_id\", \"\").split(\",\");\n    for (String str : crimes) {\n      if (str.equals(crime_id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7527, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(Context)"], "initializationStart": [108], "initializationEnd": [160], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 192, "focalAPIEnd": 254, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 261, "followUpCheckExpressionEnd": 289, "followUpCheckBlockStart": 261, "followUpCheckBlockEnd": 317, "use": ["value.split(String)"], "useStart": [344], "useEnd": [370], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/COMU/homescreen/tree/master/ayse/YouTube/src/com/comu/android/YouTubeUtility.java", "rawCode": "  public static boolean hasVideoBeenViewed(Context pCtxt, String pVideoId) {\n    SharedPreferences lPrefs = PreferenceManager.getDefaultSharedPreferences(pCtxt);\n\n    String lViewedVideoIds = lPrefs.getString(\"com.keyes.screebl.lastViewedVideoIds\", null);\n\n    if (lViewedVideoIds == null) {\n      return false;\n    }\n\n    String[] lSplitIds = lViewedVideoIds.split(\";\");\n    if (lSplitIds == null || lSplitIds.length == 0) {\n      return false;\n    }\n\n    for (int i = 0; i < lSplitIds.length; i++) {\n      if (lSplitIds[i] != null && lSplitIds[i].equals(pVideoId)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7528, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 44, "focalAPIEnd": 84, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/samicemalone/android-vlc-remote/tree/master/src/org/peterbaldwin/vlcremote/model/Preferences.java", "rawCode": "  public String getAuthority() {\n    return mPreferences.getString(KEY_SERVER, null);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7529, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 460, "focalAPIEnd": 503, "followUpCheck": "value.equals(defValue)", "checkType": "IF", "followUpCheckExpressionStart": 510, "followUpCheckExpressionEnd": 540, "followUpCheckBlockStart": 510, "followUpCheckBlockEnd": 584, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jritter/VoterApp/tree/master/VoterApp/src/ch/bfh/evoting/voterapp/NetworkConfigActivity.java", "rawCode": "  /**\n   * This method initiates the connect process\n   *\n   * @param config an array containing the SSID and the password of the network\n   * @param context android context\n   */\n  public void connect(String[] config, Context context) {\n\n    identificationMissing = false;\n    wlanKeyMissing = false;\n\n    wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);\n    adhoc = new AdhocWifiManager(wifi);\n    ssid = config[0];\n\n    identification = preferences.getString(\"identification\", \"\");\n\n    if (identification.equals(\"\")) {\n      identificationMissing = true;\n    }\n\n    boolean connectedSuccessful = false;\n\n    // check whether the network is already known, i.e. the password is\n    // already stored in the device\n    for (WifiConfiguration configuredNetwork : wifi.getConfiguredNetworks()) {\n      if (configuredNetwork.SSID.equals(\"\\\"\".concat(ssid).concat(\"\\\"\"))) {\n        connectedSuccessful = true;\n        networkId = configuredNetwork.networkId;\n        break;\n      }\n    }\n\n    if (!connectedSuccessful) {\n      for (ScanResult result : wifi.getScanResults()) {\n        if (result.SSID.equals(ssid)) {\n          connectedSuccessful = true;\n\n          if (result.capabilities.contains(\"WPA\") || result.capabilities.contains(\"WEP\")) {\n            wlanKeyMissing = true;\n          }\n          break;\n        }\n      }\n    }\n\n    if (connectedSuccessful) {\n\n      if (identificationMissing || wlanKeyMissing) {\n        identificationWlanKeyDialogFragment =\n            new IdentificationWlanKeyDialogFragment(identificationMissing, wlanKeyMissing);\n        identificationWlanKeyDialogFragment.setStyle(DialogFragment.STYLE_NORMAL, R.style.Dialog);\n        identificationWlanKeyDialogFragment.show(\n            getFragmentManager(), \"identificationWlanKeyDialogFragment\");\n      } else {\n        adhoc.connectToNetwork(networkId, this);\n      }\n    } else {\n      for (int i = 0; i < 2; i++)\n        Toast.makeText(\n                this, getString(R.string.toast_network_not_found_text, ssid), Toast.LENGTH_SHORT)\n            .show();\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7530, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 128, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseLong(value)"], "useStart": [199], "useEnd": [222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alberapps/tiempobus/tree/master/TiempoBus/src/alberapps/android/tiempobus/principal/DatosPantallaPrincipal.java", "rawCode": "  /**\n   * Frecuencia configurable\n   *\n   * @return frecuencia\n   */\n  public long frecuenciaRecarga() {\n\n    String preFrec = preferencias.getString(\"tiempo_recarga\", \"60\");\n\n    long frecuencia = Long.parseLong(preFrec) * 1000;\n\n    return frecuencia;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7531, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 745, "focalAPIEnd": 811, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "new Module(int,value,String)"], "useStart": [833, 948], "useEnd": [906, 985], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moobid/JARA/tree/master/src/com/eps_hioa_2013/JointAttentionResearchApp/ModuleActivity.java", "rawCode": "  private List<Module> createModules() {\n    // create container for new modules\n    List<Module> moduleContainer = new ArrayList<Module>();\n\n    // loop through preference file for all module names\n    for (int i = 0; i <= getModulecounterOutOfPreferences(); i++) {\n      // start values for error checking\n      Module currentModule = null;\n      String name = \"\";\n      String description = \"\";\n      int number = -1;\n\n      // get the preference with currentModule information\n      String nameOfModulePref = \"MODULE\" + i;\n      SharedPreferences pref_currentModule = getSharedPreferences(nameOfModulePref, 0);\n\n      // for each name found create new Module object with preference name and description name and\n      // number\n      name = pref_currentModule.getString(\"module_name\", ACCESSIBILITY_SERVICE);\n      description = pref_currentModule.getString(\"module_description\", ACCESSIBILITY_SERVICE);\n      number = i;\n      currentModule = new Module(number, name, description);\n\n      // add new Module object to container\n      moduleContainer.add(currentModule);\n    }\n\n    // Return Container\n    return moduleContainer;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7532, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(Context)"], "initializationStart": [335], "initializationEnd": [389], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 407, "focalAPIEnd": 438, "followUpCheck": "value == defValue", "checkType": "IF", "followUpCheckExpressionStart": 496, "followUpCheckExpressionEnd": 515, "followUpCheckBlockStart": 496, "followUpCheckBlockEnd": 1470, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dmonllao/Android_Video_Rest_Client/tree/master/src/com/monllao/david/androidrestclient/User.java", "rawCode": "  /**\n   * Get the phone user pwd (the same for all the accounts)\n   *\n   * <p>If the password was not set it will ask for a password\n   *\n   * @param context The context where the dialog should be displayed\n   * @return The user password\n   */\n  private void initPassword(final Context context) {\n\n    final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n\n    password = prefs.getString(\"password\", \"\");\n\n    // Request a new pwd if it is the first access\n    if (password == \"\") {\n\n      // Alert dialog\n      AlertDialog.Builder alert = new AlertDialog.Builder(context);\n      alert.setTitle(R.string.set_pwd);\n      alert.setMessage(R.string.set_pwd_info);\n\n      // Input text\n      final EditText input = new EditText(context);\n      input.setTransformationMethod(new PasswordTransformationMethod());\n      alert.setView(input);\n\n      // Listener\n      alert.setPositiveButton(\n          R.string.set_pwd_button,\n          new DialogInterface.OnClickListener() {\n            public void onClick(DialogInterface dialog, int which) {\n              SharedPreferences.Editor editor = prefs.edit();\n              editor.putString(\"password\", input.getText().toString());\n              editor.commit();\n\n              // Now we can create the new user\n              getUserFromServer(context);\n            }\n          });\n\n      alert.show();\n\n      // Get the user from the server\n    } else {\n      getUserFromServer(context);\n    }\n\n    // If the user doesn't set up a password it can continue\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7533, "initialization": ["String key = SharedPreferences.getString(int)", "SharedPreferences sharedPreferences = getSharedPreferences(String,int)"], "initializationStart": [202, 271], "initializationEnd": [240, 302], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 317, "focalAPIEnd": 345, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)"], "useStart": [392], "useEnd": [415], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neoriddle/DogChow4A/tree/master/src/mx/ferreyra/dogapp/DogChowApplication.java", "rawCode": "  @Override\n  public void onCreate() {\n    super.onCreate();\n    DogChowApplication.app = this;\n\n    // Loading preferences\n    String prefer = getString(R.string.preferences_name);\n    String userId = getString(R.string.preference_user_id);\n    SharedPreferences pref = getSharedPreferences(prefer, 0);\n    userId = pref.getString(userId, null);\n    if (userId != null) this.currentUserId = Integer.valueOf(userId);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7534, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 42, "focalAPIEnd": 85, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BohemianTeam/MoneyProject/tree/master/iBC/Android/src/com/ibc/controller/SharedPreferencesManager.java", "rawCode": "  public String loadInstID() {\n    return _sharedPreferences.getString(INST_ID, null);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7535, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [74], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 166, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)"], "useStart": [149], "useEnd": [213], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gaeeyo/Tuboroidon/tree/master/Tuboroid/src/info/narazaki/android/tuboroid/TuboroidApplication.java", "rawCode": "  public int getCurrentScreenOrientation() {\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n    int orientation = Integer.parseInt(pref.getString(\"pref_screen_orientation\", \"0\"));\n\n    switch (orientation) {\n      case 1:\n        return ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;\n      case 2:\n        return ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;\n    }\n    return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7536, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 106, "focalAPIEnd": 143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getAll(value)"], "useStart": [92], "useEnd": [144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/laberle/csci498android/tree/master/LunchList/src/csci498/laberle/lunchlist/LunchFragment.java", "rawCode": "  private void initList() {\n    if (model != null) {\n      model.close();\n    }\n    model = helper.getAll(prefs.getString(\"sort_order\", \"name\"));\n    adapter = new RestaurantAdapter(model);\n    setListAdapter(adapter);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7537, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,int)"], "initializationStart": [470], "initializationEnd": [509], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sharedPreferences.contains(key,)", "guardType": "IF {", "guardExpressionStart": 516, "guardExpressionEnd": 551, "guardBlockStart": 516, "guardBlockEnd": 969, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 569, "focalAPIEnd": 606, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setToken(value)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)"], "useStart": [560, 646, 724, 802], "useEnd": [607, 683, 762, 839], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wang103/DigitalStickyNotes/tree/master/Code/src/edu/illinois/digitalstickynotes/MainActivity.java", "rawCode": "  /**\n   * Call this method after connection (WIFI Direct or Bluetooth) is established to do additional\n   * setup.\n   */\n  private void postSetupConnection() {\n\n    Communicator communicator = new Communicator(this, connectionManager);\n    ((TheApplication) (this.getApplication())).setCommunicator(communicator);\n\n    // Check to see if the app has the access token, if not, start the\n    // login activity to ask for user's credentials.\n    SharedPreferences prefs = this.getSharedPreferences(PREF_NAME, 0);\n\n    if (prefs.contains(PREF_TOKEN_KEY)) {\n      setToken(prefs.getString(PREF_TOKEN_KEY, null));\n      userInfo.getUser().setUserName(prefs.getString(PREF_USER_NAME, null));\n      userInfo.getUser().setFirstName(prefs.getString(PREF_FIRST_NAME, null));\n      userInfo.getUser().setLastName(prefs.getString(PREF_LAST_NAME, null));\n      postSigningIn();\n    } else {\n      this.signInButton.setEnabled(true);\n      this.signOutButton.setEnabled(false);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7538, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 3241, "focalAPIEnd": 3305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new UserInfo(value,*,String)"], "useStart": [3365], "useEnd": [3435], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/realtalk403/realtalk/tree/master/src/realtalk/activities/AccountSettingsActivity.java", "rawCode": "  /**\n   * Method called when user submits to change his/her password\n   *\n   * @param view\n   */\n  public void changePword(View view) {\n    EditText edittextOldPword = (EditText) findViewById(R.id.oldpword);\n    EditText edittextNewPword = (EditText) findViewById(R.id.newpword);\n    EditText edittextConfPword = (EditText) findViewById(R.id.confpword);\n    String stOldPword = edittextOldPword.getText().toString();\n    String stNewPword = edittextNewPword.getText().toString();\n    String stConfPword = edittextConfPword.getText().toString();\n\n    // check to see if the old password is correct\n\n    // if any fields are blank, dialog box pops up\n    if (stNewPword.trim().equals(\"\")\n        || stOldPword.trim().equals(\"\")\n        || stConfPword.trim().equals(\"\")) {\n      AlertDialog.Builder alertdialogbuilder = new AlertDialog.Builder(this);\n      // set title\n      alertdialogbuilder.setTitle(R.string.invalid_fields);\n\n      // set dialog message\n      alertdialogbuilder\n          .setMessage(R.string.fill_fields)\n          .setCancelable(false)\n          .setPositiveButton(\n              R.string.close,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                  // close the dialog box if this button is clicked\n                  dialog.cancel();\n                }\n              });\n\n      // create alert dialog\n      AlertDialog alertdialogEmptyField = alertdialogbuilder.create();\n\n      // show alert dialog\n      alertdialogEmptyField.show();\n    } else if (!stNewPword.equals(stConfPword)) {\n      AlertDialog.Builder alertdialogbuilder = new AlertDialog.Builder(this);\n      // set title\n      alertdialogbuilder.setTitle(R.string.invalid_input);\n\n      // set dialog message\n      alertdialogbuilder\n          .setMessage(R.string.pword_mismatch)\n          .setCancelable(false)\n          .setPositiveButton(\n              R.string.close,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                  // close the dialog box if this button is clicked\n                  dialog.cancel();\n                }\n              });\n\n      // create alert dialog\n      AlertDialog alertdialogEmptyField = alertdialogbuilder.create();\n\n      // show alert dialog\n      alertdialogEmptyField.show();\n    } else if (stNewPword.length() > MAX_PASSWORD_LENGTH) {\n      AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\n      // set title\n      alertDialogBuilder.setTitle(R.string.invalid_pword);\n\n      // set dialog message\n      alertDialogBuilder\n          .setMessage(R.string.long_pword)\n          .setCancelable(false)\n          .setPositiveButton(\n              R.string.close,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int id) {\n                  // close the dialog box if this button is clicked\n                  dialog.cancel();\n                }\n              });\n\n      // create alert dialog\n      AlertDialog alertdialogBadPword = alertDialogBuilder.create();\n\n      // show alert dialog\n      alertdialogBadPword.show();\n    } else {\n      String stUsername = sharedpreferencesLoginPrefs.getString(\"loggedin_username\", null);\n      new PwordChanger(\n              this,\n              new UserInfo(stUsername, CommonUtilities.hash(stOldPword), DEFAULT_ID),\n              this,\n              CommonUtilities.hash(stNewPword))\n          .execute();\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7539, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(Activity)"], "initializationStart": [125], "initializationEnd": [180], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 338, "focalAPIEnd": 383, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toKif(FileOutputStream,value)"], "useStart": [320], "useEnd": [384], "hasFinally": 1, "cleanUpCall": ["FileOutputStream.close()"], "finallyExpressionStart": 392, "finallyExpressionEnd": 400, "finallyBlockStart": 392, "finallyBlockEnd": 449, "cleanUpCallStart": [428], "cleanUpCallEnd": [442], "url": "https://github.com/yasushi-saito/AndroidShogi/tree/master/src/com/ysaito/shogi/GameLogListManager.java", "rawCode": "  private void saveInSdcard(Activity activity, GameLog log, File logFile) throws IOException {\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);\n    FileOutputStream stream = null;\n    try {\n      logFile.getParentFile().mkdirs();\n      stream = new FileOutputStream(logFile);\n      log.toKif(stream, prefs.getString(\"log_save_format\", \"kif_dos\"));\n    } finally {\n      if (stream != null) stream.close();\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7540, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(Context)"], "initializationStart": [93], "initializationEnd": [147], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 171, "focalAPIEnd": 210, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 216, "followUpCheckExpressionEnd": 237, "followUpCheckBlockStart": 216, "followUpCheckBlockEnd": 359, "use": ["sharedPreferences.edit()", "putString(String,value)"], "useStart": [293, 293], "useEnd": [310, 343], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/monaca/monaca-framework-android/tree/master/MonacaUtils/src/mobi/monaca/utils/MonacaDevice.java", "rawCode": "  private static String getIDUsingUUID(Context context) {\n    SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);\n    String deviceId = sharedPref.getString(\"device_id\", null);\n    if (deviceId == null) {\n      deviceId = UUID.randomUUID().toString();\n      sharedPref.edit().putString(\"device_id\", deviceId).commit();\n    }\n    return deviceId;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7541, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,*)"], "initializationStart": [119], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 207, "focalAPIEnd": 244, "followUpCheck": "!StringUtils.isEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 286, "followUpCheckExpressionEnd": 321, "followUpCheckBlockStart": 286, "followUpCheckBlockEnd": 640, "use": ["fromJSON(value,*)"], "useStart": [373], "useEnd": [435], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/socialize/socialize-sdk-android/tree/master/sdk/src/com/socialize/api/PreferenceSessionPersister.java", "rawCode": "  @Override\n  public synchronized void delete(Context context, AuthProviderType type) {\n\n    SharedPreferences prefs = context.getSharedPreferences(PREFERENCES, Context.MODE_PRIVATE);\n\n    String authData = prefs.getString(USER_AUTH_DATA, null);\n\n    Editor editor = prefs.edit();\n\n    if (!StringUtils.isEmpty(authData)) {\n      UserProviderCredentialsMap map =\n          jsonUtils.fromJSON(authData, UserProviderCredentialsMap.class);\n\n      map.remove(type);\n\n      editor.putString(USER_AUTH_DATA, jsonUtils.toJSON(map));\n    } else {\n      editor.putString(USER_AUTH_DATA, jsonUtils.toJSON(makeDefaultUserProviderCredentials()));\n    }\n\n    editor.commit();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7542, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 499, "focalAPIEnd": 529, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new GraphRequestAsyncTask(Context,String,String,value,GraphRequest,GraphLoadCallback)"], "useStart": [536], "useEnd": [623], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/um104/C4PPMobileMetrics/tree/master/MobileMetricsDashboard/src/edu/channel4/mm/db/android/network/SalesforceConn.java", "rawCode": "  /**\n   * Gets the {@link Graph} for the given {@link GraphRequest} from Salesforce. Don't call this\n   * method directly. Instead, call the {@link GraphFactory}.\n   *\n   * <p>TODO: Enforce that we shouldn't call this method directly.\n   */\n  public void getGraphViaNetwork(GraphRequest graphRequest, GraphLoadCallback callback) {\n\n    // Grab the most up-to-date field values\n    String baseUri = getCurrentBaseUri();\n    String accessToken = restClientAccess.getAccessToken();\n    String appId = prefs.getString(Keys.ID, null);\n\n    new GraphRequestAsyncTask(context, baseUri, accessToken, appId, graphRequest, callback)\n        .execute();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7543, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 48, "focalAPIEnd": 69, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunqimin09/FirstApp/tree/master/RemainingDate/src/com/example/appcolleageentrance/SharePre.java", "rawCode": "  public String getStr(String key) {\n    return sp.getString(key, \"\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7544, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [2043], "initializationEnd": [2094], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 2113, "focalAPIEnd": 2148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)"], "useStart": [2168], "useEnd": [2186], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/daswolle/DigitalRuler/tree/master/src/com/example/digitalmeasuringtape/MainActivity.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public void Measure() {\n\n    System.out.println(\"Calling Measure\");\n\n    Collect();\n    pi_string = \"calculating\";\n    handler.sendEmptyMessage(0);\n    measurements.trim(greatestX);\n    measurements.unravel();\n\n    // saving data; dev only\n    // String xString = measurements.listToString(measurements.xData, \"x\");\n    // String yString = measurements.listToString(measurements.yData, \"y\");\n    // String tString = measurements.listToString(measurements.tData, \"t\");\n    // measurements.writeGraph(\"graphs.csv\", xString, yString, tString);\n\n    // determine which measurement mode is necessary; deprecated functions here; remove measuring\n    // other axes\n    double d;\n    d = 0;\n    if (!sPrefs.getBoolean(\"MeasureY\", false)) {\n      physics.RemoveGravity(measurements.xData);\n      physics.LowPassFilter(measurements.xData);\n      d = physics.Distance(measurements.xData, measurements.tData);\n    } else if (!sPrefs.getBoolean(\"MeasureZ\", false)) {\n      physics.RemoveGravity(measurements.xData, measurements.yData);\n\n      d = physics.Distance(measurements.xData, measurements.yData, measurements.tData);\n    } else {\n      physics.RemoveGravity(measurements.xData, measurements.yData, measurements.zData);\n\n      d =\n          physics.Distance(\n              measurements.xData, measurements.yData, measurements.zData, measurements.tData);\n    }\n\n    // set up format for decimal places\n    NumberFormat nf = NumberFormat.getInstance();\n    nf.setMinimumFractionDigits(1);\n    nf.setMaximumFractionDigits(3);\n\n    // set up output for integers\n    NumberFormat wnf = NumberFormat.getInstance();\n    wnf.setMinimumFractionDigits(0);\n    wnf.setMaximumFractionDigits(1);\n\n    String truncate;\n    if (d == 0) truncate = \"0.0\";\n    else {\n      truncate = nf.format(d);\n    }\n    // handle NaN\n    if (d == Float.NaN) {\n      pi_string = \"NaN. Try Again.\";\n    } else if (d < 0) pi_string = \"Eh, Try Again.\";\n    else {\n      // get shared setting for measurement units\n      SharedPreferences sPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n      String y = sPrefs.getString(\"meas_units\", \"0\");\n      int UNITS = Integer.valueOf(y);\n      System.out.println(\"UNITS INT: \" + UNITS);\n      if (UNITS == 0) {\n        // convert to feet\n        System.out.println(\"truncate: \" + truncate);\n        double x = Double.parseDouble(truncate) * 3.28084;\n\n        double f = (x - Math.floor(x)) * 12;\n\n        x = Math.floor(x);\n\n        String result = wnf.format(x);\n        String fraction = wnf.format(f);\n\n        System.out.println(\"double pi_string/truncate: \" + result);\n\n        if (x == 0) {\n          pi_string = fraction + \" in\";\n        } else {\n          pi_string = result + \" ft \" + fraction + \" in\";\n        }\n      } else {\n        pi_string = truncate + \" m\";\n      }\n    }\n    handler.sendEmptyMessage(0);\n    System.out.println(pi_string);\n    System.out.println(\"returning from Measure()\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7545, "initialization": ["SharedPreferences sharedPreferences = getGCMPreferences(Context)"], "initializationStart": [89], "initializationEnd": [115], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 145, "focalAPIEnd": 181, "followUpCheck": "value.isEmpty()", "checkType": "IF", "followUpCheckExpressionStart": 187, "followUpCheckExpressionEnd": 216, "followUpCheckBlockStart": 187, "followUpCheckBlockEnd": 286, "use": ["sharedPreferences.getInt(String,int)"], "useStart": [316], "useEnd": [369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dipen2512/Scheduler/tree/master/SchedulerApp/src/com/schedulerapp/gcm/GcmHandler.java", "rawCode": "  public String getRegistrationId(Context context) {\n    final SharedPreferences prefs = getGCMPreferences(context);\n    String registrationId = prefs.getString(PROPERTY_REG_ID, \"\");\n    if (registrationId.isEmpty()) {\n      Log.i(TAG, \"Registration not found.\");\n      return \"\";\n    }\n\n    int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);\n    int currentVersion = getAppVersion(context);\n    if (registeredVersion != currentVersion) {\n      Log.i(TAG, \"App version changed.\");\n      return \"\";\n    }\n\n    return registrationId;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7546, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 42, "focalAPIEnd": 95, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/trunk/GeoBeagle/src/com/google/code/geobeagle/activity/cachelist/actions/context/delete/ContextActionDeleteStore.java", "rawCode": "  public String getCacheId() {\n    return sharedPreferences.getString(CACHE_TO_DELETE_ID, null);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7547, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [430], "initializationEnd": [493], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 574, "focalAPIEnd": 629, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "parseInt(value)"], "useStart": [664, 770], "useEnd": [713, 795], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hugojosefson/robotium-samples-srplayer-app/tree/master/SRPlayer/src/sr/player/PlayerService.java", "rawCode": "  public void restartRightNowInfo(boolean ForceUpdate) {\n    if (this.rightNowtask != null) {\n      this.rightNowtask.cancel();\n    }\n\n    // If the stream is a NORMAL_STREAM, info about\n    // the strem can be collected in intervals, if\n    // not, the information is static\n    if (this.currentStation.getStreamType() == Station.NORMAL_STREAM) {\n      this.rightNowtask = new RightNowTask(this);\n      SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getBaseContext());\n      String rateStr;\n      if (this.playerStatus == STOP) {\n        rateStr = prefs.getString(\"rightNowInfoRetrievalPausedRate\", \"2\");\n      } else {\n        rateStr = prefs.getString(\"rightNowInfoRetrievalRate\", \"2\");\n      }\n      int rate = 0;\n      try {\n        rate = Integer.parseInt(rateStr);\n      } catch (NumberFormatException e) {\n        rate = 2;\n      }\n      Log.d(getClass().getSimpleName(), \"Starting rightnow task with \" + rate);\n      if (rate > 0) this.rightNowTimer.schedule(rightNowtask, 0, rate * _TIME_MINUTE);\n      else if (ForceUpdate) this.rightNowTimer.schedule(rightNowtask, 0);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7548, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 236, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_inputmethods_LatinIME/tree/master/java/src/com/android/inputmethod/latin/LatinIMESettings.java", "rawCode": "  public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {\n    (new BackupManager(this)).dataChanged();\n    // If turning on voice input, show dialog\n    if (key.equals(VOICE_SETTINGS_KEY) && !mVoiceOn) {\n      if (!prefs.getString(VOICE_SETTINGS_KEY, mVoiceModeOff).equals(mVoiceModeOff)) {\n        showVoiceConfirmation();\n      }\n    }\n    mVoiceOn = !(prefs.getString(VOICE_SETTINGS_KEY, mVoiceModeOff).equals(mVoiceModeOff));\n    updateVoiceModeSummary();\n    updateSettingsKeySummary();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7549, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 128, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getBoolean(String,boolean)"], "useStart": [178, 219, 316, 404], "useEnd": [199, 252, 349, 453], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/saetre/TABuss/tree/master/src/org/ubicompforall/BusTUC/Main/Homescreen.java", "rawCode": "  public void adjustSettings() {\n\n    PreferenceManager.setDefaultValues(context, R.layout.preference, false);\n    String foo = preferences.getString(\"num1\", \"\");\n    numStops = Integer.parseInt(foo);\n    String foo2 = preferences.getString(\"num2\", \"\");\n    numStopsOnMap = Integer.parseInt(foo2);\n    String foo3 = preferences.getString(\"num3\", \"\");\n    dist = Integer.parseInt(foo3);\n    fancyOracle = preferences.getBoolean(\"Orakelvalg\", fancyOracle);\n    System.out.println(\"onCreate: FancyOracle: \" + fancyOracle);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7550, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 109, "focalAPIEnd": 136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,value)"], "useStart": [86], "useEnd": [137], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/welovechickens/Annenberg-Friend-Finder/tree/master/Annenberg Friend Finder/src/com/harvard/annenberg/ProfileActivity.java", "rawCode": "  public void updateStatus() {\n    parameters = new Hashtable<String, String>();\n\n    parameters.put(\"huid\", prefs.getString(\"huid\", \"\"));\n    if (currentSelection == 1) parameters.put(\"eatStatus\", \"N\");\n    else parameters.put(\"eatStatus\", \"Y\");\n    parameters.put(\"state\", String.valueOf(currentSelection));\n\n    UpdateStatusTask upl = new UpdateStatusTask(parameters);\n    upl.execute(UPDATE_URL);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7551, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,*)"], "initializationStart": [98], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 180, "focalAPIEnd": 218, "followUpCheck": "value.equals(defValue)", "checkType": "IF", "followUpCheckExpressionStart": 224, "followUpCheckExpressionEnd": 243, "followUpCheckBlockStart": 224, "followUpCheckBlockEnd": 270, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thiendamvam/WhyQ/tree/master/Code/src/whyq/utils/WhyqUtils.java", "rawCode": "  public String getFacebookToken(Context activity) {\n    SharedPreferences savedSession =\n        activity.getSharedPreferences(\"FACEBOOK\", Context.MODE_PRIVATE);\n    String key = savedSession.getString(\"fb_token\", \"\");\n    if (key.equals(\"\")) {\n      return null;\n    }\n    return key;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7552, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 57, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/delleceste/it.giacomos.android.osmer/tree/master/Osmer/src/it/giacomos/android/osmer/preferences/Settings.java", "rawCode": "  public String getReporterUserName() {\n    String res = mSharedPreferences.getString(\"REPORTER_USER_NAME\", \"\");\n    return res;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7553, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [170], "initializationEnd": [221], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 242, "focalAPIEnd": 281, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 288, "followUpCheckExpressionEnd": 306, "followUpCheckBlockStart": 288, "followUpCheckBlockEnd": 600, "use": ["MediaPlayer.setDataSource(value)"], "useStart": [389], "useEnd": [416], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bybeet/csci498android/tree/master/LunchList/src/csci498/bybeet/lunchlist/AlarmActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.alarm);\n    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);\n    String sound = prefs.getString(\"alarm_ringtone\", null);\n\n    if (sound != null) {\n      player.setAudioStreamType(AudioManager.STREAM_ALARM);\n      try {\n        player.setDataSource(sound);\n        player.setOnPreparedListener(this);\n        player.prepareAsync();\n      } catch (Exception e) {\n        Log.e(\"LunchList\", \"Exception in playing ringtone\", e);\n      }\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7554, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,int)"], "initializationStart": [203], "initializationEnd": [236], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 260, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getFieldsFromPrefsString(value)"], "useStart": [307], "useEnd": [339], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/isenseDev/iSENSE-Hardware/tree/master/Android/Data_Collector/src/edu/uml/cs/isense/collector/DataCollector.java", "rawCode": "  private void getEnabledFields() {\n\n    try {\n      for (String s : acceptedFields) {\n        if (s.length() != 0) break;\n      }\n    } catch (NullPointerException e) {\n      SharedPreferences mPrefs = getSharedPreferences(\"PROJID\", 0);\n      String fields = mPrefs.getString(\"accepted_fields\", \"\");\n      getFieldsFromPrefsString(fields);\n    }\n\n    for (String s : acceptedFields) {\n      if (s.equals(getString(R.string.time))) dfm.enabledFields[Fields.TIME] = true;\n      else if (s.equals(getString(R.string.accel_x))) dfm.enabledFields[Fields.ACCEL_X] = true;\n      else if (s.equals(getString(R.string.accel_y))) dfm.enabledFields[Fields.ACCEL_Y] = true;\n      else if (s.equals(getString(R.string.accel_z))) dfm.enabledFields[Fields.ACCEL_Z] = true;\n      else if (s.equals(getString(R.string.accel_total)))\n        dfm.enabledFields[Fields.ACCEL_TOTAL] = true;\n      else if (s.equals(getString(R.string.latitude))) dfm.enabledFields[Fields.LATITUDE] = true;\n      else if (s.equals(getString(R.string.longitude))) dfm.enabledFields[Fields.LONGITUDE] = true;\n      else if (s.equals(getString(R.string.magnetic_x))) dfm.enabledFields[Fields.MAG_X] = true;\n      else if (s.equals(getString(R.string.magnetic_y))) dfm.enabledFields[Fields.MAG_Y] = true;\n      else if (s.equals(getString(R.string.magnetic_z))) dfm.enabledFields[Fields.MAG_Z] = true;\n      else if (s.equals(getString(R.string.magnetic_total)))\n        dfm.enabledFields[Fields.MAG_TOTAL] = true;\n      else if (s.equals(getString(R.string.heading_deg)))\n        dfm.enabledFields[Fields.HEADING_DEG] = true;\n      else if (s.equals(getString(R.string.heading_rad)))\n        dfm.enabledFields[Fields.HEADING_RAD] = true;\n      else if (s.equals(getString(R.string.temperature_c)))\n        dfm.enabledFields[Fields.TEMPERATURE_C] = true;\n      else if (s.equals(getString(R.string.temperature_f)))\n        dfm.enabledFields[Fields.TEMPERATURE_F] = true;\n      else if (s.equals(getString(R.string.temperature_k)))\n        dfm.enabledFields[Fields.TEMPERATURE_K] = true;\n      else if (s.equals(getString(R.string.pressure))) dfm.enabledFields[Fields.PRESSURE] = true;\n      else if (s.equals(getString(R.string.altitude))) dfm.enabledFields[Fields.ALTITUDE] = true;\n      else if (s.equals(getString(R.string.luminous_flux))) dfm.enabledFields[Fields.LIGHT] = true;\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7555, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 176, "focalAPIEnd": 211, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)"], "useStart": [341, 600, 926, 1195], "useEnd": [371, 628, 956, 1225], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lllllT/MultiPictureLiveWallpaper/tree/master/src/org/tamanegi/wallpaper/multipicture/MultiPictureSetting.java", "rawCode": "  private void convertPictureSourcePreference(PictureSourcePreference item, int idx) {\n    String picsource_key = getKey(SCREEN_PICSOURCE_KEY, idx);\n    String picsource_val = pref.getString(picsource_key, null);\n    if (picsource_val != null) {\n      return;\n    }\n\n    String type_key = getKey(SCREEN_TYPE_KEY, idx);\n    String type_val = pref.getString(type_key, null);\n\n    String file_key = getKey(SCREEN_FILE_KEY, idx);\n\n    Class<?> cls = null;\n    String desc = null;\n\n    if (\"file\".equals(type_val) || (type_val == null && pref.getString(file_key, null) != null)) {\n      String file_val = pref.getString(file_key, \"\");\n\n      cls = SingleSource.class;\n      desc =\n          getString(\n              R.string.pref_screen_type_file_desc, PictureUtils.getUriFileName(resolver, file_val));\n    } else if (\"folder\".equals(type_val)) {\n      String folder_key = getKey(SCREEN_FOLDER_KEY, idx);\n      String folder_val = pref.getString(folder_key, \"\");\n\n      cls = FolderSource.class;\n      desc = getString(R.string.pref_screen_type_folder_desc, folder_val);\n    } else if (\"buckets\".equals(type_val)) {\n      String bucket_key = getKey(SCREEN_BUCKET_KEY, idx);\n      String bucket_val = pref.getString(bucket_key, \"\");\n\n      cls = AlbumSource.class;\n      desc =\n          getString(\n              R.string.pref_screen_type_bucket_desc,\n              PictureUtils.getBucketNames(resolver, bucket_val));\n    } else if (\"use_default\".equals(type_val) || idx >= 0) {\n      cls = null;\n      desc = getString(R.string.pref_use_default);\n    }\n\n    if (desc != null) {\n      persistPictureSourceInfo(idx, desc, null);\n    }\n\n    item.setValue(cls != null ? new ComponentName(this, cls) : null);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7556, "initialization": ["SharedPreferences sharedPreferences = getActivity()"], "initializationStart": [356], "initializationEnd": [369], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 408, "tryExpressionEnd": 412, "tryBlockStart": 408, "tryBlockEnd": 1876, "catchExpressionStart": 1818, "catchExpressionEnd": 1842, "catchBlockStart": 1818, "catchBlockEnd": 1876, "exceptionHandlingCallStart": [1850], "exceptionHandlingCallEnd": [1869], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 434, "focalAPIEnd": 472, "followUpCheck": "TextUtils.isEmpty(value) || true", "checkType": "IF", "followUpCheckExpressionStart": 534, "followUpCheckExpressionEnd": 600, "followUpCheckBlockStart": 534, "followUpCheckBlockEnd": 1811, "use": ["sharedPreferences.getLong(String,int)", "sharedPreferences.edit()", "new JSONArray(value)"], "useStart": [494, 611, 1683], "useEnd": [526, 629, 1702], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/TextReader/src/com/svo/laohan/fragment/Rank.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    root = inflater.inflate(R.layout.rank, null);\n    gridView = (GridView) root.findViewById(R.id.grid);\n    progressBar = (ProgressBar) root.findViewById(R.id.progresBar);\n    gridView.setOnItemClickListener(this);\n    preferences = getActivity().getSharedPreferences(\"weitu\", 0);\n    try {\n      String json = preferences.getString(\"rank_json\", \"\");\n      long weekMs = preferences.getLong(\"weekMs\", 0);\n      if (TextUtils.isEmpty(json) || Util.currentWeekInMills() > weekMs) {\n        preferences.edit().putLong(\"weekMs\", Util.currentWeekInMills()).commit();\n        HttpUtil.get(\n            \"http://2.dubinwei.duapp.com/Rank?flag=res\",\n            null,\n            new JsonHttpResponseHandler() {\n              @Override\n              public void onStart() {\n                super.onStart();\n                progressBar.setVisibility(View.VISIBLE);\n              }\n\n              @Override\n              public void onSuccess(JSONArray arg0) {\n                super.onSuccess(arg0);\n                rankJson = arg0;\n                preferences.edit().putString(\"rank_json\", arg0.toString()).commit();\n                gridView.setAdapter(new MyAdapter(arg0));\n                if (progressBar != null) {\n                  progressBar.setVisibility(View.GONE);\n                }\n              }\n\n              @Override\n              public void onFailure(Throwable arg0) {\n                if (progressBar != null) {\n                  progressBar.setVisibility(View.GONE);\n                }\n              }\n            });\n      } else {\n        rankJson = new JSONArray(json);\n        gridView.setAdapter(new MyAdapter(rankJson));\n        progressBar.setVisibility(View.GONE);\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    return root;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7557, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(*,*)"], "initializationStart": [509], "initializationEnd": [587], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 618, "focalAPIEnd": 663, "followUpCheck": "value != null && value.length() != 0", "checkType": "IF", "followUpCheckExpressionStart": 671, "followUpCheckExpressionEnd": 728, "followUpCheckBlockStart": 671, "followUpCheckBlockEnd": 804, "use": ["setServerIpAndPassword(SharedPreferences,value)"], "useStart": [739], "useEnd": [795], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Gmote/Gmote/tree/master/gmoteclient/src/org/gmote/client/android/ActivityUtil.java", "rawCode": "  /** Called when the activity is first created. */\n  public void onCreate(Bundle icicle, Activity activity) {\n    mActivity = activity;\n    mRemote = Remote.getInstance(mHandler);\n    if (mRemote.getServer() == null) {\n      // This can happen if there is an uncaught exception in the program. Our\n      // variables will get reset, but the GmoteClient activity won't get\n      // launched (it only goes back to the previous activity that is on the\n      // stack).\n      SharedPreferences prefs =\n          mActivity.getSharedPreferences(GmoteClient.PREFS, Context.MODE_WORLD_READABLE);\n      String serverAddress = prefs.getString(GmoteClient.KEY_SERVER, null);\n      if (serverAddress != null && serverAddress.length() != 0) {\n        GmoteClient.setServerIpAndPassword(prefs, serverAddress);\n      }\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7558, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [486], "initializationEnd": [537], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 577, "focalAPIEnd": 611, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)"], "useStart": [561], "useEnd": [612], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ethankhall/Chronos/tree/master/ChronosApp/src/main/java/com/kopysoft/chronos/activities/ClockActivity.java", "rawCode": "  private void sendEmail() {\n    // PayPeriodHolder payPeriodHolder, Job thisJob, Context context\n\n    ProgressDialog dialog =\n        ProgressDialog.show(ClockActivity.this, \"\", \"Generating. Please wait...\");\n\n    PayPeriodHolder pph;\n    if (getSupportActionBar().getSelectedTab().getPosition() == 0) {\n      pph = new PayPeriodHolder(jobId);\n    } else {\n      pph = payHolder;\n    }\n    Email newEmail = new Email(pph, jobId, getApplicationContext());\n\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(this);\n    int reportLevel = Integer.valueOf(pref.getString(\"reportLevel\", \"1\"));\n\n    String returnValue;\n    if (reportLevel == 2) {\n      returnValue = newEmail.getBriefView();\n    } else {\n      returnValue = newEmail.getExpandedView();\n    }\n\n    String emailBody = new String(\"Greetings!\\n\\tHere is my time card\\n\");\n    emailBody += returnValue;\n\n    dialog.dismiss();\n\n    // Create email\n    Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);\n    emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, \"Time Card\");\n    emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, emailBody);\n\n    emailIntent.setType(\"message/rfc822\");\n    startActivity(emailIntent);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7559, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(*,int)"], "initializationStart": [704], "initializationEnd": [769], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 793, "focalAPIEnd": 832, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/tests/appwidgets/AppWidgetHostTest/src/com/android/tests/appwidgethost/TestAppWidgetProvider.java", "rawCode": "  public void onReceive(Context context, Intent intent) {\n    String action = intent.getAction();\n    Log.d(TAG, \"intent=\" + intent);\n\n    if (AppWidgetManager.ACTION_APPWIDGET_ENABLED.equals(action)) {\n      Log.d(TAG, \"ENABLED\");\n    } else if (AppWidgetManager.ACTION_APPWIDGET_DISABLED.equals(action)) {\n      Log.d(TAG, \"DISABLED\");\n    } else if (AppWidgetManager.ACTION_APPWIDGET_UPDATE.equals(action)) {\n      Log.d(TAG, \"UPDATE\");\n      // BEGIN_INCLUDE(getExtra_EXTRA_APPWIDGET_IDS)\n      Bundle extras = intent.getExtras();\n      int[] appWidgetIds = extras.getIntArray(AppWidgetManager.EXTRA_APPWIDGET_IDS);\n      // END_INCLUDE(getExtra_EXTRA_APPWIDGET_IDS)\n\n      SharedPreferences prefs = context.getSharedPreferences(TestAppWidgetProvider.PREFS_NAME, 0);\n      String prefix = prefs.getString(PREF_PREFIX_KEY, \"hai\");\n\n      AppWidgetManager gm = AppWidgetManager.getInstance(context);\n      RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.test_appwidget);\n      views.setTextViewText(R.id.oh_hai_text, prefix + \": \" + SystemClock.elapsedRealtime());\n      if (false) {\n        gm.updateAppWidget(appWidgetIds, views);\n      } else {\n        gm.updateAppWidget(\n            new ComponentName(\n                \"com.android.tests.appwidgethost\",\n                \"com.android.tests.appwidgethost.TestAppWidgetProvider\"),\n            views);\n      }\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7560, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 241, "focalAPIEnd": 288, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["StringBuilder.append(value)"], "useStart": [212], "useEnd": [289], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/da-owl/swp-ucd-2013-eule/tree/master/app/src/com/example/swp_ucd_2013_eule/MainActivity.java", "rawCode": "  @Override\n  public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {\n    if (key.equals(\"prefIpAdress\") || key.equals(\"prefPort\")) {\n      StringBuilder builder = new StringBuilder();\n      builder.append(\"socket://\" + prefs.getString(\"prefIpAdress\", \"192.168.0.40\"));\n      builder.append(\":\" + prefs.getString(\"prefPort\", \"28500\"));\n      try {\n        CarData.getInstance().endListener();\n        startEXLAPListener(builder.toString());\n      } catch (Exception e) {\n        Log.e(\"CarData Listener\", e.getMessage());\n      }\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7561, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [116], "initializationEnd": [167], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getBoolean(String,boolean)"], "configurationStart": [1346, 1437], "configurationEnd": [1396, 1486], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 1546, "focalAPIEnd": 1596, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getInt(String,int)", "sharedPreferences.getInt(String,int)", "sharedPreferences.getInt(String,int)"], "useStart": [1529, 1613, 1820, 1879, 1939], "useEnd": [1597, 1667, 1869, 1929, 1981], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/albb0920/LunaTerm/tree/master/src/tw/loli/lunaTerm/TerminalActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    pref = PreferenceManager.getDefaultSharedPreferences(this);\n\n    if (!pref.getBoolean(Constants.SETTINGS_SHOW_STATUSBAR, false))\n      getWindow()\n          .setFlags(\n              WindowManager.LayoutParams.FLAG_FULLSCREEN,\n              WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n    cm = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);\n\n    setContentView(R.layout.act_terminal);\n    terminalFrame = (FrameLayout) findViewById(R.id.terminalFrame);\n\n    final PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n    this.m_wake_lock =\n        pm.newWakeLock(\n            PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, \"rTerm\");\n    this.m_wake_lock.acquire();\n\n    setVolumeControlStream(AudioManager.STREAM_MUSIC);\n\n    gestureKey = getResources().getStringArray(R.array.gestures_key);\n    gestureDesc = getResources().getStringArray(R.array.gestures_desc);\n\n    for (int i = 0; i < gestureKey.length; i++) {\n      Gesture g = new Gesture(gestureKey[i], gestureDesc[i]);\n      gestureMap.put(g.type, g);\n    }\n\n    GestureView mGestureView = (GestureView) findViewById(R.id.gestureView);\n    mGestureView.setTerminalActivity(this);\n\n    // options\n    termActFlags =\n        (!pref.getBoolean(\"settings_enable_magnifier\", true) ? FLAG_NO_MAGNIFIER : 0)\n            | (pref.getBoolean(\"settings_auto_extractui\", false) ? FLAG_SHOW_EXTRACT_UI : 0)\n            | Integer.parseInt(pref.getString(\"settings_magnifier_behavior\", \"8\"))\n            | (pref.getBoolean(\"settings_magnifier_fullscreen\", true)\n                ? FLAG_MAGNIFIER_FULLSCREEN\n                : 0);\n\n    // This must be AFTER flags are set.\n    mGestureView.setMagnifierParms(\n        pref.getInt(\"settings_magnifier_focus_width\", 30),\n        pref.getInt(\"settings_magnifier_focus_height\", 15),\n        pref.getInt(\"settings_magnifier_zoom\", 20));\n\n    mGestureView.setOnGestureListener(\n        new OnGestureListener() {\n          // TODO: We should make user define this\n          public void onGestureEvent(String gesture) {\n            if (gesture == null || gesture.length() == 0) return;\n\n            if (gesture.equals(\"U\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_UP);\n            } else if (gesture.equals(\"D\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_DOWN);\n            } else if (gesture.equals(\"L\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_LEFT);\n            } else if (gesture.equals(\"R\")) {\n              pressKey(KeyEvent.KEYCODE_DPAD_RIGHT);\n            } else if (gesture.equals(\"D,L\")) {\n              pressKey(KeyEvent.KEYCODE_ENTER);\n            } else if (gesture.equals(\"D,R,U\")) {\n              pressKey(KeyEvent.KEYCODE_SPACE);\n            } else if (gesture.equals(\"R,U\")) {\n              // page up\n              pressKey(new byte[] {27, 91, 53, 126});\n            } else if (gesture.equals(\"R,D\")) {\n              // page down\n              pressKey(new byte[] {27, 91, 54, 126});\n            } else if (gesture.equals(\"L,U\")) {\n              // HOME\n              pressKey(new byte[] {27, '[', '1', '~'});\n            } else if (gesture.equals(\"L,D\")) {\n              // END\n              pressKey(new byte[] {27, '[', '4', '~'});\n            } else if (gesture.equals(\"R,D,R\") || gesture.equals(\"R,L,R\")) {\n              // input helper\n              showInputHelper();\n            }\n          }\n\n          public String getGestureText(String gesture) {\n            String desc = \"Unknown Gesture\";\n            Gesture r = gestureMap.get(gesture);\n            if (r != null) desc = r.desc;\n\n            StringBuffer t = new StringBuffer();\n            t.append(\"Gesture:\").append(gesture).append(\" (\").append(desc).append(\")\");\n\n            return t.toString();\n          }\n        });\n\n    if (dbUtils == null) {\n      dbUtils = new DBUtils(this);\n    }\n    functionBtnList = dbUtils.functionsButtonsDelegate.get();\n\n    functionKeyGallery = (Gallery) findViewById(R.id.functionKeyGallery);\n\n    if (functionBtnList.size() > 0) {\n      functionKeyGallery.setAdapter(new FunctionButtonAdapter(this));\n    }\n    functionKeyGallery.setBackgroundColor(Color.alpha(0));\n    functionKeyGallery.setSelection(functionBtnList.size() / 2);\n    functionKeyGallery.setOnItemClickListener(\n        new OnItemClickListener() {\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            String k = functionBtnList.get(position).getKeys();\n            String v = functionBtnList.get(position).getName();\n\n            boolean controlPressed = false;\n            for (char c : k.toCharArray()) {\n              if (c == '^') {\n                controlPressed = true;\n                pressMetaKey(KeyEvent.KEYCODE_DPAD_CENTER);\n              } else {\n                if (controlPressed) {\n                  c = String.valueOf(c).toLowerCase().charAt(0);\n                  KeyEvent[] events = TerminalView.DEFAULT_KEYMAP.getEvents(new char[] {c});\n\n                  pressKey(events[0].getKeyCode());\n                } else {\n                  pressKey(c);\n                }\n                controlPressed = false;\n              }\n            }\n          }\n        });\n\n    mHandler = new RefreshHandler();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7562, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,*)"], "initializationStart": [194], "initializationEnd": [258], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 282, "focalAPIEnd": 313, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["EditText.setText(value)"], "useStart": [402], "useEnd": [430], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JoshTsang/cnk-orderPad/tree/master/src/com/htb/cnk/LoginDlg.java", "rawCode": "  public void show() {\n    LayoutInflater factory = LayoutInflater.from(mActivity);\n    final View DialogView = factory.inflate(R.layout.setting_dialog, null);\n    SharedPreferences sharedPre = mActivity.getSharedPreferences(\"userInfo\", Context.MODE_PRIVATE);\n    String userName = sharedPre.getString(\"name\", \"\");\n    EditText userNameET = (EditText) DialogView.findViewById(R.id.edit_username);\n\n    userNameET.setText(userName);\n\n    AlertDialog dlg =\n        new AlertDialog.Builder(mActivity)\n            .setTitle(\"登录框\")\n            .setView(DialogView)\n            .setPositiveButton(\n                \"确定\",\n                new DialogInterface.OnClickListener() {\n\n                  @Override\n                  public void onClick(DialogInterface dialog, int which) {\n                    if (getUserNameAndPwd(DialogView) < 0) {\n                      Toast.makeText(mActivity, \"用户名密码不能为空\", Toast.LENGTH_SHORT).show();\n                    } else {\n                      new Thread() {\n                        public void run() {\n                          try {\n                            int ret = UserData.compare();\n                            userHandle.sendEmptyMessage(ret);\n                          } catch (Exception e) {\n                            userHandle.sendEmptyMessage(UserData.PWD_NETWORK_ERR);\n                            e.printStackTrace();\n                          }\n                        }\n                      }.start();\n                    }\n                  }\n                })\n            .setNegativeButton(\n                \"取消\",\n                new DialogInterface.OnClickListener() {\n\n                  @Override\n                  public void onClick(DialogInterface dialog, int which) {}\n                })\n            .setCancelable(false)\n            .create();\n    dlg.show();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7563, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [569], "initializationEnd": [629], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["sharedPreferences.edit()"], "configurationStart": [684], "configurationEnd": [704], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 861, "focalAPIEnd": 907, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)"], "useStart": [963], "useEnd": [994], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sniderzero/UTPRO/tree/master/UltitrackPro/src/com/appsmarttech/ut90/Days_Fragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    View vDays = inflater.inflate(R.layout.days_fragment, container, false);\n    // setting actionbar details\n    actionBar = getSherlockActivity().getSupportActionBar();\n    actionBar.setDisplayUseLogoEnabled(true);\n    actionBar.setDisplayShowTitleEnabled(true);\n    actionBar.setDisplayShowHomeEnabled(true);\n    actionBar.setDisplayHomeAsUpEnabled(true);\n\n    // open preferences\n    spPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());\n\n    // declare preference editor\n    ePreferences = spPreferences.edit();\n\n    // boolean for tracking the presence of the cab\n    bActionPresent = false;\n\n    // grabbing the active program from preferences\n    sActiveProgram = spPreferences.getString(\"kActiveProgram\", \"1\");\n\n    // converting it to Integer\n    iActiveProgram = Integer.valueOf(sActiveProgram);\n\n    // assigning listview to listview widget\n    lvDays = (ListView) vDays.findViewById(R.id.lvDays);\n\n    // telling it that it has an actionbar\n    setHasOptionsMenu(true);\n\n    // declaring intents\n    inExerDetails = new Intent(getActivity(), ExerDetail_Activity.class);\n\n    // opening database\n    db = (new DBHelper_activity(getActivity()));\n\n    // getting the name of the program based on the program id in preferences\n    pActiveProgram = db.getProgram(iActiveProgram);\n\n    // setting activity title based on selected program\n    getActivity().setTitle(pActiveProgram.getName());\n\n    // building list of days based on program ID\n    Days = db.getAllProgramDays(iActiveProgram);\n\n    // building the onclick listener for the lvPrograms Listview\n    lvDaysListener =\n        new OnItemClickListener() {\n\n          @Override\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            if (bActionPresent) { // if the action bar is up, just update the selected day\n              // grabbing the selected item from lvPrograms\n              dSelected = (Day) (lvDays.getItemAtPosition(position));\n              mActionMode.setTitle(dSelected.getName());\n            } else {\n              // grabbing the selected day object\n              dSelected = (Day) (lvDays.getItemAtPosition(position));\n              // putting the dayID of the selected day in a bundle to send to the next activity\n              inExerDetails.putExtra(\"DAY_ID\", dSelected.getDayID());\n              inExerDetails.putExtra(\"ROW_ID\", dSelected.getID());\n              // launching the exercise details activity\n              startActivity(inExerDetails);\n            }\n          }\n        };\n    // building the long onclick listener for the lvPrograms listview\n\n    lvDaysLongListener =\n        new OnItemLongClickListener() {\n\n          @Override\n          public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\n            // grabbing the selected item from lvPrograms\n            dSelected = (Day) (lvDays.getItemAtPosition(position));\n            // grabbing dayname to update the action bar with\n            sDayName = dSelected.getName();\n            // launching the contextual action bar\n            mActionMode = getSherlockActivity().startActionMode(new mActionModeCallback());\n            return true;\n          }\n        };\n\n    // setting up days adapter\n    lvDaysAdapter = new DayArrayAdapter(getActivity(), Days);\n\n    // setting click listener, long click listener, and adapter to the listview\n    lvDays.setOnItemClickListener(lvDaysListener);\n    lvDays.setOnItemLongClickListener(lvDaysLongListener);\n    lvDays.setAdapter(lvDaysAdapter);\n    // scrolling to first exercise\n    lvDays.setSelection(db.getNextDay(iActiveProgram) - 2);\n\n    return vDays;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7564, "initialization": ["SharedPreferences sharedPreferences = getPreferences(*)"], "initializationStart": [1235], "initializationEnd": [1263], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 1286, "focalAPIEnd": 1320, "followUpCheck": "srcLangs[i].iso_639_1.equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 1639, "followUpCheckExpressionEnd": 1695, "followUpCheckBlockStart": 1639, "followUpCheckBlockEnd": 1725, "use": ["sharedPreferences.getString(String,String)"], "useStart": [1343], "useEnd": [1379], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/ocr/translate/src/com/google/marvin/translate/Translate.java", "rawCode": "  /**\n   * Loads available destination languages from application resources and available source languages\n   * from OCR library.\n   */\n  private void loadLanguages() {\n    Log.i(TAG, \"Loading languages...\");\n\n    // Load destination languages...\n    Resources resources = getResources();\n    String[] iso_639_1 = resources.getStringArray(R.array.iso_639_1);\n    String[] iso_639_2 = resources.getStringArray(R.array.iso_639_2);\n    String[] english = resources.getStringArray(R.array.english);\n    Language[] dstLangs = new Language[english.length];\n\n    // Add mappings for all destination languages\n    for (int i = 0; i < dstLangs.length; i++) {\n      dstLangs[i] = new Language(english[i], iso_639_1[i], iso_639_2[i]);\n    }\n\n    // Sort alphabetically by English name\n    Arrays.sort(dstLangs);\n\n    // Load source languages from supported OCR languages...\n    Language[] ocrLangs = mOcr.getLanguages();\n    Language[] srcLangs = new Language[ocrLangs.length + 1];\n\n    // Add \"Automatic\" as a source languages option\n    System.arraycopy(ocrLangs, 0, srcLangs, 1, ocrLangs.length);\n    srcLangs[0] = new Language(\"Automatic\", \"\", \"eng\");\n\n    // Load preferences and find IDs for default languages\n    SharedPreferences prefs = getPreferences(MODE_PRIVATE);\n    String srcPref = prefs.getString(\"source_pref\", \"\");\n    String dstPref = prefs.getString(\"target_pref\", \"en\");\n    int defSrc = -1;\n    int defDst = -1;\n    for (int i = 0; i < dstLangs.length; i++) {\n      if (defDst < 0 && dstLangs[i].iso_639_1.equals(dstPref)) {\n        defDst = i;\n        break;\n      }\n    }\n    for (int i = 0; i < srcLangs.length; i++) {\n      if (defSrc < 0 && srcLangs[i].iso_639_1.equals(srcPref)) {\n        defSrc = i;\n      }\n    }\n\n    // Set up source language drop-down view\n    OnItemSelectedListener srcListener =\n        new OnItemSelectedListener() {\n          @Override\n          public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2, long arg3) {\n            setLanguagePreference(\"source_pref\", mSource);\n          }\n\n          @Override\n          public void onNothingSelected(AdapterView<?> arg0) {}\n        };\n\n    ArrayAdapter<Language> src =\n        new ArrayAdapter<Language>(this, android.R.layout.simple_spinner_item, srcLangs);\n    src.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n    mSource.setAdapter(src);\n    mSource.setSelection(defSrc);\n    mSource.setOnItemSelectedListener(srcListener);\n\n    // Set up destination language drop-down view\n    OnItemSelectedListener dstListener =\n        new OnItemSelectedListener() {\n          @Override\n          public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2, long arg3) {\n            setLanguagePreference(\"target_pref\", mTarget);\n          }\n\n          @Override\n          public void onNothingSelected(AdapterView<?> arg0) {}\n        };\n    ArrayAdapter<Language> dst =\n        new ArrayAdapter<Language>(this, android.R.layout.simple_spinner_item, dstLangs);\n    dst.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n    mTarget.setAdapter(dst);\n    mTarget.setSelection(defDst);\n    mTarget.setOnItemSelectedListener(dstListener);\n\n    Log.i(TAG, \"Languages loaded.\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7565, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,*)"], "initializationStart": [330], "initializationEnd": [402], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["bug(*,*)"], "tryExpressionStart": 468, "tryExpressionEnd": 472, "tryBlockStart": 468, "tryBlockEnd": 1942, "catchExpressionStart": 1852, "catchExpressionEnd": 1873, "catchBlockStart": 1852, "catchBlockEnd": 1942, "exceptionHandlingCallStart": [1913], "exceptionHandlingCallEnd": [1931], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sharedPreferences.getAll().keySet()", "guardType": "LOOP {", "guardExpressionStart": 410, "guardExpressionEnd": 459, "guardBlockStart": 410, "guardBlockEnd": 1942, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 574, "focalAPIEnd": 605, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["SharedPreferences.Editor.putString(String,value)"], "useStart": [1784], "useEnd": [1813], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/M66B/XPrivacy/tree/master/src/biz/bokhorst/xprivacy/PrivacyProvider.java", "rawCode": "  private static void splitSettings(Context context) {\n    File prefFile = new File(getPrefFileName(PREF_SETTINGS));\n    File migratedFile = new File(prefFile + \".migrated\");\n    if (prefFile.exists() && !migratedFile.exists()) {\n      Util.log(null, Log.WARN, \"Splitting \" + prefFile);\n\n      SharedPreferences prefs =\n          context.getSharedPreferences(PREF_SETTINGS, Context.MODE_WORLD_READABLE);\n      for (String settingKey : prefs.getAll().keySet())\n        try {\n          int uid = 0;\n          String name = getSettingName(settingKey);\n          String value = prefs.getString(settingKey, \"\");\n\n          // Decode setting\n          String[] component = name.split(\"\\\\.\");\n          if (name.startsWith(\"Account.\")\n              || name.startsWith(\"Application.\")\n              || name.startsWith(\"Contact.\")) {\n            try {\n              // name.uid.key\n              uid = Integer.parseInt(component[1]);\n              name = component[0];\n              for (int i = 2; i < component.length; i++) name += \".\" + component[i];\n            } catch (NumberFormatException ignored) {\n              // Initial uid/name will be used\n            }\n          } else if (component.length > 1) {\n            try {\n              // name.x.y.z.uid\n              uid = Integer.parseInt(component[component.length - 1]);\n              name = component[0];\n              for (int i = 1; i < component.length - 1; i++) name += \".\" + component[i];\n            } catch (NumberFormatException ignored) {\n              // Initial uid/name will be used\n            }\n          }\n\n          SharedPreferences aprefs =\n              context.getSharedPreferences(PREF_SETTINGS + \".\" + uid, Context.MODE_WORLD_READABLE);\n          SharedPreferences.Editor editor = aprefs.edit();\n          editor.putString(name, value);\n          editor.commit();\n        } catch (Throwable ex) {\n          // Legacy boolean\n          Util.bug(null, ex);\n        }\n\n      prefFile.renameTo(migratedFile);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7566, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(*,int)"], "initializationStart": [185], "initializationEnd": [240], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 278, "focalAPIEnd": 321, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 327, "followUpCheckExpressionEnd": 362, "followUpCheckBlockStart": 327, "followUpCheckBlockEnd": 485, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dhavalsdoshi/orteroid/tree/master/src/com/ideaboardz/android/utilities/SharedData.java", "rawCode": "  public static void add(String boardId, String boardKey, Activity activity) {\n    if (boardId.equals(\"2\") || boardId.equals(\"6733\")) return;\n\n    SharedPreferences sharedPreferences = activity.getSharedPreferences(SharedData.PREFS_NAME, 0);\n    String previusRecentBoardList = sharedPreferences.getString(\"boards\", null);\n    if (previusRecentBoardList != null)\n      if (previusRecentBoardList.length() != 0)\n        if (isBoardAlreadyInList(boardId, previusRecentBoardList)) return;\n    final JSONObject jsonObject = new JSONObject();\n    try {\n      jsonObject.put(\"board_name\", boardKey);\n      jsonObject.put(\"board_id\", boardId);\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    jsonArray = putObjectOnFirst(jsonObject);\n    jsonArray = fixRecentBoardSize(jsonArray);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7567, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 39, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/menny/Boxee-Thumb-Remote/tree/master/src/net/evendanan/android/thumbremote/Settings.java", "rawCode": "  public String getUser() {\n    return mPreferences.getString(SERVER_USERNAME_KEY, \"boxee\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7568, "initialization": ["SharedPreferences sharedPreferences = getPreferences(int)"], "initializationStart": [316], "initializationEnd": [333], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sharedPreferences.getString(key,null,)!=null", "guardType": "IF {", "guardExpressionStart": 978, "guardExpressionEnd": 1020, "guardBlockStart": 978, "guardBlockEnd": 1117, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 982, "focalAPIEnd": 1011, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value,*)"], "useStart": [1029], "useEnd": [1110], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nebogeo/borrowed-scenery/tree/master/zizim/zizim-android/src/foam/zizim/android/AddIncident.java", "rawCode": "  /**\n   * Upon being resumed we can retrieve the current state. This allows us to update the state if it\n   * was changed at any time while paused.\n   */\n  @Override\n  protected void onResume() {\n    super.onResume();\n    BoskoiService.trackPageView(AddIncident.this, \"/AddIncident\");\n    SharedPreferences prefs = getPreferences(0);\n\n    // show/hide location button/map when selecting a new location\n    if (AddIncident.longitude != 0) {\n      // addLocation.setVisibility(View.GONE);\n      addLocation.setText(R.string.change_location);\n      mapView.setVisibility(View.VISIBLE);\n    } else {\n      mapView.setVisibility(View.GONE);\n      // addLocation.setVisibility(View.VISIBLE);\n      addLocation.setText(R.string.add_location);\n    }\n    // show and center a marker on the minimap\n    placeMarker((int) (AddIncident.latitude * 1.0E6), (int) (AddIncident.longitude * 1.0E6));\n    mapController.setCenter(this.getPoint(AddIncident.latitude, AddIncident.longitude));\n\n    if (prefs.getString(\"desc\", null) != null) {\n      incidentDesc.setText(prefs.getString(\"desc\", null), TextView.BufferType.EDITABLE);\n    }\n    this.updateDisplay();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7569, "initialization": ["String key = replace(String,String)"], "initializationStart": [445], "initializationEnd": [474], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["d(String,String)"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 1023, "catchExpressionStart": 857, "catchExpressionEnd": 889, "catchBlockStart": 857, "catchBlockEnd": 945, "exceptionHandlingCallStart": [897], "exceptionHandlingCallEnd": [938], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 559, "focalAPIEnd": 597, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Voltage.setSavedMV(value)"], "useStart": [742], "useEnd": [769], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/packages_apps_Settings/tree/master/src/com/android/settings/VoltageControlActivity.java", "rawCode": "  public static List<Voltage> getVolts(final SharedPreferences preferences) {\n    final List<Voltage> volts = new ArrayList<Voltage>();\n    try {\n      BufferedReader br = new BufferedReader(new FileReader(MV_TABLE0), 256);\n      String line = \"\";\n      while ((line = br.readLine()) != null) {\n        final String[] values = line.split(\"\\\\s+\");\n        if (values != null) {\n          if (values.length >= 2) {\n            final String freq = values[0].replace(\"mhz:\", \"\");\n            final String currentMv = values[1];\n            final String savedMv = preferences.getString(freq, currentMv);\n            final Voltage voltage = new Voltage();\n            voltage.setFreq(freq);\n            voltage.setCurrentMV(currentMv);\n            voltage.setSavedMV(savedMv);\n            volts.add(voltage);\n          }\n        }\n      }\n      br.close();\n    } catch (FileNotFoundException e) {\n      Log.d(TAG, MV_TABLE0 + \" does not exist\");\n    } catch (IOException e) {\n      Log.d(TAG, \"Error reading \" + MV_TABLE0);\n    }\n    return volts;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7570, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(*,int)"], "initializationStart": [773], "initializationEnd": [819], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 861, "focalAPIEnd": 944, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getFloat(String,int)", "sharedPreferences.getFloat(String,int)", "sharedPreferences.getInt(String,int)", "sharedPreferences.getBoolean(String,boolean)", "sharedPreferences.getString(String,String)", "sharedPreferences.getInt(String,int)", "sharedPreferences.getInt(String,int)", "sharedPreferences.getFloat(String,int)", "sharedPreferences.getInt(String,int)", "sharedPreferences.getFloat(String,int)", "sharedPreferences.getBoolean(String,boolean)", "SaveSharedPrefs(sharedPreferences,String,String,String,String)", "LoadOBD2PIDs(sharedPreferences,List<Integer>)", "LoadIOIOAnalPins(sharedPreferences)", "LoadIOIOPulsePins(sharedPreferences)", "BuildStartIntent(boolean,IOIOManager.PinParams[],IOIOManager.PinParams[],int,boolean,int,float,int,float,List<Integer>,*,String,String,LapAccumulator.LapAccumulatorParams,String,String,boolean,boolean,boolean,int,float,float,float[],boolean,int,int,String,String,value,*)"], "useStart": [982, 1097, 1205, 1315, 1418, 1538, 1652, 1790, 2285, 2379, 2485, 2590, 2773, 2888, 2992, 3104, 3223, 3457, 3603, 3694, 3772, 4143], "useEnd": [1056, 1179, 1278, 1390, 1490, 1618, 1757, 1878, 2353, 2447, 2565, 2660, 2843, 2962, 3060, 3176, 3295, 3530, 3648, 3726, 3805, 4960], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arthare/wifilapper/tree/master/TestApp/src/com/artsoft/wifilapper/LandingNewRace.java", "rawCode": "  @Override\n  public void onClick(View v) {\n    if (v.getId() == R.id.btnApply) {\n      EditText txtIP = (EditText) findViewById(R.id.txtIP);\n      Spinner spnSSID = (Spinner) findViewById(R.id.spnSSID);\n      EditText txtRaceName = (EditText) findViewById(R.id.txtRaceName);\n      RadioGroup rgMode = (RadioGroup) findViewById(R.id.rgRaceMode);\n      EditText edtFinishCount = (EditText) findViewById(R.id.edtFinishCount);\n\n      String strIP = txtIP.getText().toString();\n      String strSSID =\n          (spnSSID.isEnabled() && spnSSID.getSelectedItem() != null)\n              ? spnSSID.getSelectedItem().toString()\n              : \"\";\n      String strRaceName = txtRaceName.getText().toString();\n      Prefs.UNIT_SYSTEM eUnitSystem;\n\n      SharedPreferences settings = getSharedPreferences(Prefs.SHAREDPREF_NAME, 0);\n      String strSpeedoStyle =\n          settings.getString(Prefs.PREF_SPEEDOSTYLE_STRING, Prefs.DEFAULT_SPEEDOSTYLE_STRING);\n      boolean fTestMode =\n          settings.getBoolean(Prefs.PREF_TESTMODE_BOOL, Prefs.DEFAULT_TESTMODE_BOOL);\n      String strUnitSystem =\n          settings.getString(Prefs.PREF_UNITS_STRING, Prefs.DEFAULT_UNITS_STRING.toString());\n      String strBTGPS = settings.getString(Prefs.PREF_BTGPSNAME_STRING, Prefs.DEFAULT_GPS_STRING);\n      String strBTOBD2 =\n          settings.getString(Prefs.PREF_BTOBD2NAME_STRING, Prefs.DEFAULT_OBD2_STRING);\n      boolean fUseAccel = settings.getBoolean(Prefs.PREF_USEACCEL_BOOLEAN, Prefs.DEFAULT_USEACCEL);\n      boolean fUseAccelCorrection =\n          settings.getBoolean(Prefs.PREF_ACCEL_CORRECTION, Prefs.DEFAULT_ACCEL_CORRECTION);\n      float flPitch =\n          settings.getFloat(\n              Prefs.PREF_ACCEL_CORRECTION_PITCH, Prefs.DEFAULT_ACCEL_CORRECTION_PITCH);\n      float flRoll =\n          settings.getFloat(Prefs.PREF_ACCEL_CORRECTION_ROLL, Prefs.DEFAULT_ACCEL_CORRECTION_ROLL);\n      float[] flSensorOffset = new float[3];\n      flSensorOffset[1] =\n          settings.getFloat(Prefs.PREF_ACCEL_OFFSET_X, Prefs.DEFAULT_ACCEL_OFFSET_X);\n      flSensorOffset[2] =\n          settings.getFloat(Prefs.PREF_ACCEL_OFFSET_Y, Prefs.DEFAULT_ACCEL_OFFSET_Y);\n      flSensorOffset[0] =\n          settings.getFloat(Prefs.PREF_ACCEL_OFFSET_Z, Prefs.DEFAULT_ACCEL_OFFSET_Z);\n      int iFilterType = settings.getInt(Prefs.PREF_ACCEL_FILTER, Prefs.DEFAULT_ACCEL_FILTER);\n      boolean fAckSMS = settings.getBoolean(Prefs.PREF_ACKSMS_BOOLEAN, Prefs.DEFAULT_ACKSMS);\n      String strPrivacy =\n          settings.getString(Prefs.PREF_PRIVACYPREFIX_STRING, Prefs.DEFAULT_PRIVACYPREFIX);\n      int iButtonPin = settings.getInt(Prefs.PREF_IOIOBUTTONPIN, Prefs.DEFAULT_IOIOBUTTONPIN);\n\n      boolean fUseP2P = rgMode.getCheckedRadioButtonId() == R.id.rbPointToPoint;\n      final int iStartMode = settings.getInt(Prefs.PREF_P2P_STARTMODE, Prefs.DEFAULT_P2P_STARTMODE);\n      final float flStartParam =\n          settings.getFloat(Prefs.PREF_P2P_STARTPARAM, Prefs.DEFAULT_P2P_STARTPARAM);\n      final int iStopMode = settings.getInt(Prefs.PREF_P2P_STOPMODE, Prefs.DEFAULT_P2P_STOPMODE);\n      final float flStopParam =\n          settings.getFloat(Prefs.PREF_P2P_STOPPARAM, Prefs.DEFAULT_P2P_STOPPARAM);\n      final boolean fRequireWifi =\n          settings.getBoolean(Prefs.PREF_REQUIRE_WIFI, Prefs.DEFAULT_REQUIRE_WIFI);\n\n      final int iFinishCount = Utility.ParseInt(edtFinishCount.getText().toString(), 1);\n\n      eUnitSystem = Prefs.UNIT_SYSTEM.valueOf(strUnitSystem);\n\n      ApiDemos.SaveSharedPrefs(settings, strIP, strSSID, strBTGPS, strRaceName);\n\n      List<Integer> lstSelectedPIDs = new ArrayList<Integer>();\n      Prefs.LoadOBD2PIDs(settings, lstSelectedPIDs);\n\n      IOIOManager.PinParams rgAnalPins[] = Prefs.LoadIOIOAnalPins(settings);\n      IOIOManager.PinParams rgPulsePins[] = Prefs.LoadIOIOPulsePins(settings);\n\n      LapAccumulator.LapAccumulatorParams lapParams = new LapAccumulator.LapAccumulatorParams();\n      lapParams.iCarNumber = settings.getInt(Prefs.PREF_CARNUMBER, Prefs.DEFAULT_CARNUMBER);\n      lapParams.iSecondaryCarNumber = (int) (Math.random() * 100000.0);\n      lapParams.iFinishCount = iFinishCount;\n\n      Intent i =\n          ApiDemos.BuildStartIntent(\n              fRequireWifi,\n              rgAnalPins,\n              rgPulsePins,\n              iButtonPin,\n              fUseP2P,\n              iStartMode,\n              flStartParam,\n              iStopMode,\n              flStopParam,\n              lstSelectedPIDs,\n              getApplicationContext(),\n              strIP,\n              strSSID,\n              lapParams,\n              strRaceName,\n              strPrivacy,\n              fAckSMS,\n              fUseAccel,\n              fUseAccelCorrection,\n              iFilterType,\n              flPitch,\n              flRoll,\n              flSensorOffset,\n              fTestMode,\n              -1,\n              -1,\n              strBTGPS,\n              strBTOBD2,\n              strSpeedoStyle,\n              eUnitSystem.toString());\n      if (fTestMode) {\n        // they're about to start a run in test mode. Test mode sucks for real users, so warn them\n        AlertDialog ad = new AlertDialog.Builder(this).create();\n        ad.setMessage(\n            \"Test mode is currently selected. GPS reception will be disabled. Are you sure?\");\n        ad.setButton(AlertDialog.BUTTON_POSITIVE, \"Yes\", this);\n        ad.setButton(AlertDialog.BUTTON_NEGATIVE, \"No/Cancel\", this);\n        m_startIntent = i;\n        m_dlgAlert = ad;\n        ad.show();\n      } else {\n        startActivity(i);\n      }\n    } else if (v.getId() == R.id.btnFinishHelp) {\n      Toast.makeText(\n              this,\n              \"Once you've set the start and finish lines, this is how many times you'll have to cross the finish in a run before WifiLapper stops recording. This is for routes that cross the finish more than once.\",\n              Toast.LENGTH_LONG)\n          .show();\n    } else if (v.getId() == R.id.btnAutoIP) {\n      ShowAutoIPActivity();\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7571, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 113, "focalAPIEnd": 145, "followUpCheck": "musicCursor.getString(ARTIST).equals(value)", "checkType": "IF", "followUpCheckExpressionStart": 296, "followUpCheckExpressionEnd": 478, "followUpCheckBlockStart": 296, "followUpCheckBlockEnd": 509, "use": ["sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)"], "useStart": [166, 218], "useEnd": [197, 249], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RudolfWeeber/eyes-free/tree/master/trunk/documentation/RockLockTutorial/RockLock_04/src/com/marvin/rocklock/TagStructuredSongPicker.java", "rawCode": "  private boolean restoreFromPrefs(SharedPreferences prefs) {\n    musicCursor.moveToFirst();\n    currentArtist = prefs.getString(PREF_ARTIST, \"\");\n    currentAlbum = prefs.getString(PREF_ALBUM, \"\");\n    currentTrack = prefs.getString(PREF_TRACK, \"\");\n    while (musicCursor.moveToNext()) {\n      if (musicCursor.getString(ARTIST).equals(currentArtist)\n          && musicCursor.getString(ALBUM).equals(currentAlbum)\n          && musicCursor.getString(TRACK).equals(currentTrack)) {\n        return true;\n      }\n    }\n    return false;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7572, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,*)"], "initializationStart": [85], "initializationEnd": [141], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 169, "focalAPIEnd": 198, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamCommitted/SafetyGame-Sources/tree/master/com/safetyGame/mobile/src/src/com/safetyGame/mobile/View/LoginActivity.java", "rawCode": "    @Override\n    protected String doInBackground(Object... params) {\n\n      prefs = getSharedPreferences(\"SafetyGame\", Context.MODE_PRIVATE);\n\n      String serverUrl = prefs.getString(\"server\", \"\");\n\n      List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);\n      nameValuePairs.add(new BasicNameValuePair(\"username\", user.getText().toString()));\n      nameValuePairs.add(new BasicNameValuePair(\"password\", passw.getText().toString()));\n      String status =\n          (String) ConnectionUtils.HttpCreateClient(serverUrl + \"/API/login.jsp\", nameValuePairs);\n\n      SharedPreferences prefs = getSharedPreferences(\"SafetyGame\", Context.MODE_PRIVATE);\n      SharedPreferences.Editor editor = prefs.edit();\n      editor.putString(\"user\", user.getText().toString());\n      editor.putString(\"password\", passw.getText().toString());\n      editor.commit();\n\n      return status;\n    }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7573, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 321, "focalAPIEnd": 368, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jwlawson/Nof1/tree/master/Nof1/src/org/nof1trial/nof1/containers/Data.java", "rawCode": "    public Data generateFromCache(int id) {\n      Data result = getNewData();\n\n      SharedPreferences cachPrefs = context.getSharedPreferences(CACHE, Context.MODE_PRIVATE);\n\n      result.day = cachPrefs.getInt(Keys.DATA_DAY + id, 0);\n      result.time = cachPrefs.getLong(Keys.DATA_TIME + id, 0);\n      result.comment = cachPrefs.getString(Keys.DATA_COMMENT + id, \"\");\n      String dataStr = cachPrefs.getString(Keys.DATA_LIST + id, \"\");\n\n      int[] data = null;\n      if (dataStr.length() != 0) {\n        String[] dataStrArr = dataStr.split(\",\");\n        data = new int[dataStrArr.length];\n        for (int i = 0; i < data.length; i++) {\n          data[i] = Integer.parseInt(dataStrArr[i]);\n        }\n      }\n      result.data = data;\n\n      return result;\n    }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7574, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 86, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fywb251/bsl_impc_android/tree/master/cube-android/src/com/foreveross/chameleon/util/Preferences.java", "rawCode": "  public static String getCurrentUserName(SharedPreferences preference) {\n\n    return preference.getString(CURRENT_USERNAME, \"\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7575, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 314, "focalAPIEnd": 421, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setCharset(value)"], "useStart": [281], "useEnd": [422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Aethelflaed/connectbot/tree/master/src/org/connectbot/HostEditorActivity.java", "rawCode": "  public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n    // update values on changed preference\n    this.updateSummaries();\n\n    // Our CursorPreferenceHack always send null keys, so try to set charset anyway\n    if (hostBridge != null)\n      hostBridge.setCharset(\n          sharedPreferences.getString(\n              HostDatabase.FIELD_HOST_ENCODING, HostDatabase.ENCODING_DEFAULT));\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7576, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 172, "focalAPIEnd": 240, "followUpCheck": "!isPacoAuthCookieSetAndValid(value,expiry)", "checkType": "IF", "followUpCheckExpressionStart": 338, "followUpCheckExpressionEnd": 385, "followUpCheckBlockStart": 338, "followUpCheckBlockEnd": 476, "use": ["sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)", "new MyCookie(value,*,Date,*,*,*)"], "useStart": [262, 632, 713, 779, 592], "useEnd": [332, 675, 767, 822, 876], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BobEvans/omgpaco/tree/master/PacoAndroidLib/src/com/google/sampling/experiential/android/lib/GoogleAccountLoginHelper.java", "rawCode": "  /**\n   * Retrieve the stored Paco appengine server login cookie.\n   *\n   * @return Cookie\n   */\n  public synchronized Cookie retrievePacoAuthCookie() {\n    String name = authTokenPreferences.getString(AUTH_TOKEN_PREFERENCE_NAME_KEY, null);\n    String expiry = authTokenPreferences.getString(AUTH_TOKEN_PREFERENCE_EXPIRE_KEY, null);\n    if (!isPacoAuthCookieSetAndValid(name, expiry)) {\n      throw new IllegalStateException(\"Invalid Auth Cookie! Send back to login!\");\n    }\n    try {\n      Date expirationDate = new SimpleDateFormat(Constants.DATE_TIME_FORMAT).parse(expiry);\n      return new MyCookie(\n          name,\n          authTokenPreferences.getString(\"value\", \"\"),\n          expirationDate,\n          authTokenPreferences.getString(\"domain\", \"google.com\"),\n          authTokenPreferences.getString(\"path\", \"/\"),\n          authTokenPreferences.getInt(\"version\", 0));\n    } catch (ParseException e) {\n      // this should never happen.\n      throw new IllegalStateException(\"Unparseable date in Auth Cookie! Send back to login!\");\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7577, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["sharedPreferences.getLong(String,int)"], "configurationStart": [73], "configurationEnd": [114], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 133, "focalAPIEnd": 179, "followUpCheck": "(value == null) || ((!value.startsWith(\"http://\")) && (!value.startsWith(\"https://\")))", "checkType": "IF", "followUpCheckExpressionStart": 472, "followUpCheckExpressionEnd": 557, "followUpCheckBlockStart": 472, "followUpCheckBlockEnd": 621, "use": ["sharedPreferences.getLong(String,int)", "sharedPreferences.getLong(String,int)", "sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)"], "useStart": [199, 265, 336, 413], "useEnd": [244, 311, 389, 465], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/giftedbird/aituidao/tree/master/src/com/aituidao/android/model/NewUrlAccessModel.java", "rawCode": "  private NewUrlAccessResponse getNewUrlAccessResponse() {\n    long id = mSharedPreferences.getLong(ACCESS_ID, -1);\n    String url = mSharedPreferences.getString(ACCESS_URL, null);\n    long period = mSharedPreferences.getLong(ACCESS_PERIOD, -1);\n    long timeout = mSharedPreferences.getLong(ACCESS_TIMEOUT, -1);\n    String userAgent = mSharedPreferences.getString(ACCESS_USER_AGENT, null);\n    String postData = mSharedPreferences.getString(ACCESS_POST_DATA, null);\n\n    if ((url == null) || ((!url.startsWith(\"http://\")) && (!url.startsWith(\"https://\")))) {\n      setNewUrlAccessResponse(null);\n      return null;\n    }\n\n    if (System.currentTimeMillis() > timeout) {\n      setNewUrlAccessResponse(null);\n      return null;\n    }\n\n    NewUrlAccessResponse result = new NewUrlAccessResponse();\n    result.id = id;\n    result.url = url;\n    result.periodMs = period;\n    result.timeout = timeout;\n    result.userAgent = userAgent;\n    result.postData = postData;\n\n    return result;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7578, "initialization": ["String key = SharedPreferences.getString(int)"], "initializationStart": [415], "initializationEnd": [452], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["sharedPreferences.getString(int)"], "configurationStart": [415], "configurationEnd": [452], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 525, "focalAPIEnd": 602, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shangrz/noticeUEFA/tree/master/src/com/shang/noticeuefa/util/HostSetter.java", "rawCode": "  public void setHost() {\n    MobclickAgent.updateOnlineConfig(activity);\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(activity);\n    String host =\n        MobclickAgent.getConfigParams(activity, activity.getString(R.string.umeng_host_key));\n    MobclickAgent.updateOnlineConfig(activity, \"host\");\n    if (host != null && host.length() > 0) {\n      preferences.edit().putString(activity.getString(R.string.key_host), host).commit();\n      this.host = host;\n    } else {\n      this.host = preferences.getString(activity.getString(R.string.key_host), \"64.30.136.126\");\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7579, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 43, "focalAPIEnd": 94, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/janoliver/pOT-Droid/tree/master/src/main/java/com/mde/potdroid/helpers/SettingsWrapper.java", "rawCode": "  public String getUsername() {\n    return mSharedPreferences.getString(PREF_KEY_USERNAME, \"\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7580, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 327, "focalAPIEnd": 373, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 381, "followUpCheckExpressionEnd": 400, "followUpCheckBlockStart": 381, "followUpCheckBlockEnd": 637, "use": ["new QDataSet(String,String,*,*,*,value,*)"], "useStart": [501], "useEnd": [579], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/isenseDev/iSENSE-Hardware/tree/master/Android/Data_Collector/src/edu/uml/cs/isense/collector/ManualEntry.java", "rawCode": "    @Override\n    protected Void doInBackground(Void... params) {\n\n      String uploadTime = makeThisDatePretty(System.currentTimeMillis());\n      String name =\n          (dataSetName.getText().toString().equals(\"\"))\n              ? \"(No name provided)\"\n              : dataSetName.getText().toString();\n\n      String projID = projPrefs.getString(PREFERENCES_PROJ_ID, null);\n      if (projID != null) {\n        for (File picture : MediaManager.pictureArray) {\n          QDataSet picDS =\n              new QDataSet(name, uploadTime, QDataSet.Type.PIC, null, picture, projID, null);\n          uq.addDataSetToQueue(picDS);\n        }\n      }\n      MediaManager.pictureArray.clear();\n      return null;\n    }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7581, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 247, "focalAPIEnd": 284, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/um104/C4PPMobileMetrics/tree/master/MobileMetricsDashboard/src/edu/channel4/mm/db/android/activity/UsageActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    // Enable the \"Up\" button.\n    getActionBar().setDisplayHomeAsUpEnabled(true);\n\n    // Set the activity's titles\n    String appLabel = prefs.getString(Keys.APP_LABEL, null);\n    setTitle(appLabel + \": \" + activityTitle);\n\n    listView.setOnItemClickListener(\n        new OnItemClickListener() {\n          @Override\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n\n            // Grab the GraphRequest for the selected item.\n            GraphRequest graphRequest = graphRequests.get(position);\n\n            // Construct the correct Intent for the selected\n            // UsageGraphRequest\n            Intent intent = graphRequest.constructGraphRequestIntent(getApplicationContext());\n\n            // Try to start the activity\n            if (intent != null) {\n              startActivity(intent);\n            } else {\n              Log.toastD(\n                  getApplicationContext(), graphRequest.toString() + \" not yet implemented.\");\n            }\n          }\n        });\n\n    if (graphRequests.isEmpty()) {\n      fillGraphRequests();\n    }\n\n    adapter =\n        new GraphRequestArrayAdapter(\n            getApplicationContext(), graphRequests.toArray(new GraphRequest[0]));\n\n    listView.setAdapter(adapter);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7582, "initialization": ["SharedPreferences sharedPreferences = Context.getSharedPreferences(String,int)"], "initializationStart": [63], "initializationEnd": [110], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 123, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OSLL/geo2tag-web/tree/master/services/gds/android-client/src/ru/spb/osll/GDS/preferences/Settings.java", "rawCode": "  public String getAuthToken() {\n    SharedPreferences prefs = m_context.getSharedPreferences(GDS_SETTINGS, 0);\n    return prefs.getString(AUTH_TOKEN, \"\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7583, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 44, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schoentoon/Connectbot/tree/master/src/com/schoentoon/connectbot/service/TerminalManager.java", "rawCode": "  public String getEmulation() {\n    return prefs.getString(PreferenceConstants.EMULATION, \"screen\");\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7584, "initialization": ["SharedPreferences sharedPreferences = getPreferences(*)"], "initializationStart": [201], "initializationEnd": [229], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 258, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setNick(value)", "sharedPreferences.getString(String,String)"], "useStart": [235, 329], "useEnd": [300, 370], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wilsontheball/accionciudadana/tree/master/andrac/src/main/java/ar/com/thinksoft/ac/andrac/pantallas/Login.java", "rawCode": "  /**\n   * Obtiene usuario y pass guardados en el registro del telefono.\n   *\n   * @since 11-10-2011\n   * @author Paul\n   */\n  private void obtenerPreferencias() {\n    SharedPreferences preferencias = getPreferences(MODE_PRIVATE);\n    this.getRepo().setNick(preferencias.getString(ANDRAC_NICK, null));\n    this.getRepo().setPass(preferencias.getString(ANDRAC_PASS, null));\n\n    Log.d(\n        this.getClass().getName(),\n        \"Obtener prefs: \" + this.getRepo().getNick() + \" \" + this.getRepo().getPass());\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7585, "initialization": ["SharedPreferences sharedPreferences = getPrefs()"], "initializationStart": [86], "initializationEnd": [113], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sharedPreferences!=null", "guardType": "IF {", "guardExpressionStart": 120, "guardExpressionEnd": 150, "guardBlockStart": 120, "guardBlockEnd": 259, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 164, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/astrid/plugin-src/com/todoroo/astrid/opencrx/OpencrxCoreUtils.java", "rawCode": "  @Override\n  public boolean isLoggedIn() {\n    SharedPreferences sharedPreferences = OpencrxCoreUtils.getPrefs();\n\n    if (sharedPreferences != null)\n      return sharedPreferences.getString(getIdentifier() + PREF_TOKEN, null) != null;\n    else return false;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7586, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 263, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["split(value,*)"], "useStart": [247], "useEnd": [335], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/r3gis3r/CSipSimple/tree/master/src/com/csipsimple/utils/PreferencesWrapper.java", "rawCode": "  /**\n   * Get list of video codecs registered in preference system by\n   *\n   * @return List of possible video codecs\n   * @see PreferencesProviderWrapper#setVideoCodecList(java.util.List)\n   */\n  public String[] getVideoCodecList() {\n    return TextUtils.split(prefs.getString(CODECS_VIDEO_LIST, \"\"), Pattern.quote(CODECS_SEPARATOR));\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7587, "initialization": ["SharedPreferences sharedPreferences = getSharedPrefs(Context)"], "initializationStart": [229], "initializationEnd": [265], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 333, "focalAPIEnd": 394, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)"], "useStart": [316], "useEnd": [395], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/socialpercon/anki/tree/master/src/com/ichi2/anki/services/NotificationService.java", "rawCode": "  @Override\n  public void onStart(Intent intent, int startId) {\n    Log.i(AnkiDroidApp.TAG, \"NotificationService: OnStart\");\n\n    Context context = AnkiDroidApp.getInstance().getBaseContext();\n    SharedPreferences preferences = AnkiDroidApp.getSharedPrefs(context);\n    int minimumCardsDueForNotification =\n        Integer.parseInt(preferences.getString(\"minimumCardsDueForNotification\", \"25\"));\n    int dueCardsCount = WidgetStatus.fetchDue(context);\n    if (dueCardsCount >= minimumCardsDueForNotification) {\n      // Show a notification\n      int icon = R.drawable.anki;\n      CharSequence tickerText =\n          String.format(\n              getString(R.string.widget_minimum_cards_due_notification_ticker_text), dueCardsCount);\n      long when = System.currentTimeMillis();\n\n      Notification notification = new Notification(icon, tickerText, when);\n\n      if (preferences.getBoolean(\"widgetVibrate\", false)) {\n        notification.defaults |= Notification.DEFAULT_VIBRATE;\n      }\n      if (preferences.getBoolean(\"widgetBlink\", false)) {\n        notification.defaults |= Notification.DEFAULT_LIGHTS;\n      }\n\n      Context appContext = getApplicationContext();\n      CharSequence contentTitle =\n          getText(R.string.widget_minimum_cards_due_notification_ticker_title);\n\n      Intent ankiDroidIntent = new Intent(context, DeckPicker.class);\n      ankiDroidIntent.setAction(Intent.ACTION_MAIN);\n      ankiDroidIntent.addCategory(Intent.CATEGORY_LAUNCHER);\n      PendingIntent pendingAnkiDroidIntent =\n          PendingIntent.getActivity(context, 0, ankiDroidIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n      notification.setLatestEventInfo(appContext, contentTitle, tickerText, pendingAnkiDroidIntent);\n\n      mNotificationManager.notify(WIDGET_NOTIFY_ID, notification);\n    } else {\n      // Cancel the existing notification, if any.\n      mNotificationManager.cancel(WIDGET_NOTIFY_ID);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7588, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(*,*)"], "initializationStart": [241], "initializationEnd": [313], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "sharedPreferences!=null", "guardType": "IF {", "guardExpressionStart": 325, "guardExpressionEnd": 343, "guardBlockStart": 325, "guardBlockEnd": 746, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 374, "focalAPIEnd": 420, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 435, "followUpCheckExpressionEnd": 454, "followUpCheckBlockStart": 435, "followUpCheckBlockEnd": 734, "use": ["NewsApp.setCurrentUserId(value)"], "useStart": [534], "useEnd": [563], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OSAStudio/newshub/tree/master/src/com/osastudio/newshub/CategoryActivity.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n\n    switch (requestCode) {\n      case REQUEST_USER_INFO:\n        if (resultCode == RESULT_OK) {\n          SharedPreferences prefs =\n              getSharedPreferences(PreferenceFiles.APP_SETTINGS, Context.MODE_PRIVATE);\n          if (prefs != null) {\n            String userId = prefs.getString(PreferenceItems.USER_ID, null);\n\n            if (userId != null) {\n              if (!userId.equals(mApp.getCurrentUserId())) {\n                mApp.setCurrentUserId(userId);\n                mDlg = Utils.showProgressDlg(this, null);\n                mTask = new LoadDataTask(this);\n                mTask.execute(1);\n              }\n            }\n          }\n        }\n        break;\n      case REQUEST_MESSAGE_JUMP:\n        findViews();\n        View cover = findViewById(R.id.cover_layout);\n        cover.setVisibility(View.GONE);\n        mSwitcher.setVisibility(View.VISIBLE);\n        mToolbar.setVisibility(View.VISIBLE);\n\n        String cur_id = mApp.getPrefsManager().getUserId();\n        mApp.setCurrentUserId(cur_id);\n\n        setupData(0);\n\n        break;\n    }\n    super.onActivityResult(requestCode, resultCode, data);\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7589, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [110], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 191, "focalAPIEnd": 241, "followUpCheck": "value == null || value.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 247, "followUpCheckExpressionEnd": 306, "followUpCheckBlockStart": 247, "followUpCheckBlockEnd": 353, "use": ["loadChannels(sharedPreferences)"], "useStart": [315], "useEnd": [346], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KalyanAkella/blipit/tree/master/android/BlipItMain/src/com/thoughtworks/blipit/activities/BlipItPrefActivity.java", "rawCode": "  @Override\n  protected void onStart() {\n    super.onStart();\n    final SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n    String allChannelsStr = sharedPreferences.getString(AD_CHANNELS_KEY, null);\n    if (allChannelsStr == null || allChannelsStr.length() == 0) {\n      loadChannels(sharedPreferences);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7590, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,*)"], "initializationStart": [99], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 183, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setAccessToken(value)", "sharedPreferences.getLong(String,int)"], "useStart": [160, 250], "useEnd": [219, 282], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/socialize/socialize-sdk-android/tree/master/sdk/src/com/socialize/auth/facebook/FacebookSessionStore.java", "rawCode": "  public boolean restore(Facebook session, Context context) {\n    SharedPreferences savedSession = context.getSharedPreferences(KEY, Context.MODE_PRIVATE);\n    session.setAccessToken(savedSession.getString(TOKEN, null));\n    session.setAccessExpires(savedSession.getLong(EXPIRES, 0));\n    return session.isSessionValid();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7591, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 77, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.toString()"], "useStart": [77], "useEnd": [125], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ambatigan/kaarpool/tree/master/client/src/com/saventech/karpool/Session.java", "rawCode": "  public String getCookiesUname(SharedPreferences mPreferences) {\n    return mPreferences.getString(\"UName\", \"un\").toString().trim();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7592, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(*,*)"], "initializationStart": [141], "initializationEnd": [193], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["sharedPreferences.registerOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener)"], "configurationStart": [199], "configurationEnd": [257], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 274, "focalAPIEnd": 317, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sharedPreferences.getString(String,String)", "sharedPreferences.getString(String,String)"], "useStart": [335, 395], "useEnd": [379, 438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jwlawson/Nof1/tree/master/Nof1/src/org/nof1trial/nof1/activities/DoctorLogin.java", "rawCode": "  @TargetApi(8)\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    sharedPrefs = getSharedPreferences(Keys.CONFIG_NAME, MODE_PRIVATE);\n    sharedPrefs.registerOnSharedPreferenceChangeListener(this);\n    passHash = sharedPrefs.getString(Keys.CONFIG_PASS, \"\");\n    emailHash = sharedPrefs.getString(Keys.CONFIG_EMAIL, \"\");\n    uuidStr = sharedPrefs.getString(Keys.CONFIG_UUID, \"\");\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {\n      mBackupManager = new BackupManager(mContext);\n    }\n\n    if (sharedPrefs.getBoolean(Keys.CONFIG_FIRST, true)) {\n      firstLogin(null);\n    } else {\n      login(null);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7593, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 82, "focalAPIEnd": 118, "followUpCheck": "value.length() == 0", "checkType": "IF", "followUpCheckExpressionStart": 124, "followUpCheckExpressionEnd": 157, "followUpCheckBlockStart": 124, "followUpCheckBlockEnd": 227, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MarcosPividori/GSoC-Communicating-with-mobile-devices/tree/master/test/Connect4/Android-App/GSoC-Example-Connect4/src/com/example/gsoc_example_connect4/MainActivity.java", "rawCode": "  private String getRegistrationId(Context context) {\n    String registrationId = prefs.getString(PROPERTY_REG_ID, \"\");\n    if (registrationId.length() == 0) {\n      Log.v(TAG, \"Registration not found.\");\n      return \"\";\n    }\n    // check if registration expired.\n    if (isRegistrationExpired()) {\n      Log.v(TAG, \"registration expired.\");\n      return \"\";\n    }\n    return registrationId;\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7594, "initialization": ["SharedPreferences sharedPreferences = getSharedPreferences(String,int)"], "initializationStart": [352], "initializationEnd": [395], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 414, "focalAPIEnd": 452, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 521, "followUpCheckExpressionEnd": 555, "followUpCheckBlockStart": 521, "followUpCheckBlockEnd": 692, "use": ["sharedPreferences.getString(String,String)"], "useStart": [474], "useEnd": [515], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Mobisocial/dungbeetle/tree/master/src/edu/stanford/mobisocial/dungbeetle/DropboxBackupActivity.java", "rawCode": "  /**\n   * Shows keeping the access keys returned from Trusted Authenticator in a local store, rather than\n   * storing user name & password, and re-authenticating each time (which is not to be done, ever).\n   *\n   * @return Array of [access_key, access_secret], or null if none stored\n   */\n  public String[] getKeys() {\n    SharedPreferences prefs = getSharedPreferences(ACCOUNT_PREFS_NAME, 0);\n    String key = prefs.getString(ACCESS_KEY_NAME, null);\n    String secret = prefs.getString(ACCESS_SECRET_NAME, null);\n    if (key != null && secret != null) {\n      String[] ret = new String[2];\n      ret[0] = key;\n      ret[1] = secret;\n      return ret;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7595, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(Context)"], "initializationStart": [137], "initializationEnd": [187], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 269, "focalAPIEnd": 315, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 399, "followUpCheckExpressionEnd": 450, "followUpCheckBlockStart": 399, "followUpCheckBlockEnd": 605, "use": ["sharedPreferences.getString(String,String)", "OAuthConsumer.setTokenWithSecret(value,String)"], "useStart": [340, 541], "useEnd": [393, 598], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hellfyre/Yet-Another-Opening-Hours-App/tree/master/src/org/yaoha/ApiConnector.java", "rawCode": "  private static void setConsumer() {\n    Context ctx = YaohaActivity.getStaticApplicationContext();\n    SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(ctx);\n    oauthToken = oauthTokenSecret = null;\n    consumer = null;\n    oauthToken = preferences.getString(OAuth.OAUTH_TOKEN, null);\n    oauthTokenSecret = preferences.getString(OAuth.OAUTH_TOKEN_SECRET, null);\n    if (oauthToken != null && oauthTokenSecret != null) {\n      consumer = new CommonsHttpOAuthConsumer(C.CONSUMER_KEY, C.CONSUMER_SECRET);\n      consumer.setTokenWithSecret(oauthToken, oauthTokenSecret);\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7596, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [90], "initializationEnd": [141], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 227, "focalAPIEnd": 274, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSummary(value)"], "useStart": [214], "useEnd": [275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dennischen/daily-money/tree/master/dailymoney/src/com/bottleworks/dailymoney/ui/PrefsActivity.java", "rawCode": "  private void setPrefSummary(String prefKey) {\n    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);\n    Preference p = findPreference(prefKey);\n    if (p != null) {\n      p.setSummary(sharedPreferences.getString(prefKey, \"Unknown\"));\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7597, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [185], "initializationEnd": [236], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 300, "focalAPIEnd": 341, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseInt(value)", "sharedPreferences.getString(String,String)"], "useStart": [283, 385], "useEnd": [342, 429], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nowlauncher/now-launcher/tree/master/NowLauncher/src/com/nowlauncher/nowlauncher/MainActivity.java", "rawCode": "  public void CreateViewsscroll() {\n\n    // Divide la lista delle applicazioni in altri array, creando la lista delle app delle varie\n    // pagine\n\n    SharedPreferences sharedPrefs = PreferenceManager.getDefaultSharedPreferences(this);\n    double numappxpage;\n    int drawerrows = Integer.parseInt(sharedPrefs.getString(\"drawer_rows\", \"4\"));\n    int drawercolumns = Integer.parseInt(sharedPrefs.getString(\"drawer_coloums\", \"4\"));\n    numappxpage = drawerrows * drawercolumns;\n    int npage = (int) StrictMath.ceil(mApplications.size() / numappxpage);\n\n    // Split the mApplications array into others array. Each array correspond to the application\n    // array in each drawer page\n    splittedarray = new ArrayList[npage];\n    for (int i = 0; i < npage; i++) {\n      splittedarray[i] = new ArrayList();\n    }\n    for (int page = 0; page < npage; page++) {\n      for (int app = 0; app < numappxpage; app++) {\n        if (page * numappxpage + app < mApplications.size())\n          splittedarray[page].add(mApplications.get(page * (int) numappxpage + app));\n      }\n    }\n\n    findViewById(R.id.drawerlist).setVisibility(View.GONE);\n    findViewById(R.id.pager).setVisibility(View.VISIBLE);\n\n    // Create an array of GridView (drawer page) and populate it with slittedarray\n    applicationsAdaptersArray = new ArrayList<ApplicationsAdapter>();\n    GridView[] gridViewsApps = new GridView[npage];\n    for (int app = 0; app < gridViewsApps.length; app++) {\n      gridViewsApps[app] = new GridView(this);\n      gridViewsApps[app].setNumColumns(drawercolumns);\n      gridViewsApps[app].setStretchMode(GridView.STRETCH_COLUMN_WIDTH);\n      final ApplicationsAdapter applicationsAdapterHorizontal =\n          new ApplicationsAdapter(splittedarray[app], gridViewsApps[app], this, drawerrows);\n      applicationsAdaptersArray.add(applicationsAdapterHorizontal);\n      gridViewsApps[app].setAdapter(applicationsAdapterHorizontal);\n      gridViewsApps[app].setOnItemClickListener(\n          new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {\n              Intent intent = applicationsAdapterHorizontal.getIntent(position);\n              startActivity(intent);\n            }\n          });\n      gridViewsApps[app].setTag(\"HorizontalDrawerTag\");\n      registerForContextMenu(gridViewsApps[app]);\n    }\n\n    // Set the adapter to the viewPager\n    MyPagerAdapter adapter = new MyPagerAdapter(gridViewsApps);\n    myPager = (ViewPagerAnim) findViewById(R.id.pager);\n    myPager.setAdapter(adapter);\n    myPager.setCurrentItem(0);\n\n    // Set the underlinePageIndicator to the viewPager of the drawer\n    UnderlinePageIndicator titleIndicator = (UnderlinePageIndicator) findViewById(R.id.titles);\n    titleIndicator.setViewPager(myPager);\n    // Check preferences and set the animation\n    if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"1\")) {\n      myPager.setPageTransformer(true, null);\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"2\")) {\n      myPager.setPageTransformer(true, new DepthPageTransformer());\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"3\")) {\n      myPager.setPageTransformer(true, new ZoomOutPageTransformer());\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"4\")) {\n      myPager.setPageTransformer(true, new CubeTransformer(true));\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"5\")) {\n      myPager.setPageTransformer(true, new CubeTransformer(false));\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"6\")) {\n      myPager.setPageTransformer(true, new RotateTransformer());\n    } else if (sharedPrefs.getString(\"drawer_animation\", \"1\").equals(\"7\")) {\n      myPager.setPageTransformer(true, new RotateInTransformer());\n    }\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7598, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 99, "tryExpressionEnd": 103, "tryBlockStart": 99, "tryBlockEnd": 672, "catchExpressionStart": 614, "catchExpressionEnd": 634, "catchBlockStart": 614, "catchBlockEnd": 672, "exceptionHandlingCallStart": [644], "exceptionHandlingCallEnd": [663], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 124, "focalAPIEnd": 163, "followUpCheck": "value.length() >= 10", "checkType": "IF", "followUpCheckExpressionStart": 228, "followUpCheckExpressionEnd": 256, "followUpCheckBlockStart": 228, "followUpCheckBlockEnd": 605, "use": ["PhotoUrl(value)"], "useStart": [184], "useEnd": [217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kerpie/truTest/tree/master/src/com/trustripes/adapters/CustomViewPagerAdapter.java", "rawCode": "    @Override\n    protected Void doInBackground(Void... params) {\n      String photo = null;\n      try {\n        photoURL = session.getString(\"user_photo_url\", \"\");\n        photoURL = ConstantValues.PhotoUrl(photoURL);\n\n        if (photoURL.length() >= 10) {\n          URL myFileUrl = null;\n          myFileUrl = new URL(ConstantValues.URL + photoURL);\n          HttpURLConnection conn = (HttpURLConnection) myFileUrl.openConnection();\n          conn.setDoInput(true);\n          conn.connect();\n          InputStream is = conn.getInputStream();\n          bitmap = BitmapFactory.decodeStream(is);\n        }\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      return null;\n    }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7599, "initialization": ["SharedPreferences sharedPreferences = getDefaultSharedPreferences(*)"], "initializationStart": [2199], "initializationEnd": [2269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 2491, "focalAPIEnd": 2558, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["changeLanguage(*,value)"], "useStart": [2566], "useEnd": [2619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skullone/android_firewall/tree/master/src/com/jtschohl/androidfirewall/MainActivity.java", "rawCode": "  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode == RESULT_OK && Api.CUSTOM_SCRIPT_MSG.equals(data.getAction())) {\n      final String script = data.getStringExtra(Api.SCRIPT_EXTRA);\n      final String script2 = data.getStringExtra(Api.SCRIPT2_EXTRA);\n      setCustomScript(script, script2);\n    }\n    if (requestCode == IMPORT_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_import_successfully, Toast.LENGTH_SHORT).show();\n      Api.applications = null;\n      showOrLoadApplications();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      toggleUserSettings(getApplicationContext());\n    }\n    if (requestCode == EXPORT_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_export_successfully, Toast.LENGTH_SHORT).show();\n      String exportedName = data.getStringExtra(Api.EXPORT_EXTRA);\n      Api.exportRulesToFile(MainActivity.this, exportedName);\n    }\n    if (requestCode == MANAGE_RULES_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.rules_file_deleted, Toast.LENGTH_SHORT).show();\n      manageRuleFiles();\n    }\n    if (requestCode == LOAD_PROFILE_REQUEST && resultCode == RESULT_OK) {\n      Toast.makeText(this, R.string.profileapplied, Toast.LENGTH_SHORT).show();\n      Api.applications = null;\n      showOrLoadApplications();\n      refreshHeader();\n      refreshSpinner();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      toggleUserSettings(getApplicationContext());\n      if (Api.isEnabled(getApplicationContext())) {\n        Api.applyIptablesRules(getApplicationContext(), true);\n      } else {\n        Api.saveRules(getApplicationContext());\n      }\n    }\n    if (requestCode == EDIT_PROFILE_REQUEST && resultCode == RESULT_OK) {\n      updateSpinner();\n    }\n    if (requestCode == USER_SETTINGS_REQUEST && resultCode == RESULT_OK) {\n      SharedPreferences prefs =\n          PreferenceManager.getDefaultSharedPreferences(getApplicationContext());\n      Intent intent = getIntent();\n      finish();\n      toggleVPNbutton(getApplicationContext());\n      toggleRoambutton(getApplicationContext());\n      toggleLANbutton(getApplicationContext());\n      String language = prefs.getString(\"locale\", Locale.getDefault().getDisplayLanguage());\n      Api.changeLanguage(getApplicationContext(), language);\n      startActivity(intent);\n    }\n    // for debugging purposes\n    // if (resultCode == RESULT_CANCELED)\n    // Toast.makeText(this, \"Operation Canceled\",\n    // Toast.LENGTH_SHORT).show();\n  }\n"}, {"dataset": "sharedPreferencesGetString", "exampleID": 7600, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = sharedPreferences.getString(key,defValue)", "focalAPIStart": 81, "focalAPIEnd": 110, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decrypt(value)"], "useStart": [152], "useEnd": [162], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgdesmet/android-utils/tree/master/android-utils-library/src/main/java/com/github/sgdesmet/android/utils/util/ObscuredSharedPreferences.java", "rawCode": "  @Override\n  public int getInt(String key, int defValue) {\n    final String v = delegate.getString(key, null);\n    return v != null ? Integer.parseInt(decrypt(v)) : defValue;\n  }\n"}]