[{"dataset": "setVisible", "exampleID": 3701, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [289], "initializationEnd": [301], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setTitle(String)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [307, 347, 401, 459], "configurationEnd": [329, 395, 453, 471], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 477, "focalAPIEnd": 499, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcpoison/jgrapht/tree/master/jgrapht-demo/src/main/java/org/jgrapht/demo/JGraphAdapterDemo.java", "rawCode": "  /**\n   * An alternative starting point for this demo, to also allow running this applet as an\n   * application.\n   *\n   * @param args ignored.\n   */\n  public static void main(String[] args) {\n    JGraphAdapterDemo applet = new JGraphAdapterDemo();\n    applet.init();\n\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(applet);\n    frame.setTitle(\"JGraphT Adapter to JGraph Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3702, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.pack()", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [80, 130, 148, 206], "configurationEnd": [102, 142, 200, 218], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 224, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nh2/dsa42/tree/master/teilnehmer/ben/HalloWelt/src/FramePanel.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new FramePanel());\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3703, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 8880, "focalAPIEnd": 8903, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra13-orga/gruppe14/tree/master/src/GamePanel.java", "rawCode": "  /**\n   * Fuehrt die Spiellogik aus. Prueft auf erfolgte Angriffe und löscht Objekte, die nicht mehr\n   * gezeichnet werden sollen. *\n   */\n  public void doLogic() {\n    if (singleplayer) {\n      if (attack) { // Wenn der Spieler angreifen will\n        Object angriff;\n        Sprite opfer;\n        angriff = player.getAttackObject();\n        if (angriff != null) {\n\n          actors.add(player.getAttackEffect()); // Effekt wird hinzugefügt zu Actors\n          if (sound_running == true) {\n            soundlib.playSound(\"Angriff\");\n          }\n          attacks.add(angriff);\n          for (ListIterator<Object> it1 = attacks.listIterator(); it1.hasNext(); ) {\n            angriff = it1.next();\n            if ((angriff instanceof java.awt.geom.Ellipse2D.Double)) { // wenn Angriff Kreis\n              Ellipse2D.Double circle = (Ellipse2D.Double) angriff;\n              for (ListIterator<Sprite> it2 = actors.listIterator(); it2.hasNext(); ) {\n                opfer = it2.next();\n                if (opfer instanceof Enemy) {\n                  if (circle.intersects(\n                      opfer.getX(),\n                      opfer.getY(),\n                      opfer.getWidth(),\n                      opfer.getHeight())) { // falls Kreis Enemy trifft\n                    ((Enemy) opfer).reduceHealth(player.getDamage());\n                  }\n                }\n              }\n            } else if (angriff instanceof java.awt.geom.Line2D.Double) { // wenn Angriff Linie\n              Line2D.Double line = (Line2D.Double) angriff;\n              for (ListIterator<Sprite> it2 = actors.listIterator(); it2.hasNext(); ) {\n                opfer = it2.next();\n                if (opfer instanceof Enemy) {\n                  if (line.intersects(\n                      opfer.getX(),\n                      opfer.getY(),\n                      opfer.getWidth(),\n                      opfer.getHeight())) { // falls Linie Enemy trifft\n                    ((Enemy) opfer).reduceHealth(player.getDamage());\n                  }\n                }\n              }\n            }\n          }\n        }\n        attacks.clear();\n      }\n      if (magic) {\n        Object magic;\n        Sprite opfer;\n        magic = player.getMagicObject();\n        if (magic != null) {\n          actors.add(player.getMagicEffect()); // Effekt wird hinzugefügt zu Actors\n          if (sound_running == true) {\n            soundlib.playSound(\"Zauber\");\n          }\n          attacks.add(magic);\n          for (ListIterator<Object> it1 = attacks.listIterator(); it1.hasNext(); ) {\n            magic = it1.next();\n            if ((magic instanceof java.awt.geom.Ellipse2D.Double)) { // wenn Angriff Kreis\n              Ellipse2D.Double circle = (Ellipse2D.Double) magic;\n              for (ListIterator<Sprite> it2 = actors.listIterator(); it2.hasNext(); ) {\n                opfer = it2.next();\n                if (opfer instanceof Enemy) {\n                  if (circle.intersects(\n                      opfer.getX(),\n                      opfer.getY(),\n                      opfer.getWidth(),\n                      opfer.getHeight())) { // falls Kreis Enemy trifft\n                    if (opfer instanceof IceEnemy) {\n                      ((IceEnemy) opfer).reduceHealth(-10);\n                    } else if (opfer instanceof FireEnemy) {\n                      ((FireEnemy) opfer).reduceHealth(50);\n                    } else {\n                      ((Enemy) opfer).stop();\n                    }\n                  }\n                }\n              }\n            } else if (magic instanceof java.awt.geom.Line2D.Double) { // wenn Angriff Linie\n              Line2D.Double line = (Line2D.Double) magic;\n              for (ListIterator<Sprite> it2 = actors.listIterator(); it2.hasNext(); ) {\n                opfer = it2.next();\n                if (opfer instanceof Enemy) {\n                  if (line.intersects(\n                      opfer.getX(),\n                      opfer.getY(),\n                      opfer.getWidth(),\n                      opfer.getHeight())) { // falls Linie Enemy trifft\n                    if (opfer instanceof IceEnemy) {\n                      ((IceEnemy) opfer).reduceHealth(-10);\n                    } else if (opfer instanceof FireEnemy) {\n                      ((FireEnemy) opfer).reduceHealth(50);\n                    } else {\n                      ((Enemy) opfer).stop();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        attacks.clear();\n      }\n\n    } else if (clientMode || serverMode) {\n\n      /* Attacke vom Spieler 1 auf Spieler 2 */\n      /*#############################################################################################################*/\n\n      out = convert((int) player.x, 4);\n      out = out + \" \" + convert((int) player.y, 4);\n      out = \"pos \" + out;\n      // System.out.println(out);\n      if (serverMode) {\n        server.out.println(out);\n        server.out.flush();\n      } else {\n        client.out.println(out);\n        client.out.flush();\n      }\n      Object angriff;\n      if (attack) {\n        angriff = player.getAttackObject();\n        if (angriff != null) {\n          System.out.println(\"Attacke-Effekt Spieler 1\");\n          actors.add(player.getAttackEffect()); // Effekt wird hinzugefügt zu Actors\n          if (sound_running == true) {\n            soundlib.playSound(\"Angriff\");\n          }\n\n          if ((angriff instanceof java.awt.geom.Ellipse2D.Double)) { // wenn Angriff Kreis\n\n            Ellipse2D.Double circle = (Ellipse2D.Double) angriff;\n            if (circle.intersects(\n                player2.getX(),\n                player2.getY(),\n                player2.getWidth(),\n                player2.getHeight())) { // falls Kreis Enemy trifft\n              player2.reduceHealth(player.getDamage());\n            }\n          } else if (angriff instanceof java.awt.geom.Line2D.Double) { // wenn Angriff Linie\n\n            Line2D.Double line = (Line2D.Double) angriff;\n            if (line.intersects(\n                player2.getX(),\n                player2.getY(),\n                player2.getWidth(),\n                player2.getHeight())) { // falls Linie Enemy trifft\n              player2.reduceHealth(player.getDamage());\n            }\n          }\n        }\n      }\n\n      /* Attacke vom Spieler 2 auf Spieler 1 */\n      /*#############################################################################################################*/\n      if (attack2) {\n        angriff = player2.getAttackObject();\n        if (angriff != null) {\n          System.out.println(\"Attacke-Effekt Spieler 2\");\n          actors.add(player2.getAttackEffect()); // Effekt wird hinzugefügt zu Actors\n          if (sound_running == true) {\n            soundlib.playSound(\"Angriff\");\n          }\n\n          if ((angriff instanceof java.awt.geom.Ellipse2D.Double)) { // wenn Angriff Kreis\n\n            Ellipse2D.Double circle = (Ellipse2D.Double) angriff;\n            if (circle.intersects(\n                player.getX(),\n                player.getY(),\n                player.getWidth(),\n                player.getHeight())) { // falls Kreis Enemy trifft\n              player.reduceHealth(player2.getDamage());\n            }\n          } else if (angriff instanceof java.awt.geom.Line2D.Double) { // wenn Angriff Linie\n\n            Line2D.Double line = (Line2D.Double) angriff;\n            if (line.intersects(\n                player.getX(),\n                player.getY(),\n                player.getWidth(),\n                player.getHeight())) { // falls Linie Enemy trifft\n              player.reduceHealth(player2.getDamage());\n            }\n          }\n        }\n      }\n    }\n\n    // Neuerdings mit Iterator, der ist nämlich sicher vor Concurent-Modification-Exception (ist ja\n    // ne CopyOnWriteArrayList)\n    for (ListIterator<Sprite> it = actors.listIterator(); it.hasNext(); ) {\n      Sprite r = it.next();\n      r.doLogic(delta);\n\n      if (r.remove) {\n        actors.remove(\n            r); // Löschen von Sprite, remove == true; Wichtig für z.B. damit eine Münze nach dem\n                // Einsammeln nicht mehr angezeigt wird\n      }\n    }\n\n    if (gameover == 1) {\n      if (System.currentTimeMillis() - gameover > 3000) {\n        stopGame();\n      }\n    }\n\n    if (singleplayer) {\n      for (int n = 0;\n          n < actors.size();\n          n++) { // Es werden alle weiteren Sprites zur Überprüfung durchlaufen\n\n        Sprite s2 = actors.get(n);\n\n        player.collidedWith(s2); // Überprüfung ob Spieler kollidiert ist\n      }\n    } else {\n      for (int n = 0;\n          n < actors.size();\n          n++) { // Es werden alle weiteren Sprites zur Überprüfung durchlaufen\n\n        Sprite s2 = actors.get(n);\n\n        player.collidedWith(s2); // Überprüfung ob Spieler kollidiert ist\n        player2.collidedWith(s2);\n      }\n    }\n\n    if (shopmode == false) {\n      shop2.setVisible(false);\n    }\n    if (skillmode == false) {\n      skills.setVisible(false);\n    }\n    if (chatmode == false) {\n      chat.setVisible(false);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3704, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [211], "initializationEnd": [233], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JButton,GridBagConstraints)", "jFrame.setSize(int,int)"], "configurationStart": [319, 393], "configurationEnd": [384, 420], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 433, "focalAPIEnd": 459, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/soartech/soar/tree/master/Domains/RoomsWorld/april/java/src/april/vis/VisCanvasPopupMenu.java", "rawCode": "  public void doHelp() {\n    HelpOutput houts = new HelpOutput();\n\n    for (VisCanvasEventHandler handler : vc.eventHandlers) {\n      handler.doHelp(houts);\n    }\n\n    if (helpFrame == null) {\n      helpFrame = new JFrame(\"Vis Help\");\n      helpTextPane = new JTextPane();\n      helpTextPane.setEditable(false);\n\n      helpFrame.add(new JScrollPane(helpTextPane), BorderLayout.CENTER);\n\n      helpFrame.setSize(400, 600);\n    }\n\n    helpFrame.setVisible(true);\n    helpTextPane.setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n    helpTextPane.setText(houts.toString());\n  }\n"}, {"dataset": "setVisible", "exampleID": 3705, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [631], "initializationEnd": [643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)"], "configurationStart": [664, 814, 872, 901], "configurationEnd": [686, 866, 895, 928], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 934, "focalAPIEnd": 956, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/osate/examples/tree/master/codegen/stepper-motor/usercode-simple/WheelInterface.java", "rawCode": "  public static void main(String[] args) {\n    final WheelInterface demo = new WheelInterface();\n    Button btnStrat = new Button(\"Start\"), btnStop = new Button(\"Stop\");\n    btnStrat.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.addIncrement(1);\n            demo.setVisible(true);\n            // demo.start();\n          }\n        });\n    btnStop.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.stop();\n            demo.setVisible(false);\n          }\n        });\n    JFrame frame = new JFrame();\n    Container cp = frame.getContentPane();\n    cp.add(demo, BorderLayout.CENTER);\n    cp.add(btnStrat, BorderLayout.NORTH);\n    cp.add(btnStop, BorderLayout.SOUTH);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(500, 500);\n    frame.setLocation(500, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3706, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [91], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [211, 256, 285], "configurationEnd": [233, 279, 349], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 355, "focalAPIEnd": 377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vaadin/gwt/tree/master/dev/core/test/com/google/gwt/dev/SwingTreeLoggerTestApp.java", "rawCode": "  /** @param args ignored */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"SwingTreeLogger test\");\n    SwingLoggerPanel loggerPanel = new SwingLoggerPanel(TreeLogger.INFO, null);\n    frame.getContentPane().add(loggerPanel);\n    frame.setSize(950, 700);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setVisible(true);\n    TreeLogger logger = loggerPanel.getLogger();\n    logger.log(TreeLogger.INFO, \"info 1\");\n    TreeLogger branch = logger.branch(TreeLogger.INFO, \"info branch\");\n    branch.log(TreeLogger.DEBUG, \"debug 1\");\n    branch.log(TreeLogger.ERROR, \"error 1\");\n    TreeLogger dbgBranch = logger.branch(TreeLogger.DEBUG, \"debug branch\");\n    dbgBranch.log(TreeLogger.SPAM, \"spam 1\");\n    dbgBranch.log(TreeLogger.WARN, \"warn 1\");\n    logger.log(TreeLogger.INFO, \"info 2\");\n  }\n"}, {"dataset": "setVisible", "exampleID": 3707, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jFrame!=null", "guardType": "IF {", "guardExpressionStart": 35, "guardExpressionEnd": 53, "guardBlockStart": 35, "guardBlockEnd": 78, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 54, "focalAPIEnd": 77, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setContentPane(JLabel)", "jFrame.addKeyListener(StdDraw)", "jFrame.setResizable(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setTitle(String)", "jFrame.setJMenuBar(JMenuBar)", "jFrame.pack()", "jFrame.requestFocusInWindow()", "jFrame.setVisible(boolean)"], "useStart": [1012, 1044, 1111, 1142, 1316, 1353, 1393, 1411, 1445], "useEnd": [1038, 1069, 1136, 1194, 1347, 1387, 1405, 1439, 1467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IlyaGubarev/Algorithms/tree/master/Java/Algorithms/src/main/java/com/ilyagubarev/algorithms/utils/std/StdDraw.java", "rawCode": "  private static void init() {\n    if (frame != null) frame.setVisible(false);\n    frame = new JFrame();\n    offscreenImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n    onscreenImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n    offscreen = offscreenImage.createGraphics();\n    onscreen = onscreenImage.createGraphics();\n    setXscale();\n    setYscale();\n    offscreen.setColor(DEFAULT_CLEAR_COLOR);\n    offscreen.fillRect(0, 0, width, height);\n    setPenColor();\n    setPenRadius();\n    setFont();\n    clear();\n\n    // add antialiasing\n    RenderingHints hints =\n        new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n    offscreen.addRenderingHints(hints);\n\n    // frame stuff\n    ImageIcon icon = new ImageIcon(onscreenImage);\n    JLabel draw = new JLabel(icon);\n\n    draw.addMouseListener(std);\n    draw.addMouseMotionListener(std);\n\n    frame.setContentPane(draw);\n    frame.addKeyListener(std); // JLabel cannot get keyboard focus\n    frame.setResizable(false);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // closes all windows\n    // frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // closes only current window\n    frame.setTitle(\"Standard Draw\");\n    frame.setJMenuBar(createMenuBar());\n    frame.pack();\n    frame.requestFocusInWindow();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3708, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 472, "focalAPIEnd": 495, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [730], "useEnd": [753], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamCommitted/SafetyGame-Sources/tree/master/com/safetyGame/desktop/view/Login.java", "rawCode": "  /**\n   * metodo che gestisce le azioni che i pulsanti devono intraprendere\n   *\n   * @param ActionEvent e l'evento scatenato dal click su un pulsante\n   */\n  public void actionPerformed(ActionEvent e) {\n    if (e.getSource() == ok) {\n      String pass = new String(password.getPassword());\n      if (!username.getText().trim().equals(\"\") && !pass.equals(\"\")) {\n        boolean login = controller.tryLogin(username.getText().trim(), pass);\n        if (login) {\n          frame.setVisible(false);\n          errore.setText(\"\");\n        } else errore.setText(\"I dati inseriti non sono corretti!\");\n      } else errore.setText(\"Occorre inserire username e password per accedere al sistema\");\n    } else if (e.getSource() == annulla) frame.setVisible(false);\n    else if (e.getSource() == passdim) {\n      creaSubFrameRecupero();\n    } else if (e.getSource() == okr) {\n      if (!mail.getText().trim().equals(\"\") && !codfis.getText().trim().equals(\"\")) {\n        boolean rigenera = controller.recupera(codfis.getText().trim(), mail.getText().trim());\n        frame_recupero.setVisible(false);\n        frame_recupero.setVisible(false);\n        if (rigenera) {\n          errore.setText(\"Nuova password generata, si prega di controllare l'email\");\n        } else errore.setText(\"Nuova password non generata, ricontrollare i dati inseriti\");\n      } else {\n        errorer.setText(\"Inserire entrambe i dati\");\n      }\n    } else {\n      frame_recupero.setVisible(false);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3709, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jFrame!=null&&jFrame!=this.welcomeFrame", "guardType": "IF {", "guardExpressionStart": 44, "guardExpressionEnd": 116, "guardBlockStart": 44, "guardBlockEnd": 167, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 125, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(JFrame)", "jFrame.setEnabled(boolean)"], "useStart": [253, 364], "useEnd": [311, 398], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Yoldark34/NemoVelo/tree/master/src/vue/terminal/secondaryFramed/FramedTerminalManager.java", "rawCode": "  private void displayVue(JFrame vue) {\n    if (this.currentFrame != null && this.currentFrame != this.welcomeFrame) {\n      this.currentFrame.setVisible(false);\n    }\n    this.currentFrame = vue;\n    if (this.currentFrame != this.welcomeFrame) {\n      this.currentFrame.setLocationRelativeTo(this.welcomeFrame);\n    }\n    this.welcomeFrame.setEnabled(false);\n    this.currentFrame.setEnabled(true);\n    this.setVisible(this.visible);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3710, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [9759], "initializationEnd": [9771], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 10073, "catchExpressionStart": 9969, "catchExpressionEnd": 9990, "catchBlockStart": 9969, "catchBlockEnd": 10073, "exceptionHandlingCallStart": [10015, 9998, 9998], "exceptionHandlingCallEnd": [10037, 10038, 10066], "configuration": ["jFrame.setSize(int,int)", "jFrame.add(ScatterPlot,*)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [9779, 9833, 9878], "configurationEnd": [9802, 9869, 9930], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 9938, "focalAPIEnd": 9960, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MichaelGolden/NAVA/tree/master/src/nava/vienna/inverserna/Main.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      Table table = new Table();\n      ViennaRuntime viennaRuntime =\n          new ViennaRuntime(\n              new File(\"C:/Program Files (x86)/ViennaRNA Package/\"), ViennaRuntime.OS.WINDOWS);\n      RNAinverse rnainverse = new RNAinverse(viennaRuntime);\n      IncaRNAtion2 incarnation = new IncaRNAtion2();\n      int incarnationSampleSize = 5;\n      double tempCelsius = 37;\n      // int [] target =\n      // RNAFoldingTools.getPairedSitesFromDotBracketString(\".....(((((.............))))).........(((((((.....)).))..)))...........((((..........))))....(((.(((.....(((......)))......((((((................)))))).))))))...\");\n      int[] target =\n          RNAFoldingTools.getPairedSitesFromDotBracketString(\n              \"(((.((((....((((((((((............(((.......)))))))))))))....)))))))((.......................................................))(((((....((((((((.........))))))))...))))).......(((.....)))......................\");\n      TargetStructure target1 = new TargetStructure(\"target1\", target, 37);\n      // TargetStructure target1 = new\n      // TargetStructure(\"target1\",RNAFoldingTools.getPairedSitesFromDotBracketString(\".((((((((((((....................)))))))))).))(((((((((((((..............)))))))))))))....\"), 37);\n      // TargetStructure target2 = new\n      // TargetStructure(\"target2\",RNAFoldingTools.getPairedSitesFromDotBracketString(\".((((((((((((....................)))))))))).))(((((((((((((..(((...)))...)))))))))))))....\"), 34);\n      ArrayList<TargetStructure> targetStructures = new ArrayList<>();\n      targetStructures.add(target1);\n      // targetStructures.add(target2);\n\n      GCcontentEvaluator linEvaluator = new GCcontentEvaluator();\n      RNAfoldEvaluator rnaFoldEvaluator = new RNAfoldEvaluator(viennaRuntime, true);\n      RNAfoldEvaluator rnaFoldEvaluatorNoPartition = new RNAfoldEvaluator(viennaRuntime, false);\n      AlternativeStructureEvaluator alternativeEvaluator = new AlternativeStructureEvaluator();\n      UNAfoldEvaluator unafoldEvaluator = new UNAfoldEvaluator();\n\n      ParetoOptimization pareto = new ParetoOptimization(0, 3);\n\n      ScatterPlot plot = new ScatterPlot();\n\n      // String sortOnField = \"target1: fscore[target, unafold(mfe, 37.0C)]\";\n      // CandidateComparator comp = new CandidateComparator(sortOnField);\n      // SortedList<ParetoItem> sortedList = new SortedList(comp);\n\n      for (long iter = 0; iter < 1000000; iter++) {\n        plot.x = new ArrayList<>();\n        plot.y = new ArrayList<>();\n        List<String> sequences =\n            incarnation.generateSample(\n                target1.pairedSites, tempCelsius, 0.5, 20, incarnationSampleSize);\n        sequences = sequences.subList(0, Math.min(sequences.size(), incarnationSampleSize));\n\n        ArrayList<MultiTargetAndCandidate> mtcs = new ArrayList<>(sequences.size());\n        for (String sequence : sequences) {\n          MultiTargetAndCandidate mtc = new MultiTargetAndCandidate(targetStructures, sequence);\n          mtcs.add(mtc);\n        }\n\n        System.out.println(linEvaluator);\n        batchEvaluation(mtcs, linEvaluator);\n        System.out.println(rnaFoldEvaluator);\n        batchEvaluation(mtcs, rnaFoldEvaluator);\n        System.out.println(rnaFoldEvaluatorNoPartition);\n        batchEvaluation(mtcs, rnaFoldEvaluatorNoPartition);\n        System.out.println(alternativeEvaluator);\n        batchEvaluation(mtcs, alternativeEvaluator);\n        System.out.println(unafoldEvaluator);\n        batchEvaluation(mtcs, unafoldEvaluator);\n\n        /*\n        System.out.println(linEvaluator);\n        batchEvaluation(mtcs,linEvaluator);\n        System.out.println(rnaFoldEvaluator);\n        batchEvaluation(mtcs,rnaFoldEvaluator);\n        System.out.println(alternativeEvaluator);\n        batchEvaluation(mtcs,alternativeEvaluator);\n        System.out.println(unafoldEvaluator);\n        batchEvaluation(mtcs,unafoldEvaluator);\n\n        ArrayList<String> sortedCriteria = null;\n        for(MultiTargetAndCandidate mtc : mtcs)\n        {\n        pareto.addItem(mtc);\n\n        if(sortedCriteria == null)\n        {\n        sortedCriteria = mtc.getAlphabeticalCriteria();\n        }\n        for(String criterion : sortedCriteria)\n        {\n        table.add(criterion, mtc.getCriterion(criterion).value);\n        }\n\n        System.out.println(pareto.items.size());\n        }*/\n\n        /*for(String s : sequences)\n        {\n        MultiTargetAndCandidate t = new MultiTargetAndCandidate(targetStructures, s);\n        t.addEvaluatedCriteria(linEvaluator.evaluate(t));\n        t.addEvaluatedCriteria(rnaFoldEvaluator.evaluate(t));\n        t.addEvaluatedCriteria(alternativeEvaluator.evaluate(t));\n        t.addEvaluatedCriteria(unafoldEvaluator.evaluate(t));\n        pareto.addItem(t);\n\n        if(sortedCriteria == null)\n        {\n        sortedCriteria = t.getAlphabeticalCriteria();\n        }\n        for(String criterion : sortedCriteria)\n        {\n        table.add(criterion, t.getCriterion(criterion).value);\n        }\n\n        System.out.println(pareto.items.size());\n        }*/\n\n        ArrayList<MultiTargetAndCandidate> mtcs2 = new ArrayList<>(sequences.size());\n\n        boolean refineWithRNAinverse = true;\n        if (refineWithRNAinverse) {\n          // now refine using sequences using rna inverse\n          for (TargetStructure t : targetStructures) {\n            for (MultiTargetAndCandidate mtc : mtcs) {\n              boolean useMFE = false;\n              boolean usePartitionFunction = true;\n              boolean applyConstraintMaskForStackingBases = true;\n              ArrayList<Structure> sample =\n                  rnainverse.inverse(\n                      t.pairedSites,\n                      mtc.sequence,\n                      t.tempCelsius,\n                      2,\n                      useMFE,\n                      usePartitionFunction,\n                      applyConstraintMaskForStackingBases);\n\n              if (sample != null) {\n                for (Structure structure : sample) {\n                  MultiTargetAndCandidate refinedMTC =\n                      new MultiTargetAndCandidate(targetStructures, structure.sequence);\n                  ArrayList<String> criteria = mtc.getAlphabeticalCriteria();\n                  for (String critName : criteria) {\n                    EvaluationValue criterion = mtc.getCriterion(critName);\n                    refinedMTC.setCriterion(\n                        \"sampled::\" + criterion.type.getUniqueIdentifier(), criterion);\n                  }\n                  mtcs2.add(refinedMTC);\n                }\n              }\n              /* if(sample != null)\n              {\n              for(Structure structure : sample)\n              {\n              String sequence = structure.sequence;\n              MultiTargetAndCandidate multiTarget = new MultiTargetAndCandidate(targetStructures, sequence);\n              multiTarget.addEvaluatedCriteria(linEvaluator.evaluate(multiTarget));\n              multiTarget.addEvaluatedCriteria(rnaFoldEvaluator.evaluate(multiTarget));\n              multiTarget.addEvaluatedCriteria(alternativeEvaluator.evaluate(multiTarget));\n              multiTarget.addEvaluatedCriteria(unafoldEvaluator.evaluate(multiTarget));\n              if(sortedCriteria == null)\n              {\n              sortedCriteria = multiTarget.getAlphabeticalCriteria();\n              }\n              pareto.addItem(multiTarget);\n              for(String criterion : sortedCriteria)\n              {\n              table.add(criterion, multiTarget.getCriterion(criterion).value);\n              }\n              System.out.println(pareto.items.size());\n              }\n              }*/\n            }\n          }\n        }\n\n        System.out.println(linEvaluator);\n        batchEvaluation(mtcs2, linEvaluator);\n        System.out.println(rnaFoldEvaluator);\n        batchEvaluation(mtcs2, rnaFoldEvaluator);\n        System.out.println(rnaFoldEvaluatorNoPartition);\n        batchEvaluation(mtcs2, rnaFoldEvaluatorNoPartition);\n        System.out.println(alternativeEvaluator);\n        batchEvaluation(mtcs2, alternativeEvaluator);\n        System.out.println(unafoldEvaluator);\n        batchEvaluation(mtcs2, unafoldEvaluator);\n\n        ArrayList<String> sortedCriteria = null;\n        for (MultiTargetAndCandidate mtc : mtcs2) {\n          pareto.addItem(mtc);\n\n          if (sortedCriteria == null) {\n            sortedCriteria = mtc.getAlphabeticalCriteria();\n          }\n          for (String criterion : sortedCriteria) {\n            table.add(criterion, mtc.getCriterion(criterion).value);\n          }\n\n          System.out.println(pareto.items.size());\n\n          // sortedList.add(mtc);\n        }\n\n        /* for(int i = 0 ; i < sortedList.size() ; i++)\n        {\n        ParetoItem p = sortedList.get(i);\n        System.out.println(i+\":\"+p.getCriterion(sortOnField));\n        }*/\n\n        pareto.items.get(0).printCriteria();\n        table.writeTable(new File(\"inversernatable.txt\"));\n        System.out.println(\"Correlations:\\n\" + table.getPairwiseSpearmanCorrelations());\n\n        // plot.xlab = \"target1_gc_content_paired_sites\";\n        // plot.ylab = \"target1_rnafold_ensemble_prob_37.0C\";\n        plot.xlab = \"target1: rnafold ensemble prob @ 37.0C\";\n        plot.ylab = \"target1: rnafold norm. ensemble defect @ 37.0C\";\n        // plot.ylab = \"target2: rnafold ensemble prob @ 34.0C\";\n\n        ArrayList<String> paretoCriteria = new ArrayList<>();\n        paretoCriteria.add(plot.xlab);\n        paretoCriteria.add(plot.ylab);\n        // pareto.setParetoCriteria(paretoCriteria);\n\n        for (ParetoItem t : pareto.items) {\n          plot.x.add(t.getCriterion(plot.xlab).value);\n          plot.y.add(t.getCriterion(plot.ylab).value);\n        }\n      }\n      JFrame frame = new JFrame();\n      frame.setSize(640, 480);\n\n      plot.repaint();\n      frame.add(plot, BorderLayout.CENTER);\n\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.setVisible(true);\n\n    } catch (Exception ex) {\n      Logger.getLogger(Pareto.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3711, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [230], "initializationEnd": [269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [371, 451], "configurationEnd": [393, 463], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 469, "focalAPIEnd": 491, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/timaschew/jANN/tree/master/src/main/java/de/unikassel/ann/gui/HelpOverview.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  public static void createAndShowGUI() {\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"jANN-Funktionen Übersicht\");\n    // frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Add content to the window.\n    frame.getContentPane().add(new HelpOverview());\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3712, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [352], "initializationEnd": [377], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [383, 441, 490], "configurationEnd": [435, 463, 502], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 508, "focalAPIEnd": 530, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/malaterre/GDCM/tree/master/Utilities/VTK/Examples/Java/AWTMedical3.java", "rawCode": "  public static void main(String s[]) {\n    if (s.length == 0) {\n      return; // need a filename here\n    }\n    File theFile = new File(s[0]);\n    // File theFile = new\n    // File(\"/Users/mmroden/Documents/MVSDownloadDirectory/Documents/1.2.840.113704.1.111.3384.1271766367.5/\");\n    AWTMedical3 panel = new AWTMedical3(theFile);\n\n    JFrame frame = new JFrame(\"AWTMedical3\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(\"Center\", panel);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3713, "initialization": ["JFrame jFrame = wrapWithScrollingInFrame(JXTable,String)"], "initializationStart": [1176], "initializationEnd": [1246], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1397, "focalAPIEnd": 1419, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/swingx/tree/master/swingx-core/src/test/java/org/jdesktop/swingx/JXTableIssues.java", "rawCode": "  /**\n   * Match highlighter fails to display correctly if column-based highlighter alters background\n   * color.\n   */\n  public void interactiveColumnHighlightingWithSearch() {\n    JXTable table = new JXTable(new AncientSwingTeam());\n\n    table\n        .getColumnExt(\"Favorite Color\")\n        .setHighlighters(\n            new AbstractHighlighter() {\n              @Override\n              protected Component doHighlight(Component renderer, ComponentAdapter adapter) {\n                Color color = (Color) adapter.getValue();\n\n                if (renderer instanceof JComponent) {\n                  ((JComponent) renderer).setBorder(BorderFactory.createLineBorder(color));\n                }\n\n                return renderer;\n              }\n            });\n\n    table\n        .getColumnExt(0)\n        .addHighlighter(\n            new ColorHighlighter(\n                new HighlightPredicate() {\n                  public boolean isHighlighted(Component renderer, ComponentAdapter adapter) {\n                    return adapter.getValue().toString().contains(\"e\");\n                  }\n                },\n                Color.GREEN,\n                null));\n\n    JFrame frame = wrapWithScrollingInFrame(table, \"Column Highlighter with Search Test\");\n    table.putClientProperty(JXTable.MATCH_HIGHLIGHTER, true);\n    // should highlight Jeff with Yellow\n    table.getSearchable().search(\"e\", 3);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3714, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [144], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)"], "configurationStart": [1225, 1264], "configurationEnd": [1247, 1287], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1293, "focalAPIEnd": 1315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)"], "useStart": [1322], "useEnd": [1374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maiklos/squirrel-sql/tree/master/sql12/test/jfctests/net/sourceforge/squirrel_sql/client/update/gui/UpdateSummaryDialogTestUI.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    ApplicationArguments.initialize(new String[] {});\n\n    final JFrame frame = new JFrame(\"Test UpdateManagerDialog\");\n    JButton showDialogButton = new JButton(\"Show UpdateManager Dialog\");\n    JLabel installedVersionLabel = new JLabel(\"InstalledVersion: \");\n    JLabel availableVersionLabel = new JLabel(\"AvailableVersion: \");\n    final JTextField installedVersionTF = new JTextField(\"installedVersion\", 30);\n    final JTextField availableVersionTF = new JTextField(\"availableVersion\", 30);\n    showDialogButton.addActionListener(\n        new ActionListener() {\n          UpdateSummaryDialog dialog = null;\n\n          public void actionPerformed(ActionEvent e) {\n            dialog = new UpdateSummaryDialog(frame, getArtifacts(), null);\n            dialog.setInstalledVersion(installedVersionTF.getText());\n            dialog.setAvailableVersion(availableVersionTF.getText());\n            dialog.setVisible(true);\n          }\n        });\n    JPanel panel = new JPanel();\n\n    panel.add(installedVersionLabel);\n    panel.add(installedVersionTF);\n    panel.add(availableVersionLabel);\n    panel.add(availableVersionTF);\n    panel.add(showDialogButton);\n\n    frame.getContentPane().add(panel);\n    frame.setSize(400, 200);\n    frame.setVisible(true);\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3715, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "null!=jFrame", "guardType": "IF {", "guardExpressionStart": 122, "guardExpressionEnd": 147, "guardBlockStart": 122, "guardBlockEnd": 223, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 156, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.dispose()"], "useStart": [194], "useEnd": [216], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ekirkilevics/TestSSQL/tree/master/sql12/plugins/graph/src/main/java/net/sourceforge/squirrel_sql/plugins/graph/window/GraphWindowController.java", "rawCode": "  void close() {\n    if (null != _dlgWindow) {\n      _dlgWindow.setVisible(false);\n      _dlgWindow.dispose();\n    } else if (null != _frameWindow) {\n      _frameWindow.setVisible(false);\n      _frameWindow.dispose();\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3716, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [257], "initializationEnd": [269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.add(BiSlider)"], "configurationStart": [275, 408], "configurationEnd": [298, 432], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 438, "focalAPIEnd": 460, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cab2b/tree/master/software/cab2b/src/java/client/edu/wustl/cab2b/client/ui/controls/slider/BiSlider.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Vector vetor = new Vector();\n    vetor.add(\"a\");\n    vetor.add(\"b\");\n    vetor.add(\"c\");\n    vetor.add(\"d\");\n    vetor.add(\"e\");\n    vetor.add(\"g\");\n    vetor.add(\"f\");\n\n    JFrame frame = new JFrame();\n    frame.setSize(300, 400);\n    BiSlider cab2bSliderUI = new BiSlider(vetor, \"a\", \"b\");\n    cab2bSliderUI.setRangeBounds(\"c\", \"g\");\n    frame.add(cab2bSliderUI);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3717, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 272, "focalAPIEnd": 297, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blaziko/hex-game/tree/master/src/hexgame/ui/HexGui.java", "rawCode": "  private void jButton1ActionPerformed(ActionEvent evt) { // event OK!\n    if (hexboard != null) hexboard.setVisible(false);\n    SpinnerNumberModel model = (SpinnerNumberModel) jSpinner1.getModel();\n    int size = model.getNumber().intValue();\n    initHexboard(size);\n    jFrame1.setVisible(false);\n    String strategy1 = (String) jComboBox1.getSelectedItem();\n    String strategy2 = (String) jComboBox2.getSelectedItem();\n    controller.startNewGameAction(size, strategy1, strategy2);\n  } //\n"}, {"dataset": "setVisible", "exampleID": 3718, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [160, 216, 286], "configurationEnd": [182, 280, 298], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 304, "focalAPIEnd": 326, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dameiers/SI2012/tree/master/src/gui/steps/VoyageMethodStep.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new VoyageMethodStep());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3719, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [294], "initializationEnd": [322], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.doLayout()"], "configurationStart": [329, 360, 734, 793, 855], "configurationEnd": [354, 413, 757, 816, 872], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 879, "focalAPIEnd": 902, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jesseeichar/debrief/tree/master/trunk/org.mwc.asset.legacy/src/ASSET/GUI/Workbench/LoadedWorkbench.java", "rawCode": "  public static void main(String[] args) {\n    // try{\n    // UIManager.setLookAndFeel(new com.incors.plaf.kunststoff.KunststoffLookAndFeel());\n    // }catch(UnsupportedLookAndFeelException e)\n    // {\n    // e.printStackTrace();\n    // }\n\n    // create the interface\n    final JFrame parent = new JFrame(\"Loaded session\");\n\n    parent.setSize(1100, 600);\n    parent.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // open the splash screen\n    CoreGUISwing.showSplash(parent, \"images/WorkBenchLogo.gif\");\n\n    // create the tool-parent\n    final CoreGUISwing.ASSETParent pr = new CoreGUISwing.ASSETParent(parent);\n\n    // create the workbench\n    final WorkBenchGUI viewer = new WorkBenchGUI(pr);\n\n    // collate the parent\n    parent.getContentPane().setLayout(new BorderLayout());\n    parent.getContentPane().add(\"Center\", viewer.getPanel());\n    parent.doLayout();\n\n    parent.setVisible(true);\n\n    // finally load the data\n\n    // put the datafile into a vector\n    Vector<File> theScenarios = new Vector<File>();\n    theScenarios.add(new File(MY_SCENARIO));\n\n    Vector<File> theControls = new Vector<File>();\n    theControls.add(new File(MY_OBSERVERS));\n\n    // load the data\n    try {\n      viewer.scenarioDropped(theScenarios);\n      viewer.observerDropped(theControls);\n\n    } catch (FileNotFoundException e) {\n      e\n          .printStackTrace(); // To change body of catch statement use File | Settings | File\n                              // Templates.\n    }\n\n    // trigger a fit-to-win\n    viewer.FitToWin();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3720, "initialization": ["JFrame jFrame = new PlanTestFrame()"], "initializationStart": [62], "initializationEnd": [81], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [87], "configurationEnd": [139], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 145, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Vanuan/sweethome3d/tree/master/test/com/eteks/sweethome3d/junit/PlanComponentTest.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new PlanTestFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3721, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.pack()"], "configurationStart": [80, 113], "configurationEnd": [107, 125], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 131, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/msnorth/cs2340_mule/tree/master/edu/gatech/cs2340/test/InGameMenuTest.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.add(new InGameMenu());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3722, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [160, 211, 281], "configurationEnd": [182, 275, 293], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 299, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ivanstojkovic/doodle/tree/master/feeder/src/main/java/at/tuwien/sbc/feeder/gui/panels/SearchPanel.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new SearchPanel());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3723, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [1059], "initializationEnd": [1077], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [1083, 1112, 1170, 1228, 1304], "configurationEnd": [1106, 1164, 1192, 1250, 1337], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1343, "focalAPIEnd": 1365, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johdah/Weka/tree/master/src/main/java/weka/core/json/JSONNode.java", "rawCode": "  /**\n   * Only for testing. Generates a simple JSON object and displays it.\n   *\n   * @param args ignored\n   * @throws Exception if something goes wrong\n   */\n  public static void main(String[] args) throws Exception {\n    // generates the example listed here:\n    // http://en.wikipedia.org/wiki/JSON\n    JSONNode person = new JSONNode();\n    person.addPrimitive(\"firstName\", \"John\");\n    person.addPrimitive(\"lastName\", \"Smith\");\n    JSONNode address = person.addObject(\"address\");\n    address.addPrimitive(\"streetAddress\", \"21 2nd Street\");\n    address.addPrimitive(\"city\", \"New York\");\n    address.addPrimitive(\"state\", \"NY\");\n    address.addPrimitive(\"postalCode\", 10021);\n    JSONNode phonenumbers = person.addArray(\"phoneNumbers\");\n    phonenumbers.addArrayElement(\"212 555-1234\");\n    phonenumbers.addArrayElement(\"646 555-4567\");\n\n    // output in console\n    StringBuffer buffer = new StringBuffer();\n    person.toString(buffer);\n    System.out.println(buffer.toString());\n\n    // display GUI\n    JTree tree = new JTree(person);\n    JFrame frame = new JFrame(\"JSON\");\n    frame.setSize(800, 600);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(new JScrollPane(tree), BorderLayout.CENTER);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3724, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [80, 103, 161, 179], "configurationEnd": [97, 155, 173, 212], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 218, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drossglance/glance-server/tree/master/src/test/java/uk/frequency/glance/test/PositionTraceDebug.java", "rawCode": "  static void showOnFrame(JPanel canvas) {\n    JFrame frame = new JFrame();\n    frame.add(canvas);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3725, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [58], "initializationEnd": [70], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setLayout(BorderLayout)", "jFrame.setSize(int,int)", "jFrame.add(CLabel)"], "configurationStart": [76, 130, 165, 271], "configurationEnd": [124, 159, 183, 279], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 285, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.repaint()"], "useStart": [309], "useEnd": [320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rkipper/AppInventor_RK/tree/master/appinventor/blockslib/src/openblocks/codeblockutil/CLabel.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setLayout(new FlowLayout());\n    f.setSize(500, 75);\n    CLabel c = new CLabel(\"hi\");\n    c.setPreferredSize(new Dimension(400, 50));\n\n    f.add(c);\n    f.setVisible(true);\n    f.repaint();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3726, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [122], "initializationEnd": [192], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.setPreferredSize(Dimension)", "jFrame.pack()", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [199, 257, 305, 358, 376], "configurationEnd": [251, 279, 352, 370, 409], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 415, "focalAPIEnd": 437, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alessandro-aglietti/itis-leonardo-da-vinci/tree/master/swingset3/src/com/sun/swingset3/demos/tree/TreeDemo.java", "rawCode": "  /** main method allows us to run as a standalone demo. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(TreeDemo.class.getAnnotation(DemoProperties.class).value());\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new TreeDemo());\n    frame.setPreferredSize(new Dimension(800, 600));\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3727, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(!(b))", "guardType": "IF {", "guardExpressionStart": 488, "guardExpressionEnd": 494, "guardBlockStart": 488, "guardBlockEnd": 565, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 585, "focalAPIEnd": 604, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Method.invoke(jFrame,Object[])"], "useStart": [1017], "useEnd": [1038], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/xena/ext/src/javahelp/jhMaster/JavaHelp/src/new/javax/help/WindowPresentation.java", "rawCode": "  /** Displays the presentation to the user. */\n  public void setDisplayed(boolean b) {\n    debug(\"setDisplayed\");\n    // if the jhelp is null and they don't want it displayed just return\n    if (jhelp == null && !b) {\n      return;\n    }\n\n    // The call to createHelpWindow is necessary as the modality\n    // might have been changed and we need to change from a dialog\n    // to a frame. This is only done in createHelpWindow.\n    createHelpWindow();\n    if (modallyActivated) {\n      if (b) {\n        dialog.show();\n      } else {\n        dialog.hide();\n      }\n    } else {\n      frame.setVisible(b);\n\n      // We should be able to just\n      // try {\n      // frame.setState(Frame.NORMAL)\n      // } catch (NoSuchMethodError ex) {\n      // }\n      // but IE4.0 barfs very badly at this\n      // So...\n\n      try {\n        Class types[] = {Integer.TYPE};\n        Method m = Frame.class.getMethod(\"setState\", types);\n\n        if (m != null) {\n          Object args[] = {new Integer(0)}; // Frame.NORMAL\n          m.invoke(frame, args);\n        }\n      } catch (NoSuchMethodError ex) {\n        // as in JDK1.1\n      } catch (NoSuchMethodException ex) {\n        // as in JDK1.1\n      } catch (java.lang.reflect.InvocationTargetException ex) {\n        //\n      } catch (java.lang.IllegalAccessException ex) {\n        //\n      }\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3728, "initialization": ["JFrame jFrame = new ShowUIDefaults(String)"], "initializationStart": [58], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [97, 151, 165], "configurationEnd": [145, 159, 194], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 200, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/branches/openvpn-als/ui/src/com/sshtools/ui/swing/ShowUIDefaults.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new ShowUIDefaults(\"UI Defaults\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.pack();\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3729, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [131], "initializationEnd": [199], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setResizable(boolean)", "jFrame.setLayout(BorderLayout)", "jFrame.add(JScrollPane,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.pack()", "jFrame.pack()", "jFrame.setBounds(int,int,int,int)"], "configurationStart": [220, 292, 328, 1424, 2151, 2321, 2682, 3012], "configurationEnd": [286, 322, 369, 1475, 2202, 2338, 2699, 3212], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 3218, "focalAPIEnd": 3245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cbsa-informatik-uni-siegen/gtitool/tree/master/start/source/de/unisiegen/gtitool/start/Start.java", "rawCode": "  /** Shows the java version error {@link JFrame}. */\n  public final void showJavaVersionError() {\n    JFrame jFrameInfo =\n        new JFrame(Messages.getString(\"JavaVersion.Title\", new Object[] {})); // $NON-NLS-1$\n    jFrameInfo.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    jFrameInfo.setResizable(false);\n    jFrameInfo.setLayout(new GridBagLayout());\n\n    GridBagConstraints gridBagConstraints;\n\n    JScrollPane jScrollPaneInfo = new JScrollPane();\n    JTextArea jTextAreaInfo = new JTextArea();\n    JButton jGTIButtonClose = new JButton();\n\n    jScrollPaneInfo.setBorder(null);\n    jTextAreaInfo.setFocusable(false);\n    jTextAreaInfo.setFont(new Font(\"Dialog\", 1, 12)); // $NON-NLS-1$\n    jTextAreaInfo.setOpaque(false);\n    jTextAreaInfo.setBorder(null);\n    jTextAreaInfo.setLineWrap(true);\n    jTextAreaInfo.setWrapStyleWord(true);\n    jTextAreaInfo.setText(\n        Messages.getString(\n            \"JavaVersion.Message\", // $NON-NLS-1$\n            new Object[] {new Double(this.currentJavaVersion), new Double(MIN_JAVA_VERSION)}));\n    jScrollPaneInfo.setViewportView(jTextAreaInfo);\n\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\n    gridBagConstraints.weightx = 1.0;\n    gridBagConstraints.weighty = 1.0;\n    gridBagConstraints.insets = new Insets(16, 16, 5, 16);\n    jFrameInfo.add(jScrollPaneInfo, gridBagConstraints);\n\n    jGTIButtonClose.setFocusable(false);\n    jGTIButtonClose.setText(\n        Messages.getString(\n            \"JavaVersion.Close\", // $NON-NLS-1$\n            new Object[] {}));\n    jGTIButtonClose.addActionListener(\n        new ActionListener() {\n\n          public void actionPerformed(ActionEvent event) {\n            System.exit(0);\n          }\n        });\n\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.fill = GridBagConstraints.NONE;\n    gridBagConstraints.weightx = 0.0;\n    gridBagConstraints.weighty = 0.0;\n    gridBagConstraints.insets = new Insets(5, 16, 16, 16);\n    jFrameInfo.add(jGTIButtonClose, gridBagConstraints);\n\n    int rows = 3;\n    int columns = 16;\n    jTextAreaInfo.setRows(rows);\n    jTextAreaInfo.setColumns(columns);\n    jFrameInfo.pack();\n\n    int heightViewport = jScrollPaneInfo.getViewport().getBounds().height;\n    int heightView = jScrollPaneInfo.getViewport().getView().getBounds().height;\n\n    while ((rows < 10) && (heightView > heightViewport)) {\n      rows++;\n      columns = columns + 2;\n      jTextAreaInfo.setRows(rows);\n      jTextAreaInfo.setColumns(columns);\n      jFrameInfo.pack();\n      heightViewport = jScrollPaneInfo.getViewport().getBounds().height;\n      heightView = jScrollPaneInfo.getViewport().getView().getBounds().height;\n    }\n\n    int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;\n    int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;\n    jFrameInfo.setBounds(\n        (screenWidth / 2) - (jFrameInfo.getWidth() / 2),\n        (screenHeight / 2) - (jFrameInfo.getHeight() / 2),\n        jFrameInfo.getWidth(),\n        jFrameInfo.getHeight());\n    jFrameInfo.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3730, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [242], "initializationEnd": [254], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)"], "configurationStart": [260, 314, 348, 373], "configurationEnd": [308, 342, 367, 396], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 402, "focalAPIEnd": 420, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FellowTraveler/otapij/tree/master/otapij-test-gui/src/main/java/com/moneychanger/ui/test/LoadAndShow.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    String path = \"/Users/administrator/Desktop/images.jpeg\";\n    BufferedImage image = ImageIO.read(new File(path));\n    LoadAndShow test = new LoadAndShow(image);\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.add(new JScrollPane(test));\n    f.setSize(400, 400);\n    f.setLocation(200, 200);\n    f.setVisible(true);\n    // showIcon(image);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3731, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [91], "initializationEnd": [125], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [211, 256, 285], "configurationEnd": [233, 279, 349], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 355, "focalAPIEnd": 377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prsebastian/gwt-issue-8215/tree/master/dev/core/test/com/google/gwt/dev/SwingTreeLoggerTestApp.java", "rawCode": "  /** @param args ignored */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"SwingTreeLogger test\");\n    SwingLoggerPanel loggerPanel = new SwingLoggerPanel(TreeLogger.INFO, null);\n    frame.getContentPane().add(loggerPanel);\n    frame.setSize(950, 700);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setVisible(true);\n    TreeLogger logger = loggerPanel.getLogger();\n    logger.log(TreeLogger.INFO, \"info 1\");\n    TreeLogger branch = logger.branch(TreeLogger.INFO, \"info branch\");\n    branch.log(TreeLogger.DEBUG, \"debug 1\");\n    branch.log(TreeLogger.ERROR, \"error 1\");\n    TreeLogger dbgBranch = logger.branch(TreeLogger.DEBUG, \"debug branch\");\n    dbgBranch.log(TreeLogger.SPAM, \"spam 1\");\n    dbgBranch.log(TreeLogger.WARN, \"warn 1\");\n    logger.log(TreeLogger.INFO, \"info 2\");\n  }\n"}, {"dataset": "setVisible", "exampleID": 3732, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [754], "initializationEnd": [766], "hasTryCatch": 1, "exceptionType": "ImgLibException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 644, "tryExpressionEnd": 648, "tryBlockStart": 644, "tryBlockEnd": 921, "catchExpressionStart": 861, "catchExpressionEnd": 887, "catchBlockStart": 861, "catchBlockEnd": 921, "exceptionHandlingCallStart": [895], "exceptionHandlingCallEnd": [914], "configuration": ["jFrame.add(JPanel)", "jFrame.pack()"], "configurationStart": [774, 819], "configurationEnd": [811, 827], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 835, "focalAPIEnd": 853, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mahogny/Endrov/tree/master/ev/endrov/imglib/ImglibTest.java", "rawCode": "  public static void main(String[] args) {\n\n    EvLog.addListener(new EvLogStdout());\n    EndrovCore.loadPlugins();\n\n    EvData data = EvData.loadFile(new File(\"/home/mahogny/Desktop/4.png\"));\n    EvChannel ch = data.getIdObjectsRecursive(EvChannel.class).values().iterator().next();\n    EvStack stack = ch.getStack(ch.getFirstFrame());\n\n    stack = new EvOpImageConvertPixel(EvPixelsType.FLOAT).exec1(null, stack);\n\n    ImgPlus<FloatType> imp = EvStackAdapter.wrapEvStack(stack);\n\n    Img<FloatType> image = imp.getImg();\n\n    Img<FloatType> out = Gauss.toFloat(8, image);\n\n    FloatEvStack<FloatType> s2 = (FloatEvStack<FloatType>) out;\n\n    try {\n      BufferedImage bim = s2.getEvStack().getPlane(0).getPixels().quickReadOnlyAWT();\n\n      JFrame f = new JFrame();\n      f.add(new JLabel(new ImageIcon(bim)));\n      f.pack();\n      f.setVisible(true);\n    } catch (ImgLibException e) {\n      e.printStackTrace();\n    }\n    /*\n    System.out.println();\n    System.exit(0);\n    */\n  }\n"}, {"dataset": "setVisible", "exampleID": 3733, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [58], "initializationEnd": [70], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(FileDragLabel)"], "configurationStart": [119], "configurationEnd": [127], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 133, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SnakeDoc/Spark/tree/master/src/java/org/jivesoftware/spark/component/FileDragLabel.java", "rawCode": "  public static void main(String args[]) {\n    JFrame f = new JFrame();\n    FileDragLabel p = new FileDragLabel();\n    f.add(p);\n    f.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3734, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 63, "focalAPIEnd": 86, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SmartBear/soapui/tree/master/soapui/src/main/java/com/eviware/soapui/security/ui/XPathCellRender.java", "rawCode": "  @Override\n  public void windowLostFocus(WindowEvent e) {\n    frame.setVisible(false);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3735, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [146], "initializationEnd": [179], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 207, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AdeleResearchGroup/Cilia/tree/master/examples/hello-world-example-annotations/hello-mediator/src/main/java/hello/world/example/adapters/GuiAdapter.java", "rawCode": "  /** Use iPOJO annotations. Callback to be called when the component goes to the valid state. */\n  @Validate\n  public void start() {\n    frame = new JFrame(\"hello-world-example\");\n    initComponents();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3736, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [58], "initializationEnd": [70], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(FileDragLabel)"], "configurationStart": [119], "configurationEnd": [127], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 133, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/visit/spark-svn-mirror/tree/master/src/java/org/jivesoftware/spark/component/FileDragLabel.java", "rawCode": "  public static void main(String args[]) {\n    JFrame f = new JFrame();\n    FileDragLabel p = new FileDragLabel();\n    f.add(p);\n    f.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3737, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [110], "initializationEnd": [143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)", "jFrame.pack()", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [149, 216, 255, 273], "configurationEnd": [210, 249, 267, 306], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 312, "focalAPIEnd": 334, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/student2ua/myTaning/tree/master/src/com/tor/swing/table/RowSorterExample.java", "rawCode": "  public static void createAndShowGUI() {\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"Table Row Rendering\");\n    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    frame.add(new RowSorterExample());\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3738, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [413], "initializationEnd": [425], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setIconImage(Image)", "jFrame.getSize()", "jFrame.setLocation(int,int)"], "configurationStart": [431, 565, 658], "configurationEnd": [536, 580, 775], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1091, "focalAPIEnd": 1114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.9.0-RC1/src/lib/com/izforge/izpack/installer/GUIInstaller.java", "rawCode": "  /**\n   * Loads the suitable langpack.\n   *\n   * @exception Exception Description of the Exception\n   */\n  private void loadLangPack() throws Exception {\n    // Initialisations\n    List availableLangPacks = getAvailableLangPacks();\n    int npacks = availableLangPacks.size();\n    if (npacks == 0) throw new Exception(\"no language pack available\");\n    String selectedPack;\n\n    // Dummy Frame\n    JFrame frame = new JFrame();\n    frame.setIconImage(\n        new ImageIcon(this.getClass().getResource(\"/img/JFrameIcon.png\")).getImage());\n\n    Dimension frameSize = frame.getSize();\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    frame.setLocation(\n        (screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2 - 10);\n\n    // We get the langpack name\n    if (npacks != 1) {\n      LanguageDialog picker = new LanguageDialog(frame, availableLangPacks.toArray());\n      picker.setSelection(Locale.getDefault().getISO3Country().toLowerCase());\n      picker.setModal(true);\n      picker.toFront();\n      // frame.setVisible(true);\n      frame.setVisible(false);\n      picker.setVisible(true);\n\n      selectedPack = (String) picker.getSelection();\n      if (selectedPack == null) throw new Exception(\"installation canceled\");\n    } else selectedPack = (String) availableLangPacks.get(0);\n\n    // We add an xml data information\n    this.installdata.xmlData.setAttribute(\"langpack\", selectedPack);\n\n    // We load the langpack\n    installdata.localeISO3 = selectedPack;\n    installdata.setVariable(ScriptParser.ISO3_LANG, installdata.localeISO3);\n    InputStream in = getClass().getResourceAsStream(\"/langpacks/\" + selectedPack + \".xml\");\n    this.installdata.langpack = new LocaleDatabase(in);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3739, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setLocation(int,int)", "jFrame.setUndecorated(boolean)", "jFrame.pack()"], "configurationStart": [963, 1162, 1508, 2653], "configurationEnd": [1020, 1190, 1539, 2670], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 2691, "focalAPIEnd": 2718, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/corintio/opentestbed/tree/master/src/main/java/ww10/gui/SwingGUI.java", "rawCode": "  void initialize() {\n\n    statusbar = new javax.swing.JProgressBar();\n    actionPanel = new ActionPanel(dataModel);\n    averageProfitPanel = new AverageProfitPanel(dataModel);\n\n    // set up frame\n    frame = new JFrame(\"Wetenschapsweek\");\n    JSplitPane splitPane = new javax.swing.JSplitPane();\n\n    JTabbedPane tabs = new javax.swing.JTabbedPane();\n\n    frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);\n\n    splitPane.setBottomComponent(tabs);\n    splitPane.setLeftComponent(statusbar);\n\n    frame.getContentPane().add(splitPane);\n\n    // this.progressFrame.setExtendedState(Frame.MAXIMIZED_BOTH);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    // this.progressFrame.setSize(1200, 800);\n    this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    statusbar.setStringPainted(true);\n    // setting this causes gnome bars to be on top\n    // this.progressFrame.setResizable(false);\n    this.frame.setLocation(0, 0);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    if (!this.frame.isDisplayable()) {\n      // Can only do this when the frame is not visible\n      this.frame.setUndecorated(true);\n    }\n    GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n    if (gd.isFullScreenSupported()) {\n      gd.setFullScreenWindow(this.frame);\n    } else {\n      // Can't run fullscreen, need to bodge around it (setSize to screen size, etc)\n    }\n    // this.frame.addKeyListener(new KeyListener() {\n    //\n    // public void keyPressed(KeyEvent e) {\n    // }\n    //\n    // public void keyReleased(KeyEvent e) {\n    // }\n    //\n    // public void keyTyped(KeyEvent e) {\n    // if (e.getKeyChar() == 'f') {\n    // // progressFrame.setResizable(false);\n    // // // progressFrame.setUndecorated(true);\n    // // GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n    // // GraphicsDevice graphicsDevice = ge.getDefaultScreenDevice();\n    // // graphicsDevice.setFullScreenWindow(progressFrame);\n    // // //myDevice.setFullScreenWindow(null);\n    // } else if (e.getKeyChar() == 'x') {\n    // System.exit(0);\n    // }\n    // }\n    //\n    // });\n    tabs.addTab(\"Average Profit\", averageProfitPanel);\n    tabs.addTab(\"Actions\", actionPanel);\n\n    this.frame.pack(); // not needed?\n    this.frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3740, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [325], "initializationEnd": [337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setPreferredSize(Dimension)", "jFrame.setTitle(String)", "jFrame.setLocation(int,int)", "jFrame.setContentPane(JTabbedPaneOrganizer)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [343, 394, 423, 492, 521, 576], "configurationEnd": [388, 417, 447, 515, 570, 585], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 591, "focalAPIEnd": 610, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/Nebraska/src/nebraska/Nebraska.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    if (System.getProperty(\"os.name\").contains(\"Windows\")) {\n      UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel\");\n    }\n    // UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    new Constants();\n    jf = new JFrame();\n    jf.setPreferredSize(new Dimension(1000, 700));\n    jf.setTitle(\"Nebraska\");\n    jf.setLocation(200, 200);\n    jtbo = new JTabbedPaneOrganizer();\n    jf.setContentPane(jtbo);\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jf.pack();\n    jf.setVisible(true);\n    starteOfficeApplication();\n    SwingUtilities.invokeLater(\n        new Runnable() {\n          public void run() {\n            jtbo.setHeader(0);\n          }\n        });\n  }\n"}, {"dataset": "setVisible", "exampleID": 3741, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [246], "initializationEnd": [258], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 44, "tryExpressionEnd": 48, "tryBlockStart": 44, "tryBlockEnd": 526, "catchExpressionStart": 403, "catchExpressionEnd": 435, "catchBlockStart": 403, "catchBlockEnd": 469, "exceptionHandlingCallStart": [443], "exceptionHandlingCallEnd": [462], "configuration": ["jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [266, 301], "configurationEnd": [285, 310], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 318, "focalAPIEnd": 337, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)"], "useStart": [345], "useEnd": [394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/markus1978/clickwatch/tree/master/external/edu.uci.ics.jung/src/samples/graph/southern/TestSouthernWomenBipartite.java", "rawCode": "  public static void main(String[] s) {\n    try {\n      FileReader fr = new FileReader(\"samples/datasets/southern_women_data.txt\");\n\n      System.out.println(\"loading : \");\n\n      JPanel jp = new TestSouthernWomenBipartite(fr);\n      JFrame jf = new JFrame();\n      jf.getContentPane().add(jp);\n      jf.pack();\n      jf.setVisible(true);\n      jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3742, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [230], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)", "jFrame.pack()"], "configurationStart": [258, 352, 411], "configurationEnd": [310, 377, 423], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 429, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/2.semestr/PJV/NetBeansProjects/NetBeansProjects/graphics/src/graphics/TextDemo.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  private static void createAndShowGUI() {\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"TextDemo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Add contents to the window.\n    frame.add(new TextDemo());\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3743, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [368], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setContentPane(JDesktopPane)", "jFrame.setMinimumSize(Dimension)", "jFrame.pack()"], "configurationStart": [404, 509, 583, 3217], "configurationEnd": [456, 538, 609, 3229], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 3235, "focalAPIEnd": 3257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mattloidolt/CS414/tree/master/A4/src/core/KitchenDisplay.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the\n   * event-dispatching thread.\n   */\n  private static void createAndShowGUI(final String[] args) {\n    final Dimension size = Toolkit.getDefaultToolkit().getScreenSize();\n    Color background = new Color(0, 0, 0);\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"PIZZA_STORE_NAME\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JDesktopPane desktop = new JDesktopPane();\n    frame.setContentPane(desktop);\n    desktop.setBackground(background);\n    frame.setMinimumSize(size);\n    desktop.setLayout(new GridBagLayout()); // this is the framing structure\n    GridBagConstraints gBC = new GridBagConstraints();\n    gBC.fill = GridBagConstraints.HORIZONTAL;\n    gBC.weightx = .75;\n    gBC.gridx = 0;\n    gBC.gridy = 0;\n    JLabel heading1 = new JLabel(\"<html><h1>ORDER</h1><hr></html>\");\n    JLabel heading2 = new JLabel(\"<html><h1>COMPLETE?</h1><hr></html>\");\n    heading1.setForeground(Color.white);\n    heading2.setForeground(Color.white);\n\n    desktop.add(heading1, gBC);\n    gBC.gridx = 1;\n    gBC.weightx = .25;\n    desktop.add(heading2, gBC);\n    gBC.gridx = 0;\n    gBC.weightx = .75;\n\n    //////// adding all the orders to the screen /////////\n    DirectoryScanner scanner = new DirectoryScanner();\n    scanner.setIncludes(new String[] {\"**/*.POS\"});\n    scanner.setBasedir(\".\");\n    scanner.setCaseSensitive(false);\n    scanner.scan();\n    final String[] files = scanner.getIncludedFiles();\n    for (int i = 0; i < files.length; i++) {\n      BufferedReader in;\n      String order = \"<html><h2>\";\n      try {\n        in = new BufferedReader(new FileReader(files[i]));\n        order += in.readLine() + \"</h2><table>\";\n        String line = in.readLine();\n        int lineNum = 1;\n        while (line != null) {\n          if (lineNum != 1) {\n            order += \"<tr>\";\n            if (lineNum == 2) order += \"Phone: \";\n            order += line + \"</tr>\";\n          }\n          lineNum++;\n          line = in.readLine();\n        }\n        order += \"</table></html>\";\n        in.close();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      JLabel o = new JLabel(order);\n      o.setForeground(Color.white);\n      gBC.gridy++;\n      desktop.add(o, gBC);\n    }\n    /////////////////////////////////////////////////////////\n\n    ///// adding buttons for marking orders as complete ////\n    gBC.gridy = 0;\n    gBC.gridx = 1;\n    gBC.weightx = .25;\n    for (int i = 0; i < files.length; i++) {\n      JButton done = new JButton(\"Done\");\n      done.setPreferredSize(new Dimension(100, 75));\n      final int k = i;\n      done.addActionListener(\n          new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n              // on button press...\n              File f = new File(files[k]);\n              boolean success = f.delete();\n              if (!success) throw new IllegalArgumentException(\"Delete: deletion failed\");\n              else restartProgram(args);\n            }\n          });\n\n      gBC.gridy++;\n      desktop.add(done, gBC);\n    }\n    ////////////////////////////////////////////////////////\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3744, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 172, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(JFrame)", "jFrame.swing.JFrame.pack()"], "useStart": [202, 243], "useEnd": [237, 257], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/majorProject/IAnnotate/tree/master/src/iannotate/gui/MainFrame.java", "rawCode": "  private void jMenuItem2ActionPerformed(\n      java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jMenuItem2ActionPerformed\n    // TODO add your handling code here:\n    Arrange.setVisible(true);\n    Arrange.setLocationRelativeTo(null);\n    Arrange.pack();\n  } // GEN-LAST:event_jMenuItem2ActionPerformed\n"}, {"dataset": "setVisible", "exampleID": 3745, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 144, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Int-Elegance/M.U.L.E.-2340/tree/master/MainProject/src/TownView.java", "rawCode": "  /**\n   * Displays the store view for the game\n   *\n   * @return true if the store can be displayed\n   */\n  private boolean storeview() {\n\n    frame.setVisible(false);\n\n    storeframe = new GameFrame(currentTurn.getRound().getGame());\n\n    ImageIcon storeIcon = new ImageIcon(getClass().getResource(\"resources/storeview.jpg\"));\n    JLabel storeImage = new JLabel(storeIcon);\n    int storeWidth = storeIcon.getIconWidth();\n    int storeHeight = storeIcon.getIconHeight();\n\n    JLayeredPane layeredPane = new JLayeredPane();\n    layeredPane.setOpaque(false);\n    layeredPane.setPreferredSize(new Dimension(storeWidth, storeHeight));\n\n    // sets bounds on images so they can be drawn\n    storeImage.setBounds(0, 0, storeWidth, storeHeight);\n    tempPlayerX = 260;\n    tempPlayerY = 40;\n    playerImage.setBounds(playerX, playerY, playerX + playerWidth, playerY + playerHeight);\n\n    // adds images to the layeredPane\n    layeredPane.add(storeImage, JLayeredPane.DEFAULT_LAYER);\n    layeredPane.add(playerImage, JLayeredPane.POPUP_LAYER);\n\n    // creates a new JPanel, and adds the layered pane to it\n    JPanel storepanel = new JPanel();\n    storepanel.add(layeredPane);\n\n    JPanel storeWrapperPanel = new JPanel(new BorderLayout());\n    storeWrapperPanel.setPreferredSize(new Dimension(townWidth, townHeight + 30));\n    storeWrapperPanel.add(storepanel, BorderLayout.SOUTH);\n    storeWrapperPanel.add(townNotifyPanel, BorderLayout.NORTH);\n    storeframe.add(storeWrapperPanel);\n\n    storeframe.pack();\n    storeframe.setLocationRelativeTo(null);\n    storeframe.setVisible(true);\n\n    storeAnimate();\n\n    return true;\n  }\n"}, {"dataset": "setVisible", "exampleID": 3746, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(ViewRSSI3D)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [154, 174, 233], "configurationEnd": [168, 227, 246], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 252, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggaavv/Equinox-Clock/tree/master/contiki-2.5/examples/z1/rssi_scanner/ViewRSSI3D.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    ViewRSSI3D mc = new ViewRSSI3D();\n    JFrame window = new JFrame(\"3D RSSI Viewer\");\n    window.add(mc);\n    window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    window.pack();\n    window.setVisible(true);\n    mc.handleInput();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3747, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 26, "focalAPIEnd": 48, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/G53/eXceedVote/tree/master/src/g53/exceedvote/ui/VoteUI.java", "rawCode": "  public void run() {\n    frame.setVisible(true);\n    isClose = false;\n  }\n"}, {"dataset": "setVisible", "exampleID": 3748, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.getContentPane()"], "configurationStart": [130, 167], "configurationEnd": [161, 187], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 221, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)"], "useStart": [247], "useEnd": [297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/retornaz/contiki-cc253x/tree/master/examples/sky/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 300, 300);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    panel.handleInput();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3749, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 202, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tkt-dwi/DealWithCalendar/tree/master/src/dealwithcalendar/GUI.java", "rawCode": "  public void addEventToCalendar() {\n    if (esTime.getSelectedIndex() >= eeTime.getSelectedIndex()) return;\n    if (eName.getText().equals(\"nimi\")) return;\n    else addE.setName(eName.getText());\n\n    eventWindow.setVisible(false);\n\n    int y = Calendar.getInstance().get(Calendar.YEAR) + eYear.getSelectedIndex();\n    int mo = eMonth.getSelectedIndex();\n    int d = eDay.getSelectedIndex() + 1;\n    int sh = esTime.getSelectedIndex();\n    int eh = eeTime.getSelectedIndex();\n\n    Calendar st = Calendar.getInstance();\n    Calendar et = Calendar.getInstance();\n\n    st.set(y, mo, d, sh, 0, 0);\n    et.set(y, mo, d, eh, 0, 0);\n\n    addE.setStarttime(st);\n    addE.setEndtime(et);\n\n    if (ePlace.getText().equals(\"paikka\")) addE.setLocation(\"\");\n    else addE.setLocation(ePlace.getText());\n\n    if (eOM.getText().equals(\"lisämerkinnät\")) addE.setOwnMarkings(\"\");\n    else addE.setOwnMarkings(eOM.getText());\n\n    m.removeEvent(addE);\n    addE.setType(4);\n    m.addEvent(addE);\n\n    try {\n      m.writeData();\n    } catch (IOException e) {\n    }\n\n    createWeekView(curYear, curWeek);\n    repaint();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3750, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [135], "initializationEnd": [147], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setTitle(String)", "jFrame.setBounds(int,int,int,int)", "jFrame.setLayout(BorderLayout)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)"], "configurationStart": [153, 207, 244, 281, 501, 564], "configurationEnd": [201, 238, 275, 312, 558, 626], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 633, "focalAPIEnd": 651, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/olivergeith/java_batteryiconcreator/tree/master/src/de/og/batterycreator/gui/panels/iconset/IconSet.java", "rawCode": "  /**\n   * For testing purposes !!!\n   *\n   * @param args\n   */\n  public static void main(final String[] args) {\n\n    final JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setTitle(\"Hallo Emmy!!!!!!!\");\n    f.setBounds(200, 200, 640, 600);\n    f.setLayout(new BorderLayout());\n    // final IconSet set = new IconSet(new\n    // File(\"./custom/weather/(AOKP) RR Weather HTC Home Weather\"));\n    final IconSet set = new IconSet(new File(\"./custom/lockhandles\"));\n    f.add(new JLabel(set.getOverview()), BorderLayout.CENTER);\n    f.add(new JLabel(set.getOverviewStripe()), BorderLayout.NORTH);\n\n    f.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3751, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [308], "initializationEnd": [334], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(MainGame)", "jFrame.pack()", "jFrame.setDefaultCloseOperation(int)", "jFrame.setResizable(boolean)", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [340, 361, 379, 437, 468], "configurationEnd": [355, 373, 431, 462, 501], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 507, "focalAPIEnd": 529, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TrabalhoDeOO/Grupo09/tree/master/trabalhoOO/src/game/MainGame.java", "rawCode": "  public void main(String args[]) {\n    MainGame game = new MainGame();\n\n    game.setPreferredSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n    game.setMaximumSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n    game.setMinimumSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n\n    JFrame frame = new JFrame(MainGame.TITLE);\n    frame.add(game);\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setResizable(false);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n\n    game.start();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3752, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [407], "initializationEnd": [429], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setResizable(boolean)", "jFrame.setPreferredSize(Dimension)", "jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [437, 470, 613, 652, 712, 732], "configurationEnd": [462, 516, 635, 704, 724, 765], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 773, "focalAPIEnd": 795, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [2366], "useEnd": [2389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgueret/LinkedData-QA/tree/master/src/main/java/nl/vu/qa_for_lod/MetricsExecutor.java", "rawCode": "  /**\n   * @param withGUI\n   * @param direction\n   * @throws Exception\n   */\n  public void processQueue(boolean withGUI, Direction direction) throws Exception {\n    logger.info(\"Start processing \" + resourceQueue.size() + \" resources\");\n\n    // Create an executor service\n    ExecutorService executorService = Executors.newFixedThreadPool(6);\n\n    // Init the GUI if needed\n    if (withGUI) {\n      frame = new JFrame(\"Progress\");\n      frame.setResizable(false);\n      frame.setPreferredSize(new Dimension(500, 32));\n      bar = new JProgressBar(0, resourceQueue.size());\n      bar.setStringPainted(true);\n      frame.getContentPane().add(bar);\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.pack();\n      frame.setLocationRelativeTo(null);\n      frame.setVisible(true);\n    }\n\n    // Do the processing\n    List<Future<?>> futures = new ArrayList<Future<?>>();\n    for (Resource resource : resourceQueue) {\n      MetricsTask task = new MetricsTask(this, resource, dataFetcher, extraTriples, direction);\n      Future<?> future = executorService.submit(task);\n      futures.add(future);\n    }\n\n    // Wait for all the tasks to be completed\n    for (Future<?> future : futures) {\n      try {\n        future.get();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      } catch (ExecutionException e) {\n        e.printStackTrace();\n      }\n    }\n\n    // Remove all metrics that returned no result\n    Set<Metric> notApplicable = new HashSet<Metric>();\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      if (data.getDistribution(MetricState.BEFORE).equals(data.getDistribution(MetricState.AFTER)))\n        notApplicable.add(metric);\n    }\n    for (Metric metric : notApplicable) metricsData.remove(metric);\n\n    // Do the post processing\n    logger.info(\"Start post-processing\");\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      for (MetricState state : MetricState.values()) {\n        // Ask the metric the distance to the ideal value\n        Distribution observedDistribution = data.getDistribution(state);\n        double dist = metric.getDistanceToIdeal(observedDistribution);\n        data.setDistanceToIdeal(state, dist);\n      }\n    }\n\n    logger.info(\"Done!\");\n\n    // Hide the progress bar\n    if (withGUI) {\n      frame.setVisible(false);\n    }\n\n    // Shutdown the executor\n    executorService.shutdown();\n    try {\n      if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {\n        executorService.shutdownNow();\n        if (!executorService.awaitTermination(60, TimeUnit.SECONDS))\n          System.err.println(\"Pool did not terminate\");\n      }\n    } catch (InterruptedException ie) {\n      executorService.shutdownNow();\n      Thread.currentThread().interrupt();\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3753, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.remove(JPanel)", "jFrame.add(JPanel)"], "configurationStart": [125, 207], "configurationEnd": [149, 228], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 238, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.remove(JPanel)", "jFrame.add(JPanel)", "jFrame.setVisible(boolean)"], "useStart": [350, 428, 459], "useEnd": [374, 449, 480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nerzhul/FSCom_JavaTut/tree/master/FSComClient/src/windows/forms/form_master.java", "rawCode": "  public void BuildPanel(int i) {\n    switch (i) {\n      case 1:\n        Menubar_Connect();\n        if (pan_contact != null) fram.remove(pan_contact);\n\n        pan_connect = new panel_connect(this);\n        fram.add(pan_connect);\n        fram.setVisible(true);\n        break;\n      case 2:\n        Menubar_contact();\n        if (pan_connect != null) fram.remove(pan_connect);\n\n        pan_contact = new panel_contact();\n        fram.add(pan_contact);\n        fram.setVisible(true);\n        break;\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3754, "initialization": ["JFrame jFrame = new SimpleDemo()"], "initializationStart": [58], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [80], "configurationEnd": [99], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 143, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/humphrej/flexdock/tree/master/src/java/demo/org/flexdock/demos/raw/SimpleDemo.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new SimpleDemo();\n    f.setSize(600, 400);\n    DemoUtility.setCloseOperation(f);\n    f.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3755, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["JFrame.getContentPane()", "getMessage()", "getSQLState()", "getErrorCode()", "showMessageDialog(*,String,String,*)"], "tryExpressionStart": 28, "tryExpressionEnd": 32, "tryBlockStart": 28, "tryBlockEnd": 2204, "catchExpressionStart": 1717, "catchExpressionEnd": 1740, "catchBlockStart": 1717, "catchBlockEnd": 2109, "exceptionHandlingCallStart": [597, 1859, 1940, 2025, 1748], "exceptionHandlingCallEnd": [622, 1873, 1955, 2041, 2102], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 490, "focalAPIEnd": 516, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()"], "useStart": [597, 1068, 1789, 2168], "useEnd": [622, 1093, 1814, 2193], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/setiQuest/SonATA/tree/master/sse-pkg/jseeker/DBConnectionDialog.java", "rawCode": "  public void open() {\n\n    try {\n\n      if (open) close();\n\n      String DBurl =\n          new String(\n              \"jdbc:mysql://\"\n                  + hostnameTF.getText()\n                  + \"/\"\n                  + dbnameTF.getText()\n                  + \"?user=\"\n                  + userTF.getText()\n                  + \"&password=\"\n                  + passwdTF.getText());\n\n      conn = DriverManager.getConnection(DBurl);\n      stmt = conn.createStatement();\n      open = true;\n      dbcFrame.setVisible(false);\n\n      if (dbai == null) {\n\n        JOptionPane.showMessageDialog(\n            dbcFrame.getContentPane(),\n            \"DBConnectionDialog::open()\" + \"null dbai.\",\n            \"DB Error\",\n            JOptionPane.ERROR_MESSAGE);\n        return;\n      }\n\n      // ASSUMES: ordered by timestamp puts latest revision on top\n\n      String dbquery = new String(\"SELECT * \" + \"from seeker_db_version \" + \"order by ts\" + \";\");\n\n      ResultSet rs = executeQuery(dbquery.toString());\n\n      if (!rs.next()) {\n        JOptionPane.showMessageDialog(\n            dbcFrame.getContentPane(), \"DBConnectionDialog::open()\" + \"No version records found.\");\n        return;\n\n      } else {\n\n        String version_str = rs.getString(\"revision\");\n\n        StringTokenizer st1 = new StringTokenizer(version_str);\n        st1.nextToken();\n\n        StringTokenizer st2 = new StringTokenizer(st1.nextToken(), \".\");\n\n        major_version_ = Integer.parseInt(new String(st2.nextToken()));\n        minor_version_ = Integer.parseInt(new String(st2.nextToken()));\n      }\n\n      rs.close();\n\n      dbai.initRecord();\n      dbai.getHost().setText(hostnameTF.getText());\n      dbai.getDBName().setText(dbnameTF.getText());\n\n    } catch (SQLException e) {\n      JOptionPane.showMessageDialog(\n          dbcFrame.getContentPane(),\n          \"SQLException: \"\n              + e.getMessage()\n              + \"\\n\"\n              + \"SQLState: \"\n              + e.getSQLState()\n              + \"\\n\"\n              + \"VendorError: \"\n              + e.getErrorCode(),\n          \"SQL Error\",\n          JOptionPane.ERROR_MESSAGE);\n    } catch (Exception e) {\n      JOptionPane.showMessageDialog(dbcFrame.getContentPane(), e);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3756, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [84], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [108, 174, 240], "configurationEnd": [168, 201, 257], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 263, "focalAPIEnd": 290, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void findButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Find\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdFind(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3757, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 96, "focalAPIEnd": 119, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seece/yotris/tree/master/yotris/src/main/java/com/lofibucket/yotris/ui/gui/action/ShowWindowActionListener.java", "rawCode": "  @Override\n  public void actionPerformed(ActionEvent e) {\n    if (!window.isVisible()) {\n      window.setVisible(true);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3758, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(ListGenericSelector<String>)", "jFrame.pack()", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [720, 1312, 1330], "configurationEnd": [750, 1324, 1382], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1388, "focalAPIEnd": 1410, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rex1fernando/linewars/tree/master/trunk/Line_Wars/src/editor/ListGenericSelector.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    ListGenericSelector<String> selector =\n        new ListGenericSelector<String>(\n            \"Strings\",\n            new GenericListCallback<String>() {\n              @Override\n              public List<String> getSelectionList() {\n                List<String> ret = new ArrayList<String>();\n                ret.add(\"fi\");\n                ret.add(\"fo\");\n                ret.add(\"fumb\");\n                return ret;\n              }\n            },\n            new CustomToString<String>() {\n              @Override\n              public String toString(String obj) {\n                return obj.toUpperCase();\n              }\n            });\n    frame.setContentPane(selector);\n    selector.addListChangeListener(\n        new ListChangeListener<String>() {\n\n          @Override\n          public void objectsRemoved(List<String> removed) {\n            System.out.println(\"removed:\" + removed.toString());\n          }\n\n          @Override\n          public void objectAdded(String added) {\n            System.out.println(\"added:\" + added);\n          }\n\n          @Override\n          public void HighlightChange(List<String> highlighted) {\n            System.out.println(\"highlighted:\" + highlighted.toString());\n          }\n        });\n\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3759, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [423], "initializationEnd": [449], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [472, 2529], "configurationEnd": [498, 2545], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 2551, "focalAPIEnd": 2577, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apekkarinen/OhHa/tree/master/StudyProgress/src/studyprogress/StudyGUI.java", "rawCode": "  /**\n   * Displays the graphical add model Course - screen.\n   *\n   * @param moduleindex Index of the Module to add the Course to.\n   * @param modules The JList containing Module info.\n   * @param courses The JList containing Course info.\n   * @param summary The summary Container.\n   */\n  public void displayAddModelCourse(\n      int moduleindex, JList modules, JList courses, Container summary) {\n    JFrame addcourse = new JFrame(\"Lisää kurssi\");\n    Container base = addcourse.getContentPane();\n    base.setLayout(new BoxLayout(base, BoxLayout.Y_AXIS));\n    JLabel yearinfo = createCenteredLabel(\"vuosi\", 100, 25);\n    JTextField yearinput = createCenteredTextField(100, 25);\n    JLabel gradeinfo = createCenteredLabel(\"arvosana\", 100, 25);\n    JTextField gradeinput = createCenteredTextField(100, 25);\n    Container radiobuttons = createContainer(new FlowLayout());\n    JRadioButton fall = new JRadioButton(\"syksy\");\n    fall.setActionCommand(\"syksy\");\n    JRadioButton spring = new JRadioButton(\"kevät\");\n    spring.setActionCommand(\"kevät\");\n    ButtonGroup semester = new ButtonGroup();\n    semester.add(fall);\n    semester.add(spring);\n    radiobuttons.add(fall);\n    radiobuttons.add(spring);\n\n    JList courselist =\n        createList(\n            manager.moduleCoursesToStringArray(\n                manager.modelNameListContains(user.getModuleName(moduleindex))));\n    JScrollPane coursescroller = new JScrollPane(courselist);\n    coursescroller.setPreferredSize(new Dimension(420, 160));\n    Container buttons = createContainer(new FlowLayout());\n    JButton add = new JButton(\"Lisää kurssi\");\n    JButton back = new JButton(\"Takaisin\");\n    add.addActionListener(\n        new ModelCourseListener(\n            manager,\n            this,\n            user,\n            addcourse,\n            courselist,\n            yearinput,\n            gradeinput,\n            semester,\n            modules,\n            courses,\n            summary,\n            moduleindex));\n    back.addActionListener(\n        new ModelCourseListener(\n            manager,\n            this,\n            user,\n            addcourse,\n            courselist,\n            yearinput,\n            gradeinput,\n            semester,\n            modules,\n            courses,\n            summary,\n            moduleindex));\n    buttons.add(add);\n    buttons.add(back);\n    base.add(coursescroller);\n    base.add(yearinfo);\n    base.add(yearinput);\n    base.add(gradeinfo);\n    base.add(gradeinput);\n    base.add(radiobuttons);\n    base.add(buttons);\n    addcourse.pack();\n    addcourse.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3760, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [74], "initializationEnd": [86], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "error(*)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 834, "catchExpressionStart": 757, "catchExpressionEnd": 777, "catchBlockStart": 757, "catchBlockEnd": 834, "exceptionHandlingCallStart": [785, 812], "exceptionHandlingCallEnd": [804, 827], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [94, 584, 644, 707], "configurationEnd": [146, 606, 666, 719], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 727, "focalAPIEnd": 749, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/globalModelExchange-ui/src/java/org/cagrid/gme/discoverytools/GMEViewer.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      JFrame frame = new JFrame();\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n      ExtensionDescription ext =\n          (ExtensionDescription)\n              Utils.deserializeDocument(\n                  \"extensions\"\n                      + File.separator\n                      + \"gme-discovery\"\n                      + File.separator\n                      + \"extension.xml\",\n                  ExtensionDescription.class);\n      final GMEViewer panel = new GMEViewer(ext.getDiscoveryExtensionDescription());\n      frame.getContentPane().setLayout(new BorderLayout());\n      frame.getContentPane().add(panel, BorderLayout.CENTER);\n\n      frame.pack();\n      frame.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n      logger.error(e);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3761, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [808], "initializationEnd": [834], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [840, 870, 928], "configurationEnd": [863, 922, 940], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 946, "focalAPIEnd": 968, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidrobert/trainings/tree/master/FJ-16/Argentum/src/main/java/br/com/while42/argentum/graphics/ChartTest.java", "rawCode": "  public static void main(String[] args) {\n    TimeSerie serie =\n        buildTimeSerie(\n            1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 4, 3, 2, 1, 2, 2, 4, 5, 6, 7, 8, 9, 10, 11, 10, 6, 3,\n            2, 6, 7, 8, 9);\n\n    Chart g =\n        new Chart()\n            .title(\"Start graph\")\n            .start(3)\n            .end(32)\n            .withTimeSerie(serie)\n            .withIndicator(new SimpleMovingAverage(new LastValueIndicator()))\n            .withIndicator(new WeightedMovingAverage(new LastValueIndicator()))\n            .withIndicator(new LastValueIndicator())\n            .withIndicator(new SimpleMovingAverage(new FirstValueIndicator()))\n            .withIndicator(new WeightedMovingAverage(new FirstValueIndicator()))\n            .withIndicator(new FirstValueIndicator());\n\n    JFrame frame = new JFrame(\"Minha Janela\");\n    frame.add(g.getPanel());\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3762, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [285], "initializationEnd": [297], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [303], "configurationEnd": [326], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 332, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setResizable(boolean)", "jFrame.setLocation(int,int)", "jFrame.setTitle(String)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [360, 391, 450, 506], "useEnd": [385, 444, 500, 558], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thiagocrowley/Java/tree/master/src/br/com/estudo/corejava/Frame.java", "rawCode": "  public static void main(String[] args) {\n\n    Toolkit kit = Toolkit.getDefaultToolkit();\n    Dimension screenSize = kit.getScreenSize();\n    int screenWidth = screenSize.width;\n    int screeHeight = screenSize.height;\n\n    Image img = kit.getImage(\"images.jpg\");\n\n    JFrame frame = new JFrame();\n    frame.setSize(500, 200);\n    frame.setVisible(true);\n    frame.setResizable(false);\n    frame.setLocation((screeHeight / 2), screenWidth / 6);\n    frame.setTitle(\"Testando Interface Gráfica - TIG\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    System.out.println(screeHeight + \" \" + screenWidth);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3763, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 55, "focalAPIEnd": 84, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.dispose()"], "useStart": [90], "useEnd": [112], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Predelnik/ChibiPaintMod/tree/master/src/chibipaint/gui/CPCanvas.java", "rawCode": "  public void HideLoadingTabletListenerMessage() {\n    waitingFrame.setVisible(true);\n    waitingFrame.dispose();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3764, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(ViewRSSI3D)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [154, 174, 233], "configurationEnd": [168, 227, 246], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 252, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/okoye/Puppet-OS/tree/master/contiki/examples/z1/rssi_scanner/ViewRSSI3D.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    ViewRSSI3D mc = new ViewRSSI3D();\n    JFrame window = new JFrame(\"3D RSSI Viewer\");\n    window.add(mc);\n    window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    window.pack();\n    window.setVisible(true);\n    mc.handleInput();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3765, "initialization": ["JFrame jFrame = new JInternalFrame(*)"], "initializationStart": [241], "initializationEnd": [284], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setClosable(boolean)", "jFrame.setIconifiable(boolean)", "jFrame.setMaximizable(boolean)", "jFrame.setResizable(boolean)", "jFrame.setContentPane(JPanel)", "jFrame.pack()"], "configurationStart": [292, 323, 357, 391, 423, 477], "configurationEnd": [315, 349, 383, 415, 469, 489], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 523, "focalAPIEnd": 545, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scs/uclinux/tree/master/lib/classpath/examples/gnu/classpath/examples/swing/Demo.java", "rawCode": "    /**\n     * Brings up the new window showing the component stored in the constructor.\n     *\n     * @param e the action event that triggered the action\n     */\n    public void actionPerformed(ActionEvent e) {\n      JInternalFrame frame = new JInternalFrame((String) getValue(NAME));\n      frame.setClosable(true);\n      frame.setIconifiable(true);\n      frame.setMaximizable(true);\n      frame.setResizable(true);\n      frame.setContentPane(demoFactory.createDemo());\n      frame.pack();\n      desktop.add(frame);\n      frame.setVisible(true);\n    }\n"}, {"dataset": "setVisible", "exampleID": 3766, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [39], "initializationEnd": [51], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [57, 82], "configurationEnd": [76, 130], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 136, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.add(JPanel)"], "useStart": [234], "useEnd": [242], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PanosPapazoglou/My_Java_Inventory/tree/master/JavaBasicsExamples/src/org/creativitytuts/JavaProgrammingTutorials/MyComboBox.java", "rawCode": "  public void frame() {\n    JFrame f = new JFrame();\n    f.setSize(400, 400);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.setVisible(true);\n\n    JPanel p = new JPanel();\n\n    p.add(c);\n    p.add(b);\n    p.add(l);\n\n    f.add(p);\n\n    // Edo kanoume register to component ston listener pou ftaixnoume sto ftero..\n    b.addActionListener(\n        new ActionListener() {\n\n          public void actionPerformed(ActionEvent ev) {\n            String s = c.getSelectedItem().toString();\n            l.setText(s);\n          }\n        });\n  }\n"}, {"dataset": "setVisible", "exampleID": 3767, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [1365], "initializationEnd": [1377], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setTitle(String)", "jFrame.getRootPane()", "jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [1383, 4050, 4421, 4450], "configurationEnd": [1407, 4069, 4444, 4483], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 4489, "focalAPIEnd": 4511, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape-impl/tree/master/filter2-impl/src/test/java/org/cytoscape/filter/internal/UiScaffold.java", "rawCode": "  void start() {\n    MockitoAnnotations.initMocks(this);\n\n    Random random = new Random(0);\n\n    NetworkTestSupport networkTestSupport = new NetworkTestSupport();\n    CyNetwork network = networkTestSupport.getNetwork();\n    CyTable nodeTable = network.getDefaultNodeTable();\n    nodeTable.createColumn(\"Score\", Double.class, false);\n    nodeTable.createColumn(\"IsSpecial\", Boolean.class, false);\n    for (int i = 0; i < TOTAL_NODES; i++) {\n      CyNode node = network.addNode();\n      network.getRow(node).set(\"Score\", random.nextGaussian());\n      network.getRow(node).set(\"IsSpecial\", i % 2 == 0);\n    }\n\n    List<CyNode> nodes = network.getNodeList();\n    for (int i = 0; i < TOTAL_EDGES; i++) {\n      CyNode source = nodes.get(random.nextInt(nodes.size()));\n      CyNode target = nodes.get(random.nextInt(nodes.size()));\n      network.addEdge(source, target, false);\n    }\n\n    when(applicationManager.getCurrentNetworkView()).thenReturn(networkView);\n    when(applicationManager.getCurrentNetwork()).thenReturn(network);\n\n    when(networkView.getModel()).thenReturn(network);\n\n    when(serviceRegistrar.getService(CyApplicationManager.class)).thenReturn(applicationManager);\n    when(serviceRegistrar.getService(TaskManager.class)).thenReturn(taskManager);\n    when(serviceRegistrar.getService(IconManager.class)).thenReturn(iconManager);\n\n    JFrame frame = new JFrame();\n    frame.setTitle(\"Select\");\n\n    Map<String, String> properties = Collections.emptyMap();\n    TransformerManagerImpl transformerManager = new TransformerManagerImpl();\n    transformerManager.registerFilterFactory(new ColumnFilterFactory(), properties);\n    transformerManager.registerFilterFactory(new DegreeFilterFactory(), properties);\n    transformerManager.registerFilterFactory(new TopologyFilterFactory(), properties);\n\n    transformerManager.registerElementTransformerFactory(\n        new InteractionTransformerFactory(), properties);\n\n    ModelMonitor modelMonitor = new ModelMonitor();\n    modelMonitor.handleEvent(new SetCurrentNetworkEvent(applicationManager, network));\n    ValidationManager validationManager = new ValidationManager();\n\n    FilterPanelStyle style = new StandardStyle();\n    TransformerViewManager transformerViewManager = new TransformerViewManager(transformerManager);\n    // transformerViewManager.registerTransformerViewFactory(new ColumnFilterViewFactory(style,\n    // modelMonitor), properties);\n    transformerViewManager.registerTransformerViewFactory(\n        new DegreeFilterViewFactory(style, modelMonitor), properties);\n    transformerViewManager.registerTransformerViewFactory(\n        new TopologyFilterViewFactory(style), properties);\n    transformerViewManager.registerTransformerViewFactory(\n        new InteractionTransformerViewFactory(style), properties);\n\n    LazyWorkQueue queue = new LazyWorkQueue();\n\n    FilterWorker filterWorker = new FilterWorker(queue, serviceRegistrar);\n    FilterIO filterIo = null;\n    FilterPanelController filterPanelController =\n        new FilterPanelController(\n            transformerManager,\n            transformerViewManager,\n            validationManager,\n            filterWorker,\n            modelMonitor,\n            filterIo,\n            style,\n            serviceRegistrar);\n    FilterPanel filterPanel =\n        new FilterPanel(filterPanelController, filterWorker, serviceRegistrar);\n\n    TransformerWorker transformerWorker =\n        new TransformerWorker(queue, transformerManager, serviceRegistrar);\n    TransformerPanelController transformerPanelController =\n        new TransformerPanelController(\n            transformerManager,\n            transformerViewManager,\n            validationManager,\n            filterPanelController,\n            transformerWorker,\n            filterIo,\n            style,\n            serviceRegistrar);\n    TransformerPanel transformerPanel =\n        new TransformerPanel(transformerPanelController, transformerWorker, serviceRegistrar);\n\n    SelectPanel selectPanel = new SelectPanel(filterPanel, transformerPanel);\n\n    JRootPane root = frame.getRootPane();\n    root.setLayout(new GridBagLayout());\n    root.add(\n        selectPanel,\n        new GridBagConstraints(\n            0,\n            0,\n            1,\n            1,\n            1,\n            1,\n            GridBagConstraints.LINE_START,\n            GridBagConstraints.BOTH,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n    frame.setSize(450, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3768, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [144], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(JFrame)", "jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [167, 196, 235, 294], "configurationEnd": [190, 229, 287, 316], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 341, "focalAPIEnd": 363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgothel/jogl-demos/tree/master/src/redbook/src/glredbook10/aim.java", "rawCode": "  public static void main(String[] args) {\n    aim demo = new aim();\n    //\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"aim\");\n    frame.setSize(500, 500);\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.getContentPane().add(demo.drawable);\n    frame.setVisible(true);\n    demo.drawable.requestFocusInWindow();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3769, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1119, "focalAPIEnd": 1144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1401], "useEnd": [1426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pmlt/comp354/tree/master/code/src/vms/gui/AddVSF.java", "rawCode": "  @Override\n  public void actionPerformed(ActionEvent e) {\n    if (e.getSource().equals(but[0])) {\n      JFileChooser c = new JFileChooser();\n      // Demonstrate \"Open\" dialog:\n      int rVal = c.showOpenDialog(AddVSF.this);\n      if (rVal == JFileChooser.APPROVE_OPTION) {\n        inputFile.setText(c.getSelectedFile().getName());\n      }\n      if (rVal == JFileChooser.CANCEL_OPTION) {\n        inputFile.setText(\"\");\n      }\n    } else if (e.getSource().equals(but[1])) {\n      if (inputFile.getText().compareTo(\"\") != 0\n          && host.getText().compareTo(\"\") != 0\n          && port.getText().compareTo(\"\") != 0) {\n        String[] arguments =\n            new String[] {\n              \"--host\",\n              host.getText(),\n              \"--port\",\n              port.getText(),\n              \"--input\",\n              \"assets/\" + inputFile.getText()\n            };\n        try {\n          simulator.Mainfunction.main(arguments);\n        } catch (IOException e1) {\n          System.out.println(\"IOException\");\n        } catch (ParseException e1) {\n          System.out.println(\"ParseException\");\n        }\n        addFile.setVisible(false);\n      } else {\n        JOptionPane.showMessageDialog(\n            null,\n            \"Please enter all required information!\",\n            \"File Error\",\n            JOptionPane.WARNING_MESSAGE);\n      }\n    } else if (e.getSource().equals(but[2])) {\n      addFile.setVisible(false);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3770, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [180], "initializationEnd": [380], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setContentPane(JComponent)", "jFrame.setResizable(boolean)"], "configurationStart": [386, 572, 609, 651], "configurationEnd": [441, 603, 645, 675], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 681, "focalAPIEnd": 703, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wizard32/PRO.M.I.S./tree/master/ngcev_2.0/src/ngce/Plot.java", "rawCode": "  protected static void createAndShowPlot() {\n\n    getPoints();\n    JFrame.setDefaultLookAndFeelDecorated(true);\n\n    /*Create and set up the window.*/\n\n    JFrame frame =\n        new JFrame(\n            \"NGCE \"\n                + BuildGraph.version\n                + \" Athens University of Economics and Business\"\n                + \" --- Software Engineering and Security Group \");\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    /*Create and set up the content pane.*/\n    JComponent newContentPane = new Plot();\n    newContentPane.setOpaque(true);\n    frame.setSize(windowX, windowY);\n    frame.setContentPane(newContentPane);\n    frame.setResizable(true);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3771, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [47], "initializationEnd": [68], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationByPlatform(boolean)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [74, 107, 150], "configurationEnd": [101, 144, 206], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 212, "focalAPIEnd": 238, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nodebox/nodebox/tree/master/src/test/java/nodebox/versioncheck/MockBox.java", "rawCode": "  public void start() {\n    JFrame mainFrame = new JFrame(\"MockBox\");\n    mainFrame.setSize(700, 500);\n    mainFrame.setLocationByPlatform(true);\n    mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    mainFrame.setVisible(true);\n    updater.applicationDidFinishLaunching();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3772, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [277], "initializationEnd": [320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [326, 380, 412], "configurationEnd": [374, 398, 420], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 426, "focalAPIEnd": 444, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninesunqian/excitedmind/tree/master/prefuse-demos/src/main/java/prefuse/demos/FisheyeMenu.java", "rawCode": "  /** Run a demonstration of the FisheyeMenu */\n  public static final void main(String[] argv) {\n    // only log warnings\n    LoggerFactory.getLogger(\"prefuse\").setLevel(Level.WARNING);\n\n    FisheyeMenu fm = demo();\n\n    // create and display application window\n    JFrame f = new JFrame(\"p r e f u s e | f i s h e y e\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().add(fm);\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3773, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [9437], "initializationEnd": [9461], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 9775, "catchExpressionStart": 9721, "catchExpressionEnd": 9741, "catchBlockStart": 9721, "catchBlockEnd": 9775, "exceptionHandlingCallStart": [9749], "exceptionHandlingCallEnd": [9768], "configuration": ["jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [9590, 9623], "configurationEnd": [9608, 9631], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 9639, "focalAPIEnd": 9657, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)"], "useStart": [9665], "useEnd": [9713], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.3.9/src/om/graph/Test.java", "rawCode": "  /**\n   * Main method for testing the graph routines.\n   *\n   * @param args Not used.\n   */\n  public static void main(String[] args) {\n    try {\n      String sCFTest =\n          \"<world id='w1' px='0' py='0' pw='200' ph='200' xleft='0.0' xright='1.0' ybottom='0.0' ytop='1.0'><colourField id='cf'/></world>\";\n\n      String sRoundingTest =\n          \" <world id=\\\"w1\\\" px=\\\"140\\\" py=\\\"58\\\" pw=\\\"290\\\" ph=\\\"255\\\" \\r\\n\"\n              + \" xleft=\\\"0.0\\\" xright=\\\"140.0\\\" ybottom=\\\"0.0\\\" ytop=\\\"2.2\\\">\\r\\n\"\n              + \" <xAxis ticks=\\\"20,10\\\" tickSide=\\\"-\\\" numbers=\\\"20\\\" omitNumbers=\\\"0\\\" label=\\\"temperature / �C\\\" />\\r\\n\"\n              + \" <yAxis maxY=\\\"2.0\\\" ticks=\\\"1,0.1\\\" tickSide=\\\"-\\\" numbers=\\\"0.5\\\" />\\r\\n\"\n              + \" <text x=\\\"15\\\" y=\\\"2.1\\\" text=\\\"pressure / 10���Pa\\\" />\\r\\n\"\n              + \" <text x=\\\"31\\\" y=\\\"2.14\\\" text=\\\"5\\\" />\\r\\n\"\n              + \" <grid maxY=\\\"2.01\\\" xspacing=\\\"10\\\" yspacing=\\\"0.1\\\" />\\r\\n\"\n              + \" <line x='0' y='1.4' x2='100' y2='1.4' lineColour='#f00,graph1'/>\"\n              + \" </world>\";\n      /*\n      String sAxisTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-4.0'>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='-0.5' numbers='0.5' tickSide='-' rotateLabel='no' label='Frogs' numbersFont='10px' labelMargin='-4'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles' labelMargin='8'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='0.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-1.5' numbers='0.5' tickSide='-' label='Frogs'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-2.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-3.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <grid xSpacing='0.2,0.1' ySpacing='0.2' maxY='-3' minY='-3.5'/>\"+\n      \"</world>\";\n\n      String sShapeTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='0' xright='1.0' ytop='1.0' ybottom='0'>\"+\n      \"<rectangle x='0.1' y='0.1' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.2' y='0.2' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.3' y='0.1' x2='0.4' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.4' y='0.2' width='0.1' height='0.1' lineColour='#800'/>\"+\n      \"<rectangle x='0.5' y='0.1' width='0.1' height='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<rectangle x='0.7' y='0.1' x2='0.8' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.7:4' y='0.1:4' x2='0.8:4' y2='0.2:4' lineColour='#800'/>\"+\n\n      \"<ellipse x='0.1' y='0.5' width='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.2' y='0.6' height='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.3' y='0.5' width='0.07' height='0.3' lineColour='#800'/>\"+\n      \"<ellipse x='0.4' y='0.6' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.5' y='0.5' width='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<ellipse x='0.7' y='0.5' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.7:4' y='0.5:4' width='0.1' lineColour='#800'/>\"+\n\n      \"<line x='0.3' y='0.5' x2='0.35' y2='0.15'/>\"+\n      \"<line x='0.5' y='0.5' x2='0.55' y2='0.15' lineWidth='4' lineColour='#800'/>\"+\n      \"</world>\";\n\n      String sTextTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"+\n      \"<text x='0' y='0.9' align='left' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.8' align='centre' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.7' align='right' text='Hello Graph!'/>\"+\n      \"<text x='0.9' y='0' align='left' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.8' y='0' align='centre' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.7' y='0' align='right' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='-0.9' y='0' align='left' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.8' y='0' align='centre' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.7' y='0' align='right' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.9' align='left' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.8' align='centre' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.7' align='right' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0' angle='255' colour='#efe' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='270' colour='#cfc' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='285' colour='#afa' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='300' colour='#8f8' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='315' colour='#6f6' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='330' colour='#4f4' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='345' colour='#2f2' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='0' colour='#000' text='Hello Graph!' font='bold 30px'/>\"+\n      \"</world>\";\n      */\n\n      String sXML =\n          \"<world id='w1' px='90' py='10' pw='200' ph='200' \"\n              + \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"\n              + \" <rectangle x='0' y='0.4' width='1' height='0.2'/>\"\n              + \" <rectangle x='0' y='0' width='0.5' height='0.4' fillColour='#fee'/>\"\n              + \" <rectangle x='0.5' y='0.3' width='0.5' height='0.2' lineColour='#f0f' fillColour='#fff' linewidth='4'/>\"\n              + \" <xAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='both'/>\"\n              + \" <yAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='-'/>\"\n              + \" <function minX='0' colour='#080' lineWidth='2.0' id='thingy'/>\"\n              + \" <parametricFunction minT='0' maxT='6.3' colour='#008' steps='300' lineWidth='1.0' id='thingy2'/>\"\n              + \" <colourField minX='-1' maxX='-0.5' minY='-1' maxY='-0.5' blockSize='1' id='thingy3'/>\"\n              + \"\"\n              + \"\"\n              + \"\"\n              + \"</world>\";\n      String sThisTest = sRoundingTest;\n      Document d = XML.parse(sThisTest);\n      World w =\n          new World(\n              new World.Context() {\n                public Color getColour(String sConstant) {\n                  if (sConstant.equals(\"fg\")) return Color.black;\n                  return null;\n                }\n\n                public boolean useAlternates() {\n                  return false;\n                }\n\n                public String getFontFamily() {\n                  return \"Verdana\";\n                }\n\n                public int getFontSize() {\n                  return 13;\n                }\n              },\n              d.getDocumentElement());\n\n      if (sThisTest == sCFTest) {\n        ColourFieldItem cfi = (ColourFieldItem) w.getItem(\"cf\");\n        cfi.setFunction(\n            new ColourFieldItem.Function() {\n              public Color f(double x, double y) {\n                if (x > 1.0 || y > 1.0 || x < 0.0 || y < 0.0) {\n                  System.err.println(\"Got: \" + x + \",\" + y);\n                  return Color.black;\n                }\n\n                return new Color((float) x, (float) y, 0.5f);\n              }\n            });\n      }\n\n      if (sThisTest == sXML) {\n        ((FunctionItem) w.getItem(\"thingy\"))\n            .setFunction(\n                new FunctionItem.Function() {\n                  public double f(double x) {\n                    return Math.sin(x * 2 * Math.PI);\n                  }\n                });\n\n        ((ParametricFunctionItem) w.getItem(\"thingy2\"))\n            .setFunction(\n                new ParametricFunctionItem.Function() {\n                  public GraphPoint f(double t) {\n                    return new GraphPoint((Math.cos(3.0 * t)), Math.sin(5.0 * t));\n                  }\n                });\n\n        ((ColourFieldItem) w.getItem(\"thingy3\"))\n            .setFunction(\n                new ColourFieldItem.Function() {\n                  public Color f(double x, double y) {\n                    float f1 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.8), 2) + Math.pow(y - (-0.8), 2)));\n                    float f2 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.6), 2) + Math.pow(y - (-0.5), 2)));\n                    return new Color(Math.min(f1, 1.0f), Math.min(f2, 1.0f), 0.0f);\n                  }\n                });\n      }\n\n      int iW = 600, iH = 600, iGraphX = 50, iGraphY = 10, iGraphW = 500, iGraphH = 500;\n      BufferedImage bi = new BufferedImage(iW, iH, BufferedImage.TYPE_INT_RGB);\n      Graphics2D g2 = bi.createGraphics();\n      boolean bAntiAlias = true;\n      g2.setRenderingHint(\n          RenderingHints.KEY_ANTIALIASING,\n          bAntiAlias ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);\n      g2.setRenderingHint(\n          RenderingHints.KEY_TEXT_ANTIALIASING,\n          bAntiAlias\n              ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON\n              : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n      g2.setColor(Color.yellow);\n      g2.fillRect(0, 0, iW, iH);\n      g2.setColor(Color.white);\n      g2.fillRect(iGraphX, iGraphY, iGraphW, iGraphH);\n\n      w.paint(g2);\n\n      JFrame f = new JFrame(\"Graph test\");\n      JLabel l = new JLabel(new ImageIcon(bi));\n      l.setBorder(BorderFactory.createEmptyBorder(100, 100, 100, 100));\n\n      f.getContentPane().add(l);\n      f.pack();\n      f.setVisible(true);\n      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    } catch (Throwable t) {\n      t.printStackTrace();\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3774, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [85], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [110, 176, 243], "configurationEnd": [170, 203, 260], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 266, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void buildButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Build\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdBuild(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3775, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [708], "initializationEnd": [756], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 675, "tryExpressionEnd": 679, "tryBlockStart": 675, "tryBlockEnd": 997, "catchExpressionStart": 937, "catchExpressionEnd": 963, "catchBlockStart": 937, "catchBlockEnd": 997, "exceptionHandlingCallStart": [971], "exceptionHandlingCallEnd": [990], "configuration": ["jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [825, 887], "configurationEnd": [847, 899], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 907, "focalAPIEnd": 929, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jkiddo/jolivia/tree/master/jolivia.example/src/test/java/test/Noop.java", "rawCode": "  public void hiresResponse() throws Exception {\n    final String requestBase = String.format(\"http://%s:%d\", \"192.168.1.26\", 5000);\n    final String url =\n        String.format(\n            \"%s/databases/1/items?session-id=1101478641&meta=dpap.hires,dmap.itemid,dpap.filedata&query=('dmap.itemid:1024','dmap.itemid:1025')\",\n            requestBase);\n    final DatabaseItems di = RequestHelper.requestParsed(url);\n    final ListingItem item = di.getListing().getListingItems().iterator().next();\n    final byte[] data = item.getSpecificChunk(FileData.class).getValue();\n\n    final BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n\n    // Debugging ...\n    try {\n      final JFrame frame = new JFrame(\"Image loaded from ImageInputStream\");\n      final JLabel label = new JLabel(new ImageIcon(image));\n      frame.getContentPane().add(label, BorderLayout.CENTER);\n      frame.pack();\n      frame.setVisible(true);\n    } catch (final Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3776, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 211, "focalAPIEnd": 234, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.dispose()"], "useStart": [273], "useEnd": [288], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UCSB-CS56-Projects/cs56-discretemath-towers-sierpinski/tree/master/src/edu/ucsb/cs56/projects/discretemath/towers_sierpinski/ColorPickerGUI/ColorPickRunner.java", "rawCode": "    public void actionPerformed(ActionEvent event) {\n      open = false;\n      // return arraylist value to target...?, should be obj that instantiates this obj to make call\n      // to private arraylist.\n      frame.setVisible(false);\n      WriteToPropertiesFile();\n      frame.dispose();\n      // returnColorList();\n    }\n"}, {"dataset": "setVisible", "exampleID": 3777, "initialization": ["JFrame jFrame = new DialogueShop(String)"], "initializationStart": [58], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(JFrame)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [97, 133, 179], "configurationEnd": [127, 173, 238], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 244, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setFocusable(boolean)", "jFrame.setLayout(BorderLayout)", "jFrame.setLayout(BorderLayout)", "jFrame.add(JPanel)"], "useStart": [279, 316, 364, 398], "useEnd": [310, 358, 392, 445], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra13-orga/gruppe95/tree/master/src/newgame/Board.java", "rawCode": "  public void DialogueShop() {\n\n    JFrame DialogueShop = new DialogueShop(\"Ladenbesitzer\");\n    DialogueShop.setSize(600, 300);\n    DialogueShop.setLocationRelativeTo(null);\n    DialogueShop.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n    DialogueShop.setVisible(true);\n    DialogueShop.setFocusable(true);\n    DialogueShop.setLayout(new BorderLayout());\n    DialogueShop.setLayout(null);\n    DialogueShop.add(new Dialogue(\"Ladenbesitzer\"));\n  }\n"}, {"dataset": "setVisible", "exampleID": 3778, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [40], "initializationEnd": [63], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)"], "configurationStart": [299, 382], "configurationEnd": [321, 405], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 411, "focalAPIEnd": 433, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/0xfe/experiments/tree/master/java/EasyChatClient.java", "rawCode": "  public void go() {\n    JFrame frame = new JFrame(\"Easy Chat\");\n    JPanel panel = new JPanel();\n\n    outgoing = new JTextField(20);\n\n    JButton sendButton = new JButton(\"Send\");\n    sendButton.addActionListener(new SendButtonListener());\n\n    panel.add(outgoing);\n    panel.add(sendButton);\n\n    frame.getContentPane().add(BorderLayout.CENTER, panel);\n    setupNetworking();\n    frame.setSize(400, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3779, "initialization": ["JFrame jFrame = wrapWithScrollingInFrame(JXTable,String)"], "initializationStart": [231], "initializationEnd": [290], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 296, "focalAPIEnd": 318, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/swingx/tree/master/swingx-core/src/test/java/org/jdesktop/swingx/JXTableVisualCheck.java", "rawCode": "  public void interactiveTestTableViewProperties() {\n    JXTable table = new JXTable(tableModel);\n    installLinkRenderer(table);\n    table.setIntercellSpacing(new Dimension(15, 15));\n    table.setRowHeight(48);\n    JFrame frame = wrapWithScrollingInFrame(table, \"TableViewProperties Test\");\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3780, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.pack()"], "configurationStart": [28], "configurationEnd": [40], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 82, "focalAPIEnd": 104, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/Javascool4/tree/master/dev/jvs4.5/trunk/dev/lib/jvs2html/src/de/java2html/Java2HtmlApplication.java", "rawCode": "  private void show() {\n    frame.pack();\n    GuiTools.centerOnScreen(frame);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3781, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [199], "initializationEnd": [221], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 227, "focalAPIEnd": 253, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(JFrame)", "jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)", "jFrame.getContentPane()", "jFrame.getPreferredSize()", "jFrame.setSize(Dimension)", "jFrame.getPreferredSize()", "jFrame.getPreferredSize()", "centerWindow(int,int,jFrame)"], "useStart": [297, 340, 462, 493, 2062, 2044, 2110, 2163, 2203], "useEnd": [334, 399, 486, 519, 2090, 2091, 2138, 2191, 2241], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra12-orga/gruppe27/tree/master/src/de/hhu/propra12/gruppe27/bomberman/gui/menue/LosetheGame.java", "rawCode": "  /**\n   * Einblendung von \"Verloren\", \"Noch einmal\" und \"Zurueck zum Startmenue\" Jeweilige Buttons werden\n   * benannt und erstellt\n   */\n  public void losethegame() {\n\n    final JFrame framelose = new JFrame(\"Verloren\");\n    framelose.setVisible(true);\n    // framelose.setResizable(false);\n    framelose.setLocationRelativeTo(null);\n    framelose.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\n    JPanel panellose = new JPanel(new GridBagLayout());\n    framelose.add(panellose);\n\n    framelose.getContentPane().add(panellose, BorderLayout.SOUTH);\n    GridBagConstraints c = new GridBagConstraints();\n\n    c.gridx = 0;\n    c.gridy = 0;\n\n    JButton buttonL0 = new JButton(loseicon);\n    c.gridx = 0;\n    c.gridy = 1;\n    // c.gridwidth = 2;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    c.weightx = 2.0;\n    panellose.add(buttonL0, c);\n\n    JButton buttonL1 = new JButton(\"Noch einmal!\");\n    c.gridx = 0;\n    c.gridy = 2;\n    // c.gridwidth = 2;\n    if (system.getboolLAN() == false) {\n      panellose.add(buttonL1, c);\n    }\n\n    /**\n     * Ausgabe des Highscores, Schritte die man bis zum Spielende machen konnte Anzahl der Schritte\n     * die der Gegner bis zu deinem Tod gemacht hat\n     */\n    JButton buttonL2 = new JButton(\"Zurück zum Startmenue\");\n    c.gridx = 0;\n    c.gridy = 3;\n    // c.gridwidth = 2;\n    panellose.add(buttonL2, c);\n\n    if (system.getamplayer() == 1) {\n      JButton buttonScore =\n          new JButton(\n              \"Bis zu deinem Freitod hast du dich \" + system.getHighscoreP1() + \" Schritte bewegt\");\n      c.gridx = 0;\n      c.gridy = 4;\n      // c.gridwidth = 2;\n      panellose.add(buttonScore, c);\n    } else if (system.getboolLAN()) {\n      JButton buttonScore =\n          new JButton(\n              \"Dein Gegner hat dich innerhalb von \"\n                  + system.getHighscoreP2()\n                  + \" Schritte vernichtet\");\n      c.gridx = 0;\n      c.gridy = 4;\n      // c.gridwidth = 2;\n      panellose.add(buttonScore, c);\n    }\n\n    /** ActionListener fuer Button1 wird definiert */\n    framelose.setSize(framelose.getPreferredSize());\n    int height = framelose.getPreferredSize().height;\n    int width = framelose.getPreferredSize().width;\n    centerWindow(width, height, framelose);\n\n    buttonL1.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            GameWindow s = new GameWindow(0);\n            framelose.dispose();\n          }\n        });\n\n    /** Action Listener fuer Button 2 wird definiert */\n    buttonL2.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            Startmenue start = new Startmenue();\n            start.menueaufruf();\n\n            framelose.dispose();\n          }\n        });\n  }\n"}, {"dataset": "setVisible", "exampleID": 3782, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [86], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.pack()"], "configurationStart": [112, 178, 246], "configurationEnd": [172, 205, 263], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 269, "focalAPIEnd": 296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void assertButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Assert\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdAssert(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3783, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [251], "initializationEnd": [263], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 162, "tryExpressionEnd": 166, "tryBlockStart": 162, "tryBlockEnd": 512, "catchExpressionStart": 458, "catchExpressionEnd": 478, "catchBlockStart": 458, "catchBlockEnd": 512, "exceptionHandlingCallStart": [486], "exceptionHandlingCallEnd": [505], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [271, 341, 406], "configurationEnd": [294, 398, 419], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 427, "focalAPIEnd": 450, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openrocket/openrocket/tree/master/swing/src/net/sf/openrocket/utils/ComponentPresetEditor.java", "rawCode": "  /** Launch the test main. */\n  public static void main(String[] args) {\n    BasicApplication app = new BasicApplication();\n    app.initializeApplication();\n    try {\n      // Application.setPreferences(new SwingPreferences());\n      JFrame dialog = new JFrame();\n      dialog.getContentPane().add(new ComponentPresetEditor(dialog));\n      dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n      dialog.pack();\n      dialog.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3784, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(GenericSelector<String>)", "jFrame.pack()", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [712, 1016, 1034], "configurationEnd": [742, 1028, 1086], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1092, "focalAPIEnd": 1114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rex1fernando/linewars/tree/master/trunk/Line_Wars/src/editor/GenericSelector.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    GenericSelector<String> selector =\n        new GenericSelector<String>(\n            \"Strings\",\n            new GenericListCallback<String>() {\n              @Override\n              public List<String> getSelectionList() {\n                List<String> ret = new ArrayList<String>();\n                ret.add(\"fi\");\n                ret.add(\"fo\");\n                ret.add(\"fumb\");\n                return ret;\n              }\n            },\n            new CustomToString<String>() {\n              @Override\n              public String toString(String obj) {\n                return obj.toUpperCase();\n              }\n            });\n    frame.setContentPane(selector);\n    selector.addSelectionChangeListener(\n        new SelectionChangeListener<String>() {\n          @Override\n          public void selectionChanged(String newSelection) {\n            System.out.println(\"selection changed to:\" + newSelection);\n          }\n        });\n\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3785, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [54], "initializationEnd": [66], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)"], "configurationStart": [72], "configurationEnd": [101], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 107, "focalAPIEnd": 135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setTitle(String)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setContentPane(JPanel)"], "useStart": [141, 180, 244], "useEnd": [174, 238, 288], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaiquan/ReUnite/tree/master/src/View/MM/AdministrateRIPersonalDetails.java", "rawCode": "  private JFrame getUpdateFrame() {\n    updateFrame = new JFrame();\n    updateFrame.setSize(779, 388);\n    updateFrame.setVisible(true);\n    updateFrame.setTitle(\"Update RI\");\n    updateFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    updateFrame.setContentPane(getUpdatePanel());\n\n    return jframe;\n  }\n"}, {"dataset": "setVisible", "exampleID": 3786, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [146], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.hide()", "jFrame.pack()", "jFrame.setResizable(boolean)", "jFrame.setLocation(Point)", "jFrame.validate()", "jFrame.show()", "jFrame.toFront()"], "configurationStart": [73, 3057, 3085, 3126, 3182, 3214, 3242], "configurationEnd": [95, 3079, 3120, 3176, 3208, 3236, 3267], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 3273, "focalAPIEnd": 3305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tkt-dwi/DealWithCalendar/tree/master/src/dealwithcalendar/GUI.java", "rawCode": "  public void createAddCourseWindow() {\n    if (addCourseWindow != null) addCourseWindow.hide();\n\n    addCourseWindow = new JFrame(\"Lisää kurssi\");\n    crsName = new JTextField(\"nimi\");\n    crsSDay = new JComboBox(monthdays);\n    crsSMonth = new JComboBox(months);\n    crsSYear = new JComboBox(years);\n    crsEDay = new JComboBox(monthdays);\n    crsEMonth = new JComboBox(months);\n    crsEYear = new JComboBox(years);\n\n    Course = new JPanel(new GridLayout(4, 1));\n    Course.setFont(THEME_FONT_SMALL);\n    Course.setBackground(THEME_COLOR_BLUE);\n    Course.setForeground(new Color(0, 0, 0));\n\n    JPanel crsRow = new JPanel(new FlowLayout());\n    crsName.setText(\"nimi\");\n    crsName.setPreferredSize(new Dimension(250, 20));\n    crsName.setFont(THEME_FONT_SMALL);\n    crsName.setEditable(true);\n    crsRow.add(crsName);\n    Course.add(crsRow);\n\n    crsRow = new JPanel(new FlowLayout());\n    JTextField cs = new JTextField(\"alkaa\");\n    cs.setPreferredSize(new Dimension(100, 20));\n    cs.setEditable(false);\n    cs.setFont(THEME_FONT_SMALL);\n    cs.setBackground(THEME_COLOR_VDARKBLUE);\n    cs.setForeground(new Color(0, 0, 0));\n    crsRow.add(cs);\n\n    crsSDay.setPreferredSize(new Dimension(50, 20));\n    crsSDay.setFont(THEME_FONT_SMALL);\n    crsSDay.setBackground(THEME_COLOR_VDARKBLUE);\n    crsSDay.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsSDay);\n\n    crsSMonth.setPreferredSize(new Dimension(50, 20));\n    crsSMonth.setFont(THEME_FONT_SMALL);\n    crsSMonth.setBackground(THEME_COLOR_VDARKBLUE);\n    crsSMonth.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsSMonth);\n\n    crsSYear.setPreferredSize(new Dimension(70, 20));\n    crsSYear.setFont(THEME_FONT_SMALL);\n    crsSYear.setBackground(THEME_COLOR_VDARKBLUE);\n    crsSYear.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsSYear);\n    Course.add(crsRow);\n\n    crsRow = new JPanel(new FlowLayout());\n    cs = new JTextField(\"päättyy\");\n    cs.setPreferredSize(new Dimension(100, 20));\n    cs.setEditable(false);\n    cs.setFont(THEME_FONT_SMALL);\n    cs.setBackground(THEME_COLOR_VDARKBLUE);\n    cs.setForeground(new Color(0, 0, 0));\n    crsRow.add(cs);\n\n    crsEDay.setPreferredSize(new Dimension(50, 20));\n    crsEDay.setFont(THEME_FONT_SMALL);\n    crsEDay.setBackground(THEME_COLOR_VDARKBLUE);\n    crsEDay.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsEDay);\n\n    crsEMonth.setPreferredSize(new Dimension(50, 20));\n    crsEMonth.setFont(THEME_FONT_SMALL);\n    crsEMonth.setBackground(THEME_COLOR_VDARKBLUE);\n    crsEMonth.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsEMonth);\n\n    crsEYear.setPreferredSize(new Dimension(70, 20));\n    crsEYear.setFont(THEME_FONT_SMALL);\n    crsEYear.setBackground(THEME_COLOR_VDARKBLUE);\n    crsEYear.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsEYear);\n    Course.add(crsRow);\n\n    addCourse.setPreferredSize(new Dimension(120, 20));\n    addCourse.setFont(THEME_FONT_SMALL);\n    addCourse.setBackground(THEME_COLOR_VDARKBLUE);\n\n    Course.add(addCourse);\n    Course.validate();\n\n    addCourseWindow.add(Course);\n    addCourseWindow.pack();\n    addCourseWindow.setResizable(false);\n    addCourseWindow.setLocation(getLocationOnScreen());\n    addCourseWindow.validate();\n    addCourseWindow.show();\n    addCourseWindow.toFront();\n    addCourseWindow.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3787, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [75], "initializationEnd": [103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(LaunchControl)", "jFrame.setDefaultCloseOperation(int)", "jFrame.pack()"], "configurationStart": [153, 168, 222], "configurationEnd": [162, 216, 230], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 236, "focalAPIEnd": 254, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/psas/launch-control/tree/master/src/launchcontrol/LaunchControl.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    JFrame f = new JFrame(\"Launch Control\");\n    LaunchControl lc = new LaunchControl();\n    f.add(lc);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.pack();\n    f.setVisible(true);\n\n    // poll for status\n    while (true) lc.pollStatus();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3788, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [374], "initializationEnd": [393], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 189, "tryExpressionEnd": 193, "tryBlockStart": 189, "tryBlockEnd": 747, "catchExpressionStart": 682, "catchExpressionEnd": 702, "catchBlockStart": 682, "catchBlockEnd": 747, "exceptionHandlingCallStart": [710], "exceptionHandlingCallEnd": [740], "configuration": ["jFrame.dispose()", "jFrame.setIconImage(Image)", "jFrame.setSize(Dimension)", "jFrame.add(JPanel)"], "configurationStart": [280, 403, 492, 545], "configurationEnd": [300, 482, 535, 588], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 598, "focalAPIEnd": 625, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setAlwaysOnTop(boolean)"], "useStart": [635], "useEnd": [666], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SnakeDoc/Spark/tree/master/src/plugins/sip/src/java/net/java/sipmack/softphone/SoftPhoneMedia.java", "rawCode": "  /**\n   * Fired when player started to receive the video\n   *\n   * @param event MediaEvent\n   */\n  public void playerStarting(MediaEvent event) {\n    javax.media.Player player = null;\n    try {\n      player = (javax.media.Player) event.getSource();\n      if (videoFrame != null) videoFrame.dispose();\n\n      if (player.getVisualComponent() != null) {\n\n        videoFrame = new JFrame(\"Video\");\n        videoFrame.setIconImage(new ImageIcon(Utils.getResource(\"off.gif\")).getImage());\n        videoFrame.setSize(new Dimension(176, 144));\n        videoFrame.add(player.getVisualComponent());\n        videoFrame.setVisible(true);\n        videoFrame.setAlwaysOnTop(true);\n      }\n    } catch (Exception e) {\n      Log.error(\"playerStarting\", e);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3789, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 66, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SoapyIllusions/ECSE_321-Game/tree/master/src/main/java/mcgill/ui/LoginPage.java", "rawCode": "  public void open(Client client) {\n    this.client = client;\n    frmLogin.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3790, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [79], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setBounds(int,int,int,int)", "jFrame.getContentPane()"], "configurationStart": [130, 167], "configurationEnd": [161, 187], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 221, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)"], "useStart": [247], "useEnd": [297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mkovatsc/SmartAppContiki/tree/master/examples/z1/rssi_scanner/ViewRSSI.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    JFrame win = new JFrame(\"RSSI Viewer\");\n    ViewRSSI panel;\n    win.setBounds(10, 10, 590, 590);\n    win.getContentPane().add(panel = new ViewRSSI());\n    win.setVisible(true);\n    win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    panel.handleInput();\n  }\n"}, {"dataset": "setVisible", "exampleID": 3791, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [62], "initializationEnd": [87], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(Dimension)"], "configurationStart": [93, 146], "configurationEnd": [115, 184], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 190, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/and146/SPLAT-ARI/tree/master/jaiutil/src/testcases/uk/ac/starlink/jaiutil/JAIHelloWorld.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Hello World\");\n    frame.getContentPane().add(new JAIHelloWorld());\n    frame.setSize(new Dimension(200, 200));\n    frame.setVisible(true);\n    try {\n      Thread.currentThread().sleep(1000);\n    } catch (InterruptedException ex) {\n      // no action\n    }\n    System.exit(0);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3792, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [631], "initializationEnd": [643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)"], "configurationStart": [664, 814, 872, 901], "configurationEnd": [686, 866, 895, 928], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 934, "focalAPIEnd": 956, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/osate/examples/tree/master/codegen/stepper-motor/usercode-casestudy/WheelInterface.java", "rawCode": "  public static void main(String[] args) {\n    final WheelInterface demo = new WheelInterface();\n    Button btnStrat = new Button(\"Start\"), btnStop = new Button(\"Stop\");\n    btnStrat.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.addIncrement(1);\n            demo.setVisible(true);\n            // demo.start();\n          }\n        });\n    btnStop.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            demo.stop();\n            demo.setVisible(false);\n          }\n        });\n    JFrame frame = new JFrame();\n    Container cp = frame.getContentPane();\n    cp.add(demo, BorderLayout.CENTER);\n    cp.add(btnStrat, BorderLayout.NORTH);\n    cp.add(btnStop, BorderLayout.SOUTH);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setSize(500, 500);\n    frame.setLocation(500, 500);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3793, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [68], "initializationEnd": [80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setBounds(int,int,int,int)"], "configurationStart": [86, 1231], "configurationEnd": [138, 1262], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1268, "focalAPIEnd": 1290, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Benoker/DockingFrames/tree/master/docking-frames-ext-toolbar/testing/bibliothek/gui/dock/toolbar/TestLayouting.java", "rawCode": "  public static void main(String[] args) {\n    final JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    final DockController controller = new DockController();\n    controller.setSingleParentRemover(\n        new SingleParentRemover() {\n          @Override\n          protected boolean test(DockStation station) {\n            return false;\n          }\n        });\n\n    controller.setRootWindow(frame);\n\n    final ScreenDockStation screen = new ScreenDockStation(controller.getRootWindowProvider());\n    controller.add(screen);\n    final ScreenDockProperty initial = new ScreenDockProperty(20, 20, 200, 20);\n\n    final ToolbarItemDockable dockable = new ToolbarItemDockable(new JButton(\"hello\"));\n\n    final ToolbarDockStation group =\n        new ToolbarDockStation() {\n          @Override\n          public boolean accept(DockStation station) {\n            return true;\n          }\n        };\n    group.drop(dockable);\n\n    final ToolbarGroupDockStation toolbar = new ToolbarGroupDockStation();\n    toolbar.drop(group);\n\n    final boolean dropped = screen.drop(toolbar, initial);\n    if (!dropped) {\n      throw new IllegalStateException(\"not dropped\");\n    }\n\n    screen.setShowing(true);\n    frame.setBounds(0, 0, 300, 300);\n    frame.setVisible(true);\n\n    System.out.println(dockable.getComponent().getPreferredSize());\n    System.out.println(group.getComponent().getPreferredSize());\n    System.out.println(toolbar.getComponent().getPreferredSize());\n  }\n"}, {"dataset": "setVisible", "exampleID": 3794, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [209], "initializationEnd": [229], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(JFrame)", "jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [235, 265, 305, 363], "configurationEnd": [259, 299, 328, 416], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 422, "focalAPIEnd": 445, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mirco89/uni/tree/master/simple/src/simple51.java", "rawCode": "  public static void main(String[] args) {\n    Camera.setCenterOfProjection(new Vector3f(5, 5, 15));\n    sceneManager = new GraphSceneManager();\n\n    renderPanel = new SimpleRenderPanel();\n    JFrame jframe = new JFrame(\"simple\");\n    jframe.setSize(500, 500);\n    jframe.setLocationRelativeTo(null);\n    jframe.getContentPane().add(renderPanel.getCanvas());\n    jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jframe.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3795, "initialization": ["JFrame jFrame = new DialogueShop(String)"], "initializationStart": [58], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setSize(int,int)", "jFrame.setLocationRelativeTo(JFrame)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [97, 133, 179], "configurationEnd": [127, 173, 238], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 244, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setFocusable(boolean)", "jFrame.setLayout(BorderLayout)", "jFrame.setLayout(BorderLayout)", "jFrame.add(JPanel)"], "useStart": [279, 316, 364, 398], "useEnd": [310, 358, 392, 445], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/propra13-orga/gruppe95/tree/master/src/newgame/Play_Online.java", "rawCode": "  public void DialogueShop() {\n\n    JFrame DialogueShop = new DialogueShop(\"Ladenbesitzer\");\n    DialogueShop.setSize(600, 300);\n    DialogueShop.setLocationRelativeTo(null);\n    DialogueShop.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n    DialogueShop.setVisible(true);\n    DialogueShop.setFocusable(true);\n    DialogueShop.setLayout(new BorderLayout());\n    DialogueShop.setLayout(null);\n    DialogueShop.add(new Dialogue(\"Ladenbesitzer\"));\n  }\n"}, {"dataset": "setVisible", "exampleID": 3796, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "jFrame!=null", "guardType": "IF {", "guardExpressionStart": 42, "guardExpressionEnd": 60, "guardBlockStart": 42, "guardBlockEnd": 98, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 69, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/soartech/soar/tree/master/Domains/Dice/src/edu/umich/dice3/ui/DiceFrame.java", "rawCode": "  public void setVisible(boolean b) {\n    if (frame != null) {\n      frame.setVisible(true);\n    }\n  }\n"}, {"dataset": "setVisible", "exampleID": 3797, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [424], "initializationEnd": [436], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setIconImage(Image)", "jFrame.getSize()", "jFrame.setLocation(int,int)"], "configurationStart": [442, 576, 669], "configurationEnd": [547, 591, 786], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1103, "focalAPIEnd": 1126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.3.3/src/lib/com/izforge/izpack/installer/GUIInstaller.java", "rawCode": "  /**\n   * Loads the suitable langpack.\n   *\n   * @throws Exception Description of the Exception\n   */\n  private void loadLangPack() throws Exception {\n    // Initialisations\n    List availableLangPacks = getAvailableLangPacks();\n    int npacks = availableLangPacks.size();\n    if (npacks == 0) {\n      throw new Exception(\"no language pack available\");\n    }\n    String selectedPack;\n\n    // Dummy Frame\n    JFrame frame = new JFrame();\n    frame.setIconImage(\n        new ImageIcon(this.getClass().getResource(\"/img/JFrameIcon.png\")).getImage());\n\n    Dimension frameSize = frame.getSize();\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    frame.setLocation(\n        (screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2 - 10);\n\n    // We get the langpack name\n    if (npacks != 1) {\n      LanguageDialog picker = new LanguageDialog(frame, availableLangPacks.toArray());\n      picker.setSelection(Locale.getDefault().getISO3Language().toLowerCase());\n      picker.setModal(true);\n      picker.toFront();\n      // frame.setVisible(true);\n      frame.setVisible(false);\n      picker.setVisible(true);\n\n      selectedPack = (String) picker.getSelection();\n      if (selectedPack == null) {\n        throw new Exception(\"installation canceled\");\n      }\n    } else {\n      selectedPack = (String) availableLangPacks.get(0);\n    }\n\n    // We add an xml data information\n    this.installdata.xmlData.setAttribute(\"langpack\", selectedPack);\n\n    // We load the langpack\n    installdata.localeISO3 = selectedPack;\n    installdata.setVariable(ScriptParser.ISO3_LANG, installdata.localeISO3);\n    InputStream in = getClass().getResourceAsStream(\"/langpacks/\" + selectedPack + \".xml\");\n    this.installdata.langpack = new LocaleDatabase(in);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3798, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 39, "focalAPIEnd": 73, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ntj/ComplexRapidMiner/tree/master/src/com/rapidminer/gui/tools/SplashScreen.java", "rawCode": "  public void showSplashScreen() {\n    splashScreenFrame.setVisible(true);\n  }\n"}, {"dataset": "setVisible", "exampleID": 3799, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(BorderLayout)", "jFrame.setResizable(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setSize(int,int)", "jFrame.add(JPanel)", "jFrame.add(JPanel)", "jFrame.setLocationRelativeTo(JFrame)"], "configurationStart": [128, 167, 198, 268, 498, 521, 1276], "configurationEnd": [161, 192, 262, 291, 515, 538, 1309], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 1315, "focalAPIEnd": 1337, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JaanJanno/A-Team-1/tree/master/POS/src/ee/ut/math/tvt/salessystem/ui/tabs/StockTab.java", "rawCode": "  /**\n   * Function to add a new item to the warehouse.\n   *\n   * @author Juhan\n   */\n  public void addItemEventHandler() {\n    frame.setLayout(new FlowLayout());\n    frame.setResizable(false);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.setSize(300, 170);\n    JPanel panel1 = new JPanel();\n    JPanel panel2 = new JPanel();\n    panel1.setLayout(new GridLayout(0, 2, 0, 5));\n    JButton confirmButton = new JButton(\"Confirm\");\n    panel2.add(confirmButton);\n    frame.add(panel1);\n    frame.add(panel2);\n\n    final JTextField nameField = new JTextField(20);\n    final JTextField descField = new JTextField(20);\n    final JTextField priceField = new JTextField(20);\n    final JTextField quantityField = new JTextField(20);\n\n    JLabel nameLabel = new JLabel(\"Name:\", SwingConstants.CENTER);\n    JLabel quantityLabel = new JLabel(\"Quantity:\", SwingConstants.CENTER);\n    JLabel priceLabel = new JLabel(\"Price:\", SwingConstants.CENTER);\n    JLabel descLabel = new JLabel(\"Description:\", SwingConstants.CENTER);\n\n    panel1.add(nameLabel);\n    panel1.add(nameField);\n    panel1.add(quantityLabel);\n    panel1.add(quantityField);\n    panel1.add(priceLabel);\n    panel1.add(priceField);\n    panel1.add(descLabel);\n    panel1.add(descField);\n\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n    confirmButton.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            try {\n              String name = nameField.getText();\n              int quantity = Integer.parseInt(quantityField.getText());\n\n              if (name.trim() == \"\") {\n                log.debug(\"You must enter a name for the new item.\");\n              } else {\n                List<StockItem> list = model.getWarehouseTableModel().getTableRows();\n                boolean alreadyExists = false;\n                for (StockItem item : list) {\n                  if (item.getName().equals(name)) {\n                    alreadyExists = true;\n                    stockitem = item;\n                  }\n                }\n                if (!alreadyExists) {\n                  String desc = descField.getText();\n                  double price = Double.parseDouble(priceField.getText());\n                  StockItem item = list.get(list.size() - 1);\n                  long id = item.getId() + 1;\n                  StockItem newItem = new StockItem(id, name.trim(), desc, price, quantity);\n                  model.getWarehouseTableModel().addItem(newItem);\n                  domainController.addToWarehouse(newItem);\n                  PurchaseItemPanel.fillItemNameBox();\n                  frame.setVisible(false);\n                  frame.dispose();\n                } else {\n                  domainController.changeStockItemQuantity(stockitem, quantity);\n                  PurchaseItemPanel.fillItemNameBox();\n                  frame.setVisible(false);\n                  frame.dispose();\n                  log.debug(\"Quantity of \" + name + \" increased by \" + quantity + \".\");\n                }\n              }\n            } catch (Exception e1) {\n              JOptionPane.showMessageDialog(\n                  frame,\n                  (\"You have entered unsuitable attributes.\"),\n                  \"Unsuitable attributes\",\n                  JOptionPane.ERROR_MESSAGE);\n              log.debug(\"You have entered unsuitable attributes.\");\n              log.debug(e1);\n            }\n          }\n        });\n  }\n"}, {"dataset": "setVisible", "exampleID": 3800, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [117], "initializationEnd": [129], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setJMenuBar(JMenuBar)", "jFrame.setContentPane(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setTitle(String)", "jFrame.setResizable(boolean)", "jFrame.pack()"], "configurationStart": [517, 552, 652, 715, 754, 787], "configurationEnd": [543, 585, 707, 746, 779, 799], "guardCondition": "jFrame==null", "guardType": "IF {", "guardExpressionStart": 82, "guardExpressionEnd": 100, "guardBlockStart": 82, "guardBlockEnd": 836, "focalAPI": " = jFrame.setVisible(b)", "focalAPIStart": 807, "focalAPIEnd": 829, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.repaint()"], "useStart": [854], "useEnd": [869], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fvilla/imt/tree/master/org.integratedmodelling.thinklab.core/src/main/java/org/integratedmodelling/utils/image/Picture.java", "rawCode": "  public void show() {\n\n    // create the GUI for viewing the image if needed\n    if (frame == null) {\n      frame = new JFrame();\n\n      JMenuBar menuBar = new JMenuBar();\n      JMenu menu = new JMenu(\"File\");\n      menuBar.add(menu);\n      JMenuItem menuItem1 = new JMenuItem(\" Save... \");\n      menuItem1.addActionListener(this);\n      menuItem1.setAccelerator(\n          KeyStroke.getKeyStroke(\n              KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));\n      menu.add(menuItem1);\n      frame.setJMenuBar(menuBar);\n\n      frame.setContentPane(getJLabel());\n      // f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      frame.setTitle(\"Picture Frame\");\n      frame.setResizable(false);\n      frame.pack();\n      frame.setVisible(true);\n    }\n\n    // draw\n    frame.repaint();\n  }\n"}]