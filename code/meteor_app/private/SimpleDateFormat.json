[{"dataset": "parse", "exampleID": 7801, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 252, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)", "format.format(Date)"], "useStart": [367, 501], "useEnd": [391, 517], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/goodow/j2objc/tree/master/jre_emul/android/libcore/luni/src/main/java/java/util/Date.java", "rawCode": "  /**\n   * Returns the string representation of this {@code Date} in GMT in the format {@code \"22 Jun 1999\n   * 13:02:00 GMT\"}.\n   *\n   * @deprecated use {@link DateFormat}\n   */\n  @Deprecated\n  public String toGMTString() {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"d MMM y HH:mm:ss 'GMT'\", Locale.US);\n    TimeZone gmtZone = TimeZone.getTimeZone(\"GMT\");\n    sdf.setTimeZone(gmtZone);\n    GregorianCalendar gc = new GregorianCalendar(gmtZone);\n    gc.setTimeInMillis(milliseconds);\n    return sdf.format(this);\n  }\n"}, {"dataset": "parse", "exampleID": 7802, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 66, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AvogadroSG1/SCADASystem/tree/master/PagingSystem/src/alert/AlertMonitoringSystem.java", "rawCode": "    private void log(String toLog) {\n      SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy HH:mm:ss\");\n      String formattedDate = sdf.format(Calendar.getInstance().getTime());\n      logArea.append(toLog + \" at \" + formattedDate + \"\\n\");\n    }\n"}, {"dataset": "parse", "exampleID": 7803, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 318, "focalAPIEnd": 357, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/krouge/MWS_projet/tree/master/Application/src/java/ch/heigvd/comem/services/FileManager.java", "rawCode": "  @Override\n  public String uploadFile(MultiPart mp) throws IOException {\n\n    MediaType type = mp.getBodyParts().get(0).getMediaType();\n    BodyPartEntity bpe = (BodyPartEntity) mp.getBodyParts().get(0).getEntity();\n\n    String themeIdStr = mp.getBodyParts().get(2).getEntityAs(String.class);\n\n    String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n\n    String fileName = \"IMG_\" + timestamp + \".jpg\";\n    InputStream uploadedInputStream = bpe.getInputStream();\n\n    String uploadedFileLocation =\n        \"/Applications/NetBeans/glassfish-3.1.2.2/glassfish/domains/domain1/docroot/images/\"\n            + fileName;\n    saveToFile(uploadedInputStream, uploadedFileLocation);\n\n    return fileName;\n  }\n"}, {"dataset": "parse", "exampleID": 7804, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["warn(*,String)"], "tryExpressionStart": 129, "tryExpressionEnd": 133, "tryBlockStart": 129, "tryBlockEnd": 763, "catchExpressionStart": 580, "catchExpressionEnd": 606, "catchBlockStart": 580, "catchBlockEnd": 666, "exceptionHandlingCallStart": [616], "exceptionHandlingCallEnd": [657], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 490, "focalAPIEnd": 520, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [540], "useEnd": [570], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wtsi-npg/illumina2bam/tree/master/src/uk/ac/sanger/npg/illumina/Lane.java", "rawCode": "  /** @return run date */\n  public Date readRunDate() {\n\n    Date runDate = null;\n    if (this.runConfigXmlNode != null) {\n      try {\n        XPathExpression exprRunDate = xpath.compile(\"RunParameters/RunFolderDate/text()\");\n        Node runDateNode = (Node) exprRunDate.evaluate(this.runConfigXmlNode, XPathConstants.NODE);\n        if (runDateNode == null) {\n          return null;\n        }\n        String runDateString = runDateNode.getNodeValue();\n        SimpleDateFormat formatter = new SimpleDateFormat(\"yyMMdd\");\n        runDate = formatter.parse(runDateString);\n      } catch (ParseException ex) {\n        log.warn(ex, \"Problems parsing run date\");\n      } catch (XPathExpressionException ex) {\n        log.warn(ex, \"Problems reading run date\");\n      }\n    }\n\n    return runDate;\n  }\n"}, {"dataset": "parse", "exampleID": 7805, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 203, "focalAPIEnd": 237, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [353], "useEnd": [399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mstrey/lotoNaMao/tree/master/mobile/Loterias/src/main/java/br/nom/strey/maicon/loterias/megasena/MegasenaResultadosDAO.java", "rawCode": "  public boolean insert(MegasenaResultadosVO vo) {\n\n    SQLiteDatabase db = new DBHelper(ctx).getWritableDatabase();\n    ContentValues ctv = new ContentValues();\n    SimpleDateFormat dateFormatSorteio = new SimpleDateFormat(\"yyyy-MM-dd\");\n    SimpleDateFormat dateFormatInclusao = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\n    String data_sorteio = dateFormatSorteio.format(vo.getData_sorteio());\n    String data_inclusao = dateFormatInclusao.format(vo.getData_inclusao());\n\n    ctv.put(\"concurso\", vo.getConcurso());\n    ctv.put(\"data_sorteio\", data_sorteio);\n    ctv.put(\"bola1\", vo.getBola1());\n    ctv.put(\"bola2\", vo.getBola2());\n    ctv.put(\"bola3\", vo.getBola3());\n    ctv.put(\"bola4\", vo.getBola4());\n    ctv.put(\"bola5\", vo.getBola5());\n    ctv.put(\"bola6\", vo.getBola6());\n    ctv.put(\"arrecadacao_total\", vo.getArrecadacao_total());\n    ctv.put(\"ganhadores_6\", vo.getGanhadores_6());\n    ctv.put(\"rateio_6\", vo.getRateio_6());\n    ctv.put(\"ganhadores_5\", vo.getGanhadores_5());\n    ctv.put(\"rateio_5\", vo.getRateio_5());\n    ctv.put(\"ganhadores_4\", vo.getGanhadores_4());\n    ctv.put(\"rateio_4\", vo.getRateio_4());\n    ctv.put(\"acumulado_5\", vo.getAcumulado_5());\n    ctv.put(\"estimativa_premio\", vo.getEstimativa_premio());\n    ctv.put(\"acumulado_virada\", vo.getAcumulado_virada());\n    ctv.put(\"local\", vo.getLocal());\n    ctv.put(\"local_gps\", vo.getLocal_gps());\n    ctv.put(\"data_inclusao\", data_inclusao);\n\n    boolean result = db.insert(TABLE_NAME, null, ctv) > 0;\n    db.close();\n\n    return (result);\n  }\n"}, {"dataset": "parse", "exampleID": 7806, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 70, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jimtahu/OMShips_android/tree/master/test/src/org/omships/omships/test/PortItemTest.java", "rawCode": "  public void testCompareToPortItem() {\n    SimpleDateFormat format = new SimpleDateFormat(\"dd MMM yyyy\", Locale.US);\n    ArrayList<PortItem> list = new ArrayList<PortItem>();\n    PortItem item = new PortItem();\n    item.setCity(\"D\");\n    item.setArrive(\"07 May 2010\");\n    list.add(item);\n    item = new PortItem();\n    item.setCity(\"B\");\n    item.setArrive(\"09 May 2010\");\n    list.add(item);\n    item = new PortItem();\n    item.setCity(\"C\");\n    item.setArrive(\"08 May 2010\");\n    list.add(item);\n    item = new PortItem();\n    item.setCity(\"A\");\n    item.setArrive(\"10 May 2010\");\n    list.add(item);\n    Collections.sort(list);\n    assertEquals(\"A\", list.get(0).getCity());\n    assertEquals(\"B\", list.get(1).getCity());\n    assertEquals(\"C\", list.get(2).getCity());\n    assertEquals(\"D\", list.get(3).getCity());\n  }\n"}, {"dataset": "parse", "exampleID": 7807, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 685, "focalAPIEnd": 716, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date[])"], "useStart": [2032], "useEnd": [2060], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/smaldeniya/GlobalMeshETicket/tree/master/src/com/globalmesh/action/hall/PlatinumAction.java", "rawCode": "  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n\n    String user = (String) req.getSession().getAttribute(\"email\");\n\n    if (user == null) {\n      req.setAttribute(\"msgClass\", Constants.MSG_CSS_ERROR);\n      req.setAttribute(\"message\", Utility.getCONFG().getProperty(Constants.LOGIN_NEED_MESSAGE));\n      req.getRequestDispatcher(\"/messages.jsp\").forward(req, resp);\n\n    } else {\n      String hallName = Utility.getCONFG().getProperty(Constants.HALL_PLATINUM);\n      MovieDetail hallMovie = MovieDetailDAO.INSTANCE.getNowShowingMovie(hallName);\n\n      if (hallMovie != null) {\n        DateFormat movieDateFormat = new SimpleDateFormat(\"hh:mm a\");\n\n        req.setAttribute(\"youtubeUrl\", hallMovie.getMovieYouTube());\n        int dayOfWeek = Calendar.getInstance().get(Calendar.DAY_OF_WEEK) - 1;\n        Date[] shows = new Date[5];\n\n        for (int i = 0; i < 5; i++) {\n          switch (i) {\n            case 0:\n              Date[] date = hallMovie.getMovieTime1();\n              if (date != null && date.length == 7) shows[i] = date[dayOfWeek];\n              break;\n            case 1:\n              Date[] date2 = hallMovie.getMovieTime2();\n              if (date2 != null && date2.length == 7) shows[i] = date2[dayOfWeek];\n              break;\n            case 2:\n              Date[] date3 = hallMovie.getMovieTime3();\n              if (date3 != null && date3.length == 7) shows[i] = date3[dayOfWeek];\n              break;\n            case 3:\n              Date[] date4 = hallMovie.getMovieTime4();\n              if (date4 != null && date4.length == 7) shows[i] = date4[dayOfWeek];\n              break;\n            case 4:\n              Date[] date5 = hallMovie.getMovieTime5();\n              if (date5 != null && date5.length == 7) shows[i] = date5[dayOfWeek];\n              break;\n          }\n        }\n\n        List<String> showTimes = new ArrayList<String>();\n\n        for (Date date : shows) {\n          if (date != null) {\n            showTimes.add(movieDateFormat.format(date));\n          }\n        }\n\n        Hall h = HallDAO.INSTANCE.getHallById(hallName);\n\n        req.setAttribute(\"hall\", h);\n        req.setAttribute(\"shows\", showTimes);\n        req.getRequestDispatcher(\"/platinum_seatPlan.jsp\").forward(req, resp);\n      } else {\n        req.setAttribute(\"youtubeUrl\", \"\");\n        req.setAttribute(\"shows\", new ArrayList<String>());\n        req.getRequestDispatcher(\"/platinum_seatPlan.jsp\").forward(req, resp);\n      }\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7808, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 627, "focalAPIEnd": 661, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)", "format.parse(String)"], "useStart": [684, 913], "useEnd": [711, 943], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liuxian-nus/Test/tree/master/IRMS/IRMSCustomer-war/src/java/servlet/CEMSServlet.java", "rawCode": "  private EventEntity registerEvent(HttpServletRequest request) throws ParseException {\n\n    System.out.println(\"CEMSServlet: registerEvent has started!\");\n    EventEntity ee = new EventEntity();\n\n    String title = request.getParameter(\"title\");\n    String eventName = request.getParameter(\"eventName\");\n    String name = request.getParameter(\"name\");\n    String eventType = request.getParameter(\"eventType\");\n    String email = request.getParameter(\"e-mail\");\n    String dateString = request.getParameter(\"startDate\");\n    System.out.println(\"startDate passed in is \" + dateString);\n    DateFormat formatter;\n    formatter = new SimpleDateFormat(\"MM/dd/yyyy\");\n    Date startDate = formatter.parse(dateString);\n    System.out.println(\"startDate is \" + startDate);\n\n    String endDateString = request.getParameter(\"endDate\");\n    System.out.println(\"startDate passed in is \" + endDateString);\n    Date endDate = formatter.parse(endDateString);\n\n    String phoneNumber = request.getParameter(\"contact\");\n    String address = request.getParameter(\"address\");\n    Integer eventScale = Integer.parseInt(request.getParameter(\"eventScale\"));\n    String countryOfResidence = request.getParameter(\"countryOfResidence\");\n    Double estimatedBudget = Double.parseDouble(request.getParameter(\"estimatedBudget\"));\n    String company = request.getParameter(\"company\");\n    String industry = request.getParameter(\"industry\");\n    boolean isPublic = Boolean.parseBoolean(request.getParameter(\"subscribe\"));\n    String preferredLanguage = request.getParameter(\"preferredLanguage\");\n\n    System.out.println(\"CEMSServlet:registerEvent: All data has been passed in already!\");\n\n    ee =\n        eventSessionBean.makeReservation(\n            eventName, eventType, eventName, title, name, email, eventScale, startDate, endDate);\n    ee =\n        eventSessionBean.completeReservation(\n            ee,\n            address,\n            phoneNumber,\n            countryOfResidence,\n            estimatedBudget,\n            company,\n            industry,\n            preferredLanguage,\n            isPublic);\n    System.out.println(\"CEMSServlet:registerEvent:Event has been created successfully!\");\n\n    return ee;\n  }\n"}, {"dataset": "parse", "exampleID": 7809, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 136, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DateConverter(format)", "format.parse(String)"], "useStart": [207, 610], "useEnd": [238, 634], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codehaus/jbehave-core/tree/master/jbehave-core/src/test/java/org/jbehave/core/steps/ParameterConvertersBehaviour.java", "rawCode": "  @Test\n  public void shouldConvertDateWithCustomFormat() throws ParseException, IntrospectionException {\n    DateFormat customFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    ParameterConverter converter = new DateConverter(customFormat);\n    assertThat(converter.accept(Date.class), equalTo(true));\n    assertThat(converter.accept(WrongType.class), is(false));\n    assertThat(converter.accept(mock(Type.class)), is(false));\n    Type type = SomeSteps.methodFor(\"aMethodWithDate\").getGenericParameterTypes()[0];\n    String date = \"2010-01-01\";\n    assertThat((Date) converter.convertValue(date, type), equalTo(customFormat.parse(date)));\n  }\n"}, {"dataset": "parse", "exampleID": 7810, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 341, "focalAPIEnd": 375, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dianping/cat/tree/master/cat-home/src/test/java/com/dianping/cat/report/task/utilization/UtilizationBuilderTest.java", "rawCode": "  @Test\n  public void testHourlyReport() throws Exception {\n    UtilizationReportBuilder builder = lookup(UtilizationReportBuilder.class);\n    HostinfoService hostinfoService = lookup(HostinfoService.class);\n\n    hostinfoService.initialize();\n    builder.buildHourlyTask(\n        Constants.REPORT_UTILIZATION,\n        Constants.CAT,\n        new SimpleDateFormat(\"yyyyMMddHH\").parse(\"2013082617\"));\n  }\n"}, {"dataset": "parse", "exampleID": 7811, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 87, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [145], "useEnd": [189], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robworth/patientview/tree/master/patientview-parent/patientview/src/main/java/org/patientview/patientview/model/TestResult.java", "rawCode": "  @Transient\n  public String getIsoDatestamp() {\n    SimpleDateFormat dateTimeFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n    return dateTimeFormat.format(datestamped.getTime());\n  }\n"}, {"dataset": "parse", "exampleID": 7812, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 81, "focalAPIEnd": 115, "followUpCheck": "eventList.containsKey(format.format(calendar.getTime()))", "checkType": "IF", "followUpCheckExpressionStart": 121, "followUpCheckExpressionEnd": 185, "followUpCheckBlockStart": 121, "followUpCheckBlockEnd": 339, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yukoff/concourse-connect/tree/master/src/main/java/com/concursive/connect/web/modules/calendar/utils/CalendarView.java", "rawCode": "  public boolean isHoliday(Calendar calendar) {\n    SimpleDateFormat formatter = new SimpleDateFormat(\"MM/dd/yyyy\");\n    if (eventList.containsKey(formatter.format(calendar.getTime()))) {\n      ArrayList tmpEvents = getEvents(calendar, CalendarEventList.EVENT_TYPES[7]);\n      if (tmpEvents.size() > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n"}, {"dataset": "parse", "exampleID": 7813, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 336, "focalAPIEnd": 375, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(long)"], "useStart": [397], "useEnd": [412], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cbcrg/tcoffee-server/tree/master/app/models/Repo.java", "rawCode": "  public boolean isExpired() {\n    Status status = getStatus();\n    if (status == null) {\n      return false;\n    }\n\n    long now = System.currentTimeMillis();\n    long exp = getExpirationTime();\n    boolean result = (status.isDone() || status.isFailed()) && (now > exp);\n    if (Logger.log4j.isDebugEnabled()) {\n      DateFormat fmt = new SimpleDateFormat(\"dd/MMM HH:mm:ss\");\n      String sExp = fmt.format(exp);\n      String sDelta = exp > now ? Utils.asDuration(exp - now) : \"0\";\n      Logger.debug(\n          \"Repo '%s' - Expired: %s (status: '%s' - exp time: '%s' - delta: %s)\",\n          rid, result, status, sExp, sDelta);\n    }\n    return result;\n  }\n"}, {"dataset": "parse", "exampleID": 7814, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 341, "focalAPIEnd": 379, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alibaba/otter/tree/master/node/etl/src/main/java/com/alibaba/otter/node/etl/load/loader/db/interceptor/log/LogLoadInterceptor.java", "rawCode": "  private String dumpContextInfo(String status, DbLoadContext context) {\n    int successed = context.getProcessedDatas().size();\n    int failed = context.getFailedDatas().size();\n    int all = context.getPrepareDatas().size();\n    boolean isInterrupt = (all != (failed + successed));\n    Date now = new Date();\n    SimpleDateFormat format = new SimpleDateFormat(TIMESTAMP_FORMAT);\n    return MessageFormat.format(\n        context_format,\n        status,\n        format.format(now),\n        context.getIdentity().toString(),\n        all,\n        successed,\n        failed,\n        isInterrupt);\n  }\n"}, {"dataset": "parse", "exampleID": 7815, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 244, "tryExpressionEnd": 248, "tryBlockStart": 244, "tryBlockEnd": 413, "catchExpressionStart": 359, "catchExpressionEnd": 379, "catchBlockStart": 359, "catchBlockEnd": 413, "exceptionHandlingCallStart": [387], "exceptionHandlingCallEnd": [406], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(true||pattern==null||pattern.trim().length()<=0)", "guardType": "IF {", "guardExpressionStart": 72, "guardExpressionEnd": 214, "guardBlockStart": 72, "guardBlockEnd": 239, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 279, "focalAPIEnd": 311, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eea/eea.eunis/tree/master/web/src/main/java/ro/finsiel/eunis/search/Utilities.java", "rawCode": "  public static String formatDate(Date dataIn, String formatData) {\n    if (dataIn == null\n        || dataIn.toString().trim().length() <= 0\n        || formatData == null\n        || formatData.trim().length() <= 0) {\n      return \"\";\n    }\n    try {\n      DateFormat formatter = new SimpleDateFormat(formatData);\n\n      return formatter.format(dataIn);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return \"\";\n  }\n"}, {"dataset": "parse", "exampleID": 7816, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 189, "focalAPIEnd": 230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IQSS/dvn/tree/master/DVN-root/DVN-web/src/main/java/edu/harvard/iq/dvn/core/web/study/StudyUI.java", "rawCode": "  private String reformatDate(String dateString) {\n\n    Date date = DvnDate.convertFromPattern(dateString, \"yyyyyyyyy-MM-dd GG\");\n    if (date != null) {\n      SimpleDateFormat formatter = new SimpleDateFormat(\"MMMMM dd, yyyy GG\");\n      return formatter.format(date);\n    }\n    date = DvnDate.convertFromPattern(dateString, \"yyyyyyyyy-MM GG\");\n    if (date != null) {\n      SimpleDateFormat formatter = new SimpleDateFormat(\"MMMMM, yyyy GG\");\n      return formatter.format(date);\n    }\n    date = DvnDate.convertFromPattern(dateString, \"yyyyyyyyy GG\");\n    if (date != null) {\n      SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy GG\");\n      return formatter.format(date);\n    }\n    date = DvnDate.convertFromPattern(dateString, \"yyyy-MM-dd\");\n    if (date != null) {\n      SimpleDateFormat formatter = new SimpleDateFormat(\"MMMMM dd, yyyy\");\n      return formatter.format(date);\n    }\n    date = DvnDate.convertFromPattern(dateString, \"yyyy-MM\");\n    if (date != null) {\n      SimpleDateFormat formatter = new SimpleDateFormat(\"MMMMM, yyyy\");\n      return formatter.format(date);\n    }\n\n    return dateString;\n  }\n"}, {"dataset": "parse", "exampleID": 7817, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 265, "focalAPIEnd": 290, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [265], "useEnd": [313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hyperic/sigar/tree/master/bindings/java/src/org/hyperic/sigar/cmd/Ps.java", "rawCode": "  private static String getStartTime(long time) {\n    if (time == 0) {\n      return \"00:00\";\n    }\n    long timeNow = System.currentTimeMillis();\n    String fmt = \"MMMd\";\n\n    if ((timeNow - time) < ((60 * 60 * 24) * 1000)) {\n      fmt = \"HH:mm\";\n    }\n\n    return new SimpleDateFormat(fmt).format(new Date(time));\n  }\n"}, {"dataset": "parse", "exampleID": 7818, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 66, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)", "format.format(Date)"], "useStart": [136, 197], "useEnd": [184, 217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SVMP/android_libcore/tree/master/luni/src/test/java/libcore/net/http/HttpResponseCacheTest.java", "rawCode": "  private String formatDate(Date date) {\n    DateFormat rfc1123 = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", Locale.US);\n    rfc1123.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    return rfc1123.format(date);\n  }\n"}, {"dataset": "parse", "exampleID": 7819, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 716, "focalAPIEnd": 750, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/miserani/paodequeijo/tree/master/src/visao/JDialogRegistrarPagamento.java", "rawCode": "  private void jButton1ActionPerformed(\n      java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jButton1ActionPerformed\n    if (checarMaior(Double.parseDouble(jTextField1.getText().replace(\",\", \".\")))) {\n      jRadioButton1.setSelected(true);\n      JOptionPane.showMessageDialog(rootPane, \"O valor pago deve ser menor ou igual ao pendente.\");\n      jTextField1.setEditable(false);\n      jTextField1.setText(formatador.format(Double.parseDouble(pai.restante.replace(\",\", \".\"))));\n    } else {\n      if (jRadioButton1.isSelected()\n          || (Double.parseDouble(pai.restante.replace(\",\", \".\"))\n              == Double.parseDouble(jTextField1.getText().replace(\",\", \".\")))) {\n        SimpleDateFormat formatador = new SimpleDateFormat(\"dd/MM/yyyy\");\n        Date data = new Date();\n        pagamento.setPagamento(new Pagamento());\n        pagamento.getPagamento().setData(formatador.format(data));\n        pagamento.getPagamento().setIdVenda(pai.controle.getVendaPrazo().getIdVenda());\n        pagamento.getPagamento().setValor(jTextField1.getText());\n        int escolha = JOptionPane.showConfirmDialog(rootPane, \"Finalizar conta ?\");\n        if (escolha == 0) {\n          this.setCursor(new Cursor(Cursor.WAIT_CURSOR));\n          pagamento.cadastrarPagamento(jComboBox1.getSelectedItem().toString());\n          pagamento.darBaixa();\n          pai.limparTela();\n          this.dispose();\n          this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\n        }\n      } else {\n        SimpleDateFormat formatadorData = new SimpleDateFormat(\"dd/MM/yyyy\");\n        Date data = new Date();\n        pagamento.setPagamento(new Pagamento());\n        pagamento.getPagamento().setData(formatadorData.format(data));\n        pagamento.getPagamento().setIdVenda(pai.controle.getVendaPrazo().getIdVenda());\n        pagamento.getPagamento().setValor(jTextField1.getText());\n        int escolha =\n            JOptionPane.showConfirmDialog(\n                rootPane, \"Registrar o pagamento de R$ \" + jTextField1.getText() + \" ?\");\n        if (escolha == 0) {\n          this.setCursor(new Cursor(Cursor.WAIT_CURSOR));\n          JOptionPane.showMessageDialog(\n              rootPane, pagamento.cadastrarPagamento(jComboBox1.getSelectedItem().toString()));\n          pai.preencherPag();\n          this.dispose();\n          this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\n        }\n      }\n    }\n  } // GEN-LAST:event_jButton1ActionPerformed\n"}, {"dataset": "parse", "exampleID": 7820, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "pattern!=null", "guardType": "IF {", "guardExpressionStart": 67, "guardExpressionEnd": 111, "guardBlockStart": 67, "guardBlockEnd": 537, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 173, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaejaejae/ramonCS2103/tree/master/CS2103/lib/apache-log4j-1.2.16/src/main/java/org/apache/log4j/DailyRollingFileAppender.java", "rawCode": "  public void activateOptions() {\n    super.activateOptions();\n    if (datePattern != null && fileName != null) {\n      now.setTime(System.currentTimeMillis());\n      sdf = new SimpleDateFormat(datePattern);\n      int type = computeCheckPeriod();\n      printPeriodicity(type);\n      rc.setType(type);\n      File file = new File(fileName);\n      scheduledFilename = fileName + sdf.format(new Date(file.lastModified()));\n\n    } else {\n      LogLog.error(\"Either File or DatePattern options are not set for appender [\" + name + \"].\");\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7821, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 192, "focalAPIEnd": 239, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [192], "useEnd": [252], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/terraframe/Runway-SDK/tree/master/runwaysdk-server/src/main/java/com/runwaysdk/query/AttributeDateTime.java", "rawCode": "  /**\n   * Formats the given moment into the string value.\n   *\n   * @param date\n   * @return given moment into the string value.\n   */\n  protected String formatMoment(Date date) {\n    return new SimpleDateFormat(Constants.DATETIME_FORMAT).format(date);\n  }\n"}, {"dataset": "parse", "exampleID": 7822, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 818, "focalAPIEnd": 845, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/api/src/com/todoroo/andlib/utility/DateUtilities.java", "rawCode": "  /**\n   * @param context android context\n   * @param date date to format\n   * @return date, with month, day, and year\n   */\n  @SuppressWarnings(\"nls\")\n  public static String getDateString(Context context, Date date, boolean includeYear) {\n    String month =\n        DateUtils.getMonthString(date.getMonth() + Calendar.JANUARY, DateUtils.LENGTH_MEDIUM);\n    String value;\n    String standardDate;\n    // united states, you are special\n    Locale locale = Locale.getDefault();\n    if (arrayBinaryContains(locale.getLanguage(), \"ja\", \"ko\", \"zh\")\n        || arrayBinaryContains(locale.getCountry(), \"BZ\", \"CA\", \"KE\", \"MN\", \"US\"))\n      value = \"'#' d'$'\";\n    else value = \"d'$' '#'\";\n    if (includeYear) value += \", yyyy\";\n    if (arrayBinaryContains(locale.getLanguage(), \"ja\", \"zh\")) {\n      standardDate =\n          new SimpleDateFormat(value)\n              .format(date)\n              .replace(\"#\", month)\n              .replace(\"$\", \"\\u65E5\"); // $NON-NLS-1$\n    } else if (\"ko\".equals(Locale.getDefault().getLanguage())) {\n      standardDate =\n          new SimpleDateFormat(value)\n              .format(date)\n              .replace(\"#\", month)\n              .replace(\"$\", \"\\uC77C\"); // $NON-NLS-1$\n    } else {\n      standardDate = new SimpleDateFormat(value).format(date).replace(\"#\", month).replace(\"$\", \"\");\n    }\n    return standardDate;\n  }\n"}, {"dataset": "parse", "exampleID": 7823, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 393, "focalAPIEnd": 442, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [462], "useEnd": [491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hackystat/hackystat-utilities/tree/master/src/org/hackystat/utilities/logger/OneLineFormatter.java", "rawCode": "  /**\n   * Formats the passed log string as a single line. Prefixes the log string with a date stamp if\n   * enabled, and adds a newline if enabled.\n   *\n   * @param record A log record.\n   * @return The message string.\n   */\n  @Override\n  public String format(LogRecord record) {\n    StringBuffer buff = new StringBuffer();\n    if (this.enableDateStamp) {\n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"MM/dd HH:mm:ss\", Locale.US);\n      buff.append(dateFormat.format(new Date()));\n      buff.append(\" \");\n    }\n    buff.append(record.getMessage());\n    if (this.enableNewline) {\n      buff.append(System.getProperty(\"line.separator\"));\n    }\n    return buff.toString();\n  }\n"}, {"dataset": "parse", "exampleID": 7824, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 108, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)", "format.format(Date)"], "useStart": [152, 220], "useEnd": [195, 241], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gabegorelick/guitar-core/tree/master/model-core/src/test/java/edu/umd/cs/guitar/util/UtilTest.java", "rawCode": "  /** Test of getTimeStamp method, of class Util. */\n  public void testGetTimeStamp() {\n    DateFormat df = new SimpleDateFormat(\"yyyyMMddhhmmss\");\n    df.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    String expResult = df.format(new Date());\n    String result = Util.getTimeStamp();\n\n    /* check for small variation in two strings */\n    assert (expResult.startsWith(result.substring(0, 11)));\n  }\n"}, {"dataset": "parse", "exampleID": 7825, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 301, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ariesteam/thinklab/tree/master/plugins/org.integratedmodelling.thinklab.core/src/org/integratedmodelling/utils/MiscUtilities.java", "rawCode": "  /**\n   * Return a suffix representing the current date (to the second) suitable to being used to append\n   * to a filename to make it date-specific.\n   *\n   * @return\n   */\n  public static String getDateSuffix() {\n\n    Date today = Calendar.getInstance().getTime();\n    SimpleDateFormat formatter = new SimpleDateFormat(\"yyyyMMddhhmmss\");\n    return formatter.format(today);\n  }\n"}, {"dataset": "parse", "exampleID": 7826, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 158, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [232], "useEnd": [258], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/peggyl/hackblue/tree/master/src/extractor/EventExtractor.java", "rawCode": "  private static boolean isToday(String otherDate) {\n    DateTime d1 = new DateTime();\n    if (otherDate.length() == 10) {\n      SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n      try {\n        d1 = new DateTime(formatter.parse(otherDate));\n      } catch (ParseException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    } else {\n      d1 = ISODateTimeFormat.dateTimeNoMillis().parseDateTime(otherDate);\n    }\n    DateTime d2 = new DateTime(new Date());\n    return (d1.getDayOfYear() == d2.getDayOfYear() && d1.getYear() == d2.getYear());\n  }\n"}, {"dataset": "parse", "exampleID": 7827, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "KettleException", "exceptionHandlingCall": [], "tryExpressionStart": 4404, "tryExpressionEnd": 4408, "tryBlockStart": 4404, "tryBlockEnd": 4590, "catchExpressionStart": 9603, "catchExpressionEnd": 9629, "catchBlockStart": 9603, "catchBlockEnd": 9765, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 4658, "focalAPIEnd": 4705, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)", "format.format(Date)"], "useStart": [11602, 11648], "useEnd": [11618, 11663], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/QADM/SCG/tree/master/opentaps-1.5/opentaps/opentaps-common/src/common/org/opentaps/common/reporting/etl/UtilEtl.java", "rawCode": "  /**\n   * Runs an ETL job.\n   *\n   * @param jobFileName the name of the job, eg: \"sales_tax_statement_etl_job.kjb\"\n   * @param reportsPath the path to the job, eg:\n   *     \"component://financials/webapp/financials/reports/repository\"\n   * @param jobParameters job parameters\n   * @exception KettleException if an error occurs\n   */\n  public static void runJob(\n      String jobFileName, String reportsPath, Map<String, String> jobParameters)\n      throws KettleException {\n\n    EnvUtil.environmentInit();\n    RepositoryMeta repinfo = null;\n    UserInfo userinfo = null;\n    Job job = null;\n\n    StringBuffer optionRepname,\n        optionUsername,\n        optionPassword,\n        optionJobname,\n        optionDirname,\n        optionFilename,\n        optionLoglevel;\n    StringBuffer optionLogfile,\n        optionLogfileOld,\n        optionListdir,\n        optionListjobs,\n        optionListrep,\n        optionNorep,\n        optionVersion;\n\n    LogWriter log = LogWriter.getInstance(LogWriter.LOG_LEVEL_BASIC);\n\n    String jobDirPath = \"\";\n    String jobFilePath = \"\";\n    String jobFilenameTemplate = \"/${jobFilename}\";\n    try {\n      jobDirPath = ComponentLocationResolver.getBaseLocation(reportsPath).toString();\n      jobFilePath =\n          ComponentLocationResolver.getBaseLocation(\n                  FlexibleStringExpander.expandString(\n                      reportsPath + jobFilenameTemplate,\n                      UtilMisc.toMap(\"jobFilename\", jobFileName)))\n              .toString();\n    } catch (MalformedURLException muex) {\n      log.logError(STRING_KITCHEN, \"Error resolving ETL files path.\", muex);\n    }\n\n    optionRepname = new StringBuffer();\n    optionUsername = new StringBuffer();\n    optionPassword = new StringBuffer();\n    optionJobname = new StringBuffer();\n    optionDirname = new StringBuffer();\n    optionFilename = new StringBuffer(jobFilePath);\n    optionLoglevel = new StringBuffer();\n    optionLogfile = new StringBuffer();\n    optionLogfileOld = new StringBuffer();\n    optionListdir = new StringBuffer();\n    optionListdir = new StringBuffer();\n    optionListjobs = new StringBuffer();\n    optionListrep = new StringBuffer();\n    optionNorep = new StringBuffer();\n    optionVersion = new StringBuffer();\n\n    String kettleRepname = Const.getEnvironmentVariable(\"KETTLE_REPOSITORY\", null);\n    String kettleUsername = Const.getEnvironmentVariable(\"KETTLE_USER\", null);\n    String kettlePassword = Const.getEnvironmentVariable(\"KETTLE_PASSWORD\", null);\n\n    if (!Const.isEmpty(kettleRepname)) {\n      optionRepname = new StringBuffer(kettleRepname);\n    }\n    if (!Const.isEmpty(kettleUsername)) {\n      optionUsername = new StringBuffer(kettleUsername);\n    }\n    if (!Const.isEmpty(kettlePassword)) {\n      optionPassword = new StringBuffer(kettlePassword);\n    }\n\n    LogWriter.setConsoleAppenderDebug();\n\n    if (Const.isEmpty(optionLogfile) && !Const.isEmpty(optionLogfileOld)) {\n      // if the old style of logging name is filled in, and the new one is not\n      // overwrite the new by the old\n      optionLogfile = optionLogfileOld;\n    }\n\n    if (Const.isEmpty(optionLogfile)) {\n      log = LogWriter.getInstance(LogWriter.LOG_LEVEL_BASIC);\n    } else {\n      log = LogWriter.getInstance(optionLogfile.toString(), true, LogWriter.LOG_LEVEL_BASIC);\n    }\n\n    if (!Const.isEmpty(optionLoglevel)) {\n      log.setLogLevel(optionLoglevel.toString());\n      log.logMinimal(STRING_KITCHEN, \"Logging is at level : \" + log.getLogLevelDesc());\n    }\n\n    if (!Const.isEmpty(optionVersion)) {\n      BuildVersion buildVersion = BuildVersion.getInstance();\n      log.logBasic(\n          \"Pan\",\n          \"Kettle version \"\n              + Const.VERSION\n              + \", build \"\n              + buildVersion.getVersion()\n              + \", build date : \"\n              + buildVersion.getBuildDate());\n      // if (a.length==1) System.exit(6);\n    }\n\n    // Start the action...\n    //\n    if (!Const.isEmpty(optionRepname) && !Const.isEmpty(optionUsername)) {\n      log.logDetailed(STRING_KITCHEN, \"Repository and username supplied\");\n    }\n\n    log.logMinimal(STRING_KITCHEN, \"Start of run.\");\n\n    /* Load the plugins etc.*/\n    try {\n      StepLoader.init();\n    } catch (KettleException e) {\n      log.logError(STRING_KITCHEN, \"Error loading steps... halting Kitchen!\", e);\n    }\n    StepLoader stepLoader = StepLoader.getInstance();\n\n    /* Load the plugins etc.*/\n    try {\n      JobEntryLoader.init();\n    } catch (KettleException e) {\n      log.logError(STRING_KITCHEN, \"Error loading job entries & plugins... halting Kitchen!\", e);\n      return;\n    }\n\n    Date start, stop;\n    Calendar cal;\n    SimpleDateFormat df = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");\n    cal = Calendar.getInstance();\n    start = cal.getTime();\n\n    log.logDebug(STRING_KITCHEN, \"Allocate new job.\");\n    JobMeta jobMeta = new JobMeta(log);\n\n    // In case we use a repository...\n    Repository repository = null;\n\n    try {\n      // Read kettle job specified on command-line?\n      if (!Const.isEmpty(optionRepname) || !Const.isEmpty(optionFilename)) {\n        log.logDebug(STRING_KITCHEN, \"Parsing command line options.\");\n        if (!Const.isEmpty(optionRepname) && !\"Y\".equalsIgnoreCase(optionNorep.toString())) {\n          log.logDebug(STRING_KITCHEN, \"Loading available repositories.\");\n          RepositoriesMeta repsinfo = new RepositoriesMeta(log);\n          if (repsinfo.readData()) {\n            log.logDebug(STRING_KITCHEN, \"Finding repository [\" + optionRepname + \"]\");\n            repinfo = repsinfo.findRepository(optionRepname.toString());\n            if (repinfo != null) {\n              // Define and connect to the repository...\n              log.logDebug(STRING_KITCHEN, \"Allocate & connect to repository.\");\n              repository = new Repository(log, repinfo, userinfo);\n              if (repository.connect(\"Kitchen commandline\")) {\n                RepositoryDirectory directory = repository.getDirectoryTree(); // Default = root\n\n                // Find the directory name if one is specified...\n                if (!Const.isEmpty(optionDirname)) {\n                  directory = repository.getDirectoryTree().findDirectory(optionDirname.toString());\n                }\n\n                if (directory != null) {\n                  // Check username, password\n                  log.logDebug(STRING_KITCHEN, \"Check supplied username and password.\");\n                  userinfo =\n                      new UserInfo(\n                          repository, optionUsername.toString(), optionPassword.toString());\n                  if (userinfo.getID() > 0) {\n                    // Load a job\n                    if (!Const.isEmpty(optionJobname)) {\n                      log.logDebug(STRING_KITCHEN, \"Load the job info...\");\n                      jobMeta = new JobMeta(log, repository, optionJobname.toString(), directory);\n                      log.logDebug(STRING_KITCHEN, \"Allocate job...\");\n                      job = new Job(log, stepLoader, repository, jobMeta);\n                    } else if (\"Y\".equalsIgnoreCase(optionListjobs.toString())) {\n                      // List the jobs in the repository\n                      log.logDebug(\n                          STRING_KITCHEN, \"Getting list of jobs in directory: \" + directory);\n                      String[] jobnames = repository.getJobNames(directory.getID());\n                      for (int i = 0; i < jobnames.length; i++) {\n                        log.logError(jobnames[i], MODULE);\n                      }\n                    } else if (\"Y\".equalsIgnoreCase(optionListdir.toString())) {\n                      // List the directories in the repository\n                      String[] dirnames = repository.getDirectoryNames(directory.getID());\n                      for (int i = 0; i < dirnames.length; i++) {\n                        log.logError(dirnames[i], MODULE);\n                      }\n                    }\n                  } else {\n                    log.logError(\"ERROR: Can't verify username and password.\", MODULE);\n                    userinfo = null;\n                    repinfo = null;\n                  }\n                } else {\n                  log.logError(\n                      \"ERROR: Can't find the supplied directory [\" + optionDirname + \"]\", MODULE);\n                  userinfo = null;\n                  repinfo = null;\n                }\n              } else {\n                log.logError(\"ERROR: Can't connect to the repository.\", MODULE);\n              }\n            } else {\n              log.logError(\"ERROR: No repository provided, can't load job.\", MODULE);\n            }\n          } else {\n            log.logError(\"ERROR: No repositories defined on this system.\", MODULE);\n          }\n        }\n\n        // Try to load if from file anyway.\n        if (!Const.isEmpty(optionFilename) && job == null) {\n          jobMeta = new JobMeta(log, optionFilename.toString(), null, null);\n          job = new Job(log, stepLoader, null, jobMeta);\n        }\n      } else if (\"Y\".equalsIgnoreCase(optionListrep.toString())) {\n        RepositoriesMeta ri = new RepositoriesMeta(log);\n        if (ri.readData()) {\n          log.logError(\"List of repositories:\", MODULE);\n          for (int i = 0; i < ri.nrRepositories(); i++) {\n            RepositoryMeta rinfo = ri.getRepository(i);\n            log.logError(\n                \"#\" + (i + 1) + \" : \" + rinfo.getName() + \" [\" + rinfo.getDescription() + \"] \",\n                MODULE);\n          }\n        } else {\n          log.logError(\"ERROR: Unable to read/parse the repositories XML file.\", MODULE);\n        }\n      }\n    } catch (KettleException e) {\n      job = null;\n      jobMeta = null;\n      log.logError(\"Processing stopped because of an error: \" + e.getMessage(), MODULE);\n    }\n\n    if (job == null) {\n      if (!\"Y\".equalsIgnoreCase(optionListjobs.toString())\n          && !\"Y\".equalsIgnoreCase(optionListdir.toString())\n          && !\"Y\".equalsIgnoreCase(optionListrep.toString())) {\n        log.logError(\"ERROR: Kitchen can't continue because the job couldn't be loaded.\", MODULE);\n      }\n    }\n\n    Result result = null;\n\n    // int returnCode=0;\n\n    try {\n      job.initializeVariablesFrom(null);\n      if (jobParameters != null) {\n        job.getJobMeta().setInternalKettleVariables(job);\n        final Set<String> stringSet = jobParameters.keySet();\n        for (String key : stringSet) {\n          job.setParameterValue(key, jobParameters.get(key));\n          job.setVariable(key, jobParameters.get(key));\n        }\n      }\n\n      // set the path to where the transformation files are located\n      job.setVariable(\"transformationsPath\", jobDirPath);\n\n      // set all parameters as internal variables\n      job.getJobMeta().setInternalKettleVariables(job);\n      result = job.execute(); // Execute the selected job.\n      job.endProcessing(\"end\", result); // The bookkeeping...\n    } catch (KettleJobException je) {\n      if (result == null) {\n        result = new Result();\n      }\n      result.setNrErrors(1L);\n\n      try {\n        job.endProcessing(\"error\", result);\n      } catch (KettleJobException je2) {\n        log.logError(job.getName(), \"A serious error occured : \" + je2.getMessage());\n        // returnCode = 2;\n      }\n    } finally {\n      if (repository != null) {\n        repository.disconnect();\n      }\n    }\n\n    log.logMinimal(STRING_KITCHEN, \"Finished!\");\n\n    if (result != null && result.getNrErrors() != 0) {\n      log.logError(STRING_KITCHEN, \"Finished with errors\");\n      // returnCode = 1;\n    }\n    cal = Calendar.getInstance();\n    stop = cal.getTime();\n    String begin = df.format(start).toString();\n    String end = df.format(stop).toString();\n\n    log.logMinimal(STRING_KITCHEN, \"Start=\" + begin + \", Stop=\" + end);\n    long millis = stop.getTime() - start.getTime();\n    log.logMinimal(STRING_KITCHEN, \"Processing ended after \" + (millis / 1000) + \" seconds.\");\n  }\n"}, {"dataset": "parse", "exampleID": 7828, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 518, "focalAPIEnd": 552, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HubSpot/jmte/tree/master/test/com/floreysoft/jmte/AbstractEngineTest.java", "rawCode": "  @Test\n  public void callable() throws Exception {\n    Callable<Date> date =\n        new Callable<Date>() {\n\n          @Override\n          public Date call() throws Exception {\n            return new Date(0);\n          }\n        };\n    Map<String, Object> model = new HashMap<String, Object>();\n    model.put(\"date\", date);\n\n    String patternToUse = \"yyyy.MM.dd HH:mm:ss z\";\n    String output =\n        ENGINE_WITH_NAMED_RENDERERS.transform(\"${date;date(\" + patternToUse + \")}\", model);\n\n    DateFormat dateFormat = new SimpleDateFormat(patternToUse);\n    String format = dateFormat.format(new Date(0));\n\n    assertEquals(clearTimezone(format), clearTimezone(output));\n  }\n"}, {"dataset": "parse", "exampleID": 7829, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "PlatformException", "exceptionHandlingCall": ["printStackTrace()", "setSuccess(*)", "getMessage()", "setMessage(*)"], "tryExpressionStart": 188, "tryExpressionEnd": 192, "tryBlockStart": 188, "tryBlockEnd": 1134, "catchExpressionStart": 851, "catchExpressionEnd": 879, "catchBlockStart": 851, "catchBlockEnd": 996, "exceptionHandlingCallStart": [887, 914, 974, 955], "exceptionHandlingCallEnd": [906, 947, 988, 989], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 511, "focalAPIEnd": 543, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [563], "useEnd": [592], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eastseven/tsm/tree/master/tsm/src/main/java/com/justinmobile/tsm/application/web/ApplicationVersionController.java", "rawCode": "  @RequestMapping\n  public @ResponseBody JsonMessage subReportFinishTest(\n      HttpServletRequest request, @RequestParam Long appverId) {\n    JsonMessage message = new JsonMessage();\n    try {\n      ApplicationVersionTestReport testReport = new ApplicationVersionTestReport();\n      SpringMVCUtils.bindObject(request, testReport);\n      String year = request.getParameter(\"year\");\n      String month = request.getParameter(\"month\");\n      String day = request.getParameter(\"day\");\n      SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\n      Date date = sdf.parse(year + month + day);\n      Calendar calendar = Calendar.getInstance();\n      calendar.setTime(date);\n      testReport.setTestDate(calendar);\n      String subType = request.getParameter(\"subType\");\n      applicationVersionManager.finishTest(testReport, appverId, subType);\n    } catch (PlatformException e) {\n      e.printStackTrace();\n      message.setSuccess(Boolean.FALSE);\n      message.setMessage(e.getMessage());\n    } catch (Exception e) {\n      e.printStackTrace();\n      message.setSuccess(Boolean.FALSE);\n      message.setMessage(e.getMessage());\n    }\n    return message;\n  }\n"}, {"dataset": "parse", "exampleID": 7830, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 1090, "focalAPIEnd": 1124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cell(Object,format)"], "useStart": [1334], "useEnd": [1344], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Qi4j/qi4j-sdk/tree/master/libraries/rest-common/src/main/java/org/qi4j/library/rest/common/table/TableBuilder.java", "rawCode": "  public TableBuilder rows(Iterable<?> rowObjects) {\n    boolean no_format = false;\n    boolean no_values = false;\n    if (tableQuery != null && tableQuery.options() != null) {\n      if (tableQuery.options().contains(\"no_format\")) no_format = true;\n      if (tableQuery != null && tableQuery.options().contains(\"no_values\")) no_values = true;\n    }\n\n    for (Object rowObject : rowObjects) {\n      row();\n      for (Column column : tableBuilder.prototype().cols().get()) {\n        Object v = null;\n        String f = null;\n        Function valueFunction = columns.get(column.id().get()).getValueFunction();\n        if (!no_values && valueFunction != null) v = valueFunction.map(rowObject);\n        Function formattedFunction = columns.get(column.id().get()).getFormattedFunction();\n        if (!no_format && formattedFunction != null) f = (String) formattedFunction.map(rowObject);\n        else if (v != null) {\n          if (column.columnType().get().equals(Table.DATETIME)) f = Dates.toUtcString((Date) v);\n          else if (column.columnType().get().equals(Table.DATE))\n            f = new SimpleDateFormat(\"yyyy-MM-dd\").format((Date) v);\n          else if (column.columnType().get().equals(Table.TIME_OF_DAY))\n            f = new SimpleDateFormat(\"HH:mm:ss\").format((Date) v);\n          else f = v.toString();\n        }\n\n        cell(v, f);\n      }\n      endRow();\n    }\n\n    return this;\n  }\n"}, {"dataset": "parse", "exampleID": 7831, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 493, "focalAPIEnd": 525, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spontecorp/ferretotalserver/tree/master/src/java/com/spontecorp/ferretotalserver/controller/reporte/JasperManagement.java", "rawCode": "  /**\n   * Reporte Encuestas Para Preguntas de Tipo Númerico, Selección y Calificación\n   *\n   * @param parametros\n   * @param lista\n   * @param extension\n   * @param nombreJasper\n   * @param nombreReporte\n   * @throws JRException\n   * @throws IOException\n   */\n  public void FillReportEncuesta(\n      Map parametros,\n      List<Numericas> lista,\n      String extension,\n      String nombreJasper,\n      String nombreReporte)\n      throws JRException, IOException {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd\");\n    File file = new File(nombreJasper);\n    JasperReport reporte = (JasperReport) JRLoader.loadObject(file);\n    JRBeanCollectionDataSource jbs = new JRBeanCollectionDataSource(lista);\n    JasperPrint jasperPrint = JasperFillManager.fillReport(reporte, parametros, jbs);\n    HttpServletResponse httpServletResponse =\n        (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();\n    httpServletResponse.addHeader(\n        \"Content-disposition\",\n        \"attachment; filename=\" + nombreReporte + \"_\" + sdf.format((new Date())) + \".\" + extension);\n\n    ServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();\n\n    if (\"PDF\".equals(extension)) {\n      JasperExportManager.exportReportToPdfStream(jasperPrint, servletOutputStream);\n    } else {\n      httpServletResponse.setContentType(\"application/vnd.ms-excel\");\n      JRXlsExporter xlsxExporter = new JRXlsExporter();\n      xlsxExporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);\n      xlsxExporter.setParameter(JRExporterParameter.OUTPUT_STREAM, servletOutputStream);\n      xlsxExporter.exportReport();\n    }\n    FacesContext.getCurrentInstance().responseComplete();\n  }\n"}, {"dataset": "parse", "exampleID": 7832, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 160, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ralscha/extdirectspring/tree/master/src/test/java/ch/ralscha/extdirectspring/provider/PollProvider.java", "rawCode": "  @ExtDirectMethod(value = ExtDirectMethodType.POLL, group = \"group2\")\n  public String message6() {\n    Date now = new Date();\n    SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy/MM/dd 'at' hh:mm:ss\");\n    return \"Successfully polled at: \" + formatter.format(now);\n  }\n"}, {"dataset": "parse", "exampleID": 7833, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 1979, "focalAPIEnd": 2011, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/payhum/codebase/tree/master/Payhum/src/com/openhr/zipfile/PayZipDownload.java", "rawCode": "  public ActionForward execute(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n\n    ConfigData configpay = ConfigDataFactory.findByName(PayhumConstants.PAYROLLDATE_ID);\n    String payRunDate = configpay.getConfigValue();\n\n    Calendar currDtCal = Calendar.getInstance();\n\n    // Zero out the hour, minute, second, and millisecond\n    currDtCal.set(Calendar.HOUR_OF_DAY, 0);\n    currDtCal.set(Calendar.MINUTE, 0);\n    currDtCal.set(Calendar.SECOND, 0);\n    currDtCal.set(Calendar.MILLISECOND, 0);\n\n    List<PayrollDate> payrollDates = new ArrayList<PayrollDate>();\n    List<EmpPayrollMap> employees = new ArrayList<EmpPayrollMap>();\n\n    List<PayrollDate> pds = PayrollFactory.findPayrollDateByID(Integer.parseInt(payRunDate));\n\n    payrollDates.addAll(PayrollFactory.findPayrollDateByBranch(pds.get(0).getBranchId().getId()));\n\n    List<Payroll> prd =\n        EmpPayTaxFactroy.findPayrollByIDAndBranch(payRunDate, pds.get(0).getBranchId().getId());\n    employees.addAll(EmpPayTaxFactroy.findTaxMonthlyForEmployeeByDate(prd.get(0)));\n\n    List<Payroll> payRuns =\n        PayrollFactory.findAllPayrollRunsPerBranch(pds.get(0).getBranchId().getId());\n    Integer divNo = PayhumUtil.remainingPaycycles(payrollDates, payRuns);\n\n    Integer mulNO =\n        PayrollFactory.findAllPayrollRunsPerBranch(prd.get(0).getBranchId().getId()).size();\n\n    boolean monthly = false;\n    List<PayPeriodData> payPeriods = PayPeriodFactory.findAll();\n    for (PayPeriodData ppd : payPeriods) {\n      if (ppd.getPeriodName().equalsIgnoreCase(\"Monthly\")) {\n        monthly = true;\n        break;\n      }\n    }\n\n    Date now = new Date();\n    Calendar cal = Calendar.getInstance();\n    cal.setTime(pds.get(0).getRunDateofDateObject());\n    cal.set(Calendar.HOUR_OF_DAY, 0);\n    cal.set(Calendar.MINUTE, 0);\n    cal.set(Calendar.SECOND, 0);\n    cal.set(Calendar.MILLISECOND, 0);\n\n    String monthYear = new SimpleDateFormat(\"MMM_yyyy\").format(now);\n\n    String fileName =\n        \"Paystubs_\"\n            + pds.get(0).getBranchId().getCompanyId().getName()\n            + \"_\"\n            + pds.get(0).getBranchId().getName()\n            + \"_Payroll_\"\n            + monthYear\n            + \".zip\";\n\n    fileName = fileName.replace(\" \", \"_\");\n\n    response.setContentType(\"application/zip\");\n    response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n\n    ServletOutputStream os = response.getOutputStream();\n\n    ZipOutputStream zos = new ZipOutputStream(os);\n\n    PdfFactory.zipFileDownload(zos, employees, mulNO, divNo, monthly, pds.get(0));\n\n    zos.flush();\n\n    zos.close();\n\n    os.flush();\n    os.close();\n\n    return mapping.findForward(\"masteradmin.form\");\n  }\n"}, {"dataset": "parse", "exampleID": 7834, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 332, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/tigervnc/tree/master/trunk/java/com/tigervnc/rfb/Configuration.java", "rawCode": "  public static void save(String filename) {\n    PrintWriter pw = null;\n    try {\n      pw = new PrintWriter(filename, \"UTF-8\");\n    } catch (java.lang.Exception e) {\n      vlog.error(\"Error opening config file:\" + e.getMessage());\n      return;\n    }\n\n    pw.println(\"# TigerVNC viewer configuration\");\n    DateFormat dateFormat = new SimpleDateFormat(\"E MMM d k:m:s z yyyy\");\n    Date date = new Date();\n    pw.println(\"# \" + dateFormat.format(date));\n    VoidParameter current = Configuration.global().head;\n    while (current != null) {\n      String name = current.getName();\n      String value = current.getValueStr();\n      if (!name.equals(\"Server\")\n          && !name.equals(\"Port\")\n          && value != null\n          && value != current.getDefaultStr()) pw.println(name + \"=\" + current.getValueStr());\n      current = current._next;\n    }\n    pw.flush();\n    pw.close();\n  }\n"}, {"dataset": "parse", "exampleID": 7835, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 92, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [475], "useEnd": [490], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zendtech/zendserver-sdk-java/tree/master/zendserver-sdk-java/org.zend.sdk/sdklib/org/zend/sdklib/monitor/ZendMonitor.java", "rawCode": "  private Date parseISO8601(String input) throws ParseException {\n    SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssz\");\n    if (input.endsWith(\"Z\")) {\n      input = input.substring(0, input.length() - 1) + \"GMT-00:00\";\n    } else {\n      int position = 6;\n      String begin = input.substring(0, input.length() - position);\n      String end = input.substring(input.length() - position, input.length());\n      input = begin + \"GMT\" + end;\n    }\n    return df.parse(input);\n  }\n"}, {"dataset": "parse", "exampleID": 7836, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 147, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/1and1/Activiti-internal/tree/master/modules/activiti-engine/src/main/java/org/activiti/engine/impl/jobexecutor/TimerDeclarationImpl.java", "rawCode": "  private String prepareRepeat(String dueDate) {\n    if (dueDate.startsWith(\"R\") && dueDate.split(\"/\").length == 2) {\n      SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n      return dueDate.replace(\"/\", \"/\" + sdf.format(ClockUtil.getCurrentTime()) + \"/\");\n    }\n    return dueDate;\n  }\n"}, {"dataset": "parse", "exampleID": 7837, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 1434, "focalAPIEnd": 1477, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Imaginea/pancake-android/tree/master/src/com/imaginea/android/sugarcrm/sync/SugarSyncManager.java", "rawCode": "  /**\n   * Synchronize raw contacts\n   *\n   * @param context The context of Authenticator Activity\n   * @param account The username for the account\n   * @param sessionId The session Id associated with sugarcrm session\n   * @param moduleName The name of the module to sync\n   * @param syncResult a {@link android.content.SyncResult} object.\n   * @throws com.imaginea.android.sugarcrm.util.SugarCrmException if any.\n   */\n  public static synchronized void syncModulesData(\n      Context context, String account, String sessionId, String moduleName, SyncResult syncResult)\n      throws SugarCrmException {\n    long rawId = 0;\n    final ContentResolver resolver = context.getContentResolver();\n    final BatchOperation batchOperation = new BatchOperation(resolver);\n    if (databaseHelper == null) databaseHelper = new DatabaseHelper(context);\n    int offset = 0;\n    int maxResults = 20;\n    String deleted = \"\";\n    SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(context);\n    // TODO use a constant and remove this as we start from the login screen\n    String url = pref.getString(Util.PREF_REST_URL, context.getString(R.string.defaultUrl));\n\n    String[] projections = databaseHelper.getModuleProjections(moduleName);\n    String orderBy = databaseHelper.getModuleSortOrder(moduleName);\n    setLinkNameToFieldsArray(moduleName);\n\n    // TODO - Fetching based on dates\n    if (mDateFormat == null) mDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    // mDateFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n\n    Date startDate = new Date();\n    startDate.setMonth(startDate.getMonth() - 1);\n    long time = pref.getLong(Util.PREF_SYNC_START_TIME, startDate.getTime());\n    startDate.setTime(time);\n\n    Date endDate = new Date();\n    endDate.setTime(System.currentTimeMillis());\n    time = pref.getLong(Util.PREF_SYNC_END_TIME, endDate.getTime());\n    endDate.setTime(time);\n\n    mQuery =\n        moduleName\n            + \".\"\n            + ModuleFields.DATE_MODIFIED\n            + \">'\"\n            + mDateFormat.format(startDate)\n            + \"' AND \"\n            + moduleName\n            + \".\"\n            + ModuleFields.DATE_MODIFIED\n            + \"<='\"\n            + mDateFormat.format(endDate)\n            + \"'\";\n\n    while (true) {\n      if (projections == null || projections.length == 0) break;\n\n      SugarBean[] sBeans =\n          RestUtil.getEntryList(\n              url,\n              sessionId,\n              moduleName,\n              mQuery,\n              orderBy,\n              \"\" + offset,\n              projections,\n              mLinkNameToFieldsArray,\n              \"\" + maxResults,\n              deleted);\n      if (Log.isLoggable(LOG_TAG, Log.DEBUG))\n        Log.d(LOG_TAG, \"fetching \" + offset + \"to \" + (offset + maxResults));\n      if (sBeans == null || sBeans.length == 0) break;\n      if (Log.isLoggable(LOG_TAG, Log.DEBUG)) Log.d(LOG_TAG, \"In Syncmanager\");\n\n      for (SugarBean sBean : sBeans) {\n\n        String beandIdValue = sBean.getFieldValue(mBeanIdField);\n        // Check to see if the contact needs to be inserted or updated\n        rawId = lookupRawId(resolver, moduleName, beandIdValue);\n        if (Log.isLoggable(LOG_TAG, Log.VERBOSE))\n          Log.v(LOG_TAG, \"beanId/rawid:\" + beandIdValue + \"/\" + rawId);\n\n        String name =\n            TextUtils.isEmpty(sBean.getFieldValue(ModuleFields.NAME))\n                ? sBean.getFieldValue(ModuleFields.FIRST_NAME)\n                : sBean.getFieldValue(ModuleFields.NAME);\n\n        if (rawId != 0) {\n          if (!sBean.getFieldValue(ModuleFields.DELETED).equals(Util.DELETED_ITEM)) {\n            Log.d(LOG_TAG, \"updating... \" + moduleName + \": \" + rawId + \") \" + name);\n            updateModuleItem(context, resolver, account, moduleName, sBean, rawId, batchOperation);\n          } else {\n            // delete module item - never delete the item here, just update the deleted\n            // flag\n            Log.d(LOG_TAG, \"deleting... \" + moduleName + \": \" + rawId + \") \" + name);\n            deleteModuleItem(context, rawId, moduleName, batchOperation);\n          }\n        } else {\n          // add new moduleItem\n          // Log.v(LOG_TAG, \"In addModuleItem\");\n          if (!sBean.getFieldValue(ModuleFields.DELETED).equals(Util.DELETED_ITEM)) {\n            Log.d(LOG_TAG, \"inserting... \" + moduleName + \": \" + \" \" + name);\n            addModuleItem(context, account, sBean, moduleName, batchOperation);\n          }\n        }\n        // syncRelationships(context, account, sessionId, moduleName, sBean,\n        // batchOperation);\n        // A sync adapter should batch operations on multiple contacts,\n        // because it will make a dramatic performance difference.\n        if (batchOperation.size() >= 50) {\n          batchOperation.execute();\n        }\n      }\n      batchOperation.execute();\n      offset = offset + maxResults;\n      for (SugarBean sBean : sBeans) {\n        syncRelationshipsData(context, account, sessionId, moduleName, sBean, batchOperation);\n        // A sync adapter should batch operations on multiple contacts,\n        // because it will make a dramatic performance difference.\n        if (batchOperation.size() >= 50) {\n          batchOperation.execute();\n        }\n      }\n      batchOperation.execute();\n    }\n    mLinkNameToFieldsArray.clear();\n    // syncRelationships(context, account, sessionId, moduleName);\n    databaseHelper.close();\n    databaseHelper = null;\n  }\n"}, {"dataset": "parse", "exampleID": 7838, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 113, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [171], "useEnd": [200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferquies/2dam/tree/master/AD/Tema 2/h2/src/main/org/h2/message/TraceSystem.java", "rawCode": "  private synchronized String format(String module, String s) {\n    if (dateFormat == null) {\n      dateFormat = new SimpleDateFormat(\"MM-dd HH:mm:ss \");\n    }\n    return dateFormat.format(new Date()) + module + \": \" + s;\n  }\n"}, {"dataset": "parse", "exampleID": 7839, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 418, "focalAPIEnd": 450, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)"], "useStart": [456], "useEnd": [507], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elka-projekt/cs-voltdb/tree/master/src/frontend/org/voltdb/jdbc/JDBC4PerfCounter.java", "rawCode": "  /**\n   * Gets a representation of this counter as a string detailing the statistics tracked by this\n   * counter.\n   *\n   * @param useSimpleFormat the flag indicating whether to use a short one-line format, or detailed\n   *     statistics including latency bucketing.\n   * @return the string representation of this counter.\n   */\n  public String toString(boolean useSimpleFormat) {\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n    dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    long elapsedDuration = (this.StartTime == Long.MAX_VALUE) ? 1 : this.EndTime - this.StartTime;\n    if (useSimpleFormat)\n      return String.format(\n          \"%8s | Txn.: %,11d%s @ %,11.1f TPS | Lat. = %7d < %7.2f < %7d\\n\",\n          dateFormat.format(new Date(Math.round(elapsedDuration / 1000d) * 1000l)),\n          this.cnt,\n          this.err > 0 ? String.format(\" [!%,11d]\", this.err) : \"\",\n          (this.cnt * 1000d / (double) elapsedDuration),\n          this.min == 999999999l ? 0l : this.min,\n          (double) this.tot / (double) this.cnt,\n          this.max == -1l ? 0l : this.max);\n    else {\n      long[] coarseLat = new long[9];\n      // Roll up the latencies below 100ms\n      for (int i = 0; i < 4; i++) {\n        for (int j = 0; j < 25; j++) {\n          coarseLat[i] += this.lat[i * 25 + j];\n        }\n      }\n      // Roll up the rest\n      for (int i = 4; i < 8; i++) {\n        coarseLat[i] = this.lat[100 + i - 4];\n      }\n      for (int j = 104; j < this.lat.length; j++) {\n        coarseLat[8] += this.lat[j];\n      }\n\n      return String.format(\n          \"-------------------------------------------------------------------------------------\\n\"\n              + \"Final: | Txn.: %,11d%s @ %,11.1f TPS | Lat. = %7d < %7.2f < %7d\\n\"\n              + \"-------------------------------------------------------------------------------------\\n\"\n              + \"Lat.: 25 < 50 < 75 < 100 < 150 < 200 < 250 < 300 < 300+\\n\"\n              + \"-------------------------------------------------------------------------------------\\n\"\n              + \"%% %6.2f | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f | %6.2f\\n\",\n          this.cnt,\n          this.err > 0 ? String.format(\" [!%,11d]\", this.err) : \"\",\n          (this.cnt * 1000d / elapsedDuration),\n          this.min == 999999999l ? 0l : this.min,\n          (double) this.tot / (double) this.cnt,\n          this.max == -1l ? 0l : this.max,\n          100 * (double) coarseLat[0] / this.cnt,\n          100 * (double) coarseLat[1] / this.cnt,\n          100 * (double) coarseLat[2] / this.cnt,\n          100 * (double) coarseLat[3] / this.cnt,\n          100 * (double) coarseLat[4] / this.cnt,\n          100 * (double) coarseLat[5] / this.cnt,\n          100 * (double) coarseLat[6] / this.cnt,\n          100 * (double) coarseLat[7] / this.cnt,\n          100 * (double) coarseLat[8] / this.cnt);\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7840, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["Client.destroy()", "println(String)"], "tryExpressionStart": 294, "tryExpressionEnd": 298, "tryBlockStart": 294, "tryBlockEnd": 1605, "catchExpressionStart": 1513, "catchExpressionEnd": 1533, "catchBlockStart": 1513, "catchBlockEnd": 1605, "exceptionHandlingCallStart": [1455, 1565], "exceptionHandlingCallEnd": [1471, 1598], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 1112, "focalAPIEnd": 1144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)", "format.parse(String)"], "useStart": [1165, 1210], "useEnd": [1189, 1233], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/charlestontelles/INN372-web/tree/master/SolarPowerCalcWeb/src/au/edu/qut/inn372/greenhat/bean/Calculator.java", "rawCode": "  /**\n   * Call a restful webservice to get the total daylighthours based on the latitude and longitude\n   *\n   * @param latitude\n   * @param longitude\n   * @return daylighthours\n   */\n  private double getDayLightHours(double latitude, double longitude) {\n    Client client = new Client();\n    try {\n\n      WebResource webResource =\n          client.resource(\n              \"http://www.earthtools.org/sun/\" + latitude + \"/\" + longitude + \"/22/4/0/0\");\n      client.setConnectTimeout(3000);\n      client.setReadTimeout(3000);\n\n      com.sun.jersey.api.representation.Form input = new Form();\n\n      // send HTTP POST\n      ClientResponse response = webResource.type(\"text/xml\").post(ClientResponse.class, input);\n\n      String output = response.getEntity(String.class);\n\n      String sunrise =\n          output.substring(output.indexOf(\"<sunrise>\") + 9, output.indexOf(\"</sunrise>\"));\n      String sunset = output.substring(output.indexOf(\"<sunset>\") + 8, output.indexOf(\"</sunset>\"));\n\n      System.out.println(\"sunrise: \" + sunrise);\n      System.out.println(\"sunset: \" + sunset);\n\n      DateFormat formatter = new SimpleDateFormat(\"hh:mm:ss\");\n      Date date1 = formatter.parse(sunrise);\n      Date date2 = formatter.parse(sunset);\n\n      // Get msec from each, and subtract.\n      long diff = date2.getTime() - date1.getTime();\n      double diffInHours = diff / ((double) 1000 * 60 * 60);\n\n      System.out.println(\"diff: \" + diffInHours / 3);\n\n      client.destroy();\n\n      return diffInHours / 2.5;\n\n    } catch (Exception e) {\n      client.destroy();\n      System.out.println(\"error: \" + e);\n    }\n    return 1;\n  }\n"}, {"dataset": "parse", "exampleID": 7841, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 519, "focalAPIEnd": 546, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [568], "useEnd": [584], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ovitas/compass2/tree/master/core/src/main/java/no/ovitas/compass2/util/DateUtil.java", "rawCode": "  /**\n   * This method generates a string representation of a date's date/time in the format you specify\n   * on input\n   *\n   * @param aMask the date pattern the string is in\n   * @param aDate a date object\n   * @return a formatted string representation of the date\n   * @see java.text.SimpleDateFormat\n   */\n  public static String getDateTime(String aMask, Date aDate) {\n    SimpleDateFormat df = null;\n    String returnValue = \"\";\n\n    if (aDate == null) {\n      log.error(\"aDate is null!\");\n    } else {\n      df = new SimpleDateFormat(aMask);\n      returnValue = df.format(aDate);\n    }\n\n    return (returnValue);\n  }\n"}, {"dataset": "parse", "exampleID": 7842, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 1501, "focalAPIEnd": 1542, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/comsince/myappweixin/tree/master/phoneBook/src/com/comsince/phonebook/view/pulltorefreshlistview/RefreshListView.java", "rawCode": "  private void init() {\n    mHeader = mInflater.inflate(R.layout.include_pull_to_refreshing_header, null);\n    mHtvTitle = (HandyTextView) mHeader.findViewById(R.id.refreshing_header_htv_title);\n    mHtvTime = (HandyTextView) mHeader.findViewById(R.id.refreshing_header_htv_time);\n    mIvArrow = (ImageView) mHeader.findViewById(R.id.refreshing_header_iv_arrow);\n    mIvLoading = (ImageView) mHeader.findViewById(R.id.refreshing_header_iv_loading);\n    mIvCancel = (ImageView) mHeader.findViewById(R.id.refreshing_header_iv_cancel);\n\n    mBottom = mInflater.inflate(R.layout.include_pull_to_refreshing_bottom, null);\n    mBottomLayout = (LinearLayout) mBottom.findViewById(R.id.refreshing_bottom_layout_container);\n\n    // 初始化cancel事件处理\n    mIvCancel.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View arg0) {\n            if (mOnCancelListener != null && mIsCancelable) {\n              mOnCancelListener.onCancel();\n            }\n          }\n        });\n\n    measureView(mHeader);\n    // 将刷新头加入到listview的Header上\n    addHeaderView(mHeader);\n    mHeaderHeight = mHeader.getMeasuredHeight();\n    mHeader.setPadding(0, -1 * mHeaderHeight, 0, 0);\n    mHeader.invalidate();\n\n    measureView(mBottom);\n    // 加入底部\n    addFooterView(mBottom);\n    mBottomHeight = mBottom.getMeasuredHeight();\n    mBottom.setPadding(0, -1 * mBottomHeight, 0, 0);\n    mBottom.invalidate();\n\n    // 初始化开始时基本控件值\n    mHtvTitle.setText(\"下拉刷新\");\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm\");\n    String date = format.format(new Date());\n    mHtvTime.setText(\"最后刷新: \" + date);\n\n    mPullAnimation =\n        new android.view.animation.RotateAnimation(\n            0,\n            -180,\n            RotateAnimation.RELATIVE_TO_SELF,\n            0.5f,\n            RotateAnimation.RELATIVE_TO_SELF,\n            0.5f);\n    mPullAnimation.setInterpolator(new LinearInterpolator());\n    mPullAnimation.setDuration(250);\n    mPullAnimation.setFillAfter(true);\n\n    mReverseAnimation =\n        new android.view.animation.RotateAnimation(\n            -180,\n            0,\n            RotateAnimation.RELATIVE_TO_SELF,\n            0.5f,\n            RotateAnimation.RELATIVE_TO_SELF,\n            0.5f);\n    mReverseAnimation.setInterpolator(new LinearInterpolator());\n    mReverseAnimation.setDuration(200);\n    mReverseAnimation.setFillAfter(true);\n\n    mLoadingAnimation = AnimationUtils.loadAnimation(mContext, R.anim.loading);\n\n    /** 初始化时设置可刷新 */\n    mIsRefreshable = false;\n    /** 默认状态隐藏* */\n    mState = DONE;\n  }\n"}, {"dataset": "parse", "exampleID": 7843, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 186, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [232], "useEnd": [271], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/angusmacdonald/h2o/tree/master/src/test/org/h2o/test/h2/H2TestBase.java", "rawCode": "  /**\n   * Print the current time and a message to system out.\n   *\n   * @param s the message\n   */\n  protected void printTime(final String s) {\n\n    final SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss\");\n    println(dateFormat.format(new java.util.Date()) + \" \" + s);\n  }\n"}, {"dataset": "parse", "exampleID": 7844, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 154, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)", "format.parse(String)", "format.format(Date)", "format.format(Date)", "format.format(Date)"], "useStart": [367, 404, 642, 689, 813], "useEnd": [386, 421, 663, 708, 836], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jarvis-su/codes/tree/master/dataOperation/src/main/java/sqlite/Main.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    // method();\n    String formatStr = \"yyyy-MM-dd HH:mm:ss\";\n    SimpleDateFormat sdf = new SimpleDateFormat(formatStr);\n    String beginStr = \"2013-06-04 18:34:49\";\n    String endStr = \"2013-06-04 19:00:00\";\n    Date beginDate = new Date();\n    Date endDate = new Date();\n    try {\n      beginDate = sdf.parse(beginStr);\n      endDate = sdf.parse(endStr);\n\n      float hours = (float) ((endDate.getTime() - beginDate.getTime()) / 1000.0 / 60.0 / 60.0);\n      System.out.println(hours);\n    } catch (ParseException e) {\n      e.printStackTrace();\n    }\n    System.out.println(sdf.format(beginDate));\n    System.out.println(sdf.format(endDate));\n\n    Calendar c = Calendar.getInstance();\n    c.set(Calendar.HOUR_OF_DAY, 20);\n    System.out.println(sdf.format(c.getTime()));\n\n    getNonWorkingHours(beginDate, endDate);\n  }\n"}, {"dataset": "parse", "exampleID": 7845, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 388, "focalAPIEnd": 429, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.19/kernel-impl/src/main/java/org/sakaiproject/time/impl/BasicTimeService.java", "rawCode": "  /** Final initialization, once all dependencies are set. */\n  public void init() {\n    /** The time zone for our GMT times. */\n    M_tz = TimeZone.getTimeZone(\"GMT\");\n\n    M_log.info(\"init()\");\n\n    /** a calendar to clone for GMT time construction */\n    M_GCal = getCalendar(M_tz, 0, 0, 0, 0, 0, 0, 0);\n\n    // Note: formatting for GMT time representations\n    M_fmtA = (DateFormat) (new SimpleDateFormat(\"yyyyMMddHHmmssSSS\"));\n    M_fmtB = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT);\n    M_fmtC = DateFormat.getTimeInstance(DateFormat.SHORT);\n    M_fmtD = DateFormat.getDateInstance(DateFormat.MEDIUM);\n    M_fmtE = (DateFormat) (new SimpleDateFormat(\"yyyyMMddHHmmss\"));\n    M_fmtG = (DateFormat) (new SimpleDateFormat(\"yyyy/DDD/HH/\")); // that's year, day of year, hour\n\n    M_fmtA.setTimeZone(M_tz);\n    M_fmtB.setTimeZone(M_tz);\n    M_fmtC.setTimeZone(M_tz);\n    M_fmtD.setTimeZone(M_tz);\n    M_fmtE.setTimeZone(M_tz);\n    M_fmtG.setTimeZone(M_tz);\n  }\n"}, {"dataset": "parse", "exampleID": 7846, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 79, "focalAPIEnd": 123, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [79], "useEnd": [136], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/flowerrrr/RMT/tree/master/rmt/src/main/java/de/flower/rmt/util/Dates.java", "rawCode": "  public static String formatDateLongWithWeekday(final Date date) {\n    return new SimpleDateFormat(DATE_LONG_WITH_WEEKDAY).format(date);\n  }\n"}, {"dataset": "parse", "exampleID": 7847, "initialization": ["String pattern = getString(*,String)"], "initializationStart": [140], "initializationEnd": [209], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 231, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)", "format.format(Date)"], "useStart": [339, 476], "useEnd": [363, 491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pdinc-oss/gitblit/tree/master/src/com/gitblit/wicket/WicketUtils.java", "rawCode": "  public static Label createDatestampLabel(\n      String wicketId, Date date, TimeZone timeZone, TimeUtils timeUtils) {\n    String format = GitBlit.getString(Keys.web.datestampLongFormat, \"EEEE, MMMM d, yyyy\");\n    DateFormat df = new SimpleDateFormat(format);\n    if (timeZone == null) {\n      timeZone = GitBlit.getTimezone();\n    }\n    df.setTimeZone(timeZone);\n    String dateString;\n    if (date.getTime() == 0) {\n      dateString = \"--\";\n    } else {\n      dateString = df.format(date);\n    }\n    String title = null;\n    if (TimeUtils.isToday(date)) {\n      title = timeUtils.today();\n    } else if (TimeUtils.isYesterday(date)) {\n      title = timeUtils.yesterday();\n    } else if (date.getTime() <= System.currentTimeMillis()) {\n      // past\n      title = timeUtils.timeAgo(date);\n    }\n    if ((System.currentTimeMillis() - date.getTime()) < 10 * 24 * 60 * 60 * 1000L) {\n      String tmp = dateString;\n      dateString = title;\n      title = tmp;\n    }\n    Label label = new Label(wicketId, dateString);\n    if (!StringUtils.isEmpty(title)) {\n      WicketUtils.setHtmlTooltip(label, title);\n    }\n    return label;\n  }\n"}, {"dataset": "parse", "exampleID": 7848, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 731, "tryExpressionEnd": 735, "tryBlockStart": 731, "tryBlockEnd": 2683, "catchExpressionStart": 2171, "catchExpressionEnd": 2195, "catchBlockStart": 2171, "catchBlockEnd": 2230, "exceptionHandlingCallStart": [2203], "exceptionHandlingCallEnd": [2223], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 971, "focalAPIEnd": 1006, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Timestamp)", "format.parse(String)"], "useStart": [1481, 1516], "useEnd": [1502, 1536], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 2348, "finallyExpressionEnd": 2356, "finallyBlockStart": 2348, "finallyBlockEnd": 2683, "cleanUpCallStart": [2410], "cleanUpCallEnd": [2424], "url": "https://github.com/kef/hieos/tree/master/src/logbrowser/src/java/com/vangent/hieos/logbrowser/servlets/GetDateServlet.java", "rawCode": "  /**\n   * @param req\n   * @param res\n   */\n  public void doGet(HttpServletRequest req, HttpServletResponse res) {\n    PreparedStatement dateStatement = null;\n    Log log = new Log();\n    try {\n      Connection con = log.getConnection();\n      System.out.println(\"LOG (dateStatement) = \" + this.sqlCommand);\n      dateStatement = con.prepareStatement(this.sqlCommand);\n    } catch (SQLException e) {\n      logger.error(e);\n    } catch (LoggerException e) {\n      logger.error(e);\n    }\n    if (dateStatement == null) {\n      try {\n        log.closeConnection();\n        return; // EARLY EXIT: Can not continue processing\n      } catch (LoggerException ex) {\n        logger.error(ex);\n      }\n    }\n    ResultSet result = null;\n    try {\n      result = dateStatement.executeQuery();\n      TreeSet<Date> set = new TreeSet<Date>();\n      SimpleDateFormat sdf = null;\n      SimpleDateFormat sdf2 = null;\n      if (req.getParameter(\"formatDisplayed\") == null) {\n        sdf = new SimpleDateFormat(\"yyyy-MMM dd\");\n      } else {\n        sdf = new SimpleDateFormat(req.getParameter(\"formatDisplayed\"));\n      }\n      if (req.getParameter(\"formatValue\") == null) {\n        sdf2 = new SimpleDateFormat(\"yyyy-MM-dd\");\n      } else {\n        sdf2 = new SimpleDateFormat(req.getParameter(\"formatValue\"));\n      }\n      Timestamp timeStamp = null;\n      String stringTmp = null;\n      Date d = null;\n      while (result.next()) {\n        timeStamp = result.getTimestamp(1);\n        stringTmp = sdf.format(timeStamp);\n        d = sdf.parse(stringTmp);\n        set.add(d);\n      }\n      Object[] stArray = set.toArray();\n      StringBuffer time = new StringBuffer();\n      res.setContentType(\"text/xml\");\n      time.append(\"<select>\");\n      time.append(\"<option value ='0' ></option>\\n\");\n      for (int i = stArray.length - 1; i > -1; i--) {\n        time.append(\n            \"<option value ='\"\n                + sdf2.format((Date) stArray[i])\n                + \"' > \"\n                + sdf.format((Date) stArray[i])\n                + \"</option>\\n\");\n      }\n      time.append(\"</select >\");\n      stArray = null;\n      res.getWriter().write(time.toString());\n      time = null;\n    } catch (SQLException e1) {\n      e1.printStackTrace();\n    } catch (ParseException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (result != null) {\n          result.close();\n        }\n        if (dateStatement != null) {\n          dateStatement.close();\n        }\n        log.closeConnection();\n      } catch (LoggerException ex) {\n        logger.error(ex);\n      } catch (SQLException se) {\n        logger.error(se);\n      }\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7849, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["showShortMsg(Context,String)"], "tryExpressionStart": 2327, "tryExpressionEnd": 2331, "tryBlockStart": 2327, "tryBlockEnd": 2661, "catchExpressionStart": 2560, "catchExpressionEnd": 2580, "catchBlockStart": 2560, "catchBlockEnd": 2661, "exceptionHandlingCallStart": [2590], "exceptionHandlingCallEnd": [2652], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 2461, "focalAPIEnd": 2495, "followUpCheck": "format != null", "checkType": "IF", "followUpCheckExpressionStart": 11703, "followUpCheckExpressionEnd": 11720, "followUpCheckBlockStart": 11703, "followUpCheckBlockEnd": 11743, "use": ["format.toString()", "SimpleDateFormat.format(format)", "SimpleDateFormat.format(format)"], "useStart": [2502, 11727, 11943], "useEnd": [2517, 11742, 11958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ramesesinc/clfc/tree/master/platform/android/PaymentCollectionApp/src/com/rameses/paymentcollectionapp/CollectionSheetInfo.java", "rawCode": "  @Override\n  protected void onStart() {\n    super.onStart();\n    getApp().setCurrentActivity(this);\n    SQLiteDatabase db = getDbHelper().getReadableDatabase();\n    Cursor result = getDbHelper().getCollectionsheetByLoanappid(db, loanappid);\n    db.close();\n\n    String acctname = \"\";\n    String appno = \"\";\n    BigDecimal amountdue = new BigDecimal(\"0\").setScale(2);\n    BigDecimal loanamount = new BigDecimal(\"0\").setScale(2);\n    BigDecimal balance = new BigDecimal(\"0\").setScale(2);\n    BigDecimal interest = new BigDecimal(\"0\").setScale(2);\n    BigDecimal penalty = new BigDecimal(\"0\").setScale(2);\n    BigDecimal others = new BigDecimal(\"0\").setScale(2);\n    int term = 0;\n    String duedate = \"\";\n    String homeaddress = \"\";\n    String collectionaddress = \"\";\n\n    if (result != null && result.getCount() > 0) {\n      result.moveToFirst();\n      sessionid = result.getString(result.getColumnIndex(\"sessionid\"));\n      acctname = result.getString(result.getColumnIndex(\"acctname\"));\n      appno = result.getString(result.getColumnIndex(\"appno\"));\n      String amt = result.getString(result.getColumnIndex(\"amountdue\"));\n      amountdue = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"loanamount\"));\n      loanamount = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"balance\"));\n      balance = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"dailydue\"));\n      dailydue = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"overpaymentamount\"));\n      overpayment = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"interest\"));\n      interest = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"penalty\"));\n      penalty = new BigDecimal(amt).setScale(2);\n      amt = result.getString(result.getColumnIndex(\"others\"));\n      others = new BigDecimal(amt).setScale(2);\n      term = result.getInt(result.getColumnIndex(\"term\"));\n      refno = result.getString(result.getColumnIndex(\"refno\"));\n      homeaddress = result.getString(result.getColumnIndex(\"homeaddress\"));\n      collectionaddress = result.getString(result.getColumnIndex(\"collectionaddress\"));\n      Calendar c = Calendar.getInstance();\n      try {\n        Object date = result.getString(result.getColumnIndex(\"duedate\"));\n        if (!(date instanceof Date))\n          date = new SimpleDateFormat(\"yyyy-MM-dd\").parse(date.toString());\n        c.setTime((Date) date);\n      } catch (Exception e) {\n        ApplicationUtil.showShortMsg(context, \"Error: ParseException\");\n      }\n      /*catch (Exception e) {\n      e.printStackTrace();\n      Toast.makeText(context, \"Error: ParseException\", Toast.LENGTH_SHORT).show();\n      }*/\n      duedate = df.format(c.getTime());\n      totaldays = amountdue.divide(dailydue, 2, BigDecimal.ROUND_HALF_UP).intValue();\n      if (paymenttype.equals(null) || paymenttype.equals(\"\"))\n        paymenttype = result.getString(result.getColumnIndex(\"paymentmethod\"));\n      result.close();\n    }\n\n    ((TextView) findViewById(R.id.tv_info_acctname)).setText(acctname);\n    ((TextView) findViewById(R.id.tv_info_appno)).setText(appno);\n    ((TextView) findViewById(R.id.tv_info_loanamount)).setText(formatValue(loanamount));\n    ((TextView) findViewById(R.id.tv_info_balance)).setText(formatValue(balance));\n    ((TextView) findViewById(R.id.tv_info_dailydue)).setText(formatValue(dailydue));\n    ((TextView) findViewById(R.id.tv_info_amountdue)).setText(formatValue(amountdue));\n    ((TextView) findViewById(R.id.tv_info_overpayment)).setText(formatValue(overpayment));\n    ((TextView) findViewById(R.id.tv_info_duedate)).setText(duedate);\n    ((TextView) findViewById(R.id.tv_info_homeaddress)).setText(homeaddress);\n    ((TextView) findViewById(R.id.tv_info_collectionaddress)).setText(collectionaddress);\n    ((TextView) findViewById(R.id.tv_info_interest)).setText(formatValue(interest));\n    ((TextView) findViewById(R.id.tv_info_penalty)).setText(formatValue(penalty));\n    ((TextView) findViewById(R.id.tv_info_others)).setText(formatValue(others));\n    ((TextView) findViewById(R.id.tv_info_term)).setText(term + \" days\");\n\n    db = getDbHelper().getReadableDatabase();\n    payment = getDbHelper().getPaymentsByAppid(db, loanappid);\n    remarks = getDbHelper().getRemarksByAppid(db, loanappid);\n    notes = getDbHelper().getNotesByAppid(db, loanappid);\n    db.close();\n\n    rl_remarks.setVisibility(View.GONE);\n    RelativeLayout remarks_child = (RelativeLayout) findViewById(R.id.rl_info_remarks);\n    remarks_child.setClickable(true);\n    remarks_child.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            // TODO Auto-generated method stub\n            v.setBackgroundResource(android.R.drawable.list_selector_background);\n          }\n        });\n    remarks_child.setOnLongClickListener(\n        new View.OnLongClickListener() {\n          @Override\n          public boolean onLongClick(View v) {\n            // TODO Auto-generated method stub\n            final View view = v;\n            v.setBackgroundResource(android.R.drawable.list_selector_background);\n            CharSequence[] items = {\"Edit Remarks\", \"Remove Remarks\"};\n            DialogInterface.OnClickListener listener =\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface d, int which) {\n                    // TODO Auto-generated method stub\n                    if (which == 0) {\n                      showRemarksDialog(\"edit\");\n                    } else if (which == 1) {\n                      SQLiteDatabase db = getDbHelper().getWritableDatabase();\n                      /*try {\n                      Map<String, Object> params = new HashMap<String, Object>();\n                      params.put(\"detailid\", detailid);\n                      postingProxy.invoke(\"removeRemarks\", new Object[]{params});\n                      } catch (Exception e) {}\n                      finally{\n                      db.removeRemarksByAppid(loanappid);\n                      }*/\n                      getDbHelper().removeRemarksByAppid(db, loanappid);\n                      Map<String, Object> map = new HashMap<String, Object>();\n                      map.put(\"loanappid\", loanappid);\n                      map.put(\"state\", \"PENDING\");\n                      map.put(\"longitude\", getApp().getLongitude());\n                      map.put(\"latitude\", getApp().getLatitude());\n                      getDbHelper().insertRemarksRemoved(db, map);\n                      db.close();\n                      remarks = null;\n                      rl_remarks.setVisibility(View.GONE);\n                      ApplicationUtil.showShortMsg(context, \"Successfully removed remarks.\");\n                    }\n                  }\n                };\n            ApplicationUtil.showOptionDialog(context, items, listener);\n            return false;\n          }\n        });\n    if (remarks != null && remarks.getCount() > 0) {\n      rl_remarks.setVisibility(View.VISIBLE);\n      ((TextView) findViewById(R.id.tv_info_remarks))\n          .setText(remarks.getString(remarks.getColumnIndex(\"remarks\")));\n    }\n\n    // ListView lv_info_payments = (ListView) findViewById(R.id.lv_info_payments);\n    LinearLayout ll_info_payments = (LinearLayout) findViewById(R.id.ll_specialcollection);\n    ll_info_payments.removeAllViewsInLayout();\n    rl_payment.setVisibility(View.GONE);\n\n    if (payment != null && payment.getCount() > 0) {\n      View child = null;\n      String paymenttype = \"\";\n      BigDecimal paymentamount = new BigDecimal(\"0\").setScale(2);\n      rl_payment.setVisibility(View.VISIBLE);\n      do {\n        child =\n            ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.item_payment, null);\n        ((TextView) child.findViewById(R.id.tv_info_refno))\n            .setText(payment.getString(payment.getColumnIndex(\"refno\")));\n        ((TextView) child.findViewById(R.id.tv_info_txndate))\n            .setText(payment.getString(payment.getColumnIndex(\"txndate\")));\n        ((TextView) child.findViewById(R.id.tv_info_paidby))\n            .setText(payment.getString(payment.getColumnIndex(\"paidby\")));\n        String type = payment.getString(payment.getColumnIndex(\"paymenttype\"));\n        if (type.equals(\"schedule\")) paymenttype = \"Schedule/Advance\";\n        else paymenttype = \"Overpayment\";\n        ((TextView) child.findViewById(R.id.tv_info_paymenttype)).setText(paymenttype);\n        String amt = payment.getDouble(payment.getColumnIndex(\"paymentamount\")) + \"\";\n        paymentamount = new BigDecimal(amt).setScale(2);\n        ((TextView) child.findViewById(R.id.tv_info_paymentamount))\n            .setText(formatValue(paymentamount));\n        child.setTag(R.id.paymentid, payment.getString(payment.getColumnIndex(\"objid\")));\n        addPaymentProperties(child);\n        db = getDbHelper().getReadableDatabase();\n        Cursor vp =\n            getDbHelper()\n                .getVoidPaymentByPaymentidAndAppid(\n                    db, payment.getString(payment.getColumnIndex(\"objid\")), loanappid);\n        db.close();\n\n        if (vp != null && vp.getCount() > 0) {\n          vp.moveToFirst();\n          String state = vp.getString(vp.getColumnIndex(\"state\"));\n          View overlay = null;\n          RelativeLayout.LayoutParams layoutParams =\n              new RelativeLayout.LayoutParams(\n                  RelativeLayout.LayoutParams.MATCH_PARENT,\n                  RelativeLayout.LayoutParams.MATCH_PARENT);\n          layoutParams.addRule(RelativeLayout.CENTER_VERTICAL, 1);\n          if (state.equals(\"PENDING\")) {\n            overlay =\n                ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                    .inflate(R.layout.overlay_void_text, null);\n            ((TextView) overlay).setTextColor(getResources().getColor(R.color.red));\n            ((TextView) overlay).setText(\"VOID REQUEST PENDING\");\n            overlay.setLayoutParams(layoutParams);\n            ((RelativeLayout) child).addView(overlay);\n            child.setOnClickListener(null);\n            child.setOnLongClickListener(null);\n            child.setClickable(false);\n          } else if (state.equals(\"APPROVED\")) {\n            overlay =\n                ((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE))\n                    .inflate(R.layout.overlay_void_text, null);\n            ((TextView) overlay).setTextColor(getResources().getColor(R.color.green));\n            ((TextView) overlay).setText(\"VOID APPROVED\");\n            overlay.setLayoutParams(layoutParams);\n            ((RelativeLayout) child).addView(overlay);\n            addApprovedVoidPaymentProperies(child);\n          }\n          // vp.close();\n        }\n        ll_info_payments.addView(child);\n        // list.add(pp);\n      } while (payment.moveToNext());\n    }\n\n    rl_notes.setVisibility(View.GONE);\n    LinearLayout ll_notes = (LinearLayout) findViewById(R.id.ll_info_notes);\n    if (notes != null && notes.getCount() > 0) {\n      rl_notes.setVisibility(View.VISIBLE);\n      notes.moveToFirst();\n      ll_notes.removeAllViewsInLayout();\n      View child = null;\n      Date date = null;\n      String str = \"\";\n      int idx = 0;\n      do {\n        child =\n            ((LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE))\n                .inflate(R.layout.item_note, null);\n        // addNoteProperties(child);\n        str = \"\";\n        date = parseDate(notes.getString(notes.getColumnIndex(\"fromdate\")));\n        if (date != null) str = df.format(date);\n        ((TextView) child.findViewById(R.id.tv_info_refno)).setText(str);\n        str = \"\";\n        date = parseDate(notes.getString(notes.getColumnIndex(\"todate\")));\n        if (date != null) str = df.format(date);\n        ((TextView) child.findViewById(R.id.tv_info_txndate)).setText(str);\n        ((TextView) child.findViewById(R.id.tv_info_remarks))\n            .setText(notes.getString(notes.getColumnIndex(\"remarks\")));\n        // child.setTag(R.id.noteid, notes.getString(notes.getColumnIndex(\"objid\")));\n        // child.setTag(R.id.idx, idx);\n        idx++;\n        ll_notes.addView(child);\n      } while (notes.moveToNext());\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7850, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 2537, "focalAPIEnd": 2573, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/abdulazeezsk/netvogue/tree/master/Server/netvogue_web/src/main/java/org/netvogue/server/webmvc/controllers/StatusUpdateController.java", "rawCode": "  @RequestMapping(\n    value = {\"getstatusupdates\", \"getstatusupdates/{profileid}\"},\n    method = RequestMethod.GET\n  )\n  public @ResponseBody StatusUpdates getStatusUpdates(\n      @ModelAttribute(\"profileid\") String profileid, @RequestParam(\"pagenumber\") int pagenumber) {\n    System.out.println(\"Get Statuspupdates: \" + profileid);\n    StatusUpdates updates = new StatusUpdates();\n    User user = userDetailsService.getUserFromSession();\n    if (user == null) {\n      return updates;\n    }\n    if (!profileid.isEmpty()) {\n      user = userService.getUserByUsername(profileid);\n      if (user == null) {\n        return updates;\n      }\n    }\n\n    if (0 == pagenumber) {\n      updates.setName(user.getName());\n      updates.setIsbrand(USER_TYPE.BRAND == user.getUserType() ? true : false);\n      // Set profile pic\n      String profilepic = user.getProfilePicLink();\n      if (null != profilepic && !profilepic.isEmpty()) {\n        updates.setProfilepic(imageURLsConverter.convert(profilepic, user.getUsername()));\n      }\n\n      // Get ContactInfo\n      ContactInfo contactInfo = new ContactInfo();\n      contactInfo.setAddress(user.getAddress());\n      contactInfo.setCity(user.getCity());\n      contactInfo.setState(user.getState());\n      contactInfo.setCountry(user.getCountry());\n      contactInfo.setZip(String.valueOf(user.getZipCode()));\n      contactInfo.setEmail(user.getEmail());\n      contactInfo.setLandline1(String.valueOf(user.getTelephoneNo1()));\n      contactInfo.setLandline2(String.valueOf(user.getTelephoneNo2()));\n      contactInfo.setMobile(String.valueOf(user.getMobileNo()));\n      contactInfo.setWebsite(user.getWebsite());\n      contactInfo.setYearest(user.getYearofEst());\n      contactInfo.setFromprice(user.getFromPrice());\n      contactInfo.setToprice(user.getToPrice());\n\n      // Add it to profile Info\n      updates.setContactinfo(contactInfo);\n    }\n    Set<StatusUpdate> updatesTemp = new LinkedHashSet<StatusUpdate>();\n\n    if (profileid.isEmpty()) {\n      Iterable<StatusUpdateData> dbupdates;\n      dbupdates = statusUpdateService.getAllStatusUpdates(user.getUsername(), pagenumber);\n\n      if (null == dbupdates) {\n        return updates;\n      }\n\n      Iterator<StatusUpdateData> first = dbupdates.iterator();\n      while (first.hasNext()) {\n        StatusUpdateData dbUpdate = first.next();\n        updatesTemp.add(conversionService.convert(dbUpdate, StatusUpdate.class));\n      }\n    } else {\n      Iterable<org.netvogue.server.neo4japi.domain.StatusUpdate> dbupdates;\n      Format formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n\n      System.out.println(\"Before call: Current time is:\" + formatter.format(new Date()));\n      dbupdates = statusUpdateService.getMyStatusUpdates(user.getUsername(), pagenumber);\n      System.out.println(\"After call: Current time is:\" + formatter.format(new Date()));\n\n      if (null == dbupdates) {\n        return updates;\n      }\n\n      Iterator<org.netvogue.server.neo4japi.domain.StatusUpdate> first = dbupdates.iterator();\n      while (first.hasNext()) {\n        org.netvogue.server.neo4japi.domain.StatusUpdate dbUpdate = first.next();\n        StatusUpdate newTemp = conversionService.convert(dbUpdate, StatusUpdate.class);\n        newTemp.setName(user.getUsername());\n        newTemp.setProfileid(user.getUsername());\n        String profilepic = user.getProfilePicLink();\n        if (null != profilepic) {\n          String topurl =\n              uploadManager.getQueryString(\n                  profilepic, ImageType.PROFILE_PIC, Size.PTop, user.getUsername());\n          newTemp.setLeft_url(topurl);\n        }\n        updatesTemp.add(newTemp);\n      }\n    }\n\n    updates.setUpdates(updatesTemp);\n    System.out.println(\"Status updates returned: \" + updatesTemp.size());\n    return updates;\n  }\n"}, {"dataset": "parse", "exampleID": 7851, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 204, "focalAPIEnd": 230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mensonge/mensonge/tree/master/src/main/java/mensonge/userinterface/tree/PanneauArbre.java", "rawCode": "  public void setEvent(boolean event) {\n    this.event = event;\n    if (this.event) {\n      // on crée l'objet en passant en paramétre une chaîne representant le format\n      SimpleDateFormat formatter = new SimpleDateFormat(\"MM\");\n      // récupération de la date courante\n      Date currentTime = new Date();\n      // on crée la chaîne à partir de la date\n      String dateStringMois = formatter.format(currentTime);\n      if (dateStringMois.equals(\"12\")) {\n        this.arbre.setCellRenderer(new PanneauArbreRendererNoel());\n        this.event = true;\n      } else if (dateStringMois.equals(\"10\")) {\n        this.arbre.setCellRenderer(new PanneauArbreRendererHallo());\n        this.event = true;\n      } else if (dateStringMois.equals(\"4\")) {\n        this.arbre.setCellRenderer(new PanneauArbreRendererEaster());\n        this.event = true;\n      } else {\n        this.event = false;\n        this.arbre.setCellRenderer(new PanneauArbreRenderDefault());\n      }\n    } else {\n      this.arbre.setCellRenderer(new PanneauArbreRenderDefault());\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7852, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 534, "focalAPIEnd": 579, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [943], "useEnd": [958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GDI-Vlaanderen/geonetwork/tree/master/web/src/main/java/org/fao/geonet/kernel/harvest/harvester/fragment/FragmentHarvester.java", "rawCode": "  /**\n   * Updates a metadata record with the filled in template.\n   *\n   * @param recUuid Uuid of metadata record being updated\n   * @param id Metadata id of record being updated\n   * @param template filled in template\n   */\n  private void updateMetadata(String recUuid, String id, Element template)\n      throws Exception, SQLException {\n    // now update existing record with the filled in template\n    if (log.isDebugEnabled())\n      log.debug(\" - Attempting to update metadata record \" + id + \" with links\");\n    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n    Date date = new Date();\n    template = dataMan.setUUID(params.outputSchema, recUuid, template);\n\n    //\n    // update metadata\n    //\n    boolean validate = false;\n    boolean ufo = false;\n    boolean index = false;\n    String language = context.getLanguage();\n    dataMan.updateMetadata(\n        context, dbms, id, template, validate, ufo, index, language, df.format(date), false);\n\n    dbms.execute(\"DELETE FROM OperationAllowed WHERE metadataId=?\", id);\n    addPrivileges(id);\n\n    dbms.execute(\"DELETE FROM MetadataCateg WHERE metadataId=?\", id);\n    addCategories(id);\n\n    dbms.commit();\n    boolean workspace = false;\n    dataMan.indexMetadataGroup(dbms, id, workspace, true);\n\n    harvestSummary.recordsUpdated++;\n    harvestSummary.updatedMetadata.add(recUuid);\n  }\n"}, {"dataset": "parse", "exampleID": 7853, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 40, "focalAPIEnd": 74, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)", "format.format(Date)"], "useStart": [40, 160], "useEnd": [92, 210], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Jrende/IV1201/tree/master/app/models/Availability.java", "rawCode": "  public String toString() {\n    return new SimpleDateFormat(\"yyyy-MM-dd\").format(from_date)\n        + \" \"\n        + Messages.get(\"to\")\n        + \" \"\n        + new SimpleDateFormat(\"yyyy-MM-dd\").format(to_date);\n  }\n"}, {"dataset": "parse", "exampleID": 7854, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,locale)", "focalAPIStart": 172, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SDLLanguageTechnologies/Testy/tree/master/src/main/java/com/sdl/selenium/web/utils/GetData.java", "rawCode": "  public static String getDate(int days, int months, int years, String format, Locale locale) {\n    Calendar now = Calendar.getInstance();\n    SimpleDateFormat formatter = new SimpleDateFormat(format, locale);\n    now.add(Calendar.DATE, +days);\n    now.add(Calendar.MONTH, +months);\n    now.add(Calendar.YEAR, +years);\n    return formatter.format(now.getTime());\n  }\n"}, {"dataset": "parse", "exampleID": 7855, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat()", "focalAPIStart": 57, "focalAPIEnd": 79, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.applyPattern(String)", "format.format(Date)", "format.applyPattern(String)", "format.format(Date)", "format.applyPattern(String)", "format.format(Date)", "format.applyPattern(String)", "format.format(Date)", "format.applyPattern(String)", "format.format(Date)"], "useStart": [205, 243, 267, 306, 331, 371, 396, 437, 462, 504], "useEnd": [231, 260, 294, 323, 359, 388, 425, 454, 492, 521], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UweTrottmann/QuickDic-Dictionary/tree/master/jars/icu4j-4_8_1_1/main/tests/core/src/com/ibm/icu/dev/test/format/DateFormatRegressionTestJ.java", "rawCode": "  public void Test4358730() {\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    Calendar cal = Calendar.getInstance();\n    cal.clear();\n    cal.set(2001, 11, 10);\n    Date today = cal.getTime();\n\n    sdf.applyPattern(\"MM d y\");\n    logln(sdf.format(today));\n    sdf.applyPattern(\"MM d yy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyyy\");\n    logln(sdf.format(today));\n\n    sdf.applyPattern(\"MM d yyyyy\");\n    logln(sdf.format(today));\n  }\n"}, {"dataset": "parse", "exampleID": 7856, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 362, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setLenient(boolean)", "JXDatePicker.setFormats(format)", "new JFormattedTextField(format)"], "useStart": [396, 426, 560], "useEnd": [420, 451, 591], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/swingx/tree/master/swingx-core/src/test/java/org/jdesktop/swingx/JXDatePickerIssues.java", "rawCode": "  /**\n   * Issue #??-swingx: first week of year in year-week format invalid?\n   *\n   * <p>Same problem for formattedTextField.\n   */\n  public void interactiveYearWeekFormat() {\n    JComponent box = Box.createVerticalBox();\n    calendar.set(2009, Calendar.JANUARY, 1);\n    JXDatePicker picker = new JXDatePicker(calendar.getTime());\n    SimpleDateFormat format = new SimpleDateFormat(\"yyww\");\n    format.setLenient(false);\n    picker.setFormats(format);\n    picker.getMonthView().setShowingWeekNumber(true);\n    box.add(picker);\n    JFormattedTextField field = new JFormattedTextField(format);\n    field.setValue(picker.getDate());\n    box.add(field);\n    PropertyChangeListener l =\n        new PropertyChangeListener() {\n\n          public void propertyChange(PropertyChangeEvent evt) {\n            LOG.info(\n                evt.getPropertyName()\n                    + evt.getSource().getClass().getSimpleName()\n                    + evt.getNewValue());\n          }\n        };\n    field.addPropertyChangeListener(l);\n    picker.addPropertyChangeListener(l);\n    showInFrame(box, \"yearweek format\");\n  }\n"}, {"dataset": "parse", "exampleID": 7857, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 214, "focalAPIEnd": 243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [749], "useEnd": [764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuzbin/opentsdb/tree/master/src/tools/CliQuery.java", "rawCode": "  /** Parses the date in argument and returns a UNIX timestamp in seconds. */\n  private static long parseDate(final String s) {\n    SimpleDateFormat format;\n    switch (s.length()) {\n      case 5:\n        format = new SimpleDateFormat(\"HH:mm\");\n        break;\n      case 8:\n        format = new SimpleDateFormat(\"HH:mm:ss\");\n        break;\n      case 10:\n        format = new SimpleDateFormat(\"yyyy/MM/dd\");\n        break;\n      case 16:\n        format = new SimpleDateFormat(\"yyyy/MM/dd-HH:mm\");\n        break;\n      case 19:\n        format = new SimpleDateFormat(\"yyyy/MM/dd-HH:mm:ss\");\n        break;\n      default:\n        usage(null, \"Invalid date: \" + s, 3);\n        return -1; // Never executed as usage() exits.\n    }\n    try {\n      return format.parse(s).getTime() / 1000;\n    } catch (ParseException e) {\n      usage(null, \"Invalid date: \" + s, 3);\n      return -1; // Never executed as usage() exits.\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7858, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 228, "focalAPIEnd": 269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [544], "useEnd": [573], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dlitvinov/FastEMFStore.core/tree/master/org.eclipse.emf.emfstore.client.ui/src/org/eclipse/emf/emfstore/client/ui/views/scm/SCMLabelProvider.java", "rawCode": "  private String getText(ChangePackage changePackage) {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Change Package\");\n    if (changePackage.getLogMessage() != null) {\n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd, HH:mm\");\n      LogMessage logMessage = changePackage.getLogMessage();\n      builder.append(\" [\");\n      builder.append(logMessage.getAuthor());\n      Date clientDate = logMessage.getClientDate();\n      if (clientDate != null) {\n        builder.append(\" @ \");\n        builder.append(dateFormat.format(clientDate));\n      }\n      builder.append(\"] \");\n      builder.append(logMessage.getMessage());\n    }\n    return builder.toString();\n  }\n"}, {"dataset": "parse", "exampleID": 7859, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 173, "focalAPIEnd": 207, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [595], "useEnd": [625], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lounaspaikka/lounaspaikka/tree/master/src/fi/aalto/lounaspaikka/LounaspaikkaActivity.java", "rawCode": "  /** @return */\n  private RestaurantDbEntity loadDataFromLocalStorage() {\n    RestaurantDbEntity restDbEntity = new RestaurantDbEntity();\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n    String date;\n\n    dataSource = new RestaurantsDataSource(this);\n    dataSource.open();\n\n    dataSource.getAllData();\n    List<String> values = dataSource.getDataList();\n    List<String> dates = dataSource.getDates();\n    Log.w(\"log1\", values.size() + \" size\");\n    dataSource.close();\n\n    if (values.isEmpty() || dates.isEmpty()) return null;\n\n    try {\n      restDbEntity.setDate(dateFormat.parse(dates.get(0)));\n\n    } catch (ParseException e) {\n      return null;\n    }\n\n    restDbEntity.setRestaurantData(values.get(0));\n\n    return restDbEntity;\n  }\n"}, {"dataset": "parse", "exampleID": 7860, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 113, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)"], "useStart": [179], "useEnd": [202], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JadiraOrg/jadira/tree/master/usertype.core/src/main/java/org/jadira/usertype/dateandtime/legacyjdk/columnmapper/TimestampColumnDateMapper.java", "rawCode": "        @Override\n        protected SimpleDateFormat initialValue() {\n\n          final SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.US);\n          format.setTimeZone(GMT);\n\n          return format;\n        }\n"}, {"dataset": "parse", "exampleID": 7861, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 57, "focalAPIEnd": 102, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cupofcat/Life-Planning/tree/master/src/com/appspot/analyser/DeleteSuggestion.java", "rawCode": "  public String toString() {\n    SimpleDateFormat date = new SimpleDateFormat(\"EEE, d MMM yyyy HH:mm\");\n    return getType()\n        + \" \"\n        + title\n        + \" which is currently scheduled for \"\n        + date.format(new Date(startDate));\n  }\n"}, {"dataset": "parse", "exampleID": 7862, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 793, "focalAPIEnd": 822, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setDateFormatOverride(format)"], "useStart": [715], "useEnd": [823], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Paxle/Paxle/tree/master/sandbox/GuiRemote/src/main/java/org/paxle/gui/remote/actions/ViewChartAction.java", "rawCode": "  public String execute() throws Exception {\n    final TimeSeriesCollection dataset = new TimeSeriesCollection();\n\n    List<Peer> peers = this.service.getPeers();\n    for (Peer peer : peers) {\n      TimeSeries ppm = new TimeSeries(peer.getName(), Second.class);\n      dataset.addSeries(ppm);\n\n      List<PeerStatus> statusValues = peer.getPeerStatus(this.varName);\n      if (statusValues != null) {\n        for (PeerStatus statusValue : statusValues) {\n          ppm.addOrUpdate(new Second(new Date(statusValue.getTimeStamp())), statusValue.getValue());\n        }\n      }\n    }\n\n    chart = ChartFactory.createTimeSeriesChart(null, \"Time\", \"Value\", dataset, true, false, false);\n\n    // change axis data format\n    ((DateAxis) chart.getXYPlot().getDomainAxis())\n        .setDateFormatOverride(new SimpleDateFormat(\"HH:mm\"));\n    chart.setBackgroundPaint(Color.WHITE);\n\n    return Action.SUCCESS;\n  }\n"}, {"dataset": "parse", "exampleID": 7863, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 107, "focalAPIEnd": 135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zayac/natty/tree/master/src/main/java/ru/natty/persist/Album.java", "rawCode": "  @Override\n  public String toString() {\n    if (year != null) {\n      SimpleDateFormat simpleDateformat = new SimpleDateFormat(\"yyyy\");\n      return \"Album{\"\n          + \"name=\"\n          + name\n          + \", year=\"\n          + simpleDateformat.format(year)\n          + \", artistCollection=\"\n          + artistCollection\n          + '}';\n    } else\n      return \"Album{\" + \"name=\" + name + \", year=null, artistCollection=\" + artistCollection + '}';\n  }\n"}, {"dataset": "parse", "exampleID": 7864, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 385, "focalAPIEnd": 418, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [433], "useEnd": [449], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jeromexu/ubank/tree/master/src/java/main/com/ufinity/marchant/ubank/common/DateUtil.java", "rawCode": "  /**\n   * format Date to String <br>\n   * Note: if Date is null or occur exception, then return empty string\n   *\n   * @param date Date obj\n   * @param datePattern date string pattern\n   * @return date string\n   * @author zdxue\n   */\n  public static String format(Date date, String datePattern) {\n    if (date == null) {\n      return \"\";\n    }\n\n    try {\n      SimpleDateFormat sdf = new SimpleDateFormat(datePattern);\n      return sdf.format(date);\n    } catch (Exception e) {\n      return \"\";\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7865, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 297, "tryExpressionEnd": 301, "tryBlockStart": 297, "tryBlockEnd": 694, "catchExpressionStart": 640, "catchExpressionEnd": 660, "catchBlockStart": 640, "catchBlockEnd": 694, "exceptionHandlingCallStart": [668], "exceptionHandlingCallEnd": [687], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 328, "focalAPIEnd": 371, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [328], "useEnd": [390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/lcm/src/com/lorent/trigger/ConfStartTrigger.java", "rawCode": "  /** override方法 */\n  public void execute(JobExecutionContext context) throws JobExecutionException {\n    ConferenceBean conf = (ConferenceBean) context.getJobDetail().getJobDataMap().get(\"0\");\n    ServiceFacade service = (ServiceFacade) context.getJobDetail().getJobDataMap().get(\"service\");\n    try {\n      System.out.println(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n      System.out.println(\"in task conference start---------------serviceFacade:\" + service);\n      System.out.println(\"in task conference start---------------conf:\" + conf);\n      service.getConferenceService().conferenceStartTrigger(conf);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7866, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 585, "focalAPIEnd": 619, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/germanescobar/mokai/tree/master/mokai-connectors/mokai-smpp-server/src/main/java/org/mokai/connector/smpp/SmppServerConnector.java", "rawCode": "  @Override\n  public void process(Message message) throws Exception {\n    DeliverSm deliverSm = new DeliverSm();\n\n    boolean isDLR =\n        message.getProperty(\"isDLR\", Boolean.class) == null\n            ? false\n            : message.getProperty(\"isDLR\", Boolean.class) == true;\n    if (isDLR) {\n      deliverSm.setEsmClass((byte) 0x04);\n      deliverSm.setSourceAddress(\n          new Address().withAddress(message.getProperty(\"from\", String.class)));\n      deliverSm.setDestAddress(new Address().withAddress(message.getProperty(\"to\", String.class)));\n\n      SimpleDateFormat sdf = new SimpleDateFormat(\"yyMMddhhmm\");\n\n      StringBuffer text = new StringBuffer();\n      text.append(\"id:\" + message.getProperty(\"messageId\", String.class) + \" \");\n      text.append(\"sub:\" + fixTo(message.getProperty(\"submitted\", Integer.class), 3) + \" \");\n      text.append(\"dlvrd:\" + fixTo(message.getProperty(\"delivered\", Integer.class), 3) + \" \");\n      String strSubmitDate =\n          message.getProperty(\"submitDate\", Date.class) == null\n              ? \"\"\n              : sdf.format(message.getProperty(\"submitDate\", Date.class));\n      text.append(\"submit date:\" + strSubmitDate + \" \");\n      String strDoneDate =\n          message.getProperty(\"doneDate\", Date.class) == null\n              ? \"\"\n              : sdf.format(message.getProperty(\"doneDate\", Date.class));\n      text.append(\"done date:\" + strDoneDate + \" \");\n      text.append(\"stat:\" + message.getProperty(\"finalStatus\", String.class) + \" \");\n      text.append(\"err:0 \");\n      text.append(\"text: \");\n\n      deliverSm.setShortMessage(CharsetUtil.encode(text.toString(), CharsetUtil.CHARSET_GSM));\n    } else {\n      deliverSm.setSourceAddress(\n          new Address().withAddress(message.getProperty(\"from\", String.class)));\n      deliverSm.setDestAddress(new Address().withAddress(message.getProperty(\"to\", String.class)));\n      deliverSm.setShortMessage(\n          CharsetUtil.encode(message.getProperty(\"text\", String.class), CharsetUtil.CHARSET_GSM));\n    }\n\n    Collection<SmppSession> sessions = smppServer.getSessions();\n    for (SmppSession session : sessions) {\n      session.sendRequest(deliverSm, 20000);\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7867, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 162, "focalAPIEnd": 205, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)", "format.parse(String)"], "useStart": [407, 483], "useEnd": [458, 502], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/plantuml/tree/master/tags/plantuml-7938/src/net/sourceforge/plantuml/acearth/PSystemXearth.java", "rawCode": "  private Date extractGmt(String s) {\n    final SimpleDateFormat timeFormat;\n    if (s.matches(\"\\\\d{4}/\\\\d{2}/\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}\")) {\n      timeFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n    } else if (s.matches(\"\\\\d{4}/\\\\d{2}/\\\\d{2} \\\\d{2}:\\\\d{2}\")) {\n      timeFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm\");\n    } else {\n      throw new UnsupportedOperationException(s);\n    }\n    timeFormat.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    try {\n      return timeFormat.parse(s);\n    } catch (ParseException e) {\n      throw new UnsupportedOperationException(s);\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7868, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 138, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [214], "useEnd": [267], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mosesn/Beer-Battle/tree/master/twilio-java/src/main/java/com/twilio/sdk/resource/instance/AuthorizedConnectApp.java", "rawCode": "  /**\n   * Gets the date updated.\n   *\n   * @return the date updated\n   */\n  public Date getDateUpdated() {\n    SimpleDateFormat format = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss Z\");\n    try {\n      return format.parse(this.getProperty(DATE_UPDATED_PROPERTY));\n    } catch (ParseException e) {\n      return null;\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7869, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 2160, "focalAPIEnd": 2203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [2230], "useEnd": [2262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/botaydotcom/iCreate/tree/master/src/com/android/apptime/Main.java", "rawCode": "  /** Called when the activity is first created. */\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n\n    Resources res = getResources();\n    TabHost tabHost = getTabHost();\n    TabHost.TabSpec spec;\n    Intent intent;\n\n    intent = new Intent().setClass(this, CalendarView.class);\n\n    spec =\n        tabHost\n            .newTabSpec(\"calendar\")\n            .setIndicator(\"Calendar\", res.getDrawable(R.drawable.ic_tab_calendar))\n            .setContent(intent);\n    tabHost.addTab(spec);\n\n    intent = new Intent().setClass(this, MapView.class);\n    spec =\n        tabHost\n            .newTabSpec(\"map\")\n            .setIndicator(\"Map\", res.getDrawable(R.drawable.ic_tab_map))\n            .setContent(intent);\n    tabHost.addTab(spec);\n\n    intent = new Intent().setClass(this, OrganizerView.class);\n    spec =\n        tabHost\n            .newTabSpec(\"organizer\")\n            .setIndicator(\"Organizer\", res.getDrawable(R.drawable.ic_tab_organizer))\n            .setContent(intent);\n    tabHost.addTab(spec);\n\n    tabHost.setCurrentTab(0);\n\n    String s = getResources().getString(R.string.apikeyfield);\n    // startService(new Intent(Main.this,IvleDataPuller.class));\n    // stopService(new Intent(Main.this,IvleDataPuller.class));\n    DatabaseInterface database = DatabaseInterface.getDatabaseInterface(getApplicationContext());\n    database.OpenDatabase(getApplicationContext());\n    // List<String> alerttype = new ArrayList<String>(); alerttype.add(\"alert1\");\n    // Date starttime= new Date(1221423535);\n    // Date endtime = new Date(122142400);\n    // Date alerttime = new Date(122142340);\n    // Item item = new Item(\"title test\",\n    // \"description test\", \"location test\", \"category test\", alerttype,\n    // \"priority test\", \"Event\", starttime,\n    // endtime, null, alerttime, \"repeat test\",\n    // \"completed test\", 1);\n    // //database.AddItemToDatabase(getApplicationContext(), item);\n    // //database.AddItemToDatabase(this.getApplicationContext(),item);\n    //\n    // database.RetrieveItemFromDatabase(getApplicationContext(), 5);\n    DateFormat dfm = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    try {\n      Date a = dfm.parse(\"1970-01-02 09:55:42\"); // Fri, 02 Jan 1970 09:55:42 GMT\n      a = new Date(1221423535);\n      // database.RetrieveItemFromDatabase(getApplicationContext(), a);\n      int yu = 0;\n    } catch (ParseException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    database.CloseDatabase();\n\n    /*\n     * DatabaseInterface db = new DatabaseInterface(this); List<String>\n     * alerttype = new ArrayList<String>(); alerttype.add(\"alert1\");\n     * alerttype.add(\"alert2\"); Item item = new Item(\"title test\",\n     * \"description test\", \"location test\", \"category test\", alerttype,\n     * \"priority test\", \"Event\", \"1991-07-11 12:08:12\",\n     * \"2007-02-26 20:15:00\", null, \"2014-08-20 20:21:22\", \"repeat test\",\n     * \"completed test\", 1); String et = item.GetAlertTime(); //String et1 =\n     * item.GetDeadline(); idb.createEvent(item);\n     *\n     * item.SetTitle(\"title test 2\"); idb.updateEvent(item);\n     * db.AddItemToDatabase(this, item); Cursor mycs = idb.getEventById(1);\n     * String titletest = mycs.getString(8);\n     */\n    // Date newdate = new Date();\n    // long ttt = newdate.getTime();\n    // /*\n    // Date olddate = new Date(\"1991-07-11 12:08:12\");\n    // boolean tttt = false;\n    // if (olddate.getTime() < newdate.getTime()) tttt=true;\n    // */\n    //\n    //\n    // DateFormat dfm = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    // try {\n    // Date a = dfm.parse(\"2007-02-26 20:15:00\");\n    // int yu= 0;\n    // } catch (ParseException e) {\n    // // TODO Auto-generated catch block\n    // e.printStackTrace();\n    // }\n    //\n    //\n    // newdb.close();\n    // IvleTimetableData timetable = new IvleTimetableData();\n    //\n\n  }\n"}, {"dataset": "parse", "exampleID": 7870, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 177, "focalAPIEnd": 220, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(SimpleTimeZone)", "format.format(Date)"], "useStart": [228, 273], "useEnd": [257, 299], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hoevenvd/java_for_weather/tree/master/src/org/tom/weather/astro/AstroFormat.java", "rawCode": "  public static String getGMTDateString(Date instant) {\n    try {\n      SimpleTimeZone tzGMT = (SimpleTimeZone) TimeZone.getTimeZone(\"GMT\");\n      SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy.MM.dd HH:mm zz\");\n      dateFormat.setTimeZone(tzGMT);\n      return (dateFormat.format(instant));\n    } catch (Exception e) {\n      return (\"\");\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7871, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "OAuthMessageSignerException", "exceptionHandlingCall": ["getMessage()", "LogE(*,*)"], "tryExpressionStart": 139, "tryExpressionEnd": 143, "tryBlockStart": 139, "tryBlockEnd": 1983, "catchExpressionStart": 1576, "catchExpressionEnd": 1614, "catchBlockStart": 1576, "catchBlockEnd": 1662, "exceptionHandlingCallStart": [1637, 1622], "exceptionHandlingCallEnd": [1651, 1655], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 379, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/grkg8tr/BurnBot/tree/master/src/com/nicknackhacks/dailyburn/api/FoodDao.java", "rawCode": "  public List<FoodLogEntry> getFoodLogEntries(int year, int monthOfYear, int dayOfMonth) {\n    ArrayList<FoodLogEntry> entries = null;\n    try {\n      HttpGet request = null;\n      URI uri = null;\n      if (year != 0 && monthOfYear != 0 && dayOfMonth != 0) {\n        GregorianCalendar cal = new GregorianCalendar(year, monthOfYear, dayOfMonth);\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n        String formattedDate = format.format(cal.getTime());\n        List<NameValuePair> qparams = new ArrayList<NameValuePair>();\n        qparams.add(new BasicNameValuePair(\"date\", formattedDate));\n        uri =\n            URIUtils.createURI(\n                \"https\",\n                \"dailyburn.com\",\n                -1,\n                \"/api/food_log_entries.xml\",\n                URLEncodedUtils.format(qparams, \"UTF-8\"),\n                null);\n        // String dateParam = \"?date=\" + formattedDate;\n        request = new HttpGet(uri);\n      } else {\n        uri =\n            URIUtils.createURI(\n                \"https\", \"dailyburn.com\", -1, \"/api/food_log_entries.xml\", null, null);\n      }\n      request = new HttpGet(uri);\n\n      consumer.sign(request);\n\n      ResponseHandler<String> responseHandler = new BasicResponseHandler();\n      String response = client.execute(request, responseHandler);\n\n      LogHelper.LogD(response);\n\n      Object result = xstream.fromXML(response);\n      if (result instanceof NilClasses) {\n        entries = new ArrayList<FoodLogEntry>();\n      } else {\n        entries = (ArrayList<FoodLogEntry>) result;\n      }\n    } catch (OAuthMessageSignerException e) {\n      LogHelper.LogE(e.getMessage(), e);\n    } catch (OAuthExpectationFailedException e) {\n      LogHelper.LogE(e.getMessage(), e);\n    } catch (IllegalStateException e) {\n      LogHelper.LogE(e.getMessage(), e);\n    } catch (IOException e) {\n      LogHelper.LogE(e.getMessage(), e);\n    } catch (URISyntaxException e) {\n      LogHelper.LogE(e.getMessage(), e);\n    }\n    return entries;\n  }\n"}, {"dataset": "parse", "exampleID": 7872, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 53, "focalAPIEnd": 87, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc13/kernel-util/src/main/java/org/sakaiproject/util/DateWidgetFormat.java", "rawCode": "  public static DateFormat MM_DD_YYYY() {\n    return new SimpleDateFormat(\"MM/dd/yyyy\");\n  }\n"}, {"dataset": "parse", "exampleID": 7873, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 447, "focalAPIEnd": 482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [495], "useEnd": [510], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rwilson/J2Free/tree/master/lib/src/java/org/j2free/jsp/el/DateTimeUtils.java", "rawCode": "  /**\n   * @param date\n   * @return\n   */\n  public static String formatDateMinPrecision(Date date) {\n\n    if (date == null) return Constants.EMPTY;\n\n    Calendar now = Calendar.getInstance();\n    Calendar spec = Calendar.getInstance();\n    spec.setTime(date);\n\n    long diff = now.get(Calendar.DAY_OF_YEAR) - spec.get(Calendar.DAY_OF_YEAR);\n    if (diff == 0) return \"Today\";\n    else if (diff == 1) return \"Yesterday\";\n\n    SimpleDateFormat df = new SimpleDateFormat(\"MMM d, yyyy\");\n    return df.format(date);\n  }\n"}, {"dataset": "parse", "exampleID": 7874, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 434, "focalAPIEnd": 478, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [505], "useEnd": [528], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/baohaojun/davmail/tree/master/src/java/davmail/util/StringUtil.java", "rawCode": "  /**\n   * Get allday date value from zulu timestamp.\n   *\n   * @param value zulu datetime\n   * @return yyyyMMdd allday date value\n   */\n  public static String convertZuluDateTimeToAllDay(String value) {\n    String result = value;\n    if (value != null && value.length() != 8) {\n      // try to convert datetime value to date value\n      try {\n        Calendar calendar = Calendar.getInstance();\n        SimpleDateFormat dateParser = new SimpleDateFormat(\"yyyyMMdd'T'HHmmss'Z'\");\n        calendar.setTime(dateParser.parse(value));\n        calendar.add(Calendar.HOUR_OF_DAY, 12);\n        SimpleDateFormat dateFormatter = new SimpleDateFormat(\"yyyyMMdd\");\n        result = dateFormatter.format(calendar.getTime());\n      } catch (ParseException e) {\n        // ignore\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "parse", "exampleID": 7875, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 267, "focalAPIEnd": 314, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setTimeZone(TimeZone)", "format.format(Date)"], "useStart": [320, 372], "useEnd": [342, 388], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dekellum/iudex/tree/master/iudex-http/src/main/java/iudex/http/Headers.java", "rawCode": "  /**\n   * Create a header from name and Date value in HTTP-date (1.1) format RFC 1123 (update/subset of\n   * RFC 822),.\n   */\n  public static Header createDateHeader(Object name, Date value) {\n    // Create new each time for thread safety.\n    SimpleDateFormat df = new SimpleDateFormat(HTTP_DATE_FORM, Locale.US);\n    df.setTimeZone(TZ_GMT);\n    return new Header(name, df.format(value));\n  }\n"}, {"dataset": "parse", "exampleID": 7876, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 59, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)", "format.format(Date)"], "useStart": [112, 148], "useEnd": [137, 171], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaliste/unitime/tree/master/JavaSource/org/unitime/timetable/util/RoomAvailabilityService.java", "rawCode": "    public String toString() {\n      SimpleDateFormat df = new SimpleDateFormat(\"MM/dd/yy HH:mm\");\n      return df.format(getStartTime()) + \" - \" + df.format(getEndTime());\n    }\n"}, {"dataset": "parse", "exampleID": 7877, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 639, "focalAPIEnd": 682, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wholcomb/tip/tree/master/projects/unsorted/get_calendar/GetCalendar.java", "rawCode": "  public File getCalendars() throws IOException {\n    fileCount = 0;\n\n    URL index =\n        new URL(\n            \"http://page-a-day.com\"\n                + \"/pub-bin/paduserlogin.pl?rm=setuser\"\n                + \"&target_uri=/index.pl\"\n                + \"&email=\"\n                + username\n                + \"&password=\"\n                + password);\n\n    HttpURLConnection connection = (HttpURLConnection) index.openConnection();\n    connection.setDoOutput(true);\n    connection.setAllowUserInteraction(false);\n    connection.setUseCaches(false);\n\n    String cookie = connection.getHeaderField(\"Set-Cookie\");\n\n    DateFormat dirFormat = new SimpleDateFormat(\"yyyy.MM.dd_hh:mm:ss\");\n\n    File outputDirectory =\n        new File(\n            System.getProperty(\"java.io.tmpdir\")\n                + File.separator\n                + calendar\n                + \"-\"\n                + dirFormat.format(time.getTime())\n                + File.separator);\n    outputDirectory.mkdir();\n\n    if ((sides & FRONT) != 0) {\n      getPage(\"front\", cookie, outputDirectory);\n    }\n    if ((sides & BACK) != 0) {\n      getPage(\"back\", cookie, outputDirectory);\n    }\n    return outputDirectory;\n  }\n"}, {"dataset": "parse", "exampleID": 7878, "initialization": ["String pattern = Arguments.getString(String)"], "initializationStart": [261], "initializationEnd": [291], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 385, "focalAPIEnd": 414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setLenient(boolean)", "format.parse(String)"], "useStart": [420, 572], "useEnd": [448, 596], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/palava/palava-bridge/tree/master/src/main/java/de/cosmocode/palava/jobs/form/parseDate.java", "rawCode": "  @Override\n  public void process(\n      Call call, Response response, HttpSession session, Server server, Map<String, Object> caddy) {\n    final Arguments arguments = call.getArguments();\n    arguments.require(\"pattern\", \"source\");\n\n    final String pattern = arguments.getString(\"pattern\");\n    final String source = arguments.getString(\"source\");\n\n    final DateFormat dateFormat = new SimpleDateFormat(pattern);\n    dateFormat.setLenient(false);\n\n    final Renderer out = JSON.newRenderer();\n\n    Object returnValue = Boolean.FALSE;\n\n    try {\n      final Date date = dateFormat.parse(source);\n      returnValue = date.getTime() / 1000;\n    } catch (ParseException e) {\n      LOG.info(\"Parsing date \" + source + \" with pattern \" + pattern + \" failed.\");\n    }\n\n    out.map();\n    out.key(\"date\").value(returnValue);\n    out.endMap();\n\n    response.setContent(new JsonContent(out));\n  }\n"}, {"dataset": "parse", "exampleID": 7879, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 96, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [205], "useEnd": [227], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/osvaldogusmao/ProjetoPI/tree/master/src/br/com/unifeob/app/util/Util.java", "rawCode": "  public static Calendar converterStringParaCalendar(String data) {\n    DateFormat dateFormat = new SimpleDateFormat(\"dd/MM/yyyy\");\n    Calendar date = Calendar.getInstance();\n    try {\n      date.setTime(dateFormat.parse(data));\n    } catch (ParseException e) {\n      e.printStackTrace();\n    }\n    return date;\n  }\n"}, {"dataset": "parse", "exampleID": 7880, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 86, "focalAPIEnd": 128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [141], "useEnd": [159], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sriksun/incubator-falcon/tree/master/common/src/test/java/org/apache/falcon/entity/EntityUtilTest.java", "rawCode": "  private static Date getDate(String date) throws Exception {\n    DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm Z\");\n    return format.parse(date);\n  }\n"}, {"dataset": "parse", "exampleID": 7881, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 409, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [409], "useEnd": [466], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/ant/src/main/org/apache/tools/ant/util/DateUtils.java", "rawCode": "  /**\n   * Parse a string as a date using the ISO8601_DATE format which is <code>yyyy-MM-dd</code>\n   *\n   * @param datestr string to be parsed\n   * @return a java.util.Date object as parsed by the format.\n   * @exception ParseException if the supplied string cannot be parsed by this pattern.\n   * @since Ant 1.6\n   */\n  public static Date parseIso8601Date(String datestr) throws ParseException {\n    return new SimpleDateFormat(ISO8601_DATE_PATTERN).parse(datestr);\n  }\n"}, {"dataset": "parse", "exampleID": 7882, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 131, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.setLenient(boolean)", "format.parse(String)"], "useStart": [166, 250], "useEnd": [187, 271], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dvn/dvn-svn-import-test4/tree/master/tags/release-2.1/src/DVN-web/src/edu/harvard/iq/dvn/core/web/util/DateValidator.java", "rawCode": "  private boolean isValid(String dateString, String pattern) {\n    boolean valid = true;\n    Date date;\n    SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n    sdf.setLenient(false);\n    try {\n      dateString = dateString.trim();\n      date = sdf.parse(dateString);\n      Calendar calendar = Calendar.getInstance();\n      calendar.setTime(date);\n      int year = calendar.get(Calendar.YEAR);\n      int era = calendar.get(Calendar.ERA);\n      if (era == GregorianCalendar.AD) {\n        if (year > 9999) {\n          valid = false;\n        }\n      }\n      // System.out.println(\"pattern is \"+ pattern);\n      // System.out.println(\"Year is \"+year);\n      // System.out.println(\"Calendar date is \"+date.toString());\n      // System.out.println(\"Era is \"+calendar.get(Calendar.ERA));\n    } catch (ParseException e) {\n      valid = false;\n    }\n    if (dateString.length() > pattern.length()) {\n      valid = false;\n    }\n    return valid;\n  }\n"}, {"dataset": "parse", "exampleID": 7883, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 823, "focalAPIEnd": 857, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)", "format.format(Date)"], "useStart": [1428, 1526], "useEnd": [1465, 1563], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ses6498/RITSeniorDesignSmartRefrigerator/tree/master/code/mobile/smartFridge/src/edu/rit/smartFridge/ItemDetailActivity.java", "rawCode": "  /** Called when the activity is first created. */\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.item_info);\n\n    Bundle extras = getIntent().getExtras();\n    DataConnect connecter = Connector.getInstance();\n    List<Date> expDateList = null;\n    List<Date> prcDateList = null;\n    String itemName = \"default\";\n    long UPC = 0;\n    if (extras != null) {\n      itemName = extras.getString(getString(R.string.current_item));\n      UPC = extras.getLong(getString(R.string.current_upc));\n    }\n    expDateList = connecter.getExpirationDates(UPC);\n    prcDateList = connecter.getPurchaseDates(UPC);\n\n    this.setTitle(connecter.getItemCount(UPC) + \"x | \" + itemName);\n\n    // user friendly date formatting\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\n\n    // get the table and create some reusable row and button variables\n    TableLayout table = (TableLayout) findViewById(R.id.tableLayout);\n    TableRow tr = null;\n    Button b = null;\n\n    // for building the label on each button\n    StringBuilder builder = new StringBuilder();\n    String label;\n\n    for (int i = 0; i < expDateList.size(); i++) {\n      tr = new TableRow(this);\n      tr.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));\n\n      // Build the button text\n      builder.append(\"Purchased \");\n      builder.append(dateFormat.format(prcDateList.get(i)));\n      builder.append(\" - Expires \");\n      builder.append(dateFormat.format(expDateList.get(i)));\n      label = builder.toString();\n      builder.delete(0, builder.length()); // clear the builder\n\n      // Create a Button to be the row-content.\n      b = new Button(this);\n      b.setText(label);\n      b.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));\n\n      // Add Button to row.\n      tr.addView(b);\n\n      // Add row to TableLayout.\n      table.addView(\n          tr, new TableLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7884, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 824, "focalAPIEnd": 856, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/editor/server/src/de/hpi/bpmn/serialization/erdf/BPMNeRDFSerialization.java", "rawCode": "  public StringBuilder getSerializationHeader() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"<div id=\\\"oryx-canvas123\\\" class=\\\"-oryx-canvas\\\">\");\n    sb.append(\"<span class=\\\"oryx-type\\\">http://b3mn.org/stencilset/bpmn1.1#BPMNDiagram</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-id\\\">\"\n            + (this.context.getDiagramId() == null ? \"\" : this.context.getDiagramId())\n            + \"</span>\");\n    sb.append(\"<span class=\\\"oryx-name\\\">\" + this.context.getDiagramName() + \"</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-version\\\"></span><span class=\\\"oryx-author\\\"></span><span class=\\\"oryx-language\\\">English</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-expressionlanguage\\\"></span><span class=\\\"oryx-querylanguage\\\"></span>\");\n\n    Date d = new Date();\n    SimpleDateFormat f = new SimpleDateFormat(\"dd/MM/yy\");\n\n    sb.append(\n        \"<span class=\\\"oryx-creationdate\\\">\"\n            + f.format(d)\n            + \"</span><span class=\\\"oryx-modificationdate\\\">\"\n            + f.format(d)\n            + \"</span>\");\n    sb.append(\n        \"<span class=\\\"oryx-pools\\\"></span><span class=\\\"oryx-documentation\\\"></span><span class=\\\"oryx-mode\\\">writable</span>\");\n    sb.append(\"<span class=\\\"oryx-mode\\\">fullscreen</span>\");\n    sb.append(\"<a rel=\\\"oryx-stencilset\\\" href=\\\"/oryx/stencilsets/bpmn1.1/bpmn1.1.json\\\"/>\");\n\n    for (String i : this.context.getResourceIDs()) {\n      sb.append(\"<a rel=\\\"oryx-render\\\" href=\\\"#resource\" + i + \"\\\"/>\");\n    }\n    sb.append(\"</div>\");\n\n    return sb;\n  }\n"}, {"dataset": "parse", "exampleID": 7885, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 437, "focalAPIEnd": 501, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [568], "useEnd": [623], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spring-projects/spring-integration/tree/master/spring-integration-http/src/test/java/org/springframework/integration/http/support/DefaultHttpHeaderMapperFromMessageOutboundTests.java", "rawCode": "  @Test\n  public void validateIfModifiedSinceAsNumber() throws ParseException {\n    HeaderMapper<HttpHeaders> mapper = DefaultHttpHeaderMapper.outboundMapper();\n    Map<String, Object> messageHeaders = new HashMap<>();\n    messageHeaders.put(\"If-Modified-Since\", 12345678);\n    HttpHeaders headers = new HttpHeaders();\n    mapper.fromHeaders(new MessageHeaders(messageHeaders), headers);\n\n    SimpleDateFormat simpleDateFormat =\n        new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", Locale.US);\n\n    assertThat(headers.getIfModifiedSince())\n        .isEqualTo(simpleDateFormat.parse(\"Thu, 01 Jan 1970 03:25:45 GMT\").getTime());\n  }\n"}, {"dataset": "parse", "exampleID": 7886, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 328, "focalAPIEnd": 367, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/krouge/MWS_projet/tree/master/Reflex/src/ch/heigvd/comem/reflex/PostPictureActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    context = getApplicationContext();\n\n    setContentView(R.layout.activity_postpicture);\n\n    userID = getIntent().getStringExtra(\"userID\");\n    themeID = getIntent().getStringExtra(\"themeID\");\n\n    String timestamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n    // file = new File(Environment.getExternalStorageDirectory().getPath()+\"/Pictures/Reflex\",\n    // \"IMG_\"+timestamp+\".jpg\");\n    File mediaStorageDir =\n        new File(\n            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),\n            \"Reflex\");\n    if (!mediaStorageDir.exists()) {\n      if (!mediaStorageDir.mkdirs()) {\n        Log.d(\"MyCameraApp\", \"failed to create directory\");\n      }\n    }\n    file = new File(mediaStorageDir.getPath() + File.separator + \"IMG_\" + timestamp + \".jpg\");\n\n    // create Intent to take a picture and return control to the calling application\n    Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n\n    intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(file));\n    intent.putExtra(\"return-data\", true);\n\n    // start the image capture Intent\n    startActivityForResult(intent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);\n  }\n"}, {"dataset": "parse", "exampleID": 7887, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 170, "focalAPIEnd": 216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.substring(int,int)", "format.substring(int)"], "useStart": [242, 277], "useEnd": [268, 300], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndiDog/thesis-code/tree/master/Sample application/Android/src/de/andidog/mobiprint/Iso8601.java", "rawCode": "  /** Transform Calendar to ISO 8601 string. */\n  public static String fromCalendar(final Calendar calendar) {\n    Date date = calendar.getTime();\n    String formatted = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\").format(date);\n    return formatted.substring(0, 22) + \":\" + formatted.substring(22);\n  }\n"}, {"dataset": "parse", "exampleID": 7888, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 303, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [303], "useEnd": [381], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DenisPanchenko/Fastov/tree/master/src/core/Table.java", "rawCode": "  /**\n   * Returns default unique name for table. Based on the current date and time.\n   *\n   * @return String - generated name\n   */\n  public static String generateDefaultName() {\n    StringBuilder defaultName = new StringBuilder();\n    defaultName.append(\"NewTable(\");\n    defaultName.append(\n        new SimpleDateFormat(\"ddMMyy:HHmmss\").format(Calendar.getInstance().getTime()));\n    defaultName.append(\")\");\n    return defaultName.toString();\n  }\n"}, {"dataset": "parse", "exampleID": 7889, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": -1766, "focalAPIEnd": -1733, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)"], "useStart": [827], "useEnd": [862], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ErkiDerLoony/xpeter/tree/master/lib/smack-3.2.1-source/org/jivesoftware/smackx/workgroup/packet/QueueOverview.java", "rawCode": "    public PacketExtension parseExtension(XmlPullParser parser) throws Exception {\n      int eventType = parser.getEventType();\n      QueueOverview queueOverview = new QueueOverview();\n      SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT);\n\n      if (eventType != XmlPullParser.START_TAG) {\n        // throw exception\n      }\n\n      eventType = parser.next();\n      while ((eventType != XmlPullParser.END_TAG) || (!ELEMENT_NAME.equals(parser.getName()))) {\n        if (\"count\".equals(parser.getName())) {\n          queueOverview.setUserCount(Integer.parseInt(parser.nextText()));\n        } else if (\"time\".equals(parser.getName())) {\n          queueOverview.setAverageWaitTime(Integer.parseInt(parser.nextText()));\n        } else if (\"oldest\".equals(parser.getName())) {\n          queueOverview.setOldestEntry((dateFormat.parse(parser.nextText())));\n        } else if (\"status\".equals(parser.getName())) {\n          queueOverview.setStatus(WorkgroupQueue.Status.fromString(parser.nextText()));\n        }\n\n        eventType = parser.next();\n\n        if (eventType != XmlPullParser.END_TAG) {\n          // throw exception\n        }\n      }\n\n      if (eventType != XmlPullParser.END_TAG) {\n        // throw exception\n      }\n\n      return queueOverview;\n    }\n"}, {"dataset": "parse", "exampleID": 7890, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 153, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DateType.valueOf(format)"], "useStart": [223], "useEnd": [242], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/obiba/magma/tree/master/magma-api/src/test/java/org/obiba/magma/type/DateTypeTest.java", "rawCode": "  private void assertValueOfUsingDateFormat(String dateFormat) {\n    DateType dt = DateType.get();\n    Date dateValue = new Date();\n    String dateStr = new SimpleDateFormat(dateFormat).format(dateValue);\n    Value value = dt.valueOf(dateStr);\n    assertThat(value.getValue()).isEqualTo(new MagmaDate(dateValue));\n  }\n"}, {"dataset": "parse", "exampleID": 7891, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 250, "focalAPIEnd": 282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [326], "useEnd": [342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/INCF/eeg2/tree/master/src/main/java/cz/zcu/kiv/eegdatabase/logic/util/BookingRoomUtils.java", "rawCode": "  /**\n   * Gets time in hh:mm:ss format from GregorianCalendar.\n   *\n   * @param cal Input GregorianCalendar.\n   * @return Retrieved time.\n   * @see #timeFormat\n   */\n  public static String getTime(GregorianCalendar cal) {\n    SimpleDateFormat sdf = new SimpleDateFormat(timeFormat);\n    Date date = cal.getTime();\n    return sdf.format(date);\n  }\n"}, {"dataset": "parse", "exampleID": 7892, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,formatSymbols)", "focalAPIStart": 1044, "focalAPIEnd": 1100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["executeUpdate(String)"], "finallyExpressionStart": 4985, "finallyExpressionEnd": 4993, "finallyBlockStart": 4985, "finallyBlockEnd": 5076, "cleanUpCallStart": [5001], "cleanUpCallEnd": [5069], "url": "https://github.com/sinuni/Fellesprosjektet/tree/master/mysql-connector-java-5.1.18/src/testsuite/simple/DateTest.java", "rawCode": "  /**\n   * Tests the configurability of all-zero date/datetime/timestamp handling in the driver.\n   *\n   * @throws Exception if the test fails.\n   */\n  public void testZeroDateBehavior() throws Exception {\n    try {\n      this.stmt.executeUpdate(\"DROP TABLE IF EXISTS testZeroDateBehavior\");\n      this.stmt.executeUpdate(\n          \"CREATE TABLE testZeroDateBehavior(fieldAsString VARCHAR(32), fieldAsDateTime DATETIME)\");\n      this.stmt.executeUpdate(\n          \"INSERT INTO testZeroDateBehavior VALUES ('0000-00-00 00:00:00', '0000-00-00 00:00:00')\");\n      Properties props = new Properties();\n      props.setProperty(\"zeroDateTimeBehavior\", \"round\");\n      Connection roundConn = getConnectionWithProps(props);\n      Statement roundStmt = roundConn.createStatement();\n      this.rs =\n          roundStmt.executeQuery(\"SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior\");\n      this.rs.next();\n\n      assertEquals(\"0001-01-01\", this.rs.getDate(1).toString());\n      assertEquals(\n          \"0001-01-01 00:00:00.0\",\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.0\", Locale.US).format(this.rs.getTimestamp(1)));\n      assertEquals(\"0001-01-01\", this.rs.getDate(2).toString());\n      assertEquals(\n          \"0001-01-01 00:00:00.0\",\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.0\", Locale.US).format(this.rs.getTimestamp(2)));\n\n      PreparedStatement roundPrepStmt =\n          roundConn.prepareStatement(\n              \"SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior\");\n      this.rs = roundPrepStmt.executeQuery();\n      this.rs.next();\n\n      assertEquals(\"0001-01-01\", this.rs.getDate(1).toString());\n      assertEquals(\n          \"0001-01-01 00:00:00.0\",\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.0\", Locale.US).format(this.rs.getTimestamp(1)));\n      assertEquals(\"0001-01-01\", this.rs.getDate(2).toString());\n      assertEquals(\n          \"0001-01-01 00:00:00.0\",\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.0\", Locale.US).format(this.rs.getTimestamp(2)));\n\n      props = new Properties();\n      props.setProperty(\"zeroDateTimeBehavior\", \"convertToNull\");\n      Connection nullConn = getConnectionWithProps(props);\n      Statement nullStmt = nullConn.createStatement();\n      this.rs =\n          nullStmt.executeQuery(\"SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior\");\n\n      this.rs.next();\n\n      assertTrue(null == this.rs.getDate(1));\n      assertTrue(null == this.rs.getTimestamp(1));\n      assertTrue(null == this.rs.getDate(2));\n      assertTrue(null == this.rs.getTimestamp(2));\n\n      PreparedStatement nullPrepStmt =\n          nullConn.prepareStatement(\n              \"SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior\");\n      this.rs = nullPrepStmt.executeQuery();\n\n      this.rs.next();\n\n      assertTrue(null == this.rs.getDate(1));\n      assertTrue(null == this.rs.getTimestamp(1));\n      assertTrue(null == this.rs.getDate(2));\n      assertTrue(null == this.rs.getTimestamp(2));\n      assertTrue(null == this.rs.getString(2));\n\n      props = new Properties();\n      props.setProperty(\"zeroDateTimeBehavior\", \"exception\");\n      Connection exceptionConn = getConnectionWithProps(props);\n      Statement exceptionStmt = exceptionConn.createStatement();\n      this.rs =\n          exceptionStmt.executeQuery(\n              \"SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior\");\n\n      this.rs.next();\n\n      try {\n        this.rs.getDate(1);\n        fail(\"Exception should have been thrown when trying to retrieve invalid date\");\n      } catch (SQLException sqlEx) {\n        assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));\n      }\n\n      try {\n        this.rs.getTimestamp(1);\n        fail(\"Exception should have been thrown when trying to retrieve invalid date\");\n      } catch (SQLException sqlEx) {\n        assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));\n      }\n\n      try {\n        this.rs.getDate(2);\n        fail(\"Exception should have been thrown when trying to retrieve invalid date\");\n      } catch (SQLException sqlEx) {\n        assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));\n      }\n\n      try {\n        this.rs.getTimestamp(2);\n        fail(\"Exception should have been thrown when trying to retrieve invalid date\");\n      } catch (SQLException sqlEx) {\n        assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));\n      }\n\n      PreparedStatement exceptionPrepStmt =\n          exceptionConn.prepareStatement(\n              \"SELECT fieldAsString, fieldAsDateTime FROM testZeroDateBehavior\");\n\n      try {\n        this.rs = exceptionPrepStmt.executeQuery();\n        this.rs.next();\n        this.rs.getDate(2);\n        fail(\"Exception should have been thrown when trying to retrieve invalid date\");\n      } catch (SQLException sqlEx) {\n        assertTrue(SQLError.SQL_STATE_ILLEGAL_ARGUMENT.equals(sqlEx.getSQLState()));\n      }\n\n    } finally {\n      this.stmt.executeUpdate(\"DROP TABLE IF EXISTS testZeroDateBehavior\");\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7893, "initialization": ["Locale locale = new Locale(String,String,String)"], "initializationStart": [123], "initializationEnd": [153], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern,locale)", "focalAPIStart": 219, "focalAPIEnd": 282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdkoftinoff/mb-linux-msli/tree/master/uClinux-dist/lib/classpath/java/net/URLConnection.java", "rawCode": "  private static synchronized void initializeDateFormats() {\n    if (dateformats_initialized) return;\n\n    Locale locale = new Locale(\"En\", \"Us\", \"Unix\");\n    dateFormats = new SimpleDateFormat[3];\n    dateFormats[0] = new SimpleDateFormat(\"EEE, dd MMM yyyy hh:mm:ss 'GMT'\", locale);\n    dateFormats[1] = new SimpleDateFormat(\"EEEE, dd-MMM-yy hh:mm:ss 'GMT'\", locale);\n    dateFormats[2] = new SimpleDateFormat(\"EEE MMM d hh:mm:ss yyyy\", locale);\n    dateformats_initialized = true;\n  }\n"}, {"dataset": "parse", "exampleID": 7894, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 550, "focalAPIEnd": 588, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [657], "useEnd": [672], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DDTH/DASP/tree/master/servlet/src/ddth/dasp/servlet/osgi/FelixOsgiBootstrap.java", "rawCode": "  private Properties loadConfigProperties() {\n    File configFile = new File(renderOsgiContainerLocation(), OSGI_CONFIG_FILE);\n    Properties configProps = new Properties();\n    FileInputStream fis = null;\n    try {\n      fis = new FileInputStream(configFile);\n      configProps.load(fis);\n    } catch (IOException e) {\n      LOGGER.error(FATAL, e.getMessage());\n      throw new RuntimeException(e);\n    } finally {\n      IOUtils.closeQuietly(fis);\n    }\n    IdGenerator idGen = IdGenerator.getInstance(IdGenerator.getMacAddr());\n    DateFormat df = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n    Date date = new Date();\n    String instanceRandomStr =\n        df.format(date)\n            + \"_\"\n            + System.getProperty(SYSPROP_SPRING_PROFILE, \"\")\n            + \"_\"\n            + idGen.generateId48Hex();\n    // perform variables substitution for system properties.\n    for (Enumeration<?> e = configProps.propertyNames(); e.hasMoreElements(); ) {\n      String name = (String) e.nextElement();\n      String value = configProps.getProperty(name);\n      if (value != null) {\n        value = value.replace(\"${random}\", instanceRandomStr);\n      }\n      value = Util.substVars(value, name, null, configProps);\n      configProps.setProperty(name, value);\n    }\n\n    // configure Felix auto-deploy directory\n    String sAutoDeployDir = configProps.getProperty(AutoProcessor.AUTO_DEPLOY_DIR_PROPERY);\n    if (sAutoDeployDir == null) {\n      throw new RuntimeException(\n          \"Can not find configuration [\"\n              + AutoProcessor.AUTO_DEPLOY_DIR_PROPERY\n              + \"] in file \"\n              + configFile.getAbsolutePath());\n    }\n    File fAutoDeployDir = new File(renderOsgiContainerLocation(), sAutoDeployDir);\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(AutoProcessor.AUTO_DEPLOY_DIR_PROPERY + \": \" + fAutoDeployDir.getAbsolutePath());\n    }\n    configProps.setProperty(\n        AutoProcessor.AUTO_DEPLOY_DIR_PROPERY, fAutoDeployDir.getAbsolutePath());\n\n    // configure Felix temp (storage) directory\n    String sCacheDir = configProps.getProperty(Constants.FRAMEWORK_STORAGE);\n    if (sCacheDir == null) {\n      throw new RuntimeException(\n          \"Can not find configuration [\"\n              + Constants.FRAMEWORK_STORAGE\n              + \"] in file \"\n              + configFile.getAbsolutePath());\n    } else if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(Constants.FRAMEWORK_STORAGE + \": \" + sCacheDir);\n    }\n    File fCacheDir = new File(sCacheDir);\n    String contextPath = DaspGlobal.getServletContext().getContextPath();\n    if (contextPath.equals(\"\")) {\n      contextPath = \"_\";\n    }\n    fCacheDir = new File(fCacheDir, contextPath);\n    configProps.setProperty(Constants.FRAMEWORK_STORAGE, fCacheDir.getAbsolutePath());\n\n    // configure Felix's File Install watch directory\n    String sMonitorDir = configProps.getProperty(\"felix.fileinstall.dir\");\n    if (sMonitorDir != null) {\n      File fMonitorDir = new File(renderOsgiContainerLocation(), sMonitorDir);\n      configProps.setProperty(\"felix.fileinstall.dir\", fMonitorDir.getAbsolutePath());\n      if (LOGGER.isDebugEnabled()) {\n        LOGGER.debug(\"felix.fileinstall.dir: \" + fMonitorDir.getAbsolutePath());\n      }\n    }\n\n    // configure Felix's Remote Shell listen IP & Port\n    if (remoteShellListenIp != null) {\n      configProps.setProperty(\"osgi.shell.telnet.ip\", remoteShellListenIp);\n    }\n    if (remoteShellListenPort > 0) {\n      configProps.setProperty(\"osgi.shell.telnet.port\", String.valueOf(remoteShellListenPort));\n    }\n    if (LOGGER.isDebugEnabled()) {\n      LOGGER.debug(\"Remote Shell: \" + remoteShellListenIp + \":\" + remoteShellListenPort);\n    }\n\n    return configProps;\n  }\n"}, {"dataset": "parse", "exampleID": 7895, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 273, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AlibabaTech/fastjson/tree/master/src/main/java/com/alibaba/fastjson/serializer/SimpleDateFormatSerializer.java", "rawCode": "  public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType)\n      throws IOException {\n    if (object == null) {\n      serializer.getWriter().writeNull();\n      return;\n    }\n\n    Date date = (Date) object;\n    SimpleDateFormat format = new SimpleDateFormat(pattern);\n\n    String text = format.format(date);\n    serializer.write(text);\n  }\n"}, {"dataset": "parse", "exampleID": 7896, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 514, "focalAPIEnd": 585, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format(format,AcalDateTime)", "format(format,AcalDateTime)", "format(format,AcalDateTime)"], "useStart": [658, 806, 992], "useEnd": [684, 828, 1020], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ujayant/acal/tree/master/src/com/morphoss/acal/acaltime/AcalDateTimeFormatter.java", "rawCode": "  /**\n   * Formatter for handling Task start/due/completed dates.\n   *\n   * @param c\n   * @param dtstart\n   * @param due\n   * @param completed\n   * @param as24HourTime\n   * @return\n   */\n  public static CharSequence getTodoTimeText(\n      Context c,\n      AcalDateTime dtstart,\n      AcalDateTime due,\n      AcalDateTime completed,\n      boolean as24HourTime) {\n\n    if (dtstart == null && due == null && completed == null)\n      return c.getString(R.string.Unscheduled);\n\n    SimpleDateFormat formatter =\n        new SimpleDateFormat(\" MMM d, \" + (as24HourTime ? \"HH:mm\" : \"hh:mmaa\"));\n\n    return (dtstart == null ? \"\" : c.getString(R.string.FromPrompt) + format(formatter, dtstart))\n        + (dtstart != null && due != null ? \" - \" : \"\")\n        + (due == null ? \"\" : c.getString(R.string.DuePrompt) + format(formatter, due))\n        + (completed != null\n            ? (due != null || dtstart != null ? \", \" : \"\")\n                + c.getString(R.string.CompletedPrompt)\n                + format(formatter, completed)\n            : \"\");\n  }\n"}, {"dataset": "parse", "exampleID": 7897, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 474, "focalAPIEnd": 508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [474], "useEnd": [549], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pavel-slyvka/lavida/tree/master/finance/swing/src/main/java/com/lavida/swing/dialog/SellDialog.java", "rawCode": "  public void initWithArticleJdo(ArticleJdo articleJdo) {\n    codeField.setText(articleJdo.getCode());\n    nameField.setText(articleJdo.getName());\n    brandField.setText(articleJdo.getBrand());\n    sizeField.setText(articleJdo.getSize());\n    priceField.setText(String.valueOf(articleJdo.getSalePrice()));\n    commentTextField.setText(articleJdo.getComment());\n    discountTextField.setText(\"0.0\");\n    handler.discountTextEntered();\n    saleDateTextField.setText(\n        new SimpleDateFormat(\"dd.MM.yyyy\").format(Calendar.getInstance().getTime()));\n    shopComboBox.setSelectedItem(defaultShop);\n    clientCheckBox.setSelected(true);\n    presentCheckBox.setSelected(false);\n    for (JCheckBox checkbox : tagCheckBoxes) {\n      checkbox.setSelected(false);\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7898, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 1257, "focalAPIEnd": 1286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)", "format.format(Date)", "format.parse(String)", "format.parse(String)"], "useStart": [1326, 1570, 2303, 2325], "useEnd": [1344, 1586, 2323, 2345], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gillesB/semantischeOperabilitaet2013/tree/master/SI-Hauptprojekt/src/de/htw/gui/TimeFrameChooser/TimeFrameChooser.java", "rawCode": "  private void initCalendarDisplay() {\n    calendarBaseLayer = new JPanel();\n    calendarBaseLayer.setLayout(new GridBagLayout());\n    calendarBaseLayer.setBackground(new Color(205, 205, 205));\n\n    GridBagConstraints constraints = new GridBagConstraints();\n    constraints.anchor = GridBagConstraints.CENTER;\n    constraints.insets = new Insets(1, 1, 1, 1);\n    constraints.fill = GridBagConstraints.NONE;\n\n    constraints.gridx = 3;\n    constraints.gridy = 1;\n    constraints.gridheight = 1;\n    constraints.gridwidth = 1;\n    constraints.weightx = 999;\n    constraints.weighty = 1;\n\n    // add labels for weekdays\n    for (int i = 0; i < 7; ++i) {\n      JButton temp = new JButton(String.valueOf(Day.getByID(i + 1)));\n      final int finalI = i;\n      temp.addActionListener(\n          new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n              toggleByDayID(finalI);\n            }\n          });\n      calendarBaseLayer.add(temp, constraints);\n      constraints.gridx += 2;\n    }\n\n    // add time frames\n    constraints.gridx = 1;\n    constraints.gridy = 3;\n    constraints.weighty = 999;\n    constraints.weightx = 1;\n    constraints.anchor = GridBagConstraints.NORTH;\n\n    SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm\");\n    Date date;\n    try {\n      date = sdf.parse(\"07:00\");\n    } catch (Exception e) {\n      RootLogger.getInstance(LoggerNames.MAIN_LOGGER)\n          .log(\"Error creating Table Data\", Level.SEVERE, e);\n      return;\n    }\n    for (int i = 0; i < 16; ++i) {\n      String timeFrame = sdf.format(date);\n      date.setTime(date.getTime() + ONE_HOUR);\n      timeFrame += \" - \" + sdf.format(date);\n      JLabel temp = new JLabel(timeFrame);\n      timeLabels.add(temp);\n      calendarBaseLayer.add(temp, constraints);\n      constraints.gridy += 2;\n    }\n\n    // create calendar like look\n    constraints.gridx = 3;\n    constraints.gridy = 3;\n    constraints.weighty = 999;\n    constraints.anchor = GridBagConstraints.CENTER;\n    constraints.fill = GridBagConstraints.BOTH;\n    try {\n      for (int i = 0; i < 7; ++i) {\n        constraints.gridy = 3;\n        for (int j = 0; j < 16; ++j) {\n          String[] tArray = timeLabels.get(j).getText().split(\"-\");\n          TimeFramePanel temp =\n              new TimeFramePanel(sdf.parse(tArray[0]), sdf.parse(tArray[1]), Day.getByID(i + 1));\n          timeFramePanels.add(temp);\n          calendarBaseLayer.add(temp, constraints);\n          constraints.gridy += 2;\n        }\n        constraints.gridx += 2;\n      }\n    } catch (ParseException e) {\n      RootLogger.getInstance(LoggerNames.MAIN_LOGGER).log(\"Error Parsing Times!\", Level.SEVERE, e);\n      System.exit(-1);\n    }\n  }\n"}, {"dataset": "parse", "exampleID": 7899, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 118, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.format(Date)"], "useStart": [237], "useEnd": [259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/simrem/pritest-maven-plugin/tree/master/src/main/java/no/pritest/reporter/APFDHelper.java", "rawCode": "  public static void outputAPFDToFile(APFD apfd, int techniqueNumber) throws IOException {\n    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n    String directory = \"apfd/\" + techniqueNumber + \"/\";\n    String filename = sdf.format(new Date()) + \".txt\";\n\n    File dir = new File(directory);\n    if (!dir.exists()) {\n      dir.mkdirs();\n    }\n\n    File file = new File(directory + filename);\n    if (!file.exists()) {\n      file.createNewFile();\n    }\n    BufferedWriter bw = new BufferedWriter(new FileWriter(file));\n    bw.write(String.valueOf(apfd.calculateAPFD()));\n    bw.close();\n  }\n"}, {"dataset": "parse", "exampleID": 7900, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "format = simpleDateFormat.SimpleDateFormat(pattern)", "focalAPIStart": 244, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format.parse(String)", "format.parse(String)", "format.parse(String)", "format.parse(String)"], "useStart": [524, 710, 825, 939], "useEnd": [546, 732, 847, 961], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czakian/openmrs_gsoc/tree/master/api/src/test/java/org/openmrs/PersonTest.java", "rawCode": "  /**\n   * Test that setting a person's age correctly sets their birth date and records that this is\n   * inexact\n   *\n   * @throws Exception\n   */\n  @Test\n  public void shouldSetInexactBirthdateFromAge() throws Exception {\n    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Person p = new Person();\n\n    // Test that default values are correct\n    assertNull(p.getAge());\n    assertFalse(p.isBirthdateEstimated());\n\n    // Test standard case and ensure estimated field is set to true\n    p.setBirthdateFromAge(10, df.parse(\"2008-05-20\"));\n    assertEquals(p.getBirthdate(), df.parse(\"1998-01-01\"));\n    assertTrue(p.getBirthdateEstimated());\n\n    // Test boundary cases\n    p.setBirthdateFromAge(52, df.parse(\"2002-01-01\"));\n    assertEquals(p.getBirthdate(), df.parse(\"1950-01-01\"));\n    p.setBirthdateFromAge(35, df.parse(\"2004-12-31\"));\n    assertEquals(p.getBirthdate(), df.parse(\"1969-01-01\"));\n    p.setBirthdateFromAge(0, df.parse(\"2008-05-20\"));\n    assertEquals(p.getBirthdate(), df.parse(\"2008-01-01\"));\n  }\n"}]