[{"dataset": "resultSetGetString", "exampleID": 6901, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 92, "focalAPIEnd": 107, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-707/kernel-impl/src/main/java/org/sakaiproject/content/impl/serialize/impl/conversion/FileSizeResourcesConversionHandler.java", "rawCode": "  public Object getValidateSource(String id, ResultSet rs) throws SQLException {\n    return rs.getString(1);\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6902, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)"], "configurationStart": [119, 165, 225], "configurationEnd": [138, 193, 260], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 285, "focalAPIEnd": 313, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setMemberId(value)", "resultSet.getString(String)"], "useStart": [267, 359], "useEnd": [314, 385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ne-sachirou/nimunimu/tree/master/src/tk/c4se/halt/ih31/nimunimu/repository/OurOrderRepository.java", "rawCode": "  @Override\n  protected OurOrder setProperties(OurOrder order, ResultSet result) throws SQLException {\n    order.setId(result.getInt(\"id\"));\n    order.setSupplierId(result.getInt(\"supplier_id\"));\n    order.setOurOrderSheetId(result.getInt(\"our_order_sheet_id\"));\n    order.setMemberId(result.getString(\"memberId\"));\n    order.setStatus(OurOrderStatus.valueOf(result.getString(\"status\")));\n    return order;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6903, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [419], "initializationEnd": [487], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 264, "tryExpressionEnd": 268, "tryBlockStart": 264, "tryBlockEnd": 1653, "catchExpressionStart": 1259, "catchExpressionEnd": 1282, "catchBlockStart": 1259, "catchBlockEnd": 1331, "exceptionHandlingCallStart": [1290], "exceptionHandlingCallEnd": [1309], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet!=null && resultSet.next()", "guardType": "IF {", "guardExpressionStart": 495, "guardExpressionEnd": 512, "guardBlockStart": 495, "guardBlockEnd": 1230, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 571, "focalAPIEnd": 588, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.close()"], "useStart": [1380], "useEnd": [1392], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 1332, "finallyExpressionEnd": 1340, "finallyBlockStart": 1332, "finallyBlockEnd": 1653, "cleanUpCallStart": [1380], "cleanUpCallEnd": [1392], "url": "https://github.com/jdeverdun/GdcServerManager/tree/master/GdcServerManager/src/dao/MySQLDataBaseAdminDAO.java", "rawCode": "  @Override\n  public boolean createUser(User user) throws SQLException {\n    if (SQLSettings.getPDS() == null) System.err.println(\"getPDS() not started.\");\n    ResultSet rset = null;\n    int rset2;\n    Statement stmt = null;\n    Connection connection = null;\n\n    try {\n      connection = SQLSettings.getPDS().getConnection();\n      stmt = connection.createStatement();\n      String encryptedPass = null;\n\n      rset = stmt.executeQuery(\"select PASSWORD('\" + user.getPassword() + \"') ;\");\n      if (rset != null) {\n        while (rset.next()) {\n          encryptedPass = rset.getString(1);\n        }\n        rset2 =\n            stmt.executeUpdate(\n                \"create user '\"\n                    + user.getLogin()\n                    + \"'@'%' IDENTIFIED BY PASSWORD '\"\n                    + encryptedPass\n                    + \"' ;\");\n\n        String[] viewCommand = Scripts.getCreateUserViews(user);\n        // On cree les vues utilisateur et on donne les acces\n        for (String curcom : viewCommand) rset2 = stmt.executeUpdate(curcom);\n\n        // on insere le tuple dans user_view\n        UserViewDAO uvdao = new MySQLUserViewDAO();\n        uvdao.addUserView(user.getLogin(), user.getId());\n\n        return true;\n      }\n\n      return false;\n\n    } catch (SQLException e) {\n      e.printStackTrace();\n      throw e;\n    } finally {\n      try {\n        if (rset != null) rset.close();\n      } catch (Exception e) {\n      }\n      ;\n      try {\n        if (stmt != null) stmt.close();\n      } catch (Exception e) {\n      }\n      ;\n      try {\n        if (connection != null) connection.close();\n      } catch (Exception e) {\n      }\n      ;\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6904, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["error(String,*)", "getMessage()", "new DAOReadException(String)"], "tryExpressionStart": 508, "tryExpressionEnd": 672, "tryBlockStart": 508, "tryBlockEnd": 1641, "catchExpressionStart": 1293, "catchExpressionEnd": 1316, "catchBlockStart": 1293, "catchBlockEnd": 1468, "exceptionHandlingCallStart": [1324, 1446, 1387], "exceptionHandlingCallEnd": [1373, 1460, 1461], "configuration": ["resultSet.getLong(String)"], "configurationStart": [768], "configurationEnd": [786], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 681, "guardExpressionEnd": 702, "guardBlockStart": 681, "guardBlockEnd": 1285, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 820, "focalAPIEnd": 842, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setProjectName(value)", "resultSet.getDate(String)", "resultSet.getDate(String)", "resultSet.getDate(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [797, 877, 946, 1019, 1075, 1135, 1218], "useEnd": [843, 900, 982, 1044, 1101, 1164, 1242], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/revan-kun/inTouch/tree/master/src/main/java/com/epam/lab/intouch/dao/project/DefaultProjectDAO.java", "rawCode": "  /**\n   * Method for getting all project from DB who match the query\n   *\n   * @see com.epam.lab.intouch.dao.BaseDAO#getAll()\n   * @param query This is query to DB\n   * @return List<Project>\n   * @throws DAOReadException\n   * @exception SQLException if problem in SQL query or other\n   * @exception DBConnectionException if problem with connection\n   */\n  @Override\n  public List<Project> getAllFromSearch(String query) throws DAOReadException {\n\n    List<Project> projects = new ArrayList<Project>();\n\n    try (Connection connection = getConnection();\n        Statement statement = connection.createStatement();\n        ResultSet result = statement.executeQuery(query)) {\n\n      while (result.next()) {\n        Project project = new Project();\n        project.setId(result.getLong(ID));\n        project.setProjectName(result.getString(NAME));\n        project.setCreationDate(result.getDate(CREATED));\n        project.setEstimatedCompletionDate(result.getDate(ESTIMATED_COMPLETION));\n        project.setCompletionDate(result.getDate(COMPLETED));\n        project.setCustomer(result.getString(CUSTOMER));\n        project.setDescription(result.getString(DESCRIPTION));\n        project.setStatus(ProjectStatus.fromString(result.getString(STATUS)));\n\n        projects.add(project);\n      }\n\n    } catch (SQLException e) {\n      LOG.error(\"Problem with getting all Projects\", e);\n      throw new DAOReadException(\"Problem with getting all Projects\" + e.getMessage());\n    } catch (DBConnectionException e) {\n      LOG.error(\"Connection exception\" + e.getMessage());\n      throw new DAOReadException(\"Connection exception\" + e.getMessage());\n    }\n\n    return projects;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6905, "initialization": ["ResultSet resultSet = Statement.getGeneratedKeys()"], "initializationStart": [370], "initializationEnd": [390], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": [], "tryExpressionStart": 179, "tryExpressionEnd": 183, "tryBlockStart": 179, "tryBlockEnd": 566, "catchExpressionStart": 442, "catchExpressionEnd": 462, "catchBlockStart": 442, "catchBlockEnd": 484, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "IF {", "guardExpressionStart": 398, "guardExpressionEnd": 412, "guardBlockStart": 398, "guardBlockEnd": 434, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 418, "focalAPIEnd": 433, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.close()"], "useStart": [517], "useEnd": [527], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 485, "finallyExpressionEnd": 493, "finallyBlockStart": 485, "finallyBlockEnd": 566, "cleanUpCallStart": [517], "cleanUpCallEnd": [527], "url": "https://github.com/massimilianopolito/AutonomyProject/tree/master/AutonomyReportProject/src/dao/AbstractDao.java", "rawCode": "  protected String getId(Connection connection, String tableName) throws Exception {\n    String id = \"\";\n    Statement s = null;\n    ResultSet rs = null;\n    String sql = \"\";\n    try {\n      sql = \"INSERT INTO \" + tableName + \" (ID) VALUES (NULL)\";\n      s = connection.createStatement();\n      int i = s.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);\n\n      rs = s.getGeneratedKeys();\n      if (rs.next()) id = rs.getString(1);\n\n    } catch (Exception e) {\n      throw e;\n    } finally {\n      if (rs != null) rs.close();\n      if (s != null) s.close();\n    }\n\n    return id;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6906, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [715], "initializationEnd": [739], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 495, "tryExpressionEnd": 499, "tryBlockStart": 495, "tryBlockEnd": 1221, "catchExpressionStart": 1164, "catchExpressionEnd": 1187, "catchBlockStart": 1164, "catchBlockEnd": 1221, "exceptionHandlingCallStart": [1195], "exceptionHandlingCallEnd": [1214], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 749, "guardExpressionEnd": 766, "guardBlockStart": 749, "guardBlockEnd": 1010, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 793, "focalAPIEnd": 808, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getInt(int)", "ArrayList.add(value)", "resultSet.close()"], "useStart": [833, 901, 1079], "useEnd": [845, 913, 1089], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hbcit2010software/hbcitsports/tree/master/src/cn/edu/hbcit/smms/dao/createprogramdao/DataManagerDAO.java", "rawCode": "  /**\n   * look 根据finalitemid查询接力的各组部门名\n   *\n   * @param finalitemid\n   * @return ArrayList\n   */\n  public ArrayList slectRelayInfo(int finalitemid) {\n    // ArrayList trackInfo = new ArrayList();\n    ArrayList pn = new ArrayList();\n    // ArrayList rw = new ArrayList();\n    String sql =\n        \"SELECT t_department.departshortname,t_match.runway FROM t_match JOIN t_department ON\"\n            + \" t_match.playerid = t_department.id WHERE t_match.finalitemid = ? ORDER BY teamnum,runway\";\n    try {\n      Connection conn = db.getConn();\n      if (conn != null) {\n        ResultSet rs = null;\n        PreparedStatement statement = conn.prepareStatement(sql);\n        statement.setInt(1, finalitemid);\n        rs = statement.executeQuery();\n        while (rs.next()) {\n          String pnum = rs.getString(1);\n          int runway = rs.getInt(2);\n          pnum = pnum + \"(\" + runway + \")\";\n          pn.add(pnum);\n          // Integer runway = new Integer(rs.getInt(2));\n          // rw.add(runway);\n        }\n        // trackInfo.add(pn);\n        // trackInfo.add(rw);\n        rs.close();\n        statement.close();\n      }\n\n      db.freeConnection(conn);\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n    return pn;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6907, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["panic(*)"], "tryExpressionStart": 115, "tryExpressionEnd": 119, "tryBlockStart": 115, "tryBlockEnd": 363, "catchExpressionStart": 299, "catchExpressionEnd": 331, "catchBlockStart": 299, "catchBlockEnd": 363, "exceptionHandlingCallStart": [345], "exceptionHandlingCallEnd": [356], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 148, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["logColumnExtraction(String,value)", "resultSet.wasNull()", "fromString(value)"], "useStart": [187, 240, 269], "useEnd": [225, 259, 291], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/raykroeker/thinkparity/tree/master/server/src/main/java/com/thinkparity/server/model/backup/io/db/hsqldb/Session.java", "rawCode": "  public UUID getUniqueId(final String columnName) {\n    assertConnectionIsOpen();\n    assertResultSetIsSet();\n    try {\n      final String value = resultSet.getString(columnName);\n      logColumnExtraction(columnName, value);\n      return resultSet.wasNull() ? null : UUID.fromString(value);\n    } catch (final SQLException sqlx) {\n      throw panic(sqlx);\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6908, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(String)"], "configurationStart": [211], "configurationEnd": [234], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 479, "focalAPIEnd": 499, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getTimestamp(String)", "resultSet.getInt(String)", "resultSet.getTimestamp(String)", "getInt(resultSet,String)", "resultSet.getBoolean(String)", "resultSet.getBoolean(String)", "resultSet.getTimestamp(String)", "getInt(resultSet,String)"], "useStart": [515, 559, 598, 641, 703, 765, 822, 878], "useEnd": [541, 581, 626, 676, 741, 800, 856, 921], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yukoff/concourse-connect/tree/master/src/main/java/com/concursive/connect/web/modules/messages/dao/PrivateMessage.java", "rawCode": "  /**\n   * Description of the Method\n   *\n   * @param rs Description of Parameter\n   * @throws SQLException Description of Exception\n   */\n  private void buildRecord(ResultSet rs) throws SQLException {\n    id = rs.getInt(\"message_id\");\n    projectId = DatabaseUtils.getInt(rs, \"project_id\");\n    parentId = DatabaseUtils.getInt(rs, \"parent_id\");\n    linkModuleId = DatabaseUtils.getInt(rs, \"link_module_id\");\n    linkItemId = DatabaseUtils.getInt(rs, \"link_item_id\");\n    body = rs.getString(\"body\");\n    entered = rs.getTimestamp(\"entered\");\n    enteredBy = rs.getInt(\"enteredby\");\n    readDate = rs.getTimestamp(\"read_date\");\n    readBy = DatabaseUtils.getInt(rs, \"read_by\");\n    deletedByEnteredBy = rs.getBoolean(\"deleted_by_entered_by\");\n    deletedByUserId = rs.getBoolean(\"deleted_by_user_id\");\n    lastReplyDate = rs.getTimestamp(\"last_reply_date\");\n    linkProjectId = DatabaseUtils.getInt(rs, \"link_project_id\");\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6909, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1449, "focalAPIEnd": 1476, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [1492, 1538, 1581, 1624, 1667, 1710, 1753, 1799, 1846, 1890, 1935], "useEnd": [1522, 1565, 1608, 1651, 1694, 1737, 1783, 1830, 1874, 1919, 1962], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gantu/u-ims/tree/master/src/main/java/kg/cloud/uims/dao/DbStudLess.java", "rawCode": "  public void execSQL_Subject(String subj_id, String yearID, String semID) throws SQLException {\n\n    String sql =\n        \"select t0.id,t1.id,t1.name,t1.surname,t6.name,t2.name,t2.id,\"\n            + \"t2.code,t2.stdyear,t2.hours,t2.credit,t3.id,\"\n            + \"t3.name,t4.year,t5.semester,t0.status,t7.name, t1.dept_id from less_stud as t0 \"\n            + \"left join student as t1 on t0.student_id=t1.id \"\n            + \"left join department as t6 on t1.dept_id=t6.id \"\n            + \"left join subjects as t2 on t0.subject_id=t2.id \"\n            + \"left join sinif as t3 on t1.group_id=t3.id \"\n            + \"left join year as t4 on t0.year_id=t4.id \"\n            + \"left join semester as t5 on t0.sem_id=t5.id \"\n            + \"left join faculty as t7 on t6.faculty_id=t7.id \"\n            + \"where t2.id=? and t5.id =? and t4.id=? and t0.status > 0 and t0.status < 3 \"\n            + \"and t1.edu_status_id=1 order by t1.name,t1.surname asc;\";\n\n    q = new ArrayList<StudLess>();\n\n    PreparedStatement stat = dbCon.prepareStatement(sql);\n    stat.setString(1, subj_id);\n    stat.setString(2, semID);\n    stat.setString(3, yearID);\n    ResultSet result = stat.executeQuery();\n    while (result.next()) {\n      q.add(\n          new StudLess(\n              result.getInt(\"t0.id\"),\n              result.getInt(\"t1.id\"),\n              result.getInt(\"t2.id\"),\n              result.getInt(\"t3.id\"),\n              result.getInt(\"t0.status\"),\n              result.getString(\"t1.name\"),\n              result.getString(\"t1.surname\"),\n              result.getString(\"t6.name\"),\n              result.getString(\"t2.name\"),\n              result.getString(\"t2.code\"),\n              result.getString(\"t3.name\"),\n              result.getString(\"t4.year\"),\n              result.getString(\"t2.stdyear\"),\n              result.getString(\"t5.semester\"),\n              result.getString(\"t2.hours\"),\n              result.getString(\"t2.credit\"),\n              result.getString(\"t7.name\"),\n              result.getInt(\"t1.dept_id\")));\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6910, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [271], "initializationEnd": [291], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "error(*,*)"], "tryExpressionStart": 122, "tryExpressionEnd": 126, "tryBlockStart": 122, "tryBlockEnd": 509, "catchExpressionStart": 371, "catchExpressionEnd": 391, "catchBlockStart": 371, "catchBlockEnd": 434, "exceptionHandlingCallStart": [409, 399], "exceptionHandlingCallEnd": [423, 427], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 300, "guardExpressionEnd": 317, "guardBlockStart": 300, "guardBlockEnd": 364, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 339, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)", "closeConnection(resultSet,PreparedStatement,Connection)"], "useStart": [328, 451], "useEnd": [355, 502], "hasFinally": 1, "cleanUpCall": ["closeConnection(ResultSet,PreparedStatement,Connection)"], "finallyExpressionStart": 435, "finallyExpressionEnd": 443, "finallyBlockStart": 435, "finallyBlockEnd": 509, "cleanUpCallStart": [451], "cleanUpCallEnd": [502], "url": "https://github.com/Connectify/Openfire/tree/master/src/plugins/fastpath/src/java/org/jivesoftware/xmpp/workgroup/RequestQueue.java", "rawCode": "  private void loadGroups() {\n    Connection con = null;\n    PreparedStatement pstmt = null;\n    ResultSet rs = null;\n    try {\n      con = DbConnectionManager.getConnection();\n      pstmt = con.prepareStatement(LOAD_QUEUE_GROUPS);\n      pstmt.setLong(1, id);\n      rs = pstmt.executeQuery();\n\n      while (rs.next()) {\n        groups.add(rs.getString(1));\n      }\n    } catch (Exception e) {\n      Log.error(e.getMessage(), e);\n    } finally {\n      DbConnectionManager.closeConnection(rs, pstmt, con);\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6911, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 146, "focalAPIEnd": 172, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setStudentID(value)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [125, 200, 255, 309, 358, 404, 455], "useEnd": [173, 226, 282, 334, 379, 426, 482], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pganesan/schedu-elp/tree/master/coen285/src/scheduelp/model/mapping/StudentMapper.java", "rawCode": "  @Override\n  public Student mapRow(ResultSet rs, int rowNum) throws SQLException {\n    Student student = new Student();\n    student.setStudentID(rs.getString(\"student_id\"));\n    student.setFirstName(rs.getString(\"first_name\"));\n    student.setMiddleName(rs.getString(\"middle_name\"));\n    student.setLastName(rs.getString(\"last_name\"));\n    student.setEmail(rs.getString(\"email\"));\n    student.setDegree(rs.getString(\"degree\"));\n    student.setDegreeDesc(rs.getString(\"degree_name\"));\n\n    return student;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6912, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [799], "initializationEnd": [818], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 290, "tryExpressionEnd": 294, "tryBlockStart": 290, "tryBlockEnd": 1782, "catchExpressionStart": 1421, "catchExpressionEnd": 1444, "catchBlockStart": 1421, "catchBlockEnd": 1519, "exceptionHandlingCallStart": [1493], "exceptionHandlingCallEnd": [1512], "configuration": ["resultSet.getInt(int)"], "configurationStart": [1028], "configurationEnd": [1041], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 827, "guardExpressionEnd": 845, "guardBlockStart": 827, "guardBlockEnd": 1413, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 1071, "focalAPIEnd": 1087, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setNom(value)", "resultSet.getString(int)", "resultSet.getInt(int)", "resultSet.getString(int)", "resultSet.getInt(int)", "resultSet.getString(int)", "resultSet.close()"], "useStart": [1052, 1120, 1205, 1243, 1282, 1318, 1579], "useEnd": [1088, 1136, 1218, 1259, 1295, 1334, 1590], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 1520, "finallyExpressionEnd": 1528, "finallyBlockStart": 1520, "finallyBlockEnd": 1782, "cleanUpCallStart": [1579], "cleanUpCallEnd": [1590], "url": "https://github.com/imie-source/DLCDI08-ICompetence-G3/tree/master/Gestion Competences/src/fr/imie/formation/DAO/NiveauDAO.java", "rawCode": "  private List<NiveauDTO> readNiveauUtilisateurCompetence(CompetenceDTO competence, Connection cn)\n      throws TransactionalConnectionException, DAOException {\n\n    PreparedStatement pstm = null;\n    ResultSet rst = null;\n\n    List<NiveauDTO> listNiveau = new ArrayList<NiveauDTO>();\n\n    try {\n\n      String query =\n          \"SELECT utilisateur.num, utilisateur.nom, utilisateur.prenom, niveau.num, niveau.valeur as niveau, competence.num, competence.nom FROM niveau INNER JOIN competence_util ON niveau.num=competence_util.num_niveau INNER JOIN utilisateur ON utilisateur.num=competence_util.num_util INNER JOIN competence ON competence.num=competence_util.num_competence where competence.num=?;\";\n\n      pstm = cn.prepareStatement(query);\n      pstm.setInt(1, competence.getNum());\n      rst = pstm.executeQuery();\n\n      while (rst.next()) {\n        UtilisateurDTO utilisateur = new UtilisateurDTO();\n        NiveauDTO niveau = new NiveauDTO();\n        CompetenceDTO comp = new CompetenceDTO();\n        utilisateur.setNum(rst.getInt(1));\n        utilisateur.setNom(rst.getString(2));\n        utilisateur.setPrenom(rst.getString(3));\n        niveau.setUtilisateur(utilisateur);\n        niveau.setNum(rst.getInt(4));\n        niveau.setNom(rst.getString(5));\n        comp.setNum(rst.getInt(6));\n        comp.setNom(rst.getString(7));\n        niveau.setCompetence(comp);\n\n        listNiveau.add(niveau);\n      }\n\n    } catch (SQLException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } finally {\n      try {\n        if (rst != null) {\n          rst.close();\n        }\n        if (pstm != null) {\n          pstm.close();\n        }\n      } catch (SQLException e) {\n        // TODO Auto-generated catch block\n        e.printStackTrace();\n      }\n    }\n    return listNiveau;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6913, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [370], "initializationEnd": [389], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 397, "guardExpressionEnd": 419, "guardBlockStart": 397, "guardBlockEnd": 537, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 442, "focalAPIEnd": 462, "followUpCheck": "value != null && !reports.contains(value)", "checkType": "IF", "followUpCheckExpressionStart": 472, "followUpCheckExpressionEnd": 512, "followUpCheckBlockStart": 472, "followUpCheckBlockEnd": 529, "use": ["List<String>.add(value)", "cleanUp(PreparedStatement,resultSet)"], "useStart": [513, 560], "useEnd": [528, 582], "hasFinally": 1, "cleanUpCall": ["cleanUp(PreparedStatement,ResultSet)"], "finallyExpressionStart": 544, "finallyExpressionEnd": 552, "finallyBlockStart": 544, "finallyBlockEnd": 589, "cleanUpCallStart": [560], "cleanUpCallEnd": [582], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/paloviewapi/src/org/palo/viewapi/internal/dbmappers/ReportViewAssociation.java", "rawCode": "  public final List<String> getReports(View view) throws SQLException {\n    PreparedStatement stmt = null;\n    ResultSet results = null;\n    List<String> reports = new ArrayList<String>();\n    Connection connection = DbService.getConnection();\n    try {\n      stmt = connection.prepareStatement(FIND_BY_VIEW_STMT);\n      stmt.setString(1, view.getId());\n      results = stmt.executeQuery();\n      while (results.next()) {\n        String id = results.getString(2);\n        if (id != null && !reports.contains(id)) reports.add(id);\n      }\n    } finally {\n      cleanUp(stmt, results);\n    }\n    return reports;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6914, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [352], "initializationEnd": [409], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 415, "guardExpressionEnd": 432, "guardBlockStart": 415, "guardBlockEnd": 618, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 457, "focalAPIEnd": 479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "createTrigger(Connection,value,String)", "indexExistingRows(Connection,value,String)"], "useStart": [502, 531, 573], "useEnd": [523, 565, 611], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/angusmacdonald/h2o/tree/master/src/main/org/h2/fulltext/FullTextLucene.java", "rawCode": "  /**\n   * Re-creates the full text index for this database.\n   *\n   * @param conn the connection\n   */\n  // ## Java 1.4 begin ##\n  public static void reindex(Connection conn) throws SQLException {\n\n    init(conn);\n    removeAllTriggers(conn, TRIGGER_PREFIX);\n    removeIndexFiles(conn);\n    Statement stat = conn.createStatement();\n    ResultSet rs = stat.executeQuery(\"SELECT * FROM \" + SCHEMA + \".INDEXES\");\n    while (rs.next()) {\n      String schema = rs.getString(\"SCHEMA\");\n      String table = rs.getString(\"TABLE\");\n      createTrigger(conn, schema, table);\n      indexExistingRows(conn, schema, table);\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6915, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 147, "focalAPIEnd": 167, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 173, "followUpCheckExpressionEnd": 189, "followUpCheckBlockStart": 173, "followUpCheckBlockEnd": 207, "use": ["value.trim()"], "useStart": [196], "useEnd": [206], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/openjpa/tree/master/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/sql/FoxProDictionary.java", "rawCode": "  @Override\n  public String getString(ResultSet rs, int column) throws SQLException {\n    // foxpro doesn't auto-truncate values.\n    String str = rs.getString(column);\n    if (str != null) str = str.trim();\n    return str;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6916, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 238, "tryExpressionEnd": 242, "tryBlockStart": 238, "tryBlockEnd": 751, "catchExpressionStart": 653, "catchExpressionEnd": 676, "catchBlockStart": 653, "catchBlockEnd": 751, "exceptionHandlingCallStart": [725], "exceptionHandlingCallEnd": [744], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 604, "focalAPIEnd": 627, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bella24988/guanabana-store/tree/master/guanabana/src/server/DataBase.java", "rawCode": "  /**\n   * Metodo che restituisce un cliente in base al codice fiscale\n   *\n   * @param cf Codice fiscale del cliente\n   * @return cliente Cliente trovato\n   */\n  public String[] cercaCliente(String cf) {\n    String[] cliente = null;\n    try {\n      cliente = new String[6];\n      stCliente = con.createStatement();\n      ResultSet result =\n          stCliente.executeQuery(\n              \"select CF,nome,cognome,indirizzo,telefono,email from clienti where CF='\"\n                  + cf\n                  + \"';\");\n      while (result.next()) {\n        for (int i = 0; i < 6; i++) {\n          cliente[i] = result.getString(i + 1);\n        }\n      }\n    } catch (SQLException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    return cliente;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6917, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 92, "focalAPIEnd": 107, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.1/kernel-impl/src/main/java/org/sakaiproject/content/impl/serialize/impl/conversion/FileSizeResourcesConversionHandler.java", "rawCode": "  public Object getValidateSource(String id, ResultSet rs) throws SQLException {\n    return rs.getString(1);\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6918, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [412], "initializationEnd": [552], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.next()"], "configurationStart": [558], "configurationEnd": [567], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 600, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)", "resultSet.next()", "resultSet.getInt(int)", "resultSet.next()", "resultSet.getString(int)", "assertEquals(String,value)", "resultSet.next()", "resultSet.getInt(int)", "resultSet.next()", "resultSet.getInt(int)"], "useStart": [573, 956, 990, 1168, 1210, 1183, 1303, 1344, 1444, 1485], "useEnd": [616, 965, 1002, 1177, 1225, 1226, 1312, 1356, 1453, 1497], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/H2-Mirror/tree/master/h2/src/test/org/h2/test/db/TestFunctions.java", "rawCode": "  private void testSchemaSearchPath() throws SQLException {\n    deleteDb(\"functions\");\n    Connection conn = getConnection(\"functions\");\n    Statement stat = conn.createStatement();\n    ResultSet rs;\n    stat.execute(\"CREATE SCHEMA TEST\");\n    stat.execute(\"SET SCHEMA TEST\");\n    stat.execute(\n        \"CREATE ALIAS PARSE_INT2 FOR \" + \"\\\"java.lang.Integer.parseInt(java.lang.String, int)\\\";\");\n    rs =\n        stat.executeQuery(\n            \"SELECT ALIAS_NAME FROM \"\n                + \"INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_SCHEMA ='TEST'\");\n    rs.next();\n    assertEquals(\"PARSE_INT2\", rs.getString(1));\n    stat.execute(\"DROP ALIAS PARSE_INT2\");\n\n    stat.execute(\"SET SCHEMA PUBLIC\");\n    stat.execute(\n        \"CREATE ALIAS TEST.PARSE_INT2 FOR \"\n            + \"\\\"java.lang.Integer.parseInt(java.lang.String, int)\\\";\");\n    stat.execute(\"SET SCHEMA_SEARCH_PATH PUBLIC, TEST\");\n\n    rs = stat.executeQuery(\"CALL PARSE_INT2('-FF', 16)\");\n    rs.next();\n    assertEquals(-255, rs.getInt(1));\n    rs =\n        stat.executeQuery(\n            \"SELECT ALIAS_NAME FROM \"\n                + \"INFORMATION_SCHEMA.FUNCTION_ALIASES WHERE ALIAS_SCHEMA ='TEST'\");\n    rs.next();\n    assertEquals(\"PARSE_INT2\", rs.getString(1));\n    rs = stat.executeQuery(\"CALL TEST.PARSE_INT2('-2147483648', 10)\");\n    rs.next();\n    assertEquals(-2147483648, rs.getInt(1));\n    rs = stat.executeQuery(\"CALL FUNCTIONS.TEST.PARSE_INT2('-2147483648', 10)\");\n    rs.next();\n    assertEquals(-2147483648, rs.getInt(1));\n    conn.close();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6919, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 128, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["matchXml(value,String)", "readResource(Entity,value)"], "useStart": [376, 772], "useEnd": [402, 805], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/SAK-16693/kernel-util/src/main/java/org/sakaiproject/util/BaseDbDoubleStorage.java", "rawCode": "    public Object readSqlResultRecord(ResultSet result) throws SqlReaderFinishedException {\n      try {\n        String theXml = result.getString(1);\n        if (m_pager != null && count > m_pager.getLast()) {\n          throw new SqlReaderFinishedException();\n        }\n\n        int iTest = 0; // Don't know if we have a match\n        if (m_search != null) {\n          iTest = matchXml(theXml, m_search);\n        }\n\n        // If it is clearly rejected from pre-parse match\n        if (iTest == -1) return null;\n\n        // If it is a match and we are just counting - no parsing\n        // needed\n        if (iTest == 1 && m_doCount) return intValue;\n\n        // If it is known to be accepted (1) or unsure (0),\n        // parse the Xml and continue\n        Entity entry = readResource(m_container, theXml);\n        if (entry == null) return null;\n\n        // If there is no indication from matchXml\n        if (iTest == 0 && m_search != null) {\n          if (!m_filter.accept(entry)) return null;\n        }\n        count++;\n        if (m_pager != null && count < m_pager.getFirst()) return null;\n\n        if (m_pager != null && count > m_pager.getLast()) {\n          throw new SqlReaderFinishedException();\n        }\n\n        if (m_doCount) return intValue;\n        return entry;\n      } catch (SQLException ignore) {\n        return null;\n      }\n    }\n"}, {"dataset": "resultSetGetString", "exampleID": 6920, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)"], "configurationStart": [72, 115, 153], "configurationEnd": [100, 135, 176], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 219, "focalAPIEnd": 247, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yukoff/concourse-connect/tree/master/src/main/java/com/concursive/connect/cms/portal/dao/DashboardPortlet.java", "rawCode": "  private void buildRecord(ResultSet rs) throws SQLException {\n    id = rs.getInt(\"page_portlet_id\");\n    pageId = rs.getInt(\"page_id\");\n    portletId = rs.getInt(\"portlet_id\");\n    // lookup_project_portlet\n    name = rs.getString(\"portlet_name\");\n    loaded = true;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6921, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [479], "initializationEnd": [498], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 539, "guardExpressionEnd": 560, "guardBlockStart": 539, "guardBlockEnd": 689, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 576, "focalAPIEnd": 595, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(int)", "new Topic(value,String)"], "useStart": [617, 653], "useEnd": [636, 681], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ivartj/minerva/tree/master/app/models/Topic.java", "rawCode": "  public static List<Topic> getAllForUserMentor() throws SQLException {\n    ResultSet result;\n    Connection conn;\n    PreparedStatement stmt;\n\n    User currentUser = Authenticator.getCurrentUser();\n    String name, description;\n    List<Topic> list;\n\n    conn = DB.getConnection();\n    stmt =\n        conn.prepareStatement(\n            \"select topic, description from interest where user = ? and as_mentor = 1 group by topic\");\n    stmt.setLong(1, currentUser.id);\n    result = stmt.executeQuery();\n    list = new ArrayList<Topic>();\n    while (result.next()) {\n      name = result.getString(1);\n      description = result.getString(2);\n      list.add(new Topic(name, description));\n    }\n    conn.close();\n    return list;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6922, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [2435], "initializationEnd": [2455], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["debugFields(Object[])", "warn(String,*)"], "tryExpressionStart": 1868, "tryExpressionEnd": 1872, "tryBlockStart": 1868, "tryBlockEnd": 4334, "catchExpressionStart": 3182, "catchExpressionEnd": 3205, "catchBlockStart": 3182, "catchBlockEnd": 3280, "exceptionHandlingCallStart": [3250, 3213], "exceptionHandlingCallEnd": [3269, 3273], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 2626, "guardExpressionEnd": 2647, "guardBlockStart": 2626, "guardBlockEnd": 3175, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 2827, "focalAPIEnd": 2846, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 2858, "followUpCheckExpressionEnd": 2872, "followUpCheckBlockStart": 2858, "followUpCheckBlockEnd": 2909, "use": ["List.add(value)", "SqlReader.readSqlResultRecord(resultSet)", "resultSet.close()"], "useStart": [2887, 2968, 3547], "useEnd": [2896, 3002, 3561], "hasFinally": 1, "cleanUpCall": ["currentTimeMillis()"], "finallyExpressionStart": 3396, "finallyExpressionEnd": 3404, "finallyBlockStart": 3396, "finallyBlockEnd": 4334, "cleanUpCallStart": [3451], "cleanUpCallEnd": [3477], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-1107/kernel-impl/src/main/java/org/sakaiproject/db/impl/BasicSqlService.java", "rawCode": "  /**\n   * Process a query, filling in with fields, and return the results as a List, one per record read.\n   * If a reader is provided, it will be called for each record to prepare the Object placed into\n   * the List. Otherwise, the first field of each record, as a String, will be placed in the list.\n   *\n   * @param callerConn The db connection object to use (if not null).\n   * @param sql The sql statement.\n   * @param fields The array of fields for parameters.\n   * @param reader The reader object to read each record.\n   * @return The List of things read, one per record.\n   */\n  public List dbRead(Connection callerConn, String sql, Object[] fields, SqlReader reader) {\n    // check for a transaction conncetion\n    if (callerConn == null) {\n      callerConn = (Connection) threadLocalManager().get(TRANSACTION_CONNECTION);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\n          \"dbRead(Connection \"\n              + callerConn\n              + \", String \"\n              + sql\n              + \", Object[] \"\n              + Arrays.toString(fields)\n              + \", SqlReader \"\n              + reader\n              + \")\");\n    }\n\n    // for DEBUG\n    long start = 0;\n    long connectionTime = 0;\n    int lenRead = 0;\n    long stmtTime = 0;\n    long resultsTime = 0;\n    int count = 0;\n\n    if (LOG.isDebugEnabled()) {\n      String userId = usageSessionService().getSessionId();\n      StringBuilder buf = new StringBuilder();\n      if (fields != null) {\n        buf.append(fields[0]);\n        for (int i = 1; i < fields.length; i++) {\n          buf.append(\", \");\n          buf.append(fields[i]);\n        }\n      }\n      LOG.debug(\"Sql.dbRead: \" + userId + \"\\n\" + sql + \"\\n\" + buf);\n    }\n\n    Connection conn = null;\n    PreparedStatement pstmt = null;\n    ResultSet result = null;\n    ResultSetMetaData meta = null;\n    List rv = new Vector();\n\n    try {\n      if (m_showSql) {\n        start = System.currentTimeMillis();\n      }\n\n      // borrow a new connection if we are not provided with one to use\n      if (callerConn != null) {\n        conn = callerConn;\n      } else {\n        conn = borrowConnection();\n      }\n      if (m_showSql) {\n        connectionTime = System.currentTimeMillis() - start;\n      }\n      if (m_showSql) {\n        start = System.currentTimeMillis();\n      }\n      pstmt = conn.prepareStatement(sql);\n\n      // put in all the fields\n      prepareStatement(pstmt, fields);\n\n      result = pstmt.executeQuery();\n\n      if (m_showSql) {\n        stmtTime = System.currentTimeMillis() - start;\n      }\n      if (m_showSql) {\n        start = System.currentTimeMillis();\n      }\n\n      while (result.next()) {\n        if (m_showSql) {\n          count++;\n        }\n\n        // without a reader, we read the first String from each record\n        if (reader == null) {\n          String s = result.getString(1);\n          if (s != null) {\n            rv.add(s);\n          }\n        } else {\n          try {\n            Object obj = reader.readSqlResultRecord(result);\n            if (obj != null) {\n              rv.add(obj);\n            }\n          } catch (SqlReaderFinishedException e) {\n            break;\n          }\n        }\n      }\n    } catch (SQLException e) {\n      LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n    } catch (UnsupportedEncodingException e) {\n      LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n    } finally {\n      if (m_showSql) {\n        resultsTime = System.currentTimeMillis() - start;\n      }\n      if (null != result) {\n        try {\n          result.close();\n        } catch (SQLException e) {\n          LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n        }\n      }\n      if (null != pstmt) {\n        try {\n          pstmt.close();\n        } catch (SQLException e) {\n          LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n        }\n      }\n\n      // return the connection only if we have borrowed a new one for this call\n      if (callerConn == null) {\n        if (null != conn) {\n          // if we commit on read\n          if (m_commitAfterRead) {\n            try {\n              conn.commit();\n            } catch (SQLException e) {\n              LOG.warn(\"Sql.dbRead: sql: \" + sql + debugFields(fields), e);\n            }\n          }\n          returnConnection(conn);\n        }\n      }\n    }\n\n    if (m_showSql)\n      debug(\n          \"Sql.dbRead: time: \"\n              + connectionTime\n              + \" / \"\n              + stmtTime\n              + \" / \"\n              + resultsTime\n              + \" #: \"\n              + count,\n          sql,\n          fields);\n\n    return rv;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6923, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [1469], "initializationEnd": [1486], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getNextException()", "println(String)", "printStackTrace()"], "tryExpressionStart": 101, "tryExpressionEnd": 105, "tryBlockStart": 101, "tryBlockEnd": 2805, "catchExpressionStart": 2551, "catchExpressionEnd": 2574, "catchBlockStart": 2551, "catchBlockEnd": 2709, "exceptionHandlingCallStart": [2653, 2623, 2682], "exceptionHandlingCallEnd": [2673, 2674, 2701], "configuration": ["resultSet.getInt(String)"], "configurationStart": [1570], "configurationEnd": [1584], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 1494, "guardExpressionEnd": 1511, "guardBlockStart": 1494, "guardBlockEnd": 1737, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1607, "focalAPIEnd": 1624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setNombre(value)", "resultSet.getString(String)", "setApellido(value)", "resultSet.getString(String)", "setDoc(value)"], "useStart": [1595, 1649, 1635, 1686, 1677], "useEnd": [1625, 1666, 1667, 1703, 1704], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cidc/siciud/tree/master/WEB-INF/src/cidc/general/obj/DepurarPersona.java", "rawCode": "  public void depurar() {\n    List paMatar = new ArrayList();\n    int i = 0;\n    pipol p = null;\n    try {\n      ResultSet rs = null;\n      Connection cn = abrir();\n      PreparedStatement ps =\n          cn.prepareStatement(\n              \"select perid,pernombres,perapellidos,pernumdoc from personal where (pernumdoc is null or pernumdoc ='') and \"\n                  + \"perid <> all(select distinct perid from personal,inscrip_propuesta where inscinvprin=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select distinct perid from personal,cidc_grup_semill where cgsdirector=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select distinct perid from personal,pa_proy_data_gral where ppdginvesproy=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select distinct perid from personal,b_pares where beidpersona=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select perid from personal,usuario_sistema where (pernumdoc is null or pernumdoc ='') and usidpersona=perid) and \"\n                  + \"perid <> 0 and perid <> 7 and perid <> 11 and perid <> 8 and perid <> 9 and perid <> 10 and perid <> 12 and perid <> 13 and perid <> 18 and \"\n                  + \"perid <> 3455 and perid <> 4493 and perid <> 4494 and perid <> 4495 and perid <> 4496 and perid <> 4497\"\n                  + \"order by perid\");\n      rs = ps.executeQuery();\n      while (rs.next()) {\n        i = 1;\n        p = new pipol();\n        p.setId(rs.getInt(i++));\n        p.setNombre(rs.getString(i++));\n        p.setApellido(rs.getString(i++));\n        p.setDoc(rs.getString(i++));\n        paMatar.add(p);\n      }\n      cn.setAutoCommit(false);\n      System.out.println(\"---Hay que eliminar a -->\" + paMatar.size() + \" Personas\");\n      ps = cn.prepareStatement(\"delete from b_investigadores where binvidper=?\");\n      for (int j = 0; j < paMatar.size(); j++) {\n        p = (pipol) paMatar.get(j);\n        ps.setInt(1, p.getId());\n        ps.addBatch();\n      }\n      System.out.println(\"---eliminados-->\" + ps.executeBatch() + \" investigadores\");\n      ps = cn.prepareStatement(\"delete from personal where perid=?\");\n      for (int j = 0; j < paMatar.size(); j++) {\n        p = (pipol) paMatar.get(j);\n        ps.setInt(1, p.getId());\n        ps.addBatch();\n      }\n      System.out.println(\"---eliminados-->\" + ps.executeBatch() + \" personajes\");\n      cn.commit();\n      System.out.println(\"---proceso terminado-->\");\n    } catch (SQLException e) {\n      // TODO Auto-generated catch block\n      System.out.println(\"----->\" + e.getNextException());\n      e.printStackTrace();\n\n    } catch (Exception e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6924, "initialization": ["ResultSet resultSet = getUserMemberships(*)"], "initializationStart": [79], "initializationEnd": [124], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 62, "tryExpressionEnd": 66, "tryBlockStart": 62, "tryBlockEnd": 372, "catchExpressionStart": 318, "catchExpressionEnd": 338, "catchBlockStart": 318, "catchBlockEnd": 372, "exceptionHandlingCallStart": [346], "exceptionHandlingCallEnd": [365], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 132, "guardExpressionEnd": 149, "guardBlockStart": 132, "guardBlockEnd": 311, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 189, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ResultSet.get(value)"], "useStart": [178], "useEnd": [211], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tonydear/cs162-p2/tree/master/base/src/edu/berkeley/cs/cs162/ChatServer.java", "rawCode": "  private void initUserGroups(User u) {\n    ResultSet rs;\n    try {\n      rs = DBHandler.getUserMemberships(u.getUsername());\n      while (rs.next()) {\n        ChatGroup group = groups.get(rs.getString(\"gname\"));\n        group.addLoggedInUser(u.getUsername(), u);\n        u.addToGroups(group.getName());\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6925, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [514], "initializationEnd": [626], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 687, "guardExpressionEnd": 708, "guardBlockStart": 687, "guardBlockEnd": 852, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 825, "focalAPIEnd": 844, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(value)", "resultSet.close()"], "useStart": [806, 925], "useEnd": [845, 939], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Euphemiasan/Project_FrameData/tree/master/lib/hsqldb-2.2.8/hsqldb/src/org/hsqldb/sample/FindFile.java", "rawCode": "  /** @throws SQLException */\n  static void listFiles(Connection conn, String name) throws SQLException {\n\n    System.out.println(\"Files like '\" + name + \"'\");\n\n    // Convert to upper case, so the search is case-insensitive\n    name = name.toUpperCase();\n\n    // Create a statement object\n    Statement stat = conn.createStatement();\n\n    // Now execute the search query\n    // UCASE: This is a case insensitive search\n    // ESCAPE ':' is used so it can be easily searched for '\\'\n    ResultSet result =\n        stat.executeQuery(\n            \"SELECT Path FROM Files WHERE \" + \"UCASE(Path) LIKE '%\" + name + \"%' ESCAPE ':'\");\n\n    // Moves to the next record until no more records\n    while (result.next()) {\n\n      // Print the first column of the result\n      // could use also getString(\"Path\")\n      System.out.println(result.getString(1));\n    }\n\n    // Close the ResultSet - not really necessary, but recommended\n    result.close();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6926, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 103, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.charAt(int)", "resultSet.getLong(String)"], "useStart": [103, 180], "useEnd": [135, 196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mqprichard/spring-greenhouse-clickstart/tree/master/src/main/java/com/springsource/greenhouse/account/PictureUrlMapper.java", "rawCode": "  public String mapRow(ResultSet rs, int row) throws SQLException {\n    Gender gender = Gender.valueOf(rs.getString(\"gender\").charAt(0));\n    return urlFactory.pictureUrl(\n        rs.getLong(\"id\"), pictureSize, rs.getBoolean(\"pictureSet\"), gender);\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6927, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(int)"], "configurationStart": [180], "configurationEnd": [194], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 339, "focalAPIEnd": 356, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getInt(int)", "new AnnotationType(Integer,value,String,String,AnnotationDefinitionType,String)", "new AnnotationType(Integer,value,String,String,AnnotationDefinitionType)"], "useStart": [383, 421, 481, 1118, 1325], "useEnd": [400, 438, 495, 1228, 1413], "hasFinally": 1, "cleanUpCall": ["close(ResultSet)"], "finallyExpressionStart": 1238, "finallyExpressionEnd": 1246, "finallyBlockStart": 1238, "finallyBlockEnd": 1278, "cleanUpCallStart": [1256], "cleanUpCallEnd": [1269], "url": "https://github.com/OpenBEL/openbel-framework/tree/master/org.openbel.framework.api/src/main/java/org/openbel/framework/internal/KAMStoreDaoImpl.java", "rawCode": "  /**\n   * @param rset\n   * @return\n   * @throws SQLException\n   */\n  private AnnotationType getAnnotationType(ResultSet rset) throws SQLException {\n    Integer annotationTypeId = rset.getInt(1);\n\n    if (annotationTypeCache.containsKey(annotationTypeId)) {\n      return annotationTypeCache.get(annotationTypeId);\n    }\n\n    String name = rset.getString(2);\n    String description = rset.getString(3);\n    String usage = rset.getString(4);\n    Integer annotationDefinitionTypeId = rset.getInt(5);\n    AnnotationDefinitionType annotationDefinitionType =\n        AnnotationDefinitionType.fromValue(annotationDefinitionTypeId);\n\n    final AnnotationType annotationType;\n    if (annotationDefinitionType.equals(AnnotationDefinitionType.URL)) {\n      ResultSet dvrset = null;\n      try {\n        PreparedStatement dvps = getPreparedStatement(SELECT_ANNOTATION_TYPE_DOMAIN_VALUE_SQL);\n        dvps.setInt(1, annotationTypeId);\n        dvrset = dvps.executeQuery();\n\n        String url = null;\n        if (dvrset.next()) {\n          url = getObjectValueById(dvrset.getInt(1));\n        }\n\n        annotationType =\n            new AnnotationType(\n                annotationTypeId, name, description, usage, annotationDefinitionType, url);\n      } finally {\n        close(dvrset);\n      }\n    } else {\n      annotationType =\n          new AnnotationType(annotationTypeId, name, description, usage, annotationDefinitionType);\n    }\n\n    return annotationType;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6928, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [454], "initializationEnd": [478], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "println(String)", "getSQLState()", "println(String)", "getErrorCode()", "println(String)"], "tryExpressionStart": 121, "tryExpressionEnd": 125, "tryBlockStart": 121, "tryBlockEnd": 965, "catchExpressionStart": 750, "catchExpressionEnd": 774, "catchBlockStart": 750, "catchBlockEnd": 965, "exceptionHandlingCallStart": [820, 782, 878, 844, 940, 903], "exceptionHandlingCallEnd": [835, 836, 894, 895, 957, 958], "configuration": ["resultSet.getInt(String)"], "configurationStart": [565], "configurationEnd": [607], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 486, "guardExpressionEnd": 503, "guardBlockStart": 486, "guardBlockEnd": 708, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 633, "focalAPIEnd": 660, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setName(value)"], "useStart": [618], "useEnd": [661], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/webapps/arc-server/WEB-INF/classes/src/dataBaseManager.java", "rawCode": "  public Vector<Tablon> getIdTablonUserModerates(int idUser) {\n\n    Vector<Tablon> tablones = new Vector<Tablon>();\n\n    try {\n      Connection conn = openConnectionPool();\n\n      PreparedStatement statement =\n          conn.prepareStatement(\n              \"select * from TablonUserModerates INNER JOIN Tablon ON TablonUserModerates.tablon_id = Tablon.id WHERE TablonUserModerates.user_id = ?;\");\n      statement.setInt(1, idUser);\n\n      ResultSet rs = statement.executeQuery();\n      while (rs.next()) {\n        Tablon tablon = new Tablon();\n        tablon.setId(rs.getInt(\"TablonUserModerates.tablon_id\"));\n        tablon.setName(rs.getString(\"Tablon.name\"));\n\n        tablones.addElement(tablon);\n      }\n\n      closeConnectionPool(conn);\n\n    } catch (SQLException ex) {\n      System.out.println(\"SQLException: \" + ex.getMessage());\n      System.out.println(\"SQLState: \" + ex.getSQLState());\n      System.out.println(\"VendorError: \" + ex.getErrorCode());\n    }\n\n    return tablones;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6929, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [1100], "initializationEnd": [1124], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "println(String)", "getSQLState()", "println(String)", "getErrorCode()", "println(String)"], "tryExpressionStart": 689, "tryExpressionEnd": 693, "tryBlockStart": 689, "tryBlockEnd": 2356, "catchExpressionStart": 1775, "catchExpressionEnd": 1799, "catchBlockStart": 1775, "catchBlockEnd": 1990, "exceptionHandlingCallStart": [1845, 1807, 1903, 1869, 1965, 1928], "exceptionHandlingCallEnd": [1860, 1861, 1919, 1920, 1982, 1983], "configuration": ["resultSet.getMetaData()"], "configurationStart": [1233], "configurationEnd": [1249], "guardCondition": "!(ausschliessen.contains(rsMetaData.getColumnName(columnIndex,),)) && columnIndex<numberOfColumns && resultSet.next()", "guardType": "IF {", "guardExpressionStart": 1177, "guardExpressionEnd": 1191, "guardBlockStart": 1177, "guardBlockEnd": 1682, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 1496, "focalAPIEnd": 1511, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.close()"], "useStart": [1527, 1603, 1634, 2049], "useEnd": [1542, 1618, 1649, 2059], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 1991, "finallyExpressionEnd": 1999, "finallyBlockStart": 1991, "finallyBlockEnd": 2356, "cleanUpCallStart": [2049], "cleanUpCallEnd": [2059], "url": "https://github.com/bomm/thera-pi/tree/master/ArztBaustein/src/arztBausteine/SqlInfo.java", "rawCode": "  /** **************************** */\n  public static Vector<String> holeSatzLimit(\n      String tabelle, String felder, String kriterium, int[] limit, List<?> ausschliessen) {\n    Statement stmt = null;\n    ResultSet rs = null;\n    Vector<String> retvec = new Vector<String>();\n\n    try {\n      stmt =\n          ArztBausteine.thisClass.conn.createStatement(\n              ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n      /*\n      stmt = ArztBausteine.thisClass.conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,\n      ResultSet.CONCUR_UPDATABLE );\n      */\n    } catch (SQLException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    try {\n      // ArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.WAIT_CURSOR));\n      String sstmt =\n          \"select \"\n              + felder\n              + \" from \"\n              + tabelle\n              + \" \"\n              + kriterium\n              + \" LIMIT \"\n              + Integer.toString(limit[0])\n              + \",\"\n              + Integer.toString(limit[1])\n              + \"\";\n      rs = stmt.executeQuery(sstmt);\n      int nichtlesen = ausschliessen.size();\n      if (rs.next()) {\n        ResultSetMetaData rsMetaData = rs.getMetaData();\n        int numberOfColumns = rsMetaData.getColumnCount() + 1;\n        for (int i = 1; i < numberOfColumns; i++) {\n          if (nichtlesen > 0) {\n            if (!ausschliessen.contains(rsMetaData.getColumnName(i))) {\n              retvec.add((rs.getString(i) == null ? \"\" : rs.getString(i)));\n            }\n          } else {\n            retvec.add((rs.getString(i) == null ? \"\" : rs.getString(i)));\n          }\n        }\n      }\n      // ArztBausteine.thisClass.jFrame.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));\n    } catch (SQLException ev) {\n      System.out.println(\"SQLException: \" + ev.getMessage());\n      System.out.println(\"SQLState: \" + ev.getSQLState());\n      System.out.println(\"VendorError: \" + ev.getErrorCode());\n    } finally {\n      if (rs != null) {\n        try {\n          rs.close();\n          rs = null;\n        } catch (SQLException sqlEx) { // ignore }\n          rs = null;\n        }\n      }\n      if (stmt != null) {\n        try {\n          stmt.close();\n          stmt = null;\n        } catch (SQLException sqlEx) { // ignore }\n          stmt = null;\n        }\n      }\n    }\n    return (Vector<String>) retvec;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6930, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet!=null", "guardType": "IF {", "guardExpressionStart": 150, "guardExpressionEnd": 169, "guardBlockStart": 150, "guardBlockEnd": 248, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 204, "focalAPIEnd": 226, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(value)"], "useStart": [180], "useEnd": [227], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/coderplay/h2-bitmap/tree/master/h2/src/test/org/h2/test/db/TestTriggersConstraints.java", "rawCode": "    public void fire(Connection conn, ResultSet oldRow, ResultSet newRow) throws SQLException {\n      StringBuilder buff = new StringBuilder();\n      if (oldRow != null) {\n        buff.append(\"-\").append(oldRow.getString(\"id\")).append(';');\n      }\n      if (newRow != null) {\n        buff.append(\"+\").append(newRow.getString(\"id\")).append(';');\n      }\n      if (!\"TEST_INSERT\".equals(triggerName)) {\n        throw new RuntimeException(\"Wrong trigger name: \" + triggerName);\n      }\n      if (!\"TEST\".equals(tableName)) {\n        throw new RuntimeException(\"Wrong table name: \" + tableName);\n      }\n      if (!\"PUBLIC\".equals(schemaName)) {\n        throw new RuntimeException(\"Wrong schema name: \" + schemaName);\n      }\n      if (type != (Trigger.INSERT | Trigger.UPDATE | Trigger.DELETE)) {\n        throw new RuntimeException(\"Wrong type: \" + type);\n      }\n      if (newRow != null) {\n        if (oldRow == null) {\n          if (newRow.getInt(1) != 1) {\n            throw new RuntimeException(\"Expected: 1 got: \" + newRow.getString(1));\n          }\n        } else {\n          if (newRow.getInt(1) != 2) {\n            throw new RuntimeException(\"Expected: 2 got: \" + newRow.getString(1));\n          }\n        }\n        newRow.updateInt(1, newRow.getInt(1) * 10);\n      }\n      conn.createStatement().execute(\"insert into message values('\" + buff.toString() + \"')\");\n    }\n"}, {"dataset": "resultSetGetString", "exampleID": 6931, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [318], "initializationEnd": [340], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "new SQLException(*)"], "tryExpressionStart": 192, "tryExpressionEnd": 196, "tryBlockStart": 192, "tryBlockEnd": 811, "catchExpressionStart": 733, "catchExpressionEnd": 757, "catchBlockStart": 733, "catchBlockEnd": 811, "exceptionHandlingCallStart": [788, 771], "exceptionHandlingCallEnd": [803, 804], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 348, "guardExpressionEnd": 365, "guardBlockStart": 348, "guardBlockEnd": 726, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 395, "focalAPIEnd": 419, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getInt(String)", "resultSet.getString(String)", "resultSet.getString(String)", "new FilterParameter(value,int,String,String)"], "useStart": [446, 499, 556, 617], "useEnd": [469, 525, 583, 684], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/westeras/vcf-analyzer/tree/master/src/java/DatabaseConnector.java", "rawCode": "  public ArrayList<FilterParameter> getFilterEntries(int FilId) throws SQLException {\n    ArrayList<FilterParameter> filterEntries = new ArrayList<FilterParameter>();\n    String sql = \"\";\n    try {\n      sql = String.format(\"SELECT * FROM `vcf_analyzer`.`FilterEntry` WHERE `FilId`='%d'\", FilId);\n      ResultSet rs = stmt.executeQuery(sql);\n      while (rs.next()) {\n        String tableName = rs.getString(\"InfoName\");\n        int comparison = rs.getInt(\"Comparison\");\n        String comparator = rs.getString(\"Comparator\");\n        String comparator2 = rs.getString(\"Comparator2\");\n\n        FilterParameter temp = new FilterParameter(tableName, comparison, comparator, comparator2);\n        filterEntries.add(temp);\n      }\n    } catch (SQLException se) {\n      throw new SQLException(se.getMessage());\n    }\n    return filterEntries;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6932, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 417, "focalAPIEnd": 453, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["testFilterComparison(int,*,value)"], "useStart": [479], "useEnd": [541], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/westeras/vcf-analyzer/tree/master/src/java/FilterApplier.java", "rawCode": "  private boolean filterOnEntryData(ResultSet entryData) throws Exception {\n\n    for (FilterParameter param : this.entryParameters) {\n      // test if filter is on fixed entry data\n      if (DatabaseConnector.EntryFixedInfo.contains(param.tableName)) {\n        int type = this.nestedConnection2.getInfoDataType(param.tableName);\n        String testValue = null;\n        // no need to check next()\n        testValue = entryData.getString(param.tableName);\n\n        boolean pass = comparisonHandler.testFilterComparison(type, param, testValue);\n        if (!pass) {\n          return pass;\n        }\n      }\n    }\n    return true;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6933, "initialization": ["ResultSet resultSet = getProcedures(String,String,String)"], "initializationStart": [857], "initializationEnd": [916], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 923, "guardExpressionEnd": 943, "guardBlockStart": 923, "guardBlockEnd": 2625, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 983, "focalAPIEnd": 1014, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getHpccQuery(value)"], "useStart": [970], "useEnd": [1015], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hpcc-systems/hpcc-jdbc/tree/master/src/main/java/org/hpccsystems/jdbcdriver/HPCCDatabaseMetaData.java", "rawCode": "  @Override\n  public ResultSet getProcedureColumns(\n      String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern)\n      throws SQLException {\n    HPCCJDBCUtils.traceoutln(\n        Level.FINEST,\n        \"HPCCDatabaseMetaData getProcedureColumns catalog: \"\n            + catalog\n            + \", schemaPattern: \"\n            + schemaPattern\n            + \", procedureNamePattern: \"\n            + procedureNamePattern\n            + \" columnNamePattern: \"\n            + columnNamePattern);\n\n    List<List> procedurecols = new ArrayList<List>();\n\n    boolean allcolumnsearch =\n        columnNamePattern == null\n            || columnNamePattern.length() == 0\n            || columnNamePattern.trim().equals(\"*\")\n            || columnNamePattern.trim().equals(\"%\");\n\n    int coltype = java.sql.Types.NULL;\n    ResultSet procs = getProcedures(catalog, schemaPattern, procedureNamePattern);\n\n    while (procs.next()) {\n      HPCCQuery query = getHpccQuery(procs.getString(PROCEDURE_NAME));\n\n      Iterator<HPCCColumnMetaData> queryfields = query.getAllFields().iterator();\n\n      while (queryfields.hasNext()) {\n        HPCCColumnMetaData col = (HPCCColumnMetaData) queryfields.next();\n        String fieldname = col.getColumnName();\n        if (!allcolumnsearch && !columnNamePattern.equalsIgnoreCase(fieldname)) continue;\n        coltype = col.getSqlType();\n\n        HPCCJDBCUtils.traceoutln(\n            Level.FINEST,\n            \"Proc col Found: \"\n                + query.getName()\n                + \".\"\n                + fieldname\n                + \" of type: \"\n                + coltype\n                + \"(\"\n                + HPCCJDBCUtils.convertSQLtype2JavaClassName(coltype)\n                + \")\");\n\n        ArrayList rowValues = new ArrayList();\n        procedurecols.add(rowValues);\n\n        /* 1 */ rowValues.add(catalog);\n        /* 2 */ rowValues.add(schemaPattern);\n        /* 3 */ rowValues.add(query.getQuerySet() + \"::\" + query.getName());\n        /* 4 */ rowValues.add(fieldname);\n        /* 5 */ rowValues.add(col.getParamType());\n        /* 6 */ rowValues.add(coltype);\n        /* 7 */ rowValues.add(HPCCJDBCUtils.convertSQLtype2JavaClassName(coltype));\n        /* 8 */ rowValues.add(0);\n        /* 9 */ rowValues.add(0);\n        /* 10 */ rowValues.add(0);\n        /* 11 */ rowValues.add(1);\n        /* 12 */ rowValues.add(procedureNoNulls);\n        /* 13 */ rowValues.add(\n            col.getParamType() == procedureColumnIn\n                ? \"Input param index: \" + col.getIndex() + \".\"\n                : \"Output param.\");\n\n        if (!allcolumnsearch) break;\n      }\n    }\n\n    return new HPCCResultSet(procedurecols, proccolsmetacols, \"Procedure Columns\");\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6934, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [271], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 326, "guardExpressionEnd": 343, "guardBlockStart": 326, "guardBlockEnd": 698, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 424, "focalAPIEnd": 439, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIdTransaction(value)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)"], "useStart": [401, 471, 518, 558, 598, 639], "useEnd": [440, 486, 533, 573, 613, 654], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/100kV/GroupOne/tree/master/src/groupone/DBOperation.java", "rawCode": "  public static ArrayList<Transaction> getTransactionList() {\n    Connection con = new DBConnection().getDBConnection();\n    ArrayList<Transaction> transactions = new ArrayList<Transaction>();\n\n    try {\n      Statement stmt = con.createStatement();\n      ResultSet rs = stmt.executeQuery(\"SELECT * FROM transaction\");\n\n      while (rs.next()) {\n        Transaction trans = new Transaction();\n        trans.setIdTransaction(rs.getString(1));\n        trans.setIdTransAcct(rs.getString(2));\n        trans.setIdTransCoup(rs.getString(3));\n        trans.setDate(rs.getString(4));\n        trans.setType(rs.getString(5));\n        trans.setEmail(rs.getString(6));\n\n        transactions.add(trans);\n      }\n\n      stmt.close();\n      con.close();\n\n    } catch (SQLException e) {\n    }\n\n    return transactions;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6935, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [10841], "initializationEnd": [10882], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 3999, "tryExpressionEnd": 4003, "tryBlockStart": 3999, "tryBlockEnd": 14384, "catchExpressionStart": 14197, "catchExpressionEnd": 14218, "catchBlockStart": 14197, "catchBlockEnd": 14339, "exceptionHandlingCallStart": [14253], "exceptionHandlingCallEnd": [14312], "configuration": ["resultSet.getLong(int)"], "configurationStart": [11029], "configurationEnd": [11064], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 10890, "guardExpressionEnd": 10929, "guardBlockStart": 10890, "guardBlockEnd": 11350, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 11095, "focalAPIEnd": 11132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIlsId(value)", "resultSet.getString(int)", "resultSet.getInt(int)"], "useStart": [11075, 11164, 11235], "useEnd": [11133, 11201, 11269], "hasFinally": 1, "cleanUpCall": ["ProcessorResults.saveResults()"], "finallyExpressionStart": 14340, "finallyExpressionEnd": 14348, "finallyBlockStart": 14340, "finallyBlockEnd": 14384, "cleanUpCallStart": [14356], "cleanUpCallEnd": [14377], "url": "https://github.com/eiNetwork/eiNetwork2/tree/master/vufind/import/src/org/econtent/ExtractEContentFromMarc.java", "rawCode": "  public boolean init(\n      Ini configIni,\n      String serverName,\n      long reindexLogId,\n      Connection vufindConn,\n      Connection econtentConn,\n      Logger logger) {\n    this.logger = logger;\n    // Import a marc record into the eContent core.\n    if (!loadConfig(configIni, logger)) {\n      return false;\n    }\n    results = new ProcessorResults(\"Extract eContent from ILS\", reindexLogId, vufindConn, logger);\n    solrPort = configIni.get(\"Reindex\", \"solrPort\");\n\n    localWebDir = configIni.get(\"Site\", \"local\");\n\n    // Initialize the updateServer\n    try {\n      updateServer =\n          new ConcurrentUpdateSolrServer(\n              \"http://localhost:\" + solrPort + \"/solr/econtent2\", 500, 10);\n    } catch (MalformedURLException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n\n    // Check to see if we should clear the existing index\n    String clearEContentRecordsAtStartOfIndexVal =\n        configIni.get(\"Reindex\", \"clearEContentRecordsAtStartOfIndex\");\n    boolean clearEContentRecordsAtStartOfIndex;\n    if (clearEContentRecordsAtStartOfIndexVal == null) {\n      clearEContentRecordsAtStartOfIndex = false;\n    } else {\n      clearEContentRecordsAtStartOfIndex =\n          Boolean.parseBoolean(clearEContentRecordsAtStartOfIndexVal);\n    }\n    results.addNote(\"clearEContentRecordsAtStartOfIndex = \" + clearEContentRecordsAtStartOfIndex);\n    if (clearEContentRecordsAtStartOfIndex) {\n      logger.info(\"Clearing existing econtent records from index\");\n      results.addNote(\"clearing existing econtent records\");\n      URLPostResponse response =\n          Util.postToURL(\n              \"http://localhost:\" + solrPort + \"/solr/econtent2/update/?commit=true\",\n              \"<delete><query>recordtype:econtentRecord</query></delete>\",\n              logger);\n      if (!response.isSuccess()) {\n        results.addNote(\"Error clearing existing econtent records \" + response.getMessage());\n      }\n    }\n\n    String extractEContentFromUnchangedRecordsVal =\n        configIni.get(\"Reindex\", \"extractEContentFromUnchangedRecords\");\n    if (extractEContentFromUnchangedRecordsVal == null) {\n      // logger.debug(\"Did not get a value for reindexUnchangedRecordsVal\");\n      extractEContentFromUnchangedRecords = false;\n    } else {\n      extractEContentFromUnchangedRecords =\n          Boolean.parseBoolean(extractEContentFromUnchangedRecordsVal);\n      // logger.debug(\"reindexUnchangedRecords = \" + extractEContentFromUnchangedRecords + \" \" +\n      // extractEContentFromUnchangedRecords);\n    }\n    if (clearEContentRecordsAtStartOfIndex) extractEContentFromUnchangedRecords = true;\n    results.addNote(\"extractEContentFromUnchangedRecords = \" + extractEContentFromUnchangedRecords);\n\n    String checkOverDriveVal = configIni.get(\"Reindex\", \"checkOverDrive\");\n    if (checkOverDriveVal == null) {\n      checkOverDrive = true;\n    } else {\n      checkOverDrive = Boolean.parseBoolean(checkOverDriveVal);\n    }\n    logger.info(\"checkOverDrive = \" + checkOverDrive);\n\n    overDriveProductsKey = configIni.get(\"OverDrive\", \"productsKey\");\n    if (overDriveProductsKey == null) {\n      logger.warn(\"Warning no products key provided for OverDrive\");\n    }\n\n    overDriveFormatMap.put(\"Adobe EPUB eBook\", 410L);\n    overDriveFormatMap.put(\"Kindle Book\", 420L);\n    overDriveFormatMap.put(\"Microsoft eBook\", 1L);\n    overDriveFormatMap.put(\"OverDrive WMA Audiobook\", 25L);\n    overDriveFormatMap.put(\"OverDrive MP3 Audiobook\", 425L);\n    overDriveFormatMap.put(\"OverDrive Music\", 30L);\n    overDriveFormatMap.put(\"OverDrive Video\", 35L);\n    overDriveFormatMap.put(\"Adobe PDF eBook\", 50L);\n    overDriveFormatMap.put(\"Palm\", 150L);\n    overDriveFormatMap.put(\"Mobipocket eBook\", 90L);\n    overDriveFormatMap.put(\"Disney Online Book\", 302L);\n    overDriveFormatMap.put(\"Open PDF eBook\", 450L);\n    overDriveFormatMap.put(\"Open EPUB eBook\", 810L);\n    overDriveFormatMap.put(\"OverDrive Read\", 610L);\n    overDriveFormatMap.put(\"Streaming Video\", 635L);\n\n    try {\n      // Connect to the vufind database\n      // BA+++ Author initial load not sort type\n      // author removed from update - will be updated to sort author from OverDrive when non-MARC\n      // records are processed\n      // still done in create\n      createEContentRecord =\n          econtentConn.prepareStatement(\n              \"INSERT INTO econtent_record (ilsId, cover, source, title, subTitle, author, author2, description, contents, subject, language, publisher, publishLocation, physicalDescription, edition, isbn, issn, upc, lccn, topic, genre, region, era, target_audience, sourceUrl, purchaseUrl, publishDate, marcControlField, accessType, date_added, marcRecord, externalId, itemLevelOwnership, series) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n              PreparedStatement.RETURN_GENERATED_KEYS);\n      updateEContentRecord =\n          econtentConn.prepareStatement(\n              \"UPDATE econtent_record SET ilsId = ?, cover = ?, source = ?, title = ?, subTitle = ?, author2 = ?, description = ?, contents = ?, subject = ?, language = ?, publisher = ?, publishLocation = ?, physicalDescription = ?, edition = ?, isbn = ?, issn = ?, upc = ?, lccn = ?, topic = ?, genre = ?, region = ?, era = ?, target_audience = ?, sourceUrl = ?, purchaseUrl = ?, publishDate = ?, marcControlField = ?, accessType = ?, date_updated = ?, marcRecord = ?, externalId = ?, itemLevelOwnership = ?, series = ?, status = 'active' WHERE id = ?\");\n\n      createEContentRecordForOverDrive =\n          econtentConn.prepareStatement(\n              \"INSERT INTO econtent_record (ilsId, cover, source, title, author, author2, description, subject, language, publisher, edition, isbn, publishDate, accessType, date_added, externalId, itemLevelOwnership, series) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\",\n              PreparedStatement.RETURN_GENERATED_KEYS);\n      updateEContentRecordForOverDrive =\n          econtentConn.prepareStatement(\n              \"UPDATE econtent_record SET ilsId = NULL, cover = ?, source = ?, title = ?, author = ?, author2 = ?, description = ?, subject = ?, language = ?, publisher = ?, edition = ?, isbn = ?, publishDate = ?, accessType = ?, date_updated = ?, externalId = ?, itemLevelOwnership = ?, series = ?, status = 'active' WHERE id = ?\");\n\n      deleteEContentRecord =\n          econtentConn.prepareStatement(\n              \"UPDATE econtent_record set status = 'deleted' where id = ?\");\n      deleteEContentItem = econtentConn.prepareStatement(\"DELETE FROM econtent_item where id = ?\");\n\n      doesGutenbergItemExist =\n          econtentConn.prepareStatement(\n              \"SELECT id from econtent_item WHERE recordId = ? AND item_type = ? and notes = ?\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      addGutenbergItem =\n          econtentConn.prepareStatement(\n              \"INSERT INTO econtent_item (recordId, item_type, filename, folder, link, notes, date_added, addedBy, date_updated) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\");\n      updateGutenbergItem =\n          econtentConn.prepareStatement(\n              \"UPDATE econtent_item SET filename = ?, folder = ?, link = ?, date_updated =? WHERE recordId = ? AND item_type = ? AND notes = ?\");\n\n      existingEContentRecordLinks =\n          econtentConn.prepareStatement(\n              \"SELECT id, link, libraryId, item_type from econtent_item WHERE recordId = ?\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      addSourceUrl =\n          econtentConn.prepareStatement(\n              \"INSERT INTO econtent_item (recordId, item_type, notes, link, date_added, addedBy, date_updated, libraryId) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\");\n      updateSourceUrl =\n          econtentConn.prepareStatement(\n              \"UPDATE econtent_item SET link = ?, date_updated = ?, item_type = ?, notes = ? WHERE id = ?\");\n\n      doesOverDriveItemExist =\n          econtentConn.prepareStatement(\n              \"SELECT id from econtent_item WHERE recordId = ? AND externalFormatId = ?\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      addOverDriveItem =\n          econtentConn.prepareStatement(\n              \"INSERT INTO econtent_item (recordId, item_type, externalFormat, externalFormatId, externalFormatNumeric, identifier, sampleName_1, sampleUrl_1, sampleName_2, sampleUrl_2, date_added, addedBy, date_updated) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\");\n      updateOverDriveItem =\n          econtentConn.prepareStatement(\n              \"UPDATE econtent_item SET externalFormat = ?, externalFormatId = ?, externalFormatNumeric = ?, identifier = ?, sampleName_1 = ?, sampleUrl_1 = ?, sampleName_2 = ?, sampleUrl_2 = ?, date_updated =? WHERE id = ?\");\n\n      doesOverDriveAvailabilityExist =\n          econtentConn.prepareStatement(\n              \"SELECT id from econtent_availability where recordId = ? and libraryId = ?\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      addOverDriveAvailability =\n          econtentConn.prepareStatement(\n              \"INSERT INTO econtent_availability (recordId, copiesOwned, availableCopies, numberOfHolds, libraryId) VALUES (?, ?, ?, ?, ?)\");\n      updateOverDriveAvailability =\n          econtentConn.prepareStatement(\n              \"UPDATE econtent_availability SET copiesOwned = ?, availableCopies = ?, numberOfHolds = ? WHERE id = ?\");\n\n      getEContentRecordStmt =\n          econtentConn.prepareStatement(\n              \"SELECT * FROM econtent_record WHERE id = ?\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      getItemsForEContentRecordStmt =\n          econtentConn.prepareStatement(\n              \"SELECT * FROM econtent_item WHERE recordId = ?\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      getAvailabilityForEContentRecordStmt =\n          econtentConn.prepareStatement(\n              \"SELECT * FROM econtent_availability WHERE recordId = ?\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n\n      // BA++set up Prepared Statements to delete records from db not in OverDrive\n      deleteEContentRecordnotinOverdrive =\n          econtentConn.prepareStatement(\"DELETE FROM econtent_record where externalid = ?\");\n\n      PreparedStatement existingEcontentIlsIdsStmt =\n          econtentConn.prepareStatement(\n              \"SELECT econtent_record.id, ilsId, status, count(econtent_item.id) as numItems from econtent_item RIGHT join econtent_record on econtent_record.id = recordId GROUP by ilsId\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      ResultSet existingEcontentIlsIdsRS = existingEcontentIlsIdsStmt.executeQuery();\n      while (existingEcontentIlsIdsRS.next()) {\n        EcontentRecordInfo recordInfo = new EcontentRecordInfo();\n        recordInfo.setRecordId(existingEcontentIlsIdsRS.getLong(1));\n        recordInfo.setIlsId(existingEcontentIlsIdsRS.getString(2));\n        recordInfo.setStatus(existingEcontentIlsIdsRS.getString(3));\n        recordInfo.setNumItems(existingEcontentIlsIdsRS.getInt(4));\n        existingEcontentIlsIds.put(recordInfo.getIlsId(), recordInfo);\n      }\n\n      PreparedStatement overDriveTitlesWithoutIlsIdStmt =\n          econtentConn.prepareStatement(\n              \"SELECT econtent_record.id, externalId, status, count(econtent_item.id) as numItems from econtent_item RIGHT join econtent_record on econtent_record.id = recordId WHERE externalId is NOT NULL AND ilsId IS NULL GROUP by externalId\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      ResultSet overDriveTitlesWithoutIlsIdRS = overDriveTitlesWithoutIlsIdStmt.executeQuery();\n      while (overDriveTitlesWithoutIlsIdRS.next()) {\n        EcontentRecordInfo recordInfo = new EcontentRecordInfo();\n        recordInfo.setRecordId(overDriveTitlesWithoutIlsIdRS.getLong(1));\n        recordInfo.setExternalId(overDriveTitlesWithoutIlsIdRS.getString(2));\n        recordInfo.setStatus(overDriveTitlesWithoutIlsIdRS.getString(3));\n        recordInfo.setNumItems(overDriveTitlesWithoutIlsIdRS.getInt(4));\n        overDriveTitlesWithoutIlsId.put(recordInfo.getExternalId(), recordInfo);\n      }\n      logger.debug(\n          \"Found \"\n              + overDriveTitlesWithoutIlsId.size()\n              + \" records without ilsids in the database.\");\n      results.addNote(\n          \"Found \"\n              + overDriveTitlesWithoutIlsId.size()\n              + \" records without ilsids in the database.\");\n\n      PreparedStatement advantageCollectionMapStmt =\n          vufindConn.prepareStatement(\n              \"SELECT libraryId, overdriveAdvantageName, overdriveAdvantageProductsKey FROM library where overdriveAdvantageName > ''\");\n      ResultSet advantageCollectionMapRS = advantageCollectionMapStmt.executeQuery();\n      while (advantageCollectionMapRS.next()) {\n        advantageCollectionToLibMap.put(\n            advantageCollectionMapRS.getString(2), advantageCollectionMapRS.getLong(1));\n        libToOverDriveAPIKeyMap.put(\n            advantageCollectionMapRS.getLong(1), advantageCollectionMapRS.getString(3));\n      }\n\n      // BA++ getOverdriveEContentRecordExId\n      int ctr = 0;\n      PreparedStatement getOverdriveEContentRecordExId =\n          econtentConn.prepareStatement(\n              \"SELECT econtent_record.id, externalid FROM econtent_record WHERE externalid is not null\",\n              ResultSet.TYPE_FORWARD_ONLY,\n              ResultSet.CONCUR_READ_ONLY);\n      ResultSet OverdriveEContentRecordExId = getOverdriveEContentRecordExId.executeQuery();\n      while (OverdriveEContentRecordExId.next()) {\n        EcontentRecordInfo recordInfo = new EcontentRecordInfo();\n        recordInfo.setRecordId(OverdriveEContentRecordExId.getLong(1));\n        recordInfo.setExternalId(OverdriveEContentRecordExId.getString(2));\n        overDriveIdsFromEContent.put(recordInfo.getExternalId(), recordInfo);\n        ctr++;\n      }\n      logger.debug(\"OverdriveEContentRecordExId \" + ctr);\n\n    } catch (Exception ex) {\n      // handle any errors\n      logger.error(\"Error initializing econtent extraction \", ex);\n      return false;\n    } finally {\n      results.saveResults();\n    }\n    return checkOverDrive ? loadOverDriveTitlesFromAPI(configIni) : true;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6936, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 282, "tryExpressionEnd": 286, "tryBlockStart": 282, "tryBlockEnd": 1461, "catchExpressionStart": 1250, "catchExpressionEnd": 1273, "catchBlockStart": 1250, "catchBlockEnd": 1307, "exceptionHandlingCallStart": [1281], "exceptionHandlingCallEnd": [1300], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 895, "focalAPIEnd": 914, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [932, 1045, 1123], "useEnd": [951, 1075, 1143], "hasFinally": 1, "cleanUpCall": ["Connection.close()"], "finallyExpressionStart": 1308, "finallyExpressionEnd": 1316, "finallyBlockStart": 1308, "finallyBlockEnd": 1461, "cleanUpCallStart": [1366], "cleanUpCallEnd": [1378], "url": "https://github.com/ugarcia/umappin/tree/master/app/models/osm/OsmNode.java", "rawCode": "  public static List<OsmFeature> findByLocation(JsonNode geometry, int limit) {\n\n    DataSource ds = DB.getDataSource();\n    Connection conn = null;\n    PreparedStatement st;\n    ResultSet rs;\n\n    List<OsmFeature> nodes = new ArrayList<OsmFeature>();\n    OsmNode node = null;\n\n    try {\n      conn = ds.getConnection();\n      String sql =\n          \"select id, vers, usr, uid, timest, featurepicture, tags, st_asgeojson(ST_Transform(ST_SetSRID(geom, 900913),4326)) as geometry \"\n              + \"from osmnodes ORDER BY geom <-> ST_Transform(ST_SetSRID(st_geomfromgeojson(?),4326),900913) LIMIT ?\";\n      st = conn.prepareStatement(sql);\n      st.setString(1, Json.stringify(geometry));\n      st.setInt(2, limit);\n      rs = st.executeQuery();\n      while (rs.next()) {\n        node =\n            new OsmNode(\n                rs.getLong(\"id\"),\n                rs.getInt(\"vers\"),\n                rs.getString(\"usr\"),\n                rs.getString(\"uid\"),\n                0,\n                0,\n                rs.getDate(\"timest\"),\n                rs.getString(\"featurepicture\"),\n                OsmFeature.hstoreFormatToTags(rs.getString(\"tags\")));\n        node.setGeometry(Json.parse(rs.getString(\"geometry\")));\n        nodes.add(node);\n      }\n    } catch (SQLException e) {\n      e.printStackTrace();\n    } finally {\n      if (conn != null)\n        try {\n          conn.close();\n        } catch (SQLException e) {\n          e.printStackTrace();\n        }\n    }\n    return nodes;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6937, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [1023], "initializationEnd": [1057], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["println(*)"], "tryExpressionStart": 897, "tryExpressionEnd": 901, "tryBlockStart": 897, "tryBlockEnd": 1653, "catchExpressionStart": 1537, "catchExpressionEnd": 1560, "catchBlockStart": 1537, "catchBlockEnd": 1596, "exceptionHandlingCallStart": [1568], "exceptionHandlingCallEnd": [1589], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 1065, "guardExpressionEnd": 1085, "guardBlockStart": 1065, "guardBlockEnd": 1433, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1155, "focalAPIEnd": 1180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setNombre(value)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [1137, 1211, 1270, 1357], "useEnd": [1181, 1238, 1298, 1384], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/juandapp/proyDB/tree/master/src/dao/DaoEmpresa.java", "rawCode": "  public LinkedList consultar(String nombre, String telefono, String direccion, String cod_plan) {\n    LinkedList empresaConsulta = new LinkedList();\n    String sql_select = \"SELECT * FROM empresa \";\n    if (!nombre.equals(\"\")\n        || !telefono.equals(\"\")\n        || !direccion.equals(\"\")\n        || !cod_plan.equals(\"\")) {\n      sql_select += \"WHERE\";\n    }\n\n    if (!nombre.equals(\"\")) {\n      sql_select += \" nombre LIKE '%\" + nombre + \"%'\" + \" AND \";\n    }\n    if (!telefono.equals(\"\")) {\n      sql_select += \" telefono LIKE '%\" + telefono + \"%'\" + \" AND \";\n    }\n    if (!direccion.equals(\"\")) {\n      sql_select += \" direccion LIKE '%\" + direccion + \"%'\" + \" AND \";\n    }\n    if (!cod_plan.equals(\" \")) {\n      sql_select += \" cod_plan LIKE '%\" + cod_plan + \"%'\" + \" AND \";\n    }\n\n    sql_select = sql_select.substring(0, sql_select.length() - 5);\n    System.out.println(sql_select);\n    try {\n      Connection conn = fachada.conectar();\n      Statement sentencia = conn.createStatement();\n      ResultSet tabla = sentencia.executeQuery(sql_select);\n      while (tabla.next()) {\n        Empresa empresa = new Empresa();\n        empresa.setNombre(tabla.getString(\"nombre\"));\n        empresa.setTelefono(tabla.getString(\"telefono\"));\n        empresa.setDireccion(tabla.getString(\"direccion\"));\n        empresa.setCod_plan(new DaoPostpago().consultar(tabla.getString(\"cod_plan\")));\n        empresaConsulta.add(empresa);\n      }\n      conn.close();\n      System.out.println(\"Conexion cerrada\");\n      return empresaConsulta;\n\n    } catch (SQLException e) {\n      System.out.println(e);\n    } catch (Exception e) {\n      System.out.println(e);\n    }\n\n    return null;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6938, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [607], "initializationEnd": [631], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "println(String)", "getSQLState()", "println(String)", "getErrorCode()", "println(String)"], "tryExpressionStart": 500, "tryExpressionEnd": 504, "tryBlockStart": 500, "tryBlockEnd": 1279, "catchExpressionStart": 742, "catchExpressionEnd": 766, "catchBlockStart": 742, "catchBlockEnd": 957, "exceptionHandlingCallStart": [812, 774, 870, 836, 932, 895], "exceptionHandlingCallEnd": [827, 828, 886, 887, 949, 950], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "IF {", "guardExpressionStart": 640, "guardExpressionEnd": 654, "guardBlockStart": 640, "guardBlockEnd": 734, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 672, "focalAPIEnd": 690, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "resultSet.close()"], "useStart": [706, 1016], "useEnd": [724, 1026], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 958, "finallyExpressionEnd": 966, "finallyBlockStart": 958, "finallyBlockEnd": 1279, "cleanUpCallStart": [1016], "cleanUpCallEnd": [1026], "url": "https://github.com/bomm/thera-pi/tree/master/ICDSuche/src/Suchen/SqlInfo.java", "rawCode": "  /** ************************************** */\n  public static String holeRezFeld(String feld, String kriterium) {\n    Statement stmt = null;\n    ResultSet rs = null;\n    String ret = \"\";\n    Vector<String> retvec = new Vector<String>();\n\n    try {\n      stmt =\n          ICDrahmen.thisClass.conn.createStatement(\n              ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n    } catch (SQLException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    try {\n\n      String sstmt = \"select \" + feld + \" from verordn where \" + kriterium + \" LIMIT 1\";\n      rs = stmt.executeQuery(sstmt);\n\n      if (rs.next()) {\n        ret = (rs.getString(feld) == null ? \"\" : rs.getString(feld));\n      }\n\n    } catch (SQLException ev) {\n      System.out.println(\"SQLException: \" + ev.getMessage());\n      System.out.println(\"SQLState: \" + ev.getSQLState());\n      System.out.println(\"VendorError: \" + ev.getErrorCode());\n    } finally {\n      if (rs != null) {\n        try {\n          rs.close();\n        } catch (SQLException sqlEx) { // ignore }\n          rs = null;\n        }\n      }\n      if (stmt != null) {\n        try {\n          stmt.close();\n        } catch (SQLException sqlEx) { // ignore }\n          stmt = null;\n        }\n      }\n    }\n    return ret;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6939, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [296], "initializationEnd": [315], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["processDaoException(*,String,String)"], "tryExpressionStart": 168, "tryExpressionEnd": 172, "tryBlockStart": 168, "tryBlockEnd": 538, "catchExpressionStart": 388, "catchExpressionEnd": 408, "catchBlockStart": 388, "catchBlockEnd": 480, "exceptionHandlingCallStart": [416], "exceptionHandlingCallEnd": [473], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "IF {", "guardExpressionStart": 323, "guardExpressionEnd": 338, "guardBlockStart": 323, "guardBlockEnd": 381, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 356, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["closeDaoResources(resultSet,PreparedStatement,Connection)"], "useStart": [497], "useEnd": [531], "hasFinally": 1, "cleanUpCall": ["closeDaoResources(ResultSet,PreparedStatement,Connection)"], "finallyExpressionStart": 481, "finallyExpressionEnd": 489, "finallyBlockStart": 481, "finallyBlockEnd": 538, "cleanUpCallStart": [497], "cleanUpCallEnd": [531], "url": "https://github.com/entando/entando-plugins-parent/tree/master/entando-plugin-jptokenapi/src/main/java/org/entando/entando/plugins/jptokenapi/aps/system/token/ApiTokenDAO.java", "rawCode": "  private String get(String field, String query) {\n    Connection conn = null;\n    PreparedStatement stat = null;\n    ResultSet res = null;\n    String data = null;\n    try {\n      conn = this.getConnection();\n      stat = conn.prepareStatement(query);\n      stat.setString(1, field);\n      res = stat.executeQuery();\n      if (res.next()) {\n        data = res.getString(1);\n      }\n    } catch (Throwable t) {\n      processDaoException(t, \"Error while loading data\", \"get\");\n    } finally {\n      closeDaoResources(res, stat, conn);\n    }\n    return data;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6940, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [458], "initializationEnd": [477], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(String)"], "configurationStart": [585], "configurationEnd": [604], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 486, "guardExpressionEnd": 503, "guardBlockStart": 486, "guardBlockEnd": 1046, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 641, "focalAPIEnd": 668, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setRazaoSocial(value)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getDate(String)", "resultSet.getDate(String)", "resultSet.getInt(String)"], "useStart": [615, 698, 756, 822, 886, 970], "useEnd": [669, 718, 784, 848, 912, 996], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rangelvarnier/2RSYSTEM/tree/master/2RSYSTEMRestaurante/src/RESTAURANTE/DAO/IMPL/FornecedorDAOIMPL.java", "rawCode": "  @Override\n  public List<Fornecedor> buscarTodos() {\n    List<Fornecedor> fornecedores = new ArrayList<Fornecedor>();\n    PessoaDAO pessoaDao = new PessoaDAOIMPL();\n\n    Connection con = new Conexao().criarConexao();\n    String sql =\n        \"select codigo, razaoSocial, cnpj, inscEstadual,\"\n            + \"dataFundacao, dataCadastro, pessoa_codigo from fornecedor\";\n\n    try {\n      PreparedStatement stmt = con.prepareStatement(sql);\n      ResultSet rs = stmt.executeQuery();\n\n      while (rs.next()) {\n        Fornecedor fornecedor = new Fornecedor();\n        fornecedor.setCodigo(rs.getInt(\"codigo\"));\n        fornecedor.setRazaoSocial(rs.getString(\"razaoSocial\"));\n        fornecedor.setCnpj(rs.getString(\"cnpj\"));\n        fornecedor.setInscEstadual(rs.getString(\"inscEstadual\"));\n        fornecedor.setDataFuncacao(rs.getDate(\"dataFundacao\"));\n        fornecedor.setDataCadastro(rs.getDate(\"dataCadastro\"));\n        fornecedor.setPessoa(pessoaDao.buscarPorCodigo(rs.getInt(\"pessoa_codigo\")));\n\n        fornecedores.add(fornecedor);\n      }\n\n    } catch (SQLException ex) {\n    }\n    return fornecedores;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6941, "initialization": ["ResultSet resultSet = PreparedStatement.getResultSet()"], "initializationStart": [1072], "initializationEnd": [1115], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 1357, "focalAPIEnd": 1372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(value,Integer)", "resultSet.getString(int)", "put(Integer,value)", "resultSet.close()"], "useStart": [1340, 1412, 1387, 1435], "useEnd": [1381, 1427, 1428, 1445], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thkoch2001/libpostgresql-jdbc-java/tree/master/org/postgresql/jdbc2/TypeInfoCache.java", "rawCode": "  public synchronized int getPGArrayElement(int oid) throws SQLException {\n    if (oid == Oid.UNSPECIFIED) return Oid.UNSPECIFIED;\n\n    Integer pgType = (Integer) _pgArrayToPgType.get(new Integer(oid));\n\n    if (pgType != null) return pgType.intValue();\n\n    if (_getArrayElementOidStatement == null) {\n      String sql;\n      if (_conn.haveMinimumServerVersion(\"7.3\")) {\n        sql =\n            \"SELECT e.oid, e.typname FROM pg_catalog.pg_type t, pg_catalog.pg_type e WHERE t.oid = ? and t.typelem = e.oid\";\n      } else {\n        sql =\n            \"SELECT e.oid, e.typname FROM pg_type t, pg_type e WHERE t.oid = ? and t.typelem = e.oid\";\n      }\n      _getArrayElementOidStatement = _conn.prepareStatement(sql);\n    }\n\n    _getArrayElementOidStatement.setInt(1, oid);\n\n    // Go through BaseStatement to avoid transaction start.\n    if (!((BaseStatement) _getArrayElementOidStatement)\n        .executeWithFlags(QueryExecutor.QUERY_SUPPRESS_BEGIN))\n      throw new PSQLException(GT.tr(\"No results were returned by the query.\"), PSQLState.NO_DATA);\n\n    ResultSet rs = _getArrayElementOidStatement.getResultSet();\n    if (!rs.next())\n      throw new PSQLException(GT.tr(\"No results were returned by the query.\"), PSQLState.NO_DATA);\n\n    pgType = new Integer((int) rs.getLong(1));\n    _pgArrayToPgType.put(new Integer(oid), pgType);\n    _pgNameToOid.put(rs.getString(2), pgType);\n    _oidToPgName.put(pgType, rs.getString(2));\n\n    rs.close();\n\n    return pgType.intValue();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6942, "initialization": ["ResultSet resultSet = getTables(*,*,*,*)"], "initializationStart": [72], "initializationEnd": [110], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["toString()", "fail(String)"], "tryExpressionStart": 40, "tryExpressionEnd": 44, "tryBlockStart": 40, "tryBlockEnd": 865, "catchExpressionStart": 780, "catchExpressionEnd": 803, "catchBlockStart": 780, "catchBlockEnd": 865, "exceptionHandlingCallStart": [845, 811], "exceptionHandlingCallEnd": [857, 858], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 118, "guardExpressionEnd": 140, "guardBlockStart": 118, "guardBlockEnd": 561, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 170, "focalAPIEnd": 201, "followUpCheck": "value.equals(DatabaseCreator.TEST_TABLE1)", "checkType": "IF", "followUpCheckExpressionStart": 211, "followUpCheckExpressionEnd": 261, "followUpCheckBlockStart": 211, "followUpCheckBlockEnd": 553, "use": ["resultSet.close()"], "useStart": [568], "useEnd": [583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/tests/java/sql/DatabaseMetaDataNotSupportedTest.java", "rawCode": "  private void createTestTables() {\n    try {\n      ResultSet userTab = meta.getTables(null, null, null, null);\n      while (userTab.next()) {\n        String tableName = userTab.getString(\"TABLE_NAME\");\n        if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {\n          statement.execute(DatabaseCreator.DROP_TABLE1);\n        } else if (tableName.equals(DatabaseCreator.TEST_TABLE3)) {\n          statement.execute(DatabaseCreator.DROP_TABLE3);\n        } else if (tableName.equals(VIEW_NAME)) {\n          statement.execute(DROP_VIEW_QUERY);\n        }\n      }\n      userTab.close();\n      statement.execute(DatabaseCreator.CREATE_TABLE3);\n      statement.execute(DatabaseCreator.CREATE_TABLE1);\n      statement.execute(CREATE_VIEW_QUERY);\n      meta = conn.getMetaData();\n    } catch (SQLException e) {\n      fail(\"Unexpected SQLException \" + e.toString());\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6943, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [525], "initializationEnd": [542], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()", "new AppException(String)"], "tryExpressionStart": 230, "tryExpressionEnd": 234, "tryBlockStart": 230, "tryBlockEnd": 1515, "catchExpressionStart": 1025, "catchExpressionEnd": 1048, "catchBlockStart": 1025, "catchBlockEnd": 1183, "exceptionHandlingCallStart": [1057, 1090], "exceptionHandlingCallEnd": [1076, 1176], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 551, "guardExpressionEnd": 568, "guardBlockStart": 551, "guardBlockEnd": 1017, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 642, "focalAPIEnd": 657, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setCatalogName(value)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getLong(int)", "resultSet.getBoolean(int)", "resultSet.getDouble(int)", "resultSet.getLong(int)", "resultSet.close()"], "useStart": [624, 685, 727, 770, 821, 879, 927, 970, 1313], "useEnd": [658, 700, 742, 785, 834, 895, 942, 983, 1323], "hasFinally": 1, "cleanUpCall": ["releaseConnection()"], "finallyExpressionStart": 1184, "finallyExpressionEnd": 1192, "finallyBlockStart": 1184, "finallyBlockEnd": 1515, "cleanUpCallStart": [1246], "cleanUpCallEnd": [1265], "url": "https://github.com/LucidDB/adminws/tree/master/src/com/dynamobi/ws/util/DBAccess.java", "rawCode": "  public static List<ColumnStats> getAllColumnStats() throws AppException {\n\n    List<ColumnStats> retVal = new ArrayList<ColumnStats>();\n\n    Connection conn = null;\n    PreparedStatement ps = null;\n    ResultSet rs = null;\n\n    try {\n\n      conn = getConnection();\n\n      ps =\n          conn.prepareStatement(\n              \"select catalog_name, schema_name, table_name, column_name, distinct_value_count, is_distinct_value_count_estimated, percent_sampled, sample_size from localdb.sys_root.dba_column_stats\");\n      rs = ps.executeQuery();\n\n      while (rs.next()) {\n\n        ColumnStats en = new ColumnStats();\n        en.setCatalogName(rs.getString(1));\n        en.setSchemaName(rs.getString(2));\n        en.setTableName(rs.getString(3));\n        en.setColumnName(rs.getString(4));\n        en.setDistinctValueCount(rs.getLong(5));\n        en.setDistinctValueCountEstimated(rs.getBoolean(6));\n        en.setPercentSampled(rs.getDouble(7));\n        en.setSampleSize(rs.getLong(8));\n        retVal.add(en);\n      }\n\n    } catch (SQLException e) {\n\n      e.printStackTrace();\n      throw new AppException(\"Error Info: The connection was bad or Execute sql statment failed!\");\n    } finally {\n\n      try {\n\n        if (conn != null) {\n          releaseConnection();\n        }\n        if (rs != null) {\n          rs.close();\n        }\n        if (ps != null) {\n          ps.close();\n        }\n\n      } catch (SQLException ex) {\n\n        throw new AppException(\"Error Info: Release db resouce failed\");\n      }\n    }\n\n    return retVal;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6944, "initialization": ["ResultSet resultSet = TipoServicoDAO.pesquisarPorNome(TipoServico)"], "initializationStart": [108], "initializationEnd": [148], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 81, "tryExpressionEnd": 85, "tryBlockStart": 81, "tryBlockEnd": 321, "catchExpressionStart": 264, "catchExpressionEnd": 287, "catchBlockStart": 264, "catchBlockEnd": 321, "exceptionHandlingCallStart": [295], "exceptionHandlingCallEnd": [314], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 157, "guardExpressionEnd": 174, "guardBlockStart": 157, "guardBlockEnd": 257, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 199, "focalAPIEnd": 219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertNotNull(value)"], "useStart": [229], "useEnd": [248], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ThabataG/APB/tree/master/APB/src/testes/TipoServicoDAOTeste.java", "rawCode": "  @Test\n  public void pesquisarPorNomeDeTipoServicoDAODeveMostrarServico() {\n    try {\n      ResultSet rs = servicoDAO.pesquisarPorNome(tiposervico);\n\n      while (rs.next()) {\n        String nome = rs.getString(\"nome\");\n        assertNotNull(nome);\n      }\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6945, "initialization": ["ResultSet resultSet = Connection.createStatement()"], "initializationStart": [874], "initializationEnd": [896], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(String)", "resultSet.getInt(String)"], "configurationStart": [1360, 1397], "configurationEnd": [1375, 1415], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 1321, "guardExpressionEnd": 1338, "guardBlockStart": 1321, "guardBlockEnd": 2408, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1440, "focalAPIEnd": 1461, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setString(int,value)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.close()"], "useStart": [1424, 1486, 1539, 1595, 1648, 1694, 1740, 1789, 1835, 1884, 1927, 1980, 2027, 2075, 2123, 2172, 2219, 2266, 2306, 2349, 2528], "useEnd": [1462, 1514, 1570, 1623, 1669, 1715, 1763, 1812, 1861, 1904, 1957, 2004, 2052, 2100, 2149, 2196, 2243, 2283, 2326, 2368, 2538], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gorannovotny/SWTBus/tree/master/src/hr/mit/BaseMaker.java", "rawCode": "  private static void doPTVozniRedi(Connection con1, Connection con2) throws SQLException {\n    int i = 0;\n    con2.createStatement().executeUpdate(\"drop table if exists PTVozniRedi;\");\n    con2.createStatement()\n        .executeUpdate(\n            \"CREATE TABLE PTVozniRedi(ID INT NOT NULL,Firma INT NOT NULL,Sifra VARCHAR(12) NOT NULL,OznakaLinije VARCHAR(40) ,PrivitakDozvole VARCHAR(20) ,Registracija VARCHAR(20) ,Opis1 VARCHAR(80) ,Opis2 VARCHAR(80) ,VeljaOd DATETIME,VeljaDo DATETIME, SifraOznakeVR INT, VrstaVR INT,KategorijaPrevoza INT,VrstaLinije INT,VrstaPrevoza INT,NacinPrevoza INT,VrstaPosadeID INT,PrevoznikID INT,Kooperacija INT,Pool INT,DOSVRID INT,Stat1 INT,PRIMARY KEY (ID))\");\n    PreparedStatement ps =\n        con2.prepareStatement(\n            \"INSERT INTO PTVozniRedi VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\");\n    ResultSet rs =\n        con1.createStatement()\n            .executeQuery(\n                \"select * from PtVozniredi where VrstaVR=1 and veljaDo >= GETDATE()\"); // svi\n                                                                                       // danasnji i\n                                                                                       // buduci\n                                                                                       // vozni redi\n    while (rs.next()) {\n      ps.setInt(1, rs.getInt(\"ID\"));\n      ps.setInt(2, rs.getInt(\"Firma\"));\n      ps.setString(3, rs.getString(\"Sifra\"));\n      ps.setString(4, rs.getString(\"OznakaLinije\"));\n      ps.setString(5, rs.getString(\"PrivitakDozvole\"));\n      ps.setString(6, rs.getString(\"Registracija\"));\n      ps.setString(7, rs.getString(\"Opis1\"));\n      ps.setString(8, rs.getString(\"Opis2\"));\n      ps.setString(9, rs.getString(\"VeljaOD\"));\n      ps.setString(10, rs.getString(\"VeljaDo\"));\n      ps.setInt(11, rs.getInt(\"SifraOznakeVR\"));\n      ps.setInt(12, rs.getInt(\"VrstaVR\"));\n      ps.setInt(13, rs.getInt(\"KategorijaPrevoza\"));\n      ps.setInt(14, rs.getInt(\"VrstaLinije\"));\n      ps.setInt(15, rs.getInt(\"VrstaPrevoza\"));\n      ps.setInt(16, rs.getInt(\"NacinPrevoza\"));\n      ps.setInt(17, rs.getInt(\"VrstaPosadeID\"));\n      ps.setInt(18, rs.getInt(\"PrevoznikID\"));\n      ps.setInt(19, rs.getInt(\"Kooperacija\"));\n      ps.setInt(20, rs.getInt(\"Pool\"));\n      ps.setInt(21, rs.getInt(\"DOSVRID\"));\n      ps.setInt(22, rs.getInt(\"Status\"));\n      ps.addBatch();\n      i++;\n    }\n    ps.executeBatch();\n    con2.commit();\n    System.out.println(String.format(\"%-26s -> %7d\", \"PTVozniRedi\", i));\n    rs.close();\n    ps.close();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6946, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 160, "tryExpressionEnd": 164, "tryBlockStart": 160, "tryBlockEnd": 735, "catchExpressionStart": 678, "catchExpressionEnd": 701, "catchBlockStart": 678, "catchBlockEnd": 735, "exceptionHandlingCallStart": [709], "exceptionHandlingCallEnd": [728], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 459, "focalAPIEnd": 479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [497, 534], "useEnd": [516, 561], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AnthonyZhu/QuizWebsite/tree/master/src/quizweb/achievement/PracticeAchievement.java", "rawCode": "  public static void loadAllAchievements() {\n    String statement = new String(\"SELECT * FROM \" + DBTable + \" WHERE type = ?\");\n    PreparedStatement stmt;\n    try {\n      stmt = DBConnection.con.prepareStatement(statement);\n      stmt.setInt(1, PRACTICE_TYPE);\n      ResultSet rs = stmt.executeQuery();\n      while (rs.next()) {\n        PracticeAchievement achievement =\n            new PracticeAchievement(\n                rs.getInt(\"aid\"),\n                rs.getString(\"name\"),\n                rs.getString(\"url\"),\n                rs.getString(\"description\"),\n                rs.getInt(\"threshold\"));\n        allAchievements.add(achievement);\n      }\n      rs.close();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6947, "initialization": ["ResultSet resultSet = getColumns(*,*,String,String)"], "initializationStart": [76], "initializationEnd": [117], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.next()"], "configurationStart": [134], "configurationEnd": [143], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 163, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(value,String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getInt(String)", "resultSet.next()", "resultSet.next()", "resultSet.getString(String)", "resultSet.getInt(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.next()", "resultSet.next()", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.next()", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.next()", "resultSet.getString(String)", "assertEquals(value,String)", "resultSet.getString(String)", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.getString(String)", "resultSet.next()", "resultSet.next()"], "useStart": [150, 217, 270, 324, 376, 432, 512, 541, 594, 649, 703, 755, 835, 864, 917, 970, 1021, 1100, 1129, 1180, 1209, 1260, 1289, 1341, 1421, 1450, 1501, 1530, 1582, 1662, 1691, 1742, 1771, 1822, 1851, 1903, 1979, 2008, 1995, 2062, 2113, 2142, 2193, 2222, 2274, 2362], "useEnd": [198, 244, 297, 350, 398, 441, 521, 568, 616, 676, 729, 764, 844, 891, 944, 996, 1030, 1109, 1156, 1189, 1236, 1269, 1316, 1350, 1430, 1477, 1510, 1557, 1591, 1671, 1718, 1751, 1798, 1831, 1878, 1912, 1988, 2034, 2043, 2089, 2122, 2169, 2202, 2249, 2283, 2371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ClockWorkTeam/ClockWork/tree/master/Codice/server/sqlite/xerial/src/test/java/org/sqlite/DBMetaDataTest.java", "rawCode": "  @Test\n  public void getColumns() throws SQLException {\n    ResultSet rs = meta.getColumns(null, null, \"test\", \"id\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"TABLE_NAME\"), \"test\");\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"id\");\n    assertEquals(rs.getString(\"IS_NULLABLE\"), \"YES\");\n    assertEquals(rs.getString(\"COLUMN_DEF\"), null);\n    assertEquals(rs.getInt(\"DATA_TYPE\"), Types.INTEGER);\n    assertFalse(rs.next());\n\n    rs = meta.getColumns(null, null, \"test\", \"fn\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"fn\");\n    assertEquals(rs.getInt(\"DATA_TYPE\"), Types.FLOAT);\n    assertEquals(rs.getString(\"IS_NULLABLE\"), \"YES\");\n    assertEquals(rs.getString(\"COLUMN_DEF\"), \"0.0\");\n    assertFalse(rs.next());\n\n    rs = meta.getColumns(null, null, \"test\", \"sn\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"sn\");\n    assertEquals(rs.getString(\"IS_NULLABLE\"), \"NO\");\n    assertEquals(rs.getString(\"COLUMN_DEF\"), null);\n    assertFalse(rs.next());\n\n    rs = meta.getColumns(null, null, \"test\", \"%\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"id\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"fn\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"sn\");\n    assertFalse(rs.next());\n\n    rs = meta.getColumns(null, null, \"test\", \"%n\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"fn\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"sn\");\n    assertFalse(rs.next());\n\n    rs = meta.getColumns(null, null, \"test%\", \"%\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"id\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"fn\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"sn\");\n    assertFalse(rs.next());\n\n    rs = meta.getColumns(null, null, \"%\", \"%\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"TABLE_NAME\"), \"test\");\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"id\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"fn\");\n    assertTrue(rs.next());\n    assertEquals(rs.getString(\"COLUMN_NAME\"), \"sn\");\n    assertFalse(rs.next());\n\n    rs = meta.getColumns(null, null, \"doesnotexist\", \"%\");\n    assertFalse(rs.next());\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6948, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [613], "initializationEnd": [640], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 647, "guardExpressionEnd": 671, "guardBlockStart": 647, "guardBlockEnd": 1587, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 725, "focalAPIEnd": 747, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getInt(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getInt(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "Publicacion.setNombrePerfil(value)", "resultSet.close()"], "useStart": [771, 817, 856, 900, 945, 981, 1019, 1057, 1096, 1145, 1177, 1592], "useEnd": [790, 839, 878, 922, 964, 1003, 1041, 1079, 1119, 1168, 1208, 1609], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maugsan/CulturaPococi/tree/master/src/java/com/culturaPococi/data/DataPublicacion.java", "rawCode": "  public LinkedList<Publicacion> getListaPublicacion() throws SQLException {\n\n    LinkedList<Publicacion> listaPublicacion = new LinkedList<Publicacion>();\n\n    Publicacion p;\n\n    String nombrePerfil;\n    int idPublicacion;\n    String fechaPublicacion;\n    String correo;\n    String descripcion;\n    int verificacion;\n    String musica;\n    String video;\n    String texto;\n    String imagen;\n    String nombreCategoria;\n\n    String sql = \"call pListaPublicaciones();\";\n    ResultSet resultado;\n    Connection conexion = super.getConexion();\n\n    Statement statement = conexion.createStatement();\n    resultado = statement.executeQuery(sql);\n\n    while (resultado.next()) {\n      p = new Publicacion();\n\n      nombrePerfil = resultado.getString(1);\n      idPublicacion = resultado.getInt(2);\n      fechaPublicacion = resultado.getString(3);\n      correo = resultado.getString(4);\n      descripcion = resultado.getString(5);\n      verificacion = resultado.getInt(6);\n      musica = resultado.getString(7);\n      video = resultado.getString(8);\n      texto = resultado.getString(9);\n      imagen = resultado.getString(10);\n      nombreCategoria = resultado.getString(11);\n\n      p.setNombrePerfil(nombrePerfil);\n      p.setIdPublicacion(idPublicacion);\n      p.setFechaPublicacion(fechaPublicacion);\n      p.setCorreo(correo);\n      p.setDescripcion(descripcion);\n      p.setVerificacion(verificacion);\n      p.setMusica(musica);\n      p.setVideo(video);\n      p.setTexto(texto);\n      p.setImagen(imagen);\n      p.setNombreCategoria(nombreCategoria);\n\n      listaPublicacion.add(p);\n    }\n    resultado.close();\n    System.out.println(\"exito\");\n\n    return listaPublicacion;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6949, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [245], "initializationEnd": [267], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 429, "catchExpressionStart": 372, "catchExpressionEnd": 395, "catchBlockStart": 372, "catchBlockEnd": 429, "exceptionHandlingCallStart": [403], "exceptionHandlingCallEnd": [422], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 275, "guardExpressionEnd": 293, "guardBlockStart": 275, "guardBlockEnd": 345, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 319, "focalAPIEnd": 335, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)"], "useStart": [304], "useEnd": [336], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sneaker/Mediastopf/tree/master/Code/src/ms/utils/server/database/SqlDbConnection.java", "rawCode": "  public ArrayList<String> getStringList(String sql) {\n    ArrayList<String> resultlist = new ArrayList<String>();\n    Connection conn;\n    try {\n      conn = getConnection();\n      Statement stat = conn.createStatement();\n      ResultSet res = stat.executeQuery(sql);\n      while (res.next()) {\n        resultlist.add(res.getString(1));\n      }\n      stat.close();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n    return resultlist;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6950, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [494], "initializationEnd": [519], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 525, "guardExpressionEnd": 544, "guardBlockStart": 525, "guardBlockEnd": 626, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 567, "focalAPIEnd": 594, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(value,*)"], "useStart": [553], "useEnd": [619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anycook/anycook-api/tree/master/src/main/java/de/anycook/db/mysql/DBRecommend.java", "rawCode": "  public Map<String, Integer> getTastyTags(int userId) throws SQLException {\n    Map<String, Integer> tastyTags = new HashMap<>();\n    PreparedStatement pStatement =\n        connection.prepareStatement(\n            \"SELECT tags_name, COUNT(gerichte_name) AS counter from schmeckt \"\n                + \"INNER JOIN gerichte_has_tags USING (gerichte_name) \"\n                + \"WHERE active = 1 AND schmeckt.users_id = ? GROUP BY tags_name\");\n    pStatement.setInt(1, userId);\n\n    ResultSet data = pStatement.executeQuery();\n    while (data.next()) {\n      tastyTags.put(data.getString(\"tags_name\"), data.getInt(\"counter\"));\n    }\n    return tastyTags;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6951, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)", "ResultSet resultSet = Statement.executeQuery(String)", "ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [498, 641, 955], "initializationEnd": [551, 726, 1225], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.next()", "resultSet.next()", "resultSet.next()"], "configurationStart": [568, 743, 1242], "configurationEnd": [577, 752, 1251], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 1277, "focalAPIEnd": 1292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.next()", "resultSet.next()", "resultSet.getString(int)", "assertEquals(String,value)", "resultSet.next()", "resultSet.getString(int)", "assertEquals(String,value)"], "useStart": [1258, 1318, 1360, 1403, 1629, 1802, 1841, 1818, 1984, 2023, 2000], "useEnd": [1293, 1333, 1375, 1418, 1638, 1811, 1856, 1857, 1993, 2038, 2039], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tivv/davepgjdbc/tree/master/org/postgresql/test/jdbc2/StatementTest.java", "rawCode": "  public void testEscapeProcessing() throws SQLException {\n    Statement stmt = con.createStatement();\n    int count;\n\n    count = stmt.executeUpdate(\"insert into escapetest (ts) values ({ts '1900-01-01 00:00:00'})\");\n    assertEquals(1, count);\n\n    count = stmt.executeUpdate(\"insert into escapetest (d) values ({d '1900-01-01'})\");\n    assertEquals(1, count);\n\n    count = stmt.executeUpdate(\"insert into escapetest (t) values ({t '00:00:00'})\");\n    assertEquals(1, count);\n\n    ResultSet rs = stmt.executeQuery(\"select {fn version()} as version\");\n    assertTrue(rs.next());\n\n    // check nested and multiple escaped functions\n    rs = stmt.executeQuery(\"select {fn version()} as version, {fn log({fn log(3.0)})} as log\");\n    assertTrue(rs.next());\n    assertEquals(Math.log(Math.log(3)), rs.getDouble(2), 0.00001);\n\n    stmt.executeUpdate(\"UPDATE escapetest SET \\\")\\\" = 'a', \\\"\\\"\\\"){a}'\\\" = 'b'\");\n\n    // check \"difficult\" values\n    rs =\n        stmt.executeQuery(\n            \"select {fn concat(')',escapetest.\\\")\\\")} as concat\"\n                + \", {fn concat('{','}')} \"\n                + \", {fn concat('''','\\\"')} \"\n                + \", {fn concat(\\\"\\\"\\\"){a}'\\\", '''}''')} \"\n                + \" FROM escapetest\");\n    assertTrue(rs.next());\n    assertEquals(\")a\", rs.getString(1));\n    assertEquals(\"{}\", rs.getString(2));\n    assertEquals(\"'\\\"\", rs.getString(3));\n    assertEquals(\"b'}'\", rs.getString(4));\n\n    count = stmt.executeUpdate(\"create temp table b (i int)\");\n    assertEquals(0, count);\n\n    rs = stmt.executeQuery(\"select * from {oj test_statement a left outer join b on (a.i=b.i)} \");\n    assertTrue(!rs.next());\n    // test escape escape character\n    rs =\n        stmt.executeQuery(\"select str2 from comparisontest where str1 like '|_abcd' {escape '|'} \");\n    assertTrue(rs.next());\n    assertEquals(\"_found\", rs.getString(1));\n    rs =\n        stmt.executeQuery(\"select str2 from comparisontest where str1 like '|%abcd' {escape '|'} \");\n    assertTrue(rs.next());\n    assertEquals(\"%found\", rs.getString(1));\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6952, "initialization": ["ResultSet resultSet = DatabaseMetaData.getTableTypes()"], "initializationStart": [220], "initializationEnd": [240], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 247, "guardExpressionEnd": 264, "guardBlockStart": 247, "guardBlockEnd": 387, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 347, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["binarySearch(String[],value)", "resultSet.close()"], "useStart": [315, 392], "useEnd": [374, 402], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InsomniaAOSP/platform_libcore/tree/master/luni/src/test/java/tests/java/sql/DatabaseMetaDataTest.java", "rawCode": "  /** java.sql.DatabaseMetaData#getTableTypes() */\n  @KnownFailure(\"Ticket 98\")\n  public void test_getTableTypes() throws SQLException {\n    String[] tableTypes = {\"LOCAL TEMPORARY\", \"TABLE\", \"VIEW\"};\n    ResultSet rs = meta.getTableTypes();\n\n    while (rs.next()) {\n      assertTrue(\n          \"Wrong table type\", Arrays.binarySearch(tableTypes, rs.getString(\"TABLE_TYPE\")) > -1);\n    }\n    rs.close();\n\n    // Exception checking\n    conn.close();\n\n    try {\n      meta.getTableTypes();\n      fail(\"SQLException not thrown\");\n    } catch (SQLException e) {\n      // ok\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6953, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getDate(int)"], "configurationStart": [117], "configurationEnd": [135], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 216, "focalAPIEnd": 236, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createString(value)"], "useStart": [199], "useEnd": [237], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dukeboard/kevoree-extra/tree/master/org.kevoree.extra.quercus/src/main/java/com/caucho/quercus/lib/db/PostgresResult.java", "rawCode": "  @Override\n  protected Value getColumnDate(Env env, ResultSet rs, int column) throws SQLException {\n    Date date = rs.getDate(column);\n\n    if (date == null) return NullValue.NULL;\n    else return env.createString(rs.getString(column));\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6954, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [1851], "initializationEnd": [1871], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "getFailReplyIQ(IQ,ConferenceVoteBean)", "add(*)"], "tryExpressionStart": 296, "tryExpressionEnd": 300, "tryBlockStart": 296, "tryBlockEnd": 4316, "catchExpressionStart": 4097, "catchExpressionEnd": 4117, "catchBlockStart": 4097, "catchBlockEnd": 4241, "exceptionHandlingCallStart": [4125, 4195, 4184], "exceptionHandlingCallEnd": [4144, 4233, 4234], "configuration": ["resultSet.getInt(String)"], "configurationStart": [1933], "configurationEnd": [1949], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 1879, "guardExpressionEnd": 1896, "guardBlockStart": 1879, "guardBlockEnd": 3572, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 2159, "focalAPIEnd": 2180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setTitle(value)", "resultSet.getString(String)", "resultSet.getInt(String)", "resultSet.getString(String)", "resultSet.getBoolean(String)", "resultSet.getBoolean(String)", "resultSet.getTimestamp(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getString(String)", "closeConnection(resultSet,PreparedStatement,Connection)"], "useStart": [2147, 2211, 2272, 2387, 2439, 2489, 2543, 2701, 2939, 2989, 3051, 3111, 3314, 3490, 4258], "useEnd": [2181, 2239, 2299, 2414, 2464, 2514, 2572, 2717, 2956, 3017, 3080, 3134, 3330, 3517, 4309], "hasFinally": 1, "cleanUpCall": ["closeConnection(ResultSet,PreparedStatement,Connection)"], "finallyExpressionStart": 4242, "finallyExpressionEnd": 4250, "finallyBlockStart": 4242, "finallyBlockEnd": 4316, "cleanUpCallStart": [4258], "cleanUpCallEnd": [4309], "url": "https://github.com/vyloy/lnvc/tree/master/lvmc/openfire_src/src/plugins/conferenceVote/src/java/org/jivesoftware/openfire/plugin/conferenceVote/LoadVoteAction.java", "rawCode": "  @Override\n  public List execute(IQ request) {\n    Connection con = null;\n    PreparedStatement pstmt = null;\n    boolean abortTransaction = false;\n    ResultSet rs = null;\n    ConferenceVoteBean voteBean = new ConferenceVoteBean();\n    List replys = new ArrayList();\n    int total_num = 0;\n    try {\n      con = DbConnectionManager.getConnection();\n      parseXML(request, con, voteBean);\n      List<ConferenceVoteBean> voteList = new ArrayList<ConferenceVoteBean>();\n      Map<Integer, ConferenceVoteBean> voteMap = new HashMap<Integer, ConferenceVoteBean>();\n      Map<Integer, ConferenceSelectBean> selectMap = new HashMap<Integer, ConferenceSelectBean>();\n      // pstmt = con.prepareStatement(\"select cv.begin_time,cv.id\n      // vid,cv.title_remark,cv.title,cv.effective_time,\" +\n      // \"cv.is_close,cv.is_start,cs.id sid,cs.type,cs.select_title,cs.select_remark,cs.select_num,\"\n      // +\n      // \"co.id oid,co.option_name,su.lcc_account from conference_vote cv,conference_select cs,\" +\n      // \"conference_option co,sys_user su where cv.conference_id=? \"+\n      // \"and cv.id=cs.conference_vote_id and cs.id=co.conference_select_id and\n      // su.user_id=cv.creator\");\n      pstmt =\n          con.prepareStatement(\n              \"select cv.begin_time,cv.id vid,cv.title_remark,cv.title,cv.effective_time,\"\n                  + \"cv.is_close,cv.is_start,cs.id sid,cs.type,cs.select_title,cs.select_remark,cs.select_num,\"\n                  + \"co.id oid,co.option_name,su.lcc_account from conference_vote cv left outer join conference_select cs on cv.id=cs.conference_vote_id \"\n                  + \"left outer join conference_option co on cs.id=co.conference_select_id,sys_user su where cv.conference_id=? \"\n                  + \" and su.user_id=cv.creator order by cv.id desc\");\n      pstmt.setInt(1, voteBean.getConferenceId());\n      rs = pstmt.executeQuery();\n      while (rs.next()) {\n        Integer vid = new Integer(rs.getInt(\"vid\"));\n        ConferenceVoteBean vb = null;\n        ConferenceSelectBean sb = null;\n        if (!voteMap.containsKey(vid)) {\n          vb = new ConferenceVoteBean();\n          vb.setId(vid);\n          vb.setTitle(rs.getString(\"title\"));\n          vb.setTitleRemark(rs.getString(\"title_remark\"));\n          vb.setEffectiveTime(rs.getInt(\"effective_time\"));\n          vb.setConferenceId(voteBean.getConferenceId());\n          vb.setCreatorStr(rs.getString(\"lcc_account\"));\n          vb.setClose(rs.getBoolean(\"is_close\"));\n          vb.setStart(rs.getBoolean(\"is_start\"));\n          vb.setBeginTime(rs.getTimestamp(\"begin_time\"));\n          voteMap.put(vid, vb);\n        } else {\n          vb = voteMap.get(vid);\n        }\n        Integer sid = new Integer(rs.getInt(\"sid\"));\n        if (sid != null && sid > 0) {\n          if (!selectMap.containsKey(sid)) {\n            sb = new ConferenceSelectBean();\n            sb.setId(sid);\n            sb.setConferenceVoteId(vid);\n            sb.setType(rs.getInt(\"type\"));\n            sb.setSelectTitle(rs.getString(\"select_title\"));\n            sb.setSelectRemark(rs.getString(\"select_remark\"));\n            sb.setSelectNum(rs.getInt(\"select_num\"));\n            selectMap.put(sid, sb);\n            vb.getSelects().add(sb);\n          } else {\n            sb = selectMap.get(sid);\n          }\n          Integer oid = new Integer(rs.getInt(\"oid\"));\n          ConferenceOptionBean ob = new ConferenceOptionBean();\n          ob.setId(oid);\n          ob.setConferenceSelectId(sid);\n          ob.setOptionName(rs.getString(\"option_name\"));\n          sb.getOptions().add(ob);\n        }\n      }\n      // DbConnectionManager.fastcloseStmt(pstmt);\n      Iterator iter = voteMap.entrySet().iterator();\n      while (iter.hasNext()) {\n        Map.Entry entry = (Map.Entry) iter.next();\n        // Object key = entry.getKey();\n        ConferenceVoteBean val = (ConferenceVoteBean) entry.getValue();\n        voteList.add(val);\n      }\n      replys.add(this.getSuccessReplyIQ(request, voteList, voteBean));\n      // List<String> userAddress = this.getUserAddress(voteBean.getRoomJid());\n      // replys.add(userAddress);\n    } catch (Exception e) {\n      e.printStackTrace();\n      abortTransaction = true;\n\n      replys.add(this.getFailReplyIQ(request, voteBean));\n    } finally {\n      DbConnectionManager.closeConnection(rs, pstmt, con);\n    }\n    return replys;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6955, "initialization": ["ResultSet resultSet = Connection.createStatement()"], "initializationStart": [85], "initializationEnd": [107], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "IF {", "guardExpressionStart": 167, "guardExpressionEnd": 181, "guardBlockStart": 167, "guardBlockEnd": 233, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 208, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(value)"], "useStart": [199], "useEnd": [224], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gracefullife/gerrit/tree/master/gerrit-war/src/main/java/com/google/gerrit/httpd/SiteInitializer.java", "rawCode": "  private File getSiteFromReviewDb(Connection conn) {\n    try {\n      ResultSet rs = conn.createStatement().executeQuery(\"select site_path from system_config\");\n      if (rs.next()) {\n        return new File(rs.getString(1));\n      }\n      return null;\n    } catch (SQLException e) {\n      return null;\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6956, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [394], "initializationEnd": [472], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.next()"], "configurationStart": [478], "configurationEnd": [487], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 504, "focalAPIEnd": 519, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.contains(String)", "resultSet.next()", "resultSet.getString(int)", "value.contains(String)", "resultSet.next()"], "useStart": [504, 644, 670, 670, 717], "useEnd": [542, 653, 685, 709, 726], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/H2-Mirror/tree/master/h2/src/test/org/h2/test/db/TestOptimizations.java", "rawCode": "  private void testSortIndex() throws SQLException {\n    Connection conn = getConnection(\"optimizations\");\n    Statement stat = conn.createStatement();\n    stat.execute(\"drop table test if exists\");\n    stat.execute(\"create table test(id int)\");\n    stat.execute(\"create index idx_id_desc on test(id desc)\");\n    stat.execute(\"create index idx_id_asc on test(id)\");\n    ResultSet rs;\n\n    rs = stat.executeQuery(\"explain select * from test \" + \"where id > 10 order by id\");\n    rs.next();\n    assertTrue(rs.getString(1).contains(\"IDX_ID_ASC\"));\n\n    rs = stat.executeQuery(\"explain select * from test \" + \"where id < 10 order by id desc\");\n    rs.next();\n    assertTrue(rs.getString(1).contains(\"IDX_ID_DESC\"));\n\n    rs.next();\n    stat.execute(\"drop table test\");\n    conn.close();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6957, "initialization": ["ResultSet resultSet = DataSource.executeQuery(String)"], "initializationStart": [226], "initializationEnd": [254], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(int)"], "configurationStart": [296], "configurationEnd": [308], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 261, "guardExpressionEnd": 278, "guardBlockStart": 261, "guardBlockEnd": 399, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 330, "focalAPIEnd": 345, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Customer(int,value)"], "useStart": [369], "useEnd": [391], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/calen-legaspi/ErikaJoseRon/tree/master/OrderingSystem2/src/com/onb/orderingsystem/dao/CustomerImpl.java", "rawCode": "  @Override\n  public Set<Customer> listAllCustomer() throws SQLException {\n    Set<Customer> customerSet = new HashSet<Customer>();\n    String sql = \"SELECT ID, Name, CreditLimit, PaidAmount FROM Customer\";\n    ResultSet rs = dataSource.executeQuery(sql);\n\n    while (rs.next()) {\n      int id = rs.getInt(1);\n      String name = rs.getString(2);\n      customerSet.add(new Customer(id, name));\n    }\n\n    return customerSet;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6958, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 616, "focalAPIEnd": 640, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [685, 723], "useEnd": [709, 744], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/roselone/FootWith/tree/master/site/src/main/java/edu/thu/cslab/footwith/site/SiteManager.java", "rawCode": "  public static Site seleteSite(String siteName) throws TextFormatException, SQLException {\n    assert siteName.length() <= 40;\n    Site site;\n    DBUtil du = DBUtil.getDBUtil();\n    String SQLCommand = null;\n    ResultSet rs;\n    // if(siteName == null)\n    if (Util.isEmpty(siteName)) throw new TextFormatException(\"siteName is null\");\n    SQLCommand = \" select * from \" + tableName + \" where siteName = '\" + siteName + \"';\";\n    System.out.println(SQLCommand);\n    rs = du.executeQuery(SQLCommand);\n    // while(rs.next()){\n    rs.next();\n    site =\n        new Site(\n            rs.getInt(\"siteID\"),\n            rs.getString(\"siteName\"),\n            rs.getInt(\"rate\"),\n            rs.getString(\"location\"),\n            rs.getString(\"brief\"),\n            rs.getInt(\"picture\"),\n            rs.getInt(\"latitude\"),\n            rs.getInt(\"longitude\"));\n    /*\n    site = new Site();\n    site.setSiteID(rs.getInt(\"siteID\"));\n    site.setSiteName(rs.getString(\"siteName\"));\n    site.setRate(rs.getInt(\"rate\"));\n    site.setLocation(rs.getString(\"location\"));\n    site.setBrief(rs.getString(\"brief\"));\n    site.setPicture(rs.getInt(\"picture\"));\n    */\n    // }\n    return site;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6959, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [1113], "initializationEnd": [1146], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 108, "tryExpressionEnd": 112, "tryBlockStart": 108, "tryBlockEnd": 3415, "catchExpressionStart": 3361, "catchExpressionEnd": 3381, "catchBlockStart": 3361, "catchBlockEnd": 3415, "exceptionHandlingCallStart": [3389], "exceptionHandlingCallEnd": [3408], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 1154, "guardExpressionEnd": 1171, "guardBlockStart": 1154, "guardBlockEnd": 1565, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1194, "focalAPIEnd": 1218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(value,*)", "resultSet.getString(String)"], "useStart": [1182, 1339], "useEnd": [1242, 1363], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rptiwari/mwdb/tree/master/Phase1/src/edu/mwdb/project/PrintAuthorVector.java", "rawCode": "  /** @param args */\n  public static void main(String[] args) {\n    Utility utilityObj = new Utility();\n    try {\n      Connection con = utilityObj.getDBConnection();\n      Map<String, Float> rowData = new HashMap<String, Float>();\n\n      Statement stmt = con.createStatement();\n      // String personId = \"1632672\";\n      String personId = args[0];\n\n      // Creation of a Index Directory.\n      StandardAnalyzer docAnalyzer = new StandardAnalyzer(Version.LUCENE_36);\n      IndexWriterConfig indexConfig = new IndexWriterConfig(Version.LUCENE_36, docAnalyzer);\n      Directory indexDirectory = new RAMDirectory();\n      IndexWriter indexWr = new IndexWriter(indexDirectory, indexConfig);\n\n      String doc = \"\";\n\n      String query_authorid =\n          \"select p.abstract,p.year/year(current_date) as weight from papers p join \"\n              + \"(select distinct w.paperid from \"\n              + \"authors a join writtenby w where a.personid = w.personid and a.personid = \"\n              + personId\n              + \" order by paperid) T1 on p.paperid = T1.paperid where p.abstract != \\\"\\\"\";\n\n      ResultSet rs = stmt.executeQuery(query_authorid);\n      while (rs.next()) {\n        rowData.put(rs.getString(\"abstract\"), rs.getFloat(\"weight\"));\n        // Adding a field 'doc' from the abstract to create an indexed document.\n        doc = rs.getString(\"abstract\");\n        Document document = new Document();\n        document.add(new Field(\"doc\", doc, Field.Store.YES, Field.Index.ANALYZED));\n        indexWr.addDocument(document);\n        indexWr.commit();\n      }\n\n      CharArraySet stopWordsCharArrSet;\n      TokenStream docStream;\n      TokenStream keywords;\n      Map<String, Float> termFreq = new HashMap<String, Float>();\n      KeywordConfig config;\n      List<KeywordConfig> configList = new ArrayList<KeywordConfig>();\n      float weightedNoOfWords = 0;\n\n      for (Map.Entry<String, Float> abs : rowData.entrySet()) {\n        String[] rowDataArr = abs.getKey().split(\"[ ]+\");\n        weightedNoOfWords += abs.getValue() * rowDataArr.length;\n\n        stopWordsCharArrSet =\n            new CharArraySet(Version.LUCENE_36, utilityObj.createStopWordsSet(), true);\n        docStream = new StandardTokenizer(Version.LUCENE_36, new StringReader(abs.getKey()));\n        keywords = new StopFilter(Version.LUCENE_36, docStream, stopWordsCharArrSet);\n\n        termFreq = utilityObj.createTF(keywords, abs.getKey(), abs.getValue());\n\n        for (Map.Entry<String, Float> keys : termFreq.entrySet()) {\n          config = new KeywordConfig();\n          config.setKeyword(keys.getKey());\n          config.setWeightedFreq(keys.getValue());\n          configList.add(config);\n        }\n      }\n      Map<String, Float> termFinalFreq = new HashMap<String, Float>();\n\n      for (KeywordConfig itr : configList) {\n        Float val = termFinalFreq.get(itr.getKeyword());\n        termFinalFreq.put(\n            itr.getKeyword(),\n            (val == null) ? itr.getWeightedFreq() : (val + itr.getWeightedFreq()));\n      }\n\n      for (Map.Entry<String, Float> k : termFinalFreq.entrySet()) {\n        termFinalFreq.put(k.getKey(), k.getValue() / weightedNoOfWords);\n      }\n\n      // Calling the method createTFIDF to create the TF and the TF-IDF vector output\n      utilityObj.createTFIDF(rowData.size(), indexDirectory, termFinalFreq, args[1]);\n\n      con.close();\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6960, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [184], "initializationEnd": [204], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.next()"], "configurationStart": [221], "configurationEnd": [230], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 256, "focalAPIEnd": 271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)"], "useStart": [237], "useEnd": [272], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tivv/davepgjdbc/tree/master/org/postgresql/test/jdbc2/StatementTest.java", "rawCode": "  public void testPreparedFunction() throws SQLException {\n    PreparedStatement pstmt = con.prepareStatement(\"SELECT {fn concat('a', ?)}\");\n    pstmt.setInt(1, 5);\n    ResultSet rs = pstmt.executeQuery();\n    assertTrue(rs.next());\n    assertEquals(\"a5\", rs.getString(1));\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6961, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [465], "initializationEnd": [497], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 505, "guardExpressionEnd": 529, "guardBlockStart": 505, "guardBlockEnd": 1124, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 559, "focalAPIEnd": 592, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.toUpperCase()", "resultSet.getString(String)", "resultSet.getString(String)", "Map<String, Map<String, String>>.get(value)", "Map<String, Map<String, String>>.put(value,Map<String, String>)"], "useStart": [614, 667, 781, 920, 1085], "useEnd": [637, 701, 818, 944, 1115], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xone-team/p0001/tree/master/xone-webtools/src/main/java/com/xone/webtools/web/DatabaseTableInfo.java", "rawCode": "  public Map<String, Map<String, String>> getTableInfos() throws Exception {\n    if (null == tableInfo || tableInfo.isEmpty()) {\n      tableInfo = new HashMap<String, Map<String, String>>();\n      PreparedStatement preparedStatement =\n          getConnection()\n              .prepareStatement(\n                  \"SELECT TABLE_NAME, COLUMN_NAME, COLUMN_COMMENT, COLUMN_KEY FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'sample'\");\n      ResultSet resultSet = preparedStatement.executeQuery();\n      while (resultSet.next()) {\n        String tableName = resultSet.getString(\"TABLE_NAME\");\n        tableName = tableName.toUpperCase();\n        String columnName = resultSet.getString(\"COLUMN_NAME\");\n        columnName = columnName.toUpperCase();\n        String columnComment = resultSet.getString(\"COLUMN_COMMENT\");\n        // String columnKey = resultSet.getString(\"COLUMN_KEY\");\n        Map<String, String> info = tableInfo.get(tableName);\n        if (null == info) {\n          info = new HashMap<String, String>();\n        }\n        info.put(columnName, columnComment);\n        tableInfo.put(tableName, info);\n      }\n    }\n    return tableInfo;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6962, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [632], "initializationEnd": [653], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 662, "guardExpressionEnd": 679, "guardBlockStart": 662, "guardBlockEnd": 855, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 722, "focalAPIEnd": 737, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getConhecimento(value)"], "useStart": [775], "useEnd": [813], "hasFinally": 1, "cleanUpCall": ["Statement.close()"], "finallyExpressionStart": 943, "finallyExpressionEnd": 951, "finallyBlockStart": 943, "finallyBlockEnd": 1173, "cleanUpCallStart": [973], "cleanUpCallEnd": [984], "url": "https://github.com/magsilva/presley/tree/master/code/presley-server/src/main/java/com/hukarz/presley/server/persistencia/implementacao/ServicoConhecimentoImplDAO.java", "rawCode": "  public ArrayList<Conhecimento> getFilhos(String nomeConhecimentoPai)\n      throws ConhecimentoInexistenteException {\n\n    // Connection conn = MySQLConnectionFactory.getConnection();\n    Connection conn = MySQLConnectionFactory.open();\n\n    Statement stm = null;\n\n    ArrayList<Conhecimento> list = new ArrayList<Conhecimento>();\n\n    try {\n\n      stm = conn.createStatement();\n      String SQL = \"\";\n\n      SQL =\n          \" SELECT * FROM conhecimento_pai_filho WHERE \"\n              + \" conhecimento_pai_nome = '\"\n              + nomeConhecimentoPai\n              + \"';\";\n\n      // System.out.println(SQL);\n      ResultSet rs = stm.executeQuery(SQL);\n\n      while (rs.next()) {\n\n        String nomeConhecimentoFilho = rs.getString(2);\n        Conhecimento conhecimento = getConhecimento(nomeConhecimentoFilho);\n\n        list.add(conhecimento);\n      }\n\n    } catch (SQLException e) {\n      // e.printStackTrace();\n      return null;\n    } finally {\n      try {\n        stm.close();\n        // conn.close();\n      } catch (SQLException onConClose) {\n        System.out.println(\" Houve erro no fechamento da conex�o \");\n        onConClose.printStackTrace();\n      }\n    }\n\n    return list;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6963, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [984], "initializationEnd": [1003], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 1011, "guardExpressionEnd": 1028, "guardBlockStart": 1011, "guardBlockEnd": 1086, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1050, "focalAPIEnd": 1076, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)", "closeAll(Connection,PreparedStatement,resultSet)"], "useStart": [1039, 1109], "useEnd": [1077, 1132], "hasFinally": 1, "cleanUpCall": ["closeAll(Connection,PreparedStatement,ResultSet)"], "finallyExpressionStart": 1093, "finallyExpressionEnd": 1101, "finallyBlockStart": 1093, "finallyBlockEnd": 1139, "cleanUpCallStart": [1109], "cleanUpCallEnd": [1132], "url": "https://github.com/alkacon/alkacon-oamp/tree/master/com.alkacon.opencms.v8.formgenerator/src/com/alkacon/opencms/v8/formgenerator/database/CmsFormDataAccess.java", "rawCode": "  /**\n   * Read a <code>List&lt;{@link String}&gt;</code> with all distinct form field names submitted\n   * with the given form in the given time range.\n   *\n   * <p>\n   *\n   * @param formId to find the form data in the database\n   * @param start the start time to find data\n   * @param end the end time to find data\n   * @return a <code>List&lt;{@link String}&gt;</code> with all distinct form field names submitted\n   *     with the given form in the given time range\n   * @throws SQLException if sth goes wrong\n   */\n  public List<String> readFormFieldNames(final String formId, long start, long end)\n      throws SQLException {\n\n    Connection con = null;\n    PreparedStatement stmt = null;\n    ResultSet rs = null;\n\n    List<String> result = new ArrayList<String>();\n    try {\n      con = getConnection();\n      stmt = con.prepareStatement(getQuery(\"READ_FORM_FIELD_NAMES\"));\n      stmt.setString(1, formId);\n      stmt.setLong(2, start);\n      stmt.setLong(3, end);\n\n      rs = stmt.executeQuery();\n      while (rs.next()) {\n        result.add(rs.getString(DB_FIELDNAME));\n      }\n    } finally {\n      closeAll(con, stmt, rs);\n    }\n    return result;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6964, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [415], "initializationEnd": [433], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "error(*,*)", "setState(*,*)", "currentThread()", "interrupt()", "ResultSet.close()"], "tryExpressionStart": 127, "tryExpressionEnd": 131, "tryBlockStart": 127, "tryBlockEnd": 1106, "catchExpressionStart": 622, "catchExpressionEnd": 645, "catchBlockStart": 622, "catchBlockEnd": 1106, "exceptionHandlingCallStart": [666, 653, 692, 754, 754, 846], "exceptionHandlingCallEnd": [680, 684, 738, 776, 788, 864], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 441, "guardExpressionEnd": 466, "guardBlockStart": 441, "guardBlockEnd": 568, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 497, "focalAPIEnd": 520, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Set<String>.add(value)", "resultSet.close()", "resultSet.close()", "resultSet.close()"], "useStart": [530, 576, 846, 998], "useEnd": [559, 594, 864, 1016], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kennyhelsens/compomics-relims/tree/master/compomics-relims/src/main/java/com/compomics/relims/model/provider/mslims/MsLimsDataProvider.java", "rawCode": "  public Set<String> getProteinAccessionsForProject(long aProjectID) {\n    Set<String> lAccessionSet = Sets.newHashSet();\n\n    try {\n      String lQuery =\n          \"select distinct accession from identification as i, spectrum as s where i.l_spectrumid=s.spectrumid and s.l_projectid=?\";\n      prs = ConnectionProvider.getConnection().prepareStatement(lQuery);\n      prs.setLong(1, aProjectID);\n\n      lResultSet = prs.executeQuery();\n      while (lResultSet.next()) {\n        String lAccession = lResultSet.getString(1);\n        lAccessionSet.add(lAccession);\n      }\n\n      lResultSet.close();\n      prs.close();\n\n    } catch (SQLException e) {\n      logger.error(e.getMessage(), e);\n      ProgressManager.setState(Checkpoint.FAILED, e);\n      ;\n      Thread.currentThread().interrupt();\n      if (lResultSet != null) {\n        try {\n          lResultSet.close();\n        } catch (SQLException ex) {\n          lResultSet = null;\n        }\n      }\n      if (prs != null) {\n        try {\n          lResultSet.close();\n        } catch (SQLException ex) {\n          lResultSet = null;\n        }\n      }\n    }\n\n    return lAccessionSet;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6965, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [345], "initializationEnd": [364], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 204, "tryExpressionEnd": 208, "tryBlockStart": 204, "tryBlockEnd": 1823, "catchExpressionStart": 1723, "catchExpressionEnd": 1746, "catchBlockStart": 1723, "catchBlockEnd": 1773, "exceptionHandlingCallStart": [1754], "exceptionHandlingCallEnd": [1766], "configuration": ["resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getLong(String)"], "configurationStart": [421, 470, 518], "configurationEnd": [447, 491, 543], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 373, "guardExpressionEnd": 392, "guardBlockStart": 373, "guardBlockEnd": 1676, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 569, "focalAPIEnd": 593, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getInt(String)", "resultSet.getLong(String)", "resultSet.getString(String)", "resultSet.getTimestamp(String)", "resultSet.getTimestamp(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "new BrokerItem(Item,int,int,long,long,value,int,BrokerRace,boolean,boolean,Timestamp,Timestamp)", "resultSet.close()"], "useStart": [618, 664, 742, 804, 868, 920, 965, 1337, 1683], "useEnd": [641, 685, 770, 835, 899, 941, 989, 1666, 1695], "hasFinally": 1, "cleanUpCall": ["close(Connection)"], "finallyExpressionStart": 1774, "finallyExpressionEnd": 1782, "finallyBlockStart": 1774, "finallyBlockEnd": 1823, "cleanUpCallStart": [1790], "cleanUpCallEnd": [1816], "url": "https://github.com/opentree/aionj-hungary/tree/master/DataPack/data/scripts/system/database/mysql5/MySQL5BrokerDAO.java", "rawCode": "  @Override\n  public List<BrokerItem> loadBroker() {\n    final List<BrokerItem> brokerItems = new ArrayList<BrokerItem>();\n\n    final List<Item> items = getBrokerItems();\n\n    Connection con = null;\n\n    try {\n      con = DatabaseFactory.getConnection();\n      PreparedStatement stmt = con.prepareStatement(SELECT_QUERY);\n      ResultSet rset = stmt.executeQuery();\n\n      while (rset.next()) {\n        int itemPointer = rset.getInt(\"itemPointer\");\n        int itemId = rset.getInt(\"itemId\");\n        long itemCount = rset.getLong(\"itemCount\");\n        String seller = rset.getString(\"seller\");\n        int sellerId = rset.getInt(\"sellerId\");\n        long price = rset.getLong(\"price\");\n        BrokerRace itemBrokerRace = BrokerRace.valueOf(rset.getString(\"brokerRace\"));\n        Timestamp expireTime = rset.getTimestamp(\"expireTime\");\n        Timestamp settleTime = rset.getTimestamp(\"settleTime\");\n        int sold = rset.getInt(\"isSold\");\n        int settled = rset.getInt(\"isSettled\");\n\n        boolean isSold = sold == 1;\n        boolean isSettled = settled == 1;\n\n        Item item = null;\n        if (!isSold) {\n          for (Item brItem : items) {\n            if (itemPointer == brItem.getObjectId()) {\n              item = brItem;\n              break;\n            }\n          }\n        }\n\n        brokerItems.add(\n            new BrokerItem(\n                item,\n                itemId,\n                itemPointer,\n                itemCount,\n                price,\n                seller,\n                sellerId,\n                itemBrokerRace,\n                isSold,\n                isSettled,\n                expireTime,\n                settleTime));\n      }\n      rset.close();\n      stmt.close();\n    } catch (SQLException e) {\n      log.error(e);\n    } finally {\n      DatabaseFactory.close(con);\n    }\n\n    return brokerItems;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6966, "initialization": ["ResultSet resultSet = ConnectionDbMySQL.getConnection()"], "initializationStart": [131], "initializationEnd": [173], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 90, "tryExpressionEnd": 94, "tryBlockStart": 90, "tryBlockEnd": 1174, "catchExpressionStart": 1079, "catchExpressionEnd": 1110, "catchBlockStart": 1079, "catchBlockEnd": 1174, "exceptionHandlingCallStart": [1118], "exceptionHandlingCallEnd": [1167], "configuration": ["resultSet.beforeFirst()"], "configurationStart": [596], "configurationEnd": [616], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 688, "guardExpressionEnd": 709, "guardBlockStart": 688, "guardBlockEnd": 818, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 787, "focalAPIEnd": 806, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fromString(value)", "resultSet.getString(int)"], "useStart": [771, 972], "useEnd": [807, 991], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ESIR3-NSOC/NSOC-2011/tree/master/esir.dom11.nsoc-core/esir.dom11.nsoc.datactrl/src/main/java/esir/dom11/nsoc/datactrl/dao/model/mysql/CommandDAOMySQL.java", "rawCode": "  @Override\n  public Command retrieve(UUID id) {\n    Command command = new Command();\n    try {\n      ResultSet result =\n          _connection\n              .getConnection()\n              .createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)\n              .executeQuery(\n                  \"SELECT id_command, id_action, category, `lock`, time_out \"\n                      + \"FROM commands c \"\n                      + \"JOIN commands_actions ca ON c.id=ca.id_command \"\n                      + \"WHERE c.id = '\"\n                      + id\n                      + \"'\");\n      result.beforeFirst();\n      LinkedList<Action> actionList = new LinkedList<Action>();\n      while (result.next()) {\n        actionList.add(_daoFactory.getActionDAO().retrieve(UUID.fromString(result.getString(2))));\n      }\n\n      if (result.first()) {\n        command =\n            new Command(\n                id,\n                actionList,\n                Category.valueOf(result.getString(3)),\n                result.getLong(4),\n                result.getLong(5));\n      }\n    } catch (SQLException exception) {\n      logger.error(\"Command retrieve error\", exception);\n    }\n    return command;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6967, "initialization": ["ResultSet resultSet = BaseDatos.ejecutaConsulta(String)"], "initializationStart": [703], "initializationEnd": [734], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "IF {", "guardExpressionStart": 763, "guardExpressionEnd": 778, "guardBlockStart": 763, "guardBlockEnd": 868, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 794, "focalAPIEnd": 810, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(int)", "resultSet.getString(int)"], "useStart": [819, 844], "useEnd": [835, 860], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Compu-global-Hiper-mega-Net/Proyecto/tree/master/code/BMA/src/GestionDeUsuarios/AccesoBDUsuario.java", "rawCode": "  /**\n   * Permite obtener el nombre completo del usuario (en este caso el entrenador)\n   *\n   * @param accesoBD Usado para interactuar con la base de datos.\n   * @param s Parametro de tipo string usado para obtener el entrenador.\n   * @return String devuelve un tipo String (cadena) con el nombre concatenado del usuario (en este\n   *     caso del entrenador).\n   * @throws SQLException Muestra los mensajes de error en las consultas.\n   */\n  static String getEntrenador(BaseDatos accesoBD, String s) throws SQLException {\n    String query =\n        \"SELECT nombre, primerApellido, segundoApellido FROM Usuario \"\n            + \"WHERE idUsuario='\"\n            + s\n            + \"'\";\n    ResultSet res = accesoBD.ejecutaConsulta(query);\n\n    String ent = \"\";\n\n    if (res.next()) {\n      ent = (res.getString(1) + \" \" + res.getString(2) + \" \" + res.getString(3));\n    }\n\n    return ent;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6968, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [157], "initializationEnd": [183], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(int)", "resultSet.getInt(int)"], "configurationStart": [253, 297], "configurationEnd": [272, 316], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 211, "guardExpressionEnd": 235, "guardBlockStart": 211, "guardBlockEnd": 1414, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 339, "focalAPIEnd": 361, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "resultSet.getString(int)", "withTitle(value)"], "useStart": [382, 430, 478, 525, 603, 995], "useEnd": [404, 452, 500, 547, 625, 1124], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iweinzierl/passsafe/tree/master/swing-gui/src/main/java/de/iweinzierl/passsafe/gui/data/SqliteDataSource.java", "rawCode": "  private void preLoadEntries() throws SQLException {\n    PreparedStatement loadEntries = conn.prepareStatement(SQL_LOAD_ENTRIES);\n    ResultSet resultSet = loadEntries.executeQuery();\n\n    int loaded = 0;\n\n    while (resultSet.next()) {\n      int id = resultSet.getInt(1);\n      int categoryId = resultSet.getInt(2);\n      String title = resultSet.getString(3);\n      String url = resultSet.getString(4);\n      String username = resultSet.getString(5);\n      String password = resultSet.getString(6);\n      String comment = resultSet.getString(7);\n      Date lastModified = DateUtils.parseDatabaseDate(resultSet.getString(8));\n\n      DatabaseEntryCategory category = (DatabaseEntryCategory) getCategoryById(categoryId);\n\n      if (category != null) {\n        Collection<Entry> entries = entryMap.get(category);\n\n        if (entries == null) {\n          entries = new ArrayList<>();\n          entryMap.put(category, (Entry) entries);\n        }\n\n        DatabaseEntry databaseEntry =\n            new DatabaseEntry.Builder()\n                .withId(id)\n                .withCategory(category)\n                .withTitle(title)\n                .withUrl(url)\n                .withUsername(username)\n                .withPassword(password)\n                .withComment(comment)\n                .withLastModified(lastModified)\n                .build();\n        entries.add(databaseEntry);\n        loaded++;\n      }\n    }\n\n    LOGGER.debug(\"PreLoaded {} entries\", loaded);\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6969, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "datatypeArray[n-columnIndex]==null", "guardType": "IF {", "guardExpressionStart": 65, "guardExpressionEnd": 98, "guardBlockStart": 65, "guardBlockEnd": 528, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 462, "focalAPIEnd": 477, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/segasai/SAI-CAS/tree/master/src/sai_cas/db/DBInterface.java", "rawCode": "    public String getDatatype(int n) throws SQLException {\n      if (datatypeArray[n - 1] == null) {\n        PreparedStatement stmt =\n            conn.prepareStatement(\"select cas_get_column_external_datatype(?, ?, ?)\");\n        stmt.setString(1, getBaseCatalogName(n));\n        stmt.setString(2, getBaseTableName(n));\n        stmt.setString(3, getBaseColumnName(n));\n        ResultSet rs = stmt.executeQuery();\n        rs.next();\n        datatypeArray[n - 1] = rs.getString(1);\n        rs.close();\n        stmt.close();\n      }\n      return datatypeArray[n - 1];\n    }\n"}, {"dataset": "resultSetGetString", "exampleID": 6970, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1250, "focalAPIEnd": 1275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.toLowerCase()"], "useStart": [1250], "useEnd": [1289], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SVMP/android_libcore/tree/master/luni/src/test/java/tests/java/sql/DatabaseMetaDataNotSupportedTest.java", "rawCode": "  @KnownFailure(\"not supported. Privileges are not supported.\")\n  public void\n      test_getColumnPrivilegesLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String()\n          throws SQLException {\n    ResultSet rs =\n        meta.getColumnPrivileges(conn.getCatalog(), null, DatabaseCreator.TEST_TABLE1, \"id\");\n    ResultSetMetaData rsmd = rs.getMetaData();\n    assertFalse(\"Rows are obtained\", rs.next());\n    rs.close();\n\n    String query =\n        \"GRANT REFERENCES(id) ON \" + DatabaseCreator.TEST_TABLE1 + \" TO \" + Support_SQL.sqlLogin;\n    statement.execute(query);\n\n    rs = meta.getColumnPrivileges(conn.getCatalog(), null, DatabaseCreator.TEST_TABLE1, \"id\");\n    rsmd = rs.getMetaData();\n    assertTrue(\"Rows do not obtained\", rs.next());\n    int col = rsmd.getColumnCount();\n    assertEquals(\"Incorrect number of columns\", 8, col);\n    String[] columnNames = {\n      \"TABLE_CAT\",\n      \"TABLE_SCHEM\",\n      \"TABLE_NAME\",\n      \"COLUMN_NAME\",\n      \"GRANTOR\",\n      \"GRANTEE\",\n      \"PRIVILEGE\",\n      \"IS_GRANTABLE\"\n    };\n    for (int c = 1; c <= col; ++c) {\n      assertEquals(\"Incorrect column name\", columnNames[c - 1], rsmd.getColumnName(c));\n    }\n    assertEquals(\n        \"Incorrect table catalogue\", conn.getCatalog(), rs.getString(\"TABLE_CAT\").toLowerCase());\n    assertEquals(\"Incorrect table schema\", null, rs.getString(\"TABLE_SCHEM\"));\n    assertEquals(\n        \"Incorrect table name\",\n        DatabaseCreator.TEST_TABLE1,\n        rs.getString(\"TABLE_NAME\").toLowerCase());\n    assertEquals(\"Incorrect column name\", \"id\", rs.getString(\"COLUMN_NAME\").toLowerCase());\n    assertEquals(\n        \"Incorrect grantor\",\n        Support_SQL.sqlLogin + \"@\" + Support_SQL.sqlHost,\n        rs.getString(\"GRANTOR\").toLowerCase());\n    assertTrue(\"Incorrect grantee\", rs.getString(\"GRANTEE\").indexOf(\"root\") != -1);\n    assertEquals(\"Incorrect privilege\", \"references\", rs.getString(\"PRIVILEGE\").toLowerCase());\n\n    query =\n        \"REVOKE REFERENCES(id) ON \" + DatabaseCreator.TEST_TABLE1 + \" FROM \" + Support_SQL.sqlLogin;\n    statement.execute(query);\n    rs.close();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6971, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 478, "focalAPIEnd": 502, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Connection.close()"], "finallyExpressionStart": 557, "finallyExpressionEnd": 565, "finallyBlockStart": 557, "finallyBlockEnd": 590, "cleanUpCallStart": [573], "cleanUpCallEnd": [583], "url": "https://github.com/pcoriente/LaAnita/tree/master/LaAnita/src/java/clasificaciones/dao/DAOClasificacion.java", "rawCode": "  public TOSubGrupo obtenerSubGrupo(int idSubGrupo) throws SQLException {\n    TOSubGrupo toSubGrupo = null;\n    cn = ds.getConnection();\n    Statement st = cn.createStatement();\n    try {\n\n      ResultSet rs =\n          st.executeQuery(\"SELECT * FROM productosSubGrupos WHERE idSubGrupo=\" + idSubGrupo);\n      if (rs.next()) {\n        toSubGrupo =\n            new TOSubGrupo(\n                rs.getInt(\"idSubGrupo\"),\n                rs.getInt(\"codigoSubGrupo\"),\n                rs.getString(\"SubGrupo\"),\n                rs.getInt(\"idGrupo\"));\n      }\n    } finally {\n      cn.close();\n    }\n    return toSubGrupo;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6972, "initialization": ["ResultSet resultSet = selectOneColumnUnderOneCondition(Column,String,Column)"], "initializationStart": [168], "initializationEnd": [227], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 233, "guardExpressionEnd": 250, "guardBlockStart": 233, "guardBlockEnd": 307, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 270, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)"], "useStart": [259], "useEnd": [300], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenIotOrg/openiot/tree/master/modules/x-gsn/src/main/java/org/openiot/gsn/http/ac/ConnectToDB.java", "rawCode": "  Vector getValuesVectorForOneColumnUnderOneCondition(Column col, Column cond, String tableName)\n      throws SQLException {\n    Vector values = new Vector();\n    rs = this.selectOneColumnUnderOneCondition(col, tableName, cond);\n    while (rs.next()) {\n      values.add(rs.getString(col.columnLabel));\n    }\n    return values;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6973, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [651], "initializationEnd": [675], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 470, "tryExpressionEnd": 474, "tryBlockStart": 470, "tryBlockEnd": 961, "catchExpressionStart": 836, "catchExpressionEnd": 869, "catchBlockStart": 836, "catchBlockEnd": 903, "exceptionHandlingCallStart": [877], "exceptionHandlingCallEnd": [896], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 684, "guardExpressionEnd": 701, "guardBlockStart": 684, "guardBlockEnd": 781, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 721, "focalAPIEnd": 736, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(value)"], "useStart": [746], "useEnd": [772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wallnerryan/floodlight/tree/master/src/main/java/net/floodlightcontroller/qos/QoSDBStorageSource.java", "rawCode": "  public void connectToDB() {\n\n    try {\n      // load a properties file\n      prop.load(new FileInputStream(\"src/main/resources/db.mysql.properties\"));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    databaseUrl = prop.getProperty(\"dburl\");\n    uname = prop.getProperty(\"username\");\n    pwd = prop.getProperty(\"password\");\n    System.out.println(\"Connected to: \" + databaseUrl);\n    // System.out.println(uname);\n    // System.out.println(pwd);\n\n    try {\n\n      Class.forName(dbClass);\n      Connection con = DriverManager.getConnection(databaseUrl, uname, pwd);\n      Statement stmt = con.createStatement();\n      ResultSet rs = stmt.executeQuery(query);\n\n      while (rs.next()) {\n        dbtime = rs.getString(1);\n        System.out.println(dbtime);\n      } // end while\n\n      con.close();\n    } // end try\n    catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6974, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 183, "focalAPIEnd": 205, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decrypt(value)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [165, 240, 279], "useEnd": [206, 262, 306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spring-projects/html5expense/tree/master/server/oauth/src/main/java/com/springsource/oauthservice/develop/JdbcAppRepository.java", "rawCode": "        public App mapRow(ResultSet rs, int rowNum) throws SQLException {\n          return new App(\n              appSummaryMapper.mapRow(rs, rowNum),\n              encryptor.decrypt(rs.getString(\"apiKey\")),\n              encryptor.decrypt(rs.getString(\"secret\")),\n              rs.getString(\"redirectUrl\"));\n        }\n"}, {"dataset": "resultSetGetString", "exampleID": 6975, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 169, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)"], "useStart": [198], "useEnd": [232], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/open-infinity/cmt/tree/master/cloud/cloud-repository/src/main/java/org/openinfinity/cloud/domain/repository/configurationtemplate/entity/impl/ConfigurationTemplateRepositoryJdbcImpl.java", "rawCode": "    public ConfigurationTemplate mapRow(ResultSet resultSet, int rowNum) throws SQLException {\n      return new ConfigurationTemplate(\n          resultSet.getInt(\"id\"), resultSet.getString(\"name\"), resultSet.getString(\"description\"));\n    }\n"}, {"dataset": "resultSetGetString", "exampleID": 6976, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 317, "tryExpressionEnd": 321, "tryBlockStart": 317, "tryBlockEnd": 711, "catchExpressionStart": 652, "catchExpressionEnd": 676, "catchBlockStart": 652, "catchBlockEnd": 711, "exceptionHandlingCallStart": [684], "exceptionHandlingCallEnd": [704], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 465, "focalAPIEnd": 480, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.trim()"], "useStart": [465], "useEnd": [487], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RguezMario/src/tree/master/fuente_sodas/Cat_Fue_Soda_Auxf.java", "rawCode": "  public String[][] getMatriz(String NombreCompleto) {\n    String qry =\n        \"select folio,fecha,cantidad from tb_fuente_sodas_auxf where nombre_completo='\"\n            + NombreCompleto\n            + \"' and status='1'\";\n\n    String[][] Matriz = new String[getFilas(qry)][3];\n    Statement s;\n    ResultSet rs;\n    try {\n      s = con.conexion().createStatement();\n      rs = s.executeQuery(qry);\n      int i = 0;\n      while (rs.next()) {\n        Matriz[i][0] = rs.getString(1).trim();\n        Matriz[i][1] = rs.getString(2).trim();\n        Matriz[i][2] = decimalFormat.format(Float.parseFloat(rs.getString(3).trim()));\n\n        i++;\n      }\n\n    } catch (SQLException e1) {\n      e1.printStackTrace();\n    }\n    return Matriz;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6977, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 182, "tryExpressionEnd": 186, "tryBlockStart": 182, "tryBlockEnd": 1943, "catchExpressionStart": 1732, "catchExpressionEnd": 1755, "catchBlockStart": 1732, "catchBlockEnd": 1789, "exceptionHandlingCallStart": [1763], "exceptionHandlingCallEnd": [1782], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1137, "focalAPIEnd": 1156, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [1176, 1280, 1349], "useEnd": [1195, 1310, 1369], "hasFinally": 1, "cleanUpCall": ["Connection.close()"], "finallyExpressionStart": 1790, "finallyExpressionEnd": 1798, "finallyBlockStart": 1790, "finallyBlockEnd": 1943, "cleanUpCallStart": [1848], "cleanUpCallEnd": [1860], "url": "https://github.com/ugarcia/umappin/tree/master/app/models/osm/OsmWay.java", "rawCode": "  public static OsmWay findById(long id) {\n    DataSource ds = DB.getDataSource();\n    Connection conn = null;\n    PreparedStatement st;\n    ResultSet rs;\n    OsmWay way = null;\n    try {\n      conn = ds.getConnection();\n\n      // geom is not withdrawn, we generate the geometry from the nodes\n      String sql =\n          \"select id, nodes, vers, usr, uid, timest, featurepicture, tags from osmways where id = ?\";\n      st = conn.prepareStatement(sql);\n      st.setLong(1, id);\n      rs = st.executeQuery();\n      while (rs.next()) {\n        Array nodesArray = rs.getArray(\"nodes\");\n        Long[] nodeIds = (Long[]) nodesArray.getArray();\n        List<OsmNode> nodes = new ArrayList<OsmNode>();\n        boolean brokenWay = false;\n\n        // Get the nodes\n        for (long nodeId : nodeIds) {\n          OsmNode node = OsmNode.findById(nodeId);\n          if (node != null) {\n            nodes.add(node);\n          } else {\n            brokenWay = true;\n          }\n        }\n\n        if (!brokenWay) {\n          way =\n              new OsmWay(\n                  rs.getLong(\"id\"),\n                  rs.getInt(\"vers\"),\n                  rs.getString(\"usr\"),\n                  rs.getString(\"uid\"),\n                  nodes,\n                  rs.getDate(\"timest\"),\n                  rs.getString(\"featurepicture\"),\n                  hstoreFormatToTags(rs.getString(\"tags\")));\n        } else {\n          sql = \"delete from osmways where id = ?\";\n          st = conn.prepareStatement(sql);\n          st.setLong(1, rs.getLong(\"id\"));\n          st.executeUpdate();\n          for (long nodeId : nodeIds) {\n            OsmNode node = OsmNode.findById(nodeId);\n            if (node != null) node.delete();\n          }\n        }\n      }\n    } catch (SQLException e) {\n      e.printStackTrace();\n    } finally {\n      if (conn != null)\n        try {\n          conn.close();\n        } catch (SQLException e) {\n          e.printStackTrace();\n        }\n    }\n    return way;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6978, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 92, "focalAPIEnd": 107, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta12/kernel-impl/src/main/java/org/sakaiproject/content/impl/serialize/impl/conversion/FileSizeResourcesConversionHandler.java", "rawCode": "  public Object getValidateSource(String id, ResultSet rs) throws SQLException {\n    return rs.getString(1);\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6979, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(String)"], "configurationStart": [195], "configurationEnd": [218], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 273, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createGuidFromString(value)", "resultSet.getString(String)", "resultSet.getInt(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getLong(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getTimestamp(String)", "resultSet.getInt(String)", "resultSet.getString(String)"], "useStart": [247, 332, 386, 438, 492, 544, 620, 669, 742, 787, 867, 930, 1011, 1058, 1139, 1204, 1296, 1365, 1424, 1475, 1519], "useEnd": [303, 361, 408, 468, 516, 570, 643, 694, 763, 810, 897, 962, 1033, 1082, 1170, 1237, 1329, 1400, 1451, 1496, 1542], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Dhandapani/gluster-ovirt/tree/master/backend/manager/tools/engine-notifier/engine-notifier-service/src/main/java/org/ovirt/engine/core/notifier/NotificationService.java", "rawCode": "  private event_audit_log_subscriber getEventAuditLogSubscriber(ResultSet rs) throws SQLException {\n    event_audit_log_subscriber eals = new event_audit_log_subscriber();\n    eals.setevent_type(rs.getInt(\"event_type\"));\n    eals.setsubscriber_id(Guid.createGuidFromString(rs.getString(\"subscriber_id\")));\n    eals.setevent_up_name(rs.getString(\"event_up_name\"));\n    eals.setmethod_id(rs.getInt(\"method_id\"));\n    eals.setmethod_address(rs.getString(\"method_address\"));\n    eals.settag_name(rs.getString(\"tag_name\"));\n    eals.setaudit_log_id(rs.getLong(\"audit_log_id\"));\n    eals.setuser_id(NGuid.createGuidFromString(rs.getString(\"user_id\")));\n    eals.setuser_name(rs.getString(\"user_name\"));\n    eals.setvm_id(NGuid.createGuidFromString(rs.getString(\"vm_id\")));\n    eals.setvm_name(rs.getString(\"vm_name\"));\n    eals.setvm_template_id(NGuid.createGuidFromString(rs.getString(\"vm_template_id\")));\n    eals.setvm_template_name(rs.getString(\"vm_template_name\"));\n    eals.setvds_id(NGuid.createGuidFromString(rs.getString(\"vds_id\")));\n    eals.setvds_name(rs.getString(\"vds_name\"));\n    eals.setstorage_pool_id(Guid.createGuidFromString(rs.getString(\"storage_pool_id\")));\n    eals.setstorage_pool_name(rs.getString(\"storage_pool_name\"));\n    eals.setstorage_domain_id(Guid.createGuidFromString(rs.getString(\"storage_domain_id\")));\n    eals.setstorage_domain_name(rs.getString(\"storage_domain_name\"));\n    eals.setlog_time(rs.getTimestamp(\"log_time\"));\n    eals.setseverity(rs.getInt(\"severity\"));\n    eals.setmessage(rs.getString(\"message\"));\n    return eals;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6980, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 570, "focalAPIEnd": 585, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/coderplay/h2-bitmap/tree/master/h2/src/test/org/h2/test/db/TestLob.java", "rawCode": "  private void testLobCopy(boolean compress) throws SQLException {\n    deleteDb(\"lob\");\n    Connection conn;\n    conn = reconnect(null);\n    Statement stat = conn.createStatement();\n    if (compress) {\n      stat.execute(\"SET COMPRESS_LOB LZF\");\n    } else {\n      stat.execute(\"SET COMPRESS_LOB NO\");\n    }\n    conn = reconnect(conn);\n    stat = conn.createStatement();\n    ResultSet rs;\n    rs =\n        stat.executeQuery(\n            \"select value from information_schema.settings where NAME='COMPRESS_LOB'\");\n    rs.next();\n    assertEquals(compress ? \"LZF\" : \"NO\", rs.getString(1));\n    assertFalse(rs.next());\n    stat.execute(\"create table test(text clob)\");\n    stat.execute(\"create table test2(text clob)\");\n    StringBuilder buff = new StringBuilder();\n    for (int i = 0; i < 1000; i++) {\n      buff.append(' ');\n    }\n    String spaces = buff.toString();\n    stat.execute(\"insert into test values('\" + spaces + \"')\");\n    stat.execute(\"insert into test2 select * from test\");\n    rs = stat.executeQuery(\"select * from test2\");\n    rs.next();\n    assertEquals(spaces, rs.getString(1));\n    stat.execute(\"drop table test\");\n    rs = stat.executeQuery(\"select * from test2\");\n    rs.next();\n    assertEquals(spaces, rs.getString(1));\n    stat.execute(\"alter table test2 add column id int before text\");\n    rs = stat.executeQuery(\"select * from test2\");\n    rs.next();\n    assertEquals(spaces, rs.getString(\"text\"));\n    conn.close();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6981, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [816], "initializationEnd": [833], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 171, "tryExpressionEnd": 175, "tryBlockStart": 171, "tryBlockEnd": 1559, "catchExpressionStart": 1320, "catchExpressionEnd": 1343, "catchBlockStart": 1320, "catchBlockEnd": 1377, "exceptionHandlingCallStart": [1351], "exceptionHandlingCallEnd": [1370], "configuration": ["resultSet.getInt(String)", "resultSet.getInt(String)"], "configurationStart": [922, 966], "configurationEnd": [937, 987], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 841, "guardExpressionEnd": 858, "guardBlockStart": 841, "guardBlockEnd": 1313, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1018, "focalAPIEnd": 1038, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,value)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.getInt(String)", "resultSet.close()"], "useStart": [998, 1067, 1123, 1168, 1213, 1264, 1408], "useEnd": [1039, 1092, 1141, 1187, 1231, 1282, 1420], "hasFinally": 1, "cleanUpCall": ["Connection.close()"], "finallyExpressionStart": 1378, "finallyExpressionEnd": 1386, "finallyBlockStart": 1378, "finallyBlockEnd": 1559, "cleanUpCallStart": [1408], "cleanUpCallEnd": [1420], "url": "https://github.com/Drexel-CS451-Winter2013-Group2/FRC-Scout/tree/master/src/frcscout/src/com/frcscout/teammember/GroupByTeamBean.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public String getTeamMatchTable() {\n    PreparedStatement st = null;\n    ResultSet rs = null;\n    JSONArray json = new JSONArray();\n    try {\n      conn = dbconn.getConnection();\n      st =\n          conn.prepareStatement(\n              \"SELECT m.id, m.event_id, e.name, m.match_number, (m.auton_top)*6 + (m.auton_middle)*4 + (m.auton_bottom)*2 as auton, (m.teleop_top)*3 + (m.teleop_middle)*2 + (m.teleop_bottom) + (m.teleop_pyramid)*5 as teleop, (m.pyramid_level)*10 as climb, (m.auton_top)*6 + (m.auton_middle)*4 + (m.auton_bottom)*2 + (m.teleop_top)*3 + (m.teleop_middle)*2 + (m.teleop_bottom) + (m.teleop_pyramid)*5 + (m.pyramid_level)*10 as total FROM match_record_2013 m, events e WHERE team_id = ? AND m.event_id = e.id\");\n      st.setInt(1, getSelectedTeam());\n      rs = st.executeQuery();\n      while (rs.next()) {\n        JSONObject o = new JSONObject();\n        o.put(\"id\", rs.getInt(\"id\"));\n        o.put(\"event_id\", rs.getInt(\"event_id\"));\n        o.put(\"event_name\", rs.getString(\"name\"));\n        o.put(\"match_id\", rs.getInt(\"match_number\"));\n        o.put(\"autonomous\", rs.getInt(\"auton\"));\n        o.put(\"teleop\", rs.getInt(\"teleop\"));\n        o.put(\"climb\", rs.getInt(\"climb\"));\n        o.put(\"total_points\", rs.getInt(\"total\"));\n        json.add(o);\n      }\n    } catch (SQLException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        conn.close();\n        st.close();\n        rs.close();\n      } catch (SQLException e) {\n        System.out.println(\"Error closing query\");\n      }\n    }\n    return json.toString();\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6982, "initialization": ["ResultSet resultSet = getTables(*,*,String,*)"], "initializationStart": [873], "initializationEnd": [912], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "new SQLException(*)"], "tryExpressionStart": 386, "tryExpressionEnd": 390, "tryBlockStart": 386, "tryBlockEnd": 1623, "catchExpressionStart": 1355, "catchExpressionEnd": 1381, "catchBlockStart": 1355, "catchBlockEnd": 1437, "exceptionHandlingCallStart": [1412, 1395], "exceptionHandlingCallEnd": [1429, 1430], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 988, "guardExpressionEnd": 1004, "guardBlockStart": 988, "guardBlockEnd": 1089, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1038, "focalAPIEnd": 1063, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.toLowerCase()", "resultSet.close()", "resultSet.close()"], "useStart": [1038, 1098, 1495], "useEnd": [1077, 1107, 1504], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 1438, "finallyExpressionEnd": 1446, "finallyBlockStart": 1438, "finallyBlockEnd": 1623, "cleanUpCallStart": [1098], "cleanUpCallEnd": [1107], "url": "https://github.com/fcrepo/fcrepo/tree/master/fcrepo-server/src/main/java/org/fcrepo/server/utilities/SQLUtilityImpl.java", "rawCode": "  @Override\n  protected List<TableSpec> i_getNonExistingTables(Connection conn, List<TableSpec> tSpecs)\n      throws SQLException {\n\n    ArrayList<TableSpec> nonExisting = new ArrayList<TableSpec>();\n    DatabaseMetaData dbMeta = conn.getMetaData();\n    Iterator<TableSpec> tSpecIter = tSpecs.iterator();\n    ResultSet r = null;\n    // Get a list of tables that don't exist, if any\n    try {\n      final String dbType = dbMeta.getDatabaseProductName();\n      if (dbType.equals(\"Oracle\")) {\n        // added since it takes ages on a fresh ORACLE XE to fetch all the tables\n        while (tSpecIter.hasNext()) {\n          final TableSpec spec = tSpecIter.next();\n          r = dbMeta.getTables(null, null, spec.getName().toUpperCase(), null);\n          if (!r.next()) {\n            nonExisting.add(spec);\n          }\n          r.close();\n        }\n      } else {\n        r = dbMeta.getTables(null, null, \"%\", null);\n        HashSet<String> existingTableSet = new HashSet<String>();\n        while (r.next()) {\n          existingTableSet.add(r.getString(\"TABLE_NAME\").toLowerCase());\n        }\n        r.close();\n        r = null;\n        while (tSpecIter.hasNext()) {\n          TableSpec spec = tSpecIter.next();\n          if (!existingTableSet.contains(spec.getName().toLowerCase())) {\n            nonExisting.add(spec);\n          }\n        }\n      }\n    } catch (SQLException sqle) {\n      throw new SQLException(sqle.getMessage());\n    } finally {\n      try {\n        if (r != null) {\n          r.close();\n        }\n      } catch (SQLException sqle2) {\n        throw sqle2;\n      } finally {\n        r = null;\n      }\n    }\n    return nonExisting;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6983, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "println(String)"], "tryExpressionStart": 150, "tryExpressionEnd": 154, "tryBlockStart": 150, "tryBlockEnd": 685, "catchExpressionStart": 597, "catchExpressionEnd": 621, "catchBlockStart": 597, "catchBlockEnd": 685, "exceptionHandlingCallStart": [662, 629], "exceptionHandlingCallEnd": [677, 678], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 436, "focalAPIEnd": 461, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)"], "useStart": [479], "useEnd": [503], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LibraryDB/LibraryDB/tree/master/LibraryDatabase/src/jdbc/JDBCManager.java", "rawCode": "  public ArrayList<Fine> getFineByID(int borid) {\n    ArrayList<Fine> fines = new ArrayList<Fine>();\n    PreparedStatement ps;\n    ResultSet rs;\n\n    try {\n      ps = con.prepareStatement(\"SELECT * FROM fine WHERE borid=?\");\n      ps.setInt(1, borid);\n      rs = ps.executeQuery();\n\n      while (rs.next()) {\n\n        Fine f =\n            new Fine(\n                rs.getInt(\"fid\"),\n                rs.getInt(\"amount\"),\n                rs.getString(\"issueDate\"),\n                rs.getString(\"paidDate\"),\n                rs.getInt(\"borid\"));\n        fines.add(f);\n      }\n\n      ps.close();\n    } catch (SQLException ex) {\n      System.out.println(\"Message: \" + ex.getMessage());\n    }\n    return fines;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6984, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [1431], "initializationEnd": [1456], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": [], "tryExpressionStart": 1020, "tryExpressionEnd": 1024, "tryBlockStart": 1020, "tryBlockEnd": 2739, "catchExpressionStart": 2543, "catchExpressionEnd": 2564, "catchBlockStart": 2543, "catchBlockEnd": 2574, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "IF {", "guardExpressionStart": 1490, "guardExpressionEnd": 1504, "guardBlockStart": 1490, "guardBlockEnd": 1546, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 1522, "focalAPIEnd": 1537, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 1554, "followUpCheckExpressionEnd": 1571, "followUpCheckBlockStart": 1554, "followUpCheckBlockEnd": 1628, "use": ["value.toCharArray()", "resultSet.close()"], "useStart": [1642, 2523], "useEnd": [1660, 2533], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 2493, "finallyExpressionEnd": 2501, "finallyBlockStart": 2493, "finallyBlockEnd": 2739, "cleanUpCallStart": [2523], "cleanUpCallEnd": [2533], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.3/kernel-util/src/main/java/org/sakaiproject/util/conversion/CheckConnection.java", "rawCode": "  public void testUTF8Transport(Connection connection) throws Exception {\n    /*\n     * byte[] b = new byte[102400]; byte[] b2 = new byte[102400]; byte[] b3 =\n     * new byte[102400]; char[] cin = new char[102400]; Random r = new\n     * Random(); r.nextBytes(b);\n     */\n    byte[] bin = new byte[102400];\n    char[] cin = new char[102400];\n    byte[] bout = new byte[102400];\n\n    {\n      int i = 0;\n      for (int bx = 0; i < bin.length; bx++) {\n        bin[i++] = (byte) bx;\n      }\n    }\n    ByteStorageConversion.toChar(bin, 0, cin, 0, cin.length);\n    String sin = new String(cin);\n\n    char[] cout = sin.toCharArray();\n    ByteStorageConversion.toByte(cout, 0, bout, 0, cout.length);\n\n    for (int i = 0; i < bin.length; i++) {\n      if (bin[i] != bout[i]) {\n        throw new Exception(\n            \"Internal Byte conversion failed at \" + bin[i] + \"=>\" + (int) cin[i] + \"=>\" + bout[i]);\n      }\n    }\n\n    PreparedStatement statement = null;\n    PreparedStatement statement2 = null;\n    ResultSet rs = null;\n    try {\n      statement = connection.prepareStatement(\"insert into blobtest ( id, bval ) values ( ?, ? )\");\n      statement.clearParameters();\n      statement.setInt(1, 20);\n      statement.setString(2, sin);\n      statement.executeUpdate();\n\n      statement2 = connection.prepareStatement(\"select bval from blobtest where id = ? \");\n      statement2.clearParameters();\n      statement2.setInt(1, 20);\n      rs = statement2.executeQuery();\n      String sout = null;\n      if (rs.next()) {\n        sout = rs.getString(1);\n      }\n\n      if (sout == null) throw new IllegalStateException(\"String sout == null!\");\n      cout = sout.toCharArray();\n      ByteStorageConversion.toByte(cout, 0, bout, 0, cout.length);\n\n      if (sin.length() != sout.length()) {\n        throw new Exception(\n            \"UTF-8 Data was lost communicating with the database, please \"\n                + \"check connection string and default table types (Truncation/Expansion)\");\n      }\n\n      for (int i = 0; i < bin.length; i++) {\n        if (bin[i] != bout[i]) {\n          throw new Exception(\n              \"UTF-8 Data was corrupted communicating with the database, \"\n                  + \"please check connectionstring and default table types (Conversion)\"\n                  + \"\"\n                  + bin[i]\n                  + \"=>\"\n                  + (int) cin[i]\n                  + \"=>\"\n                  + bout[i]);\n        }\n      }\n\n      log.info(\"DB Connection passes UTF-8 tests\");\n\n    } finally {\n      try {\n        rs.close();\n      } catch (Exception ex) {\n\n      }\n      try {\n        statement2.close();\n      } catch (Exception ex) {\n\n      }\n      try {\n        statement.close();\n      } catch (Exception ex) {\n\n      }\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6985, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 92, "focalAPIEnd": 107, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/kernel-1.0.x/kernel-impl/src/main/java/org/sakaiproject/content/impl/serialize/impl/conversion/FileSizeResourcesConversionHandler.java", "rawCode": "  public Object getValidateSource(String id, ResultSet rs) throws SQLException {\n    return rs.getString(1);\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6986, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [249], "initializationEnd": [268], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "IF {", "guardExpressionStart": 276, "guardExpressionEnd": 294, "guardBlockStart": 276, "guardBlockEnd": 437, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 316, "focalAPIEnd": 344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["value.getBytes(String)"], "useStart": [408], "useEnd": [427], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tulskiy/musique/tree/master/dependencies/last.fm-bindings/src/main/java/de/umass/lastfm/cache/DatabaseCache.java", "rawCode": "  public InputStream load(String cacheEntryName) {\n    try {\n      PreparedStatement stmt =\n          conn.prepareStatement(\"SELECT response FROM \" + TABLE_NAME + \" WHERE key = ?;\");\n      stmt.setString(1, cacheEntryName);\n      ResultSet result = stmt.executeQuery();\n      if (result.next()) {\n        String s = result.getString(\"response\");\n        stmt.close();\n        return new ByteArrayInputStream(s.getBytes(\"UTF-8\"));\n      }\n      stmt.close();\n    } catch (SQLException e) {\n      // ignore\n    } catch (UnsupportedEncodingException e) {\n      // won't happen\n    }\n    return null;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6987, "initialization": ["ResultSet resultSet = getColumns(*,String,String,*)"], "initializationStart": [618], "initializationEnd": [677], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getMetaData()"], "configurationStart": [705], "configurationEnd": [721], "guardCondition": "columnIndex!=17 && columnIndex<=columns&&columnIndex<=22 && resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 746, "guardExpressionEnd": 763, "guardBlockStart": 746, "guardBlockEnd": 1168, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 1078, "focalAPIEnd": 1097, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(value)", "closeResultSet(resultSet)"], "useStart": [1064, 1191], "useEnd": [1098, 1217], "hasFinally": 1, "cleanUpCall": ["closeResultSet(ResultSet)"], "finallyExpressionStart": 1175, "finallyExpressionEnd": 1183, "finallyBlockStart": 1175, "finallyBlockEnd": 1224, "cleanUpCallStart": [1191], "cleanUpCallEnd": [1217], "url": "https://github.com/escidoc/escidoc-core/tree/master/common/src/main/java/de/escidoc/core/common/util/db/Fingerprint.java", "rawCode": "  /**\n   * Get a list of all table columns for the given combination of schema name and table name.\n   *\n   * @param conn database connection\n   * @param schema schema name\n   * @param table table name\n   * @return list of all table columns\n   * @throws SQLException Thrown if an SQL statement failed to be executed.\n   */\n  private static String[] getColumns(final Connection conn, final String schema, final String table)\n      throws SQLException {\n    final ArrayList<String> result = new ArrayList<String>();\n    final DatabaseMetaData metaData = conn.getMetaData();\n    ResultSet rs = null;\n    try {\n      rs = metaData.getColumns(conn.getCatalog(), schema, table, null);\n      final int columns = rs.getMetaData().getColumnCount();\n      while (rs.next()) {\n        final StringBuilder column = new StringBuilder();\n        for (int index = 4; (index <= columns) && (index <= 22); index++) {\n          // ignore column position\n          if (index != 17) {\n            if (column.length() > 0) {\n              column.append('/');\n            }\n            column.append(rs.getString(index));\n          }\n        }\n        result.add(column.toString());\n      }\n    } finally {\n      IOUtils.closeResultSet(rs);\n    }\n    return result.toArray(new String[result.size()]);\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6988, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.next()", "resultSet.getInt(String)", "resultSet.getInt(String)"], "configurationStart": [826, 915, 988], "configurationEnd": [840, 942, 1015], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1092, "focalAPIEnd": 1122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,value)", "resultSet.getString(String)", "assertEquals(String,value)", "resultSet.next()", "resultSet.getInt(String)", "resultSet.getString(String)", "assertEquals(String,value)"], "useStart": [1068, 1164, 1144, 1748, 1794, 1849, 1829], "useEnd": [1123, 1194, 1195, 1762, 1821, 1879, 1880], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fyp09008/E-HospitalS/tree/master/lib/mysql-connector-java-5.1.12/src/testsuite/simple/MetadataTest.java", "rawCode": "  public void testTinyint1IsBit() throws Exception {\n    String tableName = \"testTinyint1IsBit\";\n    // Can't use 'BIT' or boolean\n    createTable(tableName, \"(field1 TINYINT(1))\");\n    this.stmt.executeUpdate(\"INSERT INTO \" + tableName + \" VALUES (1)\");\n\n    Properties props = new Properties();\n    props.setProperty(\"tinyint1IsBit\", \"true\");\n    props.setProperty(\"transformedBitIsBoolean\", \"true\");\n    Connection boolConn = getConnectionWithProps(props);\n\n    this.rs = boolConn.createStatement().executeQuery(\"SELECT field1 FROM \" + tableName);\n    checkBitOrBooleanType(false);\n\n    this.rs = boolConn.prepareStatement(\"SELECT field1 FROM \" + tableName).executeQuery();\n    checkBitOrBooleanType(false);\n\n    this.rs = boolConn.getMetaData().getColumns(boolConn.getCatalog(), null, tableName, \"field1\");\n    assertTrue(this.rs.next());\n\n    if (versionMeetsMinimum(4, 1)) {\n      assertEquals(Types.BOOLEAN, this.rs.getInt(\"DATA_TYPE\"));\n    } else {\n      assertEquals(Types.BIT, this.rs.getInt(\"DATA_TYPE\"));\n    }\n\n    if (versionMeetsMinimum(4, 1)) {\n      assertEquals(\"BOOLEAN\", this.rs.getString(\"TYPE_NAME\"));\n    } else {\n      assertEquals(\"BIT\", this.rs.getString(\"TYPE_NAME\"));\n    }\n\n    props.clear();\n    props.setProperty(\"transformedBitIsBoolean\", \"false\");\n    props.setProperty(\"tinyint1IsBit\", \"true\");\n\n    Connection bitConn = getConnectionWithProps(props);\n\n    this.rs = bitConn.createStatement().executeQuery(\"SELECT field1 FROM \" + tableName);\n    checkBitOrBooleanType(true);\n\n    this.rs = bitConn.prepareStatement(\"SELECT field1 FROM \" + tableName).executeQuery();\n    checkBitOrBooleanType(true);\n\n    this.rs = bitConn.getMetaData().getColumns(boolConn.getCatalog(), null, tableName, \"field1\");\n    assertTrue(this.rs.next());\n\n    assertEquals(Types.BIT, this.rs.getInt(\"DATA_TYPE\"));\n\n    assertEquals(\"BIT\", this.rs.getString(\"TYPE_NAME\"));\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6989, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 208, "guardExpressionEnd": 225, "guardBlockStart": 208, "guardBlockEnd": 798, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 258, "focalAPIEnd": 280, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getTimestamp(String)", "resultSet.getInt(String)", "resultSet.getString(String)", "Map<String, List<BlockEvent>>.get(value)", "Map<String, List<BlockEvent>>.put(value,List<BlockEvent>)"], "useStart": [332, 408, 495, 564, 680], "useEnd": [361, 432, 521, 590, 719], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RIPE-NCC/whois/tree/master/whois-query/src/main/java/net/ripe/db/whois/query/dao/jdbc/JdbcAccessControlListDao.java", "rawCode": "    @Override\n    public List<BlockEvents> extractData(final ResultSet rs)\n        throws SQLException, DataAccessException {\n      final Map<String, List<BlockEvent>> blockEventsMap = new HashMap<>();\n      while (rs.next()) {\n        final String prefix = rs.getString(\"prefix\");\n        final LocalDateTime time = Timestamp.from(rs.getTimestamp(\"event_time\")).toLocalDateTime();\n        final int limit = rs.getInt(\"daily_limit\");\n        final BlockEvent.Type type = BlockEvent.Type.valueOf(rs.getString(\"event_type\"));\n\n        List<BlockEvent> blockEvents = blockEventsMap.get(prefix);\n        if (blockEvents == null) {\n          blockEvents = new ArrayList<>();\n          blockEventsMap.put(prefix, blockEvents);\n        }\n        blockEvents.add(new BlockEvent(time, limit, type));\n      }\n\n      final List<BlockEvents> result = new ArrayList<>(blockEventsMap.size());\n      for (Map.Entry<String, List<BlockEvent>> blockEventEntry : blockEventsMap.entrySet()) {\n        result.add(new BlockEvents(blockEventEntry.getKey(), blockEventEntry.getValue()));\n      }\n\n      return result;\n    }\n"}, {"dataset": "resultSetGetString", "exampleID": 6990, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [782], "initializationEnd": [800], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.getInt(String)"], "configurationStart": [924], "configurationEnd": [947], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 806, "guardExpressionEnd": 847, "guardBlockStart": 806, "guardBlockEnd": 1560, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 1036, "focalAPIEnd": 1062, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setFirstName(value)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.close()"], "useStart": [1015, 1093, 1149, 1207, 1262, 1311, 1360, 1410, 1463, 1565], "useEnd": [1063, 1120, 1174, 1235, 1284, 1333, 1382, 1434, 1487, 1575], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yukoff/concourse-connect/tree/master/src/main/java/com/concursive/connect/web/modules/contacts/dao/ContactIndexer.java", "rawCode": "  /**\n   * Given a database and a Lucene writer, this method will add content to the searchable index\n   *\n   * @param writer Description of the Parameter\n   * @param db Description of the Parameter\n   * @param context\n   * @throws java.sql.SQLException Description of the Exception\n   * @throws java.io.IOException Description of the Exception\n   */\n  public void add(IIndexerService writer, Connection db, IndexerContext context)\n      throws SQLException, IOException {\n    int count = 0;\n    PreparedStatement pst =\n        db.prepareStatement(\n            \"SELECT contact_id, owner, first_name, middle_name, last_name, organization, email1, email2, email3, web_page, comments \"\n                + \"FROM contacts \"\n                + \"WHERE contact_id > -1 \");\n    ResultSet rs = pst.executeQuery();\n    while (rs.next() && context.getEnabled()) {\n      ++count;\n      Contact contact = new Contact();\n      contact.setId(rs.getInt(\"contact_id\"));\n      contact.setOwner(DatabaseUtils.getInt(rs, \"owner\"));\n      contact.setFirstName(rs.getString(\"first_name\"));\n      contact.setMiddleName(rs.getString(\"middle_name\"));\n      contact.setLastName(rs.getString(\"last_name\"));\n      contact.setOrganization(rs.getString(\"organization\"));\n      contact.setEmail1(rs.getString(\"email1\"));\n      contact.setEmail2(rs.getString(\"email2\"));\n      contact.setEmail3(rs.getString(\"email3\"));\n      contact.setWebPage(rs.getString(\"web_page\"));\n      contact.setComments(rs.getString(\"comments\"));\n      // add to index\n      writer.indexAddItem(contact, false);\n    }\n    rs.close();\n    pst.close();\n    if (System.getProperty(\"DEBUG\") != null) {\n      System.out.println(\"ContactIndexer-> Finished: \" + count);\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6991, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["Log.debug(String)"], "tryExpressionStart": 625, "tryExpressionEnd": 629, "tryBlockStart": 625, "tryBlockEnd": 1468, "catchExpressionStart": 1370, "catchExpressionEnd": 1393, "catchBlockStart": 1370, "catchBlockEnd": 1468, "exceptionHandlingCallStart": [1407], "exceptionHandlingCallEnd": [1455], "configuration": ["resultSet.getObject(int)"], "configurationStart": [157], "configurationEnd": [176], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 656, "focalAPIEnd": 675, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 689, "followUpCheckExpressionEnd": 705, "followUpCheckBlockStart": 689, "followUpCheckBlockEnd": 803, "use": ["readDocumentFromString(value)"], "useStart": [860], "useEnd": [891], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc03/kernel-impl/src/main/java/org/sakaiproject/content/impl/DbContentService.java", "rawCode": "      public Object readSqlResultRecord(ResultSet result) {\n        BaseResourceEdit edit = null;\n        Object clob = null;\n        try {\n          clob = result.getObject(1);\n          if (clob != null && clob instanceof byte[]) {\n            edit = new BaseResourceEdit();\n            resourceSerializer.parse(edit, (byte[]) clob);\n          }\n        } catch (SQLException e) {\n          // ignore?\n          M_log.debug(\"SqlException unable to read entity\");\n        } catch (EntityParseException e) {\n          M_log.warn(\"EntityParseException unable to parse entity\");\n        }\n        if (edit == null) {\n          try {\n            String xml = result.getString(2);\n            if (xml == null) {\n              M_log.warn(\"EntityReader: null xml : \");\n              return null;\n            }\n\n            // read the xml\n            Document doc = Xml.readDocumentFromString(xml);\n            if (doc == null) {\n              M_log.warn(\"EntityReader: null xml doc : \");\n              return null;\n            }\n\n            // verify the root element\n            Element root = doc.getDocumentElement();\n            if (!root.getTagName().equals(\"resource\")) {\n              M_log.warn(\"EntityReader: XML root element not resource: \" + root.getTagName());\n              return null;\n            }\n            edit = new BaseResourceEdit(root);\n\n          } catch (SQLException e) {\n            M_log.debug(\"SqlException problem with results\");\n          }\n        }\n        return edit;\n      }\n"}, {"dataset": "resultSetGetString", "exampleID": 6992, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 106, "focalAPIEnd": 121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tashiscool/spring/tree/master/spring-jdbc/src/test/java/org/springframework/jdbc/object/StoredProcedureTests.java", "rawCode": "      @Override\n      public String mapRow(ResultSet rs, int rowNum) throws SQLException {\n        return rs.getString(2);\n      }\n"}, {"dataset": "resultSetGetString", "exampleID": 6993, "initialization": ["ResultSet resultSet = executeQuery(String)"], "initializationStart": [298], "initializationEnd": [363], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["resultSet.first()", "resultSet.getInt(String)"], "configurationStart": [371, 538], "configurationEnd": [385, 557], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 587, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setPassword(value)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)"], "useStart": [566, 642, 699, 759, 817, 872, 925, 977, 1026], "useEnd": [616, 667, 729, 787, 845, 897, 951, 1001, 1049], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AlexSteffen/RentACar/tree/master/Webservice/src/rentACar/RentACar_Webservice.java", "rawCode": "  /**\n   * Method to find a specific customer by its customer id.\n   *\n   * @param id ID of the customer\n   * @return Returns a specific customer object.\n   */\n  public Customer getCustomerById(int id) {\n    try {\n\n      // SQL-Query to read the customer from the database\n      ResultSet result = DataSource.executeQuery(\"SELECT * FROM customers WHERE id=\" + id);\n      result.first();\n\n      // creating a new instance of a customer\n      Customer customer = new Customer();\n\n      // filling customer informations\n      customer.setId(result.getInt(\"id\"));\n      customer.setPassword(result.getString(\"password\"));\n      customer.setEmail(result.getString(\"email\"));\n      customer.setSalutation(result.getString(\"salutation\"));\n      customer.setForename(result.getString(\"forename\"));\n      customer.setLastname(result.getString(\"lastname\"));\n      customer.setPhone(result.getString(\"phone\"));\n      customer.setStreet(result.getString(\"street\"));\n      customer.setCity(result.getString(\"city\"));\n      customer.setZip(result.getString(\"zip\"));\n\n      // returning the customer\n      return customer;\n\n    } catch (Exception e) {\n      // returns null in error case\n      return null;\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6994, "initialization": ["ResultSet resultSet = DBConnection.ExecuteQuery(String)"], "initializationStart": [313], "initializationEnd": [470], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 477, "tryExpressionEnd": 481, "tryBlockStart": 477, "tryBlockEnd": 1017, "catchExpressionStart": 960, "catchExpressionEnd": 983, "catchBlockStart": 960, "catchBlockEnd": 1017, "exceptionHandlingCallStart": [991], "exceptionHandlingCallEnd": [1010], "configuration": ["resultSet.getInt(String)"], "configurationStart": [531], "configurationEnd": [550], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 489, "guardExpressionEnd": 506, "guardBlockStart": 489, "guardBlockEnd": 953, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 574, "focalAPIEnd": 594, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getInt(String)", "new Quiz(int,value,int,boolean,boolean,boolean,String,Date)"], "useStart": [752, 834], "useEnd": [771, 917], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brianch5351/Quizicle/tree/master/Quizicle/src/database/QuizBank.java", "rawCode": "  /**\n   * Gets a list of quizzes for a particular category\n   *\n   * @param category Category string to get quizzes for\n   * @return a list of Quiz objects for the category\n   */\n  public List<Quiz> getCategoryQuizzes(String category) {\n    List<Quiz> quizzes = new ArrayList<Quiz>();\n    ResultSet rs =\n        connection.ExecuteQuery(\n            \"SELECT * FROM quiz LEFT JOIN tags ON quiz.id=tags.quizid WHERE tag='\"\n                + category\n                + \"'\");\n\n    try {\n      while (rs.next()) {\n        int quiz_id = rs.getInt(\"quizid\");\n        String name = rs.getString(\"name\");\n        boolean random = false;\n        boolean multiPage = false;\n        boolean feedback = false;\n        String description = \"\";\n        int creator = rs.getInt(\"userid\");\n        Date created = null;\n        Quiz quiz =\n            new Quiz(quiz_id, name, creator, random, feedback, multiPage, description, created);\n        quizzes.add(quiz);\n      }\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n\n    return quizzes;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6995, "initialization": ["ResultSet resultSet = Statement.executeQuery(String)"], "initializationStart": [427], "initializationEnd": [449], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 389, "tryExpressionEnd": 393, "tryBlockStart": 389, "tryBlockEnd": 1936, "catchExpressionStart": 1875, "catchExpressionEnd": 1898, "catchBlockStart": 1875, "catchBlockEnd": 1936, "exceptionHandlingCallStart": [1908], "exceptionHandlingCallEnd": [1927], "configuration": ["resultSet.sql.ResultSet.getInt(int)"], "configurationStart": [503], "configurationEnd": [515], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 459, "guardExpressionEnd": 476, "guardBlockStart": 459, "guardBlockEnd": 1846, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 542, "focalAPIEnd": 557, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.sql.ResultSet.getString(int)", "resultSet.sql.ResultSet.getString(int)", "resultSet.sql.ResultSet.getDouble(int)", "resultSet.sql.ResultSet.getDouble(int)", "resultSet.sql.ResultSet.getDouble(int)", "resultSet.sql.ResultSet.getDouble(int)", "resultSet.sql.ResultSet.getDouble(int)", "resultSet.sql.ResultSet.getDouble(int)", "resultSet.sql.ResultSet.getInt(int)", "new APOI(int,value,String,String,double,double,Rating,double,*,int)", "resultSet.sql.ResultSet.close()"], "useStart": [583, 625, 671, 717, 762, 812, 860, 909, 1153, 1529, 1855], "useEnd": [598, 640, 686, 732, 777, 827, 875, 925, 1166, 1803, 1865], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kateyim/crawler/tree/master/src/main/java/mo/umac/crawler/MainSynthetic.java", "rawCode": "  private HashMap<Integer, APOI> readFromGeneratedDB(String dbNameSource) {\n    HashMap<Integer, APOI> map = new HashMap<Integer, APOI>();\n    H2DB h2 = (H2DB) Strategy.dbExternal;\n    String dbName = Strategy.dbExternal.dbNameSource;\n    try {\n      Connection conn = h2.getConnection(dbName);\n      Statement stat = conn.createStatement();\n      String sql = \"SELECT * FROM item\";\n      try {\n        java.sql.ResultSet rs = stat.executeQuery(sql);\n        while (rs.next()) {\n\n          int itemID = rs.getInt(1);\n          String title = rs.getString(2);\n          String city = rs.getString(3);\n          String state = rs.getString(4);\n\n          double latitude = rs.getDouble(5);\n          double longitude = rs.getDouble(6);\n          double distance = rs.getDouble(7);\n          double averageRating = rs.getDouble(8);\n          double totalRating = rs.getDouble(9);\n          double totalReviews = rs.getDouble(10);\n\n          Rating rating = new Rating();\n          rating.setAverageRating(averageRating);\n          rating.setTotalRatings((int) totalRating);\n          rating.setTotalReviews((int) totalReviews);\n\n          int numCrawled = rs.getInt(11);\n          //\n          // print query result to console\n          // if (logger.isDebugEnabled()) {\n          // logger.debug(\"itemID: \" + itemID);\n          // logger.debug(\"latitude: \" + latitude);\n          // logger.debug(\"longitude: \" + longitude);\n          // logger.debug(\"--------------------------\");\n          // }\n          APOI poi =\n              new APOI(\n                  itemID,\n                  title,\n                  city,\n                  state,\n                  longitude,\n                  latitude,\n                  rating,\n                  distance,\n                  null,\n                  numCrawled);\n          map.put(itemID, poi);\n        }\n        rs.close();\n      } catch (SQLException e) {\n        e.printStackTrace();\n      }\n      stat.close();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n    return map;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6996, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [960], "initializationEnd": [980], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "error(*,*)"], "tryExpressionStart": 740, "tryExpressionEnd": 744, "tryBlockStart": 740, "tryBlockEnd": 1334, "catchExpressionStart": 1184, "catchExpressionEnd": 1210, "catchBlockStart": 1184, "catchBlockEnd": 1259, "exceptionHandlingCallStart": [1228, 1218], "exceptionHandlingCallEnd": [1245, 1252], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 989, "guardExpressionEnd": 1006, "guardBlockStart": 989, "guardBlockEnd": 1177, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 1134, "focalAPIEnd": 1149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(value)", "resultSet.getString(int)", "closeConnection(resultSet,PreparedStatement,Connection)", "resultSet.getString(int)", "valueOf(value)", "resultSet.getString(int)", "closeConnection(resultSet,PreparedStatement,Connection)"], "useStart": [1115, 1152, 1276, 1889, 1870, 1907, 2041], "useEnd": [1150, 1167, 1327, 1904, 1905, 1922, 2092], "hasFinally": 1, "cleanUpCall": ["closeConnection(ResultSet,PreparedStatement,Connection)"], "finallyExpressionStart": 1260, "finallyExpressionEnd": 1268, "finallyBlockStart": 1260, "finallyBlockEnd": 1334, "cleanUpCallStart": [1276], "cleanUpCallEnd": [1327], "url": "https://github.com/Flowdalic/openfire/tree/master/src/java/org/jivesoftware/openfire/component/ExternalComponentManager.java", "rawCode": "  /**\n   * Returns the configuration for an external component. A query for the exact requested subdomain\n   * will be made. If nothing was found and using wildcards is requested then another query will be\n   * made but this time using wildcards.\n   *\n   * @param subdomain the subdomain of the external component.\n   * @param useWildcard true if an attempt to find a subdomain with wildcards should be attempted.\n   * @return the configuration for an external component.\n   */\n  private static ExternalComponentConfiguration getConfiguration(\n      String subdomain, boolean useWildcard) {\n    ExternalComponentConfiguration configuration = null;\n    Connection con = null;\n    PreparedStatement pstmt = null;\n    ResultSet rs = null;\n    try {\n      // Check if there is a configuration for the subdomain\n      con = DbConnectionManager.getConnection();\n      pstmt = con.prepareStatement(LOAD_CONFIGURATION);\n      pstmt.setString(1, subdomain);\n      rs = pstmt.executeQuery();\n\n      while (rs.next()) {\n        configuration =\n            new ExternalComponentConfiguration(\n                subdomain, false, Permission.valueOf(rs.getString(2)), rs.getString(1));\n      }\n    } catch (SQLException sqle) {\n      Log.error(sqle.getMessage(), sqle);\n    } finally {\n      DbConnectionManager.closeConnection(rs, pstmt, con);\n    }\n\n    if (configuration == null && useWildcard) {\n      // Check if there is a configuration that is using wildcards for domains\n      try {\n        // Check if there is a configuration for the subdomain\n        con = DbConnectionManager.getConnection();\n        pstmt = con.prepareStatement(LOAD_WILDCARD_CONFIGURATION);\n        pstmt.setString(1, subdomain);\n        rs = pstmt.executeQuery();\n\n        while (rs.next()) {\n          configuration =\n              new ExternalComponentConfiguration(\n                  subdomain, true, Permission.valueOf(rs.getString(2)), rs.getString(1));\n        }\n      } catch (SQLException sqle) {\n        Log.error(sqle.getMessage(), sqle);\n      } finally {\n        DbConnectionManager.closeConnection(rs, pstmt, con);\n      }\n    }\n    return configuration;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6997, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [452], "initializationEnd": [471], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "buildErrorJson(String)"], "tryExpressionStart": 295, "tryExpressionEnd": 299, "tryBlockStart": 295, "tryBlockEnd": 1638, "catchExpressionStart": 1182, "catchExpressionEnd": 1205, "catchBlockStart": 1182, "catchBlockEnd": 1355, "exceptionHandlingCallStart": [1332, 1262], "exceptionHandlingCallEnd": [1346, 1347], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet.next()", "guardType": "LOOP {", "guardExpressionStart": 479, "guardExpressionEnd": 496, "guardBlockStart": 479, "guardBlockEnd": 910, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 618, "focalAPIEnd": 644, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultSet.getString(String)", "resultSet.getInt(String)", "put(*,value)", "closeConnections(DbConnection,PreparedStatement,resultSet)", "closeConnections(DbConnection,PreparedStatement,resultSet)"], "useStart": [669, 721, 793, 945, 1540], "useEnd": [694, 744, 825, 979, 1574], "hasFinally": 1, "cleanUpCall": ["closeConnections(DbConnection,PreparedStatement,ResultSet)"], "finallyExpressionStart": 1523, "finallyExpressionEnd": 1531, "finallyBlockStart": 1523, "finallyBlockEnd": 1638, "cleanUpCallStart": [945], "cleanUpCallEnd": [979], "url": "https://github.com/medcafe/medCafe/tree/master/src/org/mitre/medcafe/model/Patient.java", "rawCode": "  public static JSONObject getRecentPatients(String userName) {\n    DbConnection dbConn = null;\n    log.finer(\"Patient: getRecentPatients : got connection \");\n    boolean rtnResults = false;\n    JSONObject ret = new JSONObject();\n\n    PreparedStatement prep = null;\n    ResultSet rs = null;\n    try {\n\n      dbConn = setConnection();\n\n      prep = dbConn.prepareStatement(Patient.SEARCH_RECENT_PATIENTS);\n\n      prep.setString(1, userName);\n      rs = prep.executeQuery();\n      while (rs.next()) {\n        // convert to JSON\n        rtnResults = true;\n\n        JSONObject o = new JSONObject();\n        String fName = rs.getString(\"first_name\");\n        String lName = rs.getString(\"last_name\");\n        int patient_id = rs.getInt(\"patient_id\");\n        o.put(Patient.ID, patient_id);\n        o.put(Patient.FIRST_NAME, fName);\n        o.put(Patient.LAST_NAME, lName);\n        ret.append(\"patients\", o);\n      }\n\n      if (!rtnResults) {\n        closeConnections(dbConn, prep, rs);\n        dbConn = null;\n        prep = null;\n        rs = null;\n\n        return WebUtils.buildErrorJson(\n            \"There are no recent patients currently listed for user \" + userName);\n      }\n    } catch (SQLException e) {\n\n      // TODO Auto-generated catch block\n      return WebUtils.buildErrorJson(\"Problem on selecting data from database .\" + e.getMessage());\n\n    } catch (JSONException e) {\n\n      // TODO Auto-generated catch block\n      return WebUtils.buildErrorJson(\"Problem on generating JSON error.\" + e.getMessage());\n\n    } finally {\n\n      closeConnections(dbConn, prep, rs);\n      dbConn = null;\n      prep = null;\n      rs = null;\n    }\n    return ret;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6998, "initialization": ["ResultSet resultSet = DatabaseController.getResultSet(String)"], "initializationStart": [462], "initializationEnd": [495], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["toString()", "println(*)", "println(String)"], "tryExpressionStart": 445, "tryExpressionEnd": 449, "tryBlockStart": 445, "tryBlockEnd": 1234, "catchExpressionStart": 830, "catchExpressionEnd": 853, "catchBlockStart": 830, "catchBlockEnd": 966, "exceptionHandlingCallStart": [880, 861, 901], "exceptionHandlingCallEnd": [892, 893, 958], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet!=null&&resultSet.next()", "guardType": "IF {", "guardExpressionStart": 504, "guardExpressionEnd": 532, "guardBlockStart": 504, "guardBlockEnd": 822, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 568, "focalAPIEnd": 594, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,value)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.getString(String)", "resultSet.close()"], "useStart": [543, 630, 687, 741, 793, 1025], "useEnd": [595, 656, 708, 764, 812, 1035], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 967, "finallyExpressionEnd": 975, "finallyBlockStart": 967, "finallyBlockEnd": 1234, "cleanUpCallStart": [1025], "cleanUpCallEnd": [1035], "url": "https://github.com/JakobMangelberger/MobileWikiAndroid/tree/master/WebserviceMobileWiki/src/com/mobilewiki/webservice/MobileWiki.java", "rawCode": "  public HashMap<String, String> getContentTitleTagForTitle(String title) {\n    HashMap<String, String> result = new HashMap<String, String>();\n\n    query =\n        \"SELECT a.article_id, c.content_id, a.title, c.content, c.tag \"\n            + \"FROM mobilewikia.wiki_article a \"\n            + \"LEFT JOIN mobilewikia.wiki_content c ON ( a.article_id = c.article_id ) \"\n            + \"WHERE c.title = '\"\n            + title\n            + \"'\";\n\n    try {\n      rs = db_controller.getResultSet(query);\n\n      if (rs != null && rs.next()) {\n        result.put(\"article_id\", rs.getString(\"article_id\"));\n        result.put(\"content_id\", rs.getString(\"content_id\"));\n        result.put(\"title\", rs.getString(\"title\"));\n        result.put(\"content\", rs.getString(\"content\"));\n        result.put(\"tag\", rs.getString(\"tag\"));\n      }\n\n    } catch (SQLException e) {\n      System.err.println(e.toString());\n      System.out.println(\"Error executing the Query: \" + query);\n\n    } finally {\n      try {\n        if (rs != null) {\n          rs.close();\n        }\n\n      } catch (SQLException e) {\n        System.err.println(e.toString());\n        System.out.println(\"Error closing ResultSet: getContentTitleTagForTitle(\" + title + \")\");\n      }\n    }\n\n    return result;\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 6999, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = resultSet.getString(columnLabel)", "focalAPIStart": 513, "focalAPIEnd": 543, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 754, "finallyExpressionEnd": 762, "finallyBlockStart": 754, "finallyBlockEnd": 795, "cleanUpCallStart": [772], "cleanUpCallEnd": [786], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta03/kernel-impl-experimental/content/migration/sakai-content-jcr-migration-impl/src/main/java/org/sakaiproject/content/migration/CHStoJCRMigratorImpl.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  private void migrateSomeItems(int numberToMigrate) {\n    List<ThingToMigrate> thingsToMigrate = new ArrayList<ThingToMigrate>();\n\n    try {\n      nextThingsToMigratePreparedStatement.clearParameters();\n      nextThingsToMigratePreparedStatement.setInt(1, numberToMigrate);\n      ResultSet result = nextThingsToMigratePreparedStatement.executeQuery();\n      try {\n        while (result.next()) {\n          ThingToMigrate thing = new ThingToMigrate();\n          thing.contentId = result.getString(\"CONTENT_ID\");\n          thing.status = result.getInt(\"STATUS\");\n          // TODO TODO TODO The time added\n          thing.eventType = result.getString(\"EVENT_TYPE\");\n          thingsToMigrate.add(thing);\n        }\n      } finally {\n        result.close();\n      }\n    } catch (SQLException e) {\n      log.error(\"SQL Error Migrating JCR Items.\", e);\n    }\n\n    for (ThingToMigrate thing : thingsToMigrate) {\n      /*\n       * Leaving this bit of commented out code here for the moment. We\n       * may need to wrap this is a RequestEmulator to deal with SqlServices\n       * occasionally outcry of threads.\n       */\n\n      // final ThingToMigrate thing2 = thing;\n      // Thread thread = new Thread( new Runnable() {\n      // public void run() {\n      // migrateOneItem(jcrSession, thing2);\n      // }\n      // });\n      // thread.start();\n      // CopierRunnable aCopier = (CopierRunnable) appContext.getBean(\"CopierRunnable\");\n      // aCopier.setJcrSession(jcrSession);\n      // aCopier.setThing(thing);\n      // Thread thread = new Thread(aCopier);\n      // thread.start();\n      // while (thread.isAlive()) {\n      // System.out.println(\"SWG Our migrate thing thread is still alive\");\n      // try {\n      // Thread.sleep(1000);\n      // } catch (java.lang.InterruptedException e) {\n      // log.info(\"Unable to sleep while checking if the migrate thread is still alive\", e);\n      // }\n      // }\n      if (thing.contentId.endsWith(\"/\")) {\n        contentToJCRCopier.copyCollectionFromCHStoJCR(jcrSession, thing.contentId);\n      } else {\n        contentToJCRCopier.copyResourceFromCHStoJCR(jcrSession, thing.contentId);\n      }\n\n      markContentItemFinished(thing.contentId);\n    }\n  }\n"}, {"dataset": "resultSetGetString", "exampleID": 7000, "initialization": ["ResultSet resultSet = PreparedStatement.executeQuery()"], "initializationStart": [751], "initializationEnd": [771], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resultSet!=null &&  resultSet.next()", "guardType": "IF {", "guardExpressionStart": 811, "guardExpressionEnd": 826, "guardBlockStart": 811, "guardBlockEnd": 1563, "focalAPI": "value = resultSet.getString(columnIndex)", "focalAPIStart": 926, "focalAPIEnd": 941, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setViewID(value)", "resultSet.getInt(int)", "resultSet.getInt(int)", "resultSet.getInt(int)", "resultSet.getInt(int)", "resultSet.getInt(int)", "resultSet.getInt(int)", "resultSet.getString(int)", "resultSet.getString(int)"], "useStart": [911, 1021, 1078, 1115, 1153, 1194, 1235, 1275, 1406], "useEnd": [942, 1033, 1090, 1127, 1165, 1206, 1247, 1290, 1421], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CompendiumNG/CompendiumNG/tree/master/src/main/java/com/compendium/core/db/DBViewProperty.java", "rawCode": "  /**\n   * Returns a Vector of all the View Properties for the given user id\n   *\n   * @param DBConnection dbcon com.compendium.core.db.management.DBConnection, the DBConnection\n   *     object to access the database with.\n   * @param String sUserID, the id of the user whose ViewProperty record to return.\n   * @return Vector, a list of all the <code>ViewProperty</code> objects for the given user id.\n   * @throws java.sql.SQLException\n   */\n  public static Vector getAllViewProperty(DBConnection dbcon, String sUserID) throws SQLException {\n\n    Connection con = dbcon.getConnection();\n    if (con == null) return null;\n\n    PreparedStatement pstmt = con.prepareStatement(GET_ALL_VIEWPROPERTY);\n    pstmt.setString(1, sUserID);\n\n    ResultSet rs = pstmt.executeQuery();\n\n    Vector data = new Vector(8);\n    if (rs != null) {\n      while (rs.next()) {\n        ViewProperty view = new ViewProperty();\n        view.setViewID(rs.getString(1));\n        view.setUserID(sUserID);\n        view.setHorizontalScrollBarPosition(rs.getInt(2));\n        view.setVerticalScrollBarPosition(rs.getInt(3));\n        view.setWidth(rs.getInt(4));\n        view.setHeight(rs.getInt(5));\n        view.setXPosition(rs.getInt(6));\n        view.setYPosition(rs.getInt(7));\n\n        String isIcon = rs.getString(8);\n        if (isIcon.equals(\"Y\")) view.setIsIcon(true);\n        else view.setIsIcon(false);\n\n        String isMax = rs.getString(9);\n        if (isMax.equals(\"Y\")) view.setIsMaximum(true);\n        else view.setIsMaximum(false);\n\n        data.addElement(view);\n      }\n    }\n    pstmt.close();\n    return data;\n  }\n"}]