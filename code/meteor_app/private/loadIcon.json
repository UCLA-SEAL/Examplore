[{"dataset": "loadIcon", "exampleID": 401, "initialization": ["PackageManager pm = AppListActivity.getPackageManager()"], "initializationStart": [92], "initializationEnd": [114], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getInstalledApplications(int)", "pm.getLaunchIntentForPackage(*)"], "configurationStart": [312, 509], "configurationEnd": [342, 558], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 656, "focalAPIEnd": 676, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/unidevel/android/tree/master/alib/src/com/unidevel/AppListActivity.java", "rawCode": "    @Override\n    protected Void doInBackground(Void... params) {\n      PackageManager pm = me.getPackageManager();\n      this.apps = new ArrayList<AppItem>();\n      // List<PackageInfo> packages =\n      // pm.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES);\n      List<ApplicationInfo> appinfos = pm.getInstalledApplications(0);\n      for (int x = 0; x < appinfos.size(); x++) {\n        ApplicationInfo appInfo = appinfos.get(x);\n        if (!appInfo.enabled) continue;\n        Intent intent = pm.getLaunchIntentForPackage(appInfo.packageName);\n        if (intent == null) continue;\n        AppItem item = new AppItem();\n        item.icon = appInfo.loadIcon(pm);\n        if (item.icon == null) item.icon = me.getResources().getDrawable(R.drawable.empty_app);\n        item.name = appInfo.loadLabel(pm).toString();\n        item.packageName = appInfo.packageName;\n        apps.add(item);\n      }\n      Collections.sort(this.apps);\n      {\n        AppItem item = new AppItem();\n        item.name = me.getString(R.string.empty_app);\n        item.packageName = \"\";\n        item.icon = me.getResources().getDrawable(R.drawable.empty_app);\n        apps.add(0, item);\n      }\n      return null;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 402, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [370], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1497, 1668], "configurationEnd": [1522, 1709], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1787, "focalAPIEnd": 1804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Resolve best descriptive label for the given UID. */\n  public synchronized UidDetail getUidDetail(int uid, boolean blocking) {\n    final UidDetail cached = mUidDetailCache.get(uid);\n    if (cached != null) {\n      return cached;\n    } else if (!blocking) {\n      return null;\n    }\n\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label = res.getString(R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    mUidDetailCache.put(uid, detail);\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 403, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ConicalRom/platform_packages_apps_settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 404, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PerfectButter/platform_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 405, "initialization": ["ApplicationInfo applicationInfo = PackageUtil.getApplicationInfo(String)"], "initializationStart": [271], "initializationEnd": [317], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "applicationInfo!=null", "guardType": "IF {", "guardExpressionStart": 324, "guardExpressionEnd": 348, "guardBlockStart": 324, "guardBlockEnd": 717, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 399, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIcon(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [379, 471], "useEnd": [436, 508], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/qhkyzf/FeiAndroid/tree/master/FeiPhoneInfo/src/com/njnu/kai/feiphoneinfo/TaskActivity.java", "rawCode": "  public BasicProgramUtil buildProgramUtilSimpleInfo(int procId, String procNameString) {\n\n    BasicProgramUtil programUtil = new BasicProgramUtil();\n    programUtil.setProcessName(procNameString);\n\n    // 根据进程名，获取应用程序的ApplicationInfo对象\n    ApplicationInfo tempAppInfo = packageUtil.getApplicationInfo(procNameString);\n\n    if (tempAppInfo != null) {\n      // 为进程加载图标和程序名称\n      programUtil.setIcon(tempAppInfo.loadIcon(packageManager));\n      programUtil.setProgramName(tempAppInfo.loadLabel(packageManager).toString());\n    } else {\n      // 如果获取失败，则使用默认的图标和程序名\n      programUtil.setIcon(getApplicationContext().getResources().getDrawable(R.drawable.unknow));\n      programUtil.setProgramName(procNameString);\n    }\n\n    // String str = processMemoryUtil.getMemInfoByPid(procId);\n    // programUtil.setCpuMemString(str);\n    programUtil.setCpuMemString(\"setCpuMemString\");\n    return programUtil;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 406, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/actionbarsherlock/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 407, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 96, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/content/pm/ComponentInfo.java", "rawCode": "  /** @hide */\n  @Override\n  protected Drawable loadDefaultIcon(PackageManager pm) {\n    return applicationInfo.loadIcon(pm);\n  }\n"}, {"dataset": "loadIcon", "exampleID": 408, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [370], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1497, 1668], "configurationEnd": [1522, 1709], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1787, "focalAPIEnd": 1804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/javroch/android_packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Resolve best descriptive label for the given UID. */\n  public synchronized UidDetail getUidDetail(int uid, boolean blocking) {\n    final UidDetail cached = mUidDetailCache.get(uid);\n    if (cached != null) {\n      return cached;\n    } else if (!blocking) {\n      return null;\n    }\n\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label = res.getString(R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    mUidDetailCache.put(uid, detail);\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 409, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [445, 529], "initializationEnd": [473, 563], "hasTryCatch": 1, "exceptionType": "RuntimeException", "exceptionHandlingCall": ["ParcelFileDescriptor.close()"], "tryExpressionStart": 511, "tryExpressionEnd": 515, "tryBlockStart": 511, "tryBlockEnd": 617, "catchExpressionStart": 2856, "catchExpressionEnd": 2883, "catchBlockStart": 2856, "catchBlockEnd": 2995, "exceptionHandlingCallStart": [2905], "exceptionHandlingCallEnd": [2916], "configuration": ["pm.getApplicationInfo(String,int)", "pm.resolveService(Intent,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [529, 871, 1200], "configurationEnd": [563, 899, 1217], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1302, "focalAPIEnd": 1318, "followUpCheck": "icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0", "checkType": "IF", "followUpCheckExpressionStart": 1350, "followUpCheckExpressionEnd": 1416, "followUpCheckBlockStart": 1350, "followUpCheckBlockEnd": 1931, "use": ["icon.setBounds(int,int,int,int)", "icon.draw(Canvas)"], "useStart": [1731, 1887], "useEnd": [1766, 1899], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/services/java/com/android/server/connectivity/Vpn.java", "rawCode": "  /**\n   * Establish a VPN network and return the file descriptor of the VPN interface. This methods\n   * returns {@code null} if the application is revoked or not prepared.\n   *\n   * @param config The parameters to configure the network.\n   * @return The file descriptor of the VPN interface.\n   */\n  public synchronized ParcelFileDescriptor establish(VpnConfig config) {\n    // Check if the caller is already prepared.\n    PackageManager pm = mContext.getPackageManager();\n    ApplicationInfo app = null;\n    try {\n      app = pm.getApplicationInfo(mPackage, 0);\n    } catch (Exception e) {\n      return null;\n    }\n    if (Binder.getCallingUid() != app.uid) {\n      return null;\n    }\n\n    // Check if the service is properly declared.\n    Intent intent = new Intent(VpnConfig.SERVICE_INTERFACE);\n    intent.setClassName(mPackage, config.user);\n    ResolveInfo info = pm.resolveService(intent, 0);\n    if (info == null) {\n      throw new SecurityException(\"Cannot find \" + config.user);\n    }\n    if (!BIND_VPN_SERVICE.equals(info.serviceInfo.permission)) {\n      throw new SecurityException(config.user + \" does not require \" + BIND_VPN_SERVICE);\n    }\n\n    // Load the label.\n    String label = app.loadLabel(pm).toString();\n\n    // Load the icon and convert it into a bitmap.\n    Drawable icon = app.loadIcon(pm);\n    Bitmap bitmap = null;\n    if (icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0) {\n      int width =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_width);\n      int height =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_height);\n      icon.setBounds(0, 0, width, height);\n      bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n      Canvas c = new Canvas(bitmap);\n      icon.draw(c);\n      c.setBitmap(null);\n    }\n\n    // Configure the interface. Abort if any of these steps fails.\n    ParcelFileDescriptor tun = ParcelFileDescriptor.adoptFd(jniCreate(config.mtu));\n    try {\n      String interfaze = jniGetName(tun.getFd());\n      if (jniSetAddresses(interfaze, config.addresses) < 1) {\n        throw new IllegalArgumentException(\"At least one address must be specified\");\n      }\n      if (config.routes != null) {\n        jniSetRoutes(interfaze, config.routes);\n      }\n      Connection connection = new Connection();\n      if (!mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)) {\n        throw new IllegalStateException(\"Cannot bind \" + config.user);\n      }\n      if (mConnection != null) {\n        mContext.unbindService(mConnection);\n      }\n      if (mInterface != null && !mInterface.equals(interfaze)) {\n        jniReset(mInterface);\n      }\n      mConnection = connection;\n      mInterface = interfaze;\n    } catch (RuntimeException e) {\n      try {\n        tun.close();\n      } catch (Exception ex) {\n        // ignore\n      }\n      throw e;\n    }\n    Log.i(TAG, \"Established by \" + config.user + \" on \" + mInterface);\n\n    // Fill more values.\n    config.user = mPackage;\n    config.interfaze = mInterface;\n\n    // Override DNS servers and show the notification.\n    long identity = Binder.clearCallingIdentity();\n    mCallback.override(config.dnsServers, config.searchDomains);\n    showNotification(config, label, bitmap);\n    Binder.restoreCallingIdentity(identity);\n    return tun;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 410, "initialization": ["PackageManager pm = getPackageManager()"], "initializationStart": [495], "initializationEnd": [514], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [567], "configurationEnd": [617], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 903, "focalAPIEnd": 933, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    Intent intent = getIntent();\n    mDevice = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\n    mAccessory = (UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY);\n    mPendingIntent = (PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT);\n    mUid = intent.getIntExtra(\"uid\", 0);\n    mPackageName = intent.getStringExtra(\"package\");\n\n    PackageManager packageManager = getPackageManager();\n    ApplicationInfo aInfo;\n    try {\n      aInfo = packageManager.getApplicationInfo(mPackageName, 0);\n    } catch (PackageManager.NameNotFoundException e) {\n      Log.e(TAG, \"unable to look up package name\", e);\n      finish();\n      return;\n    }\n    String appName = aInfo.loadLabel(packageManager).toString();\n\n    final AlertController.AlertParams ap = mAlertParams;\n    ap.mIcon = aInfo.loadIcon(packageManager);\n    ap.mTitle = appName;\n    if (mDevice == null) {\n      ap.mMessage = getString(R.string.usb_accessory_permission_prompt, appName);\n      mDisconnectedReceiver = new UsbDisconnectedReceiver(this, mAccessory);\n    } else {\n      ap.mMessage = getString(R.string.usb_device_permission_prompt, appName);\n      mDisconnectedReceiver = new UsbDisconnectedReceiver(this, mDevice);\n    }\n    ap.mPositiveButtonText = getString(android.R.string.ok);\n    ap.mNegativeButtonText = getString(android.R.string.cancel);\n    ap.mPositiveButtonListener = this;\n    ap.mNegativeButtonListener = this;\n\n    // add \"always use\" checkbox\n    LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    ap.mView = inflater.inflate(com.android.internal.R.layout.always_use_checkbox, null);\n    mAlwaysUse = (CheckBox) ap.mView.findViewById(com.android.internal.R.id.alwaysUse);\n    if (mDevice == null) {\n      mAlwaysUse.setText(R.string.always_use_accessory);\n    } else {\n      mAlwaysUse.setText(R.string.always_use_device);\n    }\n    mAlwaysUse.setOnCheckedChangeListener(this);\n    mClearDefaultHint =\n        (TextView) ap.mView.findViewById(com.android.internal.R.id.clearDefaultHint);\n    mClearDefaultHint.setVisibility(View.GONE);\n\n    setupAlert();\n  }\n"}, {"dataset": "loadIcon", "exampleID": 411, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pixmob/httpclient/tree/master/demo/deps/abs/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 412, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getPackageInfo(String,int)"], "initializationStart": [725, 775], "initializationEnd": [744, 808], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackageInfo(String,int)"], "configurationStart": [775], "configurationEnd": [808], "guardCondition": "applicationInfo!=null", "guardType": "IF {", "guardExpressionStart": 834, "guardExpressionEnd": 849, "guardBlockStart": 834, "guardBlockEnd": 899, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 873, "focalAPIEnd": 888, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1074, "followUpCheckExpressionEnd": 1095, "followUpCheckBlockStart": 1074, "followUpCheckBlockEnd": 1166, "use": ["ImageView.setImageDrawable(icon)"], "useStart": [2164], "useEnd": [2200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/PowerUsageDetail.java", "rawCode": "  private void createDetails() {\n    final Intent intent = getIntent();\n    mTitle = intent.getStringExtra(EXTRA_TITLE);\n    final int percentage = intent.getIntExtra(EXTRA_PERCENT, 1);\n    final int gaugeValue = intent.getIntExtra(EXTRA_GAUGE, 1);\n    mUsageSince = intent.getIntExtra(EXTRA_USAGE_SINCE, USAGE_SINCE_UNPLUGGED);\n    mUid = intent.getIntExtra(EXTRA_UID, 0);\n    mDrainType = (DrainType) intent.getSerializableExtra(EXTRA_DRAIN_TYPE);\n    mNoCoverage = intent.getDoubleExtra(EXTRA_NO_COVERAGE, 0);\n    String iconPackage = intent.getStringExtra(EXTRA_ICON_PACKAGE);\n    int iconId = intent.getIntExtra(EXTRA_ICON_ID, 0);\n    if (!TextUtils.isEmpty(iconPackage)) {\n      try {\n        final PackageManager pm = getPackageManager();\n        ApplicationInfo ai = pm.getPackageInfo(iconPackage, 0).applicationInfo;\n        if (ai != null) {\n          mAppIcon = ai.loadIcon(pm);\n        }\n      } catch (NameNotFoundException nnfe) {\n        // Use default icon\n      }\n    } else if (iconId != 0) {\n      mAppIcon = getResources().getDrawable(iconId);\n    }\n    if (mAppIcon == null) {\n      mAppIcon = getPackageManager().getDefaultActivityIcon();\n    }\n\n    // Set the description\n    String summary = getDescriptionForDrainType();\n    ((TextView) findViewById(R.id.summary)).setText(summary);\n\n    mTypes = intent.getIntArrayExtra(EXTRA_DETAIL_TYPES);\n    mValues = intent.getDoubleArrayExtra(EXTRA_DETAIL_VALUES);\n\n    mTitleView = (TextView) findViewById(R.id.name);\n    mTitleView.setText(mTitle);\n    ((TextView) findViewById(R.id.battery_percentage)).setText(String.format(\"%d%%\", percentage));\n\n    mTwoButtonsPanel = (ViewGroup) findViewById(R.id.two_buttons_panel);\n    mForceStopButton = (Button) findViewById(R.id.left_button);\n    mReportButton = (Button) findViewById(R.id.right_button);\n    mForceStopButton.setEnabled(false);\n\n    ImageView gaugeImage = (ImageView) findViewById(R.id.gauge);\n    mGauge = new PercentageBar();\n    mGauge.percent = gaugeValue;\n    mGauge.bar = getResources().getDrawable(R.drawable.app_gauge);\n    gaugeImage.setImageDrawable(mGauge);\n\n    ImageView iconImage = (ImageView) findViewById(R.id.icon);\n    iconImage.setImageDrawable(mAppIcon);\n\n    mDetailsParent = (ViewGroup) findViewById(R.id.details);\n    mControlsParent = (ViewGroup) findViewById(R.id.controls);\n\n    fillDetailsSection();\n    fillPackagesSection(mUid);\n    fillControlsSection(mUid);\n\n    if (mUid >= Process.FIRST_APPLICATION_UID) {\n      mForceStopButton.setText(R.string.force_stop);\n      mForceStopButton.setTag(ACTION_FORCE_STOP);\n      mForceStopButton.setOnClickListener(this);\n      mReportButton.setText(com.android.internal.R.string.report);\n      mReportButton.setTag(ACTION_REPORT);\n      mReportButton.setOnClickListener(this);\n\n      // check if error reporting is enabled in secure settings\n      int enabled =\n          Settings.Secure.getInt(getContentResolver(), Settings.Secure.SEND_ACTION_APP_ERROR, 0);\n      if (enabled != 0) {\n        if (mPackages != null && mPackages.length > 0) {\n          try {\n            mApp = getPackageManager().getApplicationInfo(mPackages[0], 0);\n            mInstaller =\n                ApplicationErrorReport.getErrorReportReceiver(this, mPackages[0], mApp.flags);\n          } catch (NameNotFoundException e) {\n          }\n        }\n        mReportButton.setEnabled(mInstaller != null);\n      } else {\n        mTwoButtonsPanel.setVisibility(View.GONE);\n      }\n    } else {\n      mTwoButtonsPanel.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 413, "initialization": ["ApplicationInfo applicationInfo = List<ApplicationInfo>.get(int)"], "initializationStart": [120], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["applicationInfo.loadLabel(PackageManager)"], "configurationStart": [368], "configurationEnd": [386], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 494, "focalAPIEnd": 511, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadDescription(PackageManager)"], "useStart": [472, 621], "useEnd": [512, 645], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JoeBorn/sonr/tree/master/src/com/sonrlabs/test/sonr/SonrActivity.java", "rawCode": "    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n      ApplicationInfo info = appInformation.get(position);\n\n      if (convertView == null) {\n        convertView = mInflater.inflate(R.layout.manage_applications_item, null);\n      }\n\n      TextView name = (TextView) convertView.findViewById(R.id.app_name);\n      name.setText(info.loadLabel(pm));\n\n      ImageView icon = (ImageView) convertView.findViewById(R.id.app_icon);\n      icon.setImageDrawable(info.loadIcon(pm));\n      TextView description = (TextView) convertView.findViewById(R.id.app_size);\n      description.setText(info.loadDescription(pm));\n\n      convertView.setBackgroundColor(\n          currentlySelectedApplicationInfoIndex == position ? 0xFF666666 : 0xFF444444);\n\n      return convertView;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 414, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 96, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/content/pm/ComponentInfo.java", "rawCode": "  /** @hide */\n  @Override\n  protected Drawable loadDefaultIcon(PackageManager pm) {\n    return applicationInfo.loadIcon(pm);\n  }\n"}, {"dataset": "loadIcon", "exampleID": 415, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 84, "focalAPIEnd": 103, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/munjeni/miui_sony_xperia/tree/master/miui/src/frameworks/base/core/java/android/app/ApplicationPackageManager.java", "rawCode": "  @Override\n  public Drawable getApplicationIcon(ApplicationInfo info) {\n    return info.loadIcon(this);\n  }\n"}, {"dataset": "loadIcon", "exampleID": 416, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NextersAppFactory/WaterHeart/tree/master/JakeWharton-ActionBarSherlock-5a15d92/actionbarsherlock-samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 417, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 96, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/content/pm/ComponentInfo.java", "rawCode": "  /** @hide */\n  @Override\n  protected Drawable loadDefaultIcon(PackageManager pm) {\n    return applicationInfo.loadIcon(pm);\n  }\n"}, {"dataset": "loadIcon", "exampleID": 418, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [1124, 1175], "initializationEnd": [1143, 1213], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 69, "tryExpressionEnd": 73, "tryBlockStart": 69, "tryBlockEnd": 1964, "catchExpressionStart": 1888, "catchExpressionEnd": 1908, "catchBlockStart": 1888, "catchBlockEnd": 1964, "exceptionHandlingCallStart": [1916, 1949], "exceptionHandlingCallEnd": [1941, 1957], "configuration": ["pm.getApplicationInfo(*,int)"], "configurationStart": [1175], "configurationEnd": [1213], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1300, "focalAPIEnd": 1316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIcon(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [1245, 1344], "useEnd": [1317, 1361], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/munjeni/miui_sony_xperia/tree/master/miui/src/frameworks/base/packages/VpnDialogs/src/com/android/vpndialogs/ManageDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    try {\n      mConfig = getIntent().getParcelableExtra(\"config\");\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      View view = View.inflate(this, R.layout.manage, null);\n      if (mConfig.session != null) {\n        ((TextView) view.findViewById(R.id.session)).setText(mConfig.session);\n      }\n      mDuration = (TextView) view.findViewById(R.id.duration);\n      mDataTransmitted = (TextView) view.findViewById(R.id.data_transmitted);\n      mDataReceived = (TextView) view.findViewById(R.id.data_received);\n\n      if (mConfig.user.equals(VpnConfig.LEGACY_VPN)) {\n        mDialog =\n            new AlertDialog.Builder(this)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .setTitle(R.string.legacy_title)\n                .setView(view)\n                .setNeutralButton(R.string.disconnect, this)\n                .setNegativeButton(android.R.string.cancel, this)\n                .create();\n      } else {\n        PackageManager pm = getPackageManager();\n        ApplicationInfo app = pm.getApplicationInfo(mConfig.user, 0);\n        mDialog =\n            new AlertDialog.Builder(this)\n                .setIcon(app.loadIcon(pm))\n                .setTitle(app.loadLabel(pm))\n                .setView(view)\n                .setNeutralButton(R.string.disconnect, this)\n                .setNegativeButton(android.R.string.cancel, this)\n                .create();\n      }\n\n      if (mConfig.configureIntent != null) {\n        mDialog.setButton(DialogInterface.BUTTON_POSITIVE, getText(R.string.configure), this);\n      }\n      mDialog.setOnDismissListener(this);\n      mDialog.show();\n\n      if (mHandler == null) {\n        mHandler = new Handler(this);\n      }\n      mHandler.sendEmptyMessage(0);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 419, "initialization": ["PackageManager pm = getPackageManager()"], "initializationStart": [495], "initializationEnd": [514], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [567], "configurationEnd": [617], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 903, "focalAPIEnd": 933, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    Intent intent = getIntent();\n    mDevice = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\n    mAccessory = (UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY);\n    mPendingIntent = (PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT);\n    mUid = intent.getIntExtra(\"uid\", 0);\n    mPackageName = intent.getStringExtra(\"package\");\n\n    PackageManager packageManager = getPackageManager();\n    ApplicationInfo aInfo;\n    try {\n      aInfo = packageManager.getApplicationInfo(mPackageName, 0);\n    } catch (PackageManager.NameNotFoundException e) {\n      Log.e(TAG, \"unable to look up package name\", e);\n      finish();\n      return;\n    }\n    String appName = aInfo.loadLabel(packageManager).toString();\n\n    final AlertController.AlertParams ap = mAlertParams;\n    ap.mIcon = aInfo.loadIcon(packageManager);\n    ap.mTitle = appName;\n    if (mDevice == null) {\n      ap.mMessage = getString(R.string.usb_accessory_permission_prompt, appName);\n      mDisconnectedReceiver = new UsbDisconnectedReceiver(this, mAccessory);\n    } else {\n      ap.mMessage = getString(R.string.usb_device_permission_prompt, appName);\n      mDisconnectedReceiver = new UsbDisconnectedReceiver(this, mDevice);\n    }\n    ap.mPositiveButtonText = getString(android.R.string.ok);\n    ap.mNegativeButtonText = getString(android.R.string.cancel);\n    ap.mPositiveButtonListener = this;\n    ap.mNegativeButtonListener = this;\n\n    // add \"always use\" checkbox\n    LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    ap.mView = inflater.inflate(com.android.internal.R.layout.always_use_checkbox, null);\n    mAlwaysUse = (CheckBox) ap.mView.findViewById(com.android.internal.R.id.alwaysUse);\n    if (mDevice == null) {\n      mAlwaysUse.setText(R.string.always_use_accessory);\n    } else {\n      mAlwaysUse.setText(R.string.always_use_device);\n    }\n    mAlwaysUse.setOnCheckedChangeListener(this);\n    mClearDefaultHint =\n        (TextView) ap.mView.findViewById(com.android.internal.R.id.clearDefaultHint);\n    mClearDefaultHint.setVisibility(View.GONE);\n\n    setupAlert();\n  }\n"}, {"dataset": "loadIcon", "exampleID": 420, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/KeiferMiller/InkBar/tree/master/lib/JakeWharton-ActionBarSherlock-736ef08/samples/demos/src/com/actionbarsherlock/sample/demos/app/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 421, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/javroch/android_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 422, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/actionbarsherlock/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 423, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Nirespire/Rogo/tree/master/ActionBarSherlock/actionbarsherlock-samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 424, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [445, 529], "initializationEnd": [473, 563], "hasTryCatch": 1, "exceptionType": "RuntimeException", "exceptionHandlingCall": ["ParcelFileDescriptor.close()"], "tryExpressionStart": 511, "tryExpressionEnd": 515, "tryBlockStart": 511, "tryBlockEnd": 617, "catchExpressionStart": 2856, "catchExpressionEnd": 2883, "catchBlockStart": 2856, "catchBlockEnd": 2995, "exceptionHandlingCallStart": [2905], "exceptionHandlingCallEnd": [2916], "configuration": ["pm.getApplicationInfo(String,int)", "pm.resolveService(Intent,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [529, 871, 1200], "configurationEnd": [563, 899, 1217], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1302, "focalAPIEnd": 1318, "followUpCheck": "icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0", "checkType": "IF", "followUpCheckExpressionStart": 1350, "followUpCheckExpressionEnd": 1416, "followUpCheckBlockStart": 1350, "followUpCheckBlockEnd": 1931, "use": ["icon.setBounds(int,int,int,int)", "icon.draw(Canvas)"], "useStart": [1731, 1887], "useEnd": [1766, 1899], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/services/java/com/android/server/connectivity/Vpn.java", "rawCode": "  /**\n   * Establish a VPN network and return the file descriptor of the VPN interface. This methods\n   * returns {@code null} if the application is revoked or not prepared.\n   *\n   * @param config The parameters to configure the network.\n   * @return The file descriptor of the VPN interface.\n   */\n  public synchronized ParcelFileDescriptor establish(VpnConfig config) {\n    // Check if the caller is already prepared.\n    PackageManager pm = mContext.getPackageManager();\n    ApplicationInfo app = null;\n    try {\n      app = pm.getApplicationInfo(mPackage, 0);\n    } catch (Exception e) {\n      return null;\n    }\n    if (Binder.getCallingUid() != app.uid) {\n      return null;\n    }\n\n    // Check if the service is properly declared.\n    Intent intent = new Intent(VpnConfig.SERVICE_INTERFACE);\n    intent.setClassName(mPackage, config.user);\n    ResolveInfo info = pm.resolveService(intent, 0);\n    if (info == null) {\n      throw new SecurityException(\"Cannot find \" + config.user);\n    }\n    if (!BIND_VPN_SERVICE.equals(info.serviceInfo.permission)) {\n      throw new SecurityException(config.user + \" does not require \" + BIND_VPN_SERVICE);\n    }\n\n    // Load the label.\n    String label = app.loadLabel(pm).toString();\n\n    // Load the icon and convert it into a bitmap.\n    Drawable icon = app.loadIcon(pm);\n    Bitmap bitmap = null;\n    if (icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0) {\n      int width =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_width);\n      int height =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_height);\n      icon.setBounds(0, 0, width, height);\n      bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n      Canvas c = new Canvas(bitmap);\n      icon.draw(c);\n      c.setBitmap(null);\n    }\n\n    // Configure the interface. Abort if any of these steps fails.\n    ParcelFileDescriptor tun = ParcelFileDescriptor.adoptFd(jniCreate(config.mtu));\n    try {\n      String interfaze = jniGetName(tun.getFd());\n      if (jniSetAddresses(interfaze, config.addresses) < 1) {\n        throw new IllegalArgumentException(\"At least one address must be specified\");\n      }\n      if (config.routes != null) {\n        jniSetRoutes(interfaze, config.routes);\n      }\n      Connection connection = new Connection();\n      if (!mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)) {\n        throw new IllegalStateException(\"Cannot bind \" + config.user);\n      }\n      if (mConnection != null) {\n        mContext.unbindService(mConnection);\n      }\n      if (mInterface != null && !mInterface.equals(interfaze)) {\n        jniReset(mInterface);\n      }\n      mConnection = connection;\n      mInterface = interfaze;\n    } catch (RuntimeException e) {\n      try {\n        tun.close();\n      } catch (Exception ex) {\n        // ignore\n      }\n      throw e;\n    }\n    Log.i(TAG, \"Established by \" + config.user + \" on \" + mInterface);\n\n    // Fill more values.\n    config.user = mPackage;\n    config.interfaze = mInterface;\n\n    // Override DNS servers and show the notification.\n    long identity = Binder.clearCallingIdentity();\n    mCallback.override(config.dnsServers, config.searchDomains);\n    showNotification(config, label, bitmap);\n    Binder.restoreCallingIdentity(identity);\n    return tun;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 425, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [400, 449], "initializationEnd": [419, 483], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 68, "tryExpressionEnd": 72, "tryBlockStart": 68, "tryBlockEnd": 1512, "catchExpressionStart": 1436, "catchExpressionEnd": 1456, "catchBlockStart": 1436, "catchBlockEnd": 1512, "exceptionHandlingCallStart": [1464, 1497], "exceptionHandlingCallEnd": [1489, 1505], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [449], "configurationEnd": [483], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 614, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [554, 729], "useEnd": [631, 746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    try {\n      mPackage = getCallingPackage();\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      if (mService.prepareVpn(mPackage, null)) {\n        setResult(RESULT_OK);\n        finish();\n        return;\n      }\n\n      PackageManager pm = getPackageManager();\n      ApplicationInfo app = pm.getApplicationInfo(mPackage, 0);\n\n      View view = View.inflate(this, R.layout.confirm, null);\n      ((ImageView) view.findViewById(R.id.icon)).setImageDrawable(app.loadIcon(pm));\n      ((TextView) view.findViewById(R.id.prompt))\n          .setText(getString(R.string.prompt, app.loadLabel(pm)));\n      ((CompoundButton) view.findViewById(R.id.check)).setOnCheckedChangeListener(this);\n\n      mAlertParams.mIconAttrId = android.R.attr.alertDialogIcon;\n      mAlertParams.mTitle = getText(android.R.string.dialog_alert_title);\n      mAlertParams.mPositiveButtonText = getText(android.R.string.ok);\n      mAlertParams.mPositiveButtonListener = this;\n      mAlertParams.mNegativeButtonText = getText(android.R.string.cancel);\n      mAlertParams.mNegativeButtonListener = this;\n      mAlertParams.mView = view;\n      setupAlert();\n\n      getWindow().setCloseOnTouchOutside(false);\n      mButton = mAlert.getButton(DialogInterface.BUTTON_POSITIVE);\n      mButton.setEnabled(false);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 426, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 93, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/widget/AppSecurityPermissions.java", "rawCode": "    public Drawable loadGroupIcon(PackageManager pm) {\n      if (icon != 0) {\n        return loadIcon(pm);\n      } else {\n        ApplicationInfo appInfo;\n        try {\n          appInfo = pm.getApplicationInfo(packageName, 0);\n          return appInfo.loadIcon(pm);\n        } catch (NameNotFoundException e) {\n        }\n      }\n      return null;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 427, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamSourcery/packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 428, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [1271, 1322], "initializationEnd": [1290, 1360], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 216, "tryExpressionEnd": 220, "tryBlockStart": 216, "tryBlockEnd": 2111, "catchExpressionStart": 2035, "catchExpressionEnd": 2055, "catchBlockStart": 2035, "catchBlockEnd": 2111, "exceptionHandlingCallStart": [2063, 2096], "exceptionHandlingCallEnd": [2088, 2104], "configuration": ["pm.getApplicationInfo(*,int)"], "configurationStart": [1322], "configurationEnd": [1360], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1447, "focalAPIEnd": 1463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIcon(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [1392, 1491], "useEnd": [1464, 1508], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ManageDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    if (getCallingPackage() != null) {\n      Log.e(TAG, getCallingPackage() + \" cannot start this activity\");\n      finish();\n      return;\n    }\n\n    try {\n      mConfig = getIntent().getParcelableExtra(\"config\");\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      View view = View.inflate(this, R.layout.manage, null);\n      if (mConfig.session != null) {\n        ((TextView) view.findViewById(R.id.session)).setText(mConfig.session);\n      }\n      mDuration = (TextView) view.findViewById(R.id.duration);\n      mDataTransmitted = (TextView) view.findViewById(R.id.data_transmitted);\n      mDataReceived = (TextView) view.findViewById(R.id.data_received);\n\n      if (mConfig.user.equals(VpnConfig.LEGACY_VPN)) {\n        mDialog =\n            new AlertDialog.Builder(this)\n                .setIcon(android.R.drawable.ic_dialog_info)\n                .setTitle(R.string.legacy_title)\n                .setView(view)\n                .setNeutralButton(R.string.disconnect, this)\n                .setNegativeButton(android.R.string.cancel, this)\n                .create();\n      } else {\n        PackageManager pm = getPackageManager();\n        ApplicationInfo app = pm.getApplicationInfo(mConfig.user, 0);\n        mDialog =\n            new AlertDialog.Builder(this)\n                .setIcon(app.loadIcon(pm))\n                .setTitle(app.loadLabel(pm))\n                .setView(view)\n                .setNeutralButton(R.string.disconnect, this)\n                .setNegativeButton(android.R.string.cancel, this)\n                .create();\n      }\n\n      if (mConfig.configureIntent != null) {\n        mDialog.setButton(DialogInterface.BUTTON_POSITIVE, getText(R.string.configure), this);\n      }\n      mDialog.setOnDismissListener(this);\n      mDialog.show();\n\n      if (mHandler == null) {\n        mHandler = new Handler(this);\n      }\n      mHandler.sendEmptyMessage(0);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 429, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 430, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DavidTPate/diablo3_builder/tree/master/d3_android/libs/ActionBarSherlock/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 431, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/javroch/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 432, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getPackageInfo(String,int)"], "initializationStart": [725, 775], "initializationEnd": [744, 808], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackageInfo(String,int)"], "configurationStart": [775], "configurationEnd": [808], "guardCondition": "applicationInfo!=null", "guardType": "IF {", "guardExpressionStart": 834, "guardExpressionEnd": 849, "guardBlockStart": 834, "guardBlockEnd": 899, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 873, "focalAPIEnd": 888, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1074, "followUpCheckExpressionEnd": 1095, "followUpCheckBlockStart": 1074, "followUpCheckBlockEnd": 1166, "use": ["ImageView.setImageDrawable(icon)"], "useStart": [2164], "useEnd": [2200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ConicalRom/platform_packages_apps_settings/tree/master/src/com/android/settings/fuelgauge/PowerUsageDetail.java", "rawCode": "  private void createDetails() {\n    final Intent intent = getIntent();\n    mTitle = intent.getStringExtra(EXTRA_TITLE);\n    final int percentage = intent.getIntExtra(EXTRA_PERCENT, 1);\n    final int gaugeValue = intent.getIntExtra(EXTRA_GAUGE, 1);\n    mUsageSince = intent.getIntExtra(EXTRA_USAGE_SINCE, USAGE_SINCE_UNPLUGGED);\n    mUid = intent.getIntExtra(EXTRA_UID, 0);\n    mDrainType = (DrainType) intent.getSerializableExtra(EXTRA_DRAIN_TYPE);\n    mNoCoverage = intent.getDoubleExtra(EXTRA_NO_COVERAGE, 0);\n    String iconPackage = intent.getStringExtra(EXTRA_ICON_PACKAGE);\n    int iconId = intent.getIntExtra(EXTRA_ICON_ID, 0);\n    if (!TextUtils.isEmpty(iconPackage)) {\n      try {\n        final PackageManager pm = getPackageManager();\n        ApplicationInfo ai = pm.getPackageInfo(iconPackage, 0).applicationInfo;\n        if (ai != null) {\n          mAppIcon = ai.loadIcon(pm);\n        }\n      } catch (NameNotFoundException nnfe) {\n        // Use default icon\n      }\n    } else if (iconId != 0) {\n      mAppIcon = getResources().getDrawable(iconId);\n    }\n    if (mAppIcon == null) {\n      mAppIcon = getPackageManager().getDefaultActivityIcon();\n    }\n\n    // Set the description\n    String summary = getDescriptionForDrainType();\n    ((TextView) findViewById(R.id.summary)).setText(summary);\n\n    mTypes = intent.getIntArrayExtra(EXTRA_DETAIL_TYPES);\n    mValues = intent.getDoubleArrayExtra(EXTRA_DETAIL_VALUES);\n\n    mTitleView = (TextView) findViewById(R.id.name);\n    mTitleView.setText(mTitle);\n    ((TextView) findViewById(R.id.battery_percentage)).setText(String.format(\"%d%%\", percentage));\n\n    mTwoButtonsPanel = (ViewGroup) findViewById(R.id.two_buttons_panel);\n    mForceStopButton = (Button) findViewById(R.id.left_button);\n    mReportButton = (Button) findViewById(R.id.right_button);\n    mForceStopButton.setEnabled(false);\n\n    ImageView gaugeImage = (ImageView) findViewById(R.id.gauge);\n    mGauge = new PercentageBar();\n    mGauge.percent = gaugeValue;\n    mGauge.bar = getResources().getDrawable(R.drawable.app_gauge);\n    gaugeImage.setImageDrawable(mGauge);\n\n    ImageView iconImage = (ImageView) findViewById(R.id.icon);\n    iconImage.setImageDrawable(mAppIcon);\n\n    mDetailsParent = (ViewGroup) findViewById(R.id.details);\n    mControlsParent = (ViewGroup) findViewById(R.id.controls);\n\n    fillDetailsSection();\n    fillPackagesSection(mUid);\n    fillControlsSection(mUid);\n\n    if (mUid >= Process.FIRST_APPLICATION_UID) {\n      mForceStopButton.setText(R.string.force_stop);\n      mForceStopButton.setTag(ACTION_FORCE_STOP);\n      mForceStopButton.setOnClickListener(this);\n      mReportButton.setText(com.android.internal.R.string.report);\n      mReportButton.setTag(ACTION_REPORT);\n      mReportButton.setOnClickListener(this);\n\n      // check if error reporting is enabled in secure settings\n      int enabled =\n          Settings.Secure.getInt(getContentResolver(), Settings.Secure.SEND_ACTION_APP_ERROR, 0);\n      if (enabled != 0) {\n        if (mPackages != null && mPackages.length > 0) {\n          try {\n            mApp = getPackageManager().getApplicationInfo(mPackages[0], 0);\n            mInstaller =\n                ApplicationErrorReport.getErrorReportReceiver(this, mPackages[0], mApp.flags);\n          } catch (NameNotFoundException e) {\n          }\n        }\n        mReportButton.setEnabled(mInstaller != null);\n      } else {\n        mTwoButtonsPanel.setVisibility(View.GONE);\n      }\n    } else {\n      mTwoButtonsPanel.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 433, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [95], "initializationEnd": [122], "hasTryCatch": 1, "exceptionType": "OutOfMemoryError", "exceptionHandlingCall": ["toString()", "e(String,*)"], "tryExpressionStart": 373, "tryExpressionEnd": 377, "tryBlockStart": 373, "tryBlockEnd": 498, "catchExpressionStart": 424, "catchExpressionEnd": 451, "catchBlockStart": 424, "catchBlockEnd": 498, "exceptionHandlingCallStart": [476, 461], "exceptionHandlingCallEnd": [488, 489], "configuration": ["pm.getPackageArchiveInfo(String,*)"], "configurationStart": [147], "configurationEnd": [211], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 394, "focalAPIEnd": 414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xunroudabing/DaBing/tree/master/WeiXinEmoj/src/com/dabing/emoj/utils/Util.java", "rawCode": "  public static Drawable getApkIcon(Context context, String apkPath) {\n    PackageManager pm = context.getPackageManager();\n    PackageInfo info = pm.getPackageArchiveInfo(apkPath, PackageManager.GET_ACTIVITIES);\n    if (info != null) {\n      ApplicationInfo appInfo = info.applicationInfo;\n      appInfo.sourceDir = apkPath;\n      appInfo.publicSourceDir = apkPath;\n      try {\n        return appInfo.loadIcon(pm);\n      } catch (OutOfMemoryError e) {\n        Log.e(LOG_TAG, e.toString());\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 434, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = List<ApplicationInfo>.get(int)"], "initializationStart": [205, 493], "initializationEnd": [232, 508], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getInstalledApplications(int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [381, 563], "configurationEnd": [411, 584], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 663, "focalAPIEnd": 683, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIcon(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [651, 809], "useEnd": [684, 830], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/unidevel/android/tree/master/FindMyApp/src/com/unidevel/findmyapp/Util.java", "rawCode": "  public static List<AppInfo>[] getAllApps(Context context) {\n    ArrayList<AppInfo> sysApps = new ArrayList<AppInfo>();\n    ArrayList<AppInfo> userApps = new ArrayList<AppInfo>();\n    PackageManager pm = context.getPackageManager();\n\n    // List<PackageInfo> packages =\n    // pm.getInstalledPackages(PackageManager.GET_UNINSTALLED_PACKAGES);\n    List<ApplicationInfo> appinfos = pm.getInstalledApplications(0);\n    for (int x = 0; x < appinfos.size(); x++) {\n      ApplicationInfo appInfo = appinfos.get(x);\n      AppInfo app = new AppInfo();\n      app.setName(appInfo.loadLabel(pm).toString());\n      app.setPackageName(appInfo.packageName);\n      app.setIcon(appInfo.loadIcon(pm));\n      app.setPath(appInfo.publicSourceDir);\n      app.setDataDir(appInfo.dataDir);\n      Log.i(\n          \"App\",\n          appInfo.loadLabel(pm)\n              + \",\"\n              + appInfo.packageName\n              + \",\"\n              + appInfo.publicSourceDir\n              + \",\"\n              + appInfo.dataDir);\n      if (appInfo.publicSourceDir != null && appInfo.publicSourceDir.startsWith(\"/system\")) {\n        sysApps.add(app);\n      } else {\n        userApps.add(app);\n      }\n    }\n    Collections.sort(sysApps);\n    Collections.sort(userApps);\n\n    @SuppressWarnings(\"unchecked\")\n    List<AppInfo>[] apps = (List<AppInfo>[]) new ArrayList[2];\n    apps[0] = sysApps;\n    apps[1] = userApps;\n    return apps;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 435, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 436, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 437, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aommm/bibbla/tree/master/Libraries/ActionBarSherlock/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 438, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RonnieVandenPoel/SourceFish/tree/master/JakeWharton-ActionBarSherlock-e5c2d1c/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 439, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iceandfire/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 440, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [224], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1858, 2028], "configurationEnd": [1883, 2069], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 2147, "focalAPIEnd": 2164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidTh3ory/packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Build {@link UidDetail} object, blocking until all {@link Drawable} lookup is finished. */\n  private UidDetail buildUidDetail(int uid) {\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label =\n            res.getString(\n                UserManager.supportsMultipleUsers()\n                    ? R.string.data_usage_uninstalled_apps_users\n                    : R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n    }\n\n    // Handle keys that are actually user handles\n    if (uid <= -2000) {\n      final int userHandle = (-uid) - 2000;\n      final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n      final UserInfo info = um.getUserInfo(userHandle);\n      if (info != null) {\n        detail.label = res.getString(R.string.running_process_item_user_label, info.name);\n        detail.icon = UserUtils.getUserIcon(um, info, res);\n        return detail;\n      }\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 441, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [265], "initializationEnd": [292], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackageArchiveInfo(String,*)"], "configurationStart": [485], "configurationEnd": [546], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 886, "focalAPIEnd": 904, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openintents/filemanager/tree/master/FileManager/src/org/openintents/filemanager/ThumbnailLoader.java", "rawCode": "  /** Return the Drawable that is associated with a specific mime type for the VIEW action. */\n  private Drawable getDrawableForMimetype(FileHolder holder, Context context) {\n    if (holder.getMimeType() == null) {\n      return null;\n    }\n\n    PackageManager pm = context.getPackageManager();\n\n    // Returns the icon packaged in files with the .apk MIME type.\n    if (holder.getMimeType().equals(MIME_APK)) {\n      String path = holder.getFile().getPath();\n      PackageInfo pInfo = pm.getPackageArchiveInfo(path, PackageManager.GET_ACTIVITIES);\n      if (pInfo != null) {\n        ApplicationInfo aInfo = pInfo.applicationInfo;\n\n        // Bug in SDK versions >= 8. See here:\n        // http://code.google.com/p/android/issues/detail?id=9151\n        if (Build.VERSION.SDK_INT >= 8) {\n          aInfo.sourceDir = path;\n          aInfo.publicSourceDir = path;\n        }\n\n        return aInfo.loadIcon(pm);\n      }\n    }\n\n    int iconResource = MimeTypes.getInstance().getIcon(holder.getMimeType());\n    Drawable ret = null;\n    if (iconResource > 0) {\n      try {\n        ret = pm.getResourcesForApplication(context.getPackageName()).getDrawable(iconResource);\n      } catch (NotFoundException | NameNotFoundException e) {\n      }\n    }\n\n    if (ret != null) {\n      return ret;\n    }\n\n    if (\"*/*\".equals(holder.getMimeType())) {\n      return null;\n    }\n\n    Uri data = FileUtils.getUri(holder.getFile());\n\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    // intent.setType(mimetype);\n\n    // Let's probe the intent exactly in the same way as the VIEW action\n    // is performed in FileManagerActivity.openFile(..)\n    intent.setDataAndType(data, holder.getMimeType());\n\n    final List<ResolveInfo> lri =\n        pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);\n\n    if (lri != null && !lri.isEmpty()) {\n      // Log.i(TAG, \"lri.size()\" + lri.size());\n\n      // Actually first element should be \"best match\",\n      // but it seems that more recently installed applications\n      // could be even better match.\n      int index = mUseBestMatch ? 0 : lri.size() - 1;\n\n      final ResolveInfo ri = lri.get(index);\n      return ri.loadIcon(pm);\n    }\n\n    return null;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 442, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Deodexed/android_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 443, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TrasUI/old_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 444, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [445, 529], "initializationEnd": [473, 563], "hasTryCatch": 1, "exceptionType": "RuntimeException", "exceptionHandlingCall": ["updateState(*,String)", "closeQuietly(ParcelFileDescriptor)"], "tryExpressionStart": 511, "tryExpressionEnd": 515, "tryBlockStart": 511, "tryBlockEnd": 617, "catchExpressionStart": 2914, "catchExpressionEnd": 2941, "catchBlockStart": 2914, "catchBlockEnd": 3050, "exceptionHandlingCallStart": [2949, 3003], "exceptionHandlingCallEnd": [2995, 3028], "configuration": ["pm.getApplicationInfo(String,int)", "pm.resolveService(Intent,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [529, 871, 1200], "configurationEnd": [563, 899, 1217], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1302, "focalAPIEnd": 1318, "followUpCheck": "icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0", "checkType": "IF", "followUpCheckExpressionStart": 1350, "followUpCheckExpressionEnd": 1416, "followUpCheckBlockStart": 1350, "followUpCheckBlockEnd": 1931, "use": ["icon.setBounds(int,int,int,int)", "icon.draw(Canvas)"], "useStart": [1731, 1887], "useEnd": [1766, 1899], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/services/java/com/android/server/connectivity/Vpn.java", "rawCode": "  /**\n   * Establish a VPN network and return the file descriptor of the VPN interface. This methods\n   * returns {@code null} if the application is revoked or not prepared.\n   *\n   * @param config The parameters to configure the network.\n   * @return The file descriptor of the VPN interface.\n   */\n  public synchronized ParcelFileDescriptor establish(VpnConfig config) {\n    // Check if the caller is already prepared.\n    PackageManager pm = mContext.getPackageManager();\n    ApplicationInfo app = null;\n    try {\n      app = pm.getApplicationInfo(mPackage, 0);\n    } catch (Exception e) {\n      return null;\n    }\n    if (Binder.getCallingUid() != app.uid) {\n      return null;\n    }\n\n    // Check if the service is properly declared.\n    Intent intent = new Intent(VpnConfig.SERVICE_INTERFACE);\n    intent.setClassName(mPackage, config.user);\n    ResolveInfo info = pm.resolveService(intent, 0);\n    if (info == null) {\n      throw new SecurityException(\"Cannot find \" + config.user);\n    }\n    if (!BIND_VPN_SERVICE.equals(info.serviceInfo.permission)) {\n      throw new SecurityException(config.user + \" does not require \" + BIND_VPN_SERVICE);\n    }\n\n    // Load the label.\n    String label = app.loadLabel(pm).toString();\n\n    // Load the icon and convert it into a bitmap.\n    Drawable icon = app.loadIcon(pm);\n    Bitmap bitmap = null;\n    if (icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0) {\n      int width =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_width);\n      int height =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_height);\n      icon.setBounds(0, 0, width, height);\n      bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n      Canvas c = new Canvas(bitmap);\n      icon.draw(c);\n      c.setBitmap(null);\n    }\n\n    // Configure the interface. Abort if any of these steps fails.\n    ParcelFileDescriptor tun = ParcelFileDescriptor.adoptFd(jniCreate(config.mtu));\n    try {\n      updateState(DetailedState.CONNECTING, \"establish\");\n      String interfaze = jniGetName(tun.getFd());\n      if (jniSetAddresses(interfaze, config.addresses) < 1) {\n        throw new IllegalArgumentException(\"At least one address must be specified\");\n      }\n      if (config.routes != null) {\n        jniSetRoutes(interfaze, config.routes);\n      }\n      Connection connection = new Connection();\n      if (!mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)) {\n        throw new IllegalStateException(\"Cannot bind \" + config.user);\n      }\n      if (mConnection != null) {\n        mContext.unbindService(mConnection);\n      }\n      if (mInterface != null && !mInterface.equals(interfaze)) {\n        jniReset(mInterface);\n      }\n      mConnection = connection;\n      mInterface = interfaze;\n    } catch (RuntimeException e) {\n      updateState(DetailedState.FAILED, \"establish\");\n      IoUtils.closeQuietly(tun);\n      throw e;\n    }\n    Log.i(TAG, \"Established by \" + config.user + \" on \" + mInterface);\n\n    // Fill more values.\n    config.user = mPackage;\n    config.interfaze = mInterface;\n\n    // Override DNS servers and show the notification.\n    final long token = Binder.clearCallingIdentity();\n    try {\n      mCallback.override(config.dnsServers, config.searchDomains);\n      showNotification(config, label, bitmap);\n    } finally {\n      Binder.restoreCallingIdentity(token);\n    }\n    // TODO: ensure that contract class eventually marks as connected\n    updateState(DetailedState.AUTHENTICATING, \"establish\");\n    return tun;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 445, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getPackageInfo(String,int)"], "initializationStart": [725, 775], "initializationEnd": [744, 808], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackageInfo(String,int)"], "configurationStart": [775], "configurationEnd": [808], "guardCondition": "applicationInfo!=null", "guardType": "IF {", "guardExpressionStart": 834, "guardExpressionEnd": 849, "guardBlockStart": 834, "guardBlockEnd": 899, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 873, "focalAPIEnd": 888, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1074, "followUpCheckExpressionEnd": 1095, "followUpCheckBlockStart": 1074, "followUpCheckBlockEnd": 1166, "use": ["ImageView.setImageDrawable(icon)"], "useStart": [2164], "useEnd": [2200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hectorxda/MySettings/tree/master/src/com/android/settings/fuelgauge/PowerUsageDetail.java", "rawCode": "  private void createDetails() {\n    final Intent intent = getIntent();\n    mTitle = intent.getStringExtra(EXTRA_TITLE);\n    final int percentage = intent.getIntExtra(EXTRA_PERCENT, 1);\n    final int gaugeValue = intent.getIntExtra(EXTRA_GAUGE, 1);\n    mUsageSince = intent.getIntExtra(EXTRA_USAGE_SINCE, USAGE_SINCE_UNPLUGGED);\n    mUid = intent.getIntExtra(EXTRA_UID, 0);\n    mDrainType = (DrainType) intent.getSerializableExtra(EXTRA_DRAIN_TYPE);\n    mNoCoverage = intent.getDoubleExtra(EXTRA_NO_COVERAGE, 0);\n    String iconPackage = intent.getStringExtra(EXTRA_ICON_PACKAGE);\n    int iconId = intent.getIntExtra(EXTRA_ICON_ID, 0);\n    if (!TextUtils.isEmpty(iconPackage)) {\n      try {\n        final PackageManager pm = getPackageManager();\n        ApplicationInfo ai = pm.getPackageInfo(iconPackage, 0).applicationInfo;\n        if (ai != null) {\n          mAppIcon = ai.loadIcon(pm);\n        }\n      } catch (NameNotFoundException nnfe) {\n        // Use default icon\n      }\n    } else if (iconId != 0) {\n      mAppIcon = getResources().getDrawable(iconId);\n    }\n    if (mAppIcon == null) {\n      mAppIcon = getPackageManager().getDefaultActivityIcon();\n    }\n\n    // Set the description\n    String summary = getDescriptionForDrainType();\n    ((TextView) findViewById(R.id.summary)).setText(summary);\n\n    mTypes = intent.getIntArrayExtra(EXTRA_DETAIL_TYPES);\n    mValues = intent.getDoubleArrayExtra(EXTRA_DETAIL_VALUES);\n\n    mTitleView = (TextView) findViewById(R.id.name);\n    mTitleView.setText(mTitle);\n    ((TextView) findViewById(R.id.battery_percentage)).setText(String.format(\"%d%%\", percentage));\n\n    mTwoButtonsPanel = (ViewGroup) findViewById(R.id.two_buttons_panel);\n    mForceStopButton = (Button) findViewById(R.id.left_button);\n    mReportButton = (Button) findViewById(R.id.right_button);\n    mForceStopButton.setEnabled(false);\n\n    ImageView gaugeImage = (ImageView) findViewById(R.id.gauge);\n    mGauge = new PercentageBar();\n    mGauge.percent = gaugeValue;\n    mGauge.bar = getResources().getDrawable(R.drawable.app_gauge);\n    gaugeImage.setImageDrawable(mGauge);\n\n    ImageView iconImage = (ImageView) findViewById(R.id.icon);\n    iconImage.setImageDrawable(mAppIcon);\n\n    mDetailsParent = (ViewGroup) findViewById(R.id.details);\n    mControlsParent = (ViewGroup) findViewById(R.id.controls);\n\n    fillDetailsSection();\n    fillPackagesSection(mUid);\n    fillControlsSection(mUid);\n\n    if (mUid >= Process.FIRST_APPLICATION_UID) {\n      mForceStopButton.setText(R.string.force_stop);\n      mForceStopButton.setTag(ACTION_FORCE_STOP);\n      mForceStopButton.setOnClickListener(this);\n      mReportButton.setText(com.android.internal.R.string.report);\n      mReportButton.setTag(ACTION_REPORT);\n      mReportButton.setOnClickListener(this);\n\n      // check if error reporting is enabled in secure settings\n      int enabled =\n          Settings.Secure.getInt(getContentResolver(), Settings.Secure.SEND_ACTION_APP_ERROR, 0);\n      if (enabled != 0) {\n        if (mPackages != null && mPackages.length > 0) {\n          try {\n            mApp = getPackageManager().getApplicationInfo(mPackages[0], 0);\n            mInstaller =\n                ApplicationErrorReport.getErrorReportReceiver(this, mPackages[0], mApp.flags);\n          } catch (NameNotFoundException e) {\n          }\n        }\n        mReportButton.setEnabled(mInstaller != null);\n      } else {\n        mTwoButtonsPanel.setVisibility(View.GONE);\n      }\n    } else {\n      mTwoButtonsPanel.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 446, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhaoyuqing/ActionBarSherlock/tree/master/actionbarsherlock-samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 447, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 90, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/app/ContextImpl.java", "rawCode": "    @Override\n    public Drawable getApplicationIcon(ApplicationInfo info) {\n      return info.loadIcon(this);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 448, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SuikoHero38/CraveParty/tree/master/FINAL/JakeWharton-ActionBarSherlock-e5c2d1c/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 449, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidTh3ory/packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 450, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [400, 449], "initializationEnd": [419, 483], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 68, "tryExpressionEnd": 72, "tryBlockStart": 68, "tryBlockEnd": 1483, "catchExpressionStart": 1407, "catchExpressionEnd": 1427, "catchBlockStart": 1407, "catchBlockEnd": 1483, "exceptionHandlingCallStart": [1435, 1468], "exceptionHandlingCallEnd": [1460, 1476], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [449], "configurationEnd": [483], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 614, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [554, 729], "useEnd": [631, 746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    try {\n      mPackage = getCallingPackage();\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      if (mService.prepareVpn(mPackage, null)) {\n        setResult(RESULT_OK);\n        finish();\n        return;\n      }\n\n      PackageManager pm = getPackageManager();\n      ApplicationInfo app = pm.getApplicationInfo(mPackage, 0);\n\n      View view = View.inflate(this, R.layout.confirm, null);\n      ((ImageView) view.findViewById(R.id.icon)).setImageDrawable(app.loadIcon(pm));\n      ((TextView) view.findViewById(R.id.prompt))\n          .setText(getString(R.string.prompt, app.loadLabel(pm)));\n      ((CompoundButton) view.findViewById(R.id.check)).setOnCheckedChangeListener(this);\n\n      mDialog =\n          new AlertDialog.Builder(this)\n              .setIconAttribute(android.R.attr.alertDialogIcon)\n              .setTitle(android.R.string.dialog_alert_title)\n              .setView(view)\n              .setPositiveButton(android.R.string.ok, this)\n              .setNegativeButton(android.R.string.cancel, this)\n              .setCancelable(false)\n              .create();\n      mDialog.setOnDismissListener(this);\n      mDialog.show();\n\n      mButton = mDialog.getButton(DialogInterface.BUTTON_POSITIVE);\n      mButton.setEnabled(false);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 451, "initialization": ["PackageManager pm = Activity.getPackageManager()"], "initializationStart": [238], "initializationEnd": [266], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["applicationInfo.loadLabel(PackageManager)"], "configurationStart": [293], "configurationEnd": [314], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 336, "focalAPIEnd": 356, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)"], "useStart": [362], "useEnd": [437], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/choclover/CustomPkgInstaller/tree/master/src/com/android/packageinstaller/PackageUtil.java", "rawCode": "  public static View initSnippetForInstalledApp(\n      Activity pContext, ApplicationInfo appInfo, int snippetId) {\n    View appSnippet = pContext.findViewById(snippetId);\n    String pkgName = appInfo.packageName;\n    PackageManager pm = pContext.getPackageManager();\n    CharSequence label = appInfo.loadLabel(pm);\n    Drawable icon = appInfo.loadIcon(pm);\n    ((ImageView) appSnippet.findViewById(R.id.app_icon)).setImageDrawable(icon);\n    ((TextView) appSnippet.findViewById(R.id.app_name)).setText(label);\n    return appSnippet;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 452, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhaoyuqing/SlidingMenu/tree/master/actionbarsherlock-samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 453, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 454, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [370], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1497, 1668], "configurationEnd": [1522, 1709], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1787, "focalAPIEnd": 1804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iceandfire/android_packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Resolve best descriptive label for the given UID. */\n  public synchronized UidDetail getUidDetail(int uid, boolean blocking) {\n    final UidDetail cached = mUidDetailCache.get(uid);\n    if (cached != null) {\n      return cached;\n    } else if (!blocking) {\n      return null;\n    }\n\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label = res.getString(R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    mUidDetailCache.put(uid, detail);\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 455, "initialization": ["PackageManager pm = getPackageManager()"], "initializationStart": [1075], "initializationEnd": [1094], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 216, "tryExpressionEnd": 220, "tryBlockStart": 216, "tryBlockEnd": 1942, "catchExpressionStart": 1866, "catchExpressionEnd": 1886, "catchBlockStart": 1866, "catchBlockEnd": 1942, "exceptionHandlingCallStart": [1894, 1927], "exceptionHandlingCallEnd": [1919, 1935], "configuration": ["pm.getApplicationInfo(*,int)"], "configurationStart": [1126], "configurationEnd": [1164], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1195, "focalAPIEnd": 1211, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ManageDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    if (getCallingPackage() != null) {\n      Log.e(TAG, getCallingPackage() + \" cannot start this activity\");\n      finish();\n      return;\n    }\n\n    try {\n      mConfig = getIntent().getParcelableExtra(\"config\");\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      View view = View.inflate(this, R.layout.manage, null);\n      if (mConfig.session != null) {\n        ((TextView) view.findViewById(R.id.session)).setText(mConfig.session);\n      }\n      mDuration = (TextView) view.findViewById(R.id.duration);\n      mDataTransmitted = (TextView) view.findViewById(R.id.data_transmitted);\n      mDataReceived = (TextView) view.findViewById(R.id.data_received);\n      mDataRowsHidden = true;\n\n      if (mConfig.user.equals(VpnConfig.LEGACY_VPN)) {\n        mAlertParams.mIconId = android.R.drawable.ic_dialog_info;\n        mAlertParams.mTitle = getText(R.string.legacy_title);\n      } else {\n        PackageManager pm = getPackageManager();\n        ApplicationInfo app = pm.getApplicationInfo(mConfig.user, 0);\n        mAlertParams.mIcon = app.loadIcon(pm);\n        mAlertParams.mTitle = app.loadLabel(pm);\n      }\n      if (mConfig.configureIntent != null) {\n        mAlertParams.mPositiveButtonText = getText(R.string.configure);\n        mAlertParams.mPositiveButtonListener = this;\n      }\n      mAlertParams.mNeutralButtonText = getText(R.string.disconnect);\n      mAlertParams.mNeutralButtonListener = this;\n      mAlertParams.mNegativeButtonText = getText(android.R.string.cancel);\n      mAlertParams.mNegativeButtonListener = this;\n      mAlertParams.mView = view;\n      setupAlert();\n\n      if (mHandler == null) {\n        mHandler = new Handler(this);\n      }\n      mHandler.sendEmptyMessage(0);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 456, "initialization": ["PackageManager pm = getPackageManager()"], "initializationStart": [492], "initializationEnd": [511], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [564], "configurationEnd": [614], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 900, "focalAPIEnd": 930, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    Intent intent = getIntent();\n    mAccessory = (UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY);\n    mDisconnectedReceiver = new UsbDisconnectedReceiver(this, mAccessory);\n    mPendingIntent = (PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT);\n    mUid = intent.getIntExtra(\"uid\", 0);\n    mPackageName = intent.getStringExtra(\"package\");\n\n    PackageManager packageManager = getPackageManager();\n    ApplicationInfo aInfo;\n    try {\n      aInfo = packageManager.getApplicationInfo(mPackageName, 0);\n    } catch (PackageManager.NameNotFoundException e) {\n      Log.e(TAG, \"unable to look up package name\", e);\n      finish();\n      return;\n    }\n    String appName = aInfo.loadLabel(packageManager).toString();\n\n    final AlertController.AlertParams ap = mAlertParams;\n    ap.mIcon = aInfo.loadIcon(packageManager);\n    ap.mTitle = appName;\n    ap.mMessage = getString(R.string.usb_accessory_permission_prompt, appName);\n    ap.mPositiveButtonText = getString(android.R.string.ok);\n    ap.mNegativeButtonText = getString(android.R.string.cancel);\n    ap.mPositiveButtonListener = this;\n    ap.mNegativeButtonListener = this;\n\n    // add \"always use\" checkbox\n    LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    ap.mView = inflater.inflate(com.android.internal.R.layout.always_use_checkbox, null);\n    mAlwaysUse = (CheckBox) ap.mView.findViewById(com.android.internal.R.id.alwaysUse);\n    mAlwaysUse.setText(R.string.always_use_accessory);\n    mAlwaysUse.setOnCheckedChangeListener(this);\n    mClearDefaultHint =\n        (TextView) ap.mView.findViewById(com.android.internal.R.id.clearDefaultHint);\n    mClearDefaultHint.setVisibility(View.GONE);\n\n    setupAlert();\n  }\n"}, {"dataset": "loadIcon", "exampleID": 457, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [400, 449], "initializationEnd": [419, 483], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 68, "tryExpressionEnd": 72, "tryBlockStart": 68, "tryBlockEnd": 1562, "catchExpressionStart": 1486, "catchExpressionEnd": 1506, "catchBlockStart": 1486, "catchBlockEnd": 1562, "exceptionHandlingCallStart": [1514, 1547], "exceptionHandlingCallEnd": [1539, 1555], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [449], "configurationEnd": [483], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 614, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [554, 729], "useEnd": [631, 746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    try {\n      mPackage = getCallingPackage();\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      if (mService.prepareVpn(mPackage, null)) {\n        setResult(RESULT_OK);\n        finish();\n        return;\n      }\n\n      PackageManager pm = getPackageManager();\n      ApplicationInfo app = pm.getApplicationInfo(mPackage, 0);\n\n      View view = View.inflate(this, R.layout.confirm, null);\n      ((ImageView) view.findViewById(R.id.icon)).setImageDrawable(app.loadIcon(pm));\n      ((TextView) view.findViewById(R.id.prompt))\n          .setText(getString(R.string.prompt, app.loadLabel(pm)));\n      ((CompoundButton) view.findViewById(R.id.check)).setOnCheckedChangeListener(this);\n\n      mAlertParams.mIconAttrId = android.R.attr.alertDialogIcon;\n      mAlertParams.mTitle = getText(android.R.string.dialog_alert_title);\n      mAlertParams.mPositiveButtonText = getText(android.R.string.ok);\n      mAlertParams.mPositiveButtonListener = this;\n      mAlertParams.mNegativeButtonText = getText(android.R.string.cancel);\n      mAlertParams.mNegativeButtonListener = this;\n      mAlertParams.mView = view;\n      setupAlert();\n\n      getWindow().setCloseOnTouchOutside(false);\n      mButton = mAlert.getButton(DialogInterface.BUTTON_POSITIVE);\n      mButton.setEnabled(false);\n      mButton.setFilterTouchesWhenObscured(true);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 458, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [224], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1858, 2028], "configurationEnd": [1883, 2069], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 2147, "focalAPIEnd": 2164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PerfectButter/platform_packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Build {@link UidDetail} object, blocking until all {@link Drawable} lookup is finished. */\n  private UidDetail buildUidDetail(int uid) {\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label =\n            res.getString(\n                UserManager.supportsMultipleUsers()\n                    ? R.string.data_usage_uninstalled_apps_users\n                    : R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n    }\n\n    // Handle keys that are actually user handles\n    if (uid <= -2000) {\n      final int userHandle = (-uid) - 2000;\n      final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n      final UserInfo info = um.getUserInfo(userHandle);\n      if (info != null) {\n        detail.label = res.getString(R.string.running_process_item_user_label, info.name);\n        detail.icon = UserUtils.getUserIcon(um, info, res);\n        return detail;\n      }\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 459, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ktoonsez/AOKP-I777/tree/master/packages/apps/Settings/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 460, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [445, 529], "initializationEnd": [473, 563], "hasTryCatch": 1, "exceptionType": "RuntimeException", "exceptionHandlingCall": ["ParcelFileDescriptor.close()"], "tryExpressionStart": 511, "tryExpressionEnd": 515, "tryBlockStart": 511, "tryBlockEnd": 617, "catchExpressionStart": 2856, "catchExpressionEnd": 2883, "catchBlockStart": 2856, "catchBlockEnd": 2995, "exceptionHandlingCallStart": [2905], "exceptionHandlingCallEnd": [2916], "configuration": ["pm.getApplicationInfo(String,int)", "pm.resolveService(Intent,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [529, 871, 1200], "configurationEnd": [563, 899, 1217], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1302, "focalAPIEnd": 1318, "followUpCheck": "icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0", "checkType": "IF", "followUpCheckExpressionStart": 1350, "followUpCheckExpressionEnd": 1416, "followUpCheckBlockStart": 1350, "followUpCheckBlockEnd": 1931, "use": ["icon.setBounds(int,int,int,int)", "icon.draw(Canvas)"], "useStart": [1731, 1887], "useEnd": [1766, 1899], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/services/java/com/android/server/connectivity/Vpn.java", "rawCode": "  /**\n   * Establish a VPN network and return the file descriptor of the VPN interface. This methods\n   * returns {@code null} if the application is revoked or not prepared.\n   *\n   * @param config The parameters to configure the network.\n   * @return The file descriptor of the VPN interface.\n   */\n  public synchronized ParcelFileDescriptor establish(VpnConfig config) {\n    // Check if the caller is already prepared.\n    PackageManager pm = mContext.getPackageManager();\n    ApplicationInfo app = null;\n    try {\n      app = pm.getApplicationInfo(mPackage, 0);\n    } catch (Exception e) {\n      return null;\n    }\n    if (Binder.getCallingUid() != app.uid) {\n      return null;\n    }\n\n    // Check if the service is properly declared.\n    Intent intent = new Intent(VpnConfig.SERVICE_INTERFACE);\n    intent.setClassName(mPackage, config.user);\n    ResolveInfo info = pm.resolveService(intent, 0);\n    if (info == null) {\n      throw new SecurityException(\"Cannot find \" + config.user);\n    }\n    if (!BIND_VPN_SERVICE.equals(info.serviceInfo.permission)) {\n      throw new SecurityException(config.user + \" does not require \" + BIND_VPN_SERVICE);\n    }\n\n    // Load the label.\n    String label = app.loadLabel(pm).toString();\n\n    // Load the icon and convert it into a bitmap.\n    Drawable icon = app.loadIcon(pm);\n    Bitmap bitmap = null;\n    if (icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0) {\n      int width =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_width);\n      int height =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_height);\n      icon.setBounds(0, 0, width, height);\n      bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n      Canvas c = new Canvas(bitmap);\n      icon.draw(c);\n      c.setBitmap(null);\n    }\n\n    // Configure the interface. Abort if any of these steps fails.\n    ParcelFileDescriptor tun = ParcelFileDescriptor.adoptFd(jniCreate(config.mtu));\n    try {\n      String interfaze = jniGetName(tun.getFd());\n      if (jniSetAddresses(interfaze, config.addresses) < 1) {\n        throw new IllegalArgumentException(\"At least one address must be specified\");\n      }\n      if (config.routes != null) {\n        jniSetRoutes(interfaze, config.routes);\n      }\n      Connection connection = new Connection();\n      if (!mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)) {\n        throw new IllegalStateException(\"Cannot bind \" + config.user);\n      }\n      if (mConnection != null) {\n        mContext.unbindService(mConnection);\n      }\n      if (mInterface != null && !mInterface.equals(interfaze)) {\n        jniReset(mInterface);\n      }\n      mConnection = connection;\n      mInterface = interfaze;\n    } catch (RuntimeException e) {\n      try {\n        tun.close();\n      } catch (Exception ex) {\n        // ignore\n      }\n      throw e;\n    }\n    Log.i(TAG, \"Established by \" + config.user + \" on \" + mInterface);\n\n    // Fill more values.\n    config.user = mPackage;\n    config.interfaze = mInterface;\n\n    // Override DNS servers and show the notification.\n    long identity = Binder.clearCallingIdentity();\n    mCallback.override(config.dnsServers, config.searchDomains);\n    showNotification(config, label, bitmap);\n    Binder.restoreCallingIdentity(identity);\n    return tun;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 461, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamSourcery/packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 462, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TrasUI/old_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 463, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 464, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 465, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnlk2-custom/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 466, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(String,*)"], "initializationStart": [81, 141], "initializationEnd": [100, 209], "hasTryCatch": 1, "exceptionType": "NameNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 106, "tryExpressionEnd": 110, "tryBlockStart": 106, "tryBlockEnd": 432, "catchExpressionStart": 325, "catchExpressionEnd": 357, "catchBlockStart": 325, "catchBlockEnd": 432, "exceptionHandlingCallStart": [406], "exceptionHandlingCallEnd": [425], "configuration": ["pm.getApplicationInfo(String,*)"], "configurationStart": [141], "configurationEnd": [209], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 242, "focalAPIEnd": 265, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [217, 291], "useEnd": [266, 315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sandrocheng/sandro/tree/master/project/AppLockDemo/src/com/guangli/applock/PasswordInutActivity.java", "rawCode": "  /** 获取被拦截的应用信息 */\n  private void initAppInfo() {\n    PackageManager pManager = getPackageManager();\n    try {\n      ApplicationInfo info = pManager.getApplicationInfo(packename, PackageManager.GET_META_DATA);\n      appIcon.setImageDrawable(info.loadIcon(pManager));\n      appLable.setText(info.loadLabel(pManager));\n\n    } catch (NameNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 467, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [224], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1858, 2028], "configurationEnd": [1883, 2069], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 2147, "focalAPIEnd": 2164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Build {@link UidDetail} object, blocking until all {@link Drawable} lookup is finished. */\n  private UidDetail buildUidDetail(int uid) {\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label =\n            res.getString(\n                UserManager.supportsMultipleUsers()\n                    ? R.string.data_usage_uninstalled_apps_users\n                    : R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n    }\n\n    // Handle keys that are actually user handles\n    if (uid <= -2000) {\n      final int userHandle = (-uid) - 2000;\n      final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n      final UserInfo info = um.getUserInfo(userHandle);\n      if (info != null) {\n        detail.label = res.getString(R.string.running_process_item_user_label, info.name);\n        detail.icon = UserUtils.getUserIcon(um, info, res);\n        return detail;\n      }\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 468, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 469, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 470, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/matthew117/DurhamLife-Android/tree/master/DuchessAndroid/libs/ActionBarSherlock-88fc341/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 471, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Deodexed/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 472, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [445, 529], "initializationEnd": [473, 563], "hasTryCatch": 1, "exceptionType": "RuntimeException", "exceptionHandlingCall": ["updateState(*,String)", "closeQuietly(ParcelFileDescriptor)"], "tryExpressionStart": 511, "tryExpressionEnd": 515, "tryBlockStart": 511, "tryBlockEnd": 617, "catchExpressionStart": 2914, "catchExpressionEnd": 2941, "catchBlockStart": 2914, "catchBlockEnd": 3050, "exceptionHandlingCallStart": [2949, 3003], "exceptionHandlingCallEnd": [2995, 3028], "configuration": ["pm.getApplicationInfo(String,int)", "pm.resolveService(Intent,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [529, 871, 1200], "configurationEnd": [563, 899, 1217], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1302, "focalAPIEnd": 1318, "followUpCheck": "icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0", "checkType": "IF", "followUpCheckExpressionStart": 1350, "followUpCheckExpressionEnd": 1416, "followUpCheckBlockStart": 1350, "followUpCheckBlockEnd": 1931, "use": ["icon.setBounds(int,int,int,int)", "icon.draw(Canvas)"], "useStart": [1731, 1887], "useEnd": [1766, 1899], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/services/java/com/android/server/connectivity/Vpn.java", "rawCode": "  /**\n   * Establish a VPN network and return the file descriptor of the VPN interface. This methods\n   * returns {@code null} if the application is revoked or not prepared.\n   *\n   * @param config The parameters to configure the network.\n   * @return The file descriptor of the VPN interface.\n   */\n  public synchronized ParcelFileDescriptor establish(VpnConfig config) {\n    // Check if the caller is already prepared.\n    PackageManager pm = mContext.getPackageManager();\n    ApplicationInfo app = null;\n    try {\n      app = pm.getApplicationInfo(mPackage, 0);\n    } catch (Exception e) {\n      return null;\n    }\n    if (Binder.getCallingUid() != app.uid) {\n      return null;\n    }\n\n    // Check if the service is properly declared.\n    Intent intent = new Intent(VpnConfig.SERVICE_INTERFACE);\n    intent.setClassName(mPackage, config.user);\n    ResolveInfo info = pm.resolveService(intent, 0);\n    if (info == null) {\n      throw new SecurityException(\"Cannot find \" + config.user);\n    }\n    if (!BIND_VPN_SERVICE.equals(info.serviceInfo.permission)) {\n      throw new SecurityException(config.user + \" does not require \" + BIND_VPN_SERVICE);\n    }\n\n    // Load the label.\n    String label = app.loadLabel(pm).toString();\n\n    // Load the icon and convert it into a bitmap.\n    Drawable icon = app.loadIcon(pm);\n    Bitmap bitmap = null;\n    if (icon.getIntrinsicWidth() > 0 && icon.getIntrinsicHeight() > 0) {\n      int width =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_width);\n      int height =\n          mContext\n              .getResources()\n              .getDimensionPixelSize(android.R.dimen.notification_large_icon_height);\n      icon.setBounds(0, 0, width, height);\n      bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n      Canvas c = new Canvas(bitmap);\n      icon.draw(c);\n      c.setBitmap(null);\n    }\n\n    // Configure the interface. Abort if any of these steps fails.\n    ParcelFileDescriptor tun = ParcelFileDescriptor.adoptFd(jniCreate(config.mtu));\n    try {\n      updateState(DetailedState.CONNECTING, \"establish\");\n      String interfaze = jniGetName(tun.getFd());\n      if (jniSetAddresses(interfaze, config.addresses) < 1) {\n        throw new IllegalArgumentException(\"At least one address must be specified\");\n      }\n      if (config.routes != null) {\n        jniSetRoutes(interfaze, config.routes);\n      }\n      Connection connection = new Connection();\n      if (!mContext.bindService(intent, connection, Context.BIND_AUTO_CREATE)) {\n        throw new IllegalStateException(\"Cannot bind \" + config.user);\n      }\n      if (mConnection != null) {\n        mContext.unbindService(mConnection);\n      }\n      if (mInterface != null && !mInterface.equals(interfaze)) {\n        jniReset(mInterface);\n      }\n      mConnection = connection;\n      mInterface = interfaze;\n    } catch (RuntimeException e) {\n      updateState(DetailedState.FAILED, \"establish\");\n      IoUtils.closeQuietly(tun);\n      throw e;\n    }\n    Log.i(TAG, \"Established by \" + config.user + \" on \" + mInterface);\n\n    // Fill more values.\n    config.user = mPackage;\n    config.interfaze = mInterface;\n\n    // Override DNS servers and show the notification.\n    final long token = Binder.clearCallingIdentity();\n    try {\n      mCallback.override(config.dnsServers, config.searchDomains);\n      showNotification(config, label, bitmap);\n    } finally {\n      Binder.restoreCallingIdentity(token);\n    }\n    // TODO: ensure that contract class eventually marks as connected\n    updateState(DetailedState.AUTHENTICATING, \"establish\");\n    return tun;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 473, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [400, 449], "initializationEnd": [419, 483], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 68, "tryExpressionEnd": 72, "tryBlockStart": 68, "tryBlockEnd": 1512, "catchExpressionStart": 1436, "catchExpressionEnd": 1456, "catchBlockStart": 1436, "catchBlockEnd": 1512, "exceptionHandlingCallStart": [1464, 1497], "exceptionHandlingCallEnd": [1489, 1505], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [449], "configurationEnd": [483], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 614, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [554, 729], "useEnd": [631, 746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    try {\n      mPackage = getCallingPackage();\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      if (mService.prepareVpn(mPackage, null)) {\n        setResult(RESULT_OK);\n        finish();\n        return;\n      }\n\n      PackageManager pm = getPackageManager();\n      ApplicationInfo app = pm.getApplicationInfo(mPackage, 0);\n\n      View view = View.inflate(this, R.layout.confirm, null);\n      ((ImageView) view.findViewById(R.id.icon)).setImageDrawable(app.loadIcon(pm));\n      ((TextView) view.findViewById(R.id.prompt))\n          .setText(getString(R.string.prompt, app.loadLabel(pm)));\n      ((CompoundButton) view.findViewById(R.id.check)).setOnCheckedChangeListener(this);\n\n      mAlertParams.mIconId = android.R.drawable.ic_dialog_alert;\n      mAlertParams.mTitle = getText(android.R.string.dialog_alert_title);\n      mAlertParams.mPositiveButtonText = getText(android.R.string.ok);\n      mAlertParams.mPositiveButtonListener = this;\n      mAlertParams.mNegativeButtonText = getText(android.R.string.cancel);\n      mAlertParams.mNegativeButtonListener = this;\n      mAlertParams.mView = view;\n      setupAlert();\n\n      getWindow().setCloseOnTouchOutside(false);\n      mButton = mAlert.getButton(DialogInterface.BUTTON_POSITIVE);\n      mButton.setEnabled(false);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 474, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 210, "focalAPIEnd": 232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [188, 354], "useEnd": [233, 377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mirror-androidarmv6/android_packages_apps_Settings/tree/master/src/com/android/settings/InstalledAppDetails.java", "rawCode": "  private void setAppLabelAndIcon(PackageInfo pkgInfo) {\n    View appSnippet = findViewById(R.id.app_snippet);\n    ImageView icon = (ImageView) appSnippet.findViewById(R.id.app_icon);\n    icon.setImageDrawable(mAppInfo.loadIcon(mPm));\n    // Set application name.\n    TextView label = (TextView) appSnippet.findViewById(R.id.app_name);\n    label.setText(mAppInfo.loadLabel(mPm));\n    // Version number of application\n    mAppVersion = (TextView) appSnippet.findViewById(R.id.app_size);\n\n    if (pkgInfo != null && pkgInfo.versionName != null) {\n      mAppVersion.setVisibility(View.VISIBLE);\n      mAppVersion.setText(getString(R.string.version_text, String.valueOf(pkgInfo.versionName)));\n    } else {\n      mAppVersion.setVisibility(View.INVISIBLE);\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 475, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 476, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 84, "focalAPIEnd": 103, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/app/ApplicationPackageManager.java", "rawCode": "  @Override\n  public Drawable getApplicationIcon(ApplicationInfo info) {\n    return info.loadIcon(this);\n  }\n"}, {"dataset": "loadIcon", "exampleID": 477, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [370], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1497, 1668], "configurationEnd": [1522, 1709], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1787, "focalAPIEnd": 1804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Resolve best descriptive label for the given UID. */\n  public synchronized UidDetail getUidDetail(int uid, boolean blocking) {\n    final UidDetail cached = mUidDetailCache.get(uid);\n    if (cached != null) {\n      return cached;\n    } else if (!blocking) {\n      return null;\n    }\n\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label = res.getString(R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    mUidDetailCache.put(uid, detail);\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 478, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 479, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/onecoders/ViewPageIndicator/tree/master/ActionBarSherlock-master/actionbarsherlock-samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 480, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thomasbreitbach/hci_advanced/tree/master/JakeWharton-ActionBarSherlock-071a61c/actionbarsherlock-samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 481, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [224], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1225, 1396], "configurationEnd": [1250, 1437], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1515, "focalAPIEnd": 1532, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TrasUI/old_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Build {@link UidDetail} object, blocking until all {@link Drawable} lookup is finished. */\n  private UidDetail buildUidDetail(int uid) {\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label = res.getString(R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 482, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [224], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1858, 2028], "configurationEnd": [1883, 2069], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 2147, "focalAPIEnd": 2164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Build {@link UidDetail} object, blocking until all {@link Drawable} lookup is finished. */\n  private UidDetail buildUidDetail(int uid) {\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label =\n            res.getString(\n                UserManager.supportsMultipleUsers()\n                    ? R.string.data_usage_uninstalled_apps_users\n                    : R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n    }\n\n    // Handle keys that are actually user handles\n    if (uid <= -2000) {\n      final int userHandle = (-uid) - 2000;\n      final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n      final UserInfo info = um.getUserInfo(userHandle);\n      if (info != null) {\n        detail.label = res.getString(R.string.running_process_item_user_label, info.name);\n        detail.icon = UserUtils.getUserIcon(um, info, res);\n        return detail;\n      }\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 483, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [370], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1497, 1668], "configurationEnd": [1522, 1709], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1787, "focalAPIEnd": 1804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ktoonsez/AOKP-I777/tree/master/packages/apps/Settings/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Resolve best descriptive label for the given UID. */\n  public synchronized UidDetail getUidDetail(int uid, boolean blocking) {\n    final UidDetail cached = mUidDetailCache.get(uid);\n    if (cached != null) {\n      return cached;\n    } else if (!blocking) {\n      return null;\n    }\n\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label = res.getString(R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        mUidDetailCache.put(uid, detail);\n        return detail;\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    mUidDetailCache.put(uid, detail);\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 484, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 485, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [224], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1858, 2028], "configurationEnd": [1883, 2069], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 2147, "focalAPIEnd": 2164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/g3tsum/rb_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Build {@link UidDetail} object, blocking until all {@link Drawable} lookup is finished. */\n  private UidDetail buildUidDetail(int uid) {\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label =\n            res.getString(\n                UserManager.supportsMultipleUsers()\n                    ? R.string.data_usage_uninstalled_apps_users\n                    : R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n    }\n\n    // Handle keys that are actually user handles\n    if (uid <= -2000) {\n      final int userHandle = (-uid) - 2000;\n      final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n      final UserInfo info = um.getUserInfo(userHandle);\n      if (info != null) {\n        detail.label = res.getString(R.string.running_process_item_user_label, info.name);\n        detail.icon = UserUtils.getUserIcon(um, info, res);\n        return detail;\n      }\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 486, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [224], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)"], "configurationStart": [1858, 2028], "configurationEnd": [1883, 2069], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 2147, "focalAPIEnd": 2164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_packages_apps_Settings/tree/master/src/com/android/settings/net/UidDetailProvider.java", "rawCode": "  /** Build {@link UidDetail} object, blocking until all {@link Drawable} lookup is finished. */\n  private UidDetail buildUidDetail(int uid) {\n    final Resources res = mContext.getResources();\n    final PackageManager pm = mContext.getPackageManager();\n\n    final UidDetail detail = new UidDetail();\n    detail.label = pm.getNameForUid(uid);\n    detail.icon = pm.getDefaultActivityIcon();\n\n    // handle special case labels\n    switch (uid) {\n      case android.os.Process.SYSTEM_UID:\n        detail.label = res.getString(R.string.process_kernel_label);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_REMOVED:\n        detail.label =\n            res.getString(\n                UserManager.supportsMultipleUsers()\n                    ? R.string.data_usage_uninstalled_apps_users\n                    : R.string.data_usage_uninstalled_apps);\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n      case TrafficStats.UID_TETHERING:\n        final ConnectivityManager cm =\n            (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);\n        detail.label = res.getString(Utils.getTetheringLabel(cm));\n        detail.icon = pm.getDefaultActivityIcon();\n        return detail;\n    }\n\n    // Handle keys that are actually user handles\n    if (uid <= -2000) {\n      final int userHandle = (-uid) - 2000;\n      final UserManager um = (UserManager) mContext.getSystemService(Context.USER_SERVICE);\n      final UserInfo info = um.getUserInfo(userHandle);\n      if (info != null) {\n        detail.label = res.getString(R.string.running_process_item_user_label, info.name);\n        detail.icon = UserUtils.getUserIcon(um, info, res);\n        return detail;\n      }\n    }\n\n    // otherwise fall back to using packagemanager labels\n    final String[] packageNames = pm.getPackagesForUid(uid);\n    final int length = packageNames != null ? packageNames.length : 0;\n    try {\n      if (length == 1) {\n        final ApplicationInfo info = pm.getApplicationInfo(packageNames[0], 0);\n        detail.label = info.loadLabel(pm).toString();\n        detail.icon = info.loadIcon(pm);\n      } else if (length > 1) {\n        detail.detailLabels = new CharSequence[length];\n        for (int i = 0; i < length; i++) {\n          final String packageName = packageNames[i];\n          final PackageInfo packageInfo = pm.getPackageInfo(packageName, 0);\n          final ApplicationInfo appInfo = pm.getApplicationInfo(packageName, 0);\n\n          detail.detailLabels[i] = appInfo.loadLabel(pm).toString();\n          if (packageInfo.sharedUserLabel != 0) {\n            detail.label =\n                pm.getText(packageName, packageInfo.sharedUserLabel, packageInfo.applicationInfo)\n                    .toString();\n            detail.icon = appInfo.loadIcon(pm);\n          }\n        }\n      }\n    } catch (NameNotFoundException e) {\n    }\n\n    if (TextUtils.isEmpty(detail.label)) {\n      detail.label = Integer.toString(uid);\n    }\n\n    return detail;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 487, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_settings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 488, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [284], "initializationEnd": [311], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getPackageArchiveInfo(String,*)"], "configurationStart": [480], "configurationEnd": [541], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 881, "focalAPIEnd": 899, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ronhuang/FileManager/tree/master/src/org/openintents/filemanager/DirectoryScanner.java", "rawCode": "  /**\n   * Return the Drawable that is associated with a specific mime type for the VIEW action.\n   *\n   * @param mimetype\n   * @return\n   */\n  Drawable getDrawableForMimetype(File file, String mimetype) {\n    if (mimetype == null) {\n      return null;\n    }\n\n    PackageManager pm = context.getPackageManager();\n\n    // Returns the icon packaged in files with the .apk MIME type.\n    if (mimetype.equals(MIME_APK)) {\n      String path = file.getPath();\n      PackageInfo pInfo = pm.getPackageArchiveInfo(path, PackageManager.GET_ACTIVITIES);\n      if (pInfo != null) {\n        ApplicationInfo aInfo = pInfo.applicationInfo;\n\n        // Bug in SDK versions >= 8. See here:\n        // http://code.google.com/p/android/issues/detail?id=9151\n        if (Build.VERSION.SDK_INT >= 8) {\n          aInfo.sourceDir = path;\n          aInfo.publicSourceDir = path;\n        }\n\n        return aInfo.loadIcon(pm);\n      }\n    }\n\n    int iconResource = mMimeTypes.getIcon(mimetype);\n    Drawable ret = null;\n    if (iconResource > 0) {\n      try {\n        ret = pm.getResourcesForApplication(context.getPackageName()).getDrawable(iconResource);\n      } catch (NotFoundException e) {\n      } catch (NameNotFoundException e) {\n      }\n    }\n\n    if (ret != null) {\n      return ret;\n    }\n\n    Uri data = FileUtils.getUri(file);\n\n    Intent intent = new Intent(Intent.ACTION_VIEW);\n    // intent.setType(mimetype);\n\n    // Let's probe the intent exactly in the same way as the VIEW action\n    // is performed in FileManagerActivity.openFile(..)\n    intent.setDataAndType(data, mimetype);\n\n    final List<ResolveInfo> lri =\n        pm.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);\n\n    if (lri != null && lri.size() > 0) {\n      // Log.i(TAG, \"lri.size()\" + lri.size());\n\n      // return first element\n      int index = 0;\n\n      // Actually first element should be \"best match\",\n      // but it seems that more recently installed applications\n      // could be even better match.\n      index = lri.size() - 1;\n\n      final ResolveInfo ri = lri.get(index);\n      return ri.loadIcon(pm);\n    }\n\n    return null;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 489, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [411], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Xomo/ActionBarSherlock-v4/tree/master/samples/fragments/src/com/actionbarsherlock/sample/fragments/LoaderCustomSupport.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mLoader.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mLoader.getContext().getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 490, "initialization": ["PackageManager pm = getPackageManager()"], "initializationStart": [1048], "initializationEnd": [1067], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 216, "tryExpressionEnd": 220, "tryBlockStart": 216, "tryBlockEnd": 1915, "catchExpressionStart": 1839, "catchExpressionEnd": 1859, "catchBlockStart": 1839, "catchBlockEnd": 1915, "exceptionHandlingCallStart": [1867, 1900], "exceptionHandlingCallEnd": [1892, 1908], "configuration": ["pm.getApplicationInfo(*,int)"], "configurationStart": [1099], "configurationEnd": [1137], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1168, "focalAPIEnd": 1184, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ManageDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n\n    if (getCallingPackage() != null) {\n      Log.e(TAG, getCallingPackage() + \" cannot start this activity\");\n      finish();\n      return;\n    }\n\n    try {\n      mConfig = getIntent().getParcelableExtra(\"config\");\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      View view = View.inflate(this, R.layout.manage, null);\n      if (mConfig.session != null) {\n        ((TextView) view.findViewById(R.id.session)).setText(mConfig.session);\n      }\n      mDuration = (TextView) view.findViewById(R.id.duration);\n      mDataTransmitted = (TextView) view.findViewById(R.id.data_transmitted);\n      mDataReceived = (TextView) view.findViewById(R.id.data_received);\n      mDataRowsHidden = true;\n\n      if (mConfig.legacy) {\n        mAlertParams.mIconId = android.R.drawable.ic_dialog_info;\n        mAlertParams.mTitle = getText(R.string.legacy_title);\n      } else {\n        PackageManager pm = getPackageManager();\n        ApplicationInfo app = pm.getApplicationInfo(mConfig.user, 0);\n        mAlertParams.mIcon = app.loadIcon(pm);\n        mAlertParams.mTitle = app.loadLabel(pm);\n      }\n      if (mConfig.configureIntent != null) {\n        mAlertParams.mPositiveButtonText = getText(R.string.configure);\n        mAlertParams.mPositiveButtonListener = this;\n      }\n      mAlertParams.mNeutralButtonText = getText(R.string.disconnect);\n      mAlertParams.mNeutralButtonListener = this;\n      mAlertParams.mNegativeButtonText = getText(android.R.string.cancel);\n      mAlertParams.mNegativeButtonListener = this;\n      mAlertParams.mView = view;\n      setupAlert();\n\n      if (mHandler == null) {\n        mHandler = new Handler(this);\n      }\n      mHandler.sendEmptyMessage(0);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 491, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [400, 449], "initializationEnd": [419, 483], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 68, "tryExpressionEnd": 72, "tryBlockStart": 68, "tryBlockEnd": 1512, "catchExpressionStart": 1436, "catchExpressionEnd": 1456, "catchBlockStart": 1436, "catchBlockEnd": 1512, "exceptionHandlingCallStart": [1464, 1497], "exceptionHandlingCallEnd": [1489, 1505], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [449], "configurationEnd": [483], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 614, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [554, 729], "useEnd": [631, 746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    try {\n      mPackage = getCallingPackage();\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      if (mService.prepareVpn(mPackage, null)) {\n        setResult(RESULT_OK);\n        finish();\n        return;\n      }\n\n      PackageManager pm = getPackageManager();\n      ApplicationInfo app = pm.getApplicationInfo(mPackage, 0);\n\n      View view = View.inflate(this, R.layout.confirm, null);\n      ((ImageView) view.findViewById(R.id.icon)).setImageDrawable(app.loadIcon(pm));\n      ((TextView) view.findViewById(R.id.prompt))\n          .setText(getString(R.string.prompt, app.loadLabel(pm)));\n      ((CompoundButton) view.findViewById(R.id.check)).setOnCheckedChangeListener(this);\n\n      mAlertParams.mIconAttrId = android.R.attr.alertDialogIcon;\n      mAlertParams.mTitle = getText(android.R.string.dialog_alert_title);\n      mAlertParams.mPositiveButtonText = getText(android.R.string.ok);\n      mAlertParams.mPositiveButtonListener = this;\n      mAlertParams.mNegativeButtonText = getText(android.R.string.cancel);\n      mAlertParams.mNegativeButtonListener = this;\n      mAlertParams.mView = view;\n      setupAlert();\n\n      getWindow().setCloseOnTouchOutside(false);\n      mButton = mAlert.getButton(DialogInterface.BUTTON_POSITIVE);\n      mButton.setEnabled(false);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 492, "initialization": ["PackageManager pm = Context.getPackageManager()", "ApplicationInfo applicationInfo = getApplicationInfo(*,int)"], "initializationStart": [127, 831], "initializationEnd": [155, 873], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getDefaultActivityIcon()", "pm.getPackagesForUid(int)", "pm.getApplicationInfo(*,int)", "applicationInfo.loadLabel(PackageManager)"], "configurationStart": [235, 288, 831, 904], "configurationEnd": [262, 313, 873, 920], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 1097, "focalAPIEnd": 1112, "followUpCheck": "icon == null", "checkType": "IF", "followUpCheckExpressionStart": 1201, "followUpCheckExpressionEnd": 1218, "followUpCheckBlockStart": 1201, "followUpCheckBlockEnd": 1246, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hectorxda/MySettings/tree/master/src/com/android/settings/fuelgauge/BatterySipper.java", "rawCode": "  /**\n   * Sets name and icon\n   *\n   * @param uid Uid of the application\n   */\n  void getNameIcon() {\n    PackageManager pm = mContext.getPackageManager();\n    final int uid = uidObj.getUid();\n    final Drawable defaultActivityIcon = pm.getDefaultActivityIcon();\n    String[] packages = pm.getPackagesForUid(uid);\n    if (packages == null) {\n      name = Integer.toString(uid);\n      return;\n    }\n\n    String[] packageLabels = new String[packages.length];\n    System.arraycopy(packages, 0, packageLabels, 0, packages.length);\n\n    int preferredIndex = -1;\n    // Convert package names to user-facing labels where possible\n    for (int i = 0; i < packageLabels.length; i++) {\n      // Check if package matches preferred package\n      if (packageLabels[i].equals(name)) preferredIndex = i;\n      try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageLabels[i], 0);\n        CharSequence label = ai.loadLabel(pm);\n        if (label != null) {\n          packageLabels[i] = label.toString();\n        }\n        if (ai.icon != 0) {\n          defaultPackageName = packages[i];\n          icon = ai.loadIcon(pm);\n          break;\n        }\n      } catch (NameNotFoundException e) {\n      }\n    }\n    if (icon == null) icon = defaultActivityIcon;\n\n    if (packageLabels.length == 1) {\n      name = packageLabels[0];\n    } else {\n      // Look for an official name for this UID.\n      for (String pkgName : packages) {\n        try {\n          final PackageInfo pi = pm.getPackageInfo(pkgName, 0);\n          if (pi.sharedUserLabel != 0) {\n            final CharSequence nm = pm.getText(pkgName, pi.sharedUserLabel, pi.applicationInfo);\n            if (nm != null) {\n              name = nm.toString();\n              if (pi.applicationInfo.icon != 0) {\n                defaultPackageName = pkgName;\n                icon = pi.applicationInfo.loadIcon(pm);\n              }\n              break;\n            }\n          }\n        } catch (PackageManager.NameNotFoundException e) {\n        }\n      }\n    }\n    final String uidString = Integer.toString(uidObj.getUid());\n    UidToDetail utd = new UidToDetail();\n    utd.name = name;\n    utd.icon = icon;\n    utd.packageName = defaultPackageName;\n    mUidCache.put(uidString, utd);\n    mHandler.sendMessage(mHandler.obtainMessage(PowerUsageSummary.MSG_UPDATE_NAME_ICON, this));\n  }\n"}, {"dataset": "loadIcon", "exampleID": 493, "initialization": ["PackageManager pm = getPackageManager()"], "initializationStart": [507], "initializationEnd": [526], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [579], "configurationEnd": [629], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 915, "focalAPIEnd": 945, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/packages/SystemUI/src/com/android/systemui/usb/UsbPermissionActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    Intent intent = getIntent();\n    mDevice = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);\n    mAccessory = (UsbAccessory) intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY);\n    mPendingIntent = (PendingIntent) intent.getParcelableExtra(Intent.EXTRA_INTENT);\n    mUid = intent.getIntExtra(Intent.EXTRA_UID, -1);\n    mPackageName = intent.getStringExtra(\"package\");\n\n    PackageManager packageManager = getPackageManager();\n    ApplicationInfo aInfo;\n    try {\n      aInfo = packageManager.getApplicationInfo(mPackageName, 0);\n    } catch (PackageManager.NameNotFoundException e) {\n      Log.e(TAG, \"unable to look up package name\", e);\n      finish();\n      return;\n    }\n    String appName = aInfo.loadLabel(packageManager).toString();\n\n    final AlertController.AlertParams ap = mAlertParams;\n    ap.mIcon = aInfo.loadIcon(packageManager);\n    ap.mTitle = appName;\n    if (mDevice == null) {\n      ap.mMessage = getString(R.string.usb_accessory_permission_prompt, appName);\n      mDisconnectedReceiver = new UsbDisconnectedReceiver(this, mAccessory);\n    } else {\n      ap.mMessage = getString(R.string.usb_device_permission_prompt, appName);\n      mDisconnectedReceiver = new UsbDisconnectedReceiver(this, mDevice);\n    }\n    ap.mPositiveButtonText = getString(android.R.string.ok);\n    ap.mNegativeButtonText = getString(android.R.string.cancel);\n    ap.mPositiveButtonListener = this;\n    ap.mNegativeButtonListener = this;\n\n    // add \"always use\" checkbox\n    LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    ap.mView = inflater.inflate(com.android.internal.R.layout.always_use_checkbox, null);\n    mAlwaysUse = (CheckBox) ap.mView.findViewById(com.android.internal.R.id.alwaysUse);\n    if (mDevice == null) {\n      mAlwaysUse.setText(R.string.always_use_accessory);\n    } else {\n      mAlwaysUse.setText(R.string.always_use_device);\n    }\n    mAlwaysUse.setOnCheckedChangeListener(this);\n    mClearDefaultHint =\n        (TextView) ap.mView.findViewById(com.android.internal.R.id.clearDefaultHint);\n    mClearDefaultHint.setVisibility(View.GONE);\n\n    setupAlert();\n  }\n"}, {"dataset": "loadIcon", "exampleID": 494, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 96, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/content/pm/ComponentInfo.java", "rawCode": "  /** @hide */\n  @Override\n  protected Drawable loadDefaultIcon(PackageManager pm) {\n    return applicationInfo.loadIcon(pm);\n  }\n"}, {"dataset": "loadIcon", "exampleID": 495, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 110, "focalAPIEnd": 136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [410], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_settings/tree/master/src/com/android/settings/applications/AppOpsState.java", "rawCode": "    public Drawable getIcon() {\n      if (mIcon == null) {\n        if (mApkFile.exists()) {\n          mIcon = mInfo.loadIcon(mState.mPm);\n          return mIcon;\n        } else {\n          mMounted = false;\n        }\n      } else if (!mMounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (mApkFile.exists()) {\n          mMounted = true;\n          mIcon = mInfo.loadIcon(mState.mPm);\n          return mIcon;\n        }\n      } else {\n        return mIcon;\n      }\n\n      return mState.mContext.getResources().getDrawable(android.R.drawable.sym_def_app_icon);\n    }\n"}, {"dataset": "loadIcon", "exampleID": 496, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 96, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/content/pm/ComponentInfo.java", "rawCode": "  /** @hide */\n  @Override\n  protected Drawable loadDefaultIcon(PackageManager pm) {\n    return applicationInfo.loadIcon(pm);\n  }\n"}, {"dataset": "loadIcon", "exampleID": 497, "initialization": ["PackageManager pm = getPackageManager()", "ApplicationInfo applicationInfo = PackageManager.getApplicationInfo(String,int)"], "initializationStart": [400, 449], "initializationEnd": [419, 483], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)", "finish()"], "tryExpressionStart": 68, "tryExpressionEnd": 72, "tryBlockStart": 68, "tryBlockEnd": 1478, "catchExpressionStart": 1402, "catchExpressionEnd": 1422, "catchBlockStart": 1402, "catchBlockEnd": 1478, "exceptionHandlingCallStart": [1430, 1463], "exceptionHandlingCallEnd": [1455, 1471], "configuration": ["pm.getApplicationInfo(String,int)"], "configurationStart": [449], "configurationEnd": [483], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 614, "focalAPIEnd": 630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setImageDrawable(icon)", "applicationInfo.loadLabel(PackageManager)"], "useStart": [554, 729], "useEnd": [631, 746], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/packages/VpnDialogs/src/com/android/vpndialogs/ConfirmDialog.java", "rawCode": "  @Override\n  protected void onResume() {\n    super.onResume();\n    try {\n      mPackage = getCallingPackage();\n\n      mService =\n          IConnectivityManager.Stub.asInterface(\n              ServiceManager.getService(Context.CONNECTIVITY_SERVICE));\n\n      if (mService.prepareVpn(mPackage, null)) {\n        setResult(RESULT_OK);\n        finish();\n        return;\n      }\n\n      PackageManager pm = getPackageManager();\n      ApplicationInfo app = pm.getApplicationInfo(mPackage, 0);\n\n      View view = View.inflate(this, R.layout.confirm, null);\n      ((ImageView) view.findViewById(R.id.icon)).setImageDrawable(app.loadIcon(pm));\n      ((TextView) view.findViewById(R.id.prompt))\n          .setText(getString(R.string.prompt, app.loadLabel(pm)));\n      ((CompoundButton) view.findViewById(R.id.check)).setOnCheckedChangeListener(this);\n\n      mDialog =\n          new AlertDialog.Builder(this)\n              .setIcon(android.R.drawable.ic_dialog_alert)\n              .setTitle(android.R.string.dialog_alert_title)\n              .setView(view)\n              .setPositiveButton(android.R.string.ok, this)\n              .setNegativeButton(android.R.string.cancel, this)\n              .setCancelable(false)\n              .create();\n      mDialog.setOnDismissListener(this);\n      mDialog.show();\n\n      mButton = mDialog.getButton(DialogInterface.BUTTON_POSITIVE);\n      mButton.setEnabled(false);\n    } catch (Exception e) {\n      Log.e(TAG, \"onResume\", e);\n      finish();\n    }\n  }\n"}, {"dataset": "loadIcon", "exampleID": 498, "initialization": ["PackageManager pm = Context.getPackageManager()"], "initializationStart": [95], "initializationEnd": [122], "hasTryCatch": 1, "exceptionType": "OutOfMemoryError", "exceptionHandlingCall": ["toString()", "e(String,*)"], "tryExpressionStart": 373, "tryExpressionEnd": 377, "tryBlockStart": 373, "tryBlockEnd": 498, "catchExpressionStart": 424, "catchExpressionEnd": 451, "catchBlockStart": 424, "catchBlockEnd": 498, "exceptionHandlingCallStart": [476, 461], "exceptionHandlingCallEnd": [488, 489], "configuration": ["pm.getPackageArchiveInfo(String,*)"], "configurationStart": [147], "configurationEnd": [211], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 394, "focalAPIEnd": 414, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/MIUI-FileExplorer/FileExplorer/src/net/micode/fileexplorer/Util.java", "rawCode": "  public static Drawable getApkIcon(Context context, String apkPath) {\n    PackageManager pm = context.getPackageManager();\n    PackageInfo info = pm.getPackageArchiveInfo(apkPath, PackageManager.GET_ACTIVITIES);\n    if (info != null) {\n      ApplicationInfo appInfo = info.applicationInfo;\n      appInfo.sourceDir = apkPath;\n      appInfo.publicSourceDir = apkPath;\n      try {\n        return appInfo.loadIcon(pm);\n      } catch (OutOfMemoryError e) {\n        Log.e(LOG_TAG, e.toString());\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "loadIcon", "exampleID": 499, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 157, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["applicationInfo.loadIcon(PackageManager)"], "useStart": [646], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/g3tsum/rb_apps_Settings/tree/master/src/com/android/settings/applications/ApplicationsState.java", "rawCode": "    boolean ensureIconLocked(Context context, PackageManager pm) {\n      if (this.icon == null) {\n        if (this.apkFile.exists()) {\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        } else {\n          this.mounted = false;\n          this.icon =\n              context\n                  .getResources()\n                  .getDrawable(com.android.internal.R.drawable.sym_app_on_sd_unavailable_icon);\n        }\n      } else if (!this.mounted) {\n        // If the app wasn't mounted but is now mounted, reload\n        // its icon.\n        if (this.apkFile.exists()) {\n          this.mounted = true;\n          this.icon = this.info.loadIcon(pm);\n          return true;\n        }\n      }\n      return false;\n    }\n"}, {"dataset": "loadIcon", "exampleID": 500, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "icon = applicationInfo.loadIcon(pm)", "focalAPIStart": 93, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/widget/AppSecurityPermissions.java", "rawCode": "    public Drawable loadGroupIcon(PackageManager pm) {\n      if (icon != 0) {\n        return loadIcon(pm);\n      } else {\n        ApplicationInfo appInfo;\n        try {\n          appInfo = pm.getApplicationInfo(packageName, 0);\n          return appInfo.loadIcon(pm);\n        } catch (NameNotFoundException e) {\n        }\n      }\n      return null;\n    }\n"}]