[{"dataset": "pack", "exampleID": 3401, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [289], "initializationEnd": [301], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setTitle(String)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [307, 347, 401], "configurationEnd": [329, 395, 453], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 459, "focalAPIEnd": 471, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [477], "useEnd": [499], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcpoison/jgrapht/tree/master/jgrapht-demo/src/main/java/org/jgrapht/demo/JGraphAdapterDemo.java", "rawCode": "  /**\n   * An alternative starting point for this demo, to also allow running this applet as an\n   * application.\n   *\n   * @param args ignored.\n   */\n  public static void main(String[] args) {\n    JGraphAdapterDemo applet = new JGraphAdapterDemo();\n    applet.init();\n\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(applet);\n    frame.setTitle(\"JGraphT Adapter to JGraph Demo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3402, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [80], "configurationEnd": [102], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 130, "focalAPIEnd": 142, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.pack()", "jFrame.setVisible(boolean)"], "useStart": [148, 206, 224], "useEnd": [200, 218, 246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nh2/dsa42/tree/master/teilnehmer/ben/HalloWelt/src/FramePanel.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new FramePanel());\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3403, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [1102], "initializationEnd": [1142], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setIconImage(Image)", "jFrame.getContentPane()"], "configurationStart": [1680, 1749], "configurationEnd": [1743, 1771], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 2887, "focalAPIEnd": 2899, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "centerWindowOnComponent(jFrame,*)", "jFrame.setVisible(boolean)"], "useStart": [2905, 2935, 3014], "useEnd": [2928, 3008, 3036], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rachitpant/UAlbany-Client/tree/master/src/java/org/jivesoftware/sparkimpl/plugin/scratchpad/ScratchPadPlugin.java", "rawCode": "  private void showPrivateNotes(final PrivateNotes privateNotes) {\n    String text = privateNotes.getNotes();\n\n    final JLabel titleLabel = new JLabel(\"Notepad\");\n    titleLabel.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY));\n    titleLabel.setFont(new Font(\"Dialog\", Font.BOLD, 13));\n    titleLabel.setHorizontalAlignment(JLabel.CENTER);\n\n    final JTextPane pane = new JTextPane();\n    pane.setFont(new Font(\"Dialog\", Font.PLAIN, 12));\n\n    pane.setOpaque(false);\n\n    final JScrollPane scrollPane =\n        new JScrollPane(\n            pane, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n    scrollPane.setOpaque(false);\n    scrollPane.getViewport().setOpaque(false);\n\n    pane.setText(text);\n    final RolloverButton button = new RolloverButton(Res.getString(\"save\"), null);\n    final RolloverButton cancelButton = new RolloverButton(Res.getString(\"cancel\"), null);\n    ResourceUtils.resButton(button, Res.getString(\"button.save\"));\n    ResourceUtils.resButton(cancelButton, Res.getString(\"button.cancel\"));\n\n    final JFrame frame = new JFrame(Res.getString(\"title.notes\"));\n\n    final JPanel mainPanel = new JPanel();\n\n    pane.addKeyListener(\n        new KeyAdapter() {\n          public void keyReleased(KeyEvent e) {\n            if (e.getKeyChar() == KeyEvent.VK_ESCAPE) {\n              frame.dispose();\n\n              // Save it.\n              String text = pane.getText();\n              privateNotes.setNotes(text);\n              PrivateNotes.savePrivateNotes(privateNotes);\n            }\n          }\n        });\n\n    mainPanel.setBackground(Color.white);\n    mainPanel.setLayout(new GridBagLayout());\n    frame.setIconImage(SparkManager.getMainWindow().getIconImage());\n    frame.getContentPane().add(mainPanel);\n\n    // mainPanel.add(titleLabel, new GridBagConstraints(0, 0, 3, 1, 1.0, 0.0,\n    // GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));\n\n    mainPanel.add(\n        scrollPane,\n        new GridBagConstraints(\n            0,\n            1,\n            3,\n            1,\n            1.0,\n            1.0,\n            GridBagConstraints.WEST,\n            GridBagConstraints.BOTH,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n    mainPanel.add(\n        button,\n        new GridBagConstraints(\n            1,\n            2,\n            1,\n            1,\n            1.0,\n            0.0,\n            GridBagConstraints.EAST,\n            GridBagConstraints.NONE,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n    mainPanel.add(\n        cancelButton,\n        new GridBagConstraints(\n            2,\n            2,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.EAST,\n            GridBagConstraints.NONE,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n\n    frame.pack();\n    frame.setSize(400, 400);\n\n    GraphicUtils.centerWindowOnComponent(frame, SparkManager.getMainWindow());\n    frame.setVisible(true);\n    pane.setCaretPosition(0);\n\n    button.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent actionEvent) {\n            frame.dispose();\n\n            // Save it.\n            String text = pane.getText();\n            privateNotes.setNotes(text);\n            PrivateNotes.savePrivateNotes(privateNotes);\n          }\n        });\n\n    cancelButton.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent actionEvent) {\n            frame.dispose();\n          }\n        });\n  }\n"}, {"dataset": "pack", "exampleID": 3404, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setResizable(boolean)"], "configurationStart": [1812], "configurationEnd": [1835], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1907, "focalAPIEnd": 1918, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setResizable(boolean)"], "useStart": [1924], "useEnd": [1948], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/2.semestr/OMO/Pecinovsky/MOJJ_Projekty_ASCII/10_Dedicnost_trid/rup/cesky/tvary_0/SpravcePlatna.java", "rawCode": "  /**\n   * ************************************************************************* Nastavi rozmer platna\n   * zadanim bodove velikosti policka a poctu policek ve vodorovnem a svislem smeru. Pri velikosti\n   * policka = 1 se vypina zobrazovani mrizky.\n   *\n   * @param krok Nova bodova velikost policka\n   * @param pSirka Novy pocet policek vodorovne\n   * @param pVyska Novy pocet policek svisle\n   * @param menic Objekt, ktery zada o zmenu rozmeru. Jakmile je jednou tento objekt nastaven, nesmi\n   *     jiz rozmer platna menit nikdo jiny.\n   */\n  public synchronized void setKrokRozmer(int krok, int pSirka, int pVyska, Object menic) {\n    if (menic != vlastnikPovoleniZmenyKroku) {\n      if (vlastnikPovoleniZmenyKroku == null) {\n        vlastnikPovoleniZmenyKroku = menic;\n      } else {\n        throw new IllegalStateException(\"Zmena kroku a rozmeru neni danemu objektu povolena\");\n      }\n    }\n    // Overeni korektnosti zadanych parametru\n    Dimension obrazovka = Toolkit.getDefaultToolkit().getScreenSize();\n    if ((krok < 1)\n        || (pSirka < 2)\n        || (obrazovka.width < sirkaBodu)\n        || (pVyska < 2)\n        || (obrazovka.height < vyskaBodu)) {\n      throw new IllegalArgumentException(\n          \"\\nSpatne zadane rozmery: \"\n              + \"\\n krok =\"\n              + krok\n              + \" bodu,\"\n              + \"\\n sirka=\"\n              + pSirka\n              + \" poli = \"\n              + pSirka * krok\n              + \" bodu,\"\n              + \"\\n vyska=\"\n              + pVyska\n              + \" poli = \"\n              + pVyska * krok\n              + \" bodu,\"\n              + \"\\n obrazovka= \"\n              + obrazovka.width\n              + \"\"\n              + obrazovka.height\n              + \" bodu\\n\");\n    }\n\n    sirkaBodu = pSirka * krok;\n    vyskaBodu = pVyska * krok;\n\n    okno.setResizable(true);\n    platno.setPreferredSize(new Dimension(sirkaBodu, vyskaBodu));\n    okno.pack();\n    okno.setResizable(false);\n\n    obrazPlatna = platno.createImage(sirkaBodu, vyskaBodu);\n    kreslitko = new Kreslitko((Graphics2D) obrazPlatna.getGraphics());\n    kreslitko.setPozadi(barvaPozadi);\n\n    int stary = this.krok;\n    this.krok = krok;\n    this.sloupcu = pSirka;\n    this.radku = pVyska;\n\n    pripravCary();\n\n    // if( hlasitZmenyRozmeru && (krok != stary) )\n    // {\n    // nekreslit++; {\n    // for( IPrizpusobivy ip : prizpusobivi ) {\n    // ip.krokZmenen(stary, krok);\n    // }\n    // }nekreslit--;\n    // }\n    setViditelne(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3405, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [91], "initializationEnd": [103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setVisible(boolean)", "jFrame.setContentPane(JLabel)", "jFrame.addKeyListener(StdDraw)", "jFrame.setResizable(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setTitle(String)", "jFrame.setJMenuBar(JMenuBar)"], "configurationStart": [54, 1012, 1044, 1111, 1142, 1316, 1353], "configurationEnd": [77, 1038, 1069, 1136, 1194, 1347, 1387], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1393, "focalAPIEnd": 1405, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.requestFocusInWindow()", "jFrame.setVisible(boolean)"], "useStart": [1411, 1445], "useEnd": [1439, 1467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IlyaGubarev/Algorithms/tree/master/Java/Algorithms/src/main/java/com/ilyagubarev/algorithms/utils/std/StdDraw.java", "rawCode": "  private static void init() {\n    if (frame != null) frame.setVisible(false);\n    frame = new JFrame();\n    offscreenImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n    onscreenImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n    offscreen = offscreenImage.createGraphics();\n    onscreen = onscreenImage.createGraphics();\n    setXscale();\n    setYscale();\n    offscreen.setColor(DEFAULT_CLEAR_COLOR);\n    offscreen.fillRect(0, 0, width, height);\n    setPenColor();\n    setPenRadius();\n    setFont();\n    clear();\n\n    // add antialiasing\n    RenderingHints hints =\n        new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n    hints.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n    offscreen.addRenderingHints(hints);\n\n    // frame stuff\n    ImageIcon icon = new ImageIcon(onscreenImage);\n    JLabel draw = new JLabel(icon);\n\n    draw.addMouseListener(std);\n    draw.addMouseMotionListener(std);\n\n    frame.setContentPane(draw);\n    frame.addKeyListener(std); // JLabel cannot get keyboard focus\n    frame.setResizable(false);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // closes all windows\n    // frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // closes only current window\n    frame.setTitle(\"Standard Draw\");\n    frame.setJMenuBar(createMenuBar());\n    frame.pack();\n    frame.requestFocusInWindow();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3406, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [66], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setPreferredSize(Dimension)", "jFrame.add(JPanel,GridBagConstraints)", "jFrame.add(JChromeTabbedPane,*)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [126, 347, 704, 1443], "configurationEnd": [245, 393, 749, 1505], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1511, "focalAPIEnd": 1527, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.add(PlayFrame,*)"], "useStart": [1533, 1806], "useEnd": [1559, 1850], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dukeboard/kevoree-corelibrary/tree/master/javase/org.kevoree.library.javase.adaptationSuperviser/src/main/java/org/kevoree/library/javase/adaptationsuperviser/AdaptationSuperviser.java", "rawCode": "  private void initGUI() {\n\n    // initialize GUI\n    rootFrame = new JFrame(\"AdaptationSuperviser @@@\" + getNodeName());\n    rootFrame.setPreferredSize(\n        new Dimension(AdaptationSuperviser.FRAME_WIDTH, AdaptationSuperviser.FRAME_HEIGHT));\n    // Tab content\n    tabContent = new JPanel();\n    tabContent.setLayout(new BorderLayout());\n    rootFrame.add(tabContent, BorderLayout.CENTER);\n\n    // TAB\n    tabbedPane = new JChromeTabbedPane(\"osx\", tabContent);\n    tabbedPane.setPreferredSize(new Dimension(50, 40));\n    tabbedPane.getSize(tabbedPane.getPreferredSize());\n    if (System.getProperty(\"os.name\").toUpperCase().startsWith(\"MAC\")) {\n      tabbedPane.setPaintBackground(false);\n    }\n    rootFrame.add(tabbedPane, BorderLayout.NORTH);\n\n    // TextLog Tab\n    textLogFrame = new ModelHistoryTextLogFrame();\n    textLogFrame.appendSystem(\"/***** CONSOLE INITIALIZED ********/ \");\n    Tab textLogTab = tabbedPane.addTab(\"Event log view\");\n    textLogTab.setInternPanel(textLogFrame);\n    textLogTab.setSelected(true);\n    tabs.put(\"textLogTab\", textLogTab);\n\n    // CurrentModel Tab\n    currentModelViewPanel = new KevoreeModelViewerPanel();\n    Tab currentModelViewTab = tabbedPane.addTab(\"Current model view\");\n    currentModelViewTab.setInternPanel(currentModelViewPanel);\n    currentModelViewTab.setSelected(true);\n    tabs.put(\"currentModelViewTab\", currentModelViewTab);\n\n    // rootFrame.setContentPane(textLogFrame);\n\n    rootFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n    rootFrame.pack();\n    rootFrame.setVisible(true);\n\n    // KevoreeLayout.getInstance().displayTab((JPanel)textLogFrame,getName());\n    if (Boolean.valueOf((String) getDictionary().get(\"allowStepByStep\"))) {\n      // add stepByStep, play and pause buttons\n      playFrame = new PlayFrame();\n      rootFrame.add(playFrame, BorderLayout.SOUTH);\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3407, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 232, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MathiasLoewe/BGPProgram/tree/master/BGPProgram/src/mainPackage/MainFrame.java", "rawCode": "    public void actionPerformed(ActionEvent event) {\n      mainContent.remove(topPanel);\n      mainContent.add(makeMenu());\n      mainContent.add(new Search(3, mainFrame).getTopPanel());\n      selectItemBooking(\"Ny booking\");\n      mainFrame.pack();\n    }\n"}, {"dataset": "pack", "exampleID": 3408, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [230], "initializationEnd": [269], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [371], "configurationEnd": [393], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 451, "focalAPIEnd": 463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [469], "useEnd": [491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/timaschew/jANN/tree/master/src/main/java/de/unikassel/ann/gui/HelpOverview.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  public static void createAndShowGUI() {\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"jANN-Funktionen Übersicht\");\n    // frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Add content to the window.\n    frame.getContentPane().add(new HelpOverview());\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3409, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [352], "initializationEnd": [377], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [383, 441], "configurationEnd": [435, 463], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 490, "focalAPIEnd": 502, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [508], "useEnd": [530], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/malaterre/GDCM/tree/master/Utilities/VTK/Examples/Java/AWTMedical3.java", "rawCode": "  public static void main(String s[]) {\n    if (s.length == 0) {\n      return; // need a filename here\n    }\n    File theFile = new File(s[0]);\n    // File theFile = new\n    // File(\"/Users/mmroden/Documents/MVSDownloadDirectory/Documents/1.2.840.113704.1.111.3384.1271766367.5/\");\n    AWTMedical3 panel = new AWTMedical3(theFile);\n\n    JFrame frame = new JFrame(\"AWTMedical3\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(\"Center\", panel);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3410, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(NodeStatusView)"], "configurationStart": [162], "configurationEnd": [202], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 235, "focalAPIEnd": 251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [257], "useEnd": [283], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wyattearp/iDectectProject/tree/master/src/edu/uc/cs/distsys/ui/NodeStatusViewThread.java", "rawCode": "  @Override\n  public void run() {\n    // Create and setup the content pane\n    nodeStatusView.setOpaque(true); // apparently you always have to set this true\n    viewFrame.setContentPane(nodeStatusView);\n\n    // Display the window\n    viewFrame.pack();\n    viewFrame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3411, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 159, "focalAPIEnd": 171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [177, 206], "useEnd": [200, 228], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aleksanb/fellesprosjektet/tree/master/src/gui/ParticipantList.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    // frame.getContentPane().add(new ParticipantList(new CalendarProgram()));\n    frame.pack();\n    frame.setSize(500, 630);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3412, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [158], "initializationEnd": [176], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.setVisible(boolean)"], "configurationStart": [183, 241, 302], "configurationEnd": [205, 263, 324], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 330, "focalAPIEnd": 342, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)"], "useStart": [348], "useEnd": [371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rachitpant/UAlbany-Client/tree/master/src/java/org/jivesoftware/spark/component/browser/EmbeddedBrowserViewer.java", "rawCode": "  public static void main(String[] args) {\n    EmbeddedBrowserViewer viewer = new EmbeddedBrowserViewer();\n    viewer.initializeBrowser();\n    JFrame frame = new JFrame(\"Test\");\n\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(viewer, BorderLayout.CENTER);\n    frame.setVisible(true);\n    frame.pack();\n    frame.setSize(600, 400);\n    viewer.loadURL(\"http://igniterealtime.org\");\n  }\n"}, {"dataset": "pack", "exampleID": 3413, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [160, 216], "configurationEnd": [182, 280], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 286, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [304], "useEnd": [326], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dameiers/SI2012/tree/master/src/gui/steps/VoyageMethodStep.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new VoyageMethodStep());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3414, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [354], "initializationEnd": [382], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.addWindowListener(WindowListener)", "jFrame.getContentPane()"], "configurationStart": [388, 484], "configurationEnd": [414, 506], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 522, "focalAPIEnd": 534, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [540, 702], "useEnd": [696, 724], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/clases-javiergarbedo-1daw/childout/tree/master/lib/src/com/toedter/calendar/demo/JCalendarDemo.java", "rawCode": "  /**\n   * Creates a JFrame with a JCalendarDemo inside and can be used for testing.\n   *\n   * @param s The command line arguments\n   */\n  public static void main(String[] s) {\n    WindowListener l =\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            System.exit(0);\n          }\n        };\n\n    JFrame frame = new JFrame(\"JCalendar Demo\");\n    frame.addWindowListener(l);\n\n    JCalendarDemo demo = new JCalendarDemo();\n    demo.init();\n    frame.getContentPane().add(demo);\n    frame.pack();\n    frame.setBounds(\n        200,\n        200,\n        (int) frame.getPreferredSize().getWidth() + 40,\n        (int) frame.getPreferredSize().getHeight() + 250);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3415, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [169], "initializationEnd": [181], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridLayout)", "jFrame.setPreferredSize(Dimension)", "jFrame.add(JPanel)", "jFrame.add(RightPanel)"], "configurationStart": [187, 230, 285, 621], "configurationEnd": [224, 278, 311, 637], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 644, "focalAPIEnd": 656, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()", "jFrame.remove(RightPanel)", "jFrame.add(RightPanel)", "jFrame.revalidate()", "jFrame.repaint()"], "useStart": [662, 720, 906, 984, 1008, 1034, 1193, 1288, 1312, 1338, 1497, 1607, 1631, 1657, 1816, 1880, 1904, 1930], "useEnd": [714, 742, 925, 1000, 1026, 1049, 1212, 1304, 1330, 1353, 1516, 1623, 1649, 1672, 1835, 1896, 1922, 1945], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apic6/MELT/tree/master/src/Viewer/LeftPanel.java", "rawCode": "  public static void main(String argv[]) {\n    Modeller model = new Modeller();\n    model.loadPapers();\n    QuestionPaper paper = model.getPaper(0);\n\n    JFrame frame = new JFrame();\n    frame.setLayout(new GridLayout(1, 0));\n    frame.setPreferredSize(new Dimension(1200, 800));\n\n    frame.add(new LeftPanel());\n\n    RightPanel panel = new RightPanel(paper);\n\n    // frame.add(new RightPanel(paper));\n    // frame.add(new RightPanel(paper.getSection(0)));\n    // frame.add(new RightPanel(paper.getSection(0).getSubSection(0)));\n    // frame.add(new RightPanel(paper.getSection(0).getSubSection(1).getQuestion(0)));\n\n    frame.add(panel);\n\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n\n    while (true) {\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper.getSection(0));\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper.getSection(0).getSubSection(0));\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper.getSection(0).getSubSection(0).getQuestion(0));\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        Thread.currentThread().interrupt();\n      }\n\n      frame.remove(panel);\n      panel = new RightPanel(paper);\n      frame.add(panel);\n      frame.revalidate();\n      frame.repaint();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3416, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)"], "configurationStart": [80], "configurationEnd": [107], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 113, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [131], "useEnd": [153], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/msnorth/cs2340_mule/tree/master/edu/gatech/cs2340/test/InGameMenuTest.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.add(new InGameMenu());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3417, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [142], "initializationEnd": [154], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [160, 211], "configurationEnd": [182, 275], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 281, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [299], "useEnd": [321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ivanstojkovic/doodle/tree/master/feeder/src/main/java/at/tuwien/sbc/feeder/gui/panels/SearchPanel.java", "rawCode": "  /** Auto-generated main method to display this JPanel inside a new JFrame. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().add(new SearchPanel());\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3418, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [193], "initializationEnd": [217], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [223], "configurationEnd": [245], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 273, "focalAPIEnd": 285, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [291], "useEnd": [313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DeKaN/mediateka/tree/master/jcalendar/src/com/toedter/components/JSpinField.java", "rawCode": "  /**\n   * Creates a JFrame with a JSpinField inside and can be used for testing.\n   *\n   * @param s The command line arguments\n   */\n  public static void main(String[] s) {\n    JFrame frame = new JFrame(\"JSpinField\");\n    frame.getContentPane().add(new JSpinField());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3419, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [80, 103], "configurationEnd": [97, 155], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 161, "focalAPIEnd": 173, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [179, 218], "useEnd": [212, 240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drossglance/glance-server/tree/master/src/test/java/uk/frequency/glance/test/PositionTraceDebug.java", "rawCode": "  static void showOnFrame(JPanel canvas) {\n    JFrame frame = new JFrame();\n    frame.add(canvas);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3420, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [122], "initializationEnd": [192], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.setPreferredSize(Dimension)"], "configurationStart": [199, 257, 305], "configurationEnd": [251, 279, 352], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 358, "focalAPIEnd": 370, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [376, 415], "useEnd": [409, 437], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alessandro-aglietti/itis-leonardo-da-vinci/tree/master/swingset3/src/com/sun/swingset3/demos/tree/TreeDemo.java", "rawCode": "  /** main method allows us to run as a standalone demo. */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(TreeDemo.class.getAnnotation(DemoProperties.class).value());\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new TreeDemo());\n    frame.setPreferredSize(new Dimension(800, 600));\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3421, "initialization": ["JFrame jFrame = new ShowUIDefaults(String)"], "initializationStart": [58], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [97], "configurationEnd": [145], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 151, "focalAPIEnd": 159, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [165, 200], "useEnd": [194, 218], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/branches/openvpn-als/ui/src/com/sshtools/ui/swing/ShowUIDefaults.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new ShowUIDefaults(\"UI Defaults\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.pack();\n    f.setLocationRelativeTo(null);\n    f.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3422, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [65], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.addWindowListener(WindowListener)"], "configurationStart": [156, 215], "configurationEnd": [178, 268], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 298, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.show()"], "useStart": [316], "useEnd": [328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/patsgit/Click-OLSR/tree/master/apps/ClickController/ClickController.java", "rawCode": "  public static ClickController newWindow() {\n    JFrame frame = new JFrame(\"Click Controller\");\n    ClickController cntr = new ClickController(frame);\n    frame.getContentPane().add(cntr, BorderLayout.CENTER);\n    frame.addWindowListener(new CloseWindowAdapter(cntr));\n    cntr.enableClose();\n    frame.pack();\n    frame.show();\n    return cntr;\n  }\n"}, {"dataset": "pack", "exampleID": 3423, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [131], "initializationEnd": [199], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setResizable(boolean)", "jFrame.setLayout(GridLayout)", "jFrame.add(JScrollPane,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)"], "configurationStart": [220, 292, 328, 1424, 2151], "configurationEnd": [286, 322, 369, 1475, 2202], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 2321, "focalAPIEnd": 2338, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.pack()", "jFrame.setBounds(int,int,int,int)", "jFrame.setVisible(boolean)"], "useStart": [2682, 3012, 3218], "useEnd": [2699, 3212, 3245], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cbsa-informatik-uni-siegen/gtitool/tree/master/start/source/de/unisiegen/gtitool/start/Start.java", "rawCode": "  /** Shows the java version error {@link JFrame}. */\n  public final void showJavaVersionError() {\n    JFrame jFrameInfo =\n        new JFrame(Messages.getString(\"JavaVersion.Title\", new Object[] {})); // $NON-NLS-1$\n    jFrameInfo.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    jFrameInfo.setResizable(false);\n    jFrameInfo.setLayout(new GridBagLayout());\n\n    GridBagConstraints gridBagConstraints;\n\n    JScrollPane jScrollPaneInfo = new JScrollPane();\n    JTextArea jTextAreaInfo = new JTextArea();\n    JButton jGTIButtonClose = new JButton();\n\n    jScrollPaneInfo.setBorder(null);\n    jTextAreaInfo.setFocusable(false);\n    jTextAreaInfo.setFont(new Font(\"Dialog\", 1, 12)); // $NON-NLS-1$\n    jTextAreaInfo.setOpaque(false);\n    jTextAreaInfo.setBorder(null);\n    jTextAreaInfo.setLineWrap(true);\n    jTextAreaInfo.setWrapStyleWord(true);\n    jTextAreaInfo.setText(\n        Messages.getString(\n            \"JavaVersion.Message\", // $NON-NLS-1$\n            new Object[] {new Double(this.currentJavaVersion), new Double(MIN_JAVA_VERSION)}));\n    jScrollPaneInfo.setViewportView(jTextAreaInfo);\n\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 0;\n    gridBagConstraints.fill = GridBagConstraints.BOTH;\n    gridBagConstraints.weightx = 1.0;\n    gridBagConstraints.weighty = 1.0;\n    gridBagConstraints.insets = new Insets(16, 16, 5, 16);\n    jFrameInfo.add(jScrollPaneInfo, gridBagConstraints);\n\n    jGTIButtonClose.setFocusable(false);\n    jGTIButtonClose.setText(\n        Messages.getString(\n            \"JavaVersion.Close\", // $NON-NLS-1$\n            new Object[] {}));\n    jGTIButtonClose.addActionListener(\n        new ActionListener() {\n\n          public void actionPerformed(ActionEvent event) {\n            System.exit(0);\n          }\n        });\n\n    gridBagConstraints = new GridBagConstraints();\n    gridBagConstraints.gridx = 0;\n    gridBagConstraints.gridy = 1;\n    gridBagConstraints.fill = GridBagConstraints.NONE;\n    gridBagConstraints.weightx = 0.0;\n    gridBagConstraints.weighty = 0.0;\n    gridBagConstraints.insets = new Insets(5, 16, 16, 16);\n    jFrameInfo.add(jGTIButtonClose, gridBagConstraints);\n\n    int rows = 3;\n    int columns = 16;\n    jTextAreaInfo.setRows(rows);\n    jTextAreaInfo.setColumns(columns);\n    jFrameInfo.pack();\n\n    int heightViewport = jScrollPaneInfo.getViewport().getBounds().height;\n    int heightView = jScrollPaneInfo.getViewport().getView().getBounds().height;\n\n    while ((rows < 10) && (heightView > heightViewport)) {\n      rows++;\n      columns = columns + 2;\n      jTextAreaInfo.setRows(rows);\n      jTextAreaInfo.setColumns(columns);\n      jFrameInfo.pack();\n      heightViewport = jScrollPaneInfo.getViewport().getBounds().height;\n      heightView = jScrollPaneInfo.getViewport().getView().getBounds().height;\n    }\n\n    int screenWidth = Toolkit.getDefaultToolkit().getScreenSize().width;\n    int screenHeight = Toolkit.getDefaultToolkit().getScreenSize().height;\n    jFrameInfo.setBounds(\n        (screenWidth / 2) - (jFrameInfo.getWidth() / 2),\n        (screenHeight / 2) - (jFrameInfo.getHeight() / 2),\n        jFrameInfo.getWidth(),\n        jFrameInfo.getHeight());\n    jFrameInfo.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3424, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [76], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [110, 555], "configurationEnd": [174, 577], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 591, "focalAPIEnd": 603, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocation(int,int)", "jFrame.setVisible(boolean)"], "useStart": [609, 674], "useEnd": [636, 696], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Unidata/thredds/tree/master/ui/src/test/java/ucar/util/prefs/ui/TestPanel2.java", "rawCode": "  /** test */\n  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Test PrefPanel\");\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n\n    TestPanel2 tp = new TestPanel2();\n    // PrefPanel pp = tp.makeTestPanelOld(null);\n    // PrefPanel pp = tp.makeTestPanel(null);\n    // PrefPanel pp = tp.makeTestPanelFirstHeading(null);\n    // PrefPanel pp = tp.make3columns();\n    PrefPanel pp = tp.make3columnsOneLong();\n\n    // PrefPanel pp = tp.makeComboBox();\n    // PrefPanel pp = tp.makeDialog().getPrefPanel();\n\n    frame.getContentPane().add(pp);\n    frame.pack();\n    frame.setLocation(300, 300);\n    // frame.setSize(300, 300);\n    frame.setVisible(true);\n\n    PrefPanel.Dialog d = tp.makeDialog();\n    d.finish();\n    d.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3425, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [90], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [108, 162], "configurationEnd": [156, 180], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 229, "focalAPIEnd": 237, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [243], "useEnd": [261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rortian/jung2/tree/master/jung-samples/src/main/java/edu/uci/ics/jung/samples/AnnotationsDemo.java", "rawCode": "  /** a driver for this demo */\n  public static void main(String[] args) {\n    JFrame f = new JFrame();\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().add(new AnnotationsDemo<String, Number>());\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3426, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(TransferMonitorPanel)"], "configurationStart": [371], "configurationEnd": [386], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 392, "focalAPIEnd": 404, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [410], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NLeSC/vbrowser/tree/master/source/nl.esciencecenter.vlet.gui.vbrowser/testsrc/monitoring/TestTransferDialogNew.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    // dimmy:\n    VFSTransfer transfer =\n        new VFSTransfer(\n            null,\n            \"Transfer\",\n            new VRL(\"file\", \"host\", \"/source\"),\n            new VRL(\"file\", \"host\", \"/dest\"),\n            true);\n\n    TransferMonitorPanel inst = new TransferMonitorPanel(transfer);\n\n    frame.add(inst);\n    frame.pack();\n    frame.setVisible(true);\n\n    int max = 1000 * 1024;\n    int dif = 50 * 1024;\n    int step = 1024;\n\n    transfer.startTask(\"TransferTask\", max);\n\n    for (int i = 0; i <= max; i += step) {\n      if (transfer.isCancelled()) {\n        transfer.logPrintf(\"\\n*** CANCELLED ***\\n\");\n        break;\n      }\n\n      String subTaskName = \"Transfer #\" + i / dif;\n\n      if ((i % dif) == 0) {\n        transfer.startSubTask(subTaskName, dif);\n        transfer.logPrintf(\"--- New Transfer ---\\n -> nr=\" + i / dif + \"\\n\");\n      }\n\n      transfer.updateTaskDone(i);\n      transfer.updateSourcesDone(i / dif);\n      transfer.updateSubTaskDone(subTaskName, i % dif);\n\n      // Following method can only called by package members!\n      // Do update here:\n      inst.update(false);\n\n      try {\n        Thread.sleep(50);\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      }\n    }\n\n    inst.update(true);\n\n    transfer.endTask(null);\n  }\n"}, {"dataset": "pack", "exampleID": 3427, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [222], "initializationEnd": [244], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(JPanel)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [1251, 1289], "configurationEnd": [1282, 1344], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1350, "focalAPIEnd": 1362, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1368], "useEnd": [1390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rex1fernando/linewars/tree/master/trunk/Line_Wars/src/editor/BigFrameworkGuy.java", "rawCode": "  public JList showMultiSelectionBox(\n      List<ConfigType> configs,\n      String frameTitle,\n      String mainButton,\n      final ActionListener callback,\n      boolean allowMultipleSelection) {\n    final JFrame frame = new JFrame(frameTitle);\n\n    typeMaxWidth = 0;\n    JList list = createMulitSelectionList(configs, allowMultipleSelection);\n    JScrollPane scroller = new JScrollPane(list);\n    scroller.setPreferredSize(new Dimension(350, 450));\n\n    JPanel mainPanel = new JPanel();\n    mainPanel.setLayout(new BorderLayout());\n    mainPanel.add(scroller, BorderLayout.CENTER);\n\n    JPanel buttonPanel = new JPanel();\n    JButton delete = new JButton(mainButton);\n    delete.addActionListener(\n        new ActionListener() {\n\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            callback.actionPerformed(e);\n            frame.dispose();\n          }\n        });\n\n    JButton cancel = new JButton(\"Cancel\");\n    cancel.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            frame.dispose();\n          }\n        });\n\n    buttonPanel.add(delete);\n    buttonPanel.add(cancel);\n\n    mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n    frame.setContentPane(mainPanel);\n\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n\n    return list;\n  }\n"}, {"dataset": "pack", "exampleID": 3428, "initialization": ["JFrame jFrame = createFrame()"], "initializationStart": [212], "initializationEnd": [225], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setTitle(String)", "jFrame.getContentPane()"], "configurationStart": [231, 258], "configurationEnd": [252, 280], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 322, "focalAPIEnd": 334, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [340], "useEnd": [362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ctn-waterloo/nengo_1.4/tree/master/simulator/src/java/main/ca/nengo/plot/Plotter.java", "rawCode": "  /**\n   * Display a new plot.\n   *\n   * @param plotPanel A panel containng the plot image\n   * @param title The plot title\n   */\n  public void showPlot(JPanel plotPanel, String title) {\n    final JFrame frame = createFrame();\n    frame.setTitle(title);\n    frame.getContentPane().add(plotPanel, BorderLayout.CENTER);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3429, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [754], "initializationEnd": [766], "hasTryCatch": 1, "exceptionType": "ImgLibException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 644, "tryExpressionEnd": 648, "tryBlockStart": 644, "tryBlockEnd": 921, "catchExpressionStart": 861, "catchExpressionEnd": 887, "catchBlockStart": 861, "catchBlockEnd": 921, "exceptionHandlingCallStart": [895], "exceptionHandlingCallEnd": [914], "configuration": ["jFrame.add(JPanel)"], "configurationStart": [774], "configurationEnd": [811], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 819, "focalAPIEnd": 827, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [835], "useEnd": [853], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mahogny/Endrov/tree/master/ev/endrov/imglib/ImglibTest.java", "rawCode": "  public static void main(String[] args) {\n\n    EvLog.addListener(new EvLogStdout());\n    EndrovCore.loadPlugins();\n\n    EvData data = EvData.loadFile(new File(\"/home/mahogny/Desktop/4.png\"));\n    EvChannel ch = data.getIdObjectsRecursive(EvChannel.class).values().iterator().next();\n    EvStack stack = ch.getStack(ch.getFirstFrame());\n\n    stack = new EvOpImageConvertPixel(EvPixelsType.FLOAT).exec1(null, stack);\n\n    ImgPlus<FloatType> imp = EvStackAdapter.wrapEvStack(stack);\n\n    Img<FloatType> image = imp.getImg();\n\n    Img<FloatType> out = Gauss.toFloat(8, image);\n\n    FloatEvStack<FloatType> s2 = (FloatEvStack<FloatType>) out;\n\n    try {\n      BufferedImage bim = s2.getEvStack().getPlane(0).getPixels().quickReadOnlyAWT();\n\n      JFrame f = new JFrame();\n      f.add(new JLabel(new ImageIcon(bim)));\n      f.pack();\n      f.setVisible(true);\n    } catch (ImgLibException e) {\n      e.printStackTrace();\n    }\n    /*\n    System.out.println();\n    System.exit(0);\n    */\n  }\n"}, {"dataset": "pack", "exampleID": 3430, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [62], "initializationEnd": [94], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setPreferredSize(Dimension)", "jFrame.getContentPane()"], "configurationStart": [100, 313, 367], "configurationEnd": [152, 361, 389], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 410, "focalAPIEnd": 422, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [428], "useEnd": [450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zyzzyplyx/secret-octo-cyril/tree/master/src/apps/server/visualization/VisualizationPanel.java", "rawCode": "  public static void main(String args[]) {\n    JFrame frame = new JFrame(\"Visualization Test\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    Game theGame = GameRepository.getDefaultRepository().getGame(\"biddingTicTacToe\");\n    VisualizationPanel theVisual = new VisualizationPanel(theGame);\n    frame.setPreferredSize(new Dimension(1200, 900));\n    frame.getContentPane().add(theVisual);\n    frame.pack();\n    frame.setVisible(true);\n\n    StateMachine theMachine = new ProverStateMachine();\n    theMachine.initialize(theGame.getRules());\n    try {\n      MachineState theCurrentState = theMachine.getInitialState();\n      do {\n        theVisual.observe(new ServerNewGameStateEvent(theCurrentState));\n        theCurrentState = theMachine.getRandomNextState(theCurrentState);\n        Thread.sleep(2750);\n        System.out.println(\"State: \" + theCurrentState);\n      } while (!theMachine.isTerminal(theCurrentState));\n      theVisual.observe(new ServerNewGameStateEvent(theCurrentState));\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3431, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)", "jFrame.dispose()"], "configurationStart": [302, 331, 399, 483], "configurationEnd": [323, 391, 426, 503], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 828, "focalAPIEnd": 845, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(Window)"], "useStart": [853], "useEnd": [891], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/javax/swing/border/Test6981576.java", "rawCode": "  public void run() {\n    if (this.infos == null) {\n      this.infos = UIManager.getInstalledLookAndFeels();\n      Thread.currentThread().setUncaughtExceptionHandler(this);\n      JPanel panel = new JPanel();\n      panel.setBorder(this);\n      this.frame = new JFrame(getClass().getSimpleName());\n      this.frame.add(panel);\n      this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      this.frame.setVisible(true);\n    }\n    if (this.index == this.infos.length) {\n      this.frame.dispose();\n    } else {\n      LookAndFeelInfo info = this.infos[this.index % this.infos.length];\n      try {\n        UIManager.setLookAndFeel(info.getClassName());\n      } catch (Exception exception) {\n        System.err.println(\"could not change look and feel\");\n      }\n      SwingUtilities.updateComponentTreeUI(this.frame);\n      this.frame.pack();\n      this.frame.setLocationRelativeTo(null);\n      this.index++;\n      SwingUtilities.invokeLater(this);\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3432, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["showMessageDialog(JFrame,String)"], "tryExpressionStart": 210, "tryExpressionEnd": 214, "tryBlockStart": 210, "tryBlockEnd": 555, "catchExpressionStart": 444, "catchExpressionEnd": 467, "catchBlockStart": 444, "catchBlockEnd": 555, "exceptionHandlingCallStart": [477], "exceptionHandlingCallEnd": [546], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(chooser.showSaveDialog(jFrame,)!=JFileChooser.APPROVE_OPTION)", "guardType": "IF {", "guardExpressionStart": 58, "guardExpressionEnd": 123, "guardBlockStart": 58, "guardBlockEnd": 149, "focalAPI": " = jFrame.pack()", "focalAPIStart": 422, "focalAPIEnd": 434, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["showMessageDialog(jFrame,String)"], "useStart": [477], "useEnd": [546], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gortega017/Scrips/tree/master/projects/Project4/src/DrawingPanel.java", "rawCode": "    public void setImage2() {\n      checkChooser();\n      if (chooser.showSaveDialog(frame) != JFileChooser.APPROVE_OPTION) {\n        return;\n      }\n\n      File selectedFile = chooser.getSelectedFile();\n      try {\n        setImage2(selectedFile.toString());\n        countDiffPixels();\n        diffPixelsLabel.setText(\"(\" + numDiffPixels + \" pixels differ)\");\n        image2Label.setText(selectedFile.getName());\n        frame.pack();\n      } catch (IOException ex) {\n        JOptionPane.showMessageDialog(frame, \"Unable to set image 2:\\n\" + ex);\n      }\n    }\n"}, {"dataset": "pack", "exampleID": 3433, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["showMessageDialog(JFrame,String)"], "tryExpressionStart": 210, "tryExpressionEnd": 214, "tryBlockStart": 210, "tryBlockEnd": 555, "catchExpressionStart": 444, "catchExpressionEnd": 467, "catchBlockStart": 444, "catchBlockEnd": 555, "exceptionHandlingCallStart": [477], "exceptionHandlingCallEnd": [546], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(chooser.showSaveDialog(jFrame,)!=JFileChooser.APPROVE_OPTION)", "guardType": "IF {", "guardExpressionStart": 58, "guardExpressionEnd": 123, "guardBlockStart": 58, "guardBlockEnd": 149, "focalAPI": " = jFrame.pack()", "focalAPIStart": 422, "focalAPIEnd": 434, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["showMessageDialog(jFrame,String)"], "useStart": [477], "useEnd": [546], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gortega017/Scrips/tree/master/projects/Project4/src/DrawingPanel.java", "rawCode": "    public void setImage1() {\n      checkChooser();\n      if (chooser.showSaveDialog(frame) != JFileChooser.APPROVE_OPTION) {\n        return;\n      }\n\n      File selectedFile = chooser.getSelectedFile();\n      try {\n        setImage1(selectedFile.toString());\n        countDiffPixels();\n        diffPixelsLabel.setText(\"(\" + numDiffPixels + \" pixels differ)\");\n        image1Label.setText(selectedFile.getName());\n        frame.pack();\n      } catch (IOException ex) {\n        JOptionPane.showMessageDialog(frame, \"Unable to set image 1:\\n\" + ex);\n      }\n    }\n"}, {"dataset": "pack", "exampleID": 3434, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [110], "initializationEnd": [143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)"], "configurationStart": [149, 216], "configurationEnd": [210, 249], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 255, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [273, 312], "useEnd": [306, 334], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/student2ua/myTaning/tree/master/src/com/tor/swing/table/RowSorterExample.java", "rawCode": "  public static void createAndShowGUI() {\n    JFrame.setDefaultLookAndFeelDecorated(true);\n    JFrame frame = new JFrame(\"Table Row Rendering\");\n    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    frame.add(new RowSorterExample());\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3435, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setLocation(int,int)", "jFrame.setUndecorated(boolean)"], "configurationStart": [963, 1162, 1508], "configurationEnd": [1020, 1190, 1539], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 2653, "focalAPIEnd": 2670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [2691], "useEnd": [2718], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/corintio/opentestbed/tree/master/src/main/java/ww10/gui/SwingGUI.java", "rawCode": "  void initialize() {\n\n    statusbar = new javax.swing.JProgressBar();\n    actionPanel = new ActionPanel(dataModel);\n    averageProfitPanel = new AverageProfitPanel(dataModel);\n\n    // set up frame\n    frame = new JFrame(\"Wetenschapsweek\");\n    JSplitPane splitPane = new javax.swing.JSplitPane();\n\n    JTabbedPane tabs = new javax.swing.JTabbedPane();\n\n    frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\n\n    splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);\n\n    splitPane.setBottomComponent(tabs);\n    splitPane.setLeftComponent(statusbar);\n\n    frame.getContentPane().add(splitPane);\n\n    // this.progressFrame.setExtendedState(Frame.MAXIMIZED_BOTH);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    // this.progressFrame.setSize(1200, 800);\n    this.frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    statusbar.setStringPainted(true);\n    // setting this causes gnome bars to be on top\n    // this.progressFrame.setResizable(false);\n    this.frame.setLocation(0, 0);\n    // Toolkit tk = Toolkit.getDefaultToolkit();\n    // int xSize = ((int) tk.getScreenSize().getWidth());\n    // int ySize = ((int) tk.getScreenSize().getHeight());\n    // this.progressFrame.setSize(xSize, ySize);\n    if (!this.frame.isDisplayable()) {\n      // Can only do this when the frame is not visible\n      this.frame.setUndecorated(true);\n    }\n    GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();\n    if (gd.isFullScreenSupported()) {\n      gd.setFullScreenWindow(this.frame);\n    } else {\n      // Can't run fullscreen, need to bodge around it (setSize to screen size, etc)\n    }\n    // this.frame.addKeyListener(new KeyListener() {\n    //\n    // public void keyPressed(KeyEvent e) {\n    // }\n    //\n    // public void keyReleased(KeyEvent e) {\n    // }\n    //\n    // public void keyTyped(KeyEvent e) {\n    // if (e.getKeyChar() == 'f') {\n    // // progressFrame.setResizable(false);\n    // // // progressFrame.setUndecorated(true);\n    // // GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n    // // GraphicsDevice graphicsDevice = ge.getDefaultScreenDevice();\n    // // graphicsDevice.setFullScreenWindow(progressFrame);\n    // // //myDevice.setFullScreenWindow(null);\n    // } else if (e.getKeyChar() == 'x') {\n    // System.exit(0);\n    // }\n    // }\n    //\n    // });\n    tabs.addTab(\"Average Profit\", averageProfitPanel);\n    tabs.addTab(\"Actions\", actionPanel);\n\n    this.frame.pack(); // not needed?\n    this.frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3436, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [492], "initializationEnd": [535], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.getContentPane()"], "configurationStart": [541, 599, 660], "configurationEnd": [593, 621, 682], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 717, "focalAPIEnd": 729, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [735], "useEnd": [757], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninesunqian/excitedmind/tree/master/prefuse-demos/src/main/java/prefuse/demos/ScatterPlot.java", "rawCode": "  public static void main(String[] argv) {\n    String data = \"/fisher.iris.txt\";\n    String xfield = \"SepalLength\";\n    String yfield = \"PetalLength\";\n    String sfield = \"Species\";\n    if (argv.length >= 3) {\n      data = argv[0];\n      xfield = argv[1];\n      yfield = argv[2];\n      sfield = (argv.length > 3 ? argv[3] : null);\n    }\n\n    final ScatterPlot sp = demo(data, xfield, yfield, sfield);\n    JToolBar toolbar = getEncodingToolbar(sp, xfield, yfield, sfield);\n\n    JFrame frame = new JFrame(\"p r e f u s e | s c a t t e r\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(toolbar, BorderLayout.NORTH);\n    frame.getContentPane().add(sp, BorderLayout.CENTER);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3437, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [325], "initializationEnd": [337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setPreferredSize(Dimension)", "jFrame.setTitle(String)", "jFrame.setLocation(int,int)", "jFrame.setContentPane(JTabbedPaneOrganizer)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [343, 394, 423, 492, 521], "configurationEnd": [388, 417, 447, 515, 570], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 576, "focalAPIEnd": 585, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [591], "useEnd": [610], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/Nebraska/src/nebraska/Nebraska.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    if (System.getProperty(\"os.name\").contains(\"Windows\")) {\n      UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel\");\n    }\n    // UIManager.setLookAndFeel(\"com.jgoodies.looks.plastic.PlasticXPLookAndFeel\");\n    new Constants();\n    jf = new JFrame();\n    jf.setPreferredSize(new Dimension(1000, 700));\n    jf.setTitle(\"Nebraska\");\n    jf.setLocation(200, 200);\n    jtbo = new JTabbedPaneOrganizer();\n    jf.setContentPane(jtbo);\n    jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    jf.pack();\n    jf.setVisible(true);\n    starteOfficeApplication();\n    SwingUtilities.invokeLater(\n        new Runnable() {\n          public void run() {\n            jtbo.setHeader(0);\n          }\n        });\n  }\n"}, {"dataset": "pack", "exampleID": 3438, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [246], "initializationEnd": [258], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 44, "tryExpressionEnd": 48, "tryBlockStart": 44, "tryBlockEnd": 526, "catchExpressionStart": 403, "catchExpressionEnd": 435, "catchBlockStart": 403, "catchBlockEnd": 469, "exceptionHandlingCallStart": [443], "exceptionHandlingCallEnd": [462], "configuration": ["jFrame.getContentPane()"], "configurationStart": [266], "configurationEnd": [285], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 301, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [318, 345], "useEnd": [337, 394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/markus1978/clickwatch/tree/master/external/edu.uci.ics.jung/src/samples/graph/southern/TestSouthernWomenBipartite.java", "rawCode": "  public static void main(String[] s) {\n    try {\n      FileReader fr = new FileReader(\"samples/datasets/southern_women_data.txt\");\n\n      System.out.println(\"loading : \");\n\n      JPanel jp = new TestSouthernWomenBipartite(fr);\n      JFrame jf = new JFrame();\n      jf.getContentPane().add(jp);\n      jf.pack();\n      jf.setVisible(true);\n      jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    } catch (FileNotFoundException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3439, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [445], "initializationEnd": [457], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [465, 534], "configurationEnd": [526, 562], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 603, "focalAPIEnd": 621, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [629], "useEnd": [657], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PerEr/ExtensionTest/tree/master/apps/widgetloader/src/main/java/com/example/prototype/widgetloader/view/TestFrame.java", "rawCode": "  private void onWidgetSelected(String text) {\n    String widgetName = text;\n    String parameters = \"\";\n\n    int ix = text.indexOf(\",\");\n    if (ix > 0) {\n      widgetName = text.substring(0, ix);\n      parameters = text.substring(ix + 1);\n    }\n\n    JComponent widget =\n        widgetRegistry.instantiate(widgetName, PropertyBuilder.fromString(parameters));\n    if (widget != null) {\n      widget.setVisible(true);\n\n      JFrame widgetFrame = new JFrame();\n      widgetFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      widgetFrame.getContentPane().add(widget, BorderLayout.CENTER);\n      widgetFrame.pack();\n      widgetFrame.setVisible(true);\n    } else {\n      logError(\"Failed to instantiate widget \" + widgetName);\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3440, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [230], "initializationEnd": [252], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)"], "configurationStart": [258, 352], "configurationEnd": [310, 377], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 411, "focalAPIEnd": 423, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [429], "useEnd": [451], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wox2/migrace_databaze/tree/master/skola/Fel_bc/2.semestr/PJV/NetBeansProjects/NetBeansProjects/graphics/src/graphics/TextDemo.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  private static void createAndShowGUI() {\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"TextDemo\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Add contents to the window.\n    frame.add(new TextDemo());\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3441, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [368], "initializationEnd": [398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setContentPane(JDesktopPane)", "jFrame.setMinimumSize(Dimension)"], "configurationStart": [404, 509, 583], "configurationEnd": [456, 538, 609], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 3217, "focalAPIEnd": 3229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [3235], "useEnd": [3257], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mattloidolt/CS414/tree/master/A4/src/core/KitchenDisplay.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the\n   * event-dispatching thread.\n   */\n  private static void createAndShowGUI(final String[] args) {\n    final Dimension size = Toolkit.getDefaultToolkit().getScreenSize();\n    Color background = new Color(0, 0, 0);\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"PIZZA_STORE_NAME\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    JDesktopPane desktop = new JDesktopPane();\n    frame.setContentPane(desktop);\n    desktop.setBackground(background);\n    frame.setMinimumSize(size);\n    desktop.setLayout(new GridBagLayout()); // this is the framing structure\n    GridBagConstraints gBC = new GridBagConstraints();\n    gBC.fill = GridBagConstraints.HORIZONTAL;\n    gBC.weightx = .75;\n    gBC.gridx = 0;\n    gBC.gridy = 0;\n    JLabel heading1 = new JLabel(\"<html><h1>ORDER</h1><hr></html>\");\n    JLabel heading2 = new JLabel(\"<html><h1>COMPLETE?</h1><hr></html>\");\n    heading1.setForeground(Color.white);\n    heading2.setForeground(Color.white);\n\n    desktop.add(heading1, gBC);\n    gBC.gridx = 1;\n    gBC.weightx = .25;\n    desktop.add(heading2, gBC);\n    gBC.gridx = 0;\n    gBC.weightx = .75;\n\n    //////// adding all the orders to the screen /////////\n    DirectoryScanner scanner = new DirectoryScanner();\n    scanner.setIncludes(new String[] {\"**/*.POS\"});\n    scanner.setBasedir(\".\");\n    scanner.setCaseSensitive(false);\n    scanner.scan();\n    final String[] files = scanner.getIncludedFiles();\n    for (int i = 0; i < files.length; i++) {\n      BufferedReader in;\n      String order = \"<html><h2>\";\n      try {\n        in = new BufferedReader(new FileReader(files[i]));\n        order += in.readLine() + \"</h2><table>\";\n        String line = in.readLine();\n        int lineNum = 1;\n        while (line != null) {\n          if (lineNum != 1) {\n            order += \"<tr>\";\n            if (lineNum == 2) order += \"Phone: \";\n            order += line + \"</tr>\";\n          }\n          lineNum++;\n          line = in.readLine();\n        }\n        order += \"</table></html>\";\n        in.close();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n      JLabel o = new JLabel(order);\n      o.setForeground(Color.white);\n      gBC.gridy++;\n      desktop.add(o, gBC);\n    }\n    /////////////////////////////////////////////////////////\n\n    ///// adding buttons for marking orders as complete ////\n    gBC.gridy = 0;\n    gBC.gridx = 1;\n    gBC.weightx = .25;\n    for (int i = 0; i < files.length; i++) {\n      JButton done = new JButton(\"Done\");\n      done.setPreferredSize(new Dimension(100, 75));\n      final int k = i;\n      done.addActionListener(\n          new ActionListener() {\n            public void actionPerformed(ActionEvent e) {\n              // on button press...\n              File f = new File(files[k]);\n              boolean success = f.delete();\n              if (!success) throw new IllegalArgumentException(\"Delete: deletion failed\");\n              else restartProgram(args);\n            }\n          });\n\n      gBC.gridy++;\n      desktop.add(done, gBC);\n    }\n    ////////////////////////////////////////////////////////\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3442, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 30, "focalAPIEnd": 44, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setBounds(int,int,int,int)", "jFrame.setSize(int,int)", "jFrame.setLocation(int,int)"], "useStart": [301, 1099, 1298], "useEnd": [458, 1124, 1486], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DealerDotCom/grinder/tree/master/grinder-core/src/main/java/net/grinder/console/swingui/FrameBounds.java", "rawCode": "  public void restore() {\n    m_frame.pack();\n\n    final Rectangle savedBounds = m_properties.getFrameBounds();\n    final GraphicsEnvironment graphicsEnvironment =\n        GraphicsEnvironment.getLocalGraphicsEnvironment();\n\n    boolean setDefaultLocation = true;\n\n    if (savedBounds != null) {\n      m_frame.setBounds(\n          savedBounds.x,\n          savedBounds.y,\n          Math.max(savedBounds.width, 300),\n          Math.max(savedBounds.height, 200));\n\n      // Check whether the saved bounds are visible on one of our screens,\n      // if not we'll reset the location.\n      final GraphicsDevice[] devices = graphicsEnvironment.getScreenDevices();\n\n      FIND_CONFIGURATION:\n      for (int i = 0; i < devices.length; ++i) {\n        final GraphicsConfiguration[] configurations = devices[i].getConfigurations();\n\n        for (int j = 0; j < configurations.length; ++j) {\n          if (savedBounds.intersects(shrinkRectangle(configurations[j].getBounds(), 50))) {\n            setDefaultLocation = false;\n            break FIND_CONFIGURATION;\n          }\n        }\n      }\n\n    } else {\n      m_frame.setSize(900, 600);\n    }\n\n    final Rectangle defaultScreen =\n        graphicsEnvironment.getDefaultScreenDevice().getDefaultConfiguration().getBounds();\n\n    if (setDefaultLocation) {\n      m_frame.setLocation(\n          defaultScreen.x + defaultScreen.width / 2 - m_frame.getSize().width / 2,\n          defaultScreen.y + defaultScreen.height / 2 - m_frame.getSize().height / 2);\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3443, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.swing.JFrame.setVisible(boolean)", "jFrame.setLocationRelativeTo(Window)"], "configurationStart": [172, 202], "configurationEnd": [196, 237], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 243, "focalAPIEnd": 257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/majorProject/IAnnotate/tree/master/src/iannotate/gui/MainFrame.java", "rawCode": "  private void jMenuItem2ActionPerformed(\n      java.awt.event.ActionEvent evt) { // GEN-FIRST:event_jMenuItem2ActionPerformed\n    // TODO add your handling code here:\n    Arrange.setVisible(true);\n    Arrange.setLocationRelativeTo(null);\n    Arrange.pack();\n  } // GEN-LAST:event_jMenuItem2ActionPerformed\n"}, {"dataset": "pack", "exampleID": 3444, "initialization": ["JFrame jFrame = new GameFrame(*)"], "initializationStart": [187], "initializationEnd": [234], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)"], "configurationStart": [1444], "configurationEnd": [1477], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1484, "focalAPIEnd": 1501, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [1507, 1551], "useEnd": [1545, 1578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Int-Elegance/M.U.L.E.-2340/tree/master/MainProject/src/TownView.java", "rawCode": "  /**\n   * Displays the store view for the game\n   *\n   * @return true if the store can be displayed\n   */\n  private boolean storeview() {\n\n    frame.setVisible(false);\n\n    storeframe = new GameFrame(currentTurn.getRound().getGame());\n\n    ImageIcon storeIcon = new ImageIcon(getClass().getResource(\"resources/storeview.jpg\"));\n    JLabel storeImage = new JLabel(storeIcon);\n    int storeWidth = storeIcon.getIconWidth();\n    int storeHeight = storeIcon.getIconHeight();\n\n    JLayeredPane layeredPane = new JLayeredPane();\n    layeredPane.setOpaque(false);\n    layeredPane.setPreferredSize(new Dimension(storeWidth, storeHeight));\n\n    // sets bounds on images so they can be drawn\n    storeImage.setBounds(0, 0, storeWidth, storeHeight);\n    tempPlayerX = 260;\n    tempPlayerY = 40;\n    playerImage.setBounds(playerX, playerY, playerX + playerWidth, playerY + playerHeight);\n\n    // adds images to the layeredPane\n    layeredPane.add(storeImage, JLayeredPane.DEFAULT_LAYER);\n    layeredPane.add(playerImage, JLayeredPane.POPUP_LAYER);\n\n    // creates a new JPanel, and adds the layered pane to it\n    JPanel storepanel = new JPanel();\n    storepanel.add(layeredPane);\n\n    JPanel storeWrapperPanel = new JPanel(new BorderLayout());\n    storeWrapperPanel.setPreferredSize(new Dimension(townWidth, townHeight + 30));\n    storeWrapperPanel.add(storepanel, BorderLayout.SOUTH);\n    storeWrapperPanel.add(townNotifyPanel, BorderLayout.NORTH);\n    storeframe.add(storeWrapperPanel);\n\n    storeframe.pack();\n    storeframe.setLocationRelativeTo(null);\n    storeframe.setVisible(true);\n\n    storeAnimate();\n\n    return true;\n  }\n"}, {"dataset": "pack", "exampleID": 3445, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [520], "initializationEnd": [532], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [538, 690], "configurationEnd": [590, 712], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 729, "focalAPIEnd": 741, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [747], "useEnd": [769], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sryza/dco/tree/master/thesis/src/main/java/pls/vrp/TestGreedyInitializer.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    File f = new File(\"../vrptests/r1.txt\");\n    VrpProblem problem = VrpReader.readSolomon(f, 100);\n    // seems like more for the first two and less for the last works\n    VrpGreedyInitializer init = new VrpGreedyInitializer(1.0, 1.0, 0);\n    VrpSolution sol = init.nearestNeighborHeuristic(problem);\n    System.out.println(sol.getNumVehicles());\n    System.out.println(sol.getToursCost());\n    System.out.println(sol.verify(problem));\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    VrpPanel panel = new VrpPanel();\n    panel.setScale(problem);\n    panel.setSolution(sol);\n    frame.getContentPane().add(panel);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3446, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(ViewRSSI3D)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [154, 174], "configurationEnd": [168, 227], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 233, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [252], "useEnd": [275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggaavv/Equinox-Clock/tree/master/contiki-2.5/examples/z1/rssi_scanner/ViewRSSI3D.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    ViewRSSI3D mc = new ViewRSSI3D();\n    JFrame window = new JFrame(\"3D RSSI Viewer\");\n    window.add(mc);\n    window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    window.pack();\n    window.setVisible(true);\n    mc.handleInput();\n  }\n"}, {"dataset": "pack", "exampleID": 3447, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [56], "initializationEnd": [68], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)"], "configurationStart": [90], "configurationEnd": [138], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 144, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [158], "useEnd": [176], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/swingx/tree/master/swingx-core/src/test/java/org/jdesktop/swingx/JXMultiSplitPaneVisualIssues.java", "rawCode": "  public void interactiveModelChange() {\n    JFrame f = new JFrame();\n    prepare(f);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3448, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [365], "initializationEnd": [391], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setJMenuBar(JMenuBar)", "jFrame.getContentPane()"], "configurationStart": [437, 1054], "configurationEnd": [459, 1072], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1098, "focalAPIEnd": 1106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.show()"], "useStart": [1112], "useEnd": [1120], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/awt/Mixing/LWPopupMenu.java", "rawCode": "  private static void init() {\n    // *** Create instructions for the user here ***\n\n    String[] instructions = {\n      \"This is an AUTOMATIC test, simply wait until it is done.\",\n      \"The result (passed or failed) will be shown in the\",\n      \"message window below.\"\n    };\n    Sysout.createDialog();\n    Sysout.printInstructions(instructions);\n\n    JFrame f = new JFrame(\"LW menu test\");\n\n    JMenuBar menubar = new JMenuBar();\n    f.setJMenuBar(menubar);\n\n    // Create lightweight-enabled menu\n    JMenu lmenu = new JMenu(\"Lite Menu\");\n    lmenu.add(\"Salad\");\n    lmenu.add(\n        new AbstractAction(\"Fruit Plate\") {\n          public void actionPerformed(ActionEvent e) {\n            failed = false;\n          }\n        });\n    lmenu.add(\"Water\");\n    menubar.add(lmenu);\n\n    // Create Heavyweight AWT Button\n    Button heavy = new Button(\" Heavyweight Button \");\n\n    // Add heavy button to box\n    Box box = Box.createVerticalBox();\n    box.add(Box.createVerticalStrut(20));\n    box.add(heavy);\n    box.add(Box.createVerticalStrut(20));\n\n    f.getContentPane().add(\"Center\", box);\n\n    f.pack();\n    f.show();\n\n    Robot robot = Util.createRobot();\n    robot.setAutoDelay(20);\n\n    Util.waitForIdle(robot);\n\n    // Activate the menu\n    Point lLoc = lmenu.getLocationOnScreen();\n    robot.mouseMove(lLoc.x + 5, lLoc.y + 5);\n\n    robot.mousePress(InputEvent.BUTTON1_MASK);\n    robot.mouseRelease(InputEvent.BUTTON1_MASK);\n    Util.waitForIdle(robot);\n\n    // Click on the \"Fruit Plate\" menu item.\n    // It's assumed that the menu item is located\n    // above the heavyweight button.\n    Point bLoc = heavy.getLocationOnScreen();\n    robot.mouseMove(bLoc.x + 10, bLoc.y + 5);\n\n    robot.mousePress(InputEvent.BUTTON1_MASK);\n    robot.mouseRelease(InputEvent.BUTTON1_MASK);\n    Util.waitForIdle(robot);\n\n    if (failed) {\n      LWPopupMenu.fail(\"The LW menu item did not received the click.\");\n    } else {\n      LWPopupMenu.pass();\n    }\n  } // End init()\n"}, {"dataset": "pack", "exampleID": 3449, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()"], "configurationStart": [80, 127, 606], "configurationEnd": [102, 149, 628], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 691, "focalAPIEnd": 703, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [709], "useEnd": [731], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/moumar/beads/tree/master/src/beads_player/net/beadsproject/beads/gui/Slider2D.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.X_AXIS));\n    AudioContext ac = new AudioContext();\n\n    for (int i = 0; i < 2; i++) {\n      WavePlayer wp = new WavePlayer(ac, 500f, new SineBuffer().getDefault());\n      Gain g = new Gain(ac, 2);\n      g.addInput(wp);\n      Slider s1 = new Slider(ac, \"gain\", 0, 1, 0.5f);\n      g.setGainEnvelope(s1);\n      Slider s2 = new Slider(ac, \"freq\", 110, 5000, 440);\n      wp.setFrequencyEnvelope(s2);\n      Slider2D s2d = new Slider2D(s2, s1);\n      frame.getContentPane().add(s2d.getComponent());\n      ac.out.addInput(g);\n    }\n\n    frame.pack();\n    frame.setVisible(true);\n    ac.start();\n  }\n"}, {"dataset": "pack", "exampleID": 3450, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [65], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.addWindowListener(WindowListener)"], "configurationStart": [156, 215], "configurationEnd": [178, 268], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 298, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.show()"], "useStart": [316], "useEnd": [328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mariya-zheleva/MDMAC/tree/master/apps/ClickController/ClickController.java", "rawCode": "  public static ClickController newWindow() {\n    JFrame frame = new JFrame(\"Click Controller\");\n    ClickController cntr = new ClickController(frame);\n    frame.getContentPane().add(cntr, BorderLayout.CENTER);\n    frame.addWindowListener(new CloseWindowAdapter(cntr));\n    cntr.enableClose();\n    frame.pack();\n    frame.show();\n    return cntr;\n  }\n"}, {"dataset": "pack", "exampleID": 3451, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 450, "focalAPIEnd": 469, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [475], "useEnd": [504], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Jjarve/Cervisiam/tree/master/task2/src/ee/ut/math/tvt/salessystem/ui/windows/PayingWindow.java", "rawCode": "  public static void show(final double _totalPrice, final PurchaseTab _parent) {\n    parent = _parent;\n    totalPrice = _totalPrice;\n\n    init();\n\n    // Update the text fields\n    priceTextField.setText(String.valueOf(totalPrice));\n    paidMoneyTextField.setText(\"\");\n    exchangeMoneyTextField.setText(\"\");\n\n    // And make sure the \"Commit\" button is always unavailable at first\n    commitButton.setEnabled(false);\n\n    // Display the window:\n    payingWindow.pack();\n    payingWindow.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3452, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [89], "initializationEnd": [116], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [153], "configurationEnd": [175], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1666, "focalAPIEnd": 1678, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stefankeil/Labs/tree/master/121113_LabExercise6/src/UserInterface.java", "rawCode": "  /** Make the frame for the user interface. */\n  private void makeFrame() {\n    frame = new JFrame(calc.getTitle());\n\n    JPanel contentPane = (JPanel) frame.getContentPane();\n    contentPane.setLayout(new BorderLayout(8, 8));\n    contentPane.setBorder(new EmptyBorder(10, 10, 10, 10));\n\n    display = new JTextField();\n    contentPane.add(display, BorderLayout.NORTH);\n\n    JPanel buttonPanelContainer = new JPanel(new BorderLayout());\n\n    JPanel buttonPanel = new JPanel(new GridLayout(3, 6));\n    addButton(buttonPanel, \"+\");\n    addButton(buttonPanel, \"-\");\n    addButton(buttonPanel, \"*\");\n    addButton(buttonPanel, \"/\");\n    addButton(buttonPanel, \"Deg\");\n    addButton(buttonPanel, \"Hex\");\n\n    addButton(buttonPanel, \"9\");\n    addButton(buttonPanel, \"8\");\n    addButton(buttonPanel, \"7\");\n    addButton(buttonPanel, \"6\");\n    addButton(buttonPanel, \"Clear\");\n    addButton(buttonPanel, \"=\");\n\n    addButton(buttonPanel, \"5\");\n    addButton(buttonPanel, \"4\");\n    addButton(buttonPanel, \"3\");\n    addButton(buttonPanel, \"2\");\n    addButton(buttonPanel, \"1\");\n    addButton(buttonPanel, \"0\");\n\n    buttonPanelHex = new JPanel(new GridLayout(1, 6));\n    addButton(buttonPanelHex, \"A\");\n    addButton(buttonPanelHex, \"B\");\n    addButton(buttonPanelHex, \"C\");\n    addButton(buttonPanelHex, \"D\");\n    addButton(buttonPanelHex, \"E\");\n    addButton(buttonPanelHex, \"F\");\n\n    buttonPanelContainer.add(buttonPanel, BorderLayout.NORTH);\n    buttonPanelContainer.add(buttonPanelHex, BorderLayout.SOUTH);\n    contentPane.add(buttonPanelContainer, BorderLayout.CENTER);\n\n    status = new JLabel(calc.getAuthor());\n    contentPane.add(status, BorderLayout.SOUTH);\n\n    frame.pack();\n    buttonPanelHex.setVisible(false);\n  }\n"}, {"dataset": "pack", "exampleID": 3453, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [243], "initializationEnd": [264], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [270, 331], "configurationEnd": [325, 353], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 699, "focalAPIEnd": 711, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [717], "useEnd": [739], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/ttools/src/main/uk/ac/starlink/ttools/plottask/SwingPainter.java", "rawCode": "  /**\n   * Displays a screen component directly.\n   *\n   * @param comp screen component\n   */\n  public void postComponent(Component comp) {\n    JComponent holder = new JPanel(new BorderLayout());\n    holder.add(comp);\n    final JFrame frame = new JFrame(winTitle_);\n    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    frame.getContentPane().add(holder);\n    Object quitKey = \"quit\";\n    holder.getInputMap().put(KeyStroke.getKeyStroke('q'), quitKey);\n    holder\n        .getActionMap()\n        .put(\n            quitKey,\n            new AbstractAction() {\n              public void actionPerformed(ActionEvent evt) {\n                frame.dispose();\n              }\n            });\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3454, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [196], "initializationEnd": [222], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [228], "configurationEnd": [250], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 281, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [299], "useEnd": [321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GrupoISO/CasaRural/tree/master/jcalendar1.1.4/SRC/COM/TOEDTER/CALENDAR/JMonthChooser.java", "rawCode": "  /**\n   * Creates a JFrame with a JMonthChooser inside and can be used for testing.\n   *\n   * @param s The command line arguments\n   */\n  public static void main(String[] s) {\n    JFrame frame = new JFrame(\"MonthChooser\");\n    frame.getContentPane().add(new JMonthChooser());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3455, "initialization": ["JFrame jFrame = new JFrame(*)"], "initializationStart": [308], "initializationEnd": [334], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(MainGame)"], "configurationStart": [340], "configurationEnd": [355], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 361, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setResizable(boolean)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)"], "useStart": [379, 437, 468, 507], "useEnd": [431, 462, 501, 529], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TrabalhoDeOO/Grupo09/tree/master/trabalhoOO/src/game/MainGame.java", "rawCode": "  public void main(String args[]) {\n    MainGame game = new MainGame();\n\n    game.setPreferredSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n    game.setMaximumSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n    game.setMinimumSize(new Dimension(WIDTH * SCALE, HEIGTH * SCALE));\n\n    JFrame frame = new JFrame(MainGame.TITLE);\n    frame.add(game);\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setResizable(false);\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n\n    game.start();\n  }\n"}, {"dataset": "pack", "exampleID": 3456, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [407], "initializationEnd": [429], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setResizable(boolean)", "jFrame.setPreferredSize(Dimension)", "jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [437, 470, 613, 652], "configurationEnd": [462, 516, 635, 704], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 712, "focalAPIEnd": 724, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setLocationRelativeTo(Window)", "jFrame.setVisible(boolean)", "jFrame.setVisible(boolean)"], "useStart": [732, 773, 2366], "useEnd": [765, 795, 2389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cgueret/LinkedData-QA/tree/master/src/main/java/nl/vu/qa_for_lod/MetricsExecutor.java", "rawCode": "  /**\n   * @param withGUI\n   * @param direction\n   * @throws Exception\n   */\n  public void processQueue(boolean withGUI, Direction direction) throws Exception {\n    logger.info(\"Start processing \" + resourceQueue.size() + \" resources\");\n\n    // Create an executor service\n    ExecutorService executorService = Executors.newFixedThreadPool(6);\n\n    // Init the GUI if needed\n    if (withGUI) {\n      frame = new JFrame(\"Progress\");\n      frame.setResizable(false);\n      frame.setPreferredSize(new Dimension(500, 32));\n      bar = new JProgressBar(0, resourceQueue.size());\n      bar.setStringPainted(true);\n      frame.getContentPane().add(bar);\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.pack();\n      frame.setLocationRelativeTo(null);\n      frame.setVisible(true);\n    }\n\n    // Do the processing\n    List<Future<?>> futures = new ArrayList<Future<?>>();\n    for (Resource resource : resourceQueue) {\n      MetricsTask task = new MetricsTask(this, resource, dataFetcher, extraTriples, direction);\n      Future<?> future = executorService.submit(task);\n      futures.add(future);\n    }\n\n    // Wait for all the tasks to be completed\n    for (Future<?> future : futures) {\n      try {\n        future.get();\n      } catch (InterruptedException e) {\n        e.printStackTrace();\n      } catch (ExecutionException e) {\n        e.printStackTrace();\n      }\n    }\n\n    // Remove all metrics that returned no result\n    Set<Metric> notApplicable = new HashSet<Metric>();\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      if (data.getDistribution(MetricState.BEFORE).equals(data.getDistribution(MetricState.AFTER)))\n        notApplicable.add(metric);\n    }\n    for (Metric metric : notApplicable) metricsData.remove(metric);\n\n    // Do the post processing\n    logger.info(\"Start post-processing\");\n    for (Metric metric : this.getMetrics()) {\n      MetricData data = metricsData.get(metric);\n      for (MetricState state : MetricState.values()) {\n        // Ask the metric the distance to the ideal value\n        Distribution observedDistribution = data.getDistribution(state);\n        double dist = metric.getDistanceToIdeal(observedDistribution);\n        data.setDistanceToIdeal(state, dist);\n      }\n    }\n\n    logger.info(\"Done!\");\n\n    // Hide the progress bar\n    if (withGUI) {\n      frame.setVisible(false);\n    }\n\n    // Shutdown the executor\n    executorService.shutdown();\n    try {\n      if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {\n        executorService.shutdownNow();\n        if (!executorService.awaitTermination(60, TimeUnit.SECONDS))\n          System.err.println(\"Pool did not terminate\");\n      }\n    } catch (InterruptedException ie) {\n      executorService.shutdownNow();\n      Thread.currentThread().interrupt();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3457, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [84], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [108, 174], "configurationEnd": [168, 201], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 240, "focalAPIEnd": 257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [263], "useEnd": [290], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void findButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Find\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdFind(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3458, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(ListGenericSelector<String>)"], "configurationStart": [720], "configurationEnd": [750], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1312, "focalAPIEnd": 1324, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [1330, 1388], "useEnd": [1382, 1410], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rex1fernando/linewars/tree/master/trunk/Line_Wars/src/editor/ListGenericSelector.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    ListGenericSelector<String> selector =\n        new ListGenericSelector<String>(\n            \"Strings\",\n            new GenericListCallback<String>() {\n              @Override\n              public List<String> getSelectionList() {\n                List<String> ret = new ArrayList<String>();\n                ret.add(\"fi\");\n                ret.add(\"fo\");\n                ret.add(\"fumb\");\n                return ret;\n              }\n            },\n            new CustomToString<String>() {\n              @Override\n              public String toString(String obj) {\n                return obj.toUpperCase();\n              }\n            });\n    frame.setContentPane(selector);\n    selector.addListChangeListener(\n        new ListChangeListener<String>() {\n\n          @Override\n          public void objectsRemoved(List<String> removed) {\n            System.out.println(\"removed:\" + removed.toString());\n          }\n\n          @Override\n          public void objectAdded(String added) {\n            System.out.println(\"added:\" + added);\n          }\n\n          @Override\n          public void HighlightChange(List<String> highlighted) {\n            System.out.println(\"highlighted:\" + highlighted.toString());\n          }\n        });\n\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3459, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [423], "initializationEnd": [449], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [472], "configurationEnd": [498], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 2529, "focalAPIEnd": 2545, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [2551], "useEnd": [2577], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apekkarinen/OhHa/tree/master/StudyProgress/src/studyprogress/StudyGUI.java", "rawCode": "  /**\n   * Displays the graphical add model Course - screen.\n   *\n   * @param moduleindex Index of the Module to add the Course to.\n   * @param modules The JList containing Module info.\n   * @param courses The JList containing Course info.\n   * @param summary The summary Container.\n   */\n  public void displayAddModelCourse(\n      int moduleindex, JList modules, JList courses, Container summary) {\n    JFrame addcourse = new JFrame(\"Lisää kurssi\");\n    Container base = addcourse.getContentPane();\n    base.setLayout(new BoxLayout(base, BoxLayout.Y_AXIS));\n    JLabel yearinfo = createCenteredLabel(\"vuosi\", 100, 25);\n    JTextField yearinput = createCenteredTextField(100, 25);\n    JLabel gradeinfo = createCenteredLabel(\"arvosana\", 100, 25);\n    JTextField gradeinput = createCenteredTextField(100, 25);\n    Container radiobuttons = createContainer(new FlowLayout());\n    JRadioButton fall = new JRadioButton(\"syksy\");\n    fall.setActionCommand(\"syksy\");\n    JRadioButton spring = new JRadioButton(\"kevät\");\n    spring.setActionCommand(\"kevät\");\n    ButtonGroup semester = new ButtonGroup();\n    semester.add(fall);\n    semester.add(spring);\n    radiobuttons.add(fall);\n    radiobuttons.add(spring);\n\n    JList courselist =\n        createList(\n            manager.moduleCoursesToStringArray(\n                manager.modelNameListContains(user.getModuleName(moduleindex))));\n    JScrollPane coursescroller = new JScrollPane(courselist);\n    coursescroller.setPreferredSize(new Dimension(420, 160));\n    Container buttons = createContainer(new FlowLayout());\n    JButton add = new JButton(\"Lisää kurssi\");\n    JButton back = new JButton(\"Takaisin\");\n    add.addActionListener(\n        new ModelCourseListener(\n            manager,\n            this,\n            user,\n            addcourse,\n            courselist,\n            yearinput,\n            gradeinput,\n            semester,\n            modules,\n            courses,\n            summary,\n            moduleindex));\n    back.addActionListener(\n        new ModelCourseListener(\n            manager,\n            this,\n            user,\n            addcourse,\n            courselist,\n            yearinput,\n            gradeinput,\n            semester,\n            modules,\n            courses,\n            summary,\n            moduleindex));\n    buttons.add(add);\n    buttons.add(back);\n    base.add(coursescroller);\n    base.add(yearinfo);\n    base.add(yearinput);\n    base.add(gradeinfo);\n    base.add(gradeinput);\n    base.add(radiobuttons);\n    base.add(buttons);\n    addcourse.pack();\n    addcourse.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3460, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [74], "initializationEnd": [86], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "error(*)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 834, "catchExpressionStart": 757, "catchExpressionEnd": 777, "catchBlockStart": 757, "catchBlockEnd": 834, "exceptionHandlingCallStart": [785, 812], "exceptionHandlingCallEnd": [804, 827], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.getContentPane()"], "configurationStart": [94, 584, 644], "configurationEnd": [146, 606, 666], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 707, "focalAPIEnd": 719, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [727], "useEnd": [749], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/globalModelExchange-ui/src/java/org/cagrid/gme/discoverytools/GMEViewer.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      JFrame frame = new JFrame();\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n      ExtensionDescription ext =\n          (ExtensionDescription)\n              Utils.deserializeDocument(\n                  \"extensions\"\n                      + File.separator\n                      + \"gme-discovery\"\n                      + File.separator\n                      + \"extension.xml\",\n                  ExtensionDescription.class);\n      final GMEViewer panel = new GMEViewer(ext.getDiscoveryExtensionDescription());\n      frame.getContentPane().setLayout(new BorderLayout());\n      frame.getContentPane().add(panel, BorderLayout.CENTER);\n\n      frame.pack();\n      frame.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n      logger.error(e);\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3461, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [808], "initializationEnd": [834], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JPanel)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [840, 870], "configurationEnd": [863, 922], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 928, "focalAPIEnd": 940, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [946], "useEnd": [968], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidrobert/trainings/tree/master/FJ-16/Argentum/src/main/java/br/com/while42/argentum/graphics/ChartTest.java", "rawCode": "  public static void main(String[] args) {\n    TimeSerie serie =\n        buildTimeSerie(\n            1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 4, 3, 2, 1, 2, 2, 4, 5, 6, 7, 8, 9, 10, 11, 10, 6, 3,\n            2, 6, 7, 8, 9);\n\n    Chart g =\n        new Chart()\n            .title(\"Start graph\")\n            .start(3)\n            .end(32)\n            .withTimeSerie(serie)\n            .withIndicator(new SimpleMovingAverage(new LastValueIndicator()))\n            .withIndicator(new WeightedMovingAverage(new LastValueIndicator()))\n            .withIndicator(new LastValueIndicator())\n            .withIndicator(new SimpleMovingAverage(new FirstValueIndicator()))\n            .withIndicator(new WeightedMovingAverage(new FirstValueIndicator()))\n            .withIndicator(new FirstValueIndicator());\n\n    JFrame frame = new JFrame(\"Minha Janela\");\n    frame.add(g.getPanel());\n\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3462, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [122], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(SMB_Container)"], "configurationStart": [201], "configurationEnd": [209], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 244, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)", "jFrame.validate()", "jFrame.addKeyListener(StdDraw)"], "useStart": [258, 282, 336, 384], "useEnd": [276, 330, 348, 424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mark005/apcsprojects/tree/master/Supa Mobsta Bros/src/supa/mobsta/bros/SMB_Container.java", "rawCode": "  /** @param args the command line arguments */\n  public static void main(String[] args) {\n    arg = args;\n    JFrame f = new JFrame(\"Supa Mobsta Bros\");\n    SMB_Container c = new SMB_Container();\n    f.add(c);\n    c.init();\n    c.start();\n    f.pack();\n    f.setVisible(true);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.validate();\n    c.requestFocusInWindow();\n    f.addKeyListener(c.getKeyListeners()[0]);\n  }\n"}, {"dataset": "pack", "exampleID": 3463, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [63], "initializationEnd": [102], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setPreferredSize(Dimension)", "jFrame.setVisible(boolean)"], "configurationStart": [108, 233, 286], "configurationEnd": [160, 280, 308], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 314, "focalAPIEnd": 326, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/djdodson88/BackToSchool/tree/master/BackToSchool/src/main/ClassroomPanel.java", "rawCode": "  public static void main(String args[]) {\n\n    JFrame frame = new JFrame(\"Back to School: Classroom\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    int game = 1;\n\n    // frame.add(new ClassroomPanel(game, 1));\n\n    frame.setPreferredSize(new Dimension(800, 600));\n    frame.setVisible(true);\n    frame.pack();\n  }\n"}, {"dataset": "pack", "exampleID": 3464, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(ViewRSSI3D)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [154, 174], "configurationEnd": [168, 227], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 233, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [252], "useEnd": [275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/okoye/Puppet-OS/tree/master/contiki/examples/z1/rssi_scanner/ViewRSSI3D.java", "rawCode": "  public static void main(String[] args) throws IOException {\n    ViewRSSI3D mc = new ViewRSSI3D();\n    JFrame window = new JFrame(\"3D RSSI Viewer\");\n    window.add(mc);\n    window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    window.pack();\n    window.setVisible(true);\n    mc.handleInput();\n  }\n"}, {"dataset": "pack", "exampleID": 3465, "initialization": ["JFrame jFrame = new JInternalFrame(*)"], "initializationStart": [241], "initializationEnd": [284], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setClosable(boolean)", "jFrame.setIconifiable(boolean)", "jFrame.setMaximizable(boolean)", "jFrame.setResizable(boolean)", "jFrame.setContentPane(JPanel)"], "configurationStart": [292, 323, 357, 391, 423], "configurationEnd": [315, 349, 383, 415, 469], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 477, "focalAPIEnd": 489, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JDesktopPane.add(jFrame)", "jFrame.setVisible(boolean)"], "useStart": [497, 523], "useEnd": [515, 545], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scs/uclinux/tree/master/lib/classpath/examples/gnu/classpath/examples/swing/Demo.java", "rawCode": "    /**\n     * Brings up the new window showing the component stored in the constructor.\n     *\n     * @param e the action event that triggered the action\n     */\n    public void actionPerformed(ActionEvent e) {\n      JInternalFrame frame = new JInternalFrame((String) getValue(NAME));\n      frame.setClosable(true);\n      frame.setIconifiable(true);\n      frame.setMaximizable(true);\n      frame.setResizable(true);\n      frame.setContentPane(demoFactory.createDemo());\n      frame.pack();\n      desktop.add(frame);\n      frame.setVisible(true);\n    }\n"}, {"dataset": "pack", "exampleID": 3466, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [85], "initializationEnd": [97], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [103, 161], "configurationEnd": [155, 183], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 261, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setResizable(boolean)", "jFrame.setVisible(boolean)"], "useStart": [279, 310], "useEnd": [304, 332], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pauldoo/scratch/tree/master/Sknat/src/sknat/view/Main.java", "rawCode": "  public static void main(String[] args) {\n    setLookAndFeel();\n\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new UnitPropertyEditor(new UnitProperties(0.25, 0.25, 0.25, 0.25)));\n    frame.pack();\n    frame.setResizable(false);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3467, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [193], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridLayout)", "jFrame.add(TraceViewPanel,*)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [237, 278, 330], "configurationEnd": [272, 324, 394], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 400, "focalAPIEnd": 412, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setSize(int,int)", "jFrame.setVisible(boolean)"], "useStart": [418, 448], "useEnd": [442, 470], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Cyberspice/platform_tools_base/tree/master/perflib/src/test/java/com/android/tools/perflib/vmtrace/viz/TraceView.java", "rawCode": "  private static void createAndShowUI() {\n    final TraceViewPanel traceViewPanel = new TraceViewPanel();\n    final VmTraceData traceData = getVmTraceData(TRACE_FILE_NAME);\n\n    JFrame frame = new JFrame(\"TraceViewTestApplication\");\n    frame.setLayout(new BorderLayout());\n    frame.add(traceViewPanel, BorderLayout.CENTER);\n    frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    frame.pack();\n    frame.setSize(1200, 800);\n    frame.setVisible(true);\n\n    traceViewPanel.setTrace(traceData);\n  }\n"}, {"dataset": "pack", "exampleID": 3468, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [446], "initializationEnd": [458], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()"], "configurationStart": [464, 522, 580, 684], "configurationEnd": [516, 544, 602, 706], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 3486, "focalAPIEnd": 3498, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "new JDialog(jFrame,boolean)"], "useStart": [3543, 3644], "useEnd": [3565, 3669], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epsilony/tb/tree/master/src/main/java/net/epsilony/tb/implicit/demo/TriangleContourBuilderDemo.java", "rawCode": "  public void genUI() {\n    genContourBuilder();\n    genContour();\n\n    modelPanel = new BasicModelPanel();\n    mainDrawer = new TriangleContourBuilderDemoDrawer(contourBuilder);\n    modelPanel.addAndSetupModelDrawer(mainDrawer);\n    modelPanel.setPreferredSize(new Dimension(800, 600));\n    modelPanel.addMouseListener(this);\n    modelPanel.addMouseMotionListener(this);\n    modelPanel.addAndSetupModelDrawer(new DraggingDrawer());\n\n    frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().setLayout(new BorderLayout());\n    frame.getContentPane().add(modelPanel, BorderLayout.CENTER);\n\n    JPanel rightPanel = new JPanel();\n    frame.getContentPane().add(rightPanel, BorderLayout.LINE_END);\n    rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.Y_AXIS));\n\n    ButtonGroup buttonGroup = new ButtonGroup();\n    boolean first = true;\n    LeftRadioListener buttonAction = new LeftRadioListener();\n    List<String> methods = new ArrayList<>(builderMap.keySet());\n    Collections.sort(methods);\n    for (String buttonName : methods) {\n      JRadioButton button = new JRadioButton(buttonName);\n      button.setActionCommand(buttonName);\n      if (first) {\n        button.setSelected(true);\n        first = false;\n      }\n      buttonGroup.add(button);\n      button.addActionListener(buttonAction);\n      rightPanel.add(button);\n    }\n\n    rightPanel.add(Box.createVerticalStrut(2));\n    showGradient = new JCheckBox(\"show gradient\", true);\n    showGradient.setSelected(true);\n    showGradient.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    rightPanel.add(showGradient);\n    unitGradient = new JCheckBox(\"unit gradient\", true);\n    unitGradient.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    rightPanel.add(unitGradient);\n    rightPanel.add(Box.createVerticalStrut(2));\n    unitGradientLength = new JSlider(1, 50);\n    rightPanel.add(unitGradientLength);\n    unitGradientLength.setValue(mainDrawer.nodeDrawer.getUnitGradientLength());\n    unitGradientLength.setEnabled(mainDrawer.nodeDrawer.isDrawGradient());\n    unitGradientLength.setPaintLabels(true);\n    unitGradientLength.setPaintTicks(true);\n    unitGradientLength.setPaintTrack(true);\n    unitGradientLength.setMajorTickSpacing(10);\n    unitGradientLength.setMinorTickSpacing(1);\n    unitGradientLength.addChangeListener(\n        new ChangeListener() {\n          @Override\n          public void stateChanged(ChangeEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    gradientScale = new JFormattedTextField(NumberFormat.getNumberInstance());\n    gradientScale.setValue(mainDrawer.nodeDrawer.getGradientScale());\n    gradientScale.setMaximumSize(new Dimension(Short.MAX_VALUE, 30));\n    rightPanel.add(gradientScale);\n    gradientScale.setEnabled(!mainDrawer.nodeDrawer.isUnitGradient());\n    gradientScale.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(ActionEvent e) {\n            updateGradientDrawingSetting();\n            modelPanel.repaint();\n          }\n        });\n\n    frame.pack();\n    modelPanel.setZoomAllNeeded(true);\n    frame.setVisible(true);\n\n    specificationPanel = new TrackContourSpecificationPanel();\n    dialog = new JDialog(frame, false);\n    dialog.setSize(500, 400);\n    dialog.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\n    dialog.getContentPane().add(specificationPanel);\n    dialog.pack();\n    dialog.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3469, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [65], "initializationEnd": [95], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.addWindowListener(WindowListener)"], "configurationStart": [156, 215], "configurationEnd": [178, 268], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 298, "focalAPIEnd": 310, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.show()"], "useStart": [316], "useEnd": [328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cawka/click/tree/master/apps/ClickController/ClickController.java", "rawCode": "  public static ClickController newWindow() {\n    JFrame frame = new JFrame(\"Click Controller\");\n    ClickController cntr = new ClickController(frame);\n    frame.getContentPane().add(cntr, BorderLayout.CENTER);\n    frame.addWindowListener(new CloseWindowAdapter(cntr));\n    cntr.enableClose();\n    frame.pack();\n    frame.show();\n    return cntr;\n  }\n"}, {"dataset": "pack", "exampleID": 3470, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [277], "initializationEnd": [320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [326, 380], "configurationEnd": [374, 398], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 412, "focalAPIEnd": 420, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [426], "useEnd": [444], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninesunqian/excitedmind/tree/master/prefuse-demos/src/main/java/prefuse/demos/FisheyeMenu.java", "rawCode": "  /** Run a demonstration of the FisheyeMenu */\n  public static final void main(String[] argv) {\n    // only log warnings\n    LoggerFactory.getLogger(\"prefuse\").setLevel(Level.WARNING);\n\n    FisheyeMenu fm = demo();\n\n    // create and display application window\n    JFrame f = new JFrame(\"p r e f u s e | f i s h e y e\");\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().add(fm);\n    f.pack();\n    f.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3471, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [9437], "initializationEnd": [9461], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 140, "tryExpressionEnd": 144, "tryBlockStart": 140, "tryBlockEnd": 9775, "catchExpressionStart": 9721, "catchExpressionEnd": 9741, "catchBlockStart": 9721, "catchBlockEnd": 9775, "exceptionHandlingCallStart": [9749], "exceptionHandlingCallEnd": [9768], "configuration": ["jFrame.getContentPane()"], "configurationStart": [9590], "configurationEnd": [9608], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 9623, "focalAPIEnd": 9631, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [9639, 9665], "useEnd": [9657, 9713], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.3.9/src/om/graph/Test.java", "rawCode": "  /**\n   * Main method for testing the graph routines.\n   *\n   * @param args Not used.\n   */\n  public static void main(String[] args) {\n    try {\n      String sCFTest =\n          \"<world id='w1' px='0' py='0' pw='200' ph='200' xleft='0.0' xright='1.0' ybottom='0.0' ytop='1.0'><colourField id='cf'/></world>\";\n\n      String sRoundingTest =\n          \" <world id=\\\"w1\\\" px=\\\"140\\\" py=\\\"58\\\" pw=\\\"290\\\" ph=\\\"255\\\" \\r\\n\"\n              + \" xleft=\\\"0.0\\\" xright=\\\"140.0\\\" ybottom=\\\"0.0\\\" ytop=\\\"2.2\\\">\\r\\n\"\n              + \" <xAxis ticks=\\\"20,10\\\" tickSide=\\\"-\\\" numbers=\\\"20\\\" omitNumbers=\\\"0\\\" label=\\\"temperature / �C\\\" />\\r\\n\"\n              + \" <yAxis maxY=\\\"2.0\\\" ticks=\\\"1,0.1\\\" tickSide=\\\"-\\\" numbers=\\\"0.5\\\" />\\r\\n\"\n              + \" <text x=\\\"15\\\" y=\\\"2.1\\\" text=\\\"pressure / 10���Pa\\\" />\\r\\n\"\n              + \" <text x=\\\"31\\\" y=\\\"2.14\\\" text=\\\"5\\\" />\\r\\n\"\n              + \" <grid maxY=\\\"2.01\\\" xspacing=\\\"10\\\" yspacing=\\\"0.1\\\" />\\r\\n\"\n              + \" <line x='0' y='1.4' x2='100' y2='1.4' lineColour='#f00,graph1'/>\"\n              + \" </world>\";\n      /*\n      String sAxisTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-4.0'>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='-0.5' numbers='0.5' tickSide='-' rotateLabel='no' label='Frogs' numbersFont='10px' labelMargin='-4'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles' labelMargin='8'/>\"+\n      \" <yAxis ticks='0.5,0.1' minY='-0.5' x='0.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-1.5' numbers='0.5' tickSide='-' label='Frogs'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-2.5' numbers='0.5' rotateNumbers='yes' tickSide='+' label='Tadpoles'/>\"+\n      \" <xAxis ticks='0.5,0.1' y='-3.5' numbers='0.5' rotateNumbers='yes' rotateFlip='yes' tickSide='both' label='Frogspawn'/>\"+\n      \" <grid xSpacing='0.2,0.1' ySpacing='0.2' maxY='-3' minY='-3.5'/>\"+\n      \"</world>\";\n\n      String sShapeTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='0' xright='1.0' ytop='1.0' ybottom='0'>\"+\n      \"<rectangle x='0.1' y='0.1' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.2' y='0.2' width='0.1' height='0.1' fillColour='#800'/>\"+\n      \"<rectangle x='0.3' y='0.1' x2='0.4' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.4' y='0.2' width='0.1' height='0.1' lineColour='#800'/>\"+\n      \"<rectangle x='0.5' y='0.1' width='0.1' height='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<rectangle x='0.7' y='0.1' x2='0.8' y2='0.2' lineColour='#800'/>\"+\n      \"<rectangle x='0.7:4' y='0.1:4' x2='0.8:4' y2='0.2:4' lineColour='#800'/>\"+\n\n      \"<ellipse x='0.1' y='0.5' width='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.2' y='0.6' height='0.1' fillColour='#800'/>\"+\n      \"<ellipse x='0.3' y='0.5' width='0.07' height='0.3' lineColour='#800'/>\"+\n      \"<ellipse x='0.4' y='0.6' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.5' y='0.5' width='0.1' fillColour='#8ff' lineColour='#800' lineWidth='4'/>\"+\n      \"<ellipse x='0.7' y='0.5' width='0.1' lineColour='#800'/>\"+\n      \"<ellipse x='0.7:4' y='0.5:4' width='0.1' lineColour='#800'/>\"+\n\n      \"<line x='0.3' y='0.5' x2='0.35' y2='0.15'/>\"+\n      \"<line x='0.5' y='0.5' x2='0.55' y2='0.15' lineWidth='4' lineColour='#800'/>\"+\n      \"</world>\";\n\n      String sTextTest=\n      \"<world id='w1' px='50' py='10' pw='500' ph='500' \"+\n      \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"+\n      \"<text x='0' y='0.9' align='left' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.8' align='centre' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0.7' align='right' text='Hello Graph!'/>\"+\n      \"<text x='0.9' y='0' align='left' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.8' y='0' align='centre' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='0.7' y='0' align='right' angle='90' text='Hello Graph!'/>\"+\n      \"<text x='-0.9' y='0' align='left' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.8' y='0' align='centre' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='-0.7' y='0' align='right' angle='270' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.9' align='left' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.8' align='centre' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='-0.7' align='right' angle='360' text='Hello Graph!'/>\"+\n      \"<text x='0' y='0' angle='255' colour='#efe' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='270' colour='#cfc' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='285' colour='#afa' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='300' colour='#8f8' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='315' colour='#6f6' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='330' colour='#4f4' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='345' colour='#2f2' text='Hello Graph!' font='bold 30px'/>\"+\n      \"<text x='0' y='0' angle='0' colour='#000' text='Hello Graph!' font='bold 30px'/>\"+\n      \"</world>\";\n      */\n\n      String sXML =\n          \"<world id='w1' px='90' py='10' pw='200' ph='200' \"\n              + \" xleft='-1.0' xright='1.0' ytop='1.0' ybottom='-1.0'>\"\n              + \" <rectangle x='0' y='0.4' width='1' height='0.2'/>\"\n              + \" <rectangle x='0' y='0' width='0.5' height='0.4' fillColour='#fee'/>\"\n              + \" <rectangle x='0.5' y='0.3' width='0.5' height='0.2' lineColour='#f0f' fillColour='#fff' linewidth='4'/>\"\n              + \" <xAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='both'/>\"\n              + \" <yAxis ticks='0.2,0.1' numbers='0.5' colour='#800' omitNumbers='0.0' tickSide='-'/>\"\n              + \" <function minX='0' colour='#080' lineWidth='2.0' id='thingy'/>\"\n              + \" <parametricFunction minT='0' maxT='6.3' colour='#008' steps='300' lineWidth='1.0' id='thingy2'/>\"\n              + \" <colourField minX='-1' maxX='-0.5' minY='-1' maxY='-0.5' blockSize='1' id='thingy3'/>\"\n              + \"\"\n              + \"\"\n              + \"\"\n              + \"</world>\";\n      String sThisTest = sRoundingTest;\n      Document d = XML.parse(sThisTest);\n      World w =\n          new World(\n              new World.Context() {\n                public Color getColour(String sConstant) {\n                  if (sConstant.equals(\"fg\")) return Color.black;\n                  return null;\n                }\n\n                public boolean useAlternates() {\n                  return false;\n                }\n\n                public String getFontFamily() {\n                  return \"Verdana\";\n                }\n\n                public int getFontSize() {\n                  return 13;\n                }\n              },\n              d.getDocumentElement());\n\n      if (sThisTest == sCFTest) {\n        ColourFieldItem cfi = (ColourFieldItem) w.getItem(\"cf\");\n        cfi.setFunction(\n            new ColourFieldItem.Function() {\n              public Color f(double x, double y) {\n                if (x > 1.0 || y > 1.0 || x < 0.0 || y < 0.0) {\n                  System.err.println(\"Got: \" + x + \",\" + y);\n                  return Color.black;\n                }\n\n                return new Color((float) x, (float) y, 0.5f);\n              }\n            });\n      }\n\n      if (sThisTest == sXML) {\n        ((FunctionItem) w.getItem(\"thingy\"))\n            .setFunction(\n                new FunctionItem.Function() {\n                  public double f(double x) {\n                    return Math.sin(x * 2 * Math.PI);\n                  }\n                });\n\n        ((ParametricFunctionItem) w.getItem(\"thingy2\"))\n            .setFunction(\n                new ParametricFunctionItem.Function() {\n                  public GraphPoint f(double t) {\n                    return new GraphPoint((Math.cos(3.0 * t)), Math.sin(5.0 * t));\n                  }\n                });\n\n        ((ColourFieldItem) w.getItem(\"thingy3\"))\n            .setFunction(\n                new ColourFieldItem.Function() {\n                  public Color f(double x, double y) {\n                    float f1 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.8), 2) + Math.pow(y - (-0.8), 2)));\n                    float f2 =\n                        (float) (3 * Math.sqrt(Math.pow(x - (-0.6), 2) + Math.pow(y - (-0.5), 2)));\n                    return new Color(Math.min(f1, 1.0f), Math.min(f2, 1.0f), 0.0f);\n                  }\n                });\n      }\n\n      int iW = 600, iH = 600, iGraphX = 50, iGraphY = 10, iGraphW = 500, iGraphH = 500;\n      BufferedImage bi = new BufferedImage(iW, iH, BufferedImage.TYPE_INT_RGB);\n      Graphics2D g2 = bi.createGraphics();\n      boolean bAntiAlias = true;\n      g2.setRenderingHint(\n          RenderingHints.KEY_ANTIALIASING,\n          bAntiAlias ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);\n      g2.setRenderingHint(\n          RenderingHints.KEY_TEXT_ANTIALIASING,\n          bAntiAlias\n              ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON\n              : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n      g2.setColor(Color.yellow);\n      g2.fillRect(0, 0, iW, iH);\n      g2.setColor(Color.white);\n      g2.fillRect(iGraphX, iGraphY, iGraphW, iGraphH);\n\n      w.paint(g2);\n\n      JFrame f = new JFrame(\"Graph test\");\n      JLabel l = new JLabel(new ImageIcon(bi));\n      l.setBorder(BorderFactory.createEmptyBorder(100, 100, 100, 100));\n\n      f.getContentPane().add(l);\n      f.pack();\n      f.setVisible(true);\n      f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    } catch (Throwable t) {\n      t.printStackTrace();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3472, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [58], "initializationEnd": [85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()", "jFrame.setSize(int,int)"], "configurationStart": [91, 161], "configurationEnd": [109, 182], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 188, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setDefaultCloseOperation(int)"], "useStart": [202, 227], "useEnd": [220, 275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chasent/Week-of-Code-2013/tree/master/src/UI/Window.java", "rawCode": "  public static void main(String[] args) {\n    JFrame f = new JFrame(\"Octo Centauri\");\n    f.getContentPane().add(new Window());\n    // f.add(new Window());\n    f.setSize(1920, 1080);\n    f.pack();\n    f.setVisible(true);\n\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n  }\n"}, {"dataset": "pack", "exampleID": 3473, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [2236], "initializationEnd": [2278], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(JComponent)"], "configurationStart": [2284], "configurationEnd": [2303], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 2309, "focalAPIEnd": 2321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["showWindow(jFrame)", "showWallPanel(UserPreferences,HomeController,jFrame,JComponentTester)", "showImportTextureWizard(UserPreferences,jFrame,JComponentTester,boolean)", "showWallPanel(UserPreferences,HomeController,jFrame,JComponentTester)", "showImportTextureWizard(UserPreferences,jFrame,JComponentTester,boolean)", "showWallPanel(UserPreferences,HomeController,jFrame,JComponentTester)"], "useStart": [2356, 3805, 5086, 10942, 12160, 15011], "useEnd": [2373, 3858, 5144, 10995, 12217, 15064], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Vanuan/sweethome3d/tree/master/test/com/eteks/sweethome3d/junit/ImportedTextureWizardTest.java", "rawCode": "  public void testImportedTextureWizard()\n      throws ComponentSearchException, InterruptedException, NoSuchFieldException,\n          IllegalAccessException, InvocationTargetException {\n    String language = Locale.getDefault().getLanguage();\n    final UserPreferences preferences =\n        new FileUserPreferences() {\n          @Override\n          public boolean isActionTipIgnored(String actionKey) {\n            return true;\n          }\n        };\n    // Ensure we use default language and centimeter unit\n    preferences.setLanguage(language);\n    preferences.setUnit(LengthUnit.CENTIMETER);\n    ViewFactory viewFactory = new SwingViewFactory();\n    // Create a dummy content manager\n    final URL testedImageName = BackgroundImageWizardTest.class.getResource(\"resources/test.png\");\n    final ContentManager contentManager =\n        new ContentManager() {\n          public Content getContent(String contentName) throws RecorderException {\n            try {\n              // Let's consider contentName is a URL\n              return new URLContent(new URL(contentName));\n            } catch (IOException ex) {\n              fail();\n              return null;\n            }\n          }\n\n          public String getPresentationName(String contentName, ContentType contentType) {\n            return \"test\";\n          }\n\n          public boolean isAcceptable(String contentName, ContentType contentType) {\n            return true;\n          }\n\n          public String showOpenDialog(\n              View parentView, String dialogTitle, ContentType contentType) {\n            // Return tested model name URL\n            return testedImageName.toString();\n          }\n\n          public String showSaveDialog(\n              View parentView, String dialogTitle, ContentType contentType, String name) {\n            return null;\n          }\n        };\n    Home home = new Home();\n    final HomeController controller =\n        new HomeController(home, preferences, viewFactory, contentManager);\n    JComponent homeView = (JComponent) controller.getView();\n    PlanComponent planComponent =\n        (PlanComponent) TestUtilities.findComponent(homeView, PlanComponent.class);\n\n    // 1. Create a frame that displays a home view\n    JFrame frame = new JFrame(\"Imported Texture Wizard Test\");\n    frame.add(homeView);\n    frame.pack();\n\n    // Show home plan frame\n    showWindow(frame);\n    JComponentTester tester = new JComponentTester();\n    tester.waitForIdle();\n    // Transfer focus to plan view\n    planComponent.requestFocusInWindow();\n    tester.waitForIdle();\n\n    // Check plan view has focus\n    assertTrue(\"Plan component doesn't have the focus\", planComponent.isFocusOwner());\n\n    // 2. Create two wall between points (50, 50), (150, 50) and (150, 150)\n    runAction(controller, HomePane.ActionType.CREATE_WALLS);\n    tester.actionClick(planComponent, 50, 50);\n    tester.actionClick(planComponent, 150, 50);\n    tester.actionClick(planComponent, 150, 150, InputEvent.BUTTON1_MASK, 2);\n    runAction(controller, HomePane.ActionType.SELECT);\n    // Check two walls were created and selected\n    assertEquals(\"Wrong wall count in home\", 2, home.getWalls().size());\n    assertEquals(\"Wrong selected items count in home\", 2, home.getSelectedItems().size());\n    Iterator<Wall> iterator = home.getWalls().iterator();\n    Wall wall1 = iterator.next();\n    Wall wall2 = iterator.next();\n    // Check walls don't use texture yet\n    assertNull(\"Wrong texture on wall 1 left side\", wall1.getLeftSideTexture());\n    assertNull(\"Wrong texture on wall 2 left side\", wall2.getLeftSideTexture());\n    assertNull(\"Wrong texture on wall 1 right side\", wall1.getRightSideTexture());\n    assertNull(\"Wrong texture on wall 2 right side\", wall2.getRightSideTexture());\n\n    // 3. Edit walls\n    JDialog attributesDialog = showWallPanel(preferences, controller, frame, tester);\n    // Retrieve WallPanel components\n    WallPanel wallPanel =\n        (WallPanel) TestUtilities.findComponent(attributesDialog, WallPanel.class);\n    JSpinner xStartSpinner = (JSpinner) TestUtilities.getField(wallPanel, \"xStartSpinner\");\n    JSpinner xEndSpinner = (JSpinner) TestUtilities.getField(wallPanel, \"xEndSpinner\");\n    TextureChoiceComponent rightSideTextureComponent =\n        (TextureChoiceComponent) TestUtilities.getField(wallPanel, \"rightSideTextureComponent\");\n    // Check xStartSpinner and xEndSpinner panels aren't visible\n    assertFalse(\"X start spinner panel is visible\", xStartSpinner.getParent().isVisible());\n    assertFalse(\"X end spinner panel is visible\", xEndSpinner.getParent().isVisible());\n    // Edit right side texture\n    JDialog textureDialog =\n        showTexturePanel(preferences, rightSideTextureComponent, false, attributesDialog, tester);\n    JList availableTexturesList =\n        (JList) new BasicFinder().find(textureDialog, new ClassMatcher(JList.class, true));\n    int textureCount = availableTexturesList.getModel().getSize();\n    CatalogTexture defaultTexture = (CatalogTexture) availableTexturesList.getSelectedValue();\n    // Import texture\n    JDialog textureWizardDialog = showImportTextureWizard(preferences, frame, tester, false);\n    // Retrieve ImportedFurnitureWizardStepsPanel components\n    ImportedTextureWizardStepsPanel panel =\n        (ImportedTextureWizardStepsPanel)\n            TestUtilities.findComponent(textureWizardDialog, ImportedTextureWizardStepsPanel.class);\n    final JButton imageChoiceOrChangeButton =\n        (JButton) TestUtilities.getField(panel, \"imageChoiceOrChangeButton\");\n    final JTextField nameTextField = (JTextField) TestUtilities.getField(panel, \"nameTextField\");\n    JComboBox categoryComboBox = (JComboBox) TestUtilities.getField(panel, \"categoryComboBox\");\n    JSpinner widthSpinner = (JSpinner) TestUtilities.getField(panel, \"widthSpinner\");\n    JSpinner heightSpinner = (JSpinner) TestUtilities.getField(panel, \"heightSpinner\");\n\n    // Check current step is image\n    tester.waitForIdle();\n    assertStepShowing(panel, true, false);\n    WizardPane view =\n        (WizardPane) TestUtilities.findComponent(textureWizardDialog, WizardPane.class);\n    // Check wizard view next button is disabled\n    final JButton nextFinishOptionButton =\n        (JButton) TestUtilities.getField(view, \"nextFinishOptionButton\");\n    assertFalse(\"Next button is enabled\", nextFinishOptionButton.isEnabled());\n\n    // 4. Choose tested image\n    String imageChoiceOrChangeButtonText = imageChoiceOrChangeButton.getText();\n    tester.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            imageChoiceOrChangeButton.doClick();\n          }\n        });\n    // Wait 200 ms to let time to Java to load the image\n    Thread.sleep(200);\n    // Check choice button text changed\n    assertFalse(\n        \"Choice button text didn't change\",\n        imageChoiceOrChangeButtonText.equals(imageChoiceOrChangeButton.getText()));\n    // Click on next button\n    tester.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            nextFinishOptionButton.doClick();\n          }\n        });\n    // Check current step is attributes\n    assertStepShowing(panel, false, true);\n\n    // 5. Check default furniture name is the presentation name proposed by content manager\n    assertEquals(\n        \"Wrong default name\",\n        contentManager.getPresentationName(\n            testedImageName.toString(), ContentManager.ContentType.IMAGE),\n        nameTextField.getText());\n    // Check name text field has focus\n    assertSame(\n        \"Name text field doesn't have focus\",\n        nameTextField,\n        KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner());\n    // Check default category is user category\n    String userCategoryName =\n        preferences.getLocalizedString(ImportedTextureWizardStepsPanel.class, \"userCategory\");\n    assertEquals(\n        \"Wrong default category\",\n        userCategoryName,\n        ((TexturesCategory) categoryComboBox.getSelectedItem()).getName());\n    // Rename texture\n    final String textureTestName = \"#@\" + System.currentTimeMillis() + \"@#\";\n    tester.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            nameTextField.setText(textureTestName);\n          }\n        });\n    // Check next button is enabled again\n    assertTrue(\"Next button isn't enabled\", nextFinishOptionButton.isEnabled());\n\n    // 6. Change width with a value 5 times greater\n    float width = (Float) widthSpinner.getValue();\n    float height = (Float) heightSpinner.getValue();\n    widthSpinner.setValue(width * 5);\n    // Check height is 5 times greater\n    float newWidth = (Float) widthSpinner.getValue();\n    float newHeight = (Float) heightSpinner.getValue();\n    assertEquals(\"width\", 5 * width, newWidth);\n    assertEquals(\"height\", 5 * height, newHeight);\n\n    tester.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            // Click on Finish to hide dialog box in Event Dispatch Thread\n            nextFinishOptionButton.doClick();\n          }\n        });\n    assertFalse(\"Import texture wizard still showing\", textureWizardDialog.isShowing());\n\n    // Check the list of available textures has one more selected modifiable texture\n    assertEquals(\n        \"Wrong texture count in list\",\n        textureCount + 1,\n        availableTexturesList.getModel().getSize());\n    assertEquals(\n        \"No selected texture in list\", 1, availableTexturesList.getSelectedValues().length);\n    CatalogTexture importedTexture = (CatalogTexture) availableTexturesList.getSelectedValue();\n    assertNotSame(\"Wrong selected texture in list\", defaultTexture, importedTexture);\n    // Check the attributes of the new texture\n    assertEquals(\"Wrong name\", textureTestName, importedTexture.getName());\n    assertEquals(\"Wrong category\", userCategoryName, importedTexture.getCategory().getName());\n    assertEquals(\"Wrong width\", newWidth, importedTexture.getWidth());\n    assertEquals(\"Wrong height\", newHeight, importedTexture.getHeight());\n    assertTrue(\"New texture isn't modifiable\", importedTexture.isModifiable());\n\n    // 7. Click on OK in texture dialog box\n    doClickOnOkInDialog(textureDialog, tester);\n    // Click on OK in wall dialog box\n    doClickOnOkInDialog(attributesDialog, tester);\n    // Check wall attributes are modified accordingly\n    assertNull(\"Wrong texture on wall 1 left side\", wall1.getLeftSideTexture());\n    assertNull(\"Wrong texture on wall 2 left side\", wall2.getLeftSideTexture());\n    assertEquals(\n        \"Wrong texture on wall 1 right side\",\n        textureTestName,\n        wall1.getRightSideTexture().getName());\n    assertEquals(\n        \"Wrong texture on wall 2 right side\",\n        textureTestName,\n        wall2.getRightSideTexture().getName());\n\n    // 8. Edit left side texture of first wall\n    home.setSelectedItems(Arrays.asList(wall1));\n    assertEquals(\"Wrong selected items count in home\", 1, home.getSelectedItems().size());\n    attributesDialog = showWallPanel(preferences, controller, frame, tester);\n    // Retrieve WallPanel components\n    wallPanel = (WallPanel) TestUtilities.findComponent(attributesDialog, WallPanel.class);\n    xStartSpinner = (JSpinner) TestUtilities.getField(wallPanel, \"xStartSpinner\");\n    xEndSpinner = (JSpinner) TestUtilities.getField(wallPanel, \"xEndSpinner\");\n    TextureChoiceComponent leftSideTextureComponent =\n        (TextureChoiceComponent) TestUtilities.getField(wallPanel, \"leftSideTextureComponent\");\n    // Check xStartSpinner and xEndSpinner panels are visible\n    assertTrue(\"X start spinner panel isn't visible\", xStartSpinner.getParent().isVisible());\n    assertTrue(\"X end spinner panel isn't visible\", xEndSpinner.getParent().isVisible());\n    // Edit left side texture\n    textureDialog =\n        showTexturePanel(preferences, leftSideTextureComponent, true, attributesDialog, tester);\n    availableTexturesList =\n        (JList) new BasicFinder().find(textureDialog, new ClassMatcher(JList.class, true));\n    textureCount = availableTexturesList.getModel().getSize();\n    // Select imported texture\n    availableTexturesList.setSelectedValue(importedTexture, true);\n    // Modify texture\n    textureWizardDialog = showImportTextureWizard(preferences, frame, tester, true);\n    // Retrieve ImportedFurnitureWizardStepsPanel components\n    panel =\n        (ImportedTextureWizardStepsPanel)\n            TestUtilities.findComponent(textureWizardDialog, ImportedTextureWizardStepsPanel.class);\n    widthSpinner = (JSpinner) TestUtilities.getField(panel, \"widthSpinner\");\n    final JButton nextFinishOptionButton2 =\n        (JButton)\n            TestUtilities.getField(\n                TestUtilities.findComponent(textureWizardDialog, WizardPane.class),\n                \"nextFinishOptionButton\");\n    tester.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            nextFinishOptionButton2.doClick();\n          }\n        });\n\n    // Change width\n    widthSpinner.setValue((Float) widthSpinner.getValue() * 2);\n    newWidth = (Float) widthSpinner.getValue();\n    tester.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            // Click on Finish to hide dialog box in Event Dispatch Thread\n            nextFinishOptionButton2.doClick();\n          }\n        });\n    tester.waitForIdle();\n    assertFalse(\"Import texture wizard still showing\", textureWizardDialog.isShowing());\n    // Check the list of available textures has the same texture count\n    // and a new selected texture\n    assertEquals(\n        \"Wrong texture count in list\", textureCount, availableTexturesList.getModel().getSize());\n    assertEquals(\n        \"No selected texture in list\", 1, availableTexturesList.getSelectedValues().length);\n    CatalogTexture modifiedTexture = (CatalogTexture) availableTexturesList.getSelectedValue();\n    assertNotSame(\"Wrong selected texture in list\", importedTexture, modifiedTexture);\n    // Check the attributes of the new texture\n    assertEquals(\"Wrong name\", textureTestName, modifiedTexture.getName());\n    assertEquals(\"Wrong category\", userCategoryName, modifiedTexture.getCategory().getName());\n    assertEquals(\"Wrong width\", newWidth, modifiedTexture.getWidth());\n    assertTrue(\"New texture isn't modifiable\", modifiedTexture.isModifiable());\n\n    // 9. Click on OK in texture dialog box\n    doClickOnOkInDialog(textureDialog, tester);\n    // Click on OK in wall dialog box\n    doClickOnOkInDialog(attributesDialog, tester);\n    // Check wall attributes are modified accordingly\n    assertEquals(\n        \"Wrong texture on wall 1 left side\", newWidth, wall1.getLeftSideTexture().getWidth());\n    assertNull(\"Wrong texture on wall 2 left side\", wall2.getLeftSideTexture());\n    assertEquals(\n        \"Wrong texture on wall 1 right side\", newWidth / 2, wall1.getRightSideTexture().getWidth());\n    assertEquals(\n        \"Wrong texture on wall 2 right side\", newWidth / 2, wall2.getRightSideTexture().getWidth());\n\n    // 10. Open wall dialog a last time to delete the modified texture\n    attributesDialog = showWallPanel(preferences, controller, frame, tester);\n    // Retrieve WallPanel components\n    wallPanel = (WallPanel) TestUtilities.findComponent(attributesDialog, WallPanel.class);\n    leftSideTextureComponent =\n        (TextureChoiceComponent) TestUtilities.getField(wallPanel, \"leftSideTextureComponent\");\n    // Edit left side texture\n    textureDialog =\n        showTexturePanel(preferences, leftSideTextureComponent, true, attributesDialog, tester);\n    availableTexturesList =\n        (JList) new BasicFinder().find(textureDialog, new ClassMatcher(JList.class, true));\n    textureCount = availableTexturesList.getModel().getSize();\n    // Select modified texture\n    availableTexturesList.setSelectedValue(modifiedTexture, true);\n    final JButton deleteButton =\n        (JButton)\n            new BasicFinder()\n                .find(\n                    textureDialog,\n                    new Matcher() {\n                      public boolean matches(Component c) {\n                        return c instanceof JButton\n                            && ((JButton) c)\n                                .getText()\n                                .equals(\n                                    preferences.getLocalizedString(\n                                        TextureChoiceComponent.class, \"deleteTextureButton.text\"));\n                      }\n                    });\n    tester.invokeAndWait(\n        new Runnable() {\n          public void run() {\n            // Display confirm dialog box later in Event Dispatch Thread to avoid blocking test\n            // thread\n            deleteButton.doClick();\n          }\n        });\n    tester.waitForIdle();\n    // Wait for confirm dialog to be shown\n    final String confirmDeleteSelectedCatalogTextureDialogTitle =\n        preferences.getLocalizedString(\n            TextureChoiceComponent.class, \"confirmDeleteSelectedCatalogTexture.title\");\n    tester.waitForFrameShowing(new AWTHierarchy(), confirmDeleteSelectedCatalogTextureDialogTitle);\n    // Check dialog box is displayed\n    JDialog confirmDialog =\n        (JDialog)\n            new BasicFinder()\n                .find(\n                    textureDialog,\n                    new Matcher() {\n                      public boolean matches(Component c) {\n                        return c instanceof JDialog\n                            && ((JDialog) c)\n                                .getTitle()\n                                .equals(confirmDeleteSelectedCatalogTextureDialogTitle);\n                      }\n                    });\n    assertTrue(\"Confirm dialog not showing\", confirmDialog.isShowing());\n    doClickOnOkInDialog(confirmDialog, tester);\n    tester.waitForIdle();\n    // Check the list of available textures has one less texture and no selected texture\n    assertEquals(\n        \"Wrong texture count in list\",\n        textureCount - 1,\n        availableTexturesList.getModel().getSize());\n    assertEquals(\n        \"No selected texture in list\", 0, availableTexturesList.getSelectedValues().length);\n    // Check delete button is disabled\n    assertFalse(\"Delete button isn't disabled\", deleteButton.isEnabled());\n    // Click on OK in texture dialog box\n    doClickOnOkInDialog(textureDialog, tester);\n    // Click on OK in wall dialog box\n    doClickOnOkInDialog(attributesDialog, tester);\n    // Check wall attributes didn't change\n    assertNotNull(\"Wrong texture on wall 1 left side\", wall1.getLeftSideTexture());\n    assertNull(\"Wrong texture on wall 2 left side\", wall2.getLeftSideTexture());\n    assertNotNull(\"Wrong texture on wall 1 right side\", wall1.getRightSideTexture());\n    assertNotNull(\"Wrong texture on wall 2 right side\", wall2.getRightSideTexture());\n  }\n"}, {"dataset": "pack", "exampleID": 3474, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 168, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setExtendedState(int)", "jFrame.setVisible(boolean)"], "useStart": [249, 325], "useEnd": [300, 353], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hamo26/SchdedulingAndFunStuff/tree/master/nanork/nano-RK/avrora/src/avrora/gui/AvroraGui.java", "rawCode": "  /**\n   * Once the GUI has been \"created\" we call this function to physically display it to the screen\n   */\n  public void showGui() {\n    // Display the window.\n\n    masterFrame.pack(); // set to min size the components allow if its not maxed\n    masterFrame.setExtendedState(JFrame.MAXIMIZED_BOTH); // will max window\n    masterFrame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3475, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [370], "initializationEnd": [382], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [388, 666], "configurationEnd": [440, 688], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 732, "focalAPIEnd": 744, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [750], "useEnd": [772], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kayahr/threedee/tree/master/threedee-demos/src/main/java/de/ailis/threedee/demo/AssetDemo.java", "rawCode": "  /**\n   * Main method.\n   *\n   * @param args Command line arguments\n   * @throws IOException When IO error occurs\n   */\n  public static void main(final String args[]) throws IOException {\n    // Create the assets library\n    final Assets assets = new Assets(new ClasspathAssetProvider());\n    assets.addAssets(\"duck\");\n\n    // Create the frame\n    final JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Create the canvas component displaying the scene\n    final SceneCanvas canvas = new SceneCanvas();\n    canvas.setScene(assets.getScenes().iterator().next());\n    canvas.setPreferredSize(new Dimension(640, 480));\n    frame.getContentPane().add(canvas);\n\n    // Display the frame\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3476, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [63], "initializationEnd": [343], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()", "jFrame.getContentPane()", "jFrame.getContentPane()"], "configurationStart": [367, 421, 475, 2941], "configurationEnd": [415, 439, 493, 2959], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 2992, "focalAPIEnd": 3000, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.show()"], "useStart": [3006], "useEnd": [3014], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/src/share/demo/java2d/J2DBench/src/j2dbench/J2DBench.java", "rawCode": "  public static void startGUI() {\n    final JFrame f =\n        new JFrame(\"J2DBench\") {\n          public Dimension getPreferredSize() {\n            Dimension pref = super.getPreferredSize();\n            pref.width = Math.max(pref.width, 800);\n            pref.height = Math.max(pref.height, 600);\n            return pref;\n          }\n        };\n    guiFrame = f;\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.getContentPane().setLayout(new BorderLayout());\n    f.getContentPane().add(Group.root.getJComponent(), BorderLayout.CENTER);\n    JPanel p = new JPanel();\n    p.setLayout(new BoxLayout(p, BoxLayout.X_AXIS));\n    JButton b = new JButton(\"Run Tests...\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!saveOrDiscardLastResults()) {\n              return;\n            }\n            if (verbose.isEnabled()) {\n              System.out.println(e);\n              System.out.println(\"running tests...\");\n            }\n            new Thread(\n                    new Runnable() {\n                      public void run() {\n                        runTests(true);\n                      }\n                    })\n                .start();\n            if (verbose.isEnabled()) {\n              System.out.println(\"done\");\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Load Options\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            JFileChooser fc = getFileChooser();\n            int ret = fc.showOpenDialog(f);\n            if (ret == JFileChooser.APPROVE_OPTION) {\n              String reason = loadOptions(fc.getSelectedFile());\n              if (reason != null) {\n                System.err.println(reason);\n              }\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Save Options\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            JFileChooser fc = getFileChooser();\n            int ret = fc.showSaveDialog(f);\n            if (ret == JFileChooser.APPROVE_OPTION) {\n              String reason = saveOptions(fc.getSelectedFile());\n              if (reason != null) {\n                System.err.println(reason);\n              }\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Save Results\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (saveResults()) {\n              lastResults = null;\n            }\n          }\n        });\n    p.add(b);\n\n    b = new JButton(\"Quit\");\n    b.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (!saveOrDiscardLastResults()) {\n              return;\n            }\n            System.exit(0);\n          }\n        });\n    p.add(b);\n\n    f.getContentPane().add(p, BorderLayout.SOUTH);\n    f.pack();\n    f.show();\n  }\n"}, {"dataset": "pack", "exampleID": 3477, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [85], "initializationEnd": [104], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [110, 176], "configurationEnd": [170, 203], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 243, "focalAPIEnd": 260, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [266], "useEnd": [293], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void buildButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Build\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdBuild(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3478, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [708], "initializationEnd": [756], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 675, "tryExpressionEnd": 679, "tryBlockStart": 675, "tryBlockEnd": 997, "catchExpressionStart": 937, "catchExpressionEnd": 963, "catchBlockStart": 937, "catchBlockEnd": 997, "exceptionHandlingCallStart": [971], "exceptionHandlingCallEnd": [990], "configuration": ["jFrame.getContentPane()"], "configurationStart": [825], "configurationEnd": [847], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 887, "focalAPIEnd": 899, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [907], "useEnd": [929], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jkiddo/jolivia/tree/master/jolivia.example/src/test/java/test/Noop.java", "rawCode": "  public void hiresResponse() throws Exception {\n    final String requestBase = String.format(\"http://%s:%d\", \"192.168.1.26\", 5000);\n    final String url =\n        String.format(\n            \"%s/databases/1/items?session-id=1101478641&meta=dpap.hires,dmap.itemid,dpap.filedata&query=('dmap.itemid:1024','dmap.itemid:1025')\",\n            requestBase);\n    final DatabaseItems di = RequestHelper.requestParsed(url);\n    final ListingItem item = di.getListing().getListingItems().iterator().next();\n    final byte[] data = item.getSpecificChunk(FileData.class).getValue();\n\n    final BufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n\n    // Debugging ...\n    try {\n      final JFrame frame = new JFrame(\"Image loaded from ImageInputStream\");\n      final JLabel label = new JLabel(new ImageIcon(image));\n      frame.getContentPane().add(label, BorderLayout.CENTER);\n      frame.pack();\n      frame.setVisible(true);\n    } catch (final Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3479, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [199], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.add(JPanel)"], "configurationStart": [237, 296], "configurationEnd": [289, 321], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 328, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [346], "useEnd": [368], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stratosphere/stratosphere-sopremo/tree/master/meteor/meteor-client/src/main/java/eu/stratosphere/meteor/client/UiClient.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the event\n   * dispatch thread.\n   */\n  private static void createAndShowGUI() {\n    final JFrame frame = new JFrame(\"Meteor UI - Client\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    frame.add(new UiClient());\n\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3480, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [807], "initializationEnd": [831], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setContentPane(JPanel)"], "configurationStart": [837, 983], "configurationEnd": [889, 1006], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1040, "focalAPIEnd": 1052, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1058], "useEnd": [1080], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GlobalsDB/Challenges/tree/master/2/Gloveny/com/intersys/globals/LogReader/SpringForm.java", "rawCode": "  /**\n   * Create the GUI and show it. For thread safety, this method should be invoked from the\n   * event-dispatching thread.\n   */\n  private static void createAndShowGUI() {\n    String[] labels = {\"Name: \", \"Fax: \", \"Email: \", \"Address: \"};\n    int numPairs = labels.length;\n\n    // Create and populate the panel.\n    JPanel p = new JPanel(new SpringLayout());\n    for (int i = 0; i < numPairs; i++) {\n      JLabel l = new JLabel(labels[i], JLabel.TRAILING);\n      p.add(l);\n      JTextField textField = new JTextField(10);\n      l.setLabelFor(textField);\n      p.add(textField);\n    }\n\n    // Lay out the panel.\n    SpringUtilities.makeCompactGrid(\n        p, numPairs, 2, // rows, cols\n        6, 6, // initX, initY\n        6, 6); // xPad, yPad\n\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"SpringForm\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Set up the content pane.\n    p.setOpaque(true); // content panes must be opaque\n    frame.setContentPane(p);\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3481, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [105], "initializationEnd": [123], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [209], "configurationEnd": [231], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 266, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.addWindowListener(WindowListener)"], "useStart": [284, 312], "useEnd": [306, 361], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/jsky/src/main/jsky/util/gui/LabelValue.java", "rawCode": "  /** test main: usage: java LabelValue */\n  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Test\");\n    LabelValue lv = new LabelValue(\"test\", \"failed\");\n    lv.setText(\"passed\");\n    frame.getContentPane().add(lv, BorderLayout.CENTER);\n    frame.pack();\n    frame.setVisible(true);\n    frame.addWindowListener(new BasicWindowMonitor());\n  }\n"}, {"dataset": "pack", "exampleID": 3482, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [556], "initializationEnd": [576], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(InGameMenu)", "jFrame.setResizable(boolean)", "jFrame.setMinimumSize(Dimension)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setLocation(Point)"], "configurationStart": [584, 613, 646, 705, 1024], "configurationEnd": [605, 638, 697, 763, 1050], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1059, "focalAPIEnd": 1071, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.dispose()"], "useStart": [1079, 1374], "useEnd": [1101, 1389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/msnorth/cs2340_mule/tree/master/edu/gatech/cs2340/ui/InGameMenuManager.java", "rawCode": "  /** Prepare to display on a JFrame. Saves previous state so state can resume later */\n  @Override\n  public void run() {\n    if (!inGameMenuActive) {\n      inGameMenuActive = true;\n      GameClock.pauseClock(); // pause the game\n      // set up window\n      inGameMenu = new InGameMenu();\n      inGameMenu.setManager(this);\n\n      // initialize internal variables\n      gameLoaded = false; // there hasn't been a new game loaded yet\n      returnToMainMenu = false; // assume we'll load a game\n      fileChooser = new JFileChooser();\n\n      JFrame frame = new JFrame(\"Paused\");\n      frame.add(inGameMenu);\n      frame.setResizable(false);\n      frame.setMinimumSize(inGameMenu.getPreferredSize());\n      frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n\n      Point mainLoc = MainGameWindow.getWindowLocation();\n      Point thisLoc =\n          new Point(\n              MainGameWindow.DIM_X / 2 - InGameMenu.DIM_X / 2 + mainLoc.x,\n              MainGameWindow.DIM_Y / 2 - InGameMenu.DIM_Y / 2 + mainLoc.y);\n      frame.setLocation(thisLoc);\n\n      frame.pack();\n      frame.setVisible(true);\n\n      // store the previous panel and make menu visible\n      // previousPanel = MainGameWindow.getCurrentPanel();\n      // MainGameWindow.setMainPanel(inGameMenu);\n      // Wait\n      Waiter.waitOn(inGameMenu); // wait until InGameMenu finishes collecting input\n\n      frame.dispose();\n\n      if (!gameLoaded) {\n        GameClock.startClock();\n        inGameMenuActive = false;\n      } else {\n        loadGame();\n      }\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3483, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 28, "focalAPIEnd": 40, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["centerOnScreen(jFrame)", "jFrame.setVisible(boolean)"], "useStart": [46, 82], "useEnd": [76, 104], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/Javascool4/tree/master/dev/jvs4.5/trunk/dev/lib/jvs2html/src/de/java2html/Java2HtmlApplication.java", "rawCode": "  private void show() {\n    frame.pack();\n    GuiTools.centerOnScreen(frame);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3484, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [86], "initializationEnd": [106], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [112, 178], "configurationEnd": [172, 205], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 246, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [269], "useEnd": [296], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dawoodamr/Java-SNePS/tree/master/Java SNePS/src/snepsui/Commands/cmdFullDescribe.java", "rawCode": "  private void assertButtonActionPerformed(ActionEvent evt) {\n    JFrame popupFrame = new JFrame(\"Assert\");\n    popupFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    popupFrame.getContentPane().add(new cmdAssert(network, frame));\n    popupFrame.pack();\n    popupFrame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3485, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [251], "initializationEnd": [263], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 162, "tryExpressionEnd": 166, "tryBlockStart": 162, "tryBlockEnd": 512, "catchExpressionStart": 458, "catchExpressionEnd": 478, "catchBlockStart": 458, "catchBlockEnd": 512, "exceptionHandlingCallStart": [486], "exceptionHandlingCallEnd": [505], "configuration": ["jFrame.getContentPane()", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [271, 341], "configurationEnd": [294, 398], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 406, "focalAPIEnd": 419, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [427], "useEnd": [450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openrocket/openrocket/tree/master/swing/src/net/sf/openrocket/utils/ComponentPresetEditor.java", "rawCode": "  /** Launch the test main. */\n  public static void main(String[] args) {\n    BasicApplication app = new BasicApplication();\n    app.initializeApplication();\n    try {\n      // Application.setPreferences(new SwingPreferences());\n      JFrame dialog = new JFrame();\n      dialog.getContentPane().add(new ComponentPresetEditor(dialog));\n      dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n      dialog.pack();\n      dialog.setVisible(true);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3486, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setContentPane(GenericSelector<String>)"], "configurationStart": [712], "configurationEnd": [742], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1016, "focalAPIEnd": 1028, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [1034, 1092], "useEnd": [1086, 1114], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rex1fernando/linewars/tree/master/trunk/Line_Wars/src/editor/GenericSelector.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    GenericSelector<String> selector =\n        new GenericSelector<String>(\n            \"Strings\",\n            new GenericListCallback<String>() {\n              @Override\n              public List<String> getSelectionList() {\n                List<String> ret = new ArrayList<String>();\n                ret.add(\"fi\");\n                ret.add(\"fo\");\n                ret.add(\"fumb\");\n                return ret;\n              }\n            },\n            new CustomToString<String>() {\n              @Override\n              public String toString(String obj) {\n                return obj.toUpperCase();\n              }\n            });\n    frame.setContentPane(selector);\n    selector.addSelectionChangeListener(\n        new SelectionChangeListener<String>() {\n          @Override\n          public void selectionChanged(String newSelection) {\n            System.out.println(\"selection changed to:\" + newSelection);\n          }\n        });\n\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3487, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [120], "initializationEnd": [146], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.hide()"], "configurationStart": [73], "configurationEnd": [95], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 3057, "focalAPIEnd": 3079, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setResizable(boolean)", "jFrame.setLocation(Point)", "jFrame.validate()", "jFrame.show()", "jFrame.toFront()", "jFrame.setVisible(boolean)"], "useStart": [3085, 3126, 3182, 3214, 3242, 3273], "useEnd": [3120, 3176, 3208, 3236, 3267, 3305], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tkt-dwi/DealWithCalendar/tree/master/src/dealwithcalendar/GUI.java", "rawCode": "  public void createAddCourseWindow() {\n    if (addCourseWindow != null) addCourseWindow.hide();\n\n    addCourseWindow = new JFrame(\"Lisää kurssi\");\n    crsName = new JTextField(\"nimi\");\n    crsSDay = new JComboBox(monthdays);\n    crsSMonth = new JComboBox(months);\n    crsSYear = new JComboBox(years);\n    crsEDay = new JComboBox(monthdays);\n    crsEMonth = new JComboBox(months);\n    crsEYear = new JComboBox(years);\n\n    Course = new JPanel(new GridLayout(4, 1));\n    Course.setFont(THEME_FONT_SMALL);\n    Course.setBackground(THEME_COLOR_BLUE);\n    Course.setForeground(new Color(0, 0, 0));\n\n    JPanel crsRow = new JPanel(new FlowLayout());\n    crsName.setText(\"nimi\");\n    crsName.setPreferredSize(new Dimension(250, 20));\n    crsName.setFont(THEME_FONT_SMALL);\n    crsName.setEditable(true);\n    crsRow.add(crsName);\n    Course.add(crsRow);\n\n    crsRow = new JPanel(new FlowLayout());\n    JTextField cs = new JTextField(\"alkaa\");\n    cs.setPreferredSize(new Dimension(100, 20));\n    cs.setEditable(false);\n    cs.setFont(THEME_FONT_SMALL);\n    cs.setBackground(THEME_COLOR_VDARKBLUE);\n    cs.setForeground(new Color(0, 0, 0));\n    crsRow.add(cs);\n\n    crsSDay.setPreferredSize(new Dimension(50, 20));\n    crsSDay.setFont(THEME_FONT_SMALL);\n    crsSDay.setBackground(THEME_COLOR_VDARKBLUE);\n    crsSDay.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsSDay);\n\n    crsSMonth.setPreferredSize(new Dimension(50, 20));\n    crsSMonth.setFont(THEME_FONT_SMALL);\n    crsSMonth.setBackground(THEME_COLOR_VDARKBLUE);\n    crsSMonth.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsSMonth);\n\n    crsSYear.setPreferredSize(new Dimension(70, 20));\n    crsSYear.setFont(THEME_FONT_SMALL);\n    crsSYear.setBackground(THEME_COLOR_VDARKBLUE);\n    crsSYear.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsSYear);\n    Course.add(crsRow);\n\n    crsRow = new JPanel(new FlowLayout());\n    cs = new JTextField(\"päättyy\");\n    cs.setPreferredSize(new Dimension(100, 20));\n    cs.setEditable(false);\n    cs.setFont(THEME_FONT_SMALL);\n    cs.setBackground(THEME_COLOR_VDARKBLUE);\n    cs.setForeground(new Color(0, 0, 0));\n    crsRow.add(cs);\n\n    crsEDay.setPreferredSize(new Dimension(50, 20));\n    crsEDay.setFont(THEME_FONT_SMALL);\n    crsEDay.setBackground(THEME_COLOR_VDARKBLUE);\n    crsEDay.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsEDay);\n\n    crsEMonth.setPreferredSize(new Dimension(50, 20));\n    crsEMonth.setFont(THEME_FONT_SMALL);\n    crsEMonth.setBackground(THEME_COLOR_VDARKBLUE);\n    crsEMonth.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsEMonth);\n\n    crsEYear.setPreferredSize(new Dimension(70, 20));\n    crsEYear.setFont(THEME_FONT_SMALL);\n    crsEYear.setBackground(THEME_COLOR_VDARKBLUE);\n    crsEYear.setForeground(new Color(0, 0, 0));\n    crsRow.add(crsEYear);\n    Course.add(crsRow);\n\n    addCourse.setPreferredSize(new Dimension(120, 20));\n    addCourse.setFont(THEME_FONT_SMALL);\n    addCourse.setBackground(THEME_COLOR_VDARKBLUE);\n\n    Course.add(addCourse);\n    Course.validate();\n\n    addCourseWindow.add(Course);\n    addCourseWindow.pack();\n    addCourseWindow.setResizable(false);\n    addCourseWindow.setLocation(getLocationOnScreen());\n    addCourseWindow.validate();\n    addCourseWindow.show();\n    addCourseWindow.toFront();\n    addCourseWindow.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3488, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [75], "initializationEnd": [103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.add(LaunchControl)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [153, 168], "configurationEnd": [162, 216], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 222, "focalAPIEnd": 230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [236], "useEnd": [254], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/psas/launch-control/tree/master/src/launchcontrol/LaunchControl.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    JFrame f = new JFrame(\"Launch Control\");\n    LaunchControl lc = new LaunchControl();\n    f.add(lc);\n    f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    f.pack();\n    f.setVisible(true);\n\n    // poll for status\n    while (true) lc.pollStatus();\n  }\n"}, {"dataset": "pack", "exampleID": 3489, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [294], "initializationEnd": [319], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setContentPane(FileTreeViewer)"], "configurationStart": [325, 531], "configurationEnd": [377, 567], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 601, "focalAPIEnd": 613, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [619], "useEnd": [641], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jjnguy/PublicFun/tree/master/cs319_hw3/part2/filebrowser/FileTreeViewer.java", "rawCode": "  /**\n   * Creates a FileTreeViewer in a frame and displays it, using the default hostname and port.\n   *\n   * @param root node to be used as the root of the tree's model\n   */\n  private static void createAndShow(String host, int port) {\n    // Create and set up the window.\n    JFrame frame = new JFrame(\"File Viewer\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Create and set up the content pane.\n    FileTreeViewer newContentPane = new FileTreeViewer(host, port);\n    newContentPane.setOpaque(true);\n    frame.setContentPane(newContentPane);\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3490, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [209], "initializationEnd": [258], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridLayout)", "jFrame.setDefaultCloseOperation(int)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)", "jFrame.add(JButton,GridBagConstraints)"], "configurationStart": [266, 310, 607, 690, 826, 940, 1027, 1175, 1294, 1382, 1533, 1656, 1747, 1907, 2028, 2114, 2259, 2376, 2463, 2611, 2722, 2802, 2929, 3035, 3117, 3250, 3356, 3436, 3563, 3678, 3769, 3929, 4056, 4148, 4309, 4432, 4520, 4669, 4794, 4888, 5055, 5181, 5270, 5422, 5529, 5588, 5641], "configurationEnd": [302, 362, 643, 724, 857, 980, 1065, 1210, 1335, 1421, 1569, 1700, 1789, 1946, 2067, 2151, 2293, 2416, 2501, 2646, 2755, 2833, 2957, 3070, 3150, 3280, 3389, 3467, 3591, 3722, 3811, 3968, 4100, 4190, 4348, 4472, 4558, 4704, 4840, 4932, 5096, 5222, 5309, 5458, 5560, 5613, 5673], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 5682, "focalAPIEnd": 5694, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [5797], "useEnd": [5819], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/JArduino/tree/master/jarduino.core/src/main/java/org/sintef/jarduino/sim/InteractiveJArduinoDataGUIClient.java", "rawCode": "  public static void init() {\n    if (!init) {\n      init = true;\n\n      clearButton = new JButton(\"Clear Console\");\n      logOwnEventsButton = new JButton(\"Log Own Events (Click to Activate)\");\n      frame = new JFrame(\"Interactive JArduino Data Simulator\");\n      frame.setLayout(new GridBagLayout());\n      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n      GridBagConstraints c = new GridBagConstraints();\n      c.gridwidth = 1;\n      c.fill = GridBagConstraints.HORIZONTAL;\n      c.insets = new Insets(0, 3, 0, 3);\n\n      // GUI related to pinMode\n      c.gridy = 0;\n      c.gridx = 0;\n      frame.add(createLabel(\"pinMode\"), c);\n\n      c.gridy = 1;\n      c.gridx = 0;\n      frame.add(createpinModePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 0;\n      sendButtonpinMode = createSendButton(\"pinMode\");\n      frame.add(sendButtonpinMode, c);\n\n      // GUI related to digitalRead\n      c.gridy = 0;\n      c.gridx = 1;\n      frame.add(createLabel(\"digitalRead\"), c);\n\n      c.gridy = 1;\n      c.gridx = 1;\n      frame.add(createdigitalReadPanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 1;\n      sendButtondigitalRead = createSendButton(\"digitalRead\");\n      frame.add(sendButtondigitalRead, c);\n\n      // GUI related to digitalWrite\n      c.gridy = 0;\n      c.gridx = 2;\n      frame.add(createLabel(\"digitalWrite\"), c);\n\n      c.gridy = 1;\n      c.gridx = 2;\n      frame.add(createdigitalWritePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 2;\n      sendButtondigitalWrite = createSendButton(\"digitalWrite\");\n      frame.add(sendButtondigitalWrite, c);\n\n      // GUI related to analogReference\n      c.gridy = 0;\n      c.gridx = 3;\n      frame.add(createLabel(\"analogReference\"), c);\n\n      c.gridy = 1;\n      c.gridx = 3;\n      frame.add(createanalogReferencePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 3;\n      sendButtonanalogReference = createSendButton(\"analogReference\");\n      frame.add(sendButtonanalogReference, c);\n\n      // GUI related to analogRead\n      c.gridy = 0;\n      c.gridx = 4;\n      frame.add(createLabel(\"analogRead\"), c);\n\n      c.gridy = 1;\n      c.gridx = 4;\n      frame.add(createanalogReadPanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 4;\n      sendButtonanalogRead = createSendButton(\"analogRead\");\n      frame.add(sendButtonanalogRead, c);\n\n      // GUI related to analogWrite\n      c.gridy = 0;\n      c.gridx = 5;\n      frame.add(createLabel(\"analogWrite\"), c);\n\n      c.gridy = 1;\n      c.gridx = 5;\n      frame.add(createanalogWritePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 5;\n      sendButtonanalogWrite = createSendButton(\"analogWrite\");\n      frame.add(sendButtonanalogWrite, c);\n\n      // GUI related to tone\n      c.gridy = 0;\n      c.gridx = 6;\n      frame.add(createLabel(\"tone\"), c);\n\n      c.gridy = 1;\n      c.gridx = 6;\n      frame.add(createtonePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 6;\n      sendButtontone = createSendButton(\"tone\");\n      frame.add(sendButtontone, c);\n\n      // GUI related to noTone\n      c.gridy = 0;\n      c.gridx = 7;\n      frame.add(createLabel(\"noTone\"), c);\n\n      c.gridy = 1;\n      c.gridx = 7;\n      frame.add(createnoTonePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 7;\n      sendButtonnoTone = createSendButton(\"noTone\");\n      frame.add(sendButtonnoTone, c);\n\n      // GUI related to ping\n      c.gridy = 0;\n      c.gridx = 8;\n      frame.add(createLabel(\"ping\"), c);\n\n      c.gridy = 1;\n      c.gridx = 8;\n      frame.add(createpingPanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 8;\n      sendButtonping = createSendButton(\"ping\");\n      frame.add(sendButtonping, c);\n\n      // GUI related to attachInterrupt\n      c.gridy = 0;\n      c.gridx = 9;\n      frame.add(createLabel(\"attachInterrupt\"), c);\n\n      c.gridy = 1;\n      c.gridx = 9;\n      frame.add(createattachInterruptPanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 9;\n      sendButtonattachInterrupt = createSendButton(\"attachInterrupt\");\n      frame.add(sendButtonattachInterrupt, c);\n\n      // GUI related to detachInterrupt\n      c.gridy = 0;\n      c.gridx = 10;\n      frame.add(createLabel(\"detachInterrupt\"), c);\n\n      c.gridy = 1;\n      c.gridx = 10;\n      frame.add(createdetachInterruptPanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 10;\n      sendButtondetachInterrupt = createSendButton(\"detachInterrupt\");\n      frame.add(sendButtondetachInterrupt, c);\n\n      // GUI related to eeprom_read\n      c.gridy = 0;\n      c.gridx = 11;\n      frame.add(createLabel(\"eeprom_read\"), c);\n\n      c.gridy = 1;\n      c.gridx = 11;\n      frame.add(createeeprom_readPanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 11;\n      sendButtoneeprom_read = createSendButton(\"eeprom_read\");\n      frame.add(sendButtoneeprom_read, c);\n\n      // GUI related to eeprom_sync_write\n      c.gridy = 0;\n      c.gridx = 12;\n      frame.add(createLabel(\"eeprom_sync_write\"), c);\n\n      c.gridy = 1;\n      c.gridx = 12;\n      frame.add(createeeprom_sync_writePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 12;\n      sendButtoneeprom_sync_write = createSendButton(\"eeprom_sync_write\");\n      frame.add(sendButtoneeprom_sync_write, c);\n\n      // GUI related to eeprom_write\n      c.gridy = 0;\n      c.gridx = 13;\n      frame.add(createLabel(\"eeprom_write\"), c);\n\n      c.gridy = 1;\n      c.gridx = 13;\n      frame.add(createeeprom_writePanel(), c);\n\n      c.gridy = 2;\n      c.gridx = 13;\n      sendButtoneeprom_write = createSendButton(\"eeprom_write\");\n      frame.add(sendButtoneeprom_write, c);\n\n      c.gridy = 3;\n      c.gridx = 0;\n      c.gridwidth = 14;\n      frame.add(createJTextPane(), c);\n\n      c.gridy = 4;\n      frame.add(clearButton, c);\n\n      c.gridy = 5;\n      frame.add(logOwnEventsButton, c);\n\n      frame.pack();\n      clearButton.addActionListener(_this);\n      logOwnEventsButton.addActionListener(_this);\n      frame.setVisible(true);\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3491, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [783], "initializationEnd": [804], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [810], "configurationEnd": [832], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 860, "focalAPIEnd": 872, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [878], "useEnd": [900], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape2/tree/master/coreplugins/RFilters/src/main/java/filter/view/FilterView.java", "rawCode": "  /**\n   * DOCUMENT ME!\n   *\n   * @param args DOCUMENT ME!\n   */\n  public static void main(String[] args) {\n    if (System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n      try {\n        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n      } catch (Exception e) {\n        // TODO: Error handling.\n        System.err.println(\"Hey. Error loading L&F: on Windows\");\n\n        // TODO: REMOVE\n        // e.printStackTrace();\n      }\n    } else {\n      try {\n        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n      } catch (Exception e) {\n        // TODO: Error handling.\n        System.err.println(\"Hey. Error loading L&F: on NOT Windows\");\n\n        // TODO: REMOVE\n        // e.printStackTrace();\n      }\n    }\n\n    JFrame frame = new JFrame(\"Filters\");\n    frame.getContentPane().add(new FilterView());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3492, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [146], "initializationEnd": [195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [201], "configurationEnd": [223], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 237, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setVisible(boolean)"], "useStart": [255, 313], "useEnd": [307, 335], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/picocontainer/picocontainer/tree/master/pico/gems/src/test/com/picocontainer/gems/monitors/prefuse/AggregateDemoHacks.java", "rawCode": "  public static JFrame demo(final Graph graph) throws IOException {\n    AggregateDemoHacks ad = new AggregateDemoHacks(graph);\n    JFrame frame = new JFrame(\"p r e f u s e | a g g r e g a t e d\");\n    frame.getContentPane().add(ad);\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n    return frame;\n  }\n"}, {"dataset": "pack", "exampleID": 3493, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [137], "configurationEnd": [155], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 465, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IanDarwin/darwinsys-api/tree/master/src/test/java/com/darwinsys/swingui/layout/RelativeLayoutTest.java", "rawCode": "  /** Construct a RelativeLayoutTest test program. */\n  public void setParentFrame(JFrame f) {\n    Button qb; // quit\n    Container cp = f.getContentPane();\n    cp.setLayout(new RelativeLayout(300, 150));\n    cp.add(\"80,20\", new Button(\"MidWidth\"));\n    cp.add(\"150,75\", qb = new Button(\"Quit\"));\n    qb.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            System.exit(0);\n          }\n        });\n    f.pack();\n  }\n"}, {"dataset": "pack", "exampleID": 3494, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [62], "initializationEnd": [74], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [80, 138], "configurationEnd": [132, 160], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 193, "focalAPIEnd": 205, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [211], "useEnd": [233], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nodebox/scenebuilder/tree/master/app/src/nodebox/app/DraggableNumber.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new DraggableNumber());\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3495, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [117], "initializationEnd": [129], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setJMenuBar(JMenuBar)", "jFrame.setContentPane(JPanel)", "jFrame.setDefaultCloseOperation(int)", "jFrame.setTitle(String)", "jFrame.setResizable(boolean)"], "configurationStart": [517, 552, 652, 715, 754], "configurationEnd": [543, 585, 707, 746, 779], "guardCondition": "jFrame==null", "guardType": "IF {", "guardExpressionStart": 82, "guardExpressionEnd": 100, "guardBlockStart": 82, "guardBlockEnd": 836, "focalAPI": " = jFrame.pack()", "focalAPIStart": 787, "focalAPIEnd": 799, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.repaint()"], "useStart": [807, 854], "useEnd": [829, 869], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fvilla/imt/tree/master/org.integratedmodelling.thinklab.core/src/main/java/org/integratedmodelling/utils/image/Picture.java", "rawCode": "  public void show() {\n\n    // create the GUI for viewing the image if needed\n    if (frame == null) {\n      frame = new JFrame();\n\n      JMenuBar menuBar = new JMenuBar();\n      JMenu menu = new JMenu(\"File\");\n      menuBar.add(menu);\n      JMenuItem menuItem1 = new JMenuItem(\" Save... \");\n      menuItem1.addActionListener(this);\n      menuItem1.setAccelerator(\n          KeyStroke.getKeyStroke(\n              KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));\n      menu.add(menuItem1);\n      frame.setJMenuBar(menuBar);\n\n      frame.setContentPane(getJLabel());\n      // f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n      frame.setTitle(\"Picture Frame\");\n      frame.setResizable(false);\n      frame.pack();\n      frame.setVisible(true);\n    }\n\n    // draw\n    frame.repaint();\n  }\n"}, {"dataset": "pack", "exampleID": 3496, "initialization": ["JFrame jFrame = new DisplayWordSearch()"], "initializationStart": [62], "initializationEnd": [85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridLayout)", "jFrame.setLocationRelativeTo(Window)", "jFrame.setDefaultCloseOperation(int)"], "configurationStart": [91, 140, 179], "configurationEnd": [134, 173, 231], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 237, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [255], "useEnd": [277], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kjplaw12/CS110/tree/master/CS110/src/assignments/chap12/TestDisplayWordSearch.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new DisplayWordSearch();\n    frame.setLayout(new GridLayout(4, 1, 5, 5));\n    frame.setLocationRelativeTo(null);\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3497, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [737], "initializationEnd": [759], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.getContentPane()"], "configurationStart": [765], "configurationEnd": [791], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 805, "focalAPIEnd": 821, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setVisible(boolean)", "jFrame.setVisible(boolean)"], "useStart": [827, 898, 959], "useEnd": [853, 925, 985], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/halset/openmap/tree/master/src/main/java/com/bbn/openmap/tools/beanbox/BeanPanel.java", "rawCode": "  public static void main(String[] args) {\n\n    Properties props = new Properties();\n    props.setProperty(\"beanpanel.beans.path\", \"\");\n    props.setProperty(\"beanpanel.tabs\", \"tab1 tab2 tab3\");\n    props.setProperty(\"beanpanel.tab1.name\", \"Generic\");\n    props.setProperty(\"beanpanel.tab1.beans\", \"com.bbn.openmap.examples.beanbox.SimpleBeanObject\");\n    props.setProperty(\"beanpanel.tab2.name\", \"Container\");\n    props.setProperty(\n        \"beanpanel.tab2.beans\", \"com.bbn.openmap.examples.beanbox.SimpleBeanContainer\");\n    props.setProperty(\"beanpanel.tab3.name\", \"Military\");\n    props.setProperty(\"beanpanel.tab3.beans\", \"com.bbn.openmap.examples.beanbox.Fighter\");\n\n    BeanPanel bp = new BeanPanel(props);\n    JFrame beanFrame = new JFrame(\"Bean Box\");\n    beanFrame.getContentPane().add(bp);\n    beanFrame.pack();\n    beanFrame.setVisible(true);\n\n    try {\n      Thread.sleep(2000);\n      beanFrame.setVisible(false);\n      Thread.sleep(2000);\n      beanFrame.setVisible(true);\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "pack", "exampleID": 3498, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [934], "initializationEnd": [946], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.getContentPane()"], "configurationStart": [952, 1030], "configurationEnd": [1024, 1063], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1522, "focalAPIEnd": 1545, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [1551], "useEnd": [1584], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mosscode/icepdf/tree/master/examples/component/ViewerComponentExample.java", "rawCode": "  public static void main(String[] args) {\n    // Get a file from the command line to open\n    String filePath = args[0];\n\n    // build a component controller\n    SwingController controller = new SwingController();\n    controller.setIsEmbeddedComponent(true);\n\n    // set the viewController embeddable flag.\n    DocumentViewController viewController = controller.getDocumentViewController();\n\n    JPanel viewerComponentPanel = new JPanel();\n    viewerComponentPanel.add(viewController.getViewContainer());\n\n    // add copy keyboard command\n    ComponentKeyBinding.install(controller, viewerComponentPanel);\n\n    // add interactive mouse link annotation support via callback\n    controller\n        .getDocumentViewController()\n        .setAnnotationCallback(\n            new org.icepdf.ri.common.MyAnnotationCallback(controller.getDocumentViewController()));\n\n    // build a containing JFrame for display\n    JFrame applicationFrame = new JFrame();\n    applicationFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    applicationFrame.getContentPane().add(viewerComponentPanel);\n\n    // Now that the GUI is all in place, we can try opening a PDF\n    controller.openDocument(filePath);\n\n    // hard set the page view to single page which effectively give a single\n    // page view. This should be done after openDocument as it has code that\n    // can change the view mode if specified by the file.\n    controller.setPageViewMode(DocumentViewControllerImpl.ONE_PAGE_VIEW, false);\n\n    // show the component\n    applicationFrame.pack();\n    applicationFrame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3499, "initialization": ["JFrame jFrame = new JFrame(String)"], "initializationStart": [62], "initializationEnd": [86], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setDefaultCloseOperation(int)", "jFrame.setContentPane(JPanel)"], "configurationStart": [92, 355], "configurationEnd": [144, 382], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 969, "focalAPIEnd": 981, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)"], "useStart": [987], "useEnd": [1009], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geworkbench-group/geworkbench-core/tree/master/src/org/geworkbench/util/ProgressGraph.java", "rawCode": "  public static void main(String[] args) {\n    JFrame frame = new JFrame(\"Graph Test\");\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    // Create and set up the content pane.\n    JPanel panel = new JPanel(new BorderLayout());\n    panel.setPreferredSize(new Dimension(80, 30));\n    panel.setOpaque(true); // content panes must be opaque\n    frame.setContentPane(panel);\n\n    ProgressGraph graph = new ProgressGraph(0, 20, 20);\n    graph.setBandRange(2, 7);\n    graph.setDescription(\"svm progress\");\n    graph.addPoint(10);\n    graph.addPoint(11);\n    graph.addPoint(12);\n    graph.addPoint(3);\n    graph.addPoint(15);\n    graph.addPoint(19);\n    graph.addPoint(6);\n    graph.addPoint(15);\n    graph.addPoint(10);\n    graph.addPoint(10);\n    graph.addPoint(11);\n    graph.addPoint(12);\n    graph.addPoint(3);\n    graph.addPoint(15);\n    graph.addPoint(19);\n    graph.addPoint(6);\n\n    panel.add(graph, BorderLayout.CENTER);\n\n    // Display the window.\n    frame.pack();\n    frame.setVisible(true);\n  }\n"}, {"dataset": "pack", "exampleID": 3500, "initialization": ["JFrame jFrame = new JFrame()"], "initializationStart": [212], "initializationEnd": [224], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jFrame.setLayout(GridLayout)", "jFrame.setTitle(String)", "jFrame.add(JTextArea,*)", "jFrame.add(JButton,GridBagConstraints)"], "configurationStart": [279, 785, 1107, 1163], "configurationEnd": [317, 810, 1153, 1206], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jFrame.pack()", "focalAPIStart": 1216, "focalAPIEnd": 1230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jFrame.setVisible(boolean)", "jFrame.setAlwaysOnTop(boolean)", "jFrame.setLocationRelativeTo(Window)"], "useStart": [1240, 1274, 1312], "useEnd": [1264, 1302, 1347], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OlavOlseng/CodenameBlueMaggot/tree/master/Tanks/src/blueMaggot/BlueMaggot.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      (new BlueMaggot()).setUpGame();\n    } catch (Exception exception) {\n      e = exception;\n    } finally {\n      if (e != null) {\n        JFrame warning = new JFrame();\n        JTextArea content = new JTextArea();\n        warning.setLayout(new GridBagLayout());\n        content.append(\"FATAL MALVISIOUS ERROR!!11\\n\");\n        content.append(\"(╯°□°）╯︵ ┻━┻\\n\");\n        content.append(\n            \"Protip:\\nMake sure your \\\"lvl\\\" directory is in the same folder as your blueMaggot.jar file!\\n\\n\");\n        content.append(\"Error:\\n \" + e.toString() + \"\\n\\n\");\n        content.append(\"StackTrace:\\n\");\n        for (StackTraceElement stack : e.getStackTrace()) {\n          content.append(stack.toString() + \"\\n\");\n        }\n        warning.setTitle(\"ERROR\");\n        e.printStackTrace();\n        JButton exit = new JButton(\"exit\");\n        exit.addActionListener(\n            new ActionListener() {\n              @Override\n              public void actionPerformed(ActionEvent e) {\n                System.exit(1);\n              }\n            });\n        warning.add(content, new GBC(0, 0, Align.MID));\n        warning.add(exit, new GBC(0, 1, Align.MID));\n        warning.pack();\n        warning.setVisible(true);\n        warning.setAlwaysOnTop(true);\n        warning.setLocationRelativeTo(null);\n      }\n    }\n  }\n"}]