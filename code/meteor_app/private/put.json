[{"dataset": "put", "exampleID": 5501, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 78, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/util/AbstractMap/AbstractMapClone.java", "rawCode": "  public Object put(Object key, Object value) {\n    return map.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5502, "initialization": ["Object key = EnumerationIterator.next()", "Object value = getAttribute(*)"], "initializationStart": [387, 425], "initializationEnd": [402, 472], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["key.toString()"], "configurationStart": [457], "configurationEnd": [471], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 480, "focalAPIEnd": 503, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,Object)"], "useStart": [832], "useEnd": [855], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-3.3/addon/core/src/org/blojsom/dispatcher/freemarker/FreeMarkerDispatcher.java", "rawCode": "  /**\n   * Populate the context with the request and session attributes\n   *\n   * @param httpServletRequest Request\n   * @param context Context\n   */\n  private void populateContext(HttpServletRequest httpServletRequest, Map context) {\n    EnumerationIterator iterator = new EnumerationIterator(httpServletRequest.getAttributeNames());\n    while (iterator.hasNext()) {\n      Object key = iterator.next();\n      Object value = httpServletRequest.getAttribute(key.toString());\n      context.put(key, value);\n    }\n\n    HttpSession httpSession = httpServletRequest.getSession(false);\n    if (httpSession != null) {\n      iterator = new EnumerationIterator(httpSession.getAttributeNames());\n      while (iterator.hasNext()) {\n        Object key = iterator.next();\n        Object value = httpSession.getAttribute(key.toString());\n        context.put(key, value);\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5503, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 55, "focalAPIEnd": 74, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dmontag/neo4j-enterprise/tree/master/cluster/src/main/java/org/neo4j/cluster/protocol/atomicbroadcast/AtomicBroadcastMap.java", "rawCode": "    @Override\n    public void execute(Map map) {\n      map.put(key, value);\n    }\n"}, {"dataset": "put", "exampleID": 5504, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 71, "focalAPIEnd": 90, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nuodb/migration-tools/tree/master/core/src/main/java/com/nuodb/migrator/utils/xml/XmlWriteContextBase.java", "rawCode": "  @Override\n  public Object put(Object key, Object value) {\n    return map.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5505, "initialization": ["Object key = Enumeration.nextElement()", "Object value = UIDefaults.get(Object)", "Map map = getComponentMap(Map,*)"], "initializationStart": [279, 317, 362], "initializationEnd": [294, 334, 405], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["key.toString()"], "configurationStart": [390], "configurationEnd": [404], "guardCondition": "map!=null", "guardType": "IF {", "guardExpressionStart": 414, "guardExpressionEnd": 439, "guardBlockStart": 414, "guardBlockEnd": 469, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 440, "focalAPIEnd": 468, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/trunk/ui/src/com/sshtools/ui/swing/ShowUIDefaults.java", "rawCode": "  private JTabbedPane getTabbedPane() {\n    Map components = new TreeMap();\n    UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n\n    // Build of Map of attributes for each component\n\n    for (Enumeration e = defaults.keys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      Object value = defaults.get(key);\n\n      Map componentMap = getComponentMap(components, key.toString());\n\n      if (componentMap != null) componentMap.put(key, value);\n    }\n\n    JTabbedPane pane = new JTabbedPane(SwingConstants.BOTTOM);\n    pane.setPreferredSize(new Dimension(800, 400));\n    addComponentTabs(pane, components);\n\n    return pane;\n  }\n"}, {"dataset": "put", "exampleID": 5506, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 128, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSEMike/OneSwarm/tree/master/az_src/src/org/gudy/azureus2/pluginsimpl/local/peers/PeerImpl.java", "rawCode": "  public void setUserData(Object key, Object value) {\n    if (user_data == null) {\n\n      user_data = new HashMap();\n    }\n\n    user_data.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5507, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 97, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anjlab/ping-service/tree/master/src/com/anjlab/gae/LocalMemorySoftCache.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  @Override\n  public Object put(Object key, Object value) {\n    map.put(key, value);\n    try {\n      // TODO Partial saving of big lists\n      ArrayList<?> listValue = value instanceof ArrayList<?> ? (ArrayList<?>) value : null;\n\n      if (listValue != null\n          && listValue.size() > 1\n          && listValue.get(0) instanceof SerializableEstimations) {\n        PartialArrayList list =\n            new PartialArrayList(key, (ArrayList<SerializableEstimations>) value);\n        list.setCache(cache);\n        return list.put();\n      } else {\n        return cache.put(key, value);\n      }\n    } catch (Exception e) {\n      logger.warn(\"Error putting value into cache\", e);\n\n      // A value may be already in cache. We should remove it to avoid\n      // not synchronous duplicates there and here in local map.\n      remove(key);\n\n      return null;\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5508, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 83, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wyona/wiki-parser/tree/master/jspwiki-parser/src/jspwiki-original-and-patches/JSPWiki-2.4.71/src/com/ecyrd/jspwiki/htmltowiki/PersistentMapDecorator.java", "rawCode": "  public Object put(Object arg0, Object arg1) {\n    return delegate.put(arg0, arg1);\n  }\n"}, {"dataset": "put", "exampleID": 5509, "initialization": ["Object key = intern(Object)"], "initializationStart": [472], "initializationEnd": [489], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 555, "focalAPIEnd": 582, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dancres/blitzjavaspaces/tree/master/src/main/java/com/go/trove/util/Depot.java", "rawCode": "  /**\n   * Put a value into the Depot, bypassing the factory. Invalidating an object and relying on the\n   * factory to produce a new value is generally preferred. This method will notify any threads\n   * waiting on a factory to produce a value, but it will not disrupt the behavior of the factory.\n   *\n   * @param key key with which to associate the value.\n   * @param value value to be associated with key.\n   */\n  public void put(Object key, Object value) {\n    key = Utils.intern(key);\n    synchronized (key) {\n      mInvalidCache.remove(key);\n      mValidCache.put(key, value);\n      Retriever r = (Retriever) mRetrievers.get(key);\n      if (r != null) {\n        // Bypass the factory produced value so that any waiting\n        // threads are notified.\n        r.bypassValue(value);\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5510, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.13/kernel-util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5511, "initialization": ["Object key = FastStack.peek()"], "initializationStart": [176], "initializationEnd": [194], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(map.containsKey(key,)) && key!=null", "guardType": "IF {", "guardExpressionStart": 202, "guardExpressionEnd": 233, "guardBlockStart": 202, "guardBlockEnd": 437, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 380, "focalAPIEnd": 418, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.get(String)", "map.put(Object,Object)"], "useStart": [686, 1172], "useEnd": [724, 1235], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hudson/xstream/tree/master/xstream/src/java/com/thoughtworks/xstream/core/AbstractReferenceUnmarshaller.java", "rawCode": "  protected Object convert(Object parent, Class type, Converter converter) {\n    if (parentStack.size() > 0) { // handles circular references\n      Object parentReferenceKey = parentStack.peek();\n      if (parentReferenceKey != null) {\n        if (!values.containsKey(\n            parentReferenceKey)) { // see AbstractCircularReferenceTest.testWeirdCircularReference()\n          values.put(parentReferenceKey, parent);\n        }\n      }\n    }\n    final Object result;\n    String attributeName = getMapper().aliasForSystemAttribute(\"reference\");\n    String reference = attributeName == null ? null : reader.getAttribute(attributeName);\n    if (reference != null) {\n      Object cache = values.get(getReferenceKey(reference));\n      if (cache == null) {\n        final ConversionException ex = new ConversionException(\"Invalid reference\");\n        ex.add(\"reference\", reference);\n        throw ex;\n      }\n      result = cache == NULL ? null : cache;\n    } else {\n      Object currentReferenceKey = getCurrentReferenceKey();\n      parentStack.push(currentReferenceKey);\n      result = super.convert(parent, type, converter);\n      if (currentReferenceKey != null) {\n        values.put(currentReferenceKey, result == null ? NULL : result);\n      }\n      parentStack.popSilently();\n    }\n    return result;\n  }\n"}, {"dataset": "put", "exampleID": 5512, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(key==null)", "guardType": "IF {", "guardExpressionStart": 99, "guardExpressionEnd": 115, "guardBlockStart": 99, "guardBlockEnd": 171, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 185, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/ode/tree/master/utils/src/main/java/org/apache/ode/utils/HierarchicalProperties.java", "rawCode": "    /** Put this pair in the child map. */\n    public Object put(Object key, Object value) {\n      if (key == null) throw new NullPointerException(\"Null keys forbidden!\");\n      return child.put(key, value);\n    }\n"}, {"dataset": "put", "exampleID": 5513, "initialization": ["Object value = IObservableMap.get(Object)"], "initializationStart": [138], "initializationEnd": [176], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [138], "configurationEnd": [176], "guardCondition": "oldValue!=value", "guardType": "IF {", "guardExpressionStart": 184, "guardExpressionEnd": 209, "guardBlockStart": 184, "guardBlockEnd": 332, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 220, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomsontom/emf-databinding-example/tree/master/org.eclipse.core.databinding/src/org/eclipse/core/internal/databinding/property/value/DelegatingCache.java", "rawCode": "    private void notifyIfChanged(Object masterElement) {\n      Object oldValue = cachedValues.get(masterElement);\n      Object newValue = masterElementValues.get(masterElement);\n      if (oldValue != newValue) {\n        cachedValues.put(masterElement, newValue);\n        handleValueChange(masterElement, oldValue, newValue);\n      }\n    }\n"}, {"dataset": "put", "exampleID": 5514, "initialization": ["Map map = new HashMap()", "Object key = Iterator.next()"], "initializationStart": [336, 457], "initializationEnd": [349, 466], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 477, "focalAPIEnd": 555, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtyley/test-bc-java-cvsimport/tree/master/crypto/j2me/org/bouncycastle/cms/CMSSignedDataParser.java", "rawCode": "  /**\n   * return the collection of signers that are associated with the signatures for the message.\n   *\n   * @throws CMSException\n   */\n  public SignerInformationStore getSignerInfos() throws CMSException {\n    if (_signerInfoStore == null) {\n      populateCertCrlSets();\n\n      List signerInfos = new ArrayList();\n      Map hashes = new HashMap();\n\n      Iterator it = digests.keySet().iterator();\n      while (it.hasNext()) {\n        Object digestKey = it.next();\n\n        hashes.put(digestKey, ((DigestCalculator) digests.get(digestKey)).getDigest());\n      }\n\n      try {\n        ASN1SetParser s = _signedData.getSignerInfos();\n        ASN1Encodable o;\n\n        while ((o = s.readObject()) != null) {\n          SignerInfo info = SignerInfo.getInstance(o.toASN1Primitive());\n\n          byte[] hash = (byte[]) hashes.get(info.getDigestAlgorithm().getAlgorithm());\n\n          signerInfos.add(new SignerInformation(info, _signedContentType, null, hash));\n        }\n      } catch (IOException e) {\n        throw new CMSException(\"io exception: \" + e.getMessage(), e);\n      }\n\n      _signerInfoStore = new SignerInformationStore(signerInfos);\n    }\n\n    return _signerInfoStore;\n  }\n"}, {"dataset": "put", "exampleID": 5515, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 240, "focalAPIEnd": 271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bobmcwhirter/drools/tree/master/drools-jsr94/src/main/java/org/drools/jsr94/rules/admin/RuleExecutionSetImpl.java", "rawCode": "  /**\n   * Set a user-defined or Drools-defined property.\n   *\n   * @param key the key for the property value\n   * @param value the value to associate with the key\n   */\n  public void setProperty(final Object key, final Object value) {\n    this.properties.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5516, "initialization": ["Map map = instantiateClass(*)", "Map map = new LinkedHashMap(*)", "Object key = convertIfNecessary(*,Class)", "Object value = convertIfNecessary(*,Class)"], "initializationStart": [272, 349, 856, 943], "initializationEnd": [319, 389, 909, 1000], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1010, "focalAPIEnd": 1050, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.putAll(Map)"], "useStart": [1079], "useEnd": [1108], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tashiscool/spring/tree/master/spring-beans/src/main/java/org/springframework/beans/factory/config/MapFactoryBean.java", "rawCode": "  @Override\n  @SuppressWarnings(\"unchecked\")\n  protected Map createInstance() {\n    if (this.sourceMap == null) {\n      throw new IllegalArgumentException(\"'sourceMap' is required\");\n    }\n    Map result = null;\n    if (this.targetMapClass != null) {\n      result = (Map) BeanUtils.instantiateClass(this.targetMapClass);\n    } else {\n      result = new LinkedHashMap(this.sourceMap.size());\n    }\n    Class keyType = null;\n    Class valueType = null;\n    if (this.targetMapClass != null) {\n      keyType = GenericCollectionTypeResolver.getMapKeyType(this.targetMapClass);\n      valueType = GenericCollectionTypeResolver.getMapValueType(this.targetMapClass);\n    }\n    if (keyType != null || valueType != null) {\n      TypeConverter converter = getBeanTypeConverter();\n      for (Map.Entry entry : this.sourceMap.entrySet()) {\n        Object convertedKey = converter.convertIfNecessary(entry.getKey(), keyType);\n        Object convertedValue = converter.convertIfNecessary(entry.getValue(), valueType);\n        result.put(convertedKey, convertedValue);\n      }\n    } else {\n      result.putAll(this.sourceMap);\n    }\n    return result;\n  }\n"}, {"dataset": "put", "exampleID": 5517, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 78, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdeolive/geotools-old/tree/master/modules/library/xml/src/main/java/org/geotools/xml/XMLHandlerHints.java", "rawCode": "  public Object put(Object arg0, Object arg1) {\n    return map.put(arg0, arg1);\n  }\n"}, {"dataset": "put", "exampleID": 5518, "initialization": ["Map map = new HashMap()", "Object key = Iterator.next()", "Object value = getAttributeValue(String,String,Object[])"], "initializationStart": [1216, 1623, 1900], "initializationEnd": [1229, 1637, 1950], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1987, "focalAPIEnd": 2024, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape2/tree/master/application/src/main/java/cytoscape/data/writers/XGMMLWriter.java", "rawCode": "  /**\n   * Returns a map where the key(s) are each key in the attribute key space, and the value is\n   * another map or the attribute value.\n   *\n   * <p>For example, if the following key:\n   *\n   * <p>{externalref1}{authors}{1} pointed to the following value:\n   *\n   * <p>\"author 1 name\",\n   *\n   * <p>Then we would have a Map where the key is externalref1, the value is a Map where the key is\n   * {authors}, the value is a Map where the key is {1}, the value is \"author 1 name\".\n   *\n   * @param mmap - reference to MultiHashMap used by CyAttributes\n   * @param id - id of node, edge or network\n   * @param attributeName - name of attribute\n   * @param keys - array of objects which store attribute keys\n   * @param keysIndex - index into keys array we should add the next key\n   * @param numKeyDimensions - the number of keys used for given attribute name\n   * @return Map - ref to Map interface\n   */\n  private Map getComplexAttributeStructure(\n      MultiHashMap mmap,\n      String id,\n      String attributeName,\n      Object[] keys,\n      int keysIndex,\n      int numKeyDimensions) {\n    // are we done?\n    if (keysIndex == numKeyDimensions) return null;\n\n    // the hashmap to return\n    Map keyHashMap = new HashMap();\n\n    // create a new object array to store keys for this interation\n    // copy all existing keys into it\n    Object[] newKeys = new Object[keysIndex + 1];\n\n    for (int lc = 0; lc < keysIndex; lc++) {\n      newKeys[lc] = keys[lc];\n    }\n\n    // get the key span\n    Iterator keyspan = mmap.getAttributeKeyspan(id, attributeName, keys);\n\n    while (keyspan.hasNext()) {\n      Object newKey = keyspan.next();\n      newKeys[keysIndex] = newKey;\n\n      Map nextLevelMap =\n          getComplexAttributeStructure(\n              mmap, id, attributeName, newKeys, keysIndex + 1, numKeyDimensions);\n      Object objectToStore =\n          (nextLevelMap == null)\n              ? mmap.getAttributeValue(id, attributeName, newKeys)\n              : nextLevelMap;\n      keyHashMap.put(newKey, objectToStore);\n    }\n    return keyHashMap;\n  }\n"}, {"dataset": "put", "exampleID": 5519, "initialization": ["Map map = TransferInfo.getObjectOperator()", "Object key = readUnknow(Class<?>,*,*,TransferInfo)", "Object value = readUnknow(Class<?>,*,*,TransferInfo)"], "initializationStart": [842, 1067, 1209], "initializationEnd": [874, 1111, 1255], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.clear()"], "configurationStart": [333], "configurationEnd": [344], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1338, "focalAPIEnd": 1357, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["recordReferenceObjectByPath(map,TransferInfo)"], "useStart": [1384], "useEnd": [1443], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pangwu86/XBlink/tree/master/src/org/xblink/core/serial/Deserializer.java", "rawCode": "  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static Object readMap(Class<?> objClz, Object obj, Field field, TransferInfo transferInfo)\n      throws Exception {\n    DocReader docReader = transferInfo.getDocReader();\n    Map map = null;\n    if (null != obj) {\n      // 集合的话可以利用传入的对象，但是需要清空该对象\n      map = (Map) obj;\n      map.clear();\n    } else {\n      if (Map.class.isAssignableFrom(objClz)) {\n        map = (Map) transferInfo.getObjectOperator().newInstance(Map.class);\n      } else {\n        throw new RuntimeException(\n            String.format(\"Can't convert the type [%s] to map.\", objClz.getName()));\n      }\n    }\n    // 尝试获得泛型\n    Class<?> keyClz = null;\n    Class<?> valueClz = null;\n    if (null != field) {\n      keyClz = transferInfo.getObjectOperator().getMapKeyGenericType(field.getGenericType());\n      valueClz = transferInfo.getObjectOperator().getMapValueGenericType(field.getGenericType());\n    }\n    while (docReader.hasMoreChildren()) {\n      docReader.moveDown(); // 进入entry\n\n      docReader.moveDown(); // 进入key\n      Object key = readUnknow(keyClz, null, null, transferInfo);\n      docReader.moveUp(); // 退出key\n\n      docReader.moveDown(); // 进入value\n      Object value = readUnknow(valueClz, null, null, transferInfo);\n      docReader.moveUp(); // 退出value\n\n      docReader.moveUp(); // 退出entry\n      map.put(key, value);\n    }\n    // 记录引用的对象\n    SerialHelper.recordReferenceObjectByPath(map, transferInfo);\n    return map;\n  }\n"}, {"dataset": "put", "exampleID": 5520, "initialization": ["Map map = new Hashtable()"], "initializationStart": [148], "initializationEnd": [163], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(key==null) && value!=null", "guardType": "IF {", "guardExpressionStart": 59, "guardExpressionEnd": 75, "guardBlockStart": 59, "guardBlockEnd": 97, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 203, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.remove(Object)"], "useStart": [250], "useEnd": [272], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/leif81/openmap-maven/tree/master/src/openmap/com/bbn/openmap/event/OMEvent.java", "rawCode": "  public void putAttribute(Object key, Object value) {\n    if (key == null) {\n      return;\n    }\n\n    if (attributes == null) {\n      attributes = new Hashtable();\n    }\n\n    if (value != null) {\n      attributes.put(key, value);\n    } else {\n      attributes.remove(key);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5521, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 56, "focalAPIEnd": 75, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gilsondev/jsf2-api/tree/master/jsf-ri/src/main/java/com/sun/faces/facelets/tag/jstl/core/MappedValueExpression.java", "rawCode": "    public Object setValue(Object value) {\n      return src.put(key, value);\n    }\n"}, {"dataset": "put", "exampleID": 5522, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/SAK-16693/kernel-util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5523, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [101], "configurationEnd": [113], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 148, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,Set)"], "useStart": [428], "useEnd": [445], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.text/tree/master/org.eclipse.ui.editors/src/org/eclipse/ui/internal/texteditor/PropertyEventDispatcher.java", "rawCode": "  private void multiMapPut(Map<Object, Object> map, Object key, Object value) {\n    Object mapping = map.get(key);\n    if (mapping == null) {\n      map.put(key, value);\n    } else if (mapping instanceof Set) {\n      @SuppressWarnings(\"unchecked\")\n      Set<Object> set = (Set<Object>) mapping;\n      set.add(value);\n    } else {\n      Set<Object> set = new LinkedHashSet<>();\n      set.add(mapping);\n      set.add(value);\n      map.put(key, set);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5524, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 64, "focalAPIEnd": 94, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biojava/biojava-legacy/tree/master/core/src/main/java/org/biojava/bio/search/FilteringContentHandler.java", "rawCode": "  public void addSearchProperty(Object key, Object value) {\n    searchProperty.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5525, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 190, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iBot/HAW_SS13_AI/tree/master/code/HES/lib/hibernate-release-4.0.1.Final/project/hibernate-core/src/main/java/org/hibernate/engine/internal/StatefulPersistenceContext.java", "rawCode": "  /**\n   * @see org.hibernate.engine.spi.PersistenceContext#addChildParent(java.lang.Object,\n   *     java.lang.Object)\n   */\n  public void addChildParent(Object child, Object parent) {\n    parentsByChild.put(child, parent);\n  }\n"}, {"dataset": "put", "exampleID": 5526, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/SAK-15710/kernel-util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5527, "initialization": ["Object key = Enumeration.nextElement()", "Object value = UIDefaults.get(Object)", "Map map = getComponentMap(Map,*)"], "initializationStart": [279, 317, 362], "initializationEnd": [294, 334, 405], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["key.toString()"], "configurationStart": [390], "configurationEnd": [404], "guardCondition": "map!=null", "guardType": "IF {", "guardExpressionStart": 414, "guardExpressionEnd": 439, "guardBlockStart": 414, "guardBlockEnd": 469, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 440, "focalAPIEnd": 468, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/branches/nonembedded/ui/src/com/sshtools/ui/swing/ShowUIDefaults.java", "rawCode": "  private JTabbedPane getTabbedPane() {\n    Map components = new TreeMap();\n    UIDefaults defaults = UIManager.getLookAndFeelDefaults();\n\n    // Build of Map of attributes for each component\n\n    for (Enumeration e = defaults.keys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      Object value = defaults.get(key);\n\n      Map componentMap = getComponentMap(components, key.toString());\n\n      if (componentMap != null) componentMap.put(key, value);\n    }\n\n    JTabbedPane pane = new JTabbedPane(SwingConstants.BOTTOM);\n    pane.setPreferredSize(new Dimension(800, 400));\n    addComponentTabs(pane, components);\n\n    return pane;\n  }\n"}, {"dataset": "put", "exampleID": 5528, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 78, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/library/xml/src/main/java/org/geotools/xml/XMLHandlerHints.java", "rawCode": "  public Object put(Object arg0, Object arg1) {\n    return map.put(arg0, arg1);\n  }\n"}, {"dataset": "put", "exampleID": 5529, "initialization": ["Object key = getHashKey(String,String)"], "initializationStart": [261], "initializationEnd": [284], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 627, "focalAPIEnd": 646, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/openjpa/tree/master/openjpa-kernel/src/main/java/org/apache/openjpa/meta/Extensions.java", "rawCode": "  /** Return the embedded extensions under the given key. */\n  public Extensions getEmbeddedExtensions(String vendor, String key, boolean create) {\n    if (_embed == null && !create) return null;\n    if (_embed == null) _embed = new HashMap();\n\n    Object hk = getHashKey(vendor, key);\n    Extensions exts = (Extensions) _embed.get(hk);\n    if (exts == null && !create) return null;\n    if (exts == null) {\n      exts = new EmbeddedExtensions(this);\n      _embed.put(hk, exts);\n\n      // required to recognize embedded extensions without values\n      if (_exts == null) _exts = new HashMap();\n      if (!_exts.containsKey(hk)) _exts.put(hk, null);\n    }\n    return exts;\n  }\n"}, {"dataset": "put", "exampleID": 5530, "initialization": ["Map map = new HashMap(Map)"], "initializationStart": [604], "initializationEnd": [624], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(key==null) && !(content.containsKey(key,)) && !(value==null)", "guardType": "IF {", "guardExpressionStart": 337, "guardExpressionEnd": 353, "guardBlockStart": 337, "guardBlockEnd": 427, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 630, "focalAPIEnd": 650, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/picketlink/picketlink-idm/tree/master/picketlink-idm-core/src/main/java/org/picketlink/idm/impl/helper/CopyOnWriteRegistry.java", "rawCode": "  /**\n   * Register an object.\n   *\n   * @param key the registration key\n   * @param object the registered object\n   * @return true if the registration was made\n   * @throws IllegalArgumentException if the one argument is null\n   */\n  public synchronized boolean register(Object key, Object object) throws IllegalArgumentException {\n    if (key == null) {\n      throw new IllegalArgumentException(\"No null key accepted\");\n    }\n    if (object == null) {\n      throw new IllegalArgumentException(\"No null value accepted\");\n    }\n    if (content.containsKey(key)) {\n      return false;\n    }\n    Map tmp = new HashMap(content);\n    tmp.put(key, object);\n    content = tmp;\n    return true;\n  }\n"}, {"dataset": "put", "exampleID": 5531, "initialization": ["Map map = new HashMap()", "Object key = cast(*,Type,ParserConfig)", "Object value = cast(*,Type,ParserConfig)"], "initializationStart": [803, 905, 970], "initializationEnd": [816, 943, 1012], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1025, "focalAPIEnd": 1044, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AlibabaTech/fastjson/tree/master/src/main/java/com/alibaba/fastjson/util/TypeUtils.java", "rawCode": "  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public static final <T> T cast(Object obj, ParameterizedType type, ParserConfig mapping) {\n    Type rawTye = type.getRawType();\n\n    if (rawTye == List.class || rawTye == ArrayList.class) {\n      Type itemType = type.getActualTypeArguments()[0];\n\n      if (obj instanceof Iterable) {\n        List list = new ArrayList();\n\n        for (Iterator it = ((Iterable) obj).iterator(); it.hasNext(); ) {\n          Object item = it.next();\n          list.add(cast(item, itemType, mapping));\n        }\n\n        return (T) list;\n      }\n    }\n\n    if (rawTye == Map.class || rawTye == HashMap.class) {\n      Type keyType = type.getActualTypeArguments()[0];\n      Type valueType = type.getActualTypeArguments()[1];\n\n      if (obj instanceof Map) {\n        Map map = new HashMap();\n\n        for (Map.Entry entry : ((Map<?, ?>) obj).entrySet()) {\n          Object key = cast(entry.getKey(), keyType, mapping);\n          Object value = cast(entry.getValue(), valueType, mapping);\n\n          map.put(key, value);\n        }\n\n        return (T) map;\n      }\n    }\n\n    if (obj instanceof String) {\n      String strVal = (String) obj;\n      if (strVal.length() == 0) {\n        return null;\n      }\n    }\n\n    if (type.getActualTypeArguments().length == 1) {\n      Type argType = type.getActualTypeArguments()[0];\n      if (argType instanceof WildcardType) {\n        return (T) cast(obj, rawTye, mapping);\n      }\n    }\n\n    throw new JSONException(\"can not cast to : \" + type);\n  }\n"}, {"dataset": "put", "exampleID": 5532, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.put(Object,String)"], "configurationStart": [739], "configurationEnd": [755], "guardCondition": "!(value==null)", "guardType": "IF {", "guardExpressionStart": 712, "guardExpressionEnd": 730, "guardBlockStart": 712, "guardBlockEnd": 802, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 776, "focalAPIEnd": 795, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/concord-consortium/geogebra/tree/master/geogebra/org/apache/commons/collections15/MapUtils.java", "rawCode": "  /**\n   * Nice method for adding data to a map in such a way as to not get NPE's. The point being that if\n   * the value is null, map.put() will throw an exception. That blows in the case of this class\n   * cause you may want to essentially treat put(\"Not Null\", null ) == put(\"Not Null\", \"\") We will\n   * still throw a NPE if the key is null cause that should never happen.\n   *\n   * <p>Note: this is not a type-safe operation in Java 1.5.\n   *\n   * @param map the map to add to, may not be null\n   * @param key the key\n   * @param value the value\n   * @throws NullPointerException if the map is null\n   */\n  public static void safeAddToMap(Map map, Object key, Object value) throws NullPointerException {\n    if (value == null) {\n      map.put(key, \"\");\n    } else {\n      map.put(key, value);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5533, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta11/kernel-util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5534, "initialization": ["Object value = SessionImplementor.getFactory()"], "initializationStart": [597], "initializationEnd": [634], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [250], "configurationEnd": [273], "guardCondition": "!(key==null) && !(key==target) &&  session.getContextEntityIdentifier(key,)==null&&ForeignKeys.isTransient(associatedEntityName,key,Boolean.FALSE,session,)", "guardType": "IF {", "guardExpressionStart": 181, "guardExpressionEnd": 202, "guardBlockStart": 181, "guardBlockEnd": 229, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 815, "focalAPIEnd": 844, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["replace(Object,*,SessionImplementor,Object,map)"], "useStart": [1073], "useEnd": [1185], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iBot/HAW_SS13_AI/tree/master/code/HES/lib/hibernate-release-4.0.1.Final/project/hibernate-core/src/main/java/org/hibernate/type/EntityType.java", "rawCode": "  /** {@inheritDoc} */\n  public Object replace(\n      Object original, Object target, SessionImplementor session, Object owner, Map copyCache)\n      throws HibernateException {\n    if (original == null) {\n      return null;\n    }\n    Object cached = copyCache.get(original);\n    if (cached != null) {\n      return cached;\n    } else {\n      if (original == target) {\n        return target;\n      }\n      if (session.getContextEntityIdentifier(original) == null\n          && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) {\n        final Object copy =\n            session\n                .getFactory()\n                .getEntityPersister(associatedEntityName)\n                .instantiate(null, session);\n        // TODO: should this be Session.instantiate(Persister, ...)?\n        copyCache.put(original, copy);\n        return copy;\n      } else {\n        Object id = getIdentifier(original, session);\n        if (id == null) {\n          throw new AssertionFailure(\"non-transient entity has a null id\");\n        }\n        id =\n            getIdentifierOrUniqueKeyType(session.getFactory())\n                .replace(id, null, session, owner, copyCache);\n        return resolve(id, session, owner);\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5535, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc02/kernel-util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5536, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 83, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/extension/xsd/xsd-core/src/main/java/org/geotools/xml/impl/PicoMap.java", "rawCode": "  public Object put(Object key, Object value) {\n    return delegate.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5537, "initialization": ["Object value = new ArrayList()"], "initializationStart": [-16871], "initializationEnd": [-16856], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(map.containsKey(key,))", "guardType": "IF {", "guardExpressionStart": 261, "guardExpressionEnd": 308, "guardBlockStart": 261, "guardBlockEnd": 370, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 376, "focalAPIEnd": 427, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MarkBennett/dart/tree/master/editor/tools/plugins/com.google.dart.tools.ui/src/com/google/dart/tools/ui/internal/dialogs/CheckboxTreeAndListGroup.java", "rawCode": "  /**\n   * Logically gray-check all ancestors of treeItem by ensuring that they appear in the checked\n   * table\n   */\n  protected void grayCheckHierarchy(Object treeElement) {\n\n    // if this tree element is already gray then its ancestors all are as well\n    if (checkedStateStore.containsKey(treeElement)) {\n      return; // no need to proceed upwards from here\n    }\n\n    checkedStateStore.put(treeElement, new ArrayList());\n    if (determineShouldBeWhiteChecked(treeElement)) {\n      setWhiteChecked(treeElement, true);\n    }\n    Object parent = treeContentProvider.getParent(treeElement);\n    if (parent != null) {\n      grayCheckHierarchy(parent);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5538, "initialization": ["Object value = SimpleValueProperty.getValue(Object)"], "initializationStart": [222], "initializationEnd": [258], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [161], "configurationEnd": [190], "guardCondition": "!(Util.equals(oldValue,value,)) && map!=null", "guardType": "IF {", "guardExpressionStart": 57, "guardExpressionEnd": 82, "guardBlockStart": 57, "guardBlockEnd": 945, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 315, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomsontom/emf-databinding-example/tree/master/org.eclipse.core.databinding/src/org/eclipse/core/internal/databinding/property/value/MapSimpleValueObservableMap.java", "rawCode": "  private void notifyIfChanged(Object masterValue) {\n    if (cachedValues != null) {\n      final Set keys = keysFor(masterValue);\n\n      final Object oldValue = cachedValues.get(masterValue);\n      final Object newValue = detailProperty.getValue(masterValue);\n\n      if (!Util.equals(oldValue, newValue)) {\n        cachedValues.put(masterValue, newValue);\n        fireMapChange(\n            new MapDiff() {\n              public Set getAddedKeys() {\n                return Collections.EMPTY_SET;\n              }\n\n              public Set getChangedKeys() {\n                return keys;\n              }\n\n              public Set getRemovedKeys() {\n                return Collections.EMPTY_SET;\n              }\n\n              public Object getNewValue(Object key) {\n                return newValue;\n              }\n\n              public Object getOldValue(Object key) {\n                return oldValue;\n              }\n            });\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5539, "initialization": ["Object value = Map.get(Object)", "Object value = createValue(*)"], "initializationStart": [378, 470], "initializationEnd": [401, 518], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)", "value.createValue(*)"], "configurationStart": [378, 470], "configurationEnd": [401, 518], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 528, "focalAPIEnd": 558, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fanhongtao/JDK/tree/master/src/javax/swing/plaf/synth/SynthStyle.java", "rawCode": "  /**\n   * Returns the default value for the specified property, or null if there is no default for the\n   * specified value.\n   */\n  private static Object getDefaultValue(Object key) {\n    synchronized (SynthStyle.class) {\n      if (DEFAULT_VALUES == null) {\n        DEFAULT_VALUES = new HashMap<Object, Object>();\n        populateDefaultValues();\n      }\n      Object value = DEFAULT_VALUES.get(key);\n      if (value instanceof UIDefaults.LazyValue) {\n        value = ((UIDefaults.LazyValue) value).createValue(null);\n        DEFAULT_VALUES.put(key, value);\n      }\n      return value;\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5540, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "useWrapperMap(key,)", "guardType": "IF {", "guardExpressionStart": 56, "guardExpressionEnd": 79, "guardBlockStart": 56, "guardBlockEnd": 301, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 196, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/idega/com.idega.core/tree/master/src/java/com/idega/presentation/UIComponentWrapper.java", "rawCode": "    public Object put(Object key, Object value) {\n      if (useWrapperMap(key)) {\n        checkKey(key);\n        checkValue(value);\n        processWrapperMapEntryOnPut(key, value);\n        return this.wrapperMap.put(key, value);\n      } else {\n        return getComponentMap().put(key, value);\n      }\n    }\n"}, {"dataset": "put", "exampleID": 5541, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 140, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSEMike/OneSwarm/tree/master/oneswarm_az_mods/mods_f2f/com/aelitis/azureus/core/networkmanager/impl/tcp/TCPTransportHelper.java", "rawCode": "  public synchronized void setUserData(Object key, Object data) {\n    if (user_data == null) {\n\n      user_data = new HashMap();\n    }\n\n    user_data.put(key, data);\n  }\n"}, {"dataset": "put", "exampleID": 5542, "initialization": ["Map map = new HashMap()", "Object key = Iterator.next()", "Object value = getUserAttribute(*)"], "initializationStart": [441, 739, 782], "initializationEnd": [454, 748, 832], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["getUserUniqueIdentifier()", "new RuntimeException(String)"], "tryExpressionStart": 409, "tryExpressionEnd": 413, "tryBlockStart": 409, "tryBlockEnd": 1188, "catchExpressionStart": 943, "catchExpressionEnd": 963, "catchBlockStart": 943, "catchBlockEnd": 1145, "exceptionHandlingCallStart": [1084, 977], "exceptionHandlingCallEnd": [1117, 1138], "configuration": ["key.toString()"], "configurationStart": [807], "configurationEnd": [831], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 842, "focalAPIEnd": 894, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Logger.debug(String)"], "finallyExpressionStart": 1146, "finallyExpressionEnd": 1154, "finallyBlockStart": 1146, "finallyBlockEnd": 1188, "cleanUpCallStart": [1162], "cleanUpCallEnd": [1181], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBIUtils/src/it/eng/spagobi/tools/dataset/common/behaviour/UserProfileUtils.java", "rawCode": "  /**\n   * Gets the all profile attributes (Also present in GeneralUtilities).\n   *\n   * <p>TODO: centralization of two methods\n   *\n   * @param profile the profile\n   * @return the all profile attributes\n   */\n  public static Map getProfileAttributes(IEngUserProfile profile) {\n    Map profileAttributes;\n\n    Assert.assertNotNull(profile, \"Parameter [profile] cannot be null\");\n\n    logger.debug(\"IN\");\n    try {\n      profileAttributes = new HashMap();\n      Collection attributeNames = profile.getUserAttributeNames();\n      if (attributeNames == null || attributeNames.size() == 0) {\n        return profileAttributes;\n      }\n\n      Iterator it = attributeNames.iterator();\n      while (it.hasNext()) {\n        Object attributeName = it.next();\n        Object attributeValue = profile.getUserAttribute(attributeName.toString());\n        profileAttributes.put(attributeName, attributeValue);\n      }\n\n      return profileAttributes;\n    } catch (Throwable t) {\n      throw new RuntimeException(\n          \"Impossible to read attributes from the profile of user [\"\n              + profile.getUserUniqueIdentifier()\n              + \"]\");\n    } finally {\n      logger.debug(\"OUT\");\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5543, "initialization": ["Object key = EnumerationIterator.next()", "Object value = getAttribute(*)"], "initializationStart": [406, 444], "initializationEnd": [421, 491], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["key.toString()"], "configurationStart": [476], "configurationEnd": [490], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 499, "focalAPIEnd": 522, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,Object)"], "useStart": [846], "useEnd": [869], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-2_30-final/blojsom-2.0/addon/core/src/org/blojsom/dispatcher/WebMacroDispatcher.java", "rawCode": "  /**\n   * Populate the WebMacro context with the request and session attributes\n   *\n   * @param httpServletRequest Request\n   * @param context Context\n   */\n  protected void populateWebMacroContext(HttpServletRequest httpServletRequest, Map context) {\n    EnumerationIterator iterator = new EnumerationIterator(httpServletRequest.getAttributeNames());\n    while (iterator.hasNext()) {\n      Object key = iterator.next();\n      Object value = httpServletRequest.getAttribute(key.toString());\n      context.put(key, value);\n    }\n\n    HttpSession httpSession = httpServletRequest.getSession();\n    if (httpSession != null) {\n      iterator = new EnumerationIterator(httpSession.getAttributeNames());\n      while (iterator.hasNext()) {\n        Object key = iterator.next();\n        Object value = httpSession.getAttribute(key.toString());\n        context.put(key, value);\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5544, "initialization": ["Object key = SerializationStreamReader.readObject()", "Object value = SerializationStreamReader.readObject()"], "initializationStart": [254, 302], "initializationEnd": [279, 327], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 336, "focalAPIEnd": 360, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lexspoon/scalagwt-gwt/tree/master/user/src/com/google/gwt/user/client/rpc/core/java/util/Map_CustomFieldSerializerBase.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public static void deserialize(SerializationStreamReader streamReader, Map instance)\n      throws SerializationException {\n    int size = streamReader.readInt();\n\n    for (int i = 0; i < size; ++i) {\n      Object key = streamReader.readObject();\n      Object value = streamReader.readObject();\n\n      instance.put(key, value);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5545, "initialization": ["Object key = LinkedList.removeLast()", "Object key = LinkedList.removeLast()", "Object value = addDf(Object,Object)", "Object value = addDf(Object,Object)"], "initializationStart": [922, 1161, 1431, 1852], "initializationEnd": [937, 1178, 1442, 1863], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "value!=null", "guardType": "IF {", "guardExpressionStart": 1902, "guardExpressionEnd": 1916, "guardBlockStart": 1902, "guardBlockEnd": 1937, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1917, "focalAPIEnd": 1936, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/voberoi/jchord/tree/master/libsrc/jwutil/src/jwutil/graphs/DominanceFrontier.java", "rawCode": "  /**\n   * Compute the dominance frontier of the graph. The dominators must be computed first. The\n   * algorithm first goes depth-first on the dominator tree, pushing children on a stack. This\n   * insures that children in the dominator tree are popped off the stack before their parents.\n   * Then, once this stack is created, dominators are popped off and processed. Since the dominance\n   * frontier of a dominator is the union of the dominance frontiers of its children and those\n   * immediate children in the graph that it doesn't dominate, the first have been calculated\n   * already and the last can be computed directly.\n   *\n   * @see jwutil.graphs.Dominators\n   */\n  private void computeDominanceFrontier() {\n    LinkedList wl = new LinkedList();\n    LinkedList tree = new LinkedList();\n\n    wl.add(begin);\n\n    while (!wl.isEmpty()) {\n      // Make sure children are processed before parents\n      Object n = wl.removeLast();\n      tree.add(n);\n      Iterator ed = dom.getDominatees(n);\n      while (ed.hasNext()) {\n        Object c = ed.next();\n        tree.add(c);\n        wl.add(c);\n      }\n    }\n\n    while (!tree.isEmpty()) {\n      Object n = tree.removeLast();\n      Object S = null;\n\n      // Determine those immediate children in the CFG who are not dominated by n.\n      for (Iterator i = navigator.next(n).iterator(); i.hasNext(); ) {\n        Object y = i.next();\n        if (n != dom.getDominatorOf(y)) S = addDf(S, y);\n      }\n\n      // Union in the dominance frontiers of n's children in the dominator tree.\n      Iterator ed = dom.getDominatees(n);\n      while (ed.hasNext()) {\n        Object c = ed.next();\n        Iterator ec = getDominanceFrontier(c).iterator();\n        // The child is done first!\n        while (ec.hasNext()) {\n          Object w = ec.next();\n          if (n != dom.getDominatorOf(w)) {\n            S = addDf(S, w);\n          }\n        }\n      }\n\n      if (S != null) frontiers.put(n, S);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5546, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta05/kernel-util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5547, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 290, "focalAPIEnd": 323, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/astubbs/spring-modules/tree/master/projects/spring-modules-template/src/main/java/org/springmodules/template/engine/velocity/extended/ExtendedRuntimeInstance.java", "rawCode": "  /**\n   * Sets the application attribute for the given key\n   *\n   * @param key\n   * @param o The new application attribute.\n   * @return The old value of this attribute or null if it hasn't been set before.\n   */\n  public Object setApplicationAttribute(Object key, Object o) {\n    return applicationAttributes.put(key, o);\n  }\n"}, {"dataset": "put", "exampleID": 5548, "initialization": ["Object key = new Pair(Domain,Domain)"], "initializationStart": [237], "initializationEnd": [255], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [285], "configurationEnd": [306], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 335, "focalAPIEnd": 389, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/voberoi/jchord/tree/master/libsrc/bddbddb/src/net/sf/bddbddb/Solver.java", "rawCode": "  /**\n   * Get the map relation for the given domains.\n   *\n   * @param fd1 first domain\n   * @param fd2 second domain\n   * @return map relation on those domains\n   */\n  Relation getMapRelation(Domain fd1, Domain fd2) {\n    Object key = new Pair(fd1, fd2);\n    Relation r = (Relation) mapRelations.get(key);\n    if (r == null) {\n      mapRelations.put(key, r = createMapRelation(fd1, fd2));\n    }\n    return r;\n  }\n"}, {"dataset": "put", "exampleID": 5549, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 63, "focalAPIEnd": 82, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/8nevil8/xstream/tree/master/xstream/src/test/com/thoughtworks/xstream/persistence/XmlArrayListTest.java", "rawCode": "    public Object put(Object key, Object value) {\n      return map.put(key, value);\n    }\n"}, {"dataset": "put", "exampleID": 5550, "initialization": ["Object value = Map.get(Object)", "Object value = Map.get(Object)"], "initializationStart": [224, 337], "initializationEnd": [242, 357], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [224], "configurationEnd": [242], "guardCondition": "value!=null||mBackingMap.containsKey(key,) && !(value!=null||map.containsKey(key,))", "guardType": "IF {", "guardExpressionStart": 248, "guardExpressionEnd": 296, "guardBlockStart": 248, "guardBlockEnd": 324, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 422, "focalAPIEnd": 447, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dancres/blitzjavaspaces/tree/master/src/main/java/com/go/trove/util/WrappedCache.java", "rawCode": "  /**\n   * Returns the value from the cache, or if not found, the backing map. If the backing map is\n   * accessed, the value is saved in the cache for future gets.\n   */\n  public Object get(Object key) {\n    Object value = mCacheMap.get(key);\n    if (value != null || mCacheMap.containsKey(key)) {\n      return value;\n    }\n    value = mBackingMap.get(key);\n    if (value != null || mBackingMap.containsKey(key)) {\n      mCacheMap.put(key, value);\n    }\n    return value;\n  }\n"}, {"dataset": "put", "exampleID": 5551, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 96, "focalAPIEnd": 119, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/rt.equinox.bundles/tree/master/bundles/org.eclipse.equinox.security/src/org/eclipse/equinox/internal/security/storage/SecurePreferencesContainer.java", "rawCode": "  public Object setOption(Object key, Object value) {\n    synchronized (options) {\n      return options.put(key, value);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5552, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(true||map.getClass()==theUnmodifiableMapClass)", "guardType": "IF {", "guardExpressionStart": 2311, "guardExpressionEnd": 2331, "guardBlockStart": 2311, "guardBlockEnd": 2379, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 2630, "focalAPIEnd": 2652, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dave-mccloskey/beansbinding/tree/master/beansbinding/src/org/jdesktop/el/MapELResolver.java", "rawCode": "  /**\n   * If the base object is a map, attempts to set the value associated with the given key, as\n   * specified by the <code>property</code> argument.\n   *\n   * <p>If the base is a <code>Map</code>, the <code>propertyResolved</code> property of the <code>\n   * ELContext</code> object must be set to <code>true</code> by this resolver, before returning. If\n   * this property is not <code>true</code> after this method is called, the caller can safely\n   * assume no value was set.\n   *\n   * <p>If this resolver was constructed in read-only mode, this method will always throw <code>\n   * PropertyNotWritableException</code>.\n   *\n   * <p>If a <code>Map</code> was created using {@link java.util.Collections#unmodifiableMap}, this\n   * method must throw <code>PropertyNotWritableException</code>. Unfortunately, there is no\n   * Collections API method to detect this. However, an implementation can create a prototype\n   * unmodifiable <code>Map</code> and query its runtime type to see if it matches the runtime type\n   * of the base object as a workaround.\n   *\n   * @param context The context of this evaluation.\n   * @param base The map to be modified. Only bases of type <code>Map</code> are handled by this\n   *     resolver.\n   * @param property The key with which the specified value is to be associated.\n   * @param val The value to be associated with the specified key.\n   * @throws ClassCastException if the class of the specified key or value prevents it from being\n   *     stored in this map.\n   * @throws NullPointerException if context is <code>null</code>, or if this map does not permit\n   *     <code>null</code> keys or values, and the specified key or value is <code>null</code>.\n   * @throws IllegalArgumentException if some aspect of this key or value prevents it from being\n   *     stored in this map.\n   * @throws ELException if an exception was thrown while performing the property or variable\n   *     resolution. The thrown exception must be included as the cause property of this exception,\n   *     if available.\n   * @throws PropertyNotWritableException if this resolver was constructed in read-only mode, or if\n   *     the put operation is not supported by the underlying map.\n   */\n  public void setValue(ELContext context, Object base, Object property, Object val) {\n\n    if (context == null) {\n      throw new NullPointerException();\n    }\n\n    if (base != null && base instanceof Map) {\n      context.setPropertyResolved(true);\n      Map map = (Map) base;\n      if (isReadOnly || map.getClass() == theUnmodifiableMapClass) {\n        throw new PropertyNotWritableException();\n      }\n      map.put(property, val);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5553, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 73, "focalAPIEnd": 96, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.text/tree/master/org.eclipse.jface.text/src/org/eclipse/jface/text/formatter/FormattingContext.java", "rawCode": "  @Override\n  public void setProperty(Object key, Object property) {\n    fMap.put(key, property);\n  }\n"}, {"dataset": "put", "exampleID": 5554, "initialization": ["Map map = new HashMap()", "Object key = Iterator.next()", "Object value = getAttributeValue(String,String,Object[])"], "initializationStart": [378, 785, 1062], "initializationEnd": [391, 799, 1112], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1149, "focalAPIEnd": 1186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/egonw/pathvisio/tree/master/tools/cytoscape-gpml/src/org/pathvisio/cytoscape/GpmlPlugin.java", "rawCode": "  /** Copied from XGMMLWriter.java, use to get complex attributes */\n  private Map getComplexAttributeStructure(\n      MultiHashMap mmap,\n      String id,\n      String attributeName,\n      Object[] keys,\n      int keysIndex,\n      int numKeyDimensions) {\n    // are we done?\n    if (keysIndex == numKeyDimensions) return null;\n\n    // the hashmap to return\n    Map keyHashMap = new HashMap();\n\n    // create a new object array to store keys for this interation\n    // copy all existing keys into it\n    Object[] newKeys = new Object[keysIndex + 1];\n\n    for (int lc = 0; lc < keysIndex; lc++) {\n      newKeys[lc] = keys[lc];\n    }\n\n    // get the key span\n    Iterator keyspan = mmap.getAttributeKeyspan(id, attributeName, keys);\n\n    while (keyspan.hasNext()) {\n      Object newKey = keyspan.next();\n      newKeys[keysIndex] = newKey;\n\n      Map nextLevelMap =\n          getComplexAttributeStructure(\n              mmap, id, attributeName, newKeys, keysIndex + 1, numKeyDimensions);\n      Object objectToStore =\n          (nextLevelMap == null)\n              ? mmap.getAttributeValue(id, attributeName, newKeys)\n              : nextLevelMap;\n      keyHashMap.put(newKey, objectToStore);\n    }\n    return keyHashMap;\n  }\n"}, {"dataset": "put", "exampleID": 5555, "initialization": ["Map map = new HashMap(int)"], "initializationStart": [385], "initializationEnd": [399], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 411, "focalAPIEnd": 441, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mxro/osgi-maven/tree/master/thrdSwingActionManager/src/main/java/org/bushe/swing/action/BasicAction.java", "rawCode": "  /**\n   * Puts a single value in the action's context map.\n   *\n   * <p>Calls contextChanged().\n   *\n   * <p>Different from put/getValue() string-value pairs and <name-value-pair> elements.\n   *\n   * @param key the context key\n   * @param contextValue the context value\n   */\n  public void putContextValue(Object key, Object contextValue) {\n    if (context == null) {\n      context = new HashMap(3);\n    }\n    context.put(key, contextValue);\n    contextChanged();\n  }\n"}, {"dataset": "put", "exampleID": 5556, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 58, "focalAPIEnd": 82, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/library/main/src/main/java/org/geotools/feature/AttributeTypeBuilder.java", "rawCode": "  public void addUserData(Object key, Object value) {\n    userData.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5557, "initialization": ["Map map = new LinkedHashMap(int)", "Object key = Marshaller.unmarshall(PropertyDescriptor,DataInput,SerializationContext)", "Object value = Marshaller.unmarshall(PropertyDescriptor,DataInput,SerializationContext)"], "initializationStart": [339, 1235, 2185], "initializationEnd": [362, 1296, 2248], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 2269, "focalAPIEnd": 2288, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/noctarius/Lightning/tree/master/lightning-core/src/main/java/org/apache/directmemory/lightning/internal/marshaller/MapMarshaller.java", "rawCode": "  @Override\n  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public <V> V unmarshall(\n      PropertyDescriptor propertyDescriptor,\n      DataInput dataInput,\n      SerializationContext serializationContext)\n      throws IOException {\n    if (isNull(dataInput)) {\n      return null;\n    }\n\n    int size = dataInput.readInt();\n    Map map = new LinkedHashMap(size);\n    if (size > 0) {\n      for (int i = 0; i < size; i++) {\n        Object key = null;\n        if (!isNull(dataInput)) {\n          long keyClassId = dataInput.readLong();\n          ClassDefinition keyClassDefinition =\n              serializationContext.getClassDefinitionContainer().getClassDefinitionById(keyClassId);\n\n          Marshaller keyMarshaller;\n          if (mapKeyType != null) {\n            ensureMarshallersInitialized(serializationContext);\n            keyMarshaller = mapKeyTypeMarshaller;\n          } else {\n            keyMarshaller = serializationContext.findMarshaller(keyClassDefinition.getType());\n          }\n\n          PropertyDescriptor pd =\n              new CheatPropertyDescriptor(\n                  propertyDescriptor.getPropertyName() + \"Key\",\n                  keyClassDefinition.getType(),\n                  keyMarshaller);\n          key = keyMarshaller.unmarshall(pd, dataInput, serializationContext);\n        }\n\n        Object value = null;\n        if (!isNull(dataInput)) {\n          long valueClassId = dataInput.readLong();\n          ClassDefinition valueClassDefinition =\n              serializationContext\n                  .getClassDefinitionContainer()\n                  .getClassDefinitionById(valueClassId);\n\n          Marshaller valueMarshaller;\n          if (mapKeyType != null) {\n            ensureMarshallersInitialized(serializationContext);\n            valueMarshaller = mapValueTypeMarshaller;\n          } else {\n            valueMarshaller = serializationContext.findMarshaller(valueClassDefinition.getType());\n          }\n\n          PropertyDescriptor pd =\n              new CheatPropertyDescriptor(\n                  propertyDescriptor.getPropertyName() + \"Value\",\n                  valueClassDefinition.getType(),\n                  valueMarshaller);\n          value = valueMarshaller.unmarshall(pd, dataInput, serializationContext);\n        }\n\n        map.put(key, value);\n      }\n    }\n\n    return (V) map;\n  }\n"}, {"dataset": "put", "exampleID": 5558, "initialization": ["Object key = EnumerationIterator.next()", "Object value = getAttribute(*)"], "initializationStart": [406, 444], "initializationEnd": [421, 491], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["key.toString()"], "configurationStart": [476], "configurationEnd": [490], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 499, "focalAPIEnd": 522, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,Object)"], "useStart": [846], "useEnd": [869], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/maven-spike/blojsom-addon-core/src/main/java/org/blojsom/dispatcher/webmacro/WebMacroDispatcher.java", "rawCode": "  /**\n   * Populate the WebMacro context with the request and session attributes\n   *\n   * @param httpServletRequest Request\n   * @param context Context\n   */\n  protected void populateWebMacroContext(HttpServletRequest httpServletRequest, Map context) {\n    EnumerationIterator iterator = new EnumerationIterator(httpServletRequest.getAttributeNames());\n    while (iterator.hasNext()) {\n      Object key = iterator.next();\n      Object value = httpServletRequest.getAttribute(key.toString());\n      context.put(key, value);\n    }\n\n    HttpSession httpSession = httpServletRequest.getSession();\n    if (httpSession != null) {\n      iterator = new EnumerationIterator(httpSession.getAttributeNames());\n      while (iterator.hasNext()) {\n        Object key = iterator.next();\n        Object value = httpSession.getAttribute(key.toString());\n        context.put(key, value);\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5559, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 78, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/geotools-2.7.x/tree/master/modules/library/xml/src/main/java/org/geotools/xml/XMLHandlerHints.java", "rawCode": "  public Object put(Object arg0, Object arg1) {\n    return map.put(arg0, arg1);\n  }\n"}, {"dataset": "put", "exampleID": 5560, "initialization": ["Map map = new HashMap(int)"], "initializationStart": [292], "initializationEnd": [306], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 318, "focalAPIEnd": 343, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/FoxyCorndog/WorkspaceOld/tree/master/LuaJ/src/org/apache/bcel/generic/InstructionHandle.java", "rawCode": "  /**\n   * Add an attribute to an instruction handle.\n   *\n   * @param key the key object to store/retrieve the attribute\n   * @param attr the attribute to associate with this handle\n   */\n  public void addAttribute(Object key, Object attr) {\n    if (attributes == null) {\n      attributes = new HashMap(3);\n    }\n    attributes.put(key, attr);\n  }\n"}, {"dataset": "put", "exampleID": 5561, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 337, "focalAPIEnd": 362, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/camptocamp/secureOWS/tree/master/owsproxyserver/src/org/deegree/graphics/sld/Drawing.java", "rawCode": "  /**\n   * Simple SVG/CSS2 styling parameters are given with the CssParameter element. This method adds a\n   * CssParameter to a given set of CssParameters.\n   *\n   * <p>\n   *\n   * @param key the key of the object to insert\n   * @param value the value of the object to insert\n   */\n  void addCssParameter(Object key, Object value) {\n    cssParams.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5562, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 61, "focalAPIEnd": 90, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/SpagoBI-V4x/tree/master/SpagoBIUtils/src/it/eng/spagobi/utilities/engines/EngineAnalysisState.java", "rawCode": "  public void setProperty(Object pName, Object pValue) {\n    properties.put(pName, pValue);\n  }\n"}, {"dataset": "put", "exampleID": 5563, "initialization": ["Map map = new HashMap()", "Object key = Enumeration.nextElement()", "Object value = Dictionary.get(Object)"], "initializationStart": [117, 215, 251], "initializationEnd": [130, 230, 265], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 273, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jerrevds/ODS/tree/master/version2/_bundles/bundle_rosgi_tim/src/rsa/util/PropertiesUtil.java", "rawCode": "  public static Map createMapFromDictionary(Dictionary input) {\n    if (input == null) return null;\n    Map result = new HashMap();\n    for (Enumeration e = input.keys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      Object val = input.get(key);\n      result.put(key, val);\n    }\n    return result;\n  }\n"}, {"dataset": "put", "exampleID": 5564, "initialization": ["Map map = Map.get(IndexReader)", "Map map = new HashMap()", "Object value = Map.get(Object)", "Object value = new CreationPlaceholder()"], "initializationStart": [179, 261, 382, 460], "initializationEnd": [202, 274, 401, 485], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [382], "configurationEnd": [401], "guardCondition": "value==null", "guardType": "IF {", "guardExpressionStart": 421, "guardExpressionEnd": 439, "guardBlockStart": 421, "guardBlockEnd": 534, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 497, "focalAPIEnd": 523, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,Object)"], "useStart": [844], "useEnd": [879], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaspervandenberg/aida/tree/master/System/lucene-2.1.0/src/java/org/apache/lucene/search/FieldCacheImpl.java", "rawCode": "    public Object get(IndexReader reader, Object key) throws IOException {\n      Map innerCache;\n      Object value;\n      synchronized (readerCache) {\n        innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n          value = null;\n        } else {\n          value = innerCache.get(key);\n        }\n        if (value == null) {\n          value = new CreationPlaceholder();\n          innerCache.put(key, value);\n        }\n      }\n      if (value instanceof CreationPlaceholder) {\n        synchronized (value) {\n          CreationPlaceholder progress = (CreationPlaceholder) value;\n          if (progress.value == null) {\n            progress.value = createValue(reader, key);\n            synchronized (readerCache) {\n              innerCache.put(key, progress.value);\n            }\n          }\n          return progress.value;\n        }\n      }\n      return value;\n    }\n"}, {"dataset": "put", "exampleID": 5565, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 78, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ramesesinc/incubation/tree/master/rameses-client-ui/src/com/rameses/rcp/common/MapObject.java", "rawCode": "  public Object put(Object key, Object value) {\n    return map.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5566, "initialization": ["Map map = new HashMap()", "Object key = Enumeration.nextElement()", "Object value = getValue(Object)"], "initializationStart": [64, 165, 203], "initializationEnd": [77, 180, 216], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 224, "focalAPIEnd": 243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panbasten/BA/tree/master/ba/fly-el/src/main/java/com/flywet/platform/bi/el/EnumeratedMap.java", "rawCode": "  /** Converts to a Map */\n  Map convertToMap() {\n    Map ret = new HashMap();\n    for (Enumeration e = enumerateKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      Object value = getValue(key);\n      ret.put(key, value);\n    }\n    return ret;\n  }\n"}, {"dataset": "put", "exampleID": 5567, "initialization": ["Object key = getCacheKey(Method,Class)"], "initializationStart": [151], "initializationEnd": [183], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [205], "configurationEnd": [229], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 711, "focalAPIEnd": 756, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,IndexAttribute)"], "useStart": [953], "useEnd": [987], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/astubbs/spring-modules/tree/master/projects/spring-modules-lucene/src/main/java/org/springmodules/lucene/index/document/handler/object/AbstractAttributeObjectDocumentHandler.java", "rawCode": "  public final IndexAttribute getIndexAttribute(Method method, Class targetClass) {\n    // First, see if we have a cached value.\n    Object cacheKey = getCacheKey(method, targetClass);\n    Object cached = this.cache.get(cacheKey);\n    if (cached != null) {\n      // Value will either be canonical value indicating there is no transaction attribute,\n      // or an actual transaction attribute.\n      if (cached == NON_INDEXABLE_CLASS) {\n        return null;\n      } else {\n        return (IndexAttribute) cached;\n      }\n    } else {\n      // We need to work it out.\n      IndexAttribute indexAtt = computeIndexAttribute(method, targetClass);\n      // Put it in the cache.\n      if (indexAtt == null) {\n        this.cache.put(cacheKey, NON_INDEXABLE_CLASS);\n      } else {\n        if (logger.isDebugEnabled()) {\n          logger.debug(\n              \"Adding index method [\" + method.getName() + \"] with attribute [\" + indexAtt + \"]\");\n        }\n        this.cache.put(cacheKey, indexAtt);\n      }\n      return indexAtt;\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5568, "initialization": ["Object key = create(Object[])"], "initializationStart": [68], "initializationEnd": [96], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [124], "configurationEnd": [144], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 177, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/saschaiseli/opentrainingcenter/tree/master/mockito/org/mockito/cglib/proxy/Mixin.java", "rawCode": "  private static Route route(Object[] delegates) {\n    Object key = ClassesKey.create(delegates);\n    Route route = (Route) ROUTE_CACHE.get(key);\n    if (route == null) {\n      ROUTE_CACHE.put(key, route = new Route(delegates));\n    }\n    return route;\n  }\n"}, {"dataset": "put", "exampleID": 5569, "initialization": ["Object key = Map.Entry.getKey()", "Object key = detachInternal(Object)", "Object value = Map.Entry.getValue()", "Object value = detachInternal(Object)"], "initializationStart": [782, 825, 862, 907], "initializationEnd": [796, 844, 878, 926], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.clear()"], "configurationStart": [611], "configurationEnd": [622], "guardCondition": "!(map==null)", "guardType": "IF {", "guardExpressionStart": 181, "guardExpressionEnd": 206, "guardBlockStart": 181, "guardBlockEnd": 262, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 949, "focalAPIEnd": 966, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.entrySet()"], "useStart": [1021], "useEnd": [1035], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/openjpa/tree/master/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java", "rawCode": "    /** Make sure all the values in the given map are detached. */\n    private void detachMap(Map map, Map orig, FieldMetaData fmd) {\n      // map can be null if not copyable\n      if (_copy && map == null) throw new UserException(_loc.get(\"not-copyable\", fmd));\n      boolean keyPC = fmd.getKey().isDeclaredTypePC();\n      boolean valPC = fmd.getElement().isDeclaredTypePC();\n      if (!keyPC && !valPC) return;\n\n      // if we have to copy keys, just clear and re-add; otherwise\n      // we can use the entry set to reset the values only\n      Map.Entry entry;\n      if (!_copy || keyPC) {\n        if (_copy) map.clear();\n        Object key, val;\n        for (Iterator itr = orig.entrySet().iterator(); itr.hasNext(); ) {\n          entry = (Map.Entry) itr.next();\n          key = entry.getKey();\n          if (keyPC) key = detachInternal(key);\n          val = entry.getValue();\n          if (valPC) val = detachInternal(val);\n          if (_copy) map.put(key, val);\n        }\n      } else {\n        for (Iterator itr = map.entrySet().iterator(); itr.hasNext(); ) {\n          entry = (Map.Entry) itr.next();\n          entry.setValue(detachInternal(entry.getValue()));\n        }\n      }\n    }\n"}, {"dataset": "put", "exampleID": 5570, "initialization": ["Object key = readObject(*,DequeMap<TypeVariable<?>, Type>)", "Object value = readObject(*,DequeMap<TypeVariable<?>, Type>)"], "initializationStart": [376, 464], "initializationEnd": [441, 529], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 538, "focalAPIEnd": 562, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prsebastian/gwt-issue8215/tree/master/user/src/com/google/gwt/user/server/rpc/core/java/util/Map_ServerCustomFieldSerializerBase.java", "rawCode": "  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  public static void deserialize(\n      ServerSerializationStreamReader streamReader,\n      Map instance,\n      Type[] expectedParameterTypes,\n      DequeMap<TypeVariable<?>, Type> resolvedTypes)\n      throws SerializationException {\n    int size = streamReader.readInt();\n    for (int i = 0; i < size; ++i) {\n      Object key = streamReader.readObject(expectedParameterTypes[0], resolvedTypes);\n      Object value = streamReader.readObject(expectedParameterTypes[1], resolvedTypes);\n\n      instance.put(key, value);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5571, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 199, "focalAPIEnd": 217, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.get(Object)", "map.containsKey(Object)", "map.containsValue(Object)", "map.put(Object,Object)", "map.put(Object,Object)", "map.remove(Object)", "map.put(Object,Object)", "map.remove(String,Object)", "map.remove(Object,Object)", "map.putIfAbsent(Object,Object)", "map.putIfAbsent(Object,String)", "map.replace(Object,Object)", "map.replace(Object,Object,Object)", "map.putAll(Map)", "map.get(Object)", "map.get(String)"], "useStart": [261, 289, 325, 924, 985, 1031, 1051, 1115, 1164, 1203, 1372, 1451, 1491, 1833, 1879, 1917], "useEnd": [271, 307, 348, 942, 1003, 1044, 1069, 1146, 1185, 1229, 1407, 1473, 1521, 1852, 1889, 1937], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/commons/tree/master/openjpa-2.2.0/openjpa-lib/src/test/java/org/apache/openjpa/lib/util/concurrent/TestNullSafeConcurrentHashMap.java", "rawCode": "  private void helper(Object key, Object value0, Object value1, Object value2)\n      throws IOException, ClassNotFoundException {\n\n    NullSafeConcurrentHashMap m = newMap();\n\n    // initial put\n    m.put(key, value0);\n\n    // get etc.\n    assertEquals(value0, m.get(key));\n    assertTrue(m.containsKey(key));\n    assertTrue(m.containsValue(value0));\n\n    // keySet\n    Set keys = m.keySet();\n    assertTrue(keys.contains(key));\n    assertEquals(1, keys.size());\n    assertEquals(key, keys.iterator().next());\n\n    // entrySet\n    Set entries = m.entrySet();\n    Entry e = (Entry) entries.iterator().next();\n    assertEquals(key, e.getKey());\n    assertEquals(value0, e.getValue());\n\n    // values\n    Collection values = m.values();\n    assertEquals(1, values.size());\n    assertEquals(value0, values.iterator().next());\n\n    // serializability\n    assertEquals(m, roundtrip(m, true));\n\n    // put\n    assertEquals(value0, m.put(key, value1));\n\n    // remove\n    assertEquals(value1, m.put(key, value1));\n    assertEquals(value1, m.remove(key));\n    m.put(key, value1);\n\n    // ConcurrentMap stuff\n    assertFalse(m.remove(\"invalid key\", value0));\n    assertTrue(m.remove(key, value1));\n    assertNull(m.putIfAbsent(key, value0)); // null == prev unset\n\n    // value0 might be null; can't disambiguate from above in OpenJPA\n    // interpretation\n    assertEquals(value0, m.putIfAbsent(key, \"invalid value\"));\n\n    // replace\n    assertEquals(value0, m.replace(key, value1));\n    assertTrue(m.replace(key, value1, value2));\n\n    // putAll. Note that ConcurrentHashMap happens to delegate to put()\n    // from within putAll() calls. This test should help ensure that we\n    // find out if that changes.\n    m = newMap();\n    Map putAllArg = new HashMap();\n    putAllArg.put(key, value0);\n    putAllArg.put(\"another key\", value1);\n    m.putAll(putAllArg);\n    assertEquals(value0, m.get(key));\n    assertEquals(value1, m.get(\"another key\"));\n  }\n"}, {"dataset": "put", "exampleID": 5572, "initialization": ["Map map = cloneMap(Map)"], "initializationStart": [485], "initializationEnd": [498], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 524, "focalAPIEnd": 544, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/saces/milton/tree/master/src/org/apache/commons/beanutils/WeakFastHashMap.java", "rawCode": "  /**\n   * Associate the specified value with the specified key in this map. If the map previously\n   * contained a mapping for this key, the old value is replaced and returned.\n   *\n   * @param key the key with which the value is to be associated\n   * @param value the value to be associated with this key\n   * @return the value previously mapped to the key, or null\n   */\n  public Object put(Object key, Object value) {\n    if (fast) {\n      synchronized (this) {\n        Map temp = cloneMap(map);\n        Object result = temp.put(key, value);\n        map = temp;\n        return (result);\n      }\n    } else {\n      synchronized (map) {\n        return (map.put(key, value));\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5573, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 258, "focalAPIEnd": 282, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seasarorg/teeda/tree/master/teeda/teeda-core/src/main/java/javax/faces/internal/ComponentFacetMapWrapper.java", "rawCode": "  public Object put(Object key, Object facet) {\n    AssertionUtil.assertNotNull(\"key\", key);\n    AssertionUtil.assertNotNull(\"facet\", facet);\n    checkKeyClass(key);\n    checkValueClass(facet);\n    setNewParent((String) key, (UIComponent) facet);\n    return facetMap.put(key, facet);\n  }\n"}, {"dataset": "put", "exampleID": 5574, "initialization": ["Object value = Map<Object, Object>.get(Object)", "Object value = Cache.get(Object)", "Object value = Object.get()"], "initializationStart": [65, 118, 249], "initializationEnd": [77, 132, 281], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)", "value.setCache(Cache)", "value.get()"], "configurationStart": [118, 189, 249], "configurationEnd": [132, 231, 281], "guardCondition": "value==null", "guardType": "IF {", "guardExpressionStart": 83, "guardExpressionEnd": 101, "guardBlockStart": 83, "guardBlockEnd": 323, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 297, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anjlab/ping-service/tree/master/src/com/anjlab/gae/LocalMemorySoftCache.java", "rawCode": "  @Override\n  public Object get(Object key) {\n    Object value = map.get(key);\n    if (value == null) {\n      value = cache.get(key);\n      if (value instanceof PartialArrayList) {\n        ((PartialArrayList) value).setCache(cache);\n        value = ((PartialArrayList) value).get();\n      }\n      map.put(key, value);\n    }\n    return value;\n  }\n"}, {"dataset": "put", "exampleID": 5575, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 92, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdkoftinoff/mb-linux-msli/tree/master/uClinux-dist/lib/classpath/gnu/java/rmi/activation/BidiTable.java", "rawCode": "  /** Put key-value pair. */\n  public synchronized void put(Object key, Object value) {\n    k2v.put(key, value);\n    v2k.put(value, key);\n  }\n"}, {"dataset": "put", "exampleID": 5576, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.remove(Object)"], "configurationStart": [280], "configurationEnd": [296], "guardCondition": "!(value==null)", "guardType": "IF {", "guardExpressionStart": 246, "guardExpressionEnd": 264, "guardBlockStart": 246, "guardBlockEnd": 303, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 316, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jeffbrown/grailsnolib/tree/master/grails-web/src/main/groovy/org/codehaus/groovy/grails/web/servlet/GrailsFlashScope.java", "rawCode": "  public Object put(Object key, Object value) {\n    // create the session if it doesn't exist\n    registerWithSessionIfNecessary();\n    if (current.containsKey(key)) {\n      current.remove(key);\n    }\n    storeErrorsIfPossible(next, value);\n\n    if (value == null) {\n      return next.remove(key);\n    }\n\n    return next.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5577, "initialization": ["Object value = List.get(int)", "Object key = Iterator.next()"], "initializationStart": [845, 979], "initializationEnd": [858, 996], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1177, "focalAPIEnd": 1232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.xml/src/org/teiid/designer/xml/aspects/sql/XmlDocumentMappingHelper.java", "rawCode": "  /**\n   * Recursive method to process the supplied Mapping object and its nested mappings. This is the\n   * method that populates the XmlDocumentEntity-to-MappingClass and\n   * XmlDocumentEntity-to-MappingClassColumn maps.\n   *\n   * @param mapping the mapping to be processed; may not be null\n   */\n  protected void process(final Mapping mapping) {\n    final List inputs = mapping.getInputs();\n    final List outputs = mapping.getOutputs();\n    // If there is NOT at least one input and at least one output, then skip entirely ...\n    if (inputs.isEmpty() || outputs.isEmpty()) {\n      return;\n    }\n    // There may be more than one output (i.e., in the case of a choice, one mapping class column\n    // may be mapped to more than one XmlDocumentNode), but there should only be one input.\n    // (See defect 10880)\n    final Object mcObject = inputs.get(0);\n    final Iterator outputIter = outputs.iterator();\n    while (outputIter.hasNext()) {\n      final Object xmlDocNode = outputIter.next();\n      if (mcObject instanceof StagingTable) {\n        this.addStagingTableToMap(xmlDocNode, (StagingTable) mcObject);\n      } else if (mcObject instanceof MappingClass) {\n        this.xmlDocNodeToMappingClass.put(xmlDocNode, mcObject);\n      } else if (mcObject instanceof MappingClassColumn) {\n        this.xmlDocNodeToMappingClassColumn.put(xmlDocNode, mcObject);\n      }\n    }\n\n    // Process the nested mappings\n    final Iterator iter = mapping.getNested().iterator();\n    while (iter.hasNext()) {\n      final Mapping nested = (Mapping) iter.next();\n      process(nested);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5578, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 172, "focalAPIEnd": 197, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dancres/blitzjavaspaces/tree/master/src/main/java/com/go/trove/util/WrappedCache.java", "rawCode": "  /**\n   * Puts the entry into both the cache and backing map. The old value in the backing map is\n   * returned.\n   */\n  public Object put(Object key, Object value) {\n    mCacheMap.put(key, value);\n    return mBackingMap.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5579, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(map.containsKey(key,)) && !(!(key instanceof Constructable))", "guardType": "IF {", "guardExpressionStart": 55, "guardExpressionEnd": 81, "guardBlockStart": 55, "guardBlockEnd": 89, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 231, "focalAPIEnd": 250, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kef/boost/tree/master/src/core/java/au/net/netstorm/boost/nursery/eight/legged/spider/injection/graph/postprocess/DefaultConstructables.java", "rawCode": "  public synchronized void construct(Object ref) {\n    if (done.containsKey(ref)) return;\n    if (!(ref instanceof Constructable)) return;\n    Constructable constructable = (Constructable) ref;\n    constructable.constructor();\n    done.put(ref, null);\n  }\n"}, {"dataset": "put", "exampleID": 5580, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(parentContext.containsVariable(key,))", "guardType": "IF {", "guardExpressionStart": 366, "guardExpressionEnd": 452, "guardBlockStart": 366, "guardBlockEnd": 514, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 526, "focalAPIEnd": 558, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teiid/teiid/tree/master/engine/src/main/java/org/teiid/query/sql/util/VariableContext.java", "rawCode": "  /**\n   * Set the value for the given, if the variable already exits replaces its value with the given\n   * value else adds a new variable to the map.\n   *\n   * @param variable The <code>ElementSymbol</code> to be added as a variable.\n   * @param value The value to be set for the given variable.\n   */\n  public Object setValue(Object variable, Object value) {\n    if (delegateSets && parentContext != null && parentContext.containsVariable(variable)) {\n      return parentContext.setValue(variable, value);\n    }\n    return variableMap.put(variable, value);\n  }\n"}, {"dataset": "put", "exampleID": 5581, "initialization": ["Object key = EnumerationIterator.next()", "Object value = getAttribute(*)"], "initializationStart": [406, 444], "initializationEnd": [421, 491], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["key.toString()"], "configurationStart": [476], "configurationEnd": [490], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 499, "focalAPIEnd": 522, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,Object)"], "useStart": [846], "useEnd": [869], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-3_1-final/blojsom-3.0/addon/core/src/org/blojsom/dispatcher/webmacro/WebMacroDispatcher.java", "rawCode": "  /**\n   * Populate the WebMacro context with the request and session attributes\n   *\n   * @param httpServletRequest Request\n   * @param context Context\n   */\n  protected void populateWebMacroContext(HttpServletRequest httpServletRequest, Map context) {\n    EnumerationIterator iterator = new EnumerationIterator(httpServletRequest.getAttributeNames());\n    while (iterator.hasNext()) {\n      Object key = iterator.next();\n      Object value = httpServletRequest.getAttribute(key.toString());\n      context.put(key, value);\n    }\n\n    HttpSession httpSession = httpServletRequest.getSession();\n    if (httpSession != null) {\n      iterator = new EnumerationIterator(httpSession.getAttributeNames());\n      while (iterator.hasNext()) {\n        Object key = iterator.next();\n        Object value = httpSession.getAttribute(key.toString());\n        context.put(key, value);\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5582, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.remove(Object)"], "configurationStart": [209], "configurationEnd": [222], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 234, "focalAPIEnd": 253, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biojava/biojava-legacy/tree/master/core/src/main/java/org/biojava/utils/cache/FixedSizeMap.java", "rawCode": "  public void put(Object key, Object value) {\n    if (map.containsKey(key)) {\n      keys.remove(key);\n    }\n\n    keys.addLast(key);\n\n    if (keys.size() > maxSize) {\n      Object k = keys.removeFirst();\n      map.remove(k);\n    }\n    map.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5583, "initialization": ["Object value = Map.get(Object)", "Object value = Map.get(Object)", "Object value = createValue(*)"], "initializationStart": [165, 383, 572], "initializationEnd": [183, 401, 620], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)", "map.wait()", "map.get(Object)", "map.put(Object,String)", "value.createValue(*)"], "configurationStart": [165, 289, 383, 517, 572], "configurationEnd": [183, 305, 401, 544, 620], "guardCondition": "map!=null && value instanceof UIDefaults.LazyValue", "guardType": "IF {", "guardExpressionStart": 90, "guardExpressionEnd": 112, "guardBlockStart": 90, "guardBlockEnd": 750, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 667, "focalAPIEnd": 692, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.notifyAll()"], "useStart": [704], "useEnd": [725], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/src/share/classes/sun/swing/plaf/synth/DefaultSynthStyle.java", "rawCode": "  private Object getKeyFromData(Map stateData, Object key) {\n    Object value = null;\n    if (stateData != null) {\n\n      synchronized (stateData) {\n        value = stateData.get(key);\n      }\n      while (value == PENDING) {\n        synchronized (stateData) {\n          try {\n            stateData.wait();\n          } catch (InterruptedException ie) {\n          }\n          value = stateData.get(key);\n        }\n      }\n      if (value instanceof UIDefaults.LazyValue) {\n        synchronized (stateData) {\n          stateData.put(key, PENDING);\n        }\n        value = ((UIDefaults.LazyValue) value).createValue(null);\n        synchronized (stateData) {\n          stateData.put(key, value);\n          stateData.notifyAll();\n        }\n      }\n    }\n    return value;\n  }\n"}, {"dataset": "put", "exampleID": 5584, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 70, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tashiscool/spring/tree/master/spring-tx/src/test/java/org/springframework/transaction/jta/MockUOWManager.java", "rawCode": "  @Override\n  public void putResource(Object key, Object value) {\n    this.resources.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5585, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(key==null||true)", "guardType": "IF {", "guardExpressionStart": 397, "guardExpressionEnd": 432, "guardBlockStart": 397, "guardBlockEnd": 562, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 567, "focalAPIEnd": 619, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emmanuelbernard/hibernate-core-ogm/tree/master/hibernate-core/src/main/java/org/hibernate/event/internal/EventCache.java", "rawCode": "  /**\n   * Associates the specified entity with the specified copy in this EventCache;\n   *\n   * @param entity must be non-null\n   * @param copy must be non- null\n   * @return previous copy associated with specified entity, or null if there was no mapping for\n   *     entity.\n   * @throws NullPointerException if entity or copy is null\n   */\n  public Object put(Object entity, Object copy) {\n    if (entity == null || copy == null) {\n      throw new NullPointerException(\n          \"null entities and copies are not supported by \" + getClass().getName());\n    }\n    entityToOperatedOnFlagMap.put(entity, Boolean.FALSE);\n    return entityToCopyMap.put(entity, copy);\n  }\n"}, {"dataset": "put", "exampleID": 5586, "initialization": ["Object value = new ArrayList()"], "initializationStart": [-23113], "initializationEnd": [-23098], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 328, "focalAPIEnd": 379, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MarkBennett/dart/tree/master/editor/tools/plugins/com.google.dart.tools.ui/src/com/google/dart/tools/ui/internal/dialogs/CheckboxTreeAndListGroup.java", "rawCode": "  /**\n   * Add the receiver and all of it's ancestors to the checkedStateStore if they are not already\n   * there.\n   */\n  private void addToHierarchyToCheckedStore(Object treeElement) {\n\n    // if this tree element is already gray then its ancestors all are as well\n    if (!checkedStateStore.containsKey(treeElement)) {\n      checkedStateStore.put(treeElement, new ArrayList());\n    }\n\n    Object parent = treeContentProvider.getParent(treeElement);\n    if (parent != null) {\n      addToHierarchyToCheckedStore(parent);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5587, "initialization": ["Map map = new HashMap()", "Object key = convertValue(*,Class<?>,MappedPath)", "Object value = convertValue(*,Class<?>,MappedPath)", "Object value = convertValue(*,Class<?>,MappedPath)"], "initializationStart": [358, 451, 790, 977], "initializationEnd": [371, 612, 941, 1025], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 1041, "focalAPIEnd": 1063, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mysema/rdfbean/tree/master/rdfbean-core/src/main/java/com/mysema/rdfbean/object/SessionImpl.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  private Object convertMap(MappedPath propertyPath, Set<? extends NODE> values) {\n    MappedProperty<?> propertyDefinition = propertyPath.getMappedProperty();\n    Object convertedValue;\n    Class<?> componentType = propertyDefinition.getComponentType();\n    Class<?> keyType = propertyDefinition.getKeyType();\n    Map map = new HashMap();\n    for (NODE value : values) {\n      // Map key\n      Object key =\n          convertValue(\n              getFunctionalValue((ID) value, propertyDefinition.getKeyPredicate(), false, null),\n              keyType,\n              propertyPath);\n      // Map Value\n      Object mapValue;\n      UID valuePredicate = propertyDefinition.getValuePredicate();\n      if (valuePredicate != null) {\n        mapValue =\n            convertValue(\n                getFunctionalValue((ID) value, valuePredicate, false, null),\n                componentType,\n                propertyPath);\n      } else {\n        mapValue = convertValue(value, componentType, propertyPath);\n      }\n      map.put(key, mapValue);\n    }\n    convertedValue = map;\n    return convertedValue;\n  }\n"}, {"dataset": "put", "exampleID": 5588, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/1.0RC2-SNAPSHOT-Repo/kernel-util/util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5589, "initialization": ["Object value = SimpleValueProperty.getValue(Object)"], "initializationStart": [168], "initializationEnd": [206], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [111], "configurationEnd": [142], "guardCondition": "!(Util.equals(oldValue,value,)) && map!=null", "guardType": "IF {", "guardExpressionStart": 59, "guardExpressionEnd": 84, "guardBlockStart": 59, "guardBlockEnd": 388, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 262, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tomsontom/emf-databinding-example/tree/master/org.eclipse.core.databinding/src/org/eclipse/core/internal/databinding/property/value/ListSimpleValueObservableList.java", "rawCode": "  private void notifyIfChanged(Object masterElement) {\n    if (cachedValues != null) {\n      Object oldValue = cachedValues.get(masterElement);\n      Object newValue = detailProperty.getValue(masterElement);\n      if (!Util.equals(oldValue, newValue)) {\n        cachedValues.put(masterElement, newValue);\n        fireListChange(indicesOf(masterElement), oldValue, newValue);\n      }\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5590, "initialization": ["Map map = new Hashtable()", "Object key = Enumeration.nextElement()"], "initializationStart": [116, 226], "initializationEnd": [131, 241], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 249, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta07/kernel-util/src/main/java/org/sakaiproject/util/ResourceLoader.java", "rawCode": "  /** * Return the ResourceBundle properties as a Map object */\n  protected Map getBundleAsMap() {\n    Map bundle = new Hashtable();\n\n    for (Enumeration e = getBundle().getKeys(); e.hasMoreElements(); ) {\n      Object key = e.nextElement();\n      bundle.put(key, getBundle().getObject((String) key));\n    }\n\n    return bundle;\n  }\n"}, {"dataset": "put", "exampleID": 5591, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 56, "focalAPIEnd": 83, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BrentDouglas/richfaces-3/tree/master/framework/test/src/main/java/org/ajax4jsf/tests/MockContextMap.java", "rawCode": "    public Object setValue(Object value) {\n      return originalMap.put(key, value);\n    }\n"}, {"dataset": "put", "exampleID": 5592, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 172, "focalAPIEnd": 197, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teatrove/teatrove/tree/master/trove/src/main/java/org/teatrove/trove/util/WrappedCache.java", "rawCode": "  /**\n   * Puts the entry into both the cache and backing map. The old value in the backing map is\n   * returned.\n   */\n  public Object put(Object key, Object value) {\n    mCacheMap.put(key, value);\n    return mBackingMap.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5593, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 50, "focalAPIEnd": 71, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/helianbobo/FlipDroid/tree/master/girl/src/com/goal98/girl/util/SimpleCache.java", "rawCode": "  public void put(Object key, Object value) {\n    cache.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5594, "initialization": ["Map map = new HashMap()", "Object key = Transformer.transform(Object)"], "initializationStart": [76, 206], "initializationEnd": [89, 224], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.get(Object)"], "configurationStart": [253], "configurationEnd": [269], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 307, "focalAPIEnd": 350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/saschaiseli/opentrainingcenter/tree/master/mockito/org/mockito/cglib/core/CollectionUtils.java", "rawCode": "  public static Map bucket(Collection c, Transformer t) {\n    Map buckets = new HashMap();\n    for (Iterator it = c.iterator(); it.hasNext(); ) {\n      Object value = (Object) it.next();\n      Object key = t.transform(value);\n      List bucket = (List) buckets.get(key);\n      if (bucket == null) {\n        buckets.put(key, bucket = new LinkedList());\n      }\n      bucket.add(value);\n    }\n    return buckets;\n  }\n"}, {"dataset": "put", "exampleID": 5595, "initialization": ["Object key = Map.Entry.getValue()"], "initializationStart": [739], "initializationEnd": [755], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.clear()"], "configurationStart": [469], "configurationEnd": [495], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 763, "focalAPIEnd": 900, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["map.put(Object,Object)"], "useStart": [1229], "useEnd": [1364], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amorfis/hibernate/tree/master/hibernate-core/src/matrix/java/org/hibernate/test/nonflushedchanges/AbstractOperationTestCase.java", "rawCode": "  @SuppressWarnings({\"unchecked\"})\n  protected Session applyNonFlushedChangesToNewSessionCloseOldSession(Session oldSession) {\n    NonFlushedChanges nfc = ((SessionImplementor) oldSession).getNonFlushedChanges();\n    byte[] bytes = SerializationHelper.serialize(nfc);\n    NonFlushedChanges nfc2 = (NonFlushedChanges) SerializationHelper.deserialize(bytes);\n    Session newSession = openSession();\n    ((SessionImplementor) newSession).applyNonFlushedChanges(nfc2);\n    oldToNewEntityRefs.clear();\n    for (Object o :\n        ((SessionImplementor) oldSession).getPersistenceContext().getEntitiesByKey().entrySet()) {\n      Map.Entry entry = (Map.Entry) o;\n      EntityKey entityKey = (EntityKey) entry.getKey();\n      Object oldEntityRef = entry.getValue();\n      oldToNewEntityRefs.put(\n          oldEntityRef,\n          ((SessionImplementor) newSession).getPersistenceContext().getEntity(entityKey));\n    }\n    for (Object o :\n        ((StatefulPersistenceContext) ((SessionImplementor) oldSession).getPersistenceContext())\n            .getProxiesByKey()\n            .entrySet()) {\n      Map.Entry entry = (Map.Entry) o;\n      EntityKey entityKey = (EntityKey) entry.getKey();\n      Object oldProxyRef = entry.getValue();\n      oldToNewEntityRefs.put(\n          oldProxyRef,\n          ((SessionImplementor) newSession).getPersistenceContext().getProxy(entityKey));\n    }\n\n    oldSession.clear();\n    oldSession.close();\n    return newSession;\n  }\n"}, {"dataset": "put", "exampleID": 5596, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 322, "focalAPIEnd": 341, "followUpCheck": "value != value", "checkType": "IF", "followUpCheckExpressionStart": 557, "followUpCheckExpressionEnd": 574, "followUpCheckBlockStart": 557, "followUpCheckBlockEnd": 597, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gogoego-gerrit/iucn-sis/tree/master/org.hibernate/src/org/hibernate/collection/PersistentMap.java", "rawCode": "  /** @see java.util.Map#put(Object, Object) */\n  public Object put(Object key, Object value) {\n    if (isPutQueueEnabled()) {\n      Object old = readElementByIndex(key);\n      if (old != UNKNOWN) {\n        queueOperation(new Put(key, value, old));\n        return old;\n      }\n    }\n    initialize(true);\n    Object old = map.put(key, value);\n    // would be better to use the element-type to determine\n    // whether the old and the new are equal here; the problem being\n    // we do not necessarily have access to the element type in all\n    // cases\n    if (value != old) {\n      dirty();\n    }\n    return old;\n  }\n"}, {"dataset": "put", "exampleID": 5597, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 123, "focalAPIEnd": 158, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amegginson/jbpm-bpel-ftl/tree/master/jpdl/jar/src/main/java/org/jbpm/configuration/ObjectFactoryImpl.java", "rawCode": "  void putInRegistry(ObjectInfo objectInfo, Object object, Object registryKey) {\n    if (objectInfo.isSingleton()) {\n      singletons.put(registryKey, object);\n    } else {\n      objects.put(registryKey, object);\n    }\n  }\n"}, {"dataset": "put", "exampleID": 5598, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 72, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gogoego-gerrit/iucn-sis/tree/master/org.hibernate/src/org/hibernate/cache/HashtableCache.java", "rawCode": "  public void put(Object key, Object value) throws CacheException {\n    hashtable.put(key, value);\n  }\n"}, {"dataset": "put", "exampleID": 5599, "initialization": ["Map map = new Hashtable()"], "initializationStart": [98], "initializationEnd": [113], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["map.remove(Object)"], "configurationStart": [165], "configurationEnd": [185], "guardCondition": "!(value==null)", "guardType": "IF {", "guardExpressionStart": 198, "guardExpressionEnd": 215, "guardBlockStart": 198, "guardBlockEnd": 237, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 243, "focalAPIEnd": 266, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zxlooong/libbluray/tree/master/src/libbluray/bdj/java/org/havi/ui/HVisible.java", "rawCode": "  public void setLookData(Object key, Object data) {\n    if (lookData == null) {\n      lookData = new Hashtable();\n    }\n\n    if (lookData.containsKey(key)) {\n      lookData.remove(key);\n    }\n\n    if (data == null) {\n      return;\n    }\n\n    lookData.put(key, data);\n  }\n"}, {"dataset": "put", "exampleID": 5600, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = map.put(key,value)", "focalAPIStart": 59, "focalAPIEnd": 78, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/commons-ognl/tree/master/src/test/java/org/apache/commons/ognl/test/objects/MyMapImpl.java", "rawCode": "  public Object put(Object key, Object value) {\n    return map.put(key, value);\n  }\n"}]