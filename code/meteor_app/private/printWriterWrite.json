[{"dataset": "printWriterWrite", "exampleID": 6301, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.2.0/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6302, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.print(char)"], "configurationStart": [80], "configurationEnd": [100], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 106, "focalAPIEnd": 143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.println()"], "useStart": [149], "useEnd": [168], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/html/src/org/ccil/cowan/tagsoup/PYXWriter.java", "rawCode": "  public void gi(char[] buff, int offset, int length) throws SAXException {\n    theWriter.print('(');\n    theWriter.write(buff, offset, length);\n    theWriter.println();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6303, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 337, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbosstm/narayana/tree/master/XTS/localjunit/WSTX11-interop/src/main/java/com/jboss/transaction/txinterop/proxy/WriterSAXHandler.java", "rawCode": "  /**\n   * Process ignorable white space.\n   *\n   * @param chars The character array.\n   * @param start The start index.\n   * @param length The length of this section.\n   * @throws SAXException for any errors.\n   */\n  public void ignorableWhitespace(char[] chars, int start, int length) throws SAXException {\n    checkEndStartTag();\n    printWriter.write(chars, start, length);\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6304, "initialization": ["PrintWriter printWriter = getPrintWriter()"], "initializationStart": [87], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 357, "focalAPIEnd": 374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)"], "useStart": [395], "useEnd": [413], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/system/action/AuthorityAction.java", "rawCode": "  /** 设置组角色 */\n  public String setOrgRole() throws IOException {\n    PrintWriter out = this.getPrintWriter();\n    boolean result = false;\n    if (null != orgid && null != roleid) {\n      List<String> orgIDList = new ArrayList<String>();\n      orgIDList.add(orgid);\n      result = orgService.updateOrgOfRole(orgIDList, roleid);\n    }\n    if (result) {\n      out.write(\"succ\");\n    } else {\n      out.write(\"error\");\n    }\n\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6305, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jds2001/Etherpad-development/tree/master/infrastructure/rhino1_7R1/toolsrc/org/mozilla/javascript/tools/shell/ConsoleTextArea.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6306, "initialization": ["PrintWriter printWriter = new PrintWriter(File)"], "initializationStart": [613], "initializationEnd": [631], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": [], "tryExpressionStart": 594, "tryExpressionEnd": 598, "tryBlockStart": 594, "tryBlockEnd": 990, "catchExpressionStart": 932, "catchExpressionEnd": 965, "catchBlockStart": 932, "catchBlockEnd": 990, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 886, "focalAPIEnd": 902, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()"], "useStart": [912], "useEnd": [922], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/balr0g/VoxelGuest/tree/master/VoxelGuest/src/main/java/com/thevoxelbox/voxelguest/util/FlatFileManager.java", "rawCode": "  public static void save(String[] strs, String target, String destination) {\n    // Note: Destination is appended to plugins/VoxelGuest/data\n    // For example, when destination is \"/channels\",\n    // the target directory will be \"plugins/VoxelGuest/data/channels/\"\n\n    File f = new File(directory + destination + \"/\" + target + \".txt\");\n    PrintWriter pw = null;\n\n    if (!f.exists()) {\n      try {\n        f.createNewFile();\n      } catch (IOException ex) {\n        VoxelGuest.log(\"Could not create new file \\\"\" + f.getAbsolutePath() + \"\\\"\", 2);\n      }\n    }\n\n    if (f.exists()) {\n      try {\n        pw = new PrintWriter(f);\n\n        String concat = \"\";\n\n        for (int i = 0; i < strs.length; i++) {\n          if (i == (strs.length - 1)) {\n            concat = concat + strs[i];\n          } else {\n            concat = concat + strs[i] + \"\\n\";\n          }\n        }\n\n        pw.write(concat);\n        pw.close();\n      } catch (FileNotFoundException ex) {\n        return;\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6307, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [260], "initializationEnd": [276], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 284, "focalAPIEnd": 322, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/larrytin/cloudlet/tree/master/core/server/src/test/java/org/cloudlet/core/servlet/JUnitServlet.java", "rawCode": "  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n    String clz = req.getParameter(CLASS);\n    String method = req.getParameter(METHOD);\n    if (clz == null) {\n      PrintWriter w = resp.getWriter();\n      w.write(\"No test class is specified.\");\n      return;\n    }\n    String[] args;\n    if (method != null) {\n      args = new String[4];\n      args[0] = \"-c\";\n      args[1] = clz;\n      args[2] = \"-m\";\n      args[3] = method;\n    } else {\n      args = new String[2];\n      args[0] = \"-c\";\n      args[1] = clz;\n    }\n    try {\n      TestRunner runner = new TestRunner(new PrintStream(resp.getOutputStream()));\n      runner.start(args);\n    } catch (Exception e) {\n      e.printStackTrace(resp.getWriter());\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6308, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 176, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DSSObject.saveWrite(printWriter)", "printWriter.write(String)", "printWriter.println()"], "useStart": [268, 490, 525], "useEnd": [288, 513, 537], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rwl/DSS/tree/master/dss/src/main/java/com/ncond/dss/common/Util.java", "rawCode": "  public static void writeActiveDSSObject(PrintWriter pw, String newOrEdit) {\n    DSSObject active = DSS.activeDSSObject;\n    DSSClass parClass = active.getParentClass();\n\n    pw.write(newOrEdit + \" \\\"\" + parClass.getClassName() + \".\" + active.getName() + \"\\\"\");\n\n    active.saveWrite(pw);\n\n    // handle disabled circuit elements\n    if ((active.getObjType() & DSSClassDefs.CLASSMASK) != DSSClassDefs.DSS_OBJECT) {\n      CktElement elem = (CktElement) active;\n      if (!elem.isEnabled()) pw.write(\" enabled=no\");\n    }\n    pw.println();\n\n    active.setHasBeenSaved(true);\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6309, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [392], "initializationEnd": [407], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 362, "tryExpressionEnd": 366, "tryBlockStart": 362, "tryBlockEnd": 3594, "catchExpressionStart": 3540, "catchExpressionEnd": 3560, "catchBlockStart": 3540, "catchBlockEnd": 3594, "exceptionHandlingCallStart": [3568], "exceptionHandlingCallEnd": [3587], "configuration": ["printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)"], "configurationStart": [1404, 1618, 1651, 1746], "configurationEnd": [1427, 1635, 1699, 1762], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 3032, "focalAPIEnd": 3091, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)"], "useStart": [3108, 3197, 3392, 3420, 3507], "useEnd": [3157, 3220, 3408, 3468, 3523], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/oryx-neffics/tree/master/editor/server/src/org/oryxeditor/server/StencilSetJSONPServlet.java", "rawCode": "  protected void doGet(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n\n    res.setContentType(\"application/json\");\n\n    String resource = req.getParameter(\"resource\");\n    String type = req.getParameter(\"type\");\n    String jsonp = req.getParameter(\"jsonp\");\n    String embedSvg = req.getParameter(\"embedsvg\");\n\n    try {\n      PrintWriter out = res.getWriter();\n\n      // also allow to request stencil set extensions (specified by namespace)\n      if (type != null && type.equals(\"ssextension\")) {\n\n        File extensionsFile =\n            new File(getServletContext().getRealPath(\"/stencilsets/extensions/extensions.json\"));\n        BufferedReader reader = new BufferedReader(new FileReader(extensionsFile));\n        String line = null;\n        String jsonString = \"\";\n        while ((line = reader.readLine()) != null) {\n          jsonString += line;\n        }\n        JSONObject jsonObj = new JSONObject(jsonString);\n        JSONArray extArr = jsonObj.getJSONArray(\"extensions\");\n        for (int i = 0; i < extArr.length(); i++) {\n          if (extArr.getJSONObject(i).getString(\"namespace\").equals(resource)) {\n            String definition = extArr.getJSONObject(i).getString(\"definition\");\n            File jsonFile =\n                new File(getServletContext().getRealPath(\"/stencilsets/extensions/\" + definition));\n            if (jsonp != null) out.append(jsonp + \"(\");\n            BufferedReader reader2 = new BufferedReader(new FileReader(jsonFile));\n            String line2 = null;\n            while ((line2 = reader2.readLine()) != null) {\n              out.append(line2);\n              out.append(System.getProperty(\"line.separator\"));\n            }\n            if (jsonp != null) out.append(\");\");\n          }\n        }\n\n      } else { // standard stencil set requested (specified by path)\n\n        resource.replace(\"..\", \"\"); // don't allow to leave stencilset dir\n\n        if (resource.startsWith(\"/\")) resource = resource.substring(1);\n\n        if (resource.startsWith(\n            \"stencilsets/\")) // ignore stencilset/ at beginning of path reference\n        resource = resource.substring(12);\n\n        File jsonFile;\n        if (embedSvg != null && embedSvg.equals(\"true\")) { // SVG embedding\n          jsonFile = new File(getServletContext().getRealPath(\"/stencilsets/\" + resource));\n        } else { // no SVG embedding (default)\n          // try to find stencilset nosvg representation\n          int pIdx = resource.lastIndexOf('.');\n          jsonFile =\n              new File(\n                  getServletContext()\n                      .getRealPath(\n                          \"/stencilsets/\"\n                              + resource.substring(0, pIdx)\n                              + \"-nosvg\"\n                              + resource.substring(pIdx)));\n          if (!jsonFile.exists())\n            jsonFile = new File(getServletContext().getRealPath(\"/stencilsets/\" + resource));\n        }\n\n        if (!jsonFile.exists()) {\n          if (jsonp != null) out.write(jsonp + \"({ \\\"error\\\":\\\"resource not found\\\" })\");\n          else out.write(\"{ \\\"error\\\":\\\"resource not found\\\" }\");\n        }\n\n        if (jsonp != null) out.append(jsonp + \"(\");\n\n        BufferedReader reader = new BufferedReader(new FileReader(jsonFile));\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          out.append(line);\n          out.append(System.getProperty(\"line.separator\"));\n        }\n        if (jsonp != null) out.append(\");\");\n      }\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6310, "initialization": ["String s = StringBuffer.toString()", "String s = KeyCrypterOpenSSL.encrypt(String,CharSequence)", "PrintWriter printWriter = new PrintWriter(FileWriter)"], "initializationStart": [829, 986, 1191], "initializationEnd": [858, 1035, 1218], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1227, "focalAPIEnd": 1259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()", "printWriter.close()"], "useStart": [1302, 1381], "useEnd": [1321, 1400], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 1330, "finallyExpressionEnd": 1338, "finallyBlockStart": 1330, "finallyBlockEnd": 1483, "cleanUpCallStart": [1302], "cleanUpCallEnd": [1321], "url": "https://github.com/jim618/multibit/tree/master/src/main/java/org/multibit/file/PrivateKeysHandler.java", "rawCode": "  public void exportPrivateKeys(\n      File exportFile,\n      Wallet wallet,\n      BlockChain blockChain,\n      boolean performEncryptionOfExportFile,\n      CharSequence exportPassword,\n      CharSequence walletPassword)\n      throws IOException, KeyCrypterException {\n\n    // Construct a StringBuffer with the private key export text.\n    StringBuffer outputStringBuffer = new StringBuffer();\n\n    if (!performEncryptionOfExportFile) {\n      outputHeaderComment(outputStringBuffer);\n    }\n\n    // Get the wallet's private keys and output them.\n    Collection<PrivateKeyAndDate> keyAndDates =\n        createKeyAndDates(wallet, blockChain, walletPassword);\n    outputKeys(outputStringBuffer, keyAndDates);\n\n    if (!performEncryptionOfExportFile) {\n      outputFooterComment(outputStringBuffer);\n    }\n\n    String keyOutputText = outputStringBuffer.toString();\n\n    if (performEncryptionOfExportFile) {\n      KeyCrypterOpenSSL keyCrypter = new KeyCrypterOpenSSL();\n      keyOutputText = keyCrypter.encrypt(keyOutputText, exportPassword);\n    }\n\n    FileWriter fileWriter = null;\n    PrintWriter printWriter = null;\n    try {\n      fileWriter = new FileWriter(exportFile);\n      printWriter = new PrintWriter(fileWriter);\n\n      printWriter.write(keyOutputText);\n\n      // Close the output stream.\n      printWriter.close();\n\n    } finally {\n      if (printWriter != null) {\n        printWriter.close();\n      }\n      if (fileWriter != null) {\n        fileWriter.close();\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6311, "initialization": ["PrintWriter printWriter = new PrintWriter(*)"], "initializationStart": [761], "initializationEnd": [812], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 943, "focalAPIEnd": 961, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [971], "useEnd": [980], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dreyes288/XiFinals/tree/master/polyglot/util/OptimalCodeWriter.java", "rawCode": "  /**\n   * Try to format a whole sequence of items in the manner of formatN. Unlike for formatN, The\n   * initial position may be an overrun (this is the only way that overruns are checked!). The item\n   * <code>it</code> may be also null, signifying an empty list. Requires: lmargin &lt; rmargin, pos\n   * &le; rmargin, lmargin &ge; 0.\n   *\n   * @see formatN\n   */\n  static FormatResult format(\n      Item it,\n      int lmargin,\n      int pos,\n      int rmargin,\n      int fin,\n      MaxLevels m,\n      int minLevel,\n      int minLevelUnified)\n      throws Overrun {\n    OptimalCodeWriter.format_calls++;\n    if (OptimalCodeWriter.debug) {\n      if (it != null && it != OptimalCodeWriter.top) {\n        System.err.println(\"SNAPSHOT:\");\n        PrintWriter w = new PrintWriter(new OutputStreamWriter(System.err));\n        try {\n          OptimalCodeWriter.top.sendOutput(w, 0, 0, true, it);\n        } catch (IOException e) {\n        }\n        w.write(\"<END>\\n\");\n        w.flush();\n      }\n      System.err.println(\n          \"Format: \"\n              + it\n              + \"\\n lmargin = \"\n              + lmargin\n              + \" pos = \"\n              + pos\n              + \" fin = \"\n              + fin\n              + \" max break levels: \"\n              + m\n              + \" min break levels: \"\n              + minLevel\n              + \"/\"\n              + minLevelUnified);\n\n      if (OptimalCodeWriter.debug) {\n        System.err.println(\" MinWidth = \" + getMinWidth(it, m));\n        System.err.println(\" MinPosWidth = \" + getMinPosWidth(it, m));\n        System.err.println(\" MinIndent = \" + getMinIndent(it, m));\n      }\n\n      System.err.flush();\n    }\n    if (it == null) { // no items to format. Check against final position.\n      if (pos > fin) {\n        if (OptimalCodeWriter.debug) System.err.println(\"Final position overrun: \" + (pos - fin));\n        throw Overrun.overrun(it, m, pos - fin, Overrun.FIN);\n      } else return new FormatResult(pos, minLevelUnified);\n    }\n\n    int amount2 = lmargin + getMinWidth(it, m) - rmargin;\n    // lmargin is too far right\n    if (amount2 > 0) {\n      if (OptimalCodeWriter.debug) System.err.println(\"Width overrun: \" + amount2);\n\n      throw Overrun.overrun(it, m, amount2, Overrun.WIDTH);\n    }\n\n    int amount = pos + getMinPosWidth(it, m) - rmargin; // overrun on first line\n    if (amount > 0) {\n      if (OptimalCodeWriter.debug) System.err.println(\"Position (first line) overrun: \" + amount);\n\n      throw Overrun.overrun(it, m, amount, Overrun.POS);\n    }\n\n    int amount3 = lmargin + getMinIndent(it, m) - fin; // overrun on last line\n    if (amount3 > 0) {\n      if (OptimalCodeWriter.debug)\n        System.err.println(\"Final position (predicted) overrun: \" + amount3);\n\n      throw Overrun.overrun(it, m, amount3, Overrun.FIN);\n    }\n\n    return it.formatN(lmargin, pos, rmargin, fin, m, minLevel, minLevelUnified);\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6312, "initialization": ["PrintWriter printWriter = new PrintWriter(*)"], "initializationStart": [392], "initializationEnd": [452], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 480, "focalAPIEnd": 498, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()", "printWriter.close()"], "useStart": [504, 566], "useEnd": [514, 576], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/sun/nio/cs/StreamEncoderClose.java", "rawCode": "  public static void main(String arg[]) throws Exception {\n    byte[] expected = {\n      (byte) 0x1b,\n      (byte) 0x24,\n      (byte) 0x42,\n      (byte) 0x30,\n      (byte) 0x6c,\n      (byte) 0x1b,\n      (byte) 0x28,\n      (byte) 0x42\n    };\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    MyBufferedOutputStream mbos = new MyBufferedOutputStream(baos);\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(mbos, \"ISO-2022-JP\"));\n    mbos.dontClose();\n    pw.write(\"\\u4e00\");\n    pw.close(); // 1st PrintWriter Close\n    mbos.canClose();\n    pw.close(); // 2nd PrintWriter Close\n\n    // double check, probably not necessary\n    byte[] out = baos.toByteArray();\n    if (out.length != expected.length) {\n      throw new IOException(\"Failed\");\n    }\n    for (int i = 0; i < out.length; i++) {\n      // System.out.printf(\"(byte)0x%x,\", out[i] & 0xff);\n      if (out[i] != expected[i]) throw new IOException(\"Failed\");\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6313, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [477], "initializationEnd": [497], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 623, "focalAPIEnd": 667, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)"], "useStart": [677], "useEnd": [725], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nickleus-j/StorySenseWeb/tree/master/StorySense/src/ajaxReviewer/StoryDetailGiver.java", "rawCode": "  @Override\n  public void executeCustomCode(HttpServletRequest request, HttpServletResponse response) {\n    response.setContentType(\"text/html\");\n    int sID = Integer.parseInt(request.getParameter(\"q\"));\n\n    DAOFactory myDAOFactory = DAOFactory.getInstance(DAOFactory.MYSQL);\n    AcomplishmentDAO myAcomDAO = myDAOFactory.createAcomplishmentDAO();\n    UserDAO myUserDao = myDAOFactory.createUserDAO();\n    Acomplishment acom;\n    User user;\n    try {\n      PrintWriter out = response.getWriter();\n      if (sID > 0) {\n        acom = myAcomDAO.getStory(sID);\n        user = myUserDao.getUser(acom.getAccountID());\n        out.write(\"<h2>\" + acom.getName() + \"</h2>\");\n        out.write(\"<h4>by: \" + user.getName() + \"</h4>\");\n      }\n    } catch (IOException ioE) {\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6314, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()", "String s = transform(Document)"], "initializationStart": [230, 625], "initializationEnd": [245, 654], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 199, "tryExpressionEnd": 203, "tryBlockStart": 199, "tryBlockEnd": 744, "catchExpressionStart": 688, "catchExpressionEnd": 709, "catchBlockStart": 688, "catchBlockEnd": 744, "exceptionHandlingCallStart": [717], "exceptionHandlingCallEnd": [737], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 662, "focalAPIEnd": 679, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jak786/VASE/tree/master/poem-jvm/src/java/org/b3mn/poem/handler/JpdlImporter.java", "rawCode": "  @Override\n  public void doPost(\n      HttpServletRequest req, HttpServletResponse res, Identity subject, Identity object) {\n\n    res.setContentType(\"application/json\");\n    res.setStatus(200);\n    try {\n\n      PrintWriter out = res.getWriter();\n      String jpdlRepresentation = req.getParameter(\"data\");\n\n      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n      factory.setNamespaceAware(true);\n      DocumentBuilder builder = factory.newDocumentBuilder();\n      Document jpdlDoc = builder.parse(new ByteArrayInputStream(jpdlRepresentation.getBytes()));\n\n      String result = \"\";\n      result = JpdlToJson.transform(jpdlDoc);\n      out.write(result);\n\n    } catch (Exception e1) {\n      e1.printStackTrace();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6315, "initialization": ["PrintWriter printWriter = new PrintWriter(*)", "String s = get()", "String s = replace(String,String,String)", "String s = replace(String,String,String)", "String s = replace(String,String,String)", "String s = replace(String,String,String)", "String s = replace(String,String,String)", "String s = replace(String,String,String)", "String s = replace(String,String,String)"], "initializationStart": [191, 247, 309, 396, 483, 570, 657, 989, 1374], "initializationEnd": [222, 259, 379, 466, 553, 640, 727, 1065, 1437], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["PrintWriter.println(String)", "printStackTrace()"], "tryExpressionStart": 783, "tryExpressionEnd": 787, "tryBlockStart": 783, "tryBlockEnd": 972, "catchExpressionStart": 1545, "catchExpressionEnd": 1565, "catchBlockStart": 1545, "catchBlockEnd": 1658, "exceptionHandlingCallStart": [1573, 1632], "exceptionHandlingCallEnd": [1624, 1651], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1445, "focalAPIEnd": 1462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()"], "useStart": [1471], "useEnd": [1482], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Monomachus/Jason.NET/tree/master/javaSrc/jason/infra/centralised/CreateJNLP.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      String projectName = args[0];\n      String mas2jFile = args[1];\n\n      String file = projectName + \".jnlp\";\n      PrintWriter out = new PrintWriter(new File(file));\n\n      String script = Config.get().getTemplate(\"jnlp-template.xml\");\n      script = CentralisedMASLauncherAnt.replace(script, \"<PROJECT-ID>\", projectName);\n      script = CentralisedMASLauncherAnt.replace(script, \"<PROJECT-ID>\", projectName);\n      script = CentralisedMASLauncherAnt.replace(script, \"<PROJECT-ID>\", projectName);\n      script = CentralisedMASLauncherAnt.replace(script, \"<PROJECT-ID>\", projectName);\n      script = CentralisedMASLauncherAnt.replace(script, \"<PROJECT-ID>\", projectName);\n\n      String defCodebase = \"http://localhost\";\n      try {\n        defCodebase =\n            \"file:\" + new File(mas2jFile).getAbsoluteFile().getParentFile().getAbsolutePath();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n\n      script = CentralisedMASLauncherAnt.replace(script, \"<DEFAULT-CODEBASE>\", defCodebase);\n\n      String jars = \"\";\n      File lib = new File(\"../lib\");\n      if (lib.exists()) {\n        for (String j : new File(\"../lib\").list()) {\n          System.out.println(j);\n          if (j.endsWith(\"jar\")) {\n            jars += \" <jar href=\\\"\" + j + \"\\\" />\\n\";\n          }\n        }\n      }\n      script = CentralisedMASLauncherAnt.replace(script, \"<OTHER-JARS>\", jars);\n      out.write(script);\n\n      out.close();\n      System.out.print(\"File \" + file + \" created!\");\n\n    } catch (Exception e) {\n      System.err.println(\"Error creating the jnlp file:\");\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6316, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 110, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.println()"], "useStart": [157, 233, 302], "useEnd": [188, 281, 324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/compbio-UofT/savant/tree/master/savant.tool.text/src/main/java/savant/tool/text/javacsv/com/csvreader/CsvWriter.java", "rawCode": "  public void writeComment(String commentText) throws IOException {\n    checkClosed();\n\n    checkInit();\n\n    outputStream.write(userSettings.Comment);\n\n    outputStream.write(commentText);\n\n    if (useCustomRecordDelimiter) {\n      outputStream.write(userSettings.RecordDelimiter);\n    } else {\n      outputStream.println();\n    }\n\n    firstColumn = true;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6317, "initialization": ["PrintWriter printWriter = new PrintWriter(*)"], "initializationStart": [188], "initializationEnd": [255], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 100, "tryExpressionEnd": 104, "tryBlockStart": 100, "tryBlockEnd": 896, "catchExpressionStart": 699, "catchExpressionEnd": 721, "catchBlockStart": 699, "catchBlockEnd": 796, "exceptionHandlingCallStart": [770], "exceptionHandlingCallEnd": [789], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 363, "focalAPIEnd": 432, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.close()"], "useStart": [565, 672], "useEnd": [646, 691], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jonalv/bioclipse.brunn/tree/master/plugins/net.bioclipse.brunn.ui/src/net/bioclipse/brunn/ui/editors/plateEditor/PlateReport.java", "rawCode": "  private void printMapToFile(Map<String, String[]> map, String filename, String headerInMap) {\n    try {\n      File folder = BioclipseCache.getCacheDir();\n      PrintWriter printWriter = new PrintWriter(new FileWriter(folder + File.separator + filename));\n      Object[] headers = map.keySet().toArray();\n      for (int i = 0; i < headers.length; i++) {\n        printWriter.write(headers[i] + (i < headers.length - 1 ? \",\" : \"\\n\"));\n      }\n      for (int i = 0; i < map.get(headerInMap).length; i++) {\n        for (int j = 0; j < headers.length; j++) {\n          printWriter.write(map.get(headers[j])[i] + (j < headers.length - 1 ? \",\" : \"\\n\"));\n        }\n      }\n      printWriter.close();\n    } catch (IOException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (CoreException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6318, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new ProtocolException(*)"], "tryExpressionStart": 126, "tryExpressionEnd": 130, "tryBlockStart": 126, "tryBlockEnd": 975, "catchExpressionStart": 908, "catchExpressionEnd": 930, "catchBlockStart": 908, "catchBlockEnd": 975, "exceptionHandlingCallStart": [944], "exceptionHandlingCallEnd": [968], "configuration": ["printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(long)"], "configurationStart": [386, 444, 469, 491, 530, 592, 617, 641, 680, 714, 735], "configurationEnd": [409, 459, 481, 505, 547, 607, 631, 655, 697, 727, 747], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 756, "focalAPIEnd": 771, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeType(printWriter,Serializable)", "printWriter.print(String)", "printWriter.print(String)"], "useStart": [779, 808, 887], "useEnd": [799, 823, 900], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mdaniel/svn-caucho-com-resin/tree/master/modules/resin/src/com/caucho/jsmp/JsmpWriter.java", "rawCode": "  /** Low-level query */\n  public void queryResult(PrintWriter os, long id, String to, String from, Serializable value) {\n    try {\n      JsonOutput out = _out;\n\n      if (out == null) return;\n\n      out.init(os);\n\n      if (log.isLoggable(Level.FINER)) {\n        log.finer(\n            this + \" result \" + value + \" {id: \" + id + \", to:\" + to + \", from:\" + from + \"}\");\n      }\n\n      os.print(\"[\\\"result\\\"\");\n\n      if (to != null) {\n        os.print(\",\\\"\");\n        os.print(to);\n        os.print(\"\\\"\");\n      } else {\n        os.print(\",null\");\n      }\n\n      if (from != null) {\n        os.print(\",\\\"\");\n        os.print(from);\n        os.print(\"\\\"\");\n      } else {\n        os.print(\",null\");\n      }\n\n      os.print(\",\");\n      os.print(id);\n\n      os.write(\",\\\"\");\n      writeType(os, value);\n\n      os.print(\"\\\",\");\n      out.writeObject(value);\n      out.flushBuffer();\n\n      os.print(\"]\");\n    } catch (IOException e) {\n      throw new ProtocolException(e);\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6319, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1137, "focalAPIEnd": 1150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jsonKey(printWriter,String)", "jsonValue(printWriter,*)", "printWriter.write(char)", "jsonKey(printWriter,String)", "printWriter.write(char)", "eventJson(printWriter,*,int,long,float)", "printWriter.write(char)", "printWriter.write(char)", "printWriter.write(String)"], "useStart": [1157, 1184, 1226, 1245, 1271, 1393, 1495, 1529, 1549], "useEnd": [1178, 1220, 1239, 1264, 1284, 1462, 1508, 1542, 1562], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinedelson/felix/tree/master/webconsole-plugins/event/src/main/java/org/apache/felix/webconsole/plugins/event/internal/PluginServlet.java", "rawCode": "  private void renderJSON(final PrintWriter pw) throws IOException {\n    List events = this.collector.getEvents();\n\n    StringBuffer statusLine = new StringBuffer();\n    statusLine.append(events.size());\n    statusLine.append(\" Event\");\n    if (events.size() != 1) {\n      statusLine.append('s');\n    }\n    statusLine.append(\" received\");\n    if (!events.isEmpty()) {\n      statusLine.append(\" since \");\n      Date d = new Date();\n      d.setTime(((EventInfo) events.get(0)).received);\n      statusLine.append(d);\n    }\n    statusLine.append(\". (Event admin: \");\n    if (!this.eventAdminAvailable) {\n      statusLine.append(\"un\");\n    }\n    statusLine.append(\"available; Config admin: \");\n    if (!this.configAdminAvailable) {\n      statusLine.append(\"un\");\n    }\n    statusLine.append(\"available)\");\n\n    // Compute scale: startTime is 0, lastTimestamp is 100%\n    final long startTime = this.collector.getStartTime();\n    final long endTime =\n        (events.size() == 0 ? startTime : ((EventInfo) events.get(events.size() - 1)).received);\n    final float scale = (endTime == startTime ? 100.0f : 100.0f / (endTime - startTime));\n\n    pw.write(\"{\");\n\n    jsonKey(pw, \"status\");\n    jsonValue(pw, statusLine.toString());\n    pw.write(',');\n    jsonKey(pw, \"data\");\n\n    pw.write('[');\n\n    // display list in reverse order\n    for (int index = events.size() - 1; index >= 0; index--) {\n      eventJson(pw, (EventInfo) events.get(index), index, startTime, scale);\n      if (index > 0) {\n        pw.write(',');\n      }\n    }\n\n    pw.write(']');\n\n    pw.write(\"}\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6320, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 104, "focalAPIEnd": 118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)"], "useStart": [124, 145], "useEnd": [139, 158], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bdombrow/CS-510-NiagaraST-Last-Known-Good/tree/master/tests/TestSAXOutput.java", "rawCode": "  public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n    pw.write(\"</\");\n    pw.write(qName);\n    pw.write(\">\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6321, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [185], "initializationEnd": [201], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 207, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.close()"], "useStart": [318, 407, 433, 464, 492], "useEnd": [351, 423, 448, 479, 503], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arquillian/arquillian-extension-warp/tree/master/ftest/src/main/java/org/jboss/arquillian/warp/ftest/TestingServlet.java", "rawCode": "  private void handleRequest(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n    resp.setContentType(\"text/html\");\n\n    PrintWriter out = resp.getWriter();\n    out.write(\"hello there\\n\");\n    for (Entry<String, String[]> entry : req.getParameterMap().entrySet()) {\n      out.write(entry.getKey() + \" = \");\n      for (String value : entry.getValue()) {\n        out.write(value);\n        out.write(\", \");\n      }\n      out.write(\"\\n\");\n    }\n\n    out.close();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6322, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [288], "initializationEnd": [308], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 762, "focalAPIEnd": 779, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)"], "useStart": [1377, 1426], "useEnd": [1394, 1443], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/archive/action/TempletfieldAction.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public String save() throws IOException {\n    HttpServletResponse response = getResponse();\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"text/html\");\n    response.setHeader(\"Cache-Control\", \"no-cache\");\n    PrintWriter out = response.getWriter();\n\n    String result = \"保存完毕。\";\n    try {\n      Gson gson = new Gson();\n      Map<String, List<SysTempletfield>> map = new HashMap<String, List<SysTempletfield>>();\n      try {\n        map =\n            (Map)\n                gson.fromJson(\n                    par, new TypeToken<Map<String, List<SysTempletfield>>>() {}.getType());\n      } catch (Exception e) {\n        System.out.println(e.getMessage());\n        result = \"保存失败，请重新尝试，或与管理员联系。\";\n        out.write(result);\n        return null;\n      }\n      // 处理更新的\n      List<SysTempletfield> updateList = map.get(\"updated\");\n      if (updateList.size() > 0) {\n        // 循环保存更新的\n        for (SysTempletfield sysTempletfield : updateList) {\n          update(sysTempletfield);\n        }\n      }\n      // 处理删除\n      List<SysTempletfield> delList = map.get(\"deleted\");\n      if (delList.size() > 0) {\n        // 循环删除\n        for (SysTempletfield sysTempletfield : delList) {\n          delete(sysTempletfield.getTempletfieldid());\n        }\n      }\n    } catch (Exception e) {\n      result = \"保存失败，请重新尝试，或与管理员联系。\";\n      out.write(result);\n      return null;\n    }\n\n    out.write(result);\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6323, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.println(String)"], "configurationStart": [203], "configurationEnd": [229], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 235, "focalAPIEnd": 258, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [264], "useEnd": [274], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rwl/j2objc/tree/master/jre_emul/apache_harmony/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/PrintWriterTest.java", "rawCode": "  /** @tests java.io.PrintWriter#write(java.lang.String) */\n  public void test_writeLjava_lang_String() {\n    // Test for method void java.io.PrintWriter.write(java.lang.String)\n    String s = null;\n    pw.println(\"Random Chars\");\n    pw.write(\"Hello World\");\n    pw.flush();\n    try {\n      br = new BufferedReader(new Support_StringReader(bao.toString()));\n      br.readLine();\n      s = br.readLine();\n    } catch (IOException e) {\n      fail(\"IOException during test : \" + e.getMessage());\n    }\n    assertTrue(\"Wrote incorrect char[] string: \" + s, s.equals(\"Hello World\"));\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6324, "initialization": ["PrintWriter printWriter = new PrintWriter(*)"], "initializationStart": [202], "initializationEnd": [229], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 653, "focalAPIEnd": 670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [960], "useEnd": [974], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/frncsrss/interviews/tree/master/src/core/interviews/trees/LZW.java", "rawCode": "  /**\n   * Decode the input String using LZW.\n   *\n   * @throws IOException\n   */\n  public static void decode() throws IOException {\n    Scanner stdin = new Scanner(System.in);\n    PrintWriter stdout = new PrintWriter(System.out);\n\n    String[] st = new String[L];\n    int i; // next available codeword value\n\n    for (i = 0; i < R; i++) { // initialize symbol table with all single character strings\n      st[i] = \"\" + (char) i;\n    }\n    st[i++] = \"\"; // (unused) lookahead for EOF\n\n    byte[] input = stdin.next().getBytes();\n    int j = 0; // pointer in input\n\n    int codeword = input[j++];\n    String val = st[codeword];\n\n    while (true) {\n      stdout.write(val);\n      codeword = (char) (input[j++] & 0xff); // unsigned byte\n      if (codeword == R) break;\n      String s = st[codeword];\n      if (i == codeword) s = val + val.charAt(0); // special case hack, s not yet in the st\n      if (i < L) st[i++] = val + s.charAt(0);\n      val = s;\n    }\n    stdout.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6325, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [216], "initializationEnd": [236], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.println(String)"], "configurationStart": [454], "configurationEnd": [518], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 694, "focalAPIEnd": 711, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.close()"], "useStart": [804, 886, 913, 943, 989], "useEnd": [870, 904, 935, 965, 1000], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 973, "finallyExpressionEnd": 981, "finallyBlockStart": 973, "finallyBlockEnd": 1007, "cleanUpCallStart": [989], "cleanUpCallEnd": [1000], "url": "https://github.com/mondhs/spantus/tree/master/externals/integration/springcloud/spnt-server/src/main/java/org/spantus/server/servlet/SpntRecordServlet.java", "rawCode": "  @Override\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    LOG.debug(\n        \"[doGet] request: {0}\",\n        getConfigService()\n            .reconstructRequestURLandParams(\n                request.getRequestURL().toString(), request.getParameterMap()));\n    try {\n      out.println(\"<html><head><title>MyServlet</title></head><body>\");\n      // out.write(getServletConfig().getInitParameter(\"webInitParam1\")\n      // + \"&nbsp;\");\n      // out.write(getServletConfig().getInitParameter(\"webInitParam2\"));\n      out.write(\"<ul>\");\n      for (CorporaEntry entry : getStorageService().findAll().getCorporaEntry()) {\n        out.write(\"<li>[doGet] entry {0}\" + entry.getFileName() + \"</li>\");\n      }\n      out.write(\"</ul>\");\n\n      out.println(\"</body>\");\n      out.println(\"</html>\");\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6326, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.10.0-RC1/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6327, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 453, "focalAPIEnd": 511, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [602, 626], "useEnd": [620, 640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.11.0-beta2/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  void returnPressed() {\n    Document doc = getDocument();\n    int len = doc.getLength();\n    Segment segment = new Segment();\n    try {\n      synchronized (doc) {\n        doc.getText(outputMark, len - outputMark, segment);\n      }\n    } catch (javax.swing.text.BadLocationException ignored) {\n      ignored.printStackTrace();\n    }\n    if (segment.count > 0) {\n      history.addElement(segment.toString());\n    }\n    historyIndex = history.size();\n    inPipe.write(segment.array, segment.offset, segment.count);\n    append(\"\\n\");\n    synchronized (doc) {\n      outputMark = doc.getLength();\n    }\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6328, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()", "String s = new Gson()"], "initializationStart": [133, 1122], "initializationEnd": [153, 1132], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 184, "tryExpressionEnd": 188, "tryBlockStart": 184, "tryBlockEnd": 1448, "catchExpressionStart": 1249, "catchExpressionEnd": 1272, "catchBlockStart": 1249, "catchBlockEnd": 1306, "exceptionHandlingCallStart": [1280], "exceptionHandlingCallEnd": [1299], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1207, "focalAPIEnd": 1222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [1230], "useEnd": [1241], "hasFinally": 1, "cleanUpCall": ["Connection.close()"], "finallyExpressionStart": 1307, "finallyExpressionEnd": 1315, "finallyBlockStart": 1307, "finallyBlockEnd": 1448, "cleanUpCallStart": [1337], "cleanUpCallEnd": [1346], "url": "https://github.com/irhete/election/tree/master/Valimised/src/com/valimised/server/AreaResultsServlet.java", "rawCode": "  @Override\n  public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n    PrintWriter out = response.getWriter();\n    Connection c = null;\n    try {\n      DriverManager.registerDriver(new AppEngineDriver());\n\n      String query =\n          \"SELECT firstName, lastName, id, party, votes, area FROM candidate WHERE area = ?\";\n\n      c = DriverManager.getConnection(\"jdbc:google:rdbms://e-election-app:instance2/election\");\n      String areaId = request.getParameter(\"areaId\");\n      PreparedStatement statement = c.prepareStatement(query);\n      statement.setString(1, areaId);\n      ResultSet tableRows = statement.executeQuery();\n      List<AreaResult> results = new ArrayList<AreaResult>();\n      while (tableRows.next()) {\n        AreaResult areaResult =\n            new AreaResult(\n                tableRows.getString(\"firstName\") + \" \" + tableRows.getString(\"lastName\"),\n                tableRows.getInt(\"id\"),\n                Data.parties[tableRows.getInt(\"party\") - 1],\n                tableRows.getInt(\"votes\"));\n        results.add(areaResult);\n      }\n      String gson = new Gson().toJson(results);\n      response.setContentType(\"application/json\");\n      out.write(gson);\n      out.flush();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        c.close();\n      } catch (SQLException ignore) {\n        System.out.println(ignore.getMessage());\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6329, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 210, "focalAPIEnd": 228, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.close()"], "useStart": [240, 262], "useEnd": [256, 274], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stas/pos/tree/master/jetty/contrib/cometd/bayeux/src/main/java/org/mortbay/cometd/JSONTransport.java", "rawCode": "  public synchronized void complete() throws IOException {\n    if (_responses == 0) {\n      HttpServletResponse response = getResponse();\n      response.setStatus(200);\n      _out = response.getWriter();\n      _out.write(_start);\n    }\n    _out.write(_end);\n    _out.close();\n    _responses = 0;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6330, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 80, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.println()"], "useStart": [123], "useEnd": [142], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/html/src/org/ccil/cowan/tagsoup/PYXWriter.java", "rawCode": "  public void pi(char[] buff, int offset, int length) throws SAXException {\n    theWriter.write(buff, offset, length);\n    theWriter.println();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6331, "initialization": ["PrintWriter printWriter = HttpServletResponse.getOutputStream()"], "initializationStart": [566], "initializationEnd": [592], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.write(char)"], "configurationStart": [693], "configurationEnd": [728], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf)", "focalAPIStart": 784, "focalAPIEnd": 798, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(char[],int,int)", "printWriter.flush()", "printWriter.flush()", "printWriter.write(char)", "printWriter.write(char[])", "printWriter.write(char[],int,int)"], "useStart": [848, 945, 1159, 1741, 1832, 1896], "useEnd": [874, 956, 1170, 1776, 1846, 1922], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmcc0nn3ll/jetty-project/tree/master/test-wars/test-war-dump/src/main/java/org/mortbay/jetty/tests/webapp/dump/DumpServlet.java", "rawCode": "  private boolean dump(\n      HttpServletResponse response,\n      String data,\n      String chars,\n      String block,\n      String dribble,\n      boolean flush)\n      throws IOException {\n    if (data != null && data.length() > 0) {\n      long d = Long.parseLong(data);\n      int b = (block != null && block.length() > 0) ? Integer.parseInt(block) : 50;\n      byte[] buf = new byte[b];\n      for (int i = 0; i < b; i++) {\n\n        buf[i] = (byte) ('0' + (i % 10));\n        if (i % 10 == 9) buf[i] = (byte) '\\n';\n      }\n      buf[0] = 'o';\n      OutputStream out = response.getOutputStream();\n      response.setContentType(\"text/plain\");\n      while (d > 0) {\n        if (b == 1) {\n          out.write(d % 80 == 0 ? '\\n' : '.');\n          d--;\n        } else if (d >= b) {\n          out.write(buf);\n          d = d - b;\n        } else {\n          out.write(buf, 0, (int) d);\n          d = 0;\n        }\n\n        if (dribble != null) {\n          out.flush();\n          try {\n            Thread.sleep(Long.parseLong(dribble));\n          } catch (Exception e) {\n            e.printStackTrace();\n            break;\n          }\n        }\n      }\n\n      if (flush) out.flush();\n\n      return true;\n    }\n\n    // Handle a dump of data\n    if (chars != null && chars.length() > 0) {\n      long d = Long.parseLong(chars);\n      int b = (block != null && block.length() > 0) ? Integer.parseInt(block) : 50;\n      char[] buf = new char[b];\n      for (int i = 0; i < b; i++) {\n        buf[i] = (char) ('0' + (i % 10));\n        if (i % 10 == 9) buf[i] = '\\n';\n      }\n      buf[0] = 'o';\n      response.setContentType(\"text/plain\");\n      PrintWriter out = response.getWriter();\n      while (d > 0 && !out.checkError()) {\n        if (b == 1) {\n          out.write(d % 80 == 0 ? '\\n' : '.');\n          d--;\n        } else if (d >= b) {\n          out.write(buf);\n          d = d - b;\n        } else {\n          out.write(buf, 0, (int) d);\n          d = 0;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6332, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()", "String s = Element.getText()"], "initializationStart": [386, 1011], "initializationEnd": [406, 1029], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "error(*,*)"], "tryExpressionStart": 506, "tryExpressionEnd": 510, "tryBlockStart": 506, "tryBlockEnd": 1403, "catchExpressionStart": 1217, "catchExpressionEnd": 1237, "catchBlockStart": 1217, "catchBlockEnd": 1387, "exceptionHandlingCallStart": [1303, 1293], "exceptionHandlingCallEnd": [1317, 1321], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1053, "focalAPIEnd": 1070, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/auxgroup-sanxing/Sesame/tree/master/sesame-studio/src/main/java/com/sanxing/studio/action/UserAction.java", "rawCode": "  @Override\n  protected void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    String action = request.getParameter(\"action\");\n    String userId = request.getParameter(\"userid\");\n    userId = new String(userId.getBytes(\"ISO-8859-1\"), \"UTF-8\");\n    response.setContentType(\"text/json; charset=utf-8\");\n    PrintWriter out = response.getWriter();\n\n    File file = getUserFile(getServletContext());\n    SAXBuilder builder = new SAXBuilder();\n    try {\n      if (action != null) {\n        if (action.equals(\"getAuth\")) {\n          String type = request.getParameter(\"type\");\n          String result = \"\";\n          Document document = builder.build(file);\n          Element root = document.getRootElement();\n          Element accredit =\n              (Element)\n                  XPath.selectSingleNode(\n                      root, \"user[@userid='\" + userId + \"']/accredit[@type='\" + type + \"']\");\n          if (accredit != null) {\n            result = accredit.getText();\n          }\n          out.write(result);\n        } else {\n          LOG.info(getServletName() + \" GET::\" + action);\n          LOG.info(request.getQueryString());\n        }\n      }\n    } catch (Exception e) {\n      if (!(e instanceof MessageException)) {\n        LOG.error(e.getMessage(), e);\n      }\n      WebUtil.sendError(response, e.getMessage());\n    } finally {\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6333, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 146, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [232, 317, 399, 483, 566, 647, 731, 821, 912, 999, 1144, 1171, 1229], "useEnd": [258, 340, 422, 508, 588, 670, 756, 850, 938, 1024, 1161, 1204, 1253], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DavePearce/jkit/tree/master/jkit/jil/io/JilFileWriter.java", "rawCode": "  protected void writeModifiers(List<Modifier> modifiers) {\n    for (Modifier x : modifiers) {\n      if (x instanceof Modifier.Private) {\n        output.write(\"private \");\n      } else if (x instanceof Modifier.Protected) {\n        output.write(\"protected \");\n      } else if (x instanceof Modifier.Public) {\n        output.write(\"public \");\n      } else if (x instanceof Modifier.Static) {\n        output.write(\"static \");\n      } else if (x instanceof Modifier.Abstract) {\n        output.write(\"abstract \");\n      } else if (x instanceof Modifier.Final) {\n        output.write(\"final \");\n      } else if (x instanceof Modifier.Native) {\n        output.write(\"native \");\n      } else if (x instanceof Modifier.StrictFP) {\n        output.write(\"strictfp \");\n      } else if (x instanceof Modifier.Synchronized) {\n        output.write(\"synchronized \");\n      } else if (x instanceof Modifier.Transient) {\n        output.write(\"transient \");\n      } else if (x instanceof Modifier.Volatile) {\n        output.write(\"volatile \");\n      } else if (x instanceof Modifier.Annotation) {\n        Modifier.Annotation a = (Modifier.Annotation) x;\n        output.write(\"@\");\n        output.write(a.type().toString());\n      } else {\n        output.write(\"unknown \");\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6334, "initialization": ["String s = StringBuilder.toString()"], "initializationStart": [387], "initializationEnd": [409], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 487, "focalAPIEnd": 505, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [515], "useEnd": [529], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rgov/wage/tree/master/src/main/java/info/svitkine/alexei/wage/ui/ConsoleView.java", "rawCode": "  public void keyTyped(KeyEvent event) {\n    char c = event.getKeyChar();\n    if (c == KeyEvent.VK_BACK_SPACE) {\n      if (currentLine.length() > 0) {\n        currentLine = new StringBuilder(currentLine.substring(0, currentLine.length() - 1));\n        repaint();\n      }\n    } else if (getFont().canDisplay(c)) {\n      currentLine.append(c);\n      if (c == '\\n') {\n        String line = currentLine.toString();\n        currentLine = new StringBuilder();\n        lines.add(line);\n        inPipe.write(line);\n        inPipe.flush();\n      }\n      repaint();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6335, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 422, "focalAPIEnd": 480, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [538, 562], "useEnd": [556, 576], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blackberry/BB10-WebWorks-Community-Samples/tree/master/Ant-Cordova-Build-Script/tools/rhino1_7R3/toolsrc/org/mozilla/javascript/tools/shell/ConsoleTextArea.java", "rawCode": "  synchronized void returnPressed() {\n    Document doc = getDocument();\n    int len = doc.getLength();\n    Segment segment = new Segment();\n    try {\n      doc.getText(outputMark, len - outputMark, segment);\n    } catch (javax.swing.text.BadLocationException ignored) {\n      ignored.printStackTrace();\n    }\n    if (segment.count > 0) {\n      history.add(segment.toString());\n    }\n    historyIndex = history.size();\n    inPipe.write(segment.array, segment.offset, segment.count);\n    append(\"\\n\");\n    outputMark = doc.getLength();\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6336, "initialization": ["PrintWriter printWriter = new PrintWriter(File)"], "initializationStart": [582], "initializationEnd": [609], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 695, "focalAPIEnd": 724, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.close()"], "useStart": [776, 875, 933, 975], "useEnd": [869, 927, 969, 993], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/TestContainerLaunch.java", "rawCode": "  /**\n   * See if environment variable is forwarded using sanitizeEnv.\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testContainerEnvVariables() throws Exception {\n    containerManager.start();\n\n    Map<String, String> envWithDummy = new HashMap<String, String>();\n    envWithDummy.putAll(System.getenv());\n    envWithDummy.put(Environment.MALLOC_ARENA_MAX.name(), \"99\");\n    setNewEnvironmentHack(envWithDummy);\n\n    String malloc = System.getenv(Environment.MALLOC_ARENA_MAX.name());\n    File scriptFile = new File(tmpDir, \"scriptFile.sh\");\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\n    File processStartFile = new File(tmpDir, \"env_vars.txt\").getAbsoluteFile();\n    fileWriter.write(\"\\numask 0\"); // So that start file is readable by the test\n    fileWriter.write(\"\\necho $\" + Environment.MALLOC_ARENA_MAX.name() + \" > \" + processStartFile);\n    fileWriter.write(\"\\necho $$ >> \" + processStartFile);\n    fileWriter.write(\"\\nexec sleep 100\");\n    fileWriter.close();\n\n    assert (malloc != null && !\"\".equals(malloc));\n\n    ContainerLaunchContext containerLaunchContext =\n        recordFactory.newRecordInstance(ContainerLaunchContext.class);\n\n    // ////// Construct the Container-id\n    ApplicationId appId = recordFactory.newRecordInstance(ApplicationId.class);\n    appId.setClusterTimestamp(0);\n    appId.setId(0);\n    ApplicationAttemptId appAttemptId = recordFactory.newRecordInstance(ApplicationAttemptId.class);\n    appAttemptId.setApplicationId(appId);\n    appAttemptId.setAttemptId(1);\n    ContainerId cId = recordFactory.newRecordInstance(ContainerId.class);\n    cId.setApplicationAttemptId(appAttemptId);\n    containerLaunchContext.setContainerId(cId);\n\n    containerLaunchContext.setUser(user);\n\n    // upload the script file so that the container can run it\n    URL resource_alpha =\n        ConverterUtils.getYarnUrlFromPath(\n            localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\n    rsrc_alpha.setResource(resource_alpha);\n    rsrc_alpha.setSize(-1);\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\n    rsrc_alpha.setType(LocalResourceType.FILE);\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\n    String destinationFile = \"dest_file\";\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\n    localResources.put(destinationFile, rsrc_alpha);\n    containerLaunchContext.setLocalResources(localResources);\n\n    // set up the rest of the container\n    containerLaunchContext.setUser(containerLaunchContext.getUser());\n    List<String> commands = new ArrayList<String>();\n    commands.add(\"/bin/bash\");\n    commands.add(scriptFile.getAbsolutePath());\n    containerLaunchContext.setCommands(commands);\n    containerLaunchContext.setResource(recordFactory.newRecordInstance(Resource.class));\n    containerLaunchContext.getResource().setMemory(1024);\n    StartContainerRequest startRequest =\n        recordFactory.newRecordInstance(StartContainerRequest.class);\n    startRequest.setContainerLaunchContext(containerLaunchContext);\n    containerManager.startContainer(startRequest);\n\n    int timeoutSecs = 0;\n    while (!processStartFile.exists() && timeoutSecs++ < 20) {\n      Thread.sleep(1000);\n      LOG.info(\"Waiting for process start-file to be created\");\n    }\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", processStartFile.exists());\n\n    // Now verify the contents of the file\n    BufferedReader reader = new BufferedReader(new FileReader(processStartFile));\n    Assert.assertEquals(malloc, reader.readLine());\n    // Get the pid of the process\n    String pid = reader.readLine().trim();\n    // No more lines\n    Assert.assertEquals(null, reader.readLine());\n\n    // Now test the stop functionality.\n\n    // Assert that the process is alive\n    Assert.assertTrue(\"Process is not alive!\", exec.signalContainer(user, pid, Signal.NULL));\n    // Once more\n    Assert.assertTrue(\"Process is not alive!\", exec.signalContainer(user, pid, Signal.NULL));\n\n    StopContainerRequest stopRequest = recordFactory.newRecordInstance(StopContainerRequest.class);\n    stopRequest.setContainerId(cId);\n    containerManager.stopContainer(stopRequest);\n\n    BaseContainerManagerTest.waitForContainerState(containerManager, cId, ContainerState.COMPLETE);\n\n    GetContainerStatusRequest gcsRequest =\n        recordFactory.newRecordInstance(GetContainerStatusRequest.class);\n    gcsRequest.setContainerId(cId);\n    ContainerStatus containerStatus = containerManager.getContainerStatus(gcsRequest).getStatus();\n    Assert.assertEquals(ExitCode.TERMINATED.getExitCode(), containerStatus.getExitStatus());\n\n    // Assert that the process is not alive anymore\n    Assert.assertFalse(\"Process is still alive!\", exec.signalContainer(user, pid, Signal.NULL));\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6337, "initialization": ["String s = getInstance()", "PrintWriter printWriter = startTextMessage()"], "initializationStart": [2176, 2677], "initializationEnd": [2203, 2700], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["error(*,*)"], "tryExpressionStart": 2441, "tryExpressionEnd": 2445, "tryBlockStart": 2441, "tryBlockEnd": 3000, "catchExpressionStart": 2839, "catchExpressionEnd": 2869, "catchBlockStart": 2839, "catchBlockEnd": 2914, "exceptionHandlingCallStart": [2881], "exceptionHandlingCallEnd": [2903], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 2712, "focalAPIEnd": 2752, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()", "printWriter.close()"], "useStart": [2764, 2801], "useEnd": [2789, 2826], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Uberdust/webapp/tree/master/src/main/java/eu/uberdust/websockets/readings/LastReadingWSListener.java", "rawCode": "  @Override\n  public final void update(final NodeReading lastReading) {\n    // LOGGER.info(\"updating for \" + lastReading);\n    final String nodeName = lastReading.getCapability().getNode().getName();\n    final String capabilityName = lastReading.getCapability().getCapability().getName();\n    // LOGGER.info(nodeName + \"--\" + capabilityName);\n    String testbedUrnPrefix = \"\";\n    if (nodeName.contains(\":\")) {\n      testbedUrnPrefix = nodeName.substring(0, nodeName.lastIndexOf(\":\") + 1);\n    }\n    String capabilityUrnPrefix = \"\";\n    if (capabilityName.contains(\":\")) {\n      capabilityUrnPrefix = capabilityName.substring(0, nodeName.lastIndexOf(\":\") + 1);\n    }\n\n    if (((nodeID.contains(\"virtual\")\n                || lastReading.getCapability().getNode().getName().equals(nodeID))\n            || \"*\".equals(nodeID)\n            || nodeID.equals(testbedUrnPrefix + \"*\"))\n        && (lastReading.getCapability().getCapability().getName().equals(capabilityID)\n            || \"*\".equals(capabilityID)\n            || capabilityID.equals(capabilityUrnPrefix + \"*\"))) {\n      // LOGGER.info(\"is for me\");\n      // create the protobuf\n      final Message.NodeReadings.Reading.Builder reading =\n          Message.NodeReadings.Reading.newBuilder();\n      // LOGGER.error(\"initialized?: \" + reading.isInitialized());\n      reading\n          .setNode(lastReading.getCapability().getNode().getName())\n          .setCapability(lastReading.getCapability().getCapability().getName())\n          .setTimestamp(lastReading.getTimestamp().getTime());\n      if (lastReading.getReading() != null) {\n        reading.setDoubleReading(lastReading.getReading());\n      } else {\n        reading.setStringReading(lastReading.getStringReading());\n      }\n      final Message.NodeReadings readings =\n          Message.NodeReadings.newBuilder().addReading(reading.build()).build();\n      final Message.Envelope envelope =\n          Message.Envelope.newBuilder()\n              .setType(Message.Envelope.Type.NODE_READINGS)\n              .setNodeReadings(readings)\n              .build();\n      // LOGGER.info(\"envelope built\");\n\n      String readingToString = \"\";\n      try {\n        readingToString = TextFormatter.getInstance().formatNodeReading(lastReading);\n      } catch (NotImplementedException e) {\n        LOGGER.error(e, e);\n      }\n\n      // LOGGER.info(\"Updating \" + users.size() + \" listeners\");\n\n      for (final WebSocketContext user : users) {\n        try {\n          final OutputStream thisWriter = user.startBinaryMessage();\n          thisWriter.write(envelope.toByteArray());\n          thisWriter.flush();\n          thisWriter.close();\n\n          final PrintWriter thisMessageWriter = user.startTextMessage();\n          thisMessageWriter.write(readingToString);\n          thisMessageWriter.flush();\n          thisMessageWriter.close();\n\n        } catch (final IOException ioe) {\n          LOGGER.error(ioe, ioe);\n        } catch (final IllegalStateException ise) {\n          LOGGER.error(ise, ise);\n        }\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6338, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 778, "focalAPIEnd": 800, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lly123/Wheels/tree/master/src/main/java/com/freeroom/web/Apollo.java", "rawCode": "  protected void service(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n    final Hephaestus hephaestus = new Hephaestus(beanContext, req);\n    final Cerberus cerberus = new Cerberus(CHARSET_NAME);\n    setRequestInformation(req, cerberus);\n\n    final Ares ares = new Ares(hephaestus.getHandler().fst, hephaestus.getHandler().snd, cerberus);\n    final Pair<String, String> content = ares.getContent();\n\n    if (isNullOrEmpty(content.snd)) {\n      resp.setStatus(404);\n      return;\n    }\n\n    resp.setStatus(200);\n    resp.setCharacterEncoding(CHARSET_NAME);\n    resp.setContentType(content.fst);\n    try (final PrintWriter out =\n        new PrintWriter(new OutputStreamWriter(resp.getOutputStream(), CHARSET_NAME), true)) {\n      out.write(content.snd);\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6339, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.println(String)"], "configurationStart": [419], "configurationEnd": [445], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 451, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [479], "useEnd": [489], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/luni/src/test/java/tests/api/java/io/PrintWriterTest.java", "rawCode": "  /** @tests java.io.PrintWriter#write(char[], int, int) */\n  @TestTargetNew(\n    level = TestLevel.PARTIAL_COMPLETE,\n    notes = \"\",\n    method = \"write\",\n    args = {char[].class, int.class, int.class}\n  )\n  public void test_write$CII() {\n    // Test for method void java.io.PrintWriter.write(char [], int, int)\n    String s = null;\n    char[] schars = new char[11];\n    \"Hello World\".getChars(0, 11, schars, 0);\n    pw.println(\"Random Chars\");\n    pw.write(schars, 6, 5);\n    pw.flush();\n    try {\n      br = new BufferedReader(new Support_StringReader(baos.toString()));\n      br.readLine();\n      s = br.readLine();\n    } catch (IOException e) {\n      fail(\"IOException during test : \" + e.getMessage());\n    }\n    assertTrue(\"Wrote incorrect char[] string: \" + s, s.equals(\"World\"));\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6340, "initialization": ["String s = getResponseString(HttpServletRequest,String)", "PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [1126, 1534], "initializationEnd": [1179, 1554], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1668, "focalAPIEnd": 1693, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jimmccusker/caTissue/tree/master/software/caTissue/modules/core/src/main/java/edu/wustl/catissuecore/action/AddDepartmentAction.java", "rawCode": "  /**\n   * @param mapping : mapping\n   * @param form : form\n   * @param request : request\n   * @param response : response\n   * @throws IOException : IOException\n   * @throws ServletException : ServletException\n   * @return ActionForward\n   */\n  @Override\n  public ActionForward executeXSS(\n      ActionMapping mapping,\n      ActionForm form,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n    final String departmentName = request.getParameter(Constants.DEPARTMENT_NAME);\n    final DepartmentBizLogic bizlogic = new DepartmentBizLogic();\n    String departmentId = null;\n    String responseString = null;\n\n    /** Setting the department name to form */\n    final DepartmentForm departmentForm = (DepartmentForm) form;\n    departmentForm.setOperation(Constants.ADD);\n    departmentForm.setName(departmentName);\n\n    // Saving the department to the Database using COmmonAddEditAction\n    final ActionForward forward = super.executeXSS(mapping, departmentForm, request, response);\n    if ((forward != null) && (forward.getName().equals(Constants.FAILURE))) {\n      responseString = AppUtility.getResponseString(request, responseString);\n    } else {\n      try {\n        departmentId = bizlogic.getLatestDepartment(departmentName);\n        responseString = departmentId + Constants.RESPONSE_SEPARATOR + departmentName;\n      } catch (final BizLogicException bizEx) {\n        this.logger.error(\"Exception occurred in retrieving Department\", bizEx);\n      }\n    }\n\n    final PrintWriter out = response.getWriter();\n    response.setContentType(\"text/html\");\n\n    /** sending the response as departmentId @ departmentName */\n    out.write(responseString);\n\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6341, "initialization": ["String s = Element.getTagName()"], "initializationStart": [115], "initializationEnd": [130], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.write(char)"], "configurationStart": [164], "configurationEnd": [176], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 182, "focalAPIEnd": 198, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(char)", "writeNode(printWriter,*,int)", "printWriter.println(char)", "writeNode(printWriter,Node,*)", "printWriter.println()", "writeIndent(printWriter,int)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.print(char)", "printWriter.print(String)"], "useStart": [308, 328, 478, 567, 603, 704, 733, 754, 778, 888], "useEnd": [320, 362, 492, 593, 614, 725, 746, 770, 790, 901], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prsebastian/gwt-issue8215/tree/master/dev/core/src/com/google/gwt/dev/util/Util.java", "rawCode": "  private static void writeElement(PrintWriter w, Element el, int depth) throws IOException {\n    String tagName = el.getTagName();\n\n    writeIndent(w, depth);\n    w.write('<');\n    w.write(tagName);\n    NamedNodeMap attrs = el.getAttributes();\n    for (int i = 0, n = attrs.getLength(); i < n; ++i) {\n      w.write(' ');\n      writeNode(w, attrs.item(i), depth);\n    }\n\n    Node c = el.getFirstChild();\n    if (c != null) {\n      // There is at least one child.\n      //\n      w.println('>');\n\n      // Write the children.\n      //\n      while (c != null) {\n        writeNode(w, c, depth + 1);\n        w.println();\n        c = c.getNextSibling();\n      }\n\n      // Write the closing tag.\n      //\n      writeIndent(w, depth);\n      w.write(\"</\");\n      w.write(tagName);\n      w.print('>');\n    } else {\n      // There are no children, so just write the short form close.\n      //\n      w.print(\"/>\");\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6342, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-candidate-3-7-0-RC2/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6343, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [1011], "initializationEnd": [1026], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1044, "focalAPIEnd": 1056, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()"], "useStart": [1080], "useEnd": [1089], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 1064, "finallyExpressionEnd": 1072, "finallyBlockStart": 1064, "finallyBlockEnd": 1096, "cleanUpCallStart": [1080], "cleanUpCallEnd": [1089], "url": "https://github.com/duboisf/gerrit/tree/master/gerrit-httpd/src/main/java/com/google/gerrit/httpd/raw/SshInfoServlet.java", "rawCode": "  @Override\n  protected void doGet(final HttpServletRequest req, final HttpServletResponse rsp)\n      throws IOException {\n    rsp.setHeader(\"Expires\", \"Fri, 01 Jan 1980 00:00:00 GMT\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setHeader(\"Cache-Control\", \"no-cache, must-revalidate\");\n\n    final List<HostKey> hostKeys = sshd.getHostKeys();\n    final String out;\n    if (!hostKeys.isEmpty()) {\n      String host = hostKeys.get(0).getHost();\n      String port = \"22\";\n\n      if (host.contains(\":\")) {\n        final int p = host.lastIndexOf(':');\n        port = host.substring(p + 1);\n        host = host.substring(0, p);\n      }\n\n      if (host.equals(\"*\")) {\n        host = req.getServerName();\n\n      } else if (host.startsWith(\"[\") && host.endsWith(\"]\")) {\n        host = host.substring(1, host.length() - 1);\n      }\n\n      out = host + \" \" + port;\n    } else {\n      out = \"NOT_AVAILABLE\";\n    }\n\n    rsp.setCharacterEncoding(\"UTF-8\");\n    rsp.setContentType(\"text/plain\");\n    final PrintWriter w = rsp.getWriter();\n    try {\n      w.write(out);\n    } finally {\n      w.close();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6344, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()", "String s = JSONArray.toString()"], "initializationStart": [1055, 1296], "initializationEnd": [1075, 1320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1331, "focalAPIEnd": 1366, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tr0llhoehle/wgms/tree/master/tomcat-project/src/de/tr0llhoehle/wgms/Servlets/AddEntries.java", "rawCode": "  /** @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    HttpSession session = request.getSession(true);\n    if (!session.isNew()) {\n      ClientConnection client = (ClientConnection) session.getAttribute(\"clientInfo\");\n      if (client != null) {\n        String data = request.getParameter(\"data\");\n        JSONArray jsonArray;\n        JSONArray jsonSendArray = new JSONArray();\n        try {\n          jsonArray = new JSONArray(data);\n\n          JSONObject jsonObject;\n          for (int i = 0; i < jsonArray.length(); i++) {\n            String name = jsonArray.getString(i);\n            System.out.println(\"new Item: \" + name);\n            int uid = client.getList().addItem(client, name);\n            jsonSendArray.put(uid);\n          }\n        } catch (JSONException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n\n        PrintWriter out = response.getWriter();\n        /*\n         * data = data.substring(1, data.length()-1);\n         *\n         * data = data.replaceAll(\"\\\"\", \"\"); data = data.replace(\"\\\\\",\n         * \"\");\n         */\n        System.out.println(\"Add Entries:\" + jsonSendArray.toString());\n        out.write(jsonSendArray.toString());\n      } else {\n        response.sendRedirect(LocationList.LOGINPAGE);\n      }\n    } else {\n      response.sendRedirect(LocationList.LOGINPAGE);\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6345, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 260, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.write(String)", "printWriter.write(char)", "printWriter.flush()"], "useStart": [293, 321, 356, 384, 417, 445, 479, 507, 542, 570, 602, 630, 667, 695, 739, 767, 808, 836, 878, 906, 956, 984, 1035, 1063, 1141, 1171, 1214, 1244, 1286, 1316, 1366, 1394, 1424, 1453], "useEnd": [315, 350, 378, 411, 439, 473, 501, 536, 564, 596, 624, 661, 689, 733, 761, 802, 830, 872, 900, 950, 978, 1029, 1057, 1103, 1163, 1206, 1236, 1278, 1308, 1354, 1388, 1418, 1446, 1471], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CampagneLaboratory/bdval/tree/master/src/edu/cornell/med/icb/geo/tools/ClassificationResults.java", "rawCode": "  public static void writeHeader(final PrintWriter statWriter, final boolean shufflingLabelRun) {\n\n    // format is :\n    // input-filename gene-list-name overlap accuracy precision recall f-1\n    // percentRandomGreaterOrEqual condition1 condition2 n1 n2\n    statWriter.write(\"Dataset\");\n    statWriter.write('\\t');\n    statWriter.write(\"Gene List\");\n    statWriter.write('\\t');\n    statWriter.write(\"Overlap\");\n    statWriter.write('\\t');\n    statWriter.write(\"Accuracy\");\n    statWriter.write('\\t');\n    statWriter.write(\"Precision\");\n    statWriter.write('\\t');\n    statWriter.write(\"Recall\");\n    statWriter.write('\\t');\n    statWriter.write(\"F-1 measure\");\n    statWriter.write('\\t');\n    statWriter.write(\"Percent Random GEP\");\n    statWriter.write('\\t');\n    statWriter.write(\"First Condition\");\n    statWriter.write('\\t');\n    statWriter.write(\"Second Condition\");\n    statWriter.write('\\t');\n    statWriter.write(\"#Samples First Condition\");\n    statWriter.write('\\t');\n    statWriter.write(\"#Samples Second Condition\");\n    statWriter.write('\\t');\n    statWriter.write(\"ClassificationUnique\");\n\n    if (shufflingLabelRun) {\n      statWriter.write('\\t');\n      statWriter.write(\"ShufflingRunGEP\");\n      statWriter.write('\\t');\n      statWriter.write(\"ShufflingRunGE\");\n      statWriter.write('\\t');\n      statWriter.write(\"ShufflingTestCount\");\n    }\n    statWriter.write('\\t');\n    statWriter.write(\"Rank\");\n    statWriter.write('\\n');\n\n    statWriter.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6346, "initialization": ["PrintWriter printWriter = getPrintWriter()"], "initializationStart": [91], "initializationEnd": [107], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 969, "focalAPIEnd": 988, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/archive/action/ArchiveCountAction.java", "rawCode": "  /** 自定义统计 */\n  public String getQueryGroups() throws IOException {\n    PrintWriter out = getPrintWriter();\n    // 增加多媒体文件级表内容\n    List<SysTable> tableList = treeService.getTreeOfTable(treeid);\n    String tableName = \"\";\n    // 得到表名\n    for (int i = 0; i < tableList.size(); i++) {\n      if (tableList.get(i).getTabletype().equals(tableType)) {\n        tableName = tableList.get(i).getTablename();\n        break;\n      }\n    }\n    Gson gson = new Gson();\n    // 把json对象转成实体对象\n    List<QueryItem> retList =\n        gson.fromJson(groupitem, new TypeToken<List<QueryItem>>() {}.getType());\n\n    StringBuffer sql = new StringBuffer();\n    sql.append(\"SELECT COUNT(0) FROM \" + tableName + \" WHERE 1=1 AND TREEID='\" + treeid + \"'\");\n    for (QueryItem qt : retList) {\n      sql.append(\" AND \" + BaseSelector.getSql(qt.getOperatorType(), qt.getName(), qt.getValue()));\n    }\n    System.out.println(sql.toString());\n\n    int num = dynamicService.rowCount(sql.toString());\n    out.write(num + \"\");\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6347, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()", "String s = HashMap.get(String)"], "initializationStart": [679, 2104], "initializationEnd": [699, 2122], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 2248, "focalAPIEnd": 2274, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()"], "useStart": [2841], "useEnd": [2852], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 2825, "finallyExpressionEnd": 2833, "finallyBlockStart": 2825, "finallyBlockEnd": 2859, "cleanUpCallStart": [2841], "cleanUpCallEnd": [2852], "url": "https://github.com/mtresearcher/mosesdecoder/tree/master/contrib/server/Translation-web/src/java/com/hpl/mt/Translate.java", "rawCode": "  /**\n   * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.\n   *\n   * @param request servlet request\n   * @param response servlet response\n   * @throws ServletException if a servlet-specific error occurs\n   * @throws IOException if an I/O error occurs\n   */\n  protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    response.setContentType(\"text/html;charset=UTF-8\");\n    System.out.println(\"before\" + request.getCharacterEncoding());\n    request.setCharacterEncoding(\"UTF-8\");\n    System.out.println(\"after\" + request.getCharacterEncoding());\n    PrintWriter out = response.getWriter();\n    try {\n      /*\n       * TODO output your page here. You may use following sample code.\n       */\n      // Create an instance of XmlRpcClient\n      String textToTranslate = request.getParameter(\"text\");\n      XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();\n      config.setServerURL(new URL(\"http://localhost:9008/RPC2\"));\n      XmlRpcClient client = new XmlRpcClient();\n      client.setConfig(config);\n      // The XML-RPC data type used by mosesserver is <struct>. In Java, this data type can be\n      // represented using HashMap.\n      HashMap<String, String> mosesParams = new HashMap<String, String>();\n      mosesParams.put(\"text\", textToTranslate);\n      mosesParams.put(\"align\", \"true\");\n      mosesParams.put(\"report-all-factors\", \"true\");\n      // The XmlRpcClient.execute method doesn't accept Hashmap (pParams). It's either Object[] or\n      // List.\n      Object[] params = new Object[] {null};\n      params[0] = mosesParams;\n      // Invoke the remote method \"translate\". The result is an Object, convert it to a HashMap.\n      HashMap result;\n      try {\n        result = (HashMap) client.execute(\"translate\", params);\n      } catch (XmlRpcException ex) {\n        Logger.getLogger(Translate.class.getName()).log(Level.SEVERE, null, ex);\n        throw new IOException(\"XML-RPC failed\");\n      }\n      // Print the returned results\n      String textTranslation = (String) result.get(\"text\");\n      System.out.println(\"Input : \" + textToTranslate);\n      System.out.println(\"Translation : \" + textTranslation);\n      out.write(textTranslation);\n      if (result.get(\"align\") != null) {\n        Object[] aligns = (Object[]) result.get(\"align\");\n        System.out.println(\"Phrase alignments : [Source Start:Source End][Target Start]\");\n        for (Object element : aligns) {\n          HashMap align = (HashMap) element;\n          System.out.println(\n              \"[\"\n                  + align.get(\"src-start\")\n                  + \":\"\n                  + align.get(\"src-end\")\n                  + \"][\"\n                  + align.get(\"tgt-start\")\n                  + \"]\");\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6348, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [204], "initializationEnd": [224], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["error(String,*)", "PrintWriter.write(String)"], "tryExpressionStart": 355, "tryExpressionEnd": 359, "tryBlockStart": 355, "tryBlockEnd": 1986, "catchExpressionStart": 1667, "catchExpressionEnd": 1700, "catchBlockStart": 1667, "catchBlockEnd": 1836, "exceptionHandlingCallStart": [1710, 1761], "exceptionHandlingCallEnd": [1751, 1827], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1623, "focalAPIEnd": 1657, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [1761, 1911, 2089], "useEnd": [1827, 1977, 2139], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/splangi/automaatnehindaja/tree/master/automaatnehindaja/src/automaatnehindaja/CloseCourseServlet.java", "rawCode": "  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    String course = request.getParameter(\"coursename\");\n    PrintWriter pw = response.getWriter();\n    response.setContentType(\"text/plain\");\n    if (request.isUserInRole(\"admin\") || request.isUserInRole(\"responsible\")) {\n      try {\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        Connection c = new SqlConnectionService().getConnection();\n        logger.info(\"Closing course - \" + course + \" , request by: \" + request.getRemoteUser());\n        String statement = \"UPDATE courses SET active = FALSE WHERE coursename = ?;\";\n        PreparedStatement stmt = c.prepareStatement(statement);\n        stmt.setString(1, course);\n        stmt.executeUpdate();\n        stmt.close();\n        statement = \"UPDATE tasks SET active = FALSE WHERE coursename = ?;\";\n        stmt = c.prepareStatement(statement);\n        stmt.setString(1, course);\n        stmt.executeUpdate();\n        stmt.close();\n        statement = \"SELECT id FROM tasks WHERE coursename = ?;\";\n        stmt = c.prepareStatement(statement);\n        stmt.setString(1, course);\n        ResultSet rs = stmt.executeQuery();\n        statement = \"UPDATE attempt SET active = FALSE WHERE task = ?;\";\n        PreparedStatement stmt2 = c.prepareStatement(statement);\n        while (rs.next()) {\n          stmt2.setInt(1, rs.getInt(1));\n          stmt2.addBatch();\n        }\n        stmt2.executeBatch();\n        stmt2.close();\n        stmt.close();\n        c.close();\n        logger.info(\"Success! closed course - \" + course + \".\");\n        pw.write(\"Kursus on arhiveeritud\");\n      } catch (ClassNotFoundException e) {\n        logger.error(\"ClassNotFoundException\", e);\n        pw.write(\"Midagi läks valesti, võtke ühendust administraatoriga.\");\n      } catch (SQLException e) {\n        logger.error(\"SQLException\", e);\n        pw.write(\"Midagi läks valesti, võtke ühendust administraatoriga.\");\n      }\n\n    } else {\n      logger.warn(\"Unauthorized access, request by: \" + request.getRemoteUser());\n      pw.write(\"Teil pole volitusi seda toimingut teha\");\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6349, "initialization": ["String s = WcstServer.Transaction(String)", "PrintWriter printWriter = new PrintWriter(*)"], "initializationStart": [822, 868], "initializationEnd": [850, 911], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "new ServletException(String,*)"], "tryExpressionStart": 583, "tryExpressionEnd": 587, "tryBlockStart": 583, "tryBlockEnd": 1200, "catchExpressionStart": 1083, "catchExpressionEnd": 1103, "catchBlockStart": 1083, "catchBlockEnd": 1200, "exceptionHandlingCallStart": [1111, 1145], "exceptionHandlingCallEnd": [1130, 1193], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 923, "focalAPIEnd": 943, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [955], "useEnd": [966], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hholzgra/rasdaman/tree/master/applications/petascope9/src/main/java/petascope/wcst/server/servlet/wcstServlet.java", "rawCode": "  /**\n   * Handles the HTTP <code>POST</code> method.\n   *\n   * @param request wcstServlet request\n   * @param response wcstServlet response\n   * @throws ServletException if a wcstServlet-specific error occurs\n   * @throws IOException if an I/O error occurs\n   */\n  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    // Select the operation\n    int op = -1;\n\n    if (request.getParameter(\"TransactionXML\") != null) {\n      op = 4;\n    }\n\n    // Convert the WCS request into a WCPS request\n    try {\n      // initialize WebService operation arguments here\n      String inputXml, outputXml;\n      PrintWriter out;\n\n      switch (op) {\n        case 4:\n          inputXml = request.getParameter(\"TransactionXML\");\n          outputXml = server.Transaction(inputXml);\n          out = new PrintWriter(response.getOutputStream());\n          out.write(outputXml);\n          out.flush();\n\n          break;\n        default:\n          throw new Exception(\"No valid operation specified !\");\n      }\n\n    } catch (Exception e) {\n      e.printStackTrace();\n\n      throw new ServletException(\"WCS-T servlet error !\", e);\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6350, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "null!=s && !(null==printWriter)", "guardType": "IF {", "guardExpressionStart": 234, "guardExpressionEnd": 257, "guardBlockStart": 234, "guardBlockEnd": 279, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 447, "focalAPIEnd": 470, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [495, 570, 611], "useEnd": [519, 591, 632], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eea/eea.eunis/tree/master/web/src/main/java/ro/finsiel/eunis/reports/AbstractTSVReport.java", "rawCode": "  /**\n   * Write a single row of data into the file.\n   *\n   * @param data data to be written, resembling the row...\n   * @throws IOException When I/O exception occurrs\n   */\n  public void writeRow(List data) throws IOException {\n    if (null == fileStream) {\n      return;\n    }\n    if (null == data) {\n      return;\n    }\n    for (int i = 0; i < data.size(); i++) {\n      String _data = (String) data.get(i);\n\n      if (null != _data) {\n        fileStream.write(_data);\n      } else {\n        fileStream.write(\"null\");\n      }\n      if (i < data.size() - 1) {\n        fileStream.write(TAB);\n      }\n    }\n    fileStream.write(EOL);\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6351, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-0-5-tagsok/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6352, "initialization": ["PrintWriter printWriter = new PrintWriter(*)"], "initializationStart": [170], "initializationEnd": [280], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 286, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()"], "useStart": [313], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/crs4/seal/tree/master/tests/it/crs4/seal/common/TestSamInputFormat.java", "rawCode": "  @Test\n  public void testGzCompressedInput() throws IOException {\n    // write gzip-compressed data\n    GzipCodec codec = new GzipCodec();\n    PrintWriter out =\n        new PrintWriter(\n            new BufferedOutputStream(codec.createOutputStream(new FileOutputStream(tempGz))));\n    out.write(twoRecords);\n    out.close();\n\n    // now try to read it\n    split = new FileSplit(new Path(tempGz.toURI().toString()), 0, twoRecords.length(), null);\n\n    SamRecordReader reader = new SamRecordReader();\n    reader.initialize(split, Utils.getTaskAttemptContext(conf));\n\n    boolean retval = reader.nextKeyValue();\n    assertTrue(retval);\n    assertEquals(\"Read/2\", reader.getCurrentValue().getAnyRead().getName());\n\n    retval = reader.nextKeyValue();\n    assertTrue(retval);\n    assertEquals(\"Read/1\", reader.getCurrentValue().getAnyRead().getName());\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6353, "initialization": ["String s = format(Message,boolean)"], "initializationStart": [418], "initializationEnd": [452], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["s.replace(String,String)", "s.replace(String,String)"], "configurationStart": [237, 418], "configurationEnd": [298, 479], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 563, "focalAPIEnd": 609, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.format(String,String)", "printWriter.format(String)", "printWriter.format(String)", "printWriter.format(String,String)", "printWriter.format(String,String)", "printWriter.format(String)", "printWriter.format(String)", "printWriter.format(String)", "printWriter.format(String)", "printWriter.write(String)"], "useStart": [621, 1335, 1393, 2193, 2220, 2296, 2390, 2441, 2567, 2646, 2697, 2735, 2784, 2906], "useEnd": [645, 1381, 1417, 2210, 2286, 2380, 2431, 2528, 2636, 2687, 2725, 2774, 2802, 2954], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/sdk/tree/master/eclipse/plugins/com.android.ide.eclipse.gldebugger/src/com/android/ide/eclipse/gldebugger/CodeGen.java", "rawCode": "  /** return true if msg was a texture upload */\n  private boolean codeGenTextureUpload(final Message msg, final boolean replaceCopy) {\n    String s = null;\n    switch (msg.getFunction()) {\n      case glCompressedTexImage2D:\n        s = MessageFormatter.format(msg, true).replace(\"arg7\", \"texData\");\n        break;\n      case glCompressedTexSubImage2D:\n      case glTexImage2D:\n      case glTexSubImage2D:\n        s = MessageFormatter.format(msg, true).replace(\"arg8\", \"texData\");\n        break;\n      case glCopyTexImage2D:\n        if (!replaceCopy) {\n          code.write(MessageFormatter.format(msg, true));\n          code.write(\";CHKERR;\\n\");\n          return true;\n        }\n        assert msg.getArg2() == msg.getPixelFormat(); // TODO\n        s = \"//\" + MessageFormatter.format(msg, true) + \"\\n\";\n        s +=\n            String.format(\n                \"glTexImage2D(%s, %d, %s, %d, %d, %d, %s, %s, texData);CHKERR;\",\n                GLEnum.valueOf(msg.getArg0()),\n                msg.getArg1(),\n                GLEnum.valueOf(msg.getArg2()),\n                msg.getArg5(),\n                msg.getArg6(),\n                msg.getArg7(),\n                GLEnum.valueOf(msg.getPixelFormat()),\n                GLEnum.valueOf(msg.getPixelType()));\n        break;\n      case glCopyTexSubImage2D:\n        if (!replaceCopy) {\n          code.write(MessageFormatter.format(msg, true));\n          code.write(\";CHKERR;\\n\");\n          return true;\n        }\n        // FIXME: check the texture format & type, and convert\n        s = \"//\" + MessageFormatter.format(msg, true) + \"\\n\";\n        s +=\n            String.format(\n                \"glTexSubImage2D(%s, %d, %d, %d, %d, %d, %s, %s, texData);CHKERR;\",\n                GLEnum.valueOf(msg.getArg0()),\n                msg.getArg1(),\n                msg.getArg2(),\n                msg.getArg3(),\n                msg.getArg6(),\n                msg.getArg7(),\n                GLEnum.valueOf(msg.getPixelFormat()),\n                GLEnum.valueOf(msg.getPixelType()));\n        break;\n      default:\n        return false;\n    }\n\n    if (msg.hasData()) {\n      final byte[] data = MessageProcessor.lzfDecompressChunks(msg.getData());\n      try {\n        code.write(\"{\\n\");\n        code.format(\" void * texData = malloc(%d);CHKERR;\\n\", data.length);\n        code.format(\" FILE * texFile = fopen(\\\"/sdcard/frame_data.bin\\\", \\\"rb\\\");CHKERR;\\n\");\n        code.format(\" assert(texFile);CHKERR;\\n\");\n        code.format(\" fseek(texFile, %d, SEEK_SET);CHKERR;\\n\", dataOut.getChannel().position());\n        dataOut.write(data);\n        code.format(\" fread(texData, %d, 1, texFile);CHKERR;\\n\", data.length);\n        code.format(\" fclose(texFile);CHKERR;\\n\");\n        code.format(\" \" + s + \";\\n\");\n        code.format(\" free(texData);CHKERR;\\n\");\n        code.format(\"}\\n\");\n      } catch (IOException e) {\n        e.printStackTrace();\n        assert false;\n      }\n    } else code.write(s.replace(\"texData\", \"NULL\") + \";\\n\");\n    return true;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6354, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 193, "focalAPIEnd": 232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.println(String)", "printWriter.flush()"], "useStart": [290, 399, 460], "useEnd": [323, 427, 477], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GraffitiResearchLabGermany/bombIR/tree/master/Libraries/oscP5/src/netP5/AbstractTcpClient.java", "rawCode": "  public void send(final String theString) {\n    if (_myMode == MODE_STREAM) {\n      send(theString.getBytes());\n    } else {\n      switch (_myMode) {\n        case (MODE_TERMINATED):\n          _myOutput.write(theString + TERMINATOR);\n          break;\n        case (MODE_NEWLINE):\n          _myOutput.write(theString + \"\\n\");\n          break;\n        case (MODE_READLINE):\n        default:\n          _myOutput.println(theString);\n          break;\n      }\n      _myOutput.flush();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6355, "initialization": ["String s = getString(String)", "PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [565, 623], "initializationEnd": [597, 643], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 651, "focalAPIEnd": 669, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()", "closeStream(printWriter)", "printWriter.write(String)", "printWriter.flush()", "closeStream(printWriter)"], "useStart": [677, 696, 6051, 6081, 6104], "useEnd": [688, 720, 6069, 6092, 6128], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jior/wechat/tree/master/src/main/java/com/glaf/wechat/website/springmvc/WxPublicContentController.java", "rawCode": "  @ResponseBody\n  @RequestMapping(\"/list/{categoryId}\")\n  public void list(\n      @PathVariable(\"categoryId\") Long categoryId,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws IOException {\n    request.setCharacterEncoding(\"UTF-8\");\n    response.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"text/html;charset=UTF-8\");\n    String cacheKey = \"website_list_\" + categoryId;\n    WxCategory category = wxCategoryService.getWxCategory(categoryId);\n    if (CacheFactory.getString(cacheKey) != null) {\n      String content = CacheFactory.getString(cacheKey);\n      PrintWriter out = response.getWriter();\n      out.write(content);\n      out.flush();\n      IOUtils.closeStream(out);\n\n      try {\n        WxLog bean = new WxLog();\n        if (category != null) {\n          bean.setActorId(category.getCreateBy());\n          bean.setAccountId(category.getAccountId());\n        }\n        bean.setCreateTime(new Date());\n        bean.setFlag(5001);\n        bean.setIp(RequestUtils.getIPAddress(request));\n        bean.setOperate(String.valueOf(categoryId));\n        WxLogFactory.create(bean);\n      } catch (Exception ex) {\n      }\n\n      return;\n    }\n\n    if (category != null) {\n      WxUserTemplate wxUserTemplate = wxUserTemplateService.getWxUserTemplate(categoryId, \"1\");\n      if (wxUserTemplate == null\n          || wxUserTemplate.getTemplateId() == null\n          || wxUserTemplate.getTemplateId() == 0) {\n        wxUserTemplate = wxUserTemplateService.getWxUserTemplate(0L, 0L, \"1\");\n      }\n      if (wxUserTemplate != null) {\n        Long templateId = wxUserTemplate.getTemplateId();\n        boolean cache = conf.getBoolean(\"wx_template_cache\", true);\n        WxTemplate template = wxTemplateService.getWxTemplate(templateId, cache);\n        if (template != null && template.getContent() != null) {\n          String serviceUrl = WechatUtils.getServiceUrl(request);\n          Map<String, Object> context = RequestUtils.getParameterMap(request);\n          String actorId = category.getCreateBy();\n          User user = IdentityFactory.getUser(actorId);\n\n          context.put(\"userId\", String.valueOf(user.getId()));\n          context.put(\"accountId\", category.getAccountId());\n          context.put(\"actorId\", category.getCreateBy());\n          context.put(\"actorIdMD5Hex\", DigestUtils.md5Hex(category.getCreateBy()));\n          context.put(\"template\", template);\n          context.put(\"contextPath\", request.getContextPath());\n          context.put(\"serviceUrl\", serviceUrl);\n          context.put(\"serverUrl\", serviceUrl);\n          context.put(\"pageSize\", 1);\n          context.put(\"pageNo\", 1);\n\n          Map<String, Object> params = RequestUtils.getParameterMap(request);\n          int start = 0;\n          int limit = 10;\n          int pageNo = ParamUtils.getInt(params, \"pageNo\");\n          start = (pageNo - 1) * limit;\n          if (start < 0) {\n            start = 0;\n          }\n          if (limit <= 0) {\n            limit = Paging.DEFAULT_PAGE_SIZE;\n          }\n          if (pageNo < 1) {\n            pageNo = 1;\n          }\n          context.put(\"pageNo\", pageNo);\n\n          WxContentQuery query = new WxContentQuery();\n          query.accountId(category.getAccountId());\n          query.categoryId(categoryId);\n          query.status(1);\n          query.type(\"P\");\n\n          int total = wxContentService.getWxContentCountByQueryCriteria(query);\n          if (total > 0) {\n            List<WxContent> list =\n                wxContentService.getWxContentsByQueryCriteria(start, limit, query);\n            context.put(\"contents\", list);\n            context.put(\"pageSize\", (total / limit + 1));\n          }\n\n          WxContentQuery query2 = new WxContentQuery();\n          query2.accountId(category.getAccountId());\n          query2.categoryId(categoryId);\n          query2.type(\"PPT\");\n          query2.status(1);\n\n          List<WxContent> list = wxContentService.list(query2);\n          if (list != null && !list.isEmpty()) {\n            logger.debug(\" ppt size:\" + list.size());\n            for (WxContent c : list) {\n              if (StringUtils.isNotEmpty(c.getUrl())) {\n                if (StringUtils.startsWith(c.getUrl(), \"/website/wx/\")) {\n                  c.setUrl(serviceUrl + c.getUrl());\n                }\n              }\n            }\n            context.put(\"pptList\", list);\n          }\n\n          context.put(\"category\", category);\n\n          WxCategoryQuery query3 = new WxCategoryQuery();\n          query3.accountId(category.getAccountId());\n          query3.parentId(0L);\n          query3.type(\"category\");\n          query3.locked(0);\n          query3.indexShow(1);\n          List<WxCategory> list3 = wxCategoryService.list(query3);\n          if (list3 != null && !list3.isEmpty()) {\n            for (WxCategory cat : list3) {\n              if (StringUtils.isNotEmpty(cat.getUrl())) {\n                if (StringUtils.startsWith(cat.getUrl(), \"/website/wx/\")) {\n                  cat.setUrl(serviceUrl + cat.getUrl());\n                }\n              }\n            }\n            context.put(\"categories\", list3);\n          }\n\n          WxCategoryQuery query4 = new WxCategoryQuery();\n          query4.accountId(category.getAccountId());\n          query4.parentId(category.getId());\n          query4.type(\"category\");\n          query4.locked(0);\n          query4.indexShow(1);\n          List<WxCategory> list4 = wxCategoryService.list(query4);\n          if (list4 != null && !list4.isEmpty()) {\n            for (WxCategory cat : list4) {\n              if (StringUtils.isNotEmpty(cat.getUrl())) {\n                if (StringUtils.startsWith(cat.getUrl(), \"/website/wx/\")) {\n                  cat.setUrl(serviceUrl + cat.getUrl());\n                }\n              }\n            }\n            context.put(\"subCategories\", list4);\n          }\n\n          String content = TemplateUtils.process(context, template.getContent());\n          if (cache) {\n            CacheFactory.put(cacheKey, content);\n          }\n          PrintWriter out = response.getWriter();\n          out.write(content);\n          out.flush();\n          IOUtils.closeStream(out);\n\n          try {\n            WxLog bean = new WxLog();\n            bean.setActorId(actorId);\n            bean.setAccountId(category.getAccountId());\n            bean.setCreateTime(new Date());\n            bean.setFlag(5002);\n            bean.setIp(RequestUtils.getIPAddress(request));\n            bean.setOperate(String.valueOf(categoryId));\n            WxLogFactory.create(bean);\n          } catch (Exception ex) {\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6356, "initialization": ["String s = loadFile(*)", "PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [148, 368], "initializationEnd": [196, 392], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 458, "focalAPIEnd": 492, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()", "printWriter.close()"], "useStart": [498, 515], "useEnd": [509, 526], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/miracee/rasdaman/tree/master/applications/petascope/src/main/java/petascope/wps/server/WpsServer.java", "rawCode": "  public void GetCapabilities(HttpServletResponse httpResponse)\n      throws URISyntaxException, IOException {\n    String GetCapabilitiesResponse = loadFile(ConfigManager.WPS_GET_CAPABILITIES_URI);\n    LOG.info(\"Executing operation GetCapabilities...\");\n    System.out.println(\"GetCapabilities Response is \" + GetCapabilitiesResponse);\n    PrintWriter out;\n\n    out = httpResponse.getWriter();\n    httpResponse.setContentType(\"text/xml; charset=utf-8\");\n    out.write(GetCapabilitiesResponse);\n    out.flush();\n    out.close();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6357, "initialization": ["int len = length()"], "initializationStart": [3565], "initializationEnd": [3584], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.println()", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.println()", "printWriter.print(char)"], "configurationStart": [615, 796, 1017, 1055, 1107, 3272], "configurationEnd": [627, 834, 1031, 1087, 1119, 3285], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 3602, "focalAPIEnd": 3630, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.print(String)", "printWriter.print(String)", "printWriter.write(char[],int,int)", "printWriter.println()", "printWriter.write(char)", "printWriter.write(char[],int,int)", "printWriter.println()", "printWriter.print(String)", "printWriter.print(String)", "printWriter.write(char[],int,int)", "printWriter.print(String)", "printWriter.print(char)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.write(char[],int,int)", "printWriter.println(char)", "printWriter.write(char)", "printWriter.write(char[],int,int)", "printWriter.println(char)"], "useStart": [3648, 3726, 4043, 4091, 4227, 4268, 4328, 4626, 4699, 4832, 4878, 4916, 4987, 5095, 5222, 5270, 5382, 5409, 5473], "useEnd": [3668, 3746, 4071, 4103, 4240, 4304, 4340, 4639, 4713, 4860, 4898, 4929, 5007, 5109, 5250, 5285, 5395, 5449, 5488], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/olap4j/olap4j/tree/master/src/org/olap4j/layout/RectangularCellSetFormatter.java", "rawCode": "  /**\n   * Formats a two-dimensional page.\n   *\n   * @param cellSet Cell set\n   * @param pw Print writer\n   * @param pageCoords Coordinates of page [page, chapter, section, ...]\n   * @param columnsAxis Columns axis\n   * @param columnsAxisInfo Description of columns axis\n   * @param rowsAxis Rows axis\n   * @param rowsAxisInfo Description of rows axis\n   */\n  private void formatPage(\n      CellSet cellSet,\n      PrintWriter pw,\n      int[] pageCoords,\n      CellSetAxis columnsAxis,\n      AxisInfo columnsAxisInfo,\n      CellSetAxis rowsAxis,\n      AxisInfo rowsAxisInfo) {\n    if (pageCoords.length > 0) {\n      pw.println();\n      for (int i = pageCoords.length - 1; i >= 0; --i) {\n        int pageCoord = pageCoords[i];\n        final CellSetAxis axis = cellSet.getAxes().get(2 + i);\n        pw.print(axis.getAxisOrdinal() + \": \");\n        final Position position = axis.getPositions().get(pageCoord);\n        int k = -1;\n        for (Member member : position.getMembers()) {\n          if (++k > 0) {\n            pw.print(\", \");\n          }\n          pw.print(member.getUniqueName());\n        }\n        pw.println();\n      }\n    }\n    // Figure out the dimensions of the blank rectangle in the top left\n    // corner.\n    final int yOffset = columnsAxisInfo.getWidth();\n    final int xOffsset = rowsAxisInfo.getWidth();\n\n    // Populate a string matrix\n    Matrix matrix =\n        new Matrix(\n            xOffsset + (columnsAxis == null ? 1 : columnsAxis.getPositions().size()),\n            yOffset + (rowsAxis == null ? 1 : rowsAxis.getPositions().size()));\n\n    // Populate corner\n    for (int x = 0; x < xOffsset; x++) {\n      for (int y = 0; y < yOffset; y++) {\n        matrix.set(x, y, \"\", false, x > 0);\n      }\n    }\n\n    // Populate matrix with cells representing axes\n    // noinspection SuspiciousNameCombination\n    populateAxis(matrix, columnsAxis, columnsAxisInfo, true, xOffsset);\n    populateAxis(matrix, rowsAxis, rowsAxisInfo, false, yOffset);\n\n    // Populate cell values\n    for (Cell cell : cellIter(pageCoords, cellSet)) {\n      final List<Integer> coordList = cell.getCoordinateList();\n      int x = xOffsset;\n      if (coordList.size() > 0) {\n        x += coordList.get(0);\n      }\n      int y = yOffset;\n      if (coordList.size() > 1) {\n        y += coordList.get(1);\n      }\n      matrix.set(x, y, cell.getFormattedValue(), true, false);\n    }\n\n    int[] columnWidths = new int[matrix.width];\n    int widestWidth = 0;\n    for (int x = 0; x < matrix.width; x++) {\n      int columnWidth = 0;\n      for (int y = 0; y < matrix.height; y++) {\n        MatrixCell cell = matrix.get(x, y);\n        if (cell != null) {\n          columnWidth = Math.max(columnWidth, cell.value.length());\n        }\n      }\n      columnWidths[x] = columnWidth;\n      widestWidth = Math.max(columnWidth, widestWidth);\n    }\n\n    // Create a large array of spaces, for efficient printing.\n    char[] spaces = new char[widestWidth + 1];\n    Arrays.fill(spaces, ' ');\n    char[] equals = new char[widestWidth + 1];\n    Arrays.fill(equals, '=');\n    char[] dashes = new char[widestWidth + 3];\n    Arrays.fill(dashes, '-');\n\n    if (compact) {\n      for (int y = 0; y < matrix.height; y++) {\n        for (int x = 0; x < matrix.width; x++) {\n          if (x > 0) {\n            pw.print(' ');\n          }\n          final MatrixCell cell = matrix.get(x, y);\n          final int len;\n          if (cell != null) {\n            if (cell.sameAsPrev) {\n              len = 0;\n            } else {\n              if (cell.right) {\n                int padding = columnWidths[x] - cell.value.length();\n                pw.write(spaces, 0, padding);\n                pw.print(cell.value);\n                continue;\n              }\n              pw.print(cell.value);\n              len = cell.value.length();\n            }\n          } else {\n            len = 0;\n          }\n          if (x == matrix.width - 1) {\n            // at last column; don't bother to print padding\n            break;\n          }\n          int padding = columnWidths[x] - len;\n          pw.write(spaces, 0, padding);\n        }\n        pw.println();\n        if (y == yOffset - 1) {\n          for (int x = 0; x < matrix.width; x++) {\n            if (x > 0) {\n              pw.write(' ');\n            }\n            pw.write(equals, 0, columnWidths[x]);\n          }\n          pw.println();\n        }\n      }\n    } else {\n      for (int y = 0; y < matrix.height; y++) {\n        for (int x = 0; x < matrix.width; x++) {\n          final MatrixCell cell = matrix.get(x, y);\n          final int len;\n          if (cell != null) {\n            if (cell.sameAsPrev) {\n              pw.print(\" \");\n              len = 0;\n            } else {\n              pw.print(\"| \");\n              if (cell.right) {\n                int padding = columnWidths[x] - cell.value.length();\n                pw.write(spaces, 0, padding);\n                pw.print(cell.value);\n                pw.print(' ');\n                continue;\n              }\n              pw.print(cell.value);\n              len = cell.value.length();\n            }\n          } else {\n            pw.print(\"| \");\n            len = 0;\n          }\n          int padding = columnWidths[x] - len;\n          ++padding;\n          pw.write(spaces, 0, padding);\n        }\n        pw.println('|');\n        if (y == yOffset - 1) {\n          for (int x = 0; x < matrix.width; x++) {\n            pw.write('+');\n            pw.write(dashes, 0, columnWidths[x] + 2);\n          }\n          pw.println('+');\n        }\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6358, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [392], "initializationEnd": [407], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 362, "tryExpressionEnd": 366, "tryBlockStart": 362, "tryBlockEnd": 3594, "catchExpressionStart": 3540, "catchExpressionEnd": 3560, "catchBlockStart": 3540, "catchBlockEnd": 3594, "exceptionHandlingCallStart": [3568], "exceptionHandlingCallEnd": [3587], "configuration": ["printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)"], "configurationStart": [1404, 1618, 1651, 1746], "configurationEnd": [1427, 1635, 1699, 1762], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 3032, "focalAPIEnd": 3091, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)", "printWriter.append(String)"], "useStart": [3108, 3197, 3392, 3420, 3507], "useEnd": [3157, 3220, 3408, 3468, 3523], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mduduzik/flowframe/tree/master/editors/oryx/frontend/src/main/java/org/oryxeditor/server/StencilSetJSONPServlet.java", "rawCode": "  protected void doGet(HttpServletRequest req, HttpServletResponse res)\n      throws ServletException, IOException {\n\n    res.setContentType(\"application/json\");\n\n    String resource = req.getParameter(\"resource\");\n    String type = req.getParameter(\"type\");\n    String jsonp = req.getParameter(\"jsonp\");\n    String embedSvg = req.getParameter(\"embedsvg\");\n\n    try {\n      PrintWriter out = res.getWriter();\n\n      // also allow to request stencil set extensions (specified by namespace)\n      if (type != null && type.equals(\"ssextension\")) {\n\n        File extensionsFile =\n            new File(getServletContext().getRealPath(\"/stencilsets/extensions/extensions.json\"));\n        BufferedReader reader = new BufferedReader(new FileReader(extensionsFile));\n        String line = null;\n        String jsonString = \"\";\n        while ((line = reader.readLine()) != null) {\n          jsonString += line;\n        }\n        JSONObject jsonObj = new JSONObject(jsonString);\n        JSONArray extArr = jsonObj.getJSONArray(\"extensions\");\n        for (int i = 0; i < extArr.length(); i++) {\n          if (extArr.getJSONObject(i).getString(\"namespace\").equals(resource)) {\n            String definition = extArr.getJSONObject(i).getString(\"definition\");\n            File jsonFile =\n                new File(getServletContext().getRealPath(\"/stencilsets/extensions/\" + definition));\n            if (jsonp != null) out.append(jsonp + \"(\");\n            BufferedReader reader2 = new BufferedReader(new FileReader(jsonFile));\n            String line2 = null;\n            while ((line2 = reader2.readLine()) != null) {\n              out.append(line2);\n              out.append(System.getProperty(\"line.separator\"));\n            }\n            if (jsonp != null) out.append(\");\");\n          }\n        }\n\n      } else { // standard stencil set requested (specified by path)\n\n        resource.replace(\"..\", \"\"); // don't allow to leave stencilset dir\n\n        if (resource.startsWith(\"/\")) resource = resource.substring(1);\n\n        if (resource.startsWith(\n            \"stencilsets/\")) // ignore stencilset/ at beginning of path reference\n        resource = resource.substring(12);\n\n        File jsonFile;\n        if (embedSvg != null && embedSvg.equals(\"true\")) { // SVG embedding\n          jsonFile = new File(getServletContext().getRealPath(\"/stencilsets/\" + resource));\n        } else { // no SVG embedding (default)\n          // try to find stencilset nosvg representation\n          int pIdx = resource.lastIndexOf('.');\n          jsonFile =\n              new File(\n                  getServletContext()\n                      .getRealPath(\n                          \"/stencilsets/\"\n                              + resource.substring(0, pIdx)\n                              + \"-nosvg\"\n                              + resource.substring(pIdx)));\n          if (!jsonFile.exists())\n            jsonFile = new File(getServletContext().getRealPath(\"/stencilsets/\" + resource));\n        }\n\n        if (!jsonFile.exists()) {\n          if (jsonp != null) out.write(jsonp + \"({ \\\"error\\\":\\\"resource not found\\\" })\");\n          else out.write(\"{ \\\"error\\\":\\\"resource not found\\\" }\");\n        }\n\n        if (jsonp != null) out.append(jsonp + \"(\");\n\n        BufferedReader reader = new BufferedReader(new FileReader(jsonFile));\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n          out.append(line);\n          out.append(System.getProperty(\"line.separator\"));\n        }\n        if (jsonp != null) out.append(\");\");\n      }\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6359, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [668], "initializationEnd": [688], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 694, "focalAPIEnd": 1098, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["build(printWriter)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.close()"], "useStart": [1123, 1205, 1437, 1587, 1621], "useEnd": [1177, 1416, 1575, 1615, 1631], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.12/src/om/devservlet/DevServlet.java", "rawCode": "  private void handleBuild(\n      String sRemainingPath, HttpServletRequest request, HttpServletResponse response)\n      throws Exception {\n    resetQuestion();\n\n    String sQuestion = sRemainingPath.replaceAll(\"^([^/]*)/?.*$\", \"$1\");\n    String sAfter = sRemainingPath.replaceAll(\"^[^/]*/?(.*)$\", \"$1\");\n\n    if (!sAfter.equals(\"\")) {\n      sendError(\n          request,\n          response,\n          HttpServletResponse.SC_NOT_FOUND,\n          \"Not found\",\n          \"Don't know how to handle request: \" + sRemainingPath,\n          null);\n      return;\n    }\n    response.setContentType(\"text/html\");\n    response.setCharacterEncoding(\"UTF-8\");\n    PrintWriter pw = response.getWriter();\n    pw.write(\n        \"<html>\"\n            + \"<head>\"\n            + \"<title>Building \"\n            + sQuestion\n            + \"</title>\"\n            + \"<style type='text/css'>\"\n            + \"body { font: 10px Andale Mono, Lucida Console, monospace; }\"\n            + \".out,.err { white-space:pre; }\"\n            + \".err { color:#900; }\"\n            + \"</style>\"\n            + \"</head>\"\n            + \"<body>\");\n    boolean bSuccess = qdQuestions.getQuestionDefinition(sQuestion).build(pw);\n    if (bSuccess) {\n      pw.println(\n          \"<script type='text/javascript'>\\n\"\n              + \"var re=/^(.*)\\\\/build\\\\/(.*)$/;\\n\"\n              + \"location.href=location.href.replace(re,'$1/run/$2');\\n\"\n              + \"</script>\");\n    } else {\n      pw.println(\n          \"<p>[<a href='javascript:location.reload()'>Rebuild</a>] &nbsp; [\"\n              + \"<a href='../../'>List</a>]</p>\");\n    }\n    pw.println(\"</body></html>\");\n    pw.close();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6360, "initialization": ["PrintWriter printWriter = getPrintWriter()", "String s = getTree(String,List<SysOrg>)"], "initializationStart": [136, 374], "initializationEnd": [157, 395], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 401, "focalAPIEnd": 416, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/system/action/OrgAction.java", "rawCode": "  /**\n   * 读取指定节点下的组，以树节点形式返回json。\n   *\n   * @return\n   */\n  public String loadOrgTreeData() throws IOException {\n    PrintWriter out = this.getPrintWriter();\n    // 获得父节点为nodeId的子节点\n    SysOrgExample example = new SysOrgExample();\n    example.createCriteria().andParentidEqualTo(nodeId);\n    List<SysOrg> orgs = orgService.selectByWhereNotPage(example);\n\n    String tree = getTree(nodeId, orgs);\n    out.write(tree);\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6361, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 131, "focalAPIEnd": 148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jamesnvc/emacs.d/tree/master/modes/jde-svn/java/src/jde/juci/LispWriter.java", "rawCode": "  public void writeQuoted(Quoted q) {\n    boolean changeQuote = !inQuote;\n\n    if (changeQuote) {\n      inQuote = true;\n    }\n\n    output.write(\"'\");\n    writeUnknown(q.getQuoted());\n\n    if (changeQuote) {\n      inQuote = false;\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6362, "initialization": ["PrintWriter printWriter = new PrintWriter(*,boolean)"], "initializationStart": [1160], "initializationEnd": [1213], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["getMessage()", "error(*,*)"], "tryExpressionStart": 1030, "tryExpressionEnd": 1034, "tryBlockStart": 1030, "tryBlockEnd": 2101, "catchExpressionStart": 1711, "catchExpressionEnd": 1733, "catchBlockStart": 1711, "catchBlockEnd": 1864, "exceptionHandlingCallStart": [1837, 1827], "exceptionHandlingCallEnd": [1851, 1855], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1485, "focalAPIEnd": 1691, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()", "printWriter.close()"], "useStart": [1912, 1935], "useEnd": [1923, 1946], "hasFinally": 1, "cleanUpCall": ["PrintWriter.flush()", "PrintWriter.close()"], "finallyExpressionStart": 1865, "finallyExpressionEnd": 1873, "finallyBlockStart": 1865, "finallyBlockEnd": 2101, "cleanUpCallStart": [1912, 1935], "cleanUpCallEnd": [1923, 1946], "url": "https://github.com/Flowdalic/openfire/tree/master/src/java/org/jivesoftware/openfire/FlashCrossDomainHandler.java", "rawCode": "  private void startServer() throws Exception {\n    if (!JiveGlobals.getBooleanProperty(\"flash.crossdomain.enabled\", true)) {\n      Log.debug(\"Flash cross domain listener is disabled\");\n      return;\n    }\n\n    int port = JiveGlobals.getIntProperty(\"flash.crossdomain.port\", 5229);\n    try {\n      // Listen on a specific network interface if it has been set.\n      String interfaceName = JiveGlobals.getXMLProperty(\"network.interface\");\n      InetAddress bindInterface = null;\n      if (interfaceName != null) {\n        if (interfaceName.trim().length() > 0) {\n          bindInterface = InetAddress.getByName(interfaceName);\n        }\n      }\n      serverSocket = new ServerSocket(port, -1, bindInterface);\n      Log.debug(\"Flash cross domain is listening on \" + interfaceName + \" on port \" + port);\n    } catch (IOException e) {\n      Log.error(\"Could not listen on port: \" + port, e);\n      return;\n    }\n\n    while (true) {\n      Socket clientSocket = null;\n      PrintWriter out = null;\n      BufferedReader in = null;\n      try {\n        clientSocket = serverSocket.accept();\n        clientSocket.setSoTimeout(10000); // 10 second timeout\n\n        out = new PrintWriter(clientSocket.getOutputStream(), true);\n        in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n\n        String request = \"\";\n        request = read(in);\n\n        if (request.contains(\"<policy-file-request/>\")\n            || request.contains(\"GET /crossdomain.xml\")) {\n          out.write(\n              CROSS_DOMAIN_TEXT\n                  + XMPPServer.getInstance().getConnectionManager().getClientListenerPort()\n                  + CROSS_DOMAIN_END_TEXT\n                  + \"\\u0000\");\n        }\n      } catch (IOException e) {\n        if (XMPPServer.getInstance().isShuttingDown()) {\n          break;\n        }\n        Log.error(e.getMessage(), e);\n      } finally {\n        if (out != null) {\n          out.flush();\n          out.close();\n        }\n        if (in != null) {\n          in.close();\n        }\n        if (clientSocket != null) {\n          clientSocket.close();\n        }\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6363, "initialization": ["PrintWriter printWriter = new PrintWriter(ByteArrayOutputStream,boolean)"], "initializationStart": [386], "initializationEnd": [413], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.println(String)"], "configurationStart": [419], "configurationEnd": [445], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 451, "focalAPIEnd": 474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [674], "useEnd": [684], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/luni/src/test/java/tests/api/java/io/PrintWriterTest.java", "rawCode": "  /** @tests java.io.PrintWriter#PrintWriter(java.io.OutputStream, boolean) */\n  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"PrintWriter\",\n    args = {java.io.OutputStream.class, boolean.class}\n  )\n  public void test_ConstructorLjava_io_OutputStreamZ() {\n    // Test for method java.io.PrintWriter(java.io.OutputStream, boolean)\n    String s;\n    pw = new PrintWriter(baos, true);\n    pw.println(\"Random Chars\");\n    pw.write(\"Hello World\");\n    try {\n      br = new BufferedReader(new Support_StringReader(baos.toString()));\n      s = br.readLine();\n      assertTrue(\"Incorrect string written/read: \" + s, s.equals(\"Random Chars\"));\n      pw.flush();\n      br = new BufferedReader(new Support_StringReader(baos.toString()));\n      s = br.readLine();\n      assertTrue(\"Incorrect string written/read: \" + s, s.equals(\"Random Chars\"));\n      s = br.readLine();\n      assertTrue(\"Incorrect string written/read: \" + s, s.equals(\"Hello World\"));\n    } catch (IOException e) {\n      fail(\"IOException during test : \" + e.getMessage());\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6364, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 453, "focalAPIEnd": 511, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [602, 626], "useEnd": [620, 640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.9.0/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  void returnPressed() {\n    Document doc = getDocument();\n    int len = doc.getLength();\n    Segment segment = new Segment();\n    try {\n      synchronized (doc) {\n        doc.getText(outputMark, len - outputMark, segment);\n      }\n    } catch (javax.swing.text.BadLocationException ignored) {\n      ignored.printStackTrace();\n    }\n    if (segment.count > 0) {\n      history.addElement(segment.toString());\n    }\n    historyIndex = history.size();\n    inPipe.write(segment.array, segment.offset, segment.count);\n    append(\"\\n\");\n    synchronized (doc) {\n      outputMark = doc.getLength();\n    }\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6365, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MobilizeLabs/ohmage/tree/master/projects/ohmage-mwf/ios/www/tools/rhino1_7R4/toolsrc/org/mozilla/javascript/tools/shell/ConsoleTextArea.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6366, "initialization": ["PrintWriter printWriter = javax.servlet.http.HttpServletResponse.getWriter()"], "initializationStart": [826], "initializationEnd": [846], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 852, "focalAPIEnd": 899, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.io.PrintWriter.write(String)", "printWriter.io.PrintWriter.write(String)"], "useStart": [905, 979], "useEnd": [973, 1010], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kiniry/KOA/tree/master/branches/split-projects/koa/src/main/ie/ucd/srg/koa/servlet/KOASchedulerServlet.java", "rawCode": "  /**\n   * This method reports the state of the scheduler. RESERVED for admins.\n   *\n   * @param request Object that encapsulates the request to the servlet\n   * @param response Object that encapsulates the response from the servlet\n   * @throws ServletException\n   * @throws IOException\n   */\n  public void doGet(\n      javax.servlet.http.HttpServletRequest request,\n      javax.servlet.http.HttpServletResponse response)\n      throws javax.servlet.ServletException, java.io.IOException {\n    String action = request.getParameter(\"action\");\n    if (action != null) {\n      if (action.equals(\"start\")) {\n        if (!scheduler.isRunning()) {\n          scheduler = new Scheduler();\n        }\n      }\n      if (action.equals(\"stop\")) {\n        scheduler.setRequiredStatus(false);\n      }\n    }\n    java.io.PrintWriter printer = response.getWriter();\n    printer.write(\"<html><body><h1>scheduler</h1>\");\n    printer.write(\"Required status is \" + scheduler.getRequiredStatus());\n    printer.write(\"</body></html>\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6367, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 144, "focalAPIEnd": 186, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [192], "useEnd": [203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/studentkittens/webarchive/tree/master/src/java/webarchive/server/LockHandlerImpl.java", "rawCode": "  /**\n   * Was only used for testing purposes. Works as intended.\n   *\n   * @param domain\n   */\n  public void list_commits(String domain) {\n    out.write(\"list_commits \" + domain + \"\\n\");\n    out.flush();\n    String answer = in.nextLine();\n    while (!answer.equals(\"OK\")) {\n      answer = in.nextLine();\n    }\n    try {\n      processAnswer(answer);\n    } catch (Exception e) {\n      Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, e);\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6368, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [200], "initializationEnd": [220], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["error(String,*)", "PrintWriter.write(String)"], "tryExpressionStart": 351, "tryExpressionEnd": 355, "tryBlockStart": 351, "tryBlockEnd": 1456, "catchExpressionStart": 1137, "catchExpressionEnd": 1170, "catchBlockStart": 1137, "catchBlockEnd": 1306, "exceptionHandlingCallStart": [1180, 1231], "exceptionHandlingCallEnd": [1221, 1297], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1091, "focalAPIEnd": 1127, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [1231, 1381, 1559], "useEnd": [1297, 1447, 1609], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/splangi/automaatnehindaja/tree/master/automaatnehindaja/src/automaatnehindaja/CloseTasksServlet.java", "rawCode": "  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    String taskid = request.getParameter(\"taskid\");\n    PrintWriter pw = response.getWriter();\n    response.setContentType(\"text/plain\");\n    if (request.isUserInRole(\"admin\") || request.isUserInRole(\"responsible\")) {\n      try {\n        Class.forName(\"com.mysql.jdbc.Driver\");\n        Connection c = new SqlConnectionService().getConnection();\n        logger.info(\"Closing task - \" + taskid + \" , request by: \" + request.getRemoteUser());\n        String statement = \"UPDATE attempt SET active = FALSE WHERE task = ?;\";\n        PreparedStatement stmt = c.prepareStatement(statement);\n        stmt.setString(1, taskid);\n        stmt.executeUpdate();\n        stmt.close();\n        statement = \"UPDATE tasks SET active = FALSE WHERE id = ?;\";\n        stmt = c.prepareStatement(statement);\n        stmt.setString(1, taskid);\n        stmt.executeUpdate();\n        stmt.close();\n        c.close();\n        logger.info(\"Success! closed tasks - \" + taskid + \".\");\n        pw.write(\"Ülesanne on arhiveeritud\");\n      } catch (ClassNotFoundException e) {\n        logger.error(\"ClassNotFoundException\", e);\n        pw.write(\"Midagi läks valesti, võtke ühendust administraatoriga.\");\n      } catch (SQLException e) {\n        logger.error(\"SQLException\", e);\n        pw.write(\"Midagi läks valesti, võtke ühendust administraatoriga.\");\n      }\n\n    } else {\n      logger.warn(\"Unauthorized access, request by: \" + request.getRemoteUser());\n      pw.write(\"Teil pole volitusi seda toimingut teha\");\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6369, "initialization": ["PrintWriter printWriter = new BufferedOutputStream(OutputStream)"], "initializationStart": [5104], "initializationEnd": [5134], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["printStackTrace()", "PrintWriter.close()"], "tryExpressionStart": 4022, "tryExpressionEnd": 4026, "tryBlockStart": 4022, "tryBlockEnd": 4792, "catchExpressionStart": 7423, "catchExpressionEnd": 7447, "catchBlockStart": 7423, "catchBlockEnd": 7617, "exceptionHandlingCallStart": [7461, 7516], "exceptionHandlingCallEnd": [7482, 7527], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(c)", "focalAPIStart": 5191, "focalAPIEnd": 5204, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()", "printWriter.close()", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.flush()", "printWriter.close()"], "useStart": [5226, 5260, 5801, 5848, 5925, 6007, 6094, 6181, 6266, 6357, 6444, 6531, 6616, 6650], "useEnd": [5238, 5272, 5826, 5903, 5985, 6072, 6159, 6244, 6335, 6422, 6509, 6594, 6628, 6662], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/sun/net/ftp/FtpGetContent.java", "rawCode": "      /** Handles the protocol exchange with the client. */\n      public void run() {\n        boolean done = false;\n        String str;\n        int res;\n        boolean logged = false;\n        boolean waitpass = false;\n\n        try {\n          in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n          out = new PrintWriter(client.getOutputStream(), true);\n          out.println(\"220 tatooine FTP server (SunOS 5.8) ready.\");\n        } catch (Exception ex) {\n          return;\n        }\n        while (!done) {\n          try {\n            str = in.readLine();\n            res = parseCmd(str);\n            if ((res > PASS && res != QUIT) && !logged) {\n              out.println(\"530 Not logged in.\");\n              continue;\n            }\n            switch (res) {\n              case ERROR:\n                out.println(\"500 '\" + str + \"': command not understood.\");\n                break;\n              case USER:\n                if (!logged && !waitpass) {\n                  username = str.substring(5);\n                  password = null;\n                  cwd = null;\n                  if (\"user2\".equals(username)) {\n                    out.println(\"230 Guest login ok, access restrictions apply.\");\n                    logged = true;\n                  } else {\n                    out.println(\"331 Password required for \" + arg);\n                    waitpass = true;\n                  }\n                } else {\n                  out.println(\"503 Bad sequence of commands.\");\n                }\n                break;\n              case PASS:\n                if (!logged && waitpass) {\n                  out.println(\"230 Guest login ok, access restrictions apply.\");\n                  password = str.substring(5);\n                  logged = true;\n                  waitpass = false;\n                } else out.println(\"503 Bad sequence of commands.\");\n                break;\n              case QUIT:\n                out.println(\"221 Goodbye.\");\n                out.flush();\n                out.close();\n                if (pasv != null) pasv.close();\n                done = true;\n                break;\n              case TYPE:\n                out.println(\"200 Type set to \" + arg + \".\");\n                type = arg;\n                break;\n              case CWD:\n                out.println(\"250 CWD command successful.\");\n                if (cwd == null) cwd = str.substring(4);\n                else cwd = cwd + \"/\" + str.substring(4);\n                break;\n              case CDUP:\n                out.println(\"250 CWD command successful.\");\n                break;\n              case PWD:\n                out.println(\"257 \\\"\" + cwd + \"\\\" is current directory\");\n                break;\n              case PASV:\n                if (!pasvEnabled) {\n                  out.println(\"500 PASV is disabled, use PORT instead.\");\n                  continue;\n                }\n                try {\n                  if (pasv == null) pasv = new ServerSocket(0);\n                  int port = pasv.getLocalPort();\n                  out.println(\n                      \"227 Entering Passive Mode (127,0,0,1,\"\n                          + (port >> 8)\n                          + \",\"\n                          + (port & 0xff)\n                          + \")\");\n                } catch (IOException ssex) {\n                  out.println(\"425 Can't build data connection: Connection refused.\");\n                }\n                break;\n              case PORT:\n                if (!portEnabled) {\n                  out.println(\"500 PORT is disabled, use PASV instead\");\n                  continue;\n                }\n                StringBuffer host;\n                int i = 0, j = 4;\n                while (j > 0) {\n                  i = arg.indexOf(',', i + 1);\n                  if (i < 0) break;\n                  j--;\n                }\n                if (j != 0) {\n                  out.println(\"500 '\" + arg + \"': command not understood.\");\n                  continue;\n                }\n                try {\n                  host = new StringBuffer(arg.substring(0, i));\n                  for (j = 0; j < host.length(); j++)\n                    if (host.charAt(j) == ',') host.setCharAt(j, '.');\n                  String ports = arg.substring(i + 1);\n                  i = ports.indexOf(',');\n                  data_port = Integer.parseInt(ports.substring(0, i)) << 8;\n                  data_port += (Integer.parseInt(ports.substring(i + 1)));\n                  data_addr = InetAddress.getByName(host.toString());\n                  out.println(\"200 Command okay.\");\n                } catch (Exception ex3) {\n                  data_port = 0;\n                  data_addr = null;\n                  out.println(\"500 '\" + arg + \"': command not understood.\");\n                }\n                break;\n              case RETR:\n                {\n                  filename = str.substring(5);\n                  OutputStream dout = getOutDataStream();\n                  if (dout != null) {\n                    out.println(\"200 Command okay.\");\n                    BufferedOutputStream pout = new BufferedOutputStream(dout);\n                    for (int x = 0; x < filesize; x++) pout.write(0);\n                    pout.flush();\n                    pout.close();\n                    list = false;\n                  } else out.println(\"425 Can't build data connection: Connection refused.\");\n                }\n                break;\n              case NLST:\n                filename = arg;\n              case LIST:\n                {\n                  OutputStream dout = getOutDataStream();\n                  if (dout != null) {\n                    out.println(\"200 Command okay.\");\n                    PrintWriter pout = new PrintWriter(new BufferedOutputStream(dout));\n                    pout.println(\"total 130\");\n                    pout.println(\"drwxrwxrwt 7 sys sys 577 May 12 03:30 .\");\n                    pout.println(\"drwxr-xr-x 39 root root 1024 Mar 27 12:55 ..\");\n                    pout.println(\"drwxrwxr-x 2 root root 176 Apr 10 12:02 .X11-pipe\");\n                    pout.println(\"drwxrwxr-x 2 root root 176 Apr 10 12:02 .X11-unix\");\n                    pout.println(\"drwxrwxrwx 2 root root 179 Mar 30 15:09 .pcmcia\");\n                    pout.println(\"drwxrwxrwx 2 jladen staff 117 Mar 30 18:18 .removable\");\n                    pout.println(\"drwxrwxrwt 2 root root 327 Mar 30 15:08 .rpc_door\");\n                    pout.println(\"-rw-r--r-- 1 root other 21 May 5 16:59 hello2.txt\");\n                    pout.println(\"-rw-rw-r-- 1 root sys 5968 Mar 30 15:08 ps_data\");\n                    pout.flush();\n                    pout.close();\n                    list = true;\n                  } else out.println(\"425 Can't build data connection: Connection refused.\");\n                }\n                break;\n              case STOR:\n                {\n                  InputStream is = getInDataStream();\n                  if (is != null) {\n                    out.println(\"200 Command okay.\");\n                    BufferedInputStream din = new BufferedInputStream(is);\n                    int val;\n                    do {\n                      val = din.read();\n                    } while (val != -1);\n                    din.close();\n                  } else out.println(\"425 Can't build data connection: Connection refused.\");\n                }\n                break;\n            }\n          } catch (IOException ioe) {\n            ioe.printStackTrace();\n            try {\n              out.close();\n            } catch (Exception ex2) {\n            }\n            done = true;\n          }\n        }\n      }\n"}, {"dataset": "printWriterWrite", "exampleID": 6370, "initialization": ["PrintWriter printWriter = new PrintWriter(*,boolean)"], "initializationStart": [219], "initializationEnd": [266], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["PrintWriter.println(String)", "printStackTrace()", "exit(int)"], "tryExpressionStart": 158, "tryExpressionEnd": 162, "tryBlockStart": 158, "tryBlockEnd": 557, "catchExpressionStart": 1666, "catchExpressionEnd": 1689, "catchBlockStart": 1666, "catchBlockEnd": 1837, "exceptionHandlingCallStart": [1697, 1788, 1816], "exceptionHandlingCallEnd": [1780, 1808, 1830], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 705, "focalAPIEnd": 722, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [728], "useEnd": [739], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joeledwards/asl-station-processor/tree/master/ASPseed/ASPseed/SeedSocket.java", "rawCode": "  public void run() {\n    byte seedrecord[] = new byte[512];\n    char charfield[] = new char[5];\n    String field;\n    int byteCount;\n    int readCount;\n\n    try {\n      socket = new Socket(hostname, port);\n      out = new PrintWriter(socket.getOutputStream(), true);\n    } catch (UnknownHostException e) {\n      System.err.println(\"Don't know about host: \" + hostname + \":\" + port);\n      System.exit(1);\n    } catch (IOException e) {\n      System.err.println(\"Couldn't get I/O for the connection to: \" + hostname + \":\" + port);\n      System.exit(1);\n    } // End try/catch block\n\n    // Send DATREQ to server\n    String datreq = \"DATREQ \" + id + \" \" + date + \" \" + time + \" \" + duration + '\\u0000';\n    out.write(datreq);\n    out.flush();\n\n    // Get return data\n    recordCount = 0;\n    byteCount = 0;\n    try {\n      while ((readCount = socket.getInputStream().read(seedrecord, byteCount, 512 - byteCount))\n          > 0) {\n        if (bCancel) {\n          socket.close();\n          bDone = true;\n          return;\n        }\n        byteCount += readCount;\n        if (byteCount == 512) {\n          // See if this is a trailer record\n          for (int i = 13; i < 18; i++) {\n            charfield[i - 13] = (char) seedrecord[i];\n          }\n          field = String.copyValueOf(charfield);\n          if (field.toString().compareTo(\"RQLOG\") == 0) {\n            // We see the terminating record, so terminate\n            break;\n          }\n\n          // We have a full record so save it\n          byteCount = 0;\n          recordCount++;\n          outfile.write(seedrecord);\n        }\n      } // while we are successfully reading data\n      outfile.flush();\n    } catch (IOException e1) {\n      System.err.println(\"Unexpected IOException reading data from input stream, ABORT!\");\n      e1.printStackTrace();\n      System.exit(1);\n    }\n    try {\n      socket.close();\n    } catch (IOException e) {; // Don't care if I get an exception on a close\n    }\n    socket = null;\n\n    bDone = true;\n  } // run()\n"}, {"dataset": "printWriterWrite", "exampleID": 6371, "initialization": ["PrintWriter printWriter = HttpServletResponse.getOutputStream()"], "initializationStart": [566], "initializationEnd": [592], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.write(char)"], "configurationStart": [693], "configurationEnd": [728], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf)", "focalAPIStart": 784, "focalAPIEnd": 798, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(char[],int,int)", "printWriter.flush()", "printWriter.flush()", "printWriter.write(char)", "printWriter.write(char[])", "printWriter.write(char[],int,int)"], "useStart": [848, 945, 1159, 1741, 1832, 1896], "useEnd": [874, 956, 1170, 1776, 1846, 1922], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jetty-project/jetty-plugin-support/tree/master/jetty-osgi/jetty-osgi-servletbridge/src/main/java/org/eclipse/jetty/nested/Dump.java", "rawCode": "  private boolean dump(\n      HttpServletResponse response,\n      String data,\n      String chars,\n      String block,\n      String dribble,\n      boolean flush)\n      throws IOException {\n    if (data != null && data.length() > 0) {\n      long d = Long.parseLong(data);\n      int b = (block != null && block.length() > 0) ? Integer.parseInt(block) : 50;\n      byte[] buf = new byte[b];\n      for (int i = 0; i < b; i++) {\n\n        buf[i] = (byte) ('0' + (i % 10));\n        if (i % 10 == 9) buf[i] = (byte) '\\n';\n      }\n      buf[0] = 'o';\n      OutputStream out = response.getOutputStream();\n      response.setContentType(\"text/plain\");\n      while (d > 0) {\n        if (b == 1) {\n          out.write(d % 80 == 0 ? '\\n' : '.');\n          d--;\n        } else if (d >= b) {\n          out.write(buf);\n          d = d - b;\n        } else {\n          out.write(buf, 0, (int) d);\n          d = 0;\n        }\n\n        if (dribble != null) {\n          out.flush();\n          try {\n            Thread.sleep(Long.parseLong(dribble));\n          } catch (Exception e) {\n            e.printStackTrace();\n            break;\n          }\n        }\n      }\n\n      if (flush) out.flush();\n\n      return true;\n    }\n\n    // Handle a dump of data\n    if (chars != null && chars.length() > 0) {\n      long d = Long.parseLong(chars);\n      int b = (block != null && block.length() > 0) ? Integer.parseInt(block) : 50;\n      char[] buf = new char[b];\n      for (int i = 0; i < b; i++) {\n        buf[i] = (char) ('0' + (i % 10));\n        if (i % 10 == 9) buf[i] = '\\n';\n      }\n      buf[0] = 'o';\n      response.setContentType(\"text/plain\");\n      PrintWriter out = response.getWriter();\n      while (d > 0 && !out.checkError()) {\n        if (b == 1) {\n          out.write(d % 80 == 0 ? '\\n' : '.');\n          d--;\n        } else if (d >= b) {\n          out.write(buf);\n          d = d - b;\n        } else {\n          out.write(buf, 0, (int) d);\n          d = 0;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6372, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [185], "initializationEnd": [200], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 206, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mduduzik/flowframe/tree/master/editors/oryx/backend/src/main/java/org/b3mn/poem/handler/HandlerBase.java", "rawCode": "  public void doDelete(\n      HttpServletRequest req, HttpServletResponse res, Identity subject, Identity object)\n      throws Exception {\n    res.setStatus(403);\n    PrintWriter out = res.getWriter();\n    out.write(\"Forbidden!\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6373, "initialization": ["String s = IRuntimeValidatior.stop()"], "initializationStart": [118], "initializationEnd": [134], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "printWriter!=null", "guardType": "IF {", "guardExpressionStart": 144, "guardExpressionEnd": 164, "guardBlockStart": 144, "guardBlockEnd": 311, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 177, "focalAPIEnd": 195, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()", "printWriter.close()"], "useStart": [207, 234], "useEnd": [222, 249], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/overturetool/overture/tree/master/core/interpreter/src/main/java/org/overture/interpreter/runtime/RuntimeValidator.java", "rawCode": "  public static void stop() {\n    if (Settings.timingInvChecks) {\n      if (validator != null) {\n        String res = validator.stop();\n        if (logfile != null) {\n          logfile.write(res);\n          logfile.flush();\n          logfile.close();\n        } else {\n          Console.out.print(res);\n        }\n      }\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6374, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 113, "focalAPIEnd": 188, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)"], "useStart": [200], "useEnd": [227], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/europeana/uim-europeana/tree/master/webapp/controlpanel/src/main/java/eu/europeana/uim/gui/cp/server/EuropeanaLogFileService.java", "rawCode": "  /** @param out */\n  private void sendHtmlFooter(PrintWriter out, boolean moreData) {\n    if (moreData) {\n      out.write(\"<img src=\\\"../img/ajax-loader.gif\\\" alt=\\\">Loading...\\\"></img>\");\n    }\n    out.write(\"</body></html>\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6375, "initialization": ["String s = ApiAdaptor.createLocalImage(List<FileItem>)"], "initializationStart": [408], "initializationEnd": [446], "hasTryCatch": 1, "exceptionType": "SizeLimitExceededException", "exceptionHandlingCall": ["Logger.debug(String)", "PrintWriter.print(String)"], "tryExpressionStart": 111, "tryExpressionEnd": 115, "tryBlockStart": 111, "tryBlockEnd": 1234, "catchExpressionStart": 973, "catchExpressionEnd": 1010, "catchBlockStart": 973, "catchBlockEnd": 1169, "exceptionHandlingCallStart": [1018, 1087], "exceptionHandlingCallEnd": [1079, 1147], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 456, "focalAPIEnd": 472, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.print(String)"], "useStart": [601, 753, 923, 1087], "useEnd": [617, 769, 939, 1147], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liumingli/comicdiy/tree/master/src/com/ybcx/comic/facade/AppStarter.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  private void processMultiPart(HttpServletRequest req, PrintWriter pw) {\n    try {\n      log.debug(\">>> Starting uploading...\");\n      List<FileItem> fileItems = (List<FileItem>) upload.parseRequest(req);\n      log.debug(\"<<< Uploading complete!\");\n\n      String method = getMethod(fileItems);\n      if (method.equals(AppStarter.UPLOADLOCALIMAGE)) {\n        String result = apiAdaptor.createLocalImage(fileItems);\n        pw.write(result);\n\n      } else if (method.equals(AppStarter.SAVEANIM)) {\n        String result = apiAdaptor.createAnimation(fileItems);\n        pw.write(result);\n\n      } else if (method.equals(AppStarter.CUSTOMENDING)) {\n        String result = apiAdaptor.createCustomEnding(fileItems);\n        pw.write(result);\n\n        // 保存动画并发微博\n      } else if (method.equals(AppStarter.SAVEANDPUBLISH)) {\n        String result = apiAdaptor.saveAndPublish(fileItems);\n        pw.write(result);\n\n      } else {\n\n      }\n\n    } catch (SizeLimitExceededException e) {\n      log.debug(\">>> File size exceeds the limit, can not upload!\");\n      pw.print(\">>> File size exceeds the limit, can not upload!\");\n      return;\n\n    } catch (FileUploadException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6376, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 49, "focalAPIEnd": 79, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [85, 112, 139, 231, 259], "useEnd": [106, 133, 225, 253, 280], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arquillian/arquillian-extension-warp/tree/master/ftest/src/main/java/org/jboss/arquillian/warp/ftest/FormServlet.java", "rawCode": "  private void writeStart(PrintWriter out) {\n    out.write(\"<!DOCTYPE html>\\n\");\n    out.write(\"<html>\\n\");\n    out.write(\"<head>\\n\");\n    out.write(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\");\n    out.write(\"</head>\\n\");\n    out.write(\"<body>\\n\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6377, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 47, "focalAPIEnd": 69, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)"], "useStart": [75], "useEnd": [97], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arquillian/arquillian-extension-warp/tree/master/ftest/src/main/java/org/jboss/arquillian/warp/ftest/FormServlet.java", "rawCode": "  private void writeEnd(PrintWriter out) {\n    out.write(\"</body>\\n\");\n    out.write(\"</html>\\n\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6378, "initialization": ["PrintWriter printWriter = new PrintWriter(OutputStream)"], "initializationStart": [157], "initializationEnd": [177], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.println(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.println(String)", "printWriter.print(String)"], "configurationStart": [184, 261, 305, 347, 389, 431, 496, 565, 607, 631], "configurationEnd": [232, 297, 339, 381, 423, 457, 511, 591, 623, 663], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 751, "focalAPIEnd": 814, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.println(String)", "printWriter.print(String)", "printWriter.print(String)", "printWriter.println(String)", "printWriter.println()", "printWriter.println(String)", "printWriter.print(String)", "printWriter.printf(String,*)", "printWriter.println()", "printWriter.println(String)", "printWriter.print(String)", "printWriter.printf(String,*)", "printWriter.println()", "printWriter.close()"], "useStart": [840, 863, 984, 1050, 1073, 1123, 1206, 1271, 1342, 1374, 1460, 1525, 1596, 1638], "useEnd": [855, 896, 1024, 1065, 1085, 1155, 1220, 1318, 1354, 1409, 1474, 1572, 1608, 1648], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rwl/DSS/tree/master/dss/src/main/java/com/ncond/dss/common/CktElement.java", "rawCode": "  @Override\n  public void dumpProperties(OutputStream out, boolean complete) {\n    int i, j;\n\n    super.dumpProperties(out, complete);\n\n    PrintWriter pw = new PrintWriter(out);\n\n    pw.println(enabled ? \"! ENABLED\" : \"! DISABLED\");\n\n    if (complete) {\n      pw.println(\"! NPhases = \" + nPhases);\n      pw.println(\"! NConds = \" + nConds);\n      pw.println(\"! NTerms = \" + nTerms);\n      pw.println(\"! Yorder = \" + YOrder);\n      pw.print(\"! NodeRef = \\\"\");\n      if (nodeRef == null) {\n        pw.print(\"nil\");\n      } else {\n        for (i = 0; i < YOrder; i++) pw.print(nodeRef[i] + \" \");\n      }\n      pw.println(\"\\\"\");\n      pw.print(\"! Terminal Status: [\");\n      for (i = 0; i < nTerms; i++) {\n        for (j = 0; j < nConds; j++) {\n          pw.write(terminals[i].getConductor(j).isClosed() ? \"C \" : \"O \");\n        }\n      }\n      pw.println(\"]\");\n      pw.print(\"! Terminal Bus Ref: [\");\n      for (i = 0; i < nTerms; i++) {\n        for (j = 0; j < nConds; j++) {\n          pw.print(terminals[i].getBusRef() + \" \");\n        }\n      }\n      pw.println(\"]\");\n      pw.println();\n\n      if (YPrim != null) {\n        pw.println(\"! YPrim (G matrix)\");\n        for (i = 0; i < YOrder; i++) {\n          pw.print(\"! \");\n          for (j = 0; j <= i; j++) {\n            pw.printf(\" %13.10g |\", YPrim.get(i, j).real());\n          }\n          pw.println();\n        }\n        pw.println(\"! YPrim (B Matrix) = \");\n        for (i = 0; i < YOrder; i++) {\n          pw.print(\"! \");\n          for (j = 0; j <= i; j++) {\n            pw.printf(\" %13.10g |\", YPrim.get(i, j).imag());\n          }\n          pw.println();\n        }\n      }\n    }\n    pw.close();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6379, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 429, "focalAPIEnd": 487, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [545, 569], "useEnd": [563, 583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-0-8a/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  synchronized void returnPressed() {\n    Document doc = getDocument();\n    int len = doc.getLength();\n    Segment segment = new Segment();\n    try {\n      doc.getText(outputMark, len - outputMark, segment);\n    } catch (javax.swing.text.BadLocationException ignored) {\n      ignored.printStackTrace();\n    }\n    if (segment.count > 0) {\n      history.addElement(segment.toString());\n    }\n    historyIndex = history.size();\n    inPipe.write(segment.array, segment.offset, segment.count);\n    append(\"\\n\");\n    outputMark = doc.getLength();\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6380, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sprintstack/rhino/tree/master/toolsrc/org/mozilla/javascript/tools/shell/ConsoleTextArea.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6381, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [152], "initializationEnd": [168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 252, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.flush()", "printWriter.close()"], "useStart": [279, 325, 555, 699, 890, 947, 1542, 2096, 2164, 2232, 2594, 2610], "useEnd": [319, 365, 623, 779, 937, 1004, 2063, 2150, 2218, 2340, 2604, 2620], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rodericj/TopDish/tree/master/server/old/java/tags/0527/src/com/topdish/batch/CleanUploadedDataServlet.java", "rawCode": "  @Override\n  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n      throws ServletException, IOException {\n\n    PrintWriter pw = resp.getWriter();\n\n    // Default Point\n    final Point defaultPt = GeoUtils.defaultTDPoint();\n\n    pw.write(\"Defualt: \");\n    pw.write(\"\\tLat: \" + defaultPt.getLat());\n    pw.write(\"\\tLon: \" + defaultPt.getLon());\n\n    // List of dishes within 1000m of the default location\n    final List<Dish> dishes = TDQueryUtils.searchGeoItems(defaultPt, 1000, 1000, new Dish());\n\n    if (null != dishes) {\n\n      pw.write(\"\\nTotal Size of Dishes Returned: \" + dishes.size() + \"\\n\");\n\n      // Traverse dishes\n      for (final Dish dish : dishes) {\n\n        pw.write(\"Working on dish \" + dish.getKeyString() + \" \" + dish.getName() + \"\\n\");\n\n        // Get the Restaurant\n        final Restaurant rest = Datastore.get(dish.getRestaurant());\n\n        pw.write(\"\\tLat Before: \" + rest.getLatitude());\n        pw.write(\"\\n\\tLon Before: \" + rest.getLongitude() + \"\\n\");\n\n        if (rest.getLatitude() == defaultPt.getLat() && rest.getLongitude() == defaultPt.getLon()) {\n\n          // Retry the reverse geo coding\n          TDPoint reverseGeo =\n              GeoUtils.reverseAddress(\n                  rest.getAddressLine1() + \" \" + rest.getAddressLine2(),\n                  rest.getCity(),\n                  rest.getState());\n\n          // Check that it found a new address\n          if (defaultPt.getLat() == reverseGeo.getLat()\n              && defaultPt.getLon() == reverseGeo.getLon()) {\n            pw.write(\n                \"\\tFailed to regeocoded: \"\n                    + dish.getKeyString()\n                    + \" \"\n                    + dish.getName()\n                    + \" at \"\n                    + rest.getName()\n                    + \"\\t\"\n                    + rest.getAddressLine1()\n                    + \" \"\n                    + rest.getAddressLine2()\n                    + \" \"\n                    + rest.getCity()\n                    + \" \"\n                    + rest.getState()\n                    + \"\\n\");\n          } else {\n            pw.write(\"\\tLat After: \" + reverseGeo.getLat() + \"\\n\");\n            pw.write(\"\\tLon After: \" + reverseGeo.getLon() + \"\\n\");\n            pw.write(\n                \"\\tSuccessfully regeocoded: \" + dish.getKeyString() + \" \" + dish.getName() + \"\\n\");\n\n            rest.setLocation(reverseGeo.getLat(), reverseGeo.getLon());\n            Datastore.put(rest);\n            dish.setLocation(reverseGeo.getLat(), reverseGeo.getLon());\n            Datastore.put(dish);\n          }\n        }\n      }\n    }\n\n    pw.flush();\n    pw.close();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6382, "initialization": ["PrintWriter printWriter = getPrintWriter()"], "initializationStart": [132], "initializationEnd": [148], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 541, "focalAPIEnd": 558, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)"], "useStart": [666, 2792], "useEnd": [683, 2809], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/archive/action/ArchiveGroupAction.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public String delete() throws IOException {\n    String result = \"SUCCESS\";\n    PrintWriter out = getPrintWriter();\n\n    Gson gson = new Gson();\n    List<HashMap<String, String>> archiveList = new ArrayList<HashMap<String, String>>();\n\n    try {\n      // 将传入的json字符串，转换成list\n      archiveList =\n          (List) gson.fromJson(par, new TypeToken<List<HashMap<String, String>>>() {}.getType());\n    } catch (Exception e) {\n      System.out.println(e.getMessage());\n      result = \"保存失败，请重新尝试，或与管理员联系。\";\n      out.write(result);\n      return null;\n    }\n\n    if (archiveList.size() <= 0) {\n      result = \"没有找到数据，请重新尝试或与管理员联系。\";\n      out.write(result);\n      return null;\n    }\n\n    List<SysTable> tableList =\n        treeService.getTreeOfTable(archiveList.get(0).get(\"treeid\").toString());\n    SysTemplet templet = treeService.getTreeOfTemplet(archiveList.get(0).get(\"treeid\").toString());\n    // sb存储delete语句\n    StringBuffer sb = new StringBuffer();\n    String tableName = \"\";\n    String tableNameWj = \"\";\n    // 得到表名\n    for (int i = 0; i < tableList.size(); i++) {\n      if (templet.getTemplettype().equals(\"F\")) {\n        if (tableList.get(i).getTabletype().equals(tableType)) {\n          tableName = tableList.get(i).getTablename();\n          break;\n        }\n      } else if (templet.getTemplettype().equals(\"A\")) {\n        if (tableList.get(i).getTabletype().equals(tableType) && tableType.equals(\"01\")) {\n          tableName = tableList.get(i).getTablename();\n        } else if (tableList.get(i).getTabletype().equals(tableType) && tableType.equals(\"02\")) {\n          tableName = tableList.get(i).getTablename();\n          break;\n        } else {\n          tableNameWj = tableList.get(i).getTablename();\n        }\n      }\n    }\n    sb.append(\"delete from \").append(tableName).append(\" where id in (\");\n    StringBuffer sbSql = new StringBuffer();\n    for (int z = 0; z < archiveList.size(); z++) {\n      // 得到id集合\n      HashMap<String, String> row = (HashMap<String, String>) archiveList.get(z);\n      sbSql.append(\"'\").append(row.get(\"id\").toString()).append(\"',\");\n      // sb.append(\"'\").append(row.get(\"id\").toString()).append(\"',\");\n    }\n    sb.append(sbSql.deleteCharAt(sbSql.length() - 1)).append(\")\");\n    // sb.deleteCharAt(sbSql.length() - 1).append(\")\");\n    int b = dynamicService.delete((sb.toString()));\n\n    if (b <= 0) {\n      result = \"删除失败，请重新尝试或与管理员联系。\";\n    } else {\n      if (templet.getTemplettype().equals(\"A\") && tableType.equals(\"01\")) {\n        sb.setLength(0);\n        sb.append(\"delete from \")\n            .append(tableNameWj)\n            .append(\" where parentid in (\")\n            .append(sbSql.toString())\n            .append(\")\");\n        dynamicService.delete(sb.toString());\n      }\n\n      // 要删除挂接的物理文件\n    }\n\n    out.write(result);\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6383, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 848, "focalAPIEnd": 1000, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [1122, 1249, 1404, 1488, 1540, 1577, 1735], "useEnd": [1147, 1302, 1450, 1514, 1569, 1727, 1780], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/deegree/deegree3/tree/master/uncoupled/orphaned-after-3.2/deegree-sos-webclient/src/main/java/org/deegree/client/sos/utils/Writer.java", "rawCode": "  private void writeObservationData(StorageGetObservation storage) {\n    List<Observation> observationCollection = storage.getObservationCollection();\n    for (Observation observation : observationCollection) {\n      String procedure = observation.getProcedure();\n      DataArray dataArray = observation.getDataArray();\n      if (dataArray != null) {\n        String values = dataArray.getValues();\n        String tokenSeparator = \"\";\n        String blockSeparator = \"\";\n        for (Pair<String, String> separator : dataArray.getSeparators()) {\n          if (separator.first.equals(\"tokenSeparator\")) {\n            tokenSeparator = separator.second;\n          } else if (separator.first.equals(\"blockSeparator\")) {\n            blockSeparator = separator.second;\n          }\n        }\n        String[] blocks = values.split(blockSeparator);\n        printWriter.write(\n            \"<br />\"\n                + procedure\n                + \":<br /><br /><table border='1' cellspacing='0' cellpadding='3'>\");\n        for (int i = 0; i < blocks.length; i++) {\n          String[] value = blocks[i].split(tokenSeparator);\n          printWriter.write(\"<tr>\");\n          if (i == 0) {\n            for (Field field : dataArray.getElementTypes()) {\n              printWriter.write(\"<th>\" + field.getName() + \"</th>\");\n            }\n          } else {\n            for (int j = 0; j < value.length; j++) {\n              printWriter.write(\"<td>\" + value[j] + \"</td>\");\n            }\n          }\n          printWriter.write(\"</tr>\");\n        }\n      }\n      printWriter.write(\"</table>\");\n      printWriter.write(\n          \"<br /><br /><button onclick='generateChart(\\\"\"\n              + procedure\n              + \"\\\")'>generate Chart</button>\");\n      printWriter.write(\"<br /><br /><br /><br />\");\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6384, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [681], "initializationEnd": [701], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 885, "focalAPIEnd": 925, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [1158, 1275, 1496], "useEnd": [1174, 1305, 1535], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jblaya/openmrs-core/tree/master/web/src/main/java/org/openmrs/web/servlet/SummaryServlet.java", "rawCode": "  /**\n   * Run both Post and Get\n   *\n   * @param request\n   * @param response\n   * @throws ServletException\n   * @throws IOException\n   */\n  private void doAll(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    response.setContentType(\"text/html\");\n\n    HttpSession session = request.getSession();\n\n    if (!Context.hasPrivilege(PrivilegeConstants.VIEW_PATIENTS)) {\n      session.setAttribute(\n          WebConstants.OPENMRS_ERROR_ATTR,\n          \"Privilege required: \" + PrivilegeConstants.VIEW_PATIENTS);\n      response.sendRedirect(request.getContextPath() + \"/login.htm\");\n      return;\n    }\n\n    PrintWriter summary = response.getWriter();\n\n    Cohort patientSet = getPatientSet(request, response);\n\n    PatientService patientService = Context.getPatientService();\n    LogicService logic = Context.getLogicService();\n\n    summary.write(\"<clinicalSummaryList>\\n\");\n    for (Integer patientId : patientSet.getMemberIds()) {\n      try {\n        Result xml = logic.eval(patientService.getPatient(patientId), \"CLINICAL SUMMARY\");\n\n        // Output results\n        String s = xml.toString();\n        summary.write(s);\n        String[] lines = s.split(\"\\n\");\n        for (int x = 1; x < lines.length; x++) {\n          summary.write(lines[x] + \"\\n\");\n        }\n      } catch (LogicException e) {\n        throw new ServletException(\n            \"Error while evaluating rule CLINICAL SUMMARY for patient: \" + patientId, e);\n      }\n    }\n    summary.write(\"</clinicalSummaryList>\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6385, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 429, "focalAPIEnd": 487, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [545, 569], "useEnd": [563, 583], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-6-1/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  synchronized void returnPressed() {\n    Document doc = getDocument();\n    int len = doc.getLength();\n    Segment segment = new Segment();\n    try {\n      doc.getText(outputMark, len - outputMark, segment);\n    } catch (javax.swing.text.BadLocationException ignored) {\n      ignored.printStackTrace();\n    }\n    if (segment.count > 0) {\n      history.addElement(segment.toString());\n    }\n    historyIndex = history.size();\n    inPipe.write(segment.array, segment.offset, segment.count);\n    append(\"\\n\");\n    outputMark = doc.getLength();\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6386, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [552], "initializationEnd": [572], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()", "Connection.rollback()"], "tryExpressionStart": 1061, "tryExpressionEnd": 1065, "tryBlockStart": 1061, "tryBlockEnd": 3274, "catchExpressionStart": 3123, "catchExpressionEnd": 3146, "catchBlockStart": 3123, "catchBlockEnd": 3206, "exceptionHandlingCallStart": [3156, 3185], "exceptionHandlingCallEnd": [3175, 3197], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 1882, "focalAPIEnd": 2041, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.close()"], "useStart": [2789, 3256], "useEnd": [3113, 3265], "hasFinally": 1, "cleanUpCall": ["Connection.setAutoCommit(boolean)", "Connection.close()"], "finallyExpressionStart": 3207, "finallyExpressionEnd": 3215, "finallyBlockStart": 3207, "finallyBlockEnd": 3274, "cleanUpCallStart": [3225, 3256], "cleanUpCallEnd": [3246, 3265], "url": "https://github.com/stas-bob/Projektmanager/tree/master/src/java/util/DeleteAccount.java", "rawCode": "  /**\n   * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.\n   *\n   * @param request servlet request\n   * @param response servlet response\n   * @throws ServletException if a servlet-specific error occurs\n   * @throws IOException if an I/O error occurs\n   */\n  protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    request.setCharacterEncoding(\"UTF-8\");\n    response.setContentType(\"application/xml;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    Connection c = null;\n    HttpSession seas = request.getSession();\n\n    int user_id = Integer.parseInt(seas.getAttribute(\"user_id\").toString());\n    String email = seas.getAttribute(\"user\").toString();\n    String projectName = seas.getAttribute(\"projectname\").toString();\n    String status = seas.getAttribute(\"status\").toString();\n    System.out.println(\"status: \" + status + \" projectname\" + projectName + \" email: \" + email);\n    try {\n      c = DBConnector.getConnection();\n      try {\n        // c.setAutoCommit(false);\n\n        PreparedStatement ps = null;\n        ps = c.prepareStatement(\"SELECT COUNT(*) FROM user WHERE projectname=?\");\n        ps.setString(1, projectName);\n        ResultSet rs = ps.executeQuery();\n        int anzahl = 0;\n        if (rs.next()) {\n          anzahl = rs.getInt(1);\n        }\n        rs.close();\n        ps.close();\n\n        if (anzahl > 1) {\n          if (status.equals(\"PL\")) {\n            ps = c.prepareStatement(\"SELECT id FROM user WHERE status=?\");\n            ps.setString(1, status);\n            rs = ps.executeQuery();\n            boolean secondPLFound = false;\n            while (rs.next()) {\n              if (rs.getInt(1) != user_id) {\n                secondPLFound = true;\n              }\n            }\n            if (!secondPLFound) {\n              out.write(\n                  \"<root><htmlSeite><![CDATA[]]></htmlSeite><message><![CDATA[Ernenen sie erst einen anderen zum Projektleiter]]></message></root>\");\n              return;\n            }\n          }\n        }\n\n        ps = c.prepareStatement(\"DELETE FROM time WHERE user_id = ?\");\n        ps.setInt(1, user_id);\n        ps.executeUpdate();\n        ps.close();\n\n        ps = c.prepareStatement(\"DELETE FROM rel_module_user WHERE email = ?\");\n        ps.setString(1, email);\n        ps.executeUpdate();\n        ps.close();\n\n        ps = c.prepareStatement(\"DELETE FROM user WHERE id = ?\");\n        ps.setInt(1, user_id);\n        ps.executeUpdate();\n        ps.close();\n        anzahl--;\n        System.out.println(\"anzahl: \" + anzahl);\n        if (anzahl == 0) {\n          deleteProject(user_id, projectName, c);\n        }\n\n        // c.commit();\n\n        request.getSession().invalidate();\n        out.write(\n            \"<root><htmlSeite><![CDATA[<html><head><title>Account l&ouml;schen</title><link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"start.css\\\" /></head>\"\n                + \"<body><div id=\\\"textPasswordForget\\\" />Ihr Account wurde gel&ouml;scht!</div></body></html>]]></htmlSeite><message> </message></root>\");\n      } catch (SQLException e) {\n        e.printStackTrace();\n        c.rollback();\n      } finally {\n        c.setAutoCommit(true);\n        c.close();\n      }\n    } catch (MySQLException ex) {\n      ex.printStackTrace();\n    } catch (SQLException ex) {\n      Logger.getLogger(Times.class.getName()).log(Level.SEVERE, null, ex);\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6387, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [236], "initializationEnd": [251], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 258, "focalAPIEnd": 272, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [510, 591, 629], "useEnd": [545, 608, 645], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AsherBond/opentaps/tree/master/opentaps/opentaps-common/webapp/js/dojo_0.90/dojox/off/demos/editor/server/org/dojo/moxie/MoxieServlet.java", "rawCode": "  private void listReturnJSON(\n      List<Document> allDocs, HttpServletRequest req, HttpServletResponse res)\n      throws IOException, ServletException, MoxieException {\n    res.setContentType(\"text/javascript\");\n    PrintWriter out = res.getWriter();\n\n    out.write(\"[\");\n\n    // loop through each file name and write it out as an A tag\n    Iterator<Document> iter = allDocs.iterator();\n    while (iter.hasNext()) {\n      Document d = iter.next();\n      // FIXME: Use a real JSON serialization library\n      out.write(\"\\\"\" + d.fileName + \"\\\"\");\n      if (iter.hasNext() == true) {\n        out.write(\", \\n\");\n      }\n    }\n\n    out.write(\"]\\n\");\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6388, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blackberry/BB10-WebWorks-Community-Samples/tree/master/Ant-Cordova-Build-Script/tools/rhino1_7R3/toolsrc/org/mozilla/javascript/tools/shell/ConsoleTextArea.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6389, "initialization": ["PrintWriter printWriter = new PrintWriter(FileWriter)"], "initializationStart": [155], "initializationEnd": [179], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 197, "focalAPIEnd": 215, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.close()"], "useStart": [239], "useEnd": [250], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 223, "finallyExpressionEnd": 231, "finallyBlockStart": 223, "finallyBlockEnd": 257, "cleanUpCallStart": [239], "cleanUpCallEnd": [250], "url": "https://github.com/overturetool/astcreator/tree/master/maven/src/main/java/org/overture/tools/maven/astcreator/util/Util.java", "rawCode": "  public static void writeFile(File file, String content) throws IOException {\n    FileWriter outFile = new FileWriter(file, false);\n    PrintWriter out = new PrintWriter(outFile);\n    try {\n      out.write(content);\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6390, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(buf,off,len)", "focalAPIStart": 453, "focalAPIEnd": 511, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [602, 626], "useEnd": [620, 640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.1.0/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  void returnPressed() {\n    Document doc = getDocument();\n    int len = doc.getLength();\n    Segment segment = new Segment();\n    try {\n      synchronized (doc) {\n        doc.getText(outputMark, len - outputMark, segment);\n      }\n    } catch (javax.swing.text.BadLocationException ignored) {\n      ignored.printStackTrace();\n    }\n    if (segment.count > 0) {\n      history.addElement(segment.toString());\n    }\n    historyIndex = history.size();\n    inPipe.write(segment.array, segment.offset, segment.count);\n    append(\"\\n\");\n    synchronized (doc) {\n      outputMark = doc.getLength();\n    }\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6391, "initialization": ["PrintWriter printWriter = getPrintWriter()"], "initializationStart": [136], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 234, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)"], "useStart": [909], "useEnd": [926], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/archive/action/SearchAdvancedAction.java", "rawCode": "  /**\n   * 获得表字段\n   *\n   * @return\n   * @throws IOException\n   */\n  public String getField() throws IOException {\n    PrintWriter out = getPrintWriter();\n    // 如果没有得到树节点id，返回error\n    if (null == treeid || \"\".equals(treeid)) {\n      out.write(\"error\");\n      return null;\n    }\n\n    // 得到节点对应的模板。用来判断档案类型\n    SysTemplet templet = treeService.getTreeOfTemplet(treeid);\n    String result = \"var templeType='\" + templet.getTemplettype() + \"';\";\n    List<SysTempletfield> fieldList = treeService.getTreeOfTempletfield(treeid, tableType);\n\n    // 返回字段特殊属性，例如默认值，在页面添加时，直接赋值\n    List<SysTempletfield> fields = new ArrayList<SysTempletfield>();\n    for (SysTempletfield field : fieldList) {\n      if (field.getSort() >= 0 && field.getIssearch() > 0) {\n        fields.add(field);\n      }\n    }\n    Gson gson = new Gson();\n    if (fields.size() > 0) {\n      result += \"var fields = \" + gson.toJson(fields);\n    }\n    out.write(result);\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6392, "initialization": ["PrintWriter printWriter = new PrintWriter(File)"], "initializationStart": [289], "initializationEnd": [316], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 404, "focalAPIEnd": 433, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.close()"], "useStart": [493, 560, 618, 654], "useEnd": [554, 612, 648, 672], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/TestContainersMonitor.java", "rawCode": "  @Test\n  public void testContainerKillOnMemoryOverflow() throws IOException, InterruptedException {\n\n    if (!ProcfsBasedProcessTree.isAvailable()) {\n      return;\n    }\n\n    containerManager.start();\n\n    File scriptFile = new File(tmpDir, \"scriptFile.sh\");\n    PrintWriter fileWriter = new PrintWriter(scriptFile);\n    File processStartFile = new File(tmpDir, \"start_file.txt\").getAbsoluteFile();\n    fileWriter.write(\"\\numask 0\"); // So that start file is readable by the\n    // test.\n    fileWriter.write(\"\\necho Hello World! > \" + processStartFile);\n    fileWriter.write(\"\\necho $$ >> \" + processStartFile);\n    fileWriter.write(\"\\nsleep 15\");\n    fileWriter.close();\n\n    ContainerLaunchContext containerLaunchContext =\n        recordFactory.newRecordInstance(ContainerLaunchContext.class);\n\n    // ////// Construct the Container-id\n    ApplicationId appId = recordFactory.newRecordInstance(ApplicationId.class);\n    appId.setClusterTimestamp(0);\n    appId.setId(0);\n    ApplicationAttemptId appAttemptId = recordFactory.newRecordInstance(ApplicationAttemptId.class);\n    appAttemptId.setApplicationId(appId);\n    appAttemptId.setAttemptId(1);\n    ContainerId cId = recordFactory.newRecordInstance(ContainerId.class);\n    cId.setId(0);\n    cId.setApplicationAttemptId(appAttemptId);\n    containerLaunchContext.setContainerId(cId);\n\n    containerLaunchContext.setUser(user);\n\n    URL resource_alpha =\n        ConverterUtils.getYarnUrlFromPath(\n            localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));\n    LocalResource rsrc_alpha = recordFactory.newRecordInstance(LocalResource.class);\n    rsrc_alpha.setResource(resource_alpha);\n    rsrc_alpha.setSize(-1);\n    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);\n    rsrc_alpha.setType(LocalResourceType.FILE);\n    rsrc_alpha.setTimestamp(scriptFile.lastModified());\n    String destinationFile = \"dest_file\";\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>();\n    localResources.put(destinationFile, rsrc_alpha);\n    containerLaunchContext.setLocalResources(localResources);\n    containerLaunchContext.setUser(containerLaunchContext.getUser());\n    List<String> commands = new ArrayList<String>();\n    commands.add(\"/bin/bash\");\n    commands.add(scriptFile.getAbsolutePath());\n    containerLaunchContext.setCommands(commands);\n    containerLaunchContext.setResource(recordFactory.newRecordInstance(Resource.class));\n    containerLaunchContext.getResource().setMemory(8 * 1024 * 1024);\n    StartContainerRequest startRequest =\n        recordFactory.newRecordInstance(StartContainerRequest.class);\n    startRequest.setContainerLaunchContext(containerLaunchContext);\n    containerManager.startContainer(startRequest);\n\n    int timeoutSecs = 0;\n    while (!processStartFile.exists() && timeoutSecs++ < 20) {\n      Thread.sleep(1000);\n      LOG.info(\"Waiting for process start-file to be created\");\n    }\n    Assert.assertTrue(\"ProcessStartFile doesn't exist!\", processStartFile.exists());\n\n    // Now verify the contents of the file\n    BufferedReader reader = new BufferedReader(new FileReader(processStartFile));\n    Assert.assertEquals(\"Hello World!\", reader.readLine());\n    // Get the pid of the process\n    String pid = reader.readLine().trim();\n    // No more lines\n    Assert.assertEquals(null, reader.readLine());\n\n    BaseContainerManagerTest.waitForContainerState(\n        containerManager, cId, ContainerState.COMPLETE, 60);\n\n    GetContainerStatusRequest gcsRequest =\n        recordFactory.newRecordInstance(GetContainerStatusRequest.class);\n    gcsRequest.setContainerId(cId);\n    ContainerStatus containerStatus = containerManager.getContainerStatus(gcsRequest).getStatus();\n    Assert.assertEquals(ExitCode.TERMINATED.getExitCode(), containerStatus.getExitStatus());\n    String expectedMsgPattern =\n        \"Container \\\\[pid=\"\n            + pid\n            + \",containerID=\"\n            + cId\n            + \"\\\\] is running beyond virtual memory limits. Current usage: \"\n            + \"[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B physical memory used; \"\n            + \"[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B virtual memory used. \"\n            + \"Killing container.\\nDump of the process-tree for \"\n            + cId\n            + \" :\\n\";\n    Pattern pat = Pattern.compile(expectedMsgPattern);\n    Assert.assertEquals(\n        \"Expected message pattern is: \"\n            + expectedMsgPattern\n            + \"\\n\\nObserved message is: \"\n            + containerStatus.getDiagnostics(),\n        true,\n        pat.matcher(containerStatus.getDiagnostics()).find());\n\n    // Assert that the process is not alive anymore\n    Assert.assertFalse(\"Process is still alive!\", exec.signalContainer(user, pid, Signal.NULL));\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6393, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [213], "initializationEnd": [233], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["toString()", "PrintWriter.write(String)"], "tryExpressionStart": 239, "tryExpressionEnd": 243, "tryBlockStart": 239, "tryBlockEnd": 786, "catchExpressionStart": 688, "catchExpressionEnd": 712, "catchBlockStart": 688, "catchBlockEnd": 751, "exceptionHandlingCallStart": [730, 720], "exceptionHandlingCallEnd": [743, 744], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 618, "focalAPIEnd": 632, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.close()"], "useStart": [657, 720, 768], "useEnd": [671, 744, 779], "hasFinally": 1, "cleanUpCall": ["PrintWriter.close()"], "finallyExpressionStart": 752, "finallyExpressionEnd": 760, "finallyBlockStart": 752, "finallyBlockEnd": 786, "cleanUpCallStart": [768], "cleanUpCallEnd": [779], "url": "https://github.com/MatiasVerdier/MarketWeb/tree/master/src/java/servlet/validarNickEmail.java", "rawCode": "  protected void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    try {\n\n      boolean res = false;\n      String query = request.getQueryString();\n      if (query.contains(\"nick\")) {\n        String nick = request.getParameter(\"nick\");\n        res = validar(\"nick\", nick);\n      }\n\n      if (query.contains(\"email\")) {\n        String email = request.getParameter(\"email\");\n        res = validar(\"email\", email);\n      }\n\n      if (res) {\n        out.write(\"1\");\n      } else {\n        out.write(\"0\");\n      }\n\n    } catch (SQLException ex) {\n      out.write(ex.toString());\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6394, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()"], "initializationStart": [119], "initializationEnd": [143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 195, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.flush()"], "useStart": [224], "useEnd": [235], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/miracee/rasdaman/tree/master/applications/petascope/src/main/java/petascope/PetascopeInterface.java", "rawCode": "  private void printUsage(HttpServletResponse httpResponse, String request) throws IOException {\n    PrintWriter out = httpResponse.getWriter();\n    httpResponse.setContentType(\"text/html\");\n    out.write(usageMessage);\n    out.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6395, "initialization": ["PrintWriter printWriter = new PrintWriter(StringWriter)"], "initializationStart": [130], "initializationEnd": [149], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "(s)!=null", "guardType": "LOOP {", "guardExpressionStart": 251, "guardExpressionEnd": 293, "guardBlockStart": 251, "guardBlockEnd": 323, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 302, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jenkinsci/rubymetrics-plugin/tree/master/src/main/java/hudson/plugins/rubyMetrics/HtmlParser.java", "rawCode": "  protected String getHtml(InputStream input) throws IOException {\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n    String line;\n    while ((line = reader.readLine()) != null) {\n      pw.write(line);\n    }\n    return sw.toString();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6396, "initialization": ["PrintWriter printWriter = getPrintWriter()"], "initializationStart": [155], "initializationEnd": [171], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 2478, "focalAPIEnd": 2495, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/archive/action/SearchAdvancedAction.java", "rawCode": "  /** 高级查询 */\n  public String searchAdvanced() throws IOException {\n    // int totalRow=0; //总记录数\n    // String pageInfo=\"\"; //分页信息\n\n    PrintWriter out = getPrintWriter();\n    // 增加多媒体文件级表内容\n    List<SysTable> tableList = treeService.getTreeOfTable(treeid);\n    String tableName = \"\";\n    HashMap<String, String> fMap = null;\n    // 得到表名\n    for (int i = 0; i < tableList.size(); i++) {\n      if (tableList.get(i).getTabletype().equals(tableType)) {\n        tableName = tableList.get(i).getTablename();\n        // 权限字段\n        fMap = getDataAuthField(treeid, tableType);\n        break;\n      }\n    }\n    String fieldAuth_Sql = \"\"; // 权限字段Sql\n    if (fMap != null) {\n      Set<Map.Entry<String, String>> set = fMap.entrySet();\n      for (Iterator<Map.Entry<String, String>> it = set.iterator(); it.hasNext(); ) {\n        Map.Entry<String, String> entry = (Map.Entry<String, String>) it.next();\n        fieldAuth_Sql += \" AND \" + entry.getKey() + \"='\" + entry.getValue() + \"'\";\n        // System.out.println(entry.getKey() + \"--->\" + entry.getValue());\n      }\n    }\n    Gson gson = new Gson();\n    // 把json对象转成实体对象\n    List<QueryItem> retList =\n        gson.fromJson(groupitem, new TypeToken<List<QueryItem>>() {}.getType());\n\n    StringBuffer sql = new StringBuffer(); // 列表\n    sql.append(\"SELECT * FROM \" + tableName + \" WHERE 1=1 AND TREEID='\" + treeid + \"'\");\n    StringBuffer sql_count = new StringBuffer(); // 统计\n    sql_count.append(\n        \"SELECT COUNT(0) FROM \" + tableName + \" WHERE 1=1 AND TREEID='\" + treeid + \"'\");\n    for (QueryItem qt : retList) {\n      sql.append(\" AND \" + BaseSelector.getSql(qt.getOperatorType(), qt.getName(), qt.getValue()));\n      sql_count.append(\n          \" AND \" + BaseSelector.getSql(qt.getOperatorType(), qt.getName(), qt.getValue()));\n    }\n    if (!fieldAuth_Sql.equals(\"\")) {\n      sql.append(fieldAuth_Sql);\n      sql_count.append(fieldAuth_Sql);\n    }\n    // System.out.println(sql.toString());\n    // 总记录数\n    intRowCount = dynamicService.rowCount(sql_count.toString());\n    // 获得分页信息\n    // pageInfo=this.getPageInfoStr(totalRow, intPage, \"\", \"\");\n    intPageCount = this.getPageCount();\n\n    String result = \"var intPageCount = '\" + intPageCount + \"';\";\n    result = result + \"var tableName = '\" + tableName + \"';\";\n\n    List dynamicList =\n        dynamicService.selectBySql(\n            sql.toString(), this.getStartRec(intPage), this.getIntPageSize());\n    result += \"var dynamicList = \" + gson.toJson(dynamicList);\n\n    out.write(result);\n    return null;\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6397, "initialization": ["PrintWriter printWriter = HttpServletResponse.getWriter()", "String s = getScriptPath()"], "initializationStart": [2459, 3326], "initializationEnd": [2474, 3341], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 3570, "focalAPIEnd": 3589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)", "printWriter.write(String)"], "useStart": [3596, 3645, 3718, 4059, 4121, 4194, 4247, 4276, 4931, 4987, 5013, 5037, 5123, 5148, 5233, 5258, 5282, 5315, 5339, 5366, 5391, 5484, 5509, 5601, 5626, 5651, 5685, 5710, 5735, 5759, 5796], "useEnd": [3639, 3683, 4046, 4115, 4160, 4234, 4270, 4297, 4979, 5005, 5029, 5115, 5140, 5225, 5250, 5274, 5307, 5331, 5358, 5383, 5476, 5501, 5593, 5618, 5643, 5677, 5702, 5727, 5751, 5783, 5815], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sakai-mirror/portal/tree/master/portal-impl/impl/src/java/org/sakaiproject/portal/charon/CharonPortal.java", "rawCode": "  /** Output the content of the title frame for a tool. */\n  protected void includeTitle(\n      ActiveTool tool,\n      HttpServletRequest req,\n      HttpServletResponse res,\n      ToolConfiguration placement,\n      String skin,\n      String toolContextPath,\n      String toolPathInfo)\n      throws IOException {\n\n    // TODO: After 2.3 and the background document is modified - this may no\n    // longer be needed\n    // as the title is simply in the background document\n\n    res.setContentType(\"text/html; charset=UTF-8\");\n    res.addDateHeader(\"Expires\", System.currentTimeMillis() - (1000L * 60L * 60L * 24L * 365L));\n    res.addDateHeader(\"Last-Modified\", System.currentTimeMillis());\n    res.addHeader(\n        \"Cache-Control\",\n        \"no-store, no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0\");\n    res.addHeader(\"Pragma\", \"no-cache\");\n\n    if (skin == null || skin.length() == 0)\n      skin = ServerConfigurationService.getString(\"skin.default\");\n    String skinRepo = ServerConfigurationService.getString(\"skin.repo\");\n\n    // the title to display in the title frame\n    String toolTitle = Web.escapeHtml(placement.getTitle());\n\n    // for the reset button\n    String resetActionUrl = toolContextPath + \"?reset=true\";\n    boolean resetToolNow = \"true\".equals(req.getParameter(\"reset\"));\n    boolean showResetButton =\n        !\"false\".equals(placement.getConfig().getProperty(TOOLCONFIG_SHOW_RESET_BUTTON));\n\n    // for the help button\n    // get the help document ID from the tool config (tool registration\n    // usually).\n    // The help document ID defaults to the tool ID\n    boolean helpEnabledGlobally = ServerConfigurationService.getBoolean(\"display.help.icon\", true);\n    boolean helpEnabledInTool =\n        !\"false\".equals(placement.getConfig().getProperty(TOOLCONFIG_SHOW_HELP_BUTTON));\n    boolean showHelpButton = helpEnabledGlobally && helpEnabledInTool;\n\n    String helpActionUrl = \"\";\n    if (showHelpButton) {\n      String helpDocId = placement.getConfig().getProperty(TOOLCONFIG_HELP_DOCUMENT_ID);\n      String helpDocUrl = placement.getConfig().getProperty(TOOLCONFIG_HELP_DOCUMENT_URL);\n      if (helpDocUrl != null && helpDocUrl.length() > 0) {\n        helpActionUrl = helpDocUrl;\n      } else {\n        if (helpDocId == null || helpDocId.length() == 0) {\n          helpDocId = tool.getId();\n        }\n        helpActionUrl = ServerConfigurationService.getHelpUrl(helpDocId);\n      }\n    }\n\n    PrintWriter out = res.getWriter();\n\n    final String headHtml =\n        \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\"\n            + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">\\n\"\n            + \" <head>\\n\"\n            + \" <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\\n\"\n            + \" <link href=\\\"\"\n            + skinRepo\n            + \"/tool_base.css\\\" type=\\\"text/css\\\" rel=\\\"stylesheet\\\" media=\\\"all\\\" />\\n\"\n            + \" <link href=\\\"\"\n            + skinRepo\n            + \"/\"\n            + skin\n            + \"/tool.css\\\" type=\\\"text/css\\\" rel=\\\"stylesheet\\\" media=\\\"all\\\" />\\n\"\n            + \" <meta http-equiv=\\\"Content-Style-Type\\\" content=\\\"text/css\\\" />\\n\"\n            + \" <script type=\\\"text/javascript\\\" src=\\\"\"\n            + getScriptPath()\n            + \"headscripts.js\\\"></script>\\n\"\n            + \" <title>\"\n            + toolTitle\n            + \"</title>\\n\"\n            + \" </head>\\n\"\n            + \" <body>\\n\";\n    final String tailHtml = \"</body></html>\\n\";\n\n    out.write(headHtml);\n\n    out.write(\"<div class=\\\"portletTitle\\\">\\n\");\n    out.write(\"\\t<div class=\\\"title\\\">\\n\");\n    if (showResetButton) {\n      out.write(\n          \"\\t\\t<a href=\\\"\"\n              + resetActionUrl\n              + \"\\\" title=\\\"\"\n              + Web.escapeHtml(rb.getString(\"sit_reset\"))\n              + \"\\\"><img src=\\\"/library/image/transparent.gif\\\" alt=\\\"\"\n              + Web.escapeHtml(rb.getString(\"sit_reset\"))\n              + \"\\\" border=\\\"1\\\" /></a>\");\n    }\n\n    out.write(\"<h2>\" + toolTitle + \"\\n\" + \"\\t</h2></div>\\n\");\n    out.write(\"\\t<div class=\\\"action\\\">\\n\");\n    if (showHelpButton) {\n      out.write(makeHelpButton(helpActionUrl));\n    }\n\n    out.write(\"\\t</div>\\n\");\n    out.write(\"</div>\\n\");\n\n    if (resetToolNow) {\n      // cause main tool frame to be reset\n\n      // clear the session data associated with the tool - should reset\n      // the tool\n      Session s = SessionManager.getCurrentSession();\n      ToolSession ts = s.getToolSession(placement.getId());\n      ts.clearAttributes();\n\n      // redirect the main tool frame back to the initial tool URL.\n      String mainFrameId = Web.escapeJavascript(\"Main\" + placement.getId());\n      String mainFrameUrl =\n          ServerConfigurationService.getToolUrl()\n              + \"/\"\n              + Web.escapeUrl(placement.getId())\n              + \"?panel=Main\";\n\n      out.write(\"<script type=\\\"text/javascript\\\">\\n\");\n      out.write(\"try\\n\");\n      out.write(\"{\\n\");\n      out.write(\" if (parent.\" + mainFrameId + \".location.toString().length > 1)\\n\");\n      out.write(\" {\\n\");\n      out.write(\" parent.\" + mainFrameId + \".location = '\" + mainFrameUrl + \"';\\n\");\n      out.write(\" }\\n\");\n      out.write(\"}\\n\");\n      out.write(\"catch (e1)\\n\");\n      out.write(\"{\\n\");\n      out.write(\" try\\n\");\n      out.write(\" {\\n\");\n      out.write(\" if (parent.parent.\" + mainFrameId + \".location.toString().length > 1)\\n\");\n      out.write(\" {\\n\");\n      out.write(\" parent.parent.\" + mainFrameId + \".location = '\" + mainFrameUrl + \"';\\n\");\n      out.write(\" }\\n\");\n      out.write(\" }\\n\");\n      out.write(\" catch (e2)\\n\");\n      out.write(\" {\\n\");\n      out.write(\" }\\n\");\n      out.write(\"}\\n\");\n      out.write(\"</script>\\n\");\n    }\n\n    out.write(tailHtml);\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6398, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 323, "focalAPIEnd": 361, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)"], "useStart": [429], "useEnd": [456], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nickleus-j/StorySenseWeb/tree/master/StorySense/src/ajaxAdmin/RelationInserter.java", "rawCode": "  private void insertRelation(PrintWriter out, String c1, String rel, String c2) {\n    DAOFactory myDAOFactory = DAOFactory.getInstance(DAOFactory.MYSQL);\n    RelationDAO relationAccess = myDAOFactory.createRelationDAO();\n\n    /*if the relation is existing*/\n    if (relationAccess.RelationIsExisting(c1, c2, rel)) {\n      out.write(\"relation already existing\");\n    } else {\n      relationAccess.AddRelation(c1, c2, rel);\n      out.write(\"Relation Added\");\n    }\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6399, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 37, "focalAPIEnd": 54, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.flush()"], "useStart": [60, 84], "useEnd": [78, 98], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.9.0-RC1/src/lib/com/izforge/izpack/util/Console.java", "rawCode": "  public void eval(String str) {\n    inPipe.write(str);\n    inPipe.write(\"\\n\");\n    inPipe.flush();\n    console1.flush();\n  }\n"}, {"dataset": "printWriterWrite", "exampleID": 6400, "initialization": ["PrintWriter printWriter = new PrintWriter(*)"], "initializationStart": [264], "initializationEnd": [299], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = printWriter.write(s)", "focalAPIStart": 342, "focalAPIEnd": 360, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["printWriter.write(String)", "printWriter.close()"], "useStart": [368, 399], "useEnd": [387, 410], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maiklos/squirrel-sql/tree/master/sql12/fw/src/main/java/net/sourceforge/squirrel_sql/fw/util/IOUtilitiesImpl.java", "rawCode": "  /**\n   * @see net.sourceforge.squirrel_sql.fw.util.IOUtilities#writeLinesToFile(java.lang.String,\n   *     java.util.List)\n   */\n  @Override\n  public void writeLinesToFile(String filename, List<String> lines) throws FileNotFoundException {\n    PrintWriter out = new PrintWriter(new File(filename));\n    for (String outline : lines) {\n      out.write(outline);\n      out.write(NEW_LINE);\n    }\n    out.close();\n  }\n"}]