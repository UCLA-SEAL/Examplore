[{"dataset": "bundleGetString", "exampleID": 601, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getStringArrayList(String)"], "configurationStart": [152], "configurationEnd": [215], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 481, "focalAPIEnd": 529, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getDate(bundle,*)", "getSource(bundle)", "getDate(bundle,*)", "new AccessToken(value,*,List<String>,*,*)"], "useStart": [539, 648, 696, 456], "useEnd": [617, 686, 776, 777], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shi-314/AngryKings/tree/master/facebook/src/com/facebook/AccessToken.java", "rawCode": "  static AccessToken createFromCache(Bundle bundle) {\n    // Copy the list so we can guarantee immutable\n    List<String> originalPermissions =\n        bundle.getStringArrayList(TokenCachingStrategy.PERMISSIONS_KEY);\n    List<String> permissions;\n    if (originalPermissions == null) {\n      permissions = Collections.emptyList();\n    } else {\n      permissions = Collections.unmodifiableList(new ArrayList<String>(originalPermissions));\n    }\n\n    return new AccessToken(\n        bundle.getString(TokenCachingStrategy.TOKEN_KEY),\n        TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.EXPIRATION_DATE_KEY),\n        permissions,\n        TokenCachingStrategy.getSource(bundle),\n        TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY));\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 602, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1101, "focalAPIEnd": 1136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Email/tree/master/src/com/android/email/VendorPolicyLoader.java", "rawCode": "  /**\n   * Returns provider setup information for a given email address\n   *\n   * <p>Vendor function: Select: FIND_PROVIDER Param: FIND_PROVIDER (String) Result:\n   * FIND_PROVIDER_IN_URI FIND_PROVIDER_IN_USER FIND_PROVIDER_OUT_URI FIND_PROVIDER_OUT_USER\n   * FIND_PROVIDER_NOTE (optional - null is OK)\n   *\n   * <p>Note, if we get this far, we expect \"correct\" results from the policy method. But throwing\n   * checked exceptions requires a bunch of upstream changes, so we're going to catch them here and\n   * add logging. Other exceptions may escape here (such as null pointers) to fail fast.\n   *\n   * @param domain The domain portion of the user's email address\n   * @return suitable Provider definition, or null if no match found\n   */\n  public Provider findProviderForDomain(String domain) {\n    Bundle params = new Bundle();\n    params.putString(FIND_PROVIDER, domain);\n    Bundle out = getPolicy(FIND_PROVIDER, params);\n    if (out != null && !out.isEmpty()) {\n      Provider p = new Provider();\n      p.id = null;\n      p.label = null;\n      p.domain = domain;\n      p.incomingUriTemplate = out.getString(FIND_PROVIDER_IN_URI);\n      p.incomingUsernameTemplate = out.getString(FIND_PROVIDER_IN_USER);\n      p.outgoingUriTemplate = out.getString(FIND_PROVIDER_OUT_URI);\n      p.outgoingUsernameTemplate = out.getString(FIND_PROVIDER_OUT_USER);\n      p.note = out.getString(FIND_PROVIDER_NOTE);\n      return p;\n    }\n    return null;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 603, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getInt(String)"], "configurationStart": [476], "configurationEnd": [515], "guardCondition": "bundle!=null&&bundle.containsKey(DIALOG_STATE,)", "guardType": "IF {", "guardExpressionStart": 373, "guardExpressionEnd": 452, "guardBlockStart": 373, "guardBlockEnd": 1147, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 530, "focalAPIEnd": 570, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getBoolean(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)"], "useStart": [587, 648, 809, 921, 984], "useEnd": [629, 694, 850, 962, 1025], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_settings/tree/master/src/com/android/settings/IccLockSettings.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    if (Utils.isMonkeyRunning()) {\n      finish();\n      return;\n    }\n\n    addPreferencesFromResource(R.xml.sim_lock_settings);\n\n    mPinDialog = (EditPinPreference) findPreference(PIN_DIALOG);\n    mPinToggle = (CheckBoxPreference) findPreference(PIN_TOGGLE);\n    if (savedInstanceState != null && savedInstanceState.containsKey(DIALOG_STATE)) {\n      mDialogState = savedInstanceState.getInt(DIALOG_STATE);\n      mPin = savedInstanceState.getString(DIALOG_PIN);\n      mError = savedInstanceState.getString(DIALOG_ERROR);\n      mToState = savedInstanceState.getBoolean(ENABLE_TO_STATE);\n\n      // Restore inputted PIN code\n      switch (mDialogState) {\n        case ICC_NEW_MODE:\n          mOldPin = savedInstanceState.getString(OLD_PINCODE);\n          break;\n\n        case ICC_REENTER_MODE:\n          mOldPin = savedInstanceState.getString(OLD_PINCODE);\n          mNewPin = savedInstanceState.getString(NEW_PINCODE);\n          break;\n\n        case ICC_LOCK_MODE:\n        case ICC_OLD_MODE:\n        default:\n          break;\n      }\n    }\n\n    mPinDialog.setOnPinEnteredListener(this);\n\n    // Don't need any changes to be remembered\n    getPreferenceScreen().setPersistent(false);\n\n    mPhone = PhoneFactory.getDefaultPhone();\n    mRes = getResources();\n    updatePreferences();\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 604, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [241], "initializationEnd": [259], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 351, "focalAPIEnd": 378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/androidcook/Android-Cookbook-Examples/tree/master/GcmClient/src/com/darwinsys/gcmclient/GcmService.java", "rawCode": "  @Override\n  protected void onHandleIntent(Intent intent) {\n    String messageType = GoogleCloudMessaging.getInstance(this).getMessageType(intent);\n    Log.d(GcmMainActivity.TAG, \"Got a message of type \" + messageType);\n    Bundle extras = intent.getExtras();\n\n    if (messageType.equals(MESSAGE_TYPE_MESSAGE)) {\n      // GOOD\n      String message = extras.getString(\"message\");\n      Log.d(TAG, \"MESSAGE = '\" + message + \"' (\" + extras.toString() + \")\");\n    } else if (messageType.equals(MESSAGE_TYPE_SEND_ERROR)) {\n      Log.e(TAG, \"Error sending previous message (which is odd because we don't send any\");\n    } else if (messageType.equals(MESSAGE_TYPE_DELETED)) {\n      // Too many messages for you, server deleted some\n    }\n\n    GcmReceiver.completeWakefulIntent(intent);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 605, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 127, "guardExpressionEnd": 158, "guardBlockStart": 127, "guardBlockEnd": 229, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 178, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maxpower47/DeliciousDroid/tree/master/src/com/deliciousdroid/fragment/BrowseBookmarksFragment.java", "rawCode": "  @Override\n  public void onActivityCreated(Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n\n    if (savedInstanceState != null) {\n      username = savedInstanceState.getString(STATE_USERNAME);\n    }\n\n    base = (FragmentBaseActivity) getActivity();\n\n    setHasOptionsMenu(true);\n\n    mAdapter =\n        new SimpleCursorAdapter(\n            base,\n            R.layout.bookmark_view,\n            null,\n            new String[] {Bookmark.Description, Bookmark.Tags, Bookmark.Shared, Bookmark.Synced},\n            new int[] {\n              R.id.bookmark_description,\n              R.id.bookmark_tags,\n              R.id.bookmark_private,\n              R.id.bookmark_unsynced\n            },\n            0);\n\n    setListAdapter(mAdapter);\n    mAdapter.setViewBinder(new BookmarkViewBinder());\n\n    if (base.mAccount != null) {\n\n      getLoaderManager().initLoader(0, null, this);\n\n      lv = getListView();\n      lv.setTextFilterEnabled(true);\n      lv.setFastScrollEnabled(true);\n\n      lv.setItemsCanFocus(false);\n      lv.setChoiceMode(ListView.CHOICE_MODE_SINGLE);\n\n      lv.setOnItemClickListener(\n          new OnItemClickListener() {\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n              final Cursor c = (Cursor) lv.getItemAtPosition(position);\n              Bookmark b = BookmarkManager.CursorToBookmark(c);\n\n              if (base.defaultAction.equals(\"view\")) {\n                viewBookmark(b);\n              } else if (base.defaultAction.equals(\"read\")) {\n                readBookmark(b);\n              } else {\n                openBookmarkInBrowser(b);\n              }\n            }\n          });\n\n      /* Add Context-Menu listener to the ListView. */\n      lv.setOnCreateContextMenuListener(\n          new OnCreateContextMenuListener() {\n            public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n              menu.setHeaderTitle(\"Actions\");\n              MenuInflater inflater = base.getMenuInflater();\n\n              inflater.inflate(R.menu.browse_bookmark_context_menu_self, menu);\n            }\n          });\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 606, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null&&bundle.containsKey(\"commentIdAndType\",)", "guardType": "IF {", "guardExpressionStart": 545, "guardExpressionEnd": 630, "guardBlockStart": 545, "guardBlockEnd": 782, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 656, "focalAPIEnd": 699, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "bundle.getString(String)"], "useStart": [639, 727], "useEnd": [700, 775], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RyanLee7/redreader/tree/master/src/main/java/org/quantumbadger/redreader/activities/CommentEditActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n\n    PrefsUtility.applyTheme(this);\n\n    super.onCreate(savedInstanceState);\n\n    final LinearLayout layout = (LinearLayout) getLayoutInflater().inflate(R.layout.comment_edit);\n\n    textEdit = (EditText) layout.findViewById(R.id.comment_reply_text);\n\n    if (getIntent() != null && getIntent().hasExtra(\"commentIdAndType\")) {\n      commentIdAndType = getIntent().getStringExtra(\"commentIdAndType\");\n      textEdit.setText(getIntent().getStringExtra(\"commentText\"));\n\n    } else if (savedInstanceState != null && savedInstanceState.containsKey(\"commentIdAndType\")) {\n      textEdit.setText(savedInstanceState.getString(\"commentText\"));\n      commentIdAndType = savedInstanceState.getString(\"commentIdAndType\");\n    }\n\n    final ScrollView sv = new ScrollView(this);\n    sv.addView(layout);\n    setContentView(sv);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 607, "initialization": ["Bundle bundle = Message.getData()"], "initializationStart": [125], "initializationEnd": [138], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 164, "focalAPIEnd": 183, "followUpCheck": "value.equals(\"WAITINGROOM\")", "checkType": "IF", "followUpCheckExpressionStart": 196, "followUpCheckExpressionEnd": 227, "followUpCheckBlockStart": 196, "followUpCheckBlockEnd": 545, "use": ["updateWaitingRoom(bundle)"], "useStart": [242], "useEnd": [262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/m13/DisTetris/tree/master/src/games/distetris/presentation/JoinGameWaiting.java", "rawCode": "        @Override\n        public void handleMessage(Message msg) {\n          super.handleMessage(msg);\n\n          Bundle b = msg.getData();\n          String type = b.getString(\"type\");\n\n          if (type.equals(\"WAITINGROOM\")) {\n            updateWaitingRoom(b);\n          } else if (type.equals(\"STARTGAME\")) {\n            startGame();\n          } else if (type.equals(\"SHUTDOWN\")) {\n            Toast.makeText(getBaseContext(), \"The server closed the connection\", Toast.LENGTH_SHORT)\n                .show();\n            finish();\n          }\n        }\n"}, {"dataset": "bundleGetString", "exampleID": 608, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 92, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseBoolean(value)"], "useStart": [150], "useEnd": [181], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/test-runner/src/android/test/InstrumentationTestRunner.java", "rawCode": "  private boolean getBooleanArgument(Bundle arguments, String tag) {\n    String tagString = arguments.getString(tag);\n    return tagString != null && Boolean.parseBoolean(tagString);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 609, "initialization": ["Bundle bundle = getExtras()"], "initializationStart": [491], "initializationEnd": [509], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 526, "guardExpressionEnd": 545, "guardBlockStart": 526, "guardBlockEnd": 895, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 566, "focalAPIEnd": 590, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_Phone/tree/master/src/com/android/phone/EditFdnContactScreen.java", "rawCode": "  /**\n   * We now want to bring up the pin request screen AFTER the contact information is displayed, to\n   * help with user experience.\n   *\n   * <p>Also, process the results from the contact picker.\n   */\n  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent intent) {\n    if (DBG) log(\"onActivityResult request:\" + requestCode + \" result:\" + resultCode);\n\n    switch (requestCode) {\n      case PIN2_REQUEST_CODE:\n        Bundle extras = (intent != null) ? intent.getExtras() : null;\n        if (extras != null) {\n          mPin2 = extras.getString(\"pin2\");\n          if (mAddContact) {\n            addContact();\n          } else {\n            updateContact();\n          }\n        } else if (resultCode != RESULT_OK) {\n          // if they cancelled, then we just cancel too.\n          if (DBG) log(\"onActivityResult: cancelled.\");\n          finish();\n        }\n        break;\n\n        // look for the data associated with this number, and update\n        // the display with it.\n      case CONTACTS_PICKER_CODE:\n        if (resultCode != RESULT_OK) {\n          if (DBG) log(\"onActivityResult: cancelled.\");\n          return;\n        }\n        Cursor cursor =\n            getContentResolver().query(intent.getData(), NUM_PROJECTION, null, null, null);\n        if ((cursor == null) || (!cursor.moveToFirst())) {\n          Log.w(LOG_TAG, \"onActivityResult: bad contact data, no results found.\");\n          return;\n        }\n        mNameField.setText(cursor.getString(0));\n        mNumberField.setText(cursor.getString(1));\n        break;\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 610, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getInt(String,int)"], "configurationStart": [131], "configurationEnd": [170], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 190, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cens/ohmagePhone/tree/master/src/org/ohmage/triggers/types/location/LocTrigSettingsActivity.java", "rawCode": "  @Override\n  protected void onRestoreInstanceState(Bundle state) {\n    super.onRestoreInstanceState(state);\n\n    mDialogCategId = state.getInt(KEY_SAVE_DIALOG_CATEG, -1);\n    mDialogText = state.getString(KEY_SAVE_DIALOG_TEXT);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 611, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle.containsKey(key,) && bundle!=null", "guardType": "IF {", "guardExpressionStart": 170, "guardExpressionEnd": 190, "guardBlockStart": 170, "guardBlockEnd": 397, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 264, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setUserId(value)", "bundle.getBoolean(String,boolean)"], "useStart": [254, 333], "useEnd": [302, 389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sgattani/Group-Project/tree/master/FacebookSDK/src/com/facebook/widget/FriendPickerFragment.java", "rawCode": "  private void setFriendPickerSettingsFromBundle(Bundle inState) {\n    // We do this in a separate non-overridable method so it is safe to call from the constructor.\n    if (inState != null) {\n      if (inState.containsKey(USER_ID_BUNDLE_KEY)) {\n        setUserId(inState.getString(USER_ID_BUNDLE_KEY));\n      }\n      setMultiSelect(inState.getBoolean(MULTI_SELECT_BUNDLE_KEY, multiSelect));\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 612, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getParcelable(String)", "bundle.getParcelable(String)"], "configurationStart": [104, 180], "configurationEnd": [158, 235], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 255, "focalAPIEnd": 305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)"], "useStart": [319], "useEnd": [362], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mycelial/csip/tree/master/CSipSimple/src/com/csipsimple/utils/CallHandlerPlugin.java", "rawCode": "  public void fillWith(String packageName, Bundle resolvedInfos) {\n\n    pendingIntent = (PendingIntent) resolvedInfos.getParcelable(EXTRA_REMOTE_INTENT_TOKEN);\n    icon = (Bitmap) resolvedInfos.getParcelable(Intent.EXTRA_SHORTCUT_ICON);\n    nextExclude = resolvedInfos.getString(Intent.EXTRA_PHONE_NUMBER);\n    label = resolvedInfos.getString(Intent.EXTRA_TITLE);\n    if (TextUtils.isEmpty(label)) {\n      if (AVAILABLE_HANDLERS != null && AVAILABLE_HANDLERS.containsKey(packageName)) {\n        label = AVAILABLE_HANDLERS.get(packageName);\n      }\n    }\n\n    accountId = getAccountIdForCallHandler(context, packageName);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 613, "initialization": ["Bundle bundle = Message.getData()"], "initializationStart": [143], "initializationEnd": [160], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 187, "focalAPIEnd": 237, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 245, "followUpCheckExpressionEnd": 267, "followUpCheckBlockStart": 245, "followUpCheckBlockEnd": 342, "use": ["callback(bundle)"], "useStart": [317], "useEnd": [333], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/imkevinxu/totoro/tree/master/facebook-android-sdk-3.0/facebook/src/com/facebook/GetTokenClient.java", "rawCode": "  private void handleMessage(Message message) {\n    if (message.what == NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REPLY) {\n      Bundle extras = message.getData();\n      String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);\n      if (errorType != null) {\n        callback(null);\n      } else {\n        callback(extras);\n      }\n      context.unbindService(this);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 614, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 275, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getInt(String)", "bundle.getInt(String)", "bundle.getInt(String)"], "useStart": [916, 973, 1044, 1141], "useEnd": [944, 999, 1097, 1186], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/slauson/Dodger/tree/master/src/com/slauson/asteroid_dasher/menu/UpgradesMenu.java", "rawCode": "  @Override\n  public Dialog onCreateDialog(int id, Bundle args) {\n\n    Dialog dialog = null;\n    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\n\n    switch (id) {\n      case DIALOG_NOT_ENOUGH_POINTS:\n\n        // get args\n        final String title = args.getString(DIALOG_TITLE);\n\n        alertDialogBuilder\n            .setTitle(\"Not Enough Points\")\n            .setMessage(\"You do not have enough points to unlock the \" + title + \" powerup.\")\n            .setPositiveButton(\n                \"OK\",\n                new DialogInterface.OnClickListener() {\n                  public void onClick(DialogInterface dialog, int which) {\n                    removeDialog(DIALOG_NOT_ENOUGH_POINTS);\n                  }\n                });\n\n        dialog = alertDialogBuilder.create();\n\n        break;\n      case DIALOG_CONFIRM_POWERUP_UNLOCK:\n\n        // get args\n        final String unlockTitle = args.getString(DIALOG_TITLE);\n        final int points = args.getInt(DIALOG_POINTS);\n        final int powerupUnlockUpgradeID = args.getInt(DIALOG_CONFIRM_POWERUP_UNLOCK_UPGRADE_ID);\n        final int powerupUnlockButtonID = args.getInt(DIALOG_CONFIRM_POWERUP_BUTTON_ID);\n\n        alertDialogBuilder\n            .setTitle(\"Confirm Powerup\")\n            .setMessage(\n                \"Are you sure you want to unlock the \"\n                    + unlockTitle\n                    + \" powerup for \"\n                    + Util.getPointsString(points)\n                    + \" points?\")\n\n            // do nothing when user selects no\n            .setNegativeButton(\n                \"No\",\n                new DialogInterface.OnClickListener() {\n                  public void onClick(DialogInterface dialog, int which) {\n                    removeDialog(DIALOG_CONFIRM_POWERUP_UNLOCK);\n                  }\n                })\n            .setPositiveButton(\n                \"Yes\",\n                new DialogInterface.OnClickListener() {\n\n                  public void onClick(DialogInterface dialog, int which) {\n                    // set upgrade level\n                    Upgrade upgrade = Upgrades.getUpgrade(powerupUnlockUpgradeID);\n\n                    // this should never happen...\n                    if (upgrade == null) {\n                      return;\n                    }\n\n                    upgrade.setLevel(Upgrades.POWERUP_UNLOCKED);\n\n                    // update button text\n                    Button button = (Button) findViewById(powerupUnlockButtonID);\n                    button.setText(button.getText().toString().replaceAll(\"-.*\", \"\"));\n                    toggleButtonColor(button, upgrade.isEnabled());\n                    toggleButtonText(button);\n\n                    // update points\n                    Points.update(-points);\n\n                    // update points spent\n                    GlobalStatistics.getInstance().pointsSpent += points;\n\n                    // update points textview\n                    pointsView.setText(Points.getNumPoints() + \" points\");\n\n                    // save state\n                    upgrade.save(sharedPreferencesEditor);\n                    Points.save(sharedPreferencesEditor);\n                    GlobalStatistics.save(sharedPreferencesEditor);\n                    sharedPreferencesEditor.commit();\n\n                    // remove dialog so that we can change message/title\n                    removeDialog(DIALOG_CONFIRM_POWERUP_UNLOCK);\n                  }\n                });\n\n        dialog = alertDialogBuilder.create();\n        break;\n      case DIALOG_MINIMUM_POWERUPS_SELECTED:\n        alertDialogBuilder\n            .setTitle(\"Unable to Deselect\")\n            .setMessage(\n                \"You need to have at least \"\n                    + Upgrades.POWERUP_PICKER_MIN_POWERUPS\n                    + \" powerups enabled.\")\n            .setPositiveButton(\n                \"OK\",\n                new DialogInterface.OnClickListener() {\n                  public void onClick(DialogInterface dialog, int which) {\n                    removeDialog(DIALOG_NOT_ENOUGH_POINTS);\n                  }\n                });\n\n        dialog = alertDialogBuilder.create();\n\n        break;\n      default:\n        dialog = null;\n    }\n\n    return dialog;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 615, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 400, "focalAPIEnd": 453, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/androideveloper/RAVA-Voting/tree/master/RavaVotingAndroid/libraries/facebook/src/com/facebook/widget/FacebookDialog.java", "rawCode": "  /**\n   * Returns the gesture with which the user completed the native dialog. This is only returned if\n   * the user has previously authorized the calling app with basic permissions.\n   *\n   * @param result the bundle passed back to onActivityResult\n   * @return \"post\" or \"cancel\" as the completion gesture\n   */\n  public static String getNativeDialogCompletionGesture(Bundle result) {\n    return result.getString(EXTRA_DIALOG_COMPLETION_GESTURE_KEY);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 616, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 47, "focalAPIEnd": 79, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_Mms/tree/master/src/com/android/mms/transaction/TransactionBundle.java", "rawCode": "  public String getProxyAddress() {\n    return mBundle.getString(PROXY_ADDRESS);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 617, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 400, "focalAPIEnd": 453, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thiendamvam/WhyQ/tree/master/Code/libs/facebook/src/com/facebook/widget/FacebookDialog.java", "rawCode": "  /**\n   * Returns the gesture with which the user completed the native dialog. This is only returned if\n   * the user has previously authorized the calling app with basic permissions.\n   *\n   * @param result the bundle passed back to onActivityResult\n   * @return \"post\" or \"cancel\" as the completion gesture\n   */\n  public static String getNativeDialogCompletionGesture(Bundle result) {\n    return result.getString(EXTRA_DIALOG_COMPLETION_GESTURE_KEY);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 618, "initialization": ["Bundle bundle = getBundleExtra(*)"], "initializationStart": [1373], "initializationEnd": [1415], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 1423, "guardExpressionEnd": 1442, "guardBlockStart": 1423, "guardBlockEnd": 2904, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1468, "focalAPIEnd": 1522, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "singleton(value)", "bundle.getFloat(String,*)", "bundle.getFloat(String,*)"], "useStart": [1554, 1638, 1867, 2091, 2165, 2223, 2456, 3163, 3230], "useEnd": [1611, 1694, 1907, 2131, 2199, 2258, 2483, 3202, 3270], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aaujon/Inventirap/tree/master/iOS/zxing/android/src/com/google/zxing/client/android/encode/QRCodeEncoder.java", "rawCode": "  private void encodeQRCodeContents(Intent intent, String type) {\n    if (type.equals(Contents.Type.TEXT)) {\n      String data = intent.getStringExtra(Intents.Encode.DATA);\n      if (data != null && data.length() > 0) {\n        contents = data;\n        displayContents = data;\n        title = activity.getString(R.string.contents_text);\n      }\n    } else if (type.equals(Contents.Type.EMAIL)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"mailto:\" + data;\n        displayContents = data;\n        title = activity.getString(R.string.contents_email);\n      }\n    } else if (type.equals(Contents.Type.PHONE)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"tel:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(R.string.contents_phone);\n      }\n    } else if (type.equals(Contents.Type.SMS)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"sms:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(R.string.contents_sms);\n      }\n    } else if (type.equals(Contents.Type.CONTACT)) {\n\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n\n        String name = bundle.getString(ContactsContract.Intents.Insert.NAME);\n        String organization = bundle.getString(ContactsContract.Intents.Insert.COMPANY);\n        String address = bundle.getString(ContactsContract.Intents.Insert.POSTAL);\n        Collection<String> phones = new ArrayList<String>(Contents.PHONE_KEYS.length);\n        for (int x = 0; x < Contents.PHONE_KEYS.length; x++) {\n          phones.add(bundle.getString(Contents.PHONE_KEYS[x]));\n        }\n        Collection<String> emails = new ArrayList<String>(Contents.EMAIL_KEYS.length);\n        for (int x = 0; x < Contents.EMAIL_KEYS.length; x++) {\n          emails.add(bundle.getString(Contents.EMAIL_KEYS[x]));\n        }\n        String url = bundle.getString(Contents.URL_KEY);\n        String note = bundle.getString(Contents.NOTE_KEY);\n\n        ContactEncoder mecardEncoder =\n            useVCard ? new VCardContactEncoder() : new MECARDContactEncoder();\n        String[] encoded =\n            mecardEncoder.encode(\n                Collections.singleton(name),\n                organization,\n                Collections.singleton(address),\n                phones,\n                emails,\n                url,\n                note);\n        // Make sure we've encoded at least one field.\n        if (encoded[1].length() > 0) {\n          contents = encoded[0];\n          displayContents = encoded[1];\n          title = activity.getString(R.string.contents_contact);\n        }\n      }\n\n    } else if (type.equals(Contents.Type.LOCATION)) {\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n        // These must use Bundle.getFloat(), not getDouble(), it's part of the API.\n        float latitude = bundle.getFloat(\"LAT\", Float.MAX_VALUE);\n        float longitude = bundle.getFloat(\"LONG\", Float.MAX_VALUE);\n        if (latitude != Float.MAX_VALUE && longitude != Float.MAX_VALUE) {\n          contents = \"geo:\" + latitude + ',' + longitude;\n          displayContents = latitude + \",\" + longitude;\n          title = activity.getString(R.string.contents_location);\n        }\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 619, "initialization": ["Bundle bundle = getIntent()"], "initializationStart": [65], "initializationEnd": [76], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 121, "guardExpressionEnd": 141, "guardBlockStart": 121, "guardBlockEnd": 212, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 163, "focalAPIEnd": 205, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.putString(String,String)"], "useStart": [321], "useEnd": [388], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BreakingBytes/SifterReader/tree/master/src/com/BreakingBytes/SifterReader/IssuesActivity.java", "rawCode": "  private Bundle doMySearch(String query) {\n    Bundle appData = getIntent().getBundleExtra(SearchManager.APP_DATA);\n    if (appData != null) {\n      mIssuesURL = appData.getString(SifterReader.ISSUES_URL);\n    }\n    String pageURL = mIssuesURL + \"?q=\" + query;\n    JSONObject sifterJSONObject = changePage(pageURL);\n    appData.putString(SifterReader.ISSUES, sifterJSONObject.toString());\n    return appData;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 620, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null&&bundle.containsKey(key,)", "guardType": "IF {", "guardExpressionStart": 1608, "guardExpressionEnd": 1685, "guardBlockStart": 1608, "guardBlockEnd": 1816, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1768, "focalAPIEnd": 1808, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)"], "useStart": [1757], "useEnd": [1809], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmwenda/ODKCollect/tree/master/src/org/odk/collect/android/activities/FormManagerList.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.form_manage_list);\n\n    mDeleteButton = (Button) findViewById(R.id.delete_button);\n    mDeleteButton.setText(getString(R.string.delete_file));\n    mDeleteButton.setOnClickListener(\n        new OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            Collect.getInstance()\n                .getActivityLogger()\n                .logAction(this, \"deleteButton\", Integer.toString(mSelected.size()));\n\n            if (mSelected.size() > 0) {\n              createDeleteFormsDialog();\n            } else {\n              Toast.makeText(getApplicationContext(), R.string.noselect_error, Toast.LENGTH_SHORT)\n                  .show();\n            }\n          }\n        });\n\n    String sortOrder = FormsColumns.DISPLAY_NAME + \" ASC, \" + FormsColumns.JR_VERSION + \" DESC\";\n    Cursor c = managedQuery(FormsColumns.CONTENT_URI, null, null, null, sortOrder);\n\n    String[] data =\n        new String[] {\n          FormsColumns.DISPLAY_NAME, FormsColumns.DISPLAY_SUBTEXT, FormsColumns.JR_VERSION\n        };\n    int[] view = new int[] {R.id.text1, R.id.text2, R.id.text3};\n\n    // render total instance view\n    mInstances =\n        new VersionHidingCursorAdapter(\n            FormsColumns.JR_VERSION, this, R.layout.two_item_multiple_choice, c, data, view);\n    setListAdapter(mInstances);\n    getListView().setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);\n    getListView().setItemsCanFocus(false);\n    mDeleteButton.setEnabled(!(mSelected.size() == 0));\n\n    if (savedInstanceState != null && savedInstanceState.containsKey(syncMsgKey)) {\n      TextView tv = (TextView) findViewById(R.id.status_text);\n      tv.setText(savedInstanceState.getString(syncMsgKey));\n    }\n\n    mBackgroundTasks = (BackgroundTasks) getLastNonConfigurationInstance();\n    if (mBackgroundTasks == null) {\n      mBackgroundTasks = new BackgroundTasks();\n      mBackgroundTasks.mDiskSyncTask = new DiskSyncTask();\n      mBackgroundTasks.mDiskSyncTask.setDiskSyncListener(this);\n      mBackgroundTasks.mDiskSyncTask.execute((Void[]) null);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 621, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 139, "focalAPIEnd": 169, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["processUri(value)"], "useStart": [176], "useEnd": [197], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/minstrelsy/servestream/tree/master/src/net/sourceforge/servestream/fragment/UrlListFragment.java", "rawCode": "  public void refresh(Bundle args) {\n    // If the intent is a request to create a shortcut, we'll do that and exit\n    String targetUri = args.getString(ARG_TARGET_URI);\n\n    processUri(targetUri);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 622, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getBoolean(String)", "bundle.getBoolean(String)", "bundle.getBoolean(String)", "bundle.getBoolean(String)", "bundle.getBoolean(String)", "bundle.getBoolean(String)", "bundle.getInt(String)", "bundle.getInt(String)", "bundle.getBoolean(String)", "bundle.getBoolean(String)"], "configurationStart": [139, 224, 300, 372, 434, 505, 592, 662, 732, 805], "configurationEnd": [196, 271, 348, 414, 472, 557, 633, 706, 776, 852], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 57, "guardExpressionEnd": 80, "guardBlockStart": 57, "guardBlockEnd": 102, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 873, "focalAPIEnd": 911, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getInt(String)", "bundle.getBoolean(String)", "bundle.getParcelable(String)"], "useStart": [941, 1005, 1129], "useEnd": [986, 1042, 1169], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Contacts/tree/master/src/com/android/contacts/list/ContactEntryListFragment.java", "rawCode": "  public void restoreSavedState(Bundle savedState) {\n    if (savedState == null) {\n      return;\n    }\n\n    mSectionHeaderDisplayEnabled = savedState.getBoolean(KEY_SECTION_HEADER_DISPLAY_ENABLED);\n    mPhotoLoaderEnabled = savedState.getBoolean(KEY_PHOTO_LOADER_ENABLED);\n    mQuickContactEnabled = savedState.getBoolean(KEY_QUICK_CONTACT_ENABLED);\n    mIncludeProfile = savedState.getBoolean(KEY_INCLUDE_PROFILE);\n    mSearchMode = savedState.getBoolean(KEY_SEARCH_MODE);\n    mVisibleScrollbarEnabled = savedState.getBoolean(KEY_VISIBLE_SCROLLBAR_ENABLED);\n    mVerticalScrollbarPosition = savedState.getInt(KEY_SCROLLBAR_POSITION);\n    mDirectorySearchMode = savedState.getInt(KEY_DIRECTORY_SEARCH_MODE);\n    mSelectionVisible = savedState.getBoolean(KEY_SELECTION_VISIBLE);\n    mLegacyCompatibility = savedState.getBoolean(KEY_LEGACY_COMPATIBILITY);\n    mQueryString = savedState.getString(KEY_QUERY_STRING);\n    mDirectoryResultLimit = savedState.getInt(KEY_DIRECTORY_RESULT_LIMIT);\n    mDarkTheme = savedState.getBoolean(KEY_DARK_THEME);\n\n    // Retrieve list state. This will be applied in onLoadFinished\n    mListState = savedState.getParcelable(KEY_LIST_STATE);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 623, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [350], "initializationEnd": [368], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["ContextLogger3Probe.getClassName()", "e(*,String,*)"], "tryExpressionStart": 583, "tryExpressionEnd": 587, "tryBlockStart": 583, "tryBlockEnd": 787, "catchExpressionStart": 659, "catchExpressionEnd": 679, "catchBlockStart": 659, "catchBlockEnd": 787, "exceptionHandlingCallStart": [705, 699], "exceptionHandlingCallEnd": [726, 768], "configuration": ["bundle.keySet()"], "configurationStart": [512], "configurationEnd": [527], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 418, "guardExpressionEnd": 437, "guardBlockStart": 418, "guardBlockEnd": 817, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 619, "focalAPIEnd": 638, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(*,value)"], "useStart": [607], "useEnd": [639], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apps8os/contextlogger3/tree/master/clientframework/src/org/apps8os/contextlogger3/android/clientframework/probe/ContextLogger3Probe.java", "rawCode": "    @Override\n    public void onReceive(Context context, Intent intent) {\n      final String action = intent.getAction();\n      if ((mProbe != null) && !TextUtils.isEmpty(action)) {\n        try {\n          if (action.equals(mProbe.getIntentAction())) {\n            Log.i(mProbe.getClassName(), \"Probe data is coming...\");\n            Bundle bundle = intent.getExtras();\n            JSONObject json = null;\n            if (bundle != null) {\n              json = new JSONObject();\n              Set<String> keys = bundle.keySet();\n              for (String k : keys) {\n                try {\n                  json.put(k, bundle.getString(k));\n                } catch (Exception e) {\n                  Log.e(mProbe.getClassName(), \"Probe data handing error in loop: \", e);\n                }\n              }\n            }\n            if (json != null) {\n              JsonParser parser = new JsonParser();\n              JsonObject data = (JsonObject) parser.parse(json.toString());\n              mProbe.sendData(data);\n              Log.i(mProbe.getClassName(), \"Probe data: \" + json.toString());\n            }\n          }\n        } catch (Exception e) {\n          Log.e(mProbe.getClassName(), \"Probe data handing error: \", e);\n        }\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 624, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [1180], "initializationEnd": [1200], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1224, "focalAPIEnd": 1251, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "findResident(RuntimeExceptionDao<Resident,value,String)"], "useStart": [1585, 1793], "useEnd": [1619, 1839], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nutsiepully/medmanage/tree/master/src/org/vcs/medmanage/MedicationListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_medication_list);\n\n    if (findViewById(R.id.medication_detail_container) != null) {\n      // The detail container view will be present only in the\n      // large-screen layouts (res/values-large and\n      // res/values-sw600dp). If this view is present, then the\n      // activity should be in two-pane mode.\n      mTwoPane = true;\n\n      // In two-pane mode, list items should be given the\n      // 'activated' state when touched.\n      ((MedicationListFragment) getSupportFragmentManager().findFragmentById(R.id.medication_list))\n          .setActivateOnItemClick(true);\n    }\n\n    // Set the action bar back button because it's nice\n    getActionBar().setHomeButtonEnabled(true);\n    getActionBar().setDisplayHomeAsUpEnabled(true);\n\n    String residentToGet = new String();\n    Intent inIntent = getIntent();\n    if (inIntent.hasExtra(\"resName\")) {\n      // If we got here during normal application usage, there will be\n      // a resident attached as an extra, which we should get from\n      // the database.\n      Bundle extras = inIntent.getExtras();\n      residentToGet = extras.getString(\"resName\");\n    } else { // If there wasn't a matching key in the intent, then this page\n      // was probably navigated to during testing. In that case, we\n      // just use a default Resident.\n      residentToGet = \"James Cooper\";\n    }\n    if (inIntent.hasExtra(\"MedicationName\")) {\n      Bundle extras = inIntent.getExtras();\n      inMed = extras.getString(\"MedicationName\");\n    }\n\n    // Get a reference to the DB the hard way\n    RuntimeExceptionDao<Resident, Integer> dao = getHelper().getResidentDataDao();\n    List<Resident> foundResidents = ResidentUtils.findResident(dao, residentToGet);\n    if (foundResidents.size() > 0) {\n      currentResident = foundResidents.get(0);\n\n      // Set the actionbar title to reflect the current resident\n      setTitle(currentResident.getName() + \"'s Medication\");\n\n      // Builds display for list fragment\n      Bundle arguments = new Bundle();\n      arguments.putInt(\"ResidentId\", currentResident.getResident_id());\n      arguments.putString(\"MedicationName\", inMed);\n      MedicationListFragment fragment = new MedicationListFragment();\n      fragment.setArguments(arguments);\n      getSupportFragmentManager()\n          .beginTransaction()\n          .replace(R.id.medication_list, fragment)\n          .commit();\n\n      // Made a bad decision trying fragments, so we have to be ugly and\n      // get medication twice. Here we get medication\n      RuntimeExceptionDao<Medication, Integer> medDao = getHelper().getMedicationDataDao();\n      RuntimeExceptionDao<ResidentMedication, Integer> medsDao =\n          getHelper().getResidentMedicationDataDao();\n      MedicationUtils medUtils = new MedicationUtils(medDao);\n      medsList = medUtils.getMedicationForResident(currentResident);\n\n      setupUI();\n    } else {\n      Toast.makeText(getBaseContext(), \"Failed to find james cooper?\", Toast.LENGTH_LONG).show();\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 625, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 368, "guardExpressionEnd": 387, "guardBlockStart": 368, "guardBlockEnd": 415, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 436, "focalAPIEnd": 463, "followUpCheck": "(value == null) || (value.length() == 0)", "checkType": "IF", "followUpCheckExpressionStart": 469, "followUpCheckExpressionEnd": 514, "followUpCheckBlockStart": 469, "followUpCheckBlockEnd": 542, "use": ["bundle.getLong(String,int)"], "useStart": [575], "useEnd": [614], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/higepon/Lovamimi-For-Android/tree/master/libs/facebook-android-sdk-3.6.0/facebook/src/com/facebook/TokenCachingStrategy.java", "rawCode": "  /**\n   * Returns a boolean indicating whether a Bundle contains properties that could be a valid saved\n   * token.\n   *\n   * @param bundle A Bundle to check for token information.\n   * @return a boolean indicating whether a Bundle contains properties that could be a valid saved\n   *     token.\n   */\n  public static boolean hasTokenInformation(Bundle bundle) {\n    if (bundle == null) {\n      return false;\n    }\n\n    String token = bundle.getString(TOKEN_KEY);\n    if ((token == null) || (token.length() == 0)) {\n      return false;\n    }\n\n    long expiresMilliseconds = bundle.getLong(EXPIRATION_DATE_KEY, 0L);\n    if (expiresMilliseconds == 0L) {\n      return false;\n    }\n\n    return true;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 626, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [395], "initializationEnd": [408], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 444, "focalAPIEnd": 477, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TextView.setText(value)"], "useStart": [561], "useEnd": [599], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vesnell/TabHero/tree/master/src/pl/tabhero/net/SearchTitleActivity.java", "rawCode": "  @SuppressWarnings(\"deprecation\")\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.searchtitle);\n\n    chordsUrl = getString(R.string.chordsUrl);\n\n    device.setHomeButtonEnabledForICS();\n\n    FileUtils fileUtils = new FileUtils(this);\n    fileUtils.fillUIFromPreferences();\n\n    Intent i = getIntent();\n    Bundle extras = i.getExtras();\n\n    final String performerName = extras.getString(\"performerName\");\n    TextView chosenPerformer = (TextView) findViewById(R.id.chosenPerformer);\n    chosenPerformer.setText(performerName);\n\n    editTitle = (EditText) findViewById(R.id.editTitle);\n    btnTitleSearch = (ImageButton) findViewById(R.id.searchTitleBtn);\n    searchListView = (ListView) findViewById(R.id.searchTitleListView);\n\n    InputFilter filter = new MyFilter();\n    editTitle.setFilters(new InputFilter[] {filter});\n\n    TextView.OnEditorActionListener myEditorKeyActions = new MyEditorKeyActions(btnTitleSearch);\n    editTitle.setOnEditorActionListener(myEditorKeyActions);\n\n    gestureDetector = new GestureDetector(new MyGestureDetector(this));\n\n    OnTouchListener myOnTouchListener = new MyOnTouchListener(gestureDetector);\n    searchListView.setOnTouchListener(myOnTouchListener);\n\n    // AlertDialog info with checkbox \"dont show again\" about how to find all available titles\n    MenuFunctions menuFunc = new MenuFunctions(this);\n    menuFunc.searchTitleRun();\n\n    new MyLayout(this).customizeFastScroller(searchListView);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 627, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 753, "focalAPIEnd": 789, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/PowerUsageDetail.java", "rawCode": "  private void reportBatteryUse() {\n    if (mPackages == null) return;\n\n    ApplicationErrorReport report = new ApplicationErrorReport();\n    report.type = ApplicationErrorReport.TYPE_BATTERY;\n    report.packageName = mPackages[0];\n    report.installerPackageName = mInstaller.getPackageName();\n    report.processName = mPackages[0];\n    report.time = System.currentTimeMillis();\n    report.systemApp = (mApp.flags & ApplicationInfo.FLAG_SYSTEM) != 0;\n\n    final Bundle args = getArguments();\n    ApplicationErrorReport.BatteryInfo batteryInfo = new ApplicationErrorReport.BatteryInfo();\n    batteryInfo.usagePercent = args.getInt(EXTRA_PERCENT, 1);\n    batteryInfo.durationMicros = args.getLong(EXTRA_USAGE_DURATION, 0);\n    batteryInfo.usageDetails = args.getString(EXTRA_REPORT_DETAILS);\n    batteryInfo.checkinDetails = args.getString(EXTRA_REPORT_CHECKIN_DETAILS);\n    report.batteryInfo = batteryInfo;\n\n    Intent result = new Intent(Intent.ACTION_APP_ERROR);\n    result.setComponent(mInstaller);\n    result.putExtra(Intent.EXTRA_BUG_REPORT, report);\n    result.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    startActivity(result);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 628, "initialization": ["Bundle bundle = getArguments()"], "initializationStart": [225], "initializationEnd": [239], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 346, "focalAPIEnd": 371, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "bundle.getString(String)", "bundle.getString(String)"], "useStart": [333, 472, 597], "useEnd": [372, 496, 621], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jwlawson/Nof1/tree/master/Nof1/src/org/nof1trial/nof1/fragments/RadioFragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n    View view = inflater.inflate(R.layout.row_layout_data_radio, container, false);\n\n    Bundle args = getArguments();\n\n    TextView text = (TextView) view.findViewById(R.id.data_input_radio_text_question);\n    text.setText(args.getString(ARGS_TEXT));\n\n    TextView min = (TextView) view.findViewById(R.id.data_input_radio_text_min);\n    min.setText(args.getString(ARGS_MIN));\n\n    TextView max = (TextView) view.findViewById(R.id.data_input_radio_text_max);\n    max.setText(args.getString(ARGS_MAX));\n\n    RadioGroup radio = (RadioGroup) view.findViewById(R.id.data_input_radio_radiogroup);\n    radio.setOnCheckedChangeListener(this);\n\n    if (DEBUG) Log.d(TAG, \"View created\");\n\n    return view;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 629, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 67, "focalAPIEnd": 89, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/leeivan/mobile-ecommerce-android-education/tree/master/05-multitask-service/src/com/pinecone/technology/mcommerce/learning/android/chapter06/handler/Utils.java", "rawCode": "  public static String getStringFromABundle(Bundle b) {\n    return b.getString(\"message\");\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 630, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 47, "focalAPIEnd": 79, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_apps_Mms/tree/master/src/com/android/mms/transaction/TransactionBundle.java", "rawCode": "  public String getProxyAddress() {\n    return mBundle.getString(PROXY_ADDRESS);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 631, "initialization": ["Bundle bundle = getPurchases(int,*,String,String)"], "initializationStart": [439], "initializationEnd": [515], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getStringArrayList(String)", "bundle.getStringArrayList(String)", "bundle.getStringArrayList(String)"], "configurationStart": [1182, 1292, 1408], "configurationEnd": [1237, 1356, 1468], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 2408, "focalAPIEnd": 2454, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TanyaGaleyev/Panda-project/tree/master/SimpleAndroidApp/src/com/pavlukhin/acropanda/billing/util/IabHelper.java", "rawCode": "  int queryPurchases(Inventory inv, String itemType) throws JSONException, RemoteException {\n    // Query purchases\n    logDebug(\"Querying owned items, item type: \" + itemType);\n    logDebug(\"Package name: \" + mContext.getPackageName());\n    boolean verificationFailed = false;\n    String continueToken = null;\n\n    do {\n      logDebug(\"Calling getPurchases with continuation token: \" + continueToken);\n      Bundle ownedItems =\n          mService.getPurchases(3, mContext.getPackageName(), itemType, continueToken);\n\n      int response = getResponseCodeFromBundle(ownedItems);\n      logDebug(\"Owned items response: \" + String.valueOf(response));\n      if (response != BILLING_RESPONSE_RESULT_OK) {\n        logDebug(\"getPurchases() failed: \" + getResponseDesc(response));\n        return response;\n      }\n      if (!ownedItems.containsKey(RESPONSE_INAPP_ITEM_LIST)\n          || !ownedItems.containsKey(RESPONSE_INAPP_PURCHASE_DATA_LIST)\n          || !ownedItems.containsKey(RESPONSE_INAPP_SIGNATURE_LIST)) {\n        logError(\"Bundle returned from getPurchases() doesn't contain required fields.\");\n        return IABHELPER_BAD_RESPONSE;\n      }\n\n      ArrayList<String> ownedSkus = ownedItems.getStringArrayList(RESPONSE_INAPP_ITEM_LIST);\n      ArrayList<String> purchaseDataList =\n          ownedItems.getStringArrayList(RESPONSE_INAPP_PURCHASE_DATA_LIST);\n      ArrayList<String> signatureList =\n          ownedItems.getStringArrayList(RESPONSE_INAPP_SIGNATURE_LIST);\n\n      for (int i = 0; i < purchaseDataList.size(); ++i) {\n        String purchaseData = purchaseDataList.get(i);\n        String signature = signatureList.get(i);\n        String sku = ownedSkus.get(i);\n        if (Security.verifyPurchase(mSignatureBase64, purchaseData, signature)) {\n          logDebug(\"Sku is owned: \" + sku);\n          Purchase purchase = new Purchase(itemType, purchaseData, signature);\n\n          if (TextUtils.isEmpty(purchase.getToken())) {\n            logWarn(\"BUG: empty/null token!\");\n            logDebug(\"Purchase data: \" + purchaseData);\n          }\n\n          // Record ownership and token\n          inv.addPurchase(purchase);\n        } else {\n          logWarn(\"Purchase signature verification **FAILED**. Not adding item.\");\n          logDebug(\" Purchase data: \" + purchaseData);\n          logDebug(\" Signature: \" + signature);\n          verificationFailed = true;\n        }\n      }\n\n      continueToken = ownedItems.getString(INAPP_CONTINUATION_TOKEN);\n      logDebug(\"Continuation token: \" + continueToken);\n    } while (!TextUtils.isEmpty(continueToken));\n\n    return verificationFailed ? IABHELPER_VERIFICATION_FAILED : BILLING_RESPONSE_RESULT_OK;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 632, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 104, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getBundle(String)", "bundle.getInt(String,int)", "bundle.getInt(String)", "bundle.getString(String)", "bundle.getInt(String,int)", "getPairingByPhone(value)", "format(String,value,AuthorizePhoneTypeEnum)"], "useStart": [167, 405, 562, 714, 804, 964, 1200], "useEnd": [209, 468, 624, 757, 845, 988, 1306], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jmorille/android/tree/master/geoPingProject/geoPing/src/main/java/eu/ttbox/geoping/service/slave/GeoPingSlaveService.java", "rawCode": "  private void manageNotificationAuthorizeIntent(Bundle extras) {\n    // Read Intent\n    String phone = extras.getString(Intents.EXTRA_SMS_PHONE);\n    Bundle params = extras.getBundle(Intents.EXTRA_SMS_PARAMS);\n    long personId = MessageEncoderHelper.readLong(params, MessageParamEnum.PERSON_ID, -1l);\n    GeopingNotifSlaveTypeEnum notifType =\n        GeopingNotifSlaveTypeEnum.getByOrdinal(\n            extras.getInt(Intents.EXTRA_NOTIFICATION_TYPE_ENUM_ORDINAL, -1));\n    AuthorizePhoneTypeEnum type =\n        AuthorizePhoneTypeEnum.getByOrdinal(\n            extras.getInt(Intents.EXTRA_AUTHORIZE_PHONE_TYPE_ENUM_ORDINAL));\n    Log.d(TAG, \"******* AuthorizePhoneTypeEnum : \" + type);\n    String personNewName = extras.getString(Intents.EXTRA_PERSON_NAME);\n    // Cancel Notification\n    int notifId = extras.getInt(Intents.EXTRA_NOTIF_ID, -1);\n    if (notifId != -1) {\n      mNotificationManager.cancel(notifId);\n    }\n    // Read Pairing\n    Pairing pairing = getPairingByPhone(phone);\n    if (TextUtils.isEmpty(pairing.name) && personNewName != null) {\n      pairing.name = personNewName;\n    }\n    // ### Manage Pairing Type\n    // #############################\n    Log.d(\n        TAG,\n        String.format(\n            \"manageAuthorizeIntent for phone %s with User security choice %s\", phone, type));\n    boolean positifResponse = false;\n    switch (type) {\n      case NEVER:\n        doPairingPhone(pairing, PairingAuthorizeTypeEnum.AUTHORIZE_NEVER, personId);\n        break;\n      case ALWAYS:\n        doPairingPhone(pairing, PairingAuthorizeTypeEnum.AUTHORIZE_ALWAYS, personId);\n        positifResponse = true;\n        break;\n      case YES:\n        positifResponse = true;\n        if (AppConstants.UNSET_ID == pairing.id) {\n          doPairingPhone(pairing, PairingAuthorizeTypeEnum.AUTHORIZE_REQUEST, personId);\n        }\n        break;\n      default:\n        Log.w(TAG, \"Not manage PhoneAuthorizeTypeEnum for \" + type);\n        positifResponse = false;\n        break;\n    }\n\n    // ### Manage Notification Type\n    // #############################\n    switch (notifType) {\n      case GEOPING_REQUEST_CONFIRM:\n        if (positifResponse) {\n          GeoPingSlaveLocationService.runFindLocationAndSendInService(\n              this, MessageActionEnum.LOC, new String[] {phone}, params);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 633, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 753, "focalAPIEnd": 789, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Deodexed/android_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/PowerUsageDetail.java", "rawCode": "  private void reportBatteryUse() {\n    if (mPackages == null) return;\n\n    ApplicationErrorReport report = new ApplicationErrorReport();\n    report.type = ApplicationErrorReport.TYPE_BATTERY;\n    report.packageName = mPackages[0];\n    report.installerPackageName = mInstaller.getPackageName();\n    report.processName = mPackages[0];\n    report.time = System.currentTimeMillis();\n    report.systemApp = (mApp.flags & ApplicationInfo.FLAG_SYSTEM) != 0;\n\n    final Bundle args = getArguments();\n    ApplicationErrorReport.BatteryInfo batteryInfo = new ApplicationErrorReport.BatteryInfo();\n    batteryInfo.usagePercent = args.getInt(EXTRA_PERCENT, 1);\n    batteryInfo.durationMicros = args.getLong(EXTRA_USAGE_DURATION, 0);\n    batteryInfo.usageDetails = args.getString(EXTRA_REPORT_DETAILS);\n    batteryInfo.checkinDetails = args.getString(EXTRA_REPORT_CHECKIN_DETAILS);\n    report.batteryInfo = batteryInfo;\n\n    Intent result = new Intent(Intent.ACTION_APP_ERROR);\n    result.setComponent(mInstaller);\n    result.putExtra(Intent.EXTRA_BUG_REPORT, report);\n    result.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    startActivity(result);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 634, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 145, "guardExpressionEnd": 164, "guardBlockStart": 145, "guardBlockEnd": 665, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 218, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setAuthor(value)", "bundle.getString(String)", "bundle.getInt(String)", "bundle.getString(String)", "bundle.getInt(String)"], "useStart": [206, 278, 340, 415, 613], "useEnd": [253, 317, 366, 448, 639], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ushahidi/Ushahidi_Android/tree/master/Core/src/com/ushahidi/android/app/services/UploadComments.java", "rawCode": "  private int addComments(Bundle bundle) {\n\n    CommentFields comment = new CommentFields();\n    CommentsApi commentApi = new CommentsApi();\n    if (bundle != null) {\n      Comment c = new Comment();\n      c.setAuthor(bundle.getString(\"comment_author\"));\n      c.setDescription(bundle.getString(\"comment_description\"));\n      c.setReportId(bundle.getInt(\"report_id\"));\n      comment.fill(c);\n      comment.setEmail(bundle.getString(\"comment_email\"));\n      Response response = commentApi.submit(comment);\n      if (response != null) {\n        if (response.getErrorCode() == 0) {\n          commentApi.saveComments(bundle.getInt(\"report_id\"));\n        }\n      }\n    }\n    return 1;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 635, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 42, "focalAPIEnd": 69, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_mms/tree/master/src/com/android/mms/transaction/TransactionBundle.java", "rawCode": "  public String getMmscUrl() {\n    return mBundle.getString(MMSC_URL);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 636, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 947, "guardExpressionEnd": 978, "guardBlockStart": 947, "guardBlockEnd": 1122, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1015, "focalAPIEnd": 1050, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setCurrentTabByTag(value)"], "useStart": [987], "useEnd": [1051], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cens/ohmagePhone/tree/master/src/org/ohmage/activity/SurveyListActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.survey_list_layout);\n\n    if (ConfigHelper.isSingleCampaignMode()) setActionBarShadowVisibility(false);\n\n    mTabHost = (TabHost) findViewById(android.R.id.tabhost);\n    mTabHost.setup();\n\n    mViewPager = (ViewPager) findViewById(R.id.pager);\n\n    mTabsAdapter = new TabsAdapter(this, mTabHost, mViewPager);\n\n    Bundle args = intentToFragmentArguments(getIntent());\n    args.putBoolean(SurveyListFragment.KEY_PENDING, false);\n    mTabsAdapter.addTab(getString(R.string.surveys_all), SurveyListFragment.class, args);\n\n    args = intentToFragmentArguments(getIntent());\n    args.putBoolean(SurveyListFragment.KEY_PENDING, true);\n    mTabsAdapter.addTab(getString(R.string.surveys_pending), SurveyListFragment.class, args);\n\n    boolean showPending = getIntent().getBooleanExtra(EXTRA_SHOW_PENDING, false);\n\n    if (savedInstanceState != null) {\n      mTabHost.setCurrentTabByTag(savedInstanceState.getString(\"tab\"));\n    } else {\n      mTabHost.setCurrentTab(showPending ? 1 : 0);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 637, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 65, "focalAPIEnd": 93, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/btmura/rbb/tree/master/src/com/btmura/android/reddit/provider/ThingProvider.java", "rawCode": "  private static String getBodyExtra(Bundle extras) {\n    return extras.getString(EXTRA_BODY);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 638, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 145, "focalAPIEnd": 169, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 175, "followUpCheckExpressionEnd": 197, "followUpCheckBlockStart": 175, "followUpCheckBlockEnd": 232, "use": ["parseBoolean(value)"], "useStart": [244], "useEnd": [275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/socialize/socialize-sdk-android/tree/master/test/src/com/socialize/SocializeTestRunner.java", "rawCode": "  private boolean getBooleanArgument(\n      final Bundle arguments, final String tag, final boolean defaultValue) {\n    final String tagString = arguments.getString(tag);\n    if (tagString == null) {\n      return defaultValue;\n    }\n    return Boolean.parseBoolean(tagString);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 639, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getInt(String)", "bundle.getInt(String)"], "configurationStart": [99, 144], "configurationEnd": [124, 172], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 207, "focalAPIEnd": 232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["deserialize(value)", "bundle.getString(String)"], "useStart": [186, 271], "useEnd": [233, 299], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nigeljonez/freedoku/tree/master/Freedoku/src/com/nigelj/freedoku/game/command/EditCellNoteCommand.java", "rawCode": "  @Override\n  void restoreState(Bundle inState) {\n    super.restoreState(inState);\n\n    mCellRow = inState.getInt(\"cellRow\");\n    mCellColumn = inState.getInt(\"cellColumn\");\n    mNote = CellNote.deserialize(inState.getString(\"note\"));\n    mOldNote = CellNote.deserialize(inState.getString(\"oldNote\"));\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 640, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 502, "focalAPIEnd": 560, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Bundle.putString(String,value)", "bundle.getLong(String)", "bundle.getLong(String)"], "useStart": [408, 666, 837], "useEnd": [561, 725, 902], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/test-runner/src/android/test/InstrumentationTestRunner.java", "rawCode": "    public void writeStopTiming(Bundle results) {\n      // Copy results into mTestResult by flattening list of iterations,\n      // which is outputted via WatcherResultPrinter.endTest\n      int i = 0;\n      for (Parcelable p :\n          results.getParcelableArrayList(PerformanceCollector.METRIC_KEY_ITERATIONS)) {\n        Bundle iteration = (Bundle) p;\n        String index = \"iteration\" + i + \".\";\n        mTestResult.putString(\n            index + PerformanceCollector.METRIC_KEY_LABEL,\n            iteration.getString(PerformanceCollector.METRIC_KEY_LABEL));\n        mTestResult.putLong(\n            index + PerformanceCollector.METRIC_KEY_CPU_TIME,\n            iteration.getLong(PerformanceCollector.METRIC_KEY_CPU_TIME));\n        mTestResult.putLong(\n            index + PerformanceCollector.METRIC_KEY_EXECUTION_TIME,\n            iteration.getLong(PerformanceCollector.METRIC_KEY_EXECUTION_TIME));\n        i++;\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 641, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 446, "guardExpressionEnd": 477, "guardBlockStart": 446, "guardBlockEnd": 962, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 749, "focalAPIEnd": 799, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new SharedPreferencesTokenCachingStrategy(*,value)", "restoreSession(*,SharedPreferencesTokenCachingStrategy,Session.StatusCallback,bundle)"], "useStart": [686, 835], "useEnd": [800, 921], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/satoshi-okawa/facebook-android-sdk-test1/tree/master/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n\n    restoreFragments(savedInstanceState);\n\n    sessionStatusCallback =\n        new Session.StatusCallback() {\n          @Override\n          public void call(Session session, SessionState state, Exception exception) {\n            onSessionStateChange(session, state, exception);\n          }\n        };\n\n    if (savedInstanceState != null) {\n      if (savedInstanceState.getBoolean(SHOWING_SETTINGS_KEY)) {\n        showSettings();\n      } else {\n        showProfile();\n      }\n\n      SharedPreferencesTokenCachingStrategy restoredCache =\n          new SharedPreferencesTokenCachingStrategy(\n              this, savedInstanceState.getString(TOKEN_CACHE_NAME_KEY));\n      currentSession =\n          Session.restoreSession(this, restoredCache, sessionStatusCallback, savedInstanceState);\n    } else {\n      showProfile();\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 642, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 2374, "guardExpressionEnd": 2389, "guardBlockStart": 2374, "guardBlockEnd": 2464, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 2416, "focalAPIEnd": 2457, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 2517, "followUpCheckExpressionEnd": 2545, "followUpCheckBlockStart": 2517, "followUpCheckBlockEnd": 2694, "use": ["bundle.getString(String)", "new ComponentName(String,value)"], "useStart": [2638, 3186], "useEnd": [2679, 3225], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/services/java/com/android/server/search/Searchables.java", "rawCode": "  /**\n   * Look up, or construct, based on the activity.\n   *\n   * <p>The activities fall into three cases, based on meta-data found in the manifest entry:\n   *\n   * <ol>\n   *   <li>The activity itself implements search. This is indicated by the presence of a\n   *       \"android.app.searchable\" meta-data attribute. The value is a reference to an XML file\n   *       containing search information.\n   *   <li>A related activity implements search. This is indicated by the presence of a\n   *       \"android.app.default_searchable\" meta-data attribute. The value is a string naming the\n   *       activity implementing search. In this case the factory will \"redirect\" and return the\n   *       searchable data.\n   *   <li>No searchability data is provided. We return null here and other code will insert the\n   *       \"default\" (e.g. contacts) search.\n   *       <p>TODO: cache the result in the map, and check the map first. TODO: it might make sense\n   *       to implement the searchable reference as an application meta-data entry. This way we\n   *       don't have to pepper each and every activity. TODO: can we skip the constructor step if\n   *       it's a non-searchable? TODO: does it make sense to plug the default into a slot here for\n   *       automatic return? Probably not, but it's one way to do it.\n   *\n   * @param activity The name of the current activity, or null if the activity does not define any\n   *     explicit searchable metadata.\n   */\n  public SearchableInfo getSearchableInfo(ComponentName activity) {\n    // Step 1. Is the result already hashed? (case 1)\n    SearchableInfo result;\n    synchronized (this) {\n      result = mSearchablesMap.get(activity);\n      if (result != null) return result;\n    }\n\n    // Step 2. See if the current activity references a searchable.\n    // Note: Conceptually, this could be a while(true) loop, but there's\n    // no point in implementing reference chaining here and risking a loop.\n    // References must point directly to searchable activities.\n\n    ActivityInfo ai = null;\n    try {\n      ai = mPm.getActivityInfo(activity, PackageManager.GET_META_DATA, mUserId);\n    } catch (RemoteException re) {\n      Log.e(LOG_TAG, \"Error getting activity info \" + re);\n      return null;\n    }\n    String refActivityName = null;\n\n    // First look for activity-specific reference\n    Bundle md = ai.metaData;\n    if (md != null) {\n      refActivityName = md.getString(MD_LABEL_DEFAULT_SEARCHABLE);\n    }\n    // If not found, try for app-wide reference\n    if (refActivityName == null) {\n      md = ai.applicationInfo.metaData;\n      if (md != null) {\n        refActivityName = md.getString(MD_LABEL_DEFAULT_SEARCHABLE);\n      }\n    }\n\n    // Irrespective of source, if a reference was found, follow it.\n    if (refActivityName != null) {\n      // This value is deprecated, return null\n      if (refActivityName.equals(MD_SEARCHABLE_SYSTEM_SEARCH)) {\n        return null;\n      }\n      String pkg = activity.getPackageName();\n      ComponentName referredActivity;\n      if (refActivityName.charAt(0) == '.') {\n        referredActivity = new ComponentName(pkg, pkg + refActivityName);\n      } else {\n        referredActivity = new ComponentName(pkg, refActivityName);\n      }\n\n      // Now try the referred activity, and if found, cache\n      // it against the original name so we can skip the check\n      synchronized (this) {\n        result = mSearchablesMap.get(referredActivity);\n        if (result != null) {\n          mSearchablesMap.put(activity, result);\n          return result;\n        }\n      }\n    }\n\n    // Step 3. None found. Return null.\n    return null;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 643, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 84, "guardExpressionEnd": 105, "guardBlockStart": 84, "guardBlockEnd": 161, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 129, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jerrymannel/ISawABird/tree/master/FacebookSDK/src/com/facebook/widget/PickerFragment.java", "rawCode": "    @Override\n    void readSelectionFromBundle(Bundle inBundle, String key) {\n      if (inBundle != null) {\n        selectedId = inBundle.getString(key);\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 644, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getParcelable(String)", "bundle.getBundle(String)", "bundle.getBoolean(String)", "bundle.getParcelable(String)", "bundle.getBundle(String)", "bundle.getParcelableArrayList(String)"], "configurationStart": [449, 534, 613, 719, 817, 934], "configurationEnd": [505, 584, 669, 782, 874, 1009], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 372, "guardExpressionEnd": 403, "guardBlockStart": 372, "guardBlockEnd": 411, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1034, "focalAPIEnd": 1087, "followUpCheck": "!doShow(value,false,launchComponent,appSearchData,globalSearch)", "checkType": "IF", "followUpCheckExpressionStart": 1285, "followUpCheckExpressionEnd": 1361, "followUpCheckBlockStart": 1285, "followUpCheckBlockEnd": 1436, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/core/java/android/app/SearchDialog.java", "rawCode": "  /**\n   * Restore the state of the dialog from a previously saved bundle.\n   *\n   * <p>TODO: go through this and make sure that it saves everything that is saved\n   *\n   * @param savedInstanceState The state of the dialog previously saved by {@link\n   *     #onSaveInstanceState()}.\n   */\n  @Override\n  public void onRestoreInstanceState(Bundle savedInstanceState) {\n    if (savedInstanceState == null) return;\n\n    ComponentName launchComponent = savedInstanceState.getParcelable(INSTANCE_KEY_COMPONENT);\n    Bundle appSearchData = savedInstanceState.getBundle(INSTANCE_KEY_APPDATA);\n    boolean globalSearch = savedInstanceState.getBoolean(INSTANCE_KEY_GLOBALSEARCH);\n    ComponentName storedComponentName =\n        savedInstanceState.getParcelable(INSTANCE_KEY_STORED_COMPONENT);\n    Bundle storedAppSearchData = savedInstanceState.getBundle(INSTANCE_KEY_STORED_APPDATA);\n    ArrayList<ComponentName> previousComponents =\n        savedInstanceState.getParcelableArrayList(INSTANCE_KEY_PREVIOUS_COMPONENTS);\n    String userQuery = savedInstanceState.getString(INSTANCE_KEY_USER_QUERY);\n\n    // Set stored state\n    mStoredComponentName = storedComponentName;\n    mStoredAppSearchData = storedAppSearchData;\n    mPreviousComponents = previousComponents;\n\n    // show the dialog.\n    if (!doShow(userQuery, false, launchComponent, appSearchData, globalSearch)) {\n      // for some reason, we couldn't re-instantiate\n      return;\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 645, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 68, "guardExpressionEnd": 99, "guardBlockStart": 68, "guardBlockEnd": 233, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 138, "focalAPIEnd": 173, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setCurrentTabByTag(value)"], "useStart": [110], "useEnd": [174], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ybonnel/TransportsRennes/tree/master/TransportsCommun/src/fr/ybo/transportscommun/activity/commun/BaseActivity.java", "rawCode": "    protected void setCurrentTab(Bundle savedInstanceState) {\n      if (savedInstanceState != null) {\n        mTabHost.setCurrentTabByTag(savedInstanceState.getString(\"tab\"));\n      } else {\n        mTabHost.setCurrentTab(0);\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 646, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle.getBoolean(STATE_ADD_IN_PROGRESS,)", "guardType": "IF {", "guardExpressionStart": 63, "guardExpressionEnd": 120, "guardBlockStart": 63, "guardBlockEnd": 326, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 147, "focalAPIEnd": 191, "followUpCheck": "!BooksManager.bookExists(getContentResolver(),value)", "checkType": "IF", "followUpCheckExpressionStart": 199, "followUpCheckExpressionEnd": 254, "followUpCheckBlockStart": 199, "followUpCheckBlockEnd": 320, "use": ["execute(value)"], "useStart": [286], "useEnd": [311], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/Shelves/src/org/curiouscreature/android/shelves/activity/AddBookActivity.java", "rawCode": "  private void restoreAddTask(Bundle savedInstanceState) {\n    if (savedInstanceState.getBoolean(STATE_ADD_IN_PROGRESS)) {\n      final String id = savedInstanceState.getString(STATE_ADD_BOOK);\n      if (!BooksManager.bookExists(getContentResolver(), id)) {\n        mAddTask = (AddTask) new AddTask().execute(id);\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 647, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 216, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getInt(String)", "bundle.getInt(String)"], "useStart": [284, 1075], "useEnd": [326, 1114], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/clauxz/DiscusysforAndroid/tree/master/Discussions/src/jp/ac/tohoku/qse/takahashi/discussions/ui/activities/DiscusysPreferenceActivity.java", "rawCode": "  /** {@inheritDoc} */\n  @Override\n  public void onReceiveResult(final int resultCode, final Bundle resultData) {\n\n    switch (resultCode) {\n      case ResultCodes.STATUS_RUNNING:\n        {\n          resultMessage = resultData.getString(Intent.EXTRA_TEXT);\n          resultProgress = resultData.getInt(\"EXTRA_RESULT_PROGRESS\");\n          mSyncing = true;\n          break;\n        }\n      case ResultCodes.STATUS_FINISHED:\n        {\n          if (mSyncing) {\n            // close preference activity if successfully update\n            finish();\n          }\n          mSyncing = false;\n          break;\n        }\n      case ResultCodes.STATUS_ERROR:\n        {\n          // Error happened down in SyncService, show as toast.\n          mSyncing = false;\n          final String errorText =\n              getString(R.string.toast_sync_error, resultData.getString(Intent.EXTRA_TEXT));\n          showLongToast(errorText);\n          break;\n        }\n      case ResultCodes.STATUS_STARTED:\n        {\n          // got max progress num\n          mSyncing = true;\n          maxProgress = resultData.getInt(\"EXTRA_MAX_PROGRESS\");\n          mProgressDialog.setMax(maxProgress);\n          break;\n        }\n      default:\n        break;\n    }\n    updateDialogView(mSyncing);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 648, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 232, "focalAPIEnd": 267, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitmel/flipr-android/tree/master/src/edu/mit/mobile/android/livingpostcards/CardViewVideoFragment.java", "rawCode": "  @Override\n  public Loader<Uri> onCreateLoader(int id, Bundle args) {\n    getView().findViewById(R.id.progress).setVisibility(View.VISIBLE);\n    showErrorMessage(null);\n    return new DownloadLoader(\n        getActivity(),\n        args.getString(ARGUMENT_URI_STRING),\n        new File(\n            getActivity().getExternalFilesDir(Environment.DIRECTORY_MOVIES), \"livingpostcards\"));\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 649, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getBoolean(String)", "bundle.getInt(String)"], "configurationStart": [787, 848], "configurationEnd": [822, 883], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 703, "guardExpressionEnd": 722, "guardBlockStart": 703, "guardBlockEnd": 1137, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 901, "focalAPIEnd": 930, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)"], "useStart": [948, 1020, 1091], "useEnd": [977, 1056, 1129], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytown/Phone_ics/tree/master/src/com/android/phone/FdnSetting.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    addPreferencesFromResource(R.xml.fdn_setting);\n\n    mPhone = PhoneApp.getPhone();\n\n    // get UI object references\n    PreferenceScreen prefSet = getPreferenceScreen();\n    mButtonEnableFDN = (EditPinPreference) prefSet.findPreference(BUTTON_FDN_ENABLE_KEY);\n    mButtonChangePin2 = (EditPinPreference) prefSet.findPreference(BUTTON_CHANGE_PIN2_KEY);\n\n    // assign click listener and update state\n    mButtonEnableFDN.setOnPinEnteredListener(this);\n    updateEnableFDN();\n\n    mButtonChangePin2.setOnPinEnteredListener(this);\n\n    // Only reset the pin change dialog if we're not in the middle of changing it.\n    if (icicle == null) {\n      resetPinChangeState();\n    } else {\n      mSkipOldPin = icicle.getBoolean(SKIP_OLD_PIN_KEY);\n      mPinChangeState = icicle.getInt(PIN_CHANGE_STATE_KEY);\n      mOldPin = icicle.getString(OLD_PIN_KEY);\n      mNewPin = icicle.getString(NEW_PIN_KEY);\n      mButtonChangePin2.setDialogMessage(icicle.getString(DIALOG_MESSAGE_KEY));\n      mButtonChangePin2.setText(icicle.getString(DIALOG_PIN_ENTRY_KEY));\n    }\n\n    ActionBar actionBar = getActionBar();\n    if (actionBar != null) {\n      // android.R.id.home will be triggered in onOptionsItemSelected()\n      actionBar.setDisplayHomeAsUpEnabled(true);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 650, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 307, "focalAPIEnd": 344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "EditText.setText(value)"], "useStart": [397, 1334], "useEnd": [435, 1365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/remi/andrake/tree/master/examples/android/WikiNotes/src/com/google/android/wikinotes/WikiNoteEditor.java", "rawCode": "  @Override\n  protected void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n    setContentView(R.layout.wiki_note_edit);\n\n    mNoteEdit = (EditText) findViewById(R.id.noteEdit);\n\n    // Check to see if the icicle has body and title values to restore\n    String wikiNoteText = icicle == null ? null : icicle.getString(WikiNote.Notes.BODY);\n    String wikiNoteTitle = icicle == null ? null : icicle.getString(WikiNote.Notes.TITLE);\n\n    // If not, check to see if the extras bundle has these values passed in\n    if (wikiNoteTitle == null) {\n      Bundle extras = getIntent().getExtras();\n      wikiNoteText = extras == null ? null : extras.getString(WikiNote.Notes.BODY);\n      wikiNoteTitle = extras == null ? null : extras.getString(WikiNote.Notes.TITLE);\n    }\n\n    // If we have no title information, this is an invalid intent request\n    if (TextUtils.isEmpty(wikiNoteTitle)) {\n      // no note title - bail\n      setResult(RESULT_CANCELED);\n      finish();\n      return;\n    }\n\n    mWikiNoteTitle = wikiNoteTitle;\n\n    // but if the body is null, just set it to empty - first edit of this\n    // note\n    wikiNoteText = wikiNoteText == null ? \"\" : wikiNoteText;\n\n    // set the title so we know which note we are editing\n    setTitle(getString(R.string.wiki_editing, wikiNoteTitle));\n\n    // set the note body to edit\n    mNoteEdit.setText(wikiNoteText);\n\n    // set listeners for the confirm and cancel buttons\n    ((Button) findViewById(R.id.confirmButton))\n        .setOnClickListener(\n            new OnClickListener() {\n              public void onClick(View view) {\n                Intent i = new Intent();\n                i.putExtra(ACTIVITY_RESULT, mNoteEdit.getText().toString());\n                setResult(RESULT_OK, i);\n                finish();\n              }\n            });\n\n    ((Button) findViewById(R.id.cancelButton))\n        .setOnClickListener(\n            new OnClickListener() {\n              public void onClick(View view) {\n                setResult(RESULT_CANCELED);\n                finish();\n              }\n            });\n    if (!getSharedPreferences(Eula.PREFERENCES_EULA, Activity.MODE_PRIVATE)\n        .getBoolean(Eula.PREFERENCE_EULA_ACCEPTED, false)) {\n      Eula.showEula(this);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 651, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 260, "focalAPIEnd": 284, "followUpCheck": "value.equals(\"ViewSearchResultActivity\")", "checkType": "IF", "followUpCheckExpressionStart": 290, "followUpCheckExpressionEnd": 336, "followUpCheckBlockStart": 290, "followUpCheckBlockEnd": 373, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMPUT301W13T11/FoodBook/tree/master/FooBook/src/ca/ualberta/cmput301w13t11/FoodBook/ViewPhotosActivity.java", "rawCode": "  /**\n   * Sets the queryResultsDb flag based on the \"caller\" extra passed to the method.\n   *\n   * @param extras The extras Bundle passed to the Activity on creation.\n   */\n  public void setQueryResultsDb(Bundle extras) {\n    String caller = \"\";\n    caller = extras.getString(CALLER);\n    if (caller.equals(\"ViewSearchResultActivity\")) {\n      queryResultsDb = true;\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 652, "initialization": ["Bundle bundle = Message.getData()"], "initializationStart": [76], "initializationEnd": [89], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 113, "focalAPIEnd": 134, "followUpCheck": "value.equals(\"finish\")", "checkType": "IF", "followUpCheckExpressionStart": 142, "followUpCheckExpressionEnd": 170, "followUpCheckBlockStart": 142, "followUpCheckBlockEnd": 497, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/njuyyz/ebayFriends/tree/master/src/activity/post/VoiceProcessFragment.java", "rawCode": "    @Override\n    public void handleMessage(Message msg) {\n      Bundle b = msg.getData();\n      String status = b.getString(\"status\");\n      if (status.equals(\"finish\")) {\n\n        AnimationDrawable anim = null;\n        Object ob = iv.getBackground();\n        anim = (AnimationDrawable) ob;\n        anim.stop();\n      } else {\n\n        AnimationDrawable anim = null;\n        Object ob = iv.getBackground();\n        anim = (AnimationDrawable) ob;\n        anim.stop();\n        anim.start();\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 653, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 843, "focalAPIEnd": 875, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(value)"], "useStart": [832], "useEnd": [876], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/barriosnahuel/magicAnnotator/tree/master/src/main/java/com/nbempire/android/magicannotator/component/activity/annotator/ChanchoAnnotatorActivity.java", "rawCode": "  /**\n   * Prepara la lista necesaria de nombre de jugadores-puntajes para utilizar un {@link\n   * TableListAdapter}.\n   *\n   * @param playersScores {@link Bundle} con pares nombre del jugador-puntaje de los cuáles se va a\n   *     armar el {@link List} final.\n   * @return {@link List} de {@link CharSequence} con el resultado final.\n   */\n  private List<CharSequence> getValuesForGrid(Bundle playersScores) {\n    List<CharSequence> result = new ArrayList<CharSequence>();\n    result.add(getText(R.string.player).toString());\n    result.add(getText(R.string.tutePartialResults_lostHands));\n\n    SortedSet<String> sortedSet = new TreeSet<String>();\n    for (String eachPlayerNickname : playersScores.keySet()) {\n      sortedSet.add(eachPlayerNickname);\n    }\n\n    for (String eachKey : sortedSet) {\n      result.add(eachKey);\n      result.add(playersScores.getString(eachKey));\n    }\n\n    return result;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 654, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getBoolean(String,boolean)"], "configurationStart": [216], "configurationEnd": [274], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 172, "guardExpressionEnd": 192, "guardBlockStart": 172, "guardBlockEnd": 1109, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 309, "focalAPIEnd": 351, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 359, "followUpCheckExpressionEnd": 389, "followUpCheckBlockStart": 359, "followUpCheckBlockEnd": 504, "use": ["value.split(String)", "bundle.getBoolean(String,boolean)", "bundle.getString(String)", "bundle.getString(String)"], "useStart": [419, 526, 618, 869], "useEnd": [447, 585, 658, 915], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenKit/openkit-android/tree/master/Vendor/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  private void setPickerFragmentSettingsFromBundle(Bundle inState) {\n    // We do this in a separate non-overridable method so it is safe to call from the constructor.\n    if (inState != null) {\n      showPictures = inState.getBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);\n      String extraFieldsString = inState.getString(EXTRA_FIELDS_BUNDLE_KEY);\n      if (extraFieldsString != null) {\n        String[] strings = extraFieldsString.split(\",\");\n        setExtraFields(Arrays.asList(strings));\n      }\n      showTitleBar = inState.getBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);\n      String titleTextString = inState.getString(TITLE_TEXT_BUNDLE_KEY);\n      if (titleTextString != null) {\n        titleText = titleTextString;\n        if (titleTextView != null) {\n          titleTextView.setText(titleText);\n        }\n      }\n      String doneButtonTextString = inState.getString(DONE_BUTTON_TEXT_BUNDLE_KEY);\n      if (doneButtonTextString != null) {\n        doneButtonText = doneButtonTextString;\n        if (doneButton != null) {\n          doneButton.setText(doneButtonText);\n        }\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 655, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 105, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new AccountSubredditListLoader(*,value)"], "useStart": [159], "useEnd": [217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/btmura/rbb/tree/master/src/com/btmura/android/reddit/app/NavigationFragment.java", "rawCode": "    @Override\n    public Loader<Cursor> onCreateLoader(int id, Bundle args) {\n      String accountName = args.getString(LOADER_ARG_ACCOUNT_NAME);\n      return new AccountSubredditListLoader(getActivity(), accountName);\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 656, "initialization": ["Bundle bundle = getArguments()"], "initializationStart": [579], "initializationEnd": [593], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 600, "guardExpressionEnd": 617, "guardBlockStart": 600, "guardBlockEnd": 676, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 641, "focalAPIEnd": 668, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["loadRestaurant(value)"], "useStart": [626], "useEnd": [669], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jpigg/csci498android/tree/master/LunchList/src/csci498/jpigg/lunchlist/DetailFragment.java", "rawCode": "  public void onActivityCreated(Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n\n    locMgr = (LocationManager) getActivity().getSystemService(Context.LOCATION_SERVICE);\n\n    name = (EditText) getView().findViewById(R.id.name);\n    address = (EditText) getView().findViewById(R.id.addr);\n    notes = (EditText) getView().findViewById(R.id.notes);\n    types = (RadioGroup) getView().findViewById(R.id.types);\n    feed = (EditText) getView().findViewById(R.id.feed);\n    location = (TextView) getView().findViewById(R.id.location);\n\n    Bundle args = getArguments();\n\n    if (args != null) {\n      loadRestaurant(args.getString(ARG_REST_ID));\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 657, "initialization": ["Bundle bundle = new Bundle()"], "initializationStart": [81], "initializationEnd": [93], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.putString(String,String)", "bundle.putString(String,String)", "bundle.putString(String,String)", "bundle.putString(String,String)"], "configurationStart": [99, 146, 211, 588], "configurationEnd": [140, 205, 268, 698], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1513, "focalAPIEnd": 1541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setName(value)"], "useStart": [1493], "useEnd": [1542], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hyperactivity/android-app/tree/master/modules/facebook/src/com/facebook/TestSession.java", "rawCode": "  private TestAccount createTestAccountAndFinishAuth() {\n    Bundle parameters = new Bundle();\n    parameters.putString(\"installed\", \"true\");\n    parameters.putString(\"permissions\", getPermissionsString());\n    parameters.putString(\"access_token\", getAppAccessToken());\n\n    // If we're in shared mode, we want to rename this user to encode its permissions, so we can\n    // find it later\n    // in another shared session. If we're in private mode, don't bother renaming it since we're\n    // just going to\n    // delete it at the end of the session.\n    if (mode == Mode.SHARED) {\n      parameters.putString(\n          \"name\", String.format(\"Shared %s Testuser\", getSharedTestAccountIdentifier()));\n    }\n\n    String graphPath = String.format(\"%s/accounts/test-users\", testApplicationId);\n    Request createUserRequest = new Request(null, graphPath, parameters, HttpMethod.POST);\n    Response response = createUserRequest.executeAndWait();\n\n    FacebookRequestError error = response.getError();\n    TestAccount testAccount = response.getGraphObjectAs(TestAccount.class);\n    if (error != null) {\n      finishAuthOrReauth(null, error.getException());\n      return null;\n    } else {\n      assert testAccount != null;\n\n      // If we are in shared mode, store this new account in the dictionary so we can re-use it\n      // later.\n      if (mode == Mode.SHARED) {\n        // Remember the new name we gave it, since we didn't get it back in the results of the\n        // create request.\n        testAccount.setName(parameters.getString(\"name\"));\n        storeTestAccount(testAccount);\n      }\n\n      finishAuthWithTestAccount(testAccount);\n\n      return testAccount;\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 658, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 79, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "new Oauth2AccessToken(value,String)"], "useStart": [139, 208], "useEnd": [169, 248], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anffernee/letuwb/tree/master/src/com/zrd/zr/letuwb/EntranceActivity.java", "rawCode": "    @Override\n    public void onComplete(Bundle values) {\n      String token = values.getString(\"access_token\");\n      String expires_in = values.getString(\"expires_in\");\n      EntranceActivity.accessToken = new Oauth2AccessToken(token, expires_in);\n      if (EntranceActivity.accessToken.isSessionValid()) {\n        AccessTokenKeeper.keepAccessToken(EntranceActivity.this, EntranceActivity.accessToken);\n        Toast.makeText(\n                EntranceActivity.this,\n                getApplication().getString(R.string.tips_successfullyoauthorized),\n                Toast.LENGTH_SHORT)\n            .show();\n        mWeiboPage.getSina().getLoggedInUser(EntranceActivity.accessToken);\n        /** try to get emotions */\n        Emotions emotions =\n            new Emotions(accessToken, AsyncSaver.getSdcardDir() + DIR_EMOTIONS, mHandler);\n        int err = emotions.load();\n        if (err == -1 || err == 0) { // means local files not found or no emotion exists\n          // try to download emotions\n          emotions.update();\n        }\n        mWeiboPage.setEmotions(emotions);\n        // SpannableString spannable;\n        // ImageSpan span;\n        Toast.makeText(\n                EntranceActivity.this, (String) emotions.getEmotion(\"[呵呵]\"), Toast.LENGTH_LONG)\n            .show();\n      } else {\n        Toast.makeText(\n                EntranceActivity.this,\n                getApplication().getString(R.string.tips_failtopassoauth),\n                Toast.LENGTH_SHORT)\n            .show();\n        mWeiboPage.getSina().setLoggedInUser(null, 0);\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 659, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 216, "focalAPIEnd": 238, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ddnbrowser/Diva.NetBrowser/tree/master/src/net/diva/browser/page/MyListFragment.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setHasOptionsMenu(true);\n\n    Bundle args = getArguments();\n    m_myList = new MyList(args.getInt(\"id\", 0), args.getString(\"name\"));\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 660, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 432, "focalAPIEnd": 479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parse(value)"], "useStart": [422], "useEnd": [480], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brk3/finch/tree/master/src/com/bourke/finch/activities/ProfileActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.profile);\n\n    mContext = getApplicationContext();\n\n    mTypeFace = Typeface.createFromAsset(getAssets(), Constants.ROBOTO_REGULAR);\n\n    /* Get the URL we are being asked to view */\n    Uri uri = getIntent().getData();\n    if ((uri == null) && (savedInstanceState != null)) {\n      uri = Uri.parse(savedInstanceState.getString(Constants.KEY_URL));\n    }\n\n    /* Check uri appears to be in correct format */\n    if ((uri == null) || (uri.getPathSegments().size() < 2)) {\n      // TODO: recover\n    }\n    mScreenName = uri.getPathSegments().get(1).replaceFirst(\"@\", \"\");\n\n    /* Load the twitter4j helper */\n    mTwitter = FinchTwitterFactory.getInstance(mContext).getTwitter();\n\n    /* Set up TabPageIndicator and bind viewpager to it */\n    FinchPagerAdapter adapter = new FinchPagerAdapter(getSupportFragmentManager());\n    ViewPager pager = (ViewPager) findViewById(R.id.pager);\n    pager.setAdapter(adapter);\n    TabPageIndicator indicator = (TabPageIndicator) findViewById(R.id.indicator);\n    indicator.setViewPager(pager);\n\n    /* Get profile image for screenname and add to imageview */\n    mProfileImage = (ImageView) findViewById(R.id.image_profile);\n    TwitterTaskCallback<TwitterTaskParams, TwitterException> profileImageCallback =\n        new TwitterTaskCallback<TwitterTaskParams, TwitterException>() {\n          public void onSuccess(TwitterTaskParams payload) {\n            String imagePath = (String) payload.result;\n            mProfileImage.setImageDrawable(Drawable.createFromPath(imagePath));\n          }\n\n          public void onFailure(TwitterException e) {\n            e.printStackTrace();\n          }\n        };\n    TwitterTaskParams showUserParams =\n        new TwitterTaskParams(\n            TwitterTask.GET_PROFILE_IMAGE, new Object[] {this, mScreenName, ProfileImage.ORIGINAL});\n    new TwitterTask(showUserParams, profileImageCallback, mTwitter).execute();\n\n    /* Get user object */\n    TwitterTaskCallback<TwitterTaskParams, TwitterException> userObjectCallback =\n        new TwitterTaskCallback<TwitterTaskParams, TwitterException>() {\n          public void onSuccess(TwitterTaskParams payload) {\n            ProfileActivity.this.populateProfileView((User) payload.result);\n          }\n\n          public void onFailure(TwitterException e) {\n            e.printStackTrace();\n          }\n        };\n    TwitterTaskParams userObjectParams =\n        new TwitterTaskParams(TwitterTask.SHOW_USER, new Object[] {this, mScreenName});\n    new TwitterTask(userObjectParams, userObjectCallback, mTwitter).execute();\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 661, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 368, "guardExpressionEnd": 387, "guardBlockStart": 368, "guardBlockEnd": 415, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 436, "focalAPIEnd": 463, "followUpCheck": "(value == null) || (value.length() == 0)", "checkType": "IF", "followUpCheckExpressionStart": 469, "followUpCheckExpressionEnd": 514, "followUpCheckBlockStart": 469, "followUpCheckBlockEnd": 542, "use": ["bundle.getLong(String,int)"], "useStart": [575], "useEnd": [614], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/backtoschool/TestSelf/tree/master/libraries/facebook/src/com/facebook/TokenCachingStrategy.java", "rawCode": "  /**\n   * Returns a boolean indicating whether a Bundle contains properties that could be a valid saved\n   * token.\n   *\n   * @param bundle A Bundle to check for token information.\n   * @return a boolean indicating whether a Bundle contains properties that could be a valid saved\n   *     token.\n   */\n  public static boolean hasTokenInformation(Bundle bundle) {\n    if (bundle == null) {\n      return false;\n    }\n\n    String token = bundle.getString(TOKEN_KEY);\n    if ((token == null) || (token.length() == 0)) {\n      return false;\n    }\n\n    long expiresMilliseconds = bundle.getLong(EXPIRATION_DATE_KEY, 0L);\n    if (expiresMilliseconds == 0L) {\n      return false;\n    }\n\n    return true;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 662, "initialization": ["Bundle bundle = getArguments()"], "initializationStart": [123], "initializationEnd": [137], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 150, "focalAPIEnd": 173, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["PageFragmentCallbacks.onGetPage(value)"], "useStart": [187], "useEnd": [213], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ltg-uic/hr-android-app/tree/master/src/ltg/heliotablet_android/wizard/ui/SingleChoiceFragment.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Bundle args = getArguments();\n    mKey = args.getString(ARG_KEY);\n    mPage = mCallbacks.onGetPage(mKey);\n\n    SingleFixedChoicePage fixedChoicePage = (SingleFixedChoicePage) mPage;\n    mChoices = new ArrayList<String>();\n    for (int i = 0; i < fixedChoicePage.getOptionCount(); i++) {\n      mChoices.add(fixedChoicePage.getOptionAt(i));\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 663, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getInt(String)"], "configurationStart": [276], "configurationEnd": [292], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 689, "focalAPIEnd": 733, "followUpCheck": "!value.equals(mCursor.getString(Browser.HISTORY_PROJECTION_TITLE_INDEX))", "checkType": "IF", "followUpCheckExpressionStart": 739, "followUpCheckExpressionEnd": 816, "followUpCheckBlockStart": 739, "followUpCheckBlockEnd": 880, "use": ["put(*,value)", "bundle.getString(String)"], "useStart": [825, 898], "useEnd": [873, 940], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_packages_apps_Browser/tree/master/src/com/android/browser/BrowserBookmarksAdapter.java", "rawCode": "  /**\n   * Update a row in the database with new information. Requeries the database if the information\n   * has changed.\n   *\n   * @param map Bundle storing id, title and url of new information\n   */\n  public void updateRow(Bundle map) {\n\n    // Find the record\n    int id = map.getInt(\"id\");\n    int position = -1;\n    for (mCursor.moveToFirst(); !mCursor.isAfterLast(); mCursor.moveToNext()) {\n      if (mCursor.getInt(Browser.HISTORY_PROJECTION_ID_INDEX) == id) {\n        position = mCursor.getPosition();\n        break;\n      }\n    }\n    if (position < 0) {\n      return;\n    }\n\n    mCursor.moveToPosition(position);\n    ContentValues values = new ContentValues();\n    String title = map.getString(Browser.BookmarkColumns.TITLE);\n    if (!title.equals(mCursor.getString(Browser.HISTORY_PROJECTION_TITLE_INDEX))) {\n      values.put(Browser.BookmarkColumns.TITLE, title);\n    }\n    String url = map.getString(Browser.BookmarkColumns.URL);\n    if (!url.equals(mCursor.getString(Browser.HISTORY_PROJECTION_URL_INDEX))) {\n      values.put(Browser.BookmarkColumns.URL, url);\n    }\n\n    if (map.getBoolean(\"invalidateThumbnail\") == true) {\n      values.put(Browser.BookmarkColumns.THUMBNAIL, new byte[0]);\n    }\n    if (values.size() > 0\n        && mContentResolver.update(Browser.BOOKMARKS_URI, values, \"_id = \" + id, null) != -1) {\n      refreshList();\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 664, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null&&bundle.containsKey(key,)", "guardType": "IF {", "guardExpressionStart": 2637, "guardExpressionEnd": 2722, "guardBlockStart": 2637, "guardBlockEnd": 2869, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 2748, "focalAPIEnd": 2802, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getDefaultImageIDForTag(value)"], "useStart": [3058], "useEnd": [3108], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/astrid/src/com/todoroo/astrid/adapter/FilterAdapter.java", "rawCode": "  public void populateView(ViewHolder viewHolder) {\n    FilterListItem filter = viewHolder.item;\n    if (filter == null) return;\n\n    viewHolder.view.setBackgroundResource(0);\n\n    if (viewHolder.decoration != null) {\n      ((ViewGroup) viewHolder.view).removeView(viewHolder.decoration);\n      viewHolder.decoration = null;\n    }\n\n    if (viewHolder.item instanceof FilterListHeader || viewHolder.item instanceof FilterCategory) {\n      viewHolder.name.setTextAppearance(activity, headerStyle);\n      viewHolder.name.setShadowLayer(1, 1, 1, Color.BLACK);\n    } else {\n      viewHolder.name.setTextAppearance(activity, filterStyle);\n      viewHolder.name.setShadowLayer(0, 0, 0, 0);\n    }\n\n    // update with filter attributes (listing icon, url, update text, size)\n\n    viewHolder.urlImage.setVisibility(View.GONE);\n    viewHolder.icon.setVisibility(View.GONE);\n\n    if (!nook && filter.listingIcon != null) {\n      viewHolder.icon.setVisibility(View.VISIBLE);\n      viewHolder.icon.setImageBitmap(filter.listingIcon);\n    }\n\n    // title / size\n    int countInt = -1;\n    if (filterCounts.containsKey(filter)\n        || (!TextUtils.isEmpty(filter.listingTitle)\n            && filter.listingTitle.matches(\".* \\\\(\\\\d+\\\\)$\"))) { // $NON-NLS-1$\n      viewHolder.size.setVisibility(View.VISIBLE);\n      String count;\n      if (filterCounts.containsKey(filter)) {\n        Integer c = filterCounts.get(filter);\n        countInt = c;\n        count = c.toString();\n      } else {\n        count =\n            filter.listingTitle.substring(\n                filter.listingTitle.lastIndexOf('(') + 1, filter.listingTitle.length() - 1);\n        try {\n          countInt = Integer.parseInt(count);\n        } catch (NumberFormatException e) {\n          //\n        }\n      }\n      viewHolder.size.setText(count);\n\n      String title;\n      int listingTitleSplit = filter.listingTitle.lastIndexOf(' ');\n      if (listingTitleSplit > 0) {\n        title = filter.listingTitle.substring(0, listingTitleSplit);\n      } else {\n        title = filter.listingTitle;\n      }\n      viewHolder.name.setText(title);\n    } else {\n      viewHolder.name.setText(filter.listingTitle);\n      viewHolder.size.setVisibility(View.GONE);\n      countInt = -1;\n    }\n\n    if (countInt == 0 && filter instanceof FilterWithCustomIntent)\n      viewHolder.name.setTextColor(Color.GRAY);\n\n    viewHolder.name.getLayoutParams().height = (int) (58 * metrics.density);\n    if (!nook && filter instanceof FilterWithUpdate) {\n      String defaultImageId = RemoteModel.NO_UUID;\n      FilterWithUpdate fwu = (FilterWithUpdate) filter;\n      Bundle customExtras = fwu.customExtras;\n      if (customExtras != null && customExtras.containsKey(TagViewFragment.EXTRA_TAG_UUID))\n        defaultImageId = customExtras.getString(TagViewFragment.EXTRA_TAG_UUID);\n      else defaultImageId = viewHolder.name.getText().toString();\n\n      viewHolder.urlImage.setVisibility(View.VISIBLE);\n      viewHolder.urlImage.setDefaultImageDrawable(\n          ResourceDrawableCache.getImageDrawableFromId(\n              resources, TagService.getDefaultImageIDForTag(defaultImageId)));\n      viewHolder.urlImage.setUrl(((FilterWithUpdate) filter).imageUrl);\n    }\n\n    if (nook) {\n      RelativeLayout.LayoutParams params =\n          (RelativeLayout.LayoutParams) viewHolder.name.getLayoutParams();\n      params.setMargins((int) (8 * metrics.density), 0, 0, 0);\n    }\n\n    if (filter.color != 0) viewHolder.name.setTextColor(filter.color);\n\n    // selection\n    if (selection == viewHolder.item) {\n      viewHolder.selected.setVisibility(View.VISIBLE);\n      viewHolder.view.setBackgroundColor(Color.rgb(128, 230, 0));\n    } else viewHolder.selected.setVisibility(View.GONE);\n\n    if (filter instanceof FilterCategoryWithNewButton)\n      setupCustomHeader(viewHolder, (FilterCategoryWithNewButton) filter);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 665, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 456, "focalAPIEnd": 500, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(*,value)"], "useStart": [1022], "useEnd": [1157], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/luigiliquori/myMed/tree/master/frontend/binary/android/myjam/src/com/mymed/android/myjam/service/CallService.java", "rawCode": "  /**\n   * Executes the operations necessary to store the results upon a successful {@link GET_FEEDBACKS}.\n   *\n   * @param callBean\n   * @throws OperationApplicationException\n   * @throws RemoteException\n   * @throws InternalBackEndException\n   */\n  private void handleGetFeedbacks(String message, Bundle attributes, int callCode)\n      throws RemoteException, OperationApplicationException, InternalBackEndException {\n    final String reportOrUpdateId = attributes.getString(CallContract.REPORT_ID);\n    final ArrayList<ContentProviderOperation> batch;\n\n    String jsonData = extractData(message, \"feedbacks\");\n    Type feedListType = new TypeToken<List<MFeedbackBean>>() {}.getType();\n    List<MFeedbackBean> listFeedBacks = this.gson.fromJson(jsonData, feedListType);\n    batch = new ArrayList<ContentProviderOperation>(listFeedBacks.size());\n    for (MFeedbackBean currFeedBack : listFeedBacks) {\n      ContentValues currVal = new ContentValues();\n      currVal.put(Feedback.USER_ID, currFeedBack.getUserId());\n      currVal.put(\n          callCode == CallCode.GET_REPORT_FEEDBACKS ? Feedback.REPORT_ID : Feedback.UPDATE_ID,\n          reportOrUpdateId);\n      currVal.put(Feedback.VALUE, currFeedBack.getValue());\n      batch.add(\n          ContentProviderOperation.newInsert(Feedback.CONTENT_URI).withValues(currVal).build());\n    }\n    mResolver.applyBatch(MyJamContract.CONTENT_AUTHORITY, batch);\n    mResolver.notifyChange(\n        callCode == CallCode.GET_REPORT_FEEDBACKS\n            ? Feedback.buildReportIdUri(null)\n            : Feedback.buildUpdateIdUri(null),\n        null);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 666, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.size()", "bundle.containsKey(String)"], "configurationStart": [663, 695], "configurationEnd": [677, 746], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 764, "focalAPIEnd": 813, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertNull(value)", "bundle.containsKey(String)", "bundle.getString(String)", "bundle.containsKey(String)", "bundle.getString(String)"], "useStart": [753, 831, 907, 975, 1065], "useEnd": [814, 883, 957, 1030, 1118], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/tests/coretests/src/android/os/PerformanceCollectorTest.java", "rawCode": "  @SmallTest\n  public void testAddMeasurementString() throws Exception {\n    MockPerformanceResultsWriter writer = new MockPerformanceResultsWriter();\n    mPerfCollector.setPerformanceResultsWriter(writer);\n    mPerfCollector.startTiming(\"testAddMeasurementString\");\n    mPerfCollector.addMeasurement(\"testAddMeasurementStringNull\", null);\n    mPerfCollector.addMeasurement(\"testAddMeasurementStringEmpty\", \"\");\n    mPerfCollector.addMeasurement(\"testAddMeasurementStringNonEmpty\", \"Hello World\");\n    mPerfCollector.stopTiming(\"\");\n\n    assertEquals(\"testAddMeasurementString\", writer.timingLabel);\n    Bundle results = writer.timingResults;\n    assertEquals(4, results.size());\n    assertTrue(results.containsKey(\"testAddMeasurementStringNull\"));\n    assertNull(results.getString(\"testAddMeasurementStringNull\"));\n    assertTrue(results.containsKey(\"testAddMeasurementStringEmpty\"));\n    assertEquals(\"\", results.getString(\"testAddMeasurementStringEmpty\"));\n    assertTrue(results.containsKey(\"testAddMeasurementStringNonEmpty\"));\n    assertEquals(\"Hello World\", results.getString(\"testAddMeasurementStringNonEmpty\"));\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 667, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [294], "initializationEnd": [312], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 432, "guardExpressionEnd": 451, "guardBlockStart": 432, "guardBlockEnd": 625, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 515, "focalAPIEnd": 541, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["execute(value)"], "useStart": [1357], "useEnd": [1393], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bmander/seattle-bus-bot/tree/master/src/com/joulespersecond/seattlebusbot/RouteInfoActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    UIHelp.bugHandler(this);\n    setContentView(R.layout.route_info);\n    registerForContextMenu(getExpandableListView());\n\n    final Intent intent = getIntent();\n    final Bundle bundle = intent.getExtras();\n    final Uri data = intent.getData();\n    if (data != null) {\n      mRouteId = data.getLastPathSegment();\n    } else if (bundle != null) {\n      // This is for backward compatibility\n      mRouteId = bundle.getString(ROUTE_ID);\n    } else {\n      Log.e(TAG, \"No route ID!\");\n      finish();\n      return;\n    }\n\n    mEmptyText = (TextView) findViewById(android.R.id.empty);\n\n    setListAdapter(\n        new SimpleExpandableListAdapter(\n            this,\n            new ArrayList<HashMap<String, String>>(),\n            android.R.layout.simple_expandable_list_item_1,\n            new String[] {\"name \"},\n            new int[] {android.R.id.text1},\n            new ArrayList<ArrayList<HashMap<String, String>>>(),\n            0,\n            null,\n            new int[] {}));\n\n    Object config = getLastNonConfigurationInstance();\n    if (config != null) {\n      Object[] results = (Object[]) config;\n      setHeader((ObaResponse) results[0], false);\n      setStopsForRoute((StopsForRouteInfo) results[1]);\n    } else {\n      mRouteInfoTask = new GetRouteInfo().execute(mRouteId);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 668, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 147, "focalAPIEnd": 176, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 182, "followUpCheckExpressionEnd": 198, "followUpCheckBlockStart": 182, "followUpCheckBlockEnd": 246, "use": ["TabHost.setCurrentTabByTag(value)"], "useStart": [207], "useEnd": [239], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/android/app/TabActivity.java", "rawCode": "  @Override\n  protected void onRestoreInstanceState(Bundle state) {\n    super.onRestoreInstanceState(state);\n    ensureTabHost();\n    String cur = state.getString(\"currentTab\");\n    if (cur != null) {\n      mTabHost.setCurrentTabByTag(cur);\n    }\n    if (mTabHost.getCurrentTab() < 0) {\n      if (mDefaultTab != null) {\n        mTabHost.setCurrentTabByTag(mDefaultTab);\n      } else if (mDefaultTabIndex >= 0) {\n        mTabHost.setCurrentTab(mDefaultTabIndex);\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 669, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null&&bundle.containsKey(key,)", "guardType": "IF {", "guardExpressionStart": 397, "guardExpressionEnd": 521, "guardBlockStart": 397, "guardBlockEnd": 776, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 592, "focalAPIEnd": 639, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createFromSerialized(value)"], "useStart": [554], "useEnd": [640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vidma/aac-speech-android/tree/master/source/src/com/epfl/android/aac_speech/MainActivity.java", "rawCode": "  /**\n   * restores the current phrase from its serialized form saved in Bundle\n   *\n   * @param savedInstState\n   */\n  protected void restoreInstanceState(Bundle savedInstState) {\n    Log.d(\n        TAG,\n        \"restoreInstanceState from bundle=\"\n            + savedInstState\n            + \" picFactory=\"\n            + pictogramFactory\n            + \" nlgConv=\"\n            + nlgConverter);\n    if (savedInstState != null\n        && savedInstState.containsKey(SAVED_INST_PHRASE_KEY)\n        && pictogramFactory != null) {\n      phrase_list =\n          pictogramFactory.createFromSerialized(savedInstState.getString(SAVED_INST_PHRASE_KEY));\n      Log.d(TAG, \"restoredInstanceState from: \" + savedInstState.getString(SAVED_INST_PHRASE_KEY));\n      updatePhraseDisplay();\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 670, "initialization": ["Bundle bundle = respond(Bundle)"], "initializationStart": [552], "initializationEnd": [574], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 600, "focalAPIEnd": 649, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equals(value)"], "useStart": [664], "useEnd": [700], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/core/java/android/provider/Gmail.java", "rawCode": "    /**\n     * When a conversation cursor is created it becomes the active network cursor, which means that\n     * it will fetch results from the network if it needs to in order to show all mail that matches\n     * its query. If you later want to requery an older cursor and would like that cursor to be the\n     * active cursor you need to call this method before requerying.\n     */\n    public void becomeActiveNetworkCursor() {\n      Bundle input = new Bundle();\n      input.putString(RESPOND_INPUT_COMMAND, COMMAND_ACTIVATE);\n      Bundle output = mCursor.respond(input);\n      String response = output.getString(RESPOND_OUTPUT_COMMAND_RESPONSE);\n      assert COMMAND_RESPONSE_OK.equals(response);\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 671, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getByteArray(String)"], "configurationStart": [377], "configurationEnd": [414], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 274, "guardExpressionEnd": 293, "guardBlockStart": 274, "guardBlockEnd": 320, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 847, "focalAPIEnd": 874, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "new SslCertificate(value,*,*,*,X509Certificate)"], "useStart": [884, 931, 986, 819], "useEnd": [911, 965, 1019, 1046], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/java/android/net/http/SslCertificate.java", "rawCode": "  /**\n   * Restores the certificate stored in the bundle\n   *\n   * @param bundle The bundle with the certificate state stored in it\n   * @return The SSL certificate stored in the bundle or null if fails\n   */\n  public static SslCertificate restoreState(Bundle bundle) {\n    if (bundle == null) {\n      return null;\n    }\n    X509Certificate x509Certificate;\n    byte[] bytes = bundle.getByteArray(X509_CERTIFICATE);\n    if (bytes == null) {\n      x509Certificate = null;\n    } else {\n      try {\n        CertificateFactory certFactory = CertificateFactory.getInstance(\"X.509\");\n        Certificate cert = certFactory.generateCertificate(new ByteArrayInputStream(bytes));\n        x509Certificate = (X509Certificate) cert;\n      } catch (CertificateException e) {\n        x509Certificate = null;\n      }\n    }\n    return new SslCertificate(\n        bundle.getString(ISSUED_TO),\n        bundle.getString(ISSUED_BY),\n        parseDate(bundle.getString(VALID_NOT_BEFORE)),\n        parseDate(bundle.getString(VALID_NOT_AFTER)),\n        x509Certificate);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 672, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 221, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createNew(List<String>,value,Date,AccessTokenSource)"], "useStart": [269], "useEnd": [324], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/imkevinxu/totoro/tree/master/facebook-android-sdk-3.0/facebook/src/com/facebook/AccessToken.java", "rawCode": "  static AccessToken createFromWebBundle(\n      List<String> requestedPermissions, Bundle bundle, AccessTokenSource source) {\n    Date expires = getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date());\n    String token = bundle.getString(ACCESS_TOKEN_KEY);\n\n    return createNew(requestedPermissions, token, expires, source);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 673, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getBoolean(String,boolean)"], "configurationStart": [216], "configurationEnd": [274], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 172, "guardExpressionEnd": 192, "guardBlockStart": 172, "guardBlockEnd": 1109, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 309, "focalAPIEnd": 351, "followUpCheck": "value != null", "checkType": "IF", "followUpCheckExpressionStart": 359, "followUpCheckExpressionEnd": 389, "followUpCheckBlockStart": 359, "followUpCheckBlockEnd": 504, "use": ["value.split(String)", "bundle.getBoolean(String,boolean)", "bundle.getString(String)", "bundle.getString(String)"], "useStart": [419, 526, 618, 869], "useEnd": [447, 585, 658, 915], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/imkevinxu/totoro/tree/master/facebook-android-sdk-master/facebook/src/com/facebook/widget/PickerFragment.java", "rawCode": "  private void setPickerFragmentSettingsFromBundle(Bundle inState) {\n    // We do this in a separate non-overridable method so it is safe to call from the constructor.\n    if (inState != null) {\n      showPictures = inState.getBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);\n      String extraFieldsString = inState.getString(EXTRA_FIELDS_BUNDLE_KEY);\n      if (extraFieldsString != null) {\n        String[] strings = extraFieldsString.split(\",\");\n        setExtraFields(Arrays.asList(strings));\n      }\n      showTitleBar = inState.getBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);\n      String titleTextString = inState.getString(TITLE_TEXT_BUNDLE_KEY);\n      if (titleTextString != null) {\n        titleText = titleTextString;\n        if (titleTextView != null) {\n          titleTextView.setText(titleText);\n        }\n      }\n      String doneButtonTextString = inState.getString(DONE_BUTTON_TEXT_BUNDLE_KEY);\n      if (doneButtonTextString != null) {\n        doneButtonText = doneButtonTextString;\n        if (doneButton != null) {\n          doneButton.setText(doneButtonText);\n        }\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 674, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 446, "guardExpressionEnd": 477, "guardBlockStart": 446, "guardBlockEnd": 962, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 749, "focalAPIEnd": 799, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new SharedPreferencesTokenCachingStrategy(*,value)", "restoreSession(*,SharedPreferencesTokenCachingStrategy,Session.StatusCallback,bundle)"], "useStart": [686, 835], "useEnd": [800, 921], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kgnvch/Shoppit/tree/master/facebook-android-sdk-3.5/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n\n    restoreFragments(savedInstanceState);\n\n    sessionStatusCallback =\n        new Session.StatusCallback() {\n          @Override\n          public void call(Session session, SessionState state, Exception exception) {\n            onSessionStateChange(session, state, exception);\n          }\n        };\n\n    if (savedInstanceState != null) {\n      if (savedInstanceState.getBoolean(SHOWING_SETTINGS_KEY)) {\n        showSettings();\n      } else {\n        showProfile();\n      }\n\n      SharedPreferencesTokenCachingStrategy restoredCache =\n          new SharedPreferencesTokenCachingStrategy(\n              this, savedInstanceState.getString(TOKEN_CACHE_NAME_KEY));\n      currentSession =\n          Session.restoreSession(this, restoredCache, sessionStatusCallback, savedInstanceState);\n    } else {\n      showProfile();\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 675, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [210], "initializationEnd": [226], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 247, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TextView.setText(value)"], "useStart": [281], "useEnd": [302], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BullShark/AndroidTutorial/tree/master/AndroidTutorial/src/ch/expectusafterlun/androidtutorial/Data.java", "rawCode": "  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (resultCode == RESULT_OK) {\n      Bundle basket = data.getExtras();\n      String str = basket.getString(\"answer\");\n      tvAnswer.setText(str);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 676, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 753, "focalAPIEnd": 789, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/g3tsum/rb_apps_Settings/tree/master/src/com/android/settings/fuelgauge/PowerUsageDetail.java", "rawCode": "  private void reportBatteryUse() {\n    if (mPackages == null) return;\n\n    ApplicationErrorReport report = new ApplicationErrorReport();\n    report.type = ApplicationErrorReport.TYPE_BATTERY;\n    report.packageName = mPackages[0];\n    report.installerPackageName = mInstaller.getPackageName();\n    report.processName = mPackages[0];\n    report.time = System.currentTimeMillis();\n    report.systemApp = (mApp.flags & ApplicationInfo.FLAG_SYSTEM) != 0;\n\n    final Bundle args = getArguments();\n    ApplicationErrorReport.BatteryInfo batteryInfo = new ApplicationErrorReport.BatteryInfo();\n    batteryInfo.usagePercent = args.getInt(EXTRA_PERCENT, 1);\n    batteryInfo.durationMicros = args.getLong(EXTRA_USAGE_DURATION, 0);\n    batteryInfo.usageDetails = args.getString(EXTRA_REPORT_DETAILS);\n    batteryInfo.checkinDetails = args.getString(EXTRA_REPORT_CHECKIN_DETAILS);\n    report.batteryInfo = batteryInfo;\n\n    Intent result = new Intent(Intent.ACTION_APP_ERROR);\n    result.setComponent(mInstaller);\n    result.putExtra(Intent.EXTRA_BUG_REPORT, report);\n    result.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n    startActivity(result);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 677, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 166, "focalAPIEnd": 198, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 211, "followUpCheckExpressionEnd": 235, "followUpCheckBlockStart": 211, "followUpCheckBlockEnd": 459, "use": ["ApplicationsState.getEntry(value)", "PackageManager.getPreferredActivities(List<IntentFilter>,List<ComponentName>,value)", "IUsbManager.hasDefaults(value)", "ActivityManager.getPackageScreenCompatMode(value)", "ActivityManager.getPackageAskScreenCompat(value)", "new AppSecurityPermissions(*,value)"], "useStart": [476, 1397, 1642, 2389, 2771, 3266], "useEnd": [504, 1461, 1678, 2431, 2812, 3320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iceandfire/android_packages_apps_Settings/tree/master/src/com/android/settings/applications/InstalledAppDetails.java", "rawCode": "  private boolean refreshUi() {\n    if (mMoveInProgress) {\n      return true;\n    }\n    final Bundle args = getArguments();\n    String packageName = (args != null) ? args.getString(ARG_PACKAGE_NAME) : null;\n    if (packageName == null) {\n      Intent intent =\n          (args == null) ? getActivity().getIntent() : (Intent) args.getParcelable(\"intent\");\n      if (intent != null) {\n        packageName = intent.getData().getSchemeSpecificPart();\n      }\n    }\n    mAppEntry = mState.getEntry(packageName);\n\n    if (mAppEntry == null) {\n      return false; // onCreate must have failed, make sure to exit\n    }\n\n    // Get application info again to refresh changed properties of application\n    try {\n      mPackageInfo =\n          mPm.getPackageInfo(\n              mAppEntry.info.packageName,\n              PackageManager.GET_DISABLED_COMPONENTS\n                  | PackageManager.GET_UNINSTALLED_PACKAGES\n                  | PackageManager.GET_SIGNATURES);\n    } catch (NameNotFoundException e) {\n      Log.e(TAG, \"Exception when retrieving package:\" + mAppEntry.info.packageName, e);\n      return false; // onCreate must have failed, make sure to exit\n    }\n\n    // Get list of preferred activities\n    List<ComponentName> prefActList = new ArrayList<ComponentName>();\n\n    // Intent list cannot be null. so pass empty list\n    List<IntentFilter> intentList = new ArrayList<IntentFilter>();\n    mPm.getPreferredActivities(intentList, prefActList, packageName);\n    if (localLOGV)\n      Log.i(TAG, \"Have \" + prefActList.size() + \" number of activities in prefered list\");\n    boolean hasUsbDefaults = false;\n    try {\n      hasUsbDefaults = mUsbManager.hasDefaults(packageName);\n    } catch (RemoteException e) {\n      Log.e(TAG, \"mUsbManager.hasDefaults\", e);\n    }\n    TextView autoLaunchView = (TextView) mRootView.findViewById(R.id.auto_launch);\n    if (prefActList.size() <= 0 && !hasUsbDefaults) {\n      // Disable clear activities button\n      autoLaunchView.setText(R.string.auto_launch_disable_text);\n      mActivitiesButton.setEnabled(false);\n    } else {\n      autoLaunchView.setText(R.string.auto_launch_enable_text);\n      mActivitiesButton.setEnabled(true);\n      mActivitiesButton.setOnClickListener(this);\n    }\n\n    // Screen compatibility section.\n    ActivityManager am = (ActivityManager) getActivity().getSystemService(Context.ACTIVITY_SERVICE);\n    int compatMode = am.getPackageScreenCompatMode(packageName);\n    // For now these are always off; this is the old UI model which we\n    // are no longer using.\n    if (false\n        && (compatMode == ActivityManager.COMPAT_MODE_DISABLED\n            || compatMode == ActivityManager.COMPAT_MODE_ENABLED)) {\n      mScreenCompatSection.setVisibility(View.VISIBLE);\n      mAskCompatibilityCB.setChecked(am.getPackageAskScreenCompat(packageName));\n      mAskCompatibilityCB.setOnCheckedChangeListener(this);\n      mEnableCompatibilityCB.setChecked(compatMode == ActivityManager.COMPAT_MODE_ENABLED);\n      mEnableCompatibilityCB.setOnCheckedChangeListener(this);\n    } else {\n      mScreenCompatSection.setVisibility(View.GONE);\n    }\n\n    // Security permissions section\n    LinearLayout permsView = (LinearLayout) mRootView.findViewById(R.id.permissions_section);\n    AppSecurityPermissions asp = new AppSecurityPermissions(getActivity(), packageName);\n    if (asp.getPermissionCount() > 0) {\n      permsView.setVisibility(View.VISIBLE);\n      // Make the security sections header visible\n      LinearLayout securityList =\n          (LinearLayout) permsView.findViewById(R.id.security_settings_list);\n      securityList.removeAllViews();\n      securityList.addView(asp.getPermissionsView());\n    } else {\n      permsView.setVisibility(View.GONE);\n    }\n\n    checkForceStop();\n    setAppLabelAndIcon(mPackageInfo);\n    refreshButtons();\n    refreshSizeInfo();\n    return true;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 678, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [71], "initializationEnd": [87], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 114, "focalAPIEnd": 164, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 172, "followUpCheckExpressionEnd": 194, "followUpCheckBlockStart": 172, "followUpCheckBlockEnd": 689, "use": ["createFromNativeLogin(bundle,*)", "bundle.getString(String)", "createErrorResult(value,*)"], "useStart": [250, 642, 606], "useEnd": [355, 679, 680], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/facebook/facebook/src/com/facebook/AuthorizationClient.java", "rawCode": "    private Result handleResultOk(Intent data) {\n      Bundle extras = data.getExtras();\n      String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);\n      if (errorType == null) {\n        return Result.createTokenResult(\n            AccessToken.createFromNativeLogin(\n                extras, AccessTokenSource.FACEBOOK_APPLICATION_NATIVE));\n      } else if (NativeProtocol.ERROR_SERVICE_DISABLED.equals(errorType)) {\n        return null;\n      } else if (NativeProtocol.ERROR_USER_CANCELED.equals(errorType)) {\n        return Result.createCancelResult(null);\n      } else {\n        return Result.createErrorResult(errorType, extras.getString(\"error_description\"));\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 679, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 484, "focalAPIEnd": 514, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setIndicator(value,*)"], "useStart": [396], "useEnd": [562], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kii-dev-jenkins/KiiSyncSampleApp/tree/master/src/com/kii/demo/sync/ui/FragmentTabsPager.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    setContentView(R.layout.fragment_tabs_pager);\n    mTabHost = (TabHost) findViewById(android.R.id.tabhost);\n    mTabHost.setup();\n\n    mViewPager = (ViewPager) findViewById(R.id.pager);\n\n    mTabsAdapter = new TabsAdapter(this, mTabHost, mViewPager);\n\n    mTabsAdapter.addTab(\n        mTabHost\n            .newTabSpec(TAG_DEVICE)\n            .setIndicator(\n                getString(R.string.tab_device), getResources().getDrawable(R.drawable.device)),\n        FileListFragment.class,\n        null);\n    mTabsAdapter.addTab(\n        mTabHost\n            .newTabSpec(TAG_CLOUD)\n            .setIndicator(\n                getString(R.string.tab_cloud), getResources().getDrawable(R.drawable.cloud)),\n        KiiFileFragment.class,\n        null);\n    if (savedInstanceState != null) {\n      mTabHost.setCurrentTabByTag(savedInstanceState.getString(\"tab\"));\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 680, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 368, "guardExpressionEnd": 387, "guardBlockStart": 368, "guardBlockEnd": 415, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 436, "focalAPIEnd": 463, "followUpCheck": "(value == null) || (value.length() == 0)", "checkType": "IF", "followUpCheckExpressionStart": 469, "followUpCheckExpressionEnd": 514, "followUpCheckBlockStart": 469, "followUpCheckBlockEnd": 542, "use": ["bundle.getLong(String,int)"], "useStart": [575], "useEnd": [614], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMS-Projects/copyit-app/tree/master/android/facebook/src/com/facebook/TokenCachingStrategy.java", "rawCode": "  /**\n   * Returns a boolean indicating whether a Bundle contains properties that could be a valid saved\n   * token.\n   *\n   * @param bundle A Bundle to check for token information.\n   * @return a boolean indicating whether a Bundle contains properties that could be a valid saved\n   *     token.\n   */\n  public static boolean hasTokenInformation(Bundle bundle) {\n    if (bundle == null) {\n      return false;\n    }\n\n    String token = bundle.getString(TOKEN_KEY);\n    if ((token == null) || (token.length() == 0)) {\n      return false;\n    }\n\n    long expiresMilliseconds = bundle.getLong(EXPIRATION_DATE_KEY, 0L);\n    if (expiresMilliseconds == 0L) {\n      return false;\n    }\n\n    return true;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 681, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getStringArrayList(String)"], "configurationStart": [241], "configurationEnd": [300], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 321, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["createNew(ArrayList<String>,value,Date,AccessTokenSource)"], "useStart": [386], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sravan2j/Cinequest-Android/tree/master/facebook/src/com/facebook/AccessToken.java", "rawCode": "  static AccessToken createFromNativeLogin(Bundle bundle, AccessTokenSource source) {\n    Date expires =\n        getBundleLongAsDate(bundle, NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, new Date(0));\n    ArrayList<String> permissions = bundle.getStringArrayList(NativeProtocol.EXTRA_PERMISSIONS);\n    String token = bundle.getString(NativeProtocol.EXTRA_ACCESS_TOKEN);\n\n    return createNew(permissions, token, expires, source);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 682, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 84, "guardExpressionEnd": 105, "guardBlockStart": 84, "guardBlockEnd": 161, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 129, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fishkingsin/WristbandProject/tree/master/FacebookSDK/src/com/facebook/widget/PickerFragment.java", "rawCode": "    @Override\n    void readSelectionFromBundle(Bundle inBundle, String key) {\n      if (inBundle != null) {\n        selectedId = inBundle.getString(key);\n      }\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 683, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 87, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytown/Phone_ics/tree/master/src/com/android/phone/EmergencyDialer.java", "rawCode": "  @Override\n  protected void onRestoreInstanceState(Bundle icicle) {\n    mLastNumber = icicle.getString(LAST_NUMBER);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 684, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 47, "focalAPIEnd": 79, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Mms/tree/master/src/com/android/mms/transaction/TransactionBundle.java", "rawCode": "  public String getProxyAddress() {\n    return mBundle.getString(PROXY_ADDRESS);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 685, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 105, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RssParserTaskLoader(*,int,value)"], "useStart": [189], "useEnd": [229], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/k9000/minimaruRSS/tree/master/src/com/tlulybluemonochrome/minimarurss/EntryActivity.java", "rawCode": "  @Override\n  public Loader<ArrayList<RssItem>> onCreateLoader(int flag, Bundle args) {\n    String url = args.getString(ItemDetailFragment.ARG_ITEM_ID);\n    RssParserTaskLoader appLoader = new RssParserTaskLoader(this, flag, url);\n\n    appLoader.forceLoad();\n    return appLoader;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 686, "initialization": ["Bundle bundle = Intent.getExtras()"], "initializationStart": [388], "initializationEnd": [406], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(bundle==null)", "guardType": "IF {", "guardExpressionStart": 412, "guardExpressionEnd": 431, "guardBlockStart": 412, "guardBlockEnd": 523, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 546, "focalAPIEnd": 581, "followUpCheck": "TextUtils.isEmpty(value)", "checkType": "IF", "followUpCheckExpressionStart": 1051, "followUpCheckExpressionEnd": 1082, "followUpCheckBlockStart": 1051, "followUpCheckBlockEnd": 1171, "use": ["new SmsMessageSender(*,String[],value,long)"], "useStart": [1450], "useEnd": [1502], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/packages_apps_Mms/tree/master/src/com/android/mms/ui/NoConfirmationSendService.java", "rawCode": "  @Override\n  protected void onHandleIntent(Intent intent) {\n    ComposeMessageActivity.log(\"NoConfirmationSendService onHandleIntent\");\n\n    String action = intent.getAction();\n    if (!SEND_NO_CONFIRM_INTENT_ACTION.equals(action)) {\n      ComposeMessageActivity.log(\n          \"NoConfirmationSendService onHandleIntent wrong action: \" + action);\n      return;\n    }\n    Bundle extras = intent.getExtras();\n    if (extras == null) {\n      ComposeMessageActivity.log(\"Called to send SMS but no extras\");\n      return;\n    }\n\n    String message = extras.getString(Intent.EXTRA_TEXT);\n\n    Uri intentUri = intent.getData();\n    String recipients = Conversation.getRecipients(intentUri);\n\n    if (TextUtils.isEmpty(recipients)) {\n      ComposeMessageActivity.log(\"Recipient(s) cannot be empty\");\n      return;\n    }\n    if (extras.getBoolean(\"showUI\", false)) {\n      intent.setClassName(this, \"com.android.mms.ui.ComposeMessageActivityNoLockScreen\");\n      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n      startActivity(intent);\n    } else {\n      if (TextUtils.isEmpty(message)) {\n        ComposeMessageActivity.log(\"Message cannot be empty\");\n        return;\n      }\n      String[] dests = TextUtils.split(recipients, \";\");\n\n      // Using invalid threadId 0 here. When the message is inserted into the db, the\n      // provider looks up the threadId based on the recipient(s).\n      long threadId = 0;\n      SmsMessageSender smsMessageSender = new SmsMessageSender(this, dests, message, threadId);\n      try {\n        // This call simply puts the message on a queue and sends a broadcast to start\n        // a service to send the message. In queing up the message, however, it does\n        // insert the message into the DB.\n        smsMessageSender.sendMessage(threadId);\n      } catch (Exception e) {\n        Log.e(TAG, \"Failed to send SMS message, threadId=\" + threadId, e);\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 687, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 641, "focalAPIEnd": 674, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["zipFiles(value,List<String>,String)"], "useStart": [624], "useEnd": [706], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/skrusche63/AMES-Web-Service/tree/master/ames-web-service/src/de/kp/ames/web/function/scm/ScmDQM.java", "rawCode": "  /**\n   * Process a Java-Module ZIP file representation of the cart\n   *\n   * @param jCheckout\n   * @return\n   * @throws Exception\n   * @throws Exception\n   */\n  public byte[] download(JSONArray jCheckout) throws Exception {\n\n    // generate HTML representation as readme\n    String semanticResearchReport = generateCheckoutHtml(jCheckout, true);\n\n    List<String> ids = new ArrayList<String>();\n    for (int i = 0; i < jCheckout.length(); i++) {\n      JSONObject record = jCheckout.getJSONObject(i);\n      ids.add(record.getString(\"id\"));\n    }\n\n    List<String> files = getAbsoluteFilenamesFromIds(ids);\n    byte[] zip = ZipUtil.zipFiles(bundle.getString(\"ames.scm.root\"), files, semanticResearchReport);\n\n    return zip;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 688, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 199, "guardExpressionEnd": 216, "guardBlockStart": 199, "guardBlockEnd": 470, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 239, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getSerializable(String)", "bundle.getBoolean(String)", "new AppStatsSummaryLoader(*,value,Timeframe,boolean)"], "useStart": [325, 406, 483], "useEnd": [382, 463, 562], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndlyticsProject/andlytics/tree/master/src/com/github/andlyticsproject/DownloadsFragment.java", "rawCode": "  @Override\n  public Loader<LoaderResult<AppStatsSummary>> onCreateLoader(int id, Bundle args) {\n    String packageName = null;\n    Timeframe timeframe = null;\n    boolean smoothEnabled = false;\n    if (args != null) {\n      packageName = args.getString(AppStatsSummaryLoader.ARG_PACKAGE_NAME);\n      timeframe = (Timeframe) args.getSerializable(AppStatsSummaryLoader.ARG_TIMEFRAME);\n      smoothEnabled = args.getBoolean(AppStatsSummaryLoader.ARG_SMOOTH_ENABLED);\n    }\n\n    return new AppStatsSummaryLoader(getActivity(), packageName, timeframe, smoothEnabled);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 689, "initialization": ["Bundle bundle = getArguments()"], "initializationStart": [129], "initializationEnd": [143], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 149, "guardExpressionEnd": 166, "guardBlockStart": 149, "guardBlockEnd": 293, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 189, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Wavesonics/TMinus/tree/master/TMinus/src/main/java/com/darkrockstudios/apps/tminus/experiences/agency/detail/fragments/CountryListDialog.java", "rawCode": "  @Override\n  public void onCreate(final Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    Bundle args = getArguments();\n    if (args != null) {\n      m_countries = args.getString(ARG_COUNTRIES);\n      m_adapter = new CountriesAdapter(getActivity(), m_countries);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 690, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getInt(String,int)", "bundle.getInt(String,int)"], "configurationStart": [216, 300], "configurationEnd": [275, 354], "guardCondition": "bundle!=null && bundle.containsKey(key,)", "guardType": "IF {", "guardExpressionStart": 169, "guardExpressionEnd": 189, "guardBlockStart": 169, "guardBlockEnd": 743, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 436, "focalAPIEnd": 477, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setSearchText(value)", "bundle.getParcelable(String)", "bundle.getBoolean(String,boolean)"], "useStart": [422, 570, 675], "useEnd": [478, 612, 736], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hyperactivity/android-app/tree/master/modules/facebook/src/com/facebook/widget/PlacePickerFragment.java", "rawCode": "  private void setPlacePickerSettingsFromBundle(Bundle inState) {\n    // We do this in a separate non-overridable method so it is safe to call from the constructor.\n    if (inState != null) {\n      setRadiusInMeters(inState.getInt(RADIUS_IN_METERS_BUNDLE_KEY, radiusInMeters));\n      setResultsLimit(inState.getInt(RESULTS_LIMIT_BUNDLE_KEY, resultsLimit));\n      if (inState.containsKey(SEARCH_TEXT_BUNDLE_KEY)) {\n        setSearchText(inState.getString(SEARCH_TEXT_BUNDLE_KEY));\n      }\n      if (inState.containsKey(LOCATION_BUNDLE_KEY)) {\n        Location location = inState.getParcelable(LOCATION_BUNDLE_KEY);\n        setLocation(location);\n      }\n      showSearchBox = inState.getBoolean(SHOW_SEARCH_BOX_BUNDLE_KEY, showSearchBox);\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 691, "initialization": ["Bundle bundle = getBundleExtra(*)"], "initializationStart": [1437], "initializationEnd": [1479], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 1487, "guardExpressionEnd": 1506, "guardBlockStart": 1487, "guardBlockEnd": 2984, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 1532, "focalAPIEnd": 1586, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "singleton(value)", "bundle.getFloat(String,*)", "bundle.getFloat(String,*)"], "useStart": [1618, 1702, 1931, 2155, 2229, 2287, 2520, 3243, 3310], "useEnd": [1675, 1758, 1971, 2195, 2263, 2322, 2547, 3282, 3350], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/magmapus/PGApp/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/encode/QRCodeEncoder.java", "rawCode": "  private void encodeQRCodeContents(Intent intent, String type) {\n    if (type.equals(Contents.Type.TEXT)) {\n      String data = intent.getStringExtra(Intents.Encode.DATA);\n      if (data != null && data.length() > 0) {\n        contents = data;\n        displayContents = data;\n        title = activity.getString(fakeR.getId(\"string\", \"contents_text\"));\n      }\n    } else if (type.equals(Contents.Type.EMAIL)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"mailto:\" + data;\n        displayContents = data;\n        title = activity.getString(fakeR.getId(\"string\", \"contents_email\"));\n      }\n    } else if (type.equals(Contents.Type.PHONE)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"tel:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(fakeR.getId(\"string\", \"contents_phone\"));\n      }\n    } else if (type.equals(Contents.Type.SMS)) {\n      String data = ContactEncoder.trim(intent.getStringExtra(Intents.Encode.DATA));\n      if (data != null) {\n        contents = \"sms:\" + data;\n        displayContents = PhoneNumberUtils.formatNumber(data);\n        title = activity.getString(fakeR.getId(\"string\", \"contents_sms\"));\n      }\n    } else if (type.equals(Contents.Type.CONTACT)) {\n\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n\n        String name = bundle.getString(ContactsContract.Intents.Insert.NAME);\n        String organization = bundle.getString(ContactsContract.Intents.Insert.COMPANY);\n        String address = bundle.getString(ContactsContract.Intents.Insert.POSTAL);\n        Collection<String> phones = new ArrayList<String>(Contents.PHONE_KEYS.length);\n        for (int x = 0; x < Contents.PHONE_KEYS.length; x++) {\n          phones.add(bundle.getString(Contents.PHONE_KEYS[x]));\n        }\n        Collection<String> emails = new ArrayList<String>(Contents.EMAIL_KEYS.length);\n        for (int x = 0; x < Contents.EMAIL_KEYS.length; x++) {\n          emails.add(bundle.getString(Contents.EMAIL_KEYS[x]));\n        }\n        String url = bundle.getString(Contents.URL_KEY);\n        String note = bundle.getString(Contents.NOTE_KEY);\n\n        ContactEncoder mecardEncoder =\n            useVCard ? new VCardContactEncoder() : new MECARDContactEncoder();\n        String[] encoded =\n            mecardEncoder.encode(\n                Collections.singleton(name),\n                organization,\n                Collections.singleton(address),\n                phones,\n                emails,\n                url,\n                note);\n        // Make sure we've encoded at least one field.\n        if (encoded[1].length() > 0) {\n          contents = encoded[0];\n          displayContents = encoded[1];\n          title = activity.getString(fakeR.getId(\"string\", \"contents_contact\"));\n        }\n      }\n\n    } else if (type.equals(Contents.Type.LOCATION)) {\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n        // These must use Bundle.getFloat(), not getDouble(), it's part of the API.\n        float latitude = bundle.getFloat(\"LAT\", Float.MAX_VALUE);\n        float longitude = bundle.getFloat(\"LONG\", Float.MAX_VALUE);\n        if (latitude != Float.MAX_VALUE && longitude != Float.MAX_VALUE) {\n          contents = \"geo:\" + latitude + ',' + longitude;\n          displayContents = latitude + \",\" + longitude;\n          title = activity.getString(fakeR.getId(\"string\", \"contents_location\"));\n        }\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 692, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getInt(String)", "bundle.getInt(String)"], "configurationStart": [348, 545], "configurationEnd": [374, 572], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 231, "guardExpressionEnd": 250, "guardBlockStart": 231, "guardBlockEnd": 1351, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 621, "focalAPIEnd": 655, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["put(String,value)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getInt(String)", "bundle.getInt(String)"], "useStart": [591, 699, 776, 957, 1104], "useEnd": [656, 738, 809, 983, 1131], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nebogeo/littlej/tree/master/android/Core/src/foam/littlej/android/app/services/UploadComments.java", "rawCode": "  private int addComments(Bundle bundle) {\n\n    final StringBuilder urlBuilder = new StringBuilder(Preferences.domain);\n    urlBuilder.append(\"/api\");\n    final HashMap<String, String> mParams = new HashMap<String, String>();\n\n    if (bundle != null) {\n      if (bundle.getInt(\"report_id\") > 0) {\n\n        mParams.put(\"incident_id\", String.valueOf(bundle.getInt(\"report_id\")));\n      }\n\n      if (bundle.getInt(\"checkin_id\") > 0) {\n        Log.i(\"Comment \", \"ID \" + bundle.getInt(\"checkin_id\"));\n        mParams.put(\"checkin_id\", String.valueOf(bundle.getInt(\"checkin_id\")));\n      }\n\n      mParams.put(\"comment_author\", bundle.getString(\"comment_author\"));\n      mParams.put(\"comment_description\", bundle.getString(\"comment_description\"));\n      mParams.put(\"comment_email\", bundle.getString(\"comment_email\"));\n\n      try {\n        if (new CommentHttpClient(this).PostFileUpload(urlBuilder.toString(), mParams)) {\n          // fetch comments\n          if (bundle.getInt(\"report_id\") > 0) {\n            new CommentHttpClient(this).getReportComments(bundle.getInt(\"report_id\"));\n          }\n          if (bundle.getInt(\"checkin_id\") > 0) {\n            new CommentHttpClient(this).getCheckinComments(bundle.getInt(\"checkin_id\"));\n          }\n          return 0;\n        }\n        return 1;\n      } catch (IOException e) {\n        return 2;\n      }\n    }\n    return 1;\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 693, "initialization": ["Bundle bundle = parseUrl(String)"], "initializationStart": [252], "initializationEnd": [270], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 296, "focalAPIEnd": 321, "followUpCheck": "value == null", "checkType": "IF", "followUpCheckExpressionStart": 331, "followUpCheckExpressionEnd": 349, "followUpCheckBlockStart": 331, "followUpCheckBlockEnd": 411, "use": ["bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "sendSuccessToListener(bundle)", "new FacebookRequestError(int,value,String)"], "useStart": [370, 443, 535, 617, 1152, 1423], "useEnd": [400, 472, 572, 647, 1181, 1479], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MMS-Projects/copyit-app/tree/master/android/facebook/src/com/facebook/widget/WebDialog.java", "rawCode": "    @Override\n    @SuppressWarnings(\"deprecation\")\n    public boolean shouldOverrideUrlLoading(WebView view, String url) {\n      Utility.logd(LOG_TAG, \"Redirect URL: \" + url);\n      if (url.startsWith(WebDialog.REDIRECT_URI)) {\n        Bundle values = Util.parseUrl(url);\n\n        String error = values.getString(\"error\");\n        if (error == null) {\n          error = values.getString(\"error_type\");\n        }\n\n        String errorMessage = values.getString(\"error_msg\");\n        if (errorMessage == null) {\n          errorMessage = values.getString(\"error_description\");\n        }\n        String errorCodeString = values.getString(\"error_code\");\n        int errorCode = FacebookRequestError.INVALID_ERROR_CODE;\n        if (!Utility.isNullOrEmpty(errorCodeString)) {\n          try {\n            errorCode = Integer.parseInt(errorCodeString);\n          } catch (NumberFormatException ex) {\n            errorCode = FacebookRequestError.INVALID_ERROR_CODE;\n          }\n        }\n\n        if (Utility.isNullOrEmpty(error)\n            && Utility.isNullOrEmpty(errorMessage)\n            && errorCode == FacebookRequestError.INVALID_ERROR_CODE) {\n          sendSuccessToListener(values);\n        } else if (error != null\n            && (error.equals(\"access_denied\") || error.equals(\"OAuthAccessDeniedException\"))) {\n          sendCancelToListener();\n        } else {\n          FacebookRequestError requestError =\n              new FacebookRequestError(errorCode, error, errorMessage);\n          sendErrorToListener(new FacebookServiceException(requestError, errorMessage));\n        }\n\n        WebDialog.this.dismiss();\n        return true;\n      } else if (url.startsWith(WebDialog.CANCEL_URI)) {\n        sendCancelToListener();\n        WebDialog.this.dismiss();\n        return true;\n      } else if (url.contains(DISPLAY_TOUCH)) {\n        return false;\n      }\n      // launch non-dialog URLs in a full browser\n      getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));\n      return true;\n    }\n"}, {"dataset": "bundleGetString", "exampleID": 694, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["bundle.getSerializable(String)", "bundle.getSerializable(String)"], "configurationStart": [703, 787], "configurationEnd": [749, 832], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 850, "focalAPIEnd": 887, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getSerializable(String)", "bundle.getStringArray(String)", "bundle.getInt(String)", "bundle.getString(String)", "bundle.getString(String)"], "useStart": [923, 995, 1069, 1141, 1216], "useEnd": [971, 1042, 1112, 1189, 1262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunriver/projects/tree/master/android/weiciyuan/src/org/qii/weiciyuan/ui/maintimeline/MentionsTimeLineFragment.java", "rawCode": "  @Override\n  public void onActivityCreated(Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n\n    switch (getCurrentState(savedInstanceState)) {\n      case FIRST_TIME_START:\n        if (Utility.isTaskStopped(dbTask)) {\n          dbTask = new DBCacheTask();\n          dbTask.executeOnExecutor(MyAsyncTask.THREAD_POOL_EXECUTOR);\n        }\n\n        groupDataCache.put(0, new MessageListBean());\n        groupDataCache.put(1, new MessageListBean());\n        groupDataCache.put(2, new MessageListBean());\n        break;\n      case SCREEN_ROTATE:\n        // nothing\n        refreshLayout(bean);\n        break;\n      case ACTIVITY_DESTROY_AND_CREATE:\n        userBean = (UserBean) savedInstanceState.getSerializable(\"userBean\");\n        accountBean = (AccountBean) savedInstanceState.getSerializable(\"account\");\n        token = savedInstanceState.getString(\"token\");\n        unreadBean = (UnreadBean) savedInstanceState.getSerializable(\"unreadBean\");\n\n        groupNames = savedInstanceState.getStringArray(\"groupNames\");\n        currentGroupId = savedInstanceState.getInt(\"currentGroupId\");\n        filter_by_author = savedInstanceState.getString(\"filter_by_author\");\n        filter_by_type = savedInstanceState.getString(\"filter_by_type\");\n\n        groupDataCache.put(0, (MessageListBean) savedInstanceState.getSerializable(\"0\"));\n        groupDataCache.put(1, (MessageListBean) savedInstanceState.getSerializable(\"1\"));\n        groupDataCache.put(2, (MessageListBean) savedInstanceState.getSerializable(\"2\"));\n\n        getList().replaceData((MessageListBean) savedInstanceState.getSerializable(\"bean\"));\n        timeLineAdapter.notifyDataSetChanged();\n        refreshLayout(getList());\n\n        break;\n    }\n    refreshUnread(this.unreadBean);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 695, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 663, "focalAPIEnd": 688, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["StringBuilder.append(value)"], "useStart": [535], "useEnd": [689], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/COMU/homescreen/tree/master/damla/FacebookExample/src/org/comu/HomeScreen1/Util.java", "rawCode": "  /**\n   * Generate the multi-part post body providing the parameters and boundary string\n   *\n   * @param parameters the parameters need to be posted\n   * @param boundary the random string as boundary\n   * @return a string of the post body\n   */\n  public static String encodePostBody(Bundle parameters, String boundary) {\n    if (parameters == null) return \"\";\n    StringBuilder sb = new StringBuilder();\n\n    for (String key : parameters.keySet()) {\n      if (parameters.getByteArray(key) != null) {\n        continue;\n      }\n\n      sb.append(\n          \"Content-Disposition: form-data; name=\\\"\"\n              + key\n              + \"\\\"\\r\\n\\r\\n\"\n              + parameters.getString(key));\n      sb.append(\"\\r\\n\" + \"--\" + boundary + \"\\r\\n\");\n    }\n\n    return sb.toString();\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 696, "initialization": ["Bundle bundle = getBundleExtra(*)"], "initializationStart": [421], "initializationEnd": [463], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null", "guardType": "IF {", "guardExpressionStart": 471, "guardExpressionEnd": 490, "guardBlockStart": 471, "guardBlockEnd": 1949, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 516, "focalAPIEnd": 570, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "singleton(value)", "bundle.getFloat(String,*)", "bundle.getFloat(String,*)"], "useStart": [602, 686, 915, 1139, 1213, 1271, 1504, 2208, 2275], "useEnd": [659, 742, 955, 1179, 1247, 1306, 1531, 2247, 2315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kerpie/truTest/tree/master/src/com/google/zxing/client/android/encode/QRCodeEncoder.java", "rawCode": "  private void encodeQRCodeContents(Intent intent, String type) {\n    if (type.equals(Contents.Type.TEXT)) {\n      String data = intent.getStringExtra(Intents.Encode.DATA);\n      if (data != null && data.length() > 0) {\n        contents = data;\n        displayContents = data;\n        title = activity.getString(R.string.contents_text);\n      }\n    } else if (type.equals(Contents.Type.CONTACT)) {\n\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n\n        String name = bundle.getString(ContactsContract.Intents.Insert.NAME);\n        String organization = bundle.getString(ContactsContract.Intents.Insert.COMPANY);\n        String address = bundle.getString(ContactsContract.Intents.Insert.POSTAL);\n        Collection<String> phones = new ArrayList<String>(Contents.PHONE_KEYS.length);\n        for (int x = 0; x < Contents.PHONE_KEYS.length; x++) {\n          phones.add(bundle.getString(Contents.PHONE_KEYS[x]));\n        }\n        Collection<String> emails = new ArrayList<String>(Contents.EMAIL_KEYS.length);\n        for (int x = 0; x < Contents.EMAIL_KEYS.length; x++) {\n          emails.add(bundle.getString(Contents.EMAIL_KEYS[x]));\n        }\n        String url = bundle.getString(Contents.URL_KEY);\n        String note = bundle.getString(Contents.NOTE_KEY);\n\n        ContactEncoder mecardEncoder =\n            useVCard ? new VCardContactEncoder() : new MECARDContactEncoder();\n        String[] encoded =\n            mecardEncoder.encode(\n                Collections.singleton(name),\n                organization,\n                Collections.singleton(address),\n                phones,\n                emails,\n                url,\n                note);\n        // Make sure we've encoded at least one field.\n        if (encoded[1].length() > 0) {\n          contents = encoded[0];\n          displayContents = encoded[1];\n          title = activity.getString(R.string.contents_text);\n        }\n      }\n\n    } else if (type.equals(Contents.Type.LOCATION)) {\n      Bundle bundle = intent.getBundleExtra(Intents.Encode.DATA);\n      if (bundle != null) {\n        // These must use Bundle.getFloat(), not getDouble(), it's part of the API.\n        float latitude = bundle.getFloat(\"LAT\", Float.MAX_VALUE);\n        float longitude = bundle.getFloat(\"LONG\", Float.MAX_VALUE);\n        if (latitude != Float.MAX_VALUE && longitude != Float.MAX_VALUE) {\n          contents = \"geo:\" + latitude + ',' + longitude;\n          displayContents = latitude + \",\" + longitude;\n          title = activity.getString(R.string.contents_text);\n        }\n      }\n    }\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 697, "initialization": ["Bundle bundle = WifiAssociationTestRunner.getArguments()"], "initializationStart": [305], "initializationEnd": [327], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 349, "focalAPIEnd": 385, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["bundle.getString(String)", "bundle.getString(String)", "bundle.getString(String)", "assertNotNull(String,value)"], "useStart": [399, 444, 498, 568], "useEnd": [426, 475, 535, 622], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/tests/ConnectivityManagerTest/src/com/android/connectivitymanagertest/functional/WifiAssociationTest.java", "rawCode": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    WifiAssociationTestRunner mRunner = (WifiAssociationTestRunner) getInstrumentation();\n    mWifiManager = (WifiManager) mRunner.getContext().getSystemService(Context.WIFI_SERVICE);\n    mAct = getActivity();\n    Bundle arguments = mRunner.getArguments();\n    mSecurityType = arguments.getString(\"security-type\");\n    mSsid = arguments.getString(\"ssid\");\n    mPassword = arguments.getString(\"password\");\n    mFrequencyBand = arguments.getString(\"frequency-band\");\n    mBand = mRunner.mBand;\n    assertNotNull(\"Security type is empty\", mSecurityType);\n    assertNotNull(\"Ssid is empty\", mSsid);\n    validateFrequencyBand();\n    // enable Wifi and verify wpa_supplicant is started\n    assertTrue(\"enable Wifi failed\", mAct.enableWifi());\n    sleep(\n        2 * ConnectivityManagerTestActivity.SHORT_TIMEOUT,\n        \"interrupted while waiting for WPA_SUPPLICANT to start\");\n    WifiInfo mConnection = mAct.mWifiManager.getConnectionInfo();\n    assertNotNull(mConnection);\n    assertTrue(\"wpa_supplicant is not started \", mAct.mWifiManager.pingSupplicant());\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 698, "initialization": ["Bundle bundle = getArguments()"], "initializationStart": [99], "initializationEnd": [113], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "bundle!=null&&bundle.containsKey(key,)", "guardType": "IF {", "guardExpressionStart": 119, "guardExpressionEnd": 174, "guardBlockStart": 119, "guardBlockEnd": 237, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 198, "focalAPIEnd": 230, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PerfectButter/platform_packages_apps_Settings/tree/master/src/com/android/settings/accounts/ManageAccountsSettings.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    Bundle args = getArguments();\n    if (args != null && args.containsKey(KEY_ACCOUNT_TYPE)) {\n      mAccountType = args.getString(KEY_ACCOUNT_TYPE);\n    }\n    addPreferencesFromResource(R.xml.manage_accounts_settings);\n    setHasOptionsMenu(true);\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 699, "initialization": ["Bundle bundle = getIntent()"], "initializationStart": [292], "initializationEnd": [303], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 420, "focalAPIEnd": 444, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(value)", "bundle.getBoolean(String,boolean)", "bundle.getInt(String)", "bundle.getInt(String)", "bundle.getInt(String)"], "useStart": [402, 464, 540, 578, 1816], "useEnd": [445, 501, 562, 600, 1838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wangkenan/d9game/tree/master/src/me/key/appmarket/IndexDetaileActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    // TODO Auto-generated method stub\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.indexdetail);\n    initActivity();\n    MarketApplication.getInstance().getAppLication().add(this);\n    Bundle bundle = getIntent().getBundleExtra(\"value\");\n    TextView tv_tiltle = (TextView) findViewById(R.id.topbar_title);\n    tv_tiltle.setText(bundle.getString(\"name\"));\n\n    isRecoTag = bundle.getBoolean(\"isRecoTag\", false);\n\n    if (!isRecoTag) {\n      type1 = bundle.getInt(\"type1\");\n      type2 = bundle.getInt(\"type2\");\n\n      new AsyncTask<Void, Void, Void>() {\n\n        @Override\n        protected Void doInBackground(Void... params) {\n          String str =\n              ToolHelper.donwLoadToString(\n                  Global.MAIN_URL\n                      + Global.INDEX_PAGE\n                      + \"?type1=\"\n                      + type1\n                      + \"&type2=\"\n                      + type2\n                      + \"&page=\"\n                      + page);\n          Log.e(\"tag\", \"indexDetaile result = \" + str);\n          if (str.equals(\"null\")) {\n            mHandler.sendEmptyMessage(Global.DOWN_DATA_EMPTY);\n          } else if (str.equals(\"-1\")) {\n            mHandler.sendEmptyMessage(Global.DOWN_DATA_FAILLY);\n          } else {\n            ParseJson(str);\n          }\n          return null;\n        }\n\n        protected void onPostExecute(Void result) {\n          File cache = new File(Environment.getExternalStorageDirectory(), \"cache\");\n          if (!cache.exists()) {\n            cache.mkdirs();\n          }\n          appAdapter = new AppAdapter(appDatainfos, IndexDetaileActivity.this, cache, mListView);\n          mListView.setAdapter(appAdapter);\n        };\n      }.execute();\n    } else {\n      tagid = bundle.getInt(\"tagid\");\n      new Thread(recoTagRunnable).start();\n    }\n\n    registerInstall();\n  }\n"}, {"dataset": "bundleGetString", "exampleID": 700, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "savedInstanceState.containsKey(key,)", "guardType": "IF {", "guardExpressionStart": 148, "guardExpressionEnd": 191, "guardBlockStart": 148, "guardBlockEnd": 285, "focalAPI": "value = bundle.getString(key)", "focalAPIStart": 239, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["v(String,value)"], "useStart": [202], "useEnd": [276], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunriver/projects/tree/master/android/com.oobe.HomeActivity/src/com/oobe/StartActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    if (savedInstanceState != null) {\n      if (savedInstanceState.containsKey(\"name\")) {\n        Log.v(\"StartActivity\", \"name=====\" + savedInstanceState.getString(\"name\"));\n      }\n    }\n\n    this.setContentView(R.layout.nav);\n    nextBtn = (Button) this.findViewById(R.id.next);\n    this.addListeners();\n\n    showContextItems();\n  }\n"}]