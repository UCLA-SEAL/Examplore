[{"dataset": "from", "exampleID": 4601, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 94, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "flater.findViewById(*)", "TableLayout.addView(flater)"], "useStart": [194, 298, 374], "useEnd": [233, 337, 407], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guardianproject/JustPayPhone/tree/master/app/src/info/guardianproject/justpayphone/app/popups/PayStubPopup.java", "rawCode": "  private void addTableRow(String labelText, String valueText) {\n    TableRow tr = (TableRow) LayoutInflater.from(a).inflate(R.layout.extras_paystub_row, null);\n\n    TextView label = (TextView) tr.findViewById(R.id.paystub_row_label);\n    label.setText(labelText);\n\n    TextView value = (TextView) tr.findViewById(R.id.paystub_row_value);\n    value.setText(valueText);\n\n    currentDayStatsHolder.addView(tr);\n  }\n"}, {"dataset": "from", "exampleID": 4602, "initialization": ["Context context = getActivity()"], "initializationStart": [94], "initializationEnd": [107], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 139, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidTh3ory/packages_apps_Settings/tree/master/src/com/android/settings/inputmethod/KeyboardLayoutDialogFragment.java", "rawCode": "  @Override\n  public Dialog onCreateDialog(Bundle savedInstanceState) {\n    Context context = getActivity();\n    LayoutInflater inflater = LayoutInflater.from(context);\n    AlertDialog.Builder builder =\n        new AlertDialog.Builder(context)\n            .setTitle(R.string.keyboard_layout_dialog_title)\n            .setPositiveButton(\n                R.string.keyboard_layout_dialog_setup_button,\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface dialog, int which) {\n                    onSetupLayoutsButtonClicked();\n                  }\n                })\n            .setSingleChoiceItems(\n                mAdapter,\n                -1,\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface dialog, int which) {\n                    onKeyboardLayoutClicked(which);\n                  }\n                })\n            .setView(inflater.inflate(R.layout.keyboard_layout_dialog_switch_hint, null));\n    updateSwitchHintVisibility();\n    return builder.create();\n  }\n"}, {"dataset": "from", "exampleID": 4603, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 2471, "focalAPIEnd": 2496, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Aethelflaed/connectbot/tree/master/src/org/connectbot/PortForwardListActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    long hostId = this.getIntent().getLongExtra(Intent.EXTRA_TITLE, -1);\n\n    setContentView(R.layout.act_portforwardlist);\n\n    // connect with hosts database and populate list\n    this.hostdb = new HostDatabase(this);\n    host = hostdb.findHostById(hostId);\n\n    {\n      final String nickname = host != null ? host.getNickname() : null;\n      final Resources resources = getResources();\n\n      if (nickname != null) {\n        this.setTitle(\n            String.format(\n                \"%s: %s (%s)\",\n                resources.getText(R.string.app_name),\n                resources.getText(R.string.title_port_forwards_list),\n                nickname));\n      } else {\n        this.setTitle(\n            String.format(\n                \"%s: %s\",\n                resources.getText(R.string.app_name),\n                resources.getText(R.string.title_port_forwards_list)));\n      }\n    }\n\n    connection =\n        new ServiceConnection() {\n          public void onServiceConnected(ComponentName className, IBinder service) {\n            TerminalManager bound = ((TerminalManager.TerminalBinder) service).getService();\n\n            hostBridge = bound.getConnectedBridge(host);\n            updateHandler.sendEmptyMessage(-1);\n          }\n\n          public void onServiceDisconnected(ComponentName name) {\n            hostBridge = null;\n          }\n        };\n\n    this.updateList();\n\n    this.registerForContextMenu(this.getListView());\n\n    this.getListView()\n        .setOnItemClickListener(\n            new OnItemClickListener() {\n              public void onItemClick(AdapterView<?> adapter, View view, int position, long id) {\n                ListView lv = PortForwardListActivity.this.getListView();\n                PortForwardBean pfb = (PortForwardBean) lv.getItemAtPosition(position);\n\n                if (hostBridge != null) {\n                  if (pfb.isEnabled()) hostBridge.disablePortForward(pfb);\n                  else {\n                    if (!hostBridge.enablePortForward(pfb))\n                      Toast.makeText(\n                              PortForwardListActivity.this,\n                              getString(R.string.portforward_problem),\n                              Toast.LENGTH_LONG)\n                          .show();\n                  }\n\n                  updateHandler.sendEmptyMessage(-1);\n                }\n              }\n            });\n\n    this.inflater = LayoutInflater.from(this);\n  }\n"}, {"dataset": "from", "exampleID": 4604, "initialization": ["Context context = MenuBuilder.getContext()"], "initializationStart": [73], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 129, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rcg0/arc/tree/master/android application/library2/src/com/actionbarsherlock/internal/view/menu/MenuItemImpl.java", "rawCode": "  public MenuItem setActionView(int resId) {\n    final Context context = mMenu.getContext();\n    final LayoutInflater inflater = LayoutInflater.from(context);\n    setActionView(inflater.inflate(resId, new LinearLayout(context), false));\n    return this;\n  }\n"}, {"dataset": "from", "exampleID": 4605, "initialization": ["Context context = getContext()"], "initializationStart": [127], "initializationEnd": [139], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 320, "focalAPIEnd": 353, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ActionDialogBuilder.setView(flater)", "flater.setText(*)", "flater.selectAll()", "new EditableValue(String,flater)", "flater.setText(*)", "flater.selectAll()", "new EditableValue(String,flater)"], "useStart": [537, 769, 858, 957, 1114, 1150, 1249], "useEnd": [559, 850, 875, 990, 1142, 1167, 1282], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mortenpi/ebookdroid/tree/master/src/org/ebookdroid/ui/viewer/dialogs/GoToPageDialog.java", "rawCode": "  @ActionMethod(ids = R.id.bookmark_add)\n  public void showAddBookmarkDlg(final ActionEx action) {\n    final Context context = getContext();\n    final View view = action.getParameter(IActionController.VIEW_PROPERTY);\n    final Bookmark bookmark = (Bookmark) view.getTag();\n\n    final EditText input =\n        (EditText) LayoutInflater.from(getContext()).inflate(R.layout.bookmark_edit, null);\n    final ActionDialogBuilder builder = new ActionDialogBuilder(getContext(), actions);\n    builder.setMessage(R.string.add_bookmark_name);\n    builder.setView(input);\n\n    if (bookmark == null) {\n      builder.setTitle(R.string.menu_add_bookmark);\n\n      final SeekBar seekbar = (SeekBar) findViewById(R.id.seekbar);\n      final int viewIndex = seekbar.getProgress();\n\n      input.setText(context.getString(R.string.text_page) + \" \" + (viewIndex + offset));\n      input.selectAll();\n\n      builder.setPositiveButton(\n          R.id.actions_addBookmark,\n          new EditableValue(\"input\", input),\n          new Constant(\"viewIndex\", viewIndex));\n    } else {\n      builder.setTitle(R.string.menu_edit_bookmark);\n\n      input.setText(bookmark.name);\n      input.selectAll();\n\n      builder.setPositiveButton(\n          R.id.actions_addBookmark,\n          new EditableValue(\"input\", input),\n          new Constant(\"bookmark\", bookmark));\n    }\n\n    builder.setNegativeButton().show();\n  }\n"}, {"dataset": "from", "exampleID": 4606, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 224, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup,boolean)"], "useStart": [284], "useEnd": [353], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MoresbyCoffee/stroll-android/tree/master/libraries/ZXingLib/src/com/google/zxing/client/android/share/BookmarkAdapter.java", "rawCode": "  @Override\n  public View getView(int index, View view, ViewGroup viewGroup) {\n    LinearLayout layout;\n    if (view instanceof LinearLayout) {\n      layout = (LinearLayout) view;\n    } else {\n      LayoutInflater factory = LayoutInflater.from(context);\n      layout = (LinearLayout) factory.inflate(R.layout.bookmark_picker_list_item, viewGroup, false);\n    }\n\n    if (!cursor.isClosed()) {\n      cursor.moveToPosition(index);\n      String title = cursor.getString(BookmarkPickerActivity.TITLE_COLUMN);\n      ((TextView) layout.findViewById(R.id.bookmark_title)).setText(title);\n      String url = cursor.getString(BookmarkPickerActivity.URL_COLUMN);\n      ((TextView) layout.findViewById(R.id.bookmark_url)).setText(url);\n    } // Otherwise... just don't update as the object is shutting down\n    return layout;\n  }\n"}, {"dataset": "from", "exampleID": 4607, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 293, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.setTag(ChildHolder)", "flater.getTag()"], "useStart": [559, 629], "useEnd": [585, 649], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fywb251/bsl_impc_android/tree/master/cube-android/src/com/foreveross/chameleon/phone/chat/group/GroupAdapter.java", "rawCode": "  @Override\n  public View getChildView(\n      int groupPosition,\n      int childPosition,\n      boolean isLastChild,\n      View convertView,\n      ViewGroup parent) {\n    ChildHolder holder = null;\n    if (null == convertView) {\n      holder = new ChildHolder();\n      convertView =\n          LayoutInflater.from(context).inflate(R.layout.item_allfriend_child, parent, false);\n      holder.headIv = (ImageView) convertView.findViewById(R.id.item_group_head_iv);\n      holder.nameTv = (TextView) convertView.findViewById(R.id.item_group_friend_name_tv);\n      convertView.setTag(holder);\n    } else {\n      holder = (ChildHolder) convertView.getTag();\n    }\n    UserModel friend = getChild(groupPosition, childPosition);\n\n    if (getHeadIcon(friend) != -1) {\n      holder.headIv.setImageResource(getHeadIcon(friend));\n    }\n    holder.headIv.setImageBitmap(\n        drawPushCount(context, holder.headIv, friend.getUnreadMessageCount()));\n    holder.nameTv.setText(friend.getName());\n    // holder.collectedBox.setFocusable(false);\n    // if (friend.isFavor()) {\n    // holder.collectedBox.setBackgroundResource(R.drawable.collected_on);\n    // } else {\n    // holder.collectedBox.setBackgroundResource(R.drawable.collected_off);\n    // }\n    // setListener(holder, groupPosition, childPosition);\n    return convertView;\n  }\n"}, {"dataset": "from", "exampleID": 4608, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kansas9000/myvlc/tree/master/java-libs/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4609, "initialization": ["Context context = getUiContext()"], "initializationStart": [147], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 220, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["create(Context,View,ViewGroup,flater)"], "useStart": [176], "useEnd": [249], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/policy/src/com/android/internal/policy/impl/GlobalActions.java", "rawCode": "    public View getView(int position, View convertView, ViewGroup parent) {\n      Action action = getItem(position);\n      final Context context = getUiContext();\n      return action.create(context, convertView, parent, LayoutInflater.from(context));\n    }\n"}, {"dataset": "from", "exampleID": 4610, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 1220, "focalAPIEnd": 1245, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schoentoon/Connectbot/tree/master/src/com/schoentoon/connectbot/PubkeyListActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n    setContentView(R.layout.act_pubkeylist);\n    getListView().setOnItemLongClickListener(this);\n\n    getSupportActionBar().setSubtitle(R.string.title_pubkey_list);\n    getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\n    // connect with hosts database and populate list\n    pubkeydb = new PubkeyDatabase(this);\n\n    updateList();\n\n    registerForContextMenu(getListView());\n\n    getListView()\n        .setOnItemClickListener(\n            new OnItemClickListener() {\n              public void onItemClick(AdapterView<?> adapter, View view, int position, long id) {\n                PubkeyBean pubkey = (PubkeyBean) getListView().getItemAtPosition(position);\n                boolean loaded = bound.isKeyLoaded(pubkey.getNickname());\n\n                // handle toggling key in-memory on/off\n                if (loaded) {\n                  bound.removeKey(pubkey.getNickname());\n                  updateHandler.sendEmptyMessage(-1);\n                } else {\n                  handleAddKey(pubkey);\n                }\n              }\n            });\n\n    clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);\n\n    inflater = LayoutInflater.from(this);\n  }\n"}, {"dataset": "from", "exampleID": 4611, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 113, "focalAPIEnd": 141, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.setLayoutParams(*)", "flater.setGravity(*)", "flater.setVisibility(*)"], "useStart": [190, 303, 348], "useEnd": [297, 342, 385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world2/tree/master/baseworld2/src/com/tianxia/lib/baseworld2/utils/EmptyViewUtils.java", "rawCode": "  public static View createLoadingView(Context context) {\n    LinearLayout linearLayout =\n        (LinearLayout) LayoutInflater.from(context).inflate(R.layout.list_empty_loading, null);\n    linearLayout.setLayoutParams(\n        new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));\n    linearLayout.setGravity(Gravity.CENTER);\n    linearLayout.setVisibility(View.GONE);\n    return linearLayout;\n  }\n"}, {"dataset": "from", "exampleID": 4612, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 358, "focalAPIEnd": 400, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "ActionMode.setCustomView(flater)", "flater.findViewById(*)"], "useStart": [541, 621, 686], "useEnd": [605, 666, 736], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cadavre/android_packages_apps_Mms/tree/master/src/com/android/mms/ui/ConversationList.java", "rawCode": "    public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n      MenuInflater inflater = getMenuInflater();\n      mSelectedThreadIds = new HashSet<Long>();\n      inflater.inflate(R.menu.conversation_multi_select_menu, menu);\n\n      if (mMultiSelectActionBarView == null) {\n        mMultiSelectActionBarView =\n            (ViewGroup)\n                LayoutInflater.from(ConversationList.this)\n                    .inflate(R.layout.conversation_list_multi_select_actionbar, null);\n\n        mSelectedConvCount =\n            (TextView) mMultiSelectActionBarView.findViewById(R.id.selected_conv_count);\n      }\n      mode.setCustomView(mMultiSelectActionBarView);\n      ((TextView) mMultiSelectActionBarView.findViewById(R.id.title))\n          .setText(R.string.select_conversations);\n      return true;\n    }\n"}, {"dataset": "from", "exampleID": 4613, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 205, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addView(flater,LinearLayout.LayoutParams)"], "useStart": [280], "useEnd": [303], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/comsince/myappweixin/tree/master/musicPlayer/src/com/comsince/knowledge/view/xlistview/XListViewHeader.java", "rawCode": "  private void initView(Context context) {\n    // 初始情况，设置下拉刷新view高度为0\n    LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);\n    mContainer =\n        (LinearLayout) LayoutInflater.from(context).inflate(R.layout.xlistview_header, null);\n    addView(mContainer, lp);\n    setGravity(Gravity.BOTTOM);\n\n    mArrowImageView = (ImageView) findViewById(R.id.xlistview_header_arrow);\n    mHintTextView = (TextView) findViewById(R.id.xlistview_header_hint_textview);\n    mProgressBar = (ProgressBar) findViewById(R.id.xlistview_header_progressbar);\n\n    mRotateUpAnim =\n        new RotateAnimation(\n            0.0f, -180.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n    mRotateUpAnim.setDuration(ROTATE_ANIM_DURATION);\n    mRotateUpAnim.setFillAfter(true);\n    mRotateDownAnim =\n        new RotateAnimation(\n            -180.0f, 0.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n    mRotateDownAnim.setDuration(ROTATE_ANIM_DURATION);\n    mRotateDownAnim.setFillAfter(true);\n  }\n"}, {"dataset": "from", "exampleID": 4614, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 86, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pdudits/supergenpass-android/tree/master/src/info/staticfree/SuperGenPass/Super_Gen_Pass.java", "rawCode": "  private View createTabIndicator(int titleRes) {\n    final LayoutInflater inflater = LayoutInflater.from(this);\n    final TextView tab = (TextView) inflater.inflate(R.layout.tab_indicator, null);\n    tab.setText(titleRes);\n    return tab;\n  }\n"}, {"dataset": "from", "exampleID": 4615, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 1072, "focalAPIEnd": 1097, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)", "layoutInflater.from(*)"], "useStart": [1145, 6720], "useEnd": [1214, 6745], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vitkin/aptoide-uploader/tree/master/src/pt/aptoide/backupapps/Aptoide.java", "rawCode": "  @Override\n  public boolean onOptionsItemSelected(MenuItem item) {\n    EnumOptionsMenu menuEntry = EnumOptionsMenu.reverseOrdinal(item.getItemId());\n    Log.d(\"Aptoide-OptionsMenu\", \"menuOption: \" + menuEntry + \" itemid: \" + item.getItemId());\n    switch (menuEntry) {\n        // case MANAGE_REPO:\n        // availableAdapter.sleep();\n        // Intent manageRepo = new Intent(this, ManageRepos.class);\n        // startActivity(manageRepo);\n        // return true;\n\n      case UNINSTALL:\n        try {\n          serviceDataCaller.callUninstallApps(installedAdapter.getSelectedIds());\n        } catch (RemoteException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n        return true;\n\n      case DELETE:\n        // TODO improve listIds as an extended parcelable array ;) then use it as a carrier for\n        // checked hashids list\n        return true;\n\n      case DISPLAY_OPTIONS:\n        if (!loadingRepos.get()) {\n          // TODO refactor extract dialog management class\n          LayoutInflater displayOptionsInflater = LayoutInflater.from(this);\n          View displayOptions =\n              displayOptionsInflater.inflate(R.layout.dialog_display_options, null);\n          Builder dialogBuilder = new AlertDialog.Builder(theme).setView(displayOptions);\n          final AlertDialog sortDialog = dialogBuilder.create();\n          sortDialog.setIcon(android.R.drawable.ic_menu_sort_by_size);\n          sortDialog.setTitle(getString(R.string.display_options));\n\n          // ***********************************************************\n          // Categories\n          // final RadioButton byCategory = (RadioButton)\n          // displayOptions.findViewById(R.id.by_category);\n          // final RadioButton byAll = (RadioButton) displayOptions.findViewById(R.id.by_all);\n          // if(availableByCategory){\n          // byCategory.setChecked(true);\n          // }else{\n          // byAll.setChecked(true);\n          // }\n          //\n          // final View spacer = displayOptions.findViewById(R.id.spacer);\n          //\n          // if(currentAppsList != EnumAppsLists.Available){\n          // spacer.setVisibility(View.GONE);\n          // ((RadioGroup) displayOptions.findViewById(R.id.group_show)).setVisibility(View.GONE);\n          // }\n\n          // ***********************************************************\n          // Sorting\n          final View group_sort = displayOptions.findViewById(R.id.group_sort);\n          final RadioButton byAlphabetic =\n              (RadioButton) displayOptions.findViewById(R.id.by_alphabetic);\n          final RadioButton byFreshness =\n              (RadioButton) displayOptions.findViewById(R.id.by_freshness);\n          final RadioButton bySize = (RadioButton) displayOptions.findViewById(R.id.by_size);\n\n          // spacer.setVisibility(View.VISIBLE);\n          group_sort.setVisibility(View.VISIBLE);\n          switch (appsSortingPolicy) {\n            case ALPHABETIC:\n              byAlphabetic.setChecked(true);\n              break;\n\n            case FRESHNESS:\n              byFreshness.setChecked(true);\n              break;\n\n            case SIZE:\n              bySize.setChecked(true);\n              break;\n\n            default:\n              break;\n          }\n\n          // ***********************************************************\n\n          final CheckBox showSystemApps =\n              (CheckBox) displayOptions.findViewById(R.id.show_system_apps);\n          boolean showSystemAppsState = false;\n          try {\n            showSystemAppsState = serviceDataCaller.callGetShowSystemApps();\n          } catch (RemoteException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n          showSystemApps.setChecked(showSystemAppsState);\n          final boolean storedShowSystemAppsState = showSystemAppsState;\n\n          sortDialog.setButton(\n              getString(R.string.done),\n              new DialogInterface.OnClickListener() {\n\n                public void onClick(DialogInterface dialog, int which) {\n                  // boolean byCategoryChanged = false;\n                  EnumAppsSorting newSortingPolicy = null;\n\n                  // if(byCategory.isChecked() != availableByCategory){\n                  // byCategoryChanged = true;\n                  // availableByCategory = byCategory.isChecked();\n                  // setAvailableListBy(availableByCategory);\n                  // }\n\n                  if (showSystemApps.isChecked() != storedShowSystemAppsState) {\n                    setShowSystemApps(showSystemApps.isChecked());\n                  }\n\n                  if (byAlphabetic.isChecked()) {\n                    newSortingPolicy = EnumAppsSorting.ALPHABETIC;\n                  } else if (byFreshness.isChecked()) {\n                    newSortingPolicy = EnumAppsSorting.FRESHNESS;\n                  } else if (bySize.isChecked()) {\n                    newSortingPolicy = EnumAppsSorting.SIZE;\n                  }\n                  if (newSortingPolicy != null && newSortingPolicy != appsSortingPolicy) {\n                    // availableAdapter.sleep();\n                    appsSortingPolicy = newSortingPolicy;\n                    setAppsSortingPolicy(appsSortingPolicy);\n                  }\n\n                  // if(byCategoryChanged){\n                  // if(availableByCategory){\n                  // availableAdapter.sleep();\n                  // categoriesAdapter.resetDisplayCategories();\n                  // }else{\n                  // availableAdapter.resetDisplay(null);\n                  // }\n                  // }\n                  sortDialog.dismiss();\n                }\n              });\n\n          sortDialog.show();\n        } else {\n          Toast.makeText(\n                  Aptoide.this,\n                  getString(R.string.option_not_available_while_updating_repos),\n                  Toast.LENGTH_SHORT)\n              .show();\n        }\n        return true;\n\n        // case SEARCH_MENU:\n        // onSearchRequested();\n        // return true;\n\n      case UN_SELECT_ALL:\n        switch (currentAppsList) {\n          case RESTORE:\n            if (availableAdapter.isDynamic()) {\n              Toast.makeText(\n                      Aptoide.this,\n                      getString(R.string.too_many_apps_to_select_at_once),\n                      Toast.LENGTH_SHORT)\n                  .show();\n              return true;\n            }\n            availableAdapter.toggleSelectAll();\n            break;\n\n          case BACKUP:\n            installedAdapter.toggleSelectAll();\n            break;\n\n          default:\n            break;\n        }\n        return true;\n\n      case ABOUT:\n        LayoutInflater aboutInflater = LayoutInflater.from(this);\n        View about = aboutInflater.inflate(R.layout.about, null);\n        TextView info = (TextView) about.findViewById(R.id.credits);\n        info.setText(getString(R.string.credits, versionName));\n        Builder aboutCreator = new AlertDialog.Builder(theme).setView(about);\n        final AlertDialog aboutDialog = aboutCreator.create();\n        aboutDialog.setIcon(R.drawable.icon);\n        aboutDialog.setTitle(R.string.self_name);\n        // aboutDialog.setButton(getText(R.string.changelog), new DialogInterface.OnClickListener()\n        // {\n        // public void onClick(DialogInterface dialog, int whichButton) {\n        // Uri uri = Uri.parse(getString(R.string.changelog_url));\n        // startActivity(new Intent( Intent.ACTION_VIEW, uri));\n        // }\n        // });\n        aboutDialog.show();\n        return true;\n\n      case SETTINGS:\n        // availableAdapter.sleep();\n        Intent settings = new Intent(this, Settings.class);\n        startActivity(settings);\n        return true;\n\n      case LOGIN:\n        // boolean insertingRepo = false;\n        // try {\n        // insertingRepo = serviceDataCaller.callIsInsertingRepo();\n        // } catch (RemoteException e1) {\n        // // TODO Auto-generated catch block\n        // e1.printStackTrace();\n        // }\n        // if(insertingRepo){\n        // AptoideLog.d(Aptoide.this, getString(R.string.updating_repo_please_wait));\n        // Toast.makeText(getApplicationContext(),\n        // getResources().getString(R.string.updating_repo_please_wait), Toast.LENGTH_SHORT).show();\n        // }\n        // else{\n        Log.d(\"Aptoide-Settings\", \"clicked set server login\");\n        String token = null;\n        try {\n          token = serviceDataCaller.callGetServerToken();\n        } catch (RemoteException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n        if (token == null) {\n          Log.d(\"Aptoide-Settings\", \"No login set\");\n          Intent login = new Intent(Aptoide.this, BazaarLogin.class);\n          login.putExtra(\"InvoqueType\", BazaarLogin.InvoqueType.NO_CREDENTIALS_SET.ordinal());\n          startActivity(login);\n          // DialogLogin dialogLogin = new DialogLogin(Settings.this, serviceDataCaller,\n          // DialogLogin.InvoqueType.NO_CREDENTIALS_SET);\n          // loginComments.setOnDismissListener(new OnDismissListener() {\n          // @Override\n          // public void onDismiss(DialogInterface dialog) {\n          // addAppVersionComment();\n          // }\n          // });\n          // dialogLogin.show();\n        } else {\n          Log.d(\"Aptoide-Settings\", \"Login edit\");\n          Intent login = new Intent(Aptoide.this, BazaarLogin.class);\n          login.putExtra(\"InvoqueType\", BazaarLogin.InvoqueType.OVERRIDE_CREDENTIALS.ordinal());\n          startActivity(login);\n          // DialogLogin dialogLogin = new DialogLogin(Settings.this, serviceDataCaller,\n          // DialogLogin.InvoqueType.OVERRIDE_CREDENTIALS);\n          // Toast.makeText(Settings.this, \"Login already set\", Toast.LENGTH_SHORT).show();\n          // dialogLogin.show();\n        }\n        // }\n        return true;\n\n      case FOLLOW:\n        new DialogFollowOnSocialNets(this, serviceDataCaller).show();\n        return true;\n\n        // case SCHEDULED_DOWNLOADS:\n        // availableAdapter.sleep();\n        // Intent manageScheduled = new Intent(this, ManageScheduled.class);\n        // startActivity(manageScheduled);\n        // return true;\n\n        // case UPDATE_ALL:\n        // if(!loadingRepos.get()){\n        // AptoideLog.d(this, \"Update all\");\n        // try {\n        // serviceDataCaller.callUpdateAll();\n        // } catch (RemoteException e) {\n        // // TODO Auto-generated catch block\n        // e.printStackTrace();\n        // }\n        // }else{\n        // Toast.makeText(Aptoide.this, \"Option not available while updating stores!\",\n        // Toast.LENGTH_SHORT).show();\n        // }\n        // return true;\n\n      default:\n        return super.onOptionsItemSelected(item);\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4616, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 156, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iceandfire/android_packages_apps_Settings/tree/master/src/com/android/settings/MediaFormat.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedState) {\n    super.onCreate(savedState);\n\n    mInitialView = null;\n    mFinalView = null;\n    mInflater = LayoutInflater.from(this);\n\n    establishInitialState();\n  }\n"}, {"dataset": "from", "exampleID": 4617, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 243, "focalAPIEnd": 271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)"], "useStart": [393, 475, 546], "useEnd": [440, 515, 588], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/martencarlos/bp/tree/master/Bplux/src/ceu/marten/ui/adapters/DisplayChannelsListAdapter.java", "rawCode": "  @Override\n  public View getView(int position, View convertView, ViewGroup parent) {\n\n    // INFLATE ROW VIEW XML\n    ViewGroup rowView = (ViewGroup) convertView;\n    if (rowView == null) {\n      rowView =\n          (ViewGroup)\n              LayoutInflater.from(context).inflate(R.layout.li_channels_to_display, parent, false);\n    }\n\n    // GET VIEWS\n    TextView channelNumber = (TextView) rowView.findViewById(R.id.li_ctd_channelNumber);\n    TextView sensor = (TextView) rowView.findViewById(R.id.li_ctd_sensor);\n    CheckBox cb = (CheckBox) rowView.findViewById(R.id.li_ctd_checkbox);\n\n    // SETUP CHECK BOX\n    cb.setTag(R.id.TAG_POSITION, position);\n    cb.setOnClickListener(this);\n    if (checkedStatus[position] == true) {\n      cb.setChecked(true);\n    } else {\n      cb.setChecked(false);\n    }\n    // SETUP CHANNEL NUMBER\n    channelNumber.setText(channels.get(position));\n\n    // SETUP SENSOR\n    sensor.setText(sensors.get(position));\n\n    return rowView;\n  }\n"}, {"dataset": "from", "exampleID": 4618, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 86, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [86], "useEnd": [146], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mitmel/memory-traces/tree/master/src/edu/mit/mobile/android/locast/widget/TagList.java", "rawCode": "  @Override\n  protected void inflateLayout(Context context, AttributeSet attrs) {\n    LayoutInflater.from(context).inflate(R.layout.taglist, this);\n    final TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.TagList);\n    style = ta.getInt(R.styleable.TagList_taglist_type, R.id.full);\n\n    if (style == R.id.selector) {\n      findViewById(R.id.tag_manual_entry).setVisibility(View.GONE);\n      findViewById(R.id.tag_recommended_label).setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4619, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 230, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [285], "useEnd": [331], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OMFGB/packages_apps_Browser/tree/master/src/com/android/browser/DateSortedExpandableListAdapter.java", "rawCode": "  public View getGroupView(\n      int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {\n    TextView item;\n    if (null == convertView || !(convertView instanceof TextView)) {\n      LayoutInflater factory = LayoutInflater.from(mContext);\n      item = (TextView) factory.inflate(R.layout.history_header, null);\n    } else {\n      item = (TextView) convertView;\n    }\n    String label = mDateSorter.getLabel(groupPositionToBin(groupPosition));\n    item.setText(label);\n    return item;\n  }\n"}, {"dataset": "from", "exampleID": 4620, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 224, "focalAPIEnd": 252, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.setTag(GroupViewHolder)", "flater.getTag()"], "useStart": [786, 878], "useEnd": [821, 898], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boboxu/smile/tree/master/src/Smile/src/com/heme/smile/ui/view/ExpandableAdapter.java", "rawCode": "  @Override\n  public View getGroupView(\n      final int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {\n    GroupViewHolder groupViewHolder = null;\n    if (convertView == null) {\n      convertView = LayoutInflater.from(context).inflate(R.layout.expand_group_item, null);\n      groupViewHolder = new GroupViewHolder();\n      groupViewHolder.expandImg = (ImageView) convertView.findViewById(R.id.expand_tag);\n      groupViewHolder.ivAvatar = (ImageView) convertView.findViewById(R.id.group_avatar_iv);\n      groupViewHolder.name = (TextView) convertView.findViewById(R.id.group_name);\n      groupViewHolder.checkBox = (CheckBox) convertView.findViewById(R.id.checkbox);\n      groupViewHolder.rightImg = (ImageView) convertView.findViewById(R.id.right_img);\n      convertView.setTag(groupViewHolder);\n    } else {\n      groupViewHolder = (GroupViewHolder) convertView.getTag();\n    }\n    groupViewHolder.ivAvatar.setImageResource(logos[groupPosition]);\n    groupViewHolder.name.setText(((ChatGroup) getGroup(groupPosition)).name);\n    if (showCheckBox) {\n      groupViewHolder.expandImg.setVisibility(View.VISIBLE);\n      groupViewHolder.rightImg.setVisibility(View.GONE);\n      groupViewHolder.checkBox.setVisibility(View.VISIBLE);\n      // groupViewHolder.checkBox.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n      //\n      // @Override\n      // public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n      // ChatGroup group = getGroup(groupPosition);\n      // LinkedList<Contacter> contacters = groupContacterMap.get(group.id);\n      // if (isChecked) {\n      // for (Contacter contacter : contacters) {\n      // mCheckFlagMap.put(contacter.serverId, true);\n      // }\n      // }else {\n      // for (Contacter contacter : contacters) {\n      // mCheckFlagMap.put(contacter.serverId, false);\n      // }\n      // }\n      // notifyDataSetChanged();\n      // }\n      // });\n      groupViewHolder.checkBox.setOnClickListener(\n          new OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n              // TODO Auto-generated method stub\n              Boolean isChecked = ((CheckBox) v).isChecked();\n              if (isChecked) {\n                mGroupCheckMap.put(getGroup(groupPosition).id, true);\n                for (Contacter contacter : contacters) {\n                  if (contacter.groupId == getGroup(groupPosition).id) {\n                    mCheckFlagMap.put(contacter.serverId, true);\n                  }\n                }\n              } else {\n                mGroupCheckMap.put(getGroup(groupPosition).id, false);\n                for (Contacter contacter : contacters) {\n                  if (contacter.groupId == getGroup(groupPosition).id) {\n                    mCheckFlagMap.put(contacter.serverId, false);\n                  }\n                }\n              }\n              notifyDataSetChanged();\n            }\n          });\n      if (isExpanded) {\n        groupViewHolder.expandImg.setBackgroundResource(R.drawable.ibtn_gallery_zoom_out);\n      } else {\n        groupViewHolder.expandImg.setBackgroundResource(R.drawable.ibtn_gallery_zoom_in);\n      }\n      groupViewHolder.checkBox.setChecked(mGroupCheckMap.get(getGroup(groupPosition).id));\n    } else {\n      groupViewHolder.rightImg.setVisibility(View.VISIBLE);\n      groupViewHolder.checkBox.setVisibility(View.GONE);\n      groupViewHolder.expandImg.setVisibility(View.GONE);\n    }\n    return convertView;\n  }\n"}, {"dataset": "from", "exampleID": 4621, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brk3/finch/tree/master/libs/JakeWharton-ActionBarSherlock-2eabf25/library/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4622, "initialization": ["Context context = MenuBuilder.getContext()"], "initializationStart": [73], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 129, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SuikoHero38/CraveParty/tree/master/library/src/com/actionbarsherlock/internal/view/menu/MenuItemImpl.java", "rawCode": "  public MenuItem setActionView(int resId) {\n    final Context context = mMenu.getContext();\n    final LayoutInflater inflater = LayoutInflater.from(context);\n    setActionView(inflater.inflate(resId, new LinearLayout(context), false));\n    return this;\n  }\n"}, {"dataset": "from", "exampleID": 4623, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 59, "focalAPIEnd": 88, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup,boolean)"], "useStart": [59], "useEnd": [160], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/greendroid/GreenDroid/src/greendroid/widget/LoaderActionBarItem.java", "rawCode": "  @Override\n  protected View createItemView() {\n    return LayoutInflater.from(mContext)\n        .inflate(R.layout.gd_action_bar_item_loader, mActionBar, false);\n  }\n"}, {"dataset": "from", "exampleID": 4624, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 209, "focalAPIEnd": 244, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.setTag(VHCustomerCharacteristic)", "flater.getTag()"], "useStart": [639, 758], "useEnd": [683, 778], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunnyfarmer/SFTools/tree/master/SFPeddlers/src/sf/tools/peddlers/adapter/AdapterCustomerCharacteristic.java", "rawCode": "  @Override\n  public View getView(int position, View convertView, ViewGroup parent) {\n    VHCustomerCharacteristic vhCustomerCharacteristic = null;\n    if (convertView == null) {\n      convertView =\n          LayoutInflater.from(this.mActivity)\n              .inflate(R.layout.adapter_customer_characteristic, null);\n      vhCustomerCharacteristic = new VHCustomerCharacteristic();\n      vhCustomerCharacteristic.tvCharacteristic =\n          (TextView) convertView.findViewById(R.id.tvCharacteristic);\n      vhCustomerCharacteristic.rbgCharacteristic =\n          (RadioButtonGroup) convertView.findViewById(R.id.rbgCharacteristic);\n\n      convertView.setTag(vhCustomerCharacteristic);\n    } else {\n      vhCustomerCharacteristic = (VHCustomerCharacteristic) convertView.getTag();\n    }\n\n    final Characteristic characteristic = this.getItem(position);\n    vhCustomerCharacteristic.tvCharacteristic.setText(characteristic.getmCharacteristicName());\n    vhCustomerCharacteristic.rbgCharacteristic.setValues(\n        characteristic.getmCharacteristicItemStringArray());\n    vhCustomerCharacteristic.rbgCharacteristic.setCheckedValue(\n        characteristic.getmSelectedCharacteristicItem() != null\n            ? characteristic.getmSelectedCharacteristicItem().getmCharacteristicItemName()\n            : null);\n    vhCustomerCharacteristic.rbgCharacteristic.setOnCheckedChangeListener(\n        new OnCheckedChangeListener() {\n          @Override\n          public void onCheckedChange(String value) {\n            characteristic.setmSelectedCharacteristicItemString(value);\n          }\n        });\n    return convertView;\n  }\n"}, {"dataset": "from", "exampleID": 4625, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 180, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [229], "useEnd": [292], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhaoyuqing/SlidingMenu/tree/master/actionbarsherlock-samples/demos/src/com/actionbarsherlock/sample/demos/ActionProviders.java", "rawCode": "    /** {@inheritDoc} */\n    @Override\n    public View onCreateActionView() {\n      // Inflate the action view to be shown on the action bar.\n      LayoutInflater layoutInflater = LayoutInflater.from(mContext);\n      View view = layoutInflater.inflate(R.layout.settings_action_provider, null);\n      ImageButton button = (ImageButton) view.findViewById(R.id.button);\n      // Attach a click listener for launching the system settings.\n      button.setOnClickListener(\n          new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n              mContext.startActivity(sSettingsIntent);\n            }\n          });\n      return view;\n    }\n"}, {"dataset": "from", "exampleID": 4626, "initialization": ["Context context = Fragment.getActivity()"], "initializationStart": [133], "initializationEnd": [152], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 201, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [253], "useEnd": [292], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/oshepherd/Impeller/tree/master/src/eu/e43/impeller/uikit/CommentAdapter.java", "rawCode": "  @Override\n  public View getView(int position, View v, ViewGroup parent) {\n    ActivityWithAccount activity = (ActivityWithAccount) m_ctx.getActivity();\n    if (v == null) {\n      LayoutInflater vi = LayoutInflater.from(m_ctx.getActivity());\n      v = vi.inflate(R.layout.view_comment, null);\n    }\n\n    if (m_cursor == null) {\n      return v;\n    }\n\n    m_cursor.moveToPosition(position);\n    JSONObject comment = null;\n    try {\n      comment = new JSONObject(m_cursor.getString(0));\n    } catch (JSONException e) {\n      throw new RuntimeException(e);\n    }\n\n    AvatarView authorAvatar = (AvatarView) v.findViewById(R.id.commentAuthorAvatar);\n    TextView commentBody = (TextView) v.findViewById(R.id.commentBody);\n    TextView commentMeta = (TextView) v.findViewById(R.id.commentMeta);\n    ImageView image = (ImageView) v.findViewById(R.id.image);\n\n    JSONObject author = comment.optJSONObject(\"author\");\n    if (author != null) {\n      JSONObject imageObj = author.optJSONObject(\"image\");\n      if (imageObj != null)\n        activity.getImageLoader().setImage(authorAvatar, Utils.getImageUrl(activity, imageObj));\n\n      commentMeta.setText(\n          m_ctx.getResources().getString(R.string.comment_meta_by)\n              + \" \"\n              + author.optString(\"displayName\")\n              + \", \"\n              + Utils.humanDate(comment.optString(\"published\")));\n    }\n\n    JSONObject imageObj = comment.optJSONObject(\"image\");\n    if (imageObj != null) {\n      image.setVisibility(View.VISIBLE);\n      activity.getImageLoader().setImage(image, Utils.getImageUrl(activity, imageObj));\n    } else {\n      image.setVisibility(View.GONE);\n    }\n\n    Utils.updateStatebar(v, m_cursor.getInt(1), m_cursor.getInt(2), m_cursor.getInt(3));\n    PumpHtml.setFromHtml(activity, commentBody, comment.optString(\"content\"));\n\n    return v;\n  }\n"}, {"dataset": "from", "exampleID": 4627, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 154, "focalAPIEnd": 182, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.setTag(ViewHolder)", "flater.getTag()"], "useStart": [307, 376], "useEnd": [333, 396], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunqimin09/FirstApp/tree/master/AppTellOut/src/com/tellout/adapter/TypeAdapter.java", "rawCode": "  @Override\n  public View getView(int arg0, View convertView, ViewGroup arg2) {\n    ViewHolder holder;\n    if (convertView == null) {\n      convertView = LayoutInflater.from(context).inflate(R.layout.rank_list_item, null);\n      holder = new ViewHolder();\n      holder.tvName = new TextView(context);\n      convertView.setTag(holder);\n    } else {\n      holder = (ViewHolder) convertView.getTag();\n    }\n    holder.tvName.setText(list.get(arg0).getName());\n\n    return convertView;\n  }\n"}, {"dataset": "from", "exampleID": 4628, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 184, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [184], "useEnd": [244], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thaddeustaylor/ParkIt-Oakland-Android/tree/master/src/edu/pitt/designs1635/ParkIt/ParkItActivity.java", "rawCode": "  public void promptTutorial() {\n    AlertDialog.Builder ed = new AlertDialog.Builder(this);\n    ed.setIcon(R.drawable.ic_launcher);\n    ed.setTitle(\"First Time User\");\n    ed.setView(LayoutInflater.from(this).inflate(R.layout.tut_dialog, null));\n\n    SharedPreferences.Editor editor = prefs.edit();\n    editor.putBoolean(\"tutorial\", true);\n    editor.commit();\n\n    ed.setPositiveButton(\n        \"Yes\",\n        new android.content.DialogInterface.OnClickListener() {\n          public void onClick(DialogInterface dialog, int arg1) {\n            startActivity(new Intent(getApplicationContext(), Tutorial.class));\n          }\n        });\n\n    ed.setNegativeButton(\n        \"No\",\n        new android.content.DialogInterface.OnClickListener() {\n          public void onClick(DialogInterface dialog, int arg1) {}\n        });\n    ed.show();\n  }\n"}, {"dataset": "from", "exampleID": 4629, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 720, "focalAPIEnd": 749, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.addView(IcsSpinner,LinearLayout.LayoutParams)", "addView(flater)"], "useStart": [1034, 1290], "useEnd": [1074, 1313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ScootrNova/ClassyGames/tree/master/projects/android/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  public void setNavigationMode(int mode) {\n    final int oldMode = mNavigationMode;\n    if (mode != oldMode) {\n      switch (oldMode) {\n        case ActionBar.NAVIGATION_MODE_LIST:\n          if (mListNavLayout != null) {\n            removeView(mListNavLayout);\n          }\n          break;\n        case ActionBar.NAVIGATION_MODE_TABS:\n          if (mTabScrollView != null && mIncludeTabs) {\n            removeView(mTabScrollView);\n          }\n      }\n\n      switch (mode) {\n        case ActionBar.NAVIGATION_MODE_LIST:\n          if (mSpinner == null) {\n            mSpinner = new IcsSpinner(mContext, null, R.attr.actionDropDownStyle);\n            mListNavLayout =\n                (IcsLinearLayout)\n                    LayoutInflater.from(mContext)\n                        .inflate(R.layout.abs__action_bar_tab_bar_view, null);\n            LinearLayout.LayoutParams params =\n                new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n            params.gravity = Gravity.CENTER;\n            mListNavLayout.addView(mSpinner, params);\n          }\n          if (mSpinner.getAdapter() != mSpinnerAdapter) {\n            mSpinner.setAdapter(mSpinnerAdapter);\n          }\n          mSpinner.setOnItemSelectedListener(mNavItemSelectedListener);\n          addView(mListNavLayout);\n          break;\n        case ActionBar.NAVIGATION_MODE_TABS:\n          if (mTabScrollView != null && mIncludeTabs) {\n            addView(mTabScrollView);\n          }\n          break;\n      }\n      mNavigationMode = mode;\n      requestLayout();\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4630, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 75, "focalAPIEnd": 103, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/r3gis3r/CSipSimple/tree/master/src/com/csipsimple/widgets/Dialpad.java", "rawCode": "  private void initLayout(Context context) {\n    LayoutInflater inflater = LayoutInflater.from(context);\n    inflater.inflate(R.layout.dialpad, this, true);\n  }\n"}, {"dataset": "from", "exampleID": 4631, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4632, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 1797, "focalAPIEnd": 1822, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)", "layoutInflater.from(*)", "flater.inflate(int,ViewGroup)"], "useStart": [1797, 1903, 1903], "useEnd": [1851, 1928, 1960], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/vlc-android/src/org/videolan/vlc/gui/MainActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    if (!Util.hasCompatibleCPU()) {\n      Log.e(TAG, Util.getErrorMsg());\n      Intent i = new Intent(this, CompatErrorActivity.class);\n      startActivity(i);\n      finish();\n      super.onCreate(savedInstanceState);\n      return;\n    }\n\n    /* Get the current version from package */\n    PackageInfo pinfo = null;\n    try {\n      pinfo = getPackageManager().getPackageInfo(getPackageName(), 0);\n    } catch (NameNotFoundException e) {\n      Log.e(TAG, \"package info not found.\");\n    }\n    if (pinfo != null) mVersionNumber = pinfo.versionCode;\n\n    /* Get settings */\n    mSettings = PreferenceManager.getDefaultSharedPreferences(this);\n\n    /* Check if it's the first run */\n    mFirstRun = mSettings.getInt(PREF_FIRST_RUN, -1) != mVersionNumber;\n    if (mFirstRun) {\n      Editor editor = mSettings.edit();\n      editor.putInt(PREF_FIRST_RUN, mVersionNumber);\n      editor.commit();\n    }\n\n    /* Start VLC prefs */\n    LibVLC.useIOMX(this);\n\n    try {\n      // Start LibVLC\n      LibVLC.getInstance();\n    } catch (LibVlcException e) {\n      e.printStackTrace();\n      Intent i = new Intent(this, CompatErrorActivity.class);\n      i.putExtra(\"runtimeError\", true);\n      i.putExtra(\"message\", \"LibVLC failed to initialize (LibVlcException)\");\n      startActivity(i);\n      finish();\n      super.onCreate(savedInstanceState);\n      return;\n    }\n\n    super.onCreate(savedInstanceState);\n\n    /** * Start initializing the UI ** */\n\n    /* Enable the indeterminate progress feature */\n    requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);\n\n    // Set up the sliding menu\n    setContentView(R.layout.sliding_menu);\n    mMenu = (SlidingMenu) findViewById(R.id.sliding_menu);\n    changeMenuOffset();\n\n    View v_main = LayoutInflater.from(this).inflate(R.layout.main, null);\n    mMenu.setContent(v_main);\n\n    View sidebar = LayoutInflater.from(this).inflate(R.layout.sidebar, null);\n    final ListView listView = (ListView) sidebar.findViewById(android.R.id.list);\n    listView.setFooterDividersEnabled(true);\n    mSidebarAdapter = new SidebarAdapter();\n    listView.setAdapter(mSidebarAdapter);\n    mMenu.setMenu(sidebar);\n\n    /* Initialize UI variables */\n    mInfoLayout = v_main.findViewById(R.id.info_layout);\n    mInfoProgress = (ProgressBar) v_main.findViewById(R.id.info_progress);\n    mInfoText = (TextView) v_main.findViewById(R.id.info_text);\n\n    /* Set up the action bar */\n    mActionBar = getSupportActionBar();\n    mActionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);\n    mActionBar.setDisplayOptions(0, ActionBar.DISPLAY_SHOW_TITLE);\n    mActionBar.setDisplayHomeAsUpEnabled(true);\n\n    /* Add padding between the home button and the arrow */\n    ImageView home =\n        (ImageView) findViewById(Util.isHoneycombOrLater() ? android.R.id.home : R.id.abs__home);\n    if (home != null) home.setPadding(20, 0, 0, 0);\n\n    /* Set up the sidebar click listener */\n    listView.setOnItemClickListener(\n        new OnItemClickListener() {\n\n          @Override\n          public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n            SidebarAdapter.SidebarEntry entry = (SidebarEntry) listView.getItemAtPosition(position);\n            Fragment current =\n                getSupportFragmentManager().findFragmentById(R.id.fragment_placeholder);\n\n            if (current == null || current.getTag() == entry.id) {\n                /* Already selected */\n              mMenu.showAbove();\n              return;\n            }\n\n            /*\n             * Clear any backstack before switching tabs. This avoids\n             * activating an old backstack, when a user hits the back button\n             * to quit\n             */\n            for (int i = 0; i < getSupportFragmentManager().getBackStackEntryCount(); i++) {\n              getSupportFragmentManager().popBackStack();\n            }\n\n            FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n            ft.detach(current);\n            ft.attach(getFragment(entry.id));\n            ft.commit();\n            mCurrentFragment = entry.id;\n            mMenu.showAbove();\n          }\n        });\n\n    /* Set up the mini audio player */\n    mAudioPlayer = new AudioMiniPlayer();\n    mAudioController = AudioServiceController.getInstance();\n    mAudioPlayer.setAudioPlayerControl(mAudioController);\n    mAudioPlayer.update();\n\n    getSupportFragmentManager()\n        .beginTransaction()\n        .replace(R.id.audio_mini_player, mAudioPlayer)\n        .commit();\n\n    /* Show info/alpha/beta Warning */\n    if (mSettings.getInt(PREF_SHOW_INFO, -1) != mVersionNumber) showInfoDialog();\n    else if (mFirstRun) {\n      /*\n       * The sliding menu is automatically opened when the user closes\n       * the info dialog. If (for any reason) the dialog is not shown,\n       * open the menu after a short delay.\n       */\n      final Handler handler = new Handler();\n      handler.postDelayed(\n          new Runnable() {\n            @Override\n            public void run() {\n              mMenu.showBehind();\n            }\n          },\n          500);\n    }\n\n    /* Prepare the progressBar */\n    IntentFilter filter = new IntentFilter();\n    filter.addAction(ACTION_SHOW_PROGRESSBAR);\n    filter.addAction(ACTION_HIDE_PROGRESSBAR);\n    filter.addAction(ACTION_SHOW_TEXTINFO);\n    registerReceiver(messageReceiver, filter);\n\n    /* Reload the latest preferences */\n    reloadPreferences();\n\n    /* Load the thumbnailer */\n    mThumbnailerManager = new ThumbnailerManager(this, getWindowManager().getDefaultDisplay());\n  }\n"}, {"dataset": "from", "exampleID": 4633, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 65, "focalAPIEnd": 99, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/e98877331/cnn/tree/master/CanvasNetCore/src/ntu/csie/wcmlab/canvasnetcore/MyCanvas.java", "rawCode": "  public void checkIP(String ip) {\n    LayoutInflater inflater = LayoutInflater.from(MyCanvas.this);\n    final View textEntryView = inflater.inflate(R.layout.dialog, null);\n    final TextView ipTextView = (TextView) textEntryView.findViewById(R.id.ipTextView);\n    ipTextView.setText(ip);\n    final ProgressDialog.Builder dialog = new ProgressDialog.Builder(MyCanvas.this);\n    // dialog.setCancelable(false);\n    dialog.setTitle(R.string.mycanvas_magicnumber_title);\n\n    dialog.setView(textEntryView);\n    dialog.setNegativeButton(\n        \"OK\",\n        new DialogInterface.OnClickListener() {\n          public void onClick(DialogInterface dialog, int whichButton) {}\n        });\n    dialog.show();\n  }\n"}, {"dataset": "from", "exampleID": 4634, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 135, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)", "layoutInflater.from(*)", "flater.inflate(int,ViewGroup)"], "useStart": [199, 2311, 2375], "useEnd": [246, 2336, 2422], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hugoflug/flashcards/tree/master/src/se/hugo/flashcards/FlashcardsActivity.java", "rawCode": "  protected Dialog onCreateDialog(int id) {\n    switch (id) {\n      case DIALOG_MAKE_NEW:\n        {\n          LayoutInflater factory = LayoutInflater.from(this);\n          final View textEntryView = factory.inflate(R.layout.make_new_dialog, null);\n          final TextView textView = (TextView) textEntryView.findViewById(R.id.text);\n          textView.setHint(getString(R.string.title));\n          textView.requestFocus();\n\n          // TEMP\n          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n            textView.setTextColor(getResources().getColor(android.R.color.black));\n          }\n\n          Dialog dialog =\n              new AlertDialog.Builder(this)\n                  // .setIconAttribute(android.R.attr.alertDialogIcon)\n                  .setTitle(R.string.create_new_list)\n                  .setView(textEntryView)\n                  .setPositiveButton(\n                      getString(R.string.create),\n                      new DialogInterface.OnClickListener() {\n                        public void onClick(DialogInterface dialog, int whichButton) {\n                          String text = textView.getText().toString();\n                          if (!text.equals(\"\")) {\n                            cardLists.add(new CardList(text));\n                            cardListsAdapter.notifyDataSetChanged(); //\n                          }\n                          textView.setText(\"\");\n                        }\n                      })\n                  .setNegativeButton(\n                      getString(R.string.cancel),\n                      new DialogInterface.OnClickListener() {\n                        public void onClick(DialogInterface dialog, int whichButton) {\n                          textView.setText(\"\");\n                        }\n                      })\n                  .create();\n          dialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n          return dialog;\n        }\n        // TEMP, do through fragments instead\n      case DIALOG_RENAME:\n        {\n          String title = getString(R.string.rename_list);\n          String hint = getString(R.string.name);\n          String text = \"\";\n          String positiveText = getString(R.string.rename);\n          final String tag = \"rename_list\";\n\n          LayoutInflater factory = LayoutInflater.from(this);\n          final View textEntryView = factory.inflate(R.layout.make_new_dialog, null);\n          final EditText textView = (EditText) textEntryView.findViewById(R.id.text);\n\n          // TEMP\n          if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {\n            textView.setTextColor(getResources().getColor(android.R.color.black));\n          }\n\n          textView.setHint(hint);\n          textView.requestFocus();\n          textView.setText(text);\n          textView.setSelection(textView.getText().length());\n          Dialog dialog =\n              new AlertDialog.Builder(this)\n                  // .setIconAttribute(android.R.attr.alertDialogIcon)\n                  .setTitle(title)\n                  .setView(textEntryView)\n                  .setPositiveButton(\n                      positiveText,\n                      new DialogInterface.OnClickListener() {\n                        @Override\n                        public void onClick(DialogInterface dialog, int whichButton) {\n                          onTextMade(tag, textView.getText());\n                        }\n                      })\n                  .setNegativeButton(\n                      getString(R.string.cancel),\n                      new DialogInterface.OnClickListener() {\n                        public void onClick(DialogInterface dialog, int whichButton) {\n                          textView.setText(\"\");\n                        }\n                      })\n                  .create();\n          dialog.getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n          return dialog;\n        }\n      case DIALOG_CONFIRM:\n        {\n          String title = getString(R.string.delete_lists);\n          String question = getString(R.string.lists_will_be_deleted);\n          String confirm = getString(R.string.delete);\n          String dismiss = getString(R.string.cancel);\n          final String tag = \"confirm_delete\";\n\n          AlertDialog.Builder builder = new AlertDialog.Builder(this);\n          if (!title.equals(\"\")) {\n            builder.setTitle(title);\n          }\n          builder\n              .setTitle(title)\n              .setMessage(question)\n              .setPositiveButton(\n                  confirm,\n                  new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                      onConfirmed(tag);\n                    }\n                  })\n              .setNegativeButton(\n                  dismiss,\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {}\n                  });\n\n          Dialog dialog = builder.create();\n\n          if (title.equals(\"\")) {\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n          }\n          return dialog;\n        }\n      case DIALOG_INVALID_CSV:\n        {\n          String title = getString(R.string.invalid_csv_title);\n          String text = getString(R.string.invalid_csv_text);\n          String dismiss = getString(R.string.cancel);\n          AlertDialog.Builder builder = new AlertDialog.Builder(this);\n          builder\n              .setTitle(title)\n              .setMessage(text)\n              .setNegativeButton(\n                  \"?\",\n                  new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                      showDialog(DIALOG_CSV_INFO);\n                    }\n                  })\n              .setNeutralButton(\n                  dismiss,\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {}\n                  });\n\n          Dialog dialog = builder.create();\n\n          if (title.equals(\"\")) {\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n          }\n          return dialog;\n        }\n      default:\n        return null;\n      case DIALOG_CSV_INFO:\n        {\n          String title = getString(R.string.csv_info_title);\n          String text = getString(R.string.csv_info_text);\n          String dismiss = getString(R.string.cancel);\n          AlertDialog.Builder builder = new AlertDialog.Builder(this);\n          builder\n              .setTitle(title)\n              .setMessage(text)\n              .setNeutralButton(\n                  dismiss,\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {}\n                  });\n\n          Dialog dialog = builder.create();\n\n          if (title.equals(\"\")) {\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n          }\n          return dialog;\n        }\n      case DIALOG_NO_SUCH_ACTIVITY:\n        {\n          String title = getString(R.string.no_such_activity_title);\n          String text = getString(R.string.no_such_activity_text);\n          String dismiss = getString(R.string.cancel);\n          AlertDialog.Builder builder = new AlertDialog.Builder(this);\n          builder\n              .setTitle(title)\n              .setMessage(text)\n              .setNeutralButton(\n                  dismiss,\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {}\n                  });\n\n          Dialog dialog = builder.create();\n\n          if (title.equals(\"\")) {\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\n          }\n          return dialog;\n        }\n      case DIALOG_IMPORTING:\n        {\n          String title = \"\";\n\n          LayoutInflater inflater = getLayoutInflater();\n          View dialogLayout = inflater.inflate(R.layout.processbar_dialog_layout, null);\n\n          AlertDialog.Builder builder = new AlertDialog.Builder(this);\n          builder\n              .setView(dialogLayout)\n              .setNeutralButton(\n                  R.string.cancel,\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                      currentTask.cancel(true);\n                    }\n                  })\n              .create();\n\n          Dialog dialog = builder.create();\n          return dialog;\n        }\n      case DIALOG_EXPORTING:\n        {\n          String title = \"\";\n\n          LayoutInflater inflater = getLayoutInflater();\n          View dialogLayout = inflater.inflate(R.layout.processbar_dialog_layout, null);\n\n          TextView textView = (TextView) dialogLayout.findViewById(R.id.about_dialog_text);\n          textView.setText(R.string.exporting);\n\n          AlertDialog.Builder builder = new AlertDialog.Builder(this);\n          builder\n              .setView(dialogLayout) // ??\n              .setNeutralButton(\n                  R.string.cancel,\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int whichButton) {\n                      currentTask.cancel(true);\n                    }\n                  })\n              .create();\n          ;\n\n          Dialog dialog = builder.create();\n          return dialog;\n        }\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4635, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 180, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rekoil/DAT255-EpiClock/tree/master/src/edu/chalmers/dat255/group09/Alarmed/utils/AudioHelper.java", "rawCode": "  /** Creates the volume dialog. */\n  private void createVolumeDialog() {\n    int maxVolume = audioMan.getStreamMaxVolume(AudioManager.STREAM_ALARM);\n    LayoutInflater inflater = LayoutInflater.from(context);\n    volumeView = inflater.inflate(R.layout.volume_dialog, null);\n\n    SeekBar seekBar = ((SeekBar) volumeView.findViewById(R.id.selector_volume));\n    CheckBox checkBox = ((CheckBox) volumeView.findViewById(R.id.selector_vibration));\n\n    seekBar.setMax(maxVolume);\n    seekBar.setProgress(intent.getIntExtra(Constants.VOLUME, maxVolume - 1));\n    checkBox.setChecked(intent.getBooleanExtra(Constants.VIBRATION, true));\n\n    volumeDialog =\n        new AlertDialog.Builder(context)\n            .setTitle(\"Set volume options\")\n            .setView(volumeView)\n            .setPositiveButton(android.R.string.ok, new VolumeDialogListener())\n            .create();\n  }\n"}, {"dataset": "from", "exampleID": 4636, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 230, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [285], "useEnd": [334], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_providers_downloadprovider/tree/master/ui/src/com/android/providers/downloads/ui/DateSortedExpandableListAdapter.java", "rawCode": "  public View getGroupView(\n      int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {\n    TextView item;\n    if (null == convertView || !(convertView instanceof TextView)) {\n      LayoutInflater factory = LayoutInflater.from(mContext);\n      item = (TextView) factory.inflate(R.layout.list_group_header, null);\n    } else {\n      item = (TextView) convertView;\n    }\n    String label = mDateSorter.getLabel(groupPositionToBin(groupPosition));\n    item.setText(label);\n    return item;\n  }\n"}, {"dataset": "from", "exampleID": 4637, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 229, "focalAPIEnd": 257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bi2one/Matji_Sandwich/tree/master/android/src/com/matji/sandwich/adapter/CountryAdapter.java", "rawCode": "  public View getView(final int position, View convertView, ViewGroup parent) {\n    final CountryElement countryElement;\n    if (convertView == null) {\n      countryElement = new CountryElement();\n      LayoutInflater inflater = LayoutInflater.from(context);\n      convertView = inflater.inflate(R.layout.row_country, null);\n\n      countryElement.country = (TextView) convertView.findViewById(R.id.row_country_name);\n      countryElement.radio = (RadioButton) convertView.findViewById(R.id.row_country_radio);\n\n      convertView.setTag(countryElement);\n    } else {\n      countryElement = (CountryElement) convertView.getTag();\n    }\n\n    convertView.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            if (!manager.isRunning()) {\n              manager.request(\n                  context,\n                  updateCountryRequest(codes[position]),\n                  HttpRequestManager.USER_UPDATE_REQUEST,\n                  CountryAdapter.this);\n            }\n            session.getCurrentUser().setCountryCode(codes[position]);\n            notifyDataSetChanged();\n          }\n        });\n\n    countryElement.country.setText(codes[position] + \", \" + names[position]);\n    if (session.getCurrentUser().getCountryCode().equals(codes[position])) {\n      countryElement.radio.setChecked(true);\n    } else {\n      countryElement.radio.setChecked(false);\n    }\n\n    return convertView;\n  }\n"}, {"dataset": "from", "exampleID": 4638, "initialization": ["Context context = ViewGroup.getContext()"], "initializationStart": [243], "initializationEnd": [262], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 270, "tryExpressionEnd": 274, "tryBlockStart": 270, "tryBlockEnd": 540, "catchExpressionStart": 434, "catchExpressionEnd": 461, "catchBlockStart": 434, "catchBlockEnd": 540, "exceptionHandlingCallStart": [477], "exceptionHandlingCallEnd": [531], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 342, "focalAPIEnd": 370, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup,boolean)"], "useStart": [342], "useEnd": [400], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dschuermann/document-viewer/tree/master/document-viewer/src/main/java/org/emdev/ui/adapters/BaseViewHolder.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public static <T extends BaseViewHolder> T getOrCreateViewHolder(\n      final Class<T> clazz, final int resID, final View view, final ViewGroup parent) {\n    if (view == null) {\n      final Context context = parent.getContext();\n      try {\n        final T holder = clazz.newInstance();\n        holder.init(LayoutInflater.from(context).inflate(resID, parent, false));\n        return holder;\n      } catch (final Throwable ex) {\n        throw new RuntimeException(\"ViewHolder creation failed\", ex);\n      }\n    }\n    return (T) view.getTag();\n  }\n"}, {"dataset": "from", "exampleID": 4639, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 387, "focalAPIEnd": 412, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)", "layoutInflater.from(*)"], "useStart": [440, 1050], "useEnd": [477, 1075], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pdudits/supergenpass-android/tree/master/src/info/staticfree/SuperGenPass/Super_Gen_Pass.java", "rawCode": "  @Override\n  protected Dialog onCreateDialog(int id) {\n    switch (id) {\n      case DIALOG_ABOUT:\n        {\n          final Builder builder = new AlertDialog.Builder(this);\n\n          builder.setTitle(R.string.about_title);\n          builder.setIcon(R.drawable.icon);\n\n          // using this instead of setMessage lets us have clickable links.\n          final LayoutInflater factory = LayoutInflater.from(this);\n          builder.setView(factory.inflate(R.layout.about, null));\n\n          builder.setPositiveButton(\n              android.R.string.ok,\n              new DialogInterface.OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                  setResult(RESULT_OK);\n                }\n              });\n          return builder.create();\n        }\n\n      case DIALOG_CONFIRM_MASTER:\n        {\n          final Builder builder = new AlertDialog.Builder(this);\n          builder.setTitle(R.string.dialog_verify_title);\n          builder.setCancelable(true);\n          final LayoutInflater inflater = LayoutInflater.from(this);\n          final View pwVerifyLayout = inflater.inflate(R.layout.master_pw_verify, null);\n          final EditText pwVerify = (EditText) pwVerifyLayout.findViewById(R.id.verify);\n\n          builder.setNegativeButton(\n              android.R.string.cancel,\n              new Dialog.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                  dialog.cancel();\n                }\n              });\n\n          pwVerify.addTextChangedListener(\n              new TextWatcher() {\n\n                @Override\n                public void onTextChanged(CharSequence s, int start, int before, int count) {}\n\n                @Override\n                public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n                @Override\n                public void afterTextChanged(Editable s) {\n                  if (pwVerify.getTag() instanceof String) {\n                    final String masterPw = (String) pwVerify.getTag();\n                    if (masterPw.length() > 0 && masterPw.equals(s.toString())) {\n                      dismissDialog(DIALOG_CONFIRM_MASTER);\n                      Toast.makeText(\n                              getApplicationContext(),\n                              R.string.toast_verify_success,\n                              Toast.LENGTH_SHORT)\n                          .show();\n                    }\n                  }\n                }\n              });\n          builder.setView(pwVerifyLayout);\n          final Dialog d = builder.create();\n          // This is added below to ensure that the soft input doesn't get hidden if it's\n          // showing,\n          // which seems to be the default for dialogs.\n          d.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED);\n          return d;\n        }\n      default:\n        throw new IllegalArgumentException(\"Unknown dialog ID: \" + id);\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4640, "initialization": ["Context context = getActivity()"], "initializationStart": [282], "initializationEnd": [295], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["context.getSystemService(*)", "context.getContentResolver()"], "configurationStart": [324, 479], "configurationEnd": [375, 508], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 1644, "focalAPIEnd": 1673, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [1704], "useEnd": [1759], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/app/VibrationPickerDialog.java", "rawCode": "  @Override\n  public Dialog onCreateDialog(Bundle savedInstanceState) {\n    mIsDel = getArguments().getBoolean(\"isdel\");\n    String mUriString = getArguments().getString(\"uri\");\n    mHandler = ((HandlerHolder) getArguments().getSerializable(\"handler\")).getHandler();\n    mContext = getActivity();\n    mVibrator = (Vibrator) mContext.getSystemService(Context.VIBRATOR_SERVICE);\n\n    final Uri allVibrations = Uri.parse(VibrationPattern.URI);\n    final Cursor vibrations =\n        mContext.getContentResolver().query(allVibrations, null, null, null, null);\n\n    vibrations.moveToFirst();\n    int ID = -1;\n    if (!mUriString.isEmpty()) {\n      Uri mUri = Uri.parse(mUriString);\n      do {\n        try {\n          if (Integer.parseInt(mUri.getLastPathSegment()) == vibrations.getInt(0)) {\n            ID = vibrations.getPosition();\n          }\n        } catch (Exception ex) {\n          // nothing to do here\n        }\n      } while (vibrations.moveToNext());\n    }\n    final int selectedID = ID;\n    final SimpleCursorAdapter adapter =\n        new SimpleCursorAdapter(\n            mContext,\n            android.R.layout.simple_list_item_single_choice,\n            vibrations,\n            new String[] {\"name\"},\n            new int[] {android.R.id.text1},\n            0) {\n\n          @Override\n          public Object getItem(int pos) {\n            vibrations.moveToPosition(pos);\n            int id = vibrations.getInt(0);\n            setSelectedVibration(\n                new VibrationPattern(Uri.parse(VibrationPattern.URI + \"/\" + id), mContext));\n            return getSelectedVibration();\n          }\n        };\n\n    LayoutInflater factory = LayoutInflater.from(mContext);\n    final View vibListView = factory.inflate(R.layout.vibration_picker_dialog, null);\n\n    return new AlertDialog.Builder(mContext)\n        .setTitle(mIsDel ? R.string.vibration_picker_del_title : R.string.vibration_picker_title)\n        .setIcon(mIsDel ? R.drawable.ic_dialog_alert : 0)\n        .setView(vibListView)\n        .setSingleChoiceItems(\n            adapter,\n            selectedID,\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int which) {\n                ((VibrationPattern) adapter.getItem(which)).play();\n              }\n            })\n        .setPositiveButton(\n            mIsDel ? R.string.delete : R.string.ok,\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int whichButton) {\n                if (mIsDel) {\n                  delVib(getSelectedVibration());\n                  adapter.notifyDataSetChanged();\n                } else {\n                  selectVib(getSelectedVibration());\n                }\n                stopAllVibrations();\n              }\n            })\n        .setNegativeButton(\n            R.string.cancel,\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int whichButton) {\n                stopAllVibrations();\n                sendCancel();\n              }\n            })\n        .create();\n  }\n"}, {"dataset": "from", "exampleID": 4641, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 496, "focalAPIEnd": 521, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [538], "useEnd": [580], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/darrenjl/pdfrun/tree/master/OpenGPSTracker/application/src/nl/sogeti/android/gpstracker/actions/ControlTracking.java", "rawCode": "  @SuppressLint(\"NewApi\")\n  @Override\n  protected Dialog onCreateDialog(int id) {\n    Dialog dialog = null;\n    LayoutInflater factory = null;\n    View view = null;\n    AlertDialog.Builder builder = null;\n    switch (id) {\n      case DIALOG_LOGCONTROL:\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB)\n          builder = new AlertDialog.Builder(this, AlertDialog.THEME_HOLO_LIGHT);\n        else builder = new AlertDialog.Builder(this);\n        factory = LayoutInflater.from(this);\n        view = factory.inflate(R.layout.logcontrol, null);\n        builder\n            .setTitle(R.string.dialog_tracking_title)\n            .\n            // setIcon( android.R.drawable.ic_dialog_alert ).\n            setNegativeButton(R.string.btn_cancel, mDialogClickListener)\n            .setView(view);\n        // setInverseBackgroundForced(true);\n        dialog = builder.create();\n        start = (Button) view.findViewById(R.id.logcontrol_start);\n        pause = (Button) view.findViewById(R.id.logcontrol_pause);\n        resume = (Button) view.findViewById(R.id.logcontrol_resume);\n        stop = (Button) view.findViewById(R.id.logcontrol_stop);\n        start.setOnClickListener(mLoggingControlListener);\n        pause.setOnClickListener(mLoggingControlListener);\n        resume.setOnClickListener(mLoggingControlListener);\n        stop.setOnClickListener(mLoggingControlListener);\n        dialog.setOnDismissListener(\n            new OnDismissListener() {\n              @Override\n              public void onDismiss(DialogInterface dialog) {\n                if (!paused) {\n                  finish();\n                }\n              }\n            });\n        return dialog;\n      default:\n        return super.onCreateDialog(id);\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4642, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 122, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhaoyuqing/SlidingMenu/tree/master/actionbarsherlock-samples/demos/src/com/actionbarsherlock/sample/demos/SearchViews.java", "rawCode": "    @Override\n    public View newView(Context context, Cursor cursor, ViewGroup parent) {\n      LayoutInflater inflater = LayoutInflater.from(context);\n      View v = inflater.inflate(android.R.layout.simple_list_item_1, parent, false);\n      return v;\n    }\n"}, {"dataset": "from", "exampleID": 4643, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 362, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.setTag(ViewHolder)", "flater.getTag()", "flater.getTag()"], "useStart": [738, 807, 1164], "useEnd": [764, 827, 1184], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xw8852/guoli/tree/master/guoli/src/com/guoli/hotel/activity/user/UserListAdapter.java", "rawCode": "  @Override\n  public View getView(int position, View convertView, ViewGroup parent) {\n    if (infos == null) {\n      return convertView;\n    }\n    FavoriteUserInfo info = infos.get(position);\n    if (info == null) {\n      return convertView;\n    }\n    ViewHolder holder = null;\n    if (null == convertView) {\n      holder = new ViewHolder();\n      convertView = LayoutInflater.from(context).inflate(R.layout.user_select_item, null);\n      holder.deleteBtn = (ImageView) convertView.findViewById(R.id.deleteBtn);\n      holder.selectBtn = (ImageView) convertView.findViewById(R.id.selectBtn);\n      holder.nameView = (TextView) convertView.findViewById(R.id.name);\n      holder.selectBtn.setTag(UserSelectActivity.TAG_IS_INVISIBLE);\n\n      convertView.setTag(holder);\n    } else {\n      holder = (ViewHolder) convertView.getTag();\n    }\n\n    if (users != null) {\n      for (int i = 0; i < users.size(); i++) {\n        if (users.get(i).trim().equalsIgnoreCase(info.personname.trim())) {\n          holder.selectBtn.setVisibility(View.VISIBLE);\n          break;\n        }\n        holder.selectBtn.setVisibility(View.INVISIBLE);\n      }\n    }\n\n    holder = (ViewHolder) convertView.getTag();\n    if (infos != null) {\n      mPosition = position;\n      holder.nameView.setText(infos.get(position).personname);\n      holder.deleteBtn.setOnClickListener(\n          new View.OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n              DialogUtils.showDialog(\n                  context,\n                  \"\",\n                  \"确定删除?\",\n                  new DialogInterface.OnClickListener() {\n\n                    @Override\n                    public void onClick(DialogInterface dialog, int which) {\n                      String id = infos.get(mPosition).id;\n                      Request request =\n                          new GuoliRequest(\n                              \"user_delperson\", new FavoriteUserBean(LoginUtils.uid, null, id));\n                      Manager.getInstance().executePoset(request, delUserListener);\n\n                      mDialog = DialogUtils.showProgressDialog(context, \"删除中\");\n                    }\n                  });\n            }\n          });\n    }\n    return convertView;\n  }\n"}, {"dataset": "from", "exampleID": 4644, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/onecoders/ViewPageIndicator/tree/master/ActionBarSherlock-master/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4645, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 720, "focalAPIEnd": 749, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.addView(IcsSpinner,LinearLayout.LayoutParams)", "addView(flater)"], "useStart": [1034, 1290], "useEnd": [1074, 1313], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mycelial/csip/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  public void setNavigationMode(int mode) {\n    final int oldMode = mNavigationMode;\n    if (mode != oldMode) {\n      switch (oldMode) {\n        case ActionBar.NAVIGATION_MODE_LIST:\n          if (mListNavLayout != null) {\n            removeView(mListNavLayout);\n          }\n          break;\n        case ActionBar.NAVIGATION_MODE_TABS:\n          if (mTabScrollView != null && mIncludeTabs) {\n            removeView(mTabScrollView);\n          }\n      }\n\n      switch (mode) {\n        case ActionBar.NAVIGATION_MODE_LIST:\n          if (mSpinner == null) {\n            mSpinner = new IcsSpinner(mContext, null, R.attr.actionDropDownStyle);\n            mListNavLayout =\n                (IcsLinearLayout)\n                    LayoutInflater.from(mContext)\n                        .inflate(R.layout.abs__action_bar_tab_bar_view, null);\n            LinearLayout.LayoutParams params =\n                new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n            params.gravity = Gravity.CENTER;\n            mListNavLayout.addView(mSpinner, params);\n          }\n          if (mSpinner.getAdapter() != mSpinnerAdapter) {\n            mSpinner.setAdapter(mSpinnerAdapter);\n          }\n          mSpinner.setOnItemSelectedListener(mNavItemSelectedListener);\n          addView(mListNavLayout);\n          break;\n        case ActionBar.NAVIGATION_MODE_TABS:\n          if (mTabScrollView != null && mIncludeTabs) {\n            addView(mTabScrollView);\n          }\n          break;\n      }\n      mNavigationMode = mode;\n      requestLayout();\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4646, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 182, "focalAPIEnd": 211, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_frameworks_policies_base/tree/master/mid/com/android/internal/policy/impl/GlobalActions.java", "rawCode": "    public View getView(int position, View convertView, ViewGroup parent) {\n      Action action = getItem(position);\n      return action.create(mContext, (LinearLayout) convertView, LayoutInflater.from(mContext));\n    }\n"}, {"dataset": "from", "exampleID": 4647, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 88, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/VandyMobile/guide-android/tree/master/JakeWharton-ActionBarSherlock-88fc341/library/src/com/actionbarsherlock/internal/view/menu/ListMenuItemView.java", "rawCode": "  private LayoutInflater getInflater() {\n    if (mInflater == null) {\n      mInflater = LayoutInflater.from(mContext);\n    }\n    return mInflater;\n  }\n"}, {"dataset": "from", "exampleID": 4648, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 43, "focalAPIEnd": 71, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup,boolean)"], "useStart": [43], "useEnd": [109], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bi2one/Matji_Sandwich/tree/master/android/src/com/matji/sandwich/widget/AlbumImageView.java", "rawCode": "  private void init(Context context) {\n    LayoutInflater.from(context).inflate(LAYOUT_REFERENCE, this, true);\n    imageView = (ImageView) findViewById(R.id.album_image_view_contents);\n  }\n"}, {"dataset": "from", "exampleID": 4649, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 86, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addHeaderView(flater)", "layoutInflater.from(Context)", "measureView(flater)", "flater.getMeasuredHeight()"], "useStart": [164, 696, 1604, 1658], "useEnd": [198, 724, 1636, 1697], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world/tree/master/baseworld/src/com/tianxia/lib/baseworld/widget/RefreshListView.java", "rawCode": "  void init(final Context context) {\n    mHeaderLinearLayout =\n        (LinearLayout) LayoutInflater.from(context).inflate(R.layout.refresh_list_header, null);\n    addHeaderView(mHeaderLinearLayout);\n    mHeaderTextView = (TextView) findViewById(R.id.refresh_list_header_text);\n    mHeaderUpdateText = (TextView) findViewById(R.id.refresh_list_header_last_update);\n    mHeaderPullDownImageView = (ImageView) findViewById(R.id.refresh_list_header_pull_down);\n    mHeaderReleaseDownImageView = (ImageView) findViewById(R.id.refresh_list_header_release_up);\n    mHeaderProgressBar = (ProgressBar) findViewById(R.id.refresh_list_header_progressbar);\n\n    mFooterLinearLayout =\n        (LinearLayout) LayoutInflater.from(context).inflate(R.layout.refresh_list_footer, null);\n    addFooterView(mFooterLinearLayout);\n    mFooterProgressBar = (ProgressBar) findViewById(R.id.refresh_list_footer_progressbar);\n    mFooterTextView = (TextView) mFooterLinearLayout.findViewById(R.id.refresh_list_footer_text);\n    mFooterLinearLayout.setOnClickListener(\n        new OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            if (context\n                .getString(R.string.app_list_footer_more)\n                .equals(mFooterTextView.getText())) {\n              mFooterTextView.setText(R.string.app_list_footer_loading);\n              mFooterProgressBar.setVisibility(View.VISIBLE);\n              if (mRefreshListener != null) {\n                mRefreshListener.more();\n              }\n            }\n          }\n        });\n\n    setSelection(1);\n    setOnScrollListener(this);\n    measureView(mHeaderLinearLayout);\n    mHeaderHeight = mHeaderLinearLayout.getMeasuredHeight();\n\n    mSimpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd hh:mm\");\n    mHeaderUpdateText.setText(\n        context.getString(\n            R.string.app_list_header_refresh_last_update, mSimpleDateFormat.format(new Date())));\n  }\n"}, {"dataset": "from", "exampleID": 4650, "initialization": ["Context context = new ContextThemeWrapper(Context,int)"], "initializationStart": [118], "initializationEnd": [161], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 181, "focalAPIEnd": 210, "followUpCheck": "flater == null", "checkType": "IF", "followUpCheckExpressionStart": 279, "followUpCheckExpressionEnd": 301, "followUpCheckBlockStart": 279, "followUpCheckBlockEnd": 362, "use": ["layoutInflater.from(Context)"], "useStart": [324], "useEnd": [353], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/com/android/internal/view/menu/ListMenuPresenter.java", "rawCode": "  @Override\n  public void initForMenu(Context context, MenuBuilder menu) {\n    if (mThemeRes != 0) {\n      mContext = new ContextThemeWrapper(context, mThemeRes);\n      mInflater = LayoutInflater.from(mContext);\n    } else if (mContext != null) {\n      mContext = context;\n      if (mInflater == null) {\n        mInflater = LayoutInflater.from(mContext);\n      }\n    }\n    mMenu = menu;\n  }\n"}, {"dataset": "from", "exampleID": 4651, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 88, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jordan-thoms/2Degrees-Toolbox/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/view/menu/ListMenuItemView.java", "rawCode": "  private LayoutInflater getInflater() {\n    if (mInflater == null) {\n      mInflater = LayoutInflater.from(mContext);\n    }\n    return mInflater;\n  }\n"}, {"dataset": "from", "exampleID": 4652, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 145, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)"], "useStart": [303], "useEnd": [342], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liwenhaosuper/SysOfIMPS/tree/master/IMPSDev/src/com/imps/activities/SnsMain.java", "rawCode": "    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n      if (convertView == null) {\n        convertView = LayoutInflater.from(SnsMain.this).inflate(R.layout.snsmain_grid, null);\n        int index = getItemViewType(position);\n        GridView gridview = (GridView) convertView.findViewById(R.id.gridview);\n        gridview.setAdapter(new ItemAdapter(mItems.get(new Integer(index))));\n      }\n      return convertView;\n    }\n"}, {"dataset": "from", "exampleID": 4653, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 97, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/java/android/app/ProgressDialog.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    LayoutInflater inflater = LayoutInflater.from(mContext);\n    if (mProgressStyle == STYLE_HORIZONTAL) {\n\n      /* Use a separate handler to update the text views as they\n       * must be updated on the same thread that created them.\n       */\n      mViewUpdateHandler =\n          new Handler() {\n            @Override\n            public void handleMessage(Message msg) {\n              super.handleMessage(msg);\n\n              /* Update the number and percent */\n              int progress = mProgress.getProgress();\n              int max = mProgress.getMax();\n              double percent = (double) progress / (double) max;\n              String format = mProgressNumberFormat;\n              mProgressNumber.setText(String.format(format, progress, max));\n              SpannableString tmp = new SpannableString(mProgressPercentFormat.format(percent));\n              tmp.setSpan(\n                  new StyleSpan(android.graphics.Typeface.BOLD),\n                  0,\n                  tmp.length(),\n                  Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n              mProgressPercent.setText(tmp);\n            }\n          };\n      View view = inflater.inflate(R.layout.alert_dialog_progress, null);\n      mProgress = (ProgressBar) view.findViewById(R.id.progress);\n      mProgressNumber = (TextView) view.findViewById(R.id.progress_number);\n      mProgressNumberFormat = \"%d/%d\";\n      mProgressPercent = (TextView) view.findViewById(R.id.progress_percent);\n      mProgressPercentFormat = NumberFormat.getPercentInstance();\n      mProgressPercentFormat.setMaximumFractionDigits(0);\n      setView(view);\n    } else {\n      View view = inflater.inflate(R.layout.progress_dialog, null);\n      mProgress = (ProgressBar) view.findViewById(R.id.progress);\n      mMessageView = (TextView) view.findViewById(R.id.message);\n      setView(view);\n    }\n    if (mMax > 0) {\n      setMax(mMax);\n    }\n    if (mProgressVal > 0) {\n      setProgress(mProgressVal);\n    }\n    if (mSecondaryProgressVal > 0) {\n      setSecondaryProgress(mSecondaryProgressVal);\n    }\n    if (mIncrementBy > 0) {\n      incrementProgressBy(mIncrementBy);\n    }\n    if (mIncrementSecondaryBy > 0) {\n      incrementSecondaryProgressBy(mIncrementSecondaryBy);\n    }\n    if (mProgressDrawable != null) {\n      setProgressDrawable(mProgressDrawable);\n    }\n    if (mIndeterminateDrawable != null) {\n      setIndeterminateDrawable(mIndeterminateDrawable);\n    }\n    if (mMessage != null) {\n      setMessage(mMessage);\n    }\n    setIndeterminate(mIndeterminate);\n    onProgressChanged();\n    super.onCreate(savedInstanceState);\n  }\n"}, {"dataset": "from", "exampleID": 4654, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 55, "focalAPIEnd": 84, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["layoutInflater.from(Context)", "flater.findViewById(*)"], "useStart": [145, 341], "useEnd": [174, 374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BohemianTeam/MoneyProject/tree/master/iBC/Android/src/com/ibc/adapter/StarredListAdapter.java", "rawCode": "  private View getViewForType(int type) {\n    View v = LayoutInflater.from(_context).inflate(R.layout.venue_list_view_item, null);\n    View vv = LayoutInflater.from(_context).inflate(R.layout.event_list_view_item, null);\n    if (type == ITEM_TYPE_VENUES_HAS_HEADER) {\n      return v;\n    } else if (type == ITEM_TYPE_VENUES_CONTENT) {\n      v.findViewById(R.id.venue_header).setVisibility(View.GONE);\n      return v;\n    } else if (type == ITEM_TYPE_EVENTS_HAS_HEADER) {\n      return vv;\n    } else if (type == ITEM_TYPE_EVENTS_CONTENT) {\n      vv.findViewById(R.id.header).setVisibility(View.GONE);\n      return vv;\n    }\n    return v;\n  }\n"}, {"dataset": "from", "exampleID": 4655, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 115, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yuvipanda/WPSignpost/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/view/menu/BaseMenuPresenter.java", "rawCode": "  @Override\n  public void initForMenu(Context context, MenuBuilder menu) {\n    mContext = context;\n    mInflater = LayoutInflater.from(mContext);\n    mMenu = menu;\n  }\n"}, {"dataset": "from", "exampleID": 4656, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 157, "focalAPIEnd": 182, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)"], "useStart": [256, 334, 412, 490, 570, 645, 719], "useEnd": [296, 373, 452, 529, 612, 683, 761], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PaperAirplane-Dev-Team/Music-Share-Android/tree/master/src/com/paperairplane/music/share/Main.java", "rawCode": "  /**\n   * 从音乐信息构建View\n   *\n   * @param music 音乐信息\n   * @return 音乐信息View\n   */\n  private View getMusicInfoView(final MusicData music) {\n    View musicInfo = LayoutInflater.from(this).inflate(R.layout.music_info, null);\n    ImageView albumArt = (ImageView) musicInfo.findViewById(R.id.image_music);\n    TextView textTitle = (TextView) musicInfo.findViewById(R.id.text_title);\n    TextView textArtist = (TextView) musicInfo.findViewById(R.id.text_artist);\n    TextView textAlbum = (TextView) musicInfo.findViewById(R.id.text_album);\n    TextView textDuration = (TextView) musicInfo.findViewById(R.id.text_duration);\n    Button btnShare = (Button) musicInfo.findViewById(R.id.btn_share);\n    Button btnSendFile = (Button) musicInfo.findViewById(R.id.btn_send_file);\n    textTitle.setText(getString(R.string.title) + \" : \" + music.getTitle());\n    textArtist.setText(getString(R.string.artist) + \" : \" + music.getArtist());\n    textAlbum.setText(getString(R.string.album) + \" : \" + music.getAlbum());\n    textDuration.setText(getString(R.string.duration) + \" : \" + music.getDuration());\n    int size = Utilities.getAdaptedSize(Main.this);\n    // Bitmap bmpAlbum = Utilities.getLocalArtwork(mContext,\n    // music.getAlbumId(), size, size);\n    SoftReference<Bitmap> bmpAlbum =\n        new SoftReference<Bitmap>(\n            Utilities.getLocalArtwork(mContext, music.getAlbumId(), size, size));\n    // 似乎可以省资源\n    try {\n      MyLogger.d(TAG, \"width:\" + bmpAlbum.get().getWidth());\n      albumArt.setImageBitmap(bmpAlbum.get());\n      MyLogger.d(TAG, \"Oh Oh Oh Yeah!!\");\n    } catch (NullPointerException e) {\n      // e.printStackTrace();\n      MyLogger.v(TAG, \"Oh shit, we got null again ...... Don't panic\");\n    }\n    View.OnClickListener listener =\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            switch (v.getId()) {\n              case R.id.image_music:\n                playMusic(music);\n                break;\n              case R.id.btn_share:\n                shareMusic(music);\n                break;\n              case R.id.btn_send_file:\n                sendFile(music);\n                break;\n            }\n          }\n        };\n    albumArt.setOnClickListener(listener);\n    btnSendFile.setOnClickListener(listener);\n    btnShare.setOnClickListener(listener);\n    if (mIsFullRunning) {\n      btnSendFile.setVisibility(View.GONE);\n      btnShare.setVisibility(View.GONE);\n    }\n    bmpAlbum.clear();\n    return musicInfo;\n  }\n"}, {"dataset": "from", "exampleID": 4657, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 88, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/allminewuwei/BensDeals/tree/master/submodule/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ListMenuItemView.java", "rawCode": "  private LayoutInflater getInflater() {\n    if (mInflater == null) {\n      mInflater = LayoutInflater.from(mContext);\n    }\n    return mInflater;\n  }\n"}, {"dataset": "from", "exampleID": 4658, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 116, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jritter/VoterApp/tree/master/VoterApp/src/ch/bfh/evoting/voterapp/adapters/NetworkParticipantListAdapter.java", "rawCode": "  @Override\n  public View getView(int position, View convertView, ViewGroup parent) {\n    LayoutInflater inflater = LayoutInflater.from(context);\n\n    View view;\n    if (null == convertView) {\n      // when view is created\n      view = inflater.inflate(R.layout.list_item_participant_network, parent, false);\n    } else {\n      view = convertView;\n    }\n\n    // Set the corresponding if the administrator has selected the participant a part of the\n    // electorate\n    ImageView ivSelected = (ImageView) view.findViewById(R.id.imageview_participant_selected);\n    if (this.values.get(position).isSelected()) {\n      ivSelected.setImageResource(R.drawable.ic_included);\n    } else {\n      ivSelected.setImageResource(R.drawable.ic_not_included);\n    }\n\n    // set the participant identification\n    TextView tvParticipant = (TextView) view.findViewById(R.id.textview_participant_identification);\n    tvParticipant.setText(this.values.get(position).getIdentification());\n\n    return view;\n  }\n"}, {"dataset": "from", "exampleID": 4659, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 433, "focalAPIEnd": 462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [486], "useEnd": [544], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/royale1223/Vibhinna/tree/master/src/com/binoy/vibhinna/NewDialogFragmentOld.java", "rawCode": "  @Override\n  public Dialog onCreateDialog(Bundle savedInstanceState) {\n    iconId = 1;\n    cacheSize = Constants.CACHE_SIZE;\n    dataSize = Constants.DATA_SIZE;\n    systemSize = Constants.SYSTEM_SIZE;\n\n    validName = true;\n\n    newName = getString(R.string.default_vfs_name);\n    new File(Constants.MULTI_BOOT_PATH + newName);\n    newvsdesc = getString(R.string.default_vfs_description);\n\n    LayoutInflater newVFSDialogInflater = LayoutInflater.from(mContext);\n    final View view = newVFSDialogInflater.inflate(R.layout.new_vs_dialog, null);\n    if (VibhinnaUtils.getMemColor(cacheSize, dataSize, systemSize) != Color.RED) {\n      validSize = true;\n    } else validSize = false;\n\n    if (mContext == null) {\n      Log.d(TAG, \"context is null\");\n    }\n    final AlertDialog dialog =\n        new AlertDialog.Builder(mContext)\n            .setTitle(getString(R.string.create_new_vfs))\n            .setView(view)\n            .setPositiveButton(getString(R.string.okay), onClickListener)\n            .setNegativeButton(\n                getString(R.string.cancel),\n                new DialogInterface.OnClickListener() {\n                  @Override\n                  public void onClick(DialogInterface dialog, int whichButton) {\n                    // Canceled.\n                  }\n                })\n            .show();\n\n    // declare widgets\n    final EditText evsname = (EditText) view.findViewById(R.id.vsname);\n    final EditText evsdesc = (EditText) view.findViewById(R.id.vsdesc);\n    final Spinner spinner = (Spinner) view.findViewById(R.id.spinner);\n    final TextView memory = (TextView) view.findViewById(R.id.icon_and_memory);\n    final EditText cacheSizePicker = (EditText) view.findViewById(R.id.cache_size_editer);\n    final EditText dataSizePicker = (EditText) view.findViewById(R.id.data_size_editer);\n    final EditText systemSizePicker = (EditText) view.findViewById(R.id.system_size_editer);\n\n    // set up widgets - evsdesc\n    evsdesc.setText(newvsdesc);\n    evsname.setText(newName);\n    memory.setText(\n        getString(\n            R.string.total_memory_warning,\n            VibhinnaUtils.getTotalSize(cacheSize, dataSize, systemSize)));\n    memory.setTextColor(VibhinnaUtils.getMemColor(cacheSize, dataSize, systemSize));\n    cacheSizePicker.setText(cacheSize + \"\");\n    dataSizePicker.setText(dataSize + \"\");\n    systemSizePicker.setText(systemSize + \"\");\n\n    // set up spinner\n    ArrayAdapter<CharSequence> adapter =\n        ArrayAdapter.createFromResource(\n            mContext, R.array.icon_array, android.R.layout.simple_spinner_item);\n    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n    spinner.setAdapter(adapter);\n    spinner.setSelection(iconId);\n    spinner.setAdapter(adapter);\n    spinner.setSelection(iconId);\n\n    // set up listeners - evsname\n    TextWatcher nameTextWatcher =\n        new TextWatcher() {\n\n          @Override\n          public void afterTextChanged(Editable s) {\n            String filtered_str = s.toString();\n            if (filtered_str.matches(\".*[\\\\s&/&*].*\")) {\n              filtered_str = filtered_str.replaceAll(\"[\\\\s&/&*]\", \"\");\n              s.clear();\n              s.append(filtered_str);\n              Toast.makeText(mContext, R.string.illegal_char, Toast.LENGTH_SHORT).show();\n            }\n            if (s.length() > 0) {\n              validName = true;\n            } else {\n              validName = false;\n            }\n            dialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(newDialogButtonState());\n            newName = filtered_str;\n          }\n\n          @Override\n          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n          @Override\n          public void onTextChanged(CharSequence s, int start, int before, int count) {}\n        };\n    evsname.addTextChangedListener(nameTextWatcher);\n\n    // add textwatcher to evsdesc\n    TextWatcher vsDescWatcher =\n        new TextWatcher() {\n\n          @Override\n          public void beforeTextChanged(\n              CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3) {}\n\n          @Override\n          public void onTextChanged(\n              CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3) {}\n\n          @Override\n          public void afterTextChanged(Editable paramEditable) {\n            newvsdesc = paramEditable.toString();\n          }\n        };\n    evsdesc.addTextChangedListener(vsDescWatcher);\n    // Listener for spinner\n    spinner.setOnItemSelectedListener(\n        new OnItemSelectedListener() {\n          @Override\n          public void onItemSelected(AdapterView<?> arg0, View arg1, int arg2, long arg3) {\n            iconId = arg2;\n            memory.setCompoundDrawablesWithIntrinsicBounds(0, VibhinnaUtils.getIconRes(arg2), 0, 0);\n          }\n\n          @Override\n          public void onNothingSelected(AdapterView<?> arg0) {}\n        });\n\n    // add textwatcher to cacheSizePicker\n    TextWatcher cacheSizeWatcher =\n        new TextWatcher() {\n\n          @Override\n          public void afterTextChanged(Editable s) {\n            if (s.length() < 1) {\n              cacheSize = 0;\n              nullData = true;\n            } else {\n              int newVal = Integer.parseInt(s.toString());\n              cacheSize = newVal;\n              nullData = false;\n            }\n            dialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(newDialogButtonState());\n            memory.setText(\n                getString(\n                    R.string.total_memory_warning,\n                    VibhinnaUtils.getTotalSize(cacheSize, dataSize, systemSize)));\n            memory.setTextColor(VibhinnaUtils.getMemColor(cacheSize, dataSize, systemSize));\n          }\n\n          @Override\n          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n          @Override\n          public void onTextChanged(CharSequence s, int start, int before, int count) {}\n        };\n    cacheSizePicker.addTextChangedListener(cacheSizeWatcher);\n\n    // add textwatcher to dataSizeWatcher\n    TextWatcher dataSizeWatcher =\n        new TextWatcher() {\n\n          @Override\n          public void afterTextChanged(Editable s) {\n            if (s.length() < 1) {\n              dataSize = 0;\n              nullData = true;\n            } else {\n              int newVal = Integer.parseInt(s.toString());\n              dataSize = newVal;\n              nullData = false;\n            }\n            dialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(newDialogButtonState());\n            memory.setText(\n                getString(\n                    R.string.total_memory_warning,\n                    VibhinnaUtils.getTotalSize(cacheSize, dataSize, systemSize)));\n            memory.setTextColor(VibhinnaUtils.getMemColor(cacheSize, dataSize, systemSize));\n          }\n\n          @Override\n          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n          @Override\n          public void onTextChanged(CharSequence s, int start, int before, int count) {}\n        };\n    dataSizePicker.addTextChangedListener(dataSizeWatcher);\n\n    // add textwatcher to systemSizeWatcher\n    TextWatcher systemSizeWatcher =\n        new TextWatcher() {\n\n          @Override\n          public void afterTextChanged(Editable s) {\n            if (s.length() < 1) {\n              systemSize = 0;\n              nullSystem = true;\n            } else {\n              int newVal = Integer.parseInt(s.toString());\n              systemSize = newVal;\n              nullSystem = false;\n            }\n            dialog.getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(newDialogButtonState());\n            memory.setText(\n                getString(\n                    R.string.total_memory_warning,\n                    VibhinnaUtils.getTotalSize(cacheSize, dataSize, systemSize)));\n            memory.setTextColor(VibhinnaUtils.getMemColor(cacheSize, dataSize, systemSize));\n          }\n\n          @Override\n          public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n          @Override\n          public void onTextChanged(CharSequence s, int start, int before, int count) {}\n        };\n    systemSizePicker.addTextChangedListener(systemSizeWatcher);\n    return dialog;\n  }\n"}, {"dataset": "from", "exampleID": 4660, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 115, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UweTrottmann/MovieTracker/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/view/menu/BaseMenuPresenter.java", "rawCode": "  @Override\n  public void initForMenu(Context context, MenuBuilder menu) {\n    mContext = context;\n    mInflater = LayoutInflater.from(mContext);\n    mMenu = menu;\n  }\n"}, {"dataset": "from", "exampleID": 4661, "initialization": ["Context context = getActivity()"], "initializationStart": [216], "initializationEnd": [229], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 247, "focalAPIEnd": 275, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wanglu0919/chianwuxi_android/tree/master/chinaw/src/com/wuxi/app/fragment/homepage/goverpublicmsg/GoverMsgSubChannelsSearchFragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n    view = inflater.inflate(R.layout.govermsg_subchannels_search_layout, null);\n    context = getActivity();\n    mInflater = LayoutInflater.from(context);\n    initUI();\n    return view;\n  }\n"}, {"dataset": "from", "exampleID": 4662, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 338, "focalAPIEnd": 367, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhoulzhou/IPCPlayer/tree/master/src/com/example/ipcplayer/localfragment/HomeFragment.java", "rawCode": "  @Override\n  public View onCreateView(\n      LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View v = inflater.inflate(R.layout.vp_main_1, null);\n    mViewPager = (ViewPager) v.findViewById(R.id.vp_1);\n    mPagerTitleStrip = (PagerTitleStrip) v.findViewById(R.id.vp_1_title);\n\n    LayoutInflater inflate = LayoutInflater.from(mContext);\n    View view1 = new OnLineMainView(mContext);\n    View view2 = new MusicHomeView(mContext);\n    // View view2 = inflate.inflate(R.layout.vp_1_view2, null);\n    View view3 = inflate.inflate(R.layout.vp_1_view3, null);\n\n    mViewList.add(view1);\n    mViewList.add(view2);\n    mViewList.add(view3);\n\n    mTitles.add(\"tab_1\");\n    mTitles.add(\"tab_2\");\n    mTitles.add(\"tab_3\");\n\n    return v;\n  }\n"}, {"dataset": "from", "exampleID": 4663, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 157, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sages-health/sagesmobile-mCollect/tree/master/src/org/odk/collect/android/widgets/SpinnerWidget.java", "rawCode": "    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n      if (convertView == null) {\n        LayoutInflater inflater = LayoutInflater.from(context);\n        convertView = inflater.inflate(android.R.layout.simple_spinner_item, parent, false);\n      }\n\n      TextView tv = (TextView) convertView.findViewById(android.R.id.text1);\n      tv.setText(items[position]);\n      tv.setTextSize(textUnit, textSize);\n      tv.setTextColor(Color.BLACK);\n      tv.setTypeface(null, Typeface.BOLD);\n      if (position == items.length - 1) {\n        tv.setTextColor(BROWN);\n        tv.setTypeface(null, Typeface.NORMAL);\n      }\n      return convertView;\n    }\n"}, {"dataset": "from", "exampleID": 4664, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 352, "focalAPIEnd": 377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "setCustomView(flater)"], "useStart": [466, 919], "useEnd": [504, 965], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhaoyuqing/SlidingMenu/tree/master/actionbarsherlock-samples/demos/src/com/actionbarsherlock/sample/demos/CustomNavigation.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    setTheme(SampleList.THEME); // Used for theme switching in samples\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.text);\n    ((TextView) findViewById(R.id.text)).setText(R.string.custom_navigation_content);\n\n    // Inflate the custom view\n    View customNav = LayoutInflater.from(this).inflate(R.layout.custom_view, null);\n\n    // Bind to its state change\n    ((RadioGroup) customNav.findViewById(R.id.radio_nav))\n        .setOnCheckedChangeListener(\n            new OnCheckedChangeListener() {\n              @Override\n              public void onCheckedChanged(RadioGroup group, int checkedId) {\n                Toast.makeText(\n                        CustomNavigation.this, \"Navigation selection changed.\", Toast.LENGTH_SHORT)\n                    .show();\n              }\n            });\n\n    // Attach to the action bar\n    getSupportActionBar().setCustomView(customNav);\n    getSupportActionBar().setDisplayShowCustomEnabled(true);\n  }\n"}, {"dataset": "from", "exampleID": 4665, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 93, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [93], "useEnd": [147], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Wigglez/Senior-Project/tree/master/Archive/Dragons' Reign/zones/examples/AndEngine_Example/src/org/andengine/util/ViewUtils.java", "rawCode": "  public static final View inflate(final Context pContext, final int pLayoutID) {\n    return LayoutInflater.from(pContext).inflate(pLayoutID, null);\n  }\n"}, {"dataset": "from", "exampleID": 4666, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 137, "focalAPIEnd": 162, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getView(*,flater,LinearLayout,int)"], "useStart": [640], "useEnd": [682], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xcube/nfc/tree/master/XcubeNFC/src/org/xcube/nfc/TagViewer.java", "rawCode": "  void buildTagViews(NdefMessage[] msgs) {\n    if (msgs == null || msgs.length == 0) {\n      return;\n    }\n    LayoutInflater inflater = LayoutInflater.from(this);\n    LinearLayout content = mTagContent;\n    // Clear out any old views in the content area, for example if you scan\n    // two tags in a row.\n    content.removeAllViews();\n    // Parse the first message in the list\n    // Build views for all of the sub records\n    List<ParsedNdefRecord> records = NdefMessageParser.parse(msgs[0]);\n    final int size = records.size();\n    for (int i = 0; i < size; i++) {\n      ParsedNdefRecord record = records.get(i);\n      content.addView(record.getView(this, inflater, content, i));\n      inflater.inflate(R.layout.tag_divider, content, true);\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4667, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 185, "focalAPIEnd": 214, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/royale1223/Vibhinna/tree/master/src/com/binoy/vibhinna/DetailsDialogFragment.java", "rawCode": "  @Override\n  public Dialog onCreateDialog(Bundle savedInstanceState) {\n    long id = getArguments().getLong(\"_ID\");\n    this.setStyle(STYLE_NO_TITLE, 0);\n    LayoutInflater inflater = LayoutInflater.from(mContext);\n    final View view = inflater.inflate(R.layout.vs_details, null);\n    String[] vsinfo = new String[29];\n    Cursor cursor =\n        mContext\n            .getContentResolver()\n            .query(\n                Uri.parse(\n                    \"content://\"\n                        + VibhinnaProvider.AUTHORITY\n                        + \"/\"\n                        + VibhinnaProvider.VFS_BASE_PATH\n                        + \"/details/\"\n                        + id),\n                null,\n                null,\n                null,\n                null);\n    cursor.moveToFirst();\n    for (int i = 0; i < cursor.getColumnCount(); i++) {\n      vsinfo[i] = cursor.getString(i);\n    }\n    cursor.close();\n    ImageView i = (ImageView) view.findViewById(R.id.icon);\n    i.setImageResource(VibhinnaUtils.getIconRes(Integer.parseInt(vsinfo[3])));\n    TextView name = (TextView) view.findViewById(R.id.name);\n    name.setText(vsinfo[1]);\n    TextView desc = (TextView) view.findViewById(R.id.desc);\n    desc.setText(vsinfo[4]);\n    TextView cacheinfo = (TextView) view.findViewById(R.id.cacheinfo);\n    cacheinfo.setText(vsinfo[2] + Constants.CACHE_IMG);\n    if (vsinfo[7] == Constants.CORR_S) {\n      cacheinfo.setTextColor(Color.RED);\n    }\n    TextView datainfo = (TextView) view.findViewById(R.id.datainfo);\n    datainfo.setText(vsinfo[2] + Constants.DATA_IMG);\n    if (vsinfo[15] == Constants.CORR_S) {\n      datainfo.setTextColor(Color.RED);\n    }\n    TextView systeminfo = (TextView) view.findViewById(R.id.systeminfo);\n    systeminfo.setText(vsinfo[2] + Constants.SYSTEM_IMG);\n    if (vsinfo[23] == Constants.CORR_S) {\n      systeminfo.setTextColor(Color.RED);\n    }\n    TextView cuuid = (TextView) view.findViewById(R.id.cuuid);\n    if (vsinfo[5] == Constants.N_A) cuuid.setText(getString(R.string.uuid_not_available));\n    else cuuid.setText(vsinfo[5]);\n    TextView cmagic = (TextView) view.findViewById(R.id.cmagic);\n    cmagic.setText(mContext.getString(R.string.magic_number, vsinfo[6]));\n    TextView cstate = (TextView) view.findViewById(R.id.cstate);\n    cstate.setText(getString(R.string.vfs_state, vsinfo[7]));\n    TextView cspace = (TextView) view.findViewById(R.id.cspace);\n    if (vsinfo[9] == Constants.N_A) {\n      cspace.setText(getString(R.string.free_space_not_available));\n    } else cspace.setText(getString(R.string.free_space, vsinfo[9], vsinfo[8]));\n    TextView cbcount = (TextView) view.findViewById(R.id.cbcount);\n    cbcount.setText(getString(R.string.block_count, vsinfo[10]));\n    TextView cfblock = (TextView) view.findViewById(R.id.cfblock);\n    cfblock.setText(getString(R.string.free_block_count, vsinfo[11]));\n    TextView cbsize = (TextView) view.findViewById(R.id.cbsize);\n    cbsize.setText(getString(R.string.block_size, vsinfo[12]));\n    TextView duuid = (TextView) view.findViewById(R.id.duuid);\n    if (vsinfo[13] == Constants.N_A) duuid.setText(getString(R.string.uuid_not_available));\n    else duuid.setText(vsinfo[13]);\n    TextView dmagic = (TextView) view.findViewById(R.id.dmagic);\n    dmagic.setText(getString(R.string.magic_number, vsinfo[14]));\n    TextView dstate = (TextView) view.findViewById(R.id.dstate);\n    dstate.setText(getString(R.string.vfs_state, vsinfo[15]));\n    TextView dspace = (TextView) view.findViewById(R.id.dspace);\n    if (vsinfo[16] == Constants.N_A) {\n      dspace.setText(getString(R.string.free_space_not_available));\n    } else dspace.setText(getString(R.string.free_space, vsinfo[17], vsinfo[16]));\n    TextView dbcount = (TextView) view.findViewById(R.id.dbcount);\n    dbcount.setText(getString(R.string.block_count, vsinfo[18]));\n    TextView dfblock = (TextView) view.findViewById(R.id.dfblock);\n    dfblock.setText(getString(R.string.free_block_count, vsinfo[19]));\n    TextView dbsize = (TextView) view.findViewById(R.id.dbsize);\n    dbsize.setText(getString(R.string.block_size, vsinfo[20]));\n    TextView suuid = (TextView) view.findViewById(R.id.suuid);\n    if (vsinfo[21] == Constants.N_A) suuid.setText(getString(R.string.uuid_not_available));\n    else suuid.setText(vsinfo[21]);\n    TextView smagic = (TextView) view.findViewById(R.id.smagic);\n    smagic.setText(getString(R.string.magic_number, vsinfo[22]));\n    TextView sstate = (TextView) view.findViewById(R.id.sstate);\n    sstate.setText(getString(R.string.vfs_state, vsinfo[23]));\n    TextView sspace = (TextView) view.findViewById(R.id.sspace);\n    if (vsinfo[25] == Constants.N_A) {\n      sspace.setText(getString(R.string.free_space_not_available));\n    } else sspace.setText(getString(R.string.free_space, vsinfo[25], vsinfo[24]));\n    TextView sbcount = (TextView) view.findViewById(R.id.sbcount);\n    sbcount.setText(getString(R.string.block_count, vsinfo[26]));\n    TextView sfblock = (TextView) view.findViewById(R.id.sfblock);\n    sfblock.setText(getString(R.string.free_block_count, vsinfo[27]));\n    TextView sbsize = (TextView) view.findViewById(R.id.sbsize);\n    sbsize.setText(getString(R.string.block_size, vsinfo[28]));\n    return showDialogWithNoTopSpace(view, new AlertDialog.Builder(mContext).setView(view).create());\n  }\n"}, {"dataset": "from", "exampleID": 4668, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 444, "focalAPIEnd": 469, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [489], "useEnd": [540], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/29jitender/Mixpanel/tree/master/src/com/mixpanel/src/funnel/Funnel_display.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    ////////////////////////////////////////////////////\n    // Action bar\n    ActionBar mActionBar;\n    LayoutInflater mInflater;\n    View mCustomView;\n    TextView mTitleTextView;\n    mActionBar = getSupportActionBar();\n    mActionBar.setDisplayShowHomeEnabled(false);\n    mActionBar.setDisplayShowTitleEnabled(false);\n    mInflater = LayoutInflater.from(this);\n    mCustomView = mInflater.inflate(R.layout.funnel_final_menu, null);\n    mTitleTextView = (TextView) mCustomView.findViewById(R.id.title_text);\n    mTitleTextView.setText(Funnel_activity.funnel_name);\n    mTitleTextView.setTextSize(20);\n\n    mActionBar.setCustomView(mCustomView);\n    mActionBar.setDisplayShowCustomEnabled(true);\n    // mActionBar.setBackgroundDrawable(getResources().getDrawable(R.drawable.at_header_bg));\n    TextView ibItem1 = (TextView) findViewById(R.id.arrow);\n    ibItem1.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View view) {\n            finish();\n          }\n        });\n\n    /////////////////////////////////////////////\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n      // getActionBar().setDisplayHomeAsUpEnabled(true);\n      getSupportActionBar()\n          .setIcon(android.R.color.transparent); // to remove the icon from action bar\n\n      // this is for the color of title bar\n      ColorDrawable colorDrawable = new ColorDrawable();\n      int myColor = this.getResources().getColor(R.color.menu5);\n      colorDrawable.setColor(myColor);\n      android.app.ActionBar actionBar = getActionBar();\n      actionBar.setBackgroundDrawable(colorDrawable);\n    }\n\n    if (isNetworkOnline() == true) { // starting settings if internet is not working\n      internt_count = true;\n      iamcallin(); // calling the function to build everything\n\n    } else if (isNetworkOnline() == false) {\n      setContentView(R.layout.nointernet); // giving new layout to drawer\n      // setContentView(R.layout.nointernet);\n      internt_count = false;\n      Button button = (Button) findViewById(R.id.nointernet_refresh);\n\n      button.setOnClickListener(\n          new OnClickListener() {\n\n            @Override\n            public void onClick(View arg0) {\n\n              Intent myIntent = new Intent(Funnel_display.this, Funnel_display.class); // refreshing\n\n              startActivity(myIntent);\n              finish();\n            }\n          });\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4669, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 96, "focalAPIEnd": 121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pingpongboss/StandOut/tree/master/advanced/floatingfolders/src/wei/mark/floatingfolders/FloatingFolder.java", "rawCode": "  private View getAppView(final int id, final ActivityInfo app) {\n    LayoutInflater inflater = LayoutInflater.from(this);\n    final View frame = inflater.inflate(R.layout.app_square, null);\n\n    frame.setTag(app);\n\n    frame.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            Intent intent = mPackageManager.getLaunchIntentForPackage(app.packageName);\n            startActivity(intent);\n          }\n        });\n\n    frame.setOnLongClickListener(\n        new OnLongClickListener() {\n\n          @Override\n          public boolean onLongClick(View v) {\n            ActivityInfo app = (ActivityInfo) v.getTag();\n            Log.d(\"FloatingFolder\", \"Long clicked: \" + app.loadLabel(mPackageManager));\n\n            onUserRemoveApp(id, app);\n            return true;\n          }\n        });\n\n    ImageView icon = (ImageView) frame.findViewById(R.id.icon);\n    icon.setImageDrawable(app.loadIcon(mPackageManager));\n    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(iconSize, iconSize);\n    params.gravity = Gravity.CENTER_HORIZONTAL;\n    icon.setLayoutParams(params);\n\n    TextView name = (TextView) frame.findViewById(R.id.name);\n    name.setText(app.loadLabel(mPackageManager));\n\n    View square = frame.findViewById(R.id.square);\n    square.setLayoutParams(\n        new FrameLayout.LayoutParams(squareWidth, FrameLayout.LayoutParams.WRAP_CONTENT));\n\n    return frame;\n  }\n"}, {"dataset": "from", "exampleID": 4670, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 66, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [116], "useEnd": [153], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacobhanshaw/Sniper/tree/master/android/src/com/sniper/ActivitySettingsHome.java", "rawCode": "  public void ChangeUserName(View view) {\n    LayoutInflater li = LayoutInflater.from(this);\n    View promptsView = li.inflate(R.layout.input_text, null);\n\n    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);\n\n    // set prompts.xml to alertdialog builder\n    alertDialogBuilder.setView(promptsView);\n\n    final EditText userInput = (EditText) promptsView.findViewById(R.id.inputText);\n\n    // set dialog message\n    alertDialogBuilder\n        .setCancelable(false)\n        .setPositiveButton(\n            \"OK\",\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int id) {\n                // get user input and set it to result\n                // edit text\n                String newText = userInput.getText().toString();\n                // userName.setText(userInput.getText());\n                ParseUser.getCurrentUser().setUsername(newText);\n                userName.setText(ParseUser.getCurrentUser().getUsername());\n                ParseUser.getCurrentUser().saveInBackground();\n              }\n            })\n        .setNegativeButton(\n            \"Cancel\",\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int id) {\n                dialog.cancel();\n              }\n            });\n\n    // create alert dialog\n    AlertDialog alertDialog = alertDialogBuilder.create();\n\n    // show it\n    alertDialog.show();\n  }\n"}, {"dataset": "from", "exampleID": 4671, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 115, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PROMAND/MINK/tree/master/libs/action_bar/src/com/actionbarsherlock/internal/view/menu/BaseMenuPresenter.java", "rawCode": "  @Override\n  public void initForMenu(Context context, MenuBuilder menu) {\n    mContext = context;\n    mInflater = LayoutInflater.from(mContext);\n    mMenu = menu;\n  }\n"}, {"dataset": "from", "exampleID": 4672, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 117, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)"], "useStart": [224, 352, 480], "useEnd": [271, 402, 528], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuzhupc/Sourcing/tree/master/src/Sourcing_Android/src/com/wuzhupc/Sourcing/adapter/ListBaseAdapter.java", "rawCode": "  /**\n   * 职位\n   *\n   * @param vo\n   * @return\n   */\n  private View getResumeListItem(ResumeVO vo) {\n    View view = LayoutInflater.from(mContext).inflate(R.layout.listitem_project, null);\n    TextView title_tv = (TextView) view.findViewById(R.id.listitem_projectname_tv);\n    title_tv.setText(vo.getResumetitle());\n    TextView status_tv = (TextView) view.findViewById(R.id.listitem_project_status_tv);\n    status_tv.setText(vo.getExpectjob());\n    TextView time_tv = (TextView) view.findViewById(R.id.listitem_project_time_tv);\n    time_tv.setText(vo.getPublishtime());\n    return view;\n  }\n"}, {"dataset": "from", "exampleID": 4673, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 92, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [222], "useEnd": [278], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/omg-insa/client/tree/master/PlanYourParty/src/eu/chitic/syp/gui/account/PersonalInfoActivity.java", "rawCode": "  private void initGraphicalInterface() {\n    // set layouts\n    LayoutInflater mInflater = LayoutInflater.from(this);\n    abstractView = (LinearLayout) findViewById(R.id.abstractLinearLayout);\n    mainView = (ScrollView) mInflater.inflate(R.layout.personal_info_activity, null);\n    abstractView.addView(mainView);\n    fullName = (TextView) findViewById(R.id.persoanl_fullname);\n    email = (TextView) findViewById(R.id.perosal_Email);\n    day = (TextView) findViewById(R.id.persoanl_days);\n    month = (TextView) findViewById(R.id.persoanl_months);\n    year = (TextView) findViewById(R.id.personal_years);\n    sendButton = (Button) findViewById(R.id.personal_info_send);\n    sexSpinner = (Spinner) findViewById(R.id.sex_spinner);\n    // Create an ArrayAdapter using the string array and a default spinner\n    // layout\n    ArrayAdapter<CharSequence> adapter =\n        ArrayAdapter.createFromResource(\n            this, R.array.sex_array, android.R.layout.simple_spinner_item);\n    // Specify the layout to use when the list of choices appears\n    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n    // Apply the adapter to the spinner\n    sexSpinner.setAdapter(adapter);\n    statusSpinner = (Spinner) findViewById(R.id.status_spinner);\n    // Create an ArrayAdapter using the string array and a default spinner\n    // layout\n    ArrayAdapter<CharSequence> adapter2 =\n        ArrayAdapter.createFromResource(\n            this, R.array.status_array, android.R.layout.simple_spinner_item);\n    // Specify the layout to use when the list of choices appears\n    adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n    // Apply the adapter to the spinner\n    statusSpinner.setAdapter(adapter2);\n\n    Drawable background =\n        ((LinearLayout) findViewById(R.id.personal_info_backgorund)).getBackground();\n    background.setAlpha(95);\n\n    windowTitle = (TextView) findViewById(R.id.pageTitle);\n    windowTitle.setText(R.string.PersonalInfoTitle);\n\n    sendButton.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            if (day.getText().toString().equals(\"\")\n                || month.getText().toString().equals(\"\")\n                || year.getText().toString().equals(\"\")\n                || fullName.getText().toString().equals(\"\")\n                || email.getText().toString().equals(\"\")\n                || sexSpinner.getSelectedItemId() == 0\n                || statusSpinner.getSelectedItemId() == 0) {\n              Popups.showPopup(Constants.IncompleatData);\n              return;\n            }\n            if (AppTools.isEmailValid(email.getText().toString()) == false) {\n              Popups.showPopup(Constants.InvalidEmail);\n              return;\n            }\n            if (!checkDate()) return;\n            new PersonalInfoChangeTask().execute();\n          }\n        });\n  }\n"}, {"dataset": "from", "exampleID": 4674, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 293, "focalAPIEnd": 337, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CMPUT301W13T11/FoodBook/tree/master/FooBook/src/ca/ualberta/cmput301w13t11/FoodBook/ViewRecipeActivity.java", "rawCode": "    @Override\n    protected void onPostExecute(ReturnCode ret) {\n      progressDialog.dismiss();\n      if (ret == ReturnCode.SUCCESS) {\n        darkenScreen();\n        // make the popup\n        LinearLayout layout = new LinearLayout(ViewRecipeActivity.this);\n        LayoutInflater inflater = LayoutInflater.from(ViewRecipeActivity.this);\n        popUp =\n            new PopupWindow(\n                inflater.inflate(R.layout.popup_recipe_upload_success, null, false),\n                380,\n                300,\n                true);\n        popUp.showAtLocation(layout, Gravity.CENTER, 0, 0);\n      } else if (ret == ReturnCode.BUSY) {\n\n        Toast.makeText(\n                getApplicationContext(),\n                \"It looks like the server is busy or not responding. Aieee.\",\n                Toast.LENGTH_LONG)\n            .show();\n\n      } else if (ret == ReturnCode.ALREADY_EXISTS) {\n\n        /* Temp toast, could eventually be its own popup if someone cares to do it. */\n        Toast.makeText(\n                getApplicationContext(),\n                \"A recipe with this uri already exists. :S\",\n                Toast.LENGTH_LONG)\n            .show();\n\n      } else if (ret == ReturnCode.ERROR) {\n\n        /* Temp toast, could eventually be its own popup */\n        Toast.makeText(\n                getApplicationContext(),\n                \"An error occurred. Sorry about that. :(\",\n                Toast.LENGTH_LONG)\n            .show();\n      }\n    }\n"}, {"dataset": "from", "exampleID": 4675, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 136, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [347], "useEnd": [383], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sala223/DelicacyFusion/tree/master/modules/android/android-client/src/com/df/android/ui/OrderListViewAdapter.java", "rawCode": "  @Override\n  public View getView(int position, View convertView, ViewGroup parentView) {\n    View view = null;\n    LayoutInflater li = LayoutInflater.from(context);\n\n    LVItem lvItem = (LVItem) getItem(position);\n    if (lvItem instanceof LVOrderLine) {\n      if (convertView != null) {\n        view = convertView;\n      } else {\n        view = li.inflate(R.layout.orderitem, null);\n      }\n\n      final TextView tvName = (TextView) view.findViewById(R.id.menuItemName);\n      final TextView tvPrice = (TextView) view.findViewById(R.id.menuItemPrice);\n      final TextView tvCopies = (TextView) view.findViewById(R.id.menuItemCopies);\n      view.findViewById(R.id.menuItemRemove).setVisibility(View.INVISIBLE);\n\n      final OrderLine line = ((LVOrderLine) lvItem).getLine();\n      tvName.setText(line.getItem().getName());\n      tvPrice.setText(\"\" + line.getPrice());\n      tvCopies.setText(\"x\" + line.getQuantity());\n\n      view.setOnTouchListener(\n          new OnTouchListener() {\n            @Override\n            public boolean onTouch(View view, MotionEvent event) {\n              // if(event.getAction() == MotionEvent.ACTION_MOVE) {\n              ImageButton btnDelete = (ImageButton) view.findViewById(R.id.menuItemRemove);\n              btnDelete.setOnClickListener(\n                  new OnClickListener() {\n                    @Override\n                    public void onClick(View view) {\n                      OrderMgr.removeOrderLine(order, line);\n                    }\n                  });\n              btnDelete.setVisibility(View.VISIBLE);\n              // }\n\n              return false;\n            }\n          });\n    }\n\n    return view;\n  }\n"}, {"dataset": "from", "exampleID": 4676, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 322, "focalAPIEnd": 350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cmuellerrr/PEER/tree/master/src/edu/cmu/hcii/peer/util/ViewFactory.java", "rawCode": "  /**\n   * Get an execution note for the ex note overview page.\n   *\n   * @param context\n   * @param note\n   * @return\n   */\n  public static ViewGroup getExecutionNoteOverview(Context context, ExecNote note) {\n    if (note != null) {\n      Log.v(TAG, \"Setting up overview execution note\");\n      LayoutInflater inflater = LayoutInflater.from(context);\n      ViewGroup noteView = (ViewGroup) inflater.inflate(R.layout.ex_note_overall, null);\n\n      ((TextView) noteView.findViewById(R.id.exNoteNumber)).setText(\"Step \" + note.getNumber());\n      ((TextView) noteView.findViewById(R.id.exNoteText)).setText(note.getText());\n\n      // Set up the custom fonts\n      FontManager fm = FontManager.getInstance(context.getAssets());\n      ((TextView) noteView.findViewById(R.id.exNoteNumber)).setTypeface(fm.getFont(FontStyle.BODY));\n      ((TextView) noteView.findViewById(R.id.exNoteText)).setTypeface(fm.getFont(FontStyle.BODY));\n\n      return noteView;\n    }\n\n    return null;\n  }\n"}, {"dataset": "from", "exampleID": 4677, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 115, "focalAPIEnd": 144, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [158], "useEnd": [204], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/marred01/SchedU/tree/master/src/com/selagroup/schedu/adapters/WorkArrayAdapter.java", "rawCode": "  public View getView(int position, View row, ViewGroup parent) {\n    if (row == null) {\n      LayoutInflater li = LayoutInflater.from(mContext);\n      row = li.inflate(R.layout.adapter_work_select, null);\n    }\n    final Assignment workItem = mWorkList.get(position);\n    ((TextView) row.findViewById(R.id.work_adapter_tv_due))\n        .setText((new SimpleDateFormat(\"M/dd\")).format(workItem.getDueDate().getTime()));\n    ((TextView) row.findViewById(R.id.work_adapter_tv_desc)).setText(workItem.getName());\n    ((ImageButton) row.findViewById(R.id.work_adapter_btn_delete))\n        .setOnClickListener(\n            new OnClickListener() {\n              public void onClick(View v) {\n                mEditListener.onWorkDelete(workItem);\n              }\n            });\n    return row;\n  }\n"}, {"dataset": "from", "exampleID": 4678, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 1476, "focalAPIEnd": 1501, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "AlertDialog.Builder.setView(flater)"], "useStart": [1566, 1677], "useEnd": [1596, 1695], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tcoxon/ComicViewer/tree/master/src/net/bytten/comicviewer/ComicViewerActivity.java", "rawCode": "  @Override\n  protected Dialog onCreateDialog(int id) {\n    // Set up variables for a dialog and a dialog builder. Only need one of each.\n    Dialog dialog = null;\n    AlertDialog.Builder builder = null;\n\n    // Determine the type of dialog based on the integer passed. These are defined in constants\n    // at the top of the class.\n    switch (id) {\n      case DIALOG_SHOW_HOVER_TEXT:\n        // Build and show the Hover Text dialog\n        builder = new AlertDialog.Builder(ComicViewerActivity.this);\n        builder.setMessage(comicInfo.getAlt());\n        builder.setPositiveButton(\n            \"Open Link...\",\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int which) {\n                openComicLink();\n              }\n            });\n        builder.setNegativeButton(\"Close\", null);\n        dialog = builder.create();\n        builder = null;\n        break;\n      case DIALOG_SHOW_ABOUT:\n        // Build and show the About dialog\n        builder = new AlertDialog.Builder(this);\n        builder.setTitle(getStringAppName());\n        builder.setIcon(android.R.drawable.ic_menu_info_details);\n        builder.setNegativeButton(android.R.string.ok, null);\n        builder.setNeutralButton(\n            \"Donate\",\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int which) {\n                donate();\n              }\n            });\n        View v = LayoutInflater.from(this).inflate(R.layout.about, null);\n        TextView tv = (TextView) v.findViewById(R.id.aboutText);\n        tv.setText(String.format(getStringAboutText(), getVersion()));\n        builder.setView(v);\n        dialog = builder.create();\n        builder = null;\n        v = null;\n        tv = null;\n        break;\n      case DIALOG_SEARCH_BY_TITLE:\n        // Build and show the Search By Title dialog\n        builder = new AlertDialog.Builder(this);\n\n        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);\n        View layout =\n            inflater.inflate(R.layout.search_dlg, (ViewGroup) findViewById(R.id.search_dlg));\n\n        final EditText input = (EditText) layout.findViewById(R.id.search_dlg_edit_box);\n\n        builder.setTitle(\"Search by Title\");\n        builder.setIcon(android.R.drawable.ic_menu_search);\n        builder.setView(layout);\n        builder.setPositiveButton(\n            android.R.string.ok,\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int which) {\n                String query = input.getText().toString();\n                Uri uri = comicDef.getArchiveUrl();\n                Intent i = new Intent(ComicViewerActivity.this, getArchiveActivityClass());\n                i.setAction(Intent.ACTION_VIEW);\n                i.setData(uri);\n                i.putExtra(getPackageName() + \"LoadType\", ArchiveActivity.LoadType.SEARCH_TITLE);\n                i.putExtra(getPackageName() + \"query\", query);\n                startActivityForResult(i, PICK_ARCHIVE_ITEM);\n              }\n            });\n        builder.setNegativeButton(\n            android.R.string.cancel,\n            new DialogInterface.OnClickListener() {\n              public void onClick(DialogInterface dialog, int which) {\n                dialog.cancel();\n              }\n            });\n        dialog = builder.create();\n        builder = null;\n        break;\n      case DIALOG_FAILED:\n        // Probably doesn't need its own builder, but because this is a special case\n        // dialog I gave it one.\n        AlertDialog.Builder adb = new AlertDialog.Builder(this);\n        adb.setTitle(\"Error\");\n        adb.setIcon(android.R.drawable.ic_dialog_alert);\n\n        adb.setNeutralButton(android.R.string.ok, null);\n\n        // Set failedDialog to our dialog so we can dismiss\n        // it manually\n        failedDialog = adb.create();\n        failedDialog.setMessage(errors);\n\n        dialog = failedDialog;\n        break;\n      default:\n        dialog = null;\n    }\n\n    return dialog;\n  }\n"}, {"dataset": "from", "exampleID": 4679, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 180, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [229], "useEnd": [292], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DavidTPate/diablo3_builder/tree/master/d3_android/libs/ActionBarSherlock/samples/demos/src/com/actionbarsherlock/sample/demos/ActionProviders.java", "rawCode": "    /** {@inheritDoc} */\n    @Override\n    public View onCreateActionView() {\n      // Inflate the action view to be shown on the action bar.\n      LayoutInflater layoutInflater = LayoutInflater.from(mContext);\n      View view = layoutInflater.inflate(R.layout.settings_action_provider, null);\n      ImageButton button = (ImageButton) view.findViewById(R.id.button);\n      // Attach a click listener for launching the system settings.\n      button.setOnClickListener(\n          new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n              mContext.startActivity(sSettingsIntent);\n            }\n          });\n      return view;\n    }\n"}, {"dataset": "from", "exampleID": 4680, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 156, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/android_packages_apps_settings/tree/master/src/com/android/settings/MediaFormat.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedState) {\n    super.onCreate(savedState);\n\n    mInitialView = null;\n    mFinalView = null;\n    mInflater = LayoutInflater.from(this);\n\n    establishInitialState();\n  }\n"}, {"dataset": "from", "exampleID": 4681, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 855, "focalAPIEnd": 880, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [900], "useEnd": [938], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/29jitender/Mixpanel/tree/master/src/com/mixpanel/src/Event_top.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    requestWindowFeature(\n        Window.FEATURE_INDETERMINATE_PROGRESS); // for progress it will be passed before layout\n\n    // navigation\n    if (savedInstanceState != null) {\n      mActiveViewId = savedInstanceState.getInt(STATE_ACTIVE_VIEW_ID);\n    }\n\n    mMenuDrawer = MenuDrawer.attach(this, MenuDrawer.MENU_DRAG_WINDOW);\n    mMenuDrawer.setMenuView(R.layout.menu_scrollview); // this is the layout for\n\n    ////////////////////////////////////////////////////\n    // Action bar\n    ActionBar mActionBar;\n    LayoutInflater mInflater;\n    View mCustomView;\n    TextView mTitleTextView;\n    mActionBar = getSupportActionBar();\n    mActionBar.setDisplayShowHomeEnabled(false);\n    mActionBar.setDisplayShowTitleEnabled(false);\n    mInflater = LayoutInflater.from(this);\n    mCustomView = mInflater.inflate(R.layout.menu, null);\n    mTitleTextView = (TextView) mCustomView.findViewById(R.id.title_text);\n    mTitleTextView.setText(\"Top Events of Today\");\n    mTitleTextView.setTextSize(20);\n\n    mActionBar.setCustomView(mCustomView);\n    mActionBar.setDisplayShowCustomEnabled(true);\n    // mActionBar.setBackgroundDrawable(getResources().getDrawable(R.drawable.at_header_bg));\n    ImageButton ibItem1 = (ImageButton) findViewById(R.id.btn_slide);\n    ibItem1.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View view) {\n            mMenuDrawer.toggleMenu();\n          }\n        });\n\n    /////////////////////////////////////////////\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {\n      // getActionBar().setDisplayHomeAsUpEnabled(true);\n      // this is for the color of title bar\n      ColorDrawable colorDrawable = new ColorDrawable();\n      int myColor = this.getResources().getColor(R.color.menu3);\n      colorDrawable.setColor(myColor);\n      android.app.ActionBar actionBar = getActionBar();\n      actionBar.setBackgroundDrawable(colorDrawable);\n    }\n\n    // mContentTextView = (TextView) findViewById(R.id.contentText);\n    findViewById(R.id.item1).setOnClickListener(this);\n    findViewById(R.id.item2).setOnClickListener(this);\n    findViewById(R.id.item3).setOnClickListener(this);\n    findViewById(R.id.item4).setOnClickListener(this);\n    findViewById(R.id.item5).setOnClickListener(this);\n    findViewById(R.id.item6).setOnClickListener(this);\n    findViewById(R.id.item7).setOnClickListener(this);\n    findViewById(R.id.item8).setOnClickListener(this);\n\n    TextView activeView = (TextView) findViewById(mActiveViewId);\n    if (activeView != null) {\n      mMenuDrawer.setActiveView(activeView);\n      // mContentTextView.setText(\"Active item: \" + activeView.getText());\n    }\n\n    Display display = getWindowManager().getDefaultDisplay();\n    int width = display.getWidth();\n    mMenuDrawer.setMenuSize(width / 4); // size of menu\n    mMenuDrawer.setDropShadow(android.R.color.transparent); // removin showdo\n    // navigation\n\n    if (isNetworkOnline() == true) { // starting settings if internet is not working\n      internt_count = true;\n      iamcallin(); // calling the function to build everything\n\n    } else if (isNetworkOnline() == false) {\n      setContentView(R.layout.nointernet); // giving new layout to drawer\n      // setContentView(R.layout.nointernet);\n      internt_count = false;\n      Button button = (Button) findViewById(R.id.nointernet_refresh);\n\n      button.setOnClickListener(\n          new OnClickListener() {\n\n            @Override\n            public void onClick(View arg0) {\n\n              Intent myIntent = new Intent(Event_top.this, Event_top.class); // refreshing\n\n              startActivity(myIntent);\n              finish();\n            }\n          });\n    }\n  }\n"}, {"dataset": "from", "exampleID": 4682, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 82, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [146], "useEnd": [184], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tooflya/bubble-fun/tree/master/src/com/tooflya/bubblefun/screens/MenuScreen.java", "rawCode": "        @Override\n        public void run() {\n          final LayoutInflater in = LayoutInflater.from(Game.mInstance);\n          final View inf = in.inflate(R.layout.rating_name, null);\n\n          AlertDialog.Builder builder = new AlertDialog.Builder(Game.mInstance);\n          builder.setView(inf);\n          builder\n              .setTitle(\"Participation in the rating\")\n              .setMessage(\"Please enter your user name. It will appear in the table of records.\")\n              .setNegativeButton(\n                  \"Cancel\",\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                      mDontShopRating = true;\n                    }\n                  })\n              .setPositiveButton(\n                  \"OK\",\n                  new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int id) {\n                      Game.mDatabase.setRatingName(\n                          ((EditText) inf.findViewById(R.id.username)).getText().toString());\n                      System.out.println(Game.mDatabase.getRatingName());\n                      Game.mDatabase.disableRating();\n                    }\n                  });\n          builder.create().show();\n        }\n"}, {"dataset": "from", "exampleID": 4683, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/remain/topick/tree/master/client/ActionBarSherlockLib/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4684, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 137, "focalAPIEnd": 162, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)"], "useStart": [230, 441, 620, 740], "useEnd": [269, 475, 654, 776], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openproject/world2/tree/master/baseworld2/src/com/tianxia/lib/baseworld2/activity/RefSetActivity.java", "rawCode": "  @Override\n  protected View getView(int position, View convertView) {\n    View view = convertView;\n    if (view == null) {\n      view = LayoutInflater.from(this).inflate(R.layout.ref_set_list_item, null);\n    }\n\n    mItemRight = view.findViewById(R.id.item_base_right);\n    if (showRightTag(position)) {\n      mItemRight.setVisibility(View.VISIBLE);\n    } else {\n      mItemRight.setVisibility(View.GONE);\n    }\n    mItemIndex = (TextView) view.findViewById(R.id.item_index);\n    mItemIndex.setText(\"第\" + listData.get(position).index + \"季\");\n    mItemIndex.getPaint().setFakeBoldText(true);\n    mItemTitle = (TextView) view.findViewById(R.id.item_title);\n    mItemTitle.setText(listData.get(position).title);\n    mItemSummary = (TextView) view.findViewById(R.id.item_summary);\n    mItemSummary.setText(\" \" + listData.get(position).summary);\n    mItemSummary.setTypeface(Typeface.MONOSPACE, Typeface.ITALIC);\n    return view;\n  }\n"}, {"dataset": "from", "exampleID": 4685, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hugoflug/flashcards/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4686, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 2471, "focalAPIEnd": 2496, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kabir/connectbot/tree/master/src/org/connectbot/PortForwardListActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    long hostId = this.getIntent().getLongExtra(Intent.EXTRA_TITLE, -1);\n\n    setContentView(R.layout.act_portforwardlist);\n\n    // connect with hosts database and populate list\n    this.hostdb = new HostDatabase(this);\n    host = hostdb.findHostById(hostId);\n\n    {\n      final String nickname = host != null ? host.getNickname() : null;\n      final Resources resources = getResources();\n\n      if (nickname != null) {\n        this.setTitle(\n            String.format(\n                \"%s: %s (%s)\",\n                resources.getText(R.string.app_name),\n                resources.getText(R.string.title_port_forwards_list),\n                nickname));\n      } else {\n        this.setTitle(\n            String.format(\n                \"%s: %s\",\n                resources.getText(R.string.app_name),\n                resources.getText(R.string.title_port_forwards_list)));\n      }\n    }\n\n    connection =\n        new ServiceConnection() {\n          public void onServiceConnected(ComponentName className, IBinder service) {\n            TerminalManager bound = ((TerminalManager.TerminalBinder) service).getService();\n\n            hostBridge = bound.getConnectedBridge(host);\n            updateHandler.sendEmptyMessage(-1);\n          }\n\n          public void onServiceDisconnected(ComponentName name) {\n            hostBridge = null;\n          }\n        };\n\n    this.updateList();\n\n    this.registerForContextMenu(this.getListView());\n\n    this.getListView()\n        .setOnItemClickListener(\n            new OnItemClickListener() {\n              public void onItemClick(AdapterView<?> adapter, View view, int position, long id) {\n                ListView lv = PortForwardListActivity.this.getListView();\n                PortForwardBean pfb = (PortForwardBean) lv.getItemAtPosition(position);\n\n                if (hostBridge != null) {\n                  if (pfb.isEnabled()) hostBridge.disablePortForward(pfb);\n                  else {\n                    if (!hostBridge.enablePortForward(pfb))\n                      Toast.makeText(\n                              PortForwardListActivity.this,\n                              getString(R.string.portforward_problem),\n                              Toast.LENGTH_LONG)\n                          .show();\n                  }\n\n                  updateHandler.sendEmptyMessage(-1);\n                }\n              }\n            });\n\n    this.inflater = LayoutInflater.from(this);\n  }\n"}, {"dataset": "from", "exampleID": 4687, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 669, "focalAPIEnd": 694, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/irssiconnectbot/irssiconnectbot/tree/master/src/org/woltage/irssiconnectbot/GeneratePubkeyActivity.java", "rawCode": "  @Override\n  public void onCreate(Bundle icicle) {\n    super.onCreate(icicle);\n\n    setContentView(R.layout.act_generatepubkey);\n\n    nickname = (EditText) findViewById(R.id.nickname);\n\n    keyTypeGroup = (RadioGroup) findViewById(R.id.key_type);\n\n    bitsText = (EditText) findViewById(R.id.bits);\n    bitsSlider = (SeekBar) findViewById(R.id.bits_slider);\n\n    password1 = (EditText) findViewById(R.id.password1);\n    password2 = (EditText) findViewById(R.id.password2);\n\n    unlockAtStartup = (CheckBox) findViewById(R.id.unlock_at_startup);\n\n    confirmUse = (CheckBox) findViewById(R.id.confirm_use);\n\n    save = (Button) findViewById(R.id.save);\n\n    inflater = LayoutInflater.from(this);\n\n    nickname.addTextChangedListener(textChecker);\n    password1.addTextChangedListener(textChecker);\n    password2.addTextChangedListener(textChecker);\n\n    keyTypeGroup.setOnCheckedChangeListener(\n        new OnCheckedChangeListener() {\n\n          public void onCheckedChanged(RadioGroup group, int checkedId) {\n            if (checkedId == R.id.rsa) {\n              minBits = 768;\n\n              bitsSlider.setEnabled(true);\n              bitsSlider.setProgress(DEFAULT_BITS - minBits);\n\n              bitsText.setText(String.valueOf(DEFAULT_BITS));\n              bitsText.setEnabled(true);\n\n              keyType = PubkeyDatabase.KEY_TYPE_RSA;\n            } else if (checkedId == R.id.dsa) {\n              // DSA keys can only be 1024 bits\n\n              bitsSlider.setEnabled(false);\n              bitsSlider.setProgress(DEFAULT_BITS - minBits);\n\n              bitsText.setText(String.valueOf(DEFAULT_BITS));\n              bitsText.setEnabled(false);\n\n              keyType = PubkeyDatabase.KEY_TYPE_DSA;\n            }\n          }\n        });\n\n    bitsSlider.setOnSeekBarChangeListener(\n        new OnSeekBarChangeListener() {\n\n          public void onProgressChanged(SeekBar seekBar, int progress, boolean fromTouch) {\n            // Stay evenly divisible by 8 because it looks nicer to have\n            // 2048 than 2043 bits.\n\n            int leftover = progress % 8;\n            int ourProgress = progress;\n\n            if (leftover > 0) ourProgress += 8 - leftover;\n\n            bits = minBits + ourProgress;\n            bitsText.setText(String.valueOf(bits));\n          }\n\n          public void onStartTrackingTouch(SeekBar seekBar) {\n            // We don't care about the start.\n          }\n\n          public void onStopTrackingTouch(SeekBar seekBar) {\n            // We don't care about the stop.\n          }\n        });\n\n    bitsText.setOnFocusChangeListener(\n        new OnFocusChangeListener() {\n          public void onFocusChange(View v, boolean hasFocus) {\n            if (!hasFocus) {\n              try {\n                bits = Integer.parseInt(bitsText.getText().toString());\n                if (bits < minBits) {\n                  bits = minBits;\n                  bitsText.setText(String.valueOf(bits));\n                }\n              } catch (NumberFormatException nfe) {\n                bits = DEFAULT_BITS;\n                bitsText.setText(String.valueOf(bits));\n              }\n\n              bitsSlider.setProgress(bits - minBits);\n            }\n          }\n        });\n\n    save.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View view) {\n            GeneratePubkeyActivity.this.save.setEnabled(false);\n\n            GeneratePubkeyActivity.this.startEntropyGather();\n          }\n        });\n  }\n"}, {"dataset": "from", "exampleID": 4688, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["context.getResources()"], "configurationStart": [61], "configurationEnd": [83], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 131, "focalAPIEnd": 159, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoryckl/android-demos/tree/master/TextReader/android_platform_laohan/src/com/svo/platform/widget/PushRefreshListView.java", "rawCode": "  private void init(Context context) {\n    setCacheColorHint(context.getResources().getColor(R.color.transparent));\n    inflater = LayoutInflater.from(context);\n\n    headView = (LinearLayout) inflater.inflate(R.layout.pull_refresh_header, null);\n\n    arrowImageView = (ImageView) headView.findViewById(R.id.head_arrowImageView);\n    arrowImageView.setMinimumWidth(70);\n    arrowImageView.setMinimumHeight(50);\n    progressBar = (ProgressBar) headView.findViewById(R.id.head_progressBar);\n    tipsTextview = (TextView) headView.findViewById(R.id.head_tipsTextView);\n    lastUpdatedTextView = (TextView) headView.findViewById(R.id.head_lastUpdatedTextView);\n\n    measureView(headView);\n    headContentHeight = headView.getMeasuredHeight();\n    headContentWidth = headView.getMeasuredWidth();\n\n    headView.setPadding(0, -1 * headContentHeight, 0, 0);\n    headView.invalidate();\n\n    Log.i(\"size\", \"width:\" + headContentWidth + \" height:\" + headContentHeight);\n\n    addHeaderView(headView, null, false);\n    setOnScrollListener(this);\n\n    animation =\n        new RotateAnimation(\n            0, 180, RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);\n    animation.setInterpolator(new LinearInterpolator());\n    animation.setDuration(250);\n    animation.setFillAfter(true);\n\n    reverseAnimation =\n        new RotateAnimation(\n            180, 0, RotateAnimation.RELATIVE_TO_SELF, 0.5f, RotateAnimation.RELATIVE_TO_SELF, 0.5f);\n    reverseAnimation.setInterpolator(new LinearInterpolator());\n    reverseAnimation.setDuration(200);\n    reverseAnimation.setFillAfter(true);\n\n    state = DONE;\n    isRefreshable = false;\n  }\n"}, {"dataset": "from", "exampleID": 4689, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 204, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/redvox/tomatroid/tree/master/src/com/example/tomatroid/ThemeList.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    Util.switchToNightMode(this);\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_theme_list);\n    mInflater = LayoutInflater.from(this);\n\n    new NavigationBarManager(this, ACTIVITYNUMBER);\n\n    Cursor c1 = sqHelper.getThemeCursor(0, false);\n    Cursor c2 = sqHelper.getThemeCursor(1, false);\n\n    shown = (ListView) findViewById(R.id.shown);\n    hide = (ListView) findViewById(R.id.hide);\n\n    showAdapter = new ThemeCursorAdapter(this, c1, 0, 0);\n    hideAdapter = new ThemeCursorAdapter(this, c2, 0, 1);\n\n    shown.setAdapter(showAdapter);\n    hide.setAdapter(hideAdapter);\n    themeListAdapter =\n        new SimpleCursorAdapter(\n            this,\n            R.layout.choose_theme_row,\n            sqHelper.getThemeCursor(),\n            new String[] {SQHelper.KEY_NAME},\n            new int[] {R.id.name},\n            0);\n  }\n"}, {"dataset": "from", "exampleID": 4690, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 588, "focalAPIEnd": 613, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,FrameLayout)"], "useStart": [588], "useEnd": [641], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cldellow/Ballero/tree/master/src/main/java/greendroid/src/greendroid/app/GDActivity.java", "rawCode": "  /**\n   * Set the activity content from a layout resource. The resource will be inflated, adding all\n   * top-level views to the activity.\n   *\n   * <p>This method is an equivalent to setContentView(int) that automatically wraps the given\n   * layout in an {@link ActionBarHost} if needed..\n   *\n   * @param resID Resource ID to be inflated.\n   * @see #setActionBarContentView(View)\n   * @see #setActionBarContentView(View, LayoutParams)\n   */\n  public void setActionBarContentView(int resID) {\n    final FrameLayout contentView = getContentView();\n    contentView.removeAllViews();\n    LayoutInflater.from(this).inflate(resID, contentView);\n  }\n"}, {"dataset": "from", "exampleID": 4691, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 97, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/java/android/app/ProgressDialog.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    LayoutInflater inflater = LayoutInflater.from(mContext);\n    TypedArray a =\n        mContext.obtainStyledAttributes(\n            null,\n            com.android.internal.R.styleable.AlertDialog,\n            com.android.internal.R.attr.alertDialogStyle,\n            0);\n    if (mProgressStyle == STYLE_HORIZONTAL) {\n\n      /* Use a separate handler to update the text views as they\n       * must be updated on the same thread that created them.\n       */\n      mViewUpdateHandler =\n          new Handler() {\n            @Override\n            public void handleMessage(Message msg) {\n              super.handleMessage(msg);\n\n              /* Update the number and percent */\n              int progress = mProgress.getProgress();\n              int max = mProgress.getMax();\n              if (mProgressNumberFormat != null) {\n                String format = mProgressNumberFormat;\n                mProgressNumber.setText(String.format(format, progress, max));\n              } else {\n                mProgressNumber.setText(\"\");\n              }\n              if (mProgressPercentFormat != null) {\n                double percent = (double) progress / (double) max;\n                SpannableString tmp = new SpannableString(mProgressPercentFormat.format(percent));\n                tmp.setSpan(\n                    new StyleSpan(android.graphics.Typeface.BOLD),\n                    0,\n                    tmp.length(),\n                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\n                mProgressPercent.setText(tmp);\n              } else {\n                mProgressPercent.setText(\"\");\n              }\n            }\n          };\n      View view =\n          inflater.inflate(\n              a.getResourceId(\n                  com.android.internal.R.styleable.AlertDialog_horizontalProgressLayout,\n                  R.layout.alert_dialog_progress),\n              null);\n      mProgress = (ProgressBar) view.findViewById(R.id.progress);\n      mProgressNumber = (TextView) view.findViewById(R.id.progress_number);\n      mProgressPercent = (TextView) view.findViewById(R.id.progress_percent);\n      setView(view);\n    } else {\n      View view =\n          inflater.inflate(\n              a.getResourceId(\n                  com.android.internal.R.styleable.AlertDialog_progressLayout,\n                  R.layout.progress_dialog),\n              null);\n      mProgress = (ProgressBar) view.findViewById(R.id.progress);\n      mMessageView = (TextView) view.findViewById(R.id.message);\n      setView(view);\n    }\n    a.recycle();\n    if (mMax > 0) {\n      setMax(mMax);\n    }\n    if (mProgressVal > 0) {\n      setProgress(mProgressVal);\n    }\n    if (mSecondaryProgressVal > 0) {\n      setSecondaryProgress(mSecondaryProgressVal);\n    }\n    if (mIncrementBy > 0) {\n      incrementProgressBy(mIncrementBy);\n    }\n    if (mIncrementSecondaryBy > 0) {\n      incrementSecondaryProgressBy(mIncrementSecondaryBy);\n    }\n    if (mProgressDrawable != null) {\n      setProgressDrawable(mProgressDrawable);\n    }\n    if (mIndeterminateDrawable != null) {\n      setIndeterminateDrawable(mIndeterminateDrawable);\n    }\n    if (mMessage != null) {\n      setMessage(mMessage);\n    }\n    setIndeterminate(mIndeterminate);\n    onProgressChanged();\n    super.onCreate(savedInstanceState);\n  }\n"}, {"dataset": "from", "exampleID": 4692, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 212, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup)"], "useStart": [212], "useEnd": [262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/corestick/MateLauncher/tree/master/MateLauncher/src/mobi/intuitit/android/mate/launcher/LiveFolder.java", "rawCode": "  static LiveFolder fromXml(Context context, FolderInfo folderInfo) {\n    final int layout =\n        isDisplayModeList(folderInfo) ? R.layout.live_folder_list : R.layout.live_folder_grid;\n    return (LiveFolder) LayoutInflater.from(context).inflate(layout, null);\n  }\n"}, {"dataset": "from", "exampleID": 4693, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 88, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Xomo/ActionBarSherlock-v4/tree/master/library/src/com/actionbarsherlock/internal/view/menu/ListMenuItemView.java", "rawCode": "  private LayoutInflater getInflater() {\n    if (mInflater == null) {\n      mInflater = LayoutInflater.from(mContext);\n    }\n    return mInflater;\n  }\n"}, {"dataset": "from", "exampleID": 4694, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 262, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup,boolean)", "layoutInflater.from(*)", "flater.inflate(int,ViewGroup,boolean)"], "useStart": [262, 354, 354], "useEnd": [348, 379, 439], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/denty/denty_code/tree/master/Foodlook/src/Myprogram/Com/Foodlook/Today.java", "rawCode": "  @Override\n  public void onCreate(Bundle savedInstanceState) {\n\n    super.onCreate(savedInstanceState);\n    HashMap[] mapofmenu = new HashMap[100];\n    HashMap[] mapoftoday = new HashMap[100];\n\n    // tabhost实现界面\n    final TabHost tablehost = getTabHost();\n    LayoutInflater.from(this).inflate(R.layout.today, tablehost.getTabContentView(), true);\n    LayoutInflater.from(this).inflate(R.layout.menu, tablehost.getTabContentView(), true);\n    tablehost.addTab(tablehost.newTabSpec(\"TAB1\").setIndicator(\"今日推荐\").setContent(R.id.taboftoday));\n    tablehost.addTab(tablehost.newTabSpec(\"TAB2\").setIndicator(\"菜单\").setContent(R.id.tabofmenu));\n    tablehost.setCurrentTab(Flag_of_tab); // 在使用设置当前table页的时候使用标志位记忆上一次画面\n    // Foodlook.Userdb.insert(\"Menu\", null, values);\n    // 获取用户名\n    Bundle togetdata = getIntent().getExtras();\n    username = togetdata.getString(\"username\");\n    final TextView textview_username_item_menu = (TextView) findViewById(R.id.Username_menu);\n    textview_username_item_menu.setText(username);\n    TextView textview_username_item_today = (TextView) findViewById(R.id.Username_today);\n    textview_username_item_today.setText(username);\n    // 创建一个对话框\n    final Builder askAdd_today = new AlertDialog.Builder(this);\n    final Builder askAdd_menu = new AlertDialog.Builder(this);\n    // LISTVIEW实现初始化\n    ListView listoftoday = (ListView) findViewById(R.id.todaylist);\n    ListView listofMenu = (ListView) findViewById(R.id.menulist);\n    // today适配器\n    ArrayList<HashMap<String, Object>> listviewoftoday = new ArrayList<HashMap<String, Object>>();\n    // today查询数据\n    Cursor cursor_today =\n        Foodlook.Userdb.query(\n            \"Today\", new String[] {\"pic\", \"name\", \"cost\"}, null, null, null, null, null);\n    while (cursor_today.moveToNext()) {\n      int pic = cursor_today.getInt(cursor_today.getColumnIndex(\"pic\"));\n      String name = cursor_today.getString(cursor_today.getColumnIndex(\"name\"));\n      String cost = cursor_today.getString(cursor_today.getColumnIndex(\"cost\"));\n      mapoftoday[l] = new HashMap<String, Object>();\n\n      mapoftoday[l].put(\"pic\", pic);\n      mapoftoday[l].put(\"name\", name);\n      mapoftoday[l].put(\"cost\", cost);\n      listviewoftoday.add(mapoftoday[l]);\n      l++;\n    }\n    SimpleAdapter simpleAdapteroftoday =\n        new SimpleAdapter(\n            this,\n            listviewoftoday,\n            R.layout.list,\n            new String[] {\"pic\", \"name\", \"cost\"},\n            new int[] {R.id.ImageView01, R.id.TextView_name, R.id.TextView_money});\n    // today实现listview\n    listoftoday.setAdapter(simpleAdapteroftoday);\n    final Button button_updata_today = (Button) findViewById(R.id.Button_ofUpdata_today);\n    // button_updata_today.setFocusableInTouchMode(true);\n    button_updata_today.setOnTouchListener(\n        new OnTouchListener() {\n\n          public boolean onTouch(View v, MotionEvent motionEvent) {\n            // TabHost tabHost_Buttonoftoday;\n            // String tabHost_Buttonoftodayindex;\n            // TODO Auto-generated method stub\n            if (MotionEvent.ACTION_DOWN == motionEvent.getAction()) {\n              // flag_tab=0;\n              try {\n                Socket socket_today = new Socket(\"192.168.1.104\", 65432);\n                BufferedReader br =\n                    new BufferedReader(new InputStreamReader(socket_today.getInputStream()));\n                String line = br.readLine();\n                soct_today_get = line;\n                br.close();\n                socket_today.close();\n              } catch (UnknownHostException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n              } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n              }\n              insertToday_web();\n              button_updata_today.setFocusableInTouchMode(false);\n              Intent intent_today = new Intent(Today.this, Today.class);\n              intent_today.putExtra(\"username\", username);\n              // tabHost_Buttonoftoday=getTabHost();\n              // tabHost_Buttonoftodayindex=\"TAB1\";\n              // tablehost.setCurrentTab(tablehost.getCurrentTab());\n              setFlagofTab(0);\n              startActivity(intent_today);\n              // add by\n              // sunshqi___________________________________________________________________refresh\n              // activity\n\n              return true;\n            } else {\n              return false;\n            }\n          }\n        });\n    /*list view 的 item 选定监听（today 模块）*/\n    listoftoday.setOnItemClickListener(\n        new OnItemClickListener() {\n\n          public void onItemClick(\n              final AdapterView<?> father_today, View arg1, final int position, long id) {\n            // TODO Auto-generated method stub\n            askAdd_today.setIcon(R.drawable.icon);\n            askAdd_today.setTitle(\"添加\");\n            askAdd_today.setMessage(\"添加到我的菜单\");\n            askAdd_today.setPositiveButton(\n                \"确定\",\n                new OnClickListener() {\n\n                  public void onClick(DialogInterface dialog, int which) {\n                    // TODO Auto-generated method stub\n                    Flag_of_Mylist = 1;\n                    if (Flag_of_Mylist == 1) {\n                      ListView listView = (ListView) father_today;\n                      HashMap<String, Object> map =\n                          (HashMap<String, Object>) listView.getItemAtPosition(position);\n                      String name = (String) map.get(\"name\");\n                      String cost = (String) map.get(\"cost\");\n                      ContentValues values = new ContentValues();\n                      values.put(\"username\", username);\n                      values.put(\"name\", name);\n                      values.put(\"cost\", cost);\n                      Foodlook.Userdb.insert(\"Mylist\", null, values);\n                      Flag_of_Mylist = 0;\n                    }\n                  }\n                });\n            askAdd_today.setNegativeButton(\n                \"取消\",\n                new OnClickListener() {\n\n                  public void onClick(DialogInterface dialog, int which) {\n                    // TODO Auto-generated method stub\n\n                  }\n                });\n\n            askAdd_today.create().show();\n            // start add my_list\n\n          }\n        });\n    // menu适配器\n    ArrayList<HashMap<String, Object>> listviewofmenu = new ArrayList<HashMap<String, Object>>();\n    // menu查询数据\n    Cursor cursor =\n        Foodlook.Userdb.query(\n            \"Menu\", new String[] {\"pic\", \"name\", \"cost\"}, null, null, null, null, null);\n    while (cursor.moveToNext()) {\n      int pic = cursor.getInt(cursor.getColumnIndex(\"pic\"));\n      String name = cursor.getString(cursor.getColumnIndex(\"name\"));\n      String cost = cursor.getString(cursor.getColumnIndex(\"cost\"));\n      mapofmenu[i] = new HashMap<String, Object>();\n\n      mapofmenu[i].put(\"pic\", pic);\n      mapofmenu[i].put(\"name\", name);\n      mapofmenu[i].put(\"cost\", cost);\n      listviewofmenu.add(mapofmenu[i]);\n      i++;\n    }\n    SimpleAdapter simpleAdapterofmenu =\n        new SimpleAdapter(\n            this,\n            listviewofmenu,\n            R.layout.list,\n            new String[] {\"pic\", \"name\", \"cost\"},\n            new int[] {R.id.ImageView01, R.id.TextView_name, R.id.TextView_money});\n    // menu实现listview\n    listofMenu.setAdapter(simpleAdapterofmenu);\n    // updata\n    final Button button_updata_Menu = (Button) findViewById(R.id.Button_ofUpdata);\n    button_updata_Menu.setFocusableInTouchMode(true);\n    button_updata_Menu.setOnTouchListener(\n        new OnTouchListener() {\n\n          public boolean onTouch(View v, MotionEvent motionEvent) {\n            // TODO Auto-generated method stub\n            if (MotionEvent.ACTION_DOWN == motionEvent.getAction()) {\n              // flag_tab=1;\n              insertMenu();\n              button_updata_Menu.setFocusableInTouchMode(false);\n              tablehost.setCurrentTab(\n                  1); /////////////////////////////////////////// add by solution the tab scream\n              Intent intent_menu = new Intent(Today.this, Today.class);\n              intent_menu.putExtra(\"username\", username);\n              // Toast.makeText(getApplication(),\n              // \"is\"+tablehost.getCurrentTab()+tablehost.getCurrentTabTag(),Toast.LENGTH_SHORT).show();\n              setFlagofTab(1);\n              startActivity(intent_menu);\n              // add bu sunshiqi _________________________________________________________________to\n              // refresh the activity\n              // onResume();\n\n              return true;\n            } else {\n              return false;\n            }\n          }\n        });\n    /*list view 选定模块的监听设置（Menu模块）*/\n    listofMenu.setOnItemClickListener(\n        new OnItemClickListener() {\n\n          public void onItemClick(\n              final AdapterView<?> father, View arg1, final int position, long id) {\n            // TODO Auto-generated method stub\n            askAdd_menu.setIcon(R.drawable.icon);\n            askAdd_menu.setTitle(\"添加\");\n            askAdd_menu.setMessage(\"添加到我的菜单\");\n            askAdd_menu.setPositiveButton(\n                \"确定\",\n                new OnClickListener() {\n\n                  public void onClick(DialogInterface dialog, int which) {\n                    // TODO Auto-generated method stub\n                    Flag_of_Mylist = 1;\n                    if (Flag_of_Mylist == 1) {\n                      ListView listView = (ListView) father;\n                      HashMap<String, Object> map =\n                          (HashMap<String, Object>) listView.getItemAtPosition(position);\n                      String name = (String) map.get(\"name\");\n                      String cost = (String) map.get(\"cost\");\n                      ContentValues values = new ContentValues();\n                      values.put(\"username\", username);\n                      values.put(\"name\", name);\n                      values.put(\"cost\", cost);\n                      Foodlook.Userdb.insert(\"Mylist\", null, values);\n                      Flag_of_Mylist = 0;\n                    }\n                  }\n                });\n            askAdd_menu.setNegativeButton(\n                \"取消\",\n                new OnClickListener() {\n\n                  public void onClick(DialogInterface dialog, int which) {\n                    // TODO Auto-generated method stub\n                    Flag_of_Mylist = 0;\n                  }\n                });\n\n            askAdd_menu.create().show();\n            // start add my_list\n\n          }\n        });\n    /*z*/\n    Button button_info_Mylist = (Button) findViewById(R.id.Button_info_mylist);\n    button_info_Mylist.setOnTouchListener(\n        new OnTouchListener() {\n\n          public boolean onTouch(View v, MotionEvent event) {\n            // TODO Auto-generated method stub\n            if (MotionEvent.ACTION_DOWN == event.getAction()) {\n              Intent intent = new Intent(Today.this, Mylist.class);\n              intent.putExtra(\"username\", username);\n              startActivity(intent);\n              return true;\n\n            } else {\n              return false;\n            }\n          }\n        });\n  }\n"}, {"dataset": "from", "exampleID": 4695, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 132, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)"], "useStart": [243, 455, 584], "useEnd": [287, 504, 635], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuzhupc/Sourcing/tree/master/src/Sourcing_Android/src/com/wuzhupc/Sourcing/adapter/UserInfoAdapter.java", "rawCode": "  /**\n   * ��ȡ֪ͨ����View\n   *\n   * @param vo\n   * @return\n   */\n  private View getNotifierListItem(NotifierVO vo) {\n    View view = LayoutInflater.from(mContext).inflate(R.layout.listitem_notifier, null);\n\n    TextView content_tv = (TextView) view.findViewById(R.id.listitem_notifier_tv);\n    content_tv.setText(Html.fromHtml(vo.getNotifiercontent()));\n    content_tv.setMovementMethod(LinkMovementMethod.getInstance());\n    TextView time_tv = (TextView) view.findViewById(R.id.listitem_notifier_time_tv);\n    time_tv.setText(vo.getPublishtime());\n    TextView status_tv = (TextView) view.findViewById(R.id.listitem_notifier_status_tv);\n    status_tv.setText(vo.getPublisher());\n    return view;\n  }\n"}, {"dataset": "from", "exampleID": 4696, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ScootrNova/ClassyGames/tree/master/projects/android/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4697, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SuikoHero38/CraveParty/tree/master/library/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  public void initForMode(final ActionMode mode) {\n    if (mClose == null) {\n      LayoutInflater inflater = LayoutInflater.from(mContext);\n      mClose =\n          (NineLinearLayout) inflater.inflate(R.layout.abs__action_mode_close_item, this, false);\n      addView(mClose);\n    } else if (mClose.getParent() == null) {\n      addView(mClose);\n    }\n\n    View closeButton = mClose.findViewById(R.id.abs__action_mode_close_button);\n    closeButton.setOnClickListener(\n        new OnClickListener() {\n          public void onClick(View v) {\n            mode.finish();\n          }\n        });\n\n    final MenuBuilder menu = (MenuBuilder) mode.getMenu();\n    if (mActionMenuPresenter != null) {\n      mActionMenuPresenter.dismissPopupMenus();\n    }\n    mActionMenuPresenter = new ActionMenuPresenter(mContext);\n    mActionMenuPresenter.setReserveOverflow(true);\n\n    final LayoutParams layoutParams =\n        new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);\n    if (!mSplitActionBar) {\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(null);\n      addView(mMenuView, layoutParams);\n    } else {\n      // Allow full screen width in split mode.\n      mActionMenuPresenter.setWidthLimit(\n          getContext().getResources().getDisplayMetrics().widthPixels, true);\n      // No limit to the item count; use whatever will fit.\n      mActionMenuPresenter.setItemLimit(Integer.MAX_VALUE);\n      // Span the whole width\n      layoutParams.width = LayoutParams.MATCH_PARENT;\n      layoutParams.height = mContentHeight;\n      menu.addMenuPresenter(mActionMenuPresenter);\n      mMenuView = (ActionMenuView) mActionMenuPresenter.getMenuView(this);\n      mMenuView.setBackgroundDrawable(mSplitBackground);\n      mSplitView.addView(mMenuView, layoutParams);\n    }\n\n    mAnimateInOnLayout = true;\n  }\n"}, {"dataset": "from", "exampleID": 4698, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 178, "focalAPIEnd": 220, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ActionMode.setCustomView(flater)", "flater.findViewById(*)"], "useStart": [316, 380], "useEnd": [337, 420], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_mms/tree/master/src/com/android/mms/ui/ConversationList.java", "rawCode": "    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n      if (mMultiSelectActionBarView == null) {\n        ViewGroup v =\n            (ViewGroup)\n                LayoutInflater.from(ConversationList.this)\n                    .inflate(R.layout.conversation_list_multi_select_actionbar, null);\n        mode.setCustomView(v);\n\n        mSelectedConvCount = (TextView) v.findViewById(R.id.selected_conv_count);\n      }\n      return true;\n    }\n"}, {"dataset": "from", "exampleID": 4699, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 123, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.inflate(int,ViewGroup,boolean)"], "useStart": [171], "useEnd": [234], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Gris87/EGE/tree/master/src/com/gris/ege/lists/UserChooseListAdapter.java", "rawCode": "  @Override\n  public View newView(Context context, Cursor cursor, ViewGroup parent) {\n    LayoutInflater aLayoutInflater = LayoutInflater.from(context);\n\n    View aView = aLayoutInflater.inflate(R.layout.user_list_item, parent, false);\n\n    ViewHolder aHolder = new ViewHolder();\n    aHolder.mUserName = (TextView) aView.findViewById(R.id.userNameTextView);\n    aView.setTag(aHolder);\n\n    return aView;\n  }\n"}, {"dataset": "from", "exampleID": 4700, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "flater = layoutInflater.from(context)", "focalAPIStart": 121, "focalAPIEnd": 150, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["flater.findViewById(*)", "flater.findViewById(*)", "flater.findViewById(*)"], "useStart": [228, 356, 488], "useEnd": [275, 406, 536], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuzhupc/Sourcing/tree/master/src/Sourcing_Android/src/com/wuzhupc/Sourcing/adapter/ListBaseAdapter.java", "rawCode": "  /**\n   * 获取项目\n   *\n   * @param vo\n   * @return\n   */\n  private View getProjectListItem(ProjectVO vo) {\n    View view = LayoutInflater.from(mContext).inflate(R.layout.listitem_project, null);\n    TextView title_tv = (TextView) view.findViewById(R.id.listitem_projectname_tv);\n    title_tv.setText(vo.getProjectname());\n    TextView status_tv = (TextView) view.findViewById(R.id.listitem_project_status_tv);\n    status_tv.setText(vo.getProjectstatus());\n    TextView time_tv = (TextView) view.findViewById(R.id.listitem_project_time_tv);\n    time_tv.setText(vo.getPublishtime());\n    return view;\n  }\n"}]