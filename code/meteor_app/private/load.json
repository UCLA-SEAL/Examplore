[{"dataset": "load", "exampleID": 4501, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [432], "initializationEnd": [479], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new KeyStoreException(*)"], "tryExpressionStart": 697, "tryExpressionEnd": 701, "tryBlockStart": 697, "tryBlockEnd": 910, "catchExpressionStart": 750, "catchExpressionEnd": 772, "catchBlockStart": 750, "catchBlockEnd": 825, "exceptionHandlingCallStart": [790], "exceptionHandlingCallEnd": [814], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 713, "focalAPIEnd": 738, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.load(InputStream,char[])"], "useStart": [1164], "useEnd": [1227], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wsot/platform_libcore/tree/master/luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerFactoryImpl.java", "rawCode": "  /** @see javax.net.ssl.KeyManagerFactorySpi#engineInit(KeyStore ks, char[] password) */\n  @Override\n  public void engineInit(KeyStore ks, char[] password)\n      throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {\n    if (ks != null) {\n      keyStore = ks;\n      if (password != null) {\n        pwd = password.clone();\n      } else {\n        pwd = EmptyArray.CHAR;\n      }\n    } else {\n      keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n      String keyStoreName = System.getProperty(\"javax.net.ssl.keyStore\");\n      String keyStorePwd = null;\n      if (keyStoreName == null || keyStoreName.equalsIgnoreCase(\"NONE\") || keyStoreName.isEmpty()) {\n        try {\n          keyStore.load(null, null);\n        } catch (IOException e) {\n          throw new KeyStoreException(e);\n        } catch (CertificateException e) {\n          throw new KeyStoreException(e);\n        }\n      } else {\n        keyStorePwd = System.getProperty(\"javax.net.ssl.keyStorePassword\");\n        if (keyStorePwd == null) {\n          pwd = EmptyArray.CHAR;\n        } else {\n          pwd = keyStorePwd.toCharArray();\n        }\n        try {\n          keyStore.load(new FileInputStream(new File(keyStoreName)), pwd);\n        } catch (FileNotFoundException e) {\n          throw new KeyStoreException(e);\n        } catch (IOException e) {\n          throw new KeyStoreException(e);\n        } catch (CertificateException e) {\n          throw new KeyStoreException(e);\n        }\n      }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4502, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [99], "initializationEnd": [146], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 152, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,X509CertSelector)", "new PKIXParameters(keyStore)"], "useStart": [462, 965, 1310], "useEnd": [531, 1019, 1338], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/test/java/tests/targets/security/cert/CertPathValidatorTestPKIX.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyStore.load(null, null);\n\n    CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\n\n    X509Certificate selfSignedcertificate =\n        (X509Certificate)\n            certificateFactory.generateCertificate(\n                new ByteArrayInputStream(selfSignedCert.getBytes()));\n\n    keyStore.setCertificateEntry(\"selfSignedCert\", selfSignedcertificate);\n\n    X509CertSelector targetConstraints = new X509CertSelector();\n    targetConstraints.setCertificate(selfSignedcertificate);\n\n    List<Certificate> certList = new ArrayList<Certificate>();\n    certList.add(selfSignedcertificate);\n    CertStoreParameters storeParams = new CollectionCertStoreParameters(certList);\n\n    CertStore certStore = CertStore.getInstance(\"Collection\", storeParams);\n\n    PKIXBuilderParameters parameters = new PKIXBuilderParameters(keyStore, targetConstraints);\n    parameters.addCertStore(certStore);\n    parameters.setRevocationEnabled(false);\n\n    CertPathBuilder pathBuilder = CertPathBuilder.getInstance(\"PKIX\");\n\n    CertPathBuilderResult builderResult = pathBuilder.build(parameters);\n\n    certPath = builderResult.getCertPath();\n\n    params = new PKIXParameters(keyStore);\n    params.setRevocationEnabled(false);\n  }\n"}, {"dataset": "load", "exampleID": 4503, "initialization": ["KeyStore keyStore = getInstance(*)", "InputStream stream = new ByteArrayInputStream(byte[])"], "initializationStart": [290, 360], "initializationEnd": [337, 394], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 400, "focalAPIEnd": 425, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.isCertificateEntry(String)", "keyStore.isKeyEntry(String)", "keyStore.isCertificateEntry(String)", "keyStore.load(InputStream,char[])", "keyStore.isCertificateEntry(String)", "keyStore.isKeyEntry(String)", "keyStore.isCertificateEntry(String)"], "useStart": [489, 571, 648, 831, 917, 999, 1076], "useEnd": [525, 599, 684, 853, 953, 1027, 1112], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InsomniaAOSP/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#load(java.io.InputStream, char[]) */\n  public void test_loadLjava_io_InputStream$C() throws Exception {\n    // Test for method void java.security.KeyStore.load(java.io.InputStream,\n    // char[])\n    byte[] keyStore = creatCertificate();\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    InputStream in = new ByteArrayInputStream(keyStore);\n    keyTest.load(in, pssWord);\n    in.close();\n    assertTrue(\"alias1 is not a certificate\", keyTest.isCertificateEntry(\"alias1\"));\n    assertTrue(\"alias2 is not a keyEntry\", keyTest.isKeyEntry(\"alias2\"));\n    assertTrue(\"alias3 is not a certificate\", keyTest.isCertificateEntry(\"alias3\"));\n\n    // test with null password\n    keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    in = new ByteArrayInputStream(keyStore);\n    keyTest.load(in, null);\n    in.close();\n    assertTrue(\"alias1 is not a certificate\", keyTest.isCertificateEntry(\"alias1\"));\n    assertTrue(\"alias2 is not a keyEntry\", keyTest.isKeyEntry(\"alias2\"));\n    assertTrue(\"alias3 is not a certificate\", keyTest.isCertificateEntry(\"alias3\"));\n  }\n"}, {"dataset": "load", "exampleID": 4504, "initialization": ["KeyStore keyStore = getInstance(String,String)", "KeyStore keyStore = getInstance(String,String)", "KeyStore keyStore = getInstance(String,String)"], "initializationStart": [406, 4169, 6321], "initializationEnd": [442, 4205, 6357], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.load(ByteArrayInputStream,char[])", "keyStore.aliases()", "keyStore.getCertificate(String)", "keyStore.getKey(String,char[])", "keyStore.getCertificateChain(String)", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.getKey(String,char[])", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.getKey(String,char[])", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.getKey(String,char[])", "keyStore.deleteEntry(String)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.load(ByteArrayInputStream,String)"], "configurationStart": [517, 567, 1059, 1251, 1406, 2225, 2277, 2709, 2761, 3442, 3494, 3813, 3963, 4260], "configurationEnd": [543, 582, 1082, 1276, 1438, 2251, 2302, 2735, 2786, 3468, 3519, 3837, 4007, 4300], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 6364, "focalAPIEnd": 6386, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,String,Certificate[])", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.aliases()", "keyStore.getCertificateChain(String)", "keyStore.getCertificateChain(String)", "keyStore.getCertificateChain(String)", "keyStore.getCertificate(String)", "keyStore.getCertificate(String)", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.aliases()", "keyStore.getCertificateChain(String)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.load(InputStream,char[])", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.load(ByteArrayInputStream,String)"], "useStart": [6393, 7291, 7341, 7533, 7780, 7821, 7862, 7898, 8078, 8125, 8317, 8543, 9692, 9721, 10812], "useEnd": [6446, 7329, 7356, 7565, 7814, 7855, 7891, 7927, 8113, 8140, 8349, 8583, 9714, 9761, 10848], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sake/bouncycastle-java/tree/master/test/src/org/bouncycastle/jce/provider/test/PKCS12StoreTest.java", "rawCode": "  public void testPKCS12Store() throws Exception {\n    BigInteger mod =\n        new BigInteger(\n            \"bb1be8074e4787a8d77967f1575ef72dd7582f9b3347724413c021beafad8f32dba5168e280cbf284df722283dad2fd4abc750e3d6487c2942064e2d8d80641aa5866d1f6f1f83eec26b9b46fecb3b1c9856a303148a5cc899c642fb16f3d9d72f52526c751dc81622c420c82e2cfda70fe8d13f16cc7d6a613a5b2a2b5894d1\",\n            16);\n    KeyStore store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    ByteArrayInputStream stream = new ByteArrayInputStream(pkcs12);\n\n    store.load(stream, passwd);\n\n    Enumeration en = store.aliases();\n    String pName = null;\n\n    while (en.hasMoreElements()) {\n      String n = (String) en.nextElement();\n      if (store.isKeyEntry(n)) {\n        pName = n;\n      } else {\n        // the store's we're using here are consistent so this test will pass - it's actually\n        // possible for this test to fail in other circumstances as PKCS#12 allows certificates\n        // to be stored multiple times under different aliases.\n        X509Certificate cert = (X509Certificate) store.getCertificate(n);\n\n        if (!store.getCertificateAlias(cert).equals(n)) {\n          fail(\"certificate alias check fails\");\n        }\n      }\n    }\n\n    PrivateKey key = (PrivateKey) store.getKey(pName, null);\n\n    if (!((RSAPrivateKey) key).getModulus().equals(mod)) {\n      fail(\"Modulus doesn't match.\");\n    }\n\n    Certificate[] ch = store.getCertificateChain(pName);\n\n    if (ch.length != 3) {\n      fail(\"chain was wrong length\");\n    }\n\n    if (!((X509Certificate) ch[0])\n        .getSerialNumber()\n        .equals(new BigInteger(\"96153094170511488342715101755496684211\"))) {\n      fail(\"chain[0] wrong certificate.\");\n    }\n\n    if (!((X509Certificate) ch[1])\n        .getSerialNumber()\n        .equals(new BigInteger(\"279751514312356623147411505294772931957\"))) {\n      fail(\"chain[1] wrong certificate.\");\n    }\n\n    if (!((X509Certificate) ch[2]).getSerialNumber().equals(new BigInteger(\"11341398017\"))) {\n      fail(\"chain[2] wrong certificate.\");\n    }\n\n    //\n    // save test\n    //\n    ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n\n    store.store(bOut, passwd);\n\n    stream = new ByteArrayInputStream(bOut.toByteArray());\n\n    store.load(stream, passwd);\n\n    key = (PrivateKey) store.getKey(pName, null);\n\n    if (!((RSAPrivateKey) key).getModulus().equals(mod)) {\n      fail(\"Modulus doesn't match.\");\n    }\n\n    //\n    // save test using LoadStoreParameter\n    //\n    bOut = new ByteArrayOutputStream();\n\n    PKCS12StoreParameter storeParam = new PKCS12StoreParameter(bOut, passwd, true);\n\n    store.store(storeParam);\n\n    byte[] data = bOut.toByteArray();\n\n    stream = new ByteArrayInputStream(data);\n    store.load(stream, passwd);\n\n    key = (PrivateKey) store.getKey(pName, null);\n\n    if (!((RSAPrivateKey) key).getModulus().equals(mod)) {\n      fail(\"Modulus doesn't match.\");\n    }\n\n    ASN1Encodable outer = new ASN1StreamParser(data).readObject();\n    if (!(outer instanceof DERSequenceParser)) {\n      fail(\"Failed DER encoding test.\");\n    }\n\n    //\n    // save test using LoadStoreParameter\n    //\n    bOut = new ByteArrayOutputStream();\n\n    JDKPKCS12StoreParameter oldParam = new JDKPKCS12StoreParameter();\n    oldParam.setOutputStream(bOut);\n    oldParam.setPassword(passwd);\n    oldParam.setUseDEREncoding(true);\n\n    store.store(oldParam);\n\n    data = bOut.toByteArray();\n\n    stream = new ByteArrayInputStream(data);\n    store.load(stream, passwd);\n\n    key = (PrivateKey) store.getKey(pName, null);\n\n    if (!((RSAPrivateKey) key).getModulus().equals(mod)) {\n      fail(\"Modulus doesn't match.\");\n    }\n\n    outer = new ASN1StreamParser(data).readObject();\n    if (!(outer instanceof DERSequenceParser)) {\n      fail(\"Failed DER encoding test.\");\n    }\n\n    //\n    // delete test\n    //\n    store.deleteEntry(pName);\n\n    if (store.getKey(pName, null) != null) {\n      fail(\"Failed deletion test.\");\n    }\n\n    // cert chain test\n    //\n    store.setCertificateEntry(\"testCert\", ch[2]);\n\n    if (store.getCertificateChain(\"testCert\") != null) {\n      fail(\"Failed null chain test.\");\n    }\n\n    //\n    // UTF 8 single cert test\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(certUTF);\n\n    store.load(stream, \"user\".toCharArray());\n\n    if (store.getCertificate(\"37\") == null) {\n      fail(\"Failed to find UTF cert.\");\n    }\n\n    //\n    // try for a self generated certificate\n    //\n    RSAPublicKeySpec pubKeySpec =\n        new RSAPublicKeySpec(\n            new BigInteger(\n                \"b4a7e46170574f16a97082b22be58b6a2a629798419be12872a4bdba626cfae9900f76abfb12139dce5de56564fab2b6543165a040c606887420e33d91ed7ed7\",\n                16),\n            new BigInteger(\"11\", 16));\n\n    RSAPrivateCrtKeySpec privKeySpec =\n        new RSAPrivateCrtKeySpec(\n            new BigInteger(\n                \"b4a7e46170574f16a97082b22be58b6a2a629798419be12872a4bdba626cfae9900f76abfb12139dce5de56564fab2b6543165a040c606887420e33d91ed7ed7\",\n                16),\n            new BigInteger(\"11\", 16),\n            new BigInteger(\n                \"9f66f6b05410cd503b2709e88115d55daced94d1a34d4e32bf824d0dde6028ae79c5f07b580f5dce240d7111f7ddb130a7945cd7d957d1920994da389f490c89\",\n                16),\n            new BigInteger(\"c0a0758cdf14256f78d4708c86becdead1b50ad4ad6c5c703e2168fbf37884cb\", 16),\n            new BigInteger(\"f01734d7960ea60070f1b06f2bb81bfac48ff192ae18451d5e56c734a5aab8a5\", 16),\n            new BigInteger(\"b54bb9edff22051d9ee60f9351a48591b6500a319429c069a3e335a1d6171391\", 16),\n            new BigInteger(\"d3d83daf2a0cecd3367ae6f8ae1aeb82e9ac2f816c6fc483533d8297dd7884cd\", 16),\n            new BigInteger(\"b8f52fc6f38593dabb661d3f50f8897f8106eee68b1bce78a95b132b4e5b5d19\", 16));\n\n    //\n    // set up the keys\n    //\n    PrivateKey privKey = null;\n    PublicKey pubKey = null;\n\n    try {\n      KeyFactory fact = KeyFactory.getInstance(\"RSA\", \"BC\");\n\n      privKey = fact.generatePrivate(privKeySpec);\n      pubKey = fact.generatePublic(pubKeySpec);\n    } catch (Exception e) {\n      fail(\"error setting up keys - \" + e.toString());\n    }\n\n    Certificate[] chain = new Certificate[1];\n\n    chain[0] = createCert(pubKey, privKey, \"issuer@bouncycastle.org\", \"subject@bouncycastle.org\");\n\n    testSupportedTypes(privKey, chain);\n\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n\n    store.load(null, null);\n\n    store.setKeyEntry(\"privateKey\", privKey, null, chain);\n\n    if (!store.containsAlias(\"privateKey\") || !store.containsAlias(\"PRIVATEKEY\")) {\n      fail(\"couldn't find alias privateKey\");\n    }\n\n    if (store.isCertificateEntry(\"privateKey\")) {\n      fail(\"key identified as certificate entry\");\n    }\n\n    if (!store.isKeyEntry(\"privateKey\") || !store.isKeyEntry(\"PRIVATEKEY\")) {\n      fail(\"key not identified as key entry\");\n    }\n\n    if (!\"privateKey\".equals(store.getCertificateAlias(chain[0]))) {\n      fail(\"Did not return alias for key certificate privateKey\");\n    }\n\n    ByteArrayOutputStream store1Stream = new ByteArrayOutputStream();\n\n    store.store(store1Stream, passwd);\n\n    testNoExtraLocalKeyID(store1Stream.toByteArray());\n\n    //\n    // no friendly name test\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(pkcs12noFriendly);\n\n    store.load(stream, noFriendlyPassword);\n\n    en = store.aliases();\n    pName = null;\n\n    while (en.hasMoreElements()) {\n      String n = (String) en.nextElement();\n\n      if (store.isKeyEntry(n)) {\n        pName = n;\n      }\n    }\n\n    ch = store.getCertificateChain(pName);\n\n    for (int i = 0; i != ch.length; i++) {\n      // System.out.println(ch[i]);\n    }\n\n    if (ch.length != 1) {\n      fail(\"no cert found in pkcs12noFriendly\");\n    }\n\n    //\n    // failure tests\n    //\n    ch = store.getCertificateChain(\"dummy\");\n\n    store.getCertificateChain(\"DUMMY\");\n\n    store.getCertificate(\"dummy\");\n\n    store.getCertificate(\"DUMMY\");\n\n    //\n    // storage test\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(pkcs12StorageIssue);\n\n    store.load(stream, storagePassword);\n\n    en = store.aliases();\n    pName = null;\n\n    while (en.hasMoreElements()) {\n      String n = (String) en.nextElement();\n\n      if (store.isKeyEntry(n)) {\n        pName = n;\n      }\n    }\n\n    ch = store.getCertificateChain(pName);\n    if (ch.length != 2) {\n      fail(\"Certificate chain wrong length\");\n    }\n\n    store.store(new ByteArrayOutputStream(), storagePassword);\n\n    //\n    // basic certificate check\n    //\n    store.setCertificateEntry(\"cert\", ch[1]);\n\n    if (!store.containsAlias(\"cert\") || !store.containsAlias(\"CERT\")) {\n      fail(\"couldn't find alias cert\");\n    }\n\n    if (!store.isCertificateEntry(\"cert\") || !store.isCertificateEntry(\"CERT\")) {\n      fail(\"cert not identified as certificate entry\");\n    }\n\n    if (store.isKeyEntry(\"cert\") || store.isKeyEntry(\"CERT\")) {\n      fail(\"cert identified as key entry\");\n    }\n\n    if (!store.entryInstanceOf(\"cert\", KeyStore.TrustedCertificateEntry.class)) {\n      fail(\"cert not identified as TrustedCertificateEntry\");\n    }\n\n    if (!store.entryInstanceOf(\"CERT\", KeyStore.TrustedCertificateEntry.class)) {\n      fail(\"CERT not identified as TrustedCertificateEntry\");\n    }\n\n    if (store.entryInstanceOf(\"cert\", KeyStore.PrivateKeyEntry.class)) {\n      fail(\"cert identified as key entry via PrivateKeyEntry\");\n    }\n\n    if (!\"cert\".equals(store.getCertificateAlias(ch[1]))) {\n      fail(\"Did not return alias for certificate entry\");\n    }\n\n    //\n    // test restoring of a certificate with private key originally as a ca certificate\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n\n    store.load(null, null);\n\n    store.setCertificateEntry(\"cert\", ch[0]);\n\n    if (!store.containsAlias(\"cert\") || !store.containsAlias(\"CERT\")) {\n      fail(\"restore: couldn't find alias cert\");\n    }\n\n    if (!store.isCertificateEntry(\"cert\") || !store.isCertificateEntry(\"CERT\")) {\n      fail(\"restore: cert not identified as certificate entry\");\n    }\n\n    if (store.isKeyEntry(\"cert\") || store.isKeyEntry(\"CERT\")) {\n      fail(\"restore: cert identified as key entry\");\n    }\n\n    if (store.entryInstanceOf(\"cert\", KeyStore.PrivateKeyEntry.class)) {\n      fail(\"restore: cert identified as key entry via PrivateKeyEntry\");\n    }\n\n    if (store.entryInstanceOf(\"CERT\", KeyStore.PrivateKeyEntry.class)) {\n      fail(\"restore: cert identified as key entry via PrivateKeyEntry\");\n    }\n\n    if (!store.entryInstanceOf(\"cert\", KeyStore.TrustedCertificateEntry.class)) {\n      fail(\"restore: cert not identified as TrustedCertificateEntry\");\n    }\n\n    //\n    // test of reading incorrect zero-length encoding\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(pkcs12nopass);\n\n    store.load(stream, \"\".toCharArray());\n  }\n"}, {"dataset": "load", "exampleID": 4505, "initialization": ["KeyStore keyStore = getInstance(*)", "KeyStore keyStore = getInstance(*)"], "initializationStart": [770, 1249], "initializationEnd": [817, 1296], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1533, "focalAPIEnd": 1552, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["newInstance(keyStore,*)", "newInstance(keyStore,*)", "assertEquals(String,keyStore,*)"], "useStart": [1566, 1692, 1826], "useEnd": [1605, 1731, 1883], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStoreBuilderTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"newInstance\",\n    args = {java.security.KeyStore.class, java.security.KeyStore.ProtectionParameter.class}\n  )\n  public void testNewInstanceKeyStoreProtectionParameter()\n      throws KeyStoreException, NoSuchAlgorithmException, IOException, CertificateException {\n    // exceptions verification\n\n    try {\n      KeyStore.Builder.newInstance(null, null);\n      fail(\"NullPointerException must be thrown\");\n    } catch (NullPointerException e) {\n      // expected\n    }\n\n    try {\n      KeyStore.Builder.newInstance(null, protPass);\n      fail(\"NullPointerException must be thrown\");\n    } catch (NullPointerException e) {\n      // expected\n    }\n\n    KeyStore.Builder ksB;\n\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    try {\n      KeyStore.Builder.newInstance(ks, null);\n      fail(\"NullPointerException must be thrown when ProtectionParameter is null\");\n    } catch (NullPointerException e) {\n      // expected\n    }\n\n    KeyStore.PasswordProtection protPass1 = new KeyStore.PasswordProtection(pass);\n    KeyStore.ProtectionParameter[] pp = {protPass, protPass1, callbackHand, myProtParam};\n    for (int i = 0; i < pp.length; i++) {\n      ks = KeyStore.getInstance(KeyStore.getDefaultType());\n      try {\n        KeyStore.Builder.newInstance(ks, pp[i]);\n        fail(\"IllegalArgumentException must be thrown because KeyStore was not initialized\");\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n\n      ks.load(null, pass);\n      ksB = KeyStore.Builder.newInstance(ks, pp[i]);\n\n      assertEquals(\"Incorrect KeyStore\", ksB.getKeyStore().size(), 0);\n\n      ksB = KeyStore.Builder.newInstance(ks, pp[i]);\n\n      // verification getKeyStore() and getProtectionParameter(String\n      // alias)\n      assertEquals(\"Incorrect KeyStore\", ks, ksB.getKeyStore());\n\n      try {\n        ksB.getProtectionParameter(null);\n        fail(\"NullPointerException must be thrown\");\n      } catch (NullPointerException e) {\n      }\n      try {\n        assertEquals(ksB.getProtectionParameter(\"aaa\"), pp[i]);\n      } catch (KeyStoreException e) {\n        fail(\"Unexpected: \" + e.toString() + \" was thrown\");\n      }\n\n      try {\n        assertEquals(ksB.getProtectionParameter(\"Bad alias\"), pp[i]);\n      } catch (KeyStoreException e) {\n        // KeyStoreException might be thrown because there is no entry\n        // with such alias\n      }\n\n      try {\n        assertEquals(ksB.getProtectionParameter(\"\"), pp[i]);\n      } catch (KeyStoreException e) {\n        // KeyStoreException might be thrown because there is no entry\n        // with such alias\n      }\n\n      KeyStore.ProtectionParameter pPar = ksB.getProtectionParameter(\"aaa\");\n\n      switch (i) {\n        case 0:\n          assertTrue(pPar instanceof KeyStore.PasswordProtection);\n          break;\n        case 1:\n          assertTrue(pPar instanceof KeyStore.PasswordProtection);\n          break;\n        case 2:\n          assertTrue(pPar instanceof KeyStore.CallbackHandlerProtection);\n          break;\n        case 3:\n          assertTrue(pPar instanceof MyProtectionParameter);\n          break;\n        default:\n          fail(\"Incorrect protection parameter\");\n      }\n      assertEquals(pPar, pp[i]);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4506, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [514], "initializationEnd": [541], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 547, "focalAPIEnd": 566, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,Certificate)", "keyStore.setKeyEntry(String,RSAPrivateKey,char[],Certificate[])", "TrustManagerFactory.init(keyStore)", "KeyManagerFactory.init(keyStore,char[])"], "useStart": [603, 1297, 1460, 1636], "useEnd": [658, 1350, 1472, 1660], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/sun/security/ssl/sun/net/www/protocol/https/HttpsURLConnection/DNSIdentities.java", "rawCode": "  private static SSLContext getSSLContext(\n      String trusedCertStr,\n      String keyCertStr,\n      byte[] modulus,\n      byte[] privateExponent,\n      char[] passphrase)\n      throws Exception {\n\n    // generate certificate from cert string\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n\n    ByteArrayInputStream is = new ByteArrayInputStream(trusedCertStr.getBytes());\n    Certificate trusedCert = cf.generateCertificate(is);\n    is.close();\n\n    // create a key store\n    KeyStore ks = KeyStore.getInstance(\"JKS\");\n    ks.load(null, null);\n\n    // import the trused cert\n    ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n\n    if (keyCertStr != null) {\n      // generate the private key.\n      RSAPrivateKeySpec priKeySpec =\n          new RSAPrivateKeySpec(new BigInteger(modulus), new BigInteger(privateExponent));\n      KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n      RSAPrivateKey priKey = (RSAPrivateKey) kf.generatePrivate(priKeySpec);\n\n      // generate certificate chain\n      is = new ByteArrayInputStream(keyCertStr.getBytes());\n      Certificate keyCert = cf.generateCertificate(is);\n      is.close();\n\n      Certificate[] chain = new Certificate[2];\n      chain[0] = keyCert;\n      chain[1] = trusedCert;\n\n      // import the key entry.\n      ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n    }\n\n    // create SSL context\n    TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n    tmf.init(ks);\n\n    SSLContext ctx = SSLContext.getInstance(\"TLS\");\n\n    if (keyCertStr != null) {\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ks, passphrase);\n\n      ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n    } else {\n      ctx.init(null, tmf.getTrustManagers(), null);\n    }\n\n    return ctx;\n  }\n"}, {"dataset": "load", "exampleID": 4507, "initialization": ["KeyStore keyStore = getInstance(*)", "InputStream stream = new ByteArrayInputStream(byte[])"], "initializationStart": [290, 360], "initializationEnd": [337, 394], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 400, "focalAPIEnd": 425, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.isCertificateEntry(String)", "keyStore.isKeyEntry(String)", "keyStore.isCertificateEntry(String)", "keyStore.load(InputStream,char[])", "keyStore.isCertificateEntry(String)", "keyStore.isKeyEntry(String)", "keyStore.isCertificateEntry(String)"], "useStart": [489, 571, 648, 831, 917, 999, 1076], "useEnd": [525, 599, 684, 853, 953, 1027, 1112], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#load(java.io.InputStream, char[]) */\n  public void test_loadLjava_io_InputStream$C() throws Exception {\n    // Test for method void java.security.KeyStore.load(java.io.InputStream,\n    // char[])\n    byte[] keyStore = creatCertificate();\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    InputStream in = new ByteArrayInputStream(keyStore);\n    keyTest.load(in, pssWord);\n    in.close();\n    assertTrue(\"alias1 is not a certificate\", keyTest.isCertificateEntry(\"alias1\"));\n    assertTrue(\"alias2 is not a keyEntry\", keyTest.isKeyEntry(\"alias2\"));\n    assertTrue(\"alias3 is not a certificate\", keyTest.isCertificateEntry(\"alias3\"));\n\n    // test with null password\n    keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    in = new ByteArrayInputStream(keyStore);\n    keyTest.load(in, null);\n    in.close();\n    assertTrue(\"alias1 is not a certificate\", keyTest.isCertificateEntry(\"alias1\"));\n    assertTrue(\"alias2 is not a keyEntry\", keyTest.isKeyEntry(\"alias2\"));\n    assertTrue(\"alias3 is not a certificate\", keyTest.isCertificateEntry(\"alias3\"));\n  }\n"}, {"dataset": "load", "exampleID": 4508, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [119], "initializationEnd": [166], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 172, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,*)"], "useStart": [638, 690, 742, 821], "useEnd": [684, 736, 788, 879], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SVMP/android_libcore/tree/master/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /** Test for <code>toString()</code> */\n  public final void testToString() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    ByteArrayInputStream certArray = new ByteArrayInputStream(certificate.getBytes());\n\n    ByteArrayInputStream certArray2 = new ByteArrayInputStream(certificate2.getBytes());\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    PKIXBuilderParameters p = new PKIXBuilderParameters(keyTest, new X509CertSelector());\n    assertNotNull(p.toString());\n  }\n"}, {"dataset": "load", "exampleID": 4509, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 72, "focalAPIEnd": 98, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,String,Certificate[])", "keyStore.getEntry(String,KeyStore.PasswordProtection)"], "useStart": [568, 652], "useEnd": [625, 690], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_SetKeyEntry_Success() throws Exception {\n    mKeyStore.load(null, null);\n\n    final CertificateFactory f = CertificateFactory.getInstance(\"X.509\");\n\n    final Certificate caCert = f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));\n\n    KeyFactory keyFact = KeyFactory.getInstance(\"RSA\");\n    PrivateKey privKey = keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));\n    final Certificate[] chain = new Certificate[2];\n    chain[0] = f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));\n    chain[1] = caCert;\n\n    mKeyStore.setKeyEntry(TEST_ALIAS_1, privKey, null, chain);\n\n    Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n    assertNotNull(\"Retrieved entry should exist\", actualEntry);\n\n    assertTrue(\n        \"Retrieved entry should be of type PrivateKeyEntry\",\n        actualEntry instanceof PrivateKeyEntry);\n\n    PrivateKeyEntry actual = (PrivateKeyEntry) actualEntry;\n\n    assertPrivateKeyEntryEquals(actual, FAKE_KEY_1, FAKE_USER_1, FAKE_CA_1);\n  }\n"}, {"dataset": "load", "exampleID": 4510, "initialization": ["char[] password = String.toCharArray()", "InputStream stream = new FileInputStream(File)", "KeyStore keyStore = getInstance(*)"], "initializationStart": [365, 916, 961], "initializationEnd": [380, 941, 1008], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1014, "focalAPIEnd": 1037, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TrustManagerFactory.init(keyStore)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.store(OutputStream,char[])"], "useStart": [1230, 3379, 3481], "useEnd": [1242, 3414, 3506], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ist-dsi/fears/tree/master/docs/install_test_files/InstallCert.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    String host;\n    int port;\n    char[] passphrase;\n    if ((args.length == 1) || (args.length == 2)) {\n      String[] c = args[0].split(\":\");\n      host = c[0];\n      port = (c.length <= 7) ? 8443 : Integer.parseInt(c[1]);\n      String p = (args.length == 1) ? \"changeit\" : args[1];\n      passphrase = p.toCharArray();\n    } else {\n      System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\");\n      return;\n    }\n\n    File file = new File(\"jssecacerts\");\n    if (file.isFile() == false) {\n      char SEP = File.separatorChar;\n      File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\");\n      file = new File(dir, \"jssecacerts\");\n      if (file.isFile() == false) {\n        file = new File(dir, \"cacerts\");\n      }\n    }\n    System.out.println(\"Loading KeyStore \" + file + \"...\");\n    InputStream in = new FileInputStream(file);\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    ks.load(in, passphrase);\n    in.close();\n\n    SSLContext context = SSLContext.getInstance(\"TLS\");\n    TrustManagerFactory tmf =\n        TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n    tmf.init(ks);\n    X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0];\n    SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);\n    context.init(null, new TrustManager[] {tm}, null);\n    SSLSocketFactory factory = context.getSocketFactory();\n\n    System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\");\n    SSLSocket socket = (SSLSocket) factory.createSocket(host, port);\n    socket.setSoTimeout(10000);\n    try {\n      System.out.println(\"Starting SSL handshake...\");\n      socket.startHandshake();\n      socket.close();\n      System.out.println();\n      System.out.println(\"No errors, certificate is already trusted\");\n    } catch (SSLException e) {\n      System.out.println();\n      e.printStackTrace(System.out);\n    }\n\n    X509Certificate[] chain = tm.chain;\n    if (chain == null) {\n      System.out.println(\"Could not obtain server certificate chain\");\n      return;\n    }\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n    System.out.println();\n    System.out.println(\"Server sent \" + chain.length + \" certificate(s):\");\n    System.out.println();\n    MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    for (int i = 0; i < chain.length; i++) {\n      X509Certificate cert = chain[i];\n      System.out.println(\" \" + (i + 1) + \" Subject \" + cert.getSubjectDN());\n      System.out.println(\" Issuer \" + cert.getIssuerDN());\n      sha1.update(cert.getEncoded());\n      System.out.println(\" sha1 \" + toHexString(sha1.digest()));\n      md5.update(cert.getEncoded());\n      System.out.println(\" md5 \" + toHexString(md5.digest()));\n      System.out.println();\n    }\n\n    System.out.println(\"Enter certificate to add to trusted keystore or 'q' to quit: [1]\");\n    String line = reader.readLine().trim();\n    int k;\n    try {\n      k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1;\n    } catch (NumberFormatException e) {\n      System.out.println(\"KeyStore not changed\");\n      return;\n    }\n\n    X509Certificate cert = chain[k];\n    String alias = host + \"-\" + (k + 1);\n    ks.setCertificateEntry(alias, cert);\n\n    OutputStream out = new FileOutputStream(\"jssecacerts\");\n    ks.store(out, passphrase);\n    out.close();\n\n    System.out.println();\n    System.out.println(cert);\n    System.out.println();\n    System.out.println(\"Added certificate to keystore 'jssecacerts' using alias '\" + alias + \"'\");\n  }\n"}, {"dataset": "load", "exampleID": 4511, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 80, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.security.KeyStore.isKeyEntry(String)"], "useStart": [171], "useEnd": [205], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_IsKeyEntry_NonExist_Failure() throws Exception {\n    mKeyStore.load(null, null);\n\n    assertFalse(\"Should return false for non-existent entry\", mKeyStore.isKeyEntry(TEST_ALIAS_1));\n  }\n"}, {"dataset": "load", "exampleID": 4512, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [543], "initializationEnd": [590], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 596, "focalAPIEnd": 620, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.getKey(String,char[])", "keyStore.getKey(String,String)", "keyStore.setCertificateEntry(String,X509Certificate)"], "useStart": [627, 732, 1069, 1194], "useEnd": [688, 765, 1116, 1240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wsot/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#getKey(java.lang.String, char[]) */\n  public void test_getKeyLjava_lang_String$C() throws Exception {\n\n    // Test for method java.security.Key\n    // java.security.KeyStore.getKey(java.lang.String, char[])\n    // creatCertificate();\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    keyTest.setKeyEntry(\"alias2\", getPrivateKey(), pssWord, cert);\n    PrivateKey returnedKey = (PrivateKey) keyTest.getKey(\"alias2\", pssWord);\n    byte[] retB = returnedKey.getEncoded();\n    byte[] priB = getPrivateKey().getEncoded();\n    assertTrue(Arrays.equals(retB, priB));\n    assertEquals(getPrivateKey().getAlgorithm(), returnedKey.getAlgorithm());\n    assertEquals(getPrivateKey().getFormat(), returnedKey.getFormat());\n\n    try {\n      keyTest.getKey(\"alias2\", \"wrong\".toCharArray());\n      fail();\n    } catch (UnrecoverableKeyException expected) {\n    }\n\n    keyTest.setCertificateEntry(\"alias1\", cert[1]);\n    assertNull(\n        \"the private key returned from getKey for a certificate entry is not null\",\n        keyTest.getKey(\"alias1\", pssWord));\n  }\n"}, {"dataset": "load", "exampleID": 4513, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [711], "initializationEnd": [758], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])"], "configurationStart": [777], "configurationEnd": [838], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 908, "focalAPIEnd": 932, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.isKeyEntry(String)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])"], "useStart": [939, 1087, 1135], "useEnd": [1000, 1115, 1212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /**\n   * java.security.KeyStore#setKeyEntry(java.lang.String, java.security.Key, char[],\n   * java.security.cert.Certificate[])\n   */\n  public void\n      test_setKeyEntryLjava_lang_StringLjava_security_Key$C$Ljava_security_cert_Certificate()\n          throws Exception {\n\n    // Test for method void\n    // java.security.KeyStore.setKeyEntry(java.lang.String,\n    // java.security.Key, char[], java.security.cert.Certificate[])\n\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.setKeyEntry(\"alias3\", getPrivateKey(), pssWord, cert);\n      fail();\n    } catch (KeyStoreException expected) {\n    }\n\n    keyTest.load(null, null);\n\n    keyTest.setKeyEntry(\"alias3\", getPrivateKey(), pssWord, cert);\n    assertTrue(\n        \"the entry specified by the alias alias3 is not a keyEntry\", keyTest.isKeyEntry(\"alias3\"));\n\n    try {\n      keyTest.setKeyEntry(\"alias4\", getPrivateKey(), pssWord, new Certificate[] {});\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4514, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [578], "initializationEnd": [625], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.getCertificateChain(String)"], "configurationStart": [644], "configurationEnd": [682], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 752, "focalAPIEnd": 776, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.getCertificateChain(String)", "keyStore.getCertificateChain(String)", "keyStore.getCertificateChain(String)"], "useStart": [798, 866, 958, 1485, 1641], "useEnd": [844, 927, 995, 1522, 1674], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robovm/robovm/tree/master/tests/libcore/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#getCertificateChain(java.lang.String) */\n  public void test_getCertificateChainLjava_lang_String() throws Exception {\n    // Test for method java.security.cert.Certificate[]\n    // java.security.KeyStore.getCertificateChain(java.lang.String)\n    // creatCertificate();\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.getCertificateChain(\"anAlias\");\n      fail();\n    } catch (KeyStoreException expected) {\n    }\n\n    keyTest.load(null, null);\n\n    // alias 1\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n\n    // alias 2\n    keyTest.setKeyEntry(\"alias2\", getPrivateKey(), pssWord, cert);\n\n    Certificate[] certRes = keyTest.getCertificateChain(\"alias2\");\n    assertEquals(\n        \"there are more than two certificate returned from getCertificateChain\", 2, certRes.length);\n    assertEquals(\n        \"the first certificate returned from getCertificateChain is not correct\",\n        cert[0].getPublicKey(),\n        certRes[0].getPublicKey());\n    assertEquals(\n        \"the second certificate returned from getCertificateChain is not correct\",\n        cert[1].getPublicKey(),\n        certRes[1].getPublicKey());\n    Certificate[] certResNull = keyTest.getCertificateChain(\"alias1\");\n    assertNull(\"the certificate chain returned from getCertificateChain is NOT null\", certResNull);\n\n    try {\n      keyTest.getCertificateChain(null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4515, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [90], "initializationEnd": [137], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 143, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.deleteEntry(String)"], "useStart": [173], "useEnd": [201], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinsb/android-libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  public void test_deleteEmptyEntryBogusAlias() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n    keyTest.deleteEntry(\"bogus\");\n  }\n"}, {"dataset": "load", "exampleID": 4516, "initialization": ["InputStream stream = new BufferedInputStream(*)"], "initializationStart": [116], "initializationEnd": [171], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["write(*,String,*)"], "tryExpressionStart": 97, "tryExpressionEnd": 101, "tryBlockStart": 97, "tryBlockEnd": 512, "catchExpressionStart": 274, "catchExpressionEnd": 298, "catchBlockStart": 274, "catchBlockEnd": 384, "exceptionHandlingCallStart": [308], "exceptionHandlingCallEnd": [375], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 181, "focalAPIEnd": 213, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["close(InputStream)"], "finallyExpressionStart": 469, "finallyExpressionEnd": 477, "finallyBlockStart": 469, "finallyBlockEnd": 512, "cleanUpCallStart": [487], "cleanUpCallEnd": [503], "url": "https://github.com/willuhn/jameica/tree/master/src/de/willuhn/jameica/security/SSLFactory.java", "rawCode": "    public boolean verify(String username, char[] password) {\n      InputStream is = null;\n      try {\n        is = new BufferedInputStream(new FileInputStream(this.file));\n        this.keystore.load(is, password);\n        this.verified = true;\n        return true;\n      } catch (IOException ioe) {\n        Logger.write(Level.DEBUG, \"master password seems to be wrong\", ioe);\n      } catch (Exception e) {\n        Logger.error(\"unable to unlock keystore\", e);\n      } finally {\n        IOUtil.close(is);\n      }\n      return false;\n    }\n"}, {"dataset": "load", "exampleID": 4517, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [944], "initializationEnd": [971], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new GuanxiException(*)"], "tryExpressionStart": 918, "tryExpressionEnd": 922, "tryBlockStart": 918, "tryBlockEnd": 4125, "catchExpressionStart": 3917, "catchExpressionEnd": 3938, "catchBlockStart": 3917, "catchBlockEnd": 4125, "exceptionHandlingCallStart": [4095], "exceptionHandlingCallEnd": [4118], "configuration": ["keyStore.load(FileInputStream,char[])"], "configurationStart": [1158], "configurationEnd": [1202], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1238, "focalAPIEnd": 1257, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.security.cert.Certificate[])", "keyStore.store(FileOutputStream,char[])"], "useStart": [3531, 3648, 3845], "useEnd": [3611, 3729, 3890], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guanxi/guanxi-common/tree/master/src/org/guanxi/common/security/SecUtils.java", "rawCode": "  /**\n   * Generates a self signed public/private key pair and puts them and the associated certificate in\n   * a KeyStore.\n   *\n   * @param cn The CN of the X509 containing the public key, e.g. \"cn=guanxi_sp,ou=smo,o=uhi\"\n   * @param keystoreFile The full path and name of the KeyStore to create or add the certificate to\n   * @param keystorePassword The password for the KeyStore\n   * @param privateKeyPassword The password for the private key associated with the public key\n   *     certificate\n   * @param privateKeyAlias The alias under which the private key will be stored\n   * @param keyType The type of key, RSA or DSA\n   * @throws GuanxiException if an error occurred\n   */\n  public void createSelfSignedKeystore(\n      String cn,\n      String keystoreFile,\n      String keystorePassword,\n      String privateKeyPassword,\n      String privateKeyAlias,\n      String keyType)\n      throws GuanxiException {\n    try {\n      KeyStore ks = KeyStore.getInstance(\"JKS\");\n\n      // Does the keystore exist?\n      File keyStore = new File(keystoreFile);\n      if (keyStore.exists()) {\n        FileInputStream fis = new FileInputStream(keystoreFile);\n        ks.load(fis, keystorePassword.toCharArray());\n        fis.close();\n      } else ks.load(null, null);\n\n      // Generate a new public/private key pair\n      KeyPairGenerator keyGen = null;\n      if (keyType.toLowerCase().equals(\"rsa\")) {\n        keyGen = KeyPairGenerator.getInstance(\"RSA\");\n      } else if (keyType.toLowerCase().equals(\"dsa\")) {\n        keyGen = KeyPairGenerator.getInstance(\"DSA\");\n      }\n      keyGen.initialize(1024, new SecureRandom());\n      KeyPair keypair = keyGen.generateKeyPair();\n      PrivateKey privkey = keypair.getPrivate();\n      PublicKey pubkey = keypair.getPublic();\n\n      /* Set the attributes of the X509 Certificate that will contain the public key.\n       * This is a self signed certificate so the issuer and subject will be the same.\n       */\n      Hashtable<DERObjectIdentifier, String> attrs = new Hashtable<DERObjectIdentifier, String>();\n      Vector<DERObjectIdentifier> ordering = new Vector<DERObjectIdentifier>();\n      ordering.add(X509Name.CN);\n\n      attrs.put(X509Name.CN, cn);\n      X509Name issuerDN = new X509Name(ordering, attrs);\n      X509Name subjectDN = new X509Name(ordering, attrs);\n\n      // Certificate valid from now\n      Date validFrom = new Date();\n      validFrom.setTime(validFrom.getTime() - (10 * 60 * 1000));\n      Date validTo = new Date();\n      validTo.setTime(validTo.getTime() + (20 * (24 * 60 * 60 * 1000)));\n\n      // Initialise the X509 Certificate information...\n      X509V3CertificateGenerator x509 = new X509V3CertificateGenerator();\n      if (keyType.toLowerCase().equals(\"rsa\")) {\n        x509.setSignatureAlgorithm(\"SHA1withRSA\");\n      } else if (keyType.toLowerCase().equals(\"dsa\")) {\n        x509.setSignatureAlgorithm(\"SHA1withDSA\");\n      }\n      x509.setIssuerDN(issuerDN);\n      x509.setSubjectDN(subjectDN);\n      x509.setPublicKey(pubkey);\n      x509.setNotBefore(validFrom);\n      x509.setNotAfter(validTo);\n      x509.setSerialNumber(new BigInteger(128, new Random()));\n\n      // ...generate it...\n      X509Certificate[] cert = new X509Certificate[1];\n      cert[0] = x509.generate(privkey, \"BC\");\n\n      // ...and add the self signed certificate as the certificate chain\n      java.security.cert.Certificate[] chain = new java.security.cert.Certificate[1];\n      chain[0] = cert[0];\n\n      // Under the alias, store the X509 Certificate and it's public key...\n      ks.setKeyEntry(privateKeyAlias, privkey, privateKeyPassword.toCharArray(), cert);\n      // ...and the chain...\n      ks.setKeyEntry(privateKeyAlias, privkey, privateKeyPassword.toCharArray(), chain);\n      // ...and write the keystore to disk\n      FileOutputStream fos = new FileOutputStream(keystoreFile);\n      ks.store(fos, keystorePassword.toCharArray());\n      fos.close();\n    } catch (Exception se) {\n      /* We'll end up here if a security manager is installed and it refuses us\n       * permission to add the BouncyCastle provider\n       */\n      throw new GuanxiException(se);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4518, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 79, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getKey(String,char[])"], "useStart": [166], "useEnd": [202], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_GetKey_NonExistent_Failure() throws Exception {\n    mKeyStore.load(null, null);\n\n    assertNull(\"A non-existent entry should return null\", mKeyStore.getKey(TEST_ALIAS_1, null));\n  }\n"}, {"dataset": "load", "exampleID": 4519, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 206, "focalAPIEnd": 232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.load(InputStream,char[])", "init(keyStore,*)"], "useStart": [351, 518], "useEnd": [416, 597], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 427, "finallyExpressionEnd": 435, "finallyBlockStart": 427, "finallyBlockEnd": 506, "cleanUpCallStart": [476], "cleanUpCallEnd": [487], "url": "https://github.com/CSEMike/OneSwarm/tree/master/az_src/src/org/gudy/azureus2/core3/security/impl/SESecurityManagerImpl.java", "rawCode": "  protected KeyStore loadKeyStore(KeyManagerFactory keyManagerFactory) throws Exception {\n\n    KeyStore key_store = KeyStore.getInstance(KEYSTORE_TYPE);\n\n    if (!new File(keystore_name).exists()) {\n\n      key_store.load(null, null);\n\n    } else {\n\n      InputStream kis = null;\n\n      try {\n        kis = new FileInputStream(keystore_name);\n\n        key_store.load(kis, SESecurityManager.SSL_PASSWORD.toCharArray());\n\n      } finally {\n\n        if (kis != null) {\n\n          kis.close();\n        }\n      }\n    }\n\n    keyManagerFactory.init(key_store, SESecurityManager.SSL_PASSWORD.toCharArray());\n\n    return (key_store);\n  }\n"}, {"dataset": "load", "exampleID": 4520, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [135], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 188, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,*)"], "useStart": [654, 706, 758, 837], "useEnd": [700, 752, 804, 895], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /** Test for <code>getMaxPathLength()</code> */\n  public final void testGetMaxPathLength() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    ByteArrayInputStream certArray = new ByteArrayInputStream(certificate.getBytes());\n\n    ByteArrayInputStream certArray2 = new ByteArrayInputStream(certificate2.getBytes());\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    PKIXBuilderParameters p = new PKIXBuilderParameters(keyTest, new X509CertSelector());\n    assertEquals(5, p.getMaxPathLength());\n    p.setMaxPathLength(10);\n    assertEquals(10, p.getMaxPathLength());\n  }\n"}, {"dataset": "load", "exampleID": 4521, "initialization": ["KeyStore keyStore = getInstance(String)", "InputStream stream = URL.openStream()", "InputStream stream = new FileInputStream(String)"], "initializationStart": [809, 994, 1036], "initializationEnd": [835, 1010, 1061], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1085, "focalAPIEnd": 1148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1156, "finallyExpressionEnd": 1164, "finallyBlockStart": 1156, "finallyBlockEnd": 1189, "cleanUpCallStart": [1172], "cleanUpCallEnd": [1182], "url": "https://github.com/dxd/2apl--old-/tree/master/2apl/release/lib/com/sun/jini/discovery/internal/X500Provider.java", "rawCode": "  /** Initializes trust store and cert stores based on system property values. */\n  private void initStores() throws IOException, GeneralSecurityException {\n    String path, type, passwd;\n    if ((path = System.getProperty(NAME + \".trustStore\")) != null) {\n      type = System.getProperty(NAME + \".trustStoreType\", KeyStore.getDefaultType());\n      passwd = System.getProperty(NAME + \".trustStorePassword\");\n    } else if ((path = System.getProperty(JSSE + \".trustStore\")) != null) {\n      type = System.getProperty(JSSE + \".trustStoreType\", KeyStore.getDefaultType());\n      passwd = System.getProperty(JSSE + \".trustStorePassword\");\n    } else {\n      path = System.getProperty(\"java.home\") + \"/lib/security/cacerts\";\n      type = KeyStore.getDefaultType();\n      passwd = null;\n    }\n    KeyStore kstore = KeyStore.getInstance(type);\n    InputStream in;\n    URL url = null;\n    try {\n      url = new URL(path);\n    } catch (MalformedURLException e) {\n    }\n    if (url != null) {\n      in = url.openStream();\n    } else {\n      in = new FileInputStream(path);\n    }\n    try {\n      kstore.load(in, (passwd != null) ? passwd.toCharArray() : null);\n    } finally {\n      in.close();\n    }\n    if (logger.isLoggable(Level.FINEST)) {\n      logger.log(Level.FINEST, \"loaded trust store from {0} ({1})\", new Object[] {path, type});\n    }\n\n    String cstores = System.getProperty(NAME + \".ldapCertStores\");\n    List l = new ArrayList();\n    if (cstores != null) {\n      StringTokenizer tok = new StringTokenizer(cstores, \",\");\n      while (tok.hasMoreTokens()) {\n        String s = tok.nextToken().trim();\n        Matcher m = hostPortPattern.matcher(s);\n        try {\n          CertStoreParameters params =\n              m.matches()\n                  ? new LDAPCertStoreParameters(m.group(1), Integer.parseInt(m.group(2)))\n                  : new LDAPCertStoreParameters(s);\n          l.add(CertStore.getInstance(\"LDAP\", params));\n        } catch (Exception e) {\n          logger.log(Level.WARNING, \"exception initializing cert store\", e);\n        }\n      }\n    }\n    if (logger.isLoggable(Level.FINEST)) {\n      logger.log(Level.FINEST, \"using cert stores {0}\", new Object[] {l});\n    }\n    certStores = (CertStore[]) l.toArray(new CertStore[l.size()]);\n    trustStore = kstore;\n  }\n"}, {"dataset": "load", "exampleID": 4522, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [113], "initializationEnd": [140], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 146, "focalAPIEnd": 165, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anbangr/trusted-mr/tree/master/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/KeyStoreTestUtil.java", "rawCode": "  private static KeyStore createEmptyKeyStore() throws GeneralSecurityException, IOException {\n    KeyStore ks = KeyStore.getInstance(\"JKS\");\n    ks.load(null, null); // initialize\n    return ks;\n  }\n"}, {"dataset": "load", "exampleID": 4523, "initialization": ["KeyStore keyStore = getInstance(String,*)"], "initializationStart": [1424], "initializationEnd": [1490], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1496, "focalAPIEnd": 1521, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,String,Certificate[])", "keyStore.store(FileOutputStream,char[])"], "useStart": [1552, 1687], "useEnd": [1604, 1716], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/slcs/org.glite.slcs.common/tree/master/src/org/glite/slcs/pki/bouncycastle/Codec.java", "rawCode": "  /**\n   * Stores the private key and certificate in a PKCS12 file. The certificate Subject CN is used as\n   * key alias in the PKCS12 store.\n   *\n   * @param privateKey The private key.\n   * @param certificate The X509 certificate.\n   * @param chain The X509 certificate chain.\n   * @param file The file object.\n   * @param password The password for the PKCS12 file.\n   * @throws GeneralSecurityException If a crypto error occurs.\n   * @throws IOException If an IO error occurs.\n   */\n  public static void storePKCS12(\n      PrivateKey privateKey,\n      X509Certificate certificate,\n      X509Certificate chain[],\n      File file,\n      char[] password)\n      throws GeneralSecurityException, IOException {\n    // set the bag information for the PKCS12 keystore\n    PKCS12BagAttributeCarrier bagAttr = (PKCS12BagAttributeCarrier) privateKey;\n    PublicKey publicKey = certificate.getPublicKey();\n    bagAttr.setBagAttribute(\n        PKCSObjectIdentifiers.pkcs_9_at_localKeyId, new SubjectKeyIdentifierStructure(publicKey));\n\n    // the PKCS12 keystore key alias is the CN\n    String alias = getPrincipalValue(certificate, X509Principal.CN);\n\n    // build full cert chain\n    int nCerts = chain.length + 1;\n    Certificate certs[] = new Certificate[nCerts];\n    certs[0] = certificate;\n    for (int i = 0; i < chain.length; i++) {\n      certs[i + 1] = chain[i];\n    }\n    // create a PKCS12 keystore\n    KeyStore p12Store = KeyStore.getInstance(\"PKCS12\", BouncyCastleProvider.PROVIDER_NAME);\n    p12Store.load(null, null);\n    // set the key entry\n    p12Store.setKeyEntry(alias, privateKey, null, certs);\n    // store the file\n    FileOutputStream fos = new FileOutputStream(file);\n    p12Store.store(fos, password);\n    fos.close();\n  }\n"}, {"dataset": "load", "exampleID": 4524, "initialization": ["KeyStore keyStore = getInstance(*)", "InputStream stream = new ByteArrayInputStream(byte[])"], "initializationStart": [516, 586], "initializationEnd": [563, 620], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 626, "focalAPIEnd": 651, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.isCertificateEntry(String)", "keyStore.isKeyEntry(String)", "keyStore.isCertificateEntry(String)", "keyStore.load(InputStream,char[])", "keyStore.isCertificateEntry(String)", "keyStore.isKeyEntry(String)", "keyStore.isCertificateEntry(String)"], "useStart": [715, 797, 874, 1057, 1143, 1225, 1302], "useEnd": [751, 825, 910, 1079, 1179, 1253, 1338], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** @tests java.security.KeyStore#load(java.io.InputStream, char[]) */\n  @TestTargetNew(\n    level = TestLevel.PARTIAL,\n    notes = \"IOException, NoSuchAlgorithmException, CertificateException checking missed\",\n    method = \"load\",\n    args = {java.io.InputStream.class, char[].class}\n  )\n  public void test_loadLjava_io_InputStream$C() throws Exception {\n    // Test for method void java.security.KeyStore.load(java.io.InputStream,\n    // char [])\n    byte[] keyStore = creatCertificate();\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    InputStream in = new ByteArrayInputStream(keyStore);\n    keyTest.load(in, pssWord);\n    in.close();\n    assertTrue(\"alias1 is not a certificate\", keyTest.isCertificateEntry(\"alias1\"));\n    assertTrue(\"alias2 is not a keyEntry\", keyTest.isKeyEntry(\"alias2\"));\n    assertTrue(\"alias3 is not a certificate\", keyTest.isCertificateEntry(\"alias3\"));\n\n    // test with null password\n    keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    in = new ByteArrayInputStream(keyStore);\n    keyTest.load(in, null);\n    in.close();\n    assertTrue(\"alias1 is not a certificate\", keyTest.isCertificateEntry(\"alias1\"));\n    assertTrue(\"alias2 is not a keyEntry\", keyTest.isKeyEntry(\"alias2\"));\n    assertTrue(\"alias3 is not a certificate\", keyTest.isCertificateEntry(\"alias3\"));\n  }\n"}, {"dataset": "load", "exampleID": 4525, "initialization": ["InputStream stream = URL.openStream()", "KeyStore keyStore = getInstance(*)"], "initializationStart": [192, 236], "initializationEnd": [216, 283], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 289, "focalAPIEnd": 306, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getCertificate(String)", "keyStore.getKey(String,String)"], "useStart": [355, 427], "useEnd": [379, 461], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/reficio/soap-ws/tree/master/soap-server/src/test/java/org/reficio/ws/server/PasswordLessKeystoreTest.java", "rawCode": "  @Test\n  public void trustStoreUrl() throws Exception {\n    URL keyStoreUrl =\n        ResourceUtils.getResourceWithAbsolutePackagePath(\"/keystores\", \"keyless.keystore\");\n    InputStream in = keyStoreUrl.openStream();\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    ks.load(in, null);\n    in.close();\n\n    Certificate certificate = ks.getCertificate(\"tom\");\n    assertNotNull(certificate);\n    Key key = ks.getKey(\"tom\", \"\".toCharArray());\n    assertNotNull(key);\n  }\n"}, {"dataset": "load", "exampleID": 4526, "initialization": ["KeyStore keyStore = getInstance(*)", "KeyStore keyStore = getInstance(String,String)", "InputStream stream = URL.openStream()"], "initializationStart": [234, 445, 1335], "initializationEnd": [270, 490, 1351], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1363, "focalAPIEnd": 1388, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1400, "finallyExpressionEnd": 1408, "finallyBlockStart": 1400, "finallyBlockEnd": 1483, "cleanUpCallStart": [1450], "cleanUpCallEnd": [1460], "url": "https://github.com/e-ucm/eadventure-legacy/tree/master/E-Adventure/src/main/java/es/eucm/eadventure/editor/control/security/jarsigner/JSParameters.java", "rawCode": "  /**\n   * @return\n   * @throws JarSignerException\n   */\n  KeyStore getKeyStore() throws JarSignerException {\n    if (keyStore == null) {\n      KeyStore store = null;\n\n      if (providerName == null) {\n        try {\n          store = KeyStore.getInstance(this.storeType);\n        } catch (KeyStoreException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      } else {\n        try {\n          store = KeyStore.getInstance(storeType, providerName);\n        } catch (KeyStoreException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        } catch (NoSuchProviderException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n      }\n\n      // If the path to the store is not specified, try to open\n      // the store using the default path.\n      if (storeURI == null) {\n        throw new JarSignerException(\"Cannot load the keystore \" + \" error con el keystore\");\n      }\n      try {\n        storeURI = storeURI.replace(File.separatorChar, '/');\n        URL url = null;\n        try {\n          url = new URL(storeURI);\n        } catch (java.net.MalformedURLException e) {\n          // try as file\n          url = new File(storeURI).toURI().toURL();\n        }\n        InputStream is = null;\n        try {\n          is = url.openStream();\n          store.load(is, storePass);\n        } finally {\n          if (is != null) {\n            is.close();\n          }\n        }\n      } catch (Exception e) {\n        throw new JarSignerException(\"Cannot load the keystore \" + storeURI, e);\n      }\n      keyStore = store;\n    }\n    return keyStore;\n  }\n"}, {"dataset": "load", "exampleID": 4527, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [85], "initializationEnd": [132], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new DefaultHttpClient()"], "tryExpressionStart": 51, "tryExpressionEnd": 55, "tryBlockStart": 51, "tryBlockEnd": 898, "catchExpressionStart": 833, "catchExpressionEnd": 853, "catchBlockStart": 833, "catchBlockEnd": 898, "exceptionHandlingCallStart": [868], "exceptionHandlingCallEnd": [891], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 140, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new MySSLSocketFactory(keyStore)"], "useStart": [198], "useEnd": [232], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hertus/hsrlunch/tree/master/src/ch/hsr/hsrlunch/util/MyHttpClient.java", "rawCode": "  public DefaultHttpClient getMyHttpClient() {\n    try {\n      KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n      trustStore.load(null, null);\n\n      SSLSocketFactory sf = new MySSLSocketFactory(trustStore);\n      sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n      HttpParams params = new BasicHttpParams();\n      HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n      HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n      SchemeRegistry registry = new SchemeRegistry();\n      registry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n      registry.register(new Scheme(\"https\", sf, 443));\n\n      ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);\n\n      return new DefaultHttpClient(ccm, params);\n    } catch (Exception e) {\n      return new DefaultHttpClient();\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4528, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [222], "initializationEnd": [260], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new KeyStoreException(*)"], "tryExpressionStart": 268, "tryExpressionEnd": 272, "tryBlockStart": 268, "tryBlockEnd": 554, "catchExpressionStart": 317, "catchExpressionEnd": 339, "catchBlockStart": 317, "catchBlockEnd": 388, "exceptionHandlingCallStart": [355], "exceptionHandlingCallEnd": [379], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 282, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wsot/platform_libcore/tree/master/luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java", "rawCode": "  /** @see javax.net.ssl.TrustManagerFactorySpi#engineInit(KeyStore) */\n  @Override\n  public void engineInit(KeyStore ks) throws KeyStoreException {\n    if (ks != null) {\n      keyStore = ks;\n    } else {\n      keyStore = KeyStore.getInstance(\"AndroidCAStore\");\n      try {\n        keyStore.load(null, null);\n      } catch (IOException e) {\n        throw new KeyStoreException(e);\n      } catch (CertificateException e) {\n        throw new KeyStoreException(e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new KeyStoreException(e);\n      }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4529, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [135], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 188, "focalAPIEnd": 212, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,*)"], "useStart": [654, 706, 758, 837], "useEnd": [700, 752, 804, 895], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /** Test for <code>setMaxPathLength()</code> */\n  public final void testSetMaxPathLength() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    ByteArrayInputStream certArray = new ByteArrayInputStream(certificate.getBytes());\n\n    ByteArrayInputStream certArray2 = new ByteArrayInputStream(certificate2.getBytes());\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    PKIXBuilderParameters p = new PKIXBuilderParameters(keyTest, new X509CertSelector());\n\n    assertEquals(5, p.getMaxPathLength());\n    p.setMaxPathLength(10);\n    assertEquals(10, p.getMaxPathLength());\n    p.setMaxPathLength(0);\n    assertEquals(0, p.getMaxPathLength());\n    p.setMaxPathLength(-1);\n    assertEquals(-1, p.getMaxPathLength());\n\n    int[] maxPathLength = {-2, -10, Integer.MIN_VALUE};\n    for (int i = 0; i < maxPathLength.length; i++) {\n      try {\n        p.setMaxPathLength(maxPathLength[i]);\n        fail(\"InvalidParameterException expected \");\n      } catch (InvalidParameterException e) {\n        // expected\n      }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4530, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [139], "initializationEnd": [186], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 194, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.deleteEntry(String)", "keyStore.load(FileInputStream,String)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.deleteEntry(String)"], "useStart": [226, 396, 740, 786], "useEnd": [251, 440, 779, 815], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinsb/android-libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#deleteEntry(String) */\n  public void test_deleteEntry() throws Exception {\n    try {\n      KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n      keyTest.load(null, null);\n      keyTest.deleteEntry(null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, \"password\".toCharArray());\n\n    KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pssWord);\n    Certificate[] chain = {\n      new MyCertificate(\"DSA\", testEncoding), new MyCertificate(\"DSA\", testEncoding)\n    };\n    KeyStore.PrivateKeyEntry pkEntry = new KeyStore.PrivateKeyEntry(getPrivateKey(), chain);\n\n    keyTest.setEntry(\"symKey\", pkEntry, pp);\n\n    keyTest.deleteEntry(\"symKey\");\n  }\n"}, {"dataset": "load", "exampleID": 4531, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 83, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.security.KeyStore.containsAlias(String)"], "useStart": [259], "useEnd": [296], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_ContainsAliases_CAOnly_Success() throws Exception {\n    mKeyStore.load(null, null);\n\n    assertTrue(mAndroidKeyStore.put(Credentials.CA_CERTIFICATE + TEST_ALIAS_2, FAKE_CA_1));\n\n    assertTrue(\"Should contain added CA certificate\", mKeyStore.containsAlias(TEST_ALIAS_2));\n  }\n"}, {"dataset": "load", "exampleID": 4532, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [374], "initializationEnd": [421], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 427, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.store(ByteArrayOutputStream,char[])"], "useStart": [472, 540, 618, 710], "useEnd": [518, 596, 664, 737], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  private byte[] creatCertificate() throws Exception {\n    ByteArrayOutputStream out = null;\n\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n    // alias 1\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n\n    // alias 2\n    keyTest.setKeyEntry(\"alias2\", privateKey, pssWord, cert);\n\n    // alias 3\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    out = new ByteArrayOutputStream();\n    keyTest.store(out, pssWord);\n    out.close();\n\n    return out.toByteArray();\n  }\n"}, {"dataset": "load", "exampleID": 4533, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [534], "initializationEnd": [581], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.size()"], "configurationStart": [600], "configurationEnd": [614], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 717, "focalAPIEnd": 741, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.setCertificateEntry(String,X509Certificate)"], "useStart": [762, 830, 908], "useEnd": [808, 886, 954], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** @tests java.security.KeyStore#size() */\n  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"size\",\n    args = {}\n  )\n  public void test_size() throws Exception {\n    // Test for method int java.security.KeyStore.size()\n\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.size();\n      fail(\"expected KeyStoreException\");\n    } catch (KeyStoreException e) {\n      // ok\n    }\n\n    keyTest.load(null, null);\n    // alias 1\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n\n    // alias 2\n    keyTest.setKeyEntry(\"alias2\", privateKey, pssWord, cert);\n\n    // alias 3\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    assertEquals(\"the size of the keyStore is not 3\", 3, keyTest.size());\n  }\n"}, {"dataset": "load", "exampleID": 4534, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [728], "initializationEnd": [775], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.getCertificateChain(String)"], "configurationStart": [794], "configurationEnd": [832], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 935, "focalAPIEnd": 959, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.getCertificateChain(String)", "keyStore.getCertificateChain(String)", "keyStore.getCertificateChain(String)"], "useStart": [981, 1049, 1155, 1604, 1774], "useEnd": [1027, 1105, 1192, 1641, 1807], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** @tests java.security.KeyStore#getCertificateChain(java.lang.String) */\n  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"getCertificateChain\",\n    args = {java.lang.String.class}\n  )\n  public void test_getCertificateChainLjava_lang_String() throws Exception {\n    // Test for method java.security.cert.Certificate []\n    // java.security.KeyStore.getCertificateChain(java.lang.String)\n    // creatCertificate();\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.getCertificateChain(\"anAlias\");\n      fail(\"expected KeyStoreException\");\n    } catch (KeyStoreException e) {\n      // ok\n    }\n\n    keyTest.load(null, null);\n\n    // alias 1\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n\n    // alias 2\n    keyTest.setKeyEntry(\"alias2\", privateKey, pssWord, cert);\n\n    java.security.cert.Certificate[] certRes = keyTest.getCertificateChain(\"alias2\");\n    assertTrue(\n        \"there are more than two certificate returned \" + \"from getCertificateChain\",\n        certRes.length == 2);\n    assertTrue(\n        \"the certificates returned from getCertificateChain \" + \"is not correct\",\n        cert[0].getPublicKey() == certRes[0].getPublicKey()\n            && cert[1].getPublicKey() == certRes[1].getPublicKey());\n    java.security.cert.Certificate[] certResNull = keyTest.getCertificateChain(\"alias1\");\n    assertNull(\n        \"the certificate chain returned from \" + \"getCertificateChain is NOT null\", certResNull);\n\n    try {\n      keyTest.getCertificateChain(null);\n      fail(\"expected NullPointerException\");\n    } catch (NullPointerException e) {\n      // ok\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4535, "initialization": ["KeyStore keyStore = getInstance(String,String)", "KeyStore keyStore = getInstance(String,String)", "KeyStore keyStore = getInstance(String,String)"], "initializationStart": [406, 2315, 4371], "initializationEnd": [442, 2351, 4407], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.load(ByteArrayInputStream,char[])", "keyStore.aliases()", "keyStore.getKey(String,char[])", "keyStore.getCertificateChain(String)", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.getKey(String,char[])", "keyStore.deleteEntry(String)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.load(ByteArrayInputStream,String)"], "configurationStart": [517, 567, 790, 945, 1764, 1816, 1952, 2109, 2406], "configurationEnd": [543, 582, 815, 977, 1790, 1841, 1976, 2153, 2446], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 4414, "focalAPIEnd": 4436, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,String,Certificate[])", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.aliases()", "keyStore.getCertificateChain(String)", "keyStore.getCertificateChain(String)", "keyStore.getCertificate(String)", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.aliases()", "keyStore.getCertificateChain(String)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.load(ByteArrayInputStream,String)"], "useStart": [4443, 5157, 5207, 5399, 5646, 5687, 5867, 5914, 6106, 6332, 6958], "useEnd": [4496, 5195, 5222, 5431, 5680, 5716, 5902, 5929, 6138, 6372, 6994], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rtyley/test-bc-java-cvsimport/tree/master/crypto/test/jdk1.4/org/bouncycastle/jce/provider/test/PKCS12StoreTest.java", "rawCode": "  public void testPKCS12Store() throws Exception {\n    BigInteger mod =\n        new BigInteger(\n            \"bb1be8074e4787a8d77967f1575ef72dd7582f9b3347724413c021beafad8f32dba5168e280cbf284df722283dad2fd4abc750e3d6487c2942064e2d8d80641aa5866d1f6f1f83eec26b9b46fecb3b1c9856a303148a5cc899c642fb16f3d9d72f52526c751dc81622c420c82e2cfda70fe8d13f16cc7d6a613a5b2a2b5894d1\",\n            16);\n    KeyStore store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    ByteArrayInputStream stream = new ByteArrayInputStream(pkcs12);\n\n    store.load(stream, passwd);\n\n    Enumeration en = store.aliases();\n    String pName = null;\n\n    while (en.hasMoreElements()) {\n      String n = (String) en.nextElement();\n      if (store.isKeyEntry(n)) {\n        pName = n;\n      }\n    }\n\n    PrivateKey key = (PrivateKey) store.getKey(pName, null);\n\n    if (!((RSAPrivateKey) key).getModulus().equals(mod)) {\n      fail(\"Modulus doesn't match.\");\n    }\n\n    Certificate[] ch = store.getCertificateChain(pName);\n\n    if (ch.length != 3) {\n      fail(\"chain was wrong length\");\n    }\n\n    if (!((X509Certificate) ch[0])\n        .getSerialNumber()\n        .equals(new BigInteger(\"96153094170511488342715101755496684211\"))) {\n      fail(\"chain[0] wrong certificate.\");\n    }\n\n    if (!((X509Certificate) ch[1])\n        .getSerialNumber()\n        .equals(new BigInteger(\"279751514312356623147411505294772931957\"))) {\n      fail(\"chain[1] wrong certificate.\");\n    }\n\n    if (!((X509Certificate) ch[2]).getSerialNumber().equals(new BigInteger(\"11341398017\"))) {\n      fail(\"chain[2] wrong certificate.\");\n    }\n\n    //\n    // save test\n    //\n    ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n\n    store.store(bOut, passwd);\n\n    stream = new ByteArrayInputStream(bOut.toByteArray());\n\n    store.load(stream, passwd);\n\n    key = (PrivateKey) store.getKey(pName, null);\n\n    if (!((RSAPrivateKey) key).getModulus().equals(mod)) {\n      fail(\"Modulus doesn't match.\");\n    }\n\n    store.deleteEntry(pName);\n\n    if (store.getKey(pName, null) != null) {\n      fail(\"Failed deletion test.\");\n    }\n\n    //\n    // cert chain test\n    //\n    store.setCertificateEntry(\"testCert\", ch[2]);\n\n    if (store.getCertificateChain(\"testCert\") != null) {\n      fail(\"Failed null chain test.\");\n    }\n\n    //\n    // UTF 8 single cert test\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(certUTF);\n\n    store.load(stream, \"user\".toCharArray());\n\n    if (store.getCertificate(\"37\") == null) {\n      fail(\"Failed to find UTF cert.\");\n    }\n\n    //\n    // try for a self generated certificate\n    //\n    RSAPublicKeySpec pubKeySpec =\n        new RSAPublicKeySpec(\n            new BigInteger(\n                \"b4a7e46170574f16a97082b22be58b6a2a629798419be12872a4bdba626cfae9900f76abfb12139dce5de56564fab2b6543165a040c606887420e33d91ed7ed7\",\n                16),\n            new BigInteger(\"11\", 16));\n\n    RSAPrivateCrtKeySpec privKeySpec =\n        new RSAPrivateCrtKeySpec(\n            new BigInteger(\n                \"b4a7e46170574f16a97082b22be58b6a2a629798419be12872a4bdba626cfae9900f76abfb12139dce5de56564fab2b6543165a040c606887420e33d91ed7ed7\",\n                16),\n            new BigInteger(\"11\", 16),\n            new BigInteger(\n                \"9f66f6b05410cd503b2709e88115d55daced94d1a34d4e32bf824d0dde6028ae79c5f07b580f5dce240d7111f7ddb130a7945cd7d957d1920994da389f490c89\",\n                16),\n            new BigInteger(\"c0a0758cdf14256f78d4708c86becdead1b50ad4ad6c5c703e2168fbf37884cb\", 16),\n            new BigInteger(\"f01734d7960ea60070f1b06f2bb81bfac48ff192ae18451d5e56c734a5aab8a5\", 16),\n            new BigInteger(\"b54bb9edff22051d9ee60f9351a48591b6500a319429c069a3e335a1d6171391\", 16),\n            new BigInteger(\"d3d83daf2a0cecd3367ae6f8ae1aeb82e9ac2f816c6fc483533d8297dd7884cd\", 16),\n            new BigInteger(\"b8f52fc6f38593dabb661d3f50f8897f8106eee68b1bce78a95b132b4e5b5d19\", 16));\n\n    //\n    // set up the keys\n    //\n    PrivateKey privKey = null;\n    PublicKey pubKey = null;\n\n    try {\n      KeyFactory fact = KeyFactory.getInstance(\"RSA\", \"BC\");\n\n      privKey = fact.generatePrivate(privKeySpec);\n      pubKey = fact.generatePublic(pubKeySpec);\n    } catch (Exception e) {\n      fail(\"error setting up keys - \" + e.toString());\n    }\n\n    Certificate[] chain = new Certificate[1];\n\n    chain[0] = createCert(pubKey, privKey);\n\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n\n    store.load(null, null);\n\n    store.setKeyEntry(\"privateKey\", privKey, null, chain);\n\n    if (!store.containsAlias(\"privateKey\")) {\n      fail(\"couldn't find alias privateKey\");\n    }\n\n    if (store.isCertificateEntry(\"privateKey\")) {\n      fail(\"cert identified as certificate entry\");\n    }\n\n    if (!store.isKeyEntry(\"privateKey\")) {\n      fail(\"cert not dentified as key entry\");\n    }\n\n    if (!\"privateKey\".equals(store.getCertificateAlias(chain[0]))) {\n      fail(\"Did not return alias for key certificate privateKey\");\n    }\n\n    store.store(new ByteArrayOutputStream(), passwd);\n\n    //\n    // no friendly name test\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(pkcs12noFriendly);\n\n    store.load(stream, noFriendlyPassword);\n\n    en = store.aliases();\n    pName = null;\n\n    while (en.hasMoreElements()) {\n      String n = (String) en.nextElement();\n\n      if (store.isKeyEntry(n)) {\n        pName = n;\n      }\n    }\n\n    ch = store.getCertificateChain(pName);\n\n    for (int i = 0; i != ch.length; i++) {\n      // System.out.println(ch[i]);\n    }\n\n    if (ch.length != 1) {\n      fail(\"no cert found in pkcs12noFriendly\");\n    }\n\n    //\n    // failure tests\n    //\n    ch = store.getCertificateChain(\"dummy\");\n\n    store.getCertificate(\"dummy\");\n\n    //\n    // storage test\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(pkcs12StorageIssue);\n\n    store.load(stream, storagePassword);\n\n    en = store.aliases();\n    pName = null;\n\n    while (en.hasMoreElements()) {\n      String n = (String) en.nextElement();\n\n      if (store.isKeyEntry(n)) {\n        pName = n;\n      }\n    }\n\n    ch = store.getCertificateChain(pName);\n    if (ch.length != 2) {\n      fail(\"Certificate chain wrong length\");\n    }\n\n    store.store(new ByteArrayOutputStream(), storagePassword);\n\n    //\n    // basic certificate check\n    //\n    store.setCertificateEntry(\"cert\", ch[1]);\n\n    if (!store.containsAlias(\"cert\")) {\n      fail(\"couldn't find alias cert\");\n    }\n\n    if (!store.isCertificateEntry(\"cert\")) {\n      fail(\"cert not identified as certificate entry\");\n    }\n\n    if (store.isKeyEntry(\"cert\")) {\n      fail(\"cert identified as key entry\");\n    }\n\n    if (!\"cert\".equals(store.getCertificateAlias(ch[1]))) {\n      fail(\"Did not return alias for certificate entry\");\n    }\n\n    //\n    // test of reading incorrect zero-length encoding\n    //\n    store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n    stream = new ByteArrayInputStream(pkcs12nopass);\n\n    store.load(stream, \"\".toCharArray());\n  }\n"}, {"dataset": "load", "exampleID": 4536, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [920], "initializationEnd": [967], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 973, "focalAPIEnd": 998, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXParameters(keyStore)"], "useStart": [1004, 1095], "useEnd": [1069, 1123], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/libcore/java/security/cert/OldPKIXParametersTest.java", "rawCode": "  /**\n   * Test #4 for <code>PKIXParameters(KeyStore)</code> constructor<br>\n   *\n   * @throws InvalidAlgorithmParameterException\n   * @throws KeyStoreException\n   */\n  @BrokenTest(\"Fails in CTS environment, but passes in CoreTestRunner\")\n  public final void testPKIXParametersKeyStore04() throws Exception {\n\n    KeyStore store = KeyStore.getInstance(\"PKCS12\");\n    KeyStoreTestPKCS12 k = new KeyStoreTestPKCS12();\n    ByteArrayInputStream stream = new ByteArrayInputStream(k.keyStoreData);\n\n    try {\n      PKIXParameters p = new PKIXParameters(store);\n    } catch (KeyStoreException e) {\n      // ok\n    }\n\n    store = KeyStore.getInstance(\"PKCS12\");\n    store.load(stream, new String(KeyStoreTestPKCS12.keyStorePassword).toCharArray());\n    stream.close();\n\n    try {\n      PKIXParameters p = new PKIXParameters(store);\n    } catch (InvalidAlgorithmParameterException e) {\n      // ok\n    }\n\n    KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n    keystore.load(null, null);\n    keystore.setCertificateEntry(\"test\", TestUtils.rootCertificateSS);\n\n    PKIXParameters p = new PKIXParameters(keystore);\n  }\n"}, {"dataset": "load", "exampleID": 4537, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [727], "initializationEnd": [774], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.setCertificateEntry(String,X509Certificate)"], "configurationStart": [793], "configurationEnd": [835], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 938, "focalAPIEnd": 962, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.isCertificateEntry(String)", "keyStore.getCertificate(String)"], "useStart": [1010, 1151, 1238], "useEnd": [1053, 1187, 1270], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /**\n   * @tests java.security.KeyStore#setCertificateEntry(java.lang.String,\n   *     java.security.cert.Certificate)\n   */\n  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"setCertificateEntry\",\n    args = {java.lang.String.class, java.security.cert.Certificate.class}\n  )\n  public void test_setCertificateEntryLjava_lang_StringLjava_security_cert_Certificate()\n      throws Exception {\n    // Test for method void\n    // java.security.KeyStore.setCertificateEntry(java.lang.String,\n    // java.security.cert.Certificate)\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert = (X509Certificate) cf.generateCertificate(certArray);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.setCertificateEntry(\"alias\", cert);\n      fail(\"expected KeyStoreException\");\n    } catch (KeyStoreException e) {\n      // ok\n    }\n\n    keyTest.load(null, null);\n\n    PublicKey pub = cert.getPublicKey();\n    keyTest.setCertificateEntry(\"alias1\", cert);\n    assertTrue(\n        \"the entry specified by the alias alias1 is not a certificate\",\n        keyTest.isCertificateEntry(\"alias1\"));\n    java.security.cert.Certificate resultCert = keyTest.getCertificate(\"alias1\");\n    assertTrue(\n        \"the public key of the certificate from getCertificate() did not equal the original certificate\",\n        resultCert.getPublicKey() == pub);\n  }\n"}, {"dataset": "load", "exampleID": 4538, "initialization": ["InputStream stream = new FileInputStream(*)"], "initializationStart": [207], "initializationEnd": [262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "stream!=null", "guardType": "IF {", "guardExpressionStart": 269, "guardExpressionEnd": 284, "guardBlockStart": 269, "guardBlockEnd": 470, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 293, "focalAPIEnd": 320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getCertificate(String)", "keyStore.getKey(String,char[])"], "useStart": [356, 422], "useEnd": [388, 463], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epall/selenium/tree/master/remote/server/src/java/cybervillains/ca/KeyStoreManager.java", "rawCode": "  private void reloadKeystore()\n      throws FileNotFoundException, IOException, NoSuchAlgorithmException, CertificateException,\n          KeyStoreException, UnrecoverableKeyException {\n    InputStream is = new FileInputStream(new File(root, _caPrivateKeystore));\n\n    if (is != null) {\n      _ks.load(is, _keystorepass);\n      _caCert = (X509Certificate) _ks.getCertificate(_caCertAlias);\n      _caPrivKey = (PrivateKey) _ks.getKey(_caPrivKeyAlias, _keypassword);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4539, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 244, "focalAPIEnd": 270, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.security.KeyStore.setCertificateEntry(String,Certificate)", "keyStore.security.KeyStore.getCertificate(String)"], "useStart": [277, 407], "useEnd": [328, 445], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_SetCertificate_CA_Success() throws Exception {\n    final CertificateFactory f = CertificateFactory.getInstance(\"X.509\");\n    final Certificate actual = f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));\n\n    mKeyStore.load(null, null);\n\n    mKeyStore.setCertificateEntry(TEST_ALIAS_1, actual);\n    assertAliases(new String[] {TEST_ALIAS_1});\n\n    Certificate retrieved = mKeyStore.getCertificate(TEST_ALIAS_1);\n\n    assertEquals(\"Retrieved certificate should be the same as the one inserted\", actual, retrieved);\n  }\n"}, {"dataset": "load", "exampleID": 4540, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 95, "focalAPIEnd": 121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.security.KeyStore.getCertificateAlias(Certificate)"], "useStart": [350], "useEnd": [387], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_GetCertificateAlias_NonExist_Empty_Failure() throws Exception {\n    mKeyStore.load(null, null);\n\n    CertificateFactory f = CertificateFactory.getInstance(\"X.509\");\n    Certificate actual = f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));\n\n    assertNull(\n        \"Stored certificate alias should not be found\", mKeyStore.getCertificateAlias(actual));\n  }\n"}, {"dataset": "load", "exampleID": 4541, "initialization": ["char[] password = String.toCharArray()", "InputStream stream = new FileInputStream(File)", "KeyStore keyStore = getInstance(*)"], "initializationStart": [346, 784, 829], "initializationEnd": [361, 809, 876], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 882, "focalAPIEnd": 905, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TrustManagerFactory.init(keyStore)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.store(OutputStream,char[])"], "useStart": [1098, 3073, 3175], "useEnd": [1110, 3108, 3200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biomart/biomart-rc7/tree/master/src/org/biomart/common/utils/InstallCert.java", "rawCode": "  public void test(String url) throws Exception {\n    String tmp = url.substring(8); // remove https://\n    int index0 = tmp.indexOf(\"/\");\n    tmp = tmp.substring(0, index0);\n\n    String[] c = tmp.split(\":\");\n    String host = c[0];\n    int port = Integer.parseInt(c[1]);\n    ;\n    char[] passphrase;\n\n    String p = \"changeit\";\n    passphrase = p.toCharArray();\n\n    File file = new File(\"jssecacerts\");\n    if (file.isFile() == false) {\n      char SEP = File.separatorChar;\n      File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\");\n      file = new File(dir, \"jssecacerts\");\n      if (file.isFile() == false) {\n        file = new File(dir, \"cacerts\");\n      }\n    }\n    System.out.println(\"Loading KeyStore \" + file + \"...\");\n    InputStream in = new FileInputStream(file);\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    ks.load(in, passphrase);\n    in.close();\n\n    SSLContext context = SSLContext.getInstance(\"TLS\");\n    TrustManagerFactory tmf =\n        TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n    tmf.init(ks);\n    X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0];\n    SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);\n    context.init(null, new TrustManager[] {tm}, null);\n    SSLSocketFactory factory = context.getSocketFactory();\n\n    System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\");\n    SSLSocket socket = (SSLSocket) factory.createSocket(host, port);\n    socket.setSoTimeout(10000);\n    try {\n      System.out.println(\"Starting SSL handshake...\");\n      socket.startHandshake();\n      socket.close();\n      System.out.println();\n      System.out.println(\"No errors, certificate is already trusted\");\n    } catch (SSLException e) {\n      System.out.println();\n      e.printStackTrace(System.out);\n    }\n\n    X509Certificate[] chain = tm.chain;\n    if (chain == null) {\n      System.out.println(\"Could not obtain server certificate chain\");\n      return;\n    }\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n    System.out.println();\n    System.out.println(\"Server sent \" + chain.length + \" certificate(s):\");\n    System.out.println();\n    MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    for (int i = 0; i < chain.length; i++) {\n      X509Certificate cert = chain[i];\n      System.out.println(\" \" + (i + 1) + \" Subject \" + cert.getSubjectDN());\n      System.out.println(\" Issuer \" + cert.getIssuerDN());\n      sha1.update(cert.getEncoded());\n      System.out.println(\" sha1 \" + toHexString(sha1.digest()));\n      md5.update(cert.getEncoded());\n      System.out.println(\" md5 \" + toHexString(md5.digest()));\n      System.out.println();\n    }\n\n    int n =\n        JOptionPane.showConfirmDialog(\n            null, \"add certificate to trusted keystore?\", \"Question\", JOptionPane.YES_NO_OPTION);\n\n    if (n != 0) return;\n\n    X509Certificate cert = chain[n];\n    String alias = host;\n    ks.setCertificateEntry(alias, cert);\n\n    OutputStream out = new FileOutputStream(\"jssecacerts\");\n    ks.store(out, passphrase);\n    out.close();\n\n    System.out.println();\n    System.out.println(cert);\n    System.out.println();\n    System.out.println(\"Added certificate to keystore 'jssecacerts' using alias '\" + alias + \"'\");\n  }\n"}, {"dataset": "load", "exampleID": 4542, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 96, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setEntry(String,TrustedCertificateEntry,*)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.setEntry(String,TrustedCertificateEntry,*)", "keyStore.getEntry(String,KeyStore.PasswordProtection)"], "useStart": [431, 517, 1307, 1393], "useEnd": [488, 555, 1364, 1431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_SetEntry_CAEntry_Overwrites_CAEntry_Success() throws Exception {\n    mKeyStore.load(null, null);\n\n    final CertificateFactory f = CertificateFactory.getInstance(\"X.509\");\n\n    // Insert TrustedCertificateEntry\n    {\n      final Certificate caCert = f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));\n\n      TrustedCertificateEntry expectedCertEntry = new TrustedCertificateEntry(caCert);\n      mKeyStore.setEntry(TEST_ALIAS_1, expectedCertEntry, null);\n\n      Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n      assertNotNull(\"Retrieved entry should exist\", actualEntry);\n      assertTrue(\n          \"Retrieved entry should be of type TrustedCertificateEntry\",\n          actualEntry instanceof TrustedCertificateEntry);\n      TrustedCertificateEntry actualCertEntry = (TrustedCertificateEntry) actualEntry;\n      assertEquals(\n          \"Stored and retrieved certificates should be the same\",\n          expectedCertEntry.getTrustedCertificate(),\n          actualCertEntry.getTrustedCertificate());\n    }\n\n    // Replace with TrustedCertificateEntry of USER\n    {\n      final Certificate userCert = f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));\n\n      TrustedCertificateEntry expectedUserEntry = new TrustedCertificateEntry(userCert);\n      mKeyStore.setEntry(TEST_ALIAS_1, expectedUserEntry, null);\n\n      Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n      assertNotNull(\"Retrieved entry should exist\", actualEntry);\n      assertTrue(\n          \"Retrieved entry should be of type TrustedCertificateEntry\",\n          actualEntry instanceof TrustedCertificateEntry);\n      TrustedCertificateEntry actualUserEntry = (TrustedCertificateEntry) actualEntry;\n      assertEquals(\n          \"Stored and retrieved certificates should be the same\",\n          expectedUserEntry.getTrustedCertificate(),\n          actualUserEntry.getTrustedCertificate());\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4543, "initialization": ["KeyStore keyStore = getInstance(String)", "InputStream stream = getApplicationContext()"], "initializationStart": [107, 207], "initializationEnd": [134, 230], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 385, "focalAPIEnd": 472, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new AdditionalKeyStoresSSLSocketFactory(keyStore)"], "useStart": [534], "useEnd": [577], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 482, "finallyExpressionEnd": 490, "finallyBlockStart": 482, "finallyBlockEnd": 519, "cleanUpCallStart": [500], "cleanUpCallEnd": [510], "url": "https://github.com/payutc/pauline/tree/master/src/fr/utc/assos/payutc/PaulineActivity.java", "rawCode": "  protected SSLSocketFactory createAdditionalCertsSSLSocketFactory() {\n    try {\n      final KeyStore ks = KeyStore.getInstance(\"BKS\");\n\n      // the bks file we generated above\n      final InputStream in = getApplicationContext().getResources().openRawResource(R.raw.mystore);\n      try {\n        // don't forget to put the password used above in strings.xml/mystore_password\n        ks.load(in, getApplicationContext().getString(R.string.mystore_password).toCharArray());\n      } finally {\n        in.close();\n      }\n\n      return new AdditionalKeyStoresSSLSocketFactory(ks);\n\n      /*TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n      tmf.init(ks);\n      SSLContext context = SSLContext.getInstance(\"SSL\");\n      context.init(null, tmf.getTrustManagers(), null);\n      return context.getSocketFactory();*/\n\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4544, "initialization": ["KeyStore keyStore = getInstance(String)", "char[] password = PasswordCallback.getPassword()", "char[] password = String.toCharArray()", "InputStream stream = URL.openStream()"], "initializationStart": [1970, 2292, 2340, 2422], "initializationEnd": [1998, 2309, 2364, 2438], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 2444, "focalAPIEnd": 2479, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getKey(String,char[])", "keyStore.getKey(String,char[])", "keyStore.getKey(String,char[])", "keyStore.getCertificateChain(String)"], "useStart": [2854, 3263, 3378, 3627], "useEnd": [2888, 3297, 3412, 3659], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdkoftinoff/mb-linux-msli/tree/master/uClinux-dist/lib/classpath/tools/gnu/classpath/tools/jarsigner/Main.java", "rawCode": "  /**\n   * After processing the command line arguments, this method is invoked to process the parameters\n   * which may have been encountered among the actual arguments, and which are specific to the\n   * signing action of the tool.\n   *\n   * @throws KeyStoreException if no implementation of the designated (or default type) of a key\n   *     store is availabe.\n   * @throws IOException if an I/O related exception occurs during the process.\n   * @throws NoSuchAlgorithmException if an implementation of an algorithm used by the key store is\n   *     not available.\n   * @throws CertificateException if an exception occurs while reading a certificate from the key\n   *     store.\n   * @throws UnsupportedCallbackException if no implementation of a password callback is available.\n   * @throws UnrecoverableKeyException if the wrong password was used to unlock the key store.\n   * @throws SecurityException if the designated alias is not known to the key store or is not an\n   *     Alias of a Key Entry.\n   */\n  private void setupSigningParams()\n      throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException,\n          UnsupportedCallbackException, UnrecoverableKeyException {\n    if (Configuration.DEBUG)\n      log.entering(this.getClass().getName(), \"setupSigningParams\"); // $NON-NLS-1$\n    if (ksURL == null || ksURL.trim().length() == 0) {\n      String userHome = SystemProperties.getProperty(\"user.home\"); // $NON-NLS-1$\n      if (userHome == null || userHome.trim().length() == 0)\n        throw new SecurityException(Messages.getString(\"Main.85\")); // $NON-NLS-1$\n\n      ksURL = \"file:\" + userHome.trim() + \"/.keystore\"; // $NON-NLS-1$ //$NON-NLS-2$\n    } else {\n      ksURL = ksURL.trim();\n      if (ksURL.indexOf(\":\") == -1) // $NON-NLS-1$\n      ksURL = \"file:\" + ksURL; // $NON-NLS-1$\n    }\n\n    if (ksType == null || ksType.trim().length() == 0) ksType = KeyStore.getDefaultType();\n    else ksType = ksType.trim();\n\n    store = KeyStore.getInstance(ksType);\n\n    if (ksPassword == null) {\n      // ask the user to provide one\n      PasswordCallback pcb =\n          new PasswordCallback(\n              Messages.getString(\"Main.92\"), // $NON-NLS-1$\n              false);\n      getCallbackHandler().handle(new Callback[] {pcb});\n      ksPasswordChars = pcb.getPassword();\n    } else ksPasswordChars = ksPassword.toCharArray();\n\n    URL url = new URL(ksURL);\n    InputStream stream = url.openStream();\n    store.load(stream, ksPasswordChars);\n\n    if (!store.containsAlias(alias))\n      throw new SecurityException(Messages.getFormattedString(\"Main.6\", alias)); // $NON-NLS-1$\n\n    if (!store.isKeyEntry(alias))\n      throw new SecurityException(Messages.getFormattedString(\"Main.95\", alias)); // $NON-NLS-1$\n\n    Key key;\n    if (password == null) {\n      passwordChars = ksPasswordChars;\n      try {\n        key = store.getKey(alias, passwordChars);\n      } catch (UnrecoverableKeyException x) {\n        // ask the user to provide one\n        String prompt = Messages.getFormattedString(\"Main.97\", alias); // $NON-NLS-1$\n        PasswordCallback pcb = new PasswordCallback(prompt, false);\n        getCallbackHandler().handle(new Callback[] {pcb});\n        passwordChars = pcb.getPassword();\n        // take 2\n        key = store.getKey(alias, passwordChars);\n      }\n    } else {\n      passwordChars = password.toCharArray();\n      key = store.getKey(alias, passwordChars);\n    }\n\n    if (!(key instanceof PrivateKey))\n      throw new SecurityException(Messages.getFormattedString(\"Main.99\", alias)); // $NON-NLS-1$\n\n    signerPrivateKey = (PrivateKey) key;\n    signerCertificateChain = store.getCertificateChain(alias);\n    if (Configuration.DEBUG) log.fine(String.valueOf(signerCertificateChain));\n\n    if (sigFileName == null) sigFileName = alias;\n\n    sigFileName = sigFileName.toUpperCase(EN_US_LOCALE);\n    if (sigFileName.length() > 8) sigFileName = sigFileName.substring(0, 8);\n\n    char[] chars = sigFileName.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n      char c = chars[i];\n      if (!(Character.isLetter(c) || Character.isDigit(c) || c == '_' || c == '-')) chars[i] = '_';\n    }\n\n    sigFileName = new String(chars);\n\n    if (signedJarFileName == null) signedJarFileName = jarFileName;\n\n    if (Configuration.DEBUG)\n      log.exiting(this.getClass().getName(), \"setupSigningParams\"); // $NON-NLS-1$\n  }\n"}, {"dataset": "load", "exampleID": 4545, "initialization": ["InputStream stream = new FileInputStream(String)", "KeyStore keyStore = getInstance(String)"], "initializationStart": [207, 284], "initializationEnd": [236, 314], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 320, "focalAPIEnd": 385, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addKeyStore(keyStore,String)"], "useStart": [398], "useEnd": [438], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SSilence/scotty/tree/master/scotty-commons/src/main/java/org/owasp/webscarab/httpclient/AbstractCertificateRepository.java", "rawCode": "  public int loadPKCS12Certificate(String filename, String ksPassword)\n      throws IOException, KeyStoreException, CertificateException, NoSuchAlgorithmException {\n    // Open the file\n    InputStream is = new FileInputStream(filename);\n\n    // create the keystore\n    KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n    ks.load(is, ksPassword == null ? null : ksPassword.toCharArray());\n    return addKeyStore(ks, \"PKCS#12 - \" + filename);\n  }\n"}, {"dataset": "load", "exampleID": 4546, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [177], "initializationEnd": [224], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.getEntry(String,KeyStore.PasswordProtection)"], "configurationStart": [243], "configurationEnd": [318], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 388, "focalAPIEnd": 415, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.entryInstanceOf(String,*)", "keyStore.entryInstanceOf(String,*)"], "useStart": [434, 577, 629, 741, 1346, 1560, 1602, 1656, 1757, 1858, 2127, 2770], "useEnd": [504, 610, 657, 772, 1375, 1596, 1638, 1685, 1787, 1888, 2192, 2835], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SVMP/android_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#getEntry(String, KeyStore.ProtectionParameter) */\n  public void test_getEntry() throws Exception {\n    String type = \"DSA\";\n\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.getEntry(\"anAlias\", new KeyStore.PasswordProtection(new char[] {}));\n      fail();\n    } catch (KeyStoreException expected) {\n    }\n\n    keyTest.load(null, pssWord);\n\n    try {\n      keyTest.getEntry(null, new KeyStore.PasswordProtection(new char[] {}));\n      fail();\n    } catch (NullPointerException expected) {\n    }\n\n    keyTest.getEntry(\"anAlias\", null);\n\n    try {\n      keyTest.getEntry(null, null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n\n    assertNull(keyTest.getEntry(\"alias\", null));\n\n    Certificate[] chain = {\n      new MyCertificate(type, testEncoding), new MyCertificate(type, testEncoding)\n    };\n\n    DSAPrivateKey privateKey1 =\n        (DSAPrivateKey)\n            KeyFactory.getInstance(type)\n                .generatePrivate(\n                    new DSAPrivateKeySpec(\n                        new BigInteger(\"1\"),\n                        new BigInteger(\"2\"),\n                        new BigInteger(\"3\"),\n                        new BigInteger(\"4\")));\n\n    KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pssWord);\n    assertNull(keyTest.getEntry(\"alias\", pp));\n\n    KeyStore.PrivateKeyEntry pke1 = new KeyStore.PrivateKeyEntry(getPrivateKey(), chain);\n    KeyStore.PrivateKeyEntry pke2 = new KeyStore.PrivateKeyEntry(privateKey1, chain);\n\n    keyTest.setEntry(\"alias1\", pke1, pp);\n    keyTest.setEntry(\"alias2\", pke2, pp);\n\n    assertNull(keyTest.getEntry(\"alias\", pp));\n    KeyStore.PrivateKeyEntry pkeActual1 = (KeyStore.PrivateKeyEntry) keyTest.getEntry(\"alias1\", pp);\n    KeyStore.PrivateKeyEntry pkeActual2 = (KeyStore.PrivateKeyEntry) keyTest.getEntry(\"alias2\", pp);\n\n    assertTrue(Arrays.equals(chain, pkeActual1.getCertificateChain()));\n    assertEquals(getPrivateKey(), pkeActual1.getPrivateKey());\n    assertEquals(new MyCertificate(type, testEncoding), pkeActual1.getCertificate());\n    assertTrue(keyTest.entryInstanceOf(\"alias1\", KeyStore.PrivateKeyEntry.class));\n\n    assertTrue(Arrays.equals(chain, pkeActual2.getCertificateChain()));\n    DSAPrivateKey entryPrivateKey = (DSAPrivateKey) pkeActual2.getPrivateKey();\n    assertEquals(privateKey1.getX(), entryPrivateKey.getX());\n    assertEquals(privateKey1.getParams().getG(), entryPrivateKey.getParams().getG());\n    assertEquals(privateKey1.getParams().getP(), entryPrivateKey.getParams().getP());\n    assertEquals(privateKey1.getParams().getQ(), entryPrivateKey.getParams().getQ());\n\n    assertEquals(new MyCertificate(type, testEncoding), pkeActual2.getCertificate());\n    assertTrue(keyTest.entryInstanceOf(\"alias2\", KeyStore.PrivateKeyEntry.class));\n  }\n"}, {"dataset": "load", "exampleID": 4547, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [113], "initializationEnd": [140], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 146, "focalAPIEnd": 165, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/guoliqiang/coding/tree/master/third_part/hadoop_src/hadoop-2.0.5-alpha-src/hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/security/ssl/KeyStoreTestUtil.java", "rawCode": "  private static KeyStore createEmptyKeyStore() throws GeneralSecurityException, IOException {\n    KeyStore ks = KeyStore.getInstance(\"JKS\");\n    ks.load(null, null); // initialize\n    return ks;\n  }\n"}, {"dataset": "load", "exampleID": 4548, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [324], "initializationEnd": [371], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 377, "focalAPIEnd": 401, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,*)"], "useStart": [843, 895, 947, 1038], "useEnd": [889, 941, 993, 1096], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /**\n   * Test #4 for <code>PKIXBuilderParameters(KeyStore, CertSelector)</code> constructor<br>\n   * Assertion: <code>NullPointerException</code> - if the <code>keystore</code> is <code>null\n   * </code>\n   */\n  public final void testPKIXBuilderParametersKeyStoreCertSelector04() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    ByteArrayInputStream certArray = new ByteArrayInputStream(certificate.getBytes());\n\n    ByteArrayInputStream certArray2 = new ByteArrayInputStream(certificate2.getBytes());\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    try {\n      PKIXBuilderParameters p = new PKIXBuilderParameters(keyTest, new X509CertSelector());\n      assertEquals(3, p.getTrustAnchors().size());\n      assertEquals(5, p.getMaxPathLength());\n    } catch (Exception e) {\n      fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4549, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [372], "initializationEnd": [419], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 425, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new PKIXBuilderParameters(keyStore,*)"], "useStart": [467], "useEnd": [525], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /**\n   * Test #3 for <code>PKIXBuilderParameters(KeyStore, CertSelector)</code> constructor<br>\n   * Assertion: <code>InvalidAlgorithmParameterException</code> - if the <code>keystore</code> does\n   * not contain at least one trusted certificate entry\n   */\n  public final void testPKIXBuilderParametersKeyStoreCertSelector03() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n    try {\n      new PKIXBuilderParameters(keyTest, new X509CertSelector());\n      fail(\"InvalidAlgorithmParameterException expected\");\n    } catch (InvalidAlgorithmParameterException e) {\n      // expected\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4550, "initialization": ["KeyStore keyStore = getInstance(String,String)"], "initializationStart": [5375], "initializationEnd": [5411], "hasTryCatch": 1, "exceptionType": "KeyStoreException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 5344, "tryExpressionEnd": 5348, "tryBlockStart": 5344, "tryBlockEnd": 6595, "catchExpressionStart": 6009, "catchExpressionEnd": 6037, "catchBlockStart": 6009, "catchBlockEnd": 6091, "exceptionHandlingCallStart": [6047], "exceptionHandlingCallEnd": [6066], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 5421, "focalAPIEnd": 5443, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["newCertificate(keyStore,*)", "newApplicationPrivateKey(keyStore,*)"], "useStart": [5534, 5675], "useEnd": [5642, 5851], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnip91/proactive-component-monitoring/tree/master/dev/security/keystore/GenKeystore.java", "rawCode": "  public static void main(String[] args) {\n    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null) {\n      Security.addProvider(new BouncyCastleProvider());\n    }\n\n    KeyPairGenerator keygen;\n    try {\n      keygen = KeyPairGenerator.getInstance(\"RSA\", \"BC\");\n    } catch (NoSuchAlgorithmException e1) {\n      e1.printStackTrace();\n      return;\n    } catch (NoSuchProviderException e1) {\n      e1.printStackTrace();\n      return;\n    }\n    keygen.initialize(512);\n\n    List<X509Certificate> certs = new ArrayList<X509Certificate>();\n    List<EntityType> types = new ArrayList<EntityType>();\n    List<String> names = new ArrayList<String>();\n    List<KeyPair> pairs = new ArrayList<KeyPair>();\n    int i = 0;\n    try {\n      // domain fr\n      names.add(\"CN=fr\");\n      types.add(EntityType.DOMAIN);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genSelfCert(\n              names.get(i), 360, null, pairs.get(i).getPrivate(), pairs.get(i).getPublic(), true));\n      i++;\n\n      // domain inria\n      names.add(\"CN=inria\");\n      types.add(EntityType.DOMAIN);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 1),\n              pairs.get(i - 1).getPrivate(),\n              pairs.get(i - 1).getPublic()));\n      i++;\n\n      // domain ProActive\n      names.add(\"CN=proActive\");\n      types.add(EntityType.DOMAIN);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 1),\n              pairs.get(i - 1).getPrivate(),\n              pairs.get(i - 1).getPublic()));\n      i++;\n\n      // user nhouillo\n      names.add(\"CN=nhouillo\");\n      types.add(EntityType.USER);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 1),\n              pairs.get(i - 1).getPrivate(),\n              pairs.get(i - 1).getPublic()));\n      i++;\n\n      // user acontes\n      names.add(\"CN=acontes\");\n      types.add(EntityType.USER);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 2),\n              pairs.get(i - 2).getPrivate(),\n              pairs.get(i - 2).getPublic()));\n      i++;\n\n      // app garden1 from nhouillo\n      names.add(\"CN=Garden1\");\n      types.add(EntityType.APPLICATION);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 2),\n              pairs.get(i - 2).getPrivate(),\n              pairs.get(i - 2).getPublic()));\n      i++;\n\n      // app garden2 from acontes\n      names.add(\"CN=Garden2\");\n      types.add(EntityType.APPLICATION);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 2),\n              pairs.get(i - 2).getPrivate(),\n              pairs.get(i - 2).getPublic()));\n      i++;\n\n      // app garden3 from nhouillo\n      names.add(\"CN=Garden3\");\n      types.add(EntityType.APPLICATION);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 4),\n              pairs.get(i - 4).getPrivate(),\n              pairs.get(i - 4).getPublic()));\n      i++;\n\n      // app garden4 from acontes\n      names.add(\"CN=Garden4\");\n      types.add(EntityType.APPLICATION);\n      pairs.add(keygen.genKeyPair());\n      certs.add(\n          CertTools.genCert(\n              names.get(i),\n              360,\n              null,\n              pairs.get(i).getPrivate(),\n              pairs.get(i).getPublic(),\n              true,\n              names.get(i - 4),\n              pairs.get(i - 4).getPrivate(),\n              pairs.get(i - 4).getPublic()));\n    } catch (InvalidKeyException e) {\n      e.printStackTrace();\n      return;\n    } catch (CertificateEncodingException e) {\n      e.printStackTrace();\n      return;\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n      return;\n    } catch (SignatureException e) {\n      e.printStackTrace();\n      return;\n    } catch (IllegalStateException e) {\n      e.printStackTrace();\n      return;\n    }\n\n    for (int k = 1; k < 5; k++) {\n      try {\n        KeyStore store = KeyStore.getInstance(\"PKCS12\", \"BC\");\n        store.load(null, null);\n        for (int j = 0; j < certs.size(); j++) {\n          if (j != k + 4) {\n            KeyStoreTools.newCertificate(\n                store, new TypedCertificate(certs.get(j), types.get(j), null));\n          }\n        }\n\n        KeyStoreTools.newApplicationPrivateKey(\n            store,\n            new TypedCertificate(\n                certs.get(k + 4), types.get(k + 4), pairs.get(k + 4).getPrivate()));\n\n        File file = new File(\"dev/security/keystores/keystore\" + k + \".p12\");\n        store.store(new FileOutputStream(file), \"ha\".toCharArray());\n      } catch (KeyStoreException e) {\n        e.printStackTrace();\n        return;\n      } catch (NoSuchProviderException e) {\n        e.printStackTrace();\n        return;\n      } catch (NoSuchAlgorithmException e) {\n        e.printStackTrace();\n        return;\n      } catch (CertificateException e) {\n        e.printStackTrace();\n        return;\n      } catch (FileNotFoundException e) {\n        e.printStackTrace();\n        return;\n      } catch (IOException e) {\n        e.printStackTrace();\n        return;\n      } catch (UnrecoverableKeyException e) {\n        e.printStackTrace();\n      }\n    }\n\n    System.out.println(\"==========oki==========\");\n\n    System.exit(0);\n  }\n"}, {"dataset": "load", "exampleID": 4551, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [967], "initializationEnd": [1014], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])"], "configurationStart": [1033], "configurationEnd": [1089], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1192, "focalAPIEnd": 1216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.isKeyEntry(String)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])"], "useStart": [1223, 1366, 1414], "useEnd": [1279, 1394, 1486], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /**\n   * @tests java.security.KeyStore#setKeyEntry(java.lang.String, java.security.Key, char[],\n   *     java.security.cert.Certificate[])\n   */\n  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"setKeyEntry\",\n    args = {\n      java.lang.String.class,\n      java.security.Key.class,\n      char[].class,\n      java.security.cert.Certificate[].class\n    }\n  )\n  public void\n      test_setKeyEntryLjava_lang_StringLjava_security_Key$C$Ljava_security_cert_Certificate()\n          throws Exception {\n\n    // Test for method void\n    // java.security.KeyStore.setKeyEntry(java.lang.String,\n    // java.security.Key, char [], java.security.cert.Certificate [])\n\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.setKeyEntry(\"alias3\", privateKey, pssWord, cert);\n      fail(\"expected KeyStoreException\");\n    } catch (KeyStoreException e) {\n      // ok\n    }\n\n    keyTest.load(null, null);\n\n    keyTest.setKeyEntry(\"alias3\", privateKey, pssWord, cert);\n    assertTrue(\n        \"the entry specified by the alias alias3 is not a keyEntry\", keyTest.isKeyEntry(\"alias3\"));\n\n    try {\n      keyTest.setKeyEntry(\"alias4\", privateKey, pssWord, new Certificate[] {});\n      fail(\"expected IllegalArgumentException\");\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4552, "initialization": ["KeyStore keyStore = getInstance(*)", "InputStream stream = new FileInputStream(*)"], "initializationStart": [693, 862], "initializationEnd": [764, 932], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "error(*,*)"], "tryExpressionStart": 445, "tryExpressionEnd": 449, "tryBlockStart": 445, "tryBlockEnd": 1795, "catchExpressionStart": 1663, "catchExpressionEnd": 1689, "catchBlockStart": 1663, "catchBlockEnd": 1735, "exceptionHandlingCallStart": [1710, 1697], "exceptionHandlingCallEnd": [1724, 1728], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1021, "focalAPIEnd": 1128, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.size()", "init(keyStore,*)"], "useStart": [1179, 1390], "useEnd": [1194, 1504], "hasFinally": 1, "cleanUpCall": ["closeQuietly(InputStream)"], "finallyExpressionStart": 1736, "finallyExpressionEnd": 1744, "finallyBlockStart": 1736, "finallyBlockEnd": 1795, "cleanUpCallStart": [1752], "cleanUpCallEnd": [1788], "url": "https://github.com/Jasig/java-cas-client/tree/master/cas-client-core/src/main/java/org/jasig/cas/client/ssl/HttpsURLConnectionFactory.java", "rawCode": "  /**\n   * Creates a {@link SSLSocketFactory} based on the configuration specified\n   *\n   * <p>Sample properties file:\n   *\n   * <pre>\n   * protocol=TLS\n   * keyStoreType=JKS\n   * keyStorePath=/var/secure/location/.keystore\n   * keyStorePass=changeit\n   * certificatePassword=aGoodPass\n   * </pre>\n   *\n   * @return the {@link SSLSocketFactory}\n   */\n  private SSLSocketFactory createSSLSocketFactory() {\n    InputStream keyStoreIS = null;\n    try {\n      final SSLContext sslContext =\n          SSLContext.getInstance(this.sslConfiguration.getProperty(\"protocol\", \"SSL\"));\n\n      if (this.sslConfiguration.getProperty(\"keyStoreType\") != null) {\n        final KeyStore keyStore =\n            KeyStore.getInstance(this.sslConfiguration.getProperty(\"keyStoreType\"));\n        if (this.sslConfiguration.getProperty(\"keyStorePath\") != null) {\n          keyStoreIS = new FileInputStream(this.sslConfiguration.getProperty(\"keyStorePath\"));\n          if (this.sslConfiguration.getProperty(\"keyStorePass\") != null) {\n            keyStore.load(\n                keyStoreIS, this.sslConfiguration.getProperty(\"keyStorePass\").toCharArray());\n            LOGGER.debug(\"Keystore has {} keys\", keyStore.size());\n            final KeyManagerFactory keyManager =\n                KeyManagerFactory.getInstance(\n                    this.sslConfiguration.getProperty(\"keyManagerType\", \"SunX509\"));\n            keyManager.init(\n                keyStore, this.sslConfiguration.getProperty(\"certificatePassword\").toCharArray());\n            sslContext.init(keyManager.getKeyManagers(), null, null);\n            return sslContext.getSocketFactory();\n          }\n        }\n      }\n\n    } catch (final Exception e) {\n      LOGGER.error(e.getMessage(), e);\n    } finally {\n      CommonUtils.closeQuietly(keyStoreIS);\n    }\n    return null;\n  }\n"}, {"dataset": "load", "exampleID": 4553, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [489], "initializationEnd": [536], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.aliases()"], "configurationStart": [555], "configurationEnd": [572], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 642, "focalAPIEnd": 666, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.aliases()"], "useStart": [770, 838, 906, 1016], "useEnd": [816, 884, 952, 1033], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codefireX/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#aliases() */\n  public void test_aliases() throws Exception {\n    // Test for method java.util.Enumeration\n    // java.security.KeyStore.aliases()\n    // NOT COMPATIBLE WITH PCS#12\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.aliases();\n      fail();\n    } catch (KeyStoreException expected) {\n    }\n\n    keyTest.load(null, null);\n\n    // KeyStore keyTest =\n    // KeyStore.getInstance(KeyStore.getDefaultType());\n    // alias 1\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n\n    // alias 2\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n\n    // alias 3\n    keyTest.setCertificateEntry(\"alias3\", cert[0]);\n\n    // obtaining the aliase\n    Enumeration<String> aliase = keyTest.aliases();\n    Set<String> alia = new HashSet<String>();\n    int i = 0;\n    while (aliase.hasMoreElements()) {\n      alia.add(aliase.nextElement());\n      i++;\n    }\n    assertEquals(\"the wrong aliases were returned\", i, 3);\n    assertTrue(\"the wrong aliases were returned\", alia.contains(\"alias1\"));\n    assertTrue(\"the wrong aliases were returned\", alia.contains(\"alias2\"));\n    assertTrue(\"the wrong aliases were returned\", alia.contains(\"alias3\"));\n  }\n"}, {"dataset": "load", "exampleID": 4554, "initialization": ["char[] password = String.toCharArray()", "InputStream stream = new FileInputStream(File)", "KeyStore keyStore = getInstance(*)"], "initializationStart": [364, 915, 960], "initializationEnd": [379, 940, 1007], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1013, "focalAPIEnd": 1036, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TrustManagerFactory.init(keyStore)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.store(OutputStream,char[])"], "useStart": [1229, 3378, 3471], "useEnd": [1241, 3413, 3496], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/caaers-docs/tree/master/archives/Phase-3/2.5-RC3/InstallCert.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    String host;\n    int port;\n    char[] passphrase;\n    if ((args.length == 1) || (args.length == 2)) {\n      String[] c = args[0].split(\":\");\n      host = c[0];\n      port = (c.length == 1) ? 443 : Integer.parseInt(c[1]);\n      String p = (args.length == 1) ? \"changeit\" : args[1];\n      passphrase = p.toCharArray();\n    } else {\n      System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\");\n      return;\n    }\n\n    File file = new File(\"jssecacerts\");\n    if (file.isFile() == false) {\n      char SEP = File.separatorChar;\n      File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\");\n      file = new File(dir, \"jssecacerts\");\n      if (file.isFile() == false) {\n        file = new File(dir, \"cacerts\");\n      }\n    }\n    System.out.println(\"Loading KeyStore \" + file + \"...\");\n    InputStream in = new FileInputStream(file);\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    ks.load(in, passphrase);\n    in.close();\n\n    SSLContext context = SSLContext.getInstance(\"TLS\");\n    TrustManagerFactory tmf =\n        TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n    tmf.init(ks);\n    X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0];\n    SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);\n    context.init(null, new TrustManager[] {tm}, null);\n    SSLSocketFactory factory = context.getSocketFactory();\n\n    System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\");\n    SSLSocket socket = (SSLSocket) factory.createSocket(host, port);\n    socket.setSoTimeout(10000);\n    try {\n      System.out.println(\"Starting SSL handshake...\");\n      socket.startHandshake();\n      socket.close();\n      System.out.println();\n      System.out.println(\"No errors, certificate is already trusted\");\n    } catch (SSLException e) {\n      System.out.println();\n      e.printStackTrace(System.out);\n    }\n\n    X509Certificate[] chain = tm.chain;\n    if (chain == null) {\n      System.out.println(\"Could not obtain server certificate chain\");\n      return;\n    }\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n    System.out.println();\n    System.out.println(\"Server sent \" + chain.length + \" certificate(s):\");\n    System.out.println();\n    MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    for (int i = 0; i < chain.length; i++) {\n      X509Certificate cert = chain[i];\n      System.out.println(\" \" + (i + 1) + \" Subject \" + cert.getSubjectDN());\n      System.out.println(\" Issuer \" + cert.getIssuerDN());\n      sha1.update(cert.getEncoded());\n      System.out.println(\" sha1 \" + toHexString(sha1.digest()));\n      md5.update(cert.getEncoded());\n      System.out.println(\" md5 \" + toHexString(md5.digest()));\n      System.out.println();\n    }\n\n    System.out.println(\"Enter certificate to add to trusted keystore or 'q' to quit: [1]\");\n    String line = reader.readLine().trim();\n    int k;\n    try {\n      k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1;\n    } catch (NumberFormatException e) {\n      System.out.println(\"KeyStore not changed\");\n      return;\n    }\n\n    X509Certificate cert = chain[k];\n    String alias = host + \"-\" + (k + 1);\n    ks.setCertificateEntry(alias, cert);\n\n    OutputStream out = new FileOutputStream(file);\n    ks.store(out, passphrase);\n    out.close();\n\n    System.out.println();\n    System.out.println(cert);\n    System.out.println();\n    System.out.println(\"Added certificate to keystore 'cacerts' using alias '\" + alias + \"'\");\n  }\n"}, {"dataset": "load", "exampleID": 4555, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [138], "initializationEnd": [165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 171, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,SecretKey,char[],*)"], "useStart": [240], "useEnd": [293], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/sun/security/provider/KeyStore/TestJKSWithSecretKey.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    SecretKey key = new SecretKeySpec(new byte[8], \"DES\");\n\n    KeyStore ks = KeyStore.getInstance(\"JKS\");\n    ks.load(null, passwd);\n\n    try {\n      // store the SecretKey\n      ks.setKeyEntry(\"test_encrypt_key\", key, passwd, null);\n      throw new Exception(\n          \"Should throw KeyStoreException when \" + \"storing SecretKey into JKS keystores\");\n    } catch (KeyStoreException kse) {\n      // expected exception thrown; swallow\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4556, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [164], "initializationEnd": [191], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 197, "focalAPIEnd": 229, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)"], "useStart": [658, 731], "useEnd": [725, 801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aiQon/crowdshare/tree/master/src/de/cased/mobilecloud/SSLContextHolder.java", "rawCode": "  private KeyStore loadTrustStorePEM()\n      throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {\n    KeyStore localTrustStore = KeyStore.getInstance(\"BKS\");\n    localTrustStore.load(null, null);\n    X509Certificate regServerCert =\n        Utilities.loadCertificate(\n            new File(\n                config.getCertificateDir(),\n                config.getProperties().getProperty(\"server_cert_dest_loc\")));\n\n    X509Certificate signCert =\n        Utilities.loadCertificate(\n            new File(\n                config.getCertificateDir(),\n                config.getProperties().getProperty(\"ca_cert_dest_loc\")));\n\n    localTrustStore.setCertificateEntry(\"RegServerCert\", regServerCert);\n    localTrustStore.setCertificateEntry(\"ClientCertRootOfTrust\", signCert);\n\n    return localTrustStore;\n  }\n"}, {"dataset": "load", "exampleID": 4557, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [433], "initializationEnd": [468], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["warning(String)", "new ConfigurationException(String)"], "tryExpressionStart": 298, "tryExpressionEnd": 302, "tryBlockStart": 298, "tryBlockEnd": 2147, "catchExpressionStart": 512, "catchExpressionEnd": 547, "catchBlockStart": 512, "catchBlockEnd": 681, "exceptionHandlingCallStart": [555, 610], "exceptionHandlingCallEnd": [596, 674], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 476, "focalAPIEnd": 504, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chenatu/ccnx-underlay/tree/master/javasrc/src/org/ccnx/ccn/impl/security/keys/BasicKeyManager.java", "rawCode": "  /**\n   * Reads in a user's private/public keys and certificate from a key store Must have set _password.\n   *\n   * @param in input stream\n   * @throws ConfigurationException\n   */\n  protected KeyStore readKeyStore(InputStream in) throws ConfigurationException {\n    KeyStore keyStore = null;\n    try {\n      if (Log.isLoggable(Log.FAC_KEYS, Level.INFO))\n        Log.info(Log.FAC_KEYS, \"Loading CCN key store...\");\n      keyStore = KeyStore.getInstance(_keyStoreType);\n      keyStore.load(in, _password);\n    } catch (NoSuchAlgorithmException e) {\n      Log.warning(\"Cannot load keystore: \" + e);\n      throw new ConfigurationException(\"Cannot load default keystore: \" + e);\n    } catch (CertificateException e) {\n      Log.warning(\"Cannot load keystore with no certificates.\");\n      throw new ConfigurationException(\"Cannot load keystore with no certificates.\");\n    } catch (IOException e) {\n      Log.warning(\"Cannot open existing key store: \" + e);\n      try {\n        in.reset();\n        java.io.FileOutputStream bais = new java.io.FileOutputStream(\"KeyDump.p12\");\n        try {\n          byte[] tmp = new byte[2048];\n          int read = in.read(tmp);\n          while (read > 0) {\n            bais.write(tmp, 0, read);\n            read = in.read(tmp);\n          }\n          bais.flush();\n        } finally {\n          bais.close();\n        }\n      } catch (IOException e1) {\n        Log.info(Log.FAC_KEYS, \"Another exception: \" + e1);\n      }\n      throw new ConfigurationException(e);\n    } catch (KeyStoreException e) {\n      Log.warning(\n          \"Cannot create instance of preferred key store type: \"\n              + _keyStoreType\n              + \" \"\n              + e.getMessage());\n      Log.warningStackTrace(e);\n      throw new ConfigurationException(\n          \"Cannot create instance of default key store type: \"\n              + _keyStoreType\n              + \" \"\n              + e.getMessage());\n    } finally {\n      if (null != in)\n        try {\n          in.close();\n        } catch (IOException e) {\n          Log.warning(\"IOException closing key store file after load.\");\n          Log.warningStackTrace(e);\n        }\n    }\n    return keyStore;\n  }\n"}, {"dataset": "load", "exampleID": 4558, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [121], "initializationEnd": [148], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["error(String,*)", "new SamlException(String,*)"], "tryExpressionStart": 95, "tryExpressionEnd": 99, "tryBlockStart": 95, "tryBlockEnd": 618, "catchExpressionStart": 257, "catchExpressionEnd": 277, "catchBlockStart": 257, "catchBlockEnd": 398, "exceptionHandlingCallStart": [285, 345], "exceptionHandlingCallEnd": [331, 391], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 156, "focalAPIEnd": 232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 399, "finallyExpressionEnd": 407, "finallyBlockStart": 399, "finallyBlockEnd": 618, "cleanUpCallStart": [466], "cleanUpCallEnd": [485], "url": "https://github.com/leleuj/pac4j/tree/master/pac4j-saml/src/main/java/org/pac4j/saml/crypto/CredentialProvider.java", "rawCode": "  private KeyStore loadKeyStore(final InputStream inputStream, final String storePasswd) {\n    try {\n      KeyStore ks = KeyStore.getInstance(\"JKS\");\n      ks.load(inputStream, storePasswd == null ? null : storePasswd.toCharArray());\n      return ks;\n    } catch (Exception e) {\n      this.logger.error(\"Error loading keystore\", e);\n      throw new SamlException(\"Error loading keystore\", e);\n    } finally {\n      if (inputStream != null) {\n        try {\n          inputStream.close();\n        } catch (IOException e) {\n          this.logger.debug(\"Error closing input stream of keystore\", e);\n        }\n      }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4559, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [498], "initializationEnd": [545], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "fail(String)"], "tryExpressionStart": 472, "tryExpressionEnd": 476, "tryBlockStart": 472, "tryBlockEnd": 710, "catchExpressionStart": 631, "catchExpressionEnd": 651, "catchBlockStart": 631, "catchBlockEnd": 710, "exceptionHandlingCallStart": [690, 659], "exceptionHandlingCallEnd": [702, 703], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 553, "focalAPIEnd": 572, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Parameters(keyStore)"], "useStart": [585], "useEnd": [603], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactorySpiTest.java", "rawCode": "  /**\n   * @throws InvalidAlgorithmParameterException\n   * @throws NoSuchAlgorithmException\n   *     javax.net.ssl.TrustManagerFactorySpi#engineInit(ManagerFactoryParameters spec)\n   */\n  public void test_engineInit_02()\n      throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {\n    factory.reset();\n    Provider provider = new MyProvider();\n    TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"MyTMF\", provider);\n    Parameters pr = null;\n    try {\n      KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n      ks.load(null, null);\n      pr = new Parameters(ks);\n      tmf.init(pr);\n    } catch (Exception e) {\n      fail(\"Unexpected exception \" + e.toString());\n    }\n    assertTrue(factory.isEngineInitCalled());\n    assertEquals(pr, factory.getSpec());\n    factory.reset();\n    tmf.init((ManagerFactoryParameters) null);\n    assertTrue(factory.isEngineInitCalled());\n    assertNull(factory.getSpec());\n  }\n"}, {"dataset": "load", "exampleID": 4560, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [420], "initializationEnd": [467], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "fail(String)"], "tryExpressionStart": 403, "tryExpressionEnd": 407, "tryBlockStart": 403, "tryBlockEnd": 601, "catchExpressionStart": 522, "catchExpressionEnd": 542, "catchBlockStart": 522, "catchBlockEnd": 601, "exceptionHandlingCallStart": [581, 550], "exceptionHandlingCallEnd": [593, 594], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 475, "focalAPIEnd": 494, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TrustManagerFactory.init(keyStore)", "assertEquals(keyStore,*)"], "useStart": [502, 652], "useEnd": [514, 685], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactorySpiTest.java", "rawCode": "  /**\n   * @throws NoSuchAlgorithmException\n   * @throws KeyStoreException javax.net.ssl.TrustManagerFactorySpi#engineInit(KeyStore ks)\n   */\n  public void test_engineInit_01() throws NoSuchAlgorithmException, KeyStoreException {\n    factory.reset();\n    Provider provider = new MyProvider();\n    TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"MyTMF\", provider);\n    KeyStore ks = null;\n    try {\n      ks = KeyStore.getInstance(KeyStore.getDefaultType());\n      ks.load(null, null);\n      tmf.init(ks);\n    } catch (Exception e) {\n      fail(\"Unexpected exception \" + e.toString());\n    }\n    assertTrue(factory.isEngineInitCalled());\n    assertEquals(ks, factory.getKs());\n    factory.reset();\n    tmf.init((KeyStore) null);\n    assertTrue(factory.isEngineInitCalled());\n    assertNull(factory.getKs());\n  }\n"}, {"dataset": "load", "exampleID": 4561, "initialization": ["char[] password = String.toCharArray()", "InputStream stream = new FileInputStream(File)", "KeyStore keyStore = getInstance(*)"], "initializationStart": [364, 1034, 1079], "initializationEnd": [379, 1059, 1126], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1132, "focalAPIEnd": 1155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TrustManagerFactory.init(keyStore)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.store(OutputStream,char[])"], "useStart": [1348, 3497, 3590], "useEnd": [1360, 3532, 3615], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nile/CloudPaster/tree/master/test/InstallCert.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    String host;\n    int port;\n    char[] passphrase;\n    if ((args.length == 1) || (args.length == 2)) {\n      String[] c = args[0].split(\":\");\n      host = c[0];\n      port = (c.length == 1) ? 443 : Integer.parseInt(c[1]);\n      String p = (args.length == 1) ? \"changeit\" : args[1];\n      passphrase = p.toCharArray();\n    } else {\n      System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\");\n      return;\n    }\n\n    System.out.println(\"InstallCert.main()\" + System.getProperty(\"java.home\"));\n\n    File file = new File(\"jssecacerts\");\n    if (!file.exists() || !file.isFile()) {\n      char SEP = File.separatorChar;\n      File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\");\n      file = new File(dir, \"jssecacerts\");\n      if (!file.exists() || !file.isFile()) {\n        file = new File(dir, \"cacerts\");\n      }\n    }\n    System.out.println(\"Loading KeyStore \" + file.getAbsolutePath() + \"...\");\n    InputStream in = new FileInputStream(file);\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    ks.load(in, passphrase);\n    in.close();\n\n    SSLContext context = SSLContext.getInstance(\"TLS\");\n    TrustManagerFactory tmf =\n        TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n    tmf.init(ks);\n    X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0];\n    SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);\n    context.init(null, new TrustManager[] {tm}, null);\n    SSLSocketFactory factory = context.getSocketFactory();\n\n    System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\");\n    SSLSocket socket = (SSLSocket) factory.createSocket(host, port);\n    socket.setSoTimeout(10000);\n    try {\n      System.out.println(\"Starting SSL handshake...\");\n      socket.startHandshake();\n      socket.close();\n      System.out.println();\n      System.out.println(\"No errors, certificate is already trusted\");\n    } catch (SSLException e) {\n      System.out.println();\n      e.printStackTrace(System.out);\n    }\n\n    X509Certificate[] chain = tm.chain;\n    if (chain == null) {\n      System.out.println(\"Could not obtain server certificate chain\");\n      return;\n    }\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n    System.out.println();\n    System.out.println(\"Server sent \" + chain.length + \" certificate(s):\");\n    System.out.println();\n    MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    for (int i = 0; i < chain.length; i++) {\n      X509Certificate cert = chain[i];\n      System.out.println(\" \" + (i + 1) + \" Subject \" + cert.getSubjectDN());\n      System.out.println(\" Issuer \" + cert.getIssuerDN());\n      sha1.update(cert.getEncoded());\n      System.out.println(\" sha1 \" + toHexString(sha1.digest()));\n      md5.update(cert.getEncoded());\n      System.out.println(\" md5 \" + toHexString(md5.digest()));\n      System.out.println();\n    }\n\n    System.out.println(\"Enter certificate to add to trusted keystore or 'q' to quit: [1]\");\n    String line = reader.readLine().trim();\n    int k;\n    try {\n      k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1;\n    } catch (NumberFormatException e) {\n      System.out.println(\"KeyStore not changed\");\n      return;\n    }\n\n    X509Certificate cert = chain[k];\n    String alias = host + \"-\" + (k + 1);\n    ks.setCertificateEntry(alias, cert);\n\n    OutputStream out = new FileOutputStream(file);\n    ks.store(out, passphrase);\n    out.close();\n\n    System.out.println();\n    System.out.println(cert);\n    System.out.println();\n    System.out.println(\n        \"Added certificate to keystore \" + file.getAbsolutePath() + \" using alias '\" + alias + \"'\");\n  }\n"}, {"dataset": "load", "exampleID": 4562, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [324], "initializationEnd": [371], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 377, "focalAPIEnd": 401, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,*)"], "useStart": [843, 895, 947, 1038], "useEnd": [889, 941, 993, 1096], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /**\n   * Test #4 for <code>PKIXBuilderParameters(KeyStore, CertSelector)</code> constructor<br>\n   * Assertion: <code>NullPointerException</code> - if the <code>keystore</code> is <code>null\n   * </code>\n   */\n  public final void testPKIXBuilderParametersKeyStoreCertSelector04() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    ByteArrayInputStream certArray = new ByteArrayInputStream(certificate.getBytes());\n\n    ByteArrayInputStream certArray2 = new ByteArrayInputStream(certificate2.getBytes());\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    try {\n      PKIXBuilderParameters p = new PKIXBuilderParameters(keyTest, new X509CertSelector());\n      assertEquals(3, p.getTrustAnchors().size());\n      assertEquals(5, p.getMaxPathLength());\n    } catch (Exception e) {\n      fail(\"Unexpected exception \" + e.getMessage());\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4563, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 96, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setEntry(String,TrustedCertificateEntry,*)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.setEntry(String,TrustedCertificateEntry,*)", "keyStore.getEntry(String,KeyStore.PasswordProtection)"], "useStart": [431, 517, 1307, 1393], "useEnd": [488, 555, 1364, 1431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_SetEntry_CAEntry_Overwrites_CAEntry_Success() throws Exception {\n    mKeyStore.load(null, null);\n\n    final CertificateFactory f = CertificateFactory.getInstance(\"X.509\");\n\n    // Insert TrustedCertificateEntry\n    {\n      final Certificate caCert = f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));\n\n      TrustedCertificateEntry expectedCertEntry = new TrustedCertificateEntry(caCert);\n      mKeyStore.setEntry(TEST_ALIAS_1, expectedCertEntry, null);\n\n      Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n      assertNotNull(\"Retrieved entry should exist\", actualEntry);\n      assertTrue(\n          \"Retrieved entry should be of type TrustedCertificateEntry\",\n          actualEntry instanceof TrustedCertificateEntry);\n      TrustedCertificateEntry actualCertEntry = (TrustedCertificateEntry) actualEntry;\n      assertEquals(\n          \"Stored and retrieved certificates should be the same\",\n          expectedCertEntry.getTrustedCertificate(),\n          actualCertEntry.getTrustedCertificate());\n    }\n\n    // Replace with TrustedCertificateEntry of USER\n    {\n      final Certificate userCert = f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));\n\n      TrustedCertificateEntry expectedUserEntry = new TrustedCertificateEntry(userCert);\n      mKeyStore.setEntry(TEST_ALIAS_1, expectedUserEntry, null);\n\n      Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n      assertNotNull(\"Retrieved entry should exist\", actualEntry);\n      assertTrue(\n          \"Retrieved entry should be of type TrustedCertificateEntry\",\n          actualEntry instanceof TrustedCertificateEntry);\n      TrustedCertificateEntry actualUserEntry = (TrustedCertificateEntry) actualEntry;\n      assertEquals(\n          \"Stored and retrieved certificates should be the same\",\n          expectedUserEntry.getTrustedCertificate(),\n          actualUserEntry.getTrustedCertificate());\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4564, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [372], "initializationEnd": [419], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 425, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new PKIXBuilderParameters(keyStore,*)"], "useStart": [467], "useEnd": [525], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /**\n   * Test #3 for <code>PKIXBuilderParameters(KeyStore, CertSelector)</code> constructor<br>\n   * Assertion: <code>InvalidAlgorithmParameterException</code> - if the <code>keystore</code> does\n   * not contain at least one trusted certificate entry\n   */\n  public final void testPKIXBuilderParametersKeyStoreCertSelector03() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n    try {\n      new PKIXBuilderParameters(keyTest, new X509CertSelector());\n      fail(\"InvalidAlgorithmParameterException expected\");\n    } catch (InvalidAlgorithmParameterException e) {\n      // expected\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4565, "initialization": ["KeyStore keyStore = getInstance(*)", "InputStream stream = doPrivileged(*)"], "initializationStart": [1390, 1492], "initializationEnd": [1419, 1558], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1584, "focalAPIEnd": 1601, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1613, "finallyExpressionEnd": 1621, "finallyBlockStart": 1613, "finallyBlockEnd": 1654, "cleanUpCallStart": [1633], "cleanUpCallEnd": [1643], "url": "https://github.com/bluespark80/example/tree/master/security/src/main/java/org/apache/harmony/security/fortress/DefaultPolicyParser.java", "rawCode": "  /**\n   * Returns the first successfully loaded KeyStore, from the specified list of possible locations.\n   * This method iterates over the list of KeystoreEntries; for each entry expands <code>url</code>\n   * and <code>type</code>, tries to construct instances of specified URL and KeyStore and to load\n   * the keystore. If it is loaded, returns the keystore, otherwise proceeds to the next\n   * KeystoreEntry. <br>\n   * <b>Note:</b> an url may be relative to the policy file location or absolute.\n   *\n   * @param keystores list of available KeystoreEntries\n   * @param base the policy file location\n   * @param system system properties, used for property expansion\n   * @param resolve flag enabling/disabling property expansion\n   * @return the first successfully loaded KeyStore or <code>null</code>\n   */\n  protected KeyStore initKeyStore(\n      List<KeystoreEntry> keystores, URL base, Properties system, boolean resolve) {\n\n    for (int i = 0; i < keystores.size(); i++) {\n      try {\n        DefaultPolicyScanner.KeystoreEntry ke = keystores.get(i);\n        if (resolve) {\n          ke.url = PolicyUtils.expandURL(ke.url, system);\n          if (ke.type != null) {\n            ke.type = PolicyUtils.expand(ke.type, system);\n          }\n        }\n        if (ke.type == null || ke.type.length() == 0) {\n          ke.type = KeyStore.getDefaultType();\n        }\n        KeyStore ks = KeyStore.getInstance(ke.type);\n        URL location = new URL(base, ke.url);\n        InputStream is = AccessController.doPrivileged(new PolicyUtils.URLLoader(location));\n        try {\n          ks.load(is, null);\n        } finally {\n          is.close();\n        }\n        return ks;\n      } catch (Exception e) {\n        // TODO: log warning\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "load", "exampleID": 4566, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [214], "initializationEnd": [243], "hasTryCatch": 1, "exceptionType": "GeneralSecurityException", "exceptionHandlingCall": ["new CryptoException(*,*)"], "tryExpressionStart": 185, "tryExpressionEnd": 189, "tryBlockStart": 185, "tryBlockEnd": 589, "catchExpressionStart": 447, "catchExpressionEnd": 482, "catchBlockStart": 447, "catchBlockEnd": 554, "exceptionHandlingCallStart": [496], "exceptionHandlingCallEnd": [547], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 266, "focalAPIEnd": 288, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,SecretKey,*,*)"], "useStart": [296], "useEnd": [377], "hasFinally": 1, "cleanUpCall": ["FileOutputStream.close()"], "finallyExpressionStart": 555, "finallyExpressionEnd": 563, "finallyBlockStart": 555, "finallyBlockEnd": 589, "cleanUpCallStart": [571], "cleanUpCallEnd": [582], "url": "https://github.com/teiid/teiid/tree/master/common-core/src/main/java/org/teiid/core/crypto/SymmetricCryptor.java", "rawCode": "  private static void saveKey(String file, SecretKey key) throws CryptoException, IOException {\n    ArgCheck.isNotNull(file);\n    FileOutputStream fos = new FileOutputStream(file);\n    try {\n      KeyStore store = KeyStore.getInstance(\"JCEKS\"); // $NON-NLS-1$\n      store.load(null, null);\n      store.setKeyEntry(DEFAULT_ALIAS, key, DEFAULT_STORE_PASSWORD.toCharArray(), null);\n      store.store(fos, DEFAULT_STORE_PASSWORD.toCharArray());\n    } catch (GeneralSecurityException e) {\n      throw new CryptoException(CorePlugin.Event.TEIID10023, e);\n    } finally {\n      fos.close();\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4567, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [917], "initializationEnd": [947], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["println(String)", "printStackTrace()"], "tryExpressionStart": 97, "tryExpressionEnd": 101, "tryBlockStart": 97, "tryBlockEnd": 1206, "catchExpressionStart": 1066, "catchExpressionEnd": 1086, "catchBlockStart": 1066, "catchBlockEnd": 1206, "exceptionHandlingCallStart": [1094, 1163], "exceptionHandlingCallEnd": [1155, 1182], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 955, "focalAPIEnd": 1022, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addKeyStore(keyStore,String)"], "useStart": [1037], "useEnd": [1058], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SSilence/scotty/tree/master/scotty-commons/src/main/java/org/owasp/webscarab/httpclient/AbstractCertificateRepository.java", "rawCode": "  public int initPKCS11(String name, String library, int slotListIndex, String kspassword) {\n    try {\n      if (!isProviderAvailable(\"PKCS11\")) {\n        return -1;\n      }\n\n      // Set up a virtual config file\n      StringBuffer cardConfig = new StringBuffer();\n      cardConfig.append(\"name = \").append(name).append(\"\\n\");\n      cardConfig.append(\"library = \").append(library).append(\"\\n\");\n      cardConfig.append(\"slotListIndex = \").append(Integer.toString(slotListIndex)).append(\"\\n\");\n      InputStream is = new ByteArrayInputStream(cardConfig.toString().getBytes());\n\n      // create the provider\n      Class pkcs11Class = Class.forName(\"sun.security.pkcs11.SunPKCS11\");\n      Constructor c = pkcs11Class.getConstructor(new Class[] {InputStream.class});\n      Provider pkcs11 = (Provider) c.newInstance(new Object[] {is});\n      Security.addProvider(pkcs11);\n\n      // init the key store\n      KeyStore ks = KeyStore.getInstance(\"PKCS11\");\n      ks.load(null, kspassword == null ? null : kspassword.toCharArray());\n      return addKeyStore(ks, name);\n    } catch (Exception e) {\n      System.err.println(\"Error instantiating the PKCS11 provider\");\n      e.printStackTrace();\n      return -1;\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4568, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [352], "initializationEnd": [399], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "fail(String)"], "tryExpressionStart": 234, "tryExpressionEnd": 238, "tryBlockStart": 234, "tryBlockEnd": 734, "catchExpressionStart": 653, "catchExpressionEnd": 674, "catchBlockStart": 653, "catchBlockEnd": 734, "exceptionHandlingCallStart": [713, 682], "exceptionHandlingCallEnd": [726, 727], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 407, "focalAPIEnd": 426, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TrustManagerFactory.init(keyStore)"], "useStart": [434], "useEnd": [450], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory1Test.java", "rawCode": "  /**\n   * Test for <code>geTrustManagers()</code>\n   *\n   * @throws KeyStoreException\n   * @throws IOException\n   * @throws CertificateException\n   * @throws NoSuchAlgorithmException\n   */\n  public void test_getTrustManagers() {\n    try {\n      TrustManagerFactory trustMF = TrustManagerFactory.getInstance(getDefaultAlgorithm());\n      KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n      ks.load(null, null);\n      trustMF.init(ks);\n      TrustManager[] tm = trustMF.getTrustManagers();\n      assertNotNull(\"Result has not be null\", tm);\n      assertTrue(\"Length of result TrustManager array should not be 0\", (tm.length > 0));\n    } catch (Exception ex) {\n      fail(\"Unexpected exception \" + ex.toString());\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4569, "initialization": ["KeyStore keyStore = getKeyStoreInstance(KeyStoreType)"], "initializationStart": [112], "initializationEnd": [142], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new CryptoFailure(String,*)"], "tryExpressionStart": 80, "tryExpressionEnd": 84, "tryBlockStart": 80, "tryBlockEnd": 456, "catchExpressionStart": 206, "catchExpressionEnd": 229, "catchBlockStart": 206, "catchBlockEnd": 324, "exceptionHandlingCallStart": [243], "exceptionHandlingCallEnd": [317], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 150, "focalAPIEnd": 175, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eskatos/qipki/tree/master/crypto/src/main/java/org/qipki/crypto/io/CryptIOImpl.java", "rawCode": "  @Override\n  public KeyStore createEmptyKeyStore(KeyStoreType storeType) {\n    try {\n      KeyStore keystore = getKeyStoreInstance(storeType);\n      keystore.load(null, null);\n      return keystore;\n    } catch (IOException ex) {\n      throw new CryptoFailure(\"Unable to create empty \" + storeType + \" KeyStore\", ex);\n    } catch (GeneralSecurityException ex) {\n      throw new CryptoFailure(\"Unable to create empty \" + storeType + \" KeyStore\", ex);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4570, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [772], "initializationEnd": [819], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 825, "focalAPIEnd": 849, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.getCertificateAlias(X509Certificate)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "keyStore.getCertificateAlias(X509Certificate)", "keyStore.getCertificateAlias(X509Certificate)"], "useStart": [881, 948, 1144, 1214, 1536], "useEnd": [927, 984, 1200, 1250, 1570], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** @tests java.security.KeyStore#getCertificateAlias(java.security.cert.Certificate) */\n  @TestTargetNew(\n    level = TestLevel.PARTIAL,\n    notes = \"KeyStoreException checking missed\",\n    method = \"getCertificateAlias\",\n    args = {java.security.cert.Certificate.class}\n  )\n  public void test_getCertificateAliasLjava_security_cert_Certificate() throws Exception {\n    // Test for method java.lang.String\n    // java.security.KeyStore.getCertificateAlias(java.security.cert.Certificate)\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    // certificate entry\n    keyTest.setCertificateEntry(\"alias1\", cert[1]);\n    String alias = keyTest.getCertificateAlias(cert[1]);\n    assertTrue(\n        \"certificate entry - the alias returned for this \" + \"certificate was wrong\",\n        alias.equals(\"alias1\"));\n\n    // key entry\n\n    keyTest.setKeyEntry(\"alias2\", privateKey, pssWord, cert);\n    alias = keyTest.getCertificateAlias(cert[0]);\n    assertTrue(\n        \"key entry - the alias returned for this \" + \"certificate was wrong\",\n        alias.equals(\"alias2\"));\n\n    // testing case with a nonexistent certificate\n    X509Certificate cert2 = (X509Certificate) cf.generateCertificate(certArray3);\n    String aliasNull = keyTest.getCertificateAlias(cert2);\n    assertNull(\"the alias returned for the nonexist certificate \" + \"was NOT null\", aliasNull);\n  }\n"}, {"dataset": "load", "exampleID": 4571, "initialization": ["char[] password = String.toCharArray()", "InputStream stream = new FileInputStream(File)", "KeyStore keyStore = getInstance(*)"], "initializationStart": [364, 915, 960], "initializationEnd": [379, 940, 1007], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1013, "focalAPIEnd": 1036, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TrustManagerFactory.init(keyStore)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.store(OutputStream,char[])"], "useStart": [1229, 3378, 3471], "useEnd": [1241, 3413, 3496], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/gaards-core/src/org/cagrid/gaards/pki/tools/InstallCert.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    String host;\n    int port;\n    char[] passphrase;\n    if ((args.length == 1) || (args.length == 2)) {\n      String[] c = args[0].split(\":\");\n      host = c[0];\n      port = (c.length == 1) ? 443 : Integer.parseInt(c[1]);\n      String p = (args.length == 1) ? \"changeit\" : args[1];\n      passphrase = p.toCharArray();\n    } else {\n      System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\");\n      return;\n    }\n\n    File file = new File(\"jssecacerts\");\n    if (file.isFile() == false) {\n      char SEP = File.separatorChar;\n      File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\");\n      file = new File(dir, \"jssecacerts\");\n      if (file.isFile() == false) {\n        file = new File(dir, \"cacerts\");\n      }\n    }\n    System.out.println(\"Loading KeyStore \" + file + \"...\");\n    InputStream in = new FileInputStream(file);\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    ks.load(in, passphrase);\n    in.close();\n\n    SSLContext context = SSLContext.getInstance(\"TLS\");\n    TrustManagerFactory tmf =\n        TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n    tmf.init(ks);\n    X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0];\n    SavingTrustManager tm = new SavingTrustManager(defaultTrustManager);\n    context.init(null, new TrustManager[] {tm}, null);\n    SSLSocketFactory factory = context.getSocketFactory();\n\n    System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\");\n    SSLSocket socket = (SSLSocket) factory.createSocket(host, port);\n    socket.setSoTimeout(10000);\n    try {\n      System.out.println(\"Starting SSL handshake...\");\n      socket.startHandshake();\n      socket.close();\n      System.out.println();\n      System.out.println(\"No errors, certificate is already trusted\");\n    } catch (SSLException e) {\n      System.out.println();\n      e.printStackTrace(System.out);\n    }\n\n    X509Certificate[] chain = tm.chain;\n    if (chain == null) {\n      System.out.println(\"Could not obtain server certificate chain\");\n      return;\n    }\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\n    System.out.println();\n    System.out.println(\"Server sent \" + chain.length + \" certificate(s):\");\n    System.out.println();\n    MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\");\n    MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n    for (int i = 0; i < chain.length; i++) {\n      X509Certificate cert = chain[i];\n      System.out.println(\" \" + (i + 1) + \" Subject \" + cert.getSubjectDN());\n      System.out.println(\" Issuer \" + cert.getIssuerDN());\n      sha1.update(cert.getEncoded());\n      System.out.println(\" sha1 \" + toHexString(sha1.digest()));\n      md5.update(cert.getEncoded());\n      System.out.println(\" md5 \" + toHexString(md5.digest()));\n      System.out.println();\n    }\n\n    System.out.println(\"Enter certificate to add to trusted keystore or 'q' to quit: [1]\");\n    String line = reader.readLine().trim();\n    int k;\n    try {\n      k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1;\n    } catch (NumberFormatException e) {\n      System.out.println(\"KeyStore not changed\");\n      return;\n    }\n\n    X509Certificate cert = chain[k];\n    String alias = host + \"-\" + (k + 1);\n    ks.setCertificateEntry(alias, cert);\n\n    OutputStream out = new FileOutputStream(file);\n    ks.store(out, passphrase);\n    out.close();\n\n    System.out.println();\n    System.out.println(cert);\n    System.out.println();\n    System.out.println(\"Added certificate to keystore 'cacerts' using alias '\" + alias + \"'\");\n  }\n"}, {"dataset": "load", "exampleID": 4572, "initialization": ["KeyStore keyStore = getInstance(*)", "InputStream stream = new FileInputStream(File)", "char[] password = toCharArray()"], "initializationStart": [416, 477, 540], "initializationEnd": [463, 500, 558], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 573, "focalAPIEnd": 600, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getCertificate(String)"], "useStart": [615], "useEnd": [645], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 653, "finallyExpressionEnd": 661, "finallyBlockStart": 653, "finallyBlockEnd": 774, "cleanUpCallStart": [710], "cleanUpCallEnd": [721], "url": "https://github.com/i2p/i2p.i2p/tree/master/core/java/src/net/i2p/crypto/KeyStoreUtil.java", "rawCode": "  /**\n   * Get a cert out of a keystore\n   *\n   * @param ks path to the keystore\n   * @param ksPW the keystore password, may be null\n   * @param alias the name of the key\n   * @return the certificate or null if not found\n   */\n  public static Certificate getCert(File ks, String ksPW, String alias)\n      throws GeneralSecurityException, IOException {\n    InputStream fis = null;\n    try {\n      KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n      fis = new FileInputStream(ks);\n      char[] pwchars = ksPW != null ? ksPW.toCharArray() : null;\n      keyStore.load(fis, pwchars);\n      return keyStore.getCertificate(alias);\n    } finally {\n      if (fis != null)\n        try {\n          fis.close();\n        } catch (IOException ioe) {\n        }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4573, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 284, "focalAPIEnd": 313, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)"], "useStart": [320, 371, 429], "useEnd": [364, 422, 476], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/security/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.PARTIAL,\n    notes = \"Verifies method with null parameters\",\n    method = \"setCertificateEntry\",\n    args = {java.lang.String.class, java.security.cert.Certificate.class}\n  )\n  public void test_setCertificateEntry_null() throws Exception {\n    mockKeyStore.load(null, null);\n\n    mockKeyStore.setCertificateEntry(null, null);\n\n    mockKeyStore.setCertificateEntry(null, certificate);\n\n    mockKeyStore.setCertificateEntry(\"Alias\", null);\n  }\n"}, {"dataset": "load", "exampleID": 4574, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [261], "initializationEnd": [308], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 314, "focalAPIEnd": 338, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,*)"], "useStart": [780, 832, 884, 963], "useEnd": [826, 878, 930, 1021], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benjaminvm/vm/tree/master/libcore/security/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /** Test for <code>setMaxPathLength()</code> */\n  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"\",\n    method = \"setMaxPathLength\",\n    args = {int.class}\n  )\n  public final void testSetMaxPathLength() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    ByteArrayInputStream certArray = new ByteArrayInputStream(certificate.getBytes());\n\n    ByteArrayInputStream certArray2 = new ByteArrayInputStream(certificate2.getBytes());\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    PKIXBuilderParameters p = new PKIXBuilderParameters(keyTest, new X509CertSelector());\n\n    assertEquals(5, p.getMaxPathLength());\n    p.setMaxPathLength(10);\n    assertEquals(10, p.getMaxPathLength());\n    p.setMaxPathLength(0);\n    assertEquals(0, p.getMaxPathLength());\n    p.setMaxPathLength(-1);\n    assertEquals(-1, p.getMaxPathLength());\n\n    int[] maxPathLength = {-2, -10, Integer.MIN_VALUE};\n    for (int i = 0; i < maxPathLength.length; i++) {\n      try {\n        p.setMaxPathLength(maxPathLength[i]);\n        fail(\"InvalidParameterException expected \");\n      } catch (InvalidParameterException e) {\n        // expected\n      }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4575, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [378], "initializationEnd": [405], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "fail(*)"], "tryExpressionStart": 352, "tryExpressionEnd": 356, "tryBlockStart": 352, "tryBlockEnd": 872, "catchExpressionStart": 817, "catchExpressionEnd": 837, "catchBlockStart": 817, "catchBlockEnd": 872, "exceptionHandlingCallStart": [850, 845], "exceptionHandlingCallEnd": [864, 865], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 577, "focalAPIEnd": 596, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.store(OutputStream,char[])"], "useStart": [606], "useEnd": [801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codebrane/sakai-chh-fedora/tree/master/fedora-ws-clients/testapp/testsrc/fedora/webservices/client/api/RepositoryTest.java", "rawCode": "  /**\n   * Create an empty truststore. This will be used by the Axis2 web services clients to verify the\n   * SSL exchange with Fedora servers. One truststore will hold the server certificates of multiple\n   * Fedoras. The truststore will be populated by using the Guanxi SSL probing functionality.\n   */\n  private static void createTruststore() {\n    try {\n      KeyStore ks = KeyStore.getInstance(\"JKS\");\n\n      // Does the keystore exist?\n      File keyStore = new File(repositoryProperties.getString(PROPS_KEY_TRUSTSTORE_LOCATION));\n      if (!keyStore.exists()) {\n        ks.load(null, null);\n        ks.store(\n            new FileOutputStream(repositoryProperties.getString(PROPS_KEY_TRUSTSTORE_LOCATION)),\n            repositoryProperties.getString(PROPS_KEY_TRUSTSTORE_PASSWORD).toCharArray());\n      }\n    } catch (Exception e) {\n      fail(e.getMessage());\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4576, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [581], "initializationEnd": [607], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 613, "focalAPIEnd": 639, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])"], "useStart": [645], "useEnd": [700], "hasFinally": 1, "cleanUpCall": ["OutputStream.close()"], "finallyExpressionStart": 868, "finallyExpressionEnd": 876, "finallyBlockStart": 868, "finallyBlockEnd": 902, "cleanUpCallStart": [884], "cleanUpCallEnd": [895], "url": "https://github.com/OWASP/OWASP-Proxy/tree/master/src/main/java/org/owasp/proxy/ssl/AutoGeneratingContextSelector.java", "rawCode": "  /**\n   * Saves the CA key and the Certificate chain to the specified keystore\n   *\n   * @param keyStore the file to save the keystore to\n   * @param type the keystore type (PKCS12, JKS, etc)\n   * @param password the keystore password\n   * @param keyPassword the key password\n   * @param caAlias the alias to save the key and cert under\n   * @throws GeneralSecurityException\n   * @throws IOException\n   */\n  public void save(File keyStore, String type, char[] password, char[] keyPassword, String caAlias)\n      throws GeneralSecurityException, IOException {\n    KeyStore store = KeyStore.getInstance(type);\n    store.load(null, password);\n    store.setKeyEntry(caAlias, caKey, keyPassword, caCerts);\n    OutputStream out = new FileOutputStream(keyStore);\n    try {\n      store.store(out, password);\n    } catch (IOException ioe) {\n      ioe.printStackTrace();\n    } finally {\n      out.close();\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4577, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.store(KeyStore.LoadStoreParameter)"], "configurationStart": [62], "configurationEnd": [86], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 258, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.store(KeyStore.LoadStoreParameter)"], "useStart": [293], "useEnd": [317], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robovm/robovm/tree/master/tests/libcore/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore3Test.java", "rawCode": "  public void test_store() throws Exception {\n    try {\n      mockKeyStore.store(null);\n      fail(\"should throw KeyStoreException: not initialized\");\n    } catch (KeyStoreException e) {\n      // expected\n    }\n\n    // No exception should be thrown out.\n    mockKeyStore.load(null, null);\n    mockKeyStore.store(null);\n  }\n"}, {"dataset": "load", "exampleID": 4578, "initialization": ["KeyStore keyStore = getInstance(*)", "InputStream stream = doPrivileged(*)"], "initializationStart": [1390, 1492], "initializationEnd": [1419, 1558], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1584, "focalAPIEnd": 1601, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1613, "finallyExpressionEnd": 1621, "finallyBlockStart": 1613, "finallyBlockEnd": 1654, "cleanUpCallStart": [1633], "cleanUpCallEnd": [1643], "url": "https://github.com/arjunroy/cinder_dalvik/tree/master/libcore/security/src/main/java/org/apache/harmony/security/fortress/DefaultPolicyParser.java", "rawCode": "  /**\n   * Returns the first successfully loaded KeyStore, from the specified list of possible locations.\n   * This method iterates over the list of KeystoreEntries; for each entry expands <code>url</code>\n   * and <code>type</code>, tries to construct instances of specified URL and KeyStore and to load\n   * the keystore. If it is loaded, returns the keystore, otherwise proceeds to the next\n   * KeystoreEntry. <br>\n   * <b>Note:</b> an url may be relative to the policy file location or absolute.\n   *\n   * @param keystores list of available KeystoreEntries\n   * @param base the policy file location\n   * @param system system properties, used for property expansion\n   * @param resolve flag enabling/disabling property expansion\n   * @return the first successfully loaded KeyStore or <code>null</code>\n   */\n  protected KeyStore initKeyStore(\n      List<KeystoreEntry> keystores, URL base, Properties system, boolean resolve) {\n\n    for (int i = 0; i < keystores.size(); i++) {\n      try {\n        DefaultPolicyScanner.KeystoreEntry ke = keystores.get(i);\n        if (resolve) {\n          ke.url = PolicyUtils.expandURL(ke.url, system);\n          if (ke.type != null) {\n            ke.type = PolicyUtils.expand(ke.type, system);\n          }\n        }\n        if (ke.type == null || ke.type.length() == 0) {\n          ke.type = KeyStore.getDefaultType();\n        }\n        KeyStore ks = KeyStore.getInstance(ke.type);\n        URL location = new URL(base, ke.url);\n        InputStream is = AccessController.doPrivileged(new PolicyUtils.URLLoader(location));\n        try {\n          ks.load(is, null);\n        } finally {\n          is.close();\n        }\n        return ks;\n      } catch (Exception e) {\n        // TODO: log warning\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "load", "exampleID": 4579, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [268], "initializationEnd": [323], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 236, "tryExpressionEnd": 240, "tryBlockStart": 236, "tryBlockEnd": 451, "catchExpressionStart": 387, "catchExpressionEnd": 407, "catchBlockStart": 387, "catchBlockEnd": 451, "exceptionHandlingCallStart": [421], "exceptionHandlingCallEnd": [444], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 331, "focalAPIEnd": 356, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/support/src/test/java/libcore/java/security/TestKeyStore.java", "rawCode": "  /**\n   * Create an empty KeyStore\n   *\n   * <p>The KeyStore is optionally password protected by the keyStorePassword argument, which can be\n   * null if a password is not desired.\n   */\n  public static KeyStore createKeyStore() {\n    try {\n      KeyStore keyStore = KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM);\n      keyStore.load(null, null);\n      return keyStore;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4580, "initialization": ["KeyStore keyStore = getInstance(String)", "InputStream stream = new FileInputStream(File)", "InputStream stream = new FileInputStream(File)"], "initializationStart": [327, 442, 965], "initializationEnd": [354, 470, 993], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["stream.close()", "keyStore.load(FileInputStream,String)", "keyStore.store(OutputStream,String)"], "configurationStart": [513, 851, 896], "configurationEnd": [523, 888, 933], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1154, "focalAPIEnd": 1171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "TrustManagerFactory.init(keyStore)"], "useStart": [1313, 1553], "useEnd": [1371, 1565], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1179, "finallyExpressionEnd": 1187, "finallyBlockStart": 1179, "finallyBlockEnd": 1212, "cleanUpCallStart": [1195], "cleanUpCallEnd": [1205], "url": "https://github.com/ejoerns/candis/tree/master/droid2/src/candis/client/comm/ReloadableX509TrustManager.java", "rawCode": "  /**\n   * Reloads the trust manager from file.\n   *\n   * <p>If the trustmanager file is empty or uninitalized, it will be initialized.\n   *\n   * @throws ExceptionaddServerCeratAndReload\n   */\n  private void reloadTrustManager() throws Exception {\n\n    // load keystore from specified cert store (or default)\n    KeyStore ts = KeyStore.getInstance(\"BKS\");\n    InputStream in;\n    // Check if file exists and is not empty\n    try {\n      in = new FileInputStream(mTSFile);\n      if (in.available() == 0) {\n        in.close();\n        in = null;\n      }\n    } catch (FileNotFoundException ex) {\n      LOGGER.log(Level.INFO, String.format(\"Truststore file %s not found.\", mTSFile.getName()));\n      in = null;\n    }\n\n    // Initialize empty truststore if none available\n    if (in == null) {\n      OutputStream out = new FileOutputStream(mTSFile);\n      ts.load(null, \"candis\".toCharArray());\n      ts.store(out, \"candis\".toCharArray());\n      out.close();\n      in = new FileInputStream(mTSFile);\n      LOGGER.log(Level.INFO, String.format(\"Initialized empty truststore %s\", mTSFile.getName()));\n    }\n\n    // load truststore (no password)\n    try {\n      ts.load(in, null);\n    } finally {\n      in.close();\n    }\n\n    // add all temporary certs to KeyStore (ts)\n    for (Certificate cert : mTempCertList) {\n      ts.setCertificateEntry(UUID.randomUUID().toString(), cert);\n    }\n\n    // initialize a new TMF with the ts we just loaded\n    TrustManagerFactory tmf =\n        TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n    tmf.init(ts);\n\n    // acquire X509 trust manager from factory\n    TrustManager tms[] = tmf.getTrustManagers();\n    for (int i = 0; i < tms.length; i++) {\n      if (tms[i] instanceof X509TrustManager) {\n        mTrustManager = (X509TrustManager) tms[i];\n        return;\n      }\n    }\n    throw new NoSuchAlgorithmException(\"No X509TrustManager in TrustManagerFactory\");\n  }\n"}, {"dataset": "load", "exampleID": 4581, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [87], "initializationEnd": [134], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 140, "focalAPIEnd": 165, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXParameters(keyStore)"], "useStart": [171, 270], "useEnd": [227, 298], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/tests/targets/security/cert/CertificateTest.java", "rawCode": "  private PKIXParameters createPKIXParams() throws Exception {\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyStore.load(null, null);\n    keyStore.setCertificateEntry(\"selfSignedCert\", certs[0]);\n\n    PKIXParameters params;\n    params = new PKIXParameters(keyStore);\n    params.setRevocationEnabled(false);\n    return params;\n  }\n"}, {"dataset": "load", "exampleID": 4582, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [1049], "initializationEnd": [1096], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["fail(String)"], "tryExpressionStart": 1019, "tryExpressionEnd": 1023, "tryBlockStart": 1019, "tryBlockEnd": 1920, "catchExpressionStart": 1722, "catchExpressionEnd": 1743, "catchBlockStart": 1722, "catchBlockEnd": 1826, "exceptionHandlingCallStart": [1861], "exceptionHandlingCallEnd": [1913], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1104, "focalAPIEnd": 1127, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinsb/android-libcore/tree/master/luni/src/test/java/tests/api/javax/net/ssl/TrustManagerFactory1Test.java", "rawCode": "  /**\n   * Test for <code>init(ManagerFactoryParameters params)</code> Assertion: throws\n   * InvalidAlgorithmParameterException when params is null\n   */\n  @KnownFailure(\n      \"ManagerFactoryParameters object is not supported \"\n          + \"and InvalidAlgorithmParameterException was thrown.\")\n  public void test_initLjavax_net_ssl_ManagerFactoryParameters() throws Exception {\n    ManagerFactoryParameters par = null;\n    TrustManagerFactory[] trustMF = createTMFac();\n    assertNotNull(\"TrustManagerFactory objects were not created\", trustMF);\n    for (int i = 0; i < trustMF.length; i++) {\n      try {\n        trustMF[i].init(par);\n        fail(\"InvalidAlgorithmParameterException must be thrown\");\n      } catch (InvalidAlgorithmParameterException e) {\n      }\n    }\n\n    String keyAlg = \"DSA\";\n    String validCaNameRfc2253 =\n        (\"CN=Test CA,\"\n            + \"OU=Testing Division,\"\n            + \"O=Test It All,\"\n            + \"L=Test Town,\"\n            + \"ST=Testifornia,\"\n            + \"C=Testland\");\n\n    try {\n      KeyStore kStore = KeyStore.getInstance(KeyStore.getDefaultType());\n      kStore.load(null, null);\n      PublicKey pk = new TestKeyPair(keyAlg).getPublic();\n      TrustAnchor ta = new TrustAnchor(validCaNameRfc2253, pk, getFullEncoding());\n      Set<TrustAnchor> trustAnchors = new HashSet<TrustAnchor>();\n      trustAnchors.add(ta);\n      X509CertSelector xcs = new X509CertSelector();\n      PKIXBuilderParameters pkixBP = new PKIXBuilderParameters(trustAnchors, xcs);\n      CertPathTrustManagerParameters cptmp = new CertPathTrustManagerParameters(pkixBP);\n      TrustManagerFactory tmf = TrustManagerFactory.getInstance(getDefaultAlgorithm());\n      try {\n        tmf.init(cptmp);\n      } catch (Exception ex) {\n        fail(ex + \" was thrown for init(ManagerFactoryParameters spec)\");\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception for configuration: \" + e);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4583, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [1110], "initializationEnd": [1157], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["fail(String)"], "tryExpressionStart": 1083, "tryExpressionEnd": 1087, "tryBlockStart": 1083, "tryBlockEnd": 1293, "catchExpressionStart": 1225, "catchExpressionEnd": 1245, "catchBlockStart": 1225, "catchBlockEnd": 1293, "exceptionHandlingCallStart": [1253], "exceptionHandlingCallEnd": [1286], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 1165, "focalAPIEnd": 1185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["KeyManagerFactorySpiImpl.engineInit(keyStore,char[])"], "useStart": [1193], "useEnd": [1217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/test/java/tests/api/javax/net/ssl/KeyManagerFactorySpiTest.java", "rawCode": "  /** javax.net.ssl.KeyManagerFactorySpi#KengineInit(KeyStore ks, char[] password) */\n  public void test_engineInit_01() {\n    KeyManagerFactorySpiImpl kmf = new KeyManagerFactorySpiImpl();\n    KeyStore ks;\n    char[] psw = \"password\".toCharArray();\n\n    try {\n      kmf.engineInit(null, null);\n      fail(\"NoSuchAlgorithmException wasn't thrown\");\n    } catch (NoSuchAlgorithmException kse) {\n      // expected\n    } catch (Exception e) {\n      fail(e + \" was thrown instead of NoSuchAlgorithmException\");\n    }\n\n    try {\n      kmf.engineInit(null, psw);\n      fail(\"KeyStoreException wasn't thrown\");\n    } catch (KeyStoreException uke) {\n      // expected\n    } catch (Exception e) {\n      fail(e + \" was thrown instead of KeyStoreException\");\n    }\n\n    try {\n      ks = KeyStore.getInstance(KeyStore.getDefaultType());\n      kmf.engineInit(ks, null);\n      fail(\"UnrecoverableKeyException wasn't thrown\");\n    } catch (UnrecoverableKeyException uke) {\n      // expected\n    } catch (Exception e) {\n      fail(e + \" was thrown instead of UnrecoverableKeyException\");\n    }\n\n    try {\n      KeyStore kst = KeyStore.getInstance(KeyStore.getDefaultType());\n      kst.load(null, null);\n      kmf.engineInit(kst, psw);\n    } catch (Exception e) {\n      fail(\"Unexpected exception \" + e);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4584, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [119], "initializationEnd": [166], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 172, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,*)"], "useStart": [638, 690, 742, 821], "useEnd": [684, 736, 788, 879], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robovm/robovm/tree/master/tests/libcore/luni/src/test/java/tests/security/cert/PKIXBuilderParametersTest.java", "rawCode": "  /** Test for <code>toString()</code> */\n  public final void testToString() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n\n    ByteArrayInputStream certArray = new ByteArrayInputStream(certificate.getBytes());\n\n    ByteArrayInputStream certArray2 = new ByteArrayInputStream(certificate2.getBytes());\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n    keyTest.setCertificateEntry(\"alias2\", cert[0]);\n    keyTest.setCertificateEntry(\"alias3\", cert[1]);\n\n    PKIXBuilderParameters p = new PKIXBuilderParameters(keyTest, new X509CertSelector());\n    assertNotNull(p.toString());\n  }\n"}, {"dataset": "load", "exampleID": 4585, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [99], "initializationEnd": [146], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 152, "focalAPIEnd": 177, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "new PKIXBuilderParameters(keyStore,X509CertSelector)", "new PKIXParameters(keyStore)"], "useStart": [462, 965, 1310], "useEnd": [531, 1019, 1338], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InsomniaAOSP/platform_libcore/tree/master/luni/src/test/java/tests/targets/security/cert/CertPathValidatorTestPKIX.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyStore.load(null, null);\n\n    CertificateFactory certificateFactory = CertificateFactory.getInstance(\"X509\");\n\n    X509Certificate selfSignedcertificate =\n        (X509Certificate)\n            certificateFactory.generateCertificate(\n                new ByteArrayInputStream(selfSignedCert.getBytes()));\n\n    keyStore.setCertificateEntry(\"selfSignedCert\", selfSignedcertificate);\n\n    X509CertSelector targetConstraints = new X509CertSelector();\n    targetConstraints.setCertificate(selfSignedcertificate);\n\n    List<Certificate> certList = new ArrayList<Certificate>();\n    certList.add(selfSignedcertificate);\n    CertStoreParameters storeParams = new CollectionCertStoreParameters(certList);\n\n    CertStore certStore = CertStore.getInstance(\"Collection\", storeParams);\n\n    PKIXBuilderParameters parameters = new PKIXBuilderParameters(keyStore, targetConstraints);\n    parameters.addCertStore(certStore);\n    parameters.setRevocationEnabled(false);\n\n    CertPathBuilder pathBuilder = CertPathBuilder.getInstance(\"PKIX\");\n\n    CertPathBuilderResult builderResult = pathBuilder.build(parameters);\n\n    certPath = builderResult.getCertPath();\n\n    params = new PKIXParameters(keyStore);\n    params.setRevocationEnabled(false);\n  }\n"}, {"dataset": "load", "exampleID": 4586, "initialization": ["KeyStore keyStore = getInstance(String,String)"], "initializationStart": [86], "initializationEnd": [123], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getName()", "toString()", "new SimpleTestResult(boolean,String)"], "tryExpressionStart": 57, "tryExpressionEnd": 61, "tryBlockStart": 57, "tryBlockEnd": 3297, "catchExpressionStart": 1984, "catchExpressionEnd": 2004, "catchBlockStart": 1984, "catchBlockEnd": 2114, "exceptionHandlingCallStart": [2049, 2092, 2021], "exceptionHandlingCallEnd": [2058, 2104, 2105], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 132, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,RSAPrivateKey,char[],Certificate[])", "keyStore.load(ByteArrayInputStream,char[])", "keyStore.getKey(String,char[])", "keyStore.getCertificateChain(String)"], "useStart": [2122, 2527, 2630, 3044], "useEnd": [2174, 2550, 2661, 3080], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mlundblad/bc-java/tree/master/prov/src/test/jdk1.1/org/bouncycastle/jce/provider/test/KeyStoreTest.java", "rawCode": "  public TestResult keyStoreTest(String storeName) {\n    try {\n      KeyStore store = KeyStore.getInstance(storeName, \"BC\");\n\n      store.load(null, null);\n\n      KeyPairGenerator gen = KeyPairGenerator.getInstance(\"RSA\", \"BC\");\n\n      gen.initialize(1024, new SecureRandom());\n\n      KeyPair pair = gen.generateKeyPair();\n      RSAPrivateKey privKey = (RSAPrivateKey) pair.getPrivate();\n      RSAPublicKey pubKey = (RSAPublicKey) pair.getPublic();\n      BigInteger modulus = privKey.getModulus();\n      BigInteger privateExponent = privKey.getPrivateExponent();\n\n      //\n      // distinguished name table.\n      //\n      Hashtable attrs = new Hashtable();\n\n      attrs.put(X509Principal.C, \"AU\");\n      attrs.put(X509Principal.O, \"The Legion of the Bouncy Castle\");\n      attrs.put(X509Principal.L, \"Melbourne\");\n      attrs.put(X509Principal.ST, \"Victoria\");\n      attrs.put(X509Principal.EmailAddress, \"feedback-crypto@bouncycastle.org\");\n\n      //\n      // extensions\n      //\n\n      //\n      // create the certificate.\n      //\n      X509V3CertificateGenerator certGen = new X509V3CertificateGenerator();\n\n      certGen.setSerialNumber(BigInteger.valueOf(1));\n      certGen.setIssuerDN(new X509Principal(attrs));\n      certGen.setNotBefore(new Date(System.currentTimeMillis() - 50000));\n      certGen.setNotAfter(new Date(System.currentTimeMillis() + 50000));\n      certGen.setSubjectDN(new X509Principal(attrs));\n      certGen.setPublicKey(pubKey);\n      certGen.setSignatureAlgorithm(\"MD5WithRSAEncryption\");\n\n      Certificate[] chain = new Certificate[1];\n\n      try {\n        X509Certificate cert = certGen.generateX509Certificate(privKey);\n\n        cert.checkValidity(new Date());\n\n        cert.verify(pubKey);\n\n        ByteArrayInputStream bIn = new ByteArrayInputStream(cert.getEncoded());\n        CertificateFactory fact = CertificateFactory.getInstance(\"X.509\", \"BC\");\n\n        cert = (X509Certificate) fact.generateCertificate(bIn);\n\n        chain[0] = cert;\n      } catch (Exception e) {\n        return new SimpleTestResult(false, getName() + \": error generating cert - \" + e.toString());\n      }\n\n      store.setKeyEntry(\"private\", privKey, passwd, chain);\n\n      //\n      // write out and read back store\n      //\n      ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n\n      store.store(bOut, passwd);\n\n      ByteArrayInputStream bIn = new ByteArrayInputStream(bOut.toByteArray());\n\n      //\n      // start with a new key store\n      //\n      store = KeyStore.getInstance(storeName, \"BC\");\n\n      store.load(bIn, passwd);\n\n      //\n      // verify public key\n      //\n      privKey = (RSAPrivateKey) store.getKey(\"private\", passwd);\n\n      if (!privKey.getModulus().equals(modulus)) {\n        return new SimpleTestResult(false, getName() + \": private key modulus wrong\");\n      } else if (!privKey.getPrivateExponent().equals(privateExponent)) {\n        return new SimpleTestResult(false, getName() + \": private key exponent wrong\");\n      }\n\n      //\n      // verify certificate\n      //\n      Certificate cert = store.getCertificateChain(\"private\")[0];\n\n      cert.verify(pubKey);\n\n      return new SimpleTestResult(true, getName() + \": Okay\");\n    } catch (Exception e) {\n      return new SimpleTestResult(false, getName() + \": exception - \" + e.toString());\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4587, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [90], "initializationEnd": [137], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 143, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.deleteEntry(String)"], "useStart": [173], "useEnd": [196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InsomniaAOSP/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  public void test_deleteEmptyEntryEmptyAlias() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n    keyTest.deleteEntry(\"\");\n  }\n"}, {"dataset": "load", "exampleID": 4588, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [523], "initializationEnd": [570], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.isCertificateEntry(String)"], "configurationStart": [589], "configurationEnd": [624], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 694, "focalAPIEnd": 718, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setCertificateEntry(String,X509Certificate)", "keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])"], "useStart": [739, 807], "useEnd": [785, 868], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wsot/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#isCertificateEntry(java.lang.String) */\n  public void test_isCertificateEntryLjava_lang_String() throws Exception {\n    // Test for method boolean\n    // java.security.KeyStore.isCertificateEntry(java.lang.String)\n    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n    X509Certificate cert[] = new X509Certificate[2];\n    cert[0] = (X509Certificate) cf.generateCertificate(certArray);\n    cert[1] = (X509Certificate) cf.generateCertificate(certArray2);\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.isCertificateEntry(\"alias\");\n      fail();\n    } catch (KeyStoreException expected) {\n    }\n\n    keyTest.load(null, null);\n    // alias 1\n    keyTest.setCertificateEntry(\"alias1\", cert[0]);\n\n    // alias 2\n    keyTest.setKeyEntry(\"alias2\", getPrivateKey(), pssWord, cert);\n\n    assertTrue(\n        \"isCertificateEntry method returns false for a certificate\",\n        keyTest.isCertificateEntry(\"alias1\"));\n    assertFalse(\n        \"isCertificateEntry method returns true for noncertificate\",\n        keyTest.isCertificateEntry(\"alias2\"));\n  }\n"}, {"dataset": "load", "exampleID": 4589, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [90], "initializationEnd": [137], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 143, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.deleteEntry(String)"], "useStart": [173], "useEnd": [196], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SVMP/android_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  public void test_deleteEmptyEntryEmptyAlias() throws Exception {\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, null);\n    keyTest.deleteEntry(\"\");\n  }\n"}, {"dataset": "load", "exampleID": 4590, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 80, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getEntry(String,KeyStore.PasswordProtection)"], "useStart": [417], "useEnd": [455], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_GetEntry_NullParams_Success() throws Exception {\n    mKeyStore.load(null, null);\n\n    assertTrue(mAndroidKeyStore.importKey(Credentials.USER_PRIVATE_KEY + TEST_ALIAS_1, FAKE_KEY_1));\n    assertTrue(mAndroidKeyStore.put(Credentials.USER_CERTIFICATE + TEST_ALIAS_1, FAKE_USER_1));\n    assertTrue(mAndroidKeyStore.put(Credentials.CA_CERTIFICATE + TEST_ALIAS_1, FAKE_CA_1));\n\n    Entry entry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n    assertNotNull(\"Entry should exist\", entry);\n\n    assertTrue(\"Should be a PrivateKeyEntry\", entry instanceof PrivateKeyEntry);\n\n    PrivateKeyEntry keyEntry = (PrivateKeyEntry) entry;\n\n    assertPrivateKeyEntryEquals(keyEntry, FAKE_KEY_1, FAKE_USER_1, FAKE_CA_1);\n  }\n"}, {"dataset": "load", "exampleID": 4591, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 85, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setEntry(String,PrivateKeyEntry,*)", "keyStore.getEntry(String,KeyStore.PasswordProtection)"], "useStart": [651, 726], "useEnd": [699, 764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_SetEntry_PrivateKeyEntry_Success() throws Exception {\n    mKeyStore.load(null, null);\n\n    KeyFactory keyFact = KeyFactory.getInstance(\"RSA\");\n    PrivateKey expectedKey = keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));\n\n    final CertificateFactory f = CertificateFactory.getInstance(\"X.509\");\n\n    final Certificate[] expectedChain = new Certificate[2];\n    expectedChain[0] = f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));\n    expectedChain[1] = f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));\n\n    PrivateKeyEntry expected = new PrivateKeyEntry(expectedKey, expectedChain);\n\n    mKeyStore.setEntry(TEST_ALIAS_1, expected, null);\n\n    Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n    assertNotNull(\"Retrieved entry should exist\", actualEntry);\n\n    assertTrue(\n        \"Retrieved entry should be of type PrivateKeyEntry\",\n        actualEntry instanceof PrivateKeyEntry);\n\n    PrivateKeyEntry actual = (PrivateKeyEntry) actualEntry;\n\n    assertPrivateKeyEntryEquals(actual, FAKE_KEY_1, FAKE_USER_1, FAKE_CA_1);\n  }\n"}, {"dataset": "load", "exampleID": 4592, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [88], "initializationEnd": [135], "hasTryCatch": 1, "exceptionType": "KeyStoreException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 54, "tryExpressionEnd": 58, "tryBlockStart": 54, "tryBlockEnd": 1274, "catchExpressionStart": 880, "catchExpressionEnd": 908, "catchBlockStart": 880, "catchBlockEnd": 942, "exceptionHandlingCallStart": [916], "exceptionHandlingCallEnd": [935], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 143, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new MySSLSocketFactory(keyStore)"], "useStart": [216], "useEnd": [250], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neokongwai/abc/tree/master/src/watsons/wine/utilities/MySSLSocketFactory.java", "rawCode": "  public static HttpClient createMyHttpClient() {\n    try {\n      KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n      trustStore.load(null, null);\n\n      SSLSocketFactory mSSLSocketFactory = new MySSLSocketFactory(trustStore);\n      mSSLSocketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);\n\n      HttpParams params = new BasicHttpParams();\n      HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);\n      HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);\n\n      SchemeRegistry registry = new SchemeRegistry();\n      registry.register(new Scheme(\"http\", PlainSocketFactory.getSocketFactory(), 80));\n      registry.register(new Scheme(\"https\", mSSLSocketFactory, 443));\n\n      ClientConnectionManager ccm = new ThreadSafeClientConnManager(params, registry);\n      return new DefaultHttpClient(ccm, params);\n    } catch (KeyStoreException e) {\n      e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n    } catch (CertificateException e) {\n      e.printStackTrace();\n    } catch (IOException e) {\n      e.printStackTrace();\n    } catch (KeyManagementException e) {\n      e.printStackTrace();\n    } catch (UnrecoverableKeyException e) {\n      e.printStackTrace();\n    }\n    return new DefaultHttpClient();\n  }\n"}, {"dataset": "load", "exampleID": 4593, "initialization": ["char[] password = toCharArray()", "KeyStore keyStore = getInstance(*)", "InputStream stream = new BufferedInputStream(*)"], "initializationStart": [426, 472, 569], "initializationEnd": [451, 519, 623], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 631, "focalAPIEnd": 647, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["KeyManagerFactory.init(keyStore,char[])"], "useStart": [856], "useEnd": [873], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 655, "finallyExpressionEnd": 663, "finallyBlockStart": 655, "finallyBlockEnd": 722, "cleanUpCallStart": [697], "cleanUpCallEnd": [707], "url": "https://github.com/justinsb/android-libcore/tree/master/luni/src/main/java/org/apache/harmony/xnet/provider/jsse/DefaultSSLContextImpl.java", "rawCode": "  KeyManager[] getKeyManagers() throws GeneralSecurityException, IOException {\n    if (KEY_MANAGERS != null) {\n      return KEY_MANAGERS;\n    }\n    // find KeyStore, KeyManagers\n    String keystore = System.getProperty(\"javax.net.ssl.keyStore\");\n    if (keystore == null) {\n      return null;\n    }\n    String keystorepwd = System.getProperty(\"javax.net.ssl.keyStorePassword\");\n    char[] pwd = (keystorepwd == null) ? null : keystorepwd.toCharArray();\n\n    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n    InputStream is = null;\n    try {\n      is = new BufferedInputStream(new FileInputStream(keystore));\n      ks.load(is, pwd);\n    } finally {\n      if (is != null) {\n        is.close();\n      }\n    }\n\n    String kmfAlg = KeyManagerFactory.getDefaultAlgorithm();\n    KeyManagerFactory kmf = KeyManagerFactory.getInstance(kmfAlg);\n    kmf.init(ks, pwd);\n    KEY_MANAGERS = kmf.getKeyManagers();\n    return KEY_MANAGERS;\n  }\n"}, {"dataset": "load", "exampleID": 4594, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 123, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setEntry(String,PrivateKeyEntry,*)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.setEntry(String,PrivateKeyEntry,*)", "keyStore.getEntry(String,KeyStore.PasswordProtection)"], "useStart": [791, 877, 1741, 1827], "useEnd": [848, 915, 1798, 1865], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/keystore/tests/src/android/security/AndroidKeyStoreTest.java", "rawCode": "  public void testKeyStore_SetEntry_PrivateKeyEntry_Overwrites_ShortPrivateKeyEntry_Success()\n      throws Exception {\n    mKeyStore.load(null, null);\n\n    final CertificateFactory f = CertificateFactory.getInstance(\"X.509\");\n\n    final Certificate caCert = f.generateCertificate(new ByteArrayInputStream(FAKE_CA_1));\n\n    // Start with PrivateKeyEntry\n    {\n      KeyFactory keyFact = KeyFactory.getInstance(\"RSA\");\n      PrivateKey expectedKey = keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));\n      final Certificate[] expectedChain = new Certificate[2];\n      expectedChain[0] = f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));\n      expectedChain[1] = caCert;\n\n      PrivateKeyEntry expectedPrivEntry = new PrivateKeyEntry(expectedKey, expectedChain);\n\n      mKeyStore.setEntry(TEST_ALIAS_1, expectedPrivEntry, null);\n\n      Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n      assertNotNull(\"Retrieved entry should exist\", actualEntry);\n      assertTrue(\n          \"Retrieved entry should be of type PrivateKeyEntry\",\n          actualEntry instanceof PrivateKeyEntry);\n\n      PrivateKeyEntry actualPrivEntry = (PrivateKeyEntry) actualEntry;\n      assertPrivateKeyEntryEquals(actualPrivEntry, FAKE_KEY_1, FAKE_USER_1, FAKE_CA_1);\n    }\n\n    // Replace with PrivateKeyEntry that has no chain\n    {\n      KeyFactory keyFact = KeyFactory.getInstance(\"RSA\");\n      PrivateKey expectedKey = keyFact.generatePrivate(new PKCS8EncodedKeySpec(FAKE_KEY_1));\n      final Certificate[] expectedChain = new Certificate[1];\n      expectedChain[0] = f.generateCertificate(new ByteArrayInputStream(FAKE_USER_1));\n\n      PrivateKeyEntry expectedPrivEntry = new PrivateKeyEntry(expectedKey, expectedChain);\n\n      mKeyStore.setEntry(TEST_ALIAS_1, expectedPrivEntry, null);\n\n      Entry actualEntry = mKeyStore.getEntry(TEST_ALIAS_1, null);\n      assertNotNull(\"Retrieved entry should exist\", actualEntry);\n      assertTrue(\n          \"Retrieved entry should be of type PrivateKeyEntry\",\n          actualEntry instanceof PrivateKeyEntry);\n\n      PrivateKeyEntry actualPrivEntry = (PrivateKeyEntry) actualEntry;\n      assertPrivateKeyEntryEquals(actualPrivEntry, FAKE_KEY_1, FAKE_USER_1, null);\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4595, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [222], "initializationEnd": [260], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new KeyStoreException(*)"], "tryExpressionStart": 268, "tryExpressionEnd": 272, "tryBlockStart": 268, "tryBlockEnd": 554, "catchExpressionStart": 317, "catchExpressionEnd": 339, "catchBlockStart": 317, "catchBlockEnd": 388, "exceptionHandlingCallStart": [355], "exceptionHandlingCallEnd": [379], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 282, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codefireX/platform_libcore/tree/master/luni/src/main/java/org/apache/harmony/xnet/provider/jsse/TrustManagerFactoryImpl.java", "rawCode": "  /** @see javax.net.ssl.TrustManagerFactorySpi#engineInit(KeyStore) */\n  @Override\n  public void engineInit(KeyStore ks) throws KeyStoreException {\n    if (ks != null) {\n      keyStore = ks;\n    } else {\n      keyStore = KeyStore.getInstance(\"AndroidCAStore\");\n      try {\n        keyStore.load(null, null);\n      } catch (IOException e) {\n        throw new KeyStoreException(e);\n      } catch (CertificateException e) {\n        throw new KeyStoreException(e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new KeyStoreException(e);\n      }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4596, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [448], "initializationEnd": [499], "hasTryCatch": 1, "exceptionType": "UnrecoverableKeyException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 364, "tryExpressionEnd": 368, "tryBlockStart": 364, "tryBlockEnd": 2315, "catchExpressionStart": 1978, "catchExpressionEnd": 2014, "catchBlockStart": 1978, "catchBlockEnd": 2048, "exceptionHandlingCallStart": [2022], "exceptionHandlingCallEnd": [2041], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 507, "focalAPIEnd": 572, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["KeyManagerFactory.init(keyStore,char[])"], "useStart": [709], "useEnd": [757], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mxro/osgi-maven/tree/master/thrdBabuDb05/src/main/java/de/mxro/thrd/xstreemfs/foundation/SSLOptions.java", "rawCode": "  /**\n   * Create/initialize the SSLContext with key material\n   *\n   * @param trustManager the trust manager for the SSL context (may be <code>null</code>)\n   * @return the created and initialized SSLContext\n   * @throws IOException\n   */\n  private SSLContext createSSLContext(TrustManager trustManager) throws IOException {\n    SSLContext sslContext = null;\n    try {\n      // First initialize the key and trust material.\n      KeyStore ksKeys = KeyStore.getInstance(serverCredentialFileContainer);\n      ksKeys.load(serverCredentialFile, serverCredentialFilePassphrase);\n\n      // KeyManager's decide which key material to use.\n      KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n      kmf.init(ksKeys, serverCredentialFilePassphrase);\n\n      sslContext = SSLContext.getInstance(\"TLS\");\n\n      if (trustManager != null) {\n        // if a user-defined trust manager is set ...\n        trustManager.init(\n            trustedCertificatesFileContainer,\n            trustedCertificatesFile,\n            trustedCertificatesFilePassphrase);\n        sslContext.init(kmf.getKeyManagers(), new TrustManager[] {trustManager}, null);\n      } else if (trustedCertificatesFileContainer.equals(\"none\")) {\n        TrustManager[] myTMs = new TrustManager[] {new NoAuthTrustStore()};\n        sslContext.init(kmf.getKeyManagers(), myTMs, null);\n      } else {\n\n        // TrustManager's decide whether to allow connections.\n        KeyStore ksTrust = null;\n        if (trustedCertificatesFileContainer.equals(\"none\")) {\n          ksTrust = KeyStore.getInstance(KeyStore.getDefaultType());\n        } else {\n          ksTrust = KeyStore.getInstance(trustedCertificatesFileContainer);\n          ksTrust.load(trustedCertificatesFile, trustedCertificatesFilePassphrase);\n        }\n\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ksTrust);\n\n        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n      }\n    } catch (UnrecoverableKeyException e) {\n      e.printStackTrace();\n    } catch (KeyManagementException e) {\n      e.printStackTrace();\n    } catch (KeyStoreException e) {\n      e.printStackTrace();\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n    } catch (CertificateException e) {\n      e.printStackTrace();\n    }\n    return sslContext;\n  }\n"}, {"dataset": "load", "exampleID": 4597, "initialization": ["KeyStore keyStore = getInstance(String)"], "initializationStart": [361], "initializationEnd": [391], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 397, "focalAPIEnd": 422, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setKeyEntry(String,PrivateKey,char[],X509Certificate[])", "connectAndExchange(*,keyStore,X509Certificate[],KeyStore,X509Certificate[])"], "useStart": [428, 1107], "useEnd": [638, 1224], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnip91/proactive-component-monitoring/tree/master/src/Tests/functionalTests/ssl/TestPASslSocketFactory.java", "rawCode": "  /**\n   * Check that client and server are able to communicate:\n   *\n   * <ul>\n   *   <li>Chipering and authentication\n   *   <li>Client and Server uses cross credential. server has client cert in it's truststore and\n   *       vice versa\n   * </ul>\n   */\n  @Test\n  public void testAuthAndChiperedOkCrossCredential() throws Exception {\n    KeyStore clientKs = KeyStore.getInstance(\"PKCS12\");\n    clientKs.load(null, null);\n    clientKs.setKeyEntry(\n        kpAndCerts[0].cert.getSubjectDN().toString(),\n        kpAndCerts[0].getPrivateKey(),\n        SslHelpers.DEFAULT_KS_PASSWD.toCharArray(),\n        kpAndCerts[0].getCertAsCertArray());\n    X509Certificate[] clientTrustedCerts = kpAndCerts[1].getCertAsCertArray();\n\n    KeyStore serverKs = KeyStore.getInstance(\"PKCS12\");\n    serverKs.load(null, null);\n    serverKs.setKeyEntry(\n        kpAndCerts[1].cert.getSubjectDN().toString(),\n        kpAndCerts[1].getPrivateKey(),\n        SslHelpers.DEFAULT_KS_PASSWD.toCharArray(),\n        kpAndCerts[1].getCertAsCertArray());\n    X509Certificate[] serverTrustedCerts = kpAndCerts[0].getCertAsCertArray();\n\n    connectAndExchange(\n        SecureMode.AUTH_AND_CIPHERED, clientKs, clientTrustedCerts, serverKs, serverTrustedCerts);\n  }\n"}, {"dataset": "load", "exampleID": 4598, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [177], "initializationEnd": [224], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["keyStore.getEntry(String,KeyStore.PasswordProtection)"], "configurationStart": [243], "configurationEnd": [318], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 388, "focalAPIEnd": 415, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.entryInstanceOf(String,*)", "keyStore.entryInstanceOf(String,*)"], "useStart": [434, 577, 629, 741, 1346, 1560, 1602, 1656, 1757, 1858, 2127, 2770], "useEnd": [504, 610, 657, 772, 1375, 1596, 1638, 1685, 1787, 1888, 2192, 2835], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#getEntry(String, KeyStore.ProtectionParameter) */\n  public void test_getEntry() throws Exception {\n    String type = \"DSA\";\n\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n\n    try {\n      keyTest.getEntry(\"anAlias\", new KeyStore.PasswordProtection(new char[] {}));\n      fail();\n    } catch (KeyStoreException expected) {\n    }\n\n    keyTest.load(null, pssWord);\n\n    try {\n      keyTest.getEntry(null, new KeyStore.PasswordProtection(new char[] {}));\n      fail();\n    } catch (NullPointerException expected) {\n    }\n\n    keyTest.getEntry(\"anAlias\", null);\n\n    try {\n      keyTest.getEntry(null, null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n\n    assertNull(keyTest.getEntry(\"alias\", null));\n\n    Certificate[] chain = {\n      new MyCertificate(type, testEncoding), new MyCertificate(type, testEncoding)\n    };\n\n    DSAPrivateKey privateKey1 =\n        (DSAPrivateKey)\n            KeyFactory.getInstance(type)\n                .generatePrivate(\n                    new DSAPrivateKeySpec(\n                        new BigInteger(\"1\"),\n                        new BigInteger(\"2\"),\n                        new BigInteger(\"3\"),\n                        new BigInteger(\"4\")));\n\n    KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pssWord);\n    assertNull(keyTest.getEntry(\"alias\", pp));\n\n    KeyStore.PrivateKeyEntry pke1 = new KeyStore.PrivateKeyEntry(getPrivateKey(), chain);\n    KeyStore.PrivateKeyEntry pke2 = new KeyStore.PrivateKeyEntry(privateKey1, chain);\n\n    keyTest.setEntry(\"alias1\", pke1, pp);\n    keyTest.setEntry(\"alias2\", pke2, pp);\n\n    assertNull(keyTest.getEntry(\"alias\", pp));\n    KeyStore.PrivateKeyEntry pkeActual1 = (KeyStore.PrivateKeyEntry) keyTest.getEntry(\"alias1\", pp);\n    KeyStore.PrivateKeyEntry pkeActual2 = (KeyStore.PrivateKeyEntry) keyTest.getEntry(\"alias2\", pp);\n\n    assertTrue(Arrays.equals(chain, pkeActual1.getCertificateChain()));\n    assertEquals(getPrivateKey(), pkeActual1.getPrivateKey());\n    assertEquals(new MyCertificate(type, testEncoding), pkeActual1.getCertificate());\n    assertTrue(keyTest.entryInstanceOf(\"alias1\", KeyStore.PrivateKeyEntry.class));\n\n    assertTrue(Arrays.equals(chain, pkeActual2.getCertificateChain()));\n    DSAPrivateKey entryPrivateKey = (DSAPrivateKey) pkeActual2.getPrivateKey();\n    assertEquals(privateKey1.getX(), entryPrivateKey.getX());\n    assertEquals(privateKey1.getParams().getG(), entryPrivateKey.getParams().getG());\n    assertEquals(privateKey1.getParams().getP(), entryPrivateKey.getParams().getP());\n    assertEquals(privateKey1.getParams().getQ(), entryPrivateKey.getParams().getQ());\n\n    assertEquals(new MyCertificate(type, testEncoding), pkeActual2.getCertificate());\n    assertTrue(keyTest.entryInstanceOf(\"alias2\", KeyStore.PrivateKeyEntry.class));\n  }\n"}, {"dataset": "load", "exampleID": 4599, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [432], "initializationEnd": [479], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new KeyStoreException(*)"], "tryExpressionStart": 697, "tryExpressionEnd": 701, "tryBlockStart": 697, "tryBlockEnd": 910, "catchExpressionStart": 750, "catchExpressionEnd": 772, "catchBlockStart": 750, "catchBlockEnd": 825, "exceptionHandlingCallStart": [790], "exceptionHandlingCallEnd": [814], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 713, "focalAPIEnd": 738, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.load(InputStream,char[])"], "useStart": [1164], "useEnd": [1227], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TaintDroid/android_platform_libcore/tree/master/luni/src/main/java/org/apache/harmony/xnet/provider/jsse/KeyManagerFactoryImpl.java", "rawCode": "  /** @see javax.net.ssl.KeyManagerFactorySpi#engineInit(KeyStore ks, char[] password) */\n  @Override\n  public void engineInit(KeyStore ks, char[] password)\n      throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {\n    if (ks != null) {\n      keyStore = ks;\n      if (password != null) {\n        pwd = password.clone();\n      } else {\n        pwd = EmptyArray.CHAR;\n      }\n    } else {\n      keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n      String keyStoreName = System.getProperty(\"javax.net.ssl.keyStore\");\n      String keyStorePwd = null;\n      if (keyStoreName == null || keyStoreName.equalsIgnoreCase(\"NONE\") || keyStoreName.isEmpty()) {\n        try {\n          keyStore.load(null, null);\n        } catch (IOException e) {\n          throw new KeyStoreException(e);\n        } catch (CertificateException e) {\n          throw new KeyStoreException(e);\n        }\n      } else {\n        keyStorePwd = System.getProperty(\"javax.net.ssl.keyStorePassword\");\n        if (keyStorePwd == null) {\n          pwd = EmptyArray.CHAR;\n        } else {\n          pwd = keyStorePwd.toCharArray();\n        }\n        try {\n          keyStore.load(new FileInputStream(new File(keyStoreName)), pwd);\n        } catch (FileNotFoundException e) {\n          throw new KeyStoreException(e);\n        } catch (IOException e) {\n          throw new KeyStoreException(e);\n        } catch (CertificateException e) {\n          throw new KeyStoreException(e);\n        }\n      }\n    }\n  }\n"}, {"dataset": "load", "exampleID": 4600, "initialization": ["KeyStore keyStore = getInstance(*)"], "initializationStart": [193], "initializationEnd": [240], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = keyStore.load(stream,password)", "focalAPIStart": 246, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.entryInstanceOf(String,*)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.entryInstanceOf(String,*)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)", "keyStore.getEntry(String,KeyStore.PasswordProtection)", "keyStore.entryInstanceOf(String,*)", "keyStore.setEntry(String,KeyStore.PrivateKeyEntry,KeyStore.PasswordProtection)"], "useStart": [1022, 1266, 1371, 1636, 1708, 1788, 2395, 2467, 2548, 3142, 3227], "useEnd": [1058, 1300, 1400, 1700, 1743, 1817, 2459, 2503, 2578, 3207, 3261], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/libcore/tree/master/luni/src/test/java/org/apache/harmony/security/tests/java/security/KeyStore2Test.java", "rawCode": "  /** java.security.KeyStore#setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter) */\n  public void test_setEntry() throws Exception {\n    String type = \"DSA\";\n\n    KeyStore keyTest = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyTest.load(null, pssWord);\n\n    Certificate[] chain = {\n      new MyCertificate(type, testEncoding), new MyCertificate(type, testEncoding)\n    };\n    DSAPrivateKey privateKey1 =\n        (DSAPrivateKey)\n            KeyFactory.getInstance(type)\n                .generatePrivate(\n                    new DSAPrivateKeySpec(\n                        new BigInteger(\"1\"),\n                        new BigInteger(\"2\"),\n                        new BigInteger(\"3\"),\n                        new BigInteger(\"4\")));\n\n    KeyStore.PasswordProtection pp = new KeyStore.PasswordProtection(pssWord);\n    KeyStore.PrivateKeyEntry pke = new KeyStore.PrivateKeyEntry(getPrivateKey(), chain);\n    KeyStore.PrivateKeyEntry pke1 = new KeyStore.PrivateKeyEntry(privateKey1, chain);\n\n    try {\n      keyTest.setEntry(\"alias\", pke, null);\n      assertFalse(StandardNames.IS_RI); // BKS KeyStore does not require a password\n    } catch (KeyStoreException e) {\n      assertTrue(StandardNames.IS_RI); // JKS KeyStore requires a password\n    }\n\n    keyTest.setEntry(\"alias\", pke, pp);\n\n    KeyStore.PrivateKeyEntry pkeActual = (KeyStore.PrivateKeyEntry) keyTest.getEntry(\"alias\", pp);\n\n    assertTrue(Arrays.equals(chain, pkeActual.getCertificateChain()));\n    assertEquals(getPrivateKey(), pkeActual.getPrivateKey());\n    assertEquals(new MyCertificate(type, testEncoding), pkeActual.getCertificate());\n    assertTrue(keyTest.entryInstanceOf(\"alias\", KeyStore.PrivateKeyEntry.class));\n\n    keyTest.setEntry(\"alias\", pke1, pp);\n    pkeActual = (KeyStore.PrivateKeyEntry) keyTest.getEntry(\"alias\", pp);\n\n    assertTrue(Arrays.equals(chain, pkeActual.getCertificateChain()));\n    DSAPrivateKey actualPrivateKey = (DSAPrivateKey) pkeActual.getPrivateKey();\n    assertEquals(privateKey1.getX(), actualPrivateKey.getX());\n    assertEquals(privateKey1.getParams().getG(), actualPrivateKey.getParams().getG());\n    assertEquals(privateKey1.getParams().getP(), actualPrivateKey.getParams().getP());\n    assertEquals(privateKey1.getParams().getQ(), actualPrivateKey.getParams().getQ());\n    assertEquals(new MyCertificate(type, testEncoding), pkeActual.getCertificate());\n    assertTrue(keyTest.entryInstanceOf(\"alias\", KeyStore.PrivateKeyEntry.class));\n\n    keyTest.setEntry(\"alias2\", pke1, pp);\n    pkeActual = (KeyStore.PrivateKeyEntry) keyTest.getEntry(\"alias2\", pp);\n\n    assertTrue(Arrays.equals(chain, pkeActual.getCertificateChain()));\n    actualPrivateKey = (DSAPrivateKey) pkeActual.getPrivateKey();\n    assertEquals(privateKey1.getX(), actualPrivateKey.getX());\n    assertEquals(privateKey1.getParams().getG(), actualPrivateKey.getParams().getG());\n    assertEquals(privateKey1.getParams().getP(), actualPrivateKey.getParams().getP());\n    assertEquals(privateKey1.getParams().getQ(), actualPrivateKey.getParams().getQ());\n    assertEquals(new MyCertificate(type, testEncoding), pkeActual.getCertificate());\n    assertTrue(keyTest.entryInstanceOf(\"alias2\", KeyStore.PrivateKeyEntry.class));\n\n    try {\n      keyTest.setEntry(null, null, null);\n      fail();\n    } catch (NullPointerException expected) {\n    }\n  }\n"}]