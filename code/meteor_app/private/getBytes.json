[{"dataset": "getBytes", "exampleID": 8401, "initialization": ["String string = getTerminalType()"], "initializationStart": [625], "initializationEnd": [642], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 705, "focalAPIEnd": 721, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [699], "useEnd": [722], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kabir/connectbot/tree/master/src/de/mud/telnet/TelnetProtocolHandler.java", "rawCode": "  /**\n   * Handle an incoming IAC SB &lt;type&gt; &lt;bytes&gt; IAC SE\n   *\n   * @param type type of SB\n   * @param sbata byte array as &lt;bytes&gt;\n   */\n  private void handle_sb(byte type, byte[] sbdata) throws IOException {\n    if (debug > 1) System.err.println(\"TelnetIO.handle_sb(\" + type + \")\");\n    switch (type) {\n      case TELOPT_TTYPE:\n        if (sbdata.length > 0 && sbdata[0] == TELQUAL_SEND) {\n          write(IACSB);\n          write(TELOPT_TTYPE);\n          write(TELQUAL_IS);\n          /* FIXME: need more logic here if we use\n           * more than one terminal type\n           */\n          String ttype = getTerminalType();\n          if (ttype == null) ttype = \"dumb\";\n          write(ttype.getBytes());\n          write(IACSE);\n        }\n        break;\n      case TELOPT_CHARSET:\n        System.out.println(\"Got SB CHARSET\");\n\n        String charsetStr = new String(sbdata, \"US-ASCII\");\n        if (charsetStr.startsWith(\"TTABLE \")) {\n          charsetStr = charsetStr.substring(7);\n        }\n        String[] charsets = charsetStr.split(charsetStr.substring(0, 0));\n        String myCharset = getCharsetName();\n        for (String charset : charsets) {\n          if (charset.equals(myCharset)) {\n            write(IACSB);\n            write(TELOPT_CHARSET);\n            write(CHARSET_ACCEPTED);\n            write(charset.getBytes());\n            write(IACSE);\n            System.out.println(\"Sent our charset!\");\n            return;\n          }\n        }\n        write(IACSB);\n        write(TELOPT_CHARSET);\n        write(CHARSET_REJECTED);\n        write(IACSE);\n        break;\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8402, "initialization": ["String string = getName()"], "initializationStart": [229], "initializationEnd": [243], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 285, "focalAPIEnd": 308, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)", "println(string)"], "useStart": [271, 336], "useEnd": [309, 368], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/oracle-weblogic/weblogic-innovation-seminars/tree/master/WInS_Demos/control/vbox-build/ChecksumTool.java", "rawCode": "  private static void doMD5(File file) throws IOException {\n    String md5 = getMD5Checksum(file, BUFFER);\n    FileOutputStream fileOut = new FileOutputStream(file.getAbsolutePath() + \".md5\");\n    String fileContents = \"MD5 (\" + file.getName() + \") = \" + md5 + \"\\n\";\n    fileOut.write(fileContents.getBytes());\n    fileOut.close();\n    System.out.println(fileContents);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8403, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 282, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.getBytes(String)", "arraycopy(*,int,byte[],int,byteArray)"], "useStart": [317, 361], "useEnd": [342, 424], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IISI/cdic/tree/master/server/batch/src/main/java/tw/com/citi/cdic/batch/utils/Big5StringUtil.java", "rawCode": "  public static String fitStringToLength(String orignal, int len)\n      throws UnsupportedEncodingException {\n    byte[] out = new byte[len];\n    for (int i = 0; i < len; i++) {\n      out[i] = (byte) 0x20;\n    }\n    orignal = orignal == null ? \"\" : orignal;\n    int copyLen = len > orignal.getBytes(\"ms950\").length ? orignal.getBytes(\"ms950\").length : len;\n    System.arraycopy(orignal.getBytes(\"ms950\"), 0, out, 0, copyLen);\n    return new String(out, \"ms950\");\n  }\n"}, {"dataset": "getBytes", "exampleID": 8404, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 59, "tryExpressionEnd": 63, "tryBlockStart": 59, "tryBlockEnd": 501, "catchExpressionStart": 414, "catchExpressionEnd": 449, "catchBlockStart": 414, "catchBlockEnd": 501, "exceptionHandlingCallStart": [457], "exceptionHandlingCallEnd": [476], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 140, "focalAPIEnd": 154, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray)"], "useStart": [130], "useEnd": [155], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/irunarae/securoid_project/tree/master/client/Securoid_Hashing.java", "rawCode": "  public String MD5(String str) {\n    String MD5 = \"\";\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"MD5\");\n      md.update(str.getBytes());\n      byte byteData[] = md.digest();\n      StringBuffer sb = new StringBuffer();\n      for (int i = 0; i < byteData.length; i++) {\n        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n      }\n      MD5 = sb.toString();\n\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n      MD5 = null;\n    }\n    return MD5;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8405, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 377, "focalAPIEnd": 398, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [352], "useEnd": [399], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/macarthy/js-test-driver-qunit/tree/master/JsTestDriver/src-test/com/google/jstestdriver/ConfigurationParserTest.java", "rawCode": "  public void testParsePlugin() {\n    Plugin expected =\n        new Plugin(\"test\", \"pathtojar\", \"com.test.PluginModule\", Lists.<String>newArrayList());\n    String configFile =\n        \"plugin:\\n\"\n            + \" - name: test\\n\"\n            + \" jar: \\\"pathtojar\\\"\\n\"\n            + \" module: \\\"com.test.PluginModule\\\"\\n\";\n    ByteArrayInputStream bais = new ByteArrayInputStream(configFile.getBytes());\n    ConfigurationParser parser =\n        new ConfigurationParser(null, new InputStreamReader(bais), new DefaultPathRewriter());\n\n    parser.parse();\n    List<Plugin> plugins = parser.getPlugins();\n    assertEquals(expected, plugins.get(0));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8406, "initialization": ["String string = fileGetContents(PushbackInputStream)"], "initializationStart": [118], "initializationEnd": [146], "hasTryCatch": 1, "exceptionType": "SAXException", "exceptionHandlingCall": ["println(String)", "fixMultiTextInfoBug(String)"], "tryExpressionStart": 183, "tryExpressionEnd": 187, "tryBlockStart": 183, "tryBlockEnd": 861, "catchExpressionStart": 367, "catchExpressionEnd": 390, "catchBlockStart": 367, "catchBlockEnd": 778, "exceptionHandlingCallStart": [398, 655], "exceptionHandlingCallEnd": [490, 687], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 335, "focalAPIEnd": 357, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)", "fixMultiTextInfoBug(string)"], "useStart": [310, 655], "useEnd": [358, 687], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andreasb242/Simulation/tree/master/ImportFilter.Madonna/src/ch/zhaw/simulation/inexport/madonna/xmlformat/XmlImporter.java", "rawCode": "  @Override\n  public void read(PushbackInputStream in) throws IOException, ImportException {\n    String xmlContents = FileUtil.fileGetContents(in);\n\n    Document document = null;\n    try {\n      document =\n          DocumentBuilderFactory.newInstance()\n              .newDocumentBuilder()\n              .parse(new ByteArrayInputStream(xmlContents.getBytes()));\n    } catch (SAXException e) {\n      System.err.println(\"Madonna file is not a valid XML File, try to fix it and parse again...\");\n      if (e.getMessage()\n          .contains(\n              \"The element type \\\"MultiTextInfo\\\" must be terminated by the matching end-tag\")) {\n        document = fixMultiTextInfoBug(xmlContents);\n      }\n      if (document == null) {\n        throw new ImportException(e);\n      }\n    } catch (ParserConfigurationException e) {\n      throw new ImportException(e);\n    }\n\n    // Mögliche Kommentare überlesen\n    NodeList rootNodes = document.getChildNodes();\n    Node root = null;\n    for (int i = 0; i < rootNodes.getLength(); i++) {\n      Node n = rootNodes.item(i);\n      if (n.getNodeType() == Node.ELEMENT_NODE) {\n        root = n;\n        break;\n      }\n    }\n\n    if (root == null) {\n      throw new ImportException(\"Root node not found!\");\n    }\n\n    if (!\"Document\".equals(root.getNodeName())) {\n      throw new ImportException(\"Root node name != Document!\");\n    }\n\n    Node flowchart = null;\n    NodeList nodes = root.getChildNodes();\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node n = nodes.item(i);\n\n      if (n.getNodeType() == Node.ELEMENT_NODE) {\n        if (\"Version\".equals(n.getNodeName())) {\n          String version = XmlHelper.getContents(n);\n          System.out.println(\"Imported Madonna Version: \" + version);\n        } else if (\"Flowchart\".equals(n.getNodeName())) {\n          flowchart = n;\n        }\n      }\n    }\n\n    if (flowchart == null) {\n      throw new ImportException(\"Model does not contain a Flowchart\");\n    }\n\n    Node modelInfo = null;\n    nodes = flowchart.getChildNodes();\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node n = nodes.item(i);\n\n      if (n.getNodeType() == Node.ELEMENT_NODE) {\n        if (\"ModelInfo\".equals(n.getNodeName())) {\n          modelInfo = n;\n        }\n      }\n    }\n\n    if (modelInfo == null) {\n      throw new ImportException(\"Model does not contain <ModelInfo>\");\n    }\n\n    Node entries = null;\n    String globals = null;\n    nodes = modelInfo.getChildNodes();\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node n = nodes.item(i);\n\n      if (n.getNodeType() == Node.ELEMENT_NODE) {\n        if (\"Entries\".equals(n.getNodeName())) {\n          entries = n;\n        } else if (\"Globals\".equals(n.getNodeName())) {\n          globals = XmlHelper.getContents(n);\n        }\n      }\n    }\n\n    if (entries == null) {\n      throw new ImportException(\"Model does not contain <Entries>\");\n    }\n\n    nodes = entries.getChildNodes();\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node n = nodes.item(i);\n\n      if (n.getNodeType() == Node.ELEMENT_NODE) {\n        if (\"ReservoirInfo\".equals(n.getNodeName())) {\n          components.add(new XmlContainer(n));\n        } else if (\"FlowInfo\".equals(n.getNodeName())) {\n          valve.add(new XmlValve(n));\n        } else if (\"ConverterInfo\".equals(n.getNodeName())) {\n          components.add(new XmlParameter(n));\n        } else if (\"CloudInfo\".equals(n.getNodeName())) {\n          XmlCloud c = new XmlCloud(n);\n          clouds.put(c.getId(), c);\n        } else if (\"PipeInfo\".equals(n.getNodeName())) {\n          pipes.add(new XmlPipe(n));\n        } else if (\"ArcInfo\".equals(n.getNodeName())) {\n          arcs.add(new XmlArc(n));\n        } else if (\"MultiTextInfo\".equals(n.getNodeName())) {\n          multilineComments.add(new XmlMultilineComment(n));\n        } else if (\"ModelInfo\".equals(n.getNodeName())) {\n          comments.add(new XmlComment(n));\n        } else if (\"TextInfo\".equals(n.getNodeName())) {\n          parseTextInfo(n);\n        } else {\n          System.err.println(\"Unhandled entry: \" + n.getNodeName());\n        }\n      }\n    }\n\n    if (globals != null) {\n      parseGlobals(globals);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8407, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(new File(string,).exists()) && !(string.startsWith(\"https:\",)||string.startsWith(\"http:\",))", "guardType": "IF {", "guardExpressionStart": 137, "guardExpressionEnd": 199, "guardBlockStart": 137, "guardBlockEnd": 260, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 242, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vista-novo/fhir/tree/master/build/tools/java/org.hl7.fhir.tools.core/src/org/hl7/fhir/tools/validator/Validator.java", "rawCode": "  private byte[] loadSource() throws Exception {\n    byte[] src;\n    if (new File(source).exists()) src = loadFromFile(source);\n    else if (source.startsWith(\"https:\") || source.startsWith(\"http:\")) src = loadFromUrl(source);\n    else src = source.getBytes();\n    return src;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8408, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 511, "guardExpressionEnd": 552, "guardBlockStart": 511, "guardBlockEnd": 1531, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 826, "focalAPIEnd": 845, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["digest(byteArray)", "signRequest(string,EclihandRequestContent)"], "useStart": [816, 1402], "useEnd": [846, 1451], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mathieupedrero/eclihand/tree/master/eclihand/rest-server/src/test/java/com/pedrero/eclihand/rest/security/AuthenticationSimulator.java", "rawCode": "  public static String testService(\n      final String path,\n      final String uri,\n      final String username,\n      final String password,\n      Boolean encode)\n      throws IOException {\n\n    HttpGet request = new HttpGet(path + uri);\n\n    Date javaDate = new Date();\n    String date = SECURITY_UTILITIES.printDate(javaDate);\n\n    EclihandRequestContent content =\n        new EclihandRequestContent(uri, javaDate, request.getMethod(), \"\", null);\n\n    request.addHeader(new BasicHeader(\"Date\", date));\n\n    if (username != null && password != null) {\n      final String auth;\n      if (encode) {\n        MessageDigest md = null;\n        try {\n          md = MessageDigest.getInstance(\"SHA-1\");\n        } catch (NoSuchAlgorithmException e) {\n          assert false;\n        }\n        byte[] encodedPasswordByte = md.digest(password.getBytes());\n        byte[] usernameByte = username.getBytes();\n        byte[] toEncode = new byte[encodedPasswordByte.length + usernameByte.length];\n        System.arraycopy(usernameByte, 0, toEncode, 0, usernameByte.length);\n        System.arraycopy(\n            encodedPasswordByte, 0, toEncode, usernameByte.length, encodedPasswordByte.length);\n        String encodedPassword = new String(Base64.encode(md.digest(toEncode)));\n        auth = username + \":\" + SECURITY_UTILITIES.signRequest(encodedPassword, content);\n      } else {\n        auth = username + \":\" + SECURITY_UTILITIES.signRequest(password, content);\n      }\n      request.addHeader(new BasicHeader(\"Authorization\", auth));\n    }\n    request.addHeader(\"Content-type\", ContentType.APPLICATION_JSON.getMimeType());\n\n    // send request\n    try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n      HttpResponse response = client.execute(request);\n      int status = response.getStatusLine().getStatusCode();\n      String responseString = EntityUtils.toString(response.getEntity());\n      if (status == 200) {\n        LOGGER.info(\"Test d'autentification passé avec succès\");\n      } else {\n        LOGGER.error(\"Echec du Test d'authentification - status {}\", status);\n      }\n      LOGGER.info(\"Contenu[{}]\", responseString);\n      Header tokenHeader = response.getFirstHeader(\"x-session-id\");\n      if (tokenHeader != null) {\n        return tokenHeader.getValue();\n      }\n      return null;\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8409, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 676, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["sendSaslMessage(*,byteArray)"], "useStart": [702], "useEnd": [758], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dsturnbull/thrift/tree/master/lib/java/src/org/apache/thrift/transport/TSaslClientTransport.java", "rawCode": "  /**\n   * Performs the client side of the initial portion of the Thrift SASL protocol. Generates and\n   * sends the initial response to the server, including which mechanism this client wants to use.\n   */\n  @Override\n  protected void handleSaslStartMessage() throws TTransportException, SaslException {\n    SaslClient saslClient = getSaslClient();\n\n    byte[] initialResponse = new byte[0];\n    if (saslClient.hasInitialResponse())\n      initialResponse = saslClient.evaluateChallenge(initialResponse);\n\n    LOGGER.debug(\n        \"Sending mechanism name {} and initial response of length {}\",\n        mechanism,\n        initialResponse.length);\n\n    byte[] mechanismBytes = mechanism.getBytes();\n    sendSaslMessage(NegotiationStatus.START, mechanismBytes);\n    // Send initial response\n    sendSaslMessage(\n        saslClient.isComplete() ? NegotiationStatus.COMPLETE : NegotiationStatus.OK,\n        initialResponse);\n    underlyingTransport.flush();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8410, "initialization": ["String string = JSONObject.toString()"], "initializationStart": [540], "initializationEnd": [555], "hasTryCatch": 1, "exceptionType": "JSONException", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 458, "tryExpressionEnd": 462, "tryBlockStart": 458, "tryBlockEnd": 774, "catchExpressionStart": 614, "catchExpressionEnd": 638, "catchBlockStart": 614, "catchBlockEnd": 774, "exceptionHandlingCallStart": [667], "exceptionHandlingCallEnd": [739], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 572, "focalAPIEnd": 584, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["send(byteArray)"], "useStart": [564], "useEnd": [585], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/s4/s4/tree/master/s4-driver/java/src/main/java/org/apache/s4/client/Driver.java", "rawCode": "  /**\n   * Send a message to the adapter.\n   *\n   * @param m message to be sent\n   * @return true if and only if the message was successfully sent.\n   * @throws IOException if the underlying TCP/IP socket throws an exception.\n   */\n  public boolean send(Message m) throws IOException {\n\n    if (!state.isConnected()) {\n      if (debug) {\n        System.err.println(\"send failed. not connected.\");\n      }\n      return false;\n    }\n\n    String s = null;\n\n    try {\n      JSONObject json = new JSONObject();\n\n      m.toJson(json);\n\n      s = json.toString();\n\n      io.send(s.getBytes());\n\n      return true;\n\n    } catch (JSONException e) {\n      if (debug) {\n        System.err.println(\"exception while constructing message to send: \" + e);\n      }\n      return false;\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8411, "initialization": ["String string = arglist2string(Arg[])"], "initializationStart": [87], "initializationEnd": [107], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 477, "focalAPIEnd": 492, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["DataOutputStream.writeBytes(string)"], "useStart": [724], "useEnd": [743], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/payutc/pauline/tree/master/src/fr/utc/assos/payutc/api/JsonApiClient.java", "rawCode": "  protected String post(String uri, Arg[] args) throws IOException {\n    String data = arglist2string(args);\n    Log.d(LOG_TAG, \"post \" + uri + \", data : \" + data);\n    URL url = new URL(uri);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setDoOutput(true);\n    conn.setRequestMethod(\"POST\");\n    conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    conn.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(data.getBytes().length));\n    conn.setRequestProperty(\"Cookie\", getCookiesHeader());\n    conn.setUseCaches(false);\n    conn.setDoInput(true);\n    conn.setDoOutput(true);\n\n    DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n    wr.writeBytes(data);\n    wr.flush();\n\n    StringBuilder builder = new StringBuilder();\n    InputStreamReader is;\n    if (conn.getResponseCode() == 200) {\n      is = new InputStreamReader(conn.getInputStream(), \"UTF-8\");\n    } else {\n      is = new InputStreamReader(conn.getErrorStream(), \"UTF-8\");\n    }\n    BufferedReader in = new BufferedReader(is);\n    String inputLine;\n    while ((inputLine = in.readLine()) != null) {\n      builder.append(inputLine);\n    }\n    in.close();\n    updateCookies(conn.getHeaderFields().get(\"Set-Cookie\"));\n\n    return builder.toString();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8412, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 71, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RawCharSequence(byteArray,int,*)"], "useStart": [104], "useEnd": [147], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/jgit/tree/master/org.eclipse.jgit.test/tst/org/eclipse/jgit/util/RawSubStringPatternTest.java", "rawCode": "  private static RawCharSequence raw(String text) {\n    byte[] bytes = text.getBytes(UTF_8);\n    return new RawCharSequence(bytes, 0, bytes.length);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8413, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 217, "focalAPIEnd": 231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["send(byteArray,int,*,int)"], "useStart": [246], "useEnd": [275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zeromq/jzmq3-x/tree/master/src/org/zeromq/ZMQ.java", "rawCode": "    /**\n     * Send a String.\n     *\n     * @param msg the message to send, as a String.\n     * @return true if send was successful, false otherwise.\n     */\n    public boolean sendMore(String msg) {\n      byte[] b = msg.getBytes();\n      return send(b, 0, b.length, SNDMORE);\n    }\n"}, {"dataset": "getBytes", "exampleID": 8414, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 417, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["base64Decode(byteArray)"], "useStart": [394], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ebollens/ccnmp/tree/master/javasrc/src/org/ccnx/ccn/impl/encoding/TextXMLCodec.java", "rawCode": "  /**\n   * Decodes a base64-encoded binary element back into a byte array.\n   *\n   * @param element base64-encoded element content\n   * @return the decoded byte array\n   * @throws IOException if element is not valid base64\n   */\n  public static byte[] decodeBinaryElement(String element) throws IOException {\n    if ((null == element) || (0 == element.length())) return new byte[0];\n    return DataUtils.base64Decode(element.getBytes());\n  }\n"}, {"dataset": "getBytes", "exampleID": 8415, "initialization": ["String string = InterfaceHttpData.getName()"], "initializationStart": [687], "initializationEnd": [708], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 754, "focalAPIEnd": 768, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["wrappedBuffer(byteArray)"], "useStart": [725], "useEnd": [769], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/oobium/framework/tree/master/org.oobium.app/src/org/oobium/app/server/netty4/HttpPostRequestEncoder.java", "rawCode": "  /**\n   * From the current context (currentBuffer and currentData), returns the next HttpChunk (if\n   * possible) trying to get sizeleft bytes more into the currentBuffer. This is the UrlEncoded\n   * version.\n   *\n   * @param sizeleft the number of bytes to try to get from currentData\n   * @return the next HttpChunk or null if not enough bytes were found\n   * @throws ErrorDataEncoderException if the encoding is in error\n   */\n  private HttpChunk encodeNextChunkUrlEncoded(int sizeleft) throws ErrorDataEncoderException {\n    if (currentData == null) {\n      return null;\n    }\n    int size = sizeleft;\n    ChannelBuffer buffer;\n    if (isKey) {\n      // get name\n      String key = currentData.getName();\n      buffer = ChannelBuffers.wrappedBuffer(key.getBytes());\n      isKey = false;\n      if (currentBuffer == null) {\n        currentBuffer =\n            ChannelBuffers.wrappedBuffer(buffer, ChannelBuffers.wrappedBuffer(\"=\".getBytes()));\n        // continue\n        size -= buffer.readableBytes() + 1;\n      } else {\n        currentBuffer =\n            ChannelBuffers.wrappedBuffer(\n                currentBuffer, buffer, ChannelBuffers.wrappedBuffer(\"=\".getBytes()));\n        // continue\n        size -= buffer.readableBytes() + 1;\n      }\n      if (currentBuffer.readableBytes() >= HttpPostBodyUtil.chunkSize) {\n        buffer = fillChannelBuffer();\n        return new DefaultHttpChunk(buffer);\n      }\n    }\n    try {\n      buffer = ((Attribute) currentData).getChunk(size);\n    } catch (IOException e) {\n      throw new ErrorDataEncoderException(e);\n    }\n    ChannelBuffer delimiter = null;\n    if (buffer.readableBytes() < size) {\n      // delimiter\n      isKey = true;\n      delimiter = iterator.hasNext() ? ChannelBuffers.wrappedBuffer(\"&\".getBytes()) : null;\n    }\n    if (buffer.capacity() == 0) {\n      // end for current InterfaceHttpData, need potentially more data\n      currentData = null;\n      if (currentBuffer == null) {\n        currentBuffer = delimiter;\n      } else {\n        if (delimiter != null) {\n          currentBuffer = ChannelBuffers.wrappedBuffer(currentBuffer, delimiter);\n        }\n      }\n      if (currentBuffer.readableBytes() >= HttpPostBodyUtil.chunkSize) {\n        buffer = fillChannelBuffer();\n        return new DefaultHttpChunk(buffer);\n      }\n      return null;\n    }\n    if (currentBuffer == null) {\n      if (delimiter != null) {\n        currentBuffer = ChannelBuffers.wrappedBuffer(buffer, delimiter);\n      } else {\n        currentBuffer = buffer;\n      }\n    } else {\n      if (delimiter != null) {\n        currentBuffer = ChannelBuffers.wrappedBuffer(currentBuffer, buffer, delimiter);\n      } else {\n        currentBuffer = ChannelBuffers.wrappedBuffer(currentBuffer, buffer);\n      }\n    }\n    if (currentBuffer.readableBytes() < HttpPostBodyUtil.chunkSize) {\n      // end for current InterfaceHttpData, need more data\n      currentData = null;\n      isKey = true;\n      return null;\n    }\n    buffer = fillChannelBuffer();\n    // size = 0\n    return new DefaultHttpChunk(buffer);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8416, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "java.io.IOException", "exceptionHandlingCall": [], "tryExpressionStart": 626, "tryExpressionEnd": 630, "tryBlockStart": 626, "tryBlockEnd": 1028, "catchExpressionStart": 805, "catchExpressionEnd": 835, "catchBlockStart": 805, "catchBlockEnd": 903, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 740, "focalAPIEnd": 781, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [730], "useEnd": [782], "hasFinally": 1, "cleanUpCall": ["Base64.OutputStream.close()"], "finallyExpressionStart": 942, "finallyExpressionEnd": 950, "finallyBlockStart": 942, "finallyBlockEnd": 1028, "cleanUpCallStart": [972], "cleanUpCallEnd": [983], "url": "https://github.com/samthiriot/genlab/tree/master/genlab.graphstream.corejar/src/org/graphstream/stream/netstream/packing/Base64.java", "rawCode": "  /**\n   * Convenience method for decoding data to a file.\n   *\n   * <p>As of v 2.3, if there is a error, the method will throw an java.io.IOException. <b>This is\n   * new to v2.3!</b> In earlier versions, it just returned false, but in retrospect that's a pretty\n   * poor way to handle it.\n   *\n   * @param dataToDecode Base64-encoded data as a string\n   * @param filename Filename for saving decoded data\n   * @throws java.io.IOException if there is an error\n   * @since 2.1\n   */\n  public static void decodeToFile(String dataToDecode, String filename) throws java.io.IOException {\n\n    Base64.OutputStream bos = null;\n    try {\n      bos = new Base64.OutputStream(new java.io.FileOutputStream(filename), Base64.DECODE);\n      bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));\n    } // end try\n    catch (java.io.IOException e) {\n      throw e; // Catch and throw to execute finally{} block\n    } // end catch: java.io.IOException\n    finally {\n      try {\n        bos.close();\n      } catch (Exception e) {\n      }\n    } // end finally\n  } // end decodeToFile\n"}, {"dataset": "getBytes", "exampleID": 8417, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 348, "focalAPIEnd": 362, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["encodeBase64(byteArray)"], "useStart": [328], "useEnd": [363], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jonnyzzz/maragogype/tree/master/tags/v1.4.1/java/com/xerox/amazonws/sqs2/MessageQueue.java", "rawCode": "  /**\n   * Sends a message to a specified queue. The message must be between 1 and 256K bytes long.\n   *\n   * @param msg the message to be sent\n   */\n  public String sendMessage(String msg) throws SQSException {\n    Map<String, String> params = new HashMap<String, String>();\n    String encodedMsg = enableEncoding ? new String(Base64.encodeBase64(msg.getBytes())) : msg;\n    params.put(\"MessageBody\", encodedMsg);\n    PostMethod method = new PostMethod();\n    try {\n      SendMessageResponse response =\n          makeRequestInt(method, \"SendMessage\", params, SendMessageResponse.class);\n      return response.getSendMessageResult().getMessageId();\n    } finally {\n      method.releaseConnection();\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8418, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["w(String,String,*)"], "tryExpressionStart": 319, "tryExpressionEnd": 323, "tryBlockStart": 319, "tryBlockEnd": 750, "catchExpressionStart": 638, "catchExpressionEnd": 659, "catchBlockStart": 638, "catchBlockEnd": 750, "exceptionHandlingCallStart": [667], "exceptionHandlingCallEnd": [724], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(true||string==null)", "guardType": "IF {", "guardExpressionStart": 255, "guardExpressionEnd": 287, "guardBlockStart": 255, "guardBlockEnd": 314, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 455, "focalAPIEnd": 474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["encrypt(byteArray,byte[])"], "useStart": [505], "useEnd": [533], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/um104/C4PPMobileMetrics/tree/master/SalesforceNativeSDK/src/com/salesforce/androidsdk/security/Encryptor.java", "rawCode": "  /**\n   * Encrypt data with key using aes256\n   *\n   * @param data\n   * @param key base64 encoded 256 bits key or null to leave data unchanged\n   * @return base64, aes256 encrypted data\n   */\n  public static String encrypt(String data, String key) {\n    if (key == null || data == null) {\n      return data;\n    }\n    try {\n\n      // Encrypt with our preferred cipher.\n      byte[] keyBytes = Base64.decode(key, Base64.DEFAULT);\n      byte[] dataBytes = data.getBytes(UTF8);\n      byte[] encryptedData = encrypt(dataBytes, keyBytes);\n\n      // Encode with base64.\n      return Base64.encodeToString(encryptedData, Base64.DEFAULT);\n    } catch (Exception ex) {\n      Log.w(\"Encryptor:encrypt\", \"error during encryption\", ex);\n      return null;\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8419, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 562, "focalAPIEnd": 589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [537], "useEnd": [590], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/otto-de/jsonhome/tree/master/jsonhome-core/src/test/java/de/otto/jsonhome/parser/JacksonJsonHomeParserTest.java", "rawCode": "  @Test\n  public void shouldParseAcceptedRanges() throws Exception {\n    // given\n    final String jsonHomeDocument =\n        \"{\\n\"\n            + \" \\\"resources\\\" : {\"\n            + \"\\\"http://example.org/jsonhome-example/rel/storefront\\\" : {\\n\"\n            + \" \\\"href\\\" : \\\"http://example.org/jsonhome-example/storefront\\\",\\n\"\n            + \" \\\"hints\\\" : {\\n\"\n            + \" \\\"accept-ranges\\\" : [\\\"bytes\\\"]\\n\"\n            + \" }\\n\"\n            + \" }}}\";\n    // when\n    final JsonHome jsonHome =\n        new JacksonJsonHomeParser().parse(new ByteArrayInputStream(jsonHomeDocument.getBytes()));\n    // then\n    assertEquals(\n        jsonHome,\n        jsonHome(\n            directLink(\n                create(\"http://example.org/jsonhome-example/rel/storefront\"),\n                create(\"http://example.org/jsonhome-example/storefront\"),\n                hintsBuilder().acceptingRanges(\"bytes\").build())));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8420, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new UnexpectedException(*)"], "tryExpressionStart": 62, "tryExpressionEnd": 66, "tryBlockStart": 62, "tryBlockEnd": 266, "catchExpressionStart": 199, "catchExpressionEnd": 219, "catchBlockStart": 199, "catchBlockEnd": 266, "exceptionHandlingCallStart": [233], "exceptionHandlingCallEnd": [259], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 168, "focalAPIEnd": 190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [149], "useEnd": [191], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alexanderjarvis/meep-server-historical/tree/master/app/results/RenderCustomJson.java", "rawCode": "  public void apply(Request request, Response response) {\n    try {\n      setContentTypeIfNotSet(response, \"application/json; charset=utf-8\");\n      response.out.write(json.getBytes(\"utf-8\"));\n    } catch (Exception e) {\n      throw new UnexpectedException(e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8421, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 395, "focalAPIEnd": 410, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [384], "useEnd": [411], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jersey/jersey/tree/master/core-server/src/test/java/org/glassfish/jersey/server/internal/inject/JaxRsInjectablesTest.java", "rawCode": "    @Override\n    public void writeTo(\n        String arg0,\n        Class<?> arg1,\n        Type arg2,\n        Annotation[] arg3,\n        MediaType arg4,\n        MultivaluedMap<String, Object> arg5,\n        OutputStream arg6)\n        throws IOException, WebApplicationException {\n      assertNotNull(ui);\n      assertNotNull(hs);\n      assertNotNull(r);\n      assertNotNull(sc);\n      arg6.write(arg0.getBytes());\n    }\n"}, {"dataset": "getBytes", "exampleID": 8422, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 239, "focalAPIEnd": 253, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray,int,int)"], "useStart": [231], "useEnd": [261], "hasFinally": 1, "cleanUpCall": ["DataOutputStream.close()"], "finallyExpressionStart": 584, "finallyExpressionEnd": 592, "finallyBlockStart": 584, "finallyBlockEnd": 616, "cleanUpCallStart": [600], "cleanUpCallEnd": [609], "url": "https://github.com/robovm/robovm/tree/master/tests/libcore/luni/src/test/java/libcore/java/io/OldAndroidDataOutputStreamTest.java", "rawCode": "  public void testDataOutputStream() throws Exception {\n    String str = \"AbCdEfGhIjKlMnOpQrStUvWxYz\";\n    ByteArrayOutputStream aa = new ByteArrayOutputStream();\n    DataOutputStream a = new DataOutputStream(aa);\n\n    try {\n      a.write(str.getBytes(), 0, 26);\n      a.write('A');\n\n      assertEquals(27, aa.size());\n      assertEquals(\"AbCdEfGhIjKlMnOpQrStUvWxYzA\", aa.toString());\n\n      a.writeByte('B');\n      assertEquals(\"AbCdEfGhIjKlMnOpQrStUvWxYzAB\", aa.toString());\n      a.writeBytes(\"BYTES\");\n      assertEquals(\"AbCdEfGhIjKlMnOpQrStUvWxYzABBYTES\", aa.toString());\n    } finally {\n      a.close();\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8423, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 448, "focalAPIEnd": 469, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [432], "useEnd": [470], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dvn/dvn-svn-import-test4/tree/master/dvn-app/trunk/src/DVN-web/src/edu/harvard/iq/dvn/api/entities/MetadataSearchFieldsWriter.java", "rawCode": "  public void writeTo(\n      MetadataSearchFields msf,\n      Class<?> clazz,\n      Type type,\n      Annotation[] annotation,\n      MediaType mediaType,\n      MultivaluedMap<String, Object> arg5,\n      OutputStream outstream)\n      throws IOException, WebApplicationException {\n    if (msf == null) {\n      throw new WebApplicationException(Response.Status.NOT_FOUND);\n    }\n\n    String openingTag = \"<MetadataSearchFields>\\n\";\n\n    outstream.write(openingTag.getBytes());\n\n    for (StudyField searchField : msf.getSearchableFields()) {\n      String open = \" <SearchableField\";\n      // In the future we can add attributes specifying the type of the\n      // field, numeric formats, etc.\n      open = open.concat(\">\\n\");\n\n      String name = \" <fieldName>\" + searchField.getName() + \"</fieldName>\\n\";\n      String description =\n          \" <fieldDescription>\" + searchField.getDescription() + \"</fieldDescription>\\n\";\n      String close = \" </SearchableField>\\n\";\n\n      String formatOut = open + name + description + close;\n      outstream.write(formatOut.getBytes());\n    }\n\n    outstream.write(\"</MetadataSearchFields>\\n\".getBytes());\n  }\n"}, {"dataset": "getBytes", "exampleID": 8424, "initialization": ["String string = getMessage()"], "initializationStart": [151], "initializationEnd": [165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 245, "focalAPIEnd": 262, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [235], "useEnd": [263], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamblueridge/gerrit/tree/master/gerrit-sshd/src/main/java/com/google/gerrit/sshd/AliasCommand.java", "rawCode": "  @Override\n  public void start(Environment env) throws IOException {\n    try {\n      begin(env);\n    } catch (UnloggedFailure e) {\n      String msg = e.getMessage();\n      if (!msg.endsWith(\"\\n\")) {\n        msg += \"\\n\";\n      }\n      err.write(msg.getBytes(ENC));\n      err.flush();\n      onExit(e.exitCode);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8425, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 416, "focalAPIEnd": 441, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [406], "useEnd": [442], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jdcasey/galley/tree/master/caches/tck/src/main/java/org/commonjava/maven/galley/cache/CacheProviderTCK.java", "rawCode": "  @Test\n  public void writeAndListDirectory() throws Exception {\n    final String content = \"This is a test\";\n\n    final Location loc = new SimpleLocation(\"http://foo.com\");\n    final String dir = \"/path/to/my/\";\n    final String fname = dir + \"file.txt\";\n\n    final CacheProvider provider = getCacheProvider();\n    final OutputStream out = provider.openOutputStream(new ConcreteResource(loc, fname));\n    out.write(content.getBytes(\"UTF-8\"));\n    out.flush();\n    out.close();\n\n    // NOTE: This is NOT as tightly specified as I would like.\n    // We keep the listing assertions loose (greater-than instead of equals,\n    // contains instead of exact positional assertion) because the Infinispan\n    // live testing has these spurious foo.txt.#0 files cropping up.\n    //\n    // I have no idea what they are, but I'm sick of fighting JBoss bugs for now.\n    final Set<String> listing =\n        new HashSet<String>(Arrays.asList(provider.list(new ConcreteResource(loc, dir))));\n\n    System.out.printf(\"\\n\\nFile listing is:\\n\\n %s\\n\\n\\n\", join(listing, \"\\n \"));\n\n    assertThat(listing.size() > 0, equalTo(true));\n    assertThat(listing.contains(\"file.txt\"), equalTo(true));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8426, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 475, "focalAPIEnd": 501, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)", "string.getBytes(String)", "new ByteArrayInputStream(byteArray)"], "useStart": [450, 919, 894], "useEnd": [502, 945, 946], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/tika/tree/master/tika-parsers/src/test/java/org/apache/tika/parser/txt/TXTParserTest.java", "rawCode": "  /**\n   * Test case for TIKA-341: using charset in content-type\n   *\n   * @see <a href=\"https://issues.apache.org/jira/browse/TIKA-341\">TIKA-341</a>\n   */\n  @Test\n  public void testUsingCharsetInContentTypeHeader() throws Exception {\n    // Could be ISO 8859-1 or ISO 8859-15 or ...\n    // u00e1 is latin small letter a with acute\n    final String test2 = \"the name is \\u00e1ndre\";\n\n    Metadata metadata = new Metadata();\n    parser.parse(\n        new ByteArrayInputStream(test2.getBytes(ISO_8859_1)),\n        new BodyContentHandler(),\n        metadata,\n        new ParseContext());\n    assertEquals(\"text/plain; charset=ISO-8859-1\", metadata.get(Metadata.CONTENT_TYPE));\n    assertEquals(\"ISO-8859-1\", metadata.get(Metadata.CONTENT_ENCODING)); // deprecated\n\n    metadata = new Metadata();\n    metadata.set(Metadata.CONTENT_TYPE, \"text/html; charset=ISO-8859-15\");\n    parser.parse(\n        new ByteArrayInputStream(test2.getBytes(ISO_8859_1)),\n        new BodyContentHandler(),\n        metadata,\n        new ParseContext());\n    assertEquals(\"text/html; charset=ISO-8859-15\", metadata.get(Metadata.CONTENT_TYPE));\n    assertEquals(\"ISO-8859-15\", metadata.get(Metadata.CONTENT_ENCODING)); // deprecated\n  }\n"}, {"dataset": "getBytes", "exampleID": 8427, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 94, "focalAPIEnd": 110, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [84], "useEnd": [111], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hoglet67/AtomSoftwareArchive/tree/master/java/atomtape/src/uk/co/acornatom/tape/AtomFile.java", "rawCode": "  private void writeString(OutputStream out, String value) throws IOException {\n    out.write(value.getBytes());\n  }\n"}, {"dataset": "getBytes", "exampleID": 8428, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 1776, "focalAPIEnd": 1794, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [1767], "useEnd": [1795], "hasFinally": 1, "cleanUpCall": ["Socket.close()", "getCount()", "assertEquals(int,*)"], "finallyExpressionStart": 1946, "finallyExpressionEnd": 1954, "finallyBlockStart": 1946, "finallyBlockEnd": 2051, "cleanUpCallStart": [1962, 2027, 1985], "cleanUpCallEnd": [1976, 2043, 2044], "url": "https://github.com/thomasbecker/jetty-7/tree/master/jetty-server/src/test/java/org/eclipse/jetty/server/ConnectorCloseTestBase.java", "rawCode": "  @Test\n  public void testCloseBetweenRequests() throws Exception {\n    int maxLength = 32;\n    int requestCount = iterations(maxLength);\n    final CountDownLatch latch = new CountDownLatch(requestCount);\n\n    configureServer(new HelloWorldHandler());\n\n    Socket client = newSocket(HOST, _connector.getLocalPort());\n    try {\n      OutputStream os = client.getOutputStream();\n\n      ResponseReader reader =\n          new ResponseReader(client) {\n            private int _index = 0;\n\n            /* ------------------------------------------------------------ */\n            @Override\n            protected int doRead() throws IOException, InterruptedException {\n              int count = super.doRead();\n              if (count > 0) {\n                int idx;\n                while ((idx = _response.indexOf(\"HTTP/1.1 200 OK\", _index)) >= 0) {\n                  latch.countDown();\n                  _index = idx + 15;\n                }\n              }\n\n              return count;\n            }\n          };\n\n      Thread runner = new Thread(reader);\n      runner.start();\n\n      for (int pipeline = 1; pipeline < maxLength; pipeline++) {\n        if (pipeline == maxLength / 2) _connector.close();\n\n        String request = \"\";\n        for (int i = 0; i < pipeline; i++) {\n          request +=\n              \"GET /data?writes=1&block=16&id=\"\n                  + i\n                  + \" HTTP/1.1\\r\\n\"\n                  + \"host: \"\n                  + HOST\n                  + \":\"\n                  + _connector.getLocalPort()\n                  + \"\\r\\n\"\n                  + \"user-agent: testharness/1.0 (blah foo/bar)\\r\\n\"\n                  + \"accept-encoding: nothing\\r\\n\"\n                  + \"cookie: aaa=1234567890\\r\\n\"\n                  + \"\\r\\n\";\n        }\n        os.write(request.getBytes());\n        os.flush();\n\n        Thread.sleep(25);\n      }\n\n      latch.await(30, TimeUnit.SECONDS);\n\n      reader.setDone();\n      runner.join();\n    } finally {\n      client.close();\n\n      assertEquals(requestCount, requestCount - latch.getCount());\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8429, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 948, "focalAPIEnd": 971, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [935], "useEnd": [972], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bcgit/bc-java/tree/master/pkix/src/test/java/org/bouncycastle/cms/test/NewSignedDataStreamTest.java", "rawCode": "  public void testWithAttributeCertificate() throws Exception {\n    List certList = new ArrayList();\n\n    certList.add(_signCert);\n\n    Store certs = new JcaCertStore(certList);\n\n    CMSSignedDataStreamGenerator gen = new CMSSignedDataStreamGenerator();\n\n    ContentSigner sha1Signer =\n        new JcaContentSignerBuilder(\"SHA1withRSA\").setProvider(BC).build(_origKP.getPrivate());\n\n    gen.addSignerInfoGenerator(\n        new JcaSignerInfoGeneratorBuilder(\n                new JcaDigestCalculatorProviderBuilder().setProvider(BC).build())\n            .build(sha1Signer, _origCert));\n\n    gen.addCertificates(certs);\n\n    X509AttributeCertificateHolder attrCert = CMSTestUtil.getAttributeCertificate();\n\n    Store store = new CollectionStore(Collections.singleton(attrCert));\n\n    gen.addAttributeCertificates(store);\n\n    ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n\n    OutputStream sigOut = gen.open(bOut, true);\n\n    sigOut.write(TEST_MESSAGE.getBytes());\n\n    sigOut.close();\n\n    CMSSignedDataParser sp =\n        new CMSSignedDataParser(\n            new JcaDigestCalculatorProviderBuilder().setProvider(BC).build(), bOut.toByteArray());\n\n    sp.getSignedContent().drain();\n\n    assertEquals(4, sp.getVersion());\n\n    store = sp.getAttributeCertificates();\n\n    Collection coll = store.getMatches(null);\n\n    assertEquals(1, coll.size());\n\n    assertTrue(coll.contains(attrCert));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8430, "initialization": ["String string = readEmbeddedTextFile(String)", "String string = replaceParameters(String,Map<String, Object>)", "String string = String.replaceAll(String,String)", "String string = String.replaceAll(String,String)", "String string = String.replaceAll(String,String)", "String string = String.replaceAll(String,String)", "String string = replaceParameters(String,Map<String, Object>)", "String string = String.replaceAll(String,String)", "String string = String.replaceAll(String,String)", "String string = String.replaceAll(String,String)", "String string = String.replaceAll(String,String)", "String string = reformat(*,String)"], "initializationStart": [901, 1018, 2622, 2784, 3177, 3468, 3624, 3753, 3850, 4301, 4404, 4555], "initializationEnd": [950, 1065, 2676, 2830, 3239, 3528, 3671, 3806, 3906, 4350, 4448, 4606], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)"], "configurationStart": [2622, 2784, 3177, 3468, 3753, 3850, 4301, 4404], "configurationEnd": [2676, 2830, 3239, 3528, 3806, 3906, 4350, 4448], "guardCondition": "!(string==null)", "guardType": "IF {", "guardExpressionStart": 1074, "guardExpressionEnd": 1103, "guardBlockStart": 1074, "guardBlockEnd": 1434, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 4709, "focalAPIEnd": 4743, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [4684], "useEnd": [4744], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/sdk/tree/master/eclipse/plugins/com.android.ide.eclipse.adt/src/com/android/ide/eclipse/adt/internal/wizards/newproject/NewProjectCreator.java", "rawCode": "  /**\n   * Adds the manifest to the project.\n   *\n   * @param project The Java Project to update.\n   * @param parameters Template Parameters.\n   * @param dictionary String List to be added to a string definition file. This map will be filled\n   *     by this method.\n   * @param monitor An existing monitor.\n   * @throws CoreException if the method fails to update the project.\n   * @throws IOException if the method fails to create the files in the project.\n   */\n  private void addManifest(\n      IProject project,\n      Map<String, Object> parameters,\n      Map<String, String> dictionary,\n      IProgressMonitor monitor)\n      throws CoreException, IOException {\n\n    // get IFile to the manifest and check if it's not already there.\n    IFile file = project.getFile(SdkConstants.FN_ANDROID_MANIFEST_XML);\n    if (!file.exists()) {\n\n      // Read manifest template\n      String manifestTemplate = AdtPlugin.readEmbeddedTextFile(TEMPLATE_MANIFEST);\n\n      // Replace all keyword parameters\n      manifestTemplate = replaceParameters(manifestTemplate, parameters);\n\n      if (manifestTemplate == null) {\n        // Inform the user there will be not manifest.\n        AdtPlugin.logAndPrintError(\n            null,\n            \"Create Project\" /*TAG*/,\n            \"Failed to generate the Android manifest. Missing template %s\",\n            TEMPLATE_MANIFEST);\n        // Abort now, there's no need to continue\n        return;\n      }\n\n      if (parameters.containsKey(PARAM_ACTIVITY)) {\n        // now get the activity template\n        String activityTemplate = AdtPlugin.readEmbeddedTextFile(TEMPLATE_ACTIVITIES);\n\n        // If the activity name doesn't contain any dot, it's in the form\n        // \"ClassName\" and we need to expand it to \".ClassName\" in the XML.\n        String name = (String) parameters.get(PARAM_ACTIVITY);\n        if (name.indexOf('.') == -1) {\n          // Duplicate the parameters map to avoid changing the caller\n          parameters = new HashMap<String, Object>(parameters);\n          parameters.put(PARAM_ACTIVITY, \".\" + name); // $NON-NLS-1$\n        }\n\n        // Replace all keyword parameters to make main activity.\n        String activities = replaceParameters(activityTemplate, parameters);\n\n        // set the intent.\n        String intent = AdtPlugin.readEmbeddedTextFile(TEMPLATE_INTENT_LAUNCHER);\n\n        if (activities != null) {\n          if (intent != null) {\n            // set the intent to the main activity\n            activities = activities.replaceAll(PH_INTENT_FILTERS, intent);\n          }\n\n          // set the activity(ies) in the manifest\n          manifestTemplate = manifestTemplate.replaceAll(PH_ACTIVITIES, activities);\n        }\n      } else {\n        // remove the activity(ies) from the manifest\n        manifestTemplate = manifestTemplate.replaceAll(PH_ACTIVITIES, \"\"); // $NON-NLS-1$\n      }\n\n      // Handle the case of the test projects\n      if (parameters.containsKey(PARAM_TEST_TARGET_PACKAGE)) {\n        // Set the uses-library needed by the test project\n        String usesLibrary = AdtPlugin.readEmbeddedTextFile(TEMPLATE_TEST_USES_LIBRARY);\n        if (usesLibrary != null) {\n          manifestTemplate = manifestTemplate.replaceAll(PH_TEST_USES_LIBRARY, usesLibrary);\n        }\n\n        // Set the instrumentation element needed by the test project\n        String instru = AdtPlugin.readEmbeddedTextFile(TEMPLATE_TEST_INSTRUMENTATION);\n        if (instru != null) {\n          manifestTemplate = manifestTemplate.replaceAll(PH_TEST_INSTRUMENTATION, instru);\n        }\n\n        // Replace PARAM_TEST_TARGET_PACKAGE itself now\n        manifestTemplate = replaceParameters(manifestTemplate, parameters);\n\n      } else {\n        // remove the unused entries\n        manifestTemplate = manifestTemplate.replaceAll(PH_TEST_USES_LIBRARY, \"\"); // $NON-NLS-1$\n        manifestTemplate = manifestTemplate.replaceAll(PH_TEST_INSTRUMENTATION, \"\"); // $NON-NLS-1$\n      }\n\n      String minSdkVersion = (String) parameters.get(PARAM_MIN_SDK_VERSION);\n      if (minSdkVersion != null && minSdkVersion.length() > 0) {\n        String usesSdkTemplate = AdtPlugin.readEmbeddedTextFile(TEMPLATE_USES_SDK);\n        if (usesSdkTemplate != null) {\n          String usesSdk = replaceParameters(usesSdkTemplate, parameters);\n          manifestTemplate = manifestTemplate.replaceAll(PH_USES_SDK, usesSdk);\n        }\n      } else {\n        manifestTemplate = manifestTemplate.replaceAll(PH_USES_SDK, \"\");\n      }\n\n      // Reformat the file according to the user's formatting settings\n      manifestTemplate = reformat(XmlFormatStyle.MANIFEST, manifestTemplate);\n\n      // Save in the project as UTF-8\n      InputStream stream =\n          new ByteArrayInputStream(manifestTemplate.getBytes(\"UTF-8\")); // $NON-NLS-1$\n      file.create(stream, false /* force */, new SubProgressMonitor(monitor, 10));\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8431, "initialization": ["String string = doAction(HttpServletRequest,HttpServletResponse)"], "initializationStart": [305], "initializationEnd": [332], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 339, "guardExpressionEnd": 359, "guardBlockStart": 339, "guardBlockEnd": 559, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 526, "focalAPIEnd": 551, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [516], "useEnd": [552], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/niles2005/visitors/tree/master/src/com/inesazt/visitors/manager/action/LogoutAction.java", "rawCode": "  public void doPage(HttpServletRequest request, HttpServletResponse response)\n      throws IOException, ServletException {\n\n    request.setCharacterEncoding(\"UTF-8\");\n    ServletOutputStream sos = response.getOutputStream();\n    response.setContentType(\"text/html; charset=UTF-8\");\n\n    String retInfo = doAction(request, response);\n\n    if (retInfo != null) {\n      String callback = request.getParameter(\"callback\");\n      if (callback != null) {\n        retInfo = callback + \"(\" + retInfo + \");\";\n      }\n\n      sos.write(retInfo.getBytes(\"UTF-8\"));\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8432, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 93, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["OutputStream.write(byteArray)"], "useStart": [118], "useEnd": [133], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elbenj/ICS-Exchange/tree/master/src/com/android/exchange/adapter/Serializer.java", "rawCode": "  void writeLiteralString(OutputStream out, String s) throws IOException {\n    byte[] data = s.getBytes(\"UTF-8\");\n    out.write(data);\n    out.write(0);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8433, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 454, "focalAPIEnd": 473, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [445], "useEnd": [474], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8885/common/src/test/java-me/com/funambol/TestServerHttpTransportAgent.java", "rawCode": "  /**\n   * Send a message to the channel\n   *\n   * @param msg the message to be sent\n   * @throws IOException if the message cannot be sent\n   */\n  public void sendMessage() throws IOException {\n    try {\n      Log.debug(\n          \"[TestServerHttpTransportAgent] waiting \"\n              + delayResponse / 1000\n              + \" sec before to send message \");\n      Thread.sleep(delayResponse);\n    } catch (InterruptedException ex) {\n    }\n    os.write(response.getBytes());\n    os.flush();\n    Log.debug(\"[TestServerHttpTransportAgent.sendMessage]Message sent: \" + response);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8434, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["warn(*)"], "tryExpressionStart": 1068, "tryExpressionEnd": 1072, "tryBlockStart": 1068, "tryBlockEnd": 1193, "catchExpressionStart": 1124, "catchExpressionEnd": 1163, "catchBlockStart": 1124, "catchBlockEnd": 1193, "exceptionHandlingCallStart": [1173], "exceptionHandlingCallEnd": [1184], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 1041, "guardExpressionEnd": 1061, "guardBlockStart": 1041, "guardBlockEnd": 1193, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 1089, "focalAPIEnd": 1114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-cgmdr/tree/master/src/org/exist/xmldb/RemoteXMLResource.java", "rawCode": "  /**\n   * Force content to be loaded into mem\n   *\n   * @throws XMLDBException\n   */\n  protected byte[] getData() throws XMLDBException {\n    if (file != null) {\n      if (!file.canRead())\n        throw new XMLDBException(\n            ErrorCodes.INVALID_RESOURCE,\n            \"failed to read resource content from file \" + file.getAbsolutePath());\n      try {\n        final byte[] chunk = new byte[512];\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final FileInputStream in = new FileInputStream(file);\n        int l;\n        do {\n          l = in.read(chunk);\n          if (l > 0) out.write(chunk, 0, l);\n\n        } while (l > -1);\n        in.close();\n        final byte[] data = out.toByteArray();\n        // content = new String(data);\n        file = null;\n        return data;\n      } catch (IOException e) {\n        throw new XMLDBException(\n            ErrorCodes.INVALID_RESOURCE,\n            \"failed to read resource content from file \" + file.getAbsolutePath(),\n            e);\n      }\n    } else if (content != null)\n      try {\n        return content.getBytes(\"UTF-8\");\n      } catch (UnsupportedEncodingException e) {\n        LOG.warn(e);\n      }\n    return null;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8435, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "java.io.UnsupportedEncodingException", "exceptionHandlingCall": ["String.getBytes()"], "tryExpressionStart": 177, "tryExpressionEnd": 181, "tryBlockStart": 177, "tryBlockEnd": 601, "catchExpressionStart": 516, "catchExpressionEnd": 563, "catchBlockStart": 516, "catchBlockEnd": 601, "exceptionHandlingCallStart": [580], "exceptionHandlingCallEnd": [592], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null)", "guardType": "IF {", "guardExpressionStart": 78, "guardExpressionEnd": 92, "guardBlockStart": 78, "guardBlockEnd": 119, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 279, "focalAPIEnd": 291, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["SingleByteCharsetConverter.toBytes(string)", "string.getBytes(String)", "string.getBytes()", "string.getBytes()"], "useStart": [438, 486, 580, 620], "useEnd": [458, 506, 592, 632], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Yoldark34/NemoVelo/tree/master/libs/mysql-connector-java-5.1.24/src/com/mysql/jdbc/StringUtils.java", "rawCode": "  static byte[] s2b(String s, MySQLConnection conn) throws SQLException {\n    if (s == null) {\n      return null;\n    }\n\n    if ((conn != null) && conn.getUseUnicode()) {\n      try {\n        String encoding = conn.getEncoding();\n\n        if (encoding == null) {\n          return s.getBytes();\n        }\n\n        SingleByteCharsetConverter converter = conn.getCharsetConverter(encoding);\n\n        if (converter != null) {\n          return converter.toBytes(s);\n        }\n\n        return s.getBytes(encoding);\n      } catch (java.io.UnsupportedEncodingException E) {\n        return s.getBytes();\n      }\n    }\n\n    return s.getBytes();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8436, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 284, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [335], "useEnd": [370], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaspervandenberg/aida/tree/master/Learning/TestModel/build/web/WEB-INF/classes/katrenko/ws/TestModel.java", "rawCode": "  public synchronized void parseString(String msgXML) throws Exception {\n    SAXParserFactory spf = SAXParserFactory.newInstance();\n    SAXParser sp = spf.newSAXParser();\n    ParserAdapter pa = new ParserAdapter(sp.getParser());\n    pa.setContentHandler(this);\n    byte bytearray[] = msgXML.getBytes();\n    ByteArrayInputStream bais = new ByteArrayInputStream(bytearray);\n    pa.parse(new InputSource(bais));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8437, "initialization": ["String string = getXml(String,StreamProvider)"], "initializationStart": [242], "initializationEnd": [292], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 392, "tryExpressionEnd": 396, "tryBlockStart": 392, "tryBlockEnd": 603, "catchExpressionStart": 478, "catchExpressionEnd": 498, "catchBlockStart": 478, "catchBlockEnd": 603, "exceptionHandlingCallStart": [512], "exceptionHandlingCallEnd": [596], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 454, "focalAPIEnd": 468, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [429], "useEnd": [469], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aslakknutsen/jsfunit/tree/master/jboss-jsfunit-analysis/src/test/java/org/jboss/jsfunit/analysis/Utilities.java", "rawCode": "  public static Node extractFirstRendererNode(String facesConfig) {\n    StreamProvider streamProvider = new StringStreamProvider(facesConfig);\n    String configFilePath = (String) Utilities.STUBBED_RESOURCEPATH.toArray()[0];\n    String xml = ParserUtils.getXml(configFilePath, streamProvider);\n    DocumentBuilder builder = ParserUtils.getDocumentBuilder();\n    Document document = null;\n    try {\n      document = builder.parse(new ByteArrayInputStream(xml.getBytes()));\n    } catch (Exception e) {\n      throw new RuntimeException(\"Could not parse document '\" + configFilePath + \"'\\n\" + xml, e);\n    }\n    String xpath = \"/faces-config/render-kit/renderer\";\n    NodeList renderers = ParserUtils.query(document, xpath, configFilePath);\n    if (renderers.getLength() > 0) {\n      return renderers.item(0);\n    }\n    return null;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8438, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 63, "focalAPIEnd": 81, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray,int,*)"], "useStart": [49], "useEnd": [103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinsb/android-libcore/tree/master/support/src/test/java/tests/security/MessageDigestTest.java", "rawCode": "  public void testfips180_2_singleblock() {\n\n    digest.update(source1.getBytes(), 0, source1.length());\n\n    byte[] computedDigest = digest.digest();\n\n    assertNotNull(\"computed digest is null\", computedDigest);\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < computedDigest.length; i++) {\n      String res = Integer.toHexString(computedDigest[i] & 0xFF);\n      sb.append((res.length() == 1 ? \"0\" : \"\") + res);\n    }\n    assertEquals(\"computed and check digest differ\", expected1, sb.toString());\n  }\n"}, {"dataset": "getBytes", "exampleID": 8439, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 605, "focalAPIEnd": 634, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [580], "useEnd": [635], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/imeeting/web_portal/tree/master/src/com/imeeting/mvc/controller/WeiXinController.java", "rawCode": "  @RequestMapping(method = RequestMethod.POST)\n  public ModelAndView post(\n      @RequestParam(value = \"signature\") String signature,\n      @RequestParam(value = \"timestamp\") String timestamp,\n      @RequestParam(value = \"nonce\") String nonce,\n      @RequestBody String requestBody)\n      throws SAXException, IOException {\n    log.debug(\n        \"\\n signature = \"\n            + signature\n            + \"\\n timestamp = \"\n            + timestamp\n            + \"\\n nonce = \"\n            + nonce\n            + \"\\n request = \"\n            + requestBody);\n\n    Document doc = db.parse(new ByteArrayInputStream(requestBody.getBytes(\"UTF-8\")));\n    String toUserName = get_value(doc, ToUserName);\n    String fromUserName = get_value(doc, FromUserName);\n    String createTime = get_value(doc, CreateTime);\n    String msgType = get_value(doc, MsgType);\n    String content = get_value(doc, Content);\n\n    String confId = null;\n    if (\"text\".equalsIgnoreCase(msgType)\n        && (\"kh\".equalsIgnoreCase(content)\n            || \"开会\".equals(content)\n            || \"kaihui\".equalsIgnoreCase(content)\n            || \"hk\".equalsIgnoreCase(content)\n            || \"開會\".equals(content))) {\n      confId = RandomString.genRandomNum(4);\n      DonkeyHttpResponse donkeyResp =\n          donkeyClient.createNoControlConference(confId, null, null, \"weixin\");\n      if (null == donkeyResp || !donkeyResp.isAccepted()) {\n        confId = \"0\";\n        log.error(\n            \"Create audio conference error : \"\n                + (null == donkeyResp ? \"NULL Response\" : donkeyResp.getStatusCode()));\n      }\n    }\n\n    ModelAndView mv = new ModelAndView();\n    mv.addObject(ToUserName, fromUserName);\n    mv.addObject(FromUserName, toUserName);\n    mv.addObject(CreateTime, createTime);\n    mv.addObject(ConfId, confId);\n    mv.setViewName(\"weixin/msg\");\n    return mv;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8440, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 601, "focalAPIEnd": 627, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new String(byteArray,String)"], "useStart": [590], "useEnd": [642], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wf1768/archive/tree/master/src/java/com/yapu/system/util/FtpUtil.java", "rawCode": "  /**\n   * 上传文件到服务器,新上传和断点续传\n   *\n   * @param remoteFile 远程文件名，在上传之前已经将服务器工作目录做了改变\n   * @param localFile 本地文件File句柄，绝对路径\n   * @param ftpClient FTPClient引用\n   * @return\n   * @throws IOException\n   */\n  public UploadStatus uploadFile(\n      String remoteFile, File localFile, FTPClient ftpClient, long remoteSize) throws IOException {\n    UploadStatus status;\n    // 显示进度的上传\n    long step = localFile.length() / 100;\n    long process = 0;\n    long localreadbytes = 0L;\n    RandomAccessFile raf = new RandomAccessFile(localFile, \"r\");\n    OutputStream out =\n        ftpClient.appendFileStream(new String(remoteFile.getBytes(\"GBK\"), \"iso-8859-1\"));\n    // 断点续传\n    if (remoteSize > 0) {\n      ftpClient.setRestartOffset(remoteSize);\n      process = remoteSize / step;\n      raf.seek(remoteSize);\n      localreadbytes = remoteSize;\n    }\n    byte[] bytes = new byte[1024];\n    int c;\n    while ((c = raf.read(bytes)) != -1) {\n      out.write(bytes, 0, c);\n      localreadbytes += c;\n      if (localreadbytes / step != process) {\n        process = localreadbytes / step;\n        System.out.println(\"上传进度:\" + process);\n        // TODO 汇报上传状态\n      }\n    }\n    out.flush();\n    raf.close();\n    out.close();\n    boolean result = ftpClient.completePendingCommand();\n    if (remoteSize > 0) {\n      status =\n          result ? UploadStatus.Upload_From_Break_Success : UploadStatus.Upload_From_Break_Failed;\n    } else {\n      status = result ? UploadStatus.Upload_New_File_Success : UploadStatus.Upload_New_File_Failed;\n    }\n    return status;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8441, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 387, "focalAPIEnd": 411, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [377], "useEnd": [412], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/halset/openmap/tree/master/src/main/java/com/bbn/openmap/layer/link/Link.java", "rawCode": "  /**\n   * The method to call at the beginning of a request or response. It writes the header given to the\n   * link. This header is expected on the other side of the link.\n   *\n   * @param messageHeader Header string, defined in the Link object, that describes the tranmission.\n   * @throws IOException\n   */\n  public void start(String messageHeader) throws IOException {\n    dos.write(messageHeader.getBytes());\n  }\n"}, {"dataset": "getBytes", "exampleID": 8442, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 304, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new String(byteArray,String)"], "useStart": [293], "useEnd": [350], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinliucs/haflow/tree/master/src/main/java/haflow/ui/controller/HdfsController.java", "rawCode": "  @RequestMapping(value = \"/deletedirectory\", method = RequestMethod.GET)\n  @ResponseBody\n  public RemoveHdfsFileModel deletedirectory(@RequestParam(\"remotepath\") String remotePath)\n      throws UnsupportedEncodingException {\n    String in_remotePath = remotePath;\n    String out_remotePath = new String(in_remotePath.getBytes(\"iso-8859-1\"), \"UTF-8\");\n    RemoveHdfsFileModel model = new RemoveHdfsFileModel();\n    if (this.getHdfsHelper().deletedirectory(out_remotePath)) {\n      model.setSuccess(true);\n      model.setMessage(\"Succeed to delete\");\n      System.out.println(\"Succeed to delete\");\n    } else {\n      model.setSuccess(false);\n      model.setMessage(\"Fail to delete\");\n      System.out.println(\"Fail to delete\");\n    }\n    return model;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8443, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["getMessage()", "new EncodingSystemException(*,*)"], "tryExpressionStart": 659, "tryExpressionEnd": 663, "tryBlockStart": 659, "tryBlockEnd": 1178, "catchExpressionStart": 1066, "catchExpressionEnd": 1111, "catchBlockStart": 1066, "catchBlockEnd": 1178, "exceptionHandlingCallStart": [1153, 1125], "exceptionHandlingCallEnd": [1167, 1171], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 875, "focalAPIEnd": 918, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/escidoc/escidoc-core/tree/master/om/src/main/java/de/escidoc/core/om/business/fedora/item/ItemHandlerUpdate.java", "rawCode": "  /**\n   * Sets content type specific properties datastream of the item.\n   *\n   * @param xml The xml representation of the content type specific properties.\n   * @throws FedoraSystemException If Fedora reports an error.\n   * @throws WebserverSystemException In case of an internal error.\n   * @throws TripleStoreSystemException If triple store reports an error.\n   * @throws EncodingSystemException If encoding fails.\n   * @throws IntegritySystemException If the integrity of the repository is violated.\n   */\n  @Deprecated\n  protected void setContentTypeSpecificProperties(final String xml)\n      throws FedoraSystemException, EncodingSystemException {\n    try {\n      final Datastream oldDs = getItem().getCts();\n      final Datastream newDs =\n          new Datastream(\n              Elements.ELEMENT_CONTENT_MODEL_SPECIFIC,\n              getItem().getId(),\n              xml.getBytes(XmlUtility.CHARACTER_ENCODING),\n              MediaType.TEXT_XML.toString());\n\n      if (oldDs == null || !oldDs.equals(newDs)) {\n        getItem().setCts(newDs);\n      }\n\n    } catch (final UnsupportedEncodingException e) {\n      throw new EncodingSystemException(e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8444, "initialization": ["String string = format(String,String,String)"], "initializationStart": [440], "initializationEnd": [484], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 530, "focalAPIEnd": 554, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["toBase64String(byteArray)", "StringBuilder.append(string)"], "useStart": [508, 563], "useEnd": [555, 633], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ecsec/open-ecard/tree/master/crypto/tls/src/main/java/org/openecard/crypto/tls/proxy/HttpConnectProxy.java", "rawCode": "  private String makeRequestStr(String host, int port) {\n    // HTTP CONNECT protocol RFC 2616\n    StringBuilder requestStr = new StringBuilder(1024);\n    requestStr.append(\"CONNECT \").append(host).append(\":\").append(port).append(\" HTTP/1.0\\r\\n\");\n    // Add Proxy Authorization if proxyUser and proxyPass is set\n    if (proxyUser != null && !proxyUser.isEmpty() && proxyPass != null && !proxyPass.isEmpty()) {\n      String proxyUserPass = String.format(\"%s:%s\", proxyUser, proxyPass);\n      proxyUserPass = Base64.toBase64String(proxyUserPass.getBytes());\n      requestStr.append(\"Proxy-Authorization: Basic \").append(proxyUserPass).append(\"\\r\\n\");\n    }\n    // finalize request\n    requestStr.append(\"\\r\\n\");\n\n    return requestStr.toString();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8445, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 165, "focalAPIEnd": 180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [140], "useEnd": [181], "hasFinally": 1, "cleanUpCall": ["ByteArrayInputStream.close()"], "finallyExpressionStart": 260, "finallyExpressionEnd": 268, "finallyBlockStart": 260, "finallyBlockEnd": 335, "cleanUpCallStart": [306], "cleanUpCallEnd": [320], "url": "https://github.com/aldaris/opensso/tree/master/products/amserver/source/com/sun/identity/cli/datastore/AddAMSDKIdRepoPlugin.java", "rawCode": "  private void loadLDIF(LDAPConnection ld, String ldif) throws Exception {\n    ByteArrayInputStream reader = null;\n    try {\n      reader = new ByteArrayInputStream(ldif.getBytes());\n      LDAPUtils.createSchemaFromLDIF(new DataInputStream(reader), ld);\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8446, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["e(String,String)"], "tryExpressionStart": 482, "tryExpressionEnd": 486, "tryBlockStart": 482, "tryBlockEnd": 1118, "catchExpressionStart": 778, "catchExpressionEnd": 813, "catchBlockStart": 778, "catchBlockEnd": 867, "exceptionHandlingCallStart": [821], "exceptionHandlingCallEnd": [860], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 594, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray)"], "useStart": [583], "useEnd": [616], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/britzl/androidutils/tree/master/androidutils-lib/src/se/springworks/android/utils/iab/Security.java", "rawCode": "  /**\n   * Verifies that the signature from the server matches the computed signature on the data. Returns\n   * true if the data is correctly signed.\n   *\n   * @param publicKey public key associated with the developer account\n   * @param signedData signed data from server\n   * @param signature server signature\n   * @return true if the data and signature match\n   */\n  public static boolean verify(PublicKey publicKey, String signedData, String signature) {\n    Signature sig;\n    try {\n      sig = Signature.getInstance(SIGNATURE_ALGORITHM);\n      sig.initVerify(publicKey);\n      sig.update(signedData.getBytes());\n      if (!sig.verify(Base64.decode(signature))) {\n        Log.e(TAG, \"Signature verification failed.\");\n        return false;\n      }\n      return true;\n    } catch (NoSuchAlgorithmException e) {\n      Log.e(TAG, \"NoSuchAlgorithmException.\");\n    } catch (InvalidKeyException e) {\n      Log.e(TAG, \"Invalid key specification.\");\n    } catch (SignatureException e) {\n      Log.e(TAG, \"Signature exception.\");\n    } catch (Base64DecoderException e) {\n      Log.e(TAG, \"Base64 decoding failed.\");\n    }\n    return false;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8447, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charset)", "focalAPIStart": 385, "focalAPIEnd": 408, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Cipher.doFinal(byteArray)"], "useStart": [438], "useEnd": [461], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fbierhaus/hackathon/tree/master/common/src/com/vzw/util/CryptoUtils.java", "rawCode": "      /**\n       * @param key\n       * @param inStr\n       * @return\n       * @throws Exception\n       */\n      private String encrypt(SecretKey key, String inStr) throws Exception {\n\n        if (hashMethod != null) {\n          return HashUtils.encode(hashMethod, key.getEncoded(), inStr);\n        } else {\n\n          cipher.init(Cipher.ENCRYPT_MODE, key);\n\n          byte[] inBytes = inStr.getBytes(CHARSET);\n          byte[] outBytes = cipher.doFinal(inBytes);\n\n          return Base64.encodeBase64String(outBytes);\n        }\n      }\n"}, {"dataset": "getBytes", "exampleID": 8448, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 107, "focalAPIEnd": 136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/box/bluetooth-authenticator/tree/master/mobile/ios/externals/zxing/core/src/com/google/zxing/qrcode/encoder/Encoder.java", "rawCode": "  private static boolean isOnlyDoubleByteKanji(String content) {\n    byte[] bytes;\n    try {\n      bytes = content.getBytes(\"Shift_JIS\");\n    } catch (UnsupportedEncodingException uee) {\n      return false;\n    }\n    int length = bytes.length;\n    if (length % 2 != 0) {\n      return false;\n    }\n    for (int i = 0; i < length; i += 2) {\n      int byte1 = bytes[i] & 0xFF;\n      if ((byte1 < 0x81 || byte1 > 0x9F) && (byte1 < 0xE0 || byte1 > 0xEB)) {\n        return false;\n      }\n    }\n    return true;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8449, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charset)", "focalAPIStart": 85, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ByteBuffer.put(byteArray)"], "useStart": [184], "useEnd": [199], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/opensciencemap/VectorTileMap/tree/master/map-writer-postgis/src/org/mapsforge/map/writer/MapFileWriter.java", "rawCode": "  private static void writeUTF8(String string, ByteBuffer buffer) {\n    byte[] str = string.getBytes(UTF8_CHARSET);\n    buffer.put(Serializer.getVariableByteUnsigned(str.length));\n    buffer.put(str);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8450, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 49, "tryExpressionEnd": 53, "tryBlockStart": 49, "tryBlockEnd": 177, "catchExpressionStart": 94, "catchExpressionEnd": 133, "catchBlockStart": 94, "catchBlockEnd": 177, "exceptionHandlingCallStart": [147], "exceptionHandlingCallEnd": [170], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 68, "focalAPIEnd": 86, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alecgorge/jsonapi/tree/master/src/main/java/org/java_websocket/util/Charsetfunctions.java", "rawCode": "  public static byte[] utf8Bytes(String s) {\n    try {\n      return s.getBytes(\"UTF8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8451, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 262, "tryExpressionEnd": 266, "tryBlockStart": 262, "tryBlockEnd": 512, "catchExpressionStart": 398, "catchExpressionEnd": 434, "catchBlockStart": 398, "catchBlockEnd": 512, "exceptionHandlingCallStart": [442], "exceptionHandlingCallEnd": [505], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 344, "focalAPIEnd": 363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray)"], "useStart": [334], "useEnd": [364], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/T4g1/3eme/tree/master/Java/Etape 3/Library/src/Utils/Request.java", "rawCode": "  /**\n   * Donne le digest du string donné\n   *\n   * @param password\n   * @return Tableau de byte\n   */\n  public static byte[] getDigest(String password) {\n    // Brouille le mot de passe\n    password += \"CowLAN\";\n\n    // Construit le digest du mot de passe\n    try {\n      MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n      md.update(password.getBytes());\n      return md.digest();\n    } catch (NoSuchAlgorithmException ex) {\n      System.out.println(\"Algo SHA1 inexistant, digest non transmis\");\n    }\n\n    return null;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8452, "initialization": ["String string = Iterator<String>.next()"], "initializationStart": [169], "initializationEnd": [179], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 316, "focalAPIEnd": 355, "followUpCheck": "byteArray[byteArray.length - 1] != 0xa", "checkType": "IF", "followUpCheckExpressionStart": 397, "followUpCheckExpressionEnd": 432, "followUpCheckBlockStart": 397, "followUpCheckBlockEnd": 483, "use": ["ByteBuffer.put(byteArray)"], "useStart": [365], "useEnd": [387], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BullShark/IRCBlit/tree/master/src/main/java/com/gitblit/fanout/FanoutNioService.java", "rawCode": "    protected void write(SocketChannel ch) throws IOException {\n      Iterator<String> itr = replyQueue.iterator();\n      while (itr.hasNext()) {\n        String reply = itr.next();\n        writeBuffer.clear();\n        logger.debug(MessageFormat.format(\"fanout reply to {0}: {1}\", id, reply));\n        byte[] bytes = reply.getBytes(FanoutConstants.CHARSET);\n        writeBuffer.put(bytes);\n        if (bytes[bytes.length - 1] != 0xa) {\n          writeBuffer.put((byte) 0xa);\n        }\n        writeBuffer.flip();\n\n        // loop until write buffer has been completely sent\n        int written = 0;\n        int toWrite = writeBuffer.remaining();\n        while (written != toWrite) {\n          written += ch.write(writeBuffer);\n          try {\n            Thread.sleep(10);\n          } catch (Exception x) {\n          }\n        }\n        itr.remove();\n      }\n      writeBuffer.clear();\n    }\n"}, {"dataset": "getBytes", "exampleID": 8453, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 203, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)", "is(string)"], "useStart": [178, 373], "useEnd": [223, 385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/activelylazy/Rescripter/tree/master/com.rescripter.editor.test/src/test/com/rescripter/resources/FileContentsReaderTest.java", "rawCode": "  @Test\n  public void reads_contents_of_a_stream() throws IOException, CoreException {\n    String contents = \"first line\\nof the contents\\n\";\n    final InputStream inputStream = new ByteArrayInputStream(contents.getBytes());\n\n    FileContentsReader reader = new FileContentsReader();\n    String readContents = reader.getContents(inputStream);\n\n    assertThat(readContents, is(contents));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8454, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 483, "focalAPIEnd": 497, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)", "string.length()", "string.getBytes()", "write(byteArray)", "string.length()", "string.getBytes()", "write(byteArray)", "string.length()", "string.getBytes()", "write(byteArray)"], "useStart": [470, 723, 790, 777, 1070, 1137, 1124, 1543, 1594, 1581], "useEnd": [498, 735, 804, 805, 1082, 1151, 1152, 1555, 1608, 1609], "hasFinally": 1, "cleanUpCall": ["ConnectionServer.stop()", "Socket.close()", "CSThread.join()"], "finallyExpressionStart": 2207, "finallyExpressionEnd": 2215, "finallyBlockStart": 2207, "finallyBlockEnd": 2335, "cleanUpCallStart": [2224, 2241, 2263], "cleanUpCallEnd": [2233, 2255, 2278], "url": "https://github.com/pmlt/comp354/tree/master/code/src/tests/ConnectionServerTest.java", "rawCode": "  @Test\n  public void testSendData() throws UnknownHostException, IOException, InterruptedException {\n    CSThread csThread = new CSThread();\n    csThread.start();\n    // Wait for CS to bind socket...\n    Thread.sleep(1000);\n    Socket socket = new Socket();\n    try {\n      socket.connect(new InetSocketAddress(\"localhost\", 11233));\n      OutputStream stream = socket.getOutputStream();\n\n      // Try sending garbage\n      String msg = \"gfenrwjgfe fbd fbb fwwq\";\n      stream.write(msg.getBytes());\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNull(lastVessel); // Should NOT have called update()\n\n      // Try sending netstring-encoded garbage\n      msg = \"gfenrwjgfe fbd fbb fwwq\";\n      msg = msg.length() + \":\" + msg; // Netstring encoding\n      stream.write(msg.getBytes());\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNull(lastVessel); // Should NOT have called update()\n\n      // Try sending bad vessel values\n      msg = \"{\\\"id\\\":[1,2,3],\\\"type\\\":\\\"WRONGENUMVALUE\\\",\\\"coords\\\":0,\\\"course\\\":{}}\";\n      msg = msg.length() + \":\" + msg; // Netstring encoding\n      stream.write(msg.getBytes());\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNull(lastVessel); // Should NOT have called update()\n\n      // Try sending correct data\n      Calendar curTime = Calendar.getInstance();\n      UpdateData ud =\n          new UpdateData(\n              \"myid\", VesselType.CARGO_BOAT, new Coord(10, -10), new Course(20, -20), curTime);\n      msg = ud.toJSON();\n      msg = msg.length() + \":\" + msg + \",\";\n      stream.write(msg.getBytes()); // Write with netstring encoding\n      Thread.sleep(1000); // Allow for overhead of network\n      assertNotNull(lastVessel);\n      Calendar timestamp = lastVessel.getLastTimestamp();\n      assertEquals(curTime, timestamp);\n      assertEquals(\"myid\", lastVessel.getId());\n      assertEquals(VesselType.CARGO_BOAT, lastVessel.getType());\n\n      try {\n        assertEquals(new Coord(10, -10), lastVessel.getCoord(timestamp));\n        assertEquals(new Course(20, -20), lastVessel.getCourse(timestamp));\n      } catch (Exception e) {\n        fail(\"Caught exception: \" + e.getMessage());\n      }\n    } finally {\n\n      cs.stop();\n      socket.close();\n      csThread.join(); // Wait for ConnectionServer to cleanly shut down\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8455, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 396, "focalAPIEnd": 410, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.getBytes()", "write(byteArray)"], "useStart": [463, 449], "useEnd": [477, 478], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8528/sync/src/test/com/funambol/sync/client/OTAConfigParserTest.java", "rawCode": "  /**\n   * Build SyncML Message Section\n   *\n   * @return byte[] Section representation\n   */\n  public byte[] buildSyncMLSection() throws IOException {\n    ByteArrayOutputStream msgByteArray = new ByteArrayOutputStream();\n    DataOutputStream msgData = new DataOutputStream(msgByteArray);\n    // Section Type\n    msgData.writeByte(message.SYNCML);\n    // First Field length\n    msgData.writeByte(URL.getBytes().length);\n    // First Field Value\n    msgData.write(URL.getBytes());\n    // Second Field length\n    msgData.writeByte(USER.getBytes().length);\n    // Second Field Value\n    msgData.write(USER.getBytes());\n    // Third Field legth\n    msgData.writeByte(PASSWORD.getBytes().length);\n    // Third Field Value\n    msgData.write(PASSWORD.getBytes());\n    return msgByteArray.toByteArray();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8456, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 187, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeData(byteArray)"], "useStart": [171], "useEnd": [203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/planestraveler/git-starteam/tree/master/syncronizer/test/org/ossnoize/git/fastimport/test/DataTest.java", "rawCode": "  @Test\n  public void testOutput() throws IOException {\n    ByteArrayOutputStream byout = new ByteArrayOutputStream();\n    String test = \"abcdefghijklmnopqrstuvwxyz\";\n    data1.writeData(test.getBytes());\n    data1.writeTo(byout);\n    assertEquals(\n        \"data 26\\nabcdefghijklmnopqrstuvwxyz\\n\", new String(byout.toByteArray(), 0, byout.size()));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8457, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 651, "focalAPIEnd": 708, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [626], "useEnd": [709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidpcruz/MSE-EAI/tree/master/Project2/EAICommon/src/eai/msejdf/utils/XmlObjConv.java", "rawCode": "  /**\n   * Validate xml against a defined classType (through it's xsd).\n   *\n   * @param xml the xml\n   * @param classType the class type\n   * @return true, if successful\n   */\n  public static boolean validateXML(String xml, Class<?> classType) {\n    boolean valid = false;\n\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"validateXML(String, Class<T>) - start\"); // $NON-NLS-1$\n    }\n\n    // Schema validation (try to get the schema)\n    Schema schema = getClassXSDSchema(classType);\n\n    if (schema != null) {\n      Validator validator = schema.newValidator();\n      try {\n        InputStream xmlStream =\n            new ByteArrayInputStream(xml.getBytes(eai.msejdf.utils.XMLConstants.FILE_ENCODING));\n        validator.validate(new StreamSource(xmlStream));\n        valid = true;\n      } catch (SAXException | IOException e) {\n        logger.error(\"validateXML(String xml, Class<?> classType) - exception \", e); // $NON-NLS-1$\n        valid = false;\n      }\n\n    } else {\n      if (logger.isDebugEnabled()) {\n        logger.warn(\n            \"validateXML(String xml, Class<?> classType) . unable to load schema\"); // $NON-NLS-1$\n      }\n    }\n\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"validateXML(String, Class<T>) - end\"); // $NON-NLS-1$\n    }\n\n    return valid;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8458, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 247, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [237], "useEnd": [264], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/tags/release-0.9.1/adito/src/com/adito/security/pki/Base64EncodedFileFormat.java", "rawCode": "  /**\n   * @param keyblob\n   * @return\n   */\n  public byte[] formatKey(byte[] keyblob) {\n    try {\n      ByteArrayOutputStream out = new ByteArrayOutputStream();\n      String headerTag;\n      String headerValue;\n      String line;\n      out.write(begin.getBytes());\n      out.write('\\n');\n\n      int pos;\n      Set tags = headers.keySet();\n      Iterator it = tags.iterator();\n\n      while (it.hasNext()) {\n        headerTag = (String) it.next();\n        headerValue = (String) headers.get(headerTag);\n\n        String header = headerTag + \": \" + headerValue;\n        pos = 0;\n\n        while (pos < header.length()) {\n          line =\n              header.substring(\n                      pos,\n                      (((pos + MAX_LINE_LENGTH) < header.length())\n                          ? (pos + MAX_LINE_LENGTH)\n                          : header.length()))\n                  + (((pos + MAX_LINE_LENGTH) < header.length()) ? \"\\\\\" : \"\");\n          out.write(line.getBytes());\n          out.write('\\n');\n          pos += MAX_LINE_LENGTH;\n        }\n      }\n\n      String encoded = new String(Base64.encode(keyblob));\n      out.write(encoded.getBytes());\n      out.write('\\n');\n      out.write(end.getBytes());\n      out.write('\\n');\n\n      return out.toByteArray();\n    } catch (IOException ioe) {\n      return null;\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8459, "initialization": ["String string = trimToNull(*)"], "initializationStart": [446], "initializationEnd": [490], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["Log.warn(String)"], "tryExpressionStart": 522, "tryExpressionEnd": 526, "tryBlockStart": 522, "tryBlockEnd": 725, "catchExpressionStart": 651, "catchExpressionEnd": 671, "catchBlockStart": 651, "catchBlockEnd": 725, "exceptionHandlingCallStart": [681], "exceptionHandlingCallEnd": [716], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 496, "guardExpressionEnd": 513, "guardBlockStart": 496, "guardBlockEnd": 731, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 573, "focalAPIEnd": 595, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decodeBase64(byteArray)"], "useStart": [553], "useEnd": [596], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc08/kernel-util/src/main/java/org/sakaiproject/util/Xml.java", "rawCode": "  /**\n   * Decode a string from the attribute <tag>of the element <el>, that was made using\n   * encodeAttribute().\n   *\n   * @param el The element.\n   * @param tag The attribute name.\n   * @return The string; may be empty, won't be null.\n   */\n  public static String decodeAttribute(Element el, String tag) {\n    String charset = StringUtils.trimToNull(el.getAttribute(\"charset\"));\n    if (charset == null) charset = \"UTF-8\";\n\n    String body = StringUtils.trimToNull(el.getAttribute(tag));\n    if (body != null) {\n      try {\n        byte[] decoded = Base64.decodeBase64(body.getBytes(\"UTF-8\"));\n        body = new String(decoded, charset);\n      } catch (Exception e) {\n        M_log.warn(\"decodeAttribute: \" + e);\n      }\n    }\n\n    if (body == null) body = \"\";\n\n    return body;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8460, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["printStackTrace()", "new IllegalStateException()"], "tryExpressionStart": 52, "tryExpressionEnd": 56, "tryBlockStart": 52, "tryBlockEnd": 542, "catchExpressionStart": 317, "catchExpressionEnd": 352, "catchBlockStart": 317, "catchBlockEnd": 427, "exceptionHandlingCallStart": [360, 393], "exceptionHandlingCallEnd": [379, 420], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 206, "focalAPIEnd": 225, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray)"], "useStart": [189], "useEnd": [226], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/plantuml/tree/master/tags/plantuml-6939/src/net/sourceforge/plantuml/SignatureUtils.java", "rawCode": "  public static String getSignature(String s) {\n    try {\n      final AsciiEncoder coder = new AsciiEncoder();\n      final MessageDigest msgDigest = MessageDigest.getInstance(\"MD5\");\n      msgDigest.update(s.getBytes(\"UTF-8\"));\n      final byte[] digest = msgDigest.digest();\n      return coder.encode(digest);\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n      throw new IllegalStateException();\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n      throw new IllegalStateException();\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8461, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 619, "focalAPIEnd": 641, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [584], "useEnd": [642], "hasFinally": 1, "cleanUpCall": ["HttpURLConnection.disconnect()"], "finallyExpressionStart": 1392, "finallyExpressionEnd": 1400, "finallyBlockStart": 1392, "finallyBlockEnd": 1462, "cleanUpCallStart": [1432], "cleanUpCallEnd": [1455], "url": "https://github.com/thest1/Android-VKontakte-SDK/tree/master/AndroidVkSdk/src/com/perm/kate/api/Api.java", "rawCode": "  private String sendRequestInternal(String url, String body, boolean is_post) throws IOException {\n    HttpURLConnection connection = null;\n    try {\n      connection = (HttpURLConnection) new URL(url).openConnection();\n      connection.setConnectTimeout(30000);\n      connection.setReadTimeout(30000);\n      connection.setUseCaches(false);\n      connection.setDoOutput(is_post);\n      connection.setDoInput(true);\n      connection.setRequestMethod(is_post ? \"POST\" : \"GET\");\n      if (enable_compression) connection.setRequestProperty(\"Accept-Encoding\", \"gzip\");\n      if (is_post) connection.getOutputStream().write(body.getBytes(\"UTF-8\"));\n      int code = connection.getResponseCode();\n      Log.i(TAG, \"code=\" + code);\n      // It may happen due to keep-alive problem\n      // http://stackoverflow.com/questions/1440957/httpurlconnection-getresponsecode-returns-1-on-second-invocation\n      if (code == -1) throw new WrongResponseCodeException(\"Network error\");\n      // может стоит проверить на код 200\n      // on error can also read error stream from connection.\n      InputStream is = new BufferedInputStream(connection.getInputStream(), 8192);\n      String enc = connection.getHeaderField(\"Content-Encoding\");\n      if (enc != null && enc.equalsIgnoreCase(\"gzip\")) is = new GZIPInputStream(is);\n      String response = Utils.convertStreamToString(is);\n      return response;\n    } finally {\n      if (connection != null) connection.disconnect();\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8462, "initialization": ["String string = toAttachmentsJson(List<FileNode>,String,*,*,*)"], "initializationStart": [7284], "initializationEnd": [7410], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["toString()", "error(*,*)"], "tryExpressionStart": 7248, "tryExpressionEnd": 7252, "tryBlockStart": 7248, "tryBlockEnd": 8029, "catchExpressionStart": 7966, "catchExpressionEnd": 7988, "catchBlockStart": 7966, "catchBlockEnd": 8029, "exceptionHandlingCallStart": [8006, 7996], "exceptionHandlingCallEnd": [8018, 8022], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 7775, "focalAPIEnd": 7804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [7919], "useEnd": [7958], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GeniusWiki/GeniusWiki/tree/master/src/wiki/java/com/edgenius/wiki/webapp/servlet/UploadServlet.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  protected void doService(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (\"GET\".equalsIgnoreCase(request.getMethod())) {\n      // just render blank page for upload\n      String pageUuid = request.getParameter(\"puuid\");\n      String spaceUname = request.getParameter(\"uname\");\n      String draft = request.getParameter(\"draft\");\n\n      request.setAttribute(\"pageUuid\", pageUuid);\n      request.setAttribute(\"spaceUname\", spaceUname);\n      request.setAttribute(\"draft\", NumberUtils.toInt(draft, PageType.NONE_DRAFT.value()));\n\n      request.getRequestDispatcher(\"/WEB-INF/pages/upload.jsp\").forward(request, response);\n\n      return;\n    }\n\n    // post - upload\n\n    // if(WikiUtil.getUser().isAnonymous()){\n    // //anonymous can not allow to upload any files\n\n    PageService pageService = getPageService();\n\n    ServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory());\n\n    List<FileNode> files = new ArrayList<FileNode>();\n    String pageUuid = null, spaceUname = null;\n    try {\n      int status = PageType.NONE_DRAFT.value();\n      // index->filename\n      Map<String, FileItem> fileMap = new HashMap<String, FileItem>();\n      Map<String, String> descMap = new HashMap<String, String>();\n      // index->index\n      Map<String, String> indexMap = new HashMap<String, String>();\n\n      // offline submission, filename put into hidden variable rather than <input type=\"file> tag\n      Map<String, String> filenameMap = new HashMap<String, String>();\n      // TODO: offline submission, version also upload together with file, this give a change to do\n      // failure tolerance check:\n      // if version is same with online save, then it is OK, if greater, means it maybe duplicated\n      // upload, if less, unpexected case\n      Map<String, String> versionMap = new HashMap<String, String>();\n\n      Map<String, Boolean> bulkMap = new HashMap<String, Boolean>();\n\n      Map<String, Boolean> sharedMap = new HashMap<String, Boolean>();\n      List<FileItem> items = upload.parseRequest(request);\n      for (FileItem item : items) {\n        String name = item.getFieldName();\n        if (StringUtils.equals(name, \"spaceUname\")) {\n          spaceUname = item.getString(Constants.UTF8);\n        } else if (StringUtils.equals(name, \"pageUuid\")) {\n          pageUuid = item.getString();\n        } else if (name.startsWith(\"draft\")) {\n          // check this upload is from \"click save button\" or \"auto upload in draft status\"\n          status = Integer.parseInt(item.getString());\n        } else if (name.startsWith(\"file\")) {\n          fileMap.put(name.substring(4), item);\n          indexMap.put(name.substring(4), name.substring(4));\n        } else if (name.startsWith(\"desc\")) {\n          descMap.put(name.substring(4), item.getString(Constants.UTF8));\n        } else if (name.startsWith(\"shar\")) {\n          sharedMap.put(name.substring(4), Boolean.parseBoolean(item.getString()));\n        } else if (name.startsWith(\"name\")) {\n          filenameMap.put(name.substring(4), item.getString());\n        } else if (name.startsWith(\"vers\")) {\n          versionMap.put(name.substring(4), item.getString());\n        } else if (name.startsWith(\"bulk\")) {\n          bulkMap.put(name.substring(4), BooleanUtils.toBoolean(item.getString()));\n        }\n      }\n      if (StringUtils.isBlank(pageUuid)) {\n        log.error(\"Attachment can not be load because of page does not save successfully.\");\n        throw new PageException(\n            \"Attachment can not be load because of page does not save successfully.\");\n      }\n\n      List<FileNode> bulkFiles = new ArrayList<FileNode>();\n      String username = request.getRemoteUser();\n      // put file/desc pair into final Map\n      for (String id : fileMap.keySet()) {\n        FileItem item = fileMap.get(id);\n        if (item == null || item.getInputStream() == null || item.getSize() <= 0) {\n          log.warn(\"Empty upload item:\" + (item != null ? item.getName() : \"\"));\n          continue;\n        }\n        FileNode node = new FileNode();\n        node.setComment(descMap.get(id));\n        node.setShared(sharedMap.get(id) == null ? false : sharedMap.get(id));\n        node.setFile(item.getInputStream());\n        String filename = item.getName();\n        if (StringUtils.isBlank(filename)) {\n          // this could be offline submission, get name from map\n          filename = filenameMap.get(id);\n        }\n        node.setFilename(FileUtil.getFileName(filename));\n        node.setContentType(item.getContentType());\n        node.setIndex(indexMap.get(id));\n        node.setType(RepositoryService.TYPE_ATTACHMENT);\n        node.setIdentifier(pageUuid);\n        node.setCreateor(username);\n        node.setStatus(status);\n        node.setSize(item.getSize());\n        node.setBulkZip(bulkMap.get(id) == null ? false : bulkMap.get(id));\n\n        files.add(node);\n\n        if (node.isBulkZip()) bulkFiles.add(node);\n      }\n      if (spaceUname != null && pageUuid != null && files.size() > 0) {\n        files = pageService.uploadAttachments(spaceUname, pageUuid, files, false);\n\n        // only save non-draft uploaded attachment\n        if (status == 0) {\n          try {\n            getActivityLog()\n                .logAttachmentUploaded(\n                    spaceUname,\n                    pageService.getCurrentPageByUuid(pageUuid).getTitle(),\n                    WikiUtil.getUser(),\n                    files);\n          } catch (Exception e) {\n            log.warn(\"Activity log save error for attachment upload\", e);\n          }\n        }\n        // as bulk files won't in return list in PageService.uploadAttachments(), here need\n        // append to all return list, but only for client side \"uploading panel\" clean purpose\n        files.addAll(bulkFiles);\n        // TODO: if version come in together, then do check\n        // if(versionMap.size() > 0){\n        // for (FileNode node: files) {\n        //\n        // }\n        // }\n      }\n\n    } catch (RepositoryQuotaException e) {\n      FileNode att = new FileNode();\n      att.setError(getMessageService().getMessage(\"err.quota.exhaust\"));\n      files = Arrays.asList(att);\n    } catch (AuthenticationException e) {\n      String redir = ((RedirectResponseWrapper) response).getRedirect();\n      if (redir == null) redir = WikiConstants.URL_LOGIN;\n      log.info(\"Send Authentication redirect URL \" + redir);\n\n      FileNode att = new FileNode();\n      att.setError(getMessageService().getMessage(\"err.authentication.required\"));\n      files = Arrays.asList(att);\n\n    } catch (AccessDeniedException e) {\n      String redir = ((RedirectResponseWrapper) response).getRedirect();\n      if (redir == null) redir = WikiConstants.URL_ACCESS_DENIED;\n      log.info(\"Send AccessDenied redirect URL \" + redir);\n\n      FileNode att = new FileNode();\n      att.setError(getMessageService().getMessage(\"err.access.denied\"));\n      files = Arrays.asList(att);\n\n    } catch (Exception e) {\n      // FileUploadException,RepositoryException\n      log.error(\"File upload failed \", e);\n      FileNode att = new FileNode();\n      att.setError(getMessageService().getMessage(\"err.upload\"));\n      files = Arrays.asList(att);\n    }\n\n    try {\n      String json =\n          FileNode.toAttachmentsJson(\n              files, spaceUname, WikiUtil.getUser(), getMessageService(), getUserReadingService());\n\n      // TODO: does not compress request in Gzip, refer to\n      // http://www.google.com/codesearch?hl=en&q=+RemoteServiceServlet+show:PAbNFg2Qpdo:akEoB_bGF1c:4aNSrXYgYQ4&sa=N&cd=1&ct=rc&cs_p=https://ssl.shinobun.org/svn/repos/trunk&cs_f=proprietary/gwt/gwt-user/src/main/java/com/google/gwt/user/server/rpc/RemoteServiceServlet.java#first\n      byte[] reply = json.getBytes(Constants.UTF8);\n      response.setContentLength(reply.length);\n      response.setContentType(\"text/plain; charset=utf-8\");\n      response.getOutputStream().write(reply);\n    } catch (IOException e) {\n      log.error(e.toString(), e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8463, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["Log.warn(String)"], "tryExpressionStart": 460, "tryExpressionEnd": 464, "tryBlockStart": 460, "tryBlockEnd": 669, "catchExpressionStart": 599, "catchExpressionEnd": 619, "catchBlockStart": 599, "catchBlockEnd": 669, "exceptionHandlingCallStart": [627], "exceptionHandlingCallEnd": [662], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null)", "guardType": "IF {", "guardExpressionStart": 350, "guardExpressionEnd": 368, "guardBlockStart": 350, "guardBlockEnd": 390, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 520, "focalAPIEnd": 543, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["encodeBase64(byteArray)"], "useStart": [500], "useEnd": [544], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.3.0-b04/kernel-util/src/main/java/org/sakaiproject/util/Xml.java", "rawCode": "  /**\n   * Place a string into the attribute <tag>of the element <el>, encoded so special characters can\n   * be used.\n   *\n   * @param el The element.\n   * @param tag The attribute name.\n   * @param value The string.\n   */\n  public static void encodeAttribute(Element el, String tag, String value) {\n    // KNL-688 avoid a NPE being logged - DH\n    if (value == null) {\n      return;\n    }\n\n    // encode the message body base64, and make it an attribute\n    try {\n      String encoded = new String(Base64.encodeBase64(value.getBytes(\"UTF-8\")), \"UTF-8\");\n      el.setAttribute(tag, encoded);\n    } catch (Exception e) {\n      M_log.warn(\"encodeAttribute: \" + e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8464, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 427, "focalAPIEnd": 448, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setBytes(int,byteArray)", "assertEquals(string,String)"], "useStart": [408, 737], "useEnd": [449, 772], "hasFinally": 1, "cleanUpCall": ["ResultSet.close()"], "finallyExpressionStart": 780, "finallyExpressionEnd": 788, "finallyBlockStart": 780, "finallyBlockEnd": 951, "cleanUpCallStart": [813], "cleanUpCallEnd": [824], "url": "https://github.com/wsot/platform_libcore/tree/master/luni/src/test/java/libcore/java/sql/OldResultSetGetterTests.java", "rawCode": "  public void testGetBytesIntBinary() throws SQLException {\n\n    Statement st = null;\n    Statement stQuery = null;\n    PreparedStatement stPrep = null;\n    ResultSet res = null;\n\n    // setup\n\n    String testString = \"HelloWorld\";\n    st = conn.createStatement();\n    st.executeUpdate(\"create table testBinary (BINARY value);\");\n    stPrep = conn.prepareStatement(\"insert into testBinary values (?);\");\n    stPrep.setBytes(1, testString.getBytes());\n    stPrep.execute();\n    try {\n      stQuery = conn.createStatement();\n      res = stQuery.executeQuery(\"select * from testBinary\");\n      assertTrue(res.next());\n      byte[] output = res.getBytes(1);\n      String helloTest = new String(output);\n      assertNotNull(helloTest);\n      assertEquals(testString, helloTest);\n    } finally {\n      if (res != null) res.close();\n      if (stPrep != null) stPrep.close();\n      if (st != null) st.close();\n      if (stQuery != null) stQuery.close();\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8465, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 85, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeBytes(Socket,byteArray)"], "useStart": [139], "useEnd": [155], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/0xdata/h2o/tree/master/hadoop/src/main/java/water/hadoop/AbstractMessage.java", "rawCode": "  protected void writeString(Socket s, String str) throws Exception {\n    byte b[] = str.getBytes(\"UTF-8\");\n    writeInt(s, b.length);\n    writeBytes(s, b);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8466, "initialization": ["String string = getFileContent(ICompilationUnit,String,List<String>)"], "initializationStart": [2148], "initializationEnd": [2216], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 2282, "focalAPIEnd": 2300, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)", "string.getBytes()", "equals(byteArray,byte[])"], "useStart": [2257, 2587, 2573], "useEnd": [2301, 2605, 2618], "hasFinally": 1, "cleanUpCall": ["closeQuietly(InputStream)"], "finallyExpressionStart": 2784, "finallyExpressionEnd": 2792, "finallyBlockStart": 2784, "finallyBlockEnd": 2861, "cleanUpCallStart": [2806], "cleanUpCallEnd": [2848], "url": "https://github.com/eclipse/acceleo/tree/master/plugins/org.eclipse.acceleo.ide.ui/src/org/eclipse/acceleo/internal/ide/ui/editors/template/utils/JavaServicesUtils.java", "rawCode": "  /**\n   * Generates an Acceleo module for a given compilation unit.\n   *\n   * @param iCompilationUnit The compilation unit\n   * @param monitor The progress monitor\n   */\n  public static void generateAcceleoServicesModule(\n      ICompilationUnit iCompilationUnit, IProgressMonitor monitor) {\n    monitor.subTask(\n        AcceleoUIMessages.getString(\n            \"JavaServiceUtils.GenerateAcceleoModuleWrapper\")); // $NON-NLS-1$\n    List<String> nsURIs = new ArrayList<String>();\n    try {\n      IType[] types = iCompilationUnit.getTypes();\n      for (IType iType : types) {\n        ISourceRange javadocRange = iType.getJavadocRange();\n        if (javadocRange != null) {\n          String javadoc =\n              iCompilationUnit\n                  .getOpenable()\n                  .getBuffer()\n                  .getText(javadocRange.getOffset(), javadocRange.getLength());\n          Scanner scanner = new Scanner(javadoc);\n          while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            if (javadoc != null) {\n              int index = line.indexOf(IAcceleoConstants.JAVADOC_TAG_NS_URI);\n              if (index != -1) {\n                String trimmed =\n                    line.substring(index + IAcceleoConstants.JAVADOC_TAG_NS_URI.length()).trim();\n                nsURIs.add(trimmed);\n              }\n            }\n          }\n          scanner.close();\n        }\n      }\n\n      // Write the file\n      IResource resource = iCompilationUnit.getResource();\n      if (resource instanceof IFile) {\n        IFile javaFile = (IFile) resource;\n        String moduleName = javaFile.getName();\n        if (moduleName.endsWith(\".java\")) { // $NON-NLS-1$\n          moduleName =\n              moduleName.substring(0, moduleName.length() - \".java\".length()); // $NON-NLS-1$\n        }\n        String fileName = moduleName;\n        moduleName = moduleName + '.' + IAcceleoConstants.MTL_FILE_EXTENSION;\n        IContainer parent = javaFile.getParent();\n        IFile file =\n            parent.getFile(\n                new Path(moduleName.substring(0, 1).toLowerCase() + moduleName.substring(1)));\n\n        String content = JavaServicesUtils.getFileContent(iCompilationUnit, fileName, nsURIs);\n\n        ByteArrayInputStream source = new ByteArrayInputStream(content.getBytes());\n        if (file.exists()) {\n          InputStream prevVersionStream = file.getContents();\n          boolean sameContent = false;\n          byte[] oldContent;\n          try {\n            oldContent = ByteStreams.toByteArray(prevVersionStream);\n            sameContent = Arrays.equals(content.getBytes(), oldContent);\n          } catch (IOException e) {\n            /*\n             * If we have an IOException we'll consider the content is not the same.\n             */\n          } finally {\n            Closeables.closeQuietly(prevVersionStream);\n          }\n          if (!sameContent) {\n            file.setContents(source, true, false, monitor);\n          }\n        } else {\n          file.create(source, true, monitor);\n        }\n      }\n    } catch (JavaModelException e) {\n      // do not log\n    } catch (CoreException e) {\n      AcceleoUIActivator.log(e, true);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8467, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 195, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [170], "useEnd": [210], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/justinsb/android-libcore/tree/master/luni/src/test/java/org/apache/harmony/xnet/provider/jsse/ChainStrengthAnalyzerTest.java", "rawCode": "  private static X509Certificate createCert(String pem) throws Exception {\n    CertificateFactory cf = CertificateFactory.getInstance(\"X509\");\n    InputStream pemInput = new ByteArrayInputStream(pem.getBytes());\n    return (X509Certificate) cf.generateCertificate(pemInput);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8468, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 704, "focalAPIEnd": 725, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [679], "useEnd": [726], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/willemv/js-test-driver/tree/master/JsTestDriver/src-test/com/google/jstestdriver/config/PathResolverTest.java", "rawCode": "  public void testParseConfigFileAndHaveListOfFilesWithTests() throws Exception {\n    File codeDir = createTmpSubDir(\"code\", tmpDirs.iterator().next());\n    File testDir = createTmpSubDir(\"test\", tmpDirs.iterator().next());\n    createTmpFile(codeDir, \"code.js\");\n    createTmpFile(codeDir, \"code2.js\");\n    createTmpFile(testDir, \"test.js\");\n    createTmpFile(testDir, \"test2.js\");\n    createTmpFile(testDir, \"test3.js\");\n\n    String configFile =\n        \"load:\\n\"\n            + \" - code/*.js\\n\"\n            + \"test:\\n\"\n            + \" - test/*.js\\n\"\n            + \"exclude:\\n\"\n            + \" - code/code2.js\\n\"\n            + \" - test/test2.js\";\n    ByteArrayInputStream bais = new ByteArrayInputStream(configFile.getBytes());\n    ConfigurationParser parser = new YamlParser();\n\n    Configuration config =\n        parser\n            .parse(new InputStreamReader(bais), null)\n            .resolvePaths(\n                new PathResolver(\n                    tmpDirs,\n                    Collections.<FileParsePostProcessor>emptySet(),\n                    new DisplayPathSanitizer()),\n                createFlags());\n\n    Set<FileInfo> files = config.getFilesList();\n    List<FileInfo> listFiles = Lists.newArrayList(files);\n\n    assertEquals(1, files.size());\n    assertTrue(\n        listFiles.get(0).getFilePath().replace(File.separatorChar, '/').endsWith(\"code/code.js\"));\n\n    List<FileInfo> tests = config.getTests();\n    assertEquals(\n        new File(tmpDirs.iterator().next(), \"test/test.js\").getAbsolutePath(),\n        tests.get(0).getFilePath());\n    assertEquals(\"test/test.js\", tests.get(0).getDisplayPath());\n    assertEquals(\n        new File(tmpDirs.iterator().next(), \"test/test3.js\").getAbsolutePath(),\n        tests.get(1).getFilePath());\n    assertEquals(\"test/test3.js\", tests.get(1).getDisplayPath());\n  }\n"}, {"dataset": "getBytes", "exampleID": 8469, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 326, "focalAPIEnd": 338, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decodeWebSafe(byteArray,int,*)"], "useStart": [351], "useEnd": [388], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alexhwu/ProjectTimer/tree/master/src/com/cooltofu/util/Base64.java", "rawCode": "  /**\n   * Decodes data from web safe Base64 notation. Web safe encoding uses '-' instead of '+', '_'\n   * instead of '/'\n   *\n   * @param s the string to decode (decoded in default encoding)\n   * @return the decoded data\n   */\n  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {\n    byte[] bytes = s.getBytes();\n    return decodeWebSafe(bytes, 0, bytes.length);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8470, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 194, "focalAPIEnd": 208, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [169], "useEnd": [209], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/suntinghui/LinkedInApp4Android/tree/master/src/com/hmd/util/FileAccess.java", "rawCode": "  /**\n   * String --> InputStream\n   *\n   * @param str\n   * @return\n   */\n  public static InputStream String2InputStream(String str) {\n    ByteArrayInputStream stream = new ByteArrayInputStream(str.getBytes());\n    return stream;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8471, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(String)"], "tryExpressionStart": 109, "tryExpressionEnd": 113, "tryBlockStart": 109, "tryBlockEnd": 277, "catchExpressionStart": 169, "catchExpressionEnd": 208, "catchBlockStart": 169, "catchBlockEnd": 277, "exceptionHandlingCallStart": [222], "exceptionHandlingCallEnd": [270], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 128, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwabuchiken/freemind/tree/master/freemind/freemind/main/Tools.java", "rawCode": "  /** */\n  public static byte[] uTF8StringToByteArray(String uncompressedData) {\n    // Code using utf-8\n    try {\n      return uncompressedData.getBytes(\"UTF8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(\"UTF8 packing not allowed\");\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8472, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 524, "focalAPIEnd": 565, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [514], "useEnd": [566], "hasFinally": 1, "cleanUpCall": ["Base64.OutputStream.close()"], "finallyExpressionStart": 702, "finallyExpressionEnd": 710, "finallyBlockStart": 702, "finallyBlockEnd": 788, "cleanUpCallStart": [732], "cleanUpCallEnd": [743], "url": "https://github.com/zewt/smack/tree/master/source/org/jivesoftware/smack/util/Base64.java", "rawCode": "  /**\n   * Convenience method for decoding data to a file.\n   *\n   * @param dataToDecode Base64-encoded data as a string\n   * @param filename Filename for saving decoded data\n   * @return <tt>true</tt> if successful, <tt>false</tt> otherwise\n   * @since 2.1\n   */\n  public static boolean decodeToFile(String dataToDecode, String filename) {\n    boolean success = false;\n    Base64.OutputStream bos = null;\n    try {\n      bos = new Base64.OutputStream(new java.io.FileOutputStream(filename), Base64.DECODE);\n      bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));\n      success = true;\n    } // end try\n    catch (java.io.IOException e) {\n      success = false;\n    } // end catch: IOException\n    finally {\n      try {\n        bos.close();\n      } catch (Exception e) {\n      }\n    } // end finally\n\n    return success;\n  } // end decodeToFile\n"}, {"dataset": "getBytes", "exampleID": 8473, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 102, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)", "string.getBytes()", "equals(byteArray,*)"], "useStart": [77, 267, 253], "useEnd": [118, 282, 319], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sisbell/jxta/tree/master/j2se/core/src/test/java/net/jxta/endpoint/InputStreamMessageElementTest.java", "rawCode": "  public void testGetStream() throws IOException {\n\n    InputStream stream = new ByteArrayInputStream(data.getBytes());\n    MessageElement element = new InputStreamMessageElement(\"TEST\", null, stream, null);\n\n    this.assertTrue(\n        \"getStream()\", Arrays.equals(data.getBytes(), streamToBytes(element.getStream())));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8474, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 339, "focalAPIEnd": 354, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["newPipeID(*,byteArray)"], "useStart": [284], "useEnd": [355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sisbell/jxta/tree/master/j2se/tutorials/src/main/java/Examples/K_Service/_710_Astrology_Service_Example.java", "rawCode": "  public static PipeAdvertisement GetPipeAdvertisement() {\n\n    // Creating a Pipe Advertisement\n    PipeAdvertisement MyPipeAdvertisement =\n        (PipeAdvertisement)\n            AdvertisementFactory.newAdvertisement(PipeAdvertisement.getAdvertisementType());\n    PipeID MyPipeID = IDFactory.newPipeID(PeerGroupID.defaultNetPeerGroupID, Name.getBytes());\n\n    MyPipeAdvertisement.setPipeID(MyPipeID);\n    MyPipeAdvertisement.setType(PipeService.UnicastType);\n    MyPipeAdvertisement.setName(\"Astrology Service Pipe\");\n    MyPipeAdvertisement.setDescription(\"Created by \" + Name);\n\n    return MyPipeAdvertisement;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8475, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 384, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray)"], "useStart": [373], "useEnd": [414], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhanghao-py/gongyu/tree/master/src/main/java/com/umpay/mpay/SignUtil.java", "rawCode": "  private String sign(String dataToSign, byte[] privateKeyBytes)\n      throws GeneralSecurityException, IOException {\n    PKCS8EncodedKeySpec peks = new PKCS8EncodedKeySpec(privateKeyBytes);\n    KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n    PrivateKey pk = kf.generatePrivate(peks);\n\n    Signature sig = Signature.getInstance(\"SHA1withRSA\");\n    sig.initSign(pk);\n    sig.update(dataToSign.getBytes(\"gb2312\"));\n    byte[] sb = sig.sign();\n\n    BASE64Encoder base64 = new BASE64Encoder();\n    String b64Str = base64.encode(sb);\n    BufferedReader br = new BufferedReader(new StringReader(b64Str));\n    String tmpStr = \"\";\n    String tmpStr1 = \"\";\n    while ((tmpStr = br.readLine()) != null) {\n      tmpStr1 = tmpStr1 + tmpStr;\n    }\n    b64Str = tmpStr1;\n    return b64Str;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8476, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.length()"], "configurationStart": [675], "configurationEnd": [688], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 709, "focalAPIEnd": 724, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [695], "useEnd": [725], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bmcdorman/CBCJVM/tree/master/eclipse/src/cbcdownloader/USBDownloader.java", "rawCode": "  private static boolean sendFile(OutputStream out, InputStream in, File file, String path)\n      throws IOException {\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\n    DataOutputStream dStream = new DataOutputStream(stream);\n\n    FileInputStream fIn = new FileInputStream(file);\n    ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n    byte[] buff = new byte[512];\n    int len = 0;\n    while ((len = fIn.read(buff)) != -1) bOut.write(buff, 0, len);\n\n    byte[] fileData = bOut.toByteArray();\n\n    System.out.println(new String());\n\n    dStream.writeByte(3);\n    dStream.writeShort(2 + path.length() + 2 + fileData.length);\n\n    dStream.writeShort(path.length());\n    dStream.write(path.getBytes());\n\n    dStream.writeShort(bOut.toByteArray().length);\n    dStream.write(bOut.toByteArray());\n\n    new Packet(stream.toByteArray()).write(out, in);\n\n    return true;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8477, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 242, "focalAPIEnd": 256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [230], "useEnd": [257], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/table/src/main/uk/ac/starlink/table/formats/HTMLTableWriter.java", "rawCode": "  /**\n   * Outputs a line of text, terminated by a newline, to a stream.\n   *\n   * @param ostrm output stream\n   * @param str string to write\n   */\n  private void printLine(OutputStream ostrm, String str) throws IOException {\n    ostrm.write(str.getBytes());\n    ostrm.write((int) '\\n');\n  }\n"}, {"dataset": "getBytes", "exampleID": 8478, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 872, "focalAPIEnd": 893, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [847], "useEnd": [894], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/macarthy/js-test-driver-qunit/tree/master/JsTestDriver/src-test/com/google/jstestdriver/ConfigurationParserTest.java", "rawCode": "  public void testParsePlugins() {\n    List<Plugin> expected =\n        new LinkedList<Plugin>(\n            Arrays.asList(\n                new Plugin(\n                    \"test\", \"pathtojar\", \"com.test.PluginModule\", Lists.<String>newArrayList()),\n                new Plugin(\n                    \"test2\",\n                    \"pathtojar2\",\n                    \"com.test.PluginModule2\",\n                    Lists.<String>newArrayList(\"hello\", \"world\", \"some/file.js\"))));\n    String configFile =\n        \"plugin:\\n\"\n            + \" - name: test\\n\"\n            + \" jar: \\\"pathtojar\\\"\\n\"\n            + \" module: \\\"com.test.PluginModule\\\"\\n\"\n            + \" - name: test2\\n\"\n            + \" jar: \\\"pathtojar2\\\"\\n\"\n            + \" module: \\\"com.test.PluginModule2\\\"\\n\"\n            + \" args: hello, world, some/file.js\\n\";\n    ByteArrayInputStream bais = new ByteArrayInputStream(configFile.getBytes());\n    ConfigurationParser parser =\n        new ConfigurationParser(null, new InputStreamReader(bais), new DefaultPathRewriter());\n\n    parser.parse();\n    List<Plugin> plugins = parser.getPlugins();\n\n    assertEquals(2, plugins.size());\n    assertEquals(expected, plugins);\n    assertEquals(0, plugins.get(0).getArgs().size());\n    assertEquals(3, plugins.get(1).getArgs().size());\n  }\n"}, {"dataset": "getBytes", "exampleID": 8479, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 132, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["create(String,byteArray,List<ACL>,*)", "assertEquals(string,*)", "string.getBytes()", "create(String,byteArray,List<ACL>,*)", "assertEquals(string,*)"], "useStart": [100, 355, 701, 669, 753], "useEnd": [176, 399, 716, 745, 797], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/twitter/commons/tree/master/tests/java/com/twitter/common/zookeeper/ZooKeeperNodeTest.java", "rawCode": "    @Test\n    public void testRemoveNode() throws Exception {\n      String data = \"testdata\";\n      zkClient.get().create(nodePath, data.getBytes(), ACL, CreateMode.PERSISTENT);\n      Listener<String> listener = new Listener<String>();\n      TestDeserializer deserializer = new TestDeserializer();\n      makeNode(deserializer, nodePath, listener);\n\n      assertEquals(data, listener.waitForUpdate());\n      assertNotNull(deserializer.getStat());\n      assertEquals(0, deserializer.getStat().getVersion());\n\n      zkClient.get().delete(nodePath, -1);\n      assertEquals(null, listener.waitForUpdate());\n      assertEquals(0, deserializer.getStat().getVersion());\n\n      zkClient.get().create(nodePath, data.getBytes(), ACL, CreateMode.PERSISTENT);\n      assertEquals(data, listener.waitForUpdate());\n      assertEquals(0, deserializer.getStat().getVersion());\n    }\n"}, {"dataset": "getBytes", "exampleID": 8480, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 795, "focalAPIEnd": 816, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [770], "useEnd": [817], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/willemv/js-test-driver/tree/master/JsTestDriver/src-test/com/google/jstestdriver/config/PathResolverTest.java", "rawCode": "  public void testParseConfigFileAndHaveListOfFilesWithPatches() throws Exception {\n    File codeDir = createTmpSubDir(\"code\", tmpDirs.iterator().next());\n    File testDir = createTmpSubDir(\"test\", tmpDirs.iterator().next());\n    createTmpFile(codeDir, \"code.js\");\n    createTmpFile(codeDir, \"code2.js\");\n    createTmpFile(codeDir, \"patch.js\");\n    createTmpFile(testDir, \"test.js\");\n    createTmpFile(testDir, \"test2.js\");\n    createTmpFile(testDir, \"test3.js\");\n\n    String configFile =\n        \"load:\\n\"\n            + \"- code/code.js\\n\"\n            + \"- patch code/patch.js\\n\"\n            + \"- code/code2.js\\n\"\n            + \"- test/*.js\\n\"\n            + \"exclude:\\n\"\n            + \"- code/code2.js\\n\"\n            + \"- test/test2.js\";\n    ByteArrayInputStream bais = new ByteArrayInputStream(configFile.getBytes());\n    ConfigurationParser parser = new YamlParser();\n\n    Configuration config =\n        parser\n            .parse(new InputStreamReader(bais), null)\n            .resolvePaths(\n                new PathResolver(\n                    tmpDirs,\n                    Collections.<FileParsePostProcessor>emptySet(),\n                    new DisplayPathSanitizer()),\n                createFlags());\n    Set<FileInfo> files = config.getFilesList();\n    List<FileInfo> listFiles = new ArrayList<FileInfo>(files);\n\n    assertEquals(3, files.size());\n    assertTrue(\n        listFiles.get(0).getFilePath().replace(File.separatorChar, '/').endsWith(\"code/code.js\"));\n    assertTrue(\n        listFiles.get(1).getFilePath().replace(File.separatorChar, '/').endsWith(\"test/test.js\"));\n    assertTrue(\n        listFiles.get(2).getFilePath().replace(File.separatorChar, '/').endsWith(\"test/test3.js\"));\n    assertTrue(\n        listFiles\n            .get(0)\n            .getPatches()\n            .get(0)\n            .getFilePath()\n            .replace(File.separatorChar, '/')\n            .endsWith(\"code/patch.js\"));\n  }\n"}, {"dataset": "getBytes", "exampleID": 8481, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 55, "tryExpressionEnd": 59, "tryBlockStart": 55, "tryBlockEnd": 186, "catchExpressionStart": 103, "catchExpressionEnd": 142, "catchBlockStart": 103, "catchBlockEnd": 186, "exceptionHandlingCallStart": [156], "exceptionHandlingCallEnd": [179], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 74, "focalAPIEnd": 95, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gerritjvv/SimpleSQL/tree/master/parser/src/main/java/org/simplesql/util/Bytes.java", "rawCode": "  public static final byte[] toBytes(String str) {\n    try {\n      return str.getBytes(\"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8482, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 200, "focalAPIEnd": 215, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["decode(byteArray)"], "useStart": [186], "useEnd": [216], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brachior/platform_libcore/tree/master/luni/src/test/java/tests/api/javax/net/ssl/HandshakeCompletedEventTest.java", "rawCode": "  /** Loads a keystore from a base64-encoded String. Returns the KeyManager[] for the result. */\n  private KeyManager[] getKeyManagers(String keys) throws Exception {\n    byte[] bytes = Base64.decode(keys.getBytes());\n    InputStream inputStream = new ByteArrayInputStream(bytes);\n\n    KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n    keyStore.load(inputStream, PASSWORD.toCharArray());\n    inputStream.close();\n\n    String algorithm = KeyManagerFactory.getDefaultAlgorithm();\n    KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(algorithm);\n    keyManagerFactory.init(keyStore, PASSWORD.toCharArray());\n\n    return keyManagerFactory.getKeyManagers();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8483, "initialization": ["String string = ResultSet.getString(String)"], "initializationStart": [316], "initializationEnd": [344], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 408, "focalAPIEnd": 427, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [383], "useEnd": [428], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tulskiy/musique/tree/master/dependencies/last.fm-bindings/src/main/java/de/umass/lastfm/cache/DatabaseCache.java", "rawCode": "  public InputStream load(String cacheEntryName) {\n    try {\n      PreparedStatement stmt =\n          conn.prepareStatement(\"SELECT response FROM \" + TABLE_NAME + \" WHERE key = ?;\");\n      stmt.setString(1, cacheEntryName);\n      ResultSet result = stmt.executeQuery();\n      if (result.next()) {\n        String s = result.getString(\"response\");\n        stmt.close();\n        return new ByteArrayInputStream(s.getBytes(\"UTF-8\"));\n      }\n      stmt.close();\n    } catch (SQLException e) {\n      // ignore\n    } catch (UnsupportedEncodingException e) {\n      // won't happen\n    }\n    return null;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8484, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 338, "focalAPIEnd": 361, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeRawBytes(byteArray)"], "useStart": [403], "useEnd": [423], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BSVino/DoubleAction/tree/master/mp/src/thirdparty/protobuf-2.3.0/java/src/main/java/com/google/protobuf/CodedOutputStream.java", "rawCode": "  /** Write a {@code string} field to the stream. */\n  public void writeStringNoTag(final String value) throws IOException {\n    // Unfortunately there does not appear to be any way to tell Java to encode\n    // UTF-8 directly into our buffer, so we have to let it create its own byte\n    // array and then copy.\n    final byte[] bytes = value.getBytes(\"UTF-8\");\n    writeRawVarint32(bytes.length);\n    writeRawBytes(bytes);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8485, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 89, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray,int,*)"], "useStart": [143], "useEnd": [167], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/GargoyleSoftware/volley/tree/master/src/com/android/volley/toolbox/DiskBasedCache.java", "rawCode": "  static void writeString(OutputStream os, String s) throws IOException {\n    byte[] b = s.getBytes(\"UTF-8\");\n    writeLong(os, b.length);\n    os.write(b, 0, b.length);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8486, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 459, "focalAPIEnd": 480, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["offer(byteArray)", "assertEquals(*,string)"], "useStart": [437, 541], "useEnd": [481, 592], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benh/twesos/tree/master/third_party/zookeeper-3.3.1/recipes/queue/test/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java", "rawCode": "  public void testOffer1() throws Exception {\n    String dir = \"/testOffer1\";\n    String testString = \"Hello World\";\n    final int num_clients = 1;\n    ZooKeeper clients[] = new ZooKeeper[num_clients];\n    DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n    for (int i = 0; i < clients.length; i++) {\n      clients[i] = createClient();\n      queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n    }\n\n    queueHandles[0].offer(testString.getBytes());\n\n    byte dequeuedBytes[] = queueHandles[0].remove();\n    assertEquals(new String(dequeuedBytes), testString);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8487, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 459, "focalAPIEnd": 480, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["offer(byteArray)", "assertEquals(*,string)"], "useStart": [437, 541], "useEnd": [481, 592], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benh/twesos/tree/master/third_party/zookeeper-3.3.1/recipes/queue/test/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java", "rawCode": "  public void testOffer2() throws Exception {\n    String dir = \"/testOffer2\";\n    String testString = \"Hello World\";\n    final int num_clients = 2;\n    ZooKeeper clients[] = new ZooKeeper[num_clients];\n    DistributedQueue queueHandles[] = new DistributedQueue[num_clients];\n    for (int i = 0; i < clients.length; i++) {\n      clients[i] = createClient();\n      queueHandles[i] = new DistributedQueue(clients[i], dir, null);\n    }\n\n    queueHandles[0].offer(testString.getBytes());\n\n    byte dequeuedBytes[] = queueHandles[1].remove();\n    assertEquals(new String(dequeuedBytes), testString);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8488, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["escapeResourceName(String)", "toString()", "Log.warn(String)"], "tryExpressionStart": 1056, "tryExpressionEnd": 1060, "tryBlockStart": 1056, "tryBlockEnd": 1751, "catchExpressionStart": 1482, "catchExpressionEnd": 1504, "catchBlockStart": 1482, "catchBlockEnd": 1751, "exceptionHandlingCallStart": [1651, 1727, 1514], "exceptionHandlingCallEnd": [1684, 1741, 1742], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 1295, "focalAPIEnd": 1309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sakai-mirror/content/tree/master/content-tool/tool/src/java/org/sakaiproject/content/tool/AttachmentAction.java", "rawCode": "  /** Handle the eventSubmit_doAdd command to add attachments. */\n  public static void doAdd(RunData data) {\n    if (!\"POST\".equals(data.getRequest().getMethod())) {\n      return;\n    }\n\n    SessionState state =\n        ((JetspeedRunData) data).getPortletSessionState(((JetspeedRunData) data).getJs_peid());\n\n    // add to the attachments vector\n    Vector attachments = (Vector) state.getAttribute(STATE_ATTACHMENTS);\n\n    // see if the user entered a url to add\n    String url = data.getParameters().getString(\"url\");\n    if (url != null) url = url.trim();\n    if ((url != null) && (url.length() > 0)) {\n      // if it's missing the transport, add http://\n      if (url.indexOf(\"://\") == -1) url = \"http://\" + url;\n\n      // make a set of properties to add for the new resource\n      ResourcePropertiesEdit props = ContentHostingService.newResourceProperties();\n      props.addProperty(ResourceProperties.PROP_DISPLAY_NAME, url);\n      props.addProperty(ResourceProperties.PROP_DESCRIPTION, url);\n\n      // make an attachment resource for this URL\n      try {\n        ContentResource attachment =\n            ContentHostingService.addAttachmentResource(\n                Validator.escapeResourceName(url), // use the url as the name\n                ResourceProperties.TYPE_URL,\n                url.getBytes(),\n                props);\n\n        // add a dereferencer for this to the attachments\n        attachments.add(EntityManager.newReference(attachment.getReference()));\n      } catch (Exception any) {\n        M_log.warn(\n            \"AttachmentAction\"\n                + \".doAdd: exception adding attachment resource (urlName: \"\n                + Validator.escapeResourceName(url)\n                + \"): \"\n                + any.toString());\n      }\n    } // if ((url != null) && (url.length() > 0))\n\n    // see if the user uploaded a file\n    FileItem file = data.getParameters().getFileItem(\"file\");\n    if (file != null) {\n      // the file content byte[]\n      byte[] in = file.get();\n\n      // the content type\n      String contentType = file.getContentType();\n\n      // the file name - as reported by the browser\n      String browserFileName = file.getFileName();\n\n      // we just want the file name part - strip off any drive and path stuff\n      String name = Validator.getFileName(browserFileName);\n      String resourceId = Validator.escapeResourceName(name);\n\n      // make a set of properties to add for the new resource\n      ResourcePropertiesEdit props = ContentHostingService.newResourceProperties();\n      props.addProperty(ResourceProperties.PROP_DISPLAY_NAME, name);\n      props.addProperty(ResourceProperties.PROP_DESCRIPTION, browserFileName);\n\n      // make an attachment resource for this URL\n      try {\n        ContentResource attachment =\n            ContentHostingService.addAttachmentResource(resourceId, contentType, in, props);\n\n        // add a dereferencer for this to the attachments\n        attachments.add(EntityManager.newReference(attachment.getReference()));\n      } catch (Exception any) {\n        M_log.warn(\n            \"AttachmentAction\"\n                + \".doAdd: exception adding attachment resource (fileName: \"\n                + name\n                + \"): \"\n                + any.toString());\n      }\n    } // if (file!= null)\n\n    // if there is at least one attachment\n    if (attachments.size() > 0) {\n      state.setAttribute(STATE_HAS_ATTACHMENT_BEFORE, Boolean.TRUE);\n    }\n\n    // end up in main mode\n    state.setAttribute(STATE_MODE, MODE_MAIN);\n  } // doAdd\n"}, {"dataset": "getBytes", "exampleID": 8489, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["new AssertionError(*)"], "tryExpressionStart": 115, "tryExpressionEnd": 119, "tryBlockStart": 115, "tryBlockEnd": 464, "catchExpressionStart": 305, "catchExpressionEnd": 340, "catchBlockStart": 305, "catchBlockEnd": 382, "exceptionHandlingCallStart": [354], "exceptionHandlingCallEnd": [375], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 236, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["digest(byteArray)"], "useStart": [215], "useEnd": [256], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/polyvi/xface-android/tree/master/framework/src/com/squareup/okhttp/internal/Util.java", "rawCode": "  /** Returns a 32 character string containing a hash of {@code s}. */\n  public static String hash(String s) {\n    try {\n      MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n      byte[] md5bytes = messageDigest.digest(s.getBytes(\"UTF-8\"));\n      return bytesToHexString(md5bytes);\n    } catch (NoSuchAlgorithmException e) {\n      throw new AssertionError(e);\n    } catch (UnsupportedEncodingException e) {\n      throw new AssertionError(e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8490, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 109, "focalAPIEnd": 130, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ByteArrayInputStream(byteArray)"], "useStart": [153], "useEnd": [184], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/platform-infrastructure/security/SecurityServices/src/main/java/org/societies/security/digsig/util/StreamUtil.java", "rawCode": "  public static InputStream str2stream(String str) throws UnsupportedEncodingException {\n\n    byte[] bytes = str.getBytes(\"UTF-8\");\n    InputStream is = new ByteArrayInputStream(bytes);\n\n    return is;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8491, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.length()"], "configurationStart": [587], "configurationEnd": [604], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 636, "focalAPIEnd": 655, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["write(byteArray)"], "useStart": [617], "useEnd": [656], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 1010, "finallyExpressionEnd": 1018, "finallyBlockStart": 1010, "finallyBlockEnd": 1060, "cleanUpCallStart": [1030], "cleanUpCallEnd": [1049], "url": "https://github.com/rhunter/jscoverage/tree/master/selenium/src/Server.java", "rawCode": "  public void handle(HttpExchange exchange) throws IOException {\n    try {\n      String method = exchange.getRequestMethod();\n      URI uri = exchange.getRequestURI();\n      String protocol = exchange.getProtocol();\n      System.out.println(method + \" \" + uri + \" \" + protocol);\n\n      OutputStream outputStream = exchange.getResponseBody();\n      try {\n        InputStream inputStream;\n        try {\n          inputStream = new FileInputStream(path + uri.getPath());\n        } catch (IOException e) {\n          String response = \"Not found\";\n          exchange.sendResponseHeaders(404, response.length());\n          outputStream.write(response.getBytes());\n          return;\n        }\n\n        try {\n          exchange.sendResponseHeaders(200, 0);\n          byte[] bytes = new byte[8192];\n          for (; ; ) {\n            int bytesRead = inputStream.read(bytes);\n            if (bytesRead <= 0) {\n              break;\n            }\n            outputStream.write(bytes, 0, bytesRead);\n          }\n        } finally {\n          inputStream.close();\n        }\n      } finally {\n        outputStream.close();\n      }\n    } finally {\n      exchange.close();\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8492, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["e(String,String)"], "tryExpressionStart": 482, "tryExpressionEnd": 486, "tryBlockStart": 482, "tryBlockEnd": 1118, "catchExpressionStart": 778, "catchExpressionEnd": 813, "catchBlockStart": 778, "catchBlockEnd": 867, "exceptionHandlingCallStart": [821], "exceptionHandlingCallEnd": [860], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 594, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray)"], "useStart": [583], "useEnd": [616], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heskew-riotapps/WordSmash/tree/master/src/com/riotapps/word/billing/Security.java", "rawCode": "  /**\n   * Verifies that the signature from the server matches the computed signature on the data. Returns\n   * true if the data is correctly signed.\n   *\n   * @param publicKey public key associated with the developer account\n   * @param signedData signed data from server\n   * @param signature server signature\n   * @return true if the data and signature match\n   */\n  public static boolean verify(PublicKey publicKey, String signedData, String signature) {\n    Signature sig;\n    try {\n      sig = Signature.getInstance(SIGNATURE_ALGORITHM);\n      sig.initVerify(publicKey);\n      sig.update(signedData.getBytes());\n      if (!sig.verify(Base64.decode(signature))) {\n        Log.e(TAG, \"Signature verification failed.\");\n        return false;\n      }\n      return true;\n    } catch (NoSuchAlgorithmException e) {\n      Log.e(TAG, \"NoSuchAlgorithmException.\");\n    } catch (InvalidKeyException e) {\n      Log.e(TAG, \"Invalid key specification.\");\n    } catch (SignatureException e) {\n      Log.e(TAG, \"Signature exception.\");\n    } catch (Base64DecoderException e) {\n      Log.e(TAG, \"Base64 decoding failed.\");\n    }\n    return false;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8493, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": -3942, "focalAPIEnd": -3915, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeFragments(byteArray,int[],StringBuilder,OutputStream)"], "useStart": [757], "useEnd": [799], "hasFinally": 1, "cleanUpCall": ["Socket.close()"], "finallyExpressionStart": 1009, "finallyExpressionEnd": 1017, "finallyBlockStart": 1009, "finallyBlockEnd": 1050, "cleanUpCallStart": [1027], "cleanUpCallEnd": [1041], "url": "https://github.com/jetty-project/jetty-plugin-support/tree/master/jetty-server/src/test/java/org/eclipse/jetty/server/HttpServerTestBase.java", "rawCode": "  @Test\n  public void testRequest2Fragments() throws Exception {\n    configureServer(new EchoHandler());\n\n    byte[] bytes = REQUEST2.getBytes();\n    final int pointCount = 2;\n    Random random = new Random(System.currentTimeMillis());\n    for (int i = 0; i < LOOPS; i++) {\n      int[] points = new int[pointCount];\n      StringBuilder message = new StringBuilder();\n\n      message.append(\"iteration #\").append(i + 1);\n\n      // Pick fragment points at random\n      for (int j = 0; j < points.length; ++j) {\n        points[j] = random.nextInt(bytes.length);\n      }\n\n      // Sort the list\n      Arrays.sort(points);\n\n      Socket client = newSocket(HOST, _connector.getLocalPort());\n      try {\n        OutputStream os = client.getOutputStream();\n\n        writeFragments(bytes, points, message, os);\n\n        // Read the response\n        String response = readResponse(client);\n\n        // Check the response\n        assertEquals(\"response for \" + i + \" \" + message.toString(), RESPONSE2, response);\n      } finally {\n        client.close();\n      }\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8494, "initialization": ["String string = buildMsg(String,String)"], "initializationStart": [411], "initializationEnd": [432], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 685, "focalAPIEnd": 699, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new DatagramPacket(byteArray,*,InetAddress,int)"], "useStart": [666], "useEnd": [738], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UniversalMediaServer/UniversalMediaServer/tree/master/src/main/java/net/pms/network/UPNPHelper.java", "rawCode": "  /**\n   * Send the provided message to the socket.\n   *\n   * @param socket the socket\n   * @param nt the nt\n   * @param message the message\n   * @param sendOnce send the message only once\n   * @throws IOException Signals that an I/O exception has occurred.\n   */\n  private static void sendMessage(\n      DatagramSocket socket, String nt, String message, boolean sendOnce) throws IOException {\n    String msg = buildMsg(nt, message);\n    Random rand = new Random();\n\n    // LOGGER.trace( \"Sending this SSDP packet: \" + CRLF + StringUtils.replace(msg, CRLF,\n    // \"<CRLF>\")));\n\n    InetAddress upnpAddress = getUPNPAddress();\n    DatagramPacket ssdpPacket =\n        new DatagramPacket(msg.getBytes(), msg.length(), upnpAddress, UPNP_PORT);\n\n    /**\n     * Requirement [7.2.4.1]: UPnP endpoints (devices and control points) should wait a random\n     * amount of time, between 0 and 100 milliseconds after acquiring a new IP address, before\n     * sending advertisements or initiating searches on a new IP interface.\n     */\n    sleep(rand.nextInt(101));\n    socket.send(ssdpPacket);\n\n    // Send the message three times as recommended by the standard\n    if (!sendOnce) {\n      sleep(100);\n      socket.send(ssdpPacket);\n      sleep(100);\n      socket.send(ssdpPacket);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8495, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "UnsupportedEncodingException", "exceptionHandlingCall": ["new UnsupportedEncodingException()"], "tryExpressionStart": 627, "tryExpressionEnd": 631, "tryBlockStart": 627, "tryBlockEnd": 780, "catchExpressionStart": 682, "catchExpressionEnd": 725, "catchBlockStart": 682, "catchBlockEnd": 780, "exceptionHandlingCallStart": [739], "exceptionHandlingCallEnd": [773], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null)", "guardType": "IF {", "guardExpressionStart": 515, "guardExpressionEnd": 536, "guardBlockStart": 515, "guardBlockEnd": 563, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 648, "focalAPIEnd": 674, "followUpCheck": "byteArray", "checkType": "LOOP {", "followUpCheckExpressionStart": 842, "followUpCheckExpressionEnd": 867, "followUpCheckBlockStart": 842, "followUpCheckBlockEnd": 1266, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/visit/spark-svn-mirror/tree/master/src/java/org/jivesoftware/spark/util/StringUtils.java", "rawCode": "  /**\n   * Encodes URI string. This is a replacement for the java.net.URLEncode#encode(String, String)\n   * class which is broken under JDK 1.3.\n   *\n   * @param original the original character sequence\n   * @param charset the protocol charset\n   * @return URI character sequence\n   * @throws UnsupportedEncodingException unsupported character encoding\n   */\n  public static String URLEncode(String original, String charset)\n      throws UnsupportedEncodingException {\n    // encode original to uri characters.\n    if (original == null) {\n      return null;\n    }\n    // escape octet to uri characters.\n    byte[] octets;\n\n    try {\n      octets = original.getBytes(charset);\n    } catch (UnsupportedEncodingException error) {\n      throw new UnsupportedEncodingException();\n    }\n\n    StringBuffer buf = new StringBuffer(octets.length);\n    for (byte octet : octets) {\n      char c = (char) octet;\n      if (allowed_query.get(c)) {\n        buf.append(c);\n      } else {\n        buf.append('%');\n        char hexadecimal = Character.forDigit((octet >> 4) & 0xF, 16);\n        buf.append(Character.toUpperCase(hexadecimal)); // high\n        hexadecimal = Character.forDigit(octet & 0xF, 16);\n        buf.append(Character.toUpperCase(hexadecimal)); // low\n      }\n    }\n\n    return buf.toString();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8496, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 179, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["OutputStream.write(byteArray)", "OutputStream.write(byteArray)", "new CMSProcessableByteArray(byteArray)", "new ByteArrayInputStream(byteArray)"], "useStart": [650, 1099, 1456, 1808], "useEnd": [668, 1117, 1489, 1838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sake/bouncycastle-java/tree/master/test/jdk1.3/org/bouncycastle/cms/test/SignedDataStreamTest.java", "rawCode": "  public void testSignerStoreReplacement() throws Exception {\n    List certList = new ArrayList();\n    ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n    byte[] data = TEST_MESSAGE.getBytes();\n\n    certList.add(_origCert);\n    certList.add(_signCert);\n\n    CertStore certs =\n        CertStore.getInstance(\"Collection\", new CollectionCertStoreParameters(certList), BC);\n\n    CMSSignedDataStreamGenerator gen = new CMSSignedDataStreamGenerator();\n\n    gen.addSigner(_origKP.getPrivate(), _origCert, CMSSignedDataStreamGenerator.DIGEST_SHA1, BC);\n\n    gen.addCertificatesAndCRLs(certs);\n\n    OutputStream sigOut = gen.open(bOut, false);\n\n    sigOut.write(data);\n\n    sigOut.close();\n\n    checkSigParseable(bOut.toByteArray());\n\n    //\n    // create new Signer\n    //\n    ByteArrayInputStream original = new ByteArrayInputStream(bOut.toByteArray());\n\n    bOut.reset();\n\n    gen = new CMSSignedDataStreamGenerator();\n\n    gen.addSigner(_origKP.getPrivate(), _origCert, CMSSignedDataStreamGenerator.DIGEST_SHA224, BC);\n\n    gen.addCertificatesAndCRLs(certs);\n\n    sigOut = gen.open(bOut);\n\n    sigOut.write(data);\n\n    sigOut.close();\n\n    checkSigParseable(bOut.toByteArray());\n\n    CMSSignedData sd = new CMSSignedData(bOut.toByteArray());\n\n    //\n    // replace signer\n    //\n    ByteArrayOutputStream newOut = new ByteArrayOutputStream();\n\n    CMSSignedDataParser.replaceSigners(original, sd.getSignerInfos(), newOut);\n\n    sd = new CMSSignedData(new CMSProcessableByteArray(data), newOut.toByteArray());\n    SignerInformation signer =\n        (SignerInformation) sd.getSignerInfos().getSigners().iterator().next();\n\n    assertEquals(signer.getDigestAlgOID(), CMSSignedDataStreamGenerator.DIGEST_SHA224);\n\n    CMSSignedDataParser sp =\n        new CMSSignedDataParser(\n            new CMSTypedStream(new ByteArrayInputStream(data)), newOut.toByteArray());\n\n    sp.getSignedContent().drain();\n\n    verifySignatures(sp);\n  }\n"}, {"dataset": "getBytes", "exampleID": 8497, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 304, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["update(byteArray,int,*)"], "useStart": [290], "useEnd": [332], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/projeto-coruja/Profetas-Coruja/tree/master/Profetas/src/main/java/business/bean/util/EJBUtility.java", "rawCode": "  private static byte[] genHash(String s, String algorithm) throws NoSuchAlgorithmException {\n    if (algorithm.isEmpty()) {\n      throw new NoSuchAlgorithmException(\"Nenhum algoritmo passado\");\n    }\n    MessageDigest digest = MessageDigest.getInstance(algorithm);\n    digest.reset();\n    digest.update(s.getBytes(), 0, s.length());\n    return digest.digest();\n  }\n"}, {"dataset": "getBytes", "exampleID": 8498, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string.length()!=16)", "guardType": "IF {", "guardExpressionStart": 58, "guardExpressionEnd": 81, "guardBlockStart": 58, "guardBlockEnd": 109, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 126, "focalAPIEnd": 140, "followUpCheck": "byteArray[8] != 'T'", "checkType": "IF", "followUpCheckExpressionStart": 147, "followUpCheckExpressionEnd": 163, "followUpCheckBlockStart": 147, "followUpCheckBlockEnd": 191, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Bedework/bw-caldav/tree/master/bw-caldav-util/src/main/java/org/bedework/caldav/util/ParseUtil.java", "rawCode": "  private static boolean checkUTC(final String val) {\n    if (val.length() != 16) {\n      return false;\n    }\n\n    byte[] b = val.getBytes();\n\n    if (b[8] != 'T') {\n      return false;\n    }\n\n    if (b[15] != 'Z') {\n      return false;\n    }\n\n    // Parser will fail anything else.\n\n    return true;\n  }\n"}, {"dataset": "getBytes", "exampleID": 8499, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new WebserverSystemException(*)"], "tryExpressionStart": 2196, "tryExpressionEnd": 2200, "tryBlockStart": 2196, "tryBlockEnd": 2876, "catchExpressionStart": 2798, "catchExpressionEnd": 2824, "catchBlockStart": 2798, "catchBlockEnd": 2876, "exceptionHandlingCallStart": [2838], "exceptionHandlingCallEnd": [2869], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes(charsetName)", "focalAPIStart": 2702, "focalAPIEnd": 2754, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/crh/escidoc-core-1.4/tree/master/common/src/main/java/de/escidoc/core/common/business/fedora/resources/GenericVersionableResource.java", "rawCode": "  /**\n   * Update Version History (WOV) with new event entry.\n   *\n   * @param versionNo Number of version which is updated (mostly the latest, but not ever!) If null\n   *     the latest version is updated.\n   * @param timestamp The timestamp which is to write to WOV\n   * @param newEventEntry The event entry XML representation.\n   * @throws FedoraSystemException If Fedora reports an error.\n   * @throws WebserverSystemException In case of an internal error.\n   */\n  protected void writeEventToWov(\n      final String versionNo, final DateTime timestamp, final String newEventEntry)\n      throws WebserverSystemException {\n\n    /*\n     * The event entry is written with the version timestamp. But this value used to be replaced within the later\n     * persist() method when all datastreams are written.\n     *\n     * FIXME make possible that also to older versions of the resource events could be added\n     */\n\n    final StaxParser sp = new StaxParser();\n\n    final Map<String, StartElementWithChildElements> updateElementsWOV =\n        new HashMap<String, StartElementWithChildElements>();\n    // FIXME change first occurence of timestamp in version-history\n    updateElementsWOV.put(\n        TripleStoreUtility.PROP_VERSION_TIMESTAMP,\n        new StartElementWithChildElements(\n            TripleStoreUtility.PROP_VERSION_TIMESTAMP,\n            Constants.WOV_NAMESPACE_URI,\n            Constants.WOV_NAMESPACE_PREFIX,\n            null,\n            timestamp.toString(),\n            null));\n\n    final ItemRelsExtUpdateHandler ireuh = new ItemRelsExtUpdateHandler(updateElementsWOV, sp);\n    ireuh.setPath(\"/version-history/version/\");\n    sp.addHandler(ireuh);\n\n    final AddNewSubTreesToDatastream addNewSubtreesHandler =\n        new AddNewSubTreesToDatastream(\"/version-history\", sp);\n    final StartElement pointer =\n        new StartElement(\"version\", Constants.WOV_NAMESPACE_URI, \"escidocVersions\", null);\n    addNewSubtreesHandler.setPointerElement(pointer);\n    final List<StartElementWithChildElements> elementsToAdd =\n        new ArrayList<StartElementWithChildElements>();\n    addNewSubtreesHandler.setSubtreeToInsert(elementsToAdd);\n    sp.addHandler(addNewSubtreesHandler);\n\n    try {\n      sp.parse(getWov().getStream());\n      final ByteArrayOutputStream newWovStream = addNewSubtreesHandler.getOutputStreams();\n\n      final String newWovString =\n          newWovStream\n              .toString(XmlUtility.CHARACTER_ENCODING)\n              .replaceFirst(\n                  \"(<\" + Constants.WOV_NAMESPACE_PREFIX + \":events[^>]*>)\", \"$1\" + newEventEntry);\n\n      setWov(\n          new Datastream(\n              Elements.ELEMENT_WOV_VERSION_HISTORY,\n              getId(),\n              newWovString.getBytes(XmlUtility.CHARACTER_ENCODING),\n              MimeTypes.TEXT_XML));\n    } catch (final Exception e) {\n      throw new WebserverSystemException(e);\n    }\n  }\n"}, {"dataset": "getBytes", "exampleID": 8500, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "byteArray = string.getBytes()", "focalAPIStart": 100, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["encodeBytes(byteArray,boolean)"], "useStart": [88], "useEnd": [134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/tags/release-0.9.1/maverick-util/src/com/maverick/util/Base64.java", "rawCode": "  public static String encodeString(String s, boolean ignoreMaxLineLength) {\n    return encodeBytes(s.getBytes(), ignoreMaxLineLength);\n  }\n"}]