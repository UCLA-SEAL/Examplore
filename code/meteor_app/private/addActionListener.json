[{"dataset": "addActionListener", "exampleID": 3101, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [78], "initializationEnd": [98], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)", "jButton.setEnabled(boolean)", "jButton.setActionCommand(String)"], "configurationStart": [106, 169, 202], "configurationEnd": [161, 194, 236], "guardCondition": "jButton==null", "guardType": "IF {", "guardExpressionStart": 37, "guardExpressionEnd": 58, "guardBlockStart": 37, "guardBlockEnd": 326, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 244, "focalAPIEnd": 276, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setBounds(int,int,int,int)"], "useStart": [284], "useEnd": [319], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gvtools/gvtools-legacy/tree/master/extensions/extArcims/src/es/prodevelop/cit/gvsig/arcims/gui/dialogs/ArcImsPropsDialog.java", "rawCode": "  public JButton getBtnApply() {\n    if (btnApply == null) {\n      btnApply = new JButton(\"apply\");\n      btnApply.setText(PluginServices.getText(this, \"apply\"));\n      btnApply.setEnabled(true);\n      btnApply.setActionCommand(\"APPLY\");\n      btnApply.addActionListener(this);\n      btnApply.setBounds(238, 10, 90, 25);\n    }\n\n    return btnApply;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3102, "initialization": ["ActionListener l = new ButtonListener()", "JButton jButton = new JButton(*)"], "initializationStart": [94, 1615], "initializationEnd": [114, 1760], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setMnemonic(char)", "jButton.setToolTipText(String)", "jButton.setActionCommand(String)"], "configurationStart": [1778, 1979, 2153], "configurationEnd": [1961, 2135, 2192], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 2210, "focalAPIEnd": 2256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [2264], "useEnd": [2293], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cismet/cids-navigator/tree/master/src/main/java/Sirius/navigator/exception/ExceptionManager.java", "rawCode": "    /** DOCUMENT ME! */\n    private void init() {\n      final ActionListener buttonListener = new ButtonListener();\n\n      this.setBorder(new EmptyBorder(10, 10, 10, 10));\n      final GridBagConstraints constraints = new GridBagConstraints();\n\n      // ICON ================================================================\n      constraints.anchor = GridBagConstraints.CENTER;\n      constraints.fill = GridBagConstraints.NONE;\n      constraints.gridheight = 1;\n      constraints.gridwidth = 1;\n      constraints.weightx = 0;\n      constraints.weighty = 0.0;\n      constraints.gridy = 0;\n      constraints.gridx = 0;\n\n      exceptionIconLabel = new JLabel();\n      exceptionIconLabel.setIcon(UIManager.getIcon(\"OptionPane.errorIcon\")); // NOI18N\n      exceptionIconLabel.setBorder(\n          new CompoundBorder(\n              new SoftBevelBorder(SoftBevelBorder.LOWERED), new EmptyBorder(10, 10, 10, 10)));\n      this.add(exceptionIconLabel, constraints);\n\n      // MESSAGE =============================================================\n      constraints.fill = GridBagConstraints.BOTH;\n      constraints.weightx = 1;\n      constraints.gridx++;\n      messageLabel = new JLabel();\n      messageLabel.setBorder(new EmptyBorder(20, 20, 20, 20));\n      this.add(messageLabel, constraints);\n\n      // BUTTONS =============================================================\n      constraints.insets = new Insets(20, 0, 10, 0);\n      constraints.gridwidth = 2;\n      constraints.gridy = 1;\n      constraints.gridx = 0;\n      final JPanel buttonPanel = new JPanel(new GridLayout(1, 3, 10, 10));\n\n      ignoreButton =\n          new JButton(\n              org.openide.util.NbBundle.getMessage(\n                  ExceptionManager.class, \"ExceptionManager.ignoreButton.text\")); // NOI18N\n      ignoreButton.setMnemonic(\n          org.openide.util.NbBundle.getMessage(\n                  ExceptionManager.class, \"ExceptionManager.ignoreButton.mnemonic\")\n              .charAt(0)); // NOI18N\n      ignoreButton.setToolTipText(\n          org.openide.util.NbBundle.getMessage(\n              ExceptionManager.class, \"ExceptionManager.ignoreButton.tooltip\")); // NOI18N\n      ignoreButton.setActionCommand(\"ignore\"); // NOI18N\n      ignoreButton.addActionListener(buttonListener);\n      buttonPanel.add(ignoreButton);\n\n      exitButton =\n          new JButton(\n              org.openide.util.NbBundle.getMessage(\n                  ExceptionManager.class, \"ExceptionManager.exitButton.text\")); // NOI18N\n      exitButton.setMnemonic(\n          org.openide.util.NbBundle.getMessage(\n                  ExceptionManager.class, \"ExceptionManager.exitButton.mnemonic\")\n              .charAt(0)); // NOI18N\n      exitButton.setToolTipText(\n          org.openide.util.NbBundle.getMessage(\n              ExceptionManager.class, \"ExceptionManager.exitButton.tooltip\")); // NOI18N\n      exitButton.setActionCommand(\"exit\"); // NOI18N\n      exitButton.addActionListener(buttonListener);\n      buttonPanel.add(exitButton);\n\n      detailsButton =\n          new JToggleButton(\n              org.openide.util.NbBundle.getMessage(\n                  ExceptionManager.class, \"ExceptionManager.detailsButton.text\")); // NOI18N\n      detailsButton.setMnemonic(\n          org.openide.util.NbBundle.getMessage(\n                  ExceptionManager.class, \"ExceptionManager.detailsButton.mnemonic\")\n              .charAt(0)); // NOI18N\n      detailsButton.setToolTipText(\n          org.openide.util.NbBundle.getMessage(\n              ExceptionManager.class, \"ExceptionManager.detailsButton.tooltip\")); // NOI18N\n      detailsButton.setActionCommand(\"details\"); // NOI18N\n      detailsButton.addActionListener(buttonListener);\n      buttonPanel.add(detailsButton);\n\n      this.add(buttonPanel, constraints);\n\n      constraints.insets = new Insets(0, 0, 0, 0);\n      constraints.gridy++;\n      constraints.weightx = 1.0;\n      constraints.weighty = 1.0;\n      detailsTextArea = new JTextArea(4, 20);\n      detailsTextArea.setEditable(false);\n      detailsPanel = new JPanel(new GridLayout(1, 1));\n      detailsPanel.add(new JScrollPane(detailsTextArea));\n      detailsPanel.setVisible(false);\n      this.add(detailsPanel, constraints);\n    }\n"}, {"dataset": "addActionListener", "exampleID": 3103, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 300, "focalAPIEnd": 359, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ladriangb/jFASTSJ-base-src/tree/master/com/jswitch/pagos/vista/BuscarFacturaDetailFrame.java", "rawCode": "  @Override\n  public void inicializar(FormController formController, boolean addToMDIFrame) {\n    initComponents();\n\n    this.getRootPane().setDefaultButton(jButton1);\n    form1.setCreateInnerVO(false);\n    form1.setFormController(formController);\n\n    form1.getVOModel().setCreateInnerVO(true);\n    jButton1.addActionListener((ActionListener) formController);\n\n    if (addToMDIFrame) {\n      pack();\n    } else {\n      setBounds(0, 0, 0, 0);\n    }\n\n    MDIFrame.add(this);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3104, "initialization": ["JButton jButton = Object.createButton()", "JButton jButton = new JButton(*)", "JButton jButton = new JButton(*)", "ActionListener l = createButtonActionListener(int)"], "initializationStart": [1207, 1303, 1356, 1688], "initializationEnd": [1246, 1329, 1386, 1723], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setName(String)", "jButton.setMultiClickThreshhold(int)"], "configurationStart": [1399, 1447], "configurationEnd": [1435, 1572], "guardCondition": "l!=null", "guardType": "IF {", "guardExpressionStart": 1735, "guardExpressionEnd": 1762, "guardBlockStart": 1735, "guardBlockEnd": 1831, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1777, "focalAPIEnd": 1818, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setMargin(Insets)"], "useStart": [3586], "useEnd": [3639], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/src/share/classes/javax/swing/plaf/basic/BasicOptionPaneUI.java", "rawCode": "  /**\n   * Creates the appropriate object to represent each of the objects in <code>buttons</code> and\n   * adds it to <code>container</code>. This differs from addMessageComponents in that it will\n   * recurse on <code>buttons</code> and that if button is not a Component it will create an\n   * instance of JButton.\n   */\n  protected void addButtonComponents(Container container, Object[] buttons, int initialIndex) {\n    if (buttons != null && buttons.length > 0) {\n      boolean sizeButtonsToSame = getSizeButtonsToSameWidth();\n      boolean createdAll = true;\n      int numButtons = buttons.length;\n      JButton[] createdButtons = null;\n      int maxWidth = 0;\n\n      if (sizeButtonsToSame) {\n        createdButtons = new JButton[numButtons];\n      }\n\n      for (int counter = 0; counter < numButtons; counter++) {\n        Object button = buttons[counter];\n        Component newComponent;\n\n        if (button instanceof Component) {\n          createdAll = false;\n          newComponent = (Component) button;\n          container.add(newComponent);\n          hasCustomComponents = true;\n\n        } else {\n          JButton aButton;\n\n          if (button instanceof ButtonFactory) {\n            aButton = ((ButtonFactory) button).createButton();\n          } else if (button instanceof Icon) aButton = new JButton((Icon) button);\n          else aButton = new JButton(button.toString());\n\n          aButton.setName(\"OptionPane.button\");\n          aButton.setMultiClickThreshhold(\n              DefaultLookup.getInt(optionPane, this, \"OptionPane.buttonClickThreshhold\", 0));\n          configureButton(aButton);\n\n          container.add(aButton);\n\n          ActionListener buttonListener = createButtonActionListener(counter);\n          if (buttonListener != null) {\n            aButton.addActionListener(buttonListener);\n          }\n          newComponent = aButton;\n        }\n        if (sizeButtonsToSame && createdAll && (newComponent instanceof JButton)) {\n          createdButtons[counter] = (JButton) newComponent;\n          maxWidth = Math.max(maxWidth, newComponent.getMinimumSize().width);\n        }\n        if (counter == initialIndex) {\n          initialFocusComponent = newComponent;\n          if (initialFocusComponent instanceof JButton) {\n            JButton defaultB = (JButton) initialFocusComponent;\n            defaultB.addHierarchyListener(\n                new HierarchyListener() {\n                  public void hierarchyChanged(HierarchyEvent e) {\n                    if ((e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) != 0) {\n                      JButton defaultButton = (JButton) e.getComponent();\n                      JRootPane root = SwingUtilities.getRootPane(defaultButton);\n                      if (root != null) {\n                        root.setDefaultButton(defaultButton);\n                      }\n                    }\n                  }\n                });\n          }\n        }\n      }\n      ((ButtonAreaLayout) container.getLayout())\n          .setSyncAllWidths((sizeButtonsToSame && createdAll));\n      /* Set the padding, windows seems to use 8 if <= 2 components,\n      otherwise 4 is used. It may actually just be the size of the\n      buttons is always the same, not sure. */\n      if (DefaultLookup.getBoolean(optionPane, this, \"OptionPane.setButtonMargin\", true)\n          && sizeButtonsToSame\n          && createdAll) {\n        JButton aButton;\n        int padSize;\n\n        padSize = (numButtons <= 2 ? 8 : 4);\n\n        for (int counter = 0; counter < numButtons; counter++) {\n          aButton = createdButtons[counter];\n          aButton.setMargin(new Insets(2, padSize, 2, padSize));\n        }\n      }\n    }\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3105, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [640], "initializationEnd": [664], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 670, "focalAPIEnd": 702, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [708], "useEnd": [732], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OATVAF/GestionProdBEPN/tree/master/GestionProdPN-dev/src/ui/FenetreParametreAffichage.java", "rawCode": "  /** procedure qui construit le contentPane */\n  private void constructionContentPane() {\n\n    // initialisation du contentPane\n    contentPane = new JPanel();\n    contentPane.setLayout(new BorderLayout());\n\n    // construction du headerPane\n    headerPane = new JPanel();\n    headerPane.setBackground(Color.WHITE);\n    titreLabel = new JLabel(\"Parametre Affichage\");\n    titreLabel.setFont(new Font(\"arial\", 1, 20));\n    headerPane.add(titreLabel);\n\n    // construction du centerPane\n    constructionCenterPane();\n\n    // construction du footerPane\n    footerPane = new JPanel();\n    footerPane.setBackground(Color.WHITE);\n    applyBtn = new JButton(\"Appliquer\");\n    applyBtn.addActionListener(this);\n    footerPane.add(applyBtn);\n\n    // ajout des composant au contentPane\n    contentPane.add(headerPane, BorderLayout.PAGE_START);\n    contentPane.add(centerPane, BorderLayout.CENTER);\n    contentPane.add(footerPane, BorderLayout.PAGE_END);\n  } // fin constructionContentPane()\n"}, {"dataset": "addActionListener", "exampleID": 3106, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 68, "focalAPIEnd": 115, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HUSACCT/HUSACCT/tree/master/src/husacct/graphics/presentation/menubars/GraphicsMenuBar.java", "rawCode": "  public void setOptionsDialogAction(ActionListener listener) {\n    optionsDialogButton.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3107, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 63, "focalAPIEnd": 103, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/quickfixj/mirror/tree/master/examples/src/main/java/quickfix/examples/banzai/ui/OrderEntryPanel.java", "rawCode": "  public void addActionListener(ActionListener listener) {\n    submitButton.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3108, "initialization": ["JButton jButton = new JButton(ImageIcon)"], "initializationStart": [445], "initializationEnd": [465], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [475], "configurationEnd": [506], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 516, "focalAPIEnd": 546, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ndushi/iMat/tree/master/src/imat/backend/ProductNode.java", "rawCode": "  @Override\n  public Object getValueAt(int column) {\n    switch (column) {\n      case 0:\n        return item.getProduct().getName();\n      case 1:\n        double amount = item.getAmount();\n        if (Math.round(amount) == amount) {\n          return (int) amount;\n        } else {\n          return amount;\n        }\n      case 2:\n        return item.getTotal();\n      case 3:\n        return new JButton();\n      case 4:\n        JButton delete = new JButton(BTN_DEL);\n        delete.setActionCommand(AC_DEL);\n        delete.addActionListener(this);\n        return delete;\n    }\n    throw new IndexOutOfBoundsException();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3109, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [300], "initializationEnd": [323], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 331, "focalAPIEnd": 362, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gruenean/maze/tree/master/JGameGrid/applications/battleship/StatusDialog.java", "rawCode": "  private void init(int ulx, int uly, boolean hasButton) {\n    setTitle(\"Status Information\");\n    optionPane = new JOptionPane(\"\");\n    optionPane.setOptionType(JOptionPane.DEFAULT_OPTION);\n    optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);\n    if (hasButton) {\n      JButton jButton = new JButton(\"Continue\");\n      jButton.addActionListener(this);\n      Object[] options = new Object[] {jButton};\n      optionPane.setOptions(options);\n    } else optionPane.setOptions(new Object[] {});\n    optionPane.setInitialSelectionValue(null);\n    setContentPane(optionPane);\n    pack();\n    setLocation(ulx, uly);\n    setVisible(true);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3110, "initialization": ["JButton jButton = createButton(String,*,*)"], "initializationStart": [1316], "initializationEnd": [1443], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1449, "focalAPIEnd": 1485, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton)"], "useStart": [1491], "useEnd": [1508], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.2.0/src/lib/com/izforge/izpack/panels/UserPathSelectionPanel.java", "rawCode": "  /** Creates the layout for this sub panel. */\n  protected void createLayout() {\n    // We woulduse the IzPanelLayout also in this \"sub\"panel.\n    // In an IzPanel there are support of this layout manager at\n    // more than one places. In this panel not, therefore we have\n    // to make all things needed.\n    // First create a layout helper.\n    LayoutHelper layoutHelper = new LayoutHelper(this);\n    // Start the layout.\n    layoutHelper.startLayout(new IzPanelLayout());\n    // One of the rare points we need explicit a constraints.\n    IzPanelConstraints ipc = IzPanelLayout.getDefaultConstraint(TEXT_CONSTRAINT);\n    // The text field should be stretched.\n    ipc.setXStretch(1.0);\n    textField = new JTextField(idata.getVariable(variableName));\n    textField.addActionListener(this);\n    parent.setInitialFocus(textField);\n    add(textField, ipc);\n    // We would have place between text field and button.\n    add(IzPanelLayout.createHorizontalFiller(3));\n    // No explicit constraints for the button (else implicit) because\n    // defaults are OK.\n    String buttonText = parent.getInstallerFrame().langpack.getString(targetPanel + \".browse\");\n    if (buttonText == null) {\n      buttonText = parent.getInstallerFrame().langpack.getString(defaultPanelName + \".browse\");\n    }\n    browseButton =\n        ButtonFactory.createButton(\n            buttonText, parent.getInstallerFrame().icons.getImageIcon(\"open\"), idata.buttonsHColor);\n    browseButton.addActionListener(this);\n    add(browseButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3111, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 31, "tryExpressionEnd": 35, "tryBlockStart": 31, "tryBlockEnd": 3167, "catchExpressionStart": 3113, "catchExpressionEnd": 3133, "catchBlockStart": 3113, "catchBlockEnd": 3167, "exceptionHandlingCallStart": [3141], "exceptionHandlingCallEnd": [3160], "configuration": ["jButton.setText(String)"], "configurationStart": [2835], "configurationEnd": [2864], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 2876, "focalAPIEnd": 2916, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DougEdey/StrangeBrew/tree/master/src/ca/strangebrew/ui/swing/FermentPanel.java", "rawCode": "  private void initGUI() {\n    try {\n      // Set up main window\n      this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n      this.add(fermentPanel);\n      this.add(fermentButtonsPanel);\n\n      // Setup button panel\n      fermentButtonsPanelLayout.setAlignment(FlowLayout.LEFT);\n      fermentButtonsPanelLayout.setVgap(0);\n      fermentButtonsPanel.setLayout(fermentButtonsPanelLayout);\n      fermentButtonsPanel.setPreferredSize(\n          new java.awt.Dimension(592, fermentButtonsPanel.getFont().getSize() * 2));\n\n      // Setup ferment panel\n      fermentPanel.setBorder(\n          BorderFactory.createTitledBorder(\n              new LineBorder(new java.awt.Color(0, 0, 0), 1, false),\n              \"Fermentation Schedule\",\n              TitledBorder.LEADING,\n              TitledBorder.TOP,\n              new java.awt.Font(\"Dialog\", 1, 12),\n              new java.awt.Color(51, 51, 51)));\n      fermentPanel.setLayout(fermentPanelLayout);\n      fermentPanel.add(scrollFermentPanel, BorderLayout.CENTER);\n      fermentPanel.add(fermentTotalsTable, BorderLayout.SOUTH);\n\n      // Setup scrolling table\n      scrollFermentPanel.setViewportView(fermentTable);\n      fermentTable.setModel(fermentTableModel);\n      fermentTable.getTableHeader().setReorderingAllowed(false);\n      // Setup totals table\n      fermentTotalsTable.setModel(fermentTotalsTableModel);\n      fermentTotalsTable.getTableHeader().setEnabled(false);\n      fermentTotalsTable.setAutoCreateColumnsFromModel(false);\n      // fermentButtonsPanel.setPreferredSize(new java.awt.Dimension(592, 27));\n\n      // Setup special table column stamps on scrolling table\n      {\n        // type combo\n        TableColumn col = fermentTable.getColumnModel().getColumn(0);\n        SmartComboBox.enable(comboType);\n        col.setCellEditor(new SBComboBoxCellEditor(comboType));\n        comboType.addActionListener(this);\n\n        // time editor\n        col = fermentTable.getColumnModel().getColumn(1);\n        col.setCellEditor(timeEditor);\n\n        // temp editor\n        col = fermentTable.getColumnModel().getColumn(2);\n        col.setCellEditor(tempEditor);\n\n        // units editor\n        col = fermentTable.getColumnModel().getColumn(3);\n        // SmartComboBox.enable(comboUnits);\n        col.setCellEditor(new SBComboBoxCellEditor(comboUnits));\n        comboUnits.addActionListener(this);\n      }\n\n      // Setup totals table column stamps\n      {\n        // Do nothing\n      }\n\n      // Setup Bottom Panel\n      {\n        fermentButtonsPanel.add(fermentButtonBar);\n        fermentButtonBar.setPreferredSize(\n            new java.awt.Dimension(386, fermentButtonBar.getFont().getSize() * 2));\n        fermentButtonBar.setFloatable(false);\n\n        // Setup button bar\n        {\n          // Add button\n          fermentButtonBar.add(fermentAddButton);\n          fermentAddButton.setText(\"+\");\n          fermentAddButton.addActionListener(this);\n\n          // Remove button\n          fermentButtonBar.add(fermentDelButton);\n          fermentDelButton.setText(\"-\");\n          fermentDelButton.addActionListener(this);\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3112, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [720], "initializationEnd": [751], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 840, "focalAPIEnd": 870, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LeoWestby/Kalendersystem/tree/master/src/gruppe19/client/gui/SelectUserDialog.java", "rawCode": "  private void setUp() {\n    setLayout(new FlowLayout());\n    // User list\n    defaultListModel = new DefaultListModel();\n    listUsers = new JList();\n    listUsers.setModel(defaultListModel);\n    listUsers.setCellRenderer(new UserListRenderer());\n\n    defaultListSelectionModel = new DefaultListSelectionModel();\n    defaultListSelectionModel.setSelectionMode(DefaultListSelectionModel.SINGLE_SELECTION);\n    listUsers.setSelectionModel(defaultListSelectionModel);\n\n    JScrollPane scrollUsers = new JScrollPane(listUsers);\n    scrollUsers.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);\n    scrollUsers.setPreferredSize(new Dimension(200, 200));\n\n    btnClose = new JButton(\"Lukk\");\n    btnAdd = new JButton(\"Legg til brukere\");\n\n    add(scrollUsers);\n    add(btnAdd);\n    add(btnClose);\n\n    // actionlisteners\n    btnAdd.addActionListener(this);\n    btnClose.addActionListener(this);\n    defaultListSelectionModel.addListSelectionListener(this);\n\n    // behaviour\n    setModalityType(ModalityType.APPLICATION_MODAL);\n    setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n    pack();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3113, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 956, "focalAPIEnd": 997, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/anthonyChin/AsteroidsByAMBroSIA/tree/master/AMBroSIA/src/gui/MenuGUI.java", "rawCode": "  /**\n   * Display game over screen.\n   *\n   * @param gameState current game state\n   * @param playerOneTurn boolean value representing which player is playing in two player mode, and\n   *     in single player mode, it is true by default\n   * @param Esc boolean is for checking if the escape key is pressed\n   */\n  public void displayGameOver(GameState gameState, boolean playerOneTurn, boolean Esc) {\n    // create panel\n    gameOverPanel =\n        new EndGamePanel(GameAssets.gameOverImage, gameState, playerOneTurn, Esc, singleP);\n    SpaceBackgroundPanel cardGameOver = new SpaceBackgroundPanel(new BorderLayout());\n    cardGameOver.setLayout(new BorderLayout());\n    cardGameOver.add(gameOverPanel);\n\n    // initialize a back button\n    JPanel buttonPanelGameOver = new JPanel();\n    buttonPanelGameOver.setOpaque(false);\n    decorateButton(backButton);\n    buttonPanelGameOver.add(backButton);\n    buttonPanelGameOver.setBackground(Color.black);\n    backButton.addActionListener(buttonClick);\n    cardGameOver.add(buttonPanelGameOver, BorderLayout.SOUTH);\n    cardGameOver.setBackground(Color.white);\n    card.add(\"GameOver\", cardGameOver);\n    cardLayout.show(card, \"GameOver\");\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3114, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [1219], "initializationEnd": [1232], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [1238], "configurationEnd": [1285], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1291, "focalAPIEnd": 1327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [1814], "useEnd": [1840], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/concord-consortium/geogebra/tree/master/geogebra/geogebra/gui/InputDialog.java", "rawCode": "  protected void createGUI(\n      String title,\n      String message,\n      boolean autoComplete,\n      int columns,\n      int rows,\n      boolean specialChars,\n      boolean greekLetters,\n      boolean selectInitText,\n      boolean showDisplayChars,\n      boolean showProperties,\n      boolean showApply) {\n    setResizable(false);\n\n    // Create components to be displayed\n    inputPanel =\n        new InputPanel(\n            initString, app, rows, columns, specialChars, greekLetters, showDisplayChars);\n\n    sl =\n        new GeoElementSelectionListener() {\n          public void geoElementSelected(GeoElement geo, boolean addToSelection) {\n            insertGeoElement(geo);\n            inputPanel.getTextComponent().requestFocusInWindow();\n          }\n        };\n\n    // add listeners to textfield\n    JTextComponent textComp = inputPanel.getTextComponent();\n    if (textComp instanceof AutoCompleteTextField) {\n      AutoCompleteTextField tf = (AutoCompleteTextField) textComp;\n      tf.setAutoComplete(autoComplete);\n      tf.addActionListener(this);\n    }\n\n    // buttons\n    btPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n    btPanel2 = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    btProperties = new JButton();\n    btProperties.setActionCommand(\"OpenProperties\");\n    btProperties.addActionListener(this);\n    btOK = new JButton();\n    btOK.setActionCommand(\"OK\");\n    btOK.addActionListener(this);\n    btCancel = new JButton();\n    btCancel.setActionCommand(\"Cancel\");\n    btCancel.addActionListener(this);\n    btApply = new JButton();\n    btApply.setActionCommand(\"Apply\");\n    btApply.addActionListener(this);\n\n    optionPane = new JPanel(new BorderLayout(5, 5));\n    buttonsPanel = new JPanel(new BorderLayout(5, 5));\n    msgLabel = new JLabel(message);\n\n    if (showProperties) {\n      btPanel2.add(btProperties);\n      buttonsPanel.add(btPanel2, BorderLayout.EAST);\n      buttonsPanel.add(btPanel, BorderLayout.WEST);\n    } else {\n      buttonsPanel.add(btPanel, BorderLayout.EAST);\n    }\n\n    btPanel.add(btOK);\n    btPanel.add(btCancel);\n    if (showApply) btPanel.add(btApply);\n\n    optionPane.add(msgLabel, BorderLayout.NORTH);\n    optionPane.add(buttonsPanel, BorderLayout.SOUTH);\n    optionPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\n    // Make this dialog display it.\n    setContentPane(optionPane);\n\n    setLabels(title);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3115, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 58, "focalAPIEnd": 93, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sleuthkit/autopsy/tree/master/KeywordSearch/src/org/sleuthkit/autopsy/keywordsearch/ExtractedContentPanel.java", "rawCode": "  void addNextPageControlListener(ActionListener l) {\n    pageNextButton.addActionListener(l);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3116, "initialization": ["JButton jButton = createButton(*,*)"], "initializationStart": [3578], "initializationEnd": [3703], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 3709, "focalAPIEnd": 3743, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridBagLayout.addLayoutComponent(jButton,GridBagConstraints)", "add(jButton)"], "useStart": [3967, 4023], "useEnd": [4017, 4038], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/branches/branch-3.9/src/lib/com/izforge/izpack/panels/ShortcutPanel.java", "rawCode": "  /**\n   * This method creates an alternative UI for this panel. This UI can be used when the creation of\n   * shortcuts is not supported on the target system. It displays an apology for the inability to\n   * create shortcuts on this system, along with information about the intended targets. In\n   * addition, there is a button that allows the user to save more complete information in a text\n   * file. Based on this information the user might be able to create the necessary shortcut him or\n   * herself. At least there will be information about how to launch the application.\n   */\n\n  /*--------------------------------------------------------------------------*/\n  private void buildAlternateUI() {\n    layout = new GridBagLayout();\n    constraints = new GridBagConstraints();\n    setLayout(layout);\n\n    // ----------------------------------------------------\n    // static text a the top of the panel, that apologizes\n    // about the fact that we can not create shortcuts on\n    // this particular target OS.\n    // ----------------------------------------------------\n    MultiLineLabel apologyLabel =\n        new MultiLineLabel(parent.langpack.getString(\"ShortcutPanel.alternate.apology\"), 0, 0);\n\n    constraints.gridx = 0;\n    constraints.gridy = 0;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.weightx = 1.0;\n    constraints.weighty = 1.0;\n    constraints.insets = new Insets(5, 5, 5, 5);\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    constraints.anchor = GridBagConstraints.WEST;\n    layout.addLayoutComponent(apologyLabel, constraints);\n    add(apologyLabel);\n\n    // ----------------------------------------------------\n    // label that explains the significance ot the list box\n    // ----------------------------------------------------\n    MultiLineLabel listLabel =\n        new MultiLineLabel(parent.langpack.getString(\"ShortcutPanel.alternate.targetsLabel\"), 0, 0);\n\n    constraints.gridx = 0;\n    constraints.gridy = 1;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.weightx = 1.0;\n    constraints.weighty = 1.0;\n    layout.addLayoutComponent(listLabel, constraints);\n    add(listLabel);\n\n    // ----------------------------------------------------\n    // list box to list all of the intended shortcut targets\n    // ----------------------------------------------------\n    Vector targets = new Vector();\n\n    for (int i = 0; i < shortcuts.size(); i++) {\n      targets.add(((ShortcutData) shortcuts.elementAt(i)).target);\n    }\n\n    targetList = new JList(targets);\n\n    JScrollPane scrollPane = new JScrollPane(targetList);\n\n    constraints.gridx = 0;\n    constraints.gridy = 2;\n    constraints.fill = GridBagConstraints.BOTH;\n    layout.addLayoutComponent(scrollPane, constraints);\n    add(scrollPane);\n\n    // ----------------------------------------------------\n    // static text that explains about the text file\n    // ----------------------------------------------------\n    MultiLineLabel fileExplanation =\n        new MultiLineLabel(\n            parent.langpack.getString(\"ShortcutPanel.alternate.textFileExplanation\"), 0, 0);\n\n    constraints.gridx = 0;\n    constraints.gridy = 3;\n    constraints.weightx = 1.0;\n    constraints.weighty = 1.0;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    layout.addLayoutComponent(fileExplanation, constraints);\n    add(fileExplanation);\n\n    // ----------------------------------------------------\n    // button to save the text file\n    // ----------------------------------------------------\n    saveButton =\n        ButtonFactory.createButton(\n            parent.langpack.getString(\"ShortcutPanel.alternate.saveButton\"), idata.buttonsHColor);\n    saveButton.addActionListener(this);\n\n    constraints.gridx = 0;\n    constraints.gridy = 4;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.fill = GridBagConstraints.NONE;\n    constraints.anchor = GridBagConstraints.CENTER;\n    layout.addLayoutComponent(saveButton, constraints);\n    add(saveButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3117, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [426], "initializationEnd": [448], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 627, "focalAPIEnd": 657, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton,TwoColumnConstraints)"], "useStart": [797], "useEnd": [837], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/awilhelm/izpack-with-ips/tree/master/src/tests/com/izforge/izpack/TwoColumnLayoutTest.java", "rawCode": "  /** Create and add the widgets. */\n  private void addWidgets() {\n    // Create widgets.\n    tempText = new JTextField(\"10\", 30);\n    TwoColumnConstraints constraints = new TwoColumnConstraints();\n    constraints.position = TwoColumnConstraints.EAST;\n\n    label = new JLabel(\"Label : \");\n    TwoColumnConstraints constraints1 = new TwoColumnConstraints();\n    constraints1.position = TwoColumnConstraints.WEST;\n\n    addRow = new JButton(\"Add Row\");\n    TwoColumnConstraints constraints2 = new TwoColumnConstraints();\n    constraints2.position = TwoColumnConstraints.BOTH;\n\n    // Listen to events from the Convert button.\n    addRow.addActionListener(this);\n\n    // Add the widgets to the container.\n    converterPanel.add(tempText, constraints);\n    converterPanel.add(label, constraints1);\n    converterPanel.add(addRow, constraints2);\n\n    label.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3118, "initialization": ["JButton jButton = new JButton(String,*)"], "initializationStart": [51], "initializationEnd": [85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setVerticalTextPosition(*)", "jButton.setHorizontalTextPosition(*)", "jButton.setPreferredSize(Dimension)", "jButton.setMaximumSize(Dimension)"], "configurationStart": [91, 154, 219, 276], "configurationEnd": [148, 213, 270, 325], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 331, "focalAPIEnd": 365, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DaMSA/EAVDAM/tree/master/src/main/java/dk/frv/eavdam/menus/OptionsMenuItem.java", "rawCode": "  private void createButtons() {\n\n    saveButton = new JButton(\"Save and exit\", null);\n    saveButton.setVerticalTextPosition(AbstractButton.BOTTOM);\n    saveButton.setHorizontalTextPosition(AbstractButton.CENTER);\n    saveButton.setPreferredSize(new Dimension(130, 20));\n    saveButton.setMaximumSize(new Dimension(130, 20));\n    saveButton.addActionListener(this);\n\n    cancelButton = new JButton(\"Cancel\", null);\n    cancelButton.setVerticalTextPosition(AbstractButton.BOTTOM);\n    cancelButton.setHorizontalTextPosition(AbstractButton.CENTER);\n    cancelButton.setPreferredSize(new Dimension(100, 20));\n    cancelButton.setMaximumSize(new Dimension(100, 20));\n    cancelButton.addActionListener(this);\n\n    addFTPServerButton = new JButton(\"Add new\", null);\n    addFTPServerButton.setVerticalTextPosition(AbstractButton.BOTTOM);\n    addFTPServerButton.setHorizontalTextPosition(AbstractButton.CENTER);\n    addFTPServerButton.setPreferredSize(new Dimension(100, 20));\n    addFTPServerButton.setMaximumSize(new Dimension(100, 20));\n    addFTPServerButton.addActionListener(this);\n\n    deleteFTPServerButton = new JButton(\"Delete\", null);\n    deleteFTPServerButton.setVerticalTextPosition(AbstractButton.BOTTOM);\n    deleteFTPServerButton.setHorizontalTextPosition(AbstractButton.CENTER);\n    deleteFTPServerButton.setPreferredSize(new Dimension(100, 20));\n    deleteFTPServerButton.setMaximumSize(new Dimension(100, 20));\n    deleteFTPServerButton.addActionListener(this);\n\n    addNewFTPButton = new JButton(\"Add\", null);\n    addNewFTPButton.setVerticalTextPosition(AbstractButton.BOTTOM);\n    addNewFTPButton.setHorizontalTextPosition(AbstractButton.CENTER);\n    addNewFTPButton.setPreferredSize(new Dimension(60, 20));\n    addNewFTPButton.setMaximumSize(new Dimension(60, 20));\n    addNewFTPButton.addActionListener(this);\n\n    cancelNewFTPButton = new JButton(\"Cancel\", null);\n    cancelNewFTPButton.setVerticalTextPosition(AbstractButton.BOTTOM);\n    cancelNewFTPButton.setHorizontalTextPosition(AbstractButton.CENTER);\n    cancelNewFTPButton.setPreferredSize(new Dimension(100, 20));\n    cancelNewFTPButton.setMaximumSize(new Dimension(100, 20));\n    cancelNewFTPButton.addActionListener(this);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3119, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [128], "configurationEnd": [168], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 174, "focalAPIEnd": 213, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setEnabled(boolean)", "JButton.add(jButton)"], "useStart": [219, 1022], "useEnd": [252, 1047], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Lopt/Captchalize/tree/master/src/cap/gui/ResultLoaderPanel.java", "rawCode": "  private void init() {\n    this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n\n    this.prevButton = new JButton(\"<\");\n    this.prevButton.setActionCommand(\"prev\");\n    this.prevButton.addActionListener(this);\n    this.prevButton.setEnabled(false);\n\n    this.nextButton = new JButton(\">\");\n    this.nextButton.setActionCommand(\"next\");\n    this.nextButton.addActionListener(this);\n    this.nextButton.setEnabled(false);\n\n    this.resultPanelCompoundImage = new ResultPanelCompoundImage();\n    this.resultPanelImage = new ResultPanelImage();\n    this.resultPanelString = new ResultPanelString();\n    this.resultPanelUnknown = new ResultPanelUnknown();\n\n    this.content.setLayout(this.cardLayout);\n    this.content.add(this.resultPanelCompoundImage, \"cap.img.CompoundImage\");\n    this.content.add(this.resultPanelImage, \"cap.img.CaptchaImage\");\n    this.content.add(this.resultPanelString, \"java.lang.String\");\n    // content.add(this.resultPanelAudio, \"Audio\");\n    // content.add(this.resultPanelText, \"Text\");\n\n    this.add(this.prevButton);\n    this.add(this.content);\n    this.add(this.nextButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3120, "initialization": ["JButton jButton = new JButton(String,*)"], "initializationStart": [192], "initializationEnd": [262], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setToolTipText(String)", "jButton.setActionCommand(String)"], "configurationStart": [268, 326], "configurationEnd": [320, 380], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 386, "focalAPIEnd": 422, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [537], "useEnd": [564], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biomart/biomart-rc7/tree/master/src/org/biomart/configurator/view/idwViews/McViewPortal.java", "rawCode": "  private JPanel createToolBar() {\n    JPanel toolBarsPanel = new JPanel(new BorderLayout());\n\n    JToolBar buttonBar = new JToolBar();\n    JPanel eastPanel = new JPanel();\n    deployButton = new JButton(\"Start Server\", McUtils.createImageIcon(\"images/run.gif\"));\n    deployButton.setToolTipText(Resources.get(\"DEPLOY\"));\n    deployButton.setActionCommand(Resources.get(\"DEPLOY\"));\n    deployButton.addActionListener(this);\n\n    // JCheckBox hidemaskedcb = new JCheckBox(\"Hide Masked Config\");\n    // addShowHideCheckBox(eastPanel);\n    eastPanel.add(deployButton);\n\n    JToolBar dropdownBar = new JToolBar();\n    JLabel userLabel = new JLabel(\"User group\");\n    usersCB = new JComboBox();\n    usersCB.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            if (e.getStateChange() == ItemEvent.SELECTED) {\n              final UserGroup user = (UserGroup) McViewPortal.this.usersCB.getSelectedItem();\n              selectUser(user);\n            }\n          }\n        });\n    dropdownBar.add(userLabel);\n    dropdownBar.add(usersCB);\n    dropdownBar.addSeparator();\n\n    this.addUserButton = new JButton(McUtils.createImageIcon(\"images/adduser.png\"));\n    this.addUserButton.setToolTipText(\"addusergroup\");\n    this.addUserButton.setActionCommand(\"addusergroup\");\n    this.addUserButton.addActionListener(this);\n    this.addUserButton.setVisible(false);\n\n    this.umButton = new JButton(McUtils.createImageIcon(\"images/um.gif\"));\n    this.umButton.setToolTipText(\"user management\");\n    this.umButton.setActionCommand(\"usermanagement\");\n    this.umButton.addActionListener(this);\n    // dropdownBar.add(this.addUserButton);\n    JPanel spacePanel = new JPanel();\n\n    // toolBarsPanel.add(dropdownBar);\n    buttonBar.add(userLabel);\n    buttonBar.add(usersCB);\n    buttonBar.addSeparator();\n    buttonBar.add(this.addUserButton);\n    buttonBar.add(this.umButton);\n    toolBarsPanel.add(buttonBar, BorderLayout.WEST);\n\n    toolBarsPanel.add(spacePanel, BorderLayout.CENTER);\n    toolBarsPanel.add(eastPanel, BorderLayout.EAST);\n    // toolBarsPanel.add(dropdownBar,BorderLayout.CENTER);\n    return toolBarsPanel;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3121, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [460], "initializationEnd": [484], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [490], "configurationEnd": [529], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 535, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.addKeyListener(KeyListener)", "jButton.setMnemonic(char)", "add(jButton,*)"], "useStart": [574, 610, 652], "useEnd": [604, 646, 684], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/Reha/src/patientenFenster/RezNeuanlage.java", "rawCode": "  public JXPanel getButtonPanel() {\n    JXPanel jpan = JCompTools.getEmptyJXPanel();\n    jpan.addKeyListener(this);\n    jpan.setOpaque(false);\n    FormLayout lay =\n        new FormLayout(\n            // 1 2 3 4 5 6 7\n            \"fill:0:grow(0.25),50dlu,fill:0:grow(0.25),50dlu,fill:0:grow(0.25),50dlu,fill:0:grow(0.25)\",\n            // 1 2 3\n            \"5dlu,p,5dlu\");\n    CellConstraints cc = new CellConstraints();\n    jpan.setLayout(lay);\n    speichern = new JButton(\"speichern\");\n    speichern.setActionCommand(\"speichern\");\n    speichern.addActionListener(this);\n    speichern.addKeyListener(this);\n    speichern.setMnemonic(KeyEvent.VK_S);\n    jpan.add(speichern, cc.xy(2, 2));\n\n    hmrcheck = new JButton(\"HMR-Check\");\n    hmrcheck.setActionCommand(\"hmrcheck\");\n    hmrcheck.addActionListener(this);\n    hmrcheck.addKeyListener(this);\n    hmrcheck.setMnemonic(KeyEvent.VK_H);\n    jpan.add(hmrcheck, cc.xy(4, 2));\n\n    abbrechen = new JButton(\"abbrechen\");\n    abbrechen.setActionCommand(\"abbrechen\");\n    abbrechen.addActionListener(this);\n    abbrechen.addKeyListener(this);\n    abbrechen.setMnemonic(KeyEvent.VK_A);\n    jpan.add(abbrechen, cc.xy(6, 2));\n\n    return jpan;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3122, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)", "jButton.setBounds(int,int,int,int)", "jButton.setText(String)", "jButton.setForeground(Color)", "jButton.setOpaque(boolean)", "jButton.setContentAreaFilled(boolean)"], "configurationStart": [37, 78, 121, 153, 196, 229], "configurationEnd": [72, 115, 147, 190, 223, 267], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 273, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Alekseylv/Poker-game/tree/master/Poker/src/poker/GUI/ClientView.java", "rawCode": "  private JButton foldButton() {\n    foldButton.setActionCommand(\"fold\");\n    foldButton.setBounds(15, 562, 85, 30);\n    foldButton.setText(\"FOLD\");\n    foldButton.setForeground(Color.WHITE);\n    foldButton.setOpaque(false);\n    foldButton.setContentAreaFilled(false);\n    foldButton.addActionListener(this);\n    return foldButton;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3123, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setToolTipText(String)", "jButton.setIcon(ColourIcon)"], "configurationStart": [2575, 2638], "configurationEnd": [2632, 2673], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 2679, "focalAPIEnd": 2713, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/splat/src/main/uk/ac/starlink/splat/iface/SplatSelectedProperties.java", "rawCode": "  /** Add all the components for display the spectrum properties. */\n  protected void initUI() {\n    GridBagLayouter layouter = new GridBagLayouter(this, GridBagLayouter.SCHEME3);\n    layouter.setInsets(new Insets(2, 5, 0, 2));\n\n    // Set up the two name display controls. These are different\n    // from others in that they fill all remaining columns,\n    // rather than allowing a strut to take up all the horizontal\n    // space.\n    layouter.add(\"Short name:\", false);\n    layouter.add(shortName, true);\n    shortName.setToolTipText(\"Symbolic name of spectrum, press return to accept edits\");\n\n    layouter.add(\"Full name:\", false);\n    layouter.add(fullName, true);\n    fullName.setToolTipText(\"Full name of spectrum (usually filename)\");\n\n    // The name field can be editted.\n    shortName.addActionListener(this);\n\n    // Set up the spectrum data format control.\n    layouter.add(\"Format:\", false);\n    layouter.add(format, true);\n\n    format.setToolTipText(\"Data type used for storage of spectrum\");\n\n    // Column selection.\n    layouter.add(\"Columns:\", false);\n    JPanel columnPanel = new JPanel(new GridLayout(2, 3));\n    columnPanel.add(new JLabel(\"Coordinates\", SwingConstants.CENTER));\n    columnPanel.add(new JLabel(\"Data\", SwingConstants.CENTER));\n    columnPanel.add(new JLabel(\"Errors\", SwingConstants.CENTER));\n    columnPanel.add(coordColumn);\n    columnPanel.add(dataColumn);\n    columnPanel.add(errorColumn);\n    layouter.add(columnPanel, false);\n    layouter.eatLine();\n\n    coordColumn.addActionListener(this);\n    dataColumn.addActionListener(this);\n    errorColumn.addActionListener(this);\n\n    coordColumn.setToolTipText(\"Name of coordinates column\");\n    dataColumn.setToolTipText(\"Name of data values column\");\n    errorColumn.setToolTipText(\"Name of data errors column\");\n    coordColumn.setEnabled(false);\n    dataColumn.setEnabled(false);\n    errorColumn.setEnabled(false);\n\n    /*\n    * layouter.add(\"Data type: \");\n    JPanel dataTypePanel = new JPanel();\n    dataTypePanel.add(objectTypeBox);\n    objectTypeBox.setSelectedItem(ObjectTypeEnum.SPECTRUM);\n    objectTypeBox.setToolTipText(\"type of plot for specific datatype\");\n    objectTypeBox.addActionListener(this);\n    layouter.add(dataTypePanel, false);\n    layouter.eatLine();\n    */\n\n    // Set up the line colour control. Note it, saveProp and resetProp go\n    // on same line.\n    JPanel colourSaveResetPanel = new JPanel();\n    layouter.add(\"Colour:\", false);\n    layouter.add(colourSaveResetPanel, false);\n    layouter.eatLine();\n\n    colourSaveResetPanel.add(lineColour);\n    lineColour.setToolTipText(\"Choose a colour for spectrum\");\n    lineColour.setIcon(linesColourIcon);\n    lineColour.addActionListener(this);\n\n    // Save rendering properties button.\n    saveProp.setText(\"Save\");\n    colourSaveResetPanel.add(saveProp);\n    saveProp.setToolTipText(\"Save spectrum renderingproperties as default\");\n    saveProp.addActionListener(this);\n\n    // Reset rendering properties button.\n    resetProp.setText(\"Reset\");\n    colourSaveResetPanel.add(resetProp);\n    resetProp.setToolTipText(\"Reset spectrum rendering properties to default\");\n    resetProp.addActionListener(this);\n\n    // AlphaComposite value.\n    layouter.add(\"Composite:\", false);\n    layouter.add(alphaValue, false);\n    alphaValue.setSelectedIndex(COMPOSITE_NAMES.length - 1);\n    alphaValue.addActionListener(this);\n\n    layouter.eatLine();\n\n    // Set up the line type control.\n    layouter.add(\"Line type:\", false);\n    layouter.add(lineType, false);\n    layouter.eatLine();\n    lineType.setToolTipText(\"Type used to render the spectrum\");\n\n    lineType.addActionListener(this);\n\n    // The thickness and style are joined into a single line.\n    JPanel lineProps = new JPanel();\n    GridBagLayouter layouter2 = new GridBagLayouter(lineProps, GridBagLayouter.SCHEME3);\n\n    // Set up the line thickness control.\n    thickness.setToolTipText(\"Width of spectrum when draw as a line\");\n    for (int i = 1; i < 20; i++) {\n      thickness.addItem(new Integer(i));\n    }\n    thickness.addActionListener(this);\n\n    // Set up the line style control.\n    lineStyle.setToolTipText(\"Type of line style used when drawing spectrum\");\n    lineStyle.addActionListener(this);\n\n    // Add controls to this combined line.\n    layouter2.add(thickness, false);\n    layouter2.add(\"Style:\", false);\n    layouter2.add(lineStyle, false);\n    layouter2.eatLine();\n\n    // Label this line (need this for aligned purposes) and add the\n    // combined thickness and style component.\n    layouter.add(\"Line width:\", false);\n    layouter.add(lineProps, false);\n    layouter.eatLine();\n\n    // The point type and size are joined into a single line.\n    JPanel pointProps = new JPanel();\n    layouter2 = new GridBagLayouter(pointProps, GridBagLayouter.SCHEME3);\n\n    // Set up the point type control.\n    pointType.setToolTipText(\"Type of points used when drawing spectrum\");\n    pointType.addActionListener(this);\n\n    // And point size.\n    pointSize.setToolTipText(\"Size of the points used when drawing spectrum\");\n    for (int i = 1; i < 32; i++) {\n      pointSize.addItem(new Double(i));\n    }\n    pointSize.addActionListener(this);\n\n    layouter2.add(pointType, false);\n    layouter2.add(\"Size:\", false);\n    layouter2.add(pointSize, false);\n    layouter2.eatLine();\n\n    layouter.add(\"Point type:\", false);\n    layouter.add(pointProps, false);\n    layouter.eatLine();\n\n    // Set up the errorbar display control.\n    JPanel errorControls = new JPanel();\n    layouter2 = new GridBagLayouter(errorControls, GridBagLayouter.SCHEME3);\n    errorControls.add(errors);\n\n    errors.setToolTipText(\"Enabled if errors available, ticked to display error bars\");\n    errors.addActionListener(this);\n\n    // Add additional button for setting the error bar colour.\n    errorsColour.setIcon(errorsColourIcon);\n    layouter2.add(errorsColour, false);\n\n    errorsColour.setToolTipText(\"Choose a colour for error bars\");\n    errorsColour.addActionListener(this);\n\n    // Number of sigma plotted for error bars.\n    for (int i = 1; i < 6; i++) {\n      errorScale.addItem(new Integer(i));\n    }\n    errorScale.setToolTipText(\"Set number of sigma shown for error bars\");\n    errorScale.addActionListener(this);\n    layouter2.add(errorScale, false);\n\n    // Frequency of error bars (1, 2, 3, 4, 5, 6, 7, 8, 9 ... 20)\n    for (int i = 1; i < 21; i++) {\n      errorFrequency.addItem(new Integer(i));\n    }\n    errorFrequency.setToolTipText(\"Set frequency for drawing error bars\");\n    errorFrequency.addActionListener(this);\n    layouter2.add(errorFrequency, false);\n    layouter2.eatLine();\n\n    // Add the main error control component.\n    layouter.add(\"Error bars:\", false);\n    layouter.add(errorControls, false);\n    layouter.eatSpare();\n\n    // Set the default values.\n    renProps.restore();\n\n    // Set up the listSelectionListener so that we can update\n    // interface.\n    specList.addListSelectionListener(\n        new ListSelectionListener() {\n          public void valueChanged(ListSelectionEvent e) {\n            update(e);\n          }\n        });\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3124, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [631], "initializationEnd": [661], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 667, "focalAPIEnd": 704, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [751], "useEnd": [786], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gonr1001/diamant/tree/master/src/dInterface/dAssignementDlgs/DxEditEventDlg.java", "rawCode": "  private JPanel buildInstructorPanel(DxEvent event, int index) {\n    int WIDTH_INSTRUCTOR_PANEL = 170;\n    int HEIGTH_INSTRUCTOR_PANEL = 120;\n    JPanel localPanel = new JPanel();\n    JPanel instructorsPanel = new JPanel();\n    Vector<String> vect = buildCurrentInstructorList(event);\n    _instructorsLists[index] = new JList(vect.toArray());\n    _jScrollPane = new JScrollPane(_instructorsLists[index]);\n    _jScrollPane.setPreferredSize(new Dimension(WIDTH_INSTRUCTOR_PANEL, HEIGTH_INSTRUCTOR_PANEL));\n\n    instructorsPanel.setBorder(new TitledBorder(new EtchedBorder(), DConst.R_INSTRUCTOR_NAME));\n\n    JButton jButtonChange = new JButton(DConst.BUT_CHANGE);\n    jButtonChange.addActionListener(this);\n\n    instructorsPanel.add(_jScrollPane);\n    instructorsPanel.add(jButtonChange); // to be used when adding\n    // instructors\n    localPanel.add(instructorsPanel);\n    return localPanel;\n  } // end buildInstructorPanel\n"}, {"dataset": "addActionListener", "exampleID": 3125, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 69, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/morrisford/OPenWonderland-Protocol/tree/master/modules/tools/audio-manager/src/classes/org/jdesktop/wonderland/modules/audiomanager/client/voicechat/InProgressButtonPanel.java", "rawCode": "  public void addHangUpButtonListener(ActionListener listener) {\n    hangUpButton.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3126, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [392], "initializationEnd": [427], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 543, "focalAPIEnd": 578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/src/share/classes/sun/tools/jconsole/inspector/XOpenTypeViewer.java", "rawCode": "  private void setupDisplay(XOpenTypeData data) {\n    setBackground(Color.white);\n    container =\n        new JScrollPane(\n            data,\n            JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,\n            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n\n    JPanel buttons = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    tabularPrev = new JButton(Resources.getText(\"<\"));\n    tabularNext = new JButton(Resources.getText(\">\"));\n    JPanel tabularButtons = new JPanel(new FlowLayout(FlowLayout.LEFT));\n    tabularButtons.add(tabularPrev);\n    tabularPrev.addActionListener(this);\n    tabularLabel = new JLabel(tabularNavigationSingle);\n    tabularLabel.setEnabled(false);\n    tabularButtons.add(tabularLabel);\n    tabularButtons.add(tabularNext);\n    tabularNext.addActionListener(this);\n    tabularButtons.setBackground(Color.white);\n\n    prev = new JButton(Resources.getText(\"<<\"));\n    prev.addActionListener(this);\n    buttons.add(prev);\n\n    incr = new JButton(Resources.getText(\">\"));\n    incr.addActionListener(this);\n    decr = new JButton(Resources.getText(\"<\"));\n    decr.addActionListener(this);\n\n    JPanel array = new JPanel();\n    array.setBackground(Color.white);\n    array.add(decr);\n    compositeLabel = new JLabel(compositeNavigationSingle);\n    compositeLabel.setEnabled(false);\n    array.add(compositeLabel);\n    array.add(incr);\n\n    buttons.add(array);\n    setLayout(new BorderLayout());\n    buttons.setBackground(Color.white);\n\n    JPanel navigationPanel = new JPanel(new BorderLayout());\n    navigationPanel.setBackground(Color.white);\n    navigationPanel.add(tabularButtons, BorderLayout.NORTH);\n    navigationPanel.add(buttons, BorderLayout.WEST);\n    add(navigationPanel, BorderLayout.NORTH);\n\n    add(container, BorderLayout.CENTER);\n    Dimension d =\n        new Dimension(\n            (int) container.getPreferredSize().getWidth() + 20,\n            (int) container.getPreferredSize().getHeight() + 20);\n    setPreferredSize(d);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3127, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 63, "focalAPIEnd": 100, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tizzit/tizzit/tree/master/tizzit-richclient/src/main/java/de/juwimm/cms/content/panel/PanPictures.java", "rawCode": "  public void addCancelListener(ActionListener listener) {\n    btnCancel.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3128, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 219, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton,*)"], "useStart": [266], "useEnd": [322], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stapelberg/vsy-bullshit/tree/master/JavaClientBullshitBingo/src/hsma/ss2011/vsy/GamePanel.java", "rawCode": "  /** Draw the Panel containing the playerList and leaveButton */\n  private void drawInformationPanel() {\n    this.infoPanel = new JPanel(new BorderLayout());\n\n    this.leaveButton = new JButton(\"Spiel verlassen\");\n    this.leaveButton.addActionListener(this);\n\n    this.infoPanel.add(this.leaveButton, BorderLayout.SOUTH);\n    this.renewPlayerList();\n    this.add(this.infoPanel, BorderLayout.EAST);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3129, "initialization": ["ActionListener l = new ActionListener()", "JButton jButton = new JButton(*)"], "initializationStart": [167, 1006], "initializationEnd": [371, 1039], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1045, "focalAPIEnd": 1083, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [1089], "useEnd": [1104], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/concord-consortium/mw/tree/master/src/org/concord/modeler/PageXYGraphMaker.java", "rawCode": "  private void createContentPane() {\n\n    if (contentPane != null) return;\n\n    contentPane = new JPanel(new BorderLayout());\n\n    ActionListener okListener =\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            if (confirm()) {\n              cancel = false;\n              dialog.dispose();\n            }\n          }\n        };\n\n    yComboBox = new JComboBox[MAX];\n    smootherComboBox = new JComboBox[MAX];\n    yMultiplierField = new FloatNumberTextField[MAX];\n    yAddendField = new FloatNumberTextField[MAX];\n    lineWidthComboBox = new JComboBox[MAX];\n    lineColorComboBox = new ColorComboBox[MAX];\n    lineStyleComboBox = new JComboBox[MAX];\n    lineSymbolComboBox = new JComboBox[MAX];\n    symbolSizeSpinner = new JSpinner[MAX];\n    symbolSpacingSpinner = new JSpinner[MAX];\n\n    JPanel p = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n    contentPane.add(p, BorderLayout.SOUTH);\n\n    String s = Modeler.getInternationalText(\"OKButton\");\n    okButton = new JButton(s != null ? s : \"OK\");\n    okButton.addActionListener(okListener);\n    p.add(okButton);\n\n    s = Modeler.getInternationalText(\"CancelButton\");\n    JButton button = new JButton(s != null ? s : \"Cancel\");\n    button.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            dialog.dispose();\n            cancel = true;\n          }\n        });\n    p.add(button);\n\n    s = Modeler.getInternationalText(\"Help\");\n    button = new JButton(s != null ? s : \"Help\");\n    button.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            Modeler.openWithNewInstance(\n                pageXYGraph.getPage().getNavigator().getHomeDirectory()\n                    + \"tutorial/insertXYGraph.cml\");\n          }\n        });\n    p.add(button);\n\n    p = new JPanel(new BorderLayout(10, 10));\n    p.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));\n    contentPane.add(p, BorderLayout.CENTER);\n\n    for (int n = 0; n < MAX; n++) {\n      yComboBox[n] = new JComboBox();\n      yComboBox[n].setFont(smallFont);\n      yComboBox[n].setToolTipText(\n          \"Select the time series output to represent y\" + (n + 1) + \" variable.\");\n    }\n\n    JPanel box = new JPanel(new GridLayout(1, 2, 5, 5));\n    p.add(box, BorderLayout.CENTER);\n\n    JPanel p2 = new JPanel(new SpringLayout());\n    p2.setPreferredSize(new Dimension(300, 300));\n    box.add(p2);\n\n    // row 1\n    s = Modeler.getInternationalText(\"SelectModelLabel\");\n    p2.add(new JLabel(s != null ? s : \"Select a model\", SwingConstants.LEFT));\n    modelComboBox = new JComboBox();\n    if (smallFont == null)\n      smallFont =\n          new Font(modelComboBox.getFont().getFamily(), modelComboBox.getFont().getStyle(), 10);\n    modelComboBox.setFont(smallFont);\n    modelComboBox.setRenderer(new LabelRenderer());\n    modelComboBox.setToolTipText(\n        \"If there are multiple models on the page, select the one that outputs to this X-Y graph.\");\n    p2.add(modelComboBox);\n\n    // row 2\n    s = Modeler.getInternationalText(\"SelectVariableLabel\");\n    p2.add(new JLabel((s != null ? s : \"Select a variable to be \") + \"X\", SwingConstants.LEFT));\n    xComboBox = new JComboBox();\n    xComboBox.setFont(smallFont);\n    xComboBox.setToolTipText(\"Select the time series output to represent x variable.\");\n    p2.add(xComboBox);\n\n    // row 3\n    s = Modeler.getInternationalText(\"UniqueIdentifier\");\n    p2.add(new JLabel(s != null ? s : \"Unique identifier\", SwingConstants.LEFT));\n    uidField = new JTextField();\n    uidField.setToolTipText(\n        \"Type in a string to be used as the unique identifier of this X-Y graph.\");\n    uidField.addActionListener(okListener);\n    p2.add(uidField);\n\n    // row 4\n    p2.add(new JLabel(\"Multiplier for X\", SwingConstants.LEFT));\n    xMultiplierField =\n        new FloatNumberTextField(pageXYGraph.xMultiplier, -Float.MAX_VALUE, Float.MAX_VALUE);\n    xMultiplierField.setToolTipText(\"Type in a value to multiply the x output.\");\n    p2.add(xMultiplierField);\n\n    // row 5\n    p2.add(new JLabel(\"Addend to X\", SwingConstants.LEFT));\n    xAddendField = new FloatNumberTextField(pageXYGraph.xAddend, -Float.MAX_VALUE, Float.MAX_VALUE);\n    xAddendField.setToolTipText(\"Type in a value to be added to the x output.\");\n    p2.add(xAddendField);\n\n    // row 6\n    s = Modeler.getInternationalText(\"TitleForXAxis\");\n    p2.add(new JLabel(s != null ? s : \"Title for X axis\", SwingConstants.LEFT));\n    xLabelTextField = new JTextField(\"x\");\n    xLabelTextField.addActionListener(okListener);\n    xLabelTextField.setToolTipText(\"Type in the title for the x axis.\");\n    p2.add(xLabelTextField);\n\n    // row 7\n    s = Modeler.getInternationalText(\"TitleForYAxis\");\n    p2.add(new JLabel(s != null ? s : \"Title for Y axis\", SwingConstants.LEFT));\n    yLabelTextField = new JTextField(\"y\");\n    yLabelTextField.addActionListener(okListener);\n    yLabelTextField.setToolTipText(\"Type in the title for the y axis.\");\n    p2.add(yLabelTextField);\n\n    // row 8\n    s = Modeler.getInternationalText(\"AutoScaleXAxis\");\n    p2.add(new JLabel(s != null ? s : \"Auto scale X axis\", SwingConstants.LEFT));\n    String[] yesno = new String[] {\"Yes\", \"No\"};\n    s = Modeler.getInternationalText(\"Yes\");\n    if (s != null) yesno[0] = s;\n    s = Modeler.getInternationalText(\"No\");\n    if (s != null) yesno[1] = s;\n    autoScaleXComboBox = new JComboBox(yesno);\n    autoScaleXComboBox.setToolTipText(\"Select yes to auto-scale the x axis; select no otherwise.\");\n    autoScaleXComboBox.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            if (e.getStateChange() == ItemEvent.SELECTED)\n              enableScopeXFields(autoScaleXComboBox.getSelectedIndex() == 1);\n          }\n        });\n    p2.add(autoScaleXComboBox);\n\n    // row 9\n    s = Modeler.getInternationalText(\"AutoScaleYAxis\");\n    p2.add(new JLabel(s != null ? s : \"Auto scale Y axis\", SwingConstants.LEFT));\n    autoScaleYComboBox = new JComboBox(yesno);\n    autoScaleYComboBox.setToolTipText(\"Select yes to auto-scale the y axis; select no otherwise.\");\n    autoScaleYComboBox.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            if (e.getStateChange() == ItemEvent.SELECTED)\n              enableScopeYFields(autoScaleYComboBox.getSelectedIndex() == 1);\n          }\n        });\n    p2.add(autoScaleYComboBox);\n\n    // row 10\n    s = Modeler.getInternationalText(\"AutoUpdate\");\n    p2.add(new JLabel(s != null ? s : \"Auto update\", SwingConstants.LEFT));\n    autoUpdateComboBox = new JComboBox(yesno);\n    autoUpdateComboBox.setToolTipText(\"Select yes to auto-update the graph; select no otherwise.\");\n    autoUpdateComboBox.addItemListener(\n        new ItemListener() {\n          public void itemStateChanged(ItemEvent e) {\n            if (e.getStateChange() == ItemEvent.SELECTED)\n              pageXYGraph.autoUpdate = autoUpdateComboBox.getSelectedIndex() == 0;\n          }\n        });\n    p2.add(autoUpdateComboBox);\n\n    // row 11\n    s = Modeler.getInternationalText(\"InsideBackgroundColor\");\n    p2.add(new JLabel(s != null ? s : \"Inside background color\", SwingConstants.LEFT));\n    fgComboBox = new ColorComboBox(pageXYGraph);\n    fgComboBox.setSelectedIndex(6);\n    fgComboBox.setToolTipText(\"Select graph window background color.\");\n    fgComboBox.setRequestFocusEnabled(false);\n    p2.add(fgComboBox);\n\n    // row 12\n    s = Modeler.getInternationalText(\"OutsideBackgroundColor\");\n    p2.add(new JLabel(s != null ? s : \"Outside background color\", SwingConstants.LEFT));\n    bgComboBox = new ColorComboBox(pageXYGraph);\n    bgComboBox.setSelectedIndex(6);\n    bgComboBox.setToolTipText(\"Select the background color for the pane outside the graph window.\");\n    bgComboBox.setRequestFocusEnabled(false);\n    p2.add(bgComboBox);\n\n    // row 13\n    s = Modeler.getInternationalText(\"BorderLabel\");\n    p2.add(new JLabel(s != null ? s : \"Outside border type\", SwingConstants.LEFT));\n    borderComboBox = new JComboBox(BorderManager.BORDER_TYPE);\n    borderComboBox.setRenderer(new ComboBoxRenderer.BorderCell());\n    borderComboBox.setBackground(p2.getBackground());\n    borderComboBox.setToolTipText(\"Select the border type.\");\n    p2.add(borderComboBox);\n\n    ModelerUtilities.makeCompactGrid(p2, 13, 2, 5, 5, 10, 2);\n\n    p2 = new JPanel(new GridLayout(1, 2, 5, 5));\n    p.add(p2, BorderLayout.SOUTH);\n\n    JPanel temp = new JPanel(new GridLayout(2, 4, 5, 5));\n    s = Modeler.getInternationalText(\"GraphSize\");\n    String s1 = Modeler.getInternationalText(\"LegendPosition\");\n    temp.setBorder(\n        BorderFactory.createTitledBorder(\n            BorderFactory.createEtchedBorder(),\n            s != null ? s + \",\" + s1 : \"Size and legends\",\n            0,\n            0));\n    p2.add(temp, BorderLayout.WEST);\n\n    s = Modeler.getInternationalText(\"WidthLabel\");\n    temp.add(new JLabel(s != null ? s : \"Width\", SwingConstants.LEFT));\n\n    widthField = new IntegerTextField(250, 100, 1000);\n    widthField.setToolTipText(\"Type in the width for this graph.\");\n    widthField.addActionListener(okListener);\n    temp.add(widthField);\n\n    s = Modeler.getInternationalText(\"HeightLabel\");\n    temp.add(new JLabel(s != null ? s : \"Height\", SwingConstants.LEFT));\n\n    heightField = new IntegerTextField(300, 100, 600);\n    heightField.setToolTipText(\"Type in the height for this graph.\");\n    heightField.addActionListener(okListener);\n    temp.add(heightField);\n\n    temp.add(new JLabel((s1 != null ? s1 : \"Legend\") + \" X\", SwingConstants.LEFT));\n\n    legendXField = new IntegerTextField(pageXYGraph.getGraph().getWidth() - 80, 0, 600);\n    legendXField.setToolTipText(\"Type in the x coordinate for the legend.\");\n    legendXField.addActionListener(okListener);\n    temp.add(legendXField);\n\n    temp.add(new JLabel((s1 != null ? s1 : \"Legend\") + \" Y\", SwingConstants.LEFT));\n\n    legendYField = new IntegerTextField(pageXYGraph.getGraph().borderTop + 15, 0, 600);\n    legendYField.setToolTipText(\"Type in the y coordinate for the legend.\");\n    legendYField.addActionListener(okListener);\n    temp.add(legendYField);\n\n    temp = new JPanel(new GridLayout(2, 4, 5, 5));\n    s = Modeler.getInternationalText(\"SetDrawingRange\");\n    temp.setBorder(\n        new javax.swing.border.TitledBorder(\n            BorderFactory.createEtchedBorder(),\n            s != null ? s : \"If not automatically fit to the window, set the drawing range\",\n            0,\n            0));\n    p2.add(temp, BorderLayout.EAST);\n\n    scopeField = new JTextField[4];\n    scopeLabel = new JLabel[4];\n\n    scopeLabel[0] = new JLabel(\"Xmin\");\n    temp.add(scopeLabel[0]);\n\n    scopeField[0] = new JTextField(\"Auto\");\n    scopeField[0].setToolTipText(\"Type in a value for xmin if not auto-scaling the x axis\");\n    scopeField[0].addActionListener(okListener);\n    temp.add(scopeField[0]);\n\n    scopeLabel[1] = new JLabel(\"Ymin\");\n    temp.add(scopeLabel[1]);\n\n    scopeField[1] = new JTextField(\"Auto\");\n    scopeField[1].setToolTipText(\"Type in a value for ymin if not auto-scaling the y axis\");\n    scopeField[1].addActionListener(okListener);\n    temp.add(scopeField[1]);\n\n    scopeLabel[2] = new JLabel(\"Xmax\");\n    temp.add(scopeLabel[2]);\n\n    scopeField[2] = new JTextField(\"Auto\");\n    scopeField[2].setToolTipText(\"Type in a value for xmax if not auto-scaling the x axis\");\n    scopeField[2].addActionListener(okListener);\n    temp.add(scopeField[2]);\n\n    scopeLabel[3] = new JLabel(\"Ymax\");\n    temp.add(scopeLabel[3]);\n\n    scopeField[3] = new JTextField(\"Auto\");\n    scopeField[3].setToolTipText(\"Type in a value for ymax if not auto-scaling the y axis\");\n    scopeField[3].addActionListener(okListener);\n    temp.add(scopeField[3]);\n\n    enableScopeXFields(false);\n    enableScopeYFields(false);\n\n    tabbedPane = new JTabbedPane();\n    box.add(tabbedPane);\n\n    for (int i = 0; i < MAX; i++) {\n      tabbedPane.addTab(\"Y\" + (i + 1), createLine(i, okListener));\n    }\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3130, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [50], "initializationEnd": [69], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 75, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton,GridBagConstraints)"], "useStart": [337], "useEnd": [375], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rowy/Battleships/tree/master/battleships-presentation/src/main/java/com/jostrobin/battleships/view/panels/ChatPanel.java", "rawCode": "  private void addSendButton() {\n    sendButton = new JButton(\"Send\");\n    sendButton.addActionListener(this);\n    GridBagConstraints sendButtonConstraints = new GridBagConstraints();\n    sendButtonConstraints.gridy = y++;\n    sendButtonConstraints.anchor = GridBagConstraints.BASELINE_TRAILING;\n    sendButtonConstraints.gridx = 1;\n    add(sendButton, sendButtonConstraints);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3131, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 41, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["registerEventType(jButton,*)"], "useStart": [112], "useEnd": [235], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bartvbl/PizzaProgram/tree/master/projectNameHere/ourGreatProgram/netbeans_project/netbeans_project_v0_03/src/pizzaprogram/events/moduleEventHandlers/OrderGUI_OrderViewEventHandler.java", "rawCode": "  private void addEventListeners() {\n    this.orderView.searchCustomerSearchButton.addActionListener(this);\n    this.registerEventType(\n        this.orderView.searchCustomerSearchButton, EventType.DATABASE_SEARCH_CUSTOMER_INFO_BY_NAME);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3132, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 72, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/facetoe/JReader/tree/master/src/com/facetoe/jreader/ui/TopPanel.java", "rawCode": "  public void addBtnSearchActionListener(ActionListener listener) {\n    btnSearch.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3133, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [680], "initializationEnd": [697], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [703], "configurationEnd": [730], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 736, "focalAPIEnd": 764, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton,*)"], "useStart": [770], "useEnd": [797], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/LVAEntlassmitteilung/src/lvaEntlassmitteilung/plusdatum.java", "rawCode": "  public JPanel getoberflaeche() {\n\n    FormLayout Pan1 = new FormLayout(\"10dlu,60dlu,5dlu,60dlu,10dlu\", \"10dlu,p,5dlu,p,5dlu\");\n    PanelBuilder pan1 = new PanelBuilder(Pan1);\n    pan1.getPanel().setOpaque(false);\n    CellConstraints cc = new CellConstraints();\n\n    al =\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            monthView.removeActionListener(al);\n            tf1.setText(sdf.format(monthView.getSelectionDate()));\n            doOk();\n          }\n        };\n\n    monthView = new JXMonthView();\n    monthView.setTraversable(true);\n    monthView.addActionListener(al);\n    pan1.add(monthView, cc.xyw(2, 2, 3));\n\n    bnr1 = new JButton(\"OK\");\n    bnr1.setActionCommand(\"ok\");\n    bnr1.addActionListener(this);\n    pan1.add(bnr1, cc.xy(2, 4));\n    bnr2 = new JButton(\"Abbrechen\");\n    bnr2.setActionCommand(\"abbrechen\");\n    bnr2.addActionListener(this);\n    pan1.add(bnr2, cc.xy(4, 4));\n\n    pan1.getPanel().validate();\n    return pan1.getPanel();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3134, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [144], "initializationEnd": [168], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setPreferredSize(Dimension)"], "configurationStart": [174], "configurationEnd": [220], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 226, "focalAPIEnd": 256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setActionCommand(String)", "jButton.addKeyListener(KeyListener)", "add(jButton,*)"], "useStart": [262, 302, 3634], "useEnd": [296, 329, 3671], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/Reha/src/systemEinstellungen/SysUtilKalendereinstell.java", "rawCode": "  /** ************ Beginn der Methode f�r die Objekterstellung und -platzierung ******** */\n  private JPanel getVorlagenSeite() {\n\n    knopf2 = new JButton(\"abbrechen\");\n    knopf2.setPreferredSize(new Dimension(70, 20));\n    knopf2.addActionListener(this);\n    knopf2.setActionCommand(\"abbruch\");\n    knopf2.addKeyListener(this);\n    knopf1 = new JButton(\"speichern\");\n    knopf1.setPreferredSize(new Dimension(70, 20));\n    knopf1.addActionListener(this);\n    knopf1.setActionCommand(\"speichern\");\n    knopf1.addKeyListener(this);\n    knopf3 = new JButton(\"entsperren\");\n    knopf3.addActionListener(this);\n    knopf3.setActionCommand(\"unlock\");\n    knopf3.addKeyListener(this);\n\n    Fortschritt = new JProgressBar();\n\n    String[] refreshtakt = {\"Einzel-PC\", \"LAN\", \"DSL\"};\n    refresh = new JComboBox(refreshtakt);\n\n    scan = new JCheckBox();\n    scan.setSelected(SystemConfig.KalenderBarcode);\n    langmenu = new JCheckBox();\n    langmenu.setSelected(SystemConfig.KalenderLangesMenue);\n    zeitzeigen = new JCheckBox();\n    zeitzeigen.setSelected(SystemConfig.KalenderZeitLabelZeigen);\n    timelinezeigen = new JCheckBox();\n    timelinezeigen.setSelected(SystemConfig.KalenderTimeLineZeigen);\n\n    STD1 = new JRtaTextField(\"STUNDEN\", true);\n    STD1.setText(SystemConfig.KalenderUmfang[0].substring(0, 2));\n    STD2 = new JRtaTextField(\"STUNDEN\", true);\n    STD2.setText(SystemConfig.KalenderUmfang[1].substring(0, 2));\n    MIN1 = new JRtaTextField(\"MINUTEN\", true);\n    MIN1.setText(SystemConfig.KalenderUmfang[0].substring(3, 5));\n    MIN1.setName(\"MIN1\");\n    // MIN1.addKeyListener(this);\n    MIN1.addFocusListener(this);\n    MIN2 = new JRtaTextField(\"MINUTEN\", true);\n    MIN2.setText(SystemConfig.KalenderUmfang[1].substring(3, 5));\n    MIN2.setName(\"MIN2\");\n    // MIN2.addKeyListener(this);\n    MIN2.addFocusListener(this);\n\n    // 1. 2. 3. 4. 5. 6. 7. 8. 9.\n    FormLayout lay =\n        new FormLayout(\n            \"left:max(120dlu;p), 20dlu, 15dlu, 3dlu, 4dlu, 3dlu, 15dlu\",\n            // 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23.\n            // 24. 25.\n            \"p, 2dlu, p, 10dlu, p, 10dlu, p, 10dlu, p, 10dlu, p, 10dlu, p, 10dlu, p, 10dlu, p, 10dlu, p, 15dlu, p, 2dlu, p, 10dlu, p, 10dlu, p\");\n\n    PanelBuilder builder = new PanelBuilder(lay);\n    builder.setDefaultDialogBorder();\n    builder.getPanel().setOpaque(false);\n    CellConstraints cc = new CellConstraints();\n\n    builder.addLabel(\"Tagesbeginn im Kalender\", cc.xy(1, 1));\n    builder.add(STD1, cc.xy(3, 1));\n    builder.addLabel(\":\", cc.xy(5, 1));\n    builder.add(MIN1, cc.xy(7, 1));\n    builder.addLabel(\"Tagesende im Kalender\", cc.xy(1, 3));\n    builder.add(STD2, cc.xy(3, 3));\n    builder.addLabel(\":\", cc.xy(5, 3));\n    builder.add(MIN2, cc.xy(7, 3));\n    builder.addLabel(\"Refresh-Takt\", cc.xy(1, 5));\n    builder.add(refresh, cc.xyw(3, 5, 5));\n    builder.addLabel(\"Barcodescanner für Behandlungsbestätigungen\", cc.xy(1, 7));\n    builder.add(scan, cc.xy(7, 7, CellConstraints.RIGHT, CellConstraints.BOTTOM));\n    builder.addLabel(\"Langes Menü anzeigen\", cc.xy(1, 9));\n    builder.add(langmenu, cc.xy(7, 9, CellConstraints.RIGHT, CellConstraints.BOTTOM));\n    builder.addLabel(\"Uhrzeit an Mausposition anzeigen\", cc.xy(1, 11));\n    builder.add(zeitzeigen, cc.xy(7, 11, CellConstraints.RIGHT, CellConstraints.BOTTOM));\n    builder.addLabel(\"Linie für aktuelle Uhrzeit anzeigen\", cc.xy(1, 13));\n    builder.add(timelinezeigen, cc.xy(7, 13, CellConstraints.RIGHT, CellConstraints.BOTTOM));\n\n    builder.addSeparator(\"\", cc.xyw(1, 15, 7));\n    builder.addLabel(\"Abbruch ohne Übernahme\", cc.xy(1, 17));\n    builder.add(knopf2, cc.xyw(3, 17, 5));\n    builder.addLabel(\"Parameter übernehmen\", cc.xy(1, 19));\n    builder.add(knopf1, cc.xyw(3, 19, 5));\n    builder.addLabel(\n        \"Fortschritt beim Verändern der Datenbank\",\n        cc.xy(1, 23, CellConstraints.LEFT, CellConstraints.BOTTOM));\n    builder.add(Fortschritt, cc.xyw(1, 23, 7));\n    builder.addSeparator(\"\", cc.xyw(1, 25, 7));\n    builder.addLabel(\"gesperrte Spalten freigeben\", cc.xy(1, 27));\n    builder.add(knopf3, cc.xyw(3, 27, 5));\n    SwingUtilities.invokeLater(\n        new Runnable() {\n          public void run() {\n            STD1.requestFocus();\n          }\n        });\n\n    return builder.getPanel();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3135, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [297], "initializationEnd": [407], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 762, "focalAPIEnd": 808, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HUSACCT/HUSACCT/tree/master/src/husacct/define/presentation/jdialog/AppliedRuleJDialog.java", "rawCode": "  private JPanel createExceptionsButtonPanel() {\n    JPanel exceptionsButtonPanel = new JPanel();\n    exceptionsButtonPanel.setLayout(this.createExceptionsButtonPanelLayout());\n    exceptionsButtonPanel.setBorder(BorderFactory.createEmptyBorder(0, 3, 0, 3));\n\n    jButtonAddExceptionRow =\n        new JButton(\n            ServiceProvider.getInstance().getLocaleService().getTranslatedString(\"AddException\"));\n    exceptionsButtonPanel.add(\n        jButtonAddExceptionRow,\n        new GridBagConstraints(\n            0,\n            0,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.FIRST_LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n    jButtonAddExceptionRow.addActionListener(this);\n\n    jButtonRemoveExceptionRow =\n        new JButton(\n            ServiceProvider.getInstance()\n                .getLocaleService()\n                .getTranslatedString(\"RemoveException\"));\n    exceptionsButtonPanel.add(\n        jButtonRemoveExceptionRow,\n        new GridBagConstraints(\n            0,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.FIRST_LINE_START,\n            GridBagConstraints.HORIZONTAL,\n            new Insets(0, 0, 0, 0),\n            0,\n            0));\n    jButtonRemoveExceptionRow.addActionListener(this);\n\n    return exceptionsButtonPanel;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3136, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 59, "focalAPIEnd": 95, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apic6/MELT/tree/master/src/Viewer/Welcome.java", "rawCode": "  public static void addListener(ActionListener mal) {\n    teacherButton.addActionListener(mal);\n    studentButton.addActionListener(mal);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3137, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 60, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LeeCIT/overwatch/tree/master/overwatch/src/overwatch/gui/tabs/PersonnelTab.java", "rawCode": "  public void addPassChangeListener(ActionListener e) {\n    passChange.addActionListener(e);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3138, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [170], "initializationEnd": [186], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setToolTipText(String)", "jButton.setActionCommand(String)"], "configurationStart": [194, 262], "configurationEnd": [254, 312], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 320, "focalAPIEnd": 352, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JToolBar.add(jButton)"], "useStart": [360], "useEnd": [379], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/biomart/biomart-rc7/tree/master/src/org/biomart/configurator/view/component/container/SourceGroupPanel.java", "rawCode": "  private JToolBar getToolBar() {\n    JToolBar panel = new JToolBar();\n    panel.setBackground(ActionPanel.lightblue);\n    if (this.isgrouped) {\n      JButton gpButton = new JButton(\"G\");\n      gpButton.setToolTipText(\"show group data source management\");\n      gpButton.setActionCommand(\"groupsourcemanagement\");\n      gpButton.addActionListener(this);\n      panel.add(gpButton);\n    }\n\n    panel.setFloatable(false);\n    return panel;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3139, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 532, "focalAPIEnd": 602, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JButton.add(jButton)"], "useStart": [1234], "useEnd": [1283], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aspotton/xonotic/tree/master/misc/tools/NexuizDemoRecorder/main/src/main/java/com/nexuiz/demorecorder/ui/swinggui/SwingGUI.java", "rawCode": "  private void setupTemplatePanel() {\n    JPanel templatePanel =\n        new JPanel(new MigLayout(\"\", \"[500:500:,grow,fill][170!,fill,grow]\", \"[grow,fill]\"));\n    TitledBorder templatePanelTitle = BorderFactory.createTitledBorder(\"Templates\");\n    templatePanel.setBorder(templatePanelTitle);\n    getContentPane().add(templatePanel);\n\n    this.setupTemplatesTable();\n    this.loadTableStates(this.templatesTable);\n    JScrollPane templateScrollPane = new JScrollPane(templatesTable);\n    templatePanel.add(templateScrollPane);\n\n    this.templ_create.addActionListener(this.templateButtonActionListener);\n    this.templ_createFromJob.addActionListener(this.templateButtonActionListener);\n    this.templ_delete.addActionListener(this.templateButtonActionListener);\n    this.templ_clear.addActionListener(this.templateButtonActionListener);\n\n    this.templ_contextmenu_edit.addActionListener(this.templateButtonActionListener);\n    this.templ_contextmenu_duplicate.addActionListener(this.templateButtonActionListener);\n    this.templ_contextmenu_delete.addActionListener(this.templateButtonActionListener);\n\n    this.configureTableButtons();\n\n    JPanel templateControlButtonPanel = new JPanel(new MigLayout(\"wrap 1\", \"fill,grow\"));\n    templateControlButtonPanel.add(this.templ_create);\n    templateControlButtonPanel.add(this.templ_createFromJob);\n    templateControlButtonPanel.add(this.templ_delete);\n    templateControlButtonPanel.add(this.templ_clear);\n    templatePanel.add(templateControlButtonPanel);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3140, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [1142], "initializationEnd": [1173], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setToolTipText(String)"], "configurationStart": [1179], "configurationEnd": [1263], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1269, "focalAPIEnd": 1307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Box.add(jButton)"], "useStart": [1313], "useEnd": [1344], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Vyrolan/rmir/tree/master/km/com/hifiremote/jp1/CustomNameDialog.java", "rawCode": "  /**\n   * Creates the gui.\n   *\n   * @param owner the owner\n   * @param customNames the custom names\n   */\n  private void createGui(Component owner, String[] customNames) {\n    setLocationRelativeTo(owner);\n\n    textArea = new JTextArea(20, 20);\n    new TextPopupMenu(textArea);\n\n    if (customNames != null) {\n      for (int i = 0; i < customNames.length; i++) {\n        if (i != 0) textArea.append(\"\\n\");\n\n        textArea.append(customNames[i]);\n      }\n    }\n\n    Container contentPane = getContentPane();\n\n    JLabel instructions =\n        new JLabel(\"Enter the desired default functions names, one on each line.\");\n    instructions.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n    contentPane.add(instructions, BorderLayout.NORTH);\n\n    JScrollPane scroll = new JScrollPane(textArea);\n    scroll.setBorder(\n        BorderFactory.createCompoundBorder(\n            BorderFactory.createEmptyBorder(0, 5, 0, 5), scroll.getBorder()));\n    contentPane.add(scroll, BorderLayout.CENTER);\n\n    Box buttonPanel = Box.createHorizontalBox();\n    buttonPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\n    getButtonNames = new JButton(\"Get Button Names\");\n    getButtonNames.setToolTipText(\"Add the names of the buttons on the current remote.\");\n    getButtonNames.addActionListener(this);\n    buttonPanel.add(getButtonNames);\n\n    buttonPanel.add(Box.createHorizontalGlue());\n\n    ok = new JButton(\"OK\");\n    ok.addActionListener(this);\n    buttonPanel.add(ok);\n\n    buttonPanel.add(Box.createHorizontalStrut(5));\n\n    cancel = new JButton(\"Cancel\");\n    cancel.addActionListener(this);\n    buttonPanel.add(cancel);\n\n    contentPane.add(buttonPanel, BorderLayout.SOUTH);\n\n    pack();\n    Rectangle rect = getBounds();\n    int x = rect.x - rect.width / 2;\n    int y = rect.y - rect.height / 2;\n    setLocation(x, y);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3141, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 36, "focalAPIEnd": 93, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jjnguy/PublicFun/tree/master/GraphingCalc/src/ui/gui/MainFrame.java", "rawCode": "  private void addListeners() {\n    graphStraitLineButton.addActionListener(straightListener);\n    graphSinLineButton.addActionListener(sinListener);\n    graphCosLineButton.addActionListener(cosListener);\n    graphTanLineButton.addActionListener(tanListener);\n    graphPolynomialButton.addActionListener(polyListener);\n    absModeCheck.addChangeListener(absChange);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3142, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [601], "initializationEnd": [622], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setToolTipText(String)"], "configurationStart": [628], "configurationEnd": [678], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 684, "focalAPIEnd": 716, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [722], "useEnd": [747], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elitak/peertrust/tree/master/sandbox/Grid/gt4mfs/mfs/MathService/src/g4mfs/impl/crypto/KeyStorePanel.java", "rawCode": "  private void init(JFrame owner) {\n    CryptTools.installBouncyCastle();\n    pwdDialog = new PasswordDialog(owner);\n    this.setLayout(new BorderLayout());\n    try {\n      ks = KeyStore.getInstance(\"JKS\");\n    } catch (KeyStoreException e) {\n      handleException(e);\n    }\n    // build up the key /certificate list\n    buildAliasList();\n    aliasList.addListSelectionListener(this);\n    JScrollPane sp = new JScrollPane(aliasList);\n    this.add(sp, BorderLayout.WEST);\n\n    // init / add buttons\n    JPanel buttonPanel = new JPanel();\n    buttonPanel.setLayout(new GridLayout(4, 1));\n    createKS = new JButton(\"create\");\n    createKS.setToolTipText(\"Creates a new Keystore.\");\n    createKS.addActionListener(this);\n    buttonPanel.add(createKS);\n    loadKS = new JButton(\"load\");\n    loadKS.setToolTipText(\"Restores a Keystore from a file.\");\n    loadKS.addActionListener(this);\n    buttonPanel.add(loadKS);\n    saveKS = new JButton(\"save\");\n    saveKS.setToolTipText(\"Saves a Keystore to a file.\");\n    saveKS.addActionListener(this);\n    buttonPanel.add(saveKS);\n    closeKS = new JButton(\"close\");\n    closeKS.setToolTipText(\"Closes all open Keystores and disposes this panel.\");\n    closeKS.addActionListener(this);\n    buttonPanel.add(closeKS);\n\n    outputPane = new JTextPane();\n    outputPane.setEditable(false);\n    JScrollPane sp2 = new JScrollPane(outputPane);\n    sp2.setMaximumSize(new Dimension(50, 50));\n    // outputArea.setText(\"Key / Certificate:\\n alias:\\n\n    // -------------------\");\n    this.add(sp, BorderLayout.WEST);\n    this.add(buttonPanel, BorderLayout.EAST);\n    this.add(outputPane, BorderLayout.CENTER);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3143, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["l.getContentPane()"], "configurationStart": [226], "configurationEnd": [247], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 273, "focalAPIEnd": 311, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setActionCommand(String)"], "useStart": [317], "useEnd": [361], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tubs-legolabor-teamprojekt/schach/tree/master/gui/gui/FinishedGameGUI.java", "rawCode": "  /** Methode, die das Layout für das EndPanel erstellt. */\n  public void makeEndLayout() {\n    gbc.gridx = 0;\n    gbc.gridy = 5;\n    gbc.gridheight = 1;\n    gbc.gridwidth = 1;\n    gbl.setConstraints(this.endButton, gbc);\n    this.getContentPane().add(this.endButton);\n    this.endButton.addActionListener(this);\n    this.endButton.setActionCommand(\"endButton\");\n\n    gbc.gridx = 1;\n    gbc.gridy = 5;\n    gbc.gridheight = 1;\n    gbc.gridwidth = 2;\n    this.endExplanation.setText(\"Beendet das Programm.\");\n    gbl.setConstraints(this.endExplanation, gbc);\n    this.getContentPane().add(this.endExplanation);\n    this.endExplanation.setOpaque(false);\n    this.endExplanation.setEditable(false);\n    this.endExplanation.setEnabled(false);\n    this.endExplanation.setDisabledTextColor(Color.black);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3144, "initialization": ["ActionListener l = new ActionListener()"], "initializationStart": [2638], "initializationEnd": [2915], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)"], "configurationStart": [1238], "configurationEnd": [1262], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 2922, "focalAPIEnd": 2959, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jibrankhan/Domination/tree/master/Domination/src_swing/net/yura/domination/ui/simplegui/RiskGUI.java", "rawCode": "  /** Initialises the GUI */\n  private void initGUI() {\n\n    // set title\n    setTitle(product);\n    setIconImage(Toolkit.getDefaultToolkit().getImage(AboutDialog.class.getResource(\"icon.gif\")));\n\n    getContentPane().setLayout(new java.awt.GridBagLayout());\n\n    GridBagConstraints c = new GridBagConstraints();\n\n    c.insets = new java.awt.Insets(3, 3, 3, 3);\n\n    Dimension ppSize = new Dimension(PicturePanel.PP_X, PicturePanel.PP_Y);\n\n    pp.setPreferredSize(ppSize);\n    pp.setMinimumSize(ppSize);\n    pp.setMaximumSize(ppSize);\n\n    pp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 1));\n\n    pp.addMouseListener(this);\n    pp.addMouseMotionListener(this);\n\n    Console.setText(\"\");\n    // Console.setBackground(Color.white); // not needed with swing\n    Console.setEditable(false);\n\n    Con.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n    Con.setPreferredSize(new java.awt.Dimension(PicturePanel.PP_X, 100));\n    Con.setMinimumSize(new java.awt.Dimension(PicturePanel.PP_X, 100));\n\n    Command.setPreferredSize(new java.awt.Dimension(600, 20));\n    Command.setMinimumSize(new java.awt.Dimension(600, 20));\n    Command.setMaximumSize(new java.awt.Dimension(600, 20));\n\n    Submit.setText(\"Submit\");\n\n    guiMain = new JPanel();\n\n    Dimension guiMainSize = new Dimension(PicturePanel.PP_X, PicturePanel.PP_Y + 30);\n    guiMain.setPreferredSize(guiMainSize);\n    guiMain.setMinimumSize(guiMainSize);\n    guiMain.setMaximumSize(guiMainSize);\n\n    guiMain.setLayout(new java.awt.BorderLayout());\n\n    guiMain.add(Pix, java.awt.BorderLayout.CENTER);\n\n    c.gridx = 0; // col\n    c.gridy = 0; // row\n    c.gridwidth = 2; // width\n    c.gridheight = 2; // height\n\n    getContentPane().add(guiMain, c); // Pix\n\n    c.fill = GridBagConstraints.BOTH;\n\n    c.gridx = 1; // col\n    c.gridy = 3; // row\n    c.gridwidth = 1; // width\n    c.gridheight = 1; // height\n    getContentPane().add(Submit, c);\n\n    c.gridx = 0; // col\n    c.gridy = 2; // row\n    c.gridwidth = 2; // width\n    c.gridheight = 1; // height\n    getContentPane().add(Con, c);\n\n    c.gridx = 0; // col\n    c.gridy = 3; // row\n    c.gridwidth = 1; // width\n    c.gridheight = 1; // height\n    getContentPane().add(Command, c);\n\n    c.gridx = 0; // col\n    c.gridy = 4; // row\n    c.gridwidth = 1; // width\n    c.gridheight = 1; // height\n    // add status bar\n    getContentPane().add(gameStatus, c);\n\n    c.gridx = 1; // col\n    c.gridy = 4; // row\n    c.gridwidth = 1; // width\n    c.gridheight = 1; // height\n    // add status bar\n    getContentPane().add(statusBar, c);\n\n    ActionListener readCommand =\n        new ActionListener() {\n          public void actionPerformed(ActionEvent a) {\n\n            String input = Command.getText();\n            Command.setText(\"\");\n\n            history.add(input);\n            pointer = history.size() - 1;\n            go(input);\n          }\n        };\n\n    Submit.addActionListener(readCommand);\n    Command.addActionListener(readCommand);\n\n    class CommandKeyAdapter extends KeyAdapter {\n      RiskGUI adaptee;\n\n      CommandKeyAdapter(RiskGUI adaptee) {\n        this.adaptee = adaptee;\n      }\n\n      public void keyPressed(KeyEvent key) {\n\n        if (key.getKeyCode() == 38) {\n\n          if (pointer < 0) {\n            Toolkit.getDefaultToolkit().beep();\n          } else {\n            if (pointer == history.size() - 1) {\n              temptext = Command.getText();\n            }\n            Command.setText((String) history.elementAt(pointer));\n            pointer--;\n          }\n        } else if (key.getKeyCode() == 40) {\n\n          if (pointer > history.size() - 2) {\n            Toolkit.getDefaultToolkit().beep();\n          } else if (pointer == history.size() - 2) {\n            Command.setText(temptext);\n            pointer++;\n          } else {\n            pointer = pointer + 2;\n            Command.setText((String) history.elementAt(pointer));\n            pointer--;\n          }\n\n        } else {\n          pointer = history.size() - 1;\n        }\n      }\n    }\n\n    Command.addKeyListener(new CommandKeyAdapter(this));\n\n    // add menu bar\n    JMenuBar menuBar = new JMenuBar();\n    JMenu menuFile = new JMenu(\"File\");\n    menuFile.setMnemonic('F');\n\n    // create About menu item\n    JMenu menuHelp = new JMenu(\"Help\");\n    menuHelp.setMnemonic('H');\n\n    JMenuItem Commands = new JMenuItem(\"Commands\");\n    Commands.setMnemonic('C');\n    Commands.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            Commands();\n          }\n        });\n    menuHelp.add(Commands);\n\n    JMenuItem helpMan = new JMenuItem(\"Manual\");\n    helpMan.setMnemonic('M');\n    helpMan.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            go(\"manual\");\n          }\n        });\n    menuHelp.add(helpMan);\n\n    JMenuItem helpAbout = new JMenuItem(\"About\");\n    helpAbout.setMnemonic('A');\n    helpAbout.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            openAbout();\n          }\n        });\n    menuHelp.add(helpAbout);\n\n    // create Clear menu item\n    JMenu menuClear = new JMenu(\"Clear\");\n    menuClear.setMnemonic('C');\n\n    JMenuItem ClearConsole = new JMenuItem(\"Clear Console\");\n    ClearConsole.setMnemonic('C');\n    ClearConsole.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            Console.setText(\"\");\n          }\n        });\n    menuClear.add(ClearConsole);\n\n    JMenuItem ClearHistory = new JMenuItem(\"Clear History\");\n    ClearHistory.setMnemonic('H');\n    ClearHistory.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            history.clear();\n            pointer = -1;\n          }\n        });\n    menuClear.add(ClearHistory);\n\n    // create Open menu item\n\n    JMenuItem openFile = new JMenuItem(\"Run Script\");\n    openFile.setMnemonic('R');\n    openFile.addActionListener(\n        new java.awt.event.ActionListener() {\n          public void actionPerformed(java.awt.event.ActionEvent e) {\n\n            final JFileChooser fc = new JFileChooser();\n            RiskFileFilter filter = new RiskFileFilter(RiskFileFilter.RISK_SCRIPT_FILES);\n            fc.setFileFilter(filter);\n\n            int returnVal = fc.showDialog(RiskGUI.this, \"Run\");\n            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {\n              java.io.File file = fc.getSelectedFile();\n              // Write your code here what to do with selected file\n\n              try {\n\n                FileReader filein = new FileReader(file);\n                BufferedReader bufferin = new BufferedReader(filein);\n\n                String input = bufferin.readLine();\n                while (input != null) {\n\n                  go(input);\n                  input = bufferin.readLine();\n                }\n                bufferin.close();\n\n              } catch (Exception error) {\n\n              }\n\n            } else {\n              // Write your code here what to do if user has canceled Open dialog\n            }\n          }\n        });\n    menuFile.add(openFile);\n\n    // create Save menu item\n    JMenuItem saveFile = new JMenuItem(\"Save Console\");\n    saveFile.setMnemonic('S');\n    saveFile.addActionListener(\n        new java.awt.event.ActionListener() {\n          public void actionPerformed(java.awt.event.ActionEvent e) {\n\n            final JFileChooser fc = new JFileChooser();\n            RiskFileFilter filter = new RiskFileFilter(RiskFileFilter.RISK_LOG_FILES);\n            fc.setFileFilter(filter);\n\n            int returnVal = fc.showSaveDialog(RiskGUI.this);\n            if (returnVal == JFileChooser.APPROVE_OPTION) {\n              java.io.File file = fc.getSelectedFile();\n              // Write your code here what to do with selected file\n\n              String fileName = file.getAbsolutePath();\n\n              if (!(fileName.endsWith(\".\" + RiskFileFilter.RISK_LOG_FILES))) {\n                fileName = fileName + \".\" + RiskFileFilter.RISK_LOG_FILES;\n              }\n\n              try {\n\n                FileWriter fileout = new FileWriter(fileName);\n                BufferedWriter buffer = new BufferedWriter(fileout);\n                PrintWriter printer = new PrintWriter(buffer);\n\n                printer.write(doc.getText(0, doc.getLength()));\n\n                printer.close();\n\n              } catch (Exception error) {\n\n              }\n\n            } else {\n              // Write your code here what to do if user has canceled Save dialog\n            }\n          }\n        });\n    menuFile.add(saveFile);\n\n    // create Exit menu item\n    JMenuItem fileExit = new JMenuItem(\"Exit\");\n    fileExit.setMnemonic('E');\n    fileExit.addActionListener(\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            System.exit(0);\n          }\n        });\n    menuFile.add(fileExit);\n\n    menuBar.add(menuFile);\n    menuBar.add(menuClear);\n    menuBar.add(menuHelp);\n\n    // sets menu bar\n    setJMenuBar(menuBar);\n    setBounds(new java.awt.Rectangle(0, 0, 905, 629));\n    addWindowListener(\n        new java.awt.event.WindowAdapter() {\n          public void windowClosing(java.awt.event.WindowEvent evt) {\n            exitForm();\n          }\n        });\n\n    // pack();\n\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3145, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [786], "initializationEnd": [852], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setPreferredSize(Dimension)"], "configurationStart": [971], "configurationEnd": [1008], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1061, "focalAPIEnd": 1093, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton,GridBagConstraints)"], "useStart": [2379], "useEnd": [2417], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/commons/tree/master/monitor/modules/client/src/main/java/org/wso2/monitor/ConfigScreen.java", "rawCode": "  /** Draws the configuration screen and adds the even listener. */\n  public void showMonitorSettings() {\n    // Setup control sizes.\n    Dimension fieldSize = new Dimension(310, 23);\n    Dimension buttonSize = new Dimension(90, 23);\n\n    // Service URL controls.\n    JLabel urlLabel = new JLabel(monitorProperties.getProperty(\"monitor.configmon.serviceurl\"));\n    serviceURLText = new JTextField(jmxClient.getConnectorAddress());\n    serviceURLText.setPreferredSize(fieldSize);\n\n    // MBean name controls.\n    JLabel beanLabel = new JLabel(monitorProperties.getProperty(\"monitor.configmon.mbeanname\"));\n    mBeanNameText = new JTextField(jmxClient.getMBeanName());\n    mBeanNameText.setPreferredSize(fieldSize);\n\n    // OK, Cancel buttons and status bar.\n    final JButton okButton = new JButton(monitorProperties.getProperty(\"monitor.configmon.ok\"));\n    final JButton cancelButton =\n        new JButton(monitorProperties.getProperty(\"monitor.configmon.cancel\"));\n    okButton.setPreferredSize(buttonSize);\n    cancelButton.setPreferredSize(buttonSize);\n    okButton.addActionListener(this);\n    cancelButton.addActionListener(this);\n\n    // Show initial status.\n    String initMessage;\n    if (jmxClient.isConnected()) {\n      initMessage = monitorProperties.getProperty(\"monitor.configmsg.connected\");\n    } else {\n      initMessage = monitorProperties.getProperty(\"monitor.configmsg.notconnected\");\n    }\n    statusBar = new JLabel(initMessage);\n    Border border = BorderFactory.createBevelBorder(BevelBorder.LOWERED);\n    statusBar.setBorder(border);\n\n    // Add edit controls to frame using a panel.\n    JPanel controlPanel = new JPanel(new GridBagLayout());\n    GridBagConstraints constraints = new GridBagConstraints();\n    configFrame.add(controlPanel, BorderLayout.NORTH);\n    configFrame.add(statusBar, BorderLayout.SOUTH);\n\n    constraints.gridx = 0;\n    constraints.gridy = 0;\n    constraints.anchor = GridBagConstraints.WEST;\n    controlPanel.add(urlLabel, constraints);\n\n    constraints.gridx = 1;\n    controlPanel.add(serviceURLText, constraints);\n\n    constraints.gridy = 1;\n    controlPanel.add(mBeanNameText, constraints);\n\n    constraints.gridx = 0;\n    controlPanel.add(beanLabel, constraints);\n\n    // Add buttons to frame using a panel.\n    JPanel buttonPanel = new JPanel(new GridBagLayout());\n    constraints.gridy = 0;\n    constraints.gridx = 0;\n    buttonPanel.add(okButton, constraints);\n    constraints.gridx = 1;\n    buttonPanel.add(cancelButton, constraints);\n    configFrame.add(buttonPanel, BorderLayout.CENTER);\n\n    // Show everything.\n    configFrame.setVisible(true);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3146, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [186], "initializationEnd": [208], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 286, "focalAPIEnd": 317, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton)"], "useStart": [482], "useEnd": [521], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidmerrick/Classes/tree/master/ECE 152/Final Project/finalproj/lab5.java", "rawCode": "  void startGui() {\n    /// Creates a JFrame object (the window)\n    JFrame mainframe = new JFrame(\"MP3 Player\");\n\n    /// Creates a new button object (labels it Button 1)\n    button1 = new JButton(\"Stopped\");\n\n    /// Put a listener on the button so the code can respond to clicks\n    button1.addActionListener(this);\n\n    /// Set the Program to exit when the window is closed\n    mainframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n    /// Put the button on the window\n    mainframe.getContentPane().add(button1);\n\n    /// Set the window to 300 by 300 pixels\n    mainframe.setSize(300, 300);\n\n    /// Actually display the window\n    mainframe.setVisible(true);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3147, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [891], "initializationEnd": [915], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1013, "focalAPIEnd": 1047, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [1263], "useEnd": [1290], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bjorn/tiled-java/tree/master/src/tiled/mapeditor/dialogs/PluginDialog.java", "rawCode": "  private void init() {\n    /* LIST PANEL */\n    MapReader[] readers;\n    MapWriter[] writers;\n\n    try {\n      readers = pluginLoader.getReaders();\n      writers = pluginLoader.getWriters();\n      String[] plugins = new String[readers.length + writers.length];\n\n      for (int i = 0; i < readers.length; i++) {\n        plugins[i] = readers[i].getPluginPackage();\n      }\n      for (int i = 0; i < writers.length; i++) {\n        plugins[i + readers.length] = writers[i].getPluginPackage();\n      }\n      pluginList = new JList(plugins);\n    } catch (Throwable e) {\n      e.printStackTrace();\n      pluginList = new JList();\n    }\n\n    pluginList.addListSelectionListener(this);\n\n    JScrollPane pluginScrollPane = new JScrollPane(pluginList);\n    pluginScrollPane.setAutoscrolls(true);\n    pluginScrollPane.setPreferredSize(new Dimension(200, 150));\n\n    /* BUTTON PANEL */\n    infoButton = new JButton(INFO_BUTTON);\n    removeButton = new JButton(REMOVE_BUTTON);\n    closeButton = new JButton(CLOSE_BUTTON);\n    infoButton.addActionListener(this);\n    removeButton.addActionListener(this);\n    closeButton.addActionListener(this);\n\n    JPanel buttonPanel = new VerticalStaticJPanel();\n    buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.X_AXIS));\n    buttonPanel.add(infoButton);\n    buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n    buttonPanel.add(removeButton);\n    buttonPanel.add(Box.createGlue());\n    buttonPanel.add(Box.createRigidArea(new Dimension(5, 0)));\n    buttonPanel.add(closeButton);\n\n    JPanel mainPanel = new JPanel();\n    mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));\n    mainPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n    mainPanel.add(pluginScrollPane);\n    mainPanel.add(Box.createRigidArea(new Dimension(0, 5)));\n    mainPanel.add(buttonPanel);\n\n    setContentPane(mainPanel);\n    getRootPane().setDefaultButton(closeButton);\n    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n    updateButtons();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3148, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 352, "focalAPIEnd": 381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.addActionListener(ActionListener)", "JPanel.add(jButton)"], "useStart": [871, 1548], "useEnd": [900, 1569], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/atgreen/moxiedev/tree/master/gcc/libjava/classpath/gnu/javax/print/PrinterDialog.java", "rawCode": "  private void initUI(boolean onlyPageDialog) {\n    JPanel buttonPane = new JPanel();\n\n    if (onlyPageDialog) {\n      JPanel pane = new JPanel();\n      pane.setLayout(new BorderLayout());\n      pagesetup_panel = new PageSetupPanel();\n      pane.add(pagesetup_panel, BorderLayout.CENTER);\n\n      ok_bt = new JButton(getLocalizedString(\"bt.OK\"));\n      ok_bt.addActionListener(this);\n      cancel_bt = new JButton(getLocalizedString(\"bt.cancel\"));\n      cancel_bt.addActionListener(this);\n\n      getContentPane().add(pane, BorderLayout.CENTER);\n    } else {\n      general_panel = new GeneralPanel();\n      pagesetup_panel = new PageSetupPanel();\n      appearance_panel = new AppearancePanel();\n\n      JTabbedPane pane = new JTabbedPane();\n      pane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n\n      ok_bt = new JButton(getLocalizedString(\"bt.print\"));\n      ok_bt.addActionListener(this);\n      cancel_bt = new JButton(getLocalizedString(\"bt.cancel\"));\n      cancel_bt.addActionListener(this);\n\n      // populate jtabbedpane\n      pane.addTab(getLocalizedString(\"tab.general\"), general_panel);\n      pane.addTab(getLocalizedString(\"tab.pagesetup\"), pagesetup_panel);\n      pane.addTab(getLocalizedString(\"tab.appearance\"), appearance_panel);\n\n      // Put everything together\n      getContentPane().add(pane, BorderLayout.CENTER);\n    }\n\n    buttonPane.setLayout(new BoxLayout(buttonPane, BoxLayout.LINE_AXIS));\n    buttonPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n    buttonPane.add(Box.createHorizontalGlue());\n    buttonPane.add(ok_bt);\n    buttonPane.add(Box.createRigidArea(new Dimension(5, 0)));\n    buttonPane.add(cancel_bt);\n\n    getContentPane().add(buttonPane, BorderLayout.PAGE_END);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3149, "initialization": ["ActionListener l = new ActionListener()"], "initializationStart": [4241], "initializationEnd": [4577], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 3926, "tryExpressionEnd": 3930, "tryBlockStart": 3926, "tryBlockEnd": 4108, "catchExpressionStart": 5332, "catchExpressionEnd": 5352, "catchBlockStart": 5332, "catchBlockEnd": 5410, "exceptionHandlingCallStart": [5372], "exceptionHandlingCallEnd": [5391], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 4596, "focalAPIEnd": 4639, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/diegorom/childout_diego/tree/master/lib/src/com/toedter/calendar/demo/JCalendarDemo.java", "rawCode": "  /**\n   * Installes a demo bean.\n   *\n   * @param bean the demo bean\n   */\n  private void installBean(JComponent bean) {\n    try {\n      componentPanel.removeAll();\n      componentPanel.add(bean);\n\n      BeanInfo beanInfo =\n          Introspector.getBeanInfo(bean.getClass(), bean.getClass().getSuperclass());\n      PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n\n      propertyPanel.removeAll();\n\n      GridBagLayout gridbag = new GridBagLayout();\n      GridBagConstraints c = new GridBagConstraints();\n      c.fill = GridBagConstraints.BOTH;\n\n      propertyPanel.setLayout(gridbag);\n\n      int count = 0;\n\n      String[] types =\n          new String[] {\n            \"class java.util.Locale\",\n            \"boolean\",\n            \"int\",\n            \"class java.awt.Color\",\n            \"class java.util.Date\",\n            \"class java.lang.String\"\n          };\n\n      for (int t = 0; t < types.length; t++) {\n        for (int i = 0; i < propertyDescriptors.length; i++) {\n          if (propertyDescriptors[i].getWriteMethod() != null) {\n            String type = propertyDescriptors[i].getPropertyType().toString();\n\n            final PropertyDescriptor propertyDescriptor = propertyDescriptors[i];\n            final JComponent currentBean = bean;\n            final Method readMethod = propertyDescriptor.getReadMethod();\n            final Method writeMethod = propertyDescriptor.getWriteMethod();\n\n            if (type.equals(types[t])\n                && (((readMethod != null) && (writeMethod != null))\n                    || (\"class java.util.Locale\".equals(type)))) {\n              if (\"boolean\".equals(type)) {\n                boolean isSelected = false;\n\n                try {\n                  Boolean booleanObj = ((Boolean) readMethod.invoke(bean, (Object[]) null));\n                  isSelected = booleanObj.booleanValue();\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n\n                final JCheckBox checkBox = new JCheckBox(\"\", isSelected);\n                checkBox.addActionListener(\n                    new ActionListener() {\n                      public void actionPerformed(ActionEvent event) {\n                        try {\n                          if (checkBox.isSelected()) {\n                            writeMethod.invoke(currentBean, new Object[] {new Boolean(true)});\n                          } else {\n                            writeMethod.invoke(currentBean, new Object[] {new Boolean(false)});\n                          }\n                        } catch (Exception e) {\n                          e.printStackTrace();\n                        }\n                      }\n                    });\n                addProperty(propertyDescriptors[i], checkBox, gridbag);\n                count += 1;\n              } else if (\"int\".equals(type)) {\n                JSpinField spinField = new JSpinField();\n                spinField.addPropertyChangeListener(\n                    new PropertyChangeListener() {\n                      public void propertyChange(PropertyChangeEvent evt) {\n                        try {\n                          if (evt.getPropertyName().equals(\"value\")) {\n                            writeMethod.invoke(currentBean, new Object[] {evt.getNewValue()});\n                          }\n                        } catch (Exception e) {\n                        }\n                      }\n                    });\n\n                try {\n                  Integer integerObj = ((Integer) readMethod.invoke(bean, (Object[]) null));\n                  spinField.setValue(integerObj.intValue());\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n\n                addProperty(propertyDescriptors[i], spinField, gridbag);\n                count += 1;\n              } else if (\"class java.lang.String\".equals(type)) {\n                String string = \"\";\n\n                try {\n                  string = ((String) readMethod.invoke(bean, (Object[]) null));\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n\n                JTextField textField = new JTextField(string);\n                ActionListener actionListener =\n                    new ActionListener() {\n                      public void actionPerformed(ActionEvent e) {\n                        try {\n                          writeMethod.invoke(currentBean, new Object[] {e.getActionCommand()});\n                        } catch (Exception ex) {\n                        }\n                      }\n                    };\n\n                textField.addActionListener(actionListener);\n\n                addProperty(propertyDescriptors[i], textField, gridbag);\n                count += 1;\n              } else if (\"class java.util.Locale\".equals(type)) {\n                JLocaleChooser localeChooser = new JLocaleChooser(bean);\n                localeChooser.setPreferredSize(\n                    new Dimension(200, localeChooser.getPreferredSize().height));\n                addProperty(propertyDescriptors[i], localeChooser, gridbag);\n                count += 1;\n              } else if (\"class java.util.Date\".equals(type)) {\n                Date date = null;\n\n                try {\n                  date = ((Date) readMethod.invoke(bean, (Object[]) null));\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n\n                JDateChooser dateChooser = new JDateChooser(date);\n\n                dateChooser.addPropertyChangeListener(\n                    new PropertyChangeListener() {\n                      public void propertyChange(PropertyChangeEvent evt) {\n                        try {\n                          if (evt.getPropertyName().equals(\"date\")) {\n                            writeMethod.invoke(currentBean, new Object[] {evt.getNewValue()});\n                          }\n                        } catch (Exception e) {\n                        }\n                      }\n                    });\n\n                addProperty(propertyDescriptors[i], dateChooser, gridbag);\n                count += 1;\n              } else if (\"class java.awt.Color\".equals(type)) {\n                final JButton button = new JButton();\n\n                try {\n                  final Color colorObj = ((Color) readMethod.invoke(bean, (Object[]) null));\n                  button.setText(\"...\");\n                  button.setBackground(colorObj);\n\n                  ActionListener actionListener =\n                      new ActionListener() {\n                        public void actionPerformed(ActionEvent e) {\n                          Color newColor =\n                              JColorChooser.showDialog(\n                                  JCalendarDemo.this, \"Choose Color\", colorObj);\n                          button.setBackground(newColor);\n\n                          try {\n                            writeMethod.invoke(currentBean, new Object[] {newColor});\n                          } catch (Exception e1) {\n                            e1.printStackTrace();\n                          }\n                        }\n                      };\n\n                  button.addActionListener(actionListener);\n                } catch (Exception e) {\n                  e.printStackTrace();\n                }\n\n                addProperty(propertyDescriptors[i], button, gridbag);\n                count += 1;\n              }\n            }\n          }\n        }\n      }\n\n      URL iconURL = bean.getClass().getResource(\"images/\" + bean.getName() + \"Color16.gif\");\n      ImageIcon icon = new ImageIcon(iconURL);\n\n      componentTitlePanel.setTitle(bean.getName(), icon);\n      bean.invalidate();\n      propertyPanel.invalidate();\n      componentPanel.invalidate();\n      componentPanel.repaint();\n    } catch (IntrospectionException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3150, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [2345], "initializationEnd": [2475], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setMnemonic(char)", "jButton.setActionCommand(String)"], "configurationStart": [2531, 2693], "configurationEnd": [2677, 2728], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 2744, "focalAPIEnd": 2778, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [2784], "useEnd": [2811], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cismet/cids-navigator/tree/master/src/main/java/Sirius/navigator/ui/dialog/ErrorDialog.java", "rawCode": "  /** DOCUMENT ME! */\n  protected void initErrorDialog() {\n    // this.setLocationRelativeTo(this.getParent());\n    this.setResizable(false);\n    this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);\n\n    final JPanel contentPane = new JPanel(new GridBagLayout());\n    contentPane.setBorder(new EmptyBorder(10, 10, 10, 10));\n    final GridBagConstraints constraints = new GridBagConstraints();\n\n    // ICON ================================================================\n    constraints.anchor = GridBagConstraints.CENTER;\n    constraints.fill = GridBagConstraints.NONE;\n    constraints.gridheight = 1;\n    constraints.gridwidth = 1;\n    constraints.weightx = 0.5;\n    constraints.weighty = 0.0;\n    constraints.gridy = 0;\n    constraints.gridx = 0;\n\n    JLabel errorIcon;\n    if (errorType.equals(ERROR)) {\n      errorIcon = new JLabel(UIManager.getIcon(\"OptionPane.errorIcon\")); // NOI18N\n    } else {\n      errorIcon = new JLabel(UIManager.getIcon(\"OptionPane.warningIcon\")); // NOI18N\n    }\n\n    errorIcon.setBorder(\n        new CompoundBorder(\n            new SoftBevelBorder(SoftBevelBorder.LOWERED), new EmptyBorder(10, 10, 10, 10)));\n    contentPane.add(errorIcon, constraints);\n\n    // MESSAGE =============================================================\n    constraints.fill = GridBagConstraints.BOTH;\n    constraints.weightx = 0.5;\n    constraints.gridx++;\n    errorLabel = new JLabel(errorMessage);\n    errorLabel.setBorder(new EmptyBorder(20, 20, 20, 20));\n    contentPane.add(errorLabel, constraints);\n\n    // BUTTONS =============================================================\n    constraints.insets = new Insets(20, 0, 10, 0);\n    constraints.gridwidth = 2;\n    constraints.gridy = 1;\n    constraints.gridx = 0;\n    final JPanel buttonPanel = new JPanel(new GridLayout(1, 3, 10, 10));\n\n    // _TA_buttonIgnore = new JButton(\"Ignorieren\");\n    buttonIgnore =\n        new JButton(\n            org.openide.util.NbBundle.getMessage(\n                ErrorDialog.class, \"ErrorDialog.buttonIgnore.title\")); // NOI18N\n    // _TA_buttonIgnore.setMnemonic('I');\n    buttonIgnore.setMnemonic(\n        org.openide.util.NbBundle.getMessage(ErrorDialog.class, \"ErrorDialog.buttonIgnore.mnemonic\")\n            .charAt(0)); // NOI18N\n    buttonPanel.add(buttonIgnore);\n\n    // _TA_buttonExit = new JButton(\"Beenden\");\n    buttonExit =\n        new JButton(\n            org.openide.util.NbBundle.getMessage(\n                ErrorDialog.class, \"ErrorDialog.buttonExit.title\")); // NOI18N\n    // _TA_buttonExit.setMnemonic('B');\n    buttonExit.setMnemonic(\n        org.openide.util.NbBundle.getMessage(ErrorDialog.class, \"ErrorDialog.buttonExit.mnemonic\")\n            .charAt(0)); // NOI18N\n    buttonExit.setActionCommand(\"exit\"); // NOI18N\n    buttonExit.addActionListener(this);\n    buttonPanel.add(buttonExit);\n\n    if (errorType.equals(WARNING)) {\n      buttonIgnore.setActionCommand(\"ignore\"); // NOI18N\n      buttonIgnore.addActionListener(this);\n    } else {\n      buttonIgnore.setEnabled(false);\n    }\n\n    // _TA_buttonDetails = new JButton(\"Details\");\n    buttonDetails =\n        new JButton(\n            org.openide.util.NbBundle.getMessage(\n                ErrorDialog.class, \"ErrorDialog.buttonDetails.title\")); // NOI18N\n    // _TA_buttonDetails.setMnemonic('D');\n    buttonDetails.setMnemonic(\n        org.openide.util.NbBundle.getMessage(\n                ErrorDialog.class, \"ErrorDialog.buttonDetails.mnemonic\")\n            .charAt(0)); // NOI18N\n    buttonPanel.add(buttonDetails);\n\n    contentPane.add(buttonPanel, constraints);\n\n    // DETAILS =============================================================\n    if (stackTrace != null) {\n      buttonDetails.setActionCommand(\"details\"); // NOI18N\n      buttonDetails.addActionListener(this);\n\n      constraints.insets = new Insets(0, 0, 0, 0);\n      constraints.gridy++;\n      constraints.weightx = 1.0;\n      constraints.weighty = 1.0;\n      detailsTextArea = new JTextArea(stackTrace, 4, 20);\n      detailsPanel = new JPanel(new GridLayout(1, 1));\n      // detailsPanel.setBorder(new EmptyBorder(10,10,10,10));\n      detailsPanel.add(new JScrollPane(detailsTextArea));\n      detailsPanel.setVisible(false);\n      contentPane.add(detailsPanel, constraints);\n    } else {\n      buttonDetails.setEnabled(false);\n    }\n\n    this.setContentPane(contentPane);\n    this.pack();\n\n    Sirius.navigator.tools.MetaToolkit.centerWindow(this);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3151, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [90], "initializationEnd": [103], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)", "jButton.setMnemonic(char)"], "configurationStart": [111, 149], "configurationEnd": [141, 178], "guardCondition": "jButton==null", "guardType": "IF {", "guardExpressionStart": 41, "guardExpressionEnd": 66, "guardBlockStart": 41, "guardBlockEnd": 229, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 186, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ginows/SRE-RoboCode/tree/master/RobocodeSrc/trunk/robocode.ui.editor/src/main/java/net/sf/robocode/ui/editor/MoreWindowsDialog.java", "rawCode": "  public JButton getCancelButton() {\n    if (cancelButton == null) {\n      cancelButton = new JButton();\n      cancelButton.setText(\"Cancel\");\n      cancelButton.setMnemonic('C');\n      cancelButton.addActionListener(this);\n    }\n    return cancelButton;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3152, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [650], "initializationEnd": [673], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setFocusPainted(boolean)"], "configurationStart": [679], "configurationEnd": [715], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 721, "focalAPIEnd": 758, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton,GridBagConstraints)"], "useStart": [860], "useEnd": [902], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/russjohnson09/Tweet/tree/master/backups/TwitterGUI.java.REMOTE.14800.java", "rawCode": "  /**\n   * ************************************************** Creates followers panel and its components.\n   * *************************************************\n   */\n  private void createFollowersPanel() {\n    followersPanel =\n        new JPanel() {\n          @Override\n          protected void paintComponent(final Graphics g) {\n            g.drawImage(backgroundImage, 0, 0, null);\n            super.paintComponent(g);\n          }\n        };\n\n    followersPanel.setOpaque(false);\n    followersPanel.setLayout(new GridBagLayout());\n    fersgbc = new GridBagConstraints();\n\n    followers = new Users(controller.getFollowers());\n\n    fersAllButton = new JButton(\"Show All\");\n    fersAllButton.setFocusPainted(false);\n    fersAllButton.addActionListener(this);\n\n    fersgbc.gridx = 0;\n    fersgbc.gridy = 0;\n    fersgbc.gridwidth = 1;\n    fersgbc.fill = 1;\n    followersPanel.add(fersAllButton, fersgbc);\n\n    JLabel fersSearchLbl = new JLabel(\" Search: \");\n    fersgbc.gridx = 1;\n    followersPanel.add(fersSearchLbl, fersgbc);\n\n    final int FERS_SIZE = 18;\n    fersSearchTextArea = new JTextArea();\n    fersSearchTextArea.addKeyListener(this);\n    fersSearchTextArea.setFont(new Font(\"arial\", Font.PLAIN, FERS_SIZE));\n    fersSearchTextArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));\n    fersgbc.gridx = 2;\n    followersPanel.add(fersSearchTextArea, fersgbc);\n\n    jlistFollowers = new JList<String>(followers);\n    jlistFollowers.addMouseListener(this);\n    jlistFollowers.setCellRenderer(\n        new DefaultListCellRenderer() {\n          @Override\n          public Component getListCellRendererComponent(\n              JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n            JLabel label =\n                (JLabel)\n                    super.getListCellRendererComponent(\n                        list, value, index, isSelected, cellHasFocus);\n            try {\n              label.setIcon(\n                  new ImageIcon(new URL(followers.getUser(index).getMiniProfileImageURL())));\n\n            } catch (MalformedURLException e) {\n            }\n            return label;\n          }\n        });\n\n    fersgbc.gridx = 0;\n    fersgbc.gridy = 1;\n    final int w = 3;\n    fersgbc.gridwidth = w;\n    fersgbc.fill = GridBagConstraints.HORIZONTAL;\n\n    JScrollPane scrollPane = new JScrollPane(jlistFollowers);\n    scrollPane.setPreferredSize(new Dimension(FOLLOWERS_WIDTH, FOLLOWERS_HEIGHT));\n\n    followersPanel.add(scrollPane, fersgbc);\n\n    followersTotal = new JLabel(controller.getFollowersCount() + \" Followers\");\n    followersTotal.setHorizontalAlignment(JLabel.LEFT);\n    followersTotal.setHorizontalTextPosition(JLabel.LEFT);\n    fersgbc.gridx = 0;\n    fersgbc.gridy = 2;\n    fersgbc.gridwidth = 1;\n    fersgbc.fill = 1;\n    followersPanel.add(followersTotal, fersgbc);\n\n    fersShowProfileBtn = new JButton(\"Show Profile\");\n    fersShowProfileBtn.setFocusPainted(false);\n    fersShowProfileBtn.addActionListener(this);\n    fersShowProfileBtn.setHorizontalAlignment(JButton.RIGHT);\n    fersShowProfileBtn.setHorizontalTextPosition(JButton.RIGHT);\n    fersgbc.gridx = 1;\n    fersgbc.gridwidth = 2;\n    fersgbc.fill = 0;\n    fersgbc.anchor = GridBagConstraints.EAST;\n    followersPanel.add(fersShowProfileBtn, fersgbc);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3153, "initialization": ["JButton jButton = createButton(*,*)"], "initializationStart": [7325], "initializationEnd": [7445], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 7451, "focalAPIEnd": 7488, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridBagLayout.addLayoutComponent(jButton,GridBagConstraints)", "add(jButton)", "jButton.setVisible(boolean)"], "useStart": [7679, 7738, 7880], "useEnd": [7732, 7756, 7911], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/trunk/src/lib/com/izforge/izpack/panels/ShortcutPanel.java", "rawCode": "  /**\n   * This method creates the UI for this panel.\n   *\n   * @param groups A Vector that contains Strings with all the names of the existing program groups.\n   *     These will be placed in the groupList.\n   */\n\n  /*--------------------------------------------------------------------------*/\n  private void buildUI(File groups) {\n    constraints.insets = new Insets(10, 10, 0, 0);\n\n    // Add a CheckBox which enables the user to entirely supress shortcut creation.\n    String menuKind = parent.langpack.getString(\"ShortcutPanel.regular.StartMenu:Start-Menu\");\n\n    if (OsVersion.IS_UNIX && UnixHelper.kdeIsInstalled()) {\n      menuKind = parent.langpack.getString(\"ShortcutPanel.regular.StartMenu:K-Menu\");\n    }\n\n    createShortcuts =\n        new JCheckBox(\n            StringTool.replace(\n                parent.langpack.getString(\"ShortcutPanel.regular.create\"), \"StartMenu\", menuKind),\n            true);\n    createShortcuts.addActionListener(this);\n    constraints.gridx = col;\n    constraints.gridy = line + 1;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n\n    // constraints.weightx = 0.1;\n    // constraints.weighty = 0.2;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    constraints.anchor = GridBagConstraints.NORTHWEST;\n\n    layout.addLayoutComponent(createShortcuts, constraints);\n    add(createShortcuts);\n\n    constraints.insets = new Insets(0, 10, 0, 0);\n\n    // ----------------------------------------------------\n    // check box to allow the user to decide if a desktop\n    // shortcut should be created.\n    // this should only be created if needed and requested\n    // in the definition file.\n    // ----------------------------------------------------\n    if (hasDesktopShortcuts) {\n      String initialAllowedValue = idata.getVariable(\"DesktopShortcutCheckboxEnabled\");\n      boolean initialAllowedFlag = false;\n\n      if (initialAllowedValue == null) {\n        initialAllowedFlag = false;\n      } else if (Boolean.TRUE.toString().equals(initialAllowedValue)) {\n        initialAllowedFlag = true;\n      }\n\n      allowDesktopShortcut =\n          new JCheckBox(\n              parent.langpack.getString(\"ShortcutPanel.regular.desktop\"), initialAllowedFlag);\n      constraints.gridx = col;\n      constraints.gridy = line + 2;\n      constraints.gridwidth = 1;\n      constraints.gridheight = 1;\n\n      // constraints.weighty = 0.2;\n      // constraints.weighty = 1.0;\n      // constraints.weighty = 0.5;\n      layout.addLayoutComponent(allowDesktopShortcut, constraints);\n      add(allowDesktopShortcut);\n    }\n\n    listLabel =\n        LabelFactory.create(\n            parent.langpack.getString(\"ShortcutPanel.regular.list\"), JLabel.LEADING);\n    if (OsVersion.IS_WINDOWS) {\n      constraints.gridx = col;\n      constraints.gridy = line + 3;\n\n      constraints.gridwidth = 1;\n      constraints.gridheight = 1;\n\n      constraints.insets = new Insets(10, 10, 0, 0);\n\n      constraints.fill = GridBagConstraints.HORIZONTAL;\n      constraints.anchor = GridBagConstraints.NORTHWEST;\n    } else {\n      constraints.gridx = col;\n      constraints.gridy = line + 4;\n\n      constraints.gridwidth = 1;\n      constraints.gridheight = 1;\n\n      constraints.insets = new Insets(10, 10, 0, 0);\n\n      constraints.fill = GridBagConstraints.HORIZONTAL;\n      constraints.anchor = GridBagConstraints.SOUTHWEST;\n    }\n    layout.addLayoutComponent(listLabel, constraints);\n    add(listLabel);\n\n    // ----------------------------------------------------\n    // list box to list all of already existing folders as program groups\n    // at the intended destination\n    // ----------------------------------------------------\n    Vector<String> dirEntries = new Vector<String>();\n\n    File[] entries = groups.listFiles();\n\n    // Quickfix prevent NullPointer on non default compliant Linux - KDEs\n    // i.e Mandrake 2005 LE stores from now also in \"applnk\" instead in prior \"applnk-mdk\":\n    if (entries != null && !OsVersion.IS_UNIX) {\n      for (File entry : entries) {\n        if (entry.isDirectory()) {\n          dirEntries.add(entry.getName());\n        }\n      }\n    }\n    if (OsVersion.IS_WINDOWS) {\n      if (groupList == null) {\n        groupList = new JList();\n      }\n\n      groupList =\n          addList(\n              dirEntries,\n              ListSelectionModel.SINGLE_SELECTION,\n              groupList,\n              col,\n              line + 4,\n              1,\n              1,\n              GridBagConstraints.BOTH);\n    }\n\n    // ----------------------------------------------------\n    // radio buttons to select current user or all users.\n    // ----------------------------------------------------\n    if (shortcut.multipleUsers()) {\n      // if 'defaultCurrentUser' specified, default to current user:\n      final boolean rUserFlag = defaultCurrentUserFlag ? false : isRootUser;\n\n      JPanel usersPanel = new JPanel(new GridLayout(2, 1));\n      ButtonGroup usersGroup = new ButtonGroup();\n      currentUser =\n          new JRadioButton(\n              parent.langpack.getString(\"ShortcutPanel.regular.currentUser\"), !rUserFlag);\n      currentUser.addActionListener(this);\n      usersGroup.add(currentUser);\n      usersPanel.add(currentUser);\n      allUsers =\n          new JRadioButton(parent.langpack.getString(\"ShortcutPanel.regular.allUsers\"), rUserFlag);\n\n      Debug.log(\"allUsers.setEnabled(), I'm Root: \" + isRootUser);\n\n      allUsers.setEnabled(isRootUser);\n\n      allUsers.addActionListener(this);\n      usersGroup.add(allUsers);\n      usersPanel.add(allUsers);\n\n      TitledBorder border =\n          new TitledBorder(\n              new EmptyBorder(2, 2, 2, 2),\n              parent.langpack.getString(\"ShortcutPanel.regular.userIntro\"));\n      usersPanel.setBorder(border);\n      if (OsVersion.IS_WINDOWS) {\n        constraints.gridx = col + 1;\n        constraints.gridy = line + 4;\n        constraints.gridwidth = 1;\n        constraints.gridheight = 1;\n      } else {\n        constraints.insets = new Insets(10, 10, 20, 0);\n        constraints.gridx = col;\n        constraints.gridy = line + 4;\n        constraints.gridwidth = 2;\n        constraints.gridheight = 1;\n        constraints.anchor = GridBagConstraints.EAST;\n      }\n\n      // constraints.weighty = 1.0;\n      // constraints.weightx = 1.0;\n      constraints.fill = GridBagConstraints.HORIZONTAL;\n      layout.addLayoutComponent(usersPanel, constraints);\n      add(usersPanel);\n    }\n\n    // ----------------------------------------------------\n    // edit box that contains the suggested program group\n    // name, which can be modfied or substituted from the\n    // list by the user\n    // ----------------------------------------------------\n    programGroup = new JTextField(suggestedProgramGroup, 40); // 40?\n\n    constraints.gridx = col;\n    constraints.gridy = line + 5;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n\n    // constraints.weighty = 1.0;\n    // constraints.weightx = 1.0;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    layout.addLayoutComponent(programGroup, constraints);\n    add(programGroup);\n\n    // ----------------------------------------------------\n    // reset button that allows the user to revert to the\n    // original suggestion for the program group\n    // ----------------------------------------------------\n    defaultButton =\n        ButtonFactory.createButton(\n            parent.langpack.getString(\"ShortcutPanel.regular.default\"), idata.buttonsHColor);\n    defaultButton.addActionListener(this);\n\n    constraints.gridx = col + 1;\n    constraints.gridy = line + 5;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    layout.addLayoutComponent(defaultButton, constraints);\n    add(defaultButton);\n\n    if (suggestedProgramGroup == null || \"\".equals(suggestedProgramGroup)) {\n      programGroup.setVisible(false);\n      defaultButton.setVisible(false);\n      listLabel.setVisible(false);\n    }\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3154, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [2703], "initializationEnd": [2724], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 2732, "focalAPIEnd": 2767, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [2893], "useEnd": [2921], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/halset/openmap/tree/master/src/main/java/com/bbn/openmap/omGraphics/BasicStrokeEditor.java", "rawCode": "  public void setGUI() {\n\n    if (palette == null) {\n      setTitle(\"Modify Line Stroke Parameters\");\n      palette = new JPanel();\n      palette.setLayout(new BoxLayout(palette, BoxLayout.Y_AXIS));\n\n      JPanel capPanel = PaletteHelper.createPaletteJPanel(\"Line Cap Decoration\");\n      String[] capStrings = {\"Butt\", \"Round\", \"Square\"};\n      capBox = new JComboBox(capStrings);\n      capBox.addActionListener(this);\n      capPanel.add(capBox);\n      palette.add(capPanel);\n\n      JPanel joinPanel = PaletteHelper.createPaletteJPanel(\"Line Joint Decoration\");\n\n      String[] joinStrings = {\"Miter\", \"Round\", \"Bevel\"};\n      joinBox = new JComboBox(joinStrings);\n      joinBox.addActionListener(this);\n      joinPanel.add(joinBox);\n      palette.add(joinPanel);\n\n      JPanel widthPanel = new JPanel();\n      widthPanel.setLayout(new GridLayout(0, 1));\n\n      JLabel widthLabel = new JLabel(\"Line Width\");\n      widthField = new JTextField(Float.toString(basicStroke.getLineWidth()), 4);\n      widthField.setToolTipText(\"Enter pixel width of line.\");\n      widthPanel.add(widthLabel);\n      widthPanel.add(widthField);\n\n      JPanel mlPanel = new JPanel();\n      mlPanel.setLayout(new GridLayout(0, 1));\n\n      JLabel miterLimitLabel = new JLabel(\"Miter Limit\");\n      miterLimitField = new JTextField(Float.toString(basicStroke.getMiterLimit()), 4);\n      miterLimitField.setToolTipText(\"Min angle for corner decorations.\");\n\n      mlPanel.add(miterLimitLabel);\n      mlPanel.add(miterLimitField);\n\n      JPanel dlPanel = new JPanel();\n      dlPanel.setLayout(new FlowLayout());\n\n      JLabel dashLabel = new JLabel(\"Dash Pattern\");\n      // float[] da = basicStroke.getDashArray();\n      // String dashArrayString = dashArrayToString(da);\n\n      dashField = new JTextField(dashArrayToString(basicStroke.getDashArray()), 15);\n      dashField.setToolTipText(\"Number of pixels on off on ...\");\n      dlPanel.add(dashLabel);\n      dlPanel.add(dashField);\n\n      JPanel dpPanel = new JPanel();\n      dpPanel.setLayout(new GridLayout(0, 1));\n\n      JLabel dashPhaseLabel = new JLabel(\"Dash Phase\");\n      dashPhaseField = new JTextField(Float.toString(basicStroke.getDashPhase()), 4);\n      dashPhaseField.setToolTipText(\"Phase to start dash array.\");\n      dpPanel.add(dashPhaseLabel);\n      dpPanel.add(dashPhaseField);\n\n      JPanel textFieldPanel = new JPanel();\n      textFieldPanel.setLayout(new GridLayout(0, 3));\n      textFieldPanel.add(widthPanel);\n      textFieldPanel.add(dpPanel);\n      textFieldPanel.add(mlPanel);\n      palette.add(textFieldPanel);\n      palette.add(dlPanel);\n\n      JPanel buttonPanel = new JPanel();\n      buttonPanel.setLayout(new GridLayout(0, 2));\n      closebutton = new JButton(\"Cancel\");\n      closebutton.addActionListener(this);\n      applybutton = new JButton(\"OK\");\n      applybutton.addActionListener(this);\n      buttonPanel.add(applybutton);\n      buttonPanel.add(closebutton);\n\n      palette.add(buttonPanel);\n\n      getContentPane().add(palette);\n      this.pack();\n\n    } else {\n      widthField.setText(Float.toString(basicStroke.getLineWidth()));\n      miterLimitField.setText(Float.toString(basicStroke.getMiterLimit()));\n      dashField.setText(dashArrayToString(basicStroke.getDashArray()));\n      dashPhaseField.setText(Float.toString(basicStroke.getDashPhase()));\n    }\n\n    // Set palette to current conditions;\n    capBox.setSelectedIndex(basicStroke.getEndCap());\n    joinBox.setSelectedIndex(basicStroke.getLineJoin());\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3155, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [3039], "initializationEnd": [3058], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.addKeyListener(KeyListener)"], "configurationStart": [3112], "configurationEnd": [3141], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 3147, "focalAPIEnd": 3179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [3271], "useEnd": [3296], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/caadapter/tree/master/software/caadapter/src/java/gov/nih/nci/caadapter/ui/specification/csv/CSVSegmentDefinitionDialog.java", "rawCode": "  private void initialize() {\n    this.setLayout(new BorderLayout());\n\n    JPanel centerPanel = new JPanel(new GridBagLayout());\n\n    if (title.equals(AddSegmentAction.COMMAND_NAME_GENERAL)) {\n      segmentNameLabel = new JLabel(SEGMENT_NAME_LABEL);\n      cardinalityTypeLabel = new JLabel(CARDINALITY_TYPE_LABEL);\n    } else if (title.equals(AddSegmentAction.COMMAND_NAME_CHOICE)) {\n      segmentNameLabel = new JLabel(CHOICE_SEGMENT_NAME_LABEL);\n      cardinalityTypeLabel = new JLabel(CHOICE_CARDINALITY_TYPE_LABEL);\n    } else {\n      segmentNameLabel = new JLabel(SEGMENT_NAME_LABEL);\n      cardinalityTypeLabel = new JLabel(CARDINALITY_TYPE_LABEL);\n    }\n\n    segmentNameTextField = new JTextField();\n    segmentNameTextField.addKeyListener(this);\n\n    cardinalityTypeField = new JComboBox();\n    constructCardinalityTypeComboBox();\n    if (!cardinalityEditable) {\n      // cardinalityTypeField.setSelectedItem(CardinalityType.VALUE_1);\n      cardinalityTypeField.setEditable(false);\n      cardinalityTypeField.setEnabled(false);\n    }\n\n    Dimension segmentSize = segmentNameLabel.getPreferredSize();\n    Dimension cardinalityTypeSize = cardinalityTypeLabel.getPreferredSize();\n\n    int textFieldWidth = Math.max(segmentSize.width, cardinalityTypeSize.width) + 6;\n    int textFieldHeight = Math.max(segmentSize.height, cardinalityTypeSize.height) + 6;\n\n    segmentNameTextField.setPreferredSize(new Dimension(textFieldWidth, textFieldHeight));\n    cardinalityTypeField.setPreferredSize(new Dimension(textFieldWidth + 2, textFieldHeight + 2));\n\n    Insets insets = new Insets(5, 5, 5, 5);\n    centerPanel.add(\n        segmentNameLabel,\n        new GridBagConstraints(\n            0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, insets, 0, 0));\n    centerPanel.add(\n        segmentNameTextField,\n        new GridBagConstraints(\n            1,\n            0,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.EAST,\n            GridBagConstraints.HORIZONTAL,\n            insets,\n            0,\n            0));\n    // centerPanel.add(fieldNameLabel, new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0,\n    // GridBagConstraints.WEST, GridBagConstraints.NONE, insets, 0, 0));\n    // centerPanel.add(fieldNameTextField, new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0,\n    // GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, insets, 0, 0));\n    centerPanel.add(\n        cardinalityTypeLabel,\n        new GridBagConstraints(\n            0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.WEST, GridBagConstraints.NONE, insets, 0, 0));\n    centerPanel.add(\n        cardinalityTypeField,\n        new GridBagConstraints(\n            1,\n            1,\n            1,\n            1,\n            0.0,\n            0.0,\n            GridBagConstraints.EAST,\n            GridBagConstraints.HORIZONTAL,\n            insets,\n            0,\n            0));\n\n    this.add(centerPanel, BorderLayout.CENTER);\n\n    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING));\n\n    okButton = new JButton(\" OK \");\n    // okButton.setMnemonic(KeyEvent.VK_ENTER);\n    okButton.addKeyListener(this);\n    okButton.addActionListener(this);\n\n    cancelButton = new JButton(\"Cancel\");\n    cancelButton.addActionListener(this);\n\n    buttonPanel.add(okButton);\n    buttonPanel.add(cancelButton);\n\n    this.add(buttonPanel, BorderLayout.SOUTH);\n\n    this.setSize(300, 150);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3156, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [570], "initializationEnd": [630], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [636], "configurationEnd": [685], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 691, "focalAPIEnd": 730, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setToolTipText(String)", "JPanel.add(jButton,GridBagConstraints)"], "useStart": [736, 836], "useEnd": [830, 881], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gvtools/gvtools-legacy/tree/master/extensions/extI18n/src/org/gvsig/i18n/extension/preferences/I18nPreferencePage.java", "rawCode": "  /** Creates the panel with the buttons to perform the related actions. */\n  private Component getButtonsPanel() {\n    JPanel buttonPanel = new JPanel(new GridBagLayout());\n    GridBagConstraints constraints = new GridBagConstraints();\n    constraints.fill = GridBagConstraints.NONE;\n    constraints.anchor = GridBagConstraints.LINE_START;\n    Insets btInsets = new Insets(2, 0, 2, 4);\n    Insets lbInsets = new Insets(2, 2, 2, 0);\n\n    /* ROW 0 */\n    constraints.gridy = 0;\n\n    constraints.gridx = 0;\n    constraints.insets = btInsets;\n    JButton newLocaleButton = new JButton(Messages.getText(\"I18nPreferencePage.Instalar\"));\n    newLocaleButton.setActionCommand(COMMAND_INSTALL);\n    newLocaleButton.addActionListener(this);\n    newLocaleButton.setToolTipText(Messages.getText(\"I18nPreferencePage.Instalar_idioma_tooltip\"));\n    buttonPanel.add(newLocaleButton, constraints);\n\n    constraints.gridx = 1;\n    constraints.insets = lbInsets;\n    buttonPanel.add(\n        new JLabel(Messages.getText(\"I18nPreferencePage.Instalar_idioma_tooltip\")), constraints);\n\n    /* ROW 1 */\n    constraints.gridy = 1;\n\n    constraints.gridx = 0;\n    constraints.insets = btInsets;\n    JButton removeLocaleButton = new JButton(Messages.getText(\"I18nPreferencePage.Desinstalar\"));\n    removeLocaleButton.setActionCommand(COMMAND_UNINSTALL);\n    removeLocaleButton.addActionListener(this);\n    removeLocaleButton.setToolTipText(\n        Messages.getText(\"I18nPreferencePage.Desinstalar_idioma_tooltip\"));\n    buttonPanel.add(removeLocaleButton, constraints);\n\n    constraints.gridx = 1;\n    constraints.insets = lbInsets;\n    buttonPanel.add(\n        new JLabel(Messages.getText(\"I18nPreferencePage.Desinstalar_idioma_tooltip\")), constraints);\n\n    /* ROW 2 */\n    constraints.gridy = 2;\n\n    constraints.gridx = 0;\n    constraints.insets = btInsets;\n    JButton exportLocaleButton =\n        new JButton(Messages.getText(\"I18nPreferencePage.exportar_actualizar\"));\n    exportLocaleButton.setActionCommand(COMMAND_EXPORT);\n    exportLocaleButton.addActionListener(this);\n    exportLocaleButton.setToolTipText(\n        Messages.getText(\"I18nPreferencePage.exportar_actualizar_tooltip\"));\n    buttonPanel.add(exportLocaleButton, constraints);\n\n    constraints.gridx = 1;\n    constraints.insets = lbInsets;\n    buttonPanel.add(\n        new JLabel(Messages.getText(\"I18nPreferencePage.exportar_actualizar_tooltip\")),\n        constraints);\n\n    /* ROW 3 */\n    constraints.gridy = 3;\n\n    constraints.gridx = 0;\n    constraints.insets = btInsets;\n    JButton exportNewLocaleButton =\n        new JButton(Messages.getText(\"I18nPreferencePage.exportar_traducir\"));\n    exportNewLocaleButton.setActionCommand(COMMAND_EXPORT_NEW);\n    exportNewLocaleButton.addActionListener(this);\n    exportNewLocaleButton.setToolTipText(\n        Messages.getText(\"I18nPreferencePage.exportar_traducir_tooltip\"));\n    buttonPanel.add(exportNewLocaleButton, constraints);\n\n    constraints.gridx = 1;\n    constraints.insets = lbInsets;\n    buttonPanel.add(\n        new JLabel(Messages.getText(\"I18nPreferencePage.exportar_traducir_tooltip\")), constraints);\n\n    buttonPanel.setAlignmentX(CENTER_ALIGNMENT);\n    return buttonPanel;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3157, "initialization": ["ActionListener l = new ActionListener()", "JButton jButton = new JButton(*)"], "initializationStart": [1055, 1512], "initializationEnd": [1396, 1562], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [1635], "configurationEnd": [1668], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1674, "focalAPIEnd": 1708, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [1714], "useEnd": [1733], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nmacs/lm3s-uclinux/tree/master/lib/classpath/gnu/javax/security/auth/callback/SwingCallbackHandler.java", "rawCode": "  protected void handleName(final NameCallback callback) throws IOException {\n    final JDialog dialog = new JDialog();\n    Container content = dialog.getContentPane();\n    content.setLayout(new GridBagLayout());\n\n    content.add(\n        new JLabel(callback.getPrompt()),\n        new GridBagConstraints(\n            0,\n            0,\n            1,\n            1,\n            0,\n            0,\n            GridBagConstraints.NORTHEAST,\n            GridBagConstraints.VERTICAL,\n            new Insets(10, 10, 15, 5),\n            0,\n            0));\n\n    final JTextField name = new JTextField();\n    name.setColumns(20);\n    String _name;\n    if ((_name = callback.getDefaultName()) != null) name.setText(_name);\n    content.add(\n        name,\n        new GridBagConstraints(\n            1,\n            0,\n            1,\n            1,\n            1,\n            1,\n            GridBagConstraints.NORTHWEST,\n            GridBagConstraints.BOTH,\n            new Insets(10, 5, 15, 10),\n            0,\n            0));\n\n    ActionListener listener =\n        new ActionListener() {\n          public void actionPerformed(ActionEvent ae) {\n            String cmd = ae.getActionCommand();\n            if (cmd.equals(\"okay\")) callback.setName(name.getText());\n            dialog.setVisible(false);\n            synchronized (callback) {\n              callback.notify();\n            }\n          }\n        };\n\n    JPanel buttons = new JPanel();\n    buttons.setLayout(new FlowLayout(FlowLayout.RIGHT));\n    JButton cancel = new JButton(messages.getString(\"callback.cancel\"));\n    JButton okay = new JButton(messages.getString(\"callback.ok\"));\n    cancel.setActionCommand(\"cancel\");\n    cancel.addActionListener(listener);\n    buttons.add(cancel);\n    okay.setActionCommand(\"okay\");\n    okay.addActionListener(listener);\n    buttons.add(okay);\n    content.add(\n        buttons,\n        new GridBagConstraints(\n            0,\n            1,\n            2,\n            1,\n            0,\n            0,\n            GridBagConstraints.SOUTHEAST,\n            GridBagConstraints.NONE,\n            new Insets(0, 10, 10, 10),\n            0,\n            0));\n\n    dialog.setResizable(false);\n    dialog.pack();\n    dialog.setVisible(true);\n    dialog.getRootPane().setDefaultButton(okay);\n    waitForInput(dialog, callback);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3158, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [1386], "initializationEnd": [1399], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["logException(*,*,*,String)"], "tryExpressionStart": 31, "tryExpressionEnd": 35, "tryBlockStart": 31, "tryBlockEnd": 4245, "catchExpressionStart": 4130, "catchExpressionEnd": 4150, "catchBlockStart": 4130, "catchBlockEnd": 4245, "exceptionHandlingCallStart": [4158], "exceptionHandlingCallEnd": [4238], "configuration": ["jButton.setText(String)"], "configurationStart": [1448], "configurationEnd": [1473], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1557, "focalAPIEnd": 1589, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NLeSC/vbrowser/tree/master/source/nl.esciencecenter.vlet.gui.vbrowser/src/nl/esciencecenter/vlet/gui/dialog/ExceptionForm.java", "rawCode": "  private void initGUI() {\n    try {\n      BorderLayout thisLayout = new BorderLayout();\n      this.getContentPane().setLayout(thisLayout);\n      {\n        topPane = new JPanel();\n        this.getContentPane().add(topPane, BorderLayout.NORTH);\n        // topPane.setMaximumSize(new java.awt.Dimension(8, 8));\n        // topPane.setMinimumSize(new java.awt.Dimension(8, 8));\n        // topPane.setPreferredSize(new java.awt.Dimension(282, 22));\n        {\n          errorTextLabel = new JLabel();\n          topPane.add(errorTextLabel);\n          errorTextLabel.setText(\"VlException\");\n        }\n      }\n      {\n        leftPane = new JPanel();\n        this.getContentPane().add(leftPane, BorderLayout.WEST);\n        // leftPane.setPreferredSize(new java.awt.Dimension(9, 64));\n        // leftPane.setMaximumSize(new java.awt.Dimension(8, 8));\n      }\n      {\n        rightPane = new JPanel();\n        this.getContentPane().add(rightPane, BorderLayout.EAST);\n        // rightPane.setMaximumSize(new java.awt.Dimension(8, 8));\n        // rightPane.setMinimumSize(new java.awt.Dimension(8, 8));\n        // rightPane.setPreferredSize(new java.awt.Dimension(10, 64));\n      }\n      {\n        buttonPanel = new JPanel();\n        this.getContentPane().add(buttonPanel, BorderLayout.SOUTH);\n        // buttonPanel.setPreferredSize(new java.awt.Dimension(282, 26));\n        {\n          okButton = new JButton();\n          buttonPanel.add(okButton);\n          okButton.setText(\"Close\");\n          // okButton.setPreferredSize(new java.awt.Dimension(92, 18));\n          okButton.addActionListener(this);\n        }\n      }\n      {\n        mainTabPanel = new JTabbedPane();\n        this.getContentPane().add(mainTabPanel);\n        // mainTabPanel.setPreferredSize(new java.awt.Dimension(327, 131));\n        {\n          errorPanel = new JPanel();\n          mainTabPanel.addTab(\"Error\", null, errorPanel, null);\n          BorderLayout mainPanelLayout = new BorderLayout();\n          errorPanel.setLayout(mainPanelLayout);\n          // errorPanel.setPreferredSize(new java.awt.Dimension(303, 89));\n          errorPanel.setToolTipText(\"The error which occured\");\n          {\n            mainHeaderTextField = new JTextField();\n            errorPanel.add(mainHeaderTextField, BorderLayout.NORTH);\n            mainHeaderTextField.setText(\"Text\");\n            mainHeaderTextField.setEditable(false);\n            mainHeaderTextField.setFocusable(false);\n            mainHeaderTextField.setAutoscrolls(false);\n            mainHeaderTextField.setToolTipText(\"The Error which occured\");\n            // mainHeaderTextField.setPreferredSize(new java.awt.Dimension(303, 24));\n            mainHeaderTextField.setFont(new java.awt.Font(\"Dialog\", 1, 14));\n          }\n          {\n            errorScrollPane = new JScrollPane();\n            errorPanel.add(errorScrollPane, BorderLayout.CENTER);\n            errorScrollPane.setAutoscrolls(true);\n            errorScrollPane.getVerticalScrollBar().setAutoscrolls(true);\n            errorScrollPane.getHorizontalScrollBar().setAutoscrolls(true);\n            {\n              errorText = new JTextArea();\n              errorScrollPane.setViewportView(errorText);\n              errorText.setText(message);\n              // errorText.setSize(getPreferredSize());\n              errorText.setEditable(false);\n              errorText.setToolTipText(\"Extra information provided by the implementation.\");\n              errorText.setWrapStyleWord(true);\n            }\n            {\n            }\n          }\n        }\n        {\n          debugScrollPane = new JScrollPane();\n          mainTabPanel.addTab(\"debug\", null, debugScrollPane, null);\n          debugScrollPane.setToolTipText(\"Provides debug information\");\n          {\n            debugTextArea = new JTextArea();\n            debugScrollPane.setViewportView(debugTextArea);\n            debugTextArea.setText(\"(No debug info)\");\n            debugTextArea.setToolTipText(\"Debug information provided by the exception.\");\n            // debugTextArea.setPreferredSize(new java.awt.Dimension(296,42));\n          }\n        }\n      }\n      // this.setSize(337, 194);\n    } catch (Exception e) {\n      UILogger.logException(this, ClassLogger.ERROR, e, \"Exception during initGUI!\\n\");\n    }\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3159, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [254], "initializationEnd": [282], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [290], "configurationEnd": [327], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 335, "focalAPIEnd": 367, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton,*)"], "useStart": [375], "useEnd": [416], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/Reha/src/dialoge/ToolsDialog.java", "rawCode": "  private JXPanel getContent(JList list) {\n    content = new JXPanel(new BorderLayout());\n    content.add(new JScrollPane(list), BorderLayout.CENTER);\n    if ((Boolean) SystemConfig.hmPatientenWerkzeugDlgIni.get(\"ToolsDlgShowButton\")) {\n      abfeuern = new JButton(\"ausführen....\");\n      abfeuern.setActionCommand(\"abfeuern\");\n      abfeuern.addActionListener(this);\n      content.add(abfeuern, BorderLayout.SOUTH);\n    }\n    return content;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3160, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [1799], "initializationEnd": [1854], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)", "jButton.setPreferredSize(Dimension)"], "configurationStart": [1862, 1905], "configurationEnd": [1897, 1949], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1957, "focalAPIEnd": 1996, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [2132], "useEnd": [2146], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/silid/project-x-cvs/tree/master/src/net/sourceforge/dvb/projectx/gui/PreSettings.java", "rawCode": "  /** */\n  protected JPanel buildPostCommandsPanel() {\n    ActionListener _ExecuteListener =\n        new ActionListener() {\n          public void actionPerformed(ActionEvent e) {\n            try {\n              String actName = e.getActionCommand();\n              String str = \"\";\n\n              if (actName.equals(Keys.KEY_PostCommands_Cmd1[0]))\n                str = Common.getSettings().getProperty(Keys.KEY_PostCommands_Cmd1);\n              else if (actName.equals(Keys.KEY_PostCommands_Cmd2[0]))\n                str = Common.getSettings().getProperty(Keys.KEY_PostCommands_Cmd2);\n              else if (actName.equals(Keys.KEY_PostCommands_Cmd3[0]))\n                str = Common.getSettings().getProperty(Keys.KEY_PostCommands_Cmd3);\n\n              Common.performCommand(str);\n\n            } catch (Exception ex) {\n\n              Common.setExceptionMessage(ex);\n            }\n          }\n        };\n\n    JPanel container = new JPanel();\n    container.setLayout(new ColumnLayout());\n    container.setBorder(BorderFactory.createTitledBorder(Resource.getString(\"PostCommands.Title\")));\n\n    String[][] objects = {\n      Keys.KEY_PostCommands_Cmd1,\n      Keys.KEY_PostCommands_Cmd2,\n      Keys.KEY_PostCommands_Cmd3,\n      Keys.KEY_PostCommands_Cmd4,\n      Keys.KEY_PostCommands_Cmd5,\n      Keys.KEY_PostCommands_Cmd6,\n      Keys.KEY_PostCommands_Cmd7,\n      Keys.KEY_PostCommands_Cmd8\n    };\n\n    for (int i = 0; i < 3; i++) {\n      JTextField text_field = new JTextField(Common.getSettings().getProperty(objects[i]));\n      text_field.setPreferredSize(new Dimension(400, 25));\n      text_field.setEditable(true);\n      text_field.setActionCommand(objects[i][0]);\n      text_field.addActionListener(_TextFieldListener);\n      text_field.addKeyListener(_TextFieldKeyListener);\n\n      JButton exe = new JButton(Resource.getString(\"PostCommands.Execute\"));\n      exe.setActionCommand(objects[i][0]);\n      exe.setPreferredSize(new Dimension(100, 20));\n      exe.addActionListener(_ExecuteListener);\n\n      JPanel panel = new JPanel();\n      panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n      panel.add(text_field);\n      panel.add(exe);\n\n      container.add(panel);\n    }\n\n    container.add(Box.createRigidArea(new Dimension(1, 10)));\n\n    JLabel label = new JLabel(Resource.getString(\"PostCommands.PostProcessing\"));\n    label.setToolTipText(Resource.getString(\"PostCommands.PostProcessing.Tip\"));\n\n    container.add(label);\n\n    for (int i = 3; i < objects.length; i++) {\n      JTextField text_field = new JTextField(Common.getSettings().getProperty(objects[i]));\n      text_field.setPreferredSize(new Dimension(400, 25));\n      text_field.setEditable(true);\n      text_field.setActionCommand(objects[i][0]);\n      text_field.addActionListener(_TextFieldListener);\n      text_field.addKeyListener(_TextFieldKeyListener);\n\n      JPanel panel = new JPanel();\n      panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n      panel.add(text_field);\n      panel.add(new JLabel(Keys.ITEMS_ConversionMode[i - 3].toString()));\n\n      container.add(panel);\n    }\n\n    JCheckBox box = new JCheckBox(Resource.getString(Keys.KEY_PostProcessCompletion[0]));\n    box.setToolTipText(Resource.getString(Keys.KEY_PostProcessCompletion[0] + Keys.KEY_Tip));\n    box.setActionCommand(Keys.KEY_PostProcessCompletion[0]);\n    box.setSelected(Common.getSettings().getBooleanProperty(Keys.KEY_PostProcessCompletion));\n    box.addActionListener(_CheckBoxListener);\n\n    container.add(box);\n\n    return buildHeadPanel(container, Resource.getString(\"TabPanel.PostCommandsPanel\"));\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3161, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 119, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kaspervandenberg/aida/tree/master/Search/taverna-plugin/src/main/java/org/vle/aid/taverna/edit/AIDAddRDFStatement.java", "rawCode": "  JPanel getButtons() {\n    JPanel result = new JPanel();\n    result.add(cancelButton);\n    result.add(addButton);\n    cancelButton.addActionListener(this);\n    addButton.addActionListener(this);\n    return result;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3162, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [206], "initializationEnd": [229], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 315, "focalAPIEnd": 346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton)"], "useStart": [527], "useEnd": [566], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davidmerrick/Classes/tree/master/ECE 152/GUIs/eventGenerator.java", "rawCode": "      void startGui() {\n        /// Creates a JFrame object (the window)\n        JFrame mainframe = new JFrame(\"Main Frame\");\n\n        /// Creates a new button object (labels it Button 1)\n        button1 = new JButton(\"Button 1\");\n\n        /// Put a listener on the button so the code can respond to clicks\n        button1.addActionListener(this);\n\n        /// Set the Program to exit when the window is closed\n        mainframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        /// Put the button on the window\n        mainframe.getContentPane().add(button1);\n\n        /// Set the window to 300 by 300 pixels\n        mainframe.setSize(300, 300);\n\n        /// Actually display the window\n        mainframe.setVisible(true);\n      }\n"}, {"dataset": "addActionListener", "exampleID": 3163, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 196, "focalAPIEnd": 237, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gvtools/gvtools-legacy/tree/master/libraries/libUIComponent/src/org/gvsig/gui/beans/table/models/JValueSelector.java", "rawCode": "  /**\n   * Obtiene el botón de cancelar\n   *\n   * @return JButton\n   */\n  public JButton getBCancel() {\n    if (bCancel == null) {\n      bCancel = new JButton(Messages.getText(\"cancelar\"));\n      bAccept.addActionListener(cancelListener);\n      bCancel.addActionListener(this);\n    }\n    return bCancel;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3164, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [987], "initializationEnd": [1004], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [1010], "configurationEnd": [1062], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1068, "focalAPIEnd": 1108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [1520], "useEnd": [1554], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spixi/Dijkstra/tree/master/src/de/bwv_aachen/dijkstra/gui/EditorWindow_AirportSelector.java", "rawCode": "  public void draw() {\n    super.setTitle(\"Ziel wähle...\");\n    super.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n    super.setResizable(false);\n    super.setAlwaysOnTop(true); // this is a bit hacky..\n\n    super.getContentPane().setLayout(new GridLayout(1, 2));\n\n    ((JComponent) getContentPane()).setBorder(BorderFactory.createEmptyBorder(40, 40, 40, 40));\n\n    ComboBoxModel<Object> cbm =\n        new DefaultComboBoxModel<Object>(controller.getModel().getAirportList().values().toArray());\n    this.cb = new JComboBox<Object>(cbm);\n\n    // Containers for a left and a right ares\n    JPanel leftArea = new JPanel();\n    JPanel rightArea = new JPanel(); // for the modals form contents\n    rightArea.setLayout(new BoxLayout(rightArea, BoxLayout.Y_AXIS));\n\n    // Buttons\n    JPanel buttonContainer = new JPanel();\n    buttonContainer.setLayout(new FlowLayout());\n    buttonContainer.setBorder(BorderFactory.createEmptyBorder(20, 0, 0, 0));\n\n    JButton approveButton = new JButton(\"Ok\");\n    approveButton.setActionCommand(\"approveAPselection\");\n    approveButton.addActionListener(this.al);\n\n    JButton cancelButton = new JButton(\"Abbrechen\");\n    cancelButton.addActionListener(\n        new ActionListener() {\n          JFrame thisWin;\n\n          public ActionListener c(JFrame f) {\n            thisWin = f;\n            return this;\n          }\n\n          public void actionPerformed(ActionEvent e) { // inline window disposal ...\n            thisWin.dispose();\n          }\n        }.c(this));\n\n    buttonContainer.add(approveButton);\n    buttonContainer.add(cancelButton);\n\n    // Icon for the left side\n    leftArea.add(new JLabel(new ImageIcon(\"res/airport-icon_2.gif\")));\n\n    // label for the right side\n    JLabel decoText = new JLabel(\"Bitte wählen Sie das Ziel:\");\n    decoText.setBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0));\n\n    // add stuff to the panel\n    rightArea.add(decoText);\n    rightArea.add(cb);\n    rightArea.add(buttonContainer);\n\n    // align beans\n    decoText.setAlignmentX(CENTER_ALIGNMENT); // TODO why the f does this not work with left?!\n    cb.setAlignmentX(CENTER_ALIGNMENT);\n\n    // add panels to the the frame\n    super.getContentPane().add(leftArea);\n    super.getContentPane().add(rightArea);\n\n    // rest stuff\n    super.pack();\n    super.setLocationRelativeTo(null);\n    super.setVisible(true);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3165, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [394], "initializationEnd": [417], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setMnemonic(char)"], "configurationStart": [423], "configurationEnd": [450], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 456, "focalAPIEnd": 490, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [660], "useEnd": [685], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/caadapter/tree/master/software/caadapter/src/java/gov/nih/nci/caadapter/ui/common/geneInstance/GenerateHL7TestInstanceDialog.java", "rawCode": "  private void initialize() {\n    Container contentPane = getContentPane();\n    contentPane.setLayout(new BorderLayout());\n\n    JPanel frontPage = constructFrontPage();\n    contentPane.add(frontPage, BorderLayout.CENTER);\n\n    JPanel southPanel = new JPanel(new BorderLayout());\n    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING)); // new BorderLayout());\n    jbGenerate = new JButton(\"Generate\");\n    jbGenerate.setMnemonic('G');\n    jbGenerate.addActionListener(this);\n    jbCancel = new JButton(\"Cancel\");\n    jbCancel.setMnemonic('C');\n    jbCancel.addActionListener(this);\n    JPanel tempPanel = new JPanel(new GridLayout(1, 2));\n    tempPanel.add(jbGenerate);\n    tempPanel.add(jbCancel);\n    buttonPanel.add(tempPanel); // , BorderLayout.EAST);\n    southPanel.add(buttonPanel, BorderLayout.NORTH);\n    contentPane.add(southPanel, BorderLayout.SOUTH);\n    pack();\n    initialSet();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3166, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 112, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gortega017/Scrips/tree/master/projects/Project4/src/DrawingPanel.java", "rawCode": "    private void setupEvents() {\n      slider.addChangeListener(this);\n      box.addActionListener(this);\n      colorButton.addActionListener(this);\n      saveAsItem.addActionListener(this);\n      this.setImage1Item.addActionListener(this);\n      this.setImage2Item.addActionListener(this);\n    }\n"}, {"dataset": "addActionListener", "exampleID": 3167, "initialization": ["JButton jButton = new JXButton(String)"], "initializationStart": [1576], "initializationEnd": [1601], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [1627], "configurationEnd": [1669], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1675, "focalAPIEnd": 1708, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/Reha/src/systemEinstellungen/SysUtilVerkauf.java", "rawCode": "  private JPanel getContent() {\n\n    // 1 2 3 4 5 6\n    String xwerte = \"15dlu, 3dlu, 60dlu, 5dlu, 40dlu:g, 15dlu\";\n    // 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n    String ywerte =\n        \"5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p,\"\n            +\n            // \"\" 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\n            \"5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p,\"\n            +\n            // 41 42 43 44 45 46 47 48 49\n            \"5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu, p, 5dlu\";\n    FormLayout lay = new FormLayout(xwerte, ywerte);\n    CellConstraints cc = new CellConstraints();\n    // JXPanel pane = new JXPanel();\n    PanelBuilder pane = new PanelBuilder(lay);\n    pane.setDefaultDialogBorder();\n    pane.getPanel().setOpaque(false);\n\n    pane.addSeparator(\"Bondruck\", cc.xyw(1, 2, 5));\n    // JXLabel lab = new JXLabel(\"Bon:\");\n    // pane.add(lab, cc.xyw(2, 2, 2));\n\n    JXLabel lab = new JXLabel(\"Drucker:\");\n    pane.add(lab, cc.xy(3, 4));\n\n    PrintService[] printers = PrinterJob.lookupPrintServices();\n    druckernamen = new String[printers.length];\n    for (int i = 0; i < printers.length; i++) {\n      druckernamen[i] = printers[i].getName();\n    }\n    bonDrucker = new JComboBox(druckernamen);\n    pane.add(bonDrucker, cc.xy(5, 4));\n\n    lab = new JXLabel(\"Vorlage:\");\n    pane.add(lab, cc.xy(3, 6));\n\n    bonVorlage = new JRtaTextField(\"nix\", false);\n    bonVorlage.setLayout(new BorderLayout());\n    bonVorlage.add(bonVorlageB = new JXButton(\"auswählen\"), BorderLayout.EAST);\n    bonVorlageB.setActionCommand(\"vorlageBon\");\n    bonVorlageB.addActionListener(al);\n    pane.add(bonVorlage, cc.xy(5, 6));\n\n    lab = new JXLabel(\"Anzahlspalten:\");\n    pane.add(lab, cc.xy(3, 8));\n\n    bonSpalten = new JComboBox(spaltenAnzahl);\n    pane.add(bonSpalten, cc.xy(5, 8));\n\n    lab = new JXLabel(\"Spalte 1:\");\n    pane.add(lab, cc.xy(3, 10));\n\n    bonSpalte1 = new JComboBox(spaltenNamen);\n    pane.add(bonSpalte1, cc.xy(5, 10));\n\n    lab = new JXLabel(\"Spalte 2:\");\n    pane.add(lab, cc.xy(3, 12));\n\n    bonSpalte2 = new JComboBox(spaltenNamen);\n    pane.add(bonSpalte2, cc.xy(5, 12));\n\n    lab = new JXLabel(\"Spalte 3:\");\n    pane.add(lab, cc.xy(3, 14));\n\n    bonSpalte3 = new JComboBox(spaltenNamen);\n    pane.add(bonSpalte3, cc.xy(5, 14));\n\n    lab = new JXLabel(\"Spalte 4:\");\n    pane.add(lab, cc.xy(3, 16));\n\n    bonSpalte4 = new JComboBox(spaltenNamen);\n    pane.add(bonSpalte4, cc.xy(5, 16));\n\n    lab = new JXLabel(\"Spalte 5:\");\n    pane.add(lab, cc.xy(3, 18));\n\n    bonSpalte5 = new JComboBox(spaltenNamen);\n    pane.add(bonSpalte5, cc.xy(5, 18));\n\n    lab = new JXLabel(\"Spalte 6:\");\n    pane.add(lab, cc.xy(3, 20));\n\n    bonSpalte6 = new JComboBox(spaltenNamen);\n    pane.add(bonSpalte6, cc.xy(5, 20));\n\n    lab = new JXLabel(\"Seitenlänge anpassen?\");\n    pane.add(lab, cc.xy(3, 22));\n\n    bonAnpassen = new JRtaCheckBox();\n    pane.add(bonAnpassen, cc.xy(5, 22));\n\n    lab = new JXLabel(\"Seitenlänge pro Artikel:\");\n    pane.add(lab, cc.xy(3, 24));\n\n    bonSeitenlaenge = new JRtaTextField(\"nix\", false);\n    bonSeitenlaenge.setLayout(new BorderLayout());\n    bonSeitenlaenge.add(new JXLabel(\"mm * 100\"), BorderLayout.EAST);\n    pane.add(bonSeitenlaenge, cc.xy(5, 24));\n\n    pane.addSeparator(\"Rechnungsdruck\", cc.xyw(1, 26, 5));\n    /*\n    lab = new JXLabel(\"Rechnung:\");\n    pane.add(lab, cc.xyw(2, 26, 2));\n    */\n    lab = new JXLabel(\"Drucker:\");\n    pane.add(lab, cc.xy(3, 28));\n\n    rechnungDrucker = new JComboBox(druckernamen);\n    pane.add(rechnungDrucker, cc.xy(5, 28));\n\n    lab = new JXLabel(\"Vorlage:\");\n    pane.add(lab, cc.xy(3, 30));\n\n    rechnungVorlage = new JRtaTextField(\"nix\", false);\n    rechnungVorlage.setLayout(new BorderLayout());\n    rechnungVorlage.add(rechnungVorlageB = new JXButton(\"auswählen\"), BorderLayout.EAST);\n    rechnungVorlageB.setActionCommand(\"vorlageRechnung\");\n    rechnungVorlageB.addActionListener(al);\n    pane.add(rechnungVorlage, cc.xy(5, 30));\n\n    lab = new JXLabel(\"Anzahlspalten:\");\n    pane.add(lab, cc.xy(3, 32));\n\n    rechnungSpalten = new JComboBox(spaltenAnzahl);\n    pane.add(rechnungSpalten, cc.xy(5, 32));\n\n    lab = new JXLabel(\"Spalte 1:\");\n    pane.add(lab, cc.xy(3, 34));\n\n    rechnungSpalte1 = new JComboBox(spaltenNamen);\n    pane.add(rechnungSpalte1, cc.xy(5, 34));\n\n    lab = new JXLabel(\"Spalte 2:\");\n    pane.add(lab, cc.xy(3, 36));\n\n    rechnungSpalte2 = new JComboBox(spaltenNamen);\n    pane.add(rechnungSpalte2, cc.xy(5, 36));\n\n    lab = new JXLabel(\"Spalte 3:\");\n    pane.add(lab, cc.xy(3, 38));\n\n    rechnungSpalte3 = new JComboBox(spaltenNamen);\n    pane.add(rechnungSpalte3, cc.xy(5, 38));\n\n    lab = new JXLabel(\"Spalte 4:\");\n    pane.add(lab, cc.xy(3, 40));\n\n    rechnungSpalte4 = new JComboBox(spaltenNamen);\n    pane.add(rechnungSpalte4, cc.xy(5, 40));\n\n    lab = new JXLabel(\"Spalte 5:\");\n    pane.add(lab, cc.xy(3, 42));\n\n    rechnungSpalte5 = new JComboBox(spaltenNamen);\n    pane.add(rechnungSpalte5, cc.xy(5, 42));\n\n    lab = new JXLabel(\"Spalte 6:\");\n    pane.add(lab, cc.xy(3, 44));\n\n    rechnungSpalte6 = new JComboBox(spaltenNamen);\n    pane.add(rechnungSpalte6, cc.xy(5, 44));\n\n    lab = new JXLabel(\"Exemplare:\");\n    pane.add(lab, cc.xy(3, 46));\n\n    rechnungExemplare = new JRtaTextField(\"ZAHLEN\", false);\n    pane.add(rechnungExemplare, cc.xy(5, 46));\n\n    lab = new JXLabel(\"Sofort drucken?\");\n    pane.add(lab, cc.xy(3, 48));\n\n    sofortDrucken = new JRtaCheckBox();\n    pane.add(sofortDrucken, cc.xy(5, 48));\n    /*\n    speichern = new JXButton(\"speichern\");\n    speichern.setActionCommand(\"speicher\");\n    speichern.addActionListener(al);\n    pane.add(speichern, cc.xy(5, 50));\n    */\n    pane.getPanel().validate();\n\n    return pane.getPanel();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3168, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 65, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TutenStain/Hedgehog-Photo/tree/master/Hedgehog Photo/src/se/cth/hedgehogphoto/geocoding/view/GeoSearchPanel.java", "rawCode": "  public void addOkButtonListener(ActionListener listener) {\n    this.okButton.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3169, "initialization": ["JButton jButton = createButton(*,*,*)"], "initializationStart": [1265], "initializationEnd": [1431], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1437, "focalAPIEnd": 1469, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridBagLayout.addLayoutComponent(jButton,GridBagConstraints)", "JPanel.add(jButton)"], "useStart": [1651, 1707], "useEnd": [1701, 1732], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-2-0/src/lib/com/izforge/izpack/frontend/FrontendLicence.java", "rawCode": "  /** Builds the GUI. */\n  private void buildGUI() {\n    // We initialize our layout\n    layout = new GridBagLayout();\n    gbConstraints = new GridBagConstraints();\n    gbConstraints.insets = new Insets(5, 5, 5, 5);\n    JPanel contentPane = (JPanel) getContentPane();\n    contentPane.setLayout(layout);\n\n    // We put our components\n\n    JLabel label =\n        new JLabel(\n            langpack.getString(\"frontend.licence.msg\"),\n            icons.getImageIcon(\"history\"),\n            JLabel.TRAILING);\n    FrontendFrame.buildConstraints(gbConstraints, 0, 0, 1, 1, 1.0, 0.0);\n    gbConstraints.fill = GridBagConstraints.NONE;\n    gbConstraints.anchor = GridBagConstraints.SOUTHWEST;\n    layout.addLayoutComponent(label, gbConstraints);\n    contentPane.add(label);\n\n    textArea = new JTextArea(getLicenceText());\n    textArea.setEditable(false);\n    textArea.setCaretPosition(1);\n    scroller = new JScrollPane(textArea);\n    FrontendFrame.buildConstraints(gbConstraints, 0, 1, 1, 1, 1.0, 1.0);\n    scroller.setPreferredSize(new Dimension(500, 250));\n    gbConstraints.fill = GridBagConstraints.BOTH;\n    gbConstraints.anchor = GridBagConstraints.CENTER;\n    layout.addLayoutComponent(scroller, gbConstraints);\n    contentPane.add(scroller);\n\n    okButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"frontend.licence.ok\"),\n            icons.getImageIcon(\"forward\"),\n            FrontendFrame.buttonsHColor);\n    okButton.addActionListener(this);\n    FrontendFrame.buildConstraints(gbConstraints, 0, 2, 1, 1, 1.0, 0.0);\n    gbConstraints.fill = GridBagConstraints.NONE;\n    gbConstraints.anchor = GridBagConstraints.SOUTH;\n    layout.addLayoutComponent(okButton, gbConstraints);\n    contentPane.add(okButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3170, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)", "jButton.setBounds(Rectangle)", "jButton.setActionCommand(String)"], "configurationStart": [295, 323, 380], "configurationEnd": [317, 374, 411], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 417, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton,*)", "setDefaultButton(jButton)"], "useStart": [690, 842], "useEnd": [731, 887], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-semantic-tools/tree/master/software/SIW/src/java/gov/nih/nci/ncicb/cadsr/loader/util/AntSecretReplace.java", "rawCode": "  private void jbInit() throws Exception {\n    this.getContentPane().setLayout(null);\n    this.setSize(new Dimension(299, 201));\n    passwordLabel.setText(\"Password\");\n    passwordLabel.setBounds(new Rectangle(25, 50, 150, 30));\n    passwordField.setBounds(new Rectangle(130, 50, 135, 30));\n    okButton.setText(\"OK\");\n    okButton.setBounds(new Rectangle(135, 135, 55, 20));\n    okButton.setActionCommand(\"OK\");\n    okButton.addActionListener(this);\n    cancelButton.setText(\"Cancel\");\n    cancelButton.setBounds(new Rectangle(200, 135, 75, 20));\n    cancelButton.setActionCommand(\"Cancel\");\n    cancelButton.addActionListener(this);\n    this.getContentPane().add(cancelButton, null);\n    this.getContentPane().add(okButton, null);\n    this.getContentPane().add(passwordField, null);\n    this.getContentPane().add(passwordLabel, null);\n\n    this.getRootPane().setDefaultButton(okButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3171, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setMargin(Insets)"], "configurationStart": [755], "configurationEnd": [803], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 809, "focalAPIEnd": 847, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSCSI/Triana/tree/master/triana-gui/src/main/java/org/trianacode/gui/panels/CompilePanel.java", "rawCode": "  /** Constructs the panel for setting compiling options */\n  private JPanel getCompilePanel() {\n    JPanel labelpanel = new JPanel(new GridLayout(3, 1));\n    labelpanel.add(new JLabel(Env.getString(\"compilerCommand\")));\n    labelpanel.add(new JLabel(Env.getString(\"compilerClasspath\")));\n    labelpanel.add(new JLabel(Env.getString(\"compilerArguments\")));\n    labelpanel.setBorder(new EmptyBorder(0, 30, 0, 3));\n\n    JPanel commandpanel = new JPanel(new BorderLayout());\n    commandpanel.add(command, BorderLayout.CENTER);\n    commandpanel.add(compilerbrowse, BorderLayout.EAST);\n    commandpanel.setBorder(new EmptyBorder(0, 0, 3, 0));\n\n    JPanel commandcont = new JPanel(new BorderLayout());\n    commandcont.add(commandpanel, BorderLayout.WEST);\n\n    compilerbrowse.setMargin(new Insets(6, 4, 2, 4));\n    compilerbrowse.addActionListener(this);\n\n    command.setText(Env.getCompilerCommand());\n\n    JPanel classpanel = new JPanel(new BorderLayout());\n    classpanel.add(classpath, BorderLayout.CENTER);\n    classpanel.add(classButton, BorderLayout.EAST);\n    classButton.setActionCommand(Env.getString(\"compilerClasspath\"));\n    classpanel.setBorder(new EmptyBorder(0, 0, 3, 0));\n\n    classButton.setMargin(new Insets(6, 4, 2, 4));\n    classButton.addActionListener(this);\n\n    if (LAST_CLASSPATH == null) {\n      classpath.setText(Env.getClasspath());\n    } else {\n      classpath.setText(LAST_CLASSPATH);\n    }\n\n    JPanel argpanel = new JPanel(new BorderLayout());\n    argpanel.add(arg, BorderLayout.CENTER);\n    argpanel.add(argButton, BorderLayout.EAST);\n    argButton.setActionCommand(\"compilerArguments\");\n    argButton.setMargin(new Insets(6, 4, 2, 4));\n    argButton.addActionListener(this);\n\n    if (LAST_ARG == null) {\n      arg.setText(Env.getJavacArgs());\n    } else {\n      arg.setText(LAST_ARG);\n    }\n\n    command.setCaretPosition(0);\n    classpath.setCaretPosition(0);\n    arg.setCaretPosition(0);\n\n    JPanel comppanel = new JPanel(new GridLayout(3, 1));\n    comppanel.add(commandcont);\n    comppanel.add(classpanel);\n    comppanel.add(argpanel);\n\n    compile.addItemListener(this);\n    compile.setSelected(LAST_COMPILE);\n\n    JPanel compcont = new JPanel(new BorderLayout());\n    compcont.add(compile, BorderLayout.NORTH);\n    compcont.add(labelpanel, BorderLayout.WEST);\n    compcont.add(comppanel, BorderLayout.CENTER);\n\n    JPanel compcont2 = new JPanel(new BorderLayout());\n    compcont2.add(compcont, BorderLayout.NORTH);\n    compcont2.setBorder(new EmptyBorder(0, 0, 5, 0));\n\n    return compcont2;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3172, "initialization": ["JButton jButton = new JButton()", "ActionListener l = new ActionListener()"], "initializationStart": [278, 398], "initializationEnd": [291, 546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setName(String)"], "configurationStart": [299], "configurationEnd": [350], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 554, "focalAPIEnd": 598, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mxro/osgi-maven/tree/master/thrdSwingApplicationFramework/src/main/java/org/jdesktop/application/DefaultInputBlocker.java", "rawCode": "  private JDialog createBlockingDialog() {\n    JOptionPane optionPane = new JOptionPane();\n    /* If the task can be canceled, then add the cancel\n     * button. Otherwise clear the default OK button.\n     */\n    if (getTask().getUserCanCancel()) {\n      JButton cancelButton = new JButton();\n      cancelButton.setName(\"BlockingDialog.cancelButton\");\n      ActionListener doCancelTask =\n          new ActionListener() {\n            public void actionPerformed(ActionEvent ignore) {\n              getTask().cancel(true);\n            }\n          };\n      cancelButton.addActionListener(doCancelTask);\n      optionPane.setOptions(new Object[] {cancelButton});\n    } else {\n      optionPane.setOptions(new Object[] {}); // no OK button\n    }\n    /* Create the JDialog. If the task can be canceled, then\n     * map closing the dialog window to canceling the task.\n     */\n    Component dialogOwner = (Component) getTarget();\n    String taskTitle = getTask().getTitle();\n    String dialogTitle = (taskTitle == null) ? \"BlockingDialog\" : taskTitle;\n    final JDialog dialog = optionPane.createDialog(dialogOwner, dialogTitle);\n    dialog.setModal(true);\n    dialog.setName(\"BlockingDialog\");\n    dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);\n    WindowListener dialogCloseListener =\n        new WindowAdapter() {\n          public void windowClosing(WindowEvent e) {\n            if (getTask().getUserCanCancel()) {\n              getTask().cancel(true);\n              dialog.setVisible(false);\n            }\n          }\n        };\n    dialog.addWindowListener(dialogCloseListener);\n    optionPane.setName(\"BlockingDialog.optionPane\");\n    injectBlockingDialogComponents(dialog);\n    /* Reset the JOptionPane's message property after injecting\n     * an initial value for the message string.\n     */\n    recreateOptionPaneMessage(optionPane);\n    dialog.pack();\n    return dialog;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3173, "initialization": ["JButton jButton = createButton(*,*,*)"], "initializationStart": [1614], "initializationEnd": [1777], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1783, "focalAPIEnd": 1820, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridBagLayout.addLayoutComponent(jButton,GridBagConstraints)", "add(jButton)"], "useStart": [2008, 2069], "useEnd": [2063, 2087], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-0-5/src/lib/com/izforge/izpack/frontend/FrontendLocTab.java", "rawCode": "  /** Builds our GUI. */\n  private void buildGUI() {\n    // Usefull stuffs\n    JLabel label;\n    JScrollPane scroller;\n\n    label = new JLabel(langpack.getString(\"tabs.loc.available\"));\n    FrontendFrame.buildConstraints(gbConstraints, 0, 0, 1, 1, 0.4, 0.0);\n    gbConstraints.fill = GridBagConstraints.NONE;\n    gbConstraints.anchor = GridBagConstraints.SOUTHWEST;\n    layout.addLayoutComponent(label, gbConstraints);\n    add(label);\n\n    label = new JLabel(langpack.getString(\"tabs.loc.selected\"));\n    FrontendFrame.buildConstraints(gbConstraints, 2, 0, 1, 1, 0.4, 0.0);\n    layout.addLayoutComponent(label, gbConstraints);\n    add(label);\n\n    availableList = new JList();\n    availableList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    availableList.setCellRenderer(FrontendFrame.LIST_RENDERER);\n    scroller = new JScrollPane(availableList);\n    scroller.setPreferredSize(new Dimension(40, 150));\n    FrontendFrame.buildConstraints(gbConstraints, 0, 1, 1, 2, 0.4, 0.0);\n    gbConstraints.fill = GridBagConstraints.BOTH;\n    gbConstraints.anchor = GridBagConstraints.CENTER;\n    layout.addLayoutComponent(scroller, gbConstraints);\n    add(scroller);\n\n    selectedList = new JList();\n    selectedList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    selectedList.setCellRenderer(FrontendFrame.LIST_RENDERER);\n    scroller = new JScrollPane(selectedList);\n    scroller.setPreferredSize(new Dimension(40, 150));\n    FrontendFrame.buildConstraints(gbConstraints, 2, 1, 1, 2, 0.4, 0.0);\n    layout.addLayoutComponent(scroller, gbConstraints);\n    add(scroller);\n\n    includeButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"tabs.loc.include\"),\n            icons.getImageIcon(\"forward\"),\n            FrontendFrame.buttonsHColor);\n    includeButton.addActionListener(this);\n    FrontendFrame.buildConstraints(gbConstraints, 1, 1, 1, 1, 0.2, 0.0);\n    gbConstraints.fill = GridBagConstraints.HORIZONTAL;\n    gbConstraints.anchor = GridBagConstraints.NORTH;\n    layout.addLayoutComponent(includeButton, gbConstraints);\n    add(includeButton);\n\n    removeButton =\n        ButtonFactory.createButton(\n            langpack.getString(\"tabs.loc.remove\"),\n            icons.getImageIcon(\"back\"),\n            FrontendFrame.buttonsHColor);\n    removeButton.addActionListener(this);\n    FrontendFrame.buildConstraints(gbConstraints, 1, 2, 1, 1, 0.2, 0.0);\n    gbConstraints.anchor = GridBagConstraints.SOUTH;\n    layout.addLayoutComponent(removeButton, gbConstraints);\n    add(removeButton);\n\n    initLists();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3174, "initialization": ["JButton jButton = createButton(*,*)"], "initializationStart": [4200], "initializationEnd": [4320], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 4326, "focalAPIEnd": 4363, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridBagLayout.addLayoutComponent(jButton,GridBagConstraints)", "add(jButton)"], "useStart": [4535, 4594], "useEnd": [4588, 4612], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/branches/branch-3-5/src/lib/com/izforge/izpack/panels/ShortcutPanel.java", "rawCode": "  /**\n   * This method creates the UI for this panel.\n   *\n   * @param groups A <code>Vector</code> that contains <code>Strings</code> with all the names of\n   *     the existing program groups. These will be placed in the <code>groupList</code>.\n   * @param currentUserList if <code>true</code> it indicates that the list of groups is valid for\n   *     the current user, otherwise it is considered valid for all users.\n   */\n  /*--------------------------------------------------------------------------*/\n  private void buildUI(Vector groups, boolean currentUserList) {\n    layout = new GridBagLayout();\n    constraints = new GridBagConstraints();\n    setLayout(layout);\n\n    // ----------------------------------------------------\n    // label a the top of the panel, that gives the\n    // basic instructions\n    // ----------------------------------------------------\n    listLabel = new JLabel(parent.langpack.getString(\"ShortcutPanel.regular.list\"), JLabel.LEADING);\n\n    constraints.gridx = 0;\n    constraints.gridy = 0;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.weightx = 1.0;\n    constraints.weighty = 1.0;\n    constraints.insets = new Insets(5, 5, 5, 5);\n    constraints.fill = GridBagConstraints.NONE;\n    constraints.anchor = GridBagConstraints.WEST;\n    layout.addLayoutComponent(listLabel, constraints);\n    add(listLabel);\n\n    // ----------------------------------------------------\n    // list box to list all of the existing program groups\n    // at the intended destination\n    // ----------------------------------------------------\n    groupList = new JList(groups);\n    groupList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    groupList.getSelectionModel().addListSelectionListener(this);\n    JScrollPane scrollPane = new JScrollPane(groupList);\n\n    constraints.gridx = 0;\n    constraints.gridy = 1;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.fill = GridBagConstraints.BOTH;\n    layout.addLayoutComponent(scrollPane, constraints);\n    add(scrollPane);\n\n    // ----------------------------------------------------\n    // radio buttons to select current user or all users.\n    // ----------------------------------------------------\n    if (shortcut.multipleUsers()) {\n      JPanel usersPanel = new JPanel(new GridLayout(2, 1));\n      ButtonGroup usersGroup = new ButtonGroup();\n      currentUser =\n          new JRadioButton(\n              parent.langpack.getString(\"ShortcutPanel.regular.currentUser\"), currentUserList);\n      currentUser.addActionListener(this);\n      usersGroup.add(currentUser);\n      usersPanel.add(currentUser);\n      allUsers =\n          new JRadioButton(\n              parent.langpack.getString(\"ShortcutPanel.regular.allUsers\"), !currentUserList);\n      allUsers.addActionListener(this);\n      usersGroup.add(allUsers);\n      usersPanel.add(allUsers);\n      TitledBorder border =\n          new TitledBorder(\n              new EmptyBorder(2, 2, 2, 2),\n              parent.langpack.getString(\"ShortcutPanel.regular.userIntro\"));\n      usersPanel.setBorder(border);\n\n      constraints.gridx = 1;\n      constraints.gridy = 1;\n      constraints.gridwidth = 1;\n      constraints.gridheight = 1;\n      constraints.fill = GridBagConstraints.NONE;\n      layout.addLayoutComponent(usersPanel, constraints);\n      add(usersPanel);\n    }\n\n    // ----------------------------------------------------\n    // edit box that contains the suggested program group\n    // name, which can be modfied or substituted from the\n    // list by the user\n    // ----------------------------------------------------\n    programGroup = new JTextField(suggestedProgramGroup, 40); // 40?\n\n    constraints.gridx = 0;\n    constraints.gridy = 2;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    layout.addLayoutComponent(programGroup, constraints);\n    add(programGroup);\n\n    // ----------------------------------------------------\n    // reset button that allows the user to revert to the\n    // original suggestion for the program group\n    // ----------------------------------------------------\n    defaultButton =\n        ButtonFactory.createButton(\n            parent.langpack.getString(\"ShortcutPanel.regular.default\"), idata.buttonsHColor);\n    defaultButton.addActionListener(this);\n\n    constraints.gridx = 1;\n    constraints.gridy = 2;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.fill = GridBagConstraints.NONE;\n    layout.addLayoutComponent(defaultButton, constraints);\n    add(defaultButton);\n\n    // ----------------------------------------------------\n    // check box to allow the user to decide if a desktop\n    // shortcut should be created.\n    // this should only be created if needed and requested\n    // in the definition file.\n    // ----------------------------------------------------\n    allowDesktopShortcut =\n        new JCheckBox(parent.langpack.getString(\"ShortcutPanel.regular.desktop\"), true);\n\n    constraints.gridx = 0;\n    constraints.gridy = 3;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n\n    if (hasDesktopShortcuts) {\n      layout.addLayoutComponent(allowDesktopShortcut, constraints);\n      add(allowDesktopShortcut);\n    }\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3175, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 43, "focalAPIEnd": 95, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ramqvist/Simulated-ecosystem/tree/master/src/chalmers/dax021308/ecosystem/view/SettingsView.java", "rawCode": "    private void setMyAdvButtons() {\n      advButtonCancel.addActionListener(advListenerCancel);\n      advButtonApply.addActionListener(advListenerApply);\n    }\n"}, {"dataset": "addActionListener", "exampleID": 3176, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [1498], "configurationEnd": [1547], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1614, "focalAPIEnd": 1654, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/we3whoreign/WISP/tree/master/tools/XMLEditor/src/com/xmleditor/gui/dialogs/SkillEditPanel.java", "rawCode": "  private void initGUI() {\n    this.removeAll();\n    this.validate();\n    name.setPreferredSize(new Dimension(TEXT_WIDTH, TEXT_HEIGHT));\n    level.setPreferredSize(new Dimension(TEXT_WIDTH, TEXT_HEIGHT));\n    spCost.setPreferredSize(new Dimension(TEXT_WIDTH, TEXT_HEIGHT));\n    requiredLevel.setPreferredSize(new Dimension(TEXT_WIDTH, TEXT_HEIGHT));\n\n    name.setText(_skill.getName());\n    level.setText(String.valueOf(_skill.getMaxLevel()));\n    spCost.setText(String.valueOf(_skill.getSpcost()));\n    requiredLevel.setText(String.valueOf(_skill.getRequiredlevel()));\n\n    this.setOpaque(true);\n    JPanel container = new JPanel();\n    JPanel namePanel = new JPanel();\n    JPanel levelPanel = new JPanel();\n    JPanel spCostPanel = new JPanel();\n    JPanel requiredLevelPanel = new JPanel();\n    JPanel startAtOnePanel = new JPanel();\n\n    container.setLayout(new MigLayout(\"wrap 1\"));\n\n    addPanelLayout(namePanel, new JLabel(\"Name\"), name);\n    addPanelLayout(levelPanel, new JLabel(\"Level\"), level);\n    addPanelLayout(spCostPanel, new JLabel(\"SP Cost\"), spCost);\n    addPanelLayout(startAtOnePanel, levelOne);\n    addPanelLayout(requiredLevelPanel, new JLabel(\"Minimum Level to Obtain:\"), requiredLevel);\n\n    container.add(namePanel);\n    container.add(levelPanel);\n    container.add(spCostPanel);\n    container.add(requiredLevelPanel);\n    container.add(startAtOnePanel);\n    container.add(requiredSkills);\n    container.add(addRequiredSkill);\n    container.add(removeRequiredSkill);\n\n    addRequiredSkill.setActionCommand(\"ADD_REQUIRED\");\n    removeRequiredSkill.setActionCommand(\"REMOVE_REQUIRED\");\n    addRequiredSkill.addActionListener(this);\n    removeRequiredSkill.addActionListener(this);\n\n    if (this._skill.getSkillRequirements() != null) {\n      for (SkillRequirement sr : this._skill.getSkillRequirements()) {\n        model.addElement(sr.getName() + \" - \" + sr.getLevel());\n      }\n    }\n\n    this.setLayout(new BorderLayout());\n\n    this.add(container, BorderLayout.CENTER);\n    this.add(generateButtons(), BorderLayout.SOUTH);\n\n    this.validate();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3177, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [91], "initializationEnd": [138], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setLocation(Point)", "jButton.setSize(Dimension)", "jButton.setPreferredSize(Dimension)", "jButton.setEnabled(boolean)"], "configurationStart": [144, 185, 229, 282], "configurationEnd": [179, 223, 276, 308], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 314, "focalAPIEnd": 344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/opencadtools/opencadtools/tree/master/src/com/iver/cit/gvsig/gui/cad/panels/JPanelFieldDefinition.java", "rawCode": "  private JButton createButton(String text, int y, boolean enabled) {\n    JButton button = new JButton(PluginServices.getText(this, text));\n    button.setLocation(new Point(7, y));\n    button.setSize(new Dimension(145, 23));\n    button.setPreferredSize(new Dimension(100, 26));\n    button.setEnabled(enabled);\n    button.addActionListener(this);\n    return button;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3178, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [88], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)", "jButton.setFont(Font)"], "configurationStart": [107, 134], "configurationEnd": [128, 158], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 164, "focalAPIEnd": 196, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridBagLayout.setConstraints(jButton,GridBagConstraints)", "add(jButton)"], "useStart": [202, 237], "useEnd": [231, 248], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tschmid/tinyos-main/tree/master/apps/AntiTheft/java/BagPanel.java", "rawCode": "  public JButton makeButton(String label, ActionListener action) {\n    JButton button = new JButton();\n    button.setText(label);\n    button.setFont(boldFont);\n    button.addActionListener(action);\n    bag.setConstraints(button, c);\n    add(button);\n    return button;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3179, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [291], "initializationEnd": [314], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "l!=null", "guardType": "IF {", "guardExpressionStart": 320, "guardExpressionEnd": 341, "guardBlockStart": 320, "guardBlockEnd": 397, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 350, "focalAPIEnd": 390, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [402], "useEnd": [431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maiklos/squirrel-sql/tree/master/sql12/plugins/dbcopy/src/main/java/net/sourceforge/squirrel_sql/plugins/dbcopy/gui/DualProgressBarDialog.java", "rawCode": "  public static JPanel buildButtonPanel(ActionListener listener) {\n    JPanel buttonPanel = new JPanel(new FlowLayout());\n    // i18n[DualProgressBarDialog.cancelButtonLabel=Cancel]\n    String buttonText = s_stringMgr.getString(\"DualProgressBarDialog.cancelButtonLabel\");\n    cancelButton = new JButton(buttonText);\n    if (listener != null) {\n      cancelButton.addActionListener(listener);\n    }\n    buttonPanel.add(cancelButton);\n    return buttonPanel;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3180, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [178], "initializationEnd": [191], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)", "jButton.setBounds(Rectangle)"], "configurationStart": [199, 270], "configurationEnd": [262, 345], "guardCondition": "jButton==null", "guardType": "IF {", "guardExpressionStart": 127, "guardExpressionEnd": 153, "guardBlockStart": 127, "guardBlockEnd": 398, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 354, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gvtools/gvtools-legacy/tree/master/extensions/extArcims/src/es/prodevelop/cit/gvsig/arcims/gui/panels/ServiceNamesPanel.java", "rawCode": "  /**\n   * Inicializes the connectButton\n   *\n   * @return javax.swing.JButton\n   */\n  public JButton getConnectButton() {\n    if (connectButton == null) {\n      connectButton = new JButton();\n      connectButton.setText(PluginServices.getText(this, \"conectar\"));\n      connectButton.setBounds(new java.awt.Rectangle(383 - 17, 33 + 17, 100, 20));\n\n      connectButton.addActionListener(this);\n    }\n\n    return connectButton;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3181, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setMargin(Insets)"], "configurationStart": [937], "configurationEnd": [986], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 992, "focalAPIEnd": 1031, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSCSI/Triana/tree/master/triana-gui/src/main/java/org/trianacode/gui/appmaker/CommandFilePanel.java", "rawCode": "  private JPanel getOutputPanel() {\n    JPanel labelpanel = new JPanel(new GridLayout(3, 1, 0, 3));\n    labelpanel.add(new JLabel(Env.getString(\"applicationName\")));\n    labelpanel.add(new JLabel(Env.getString(\"applicationPackage\")));\n    labelpanel.add(new JLabel(Env.getString(\"outputDir\")));\n    labelpanel.setBorder(new EmptyBorder(0, 0, 0, 3));\n\n    JPanel appnamepanel = new JPanel(new BorderLayout());\n    appnamepanel.add(appnamefield, BorderLayout.WEST);\n    appnamefield.addFocusListener(this);\n\n    JPanel apppackagepanel = new JPanel(new BorderLayout());\n    apppackagepanel.add(apppackagefield, BorderLayout.WEST);\n\n    JPanel outputdirpanel = new JPanel(new BorderLayout());\n    outputdirpanel.add(outputdirfield, BorderLayout.CENTER);\n    outputdirpanel.add(outputdirbrowse, BorderLayout.EAST);\n\n    JPanel outputdirpanel1 = new JPanel(new BorderLayout());\n    outputdirpanel1.add(outputdirpanel, BorderLayout.WEST);\n\n    outputdirbrowse.setMargin(new Insets(6, 4, 2, 4));\n    outputdirbrowse.addActionListener(this);\n\n    JPanel fieldpanel = new JPanel(new GridLayout(3, 1, 0, 3));\n    fieldpanel.add(appnamepanel);\n    fieldpanel.add(apppackagepanel);\n    fieldpanel.add(outputdirpanel1);\n\n    JPanel mainpanel = new JPanel(new BorderLayout());\n    mainpanel.add(labelpanel, BorderLayout.WEST);\n    mainpanel.add(fieldpanel, BorderLayout.CENTER);\n\n    JPanel mainpanel2 = new JPanel(new BorderLayout());\n    mainpanel2.add(mainpanel, BorderLayout.WEST);\n\n    return mainpanel2;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3182, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [85], "initializationEnd": [98], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)", "jButton.setPreferredSize(Dimension)"], "configurationStart": [106, 145], "configurationEnd": [137, 223], "guardCondition": "jButton==null", "guardType": "IF {", "guardExpressionStart": 40, "guardExpressionEnd": 63, "guardBlockStart": 40, "guardBlockEnd": 272, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 231, "focalAPIEnd": 265, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phreenet/UMUC/tree/master/CMSC335/src/project1/Project1.java", "rawCode": "  private JButton getBtCheckOut() {\n    if (btCheckOut == null) {\n      btCheckOut = new JButton();\n      btCheckOut.setText(\"Check Out\");\n      btCheckOut.setPreferredSize(new java.awt.Dimension(BUTTONWIDTH, BUTTONHEIGHT));\n      btCheckOut.addActionListener(this);\n    }\n    return btCheckOut;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3183, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [76], "initializationEnd": [89], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)"], "configurationStart": [97], "configurationEnd": [120], "guardCondition": "jButton==null", "guardType": "IF {", "guardExpressionStart": 37, "guardExpressionEnd": 57, "guardBlockStart": 37, "guardBlockEnd": 166, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 128, "focalAPIEnd": 159, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NLeSC/vbrowser/tree/master/source/nl.esciencecenter.vbrowser.vb2.vlet/src/nl/esciencecenter/vbrowser/vb2/vlet/proxy/vrs/CopyDialog.java", "rawCode": "  private JButton getSkipBut() {\n    if (skipBut == null) {\n      skipBut = new JButton();\n      skipBut.setText(\"Skip\");\n      skipBut.addActionListener(this);\n    }\n    return skipBut;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3184, "initialization": ["JButton jButton = new JButton()"], "initializationStart": [206], "initializationEnd": [219], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setText(String)", "jButton.setMnemonic(char)", "jButton.setActionCommand(String)"], "configurationStart": [227, 265, 302], "configurationEnd": [257, 294, 341], "guardCondition": "jButton==null", "guardType": "IF {", "guardExpressionStart": 157, "guardExpressionEnd": 182, "guardBlockStart": 157, "guardBlockEnd": 468, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 349, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setPreferredSize(Dimension)"], "useStart": [399], "useEnd": [461], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xrl/opensplice/tree/master/src/tools/cm/common/code/org/opensplice/common/view/DialogWindow.java", "rawCode": "  /**\n   * This method initializes the cancelButton\n   *\n   * @return The created or already existing Cancel button.\n   */\n  JButton getCancelButton() {\n    if (cancelButton == null) {\n      cancelButton = new JButton();\n      cancelButton.setText(\"Cancel\");\n      cancelButton.setMnemonic('C');\n      cancelButton.setActionCommand(\"cancel\");\n      cancelButton.addActionListener(controller);\n      cancelButton.setPreferredSize(new java.awt.Dimension(100, 20));\n    }\n    return cancelButton;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3185, "initialization": ["JButton jButton = createButton(String,*,*)"], "initializationStart": [1320], "initializationEnd": [1447], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1453, "focalAPIEnd": 1489, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton)"], "useStart": [1495], "useEnd": [1512], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenNMS/installer/tree/master/izpack/src/lib/com/izforge/izpack/panels/UserPathSelectionPanel.java", "rawCode": "  /** Creates the layout for this sub panel. */\n  protected void createLayout() {\n    // We woulduse the IzPanelLayout also in this \"sub\"panel.\n    // In an IzPanel there are support of this layout manager at\n    // more than one places. In this panel not, therefore we have\n    // to make all things needed.\n    // First create a layout helper.\n    LayoutHelper layoutHelper = new LayoutHelper(this);\n    // Start the layout.\n    layoutHelper.startLayout(new IzPanelLayout());\n    // One of the rare points we need explicit a constraints.\n    IzPanelConstraints ipc = IzPanelLayout.getDefaultConstraint(TEXT_CONSTRAINT);\n    // The text field should be stretched.\n    ipc.setXStretch(1.0);\n    textField = new JTextField(idata.getVariable(variableName), 10);\n    textField.addActionListener(this);\n    parent.setInitialFocus(textField);\n    add(textField, ipc);\n    // We would have place between text field and button.\n    add(IzPanelLayout.createHorizontalFiller(3));\n    // No explicit constraints for the button (else implicit) because\n    // defaults are OK.\n    String buttonText = parent.getInstallerFrame().langpack.getString(targetPanel + \".browse\");\n    if (buttonText == null) {\n      buttonText = parent.getInstallerFrame().langpack.getString(defaultPanelName + \".browse\");\n    }\n    browseButton =\n        ButtonFactory.createButton(\n            buttonText, parent.getInstallerFrame().icons.getImageIcon(\"open\"), idata.buttonsHColor);\n    browseButton.addActionListener(this);\n    add(browseButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3186, "initialization": ["JButton jButton = new JButton(String,*)"], "initializationStart": [512], "initializationEnd": [564], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)", "jButton.setMargin(Insets)"], "configurationStart": [570, 608], "configurationEnd": [602, 643], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 649, "focalAPIEnd": 674, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton,GridBagConstraints)", "jButton.setActionCommand(String)", "jButton.setMargin(Insets)", "jButton.addActionListener(ActionListener)", "JPanel.add(jButton,GridBagConstraints)", "jButton.setActionCommand(String)", "jButton.setMargin(Insets)", "jButton.addActionListener(ActionListener)", "JPanel.add(jButton,GridBagConstraints)", "jButton.setActionCommand(String)", "jButton.setMargin(Insets)", "jButton.addActionListener(ActionListener)", "JPanel.add(jButton,GridBagConstraints)"], "useStart": [680, 777, 809, 850, 881, 1221, 1256, 1297, 1328, 1430, 1467, 1508, 1539], "useEnd": [697, 803, 844, 875, 898, 1250, 1291, 1322, 1345, 1461, 1502, 1533, 1556], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bjorn/tiled-java/tree/master/src/tiled/mapeditor/animation/AnimationDialog.java", "rawCode": "  public JPanel makeUp() {\n    JButton b;\n    JLabel l;\n    JPanel main = new JPanel(new BorderLayout());\n    JPanel data = new JPanel(new BorderLayout());\n    JPanel buttons = new JPanel(new GridBagLayout());\n    JPanel opt = new JPanel(new GridBagLayout());\n    canvas = new SpriteCanvas(this);\n\n    GridBagConstraints c = new GridBagConstraints();\n    c.fill = GridBagConstraints.BOTH;\n    c.weightx = 1;\n    c.weighty = 1;\n    c.gridx = 0;\n    c.gridy = 0;\n    c.gridheight = 1;\n    c.gridwidth = 1;\n    b = new JButton(\"\", Resources.getIcon(\"startframe.png\"));\n    b.setActionCommand(\"startframe\");\n    b.setMargin(new Insets(0, 0, 0, 0));\n    b.addActionListener(this);\n    buttons.add(b, c);\n\n    c.gridx = 1;\n    b = new JButton(\"\", Resources.getIcon(\"back.png\"));\n    b.setActionCommand(\"back\");\n    b.setMargin(new Insets(0, 0, 0, 0));\n    b.addActionListener(this);\n    buttons.add(b, c);\n\n    c.gridx = 2;\n    playstop = new JButton(\"\", Resources.getIcon(\"play.png\"));\n    playstop.setActionCommand(\"playstop\");\n    playstop.setMargin(new Insets(0, 0, 0, 0));\n    playstop.addActionListener(this);\n    buttons.add(playstop, c);\n\n    c.gridx = 3;\n    b = new JButton(\"\", Resources.getIcon(\"forward.png\"));\n    b.setActionCommand(\"forward\");\n    b.setMargin(new Insets(0, 0, 0, 0));\n    b.addActionListener(this);\n    buttons.add(b, c);\n\n    c.gridx = 4;\n    b = new JButton(\"\", Resources.getIcon(\"lastframe.png\"));\n    b.setActionCommand(\"lastframe\");\n    b.setMargin(new Insets(0, 0, 0, 0));\n    b.addActionListener(this);\n    buttons.add(b, c);\n\n    c.gridx = 0;\n    c.gridy = 0;\n    c.gridwidth = 2;\n    String[] defaultArr = {\"None\"};\n    keyframe = new JComboBox(defaultArr);\n    keyframe.addActionListener(this);\n    opt.add(keyframe, c);\n\n    c.gridwidth = 1;\n    c.gridy = 1;\n    l = new JLabel(\"Range:\");\n    opt.add(l, c);\n\n    c.gridx = 1;\n    lFrameRange = new JLabel(\"-\");\n    opt.add(lFrameRange, c);\n\n    c.gridy = 2;\n    c.gridx = 0;\n    l = new JLabel(\"Current:\");\n    opt.add(l, c);\n\n    c.gridx = 1;\n    lCurrentFrame = new JLabel(\"?\");\n    opt.add(lCurrentFrame, c);\n\n    c.gridy = 3;\n    c.gridx = 0;\n    l = new JLabel(\"Rate:\");\n    opt.add(l, c);\n\n    c.gridx = 1;\n    lFrameRate = new JLabel(\"?\");\n    opt.add(lFrameRate, c);\n\n    data.add(canvas, BorderLayout.CENTER);\n    data.add(buttons, BorderLayout.SOUTH);\n\n    main.add(data, BorderLayout.CENTER);\n    main.add(opt, BorderLayout.EAST);\n\n    return main;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3187, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 74, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nebulostore/nebulostore/tree/master/nebulostore/src/main/java/org/nebulostore/gui/GUIView.java", "rawCode": "  protected void addSaveFileButtonListener(ActionListener listener) {\n    saveFileButton_.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3188, "initialization": ["JButton jButton = createButton(*,*,*)"], "initializationStart": [1080], "initializationEnd": [1288], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1294, "focalAPIEnd": 1330, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(jButton)"], "useStart": [1336], "useEnd": [1353], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/branches/4.2/src/lib/com/izforge/izpack/panels/PathSelectionPanel.java", "rawCode": "  /** Creates the layout for this sub panel. */\n  protected void createLayout() {\n    // We would use the IzPanelLayout also in this \"sub\" panel.\n    // In an IzPanel there is support for this layout manager in\n    // more than one place, but not in this panel so we have\n    // to make all things needed.\n    // First create a layout helper.\n    LayoutHelper layoutHelper = new LayoutHelper(this);\n    // Start the layout.\n    layoutHelper.startLayout(new IzPanelLayout());\n    // One of the rare points we need explicit a constraints.\n    IzPanelConstraints ipc = IzPanelLayout.getDefaultConstraint(TEXT_CONSTRAINT);\n    // The text field should be stretched.\n    ipc.setXStretch(1.0);\n    textField = new JTextField(idata.getInstallPath(), 10);\n    textField.addActionListener(this);\n    parent.setInitialFocus(textField);\n    add(textField, ipc);\n    // We would have place between text field and button.\n    add(IzPanelLayout.createHorizontalFiller(3));\n    // No explicit constraints for the button (else implicit) because\n    // defaults are OK.\n    browseButton =\n        ButtonFactory.createButton(\n            parent.getInstallerFrame().langpack.getString(\"TargetPanel.browse\"),\n            parent.getInstallerFrame().icons.getImageIcon(\"open\"),\n            idata.buttonsHColor);\n    browseButton.addActionListener(this);\n    add(browseButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3189, "initialization": ["JButton jButton = new JButton(ImageIcon)"], "initializationStart": [404], "initializationEnd": [426], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)"], "configurationStart": [2190], "configurationEnd": [2226], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 2232, "focalAPIEnd": 2266, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setEnabled(boolean)", "GridBagLayout.setConstraints(jButton,GridBagConstraints)", "JPanel.add(jButton)"], "useStart": [2272, 2306, 2351], "useEnd": [2300, 2345, 2378], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/leif81/openmap-maven/tree/master/src/openmap/com/bbn/openmap/gui/MiniBrowser.java", "rawCode": "  protected WindowSupport init() {\n    stack = new Stack();\n    GridBagLayout gridbag = new GridBagLayout();\n    GridBagConstraints c = new GridBagConstraints();\n    setLayout(gridbag);\n\n    // Has to happen before first push\n    browserLaunch = new JButton(\"Open in Browser\");\n    URL url = this.getClass().getResource(\"w.gif\");\n    ImageIcon imageIcon = new ImageIcon(url, \"Go back\");\n    backButton = new JButton(imageIcon);\n    dismissButton = new JButton(\"Close\");\n    //////\n    jep = new JEditorPane();\n    jep.setEditable(false);\n    jep.addHyperlinkListener(\n        new HyperlinkListener() {\n          public void hyperlinkUpdate(HyperlinkEvent e) {\n            if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n              JEditorPane pane = (JEditorPane) e.getSource();\n\n              if (e instanceof HTMLFrameHyperlinkEvent) {\n                Debug.message(\"minibrowser\", \"processing HTMLFrameHyperlinkEvent\");\n                HTMLFrameHyperlinkEvent evt = (HTMLFrameHyperlinkEvent) e;\n                HTMLDocument doc = (HTMLDocument) pane.getDocument();\n                doc.processHTMLFrameHyperlinkEvent(evt);\n              } else {\n                Debug.message(\"minibrowser\", \"processing HyperlinkEvent\");\n                try {\n                  push(e.getURL());\n                } catch (Throwable t) {\n                  t.printStackTrace();\n                }\n              }\n            }\n          }\n        });\n\n    JScrollPane jsp =\n        new JScrollPane(\n            jep,\n            JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,\n            JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n\n    c.gridwidth = GridBagConstraints.REMAINDER;\n    c.fill = GridBagConstraints.BOTH;\n    c.anchor = GridBagConstraints.NORTHWEST;\n    c.insets = new Insets(5, 5, 5, 5);\n    c.weightx = 1;\n    c.weighty = 1;\n    gridbag.setConstraints(jsp, c);\n    add(jsp);\n\n    JPanel buttonPanel = new JPanel();\n    GridBagLayout gridbag2 = new GridBagLayout();\n    GridBagConstraints c2 = new GridBagConstraints();\n    buttonPanel.setLayout(gridbag2);\n\n    c2.fill = GridBagConstraints.NONE;\n    c2.anchor = GridBagConstraints.WEST;\n    c2.weightx = 0;\n    c2.weighty = 0;\n\n    backButton.setActionCommand(BackCmd);\n    backButton.addActionListener(this);\n    backButton.setEnabled(false);\n    gridbag2.setConstraints(backButton, c2);\n    buttonPanel.add(backButton);\n\n    browserLaunch.setActionCommand(LaunchBrowserCmd);\n    browserLaunch.addActionListener(this);\n    browserLaunch.setVisible(false);\n    gridbag2.setConstraints(browserLaunch, c2);\n    buttonPanel.add(browserLaunch);\n\n    WindowSupport ws = new WindowSupport(this, \"\");\n\n    c2.anchor = GridBagConstraints.EAST;\n    c2.weightx = 1;\n    dismissButton.setActionCommand(WindowSupport.KillWindowCmd);\n    dismissButton.addActionListener(ws);\n    gridbag2.setConstraints(dismissButton, c2);\n    buttonPanel.add(dismissButton);\n\n    ////////////\n\n    c.fill = GridBagConstraints.HORIZONTAL;\n    c.anchor = GridBagConstraints.WEST;\n    c.weightx = 1;\n    c.weighty = 0;\n    c.gridy = 1;\n\n    gridbag.setConstraints(buttonPanel, c);\n    add(buttonPanel);\n\n    // Call displayInWindow on this.\n    return ws;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3190, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [263], "initializationEnd": [299], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 305, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton,GridBagConstraints)"], "useStart": [345], "useEnd": [369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/redstar3894/android-gcc/tree/master/libjava/classpath/examples/gnu/classpath/examples/print/Demo.java", "rawCode": "  private JPanel createPrintPanel() {\n    JPanel panel = new JPanel(new GridBagLayout());\n    GridBagConstraints c = new GridBagConstraints();\n\n    c.insets = new Insets(5, 5, 5, 5);\n    c.gridx = 0;\n    c.gridy = 0;\n    c.gridwidth = 2;\n    JButton serviceBtn = new JButton(\"Show print dialog ...\");\n    serviceBtn.addActionListener(this);\n    panel.add(serviceBtn, c);\n\n    c.gridx = 0;\n    c.gridy = 1;\n    c.gridwidth = 1;\n    c.anchor = GridBagConstraints.WEST;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    JLabel selectedLb = new JLabel(\"Selected print service: \");\n    panel.add(selectedLb, c);\n\n    c.gridx = 1;\n    c.gridy = 1;\n    dialogSelectedService_Tf = new JTextField(25);\n    panel.add(dialogSelectedService_Tf, c);\n\n    c.gridx = 0;\n    c.gridy = 2;\n    JLabel selectedAttsLb = new JLabel(\"Selected Attributes: \");\n    panel.add(selectedAttsLb, c);\n\n    c.gridx = 1;\n    c.gridy = 2;\n    c.weighty = 1.5;\n    c.fill = GridBagConstraints.BOTH;\n    dialogSelectedServiceAtts = new JList();\n    dialogSelectedServiceAtts.setVisibleRowCount(3);\n    JScrollPane scrollPane = new JScrollPane(dialogSelectedServiceAtts);\n    panel.add(scrollPane, c);\n\n    c.gridx = 0;\n    c.gridy = 3;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    JLabel fileLb = new JLabel(\"File to print: \");\n    panel.add(fileLb, c);\n\n    c.gridx = 1;\n    c.gridy = 3;\n    selectedFileTf = new JTextField(25);\n    panel.add(selectedFileTf, c);\n\n    c.gridx = 2;\n    c.gridy = 3;\n    c.fill = GridBagConstraints.NONE;\n    JButton fileBt = new JButton(\"Choose file\");\n    fileBt.addActionListener(this);\n    panel.add(fileBt, c);\n\n    c.gridx = 0;\n    c.gridy = 4;\n    c.fill = GridBagConstraints.HORIZONTAL;\n    JLabel docFormatLb = new JLabel(\"Document format of file: \");\n    panel.add(docFormatLb, c);\n\n    c.gridx = 1;\n    c.gridy = 4;\n    dialogSelectedServicedocFormat = new JComboBox();\n    panel.add(dialogSelectedServicedocFormat, c);\n\n    c.gridx = 0;\n    c.gridy = 5;\n    c.gridwidth = 2;\n    c.anchor = GridBagConstraints.CENTER;\n    c.fill = GridBagConstraints.NONE;\n    JButton printBt = new JButton(\"Print\");\n    printBt.setActionCommand(\"PRINT\");\n    printBt.addActionListener(this);\n    panel.add(printBt, c);\n\n    return panel;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3191, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 189, "focalAPIEnd": 219, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LeeCIT/overwatch/tree/master/overwatch/src/overwatch/gui/AssignPanel.java", "rawCode": "  /**\n   * Generates an event when the add button is used. This should create a picker of some kind.\n   *\n   * @param lis\n   */\n  public void addAddButtonListener(ActionListener lis) {\n    buttAdd.addActionListener(lis);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3192, "initialization": ["JButton jButton = createButton(*,*)"], "initializationStart": [3578], "initializationEnd": [3703], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 3709, "focalAPIEnd": 3743, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridBagLayout.addLayoutComponent(jButton,GridBagConstraints)", "add(jButton)"], "useStart": [3967, 4023], "useEnd": [4017, 4038], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/3.10.1/src/lib/com/izforge/izpack/panels/ShortcutPanel.java", "rawCode": "  /**\n   * This method creates an alternative UI for this panel. This UI can be used when the creation of\n   * shortcuts is not supported on the target system. It displays an apology for the inability to\n   * create shortcuts on this system, along with information about the intended targets. In\n   * addition, there is a button that allows the user to save more complete information in a text\n   * file. Based on this information the user might be able to create the necessary shortcut him or\n   * herself. At least there will be information about how to launch the application.\n   */\n\n  /*--------------------------------------------------------------------------*/\n  private void buildAlternateUI() {\n    layout = new GridBagLayout();\n    constraints = new GridBagConstraints();\n    setLayout(layout);\n\n    // ----------------------------------------------------\n    // static text a the top of the panel, that apologizes\n    // about the fact that we can not create shortcuts on\n    // this particular target OS.\n    // ----------------------------------------------------\n    MultiLineLabel apologyLabel =\n        new MultiLineLabel(parent.langpack.getString(\"ShortcutPanel.alternate.apology\"), 0, 0);\n\n    constraints.gridx = 0;\n    constraints.gridy = 0;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.weightx = 1.0;\n    constraints.weighty = 1.0;\n    constraints.insets = new Insets(5, 5, 5, 5);\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    constraints.anchor = GridBagConstraints.WEST;\n    layout.addLayoutComponent(apologyLabel, constraints);\n    add(apologyLabel);\n\n    // ----------------------------------------------------\n    // label that explains the significance ot the list box\n    // ----------------------------------------------------\n    MultiLineLabel listLabel =\n        new MultiLineLabel(parent.langpack.getString(\"ShortcutPanel.alternate.targetsLabel\"), 0, 0);\n\n    constraints.gridx = 0;\n    constraints.gridy = 1;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.weightx = 1.0;\n    constraints.weighty = 1.0;\n    layout.addLayoutComponent(listLabel, constraints);\n    add(listLabel);\n\n    // ----------------------------------------------------\n    // list box to list all of the intended shortcut targets\n    // ----------------------------------------------------\n    Vector targets = new Vector();\n\n    for (int i = 0; i < shortcuts.size(); i++) {\n      targets.add(((ShortcutData) shortcuts.elementAt(i)).target);\n    }\n\n    targetList = new JList(targets);\n\n    JScrollPane scrollPane = new JScrollPane(targetList);\n\n    constraints.gridx = 0;\n    constraints.gridy = 2;\n    constraints.fill = GridBagConstraints.BOTH;\n    layout.addLayoutComponent(scrollPane, constraints);\n    add(scrollPane);\n\n    // ----------------------------------------------------\n    // static text that explains about the text file\n    // ----------------------------------------------------\n    MultiLineLabel fileExplanation =\n        new MultiLineLabel(\n            parent.langpack.getString(\"ShortcutPanel.alternate.textFileExplanation\"), 0, 0);\n\n    constraints.gridx = 0;\n    constraints.gridy = 3;\n    constraints.weightx = 1.0;\n    constraints.weighty = 1.0;\n    constraints.fill = GridBagConstraints.HORIZONTAL;\n    layout.addLayoutComponent(fileExplanation, constraints);\n    add(fileExplanation);\n\n    // ----------------------------------------------------\n    // button to save the text file\n    // ----------------------------------------------------\n    saveButton =\n        ButtonFactory.createButton(\n            parent.langpack.getString(\"ShortcutPanel.alternate.saveButton\"), idata.buttonsHColor);\n    saveButton.addActionListener(this);\n\n    constraints.gridx = 0;\n    constraints.gridy = 4;\n    constraints.gridwidth = 1;\n    constraints.gridheight = 1;\n    constraints.fill = GridBagConstraints.NONE;\n    constraints.anchor = GridBagConstraints.CENTER;\n    layout.addLayoutComponent(saveButton, constraints);\n    add(saveButton);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3193, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setBackground(Color)", "jButton.setOpaque(boolean)", "jButton.setFont(Font)"], "configurationStart": [154, 189, 212], "configurationEnd": [183, 206, 227], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 233, "focalAPIEnd": 258, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zarac/tgspu/tree/master/datavetenskapI/Programmering/Projekt/DatavetenskapHT10Projekt/src/tre_pa_rad/Viewer.java", "rawCode": "  /**\n   * Gör metod andropen till knappen som skickas in.\n   *\n   * @param b knappen som ska ställas in.\n   */\n  public void initButton(JButton b) {\n    b.setBackground(Color.ORANGE);\n    b.setOpaque(true);\n    b.setFont(font);\n    b.addActionListener(this);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3194, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [1852], "initializationEnd": [1891], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1897, "focalAPIEnd": 1931, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equalizeSize(jButton,JButton)", "JPanel.add(jButton)"], "useStart": [2237, 2290], "useEnd": [2284, 2316], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cytoscape/cytoscape2/tree/master/coreplugins/NetworkAnalyzer/src/main/java/de/mpg/mpi_inf/bioinf/netanalyzer/ui/AnalysisDialog.java", "rawCode": "  /**\n   * Creates and lays out the controls inside this dialog.\n   *\n   * <p>This method is called upon initialization only.\n   */\n  private void initControls(boolean enableParameterMapping) {\n    final boolean useExpandable = SettingsSerializer.getPluginSettings().getExpandable();\n    final Container contentPane = getContentPane();\n    contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));\n    final JTabbedPane tabs = useExpandable ? null : new JTabbedPane();\n\n    final JComponent simpleStatsPanel = new SimpleStatsPanel(stats);\n    if (useExpandable) {\n      simpleStatsPanel.setBorder(BorderFactory.createTitledBorder(Messages.DI_SIMPLEPARAMS));\n      contentPane.add(simpleStatsPanel);\n    } else {\n      contentPane.add(tabs);\n      tabs.addTab(Messages.DI_SIMPLEPARAMS, simpleStatsPanel);\n    }\n\n    final String[] complexNames = stats.getComputedComplex();\n    for (int i = 0; i < complexNames.length; ++i) {\n      final String id = complexNames[i];\n      final ComplexParam cp = stats.getComplex(id);\n      final String typeName = cp.getClass().getSimpleName();\n      try {\n        final Class<?> visClass = Plugin.getVisualizerClass(typeName);\n        final Constructor<?> con = visClass.getConstructors()[0];\n        final Object[] conParams = new Object[] {cp, SettingsSerializer.getDefault(id)};\n        ComplexParamVisualizer v = (ComplexParamVisualizer) con.newInstance(conParams);\n        final Decorator[] decs = Decorators.get(id);\n        if (useExpandable) {\n          contentPane.add(new ChartExpandablePanel(this, id, v, (i == 0), decs));\n        } else {\n          tabs.addTab(v.getTitle(), new ChartDisplayPanel(this, id, v, decs));\n        }\n      } catch (Exception ex) {\n        throw new InnerException(ex);\n      }\n    }\n\n    contentPane.add(Box.createVerticalStrut(Utils.BORDER_SIZE));\n    saveButton = new JButton(Messages.DI_SAVESTATISTICS);\n    saveButton.addActionListener(this);\n    visualizeButton = new JButton(Messages.DI_VISUALIZEPARAMETER);\n    visualizeButton.setEnabled(false);\n    visualizeButton.addActionListener(this);\n    visualizeButton.setEnabled(enableParameterMapping);\n    JPanel buttonPane = new JPanel(new FlowLayout(FlowLayout.CENTER, Utils.BORDER_SIZE, 0));\n    Utils.equalizeSize(saveButton, visualizeButton);\n    buttonPane.add(saveButton);\n    buttonPane.add(Box.createHorizontalStrut(Utils.BORDER_SIZE * 2));\n    buttonPane.add(visualizeButton);\n    contentPane.add(buttonPane);\n    contentPane.add(Box.createVerticalStrut(Utils.BORDER_SIZE));\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3195, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 73, "focalAPIEnd": 115, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nebulostore/nebulostore/tree/master/nebulostore/src/main/java/org/nebulostore/gui/GUIView.java", "rawCode": "  protected void addNewViewButtonListener(ActionListener listener) {\n    newViewButton_.addActionListener(listener);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3196, "initialization": ["JButton jButton = new JButton(*)"], "initializationStart": [47], "initializationEnd": [108], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setToolTipText(String)"], "configurationStart": [114], "configurationEnd": [150], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 842, "focalAPIEnd": 878, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSCSI/Triana/tree/master/triana-toolboxes/audio/src/main/java/audio/output/WaveViewToolBar.java", "rawCode": "  public void createWidgets() {\n    fullSize = new JButton(FileUtils.getSystemImageIcon(\"ZoomFullSize.gif\"));\n    fullSize.setToolTipText(\"Full Size\");\n\n    zoomIn = new JButton(FileUtils.getSystemImageIcon(\"ZoomIn.gif\"));\n    zoomIn.setToolTipText(\"Zoom In\");\n\n    zoomOut = new JButton(FileUtils.getSystemImageIcon(\"ZoomOut.gif\"));\n    zoomOut.setToolTipText(\"Zoom Out\");\n\n    print = new JButton(FileUtils.getSystemImageIcon(\"Print.gif\"));\n    print.setToolTipText(\"Print\");\n\n    detail = new JButton(FileUtils.getSystemImageIcon(\"Detail.gif\"));\n    detail.setToolTipText(\"Full Waveform Resolution\");\n\n    properties = new JButton(FileUtils.getSystemImageIcon(\"Properties.gif\"));\n    properties.setToolTipText(\"Properties\");\n\n    add(fullSize);\n    add(zoomIn);\n    add(zoomOut);\n    add(print);\n    add(detail);\n    add(properties);\n\n    fullSize.addActionListener(waveview);\n    zoomIn.addActionListener(waveview);\n    zoomOut.addActionListener(waveview);\n    print.addActionListener(waveview);\n    detail.addActionListener(waveview);\n    properties.addActionListener(waveview);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3197, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setActionCommand(String)", "jButton.setBounds(int,int,int,int)", "jButton.setText(String)"], "configurationStart": [41, 88, 135], "configurationEnd": [82, 129, 167], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 173, "focalAPIEnd": 210, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Alekseylv/Poker-game/tree/master/Poker/src/poker/GUI/Login.java", "rawCode": "  private JButton buttonConnect() {\n\n    buttonConnect.setActionCommand(\"connect\");\n    buttonConnect.setBounds(70, 140, 100, 25);\n    buttonConnect.setText(\"Connect\");\n    buttonConnect.addActionListener(this);\n    return buttonConnect;\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3198, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 933, "focalAPIEnd": 966, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)"], "useStart": [1179], "useEnd": [1207], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/splat/src/script/BasicMaths.java", "rawCode": "  /** Initialise the user interface. */\n  protected void initUI() {\n    // Put both lists of spectra in scroll panes.\n    JScrollPane scrollerOne = new JScrollPane(viewOne);\n    JScrollPane scrollerTwo = new JScrollPane(viewTwo);\n\n    // Set the JList models to show the spectra (SplatListModel\n    // interacts with the global list).\n    viewOne.setModel(new SplatListModel(viewOne.getSelectionModel()));\n    viewTwo.setModel(new SplatListModel(viewTwo.getSelectionModel()));\n\n    // These only allow the selection of one item at a time.\n    viewOne.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);\n    viewTwo.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);\n\n    // Add these to a JPanel.\n    JPanel viewPanel = new JPanel(new BorderLayout());\n    viewPanel.add(scrollerOne, BorderLayout.EAST);\n    viewPanel.add(scrollerTwo, BorderLayout.WEST);\n\n    // Add actions to the math operator buttons.\n    addButton.addActionListener(this);\n    subButton.addActionListener(this);\n    divButton.addActionListener(this);\n    mulButton.addActionListener(this);\n\n    // And place together in a panel.\n    mathActionBar.setLayout(new GridLayout(1, 0));\n    mathActionBar.add(addButton);\n    mathActionBar.add(subButton);\n    mathActionBar.add(divButton);\n    mathActionBar.add(mulButton);\n\n    // Window control action.\n    exitButton.addActionListener(this);\n    windowActionBar.add(exitButton);\n\n    // Panel for action bars.\n    JPanel actionPanel = new JPanel(new BorderLayout());\n    actionPanel.add(mathActionBar, BorderLayout.NORTH);\n    actionPanel.add(windowActionBar, BorderLayout.SOUTH);\n\n    // Add components to main window.\n    contentPane.setLayout(new BorderLayout());\n    contentPane.add(viewPanel, BorderLayout.CENTER);\n    contentPane.add(actionPanel, BorderLayout.SOUTH);\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3199, "initialization": ["JButton jButton = new JButton(String)"], "initializationStart": [143], "initializationEnd": [166], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setPreferredSize(Dimension)"], "configurationStart": [172], "configurationEnd": [218], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 224, "focalAPIEnd": 254, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["jButton.setActionCommand(String)", "jButton.addKeyListener(KeyListener)", "add(jButton,*)"], "useStart": [260, 301, 4167], "useEnd": [295, 328, 4199], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/Reha/src/systemEinstellungen/SysUtilKalenderfarben.java", "rawCode": "  /** ************ Beginn der Methode f�r die Objekterstellung und -platzierung ******** */\n  private JPanel getVorlagenSeite() {\n    knopf1 = new JButton(\"anwenden\");\n    knopf1.setPreferredSize(new Dimension(70, 20));\n    knopf1.addActionListener(this);\n    knopf1.setActionCommand(\"anwenden\");\n    knopf1.addKeyListener(this);\n\n    knopf2 = new JButton(\"abbrechen\");\n    knopf2.setPreferredSize(new Dimension(70, 20));\n    knopf2.addActionListener(this);\n    knopf2.setActionCommand(\"abbrechen\");\n    knopf2.addKeyListener(this);\n\n    // String[] colorset = {\"akt. Einstellung\", \"Neutral\", \"OpenSea\", \"Freak\", \"Sundown\"};\n    int lang = SystemConfig.vSysDefNamen.size();\n    standard = new JComboBox();\n    standard.addItem(\"akt. Einstellung\");\n    for (int i = 0; i < lang; i++) {\n      standard.addItem(SystemConfig.vSysDefNamen.get(i));\n    }\n    standard.setSelectedIndex(0);\n    standard.setActionCommand(\"defwechsel\");\n    standard.addActionListener(this);\n    String[] alf = {\"0.1\", \"0.2\", \"0.3\", \"0.4\", \"0.5\", \"0.6\", \"0.7\", \"0.8\", \"0.9\", \"1.0\"};\n    alphawahl = new JComboBox(alf);\n    alphawahl.setSelectedItem(new Float(SystemConfig.KalenderAlpha).toString());\n    alphawahl.setActionCommand(\"alpha\");\n    alphawahl.addActionListener(this);\n\n    FarbTab = new JXTable();\n\n    ftm = new KalenderFarbenModel();\n    // SwingUtilities.invokeLater(new Runnable(){\n    // public void run()\n    // {\n    String[] dat = {\"Code\", \"Bedeutung\", \"Hintergrund\", \"Schriftfarbe\", \"Darstellung\"};\n    ftm.setDataVector(\n        (Vector) SystemConfig.vSysColDlg.clone(),\n        new Vector(Arrays.asList(dat)) /*getColumnData(dat)*/);\n    FarbTab.setModel(ftm);\n    FarbTab.setColumnSelectionAllowed(false);\n    FarbTab.setRowSelectionAllowed(true);\n    FarbTab.setCellSelectionEnabled(true);\n    FarbTab.addMouseListener(\n        new MouseAdapter() {\n          public void mousePressed(MouseEvent arg0) {\n            arg0.consume();\n          }\n\n          public void mouseClicked(MouseEvent arg0) {\n            arg0.consume();\n            System.out.println(\"Im eigenen Mouseadapter\");\n            if (arg0.getClickCount() == 2) {\n              int row = FarbTab.getSelectedRow();\n              int col = FarbTab.getSelectedColumn();\n              startCellEditing(FarbTab, row, col);\n            }\n            if (arg0.getClickCount() == 1) {\n              int row = FarbTab.getSelectedRow();\n              int col = FarbTab.getSelectedColumn();\n              FarbTab.setRowSelectionInterval(row, row);\n            }\n          }\n        });\n\n    FarbTab.getColumn(2).setCellEditor(new ColorEditor());\n    FarbTab.getColumn(2).setCellRenderer(new ColorRenderer(true));\n    FarbTab.getColumn(2).getCellEditor().addCellEditorListener(this);\n    FarbTab.getColumn(3).setCellEditor(new ColorEditor());\n    FarbTab.getColumn(3).setCellRenderer(new ColorRenderer(true));\n    FarbTab.getColumn(3).getCellEditor().addCellEditorListener(this);\n    FarbTab.getColumn(4).setCellRenderer(new JLabelRenderer());\n    FarbTab.setSortable(false);\n    FarbTab.validate();\n\n    // }\n    // });\n\n    JScrollPane listscr = new JScrollPane(FarbTab);\n    listscr.setOpaque(true);\n    listscr.getViewport().setOpaque(true);\n    listscr.validate();\n    // 1. 2. 3. 4. 5. 6. 7. 8. 9.\n    FormLayout lay =\n        new FormLayout(\n            \"p:g, 24dlu, 56dlu\",\n            // 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23.\n            \"10dlu, p, 10dlu, 70dlu:g, 10dlu,p, 10dlu, p, 20dlu, 10dlu, 10dlu, p, 4dlu, p, 4dlu, p\");\n\n    PanelBuilder builder = new PanelBuilder(lay);\n    builder.setDefaultDialogBorder();\n    builder.getPanel().setOpaque(false);\n    CellConstraints cc = new CellConstraints();\n\n    // builder.getPanel().setVisible(true);\n    // builder.getPanel().validate();\n\n    builder.addLabel(\"Farbset zur Bearbeitung auswählen\", cc.xy(1, 2));\n    builder.add(standard, cc.xy(3, 2));\n\n    builder.add(listscr, cc.xyw(1, 4, 3));\n\n    builder.addLabel(\"Bearbeitung abbrechen, bisheriges Farbschema bleibt erhalten\", cc.xy(1, 6));\n    builder.add(knopf2, cc.xy(3, 6));\n\n    builder.addLabel(\"Farbschema auf Kalender anwenden\", cc.xy(1, 8));\n    builder.add(knopf1, cc.xy(3, 8));\n\n    builder.addSeparator(\"Optional: Transparenz einstellen\", cc.xyw(1, 10, 3));\n\n    builder.addLabel(\"Transparenz wählen\", cc.xy(1, 12));\n    builder.add(alphawahl, cc.xy(3, 12));\n    builder.addLabel(\"Der eingestellte Wert ist sofort im Kalender sichtbar.\", cc.xy(1, 14));\n    /** ************************** */\n    // dieser Knopf nur solange bis die Defaults entwickelt wurden\n    /*\n    defaultSave = new JButton(\"eingestelltes Default abspeichern nur zur Entwicklung\");\n    defaultSave.setActionCommand(\"defaultsave\");\n    defaultSave.addActionListener(this);\n    builder.add(defaultSave, cc.xyw(1, 16,3));\n    */\n    return builder.getPanel();\n  }\n"}, {"dataset": "addActionListener", "exampleID": 3200, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["jButton.setMinimumSize(Dimension)", "jButton.setPreferredSize(Dimension)", "jButton.setMaximumSize(Dimension)"], "configurationStart": [1049, 1106, 1165], "configurationEnd": [1100, 1159, 1216], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = jButton.addActionListener(l)", "focalAPIStart": 1222, "focalAPIEnd": 1259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["JPanel.add(jButton)", "JPanel.add(jButton)"], "useStart": [1293, 1540], "useEnd": [1318, 1565], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dsjas297/FaceBreak/tree/master/gui/FBPage.java", "rawCode": "  public void create_topnav() {\n    topnav = new JPanel();\n    topnav.setLayout(new BoxLayout(topnav, BoxLayout.LINE_AXIS));\n    topnav.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n    topnav.setMinimumSize(new Dimension(width, 50));\n    topnav.setPreferredSize(new Dimension(width, 50));\n    topnav.setMaximumSize(new Dimension(width, 50));\n    topnav.setBackground(new Color(130, 0, 0));\n\n    // add logo\n    logo.addMouseListener(this);\n    logo.setForeground(Color.white);\n    Font logoFont = logo.getFont();\n    logo.setFont(new Font(logoFont.getFontName(), logoFont.getStyle(), 36));\n    logo.setMinimumSize(new Dimension(prof_width, 50));\n    logo.setPreferredSize(new Dimension(prof_width, 50));\n    logo.setMaximumSize(new Dimension(prof_width, 50));\n\n    // add search bar\n    search_box = new JTextField(20);\n    search_box.setMinimumSize(new Dimension(200, 40));\n    search_box.setPreferredSize(new Dimension(200, 40));\n    search_box.setMaximumSize(new Dimension(200, 40));\n    search_button = new JButton(\"Search\");\n    search_button.setMinimumSize(new Dimension(75, 40));\n    search_button.setPreferredSize(new Dimension(75, 40));\n    search_button.setMaximumSize(new Dimension(75, 40));\n    search_button.addActionListener(this);\n    topnav.add(search_box);\n    topnav.add(search_button);\n\n    // add edit button\n    edit_button.setForeground(Color.white);\n    edit_button.addMouseListener(this);\n    // add logout\n    logout.setForeground(Color.white);\n\n    topnav.add(logo);\n    topnav.add(search_box);\n    topnav.add(search_button);\n    topnav.add(Box.createHorizontalGlue());\n    topnav.add(edit_button);\n    topnav.add(logout);\n  }\n"}]