[{"dataset": "replaceAll", "exampleID": 8601, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 86, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URI(resultStr)", "new URI(string)"], "useStart": [78, 452], "useEnd": [117, 470], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/heussd/socio/tree/master/src/main/java/socio/rest/URIFactory.java", "rawCode": "  public static URI getUri(String uriString) throws Exception {\n    URI uri = new URI(uriString.replaceAll(\" \", \"+\"));\n\n    // These lines make me sad :(\n    if (uri.getQuery() != null) {\n      // Make sure the query part does not contain invalid brackets\n      if (!uri.getQuery().replaceAll(\"\\\\[\", \"\").replaceAll(\"\\\\]\", \"\").equals(uri.getQuery())) {\n        uriString = uri.toString().replaceAll(\"\\\\[\", \"%5B\").replaceAll(\"\\\\]\", \"%5D\");\n        uri = new URI(uriString);\n      }\n    }\n\n    return uri;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8602, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 132, "focalAPIEnd": 158, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["underscore(resultStr)"], "useStart": [106], "useEnd": [159], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mttkay/ignition/tree/master/ignition-support/ignition-support-lib/src/main/java/com/github/ignition/support/cache/AbstractCache.java", "rawCode": "  private void setRootDir(String rootDir) {\n    this.diskCacheDirectory =\n        rootDir + \"/cachefu/\" + IgnitedStrings.underscore(name.replaceAll(\"\\\\s\", \"\"));\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8603, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null&&string.startsWith(regex,)", "guardType": "IF {", "guardExpressionStart": 76, "guardExpressionEnd": 127, "guardBlockStart": 76, "guardBlockEnd": 185, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 142, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/savara/savara-core/tree/master/bundles/org.savara.bpmn2/src/main/java/org/savara/bpmn2/internal/parser/choreo/rules/TChoreographyParserRule.java", "rawCode": "  protected String getJoinName(String label) {\n    String ret = label;\n\n    if (ret != null && ret.startsWith(\"SequenceFlow_\")) {\n      ret = ret.replaceAll(\"SequenceFlow_\", \"L\");\n    }\n\n    return (ret);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8604, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 108, "focalAPIEnd": 139, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["trim(resultStr,int)", "setString(String,resultStr)"], "useStart": [190, 229], "useEnd": [223, 262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/branches/version-1.13.2/src/om/stdcomponent/EditFieldComponent.java", "rawCode": "  @Override\n  protected void formSetValue(String sValue, ActionParams ap) throws OmException {\n    sValue = sValue.replaceAll(\"\\r\\n\", \"\\n\");\n    if (getInteger(PROPERTY_ROWS) == 1) sValue = trim(sValue, MAXCHARS_SINGLELINE);\n    setString(PROPERTY_VALUE, sValue);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8605, "initialization": ["String string = ProjectDescriptor.getProjectName()"], "initializationStart": [530], "initializationEnd": [557], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["log(*)"], "tryExpressionStart": 831, "tryExpressionEnd": 835, "tryBlockStart": 831, "tryBlockEnd": 3232, "catchExpressionStart": 3131, "catchExpressionEnd": 3159, "catchBlockStart": 3131, "catchBlockEnd": 3180, "exceptionHandlingCallStart": [3167], "exceptionHandlingCallEnd": [3173], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1299, "focalAPIEnd": 1335, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/atl/tree/master/examples/org.eclipse.m2m.atl.examples/src/org/eclipse/m2m/atl/examples/AbstractExampleWizard.java", "rawCode": "  /**\n   * This will unzip the project described by <code>descriptor</code>, open it and refresh the\n   * workspace.\n   *\n   * @param descriptor Description of the project as it should be unzipped.\n   * @param monitor {@link IProgressMonitor} that will be used to monitor the operation.\n   */\n  protected void unzipProject(ProjectDescriptor descriptor, IProgressMonitor monitor) {\n    final String bundleName = descriptor.getBundleName();\n    final String zipLocation = descriptor.getZipLocation();\n    final String projectName = descriptor.getProjectName();\n\n    final URL interpreterZipUrl =\n        FileLocator.find(Platform.getBundle(bundleName), new Path(zipLocation), null);\n\n    final IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n\n    if (project.exists()) {\n      return;\n    }\n\n    try {\n      // We make sure that the project is created from this point forward.\n      project.create(monitor);\n\n      final ZipInputStream zipFileStream = new ZipInputStream(interpreterZipUrl.openStream());\n      ZipEntry zipEntry = zipFileStream.getNextEntry();\n\n      // We derive a regexedProjectName so that the dots don't end up being\n      // interpreted as the dot operator in the regular expression language.\n      final String regexedProjectName =\n          projectName.replaceAll(\"\\\\.\", \"\\\\.\"); // $NON-NLS-1$ //$NON-NLS-2$\n\n      while (zipEntry != null) {\n        // We will construct the new file but we will strip off the project\n        // directory from the beginning of the path because we have already\n        // created the destination project for this zip.\n        final File file =\n            new File(\n                project.getLocation().toString(),\n                zipEntry\n                    .getName()\n                    .replaceFirst(\n                        \"^\" + regexedProjectName + \"/\",\n                        \"\")); // $NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$\n\n        if (!zipEntry.isDirectory()) {\n\n          /*\n           * Copy files (and make sure parent directory exist)\n           */\n          final File parentFile = file.getParentFile();\n          if (null != parentFile && !parentFile.exists()) {\n            parentFile.mkdirs();\n          }\n\n          OutputStream os = null;\n\n          try {\n            os = new FileOutputStream(file);\n\n            final int bufferSize = 102400;\n            final byte[] buffer = new byte[bufferSize];\n            while (true) {\n              final int len = zipFileStream.read(buffer);\n              if (zipFileStream.available() == 0) {\n                break;\n              }\n              os.write(buffer, 0, len);\n            }\n          } finally {\n            if (null != os) {\n              os.close();\n            }\n          }\n        }\n\n        zipFileStream.closeEntry();\n        zipEntry = zipFileStream.getNextEntry();\n      }\n\n      project.open(monitor);\n      project.refreshLocal(IResource.DEPTH_INFINITE, monitor);\n\n      // Close and re-open the project to force eclipse to re-evaluate\n      // any natures that this project may have.\n      project.close(monitor);\n      project.open(monitor);\n    } catch (final IOException e) {\n      log(e);\n    } catch (final CoreException e) {\n      log(e);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8606, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 75, "focalAPIEnd": 109, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi/tree/master/RehaStatistik/src/Tools/StringTools.java", "rawCode": "  public static String EscapedDouble(String string) {\n    String escaped = string.replaceAll(\"\\'\", \"\\\\\\\\\\\\'\");\n    return escaped;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8607, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null)", "guardType": "IF {", "guardExpressionStart": 44, "guardExpressionEnd": 60, "guardBlockStart": 44, "guardBlockEnd": 71, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 83, "focalAPIEnd": 111, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [83, 83], "useEnd": [135, 159], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/happygiraffe/jslint4java/tree/master/jslint4java/src/main/java/com/googlecode/jslint4java/formatter/XmlFormatter.java", "rawCode": "  protected String escape(String str) {\n    if (str == null) return \"\";\n    return str.replaceAll(\"&\", \"&amp;\").replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8608, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 266, "guardExpressionEnd": 294, "guardBlockStart": 266, "guardBlockEnd": 374, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 321, "focalAPIEnd": 367, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["desc(resultStr)", "asc(resultStr)"], "useStart": [643, 673], "useEnd": [670, 699], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stefanotravelli/seam-2.2/tree/master/examples/wiki/src/main/org/jboss/seam/wiki/core/dao/UserDAO.java", "rawCode": "  private Criteria prepareExampleCriteria(\n      User exampleUser, String orderByProperty, boolean orderDescending, String... ignoreProperty) {\n    Example example = Example.create(exampleUser).enableLike(MatchMode.ANYWHERE).ignoreCase();\n\n    // Sanitize input\n    if (orderByProperty != null) {\n      orderByProperty = orderByProperty.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n    }\n\n    for (String s : ignoreProperty) example.excludeProperty(s);\n\n    Session session = (Session) entityManager.getDelegate();\n\n    Criteria crit = session.createCriteria(User.class).add(example);\n    if (orderByProperty != null)\n      crit.addOrder(orderDescending ? Order.desc(orderByProperty) : Order.asc(orderByProperty));\n\n    return crit.setResultTransformer(DistinctRootEntityResultTransformer.INSTANCE);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8609, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 267, "focalAPIEnd": 315, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/weissjeffm/webui-framework/tree/master/src/com/redhat/qe/auto/selenium/CombinedLocatorTemplate.java", "rawCode": "  protected static String increment(int count, String template) {\n    Pattern p = Pattern.compile(\"\\\\$(\\\\d+)\");\n    Matcher m = p.matcher(template);\n    while (m.find()) {\n      int num = Integer.parseInt(m.group(1));\n      int newNum = num + count;\n      template = template.replaceAll(\"\\\\$\" + num, \"\\\\$\" + newNum);\n      // System.out.println(template);\n    }\n    return template;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8610, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 203, "focalAPIEnd": 253, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.3.0-b02/kernel-storage-util/src/main/java/org/sakaiproject/util/FlatStorageSqlDb2.java", "rawCode": "  public String getSelectFieldsSql2(\n      String table,\n      String fieldList,\n      String idField,\n      String sortField1,\n      String sortField2,\n      int begin,\n      int end) {\n    fieldList = fieldList.replaceAll(table + \"\\\\.\", \"TEMP_QUERY.\");\n    return \"select \"\n        + fieldList\n        + \" from TEMP_QUERY where rank between ? and ? order by TEMP_QUERY.\"\n        + sortField1\n        + (sortField2 == null ? \"\" : \", TEMP_QUERY.\" + sortField2)\n        + (!idField.equals(sortField1) ? (\", TEMP_QUERY.\" + idField) : \"\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8611, "initialization": ["String string = StringTokenizer.nextToken()"], "initializationStart": [262], "initializationEnd": [283], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(regex.equals(string,))", "guardType": "IF {", "guardExpressionStart": 291, "guardExpressionEnd": 327, "guardBlockStart": 291, "guardBlockEnd": 396, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 350, "focalAPIEnd": 386, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.add(resultStr)"], "useStart": [338], "useEnd": [387], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codjo/codjo-release-test/tree/master/src/test/java/net/codjo/test/release/TestReportTest.java", "rawCode": "  static List<String> processLogContent(String logContent) {\n    List<String> objects = new ArrayList<String>();\n    StringTokenizer tokenizer = new StringTokenizer(logContent, TestReport.TAB, false);\n    while (tokenizer.hasMoreTokens()) {\n      String token = tokenizer.nextToken();\n      if (!(LINE_SEPARATOR.equals(token))) {\n        objects.add(token.replaceAll(LINE_SEPARATOR, \"\"));\n      }\n    }\n    return objects;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8612, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string.equalsIgnoreCase(\"be\",)) && string!=null && string.matches(\".*[b-z&&[^eiou]]y\\\\b\",) && !(string.endsWith(\"e\",))", "guardType": "IF {", "guardExpressionStart": 1012, "guardExpressionEnd": 1033, "guardBlockStart": 1012, "guardBlockEnd": 1620, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1474, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vidma/aac-speech-android/tree/master/source/libs/simplenlg/morphology/english/MorphologyRules.java", "rawCode": "  /**\n   * Builds the past-tense form for regular verbs. The rules are performed in this order:\n   *\n   * <ul>\n   *   <li>If the verb is <em>be</em> and the number agreement is plural then the realised form is\n   *       <em>were</em>.\n   *   <li>If the verb is <em>be</em> and the number agreement is singular then the realised form is\n   *       <em>was</em>.\n   *   <li>For verbs ending <em>-e</em> the ending becomes <em>-ed</em>. For example,\n   *       <em>chased</em> becomes <em>chased</em>.\n   *   <li>For verbs ending <em>-Cy</em>, where C is any consonant, the ending becomes\n   *       <em>-ied</em>. For example, <em>dry</em> becomes <em>dried</em>.\n   *   <li>For every other verb, <em>-ed</em> is added to the end of the word.\n   * </ul>\n   *\n   * @param baseForm the base form of the word.\n   * @param number the number agreement for the word.\n   * @return the inflected word.\n   */\n  private static String buildRegularPastVerb(String baseForm, Object number) {\n    String morphology = null;\n    if (baseForm != null) {\n      if (baseForm.equalsIgnoreCase(\"be\")) { // $NON-NLS-1$\n        if (NumberAgreement.PLURAL.equals(number)) {\n          morphology = \"were\"; // $NON-NLS-1$\n        } else {\n          morphology = \"was\"; // $NON-NLS-1$\n        }\n      } else if (baseForm.endsWith(\"e\")) { // $NON-NLS-1$\n        morphology = baseForm + \"d\"; // $NON-NLS-1$\n      } else if (baseForm.matches(\".*[b-z&&[^eiou]]y\\\\b\")) { // $NON-NLS-1$\n        morphology = baseForm.replaceAll(\"y\\\\b\", \"ied\"); // $NON-NLS-1$ //$NON-NLS-2$\n      } else {\n        morphology = baseForm + \"ed\"; // $NON-NLS-1$\n      }\n    }\n    return morphology;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8613, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 296, "focalAPIEnd": 346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.3.0-b02/kernel-storage-util/src/main/java/org/sakaiproject/util/FlatStorageSqlDb2.java", "rawCode": "  public String getSelectFieldsSql4(\n      String table,\n      String fieldList,\n      String idField,\n      String sortField1,\n      String sortField2,\n      int begin,\n      int end,\n      String join,\n      String where,\n      String order) {\n    String sql =\n        \" select \"\n            + fieldList.replaceAll(table + \"\\\\.\", \"TEMP_QUERY.\")\n            + \" from TEMP_QUERY where rank between ? and ? order by \";\n    // here, need to replace table name with TEMP_QUERY in 'order'\n    String newOrder = String.valueOf(order);\n    newOrder = newOrder.replaceAll(table + \"\\\\.\", \"TEMP_QUERY.\");\n    sql += newOrder;\n    // only add next part if it's not already there\n    if (newOrder.indexOf(\"TEMP_QUERY.\" + idField) < 0) sql += \",TEMP_QUERY.\" + idField;\n\n    return sql;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8614, "initialization": ["String string = ImageStack.getShortSliceLabel(int)"], "initializationStart": [5147], "initializationEnd": [5174], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 5245, "guardExpressionEnd": 5263, "guardBlockStart": 5245, "guardBlockEnd": 5299, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 5272, "focalAPIEnd": 5298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fiji/ImageJA/tree/master/src/main/java/ij/plugin/StackWriter.java", "rawCode": "  public void run(String arg) {\n    ImagePlus imp = WindowManager.getCurrentImage();\n    if (imp == null || (imp != null && imp.getStackSize() < 2 && !IJ.isMacro())) {\n      IJ.error(\"Stack Writer\", \"This command requires a stack.\");\n      return;\n    }\n    int stackSize = imp.getStackSize();\n    String name = imp.getTitle();\n    int dotIndex = name.lastIndexOf(\".\");\n    if (dotIndex >= 0) name = name.substring(0, dotIndex);\n    hyperstack = imp.isHyperStack();\n    LUT[] luts = null;\n    int lutIndex = 0;\n    int nChannels = imp.getNChannels();\n    if (hyperstack) {\n      dim = imp.getDimensions();\n      if (imp.isComposite()) luts = ((CompositeImage) imp).getLuts();\n      if (firstTime && ndigits == 4) {\n        ndigits = 3;\n        firstTime = false;\n      }\n    }\n\n    GenericDialog gd = new GenericDialog(\"Save Image Sequence\");\n    if (!IJ.isMacro()) fileType = staticFileType;\n    gd.addChoice(\"Format:\", choices, fileType);\n    gd.addStringField(\"Name:\", name, 12);\n    if (!hyperstack) gd.addNumericField(\"Start At:\", startAt, 0);\n    gd.addNumericField(\"Digits (1-8):\", ndigits, 0);\n    if (!hyperstack) gd.addCheckbox(\"Use slice labels as file names\", useLabels);\n    gd.setSmartRecording(true);\n    gd.showDialog();\n    if (gd.wasCanceled()) return;\n    fileType = gd.getNextChoice();\n    if (!IJ.isMacro()) staticFileType = fileType;\n    name = gd.getNextString();\n    if (!hyperstack) startAt = (int) gd.getNextNumber();\n    if (startAt < 0) startAt = 0;\n    ndigits = (int) gd.getNextNumber();\n    if (!hyperstack) useLabels = gd.getNextBoolean();\n    else useLabels = false;\n    int number = 0;\n    if (ndigits < 1) ndigits = 1;\n    if (ndigits > 8) ndigits = 8;\n    int maxImages = (int) Math.pow(10, ndigits);\n    if (stackSize > maxImages && !useLabels && !hyperstack) {\n      IJ.error(\n          \"Stack Writer\",\n          \"More than \"\n              + ndigits\n              + \" digits are required to generate \\nunique file names for \"\n              + stackSize\n              + \" images.\");\n      return;\n    }\n    String format = fileType.toLowerCase(Locale.US);\n    if (format.equals(\"fits\") && !FileSaver.okForFits(imp)) return;\n\n    if (format.equals(\"text\")) format = \"text image\";\n    String extension = \".\" + format;\n    if (format.equals(\"tiff\")) extension = \".tif\";\n    else if (format.equals(\"text image\")) extension = \".txt\";\n\n    String title = \"Save Image Sequence\";\n    String macroOptions = Macro.getOptions();\n    String directory = null;\n    if (macroOptions != null) {\n      directory = Macro.getValue(macroOptions, title, null);\n      if (directory != null) {\n        File f = new File(directory);\n        boolean exists = f.exists();\n        if (directory.indexOf(\".\") == -1 && !exists) {\n          // Is 'directory' a macro variable?\n          if (directory.startsWith(\"&\")) directory = directory.substring(1);\n          Interpreter interp = Interpreter.getInstance();\n          String directory2 = interp != null ? interp.getStringVariable(directory) : null;\n          if (directory2 != null) directory = directory2;\n        }\n        if (!f.isDirectory() && (exists || directory.lastIndexOf(\".\") > directory.length() - 5))\n          directory = f.getParent();\n        if (directory != null && !(directory.endsWith(File.separator) || directory.endsWith(\"/\")))\n          directory += \"/\";\n      }\n    }\n    if (directory == null) {\n      if (Prefs.useFileChooser && !IJ.isMacOSX()) {\n        String digits = getDigits(number);\n        SaveDialog sd = new SaveDialog(title, name + digits + extension, extension);\n        String name2 = sd.getFileName();\n        if (name2 == null) return;\n        directory = sd.getDirectory();\n      } else directory = IJ.getDirectory(title);\n    }\n    if (directory == null) return;\n    Overlay overlay = imp.getOverlay();\n    boolean isOverlay = overlay != null && !imp.getHideOverlay();\n    if (!(format.equals(\"jpeg\") || format.equals(\"png\"))) isOverlay = false;\n    ImageStack stack = imp.getStack();\n    ImagePlus imp2 = new ImagePlus();\n    imp2.setTitle(imp.getTitle());\n    Calibration cal = imp.getCalibration();\n    int nSlices = stack.getSize();\n    String path, label = null;\n    imp.lock();\n    for (int i = 1; i <= nSlices; i++) {\n      IJ.showStatus(\"writing: \" + i + \"/\" + nSlices);\n      IJ.showProgress(i, nSlices);\n      ImageProcessor ip = stack.getProcessor(i);\n      if (isOverlay) {\n        imp.setSliceWithoutUpdate(i);\n        ip = imp.flatten().getProcessor();\n      } else if (luts != null && nChannels > 1 && hyperstack) {\n        ip.setColorModel(luts[lutIndex++]);\n        if (lutIndex >= luts.length) lutIndex = 0;\n      }\n      imp2.setProcessor(null, ip);\n      String label2 = stack.getSliceLabel(i);\n      imp2.setProperty(\"Label\", null);\n      if (label2 != null) {\n        if (label2.contains(\"\\n\")) imp2.setProperty(\"Info\", label2);\n        else imp2.setProperty(\"Label\", label2);\n        ;\n      } else {\n        Properties props = imp2.getProperties();\n        if (props != null) props.remove(\"Info\");\n      }\n      imp2.setCalibration(cal);\n      String digits = getDigits(number++);\n      if (useLabels) {\n        label = stack.getShortSliceLabel(i);\n        if (label != null && label.equals(\"\")) label = null;\n        if (label != null) label = label.replaceAll(\"/\", \"-\");\n      }\n      if (label == null) path = directory + name + digits + extension;\n      else path = directory + label + extension;\n      if (i == 1) {\n        File f = new File(path);\n        if (f.exists()) {\n          if (!IJ.isMacro()\n              && !IJ.showMessageWithCancel(\n                  \"Overwrite files?\",\n                  \"One or more files will be overwritten if you click \\\"OK\\\".\\n \\n\" + path)) {\n            imp.unlock();\n            IJ.showStatus(\"\");\n            IJ.showProgress(1.0);\n            return;\n          }\n        }\n      }\n      if (Recorder.record) Recorder.disablePathRecording();\n      imp2.setOverlay(null);\n      if (overlay != null && format.equals(\"tiff\")) {\n        Overlay overlay2 = overlay.duplicate();\n        overlay2.crop(i, i);\n        if (overlay2.size() > 0) {\n          for (int j = 0; j < overlay2.size(); j++) {\n            Roi roi = overlay2.get(j);\n            int pos = roi.getPosition();\n            if (pos == 1) roi.setPosition(i);\n          }\n          imp2.setOverlay(overlay2);\n        }\n      }\n      IJ.saveAs(imp2, format, path);\n    }\n    imp.unlock();\n    if (isOverlay) imp.setSlice(1);\n    IJ.showStatus(\"\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8615, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 66, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultStr.substring(int,int)", "resultStr.substring(int)"], "useStart": [121, 155], "useEnd": [138, 169], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tulskiy/musique/tree/master/musique-core/src/main/java/com/tulskiy/musique/util/Util.java", "rawCode": "  public static String humanize(String property) {\n    String s = property.replaceAll(\"(?=\\\\p{Upper})\", \" \");\n    return s.substring(0, 1).toUpperCase() + s.substring(1);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8616, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 118, "focalAPIEnd": 148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["get(resultStr)"], "useStart": [193], "useEnd": [216], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elikatz/PLT2011/tree/master/frontend/Flood_Sem.java", "rawCode": "  public void checkIndex(String arrayIndex, int line) {\n    // check if ID is a variable of type int\n    arrayIndex = arrayIndex.replaceAll(\" \", \"\");\n    if (varList.containsKey(arrayIndex) && varList.get(arrayIndex).equals(\"int\")) {\n      if (debugging) {\n        System.out.println(arrayIndex + \"\\n\" + varList.get(arrayIndex));\n      }\n      return;\n    } else {\n      if (debugging) {\n        System.out.println(\"Fail, invalid type\");\n      }\n      validProgram = false;\n      errorList.add(\n          \"Error at Line \" + line + \": \" + arrayIndex + \" is an invalid type for an array index.\");\n      return;\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8617, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null) && !(string.indexOf('\"',)<0)", "guardType": "IF {", "guardExpressionStart": 59, "guardExpressionEnd": 82, "guardBlockStart": 59, "guardBlockEnd": 96, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 811, "focalAPIEnd": 848, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["processAlgebraCommand(resultStr,boolean)", "changeGeoElement(GeoText,resultStr,boolean)"], "useStart": [1028, 2196], "useEnd": [1097, 2265], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/concord-consortium/geogebra/tree/master/geogebra/geogebra/gui/TextInputDialog.java", "rawCode": "    public boolean processInput(String inputValue) {\n      if (inputValue == null) return false;\n\n      // no quotes?\n      if (inputValue.indexOf('\"') < 0) {\n        // this should become either\n        // (1) a + \"\" where a is an object label or\n        // (2) \"text\", a plain text\n\n        // ad (1) OBJECT LABEL\n        // add empty string to end to make sure\n        // that this will become a text object\n        if (kernel.lookupLabel(inputValue.trim()) != null) {\n          inputValue = \"(\" + inputValue + \") + \\\"\\\"\";\n        }\n        // ad (2) PLAIN TEXT\n        // add quotes to string\n        else {\n          inputValue = \"\\\"\" + inputValue + \"\\\"\";\n        }\n      } else {\n        // replace \\n\\\" by \\\"\\n, this is useful for e.g.:\n        // \"a = \" + a +\n        // \"b = \" + b\n        inputValue = inputValue.replaceAll(\"\\n\\\"\", \"\\\"\\n\");\n      }\n\n      if (inputValue.equals(\"\\\"\\\"\")) return false;\n\n      // create new text\n      boolean createText = text == null;\n      if (createText) {\n        GeoElement[] ret = kernel.getAlgebraProcessor().processAlgebraCommand(inputValue, false);\n        if (ret != null && ret[0].isTextValue()) {\n          GeoText t = (GeoText) ret[0];\n          t.setLaTeX(isLaTeX, true);\n\n          // make sure for new LaTeX texts we get nice \"x\"s\n          if (isLaTeX) t.setSerifFont(true);\n\n          if (startPoint.isLabelSet()) {\n            try {\n              t.setStartPoint(startPoint);\n            } catch (Exception e) {\n            }\n            ;\n          } else {\n\n            // // Michael Borcherds 2008-04-27 changed to RealWorld not absolute\n            // startpoint contains mouse coords\n            // t.setAbsoluteScreenLoc(euclidianView.toScreenCoordX(startPoint.inhomX),\n            // euclidianView.toScreenCoordY(startPoint.inhomY));\n            // t.setAbsoluteScreenLocActive(true);\n            t.setRealWorldLoc(startPoint.inhomX, startPoint.inhomY);\n            t.setAbsoluteScreenLocActive(false);\n          }\n          t.updateRepaint();\n          app.storeUndoInfo();\n          return true;\n        }\n        return false;\n      }\n\n      // change existing text\n      try {\n        GeoText newText =\n            (GeoText) kernel.getAlgebraProcessor().changeGeoElement(text, inputValue, true);\n\n        // make sure newText is using correct LaTeX setting\n        newText.setLaTeX(isLaTeX, true);\n        newText.updateRepaint();\n\n        app.doAfterRedefine(newText);\n        return newText != null;\n      } catch (Exception e) {\n        app.showError(\"ReplaceFailed\");\n        return false;\n      } catch (MyError err) {\n        app.showError(err);\n        return false;\n      }\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8618, "initialization": ["String string = Scanner.nextLine()", "String string = String.substring(int)"], "initializationStart": [1219, 1387], "initializationEnd": [1232, 1405], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": [], "tryExpressionStart": 104, "tryExpressionEnd": 108, "tryBlockStart": 104, "tryBlockEnd": 2042, "catchExpressionStart": 1979, "catchExpressionEnd": 2001, "catchBlockStart": 1979, "catchBlockEnd": 2042, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.lastIndexOf(String)", "string.substring(int)"], "configurationStart": [1313, 1387], "configurationEnd": [1336, 1405], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1423, "focalAPIEnd": 1451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "matcher(resultStr)"], "useStart": [1469, 1529], "useEnd": [1503, 1568], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tulskiy/musique/tree/master/musique-core/src/main/java/com/tulskiy/musique/gui/LyricsPanel.java", "rawCode": "    private void searchLyrics(String artist, String title, StringBuilder sb) throws IOException {\n      try {\n        // String search = \"http://lyrics.wikia.com/Special:Search?search=\";\n        // search += URLEncoder.encode(artist, \"utf-8\");\n        // search += \"+\";\n        // search += URLEncoder.encode(title, \"utf-8\");\n        //\n        // URL searchURL = new URL(search);\n        // Scanner scan = new Scanner(searchURL.openStream());\n        // StringBuilder content = new StringBuilder();\n        // while (scan.hasNextLine())\n        // content.append(scan.nextLine());\n        //\n        // Matcher matcher =\n        // Pattern.compile(\"http://lyrics.wikia.com/wiki/[^\\\"]*\").matcher(content);\n        // if (!matcher.find()) {\n        // return;\n        // }\n        String search = \"http://lyrics.wikia.com/\";\n        artist = Util.capitalize(artist, \"_\");\n        title = Util.capitalize(title, \"_\");\n        search += URLEncoder.encode(artist, \"utf-8\");\n        search += \":\";\n        search += URLEncoder.encode(title, \"utf-8\");\n\n        URL url = new URL(search);\n        InputStream is = url.openStream();\n        Scanner fi = new Scanner(is);\n        while (fi.hasNextLine()) {\n          String s = fi.nextLine();\n          if (s.startsWith(\"<div class='lyricbox'\")) {\n            int index = s.lastIndexOf(\"</div>\");\n            if (index > 0 && s.length() > 6) s = s.substring(index);\n            s = s.replaceAll(\"<br />\", \"\\n\");\n            s = s.replaceAll(\"(<!--)|(<.*?>)\", \"\");\n            Matcher m = Pattern.compile(\"&#(\\\\d+);\").matcher(s);\n            m.reset();\n            StringBuffer buffer = new StringBuffer();\n            while (m.find()) {\n              String group = m.group(1);\n              char ch = (char) Integer.valueOf(group).shortValue();\n              m.appendReplacement(buffer, String.valueOf(ch));\n            }\n            m.appendTail(buffer);\n            sb.append(buffer);\n          }\n        }\n        fi.close();\n      } catch (IOException e) {\n        // e.printStackTrace();\n      }\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8619, "initialization": ["String string = File.getName()"], "initializationStart": [193], "initializationEnd": [210], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 231, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new File(File,resultStr)"], "useStart": [386], "useEnd": [405], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/plantuml/tree/master/tags/plantuml-7876/src/net/sourceforge/plantuml/sequencediagram/graphic/SequenceDiagramFileMaker.java", "rawCode": "  public static File computeFilename(File pngFile, int i, FileFormat fileFormat) {\n    if (i == 0) {\n      return pngFile;\n    }\n    final File dir = pngFile.getParentFile();\n    String name = pngFile.getName();\n    name =\n        name.replaceAll(\n            \"\\\\\" + fileFormat.getFileSuffix() + \"$\",\n            \"_\" + String.format(\"%03d\", i) + fileFormat.getFileSuffix());\n    return new File(dir, name);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8620, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 240, "focalAPIEnd": 302, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/adito/trunk/adito/src/com/adito/vfs/VfsUtils.java", "rawCode": "  /**\n   * Transforms URLs containing a password, masking out the sensitive arguments with an asterisk.\n   *\n   * @param toMask\n   * @return the masked string.\n   */\n  public static String maskSensitiveArguments(String toMask) {\n    return toMask.replaceAll(\"([a-z]*\\\\://.*:)(.*)(@.*)\", \"$1********$3\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8621, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 116, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shauvik/crawljax-old/tree/master/src/main/java/com/crawljax/oraclecomparator/comparators/PlainStructureComparator.java", "rawCode": "  private String stripAttributes(String string) {\n    String regExAttributes = \"<(.+?)(\\\\s.*?)?(/)?>\";\n    string = string.replaceAll(regExAttributes, \"<$1$3>\");\n    return string;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8622, "initialization": ["String regex = extractCharset(String)"], "initializationStart": [3032], "initializationEnd": [3065], "hasTryCatch": 1, "exceptionType": "MessagingException", "exceptionHandlingCall": ["getMessage()", "warn(String,*)"], "tryExpressionStart": 1062, "tryExpressionEnd": 1066, "tryBlockStart": 1062, "tryBlockEnd": 6123, "catchExpressionStart": 6018, "catchExpressionEnd": 6047, "catchBlockStart": 6018, "catchBlockEnd": 6123, "exceptionHandlingCallStart": [6098, 6055], "exceptionHandlingCallEnd": [6112, 6116], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null&&regex!=null && !(regex!=null&&canUseCharset(content,regex,)&&canUseCharset(subject,regex,))", "guardType": "IF {", "guardExpressionStart": 3074, "guardExpressionEnd": 3164, "guardBlockStart": 3074, "guardBlockEnd": 4705, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 3440, "focalAPIEnd": 3502, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.indexOf(String)", "string.substring(int)", "MimeMessage.addHeaderLine(resultStr)"], "useStart": [3883, 4277, 4984, 5038, 5522], "useEnd": [3947, 4334, 5014, 5079, 5558], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta09/kernel-impl/src/main/java/org/sakaiproject/email/impl/BasicEmailService.java", "rawCode": "  /** {@inheritDoc} */\n  public void sendMail(\n      InternetAddress from,\n      InternetAddress[] to,\n      String subject,\n      String content,\n      Map<RecipientType, InternetAddress[]> headerTo,\n      InternetAddress[] replyTo,\n      List<String> additionalHeaders,\n      List<Attachment> attachments) {\n    // some timing for debug\n    long start = 0;\n    if (M_log.isDebugEnabled()) start = System.currentTimeMillis();\n\n    // if in test mode, use the test method\n    if (m_testMode) {\n      testSendMail(from, to, subject, content, headerTo, replyTo, additionalHeaders);\n      return;\n    }\n\n    if (m_smtp == null) {\n      M_log.warn(\"sendMail: smtp not set\");\n      return;\n    }\n\n    if (from == null) {\n      M_log.warn(\"sendMail: null from\");\n      return;\n    }\n\n    if (to == null) {\n      M_log.warn(\"sendMail: null to\");\n      return;\n    }\n\n    if (content == null) {\n      M_log.warn(\"sendMail: null content\");\n      return;\n    }\n\n    Properties props = createMailSessionProperties();\n\n    Session session = Session.getInstance(props);\n\n    try {\n      // see if we have a message-id in the additional headers\n      String mid = null;\n      if (additionalHeaders != null) {\n        for (String header : additionalHeaders) {\n          if (header.toLowerCase().startsWith(EmailHeaders.MESSAGE_ID.toLowerCase() + \": \")) {\n            // length of 'message-id: ' == 12\n            mid = header.substring(12);\n            break;\n          }\n        }\n      }\n\n      // use the special extension that can set the id\n      MimeMessage msg = new MyMessage(session, mid);\n\n      // the FULL content-type header, for example:\n      // Content-Type: text/plain; charset=windows-1252; format=flowed\n      String contentTypeHeader = null;\n\n      // set the additional headers on the message\n      // but treat Content-Type specially as we need to check the charset\n      // and we already dealt with the message id\n      if (additionalHeaders != null) {\n        for (String header : additionalHeaders) {\n          if (header.toLowerCase().startsWith(EmailHeaders.CONTENT_TYPE.toLowerCase() + \": \"))\n            contentTypeHeader = header;\n          else if (!header.toLowerCase().startsWith(EmailHeaders.MESSAGE_ID.toLowerCase() + \": \"))\n            msg.addHeaderLine(header);\n        }\n      }\n\n      // date\n      if (msg.getHeader(EmailHeaders.DATE) == null)\n        msg.setSentDate(new Date(System.currentTimeMillis()));\n\n      // set the message sender\n      msg.setFrom(from);\n\n      // set the message recipients (headers)\n      setRecipients(headerTo, msg);\n\n      // set the reply to\n      if ((replyTo != null) && (msg.getHeader(EmailHeaders.REPLY_TO) == null))\n        msg.setReplyTo(replyTo);\n\n      // figure out what charset encoding to use\n      //\n      // first try to use the charset from the forwarded\n      // Content-Type header (if there is one).\n      //\n      // if that charset doesn't work, try a couple others.\n      // the character set, for example, windows-1252 or UTF-8\n      String charset = extractCharset(contentTypeHeader);\n\n      if (charset != null && canUseCharset(content, charset) && canUseCharset(subject, charset)) {\n        // use the charset from the Content-Type header\n      } else if (canUseCharset(content, CharacterSet.ISO_8859_1)\n          && canUseCharset(subject, CharacterSet.ISO_8859_1)) {\n        if (contentTypeHeader != null && charset != null)\n          contentTypeHeader = contentTypeHeader.replaceAll(charset, CharacterSet.ISO_8859_1);\n        else if (contentTypeHeader != null)\n          contentTypeHeader += \"; charset=\" + CharacterSet.ISO_8859_1;\n        charset = CharacterSet.ISO_8859_1;\n      } else if (canUseCharset(content, CharacterSet.WINDOWS_1252)\n          && canUseCharset(subject, CharacterSet.WINDOWS_1252)) {\n        if (contentTypeHeader != null && charset != null)\n          contentTypeHeader = contentTypeHeader.replaceAll(charset, CharacterSet.WINDOWS_1252);\n        else if (contentTypeHeader != null)\n          contentTypeHeader += \"; charset=\" + CharacterSet.WINDOWS_1252;\n        charset = CharacterSet.WINDOWS_1252;\n      } else {\n        // catch-all - UTF-8 should be able to handle anything\n        if (contentTypeHeader != null && charset != null)\n          contentTypeHeader = contentTypeHeader.replaceAll(charset, CharacterSet.UTF_8);\n        else if (contentTypeHeader != null) contentTypeHeader += \"; charset=\" + CharacterSet.UTF_8;\n        else\n          contentTypeHeader =\n              EmailHeaders.CONTENT_TYPE\n                  + \": \"\n                  + ContentType.TEXT_PLAIN\n                  + \"; charset=\"\n                  + CharacterSet.UTF_8;\n        charset = CharacterSet.UTF_8;\n      }\n\n      if ((subject != null) && (msg.getHeader(EmailHeaders.SUBJECT) == null))\n        msg.setSubject(subject, charset);\n\n      // extract just the content type value from the header\n      String contentType = null;\n      if (contentTypeHeader != null) {\n        int colonPos = contentTypeHeader.indexOf(\":\");\n        contentType = contentTypeHeader.substring(colonPos + 1).trim();\n      }\n      setContent(content, attachments, msg, contentType, charset);\n\n      // if we have a full Content-Type header, set it NOW\n      // (after setting the body of the message so that format=flowed is preserved)\n      // if there attachments, the messsage type will default to multipart/mixed and should\n      // stay that way.\n      if ((attachments == null || attachments.size() == 0) && contentTypeHeader != null) {\n        msg.addHeaderLine(contentTypeHeader);\n        msg.addHeaderLine(EmailHeaders.CONTENT_TRANSFER_ENCODING + \": quoted-printable\");\n      }\n\n      if (M_log.isDebugEnabled()) {\n        M_log.debug(\"HeaderLines received were: \");\n        Enumeration<String> allHeaders = msg.getAllHeaderLines();\n        while (allHeaders.hasMoreElements()) {\n          M_log.debug((String) allHeaders.nextElement());\n        }\n      }\n\n      sendMessageAndLog(from, to, subject, headerTo, start, msg, session);\n    } catch (MessagingException e) {\n      M_log.warn(\"Email.sendMail: exception: \" + e.getMessage(), e);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8623, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 859, "focalAPIEnd": 928, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HermesJMS/HermesJMS/tree/master/src/java/hermes/impl/HTMLBeanHelper.java", "rawCode": "  public static String format(String text, Map properties) {\n    String rval = text;\n    StringBuffer buffer = new StringBuffer();\n\n    if (properties != null) {\n      if (text == null) {\n        buffer.append(\"<html>\");\n\n        for (Iterator iter = properties.keySet().iterator(); iter.hasNext(); ) {\n          String key = (String) iter.next();\n          Object val = properties.get(key);\n\n          if (!key.equals(\"reference\")) // TODO huh?\n          {\n            buffer.append(key).append(\"=\").append(val);\n\n            if (iter.hasNext()) {\n              buffer.append(\"<br>\");\n            }\n          }\n        }\n\n        buffer.append(\"</html>\");\n      } else {\n        for (Iterator iter = properties.keySet().iterator(); iter.hasNext(); ) {\n          String key = (String) iter.next();\n          Object val = properties.get(key);\n          rval = rval.replaceAll(\"\\\\$\" + key, (val == null) ? \"null\" : val.toString());\n        }\n\n        return rval;\n      }\n    }\n\n    return buffer.toString();\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8624, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 72, "focalAPIEnd": 114, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)"], "useStart": [72], "useEnd": [139], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sosilent/euca/tree/master/clc/modules/msgs/src/main/java/com/eucalyptus/binding/BindingManager.java", "rawCode": "  public static String sanitizeNamespace(String namespace) {\n    return namespace.replaceAll(\"(http://)|(/$)\", \"\").replaceAll(\"[./-]\", \"_\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8625, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 296, "focalAPIEnd": 346, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0.12/kernel-util/src/main/java/org/sakaiproject/util/FlatStorageSqlMsSql.java", "rawCode": "  public String getSelectFieldsSql4(\n      String table,\n      String fieldList,\n      String idField,\n      String sortField1,\n      String sortField2,\n      int begin,\n      int end,\n      String join,\n      String where,\n      String order) {\n    String sql =\n        \" select \"\n            + fieldList.replaceAll(table + \"\\\\.\", \"TEMP_QUERY.\")\n            + \" from TEMP_QUERY where rank between ? and ? order by \";\n    // here, need to replace table name with TEMP_QUERY in 'order'\n    String newOrder = new String(order);\n    newOrder = newOrder.replaceAll(table + \"\\\\.\", \"TEMP_QUERY.\");\n    sql += newOrder;\n    // only add next part if it's not already there\n    if (newOrder.indexOf(\"TEMP_QUERY.\" + idField) < 0) sql += \",TEMP_QUERY.\" + idField;\n\n    return sql;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8626, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string.contains(regex,)", "guardType": "IF {", "guardExpressionStart": 223, "guardExpressionEnd": 250, "guardBlockStart": 223, "guardBlockEnd": 302, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 266, "focalAPIEnd": 295, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IAAS/oryx-editor/tree/master/editor/server/src/org/oryxeditor/bpel4chor/BPEL4Chor2BPELGroundingAnalyze.java", "rawCode": "  /**\n   * replace the \":\" with \"_\" in the inputStr.\n   *\n   * @param {String} inputStr The input string\n   * @return {String} inputStr The replaced output string\n   */\n  private String replaceColons(String inputStr) {\n    if (inputStr.contains(\":\")) {\n      return inputStr.replaceAll(\":\", \"_\");\n    }\n    return inputStr;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8627, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 105, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.replaceAll(resultStr)"], "useStart": [159], "useEnd": [201], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blackdrag/jarjar/tree/master/jarjar/src/main/com/tonicsystems/jarjar/Wildcard.java", "rawCode": "  private static String replaceAllLiteral(Pattern pattern, String value, String replace) {\n    replace = replace.replaceAll(\"([$\\\\\\\\])\", \"\\\\\\\\$0\");\n    return pattern.matcher(value).replaceAll(replace);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8628, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 180, "focalAPIEnd": 225, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tbroyer/gwt-sandbox/tree/master/user/gwt-i18n-client/src/main/java/com/google/gwt/i18n/rebind/format/PropertiesFormat.java", "rawCode": "  /**\n   * Quote strings for use in a properties file.\n   *\n   * @param str string to quote\n   * @return quoted string\n   */\n  private String quoteSpecial(String str) {\n    return str.replaceAll(\"([\\f\\t\\n\\r$!=:#])\", \"\\\\\\\\$1\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8629, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string.isEmpty()) && !(string.startsWith(\"/\",))", "guardType": "IF {", "guardExpressionStart": 306, "guardExpressionEnd": 332, "guardBlockStart": 306, "guardBlockEnd": 346, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 484, "focalAPIEnd": 513, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["split(resultStr)"], "useStart": [542], "useEnd": [551], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dimitarp/basex-all/tree/master/basex/src/main/java/org/basex/core/cmd/Find.java", "rawCode": "  /**\n   * Creates an XQuery representation for the specified query.\n   *\n   * @param query query\n   * @param ctx database context\n   * @param root root flag\n   * @return query\n   */\n  public static String find(final String query, final Context ctx, final boolean root) {\n\n    // treat input as XQuery\n    if (query.startsWith(\"/\")) return query;\n\n    final boolean r = root || ctx.root();\n    if (query.isEmpty()) return r ? \"/\" : \".\";\n\n    // parse user input\n    final String qu = query.replaceAll(\" \\\\+\", \" \");\n    final String[] terms = split(qu);\n\n    String pre = \"\";\n    String preds = \"\";\n    final String tag = \"*\";\n    for (String term : terms) {\n      if (term.startsWith(\"@=\")) {\n        preds += \"[@* = \\\"\" + term.substring(2) + \"\\\"]\";\n      } else if (term.startsWith(\"=\")) {\n        preds += \"[text() = \\\"\" + term.substring(1) + \"\\\"]\";\n      } else if (term.startsWith(\"~\")) {\n        preds += \"[text() contains text \\\"\" + term.substring(1) + \"\\\" using fuzzy]\";\n      } else if (term.startsWith(\"@\")) {\n        if (term.length() == 1) continue;\n        preds += \"[@* contains text \\\"\" + term.substring(1) + \"\\\"]\";\n        term = term.substring(1);\n        // add valid name tests\n        if (XMLToken.isName(token(term))) {\n          pre += (r ? \"\" : \".\") + \"//@\" + term + \" | \";\n        }\n      } else {\n        preds += \"[text() contains text \\\"\" + term + \"\\\"]\";\n        // add valid name tests\n        if (XMLToken.isName(token(term))) {\n          pre += (r ? \"/\" : \"\") + Axis.DESC + \"::*:\" + term + \" | \";\n        }\n        // add name test...\n        pre += (r ? \"/\" : \"\") + Axis.DESCORSELF + \"::*[@name contains text \\\"\" + term + \"\\\"] | \";\n      }\n    }\n    if (pre.isEmpty() && preds.isEmpty()) return root ? \"/\" : \".\";\n\n    // apply full-text specific options\n    final TokenBuilder opt = new TokenBuilder();\n    final MetaData md = ctx.data().meta;\n    if (md.ftindex) {\n      if (md.wildcards) opt.add(' ' + USING + ' ' + WILDCARDS);\n      if (md.stemming) opt.add(' ' + USING + ' ' + STEMMING);\n      if (md.casesens) opt.add(' ' + USING + ' ' + CASE + ' ' + SENSITIVE);\n      if (md.diacritics) opt.add(' ' + USING + ' ' + DIACRITICS + ' ' + SENSITIVE);\n      if (md.language != null) opt.add(' ' + USING + ' ' + LANGUAGE + \" '\" + md.language + \"'\");\n    }\n\n    // create final string\n    final TokenBuilder tb = new TokenBuilder();\n    if (opt.size() != 0) tb.add(\"declare ft-option\" + opt + \"; \");\n    tb.add(pre + (r ? \"/\" : \"\") + Axis.DESCORSELF + \"::\" + tag + preds);\n    return tb.toString();\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8630, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 750, "focalAPIEnd": 794, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultStr.replaceAll(String,String)", "setText(resultStr)"], "useStart": [814, 854], "useEnd": [848, 895], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jungilhan/recipe2/tree/master/src/com/bulgogi/recipe/adapter/BlogSearchAdapter.java", "rawCode": "  @Override\n  public View getView(int position, View convertView, ViewGroup parent) {\n    ViewHolder holder;\n\n    if (convertView == null) {\n      convertView = inflator.inflate(R.layout.ll_blog_search_item, null);\n\n      holder = new ViewHolder();\n      holder.tvTitle = (TextView) convertView.findViewById(R.id.tv_title);\n      holder.tvBlog = (TextView) convertView.findViewById(R.id.tv_blog);\n      holder.tvDescription = (TextView) convertView.findViewById(R.id.tv_description);\n      convertView.setTag(holder);\n    } else {\n      holder = (ViewHolder) convertView.getTag();\n    }\n\n    Item item = items.get(position);\n    holder.tvTitle.setText(Html.fromHtml(item.title));\n    holder.tvBlog.setText(item.bloggername);\n    String description = item.description.replaceAll(\"\\\\<.*?\\\\>\", \"\");\n    description = description.replaceAll(\"&.*;\", \"\");\n    holder.tvDescription.setText(description);\n\n    return convertView;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8631, "initialization": ["String string = String.replaceFirst(String,String)"], "initializationStart": [564], "initializationEnd": [599], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.replaceFirst(String,String)"], "configurationStart": [564], "configurationEnd": [599], "guardCondition": "!(string.matches(\"^[ \\t]*\\\\. *\",)) && !(string.equals(\" \",)||string.startsWith(\"comment\",)||string.startsWith(\"finish\",)||string.matches(\"^[ \\t]*.$\",)) && string.startsWith(\" \",)||string.startsWith(\"\\t\",)||string.startsWith(\".\",) &&  (string)!=null", "guardType": "LOOP {", "guardExpressionStart": 438, "guardExpressionEnd": 476, "guardBlockStart": 438, "guardBlockEnd": 2211, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1400, "focalAPIEnd": 1430, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List<String>.add(resultStr)"], "useStart": [2077], "useEnd": [2099], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IQSS/dvn/tree/master/src/DVN-ingest/src/edu/harvard/iq/dvn/ingest/statdataio/impl/plugins/spss/SPSSFileReader.java", "rawCode": "  private void getSPSScommandLines(BufferedInputStream cardStream) throws IOException {\n    dbgLog.fine(\"start dividing SPSS data definition file\");\n    int counter = 0;\n\n    BufferedReader rd = new BufferedReader(new InputStreamReader(cardStream));\n    String line = null;\n    String linesCombined = null;\n    String commandHead = \"\";\n    boolean commandTerminated = false;\n\n    List<String> SPSScommands = new ArrayList<String>();\n\n    while ((line = rd.readLine()) != null) {\n      // chop all blanks at the end, replace with a single whitespace:\n\n      line = line.replaceFirst(\"[ \\t\\n]*$\", \" \");\n\n      // skip blank, and similar lines:\n\n      if (line.equals(\" \")\n          || line.startsWith(\"comment\")\n          || line.startsWith(\"finish\")\n          || line.matches(\"^[ \\t]*.$\")) {\n        dbgLog.fine(\"skipping line\");\n      } else if (line.startsWith(\" \") || line.startsWith(\"\\t\") || line.startsWith(\".\")) {\n        // continuation of a wrapped line.\n\n        if (linesCombined == null) {\n          throw new IOException(\n              \"Illegal entry: line \"\n                  + line\n                  + \" starts with a white space, but does not appear within a defined SPSS command block\");\n        }\n\n        if (line.matches(\"^[ \\t]*\\\\. *\")) {\n          // command termination\n          SPSScommands.add(linesCombined);\n          linesCombined = null;\n        } else {\n          line = line.replaceAll(\"^[ \\t]*\", \"\");\n          linesCombined = linesCombined + line;\n        }\n\n      } else {\n        // a new command line:\n        if (linesCombined != null) {\n          throw new IOException(\n              \"line \"\n                  + line\n                  + \": bad formatting; (command \"\n                  + commandHead\n                  + \" not terminated properly?)\");\n        }\n\n        if (line.matches(\"^[Nn]\\\\w* [Oo]\\\\w* [Cc].*\")) {\n          // looks like the \"Number of Cases\" command;\n          // special case -- doesn't need to be terminated by\n          // the \".\" -- which means we can put it directly\n          // on the command stack:\n\n          SPSScommands.add(line);\n\n        } else {\n          commandHead = line;\n          linesCombined = commandHead;\n        }\n      }\n    }\n\n    rd.close();\n\n    if (linesCombined != null) {\n      throw new IOException(\n          \"Illegal Control Card Syntax: command \" + commandHead + \" not terminated properly.\");\n    }\n\n    String regexCommandLine = \"^(\\\\w+?)\\\\s+?(\\\\w+)(.*)\";\n    Pattern patternCommandLine = Pattern.compile(regexCommandLine);\n\n    for (int i = 0; i < SPSScommands.size(); i++) {\n      String commandLine = SPSScommands.get(i);\n\n      // Note that SPSS commands are not case-sensitive.\n\n      String command1 = null;\n      String command2 = null;\n      String rest = null;\n\n      Matcher commandMatcher = patternCommandLine.matcher(commandLine);\n\n      if (commandMatcher.find()) {\n        command1 = commandMatcher.group(1);\n        command2 = commandMatcher.group(2);\n        rest = commandMatcher.group(3);\n      }\n\n      dbgLog.fine(\"command1: \" + command1);\n      dbgLog.fine(\"command2: \" + command2);\n      dbgLog.fine(\"rest: \" + rest);\n\n      // TODO: code below executed only if rest != null -- ?\n\n      // DATA LIST:\n\n      if (command1 != null\n          && command2 != null\n          && command1.regionMatches(true, 0, \"data\", 0, 4)\n          && command2.regionMatches(true, 0, \"list\", 0, 4)) {\n\n        if (rest != null) {\n          rest = rest.trim();\n          dbgLog.fine(\"saving \" + rest + \" as a DataList command\");\n\n          if (commandStrings.get(\"DataList\") == null) {\n            commandStrings.put(\"DataList\", rest);\n          } else {\n            commandStrings.put(\"DataList\", commandStrings.get(\"DataList\") + \"/\" + rest);\n          }\n        }\n\n        // VARIABLE LABELS:\n\n      } else if (command1 != null\n          && command2 != null\n          && command1.regionMatches(true, 0, \"var\", 0, 3)\n          && command2.regionMatches(true, 0, \"lab\", 0, 3)) {\n\n        if (rest != null) {\n          rest = rest.trim();\n\n          if (rest.length() > 0 && rest.substring(rest.length() - 1).equals(\".\")) {\n            rest = rest.substring(0, rest.length() - 1);\n          }\n          dbgLog.fine(\"saving \" + rest + \" as a VarLabel command\");\n          if (commandStrings.get(\"VarLabel\") == null) {\n            commandStrings.put(\"VarLabel\", rest);\n          } else {\n            commandStrings.put(\"VarLabel\", commandStrings.get(\"VarLabel\") + \" \" + rest);\n          }\n        }\n\n        // VALUE LABELS:\n\n      } else if (command1 != null\n          && command2 != null\n          && command1.regionMatches(true, 0, \"val\", 0, 3)\n          && command2.regionMatches(true, 0, \"lab\", 0, 3)) {\n\n        if (rest != null) {\n          rest = rest.trim();\n\n          if (rest.length() > 0 && rest.substring(rest.length() - 1).equals(\".\")) {\n            rest = rest.substring(0, rest.length() - 2);\n          }\n          if (rest.length() > 0 && rest.substring(rest.length() - 1).equals(\"/\")) {\n            rest = rest.substring(0, rest.length() - 2);\n          }\n\n          dbgLog.fine(\"saving \" + rest + \"/ as a ValLabel command\");\n          if (commandStrings.get(\"ValLabel\") == null) {\n            commandStrings.put(\"ValLabel\", rest + \"/\");\n          } else {\n            commandStrings.put(\"ValLabel\", commandStrings.get(\"ValLabel\") + rest + \"/\");\n          }\n        }\n\n        // MISSING VALUES:\n\n      } else if (command1 != null\n          && command2 != null\n          && command1.regionMatches(true, 0, \"mis\", 0, 3)\n          && command2.regionMatches(true, 0, \"val\", 0, 3)) {\n\n        if (rest != null) {\n          rest = rest.trim();\n\n          if (rest.length() > 0 && rest.substring(rest.length() - 1).equals(\".\")) {\n            rest = rest.substring(0, rest.length() - 2);\n          }\n\n          // TODO:\n          // Find out if converting these .toUpperCase() is the\n          // right thing to do.\n\n          dbgLog.fine(\"saving \" + rest.toUpperCase() + \" as the \" + i + \"-th MisValue command\");\n\n          if (commandStrings.get(\"MisValue\") == null) {\n            commandStrings.put(\"MisValue\", rest);\n          } else {\n            commandStrings.put(\n                \"MisValue\", commandStrings.get(\"MisValue\") + \" \" + rest.toUpperCase());\n          }\n        }\n\n        // NUMBER OF CASES: (optional -- may not be present)\n\n      } else if (command1 != null\n          && command2 != null\n          && command1.regionMatches(true, 0, \"n\", 0, 1)\n          && command2.regionMatches(true, 0, \"of\", 0, 2)) {\n        if (rest != null) {\n          rest = rest.trim();\n\n          if (rest.regionMatches(true, 0, \"cases\", 0, 5)) {\n            rest = rest.substring(5);\n            rest = rest.trim();\n            String regexNumberOfCases = \"^([0-9]*)\";\n            Pattern patternNumberOfCases = Pattern.compile(regexNumberOfCases);\n            Matcher casesMatcher = patternNumberOfCases.matcher(rest);\n\n            if (casesMatcher.find()) {\n              setCaseQnty(Integer.valueOf(casesMatcher.group(1)));\n              smd.getFileInformation().put(\"caseQnty\", getCaseQnty());\n              dbgLog.fine(\"Number of cases found: \" + getCaseQnty());\n            }\n          }\n        }\n\n      } else {\n        throw new IOException(\n            \"Unsupported or illegal command: \" + command1 + \" (\" + commandLine + \")\");\n      }\n\n      // also:\n      // RECODE?\n      // FORMATS?\n\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8632, "initialization": ["String string = ContentVersion.getVersionValue()"], "initializationStart": [1562], "initializationEnd": [1594], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["rollbackTransaction(Database)", "getMessage()", "new SystemException(String,*)"], "tryExpressionStart": 358, "tryExpressionEnd": 362, "tryBlockStart": 358, "tryBlockEnd": 2004, "catchExpressionStart": 1776, "catchExpressionEnd": 1796, "catchBlockStart": 1776, "catchBlockEnd": 2004, "exceptionHandlingCallStart": [1804, 1969, 1841], "exceptionHandlingCallEnd": [1827, 1983, 1997], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1612, "focalAPIEnd": 1657, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ContentVersion.setVersionValue(resultStr)"], "useStart": [1668], "useEnd": [1705], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue2/tree/master/src/java/org/infoglue/cms/controllers/kernel/impl/simple/SearchController.java", "rawCode": "  public static int replaceString(\n      String searchString,\n      String replaceString,\n      String[] contentVersionIds,\n      InfoGluePrincipal infoGluePrincipal)\n      throws SystemException, Bug {\n    int replacements = 0;\n\n    ConstraintExceptionBuffer ceb = new ConstraintExceptionBuffer();\n    Database db = CastorDatabaseService.getDatabase();\n    try {\n      beginTransaction(db);\n\n      for (int i = 0; i < contentVersionIds.length; i++) {\n        String contentVersionId = contentVersionIds[i];\n        logger.info(\"contentVersionId:\" + contentVersionId);\n        ContentVersion contentVersion =\n            ContentVersionController.getContentVersionController()\n                .getContentVersionWithId(new Integer(contentVersionIds[i]), db);\n        if (contentVersion.getStateId().intValue() != ContentVersionVO.WORKING_STATE.intValue()) {\n          List events = new ArrayList();\n          ContentVersionVO contentVersionVO =\n              ContentStateController.changeState(\n                  contentVersion.getId(),\n                  ContentVersionVO.WORKING_STATE,\n                  \"Automatic by the replace function\",\n                  true,\n                  infoGluePrincipal,\n                  null,\n                  db,\n                  events);\n          contentVersion =\n              ContentVersionController.getContentVersionController()\n                  .getContentVersionWithId(contentVersionVO.getId(), db);\n          logger.info(\"Setting the version to working before replacing string...\");\n        }\n\n        String value = contentVersion.getVersionValue();\n        value = value.replaceAll(searchString, replaceString);\n\n        contentVersion.setVersionValue(value);\n\n        replacements++;\n      }\n\n      commitTransaction(db);\n    } catch (Exception e) {\n      rollbackTransaction(db);\n      throw new SystemException(\n          \"An error occurred when we tried to fetch a list of users in this role. Reason:\"\n              + e.getMessage(),\n          e);\n    }\n\n    return replacements;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8633, "initialization": ["String string = join(String[],String)"], "initializationStart": [289], "initializationEnd": [309], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 327, "focalAPIEnd": 365, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.substring(int)", "string.length()", "string.substring(int,int)"], "useStart": [383, 435, 484, 536, 588, 640, 692, 745, 799, 853, 907, 997, 1051, 1227, 1356, 1335], "useEnd": [417, 466, 518, 570, 622, 674, 726, 781, 835, 889, 978, 1033, 1088, 1247, 1372, 1377], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pitosalas/blogbridge/tree/master/src/com/salas/bb/utils/StringUtils.java", "rawCode": "  /**\n   * Creates pattern from the keywords list.\n   *\n   * @param aKeywords keywords list.\n   * @return keywords regex pattern.\n   */\n  public static String keywordsToPattern(String[] aKeywords) {\n    String pattern;\n\n    if (aKeywords != null && aKeywords.length > 0) {\n      pattern = join(aKeywords, \"|\");\n      pattern = pattern.replaceAll(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\");\n      pattern = pattern.replaceAll(\"\\\\.\", \"\\\\\\\\.\");\n      pattern = pattern.replaceAll(\"\\\\n+\", \"|\");\n      pattern = pattern.replaceAll(\"\\\\?\", \"\\\\\\\\?\");\n      pattern = pattern.replaceAll(\"\\\\(\", \"\\\\\\\\(\");\n      pattern = pattern.replaceAll(\"\\\\)\", \"\\\\\\\\)\");\n      pattern = pattern.replaceAll(\"\\\\[\", \"\\\\\\\\[\");\n      pattern = pattern.replaceAll(\"\\\\]\", \"\\\\\\\\]\");\n\n      pattern = pattern.replaceAll(\"\\\\++\", \"\\\\\\\\w+\");\n      pattern = pattern.replaceAll(\"\\\\s+\", \"\\\\\\\\s+\");\n      pattern = pattern.replaceAll(\"\\\\*+\", \"\\\\\\\\w*\");\n      pattern = pattern.replaceAll(\"\\\\\\\\s\\\\+\\\\\\\\w\\\\*\\\\\\\\s\\\\+\", \"\\\\\\\\s+(\\\\\\\\w*\\\\\\\\s+)?\");\n\n      pattern = pattern.replaceAll(\"\\\\|\\\\|+\", \"\\\\|\");\n      pattern = pattern.replaceAll(\"(^\\\\||\\\\|$)\", \"\");\n\n      String start = \"\\\\W\";\n      String end = start;\n\n      if (pattern.startsWith(\"\\\\s+\")) {\n        start = \"\\\\s\";\n        pattern = pattern.substring(3);\n      }\n\n      if (pattern.endsWith(\"\\\\s+\")) {\n        end = \"\\\\s\";\n        pattern = pattern.substring(0, pattern.length() - 3);\n      }\n\n      pattern = \"(^|\" + start + \")(\" + pattern.trim() + \")($|\" + end + \")\";\n    } else pattern = null;\n\n    return pattern;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8634, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 596, "catchExpressionStart": 542, "catchExpressionEnd": 562, "catchBlockStart": 542, "catchBlockEnd": 596, "exceptionHandlingCallStart": [570], "exceptionHandlingCallEnd": [589], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "(string)!=null", "guardType": "LOOP {", "guardExpressionStart": 342, "guardExpressionEnd": 377, "guardBlockStart": 342, "guardBlockEnd": 517, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 392, "focalAPIEnd": 419, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "BufferedWriter.write(resultStr)"], "useStart": [433, 473], "useEnd": [463, 484], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/quickbundle/qb-core/tree/master/java-lib/quickbundle-tools/src/main/java/org/quickbundle/tools/helper/io/RmFileSeparator.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      File f1 = new File(\"D:/dev/mysql/sql/yidaba_sicms.sql\");\n      BufferedReader br = new BufferedReader(new FileReader(f1));\n\n      File f2 = new File(\"D:/dev/mysql/sql/yidaba_sicms2.sql\");\n      BufferedWriter bw = new BufferedWriter(new FileWriter(f2));\n      String s = null;\n      while ((s = br.readLine()) != null) {\n        s = s.replaceAll(\"GBK\", \"utf8\");\n        s = s.replaceAll(\"gb2312\", \"utf8\");\n        bw.write(s);\n        bw.write(\"\\n\");\n      }\n      bw.flush();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8635, "initialization": ["String string = replaceParameters(String,Map<String, Object>)", "String replacement = readEmbeddedTextFile(String)"], "initializationStart": [2177, 2278], "initializationEnd": [2224, 2334], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null &&  replacement!=null", "guardType": "IF {", "guardExpressionStart": 2345, "guardExpressionEnd": 2368, "guardBlockStart": 2345, "guardBlockEnd": 2687, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 2479, "focalAPIEnd": 2527, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.replaceAll(String,resultStr)"], "useStart": [2622], "useEnd": [2676], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/sdk/tree/master/eclipse/plugins/com.android.ide.eclipse.adt/src/com/android/ide/eclipse/adt/internal/wizards/newproject/NewProjectCreator.java", "rawCode": "  /**\n   * Adds the manifest to the project.\n   *\n   * @param project The Java Project to update.\n   * @param parameters Template Parameters.\n   * @param dictionary String List to be added to a string definition file. This map will be filled\n   *     by this method.\n   * @param monitor An existing monitor.\n   * @throws CoreException if the method fails to update the project.\n   * @throws IOException if the method fails to create the files in the project.\n   */\n  private void addManifest(\n      IProject project,\n      Map<String, Object> parameters,\n      Map<String, String> dictionary,\n      IProgressMonitor monitor)\n      throws CoreException, IOException {\n\n    // get IFile to the manifest and check if it's not already there.\n    IFile file = project.getFile(SdkConstants.FN_ANDROID_MANIFEST_XML);\n    if (!file.exists()) {\n\n      // Read manifest template\n      String manifestTemplate = AdtPlugin.readEmbeddedTextFile(TEMPLATE_MANIFEST);\n\n      // Replace all keyword parameters\n      manifestTemplate = replaceParameters(manifestTemplate, parameters);\n\n      if (manifestTemplate == null) {\n        // Inform the user there will be not manifest.\n        AdtPlugin.logAndPrintError(\n            null,\n            \"Create Project\" /*TAG*/,\n            \"Failed to generate the Android manifest. Missing template %s\",\n            TEMPLATE_MANIFEST);\n        // Abort now, there's no need to continue\n        return;\n      }\n\n      if (parameters.containsKey(PARAM_ACTIVITY)) {\n        // now get the activity template\n        String activityTemplate = AdtPlugin.readEmbeddedTextFile(TEMPLATE_ACTIVITIES);\n\n        // If the activity name doesn't contain any dot, it's in the form\n        // \"ClassName\" and we need to expand it to \".ClassName\" in the XML.\n        String name = (String) parameters.get(PARAM_ACTIVITY);\n        if (name.indexOf('.') == -1) {\n          // Duplicate the parameters map to avoid changing the caller\n          parameters = new HashMap<String, Object>(parameters);\n          parameters.put(PARAM_ACTIVITY, \".\" + name); // $NON-NLS-1$\n        }\n\n        // Replace all keyword parameters to make main activity.\n        String activities = replaceParameters(activityTemplate, parameters);\n\n        // set the intent.\n        String intent = AdtPlugin.readEmbeddedTextFile(TEMPLATE_INTENT_LAUNCHER);\n\n        if (activities != null) {\n          if (intent != null) {\n            // set the intent to the main activity\n            activities = activities.replaceAll(PH_INTENT_FILTERS, intent);\n          }\n\n          // set the activity(ies) in the manifest\n          manifestTemplate = manifestTemplate.replaceAll(PH_ACTIVITIES, activities);\n        }\n      } else {\n        // remove the activity(ies) from the manifest\n        manifestTemplate = manifestTemplate.replaceAll(PH_ACTIVITIES, \"\"); // $NON-NLS-1$\n      }\n\n      // Handle the case of the test projects\n      if (parameters.containsKey(PARAM_TEST_TARGET_PACKAGE)) {\n        // Set the uses-library needed by the test project\n        String usesLibrary = AdtPlugin.readEmbeddedTextFile(TEMPLATE_TEST_USES_LIBRARY);\n        if (usesLibrary != null) {\n          manifestTemplate = manifestTemplate.replaceAll(PH_TEST_USES_LIBRARY, usesLibrary);\n        }\n\n        // Set the instrumentation element needed by the test project\n        String instru = AdtPlugin.readEmbeddedTextFile(TEMPLATE_TEST_INSTRUMENTATION);\n        if (instru != null) {\n          manifestTemplate = manifestTemplate.replaceAll(PH_TEST_INSTRUMENTATION, instru);\n        }\n\n        // Replace PARAM_TEST_TARGET_PACKAGE itself now\n        manifestTemplate = replaceParameters(manifestTemplate, parameters);\n\n      } else {\n        // remove the unused entries\n        manifestTemplate = manifestTemplate.replaceAll(PH_TEST_USES_LIBRARY, \"\"); // $NON-NLS-1$\n        manifestTemplate = manifestTemplate.replaceAll(PH_TEST_INSTRUMENTATION, \"\"); // $NON-NLS-1$\n      }\n\n      String minSdkVersion = (String) parameters.get(PARAM_MIN_SDK_VERSION);\n      if (minSdkVersion != null && minSdkVersion.length() > 0) {\n        String usesSdkTemplate = AdtPlugin.readEmbeddedTextFile(TEMPLATE_USES_SDK);\n        if (usesSdkTemplate != null) {\n          String usesSdk = replaceParameters(usesSdkTemplate, parameters);\n          manifestTemplate = manifestTemplate.replaceAll(PH_USES_SDK, usesSdk);\n        }\n      } else {\n        manifestTemplate = manifestTemplate.replaceAll(PH_USES_SDK, \"\");\n      }\n\n      // Reformat the file according to the user's formatting settings\n      manifestTemplate = reformat(XmlFormatStyle.MANIFEST, manifestTemplate);\n\n      // Save in the project as UTF-8\n      InputStream stream =\n          new ByteArrayInputStream(manifestTemplate.getBytes(\"UTF-8\")); // $NON-NLS-1$\n      file.create(stream, false /* force */, new SubProgressMonitor(monitor, 10));\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8636, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null||string.equals(\"\",))", "guardType": "IF {", "guardExpressionStart": 329, "guardExpressionEnd": 367, "guardBlockStart": 329, "guardBlockEnd": 378, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 391, "focalAPIEnd": 420, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [434, 477, 521], "useEnd": [463, 507, 553], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.0/kernel-util/src/main/java/org/sakaiproject/util/FormattedText.java", "rawCode": "  /**\n   * Returns a String with HTML entity references converted to characters suitable for processing as\n   * formatted text.\n   *\n   * @param value The text containing entity references (e.g., a News item description).\n   * @return The HTML, ready for processing.\n   */\n  public static String unEscapeHtml(String value) {\n    if (value == null || value.equals(\"\")) return \"\";\n    value = value.replaceAll(\"&lt;\", \"<\");\n    value = value.replaceAll(\"&gt;\", \">\");\n    value = value.replaceAll(\"&amp;\", \"&\");\n    value = value.replaceAll(\"&quot;\", \"\\\"\");\n    return value;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8637, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 176, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["splitInt(resultStr,String,int)"], "useStart": [230], "useEnd": [258], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fhdragon/dragon/tree/master/dragon-commons/src/main/java/org/apache/dragon/commons/util/StringUtil.java", "rawCode": "  public static int[] splitInt(String str, String[] regex, int defaultVal) {\n    String r = regex[0];\n    for (int i = 1, counti = regex.length; i < counti; i++) {\n      str = str.replaceAll(regex[i], r);\n    }\n    int[] result = splitInt(str, r, defaultVal);\n    return result;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8638, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 241, "focalAPIEnd": 266, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/parsons-project/interiores/tree/master/src/interiores/presentation/swing/views/ConstraintEditorFrame.java", "rawCode": "  /**\n   * Gets the name of the type stripping the number from the variable name\n   *\n   * @param id The identifier of the variable\n   * @return The name of the type of the variable\n   */\n  private String getTypeName(String id) {\n    return id.replaceAll(\"\\\\d+\", \"\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8639, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["Logger.error(String)", "getStackTrace(*)", "error(*)"], "tryExpressionStart": 216, "tryExpressionEnd": 220, "tryBlockStart": 216, "tryBlockEnd": 728, "catchExpressionStart": 583, "catchExpressionEnd": 605, "catchBlockStart": 583, "catchBlockEnd": 728, "exceptionHandlingCallStart": [615, 695, 682], "exceptionHandlingCallEnd": [672, 718, 719], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "(string)!=null", "guardType": "LOOP {", "guardExpressionStart": 325, "guardExpressionEnd": 367, "guardBlockStart": 325, "guardBlockEnd": 550, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 474, "focalAPIEnd": 499, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.trim()"], "useStart": [527], "useEnd": [538], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hutm/MART/tree/master/src/main/java/org/mart/crs/utils/helper/HelperFile.java", "rawCode": "  public static List<String> readLinesFromTextFile(String fileName, boolean skipEmplyLines) {\n    File file = getFile(fileName);\n    List<String> outfileList = new ArrayList<String>();\n    if (file.exists()) {\n      try {\n        BufferedReader reader = new BufferedReader(new FileReader(file));\n        String line;\n        while ((line = reader.readLine()) != null) {\n          if (skipEmplyLines && line.trim().length() < 1) {\n            continue;\n          }\n          line.replaceAll(\"\\\"\", \"\");\n          outfileList.add(line.trim());\n        }\n        reader.close();\n      } catch (IOException e) {\n        logger.error(\"Cannot read data from fileListTrain file \");\n        logger.error(Helper.getStackTrace(e));\n      }\n    } else {\n      logger.error(String.format(\"File %s does not exist\", fileName));\n    }\n    return outfileList;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8640, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 215, "focalAPIEnd": 247, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["VClass.setURI(resultStr)"], "useStart": [253], "useEnd": [273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vivo-project/VIVO/tree/master/src/edu/cornell/mannlib/vitro/webapp/controller/freemarker/InstitutionalInternalClassController.java", "rawCode": "  private VClass generateNewVClass(String newClassName, String namespace) {\n    VClass newClass = new VClass();\n    newClass.setName(newClassName);\n    newClass.setNamespace(namespace);\n    String uri = namespace + newClassName.replaceAll(\" \", \"\");\n    newClass.setURI(uri);\n    // How to g\n    return newClass;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8641, "initialization": ["String string = TextArea.getText()"], "initializationStart": [650], "initializationEnd": [662], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 712, "focalAPIEnd": 741, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.toCharArray()"], "useStart": [799], "useEnd": [817], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/smas036/ImageJ/tree/master/src/main/ij/plugin/frame/Editor.java", "rawCode": "  public int debug(Interpreter interp, int mode) {\n    if (IJ.debugMode) IJ.log(\"debug: \" + interp.getLineNumber() + \" \" + mode + \" \" + interp);\n    if (mode == Interpreter.RUN) return 0;\n    if (!isVisible()) { // abort macro if user closes window\n      interp.abortMacro();\n      return 0;\n    }\n    if (!isActive()) toFront();\n    int n = interp.getLineNumber();\n    if (n == previousLine) {\n      previousLine = 0;\n      return 0;\n    }\n    previousLine = n;\n    if (mode == Interpreter.RUN_TO_CARET) {\n      if (n == runToLine) {\n        mode = Interpreter.STEP;\n        interp.setDebugMode(mode);\n      } else return 0;\n    }\n    String text = ta.getText();\n    if (IJ.isWindows() && !IJ.isVista()) text = text.replaceAll(\"\\r\\n\", \"\\n\");\n    char[] chars = new char[text.length()];\n    chars = text.toCharArray();\n    int count = 1;\n    debugStart = 0;\n    int len = chars.length;\n    debugEnd = len;\n    for (int i = 0; i < len; i++) {\n      if (chars[i] == '\\n') count++;\n      if (count == n && debugStart == 0) debugStart = i + 1;\n      else if (count == n + 1) {\n        debugEnd = i;\n        break;\n      }\n    }\n    // IJ.log(\"debug: \"+debugStart+\" \"+debugEnd+\" \"+len+\" \"+count);\n    if (debugStart == 1) debugStart = 0;\n    if ((debugStart == 0 || debugStart == len) && debugEnd == len)\n      return 0; // skip code added with Interpreter.setAdditionalFunctions()\n    ta.select(debugStart, debugEnd);\n    if (debugWindow != null && !debugWindow.isShowing()) {\n      interp.setEditor(null);\n      debugWindow = null;\n    } else debugWindow = interp.updateDebugWindow(interp.getVariables(), debugWindow);\n    if (mode == Interpreter.STEP) {\n      step = false;\n      while (!step && !interp.done() && isVisible()) IJ.wait(5);\n    } else {\n      if (mode == Interpreter.FAST_TRACE) IJ.wait(5);\n      else IJ.wait(150);\n    }\n    return 0;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8642, "initialization": ["String string = String.replace(String,String)", "String string = String.replace(String,String)", "String string = String.replace(String,String)"], "initializationStart": [2463, 2517, 2569], "initializationEnd": [2492, 2544, 2598], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "println(String)", "printStackTrace()"], "tryExpressionStart": 667, "tryExpressionEnd": 671, "tryBlockStart": 667, "tryBlockEnd": 4553, "catchExpressionStart": 4419, "catchExpressionEnd": 4439, "catchBlockStart": 4419, "catchBlockEnd": 4553, "exceptionHandlingCallStart": [4504, 4473, 4527], "exceptionHandlingCallEnd": [4518, 4519, 4546], "configuration": ["string.replace(String,String)", "string.replace(String,String)", "string.replace(String,String)"], "configurationStart": [2463, 2517, 2569], "configurationEnd": [2492, 2544, 2598], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 2639, "focalAPIEnd": 2755, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replace(String,String)", "string.replace(String,String)", "string.replace(String,String)", "string.replace(String,String)", "string.replace(String,String)", "string.replace(String,String)", "string.replaceAll(String,String)", "string.replace(String,String)", "ArrayList<String>.add(resultStr)"], "useStart": [2780, 2881, 2956, 3025, 3104, 3182, 3265, 3362, 3622, 3667], "useEnd": [2856, 2931, 3000, 3079, 3157, 3240, 3321, 3597, 3652, 3689], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/diegojromerolopez/djbdd/tree/master/DJBDD/src/djbdd/io/SheFileLoader.java", "rawCode": "  /**\n   * Initalize the loader with a configuration.\n   *\n   * @param numberOfFormulasByBDD Number of formulas that will be used in each BDD.\n   * @param numberOfFormulas Number of formulas that will be loaded.\n   * @return List of formulas for each BDD.\n   */\n  public ArrayList<String> getFormulas(int numberOfFormulasByBDD, int numberOfFormulas) {\n    numVariables = -1;\n    numClausules = numberOfFormulas;\n    this.variables = new ArrayList<String>();\n    this.named_variables = new ArrayList<String>();\n    this.integer_variables = new ArrayList<String>();\n    this.formulas = new ArrayList<String>();\n    this.original_formulas = new ArrayList<String>();\n    try {\n      // Open the file that is the first\n      // command line parameter\n      FileInputStream fstream = new FileInputStream(filename);\n      // Get the object of DataInputStream\n      DataInputStream in = new DataInputStream(fstream);\n      BufferedReader br = new BufferedReader(new InputStreamReader(in));\n      String line;\n\n      int formulaIndex = 1;\n      if (VERBOSE) System.out.println(\"Extracting clausules\");\n      // Read File Line By Line\n      while ((line = br.readLine()) != null && line.length() > 0) {\n        if (line.length() == 0) break;\n        // Asume that lines starting with # area comments\n        // (not defined in that way by S. She)\n        if (line.charAt(0) != '#') {\n          // Boolean named variable\n          if (line.charAt(0) == '@') {\n            String[] content = line.split(\" \");\n            String variable = START_VAR + content[1] + END_VAR;\n            variables.add(variable);\n            named_variables.add(variable);\n            numVariables++;\n            // System.out.println(variable);\n          }\n          // Integer variable? x_i\n          else if (line.charAt(0) == '$') {\n            String[] content = line.split(\" \");\n            String variable = START_VAR + content[1] + END_VAR;\n            variables.add(variable);\n            integer_variables.add(variable);\n            numVariables++;\n            // System.out.println(variable);\n          }\n          // Clausules\n          else {\n            String formula = line.trim();\n            original_formulas.add(formula);\n\n            // Okay, do not touch this. This regular expressions have been\n            // carved in stone gotten of the Mount Doom\n            // No, seriously, DO NOT TOUCH THEM, they work\n            String formulaI = formula;\n            formulaI = formulaI.replace(\"|\", \" || \");\n            formulaI = formulaI.replace(\"!!\", \" \");\n            formulaI = formulaI.replace(\"&\", \" && \");\n            formulaI =\n                formulaI.replaceAll(\n                    \"([^\\\\w_]+)(x[1-9]+)([^\\\\w_]+)\", \"$1 \" + START_VAR + \"$2\" + END_VAR + \"$3\");\n            formulaI = formulaI.replaceAll(\"(\\\\!?)([\\\\w_\\\\d]+)\", \"$1\" + START_VAR + \"$2\" + END_VAR);\n            formulaI = formulaI.replace(START_VAR + START_VAR, START_VAR);\n            formulaI = formulaI.replace(END_VAR + END_VAR, END_VAR);\n            formulaI = formulaI.replace(START_VAR + \"0\" + END_VAR, \" false \");\n            formulaI = formulaI.replace(START_VAR + \"1\" + END_VAR, \" true \");\n            formulaI = formulaI.replace(START_VAR + \"false\" + END_VAR, \" false \");\n            formulaI = formulaI.replace(START_VAR + \"true\" + END_VAR, \" true \");\n            formulaI =\n                formulaI.replaceAll(\n                    Pattern.quote(START_VAR)\n                        + \"([\\\\w\\\\d_]+)\"\n                        + Pattern.quote(END_VAR)\n                        + \"\\\\s*\\\\|\\\\|\\\\s*true\\\\s*\",\n                    \"true\");\n            formulaI = formulaI.replace(\"<=>\", \"<->\");\n\n            formulas.add(formulaI);\n\n            // Warn the user everything runs smoothly\n            if (VERBOSE) {\n              System.out.println(\n                  \"Extracting clausule: \"\n                      + (formulaIndex)\n                      + \" / \"\n                      + numClausules\n                      + \": \"\n                      + formulaI);\n            }\n\n            formulaIndex++;\n\n            // Stop condition, yeah there are other ways to do this\n            // but I prefer this one\n            if (formulaIndex > numClausules\n                && numClausules != -1\n                && numClausules != FileLoaderConfiguration.ALL_CLAUSULES) break;\n          }\n        }\n      }\n\n      // Close the input stream\n      in.close();\n\n    } catch (Exception e) { // Catch exception if any\n      System.err.println(\"Error: \" + e.getMessage());\n      e.printStackTrace();\n    }\n\n    if (this.reordering == SheFileLoader.REORDER_BY_OCURRENCE) {\n      variables = this.getOrderedVariablesByOcurrence();\n    }\n\n    // Initialize variables with a given order\n    BDD.init(variables);\n\n    // Now we are going to create the bdd one clausule at a time\n    bdd_formulas = new ArrayList<String>(formulas.size() / numberOfFormulasByBDD);\n    String formulaBDDI = \"\";\n    boolean firstIteration = true;\n    for (int i = 0; i < formulas.size(); i++) {\n      if (!firstIteration) formulaBDDI += \"&& (\" + formulas.get(i) + \") \";\n      else {\n        formulaBDDI += \"(\" + formulas.get(i) + \") \";\n        firstIteration = false;\n      }\n      if ((i + 1) % numberOfFormulasByBDD == 0) {\n        bdd_formulas.add(formulaBDDI);\n        formulaBDDI = \"\";\n        firstIteration = true;\n      }\n    }\n    return bdd_formulas;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8643, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null)", "guardType": "IF {", "guardExpressionStart": 95, "guardExpressionEnd": 111, "guardBlockStart": 95, "guardBlockEnd": 133, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 157, "focalAPIEnd": 180, "followUpCheck": "!this.eGraph.getBasisGraph().getName().equals(resultStr)", "checkType": "IF", "followUpCheckExpressionStart": 215, "followUpCheckExpressionEnd": 276, "followUpCheckBlockStart": 215, "followUpCheckBlockEnd": 386, "use": ["String.setName(resultStr)"], "useStart": [285], "useEnd": [331], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JuergenGall/Henshin-Editor/tree/master/de.tub.tfs.agg/src/agg/gui/treeview/nodedata/GraphTreeNodeData.java", "rawCode": "  /** Sets the string to display for this object. */\n  public void setString(String str) {\n    if (str == null) {\n      return;\n    }\n    String newString = str.replaceAll(\" \", \"\");\n    this.string = newString;\n    if (!this.eGraph.getBasisGraph().getName().equals(newString)) {\n      this.eGraph.getBasisGraph().setName(newString);\n      this.eGraph.getGraGra().setChanged(true);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8644, "initialization": ["String string = getDTOType()"], "initializationStart": [53], "initializationEnd": [65], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 78, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/terraframe/Runway-SDK/tree/master/runwaysdk-server/src/main/java/com/runwaysdk/dataaccess/metadata/Type.java", "rawCode": "  private String getDTOBaseType() {\n    String dto = getDTOType();\n    return dto.replaceAll(\"\\\\[\\\\]\", \"\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8645, "initialization": ["String string = Matcher.group(int)"], "initializationStart": [2845], "initializationEnd": [2855], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 3125, "focalAPIEnd": 3159, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URL(resultStr)"], "useStart": [3187], "useEnd": [3200], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.7.2/trunk/src/om/loadtest/TNTester.java", "rawCode": "  private void sendRequestGetMedia(int iServer, Map mTokens, HttpScript.Item i, StepStats ss)\n      throws IOException {\n    if (DEBUG) System.err.print(\" \" + i.getURL());\n    ss.sPath = i.getURL();\n    long lBefore = System.currentTimeMillis();\n\n    Socket s = new Socket(HOSTS[iServer], PORTS[iServer]);\n    // Again with the dodgy charset assumptions\n    OutputStreamWriter osw = new OutputStreamWriter(s.getOutputStream());\n    String sRequest = i.getRequest();\n    sRequest = XML.replaceTokens(sRequest, \"%%\", mTokens).replaceAll(\"HTTP/1.1\", \"HTTP/1.0\");\n    osw.write(sRequest + \"\\r\\n\");\n    if (i.getData() != null) osw.write(i.getData());\n    osw.flush();\n\n    // Get input\n    InputStream is = s.getInputStream();\n    String sLine = \"\";\n    int iContentLength = -1;\n    boolean bFirst = true;\n    while (true) {\n      int iChar = is.read();\n      if (iChar == -1) throw new IOException(\"Unexpected EOF in socket input\");\n      if (iChar == 10) {\n        if (sLine.equals(\"\")) break; // End of headers\n        Matcher m = HttpScript.CONTENTLENGTH.matcher(sLine);\n        if (m.matches()) iContentLength = Integer.parseInt(m.group(1));\n        if (bFirst) {\n          bFirst = false;\n          Matcher mStatus = HttpScript.STATUSCODE.matcher(sLine);\n          if (!mStatus.matches()) throw new IOException(\"Unexpected HTTP status format: \" + sLine);\n          if (Integer.parseInt(mStatus.group(1)) != i.getExpectedResponse())\n            throw new IOException(\n                \"Unexpected response code: \"\n                    + sLine\n                    + \" (expecting \"\n                    + i.getExpectedResponse()\n                    + \")\\n\"\n                    + IO.loadString(is));\n        }\n        // System.err.println(sLine);\n        sLine = \"\";\n      } else if (iChar != 13) {\n        sLine += (char) iChar;\n      }\n    }\n\n    byte[] abData;\n    if (iContentLength != -1) {\n      abData = new byte[iContentLength];\n      for (int iRead = 0; iRead < abData.length; ) {\n        int iThisTime = is.read(abData, iRead, abData.length - iRead);\n        if (iThisTime == -1) throw new IOException(\"Didn't get all data\");\n        iRead += iThisTime;\n      }\n    } else {\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      while (true) {\n        int iRead = is.read();\n        if (iRead == -1) break;\n        baos.write(iRead);\n      }\n      abData = baos.toByteArray();\n    }\n    s.close();\n\n    ss.lTime = System.currentTimeMillis() - lBefore;\n    if (DEBUG) {\n      System.err.print(\" [\" + abData.length + \" bytes]\");\n      System.err.println(\" (\" + ss.lTime + \" ms)\");\n    }\n\n    // OK now go through looking for *.gif, jpg, .css, .png\n    String sContent = new String(abData);\n    Set<String> sDone = new HashSet<String>();\n    Matcher m = MEDIALINK.matcher(sContent);\n    while (m.find()) {\n      String sURL = m.group(1);\n      if (sDone.contains(sURL)) continue;\n      sDone.add(sURL);\n\n      sURL =\n          \"http://\"\n              + HOSTS[iServer]\n              + (PORTS[iServer] != 80 ? (\":\" + PORTS[iServer]) : \"\")\n              + \"/om-tn/simple1/\"\n              + sURL;\n      sURL = sURL.replaceAll(\"simple1/../\", \"\");\n\n      loadMedia(mTokens, new URL(sURL), ss);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8646, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 126, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jgralab/jgralab-dhht/tree/master/src/de/uni_koblenz/jgralab/utilities/tg2dot/greql2/funlib/AbbreviateString.java", "rawCode": "  public String evaluate(String string) {\n    if (string != null && string.length() != 0) {\n      string = string.charAt(0) + string.replaceAll(\"[a-z]+\", \"\");\n    }\n    return string;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8647, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.toCharArray()"], "configurationStart": [591], "configurationEnd": [612], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 629, "focalAPIEnd": 659, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [675, 721, 767, 815, 865], "useEnd": [705, 751, 799, 849, 899], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drevicko/MeandreComponentFoundry/tree/master/src-nlp/org/seasr/meandre/components/nlp/gazetteer/AdvGazetteerWrapper.java", "rawCode": "  public List<SimpleTuple> toTuples(\n      String stringToParse, int count, String inLocation, String propMessage) throws IOException {\n\n    List<SimpleTuple> output = new ArrayList<SimpleTuple>();\n\n    String strLine = stringToParse;\n    AdvGazetteerWrapper sample = new AdvGazetteerWrapper();\n    boolean doPrint = false;\n    StandAloneGaz gaz = new StandAloneGaz();\n\n    // set the filename for intitalization of the gazetteer\n    gaz.setListsFile(propMessage);\n\n    // output the status ?\n    gaz.setOutputStatus(false);\n\n    gaz.init();\n    CharArrayReader reader = new CharArrayReader(strLine.toCharArray());\n    strLine = strLine.replaceAll(\",\", \" , \");\n    strLine = strLine.replaceAll(\":\", \" : \");\n    strLine = strLine.replaceAll(\";\", \" ; \");\n    strLine = strLine.replaceAll(\"\\\\.\", \" . \");\n    strLine = strLine.replaceAll(\"\\\\(\", \" \\\\( \");\n    strLine = strLine.replaceAll(\"\\\\)\", \" \\\\) \");\n    gaz.execute(reader, sample);\n    for (int i = 0; i < m_annotationSet.size(); i++) {\n\n      String mention = m_annotationSet.get(i).toString();\n      String cat = mention.split(\":\")[2];\n      cat = cat.replaceAll(\".null\", \"\");\n      SimpleTuple tuple = tuplePeer.createTuple();\n      tuple.setValue(TYPE_IDX, cat);\n      tuple.setValue(SENTENCE_ID_IDX, count);\n      tuple.setValue(LOCATION_ID_IDX, inLocation);\n      tuple.setValue(TEXT_START_IDX, mention.split(\":\")[1].split(\"-\")[0]);\n      tuple.setValue(TEXT_IDX, mention.split(\":\")[0]);\n      output.add(tuple);\n    }\n\n    return output;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8648, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 79, "focalAPIEnd": 104, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultStr.replaceAll(String,String)"], "useStart": [122], "useEnd": [152], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Kastle2/GoFetch/tree/master/GoFetch/src/com/gofetch/seomoz/TextParser.java", "rawCode": "  public static String removeFormatting(String text) {\n\n    String cleanText = text.replaceAll(\"\\n\", \"\");\n    cleanText = cleanText.replaceAll(\"\\r\", \"\");\n\n    return cleanText;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8649, "initialization": ["String string = encode(String,*)"], "initializationStart": [67], "initializationEnd": [116], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 131, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jersey/jersey-1.x/tree/master/contribs/jersey-aws-client/src/main/java/com/sun/jersey/contribs/aws/client/AWSCommerceClientFilter.java", "rawCode": "    private String encodeParam(String val) {\n      String result = UriComponent.encode(val, UriComponent.Type.QUERY);\n      return result.replaceAll(\":\", \"%3A\");\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8650, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 103, "focalAPIEnd": 152, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setVersionValue(resultStr)"], "useStart": [158], "useEnd": [204], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue/tree/master/src/java/org/infoglue/cms/entities/content/impl/simple/ContentVersionImpl.java", "rawCode": "  public void setEscapedVersionValue(java.lang.String escapedVersionValue) {\n    String versionValue = escapedVersionValue.replaceAll(\"cdataEnd\", \"]]>\");\n    this.valueObject.setVersionValue(versionValue);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8651, "initialization": ["String string = StringBuffer.toString()"], "initializationStart": [294], "initializationEnd": [311], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 614, "focalAPIEnd": 655, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [677, 746], "useEnd": [724, 792], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dw04/blinklicht/tree/master/java/src/io/WebServer.java", "rawCode": "    private String replaceTokens2(String template) {\n      StringBuffer buffer = new StringBuffer(template);\n\n      //\n      buffer = addConstantColor(buffer);\n      buffer = addFade(buffer);\n      buffer = addRandom(buffer);\n      buffer = addRadioDevices(buffer);\n\n      String newTemplate = buffer.toString();\n\n      // LinkedList<String> temp = new LinkedList<String>();\n      // temp.add(\"<-radiodevices->\");\n      // temp.add(\"<-modules->\");\n      // temp.add(\"<-moduleclasses->\");\n      //\n      // for(String s: temp){\n      // buffer.delete(buffer.indexOf(s), s.length());\n      // }\n\n      newTemplate = newTemplate.replaceAll(\"<-modules->\", \"\");\n      newTemplate = newTemplate.replaceAll(\"<-moduleclasses->\", \"\");\n      newTemplate = newTemplate.replaceAll(\"<-radiodevices->\", \"\");\n\n      return newTemplate;\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8652, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 89, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RamesesDev/osiris2/tree/master/common/rameses-scripting/src/com/rameses/scripting/InterfaceBuilder.java", "rawCode": "  public static String getProxyInterfaceScript(String pkgName, Class sc) {\n    pkgName = pkgName.replaceAll(\"/\", \".\");\n    boolean proxyMethodExist = false;\n    StringBuffer sbody = new StringBuffer();\n    for (Method m : sc.getDeclaredMethods()) {\n      if (m.isAnnotationPresent(ProxyMethod.class)) {\n        proxyMethodExist = true;\n        buildMethodText(m, sbody, m.getParameterTypes());\n\n        // if there is an async marker, add an extra method for the handler\n        if (m.isAnnotationPresent(Async.class)) {\n          Class[] parms = new Class[m.getParameterTypes().length + 1];\n          for (int j = 0; j < parms.length - 1; j++) {\n            parms[j] = m.getParameterTypes()[j];\n          }\n          parms[parms.length - 1] = AsyncHandler.class;\n          buildMethodText(m, sbody, parms);\n        }\n      }\n    }\n    if (!proxyMethodExist) return null;\n    StringBuffer nb = new StringBuffer();\n    nb.append(\"package \" + pkgName + \"; \\n\");\n    nb.append(\"interface \" + sc.getSimpleName() + \"Intf { \\n\");\n    nb.append(sbody);\n    nb.append(\"}\\n\");\n    return (nb.toString());\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8653, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 121, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List<String>.remove(resultStr)"], "useStart": [203], "useEnd": [232], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pgorla/usergrid/tree/master/core/src/main/java/org/usergrid/persistence/Schema.java", "rawCode": "  public void removeEntitiesPackage(String entityPackage) {\n    entitiesPackage.remove(entityPackage);\n    String path = entityPackage.replaceAll(\"\\\\.\", \"/\");\n    synchronized (entitiesScanPath) {\n      entitiesScanPath.remove(path);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8654, "initialization": ["String string = Encoder.encodeAsString(Filter,QName)"], "initializationStart": [841], "initializationEnd": [880], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 897, "focalAPIEnd": 925, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/unsupported/wfs-ng/src/main/java/org/geotools/data/wfs/internal/AbstractWFSStrategy.java", "rawCode": "  /**\n   * Returns a single-line string containing the xml representation of the given filter, as\n   * appropriate for the {@code FILTER} parameter in a GetFeature request.\n   */\n  protected String encodeGetFeatureGetFilter(final Filter filter) throws IOException {\n\n    final Configuration filterConfig = getFilterConfiguration();\n    final QName encName;\n\n    if (filterConfig instanceof org.geotools.filter.v1_0.OGCConfiguration\n        || filterConfig instanceof org.geotools.filter.v1_1.OGCConfiguration) {\n      encName = org.geotools.filter.v1_0.OGC.Filter;\n    } else {\n      encName = org.geotools.filter.v2_0.FES.Filter;\n    }\n\n    Encoder encoder = new Encoder(filterConfig);\n    // do not write the xml declaration\n    encoder.setOmitXMLDeclaration(true);\n    encoder.setEncoding(Charset.forName(\"UTF-8\"));\n\n    String encoded = encoder.encodeAsString(filter, encName);\n\n    encoded = encoded.replaceAll(\"\\n\", \"\");\n    return encoded;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8655, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string.indexOf(regex,)>=0", "guardType": "LOOP {", "guardExpressionStart": 336, "guardExpressionEnd": 370, "guardBlockStart": 336, "guardBlockEnd": 450, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 413, "focalAPIEnd": 443, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/beattiea/TiltyIMU/tree/master/Tilty Software/Processing/libraries/G4P/src/g4p_controls/StyledString.java", "rawCode": "  /**\n   * Ensure we do not have blank lines by replacing double EOL characters by single EOL until there\n   * are only single EOLs. <br>\n   * Using replaceAll on its own will not work because EOL/EOL/EOL would become EOL/EOL not the\n   * single EOL required.\n   */\n  private String removeDoubleSpacingFromPlainText(String chars) {\n    while (chars.indexOf(\"\\n\\n\") >= 0) {\n      invalidText = true;\n      chars = chars.replaceAll(\"\\n\\n\", \"\\n\");\n    }\n    return chars;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8656, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 42, "focalAPIEnd": 63, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue2/tree/master/src/java/org/infoglue/cms/entities/management/CategoryVO.java", "rawCode": "  public void setName(String s) {\n    s = s.replaceAll(\",\", \"\");\n    name = s;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8657, "initialization": ["String string = X10MethodDef.signature()"], "initializationStart": [69], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 95, "focalAPIEnd": 125, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.indexOf(char)", "string.substring(int)"], "useStart": [137, 198, 184], "useEnd": [170, 214, 215], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scalegraph/sx10/tree/master/x10.doc/src/x10doc/doc/X10MethodDoc.java", "rawCode": "  public static String signature(X10MethodDef md) {\n    String sig = md.signature();\n    sig = sig.replaceAll(\"[^(:,]+:\", \"\");\n    sig = sig.replaceAll(\"\\\\{[^}]+\\\\}\", \"\");\n\n    return sig.substring(sig.indexOf('('));\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8658, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 151, "focalAPIEnd": 180, "followUpCheck": "MdTypeDAO.getMdTypeDAO(resultStr) instanceof MdEnumerationDAOIF", "checkType": "IF", "followUpCheckExpressionStart": 497, "followUpCheckExpressionEnd": 564, "followUpCheckBlockStart": 497, "followUpCheckBlockEnd": 634, "use": ["string.replace(String,String)", "string.replace(String,String)"], "useStart": [580, 647], "useEnd": [627, 699], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/terraframe/Runway-SDK/tree/master/runwaysdk-server/src/main/java/com/runwaysdk/dataaccess/metadata/Type.java", "rawCode": "  /**\n   * Returns the DTO Generic representation of the type name\n   *\n   * @return\n   */\n  public String getGenericDTOType() {\n    String baseType = type.replaceAll(\"\\\\[\\\\]\", \"\");\n\n    if (isPrimitive() || isVoid() || isStream()) {\n      return type;\n    }\n\n    if (this.isValueQuery()) {\n      return this.getDTOType();\n    }\n\n    if (isQuery()) {\n      return ComponentQueryDTO.class.getName();\n    }\n\n    // if the type is a MdEnumeration return EnumDTO otherwise\n    // return EntityDTO\n    if (MdTypeDAO.getMdTypeDAO(baseType) instanceof MdEnumerationDAOIF) {\n      return type.replace(baseType, EnumDTO.class.getName());\n    }\n\n    return type.replace(baseType, ComponentDTO.class.getName());\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8659, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 258, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [314, 370, 427, 484, 538, 592, 648, 707, 761], "useEnd": [355, 412, 469, 523, 577, 633, 692, 746, 801], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zeitgeist87/Sentiment-Analysis-on-OpenStack/tree/master/DataLoader/src/main/java/tsa/classifier/Preprocesser.java", "rawCode": "  /**\n   * @param item the tweet to modify\n   * @return the tweet with \"_SMILEHAPPY_\" in place of happy emoticons and \"_SMILESAD_\" in place of\n   *     sad emticons\n   */\n  public String replaceEmoticons(String item) {\n    String result = item;\n    result = result.replaceAll(\":[)]\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\";[)]\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\":-[)]\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\";-[)]\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\":d\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\";d\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\"=[)]\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\"\\\\^_\\\\^\", \"_SMILEHAPPY_\");\n    result = result.replaceAll(\":[(]\", \"_SMILESAD_\");\n    result = result.replaceAll(\":-[(]\", \"_SMILESAD_\");\n    return result;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8660, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 82, "guardExpressionEnd": 99, "guardBlockStart": 82, "guardBlockEnd": 245, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 115, "focalAPIEnd": 148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resultStr.replaceAll(String,String)", "resultStr.replaceAll(String,String)"], "useStart": [163, 208], "useEnd": [193, 238], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kingargyle/exist-1.4.x/tree/master/extensions/modules/src/org/exist/xquery/modules/sql/ExecuteFunction.java", "rawCode": "  private static String escapeXmlText(String text) {\n    String work = null;\n\n    if (text != null) {\n      work = text.replaceAll(\"\\\\&\", \"\\\\&amp;\");\n      work = work.replaceAll(\"<\", \"\\\\&lt;\");\n      work = work.replaceAll(\">\", \"\\\\&gt;\");\n    }\n\n    return (work);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8661, "initialization": ["String string = View.getId()"], "initializationStart": [179], "initializationEnd": [191], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 229, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/branches/crux/old/5.0.0/Crux/src/core/org/cruxframework/crux/core/rebind/screen/widget/ViewFactoryCreator.java", "rawCode": "  /**\n   * Return the simple name of the ViewFactory class created for the associated screen\n   *\n   * @return\n   */\n  public String getProxySimpleName() {\n    String className = view.getId() + \"_\" + this.device;\n    className = className.replaceAll(\"[\\\\W]\", \"_\");\n    return className;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8662, "initialization": ["String string = getString(String)"], "initializationStart": [1912], "initializationEnd": [1937], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1954, "focalAPIEnd": 1985, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "string.replaceAll(String,String)", "Element.setAttribute(String,resultStr)"], "useStart": [2002, 2051, 2099, 2139], "useEnd": [2034, 2082, 2131, 2175], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.12/src/om/stdcomponent/AdvancedFieldComponent.java", "rawCode": "  @Override\n  public void produceVisibleOutput(QContent qc, boolean bInit, boolean bPlain) throws OmException {\n    if (bInit) {\n      qc.addResource(\"blank.html\", \"text/html;charset=UTF-8\", new byte[0]);\n    }\n\n    String sType = getString(PROPERTY_TYPE);\n\n    if (!(bGotLabel || isPropertySet(PROPERTY_LABEL))) {\n      throw new OmFormatException(\"<advancedfield> \" + getID() + \": Requires <label> or label=\");\n    }\n\n    if (bPlain) {\n      if (isPropertySet(PROPERTY_LABEL) && !getString(PROPERTY_LABEL).equals(\"\")) {\n        Element eLabel = qc.createElement(\"label\");\n        qc.addInlineXHTML(eLabel);\n        eLabel.setAttribute(\"for\", QDocument.ID_PREFIX + QDocument.VALUE_PREFIX + getID());\n        XML.createText(eLabel, getString(PROPERTY_LABEL));\n      }\n\n      Element eDiv = qc.createElement(\"div\");\n      qc.addInlineXHTML(eDiv);\n\n      XML.createText(\n          eDiv,\n          \"p\",\n          \"(In the following edit field: \"\n              + ((sType.equals(\"superscript\") || sType.equals(\"both\"))\n                  ? \" Type { before, and \" + \"} after, any text you want superscripted.\"\n                  : \"\")\n              + ((sType.equals(\"subscript\") || sType.equals(\"both\"))\n                  ? \" Type [ before, and \" + \"] after, any text you want subscripted.\"\n                  : \"\")\n              + ((sType.equals(\"chem\"))\n                  ? \" Type your answer ignoring subscripting. \"\n                      + \"For example, two water molecules should be entered as 2H2O.\"\n                  : \"\")\n              + \")\");\n\n      Element eInput = XML.createChild(eDiv, \"input\");\n      eInput.setAttribute(\"type\", \"text\");\n      eInput.setAttribute(\"size\", \"\" + getInteger(PROPERTY_COLS));\n      eInput.setAttribute(\"name\", QDocument.ID_PREFIX + QDocument.VALUE_PREFIX + getID());\n      eInput.setAttribute(\"id\", QDocument.ID_PREFIX + QDocument.VALUE_PREFIX + getID());\n\n      String sValue = getString(PROPERTY_VALUE);\n      sValue = sValue.replaceAll(\"<sup>\", \"{\");\n      sValue = sValue.replaceAll(\"</sup>\", \"}\");\n      sValue = sValue.replaceAll(\"<sub>\", \"[\");\n      sValue = sValue.replaceAll(\"</sub>\", \"]\");\n      eInput.setAttribute(\"value\", sValue);\n\n      if (!isEnabled()) eInput.setAttribute(\"disabled\", \"disabled\");\n      addLangAttributes(eInput);\n    } else {\n      Element eDiv = qc.createElement(\"div\");\n      qc.addInlineXHTML(eDiv);\n      eDiv.setAttribute(\"class\", \"advancedfield\");\n      double dZoom = getQuestion().getZoom();\n      Element eIframe = qc.createElement(\"iframe\");\n      eDiv.appendChild(eIframe);\n      eIframe.setAttribute(\"id\", QDocument.ID_PREFIX + QDocument.OM_PREFIX + getID() + \"_iframe\");\n      eIframe.setAttribute(\"src\", \"%%RESOURCES%%/blank.html\");\n      eIframe.setAttribute(\"scrolling\", \"no\");\n      eIframe.setAttribute(\"width\", \"\" + (int) (10 * dZoom * getInteger(PROPERTY_COLS)));\n      eIframe.setAttribute(\"height\", \"\" + (int) (28 * dZoom));\n      eIframe.setAttribute(\"mysubtype\", sType);\n      eIframe.setAttribute(\"zoom\", \"\" + dZoom);\n      eIframe.setAttribute(\"frameborder\", \"no\"); // suppresses 3D frame in IE\n      if (!isEnabled()) {\n        if (getQuestion().isFixedColour())\n          eIframe.setAttribute(\"class\", \"advancedfielddisabledfixed\");\n        else eIframe.setAttribute(\"class\", \"advancedfielddisabled\");\n      }\n      addLangAttributes(eIframe);\n\n      Element eHidden = qc.createElement(\"input\");\n      eDiv.appendChild(eHidden);\n      eHidden.setAttribute(\"type\", \"hidden\");\n      eHidden.setAttribute(\"name\", QDocument.ID_PREFIX + QDocument.VALUE_PREFIX + getID());\n      eHidden.setAttribute(\"id\", QDocument.ID_PREFIX + QDocument.VALUE_PREFIX + getID());\n      eHidden.setAttribute(\"value\", getString(PROPERTY_VALUE));\n\n      eDiv.appendChild(qc.createElement(\"br\"));\n      eDiv.appendChild(qc.getOutputDocument().createTextNode(\"\\n\"));\n\n      if (sType.equals(\"superscript\") || sType.equals(\"both\")) {\n        Element eCheckbox = qc.createElement(\"input\");\n        eDiv.appendChild(eCheckbox);\n        eCheckbox.setAttribute(\"type\", \"checkbox\");\n        eCheckbox.setAttribute(\"id\", QDocument.ID_PREFIX + QDocument.OM_PREFIX + getID() + \"_sup\");\n        // was onclick below\n        eCheckbox.setAttribute(\n            \"onclick\", \"advancedfieldSup('\" + getID() + \"','\" + QDocument.ID_PREFIX + \"');\");\n        if (!isEnabled()) eCheckbox.setAttribute(\"disabled\", \"yes\");\n        Element eLabel = qc.createElement(\"label\");\n        eDiv.appendChild(eLabel);\n        eLabel.setAttribute(\"for\", QDocument.ID_PREFIX + QDocument.OM_PREFIX + getID() + \"_sup\");\n        eLabel.setAttribute(\"title\", \"Click checkbox or type up arrow to enable superscript\");\n        XML.createText(eLabel, \"Superscript (\\u2191) \");\n      }\n\n      if (sType.equals(\"subscript\") || sType.equals(\"both\")) {\n        Element eCheckbox = qc.createElement(\"input\");\n        eDiv.appendChild(eCheckbox);\n        eCheckbox.setAttribute(\"type\", \"checkbox\");\n        eCheckbox.setAttribute(\"id\", QDocument.ID_PREFIX + QDocument.OM_PREFIX + getID() + \"_sub\");\n        eCheckbox.setAttribute(\n            \"onclick\", \"advancedfieldSub('\" + getID() + \"','\" + QDocument.ID_PREFIX + \"');\");\n        if (!isEnabled()) eCheckbox.setAttribute(\"disabled\", \"yes\");\n        Element eLabel = qc.createElement(\"label\");\n        eDiv.appendChild(eLabel);\n        eLabel.setAttribute(\"for\", QDocument.ID_PREFIX + QDocument.OM_PREFIX + getID() + \"_sub\");\n        eLabel.setAttribute(\"title\", \"Click checkbox or type down arrow to enable subscript\");\n        XML.createText(eLabel, \"Subscript (\\u2193)\");\n      }\n\n      Element eScript = qc.createElement(\"script\");\n      eDiv.appendChild(eScript);\n      eScript.setAttribute(\"type\", \"text/javascript\");\n      String sfg = getQuestion().getFixedColourFG();\n      String sbg = getQuestion().getFixedColourBG();\n      if (sbg == null) sbg = \"#FFFFFF\";\n      if (sfg == null) {\n        if (isEnabled()) sfg = \"#000000\";\n        else sfg = \"#999999\";\n      }\n      XML.createText(\n          eScript,\n          \"addOnLoad( function() { advancedfieldFix('\"\n              + getID()\n              + \"','\"\n              + QDocument.ID_PREFIX\n              + \"',\"\n              + (isEnabled() ? \"true\" : \"false\")\n              + \",'\"\n              + sType\n              + \"',\"\n              + dZoom\n              + \",'\"\n              + sfg\n              + \"','\"\n              + sbg\n              + \"'); } );\");\n\n      // Can be focused (hopefully)\n      if (isEnabled())\n        qc.informFocusableFullJS(\n            QDocument.ID_PREFIX + getID(),\n            \"document.getElementById('\"\n                + QDocument.ID_PREFIX\n                + QDocument.OM_PREFIX\n                + getID()\n                + \"_iframe').contentWindow\",\n            bPlain);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8663, "initialization": ["String string = getUrlContents(*)"], "initializationStart": [148], "initializationEnd": [194], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(string==null)", "guardType": "IF {", "guardExpressionStart": 291, "guardExpressionEnd": 312, "guardBlockStart": 291, "guardBlockEnd": 338, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 482, "focalAPIEnd": 512, "followUpCheck": "resultStr[0].startsWith(\"{\")", "checkType": "IF", "followUpCheckExpressionStart": 532, "followUpCheckExpressionEnd": 561, "followUpCheckBlockStart": 532, "followUpCheckBlockEnd": 685, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bencvt/LibShapeDraw/tree/master/projects/main/src/main/java/libshapedraw/internal/LSDUpdateCheck.java", "rawCode": "    @Override\n    public void run() {\n      LSDController.getLog().info(\"update check request: \" + ApiInfo.getUrlUpdate());\n      String response = LSDUtil.getUrlContents(ApiInfo.getUrlUpdate());\n      LSDController.getLog().info(\"update check response: \" + String.valueOf(response));\n      if (response == null) {\n        return;\n      }\n      // Parse response and set updateCheckResult, which will be\n      // consumed and output later in the main thread.\n      String[] lines = response.replaceAll(\"\\t\", \" \").split(\"\\n\");\n      if (lines[0].startsWith(\"{\")) {\n        // In case we ever want to switch to JSON in the future\n        result = buildOutput(\"\");\n        return;\n      }\n      // The first line is simply the latest published version.\n      if (ApiInfo.isVersionAtLeast(lines[0])) {\n        return;\n      }\n      // If the response contains lines of text after the version,\n      // that's what we'll output to the user.\n      StringBuilder b = new StringBuilder();\n      for (int i = 1; i < lines.length; i++) {\n        if (!lines[i].isEmpty()) {\n          if (b.length() > 0) {\n            b.append('\\n');\n          }\n          b.append(lines[i]);\n        }\n      }\n      if (b.length() > 0) {\n        result = b.toString();\n      } else {\n        // The response was just the version.\n        result = buildOutput(lines[0]);\n      }\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8664, "initialization": ["String string = CreateSiteNodeWizardInfoBean.getReturnAddress()"], "initializationStart": [2389], "initializationEnd": [2436], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": [], "tryExpressionStart": 1161, "tryExpressionEnd": 1165, "tryBlockStart": 1161, "tryBlockEnd": 2358, "catchExpressionStart": 2827, "catchExpressionEnd": 2847, "catchBlockStart": 2827, "catchBlockEnd": 2881, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 2470, "focalAPIEnd": 2587, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "sendRedirect(resultStr)"], "useStart": [2621, 2773], "useEnd": [2710, 2819], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue/tree/master/src/java/org/infoglue/cms/applications/structuretool/wizards/actions/CreateSiteNodeWizardFinishAction.java", "rawCode": "  public String doExecute() throws Exception {\n    try {\n      CreateSiteNodeWizardInfoBean createSiteNodeWizardInfoBean = getCreateSiteNodeWizardInfoBean();\n      if (createSiteNodeWizardInfoBean.getParentSiteNodeId() == null) {\n        return \"stateLocation\";\n      }\n\n      createSiteNodeWizardInfoBean\n          .getSiteNodeVO()\n          .setCreatorName(this.getInfoGluePrincipal().getName());\n      this.ceb = createSiteNodeWizardInfoBean.getSiteNodeVO().validate();\n\n      if (!this.ceb.isEmpty()) {\n        return \"inputSiteNode\";\n      }\n\n      Integer repositoryId = createSiteNodeWizardInfoBean.getRepositoryId();\n      SiteNodeVO newSiteNodeVO = null;\n\n      int childCount = 0;\n      if (createSiteNodeWizardInfoBean.getParentSiteNodeId() != null) {\n        SiteNodeVO siteNodeVO =\n            SiteNodeController.getController()\n                .getSiteNodeVOWithId(createSiteNodeWizardInfoBean.getParentSiteNodeId(), false);\n        childCount = siteNodeVO.getChildCount();\n      }\n\n      Database db = CastorDatabaseService.getDatabase();\n      ConstraintExceptionBuffer ceb = new ConstraintExceptionBuffer();\n\n      beginTransaction(db);\n\n      try {\n        createSiteNodeWizardInfoBean.getSiteNodeVO().setIsBranch(new Boolean(true));\n        SiteNode newSiteNode =\n            SiteNodeControllerProxy.getSiteNodeControllerProxy()\n                .acCreatePure(\n                    this.getInfoGluePrincipal(),\n                    createSiteNodeWizardInfoBean.getParentSiteNodeId(),\n                    createSiteNodeWizardInfoBean.getSiteNodeTypeDefinitionId(),\n                    repositoryId,\n                    createSiteNodeWizardInfoBean.getSiteNodeVO(),\n                    childCount,\n                    db);\n        newSiteNodeVO = newSiteNode.getValueObject();\n        SiteNodeController.getController()\n            .createSiteNodeMetaInfoContent(\n                db,\n                newSiteNodeVO,\n                repositoryId,\n                this.getInfoGluePrincipal(),\n                createSiteNodeWizardInfoBean.getPageTemplateContentId(),\n                new ArrayList());\n\n        commitTransaction(db);\n      } catch (Exception e) {\n        logger.error(\"An error occurred so we should not completes the transaction:\" + e, e);\n        rollbackTransaction(db);\n        throw new SystemException(e.getMessage());\n      }\n\n      String returnAddress = createSiteNodeWizardInfoBean.getReturnAddress();\n      returnAddress =\n          returnAddress.replaceAll(\n              \"#entityId\", createSiteNodeWizardInfoBean.getSiteNodeVO().getId().toString());\n      returnAddress =\n          returnAddress.replaceAll(\"#path\", createSiteNodeWizardInfoBean.getSiteNodeVO().getName());\n\n      this.invalidateCreateSiteNodeWizardInfoBean();\n\n      this.getResponse().sendRedirect(returnAddress);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n\n    return NONE;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8665, "initialization": ["String string = Run.getTruncatedDescription()"], "initializationStart": [238], "initializationEnd": [265], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 273, "guardExpressionEnd": 289, "guardBlockStart": 273, "guardBlockEnd": 352, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 307, "focalAPIEnd": 343, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jenkinsci/plot-plugin/tree/master/src/main/java/hudson/plugins/plot/Plot.java", "rawCode": "  /** Returns a trimmed description string for the build specified by the given build number. */\n  private String descriptionForBuild(int buildNum) {\n    Run r = project.getBuildByNumber(buildNum);\n    if (r != null) {\n      String tip = r.getTruncatedDescription();\n      if (tip != null) {\n        return tip.replaceAll(\"<p> *|<br> *\", \", \");\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8666, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 61, "focalAPIEnd": 91, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["XMLPrinter.opentagStringMap(resultStr,HashMap<String, String>)"], "useStart": [99], "useEnd": [138], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DTRules/DTRules/tree/master/dtrules-engine/src/main/java/com/dtrules/xmlparser/XMLTree.java", "rawCode": "    public void print(XMLPrinter xout) {\n      String name = this.name.replaceAll(\" \", \"_\");\n      xout.opentagStringMap(name, attributes);\n      if (body == null || body.length() == 0) {\n        for (Node tag : tags) {\n          tag.print(xout);\n        }\n      } else {\n        xout.printdata(body);\n      }\n      xout.closetag();\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8667, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 467, "focalAPIEnd": 499, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/hive/tree/master/ql/src/java/org/apache/hadoop/hive/ql/metadata/HiveUtils.java", "rawCode": "  public static String unparseIdentifier(String identifier, Configuration conf) {\n    // In the future, if we support arbitrary characters in\n    // identifiers, then we'll need to escape any backticks\n    // in identifier by doubling them up.\n\n    // the time has come\n    String qIdSupport =\n        conf == null ? null : HiveConf.getVar(conf, HiveConf.ConfVars.HIVE_QUOTEDID_SUPPORT);\n    if (qIdSupport != null && !\"none\".equals(qIdSupport)) {\n      identifier = identifier.replaceAll(\"`\", \"``\");\n    }\n    return \"`\" + identifier + \"`\";\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8668, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 243, "focalAPIEnd": 410, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)"], "useStart": [423], "useEnd": [579], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/electronicfieldguide/efg2/tree/master/source/project/efg/util/utils/EFGUtils.java", "rawCode": "  /**\n   * @return a string form of a uri where uri separators are replaced with EFg separators\n   * @param string - The uri form of a string to parse\n   */\n  public static synchronized String parseEFGSEP(String string) {\n    string =\n        string.replaceAll(\n            project.efg.util.interfaces.RegularExpresionConstants.FORWARD_SLASH,\n            project.efg.util.interfaces.EFGImportConstants.EFG_SEP);\n    return string.replaceAll(\n        project.efg.util.interfaces.RegularExpresionConstants.COLONSEP,\n        project.efg.util.interfaces.EFGImportConstants.EFG_COLON);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8669, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.trim()"], "configurationStart": [356], "configurationEnd": [375], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 439, "focalAPIEnd": 474, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseVersion(resultStr)"], "useStart": [421], "useEnd": [475], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zkoss/zats/tree/master/zats-mimic/src/main/java/org/zkoss/zats/mimic/impl/Util.java", "rawCode": "  /**\n   * check the given version range is match current ZK version or not. it accepts wildcard \"*\". e.g\n   * * or 5.0.* or 6.*.*\n   */\n  public static boolean checkVersion(String startVersion, String endVersion) {\n    // check version\n    // If current isn't between start and end version, ignore this register.\n    BigInteger start =\n        \"*\".equals(startVersion.trim())\n            ? BigInteger.ZERO\n            : Util.parseVersion(startVersion.replaceAll(\"[*]\", \"0\"));\n    BigInteger end =\n        \"*\".equals(endVersion.trim())\n            ? BigInteger.valueOf(Long.MAX_VALUE)\n            : Util.parseVersion(endVersion.replaceAll(\"[*]\", String.valueOf(Byte.MAX_VALUE)));\n    if (start == null || end == null) throw new IllegalArgumentException(\"wrong version format\");\n    if (zkVersion.compareTo(start) < 0 || zkVersion.compareTo(end) > 0) return false;\n    return true;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8670, "initialization": ["String string = Properties.getProperty(String)"], "initializationStart": [95], "initializationEnd": [135], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 155, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [155, 155], "useEnd": [225, 275], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.10/kernel-util/src/main/java/org/sakaiproject/util/conversion/SchemaConversionDriver.java", "rawCode": "  public String getAddNewColumn(String name, String type, String qualifier) {\n    String sql = p.getProperty(base + \".new.columns.add\");\n    sql =\n        sql.replaceAll(\"<name>\", name)\n            .replaceAll(\"<type>\", type)\n            .replaceAll(\"<qualifier>\", qualifier);\n    return sql;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8671, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 64, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)"], "useStart": [118], "useEnd": [178], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RainerW/XMLFit/tree/master/fit-action-debugger/src/main/java/fit/Parse.java", "rawCode": "  private static String normalizeLineBreaks(String s) {\n    s = s.replaceAll(\"<\\\\s*br\\\\s*/?\\\\s*>\", \"<br />\");\n    s = s.replaceAll(\"<\\\\s*/\\\\s*p\\\\s*>\\\\s*<\\\\s*p( .*?)?>\", \"<br />\");\n    return s;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8672, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string.indexOf(\"url(../\",)>=0 && !(string.indexOf(\"url(/\",)>0) && string.indexOf(\"url(../\",)>=0", "guardType": "IF {", "guardExpressionStart": 253, "guardExpressionEnd": 286, "guardBlockStart": 253, "guardBlockEnd": 1125, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 672, "focalAPIEnd": 715, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [963, 1051], "useEnd": [1019, 1118], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nelsonsilva/vaadin/tree/master/build/buildhelpers/com/vaadin/buildhelpers/CompileDefaultTheme.java", "rawCode": "  private static String updateUrls(\n      String folder, String themeName, boolean inheritedFile, String strLine) {\n    // Define image url prefix\n    String urlPrefix = \"\";\n    if (inheritedFile) {\n      urlPrefix = \"../\" + themeName + \"/\";\n    }\n\n    if (strLine.indexOf(\"url(/\") > 0) {\n      // Do nothing for urls beginning with /\n    } else if (strLine.indexOf(\"url(../\") >= 0) {\n      // eliminate a path segment in the folder name for every\n      // \"../\"\n      String[] folderSegments = folder.split(\"/\");\n      int segmentCount = folderSegments.length;\n      while (segmentCount > 0 && strLine.indexOf(\"url(../\") >= 0) {\n        segmentCount--;\n        strLine = strLine.replaceAll(\"url\\\\(../\", (\"url\\\\(\"));\n      }\n      // add remaining path segments to urlPrefix\n      StringBuilder sb = new StringBuilder(urlPrefix);\n      for (int i = 0; i < segmentCount; i++) {\n        sb.append(folderSegments[i]);\n        sb.append(\"/\");\n      }\n      strLine = strLine.replaceAll(\"url\\\\(\", (\"url\\\\(\" + sb.toString()));\n\n    } else {\n      strLine = strLine.replaceAll(\"url\\\\(\", (\"url\\\\(\" + urlPrefix + folder + \"/\"));\n    }\n    return strLine;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8673, "initialization": ["String replacement = valueOf(*)", "String regex = valueOf(*)"], "initializationStart": [1080, 1413], "initializationEnd": [1109, 1442], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1496, "focalAPIEnd": 1570, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new StringTokenizer(resultStr,String)", "new StringTokenizer(resultStr,String)"], "useStart": [1720, 2223], "useEnd": [1766, 2269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pescuma/jfg/tree/master/calendarcombo-src/org/eclipse/nebula/widgets/calendarcombo/DateHelper.java", "rawCode": "  /**\n   * This method assumes the dateFormat has a separator char in it, and that we can use that to\n   * determine what the user entered by using that separator to split up the user entered date, and\n   * then do some logic on it. This is by no means a foolproof method and should not be relied upon\n   * returning 100% correct dates all the time.\n   *\n   * @param str String to parse\n   * @param dateFormat DateFormat to use\n   * @param separators Separator chars that can be encountered\n   * @param locale Locale\n   * @return Calendar\n   * @throws CalendarDateParseException If date could not be parsed\n   * @throws Exception If any step of the parsing failed\n   */\n  public static Calendar slashParse(\n      final String str, final String dateFormat, final char[] separators, final Locale locale)\n      throws CalendarDateParseException, Exception {\n    int start = -1;\n    String splitter = null;\n    String dateFormatToUse = dateFormat;\n    for (int i = 0; i < separators.length; i++) {\n      start = str.indexOf(separators[i]);\n      if (start != -1) {\n        splitter = String.valueOf(separators[i]);\n        break;\n      }\n    }\n    if (start == -1)\n      throw new CalendarDateParseException(\n          \"Failed to find splitter char\", CalendarDateParseException.TYPE_NO_SLPITTER_CHAR);\n\n    // replace dateFormat until we have same splitter\n    for (int i = 0; i < separators.length; i++) {\n      if (String.valueOf(separators[i]).equals(splitter)) continue;\n\n      dateFormatToUse = dateFormatToUse.replaceAll(\"\\\\\" + String.valueOf(separators[i]), splitter);\n    }\n\n    Calendar toReturn = Calendar.getInstance(locale);\n    StringTokenizer st = new StringTokenizer(str, splitter);\n    StringTokenizer st2 = new StringTokenizer(dateFormatToUse, splitter);\n\n    if (st.countTokens() != st2.countTokens())\n      throw new CalendarDateParseException(\n          \"Date format does not match date string in terms of splitter character numbers\",\n          CalendarDateParseException.TYPE_INSUFFICIENT_SPLITTERS);\n\n    // variables we'll be extracting\n    int monthToSet = -1;\n    int dayToSet = -1;\n    int yearToSet = -1;\n\n    // reset, skipping month this time\n    st = new StringTokenizer(str, splitter);\n    st2 = new StringTokenizer(dateFormatToUse, splitter);\n\n    while (st.hasMoreTokens()) {\n      String dateValue = st.nextToken();\n      String dateType = st2.nextToken();\n\n      dateValue = dateValue.replaceAll(\" \", \"\");\n      dateType = dateType.replaceAll(\" \", \"\");\n\n      int calType = getCalendarTypeForString(dateType);\n      // we already did month\n      if (calType == Calendar.MONTH) {\n        monthToSet = Integer.parseInt(dateValue);\n        continue;\n      }\n      if (calType == Calendar.YEAR) {\n        yearToSet = Integer.parseInt(dateValue);\n        continue;\n      }\n      if (calType == Calendar.DATE) {\n        dayToSet = Integer.parseInt(dateValue);\n        continue;\n      }\n\n      toReturn.set(calType, Integer.parseInt(dateValue));\n    }\n\n    // set all date parameters at the same time, or else we'll get month-skipping due to setting a\n    // value later (such as a date that is too high\n    // for the current month). (-1 for month as Calendar class is month-zero-based).\n    if (monthToSet != -1 && dayToSet != -1 && yearToSet != -1) {\n      toReturn.set(yearToSet, monthToSet - 1, dayToSet);\n    } else {\n      // set what we know\n      if (yearToSet != -1) {\n        toReturn.set(Calendar.YEAR, yearToSet);\n      }\n      if (monthToSet != -1) {\n        toReturn.set(Calendar.MONTH, monthToSet - 1);\n      }\n      if (dayToSet != -1) {\n        toReturn.set(Calendar.DATE, dayToSet);\n      }\n    }\n\n    if (toReturn.get(Calendar.YEAR) < 100)\n      toReturn.set(Calendar.YEAR, toReturn.get(Calendar.YEAR) + 1900);\n\n    toReturn.set(Calendar.HOUR_OF_DAY, 0);\n    toReturn.set(Calendar.MINUTE, 0);\n    toReturn.set(Calendar.SECOND, 0);\n    toReturn.set(Calendar.MILLISECOND, 0);\n\n    return toReturn;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8674, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "isNotEmpty(string,)", "guardType": "IF {", "guardExpressionStart": 52, "guardExpressionEnd": 72, "guardBlockStart": 52, "guardBlockEnd": 211, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 88, "focalAPIEnd": 120, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [88, 88], "useEnd": [148, 173], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ulewo/mycode/tree/master/quan/src/com/lhl/util/Tools.java", "rawCode": "  public static String clearHtml(String str) {\n\n    if (isNotEmpty(str)) {\n      return str.replaceAll(\"<[.[^<]]*>\", \"\").replaceAll(\"[\\\\n|\\\\r]\", \"\").replaceAll(\"&nbsp;\", \"\");\n    } else {\n      return str;\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8675, "initialization": ["String string = convertUTCDateToLocal(String,*)"], "initializationStart": [568], "initializationEnd": [649], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RecurrencePatternException(String)"], "tryExpressionStart": 437, "tryExpressionEnd": 441, "tryBlockStart": 437, "tryBlockEnd": 793, "catchExpressionStart": 2508, "catchExpressionEnd": 2528, "catchBlockStart": 2508, "catchBlockEnd": 2631, "exceptionHandlingCallStart": [2542], "exceptionHandlingCallEnd": [2624], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 832, "focalAPIEnd": 866, "followUpCheck": "instance != getBackwardWeekDayInstance(resultStr)", "checkType": "IF", "followUpCheckExpressionStart": 1240, "followUpCheckExpressionEnd": 1309, "followUpCheckBlockStart": 1240, "followUpCheckBlockEnd": 1551, "use": ["getMonth(resultStr)", "getWeekDayInstance(resultStr)", "getWeekDay(resultStr)", "getMonth(resultStr)", "getMonthDay(resultStr)"], "useStart": [1028, 1353, 1636, 1876, 2187], "useEnd": [1062, 1397, 1672, 1910, 2224], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8560/pim/src/main/java-se/com/funambol/common/pim/model/calendar/RecurrencePattern.java", "rawCode": "  /**\n   * Fixes missing data on the basis of the startDatePattern field, according to the inference rules\n   * prescribed by the specifications (missing data must be inferred by the start date).\n   *\n   * @return true if a fix was needed\n   * @throws RecurrencePatternException if no automatic fix was possible\n   */\n  public boolean fix() throws RecurrencePatternException {\n\n    boolean fixed = false;\n    String localStartDate;\n\n    try {\n      if (timeZone == null) {\n        localStartDate = startDatePattern;\n      } else {\n        localStartDate =\n            TimeUtils.convertUTCDateToLocal(startDatePattern, TimeZone.getTimeZone(timeZone));\n      }\n    } catch (Exception e) {\n      throw new RecurrencePatternException(\"Conversion of start date pattern to local time failed\");\n    }\n    String yyyyMMddStartDatePattern = localStartDate.replaceAll(\"-\", \"\");\n\n    try {\n\n      switch (frequency) {\n        case TYPE_DAILY:\n          // Does nothing\n          break;\n\n        case TYPE_YEAR_NTH:\n          short month = getMonth(yyyyMMddStartDatePattern);\n          if (month != monthOfYear) {\n            month = monthOfYear;\n            fixed = true;\n          }\n          // Falls through\n\n        case TYPE_MONTH_NTH:\n          if (instance != getBackwardWeekDayInstance(yyyyMMddStartDatePattern)) {\n            short startWeekDayInstance = getWeekDayInstance(yyyyMMddStartDatePattern);\n            if (startWeekDayInstance != instance) {\n              instance = startWeekDayInstance;\n              fixed = true;\n            }\n          }\n          // Falls through\n\n        case TYPE_WEEKLY:\n          byte startWeekDay = getWeekDay(yyyyMMddStartDatePattern);\n          if (!isDayInMask(startWeekDay, dayOfWeekMask)) {\n            dayOfWeekMask += startWeekDay;\n            fixed = true;\n          }\n          break;\n\n        case TYPE_YEARLY:\n          month = getMonth(yyyyMMddStartDatePattern);\n          if (month != monthOfYear) {\n            monthOfYear = month;\n            fixed = true;\n          }\n          // Falls through\n\n        case TYPE_MONTHLY:\n          if (dayOfMonth != getBackwardMonthDay(yyyyMMddStartDatePattern)) {\n            short startMonthDay = getMonthDay(yyyyMMddStartDatePattern);\n            if (startMonthDay != dayOfMonth) {\n              dayOfMonth = startMonthDay;\n              fixed = true;\n            }\n          }\n          break;\n\n        default:\n          throw new RecurrencePatternException(\"Type \" + frequency + \"not implemented\");\n      }\n\n    } catch (Exception e) {\n      throw new RecurrencePatternException(\"RecurrencePattern: Format \" + \"error found. \" + e);\n    }\n\n    return fixed;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8676, "initialization": ["String string = createCodeFromNode(Node,String,*)", "String string = format(String,String,int)", "String string = String.trim()", "String replacement = getLineDelimiter(String)"], "initializationStart": [163, 272, 354, 400], "initializationEnd": [237, 315, 365, 437], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.trim()"], "configurationStart": [354], "configurationEnd": [365], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 450, "focalAPIEnd": 486, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AmanziTel/awe-rdt/tree/master/org.rubypeople.rdt.refactoring/src/org/rubypeople/rdt/refactoring/editprovider/EditProvider.java", "rawCode": "  protected String getFormatedNode(String document) {\n    int offset = getOffset(document);\n    Node insertNode = getEditNode(offset, document);\n    String text = ReWriteVisitor.createCodeFromNode(insertNode, document, getFormatHelper());\n    if (doFormat) {\n      text = HsrFormatter.format(document, text, offset);\n    }\n    if (doTrim) {\n      text = text.trim();\n    }\n    String lineDelimiter = FileHelper.getLineDelimiter(document);\n    return text.replaceAll(\"\\n\", lineDelimiter);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8677, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 273, "focalAPIEnd": 303, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["block(String,RollbackPrintWriter,resultStr)", "handleNote(RollbackPrintWriter,boolean,*,string,String)", "handleNote(RollbackPrintWriter,boolean,*,string,String)", "handleNote(RollbackPrintWriter,boolean,*,string,String)", "handleNote(RollbackPrintWriter,boolean,*,string,String)", "handleNote(RollbackPrintWriter,boolean,*,string,String)"], "useStart": [358, 405, 467, 526, 585, 647], "useEnd": [388, 459, 518, 577, 639, 701], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/deegree/deegree3/tree/master/deegree-core/deegree-core-annotations/src/main/java/org/deegree/commons/processors/LoggingAnnotationProcessor.java", "rawCode": "    private void handlePackageNotes(\n        RollbackPrintWriter out,\n        String qname,\n        boolean error,\n        boolean warn,\n        boolean info,\n        boolean debug,\n        boolean trace) {\n      String title = pnotes.title();\n\n      boolean isSubsystem = qname.replaceAll(\"[^\\\\.]\", \"\").length() == 2;\n\n      if (!title.isEmpty()) {\n        block(title, out, isSubsystem);\n      }\n\n      handleNote(out, error, pnotes.error(), qname, \"ERROR\");\n      handleNote(out, warn, pnotes.warn(), qname, \"WARN\");\n      handleNote(out, info, pnotes.info(), qname, \"INFO\");\n      handleNote(out, debug, pnotes.debug(), qname, \"DEBUG\");\n      handleNote(out, trace, pnotes.trace(), qname, \"TRACE\");\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8678, "initialization": ["String string = Solution.getNote()"], "initializationStart": [2687], "initializationEnd": [2705], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 158, "tryExpressionEnd": 162, "tryBlockStart": 158, "tryBlockEnd": 9143, "catchExpressionStart": 9089, "catchExpressionEnd": 9109, "catchBlockStart": 9089, "catchBlockEnd": 9143, "exceptionHandlingCallStart": [9117], "exceptionHandlingCallEnd": [9136], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 2717, "guardExpressionEnd": 2734, "guardBlockStart": 2717, "guardBlockEnd": 2772, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 2742, "focalAPIEnd": 2771, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jaliste/unitime/tree/master/JavaSource/org/unitime/timetable/action/ListSolutionsAction.java", "rawCode": "  private void getSolutions(\n      HttpServletRequest request, boolean listAll, boolean committedOnly, ListSolutionsForm myForm)\n      throws Exception {\n    try {\n      WebTable.setOrder(request.getSession(), \"listSolutions.ord\", request.getParameter(\"ord\"), 1);\n\n      WebTable webTable =\n          new WebTable(\n              16,\n              (committedOnly ? \"Committed Timetables\" : \"Saved Timetables\"),\n              \"listSolutions.do?ord=%%\",\n              new String[] {\n                \"Created\",\n                \"Settings\",\n                \"Valid\",\n                \"Commited\",\n                \"Owner\",\n                \"Assign\",\n                \"Total\",\n                \"Time\",\n                \"Stud\",\n                \"Room\",\n                \"Distr\",\n                \"Instr\",\n                \"TooBig\",\n                \"Useless\",\n                \"Pert\",\n                \"Note\"\n              },\n              new String[] {\n                \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\",\n                \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\"\n              },\n              null);\n      webTable.setRowStyle(\"white-space:nowrap\");\n\n      SolutionDAO dao = new SolutionDAO();\n      org.hibernate.Session hibSession = dao.getSession();\n\n      Collection solutions = null;\n      if (listAll)\n        solutions =\n            Solution.findBySessionId(\n                Session.getCurrentAcadSession(Web.getUser(request.getSession())).getUniqueId());\n      else\n        solutions =\n            Solution.findBySessionIdAndManagerId(\n                Session.getCurrentAcadSession(Web.getUser(request.getSession())).getUniqueId(),\n                Long.valueOf(\n                    (String)\n                        Web.getUser(request.getSession())\n                            .getAttribute(Constants.TMTBL_MGR_ID_ATTR_NAME)));\n      int nrLines = 0;\n\n      if (solutions == null || solutions.isEmpty()) {\n        webTable.addLine(\n            null,\n            new String[] {\n              (committedOnly\n                  ? \"<i>No solution committed so far.</i>\"\n                  : \"<i>No solution saved so far.</i>\")\n            },\n            null,\n            null);\n      } else {\n        for (Iterator i = solutions.iterator(); i.hasNext(); ) {\n          Solution solution = (Solution) i.next();\n          if (committedOnly && !solution.isCommited().booleanValue()) continue;\n          String ownerName = solution.getOwner().getAbbv();\n          String onClick =\n              \"onClick=\\\"document.location='listSolutions.do?op=Select&id=\"\n                  + solution.getUniqueId()\n                  + \"';\\\"\";\n          String note = solution.getNote();\n          if (note != null) note = note.replaceAll(\"\\n\", \"<br>\");\n          PropertiesInfo globalInfo = (PropertiesInfo) solution.getInfo(\"GlobalInfo\");\n          String assigned =\n              (globalInfo == null ? \"?\" : globalInfo.getProperty(\"Assigned variables\", \"N/A\"));\n          String totVal =\n              (globalInfo == null ? \"?\" : globalInfo.getProperty(\"Overall solution value\", \"N/A\"));\n          String timePr =\n              (globalInfo == null ? \"?\" : globalInfo.getProperty(\"Time preferences\", \"N/A\"));\n          String studConf =\n              (globalInfo == null ? \"?\" : globalInfo.getProperty(\"Student conflicts\", \"N/A\"));\n          String roomPr =\n              (globalInfo == null ? \"?\" : globalInfo.getProperty(\"Room preferences\", \"N/A\"));\n          String distPr =\n              (globalInfo == null\n                  ? \"?\"\n                  : globalInfo.getProperty(\"Distribution preferences\", \"N/A\"));\n          String instrPr =\n              (globalInfo == null\n                  ? \"?\"\n                  : globalInfo.getProperty(\"Back-to-back instructor preferences\", \"N/A\"));\n          String tooBig =\n              (globalInfo == null ? \"?\" : globalInfo.getProperty(\"Too big rooms\", \"N/A\"));\n          String useless =\n              (globalInfo == null ? \"?\" : globalInfo.getProperty(\"Useless half-hours\", \"N/A\"));\n          String pertPen =\n              (globalInfo == null\n                  ? \"?\"\n                  : globalInfo.getProperty(\"Perturbations: Total penalty\", \"N/A\"));\n          assigned = assigned.replaceAll(\" of \", \"/\");\n          if (!\"N/A\".equals(timePr) && timePr.indexOf('/') >= 0)\n            timePr = timePr.substring(0, timePr.indexOf('/')).trim();\n          if (!\"N/A\".equals(roomPr) && roomPr.indexOf('/') >= 0)\n            roomPr = roomPr.substring(0, roomPr.indexOf('/')).trim();\n          if (!\"N/A\".equals(instrPr) && instrPr.indexOf('/') >= 0)\n            instrPr = instrPr.substring(0, instrPr.indexOf('/')).trim();\n          if (!\"N/A\".equals(assigned) && assigned.indexOf(' ') >= 0)\n            assigned = assigned.substring(0, assigned.indexOf(' ')).trim();\n          if (!\"N/A\".equals(timePr) && timePr.indexOf(' ') >= 0)\n            timePr = timePr.substring(0, timePr.indexOf(' ')).trim();\n          if (!\"N/A\".equals(roomPr) && roomPr.indexOf(' ') >= 0)\n            roomPr = roomPr.substring(0, roomPr.indexOf(' ')).trim();\n          if (!\"N/A\".equals(instrPr) && instrPr.indexOf(' ') >= 0)\n            instrPr = instrPr.substring(0, instrPr.indexOf(' ')).trim();\n          if (!\"N/A\".equals(distPr) && distPr.indexOf(' ') >= 0)\n            distPr = distPr.substring(0, distPr.indexOf(' ')).trim();\n          if (!\"N/A\".equals(tooBig) && tooBig.indexOf(' ') >= 0)\n            tooBig = tooBig.substring(0, tooBig.indexOf(' ')).trim();\n          if (!\"N/A\".equals(useless) && useless.indexOf(' ') >= 0)\n            useless = useless.substring(0, useless.indexOf(' ')).trim();\n          studConf =\n              studConf\n                  .replaceAll(\" \\\\[\", \"(\")\n                  .replaceAll(\"\\\\]\", \")\")\n                  .replaceAll(\", \", \",\")\n                  .replaceAll(\"hard:\", \"h\")\n                  .replaceAll(\"distance:\", \"d\")\n                  .replaceAll(\"commited:\", \"c\")\n                  .replaceAll(\"committed:\", \"c\");\n          String settings = null;\n          String type = null;\n          for (Iterator j = solution.getParameters().iterator(); j.hasNext(); ) {\n            SolverParameter p = (SolverParameter) j.next();\n            if (\"General.SettingsId\".equals(p.getDefinition().getName())) {\n              SolverPredefinedSetting set =\n                  (new SolverPredefinedSettingDAO()).get(Long.valueOf(p.getValue()), hibSession);\n              if (set != null) settings = set.getDescription();\n            }\n            if (\"Basic.Mode\".equals(p.getDefinition().getName())) {\n              type = p.getValue();\n            }\n          }\n          type = (settings == null ? type == null ? \"?\" : type : settings);\n\n          String bgColor = null;\n          if (myForm.getSolutionBean(solution.getUniqueId()) != null) bgColor = \"rgb(168,187,225)\";\n\n          webTable\n              .addLine(\n                  onClick,\n                  new String[] {\n                    sDF.format(new Date(solution.getCreated().getTime())),\n                    type,\n                    (solution.isValid().booleanValue()\n                        ? \"<IMG border='0' align='absmiddle' src='images/tick.gif'>\"\n                        : \"\"),\n                    (solution.isCommited().booleanValue()\n                        ? sDF.format(new Date(solution.getCommitDate().getTime()))\n                        : \"\"),\n                    ownerName,\n                    assigned,\n                    totVal,\n                    timePr,\n                    studConf,\n                    roomPr,\n                    distPr,\n                    instrPr,\n                    tooBig,\n                    useless,\n                    pertPen,\n                    note\n                  },\n                  new Comparable[] {\n                    solution.getCreated(),\n                    type,\n                    (solution.isValid().booleanValue() ? new Integer(1) : new Integer(0)),\n                    (solution.isCommited().booleanValue()\n                        ? new Long(solution.getCommitDate().getTime())\n                        : new Long(0)),\n                    ownerName,\n                    assigned,\n                    totVal,\n                    timePr,\n                    studConf,\n                    roomPr,\n                    distPr,\n                    instrPr,\n                    tooBig,\n                    useless,\n                    pertPen,\n                    (solution.getNote() == null ? \"\" : solution.getNote())\n                  })\n              .setBgColor(bgColor);\n          nrLines++;\n        }\n        if (nrLines == 0)\n          webTable.addLine(\n              null,\n              new String[] {\n                \"<i>No solution saved by \"\n                    + Web.getUser(request.getSession()).getName()\n                    + \" so far.</i>\"\n              },\n              null,\n              null);\n      }\n      request.setAttribute(\n          \"ListSolutions.table\",\n          webTable.printTable(WebTable.getOrder(request.getSession(), \"listSolutions.ord\")));\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8679, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 343, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["equalTo(resultStr)"], "useStart": [335], "useEnd": [385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/clascelles/CEG_4912_cerberus_system/tree/master/cerberus-server/src/test/java/com/cerberus/server/json/encoder/JsonMessageEncodingTest.java", "rawCode": "  @Test\n  public void testEncodingJsonStatusMessage() throws Exception {\n    StatusMessage message = new StatusMessage(socketId, timestamp, SocketStatus.NORMAL);\n\n    ObjectWriter writer = JsonDataBinderFactory.getWriter(message.getClass());\n    String jsonMessage = writer.writeValueAsString(message);\n\n    assertThat(jsonMessage, is(equalTo(STATUS_JSON_MESSAGE.replaceAll(\"\\\\s\", \"\"))));\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8680, "initialization": ["String string = Node.getNodeName()"], "initializationStart": [79], "initializationEnd": [101], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 204, "focalAPIEnd": 234, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gbhl/bhl-europe/tree/master/pre-ingest/schema-mapping-tool/applet/src/at/nhmwien/schema_mapping_tool/fileProcessors/XMLProcessor.java", "rawCode": "  private void addNode(Node currNode, String idPrefix) {\n    String nodeName = currNode.getNodeName();\n    // String nodePrefix = currNode.getPrefix();\n    // Remove any namespace prefixes\n    nodeName = nodeName.replaceAll(\".*:\", \"\");\n\n    // Update prefix\n    if (!idPrefix.isEmpty()) idPrefix += DataRecord.getIDSeperator();\n    // idPrefix += currNode.getNodeName();\n    idPrefix += nodeName;\n\n    // Now create new record with this entry\n    DataRecord newRec = new DataRecord();\n    newRec.setIDRecord(idPrefix);\n    newRec.setRecordContent(currNode.getTextContent());\n\n    // Add record to stack\n    this.recordsStack.add(newRec);\n\n    // Add all childs to the stack\n    NodeList childNodes = currNode.getChildNodes();\n    for (int i = 0; i < childNodes.getLength(); i++) {\n      // if( childNodes.item(i).getNodeType() == Node.TEXT_NODE )\n      // newRec.setRecordContent(childNodes.item(i).getNodeValue());\n\n      if (childNodes.item(i).getNodeType() != Node.ELEMENT_NODE) continue;\n\n      this.addNode(childNodes.item(i), idPrefix);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8681, "initialization": ["String string = JavaScriptToken.getValue()", "String string = escapeString(String,char)"], "initializationStart": [1564, 2062], "initializationEnd": [1580, 2089], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string.indexOf(\"</script\",)>=0", "guardType": "IF {", "guardExpressionStart": 2493, "guardExpressionEnd": 2525, "guardBlockStart": 2493, "guardBlockEnd": 2597, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 2543, "focalAPIEnd": 2586, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new JavaScriptToken(*,resultStr)"], "useStart": [2621], "useEnd": [2658], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BrentDouglas/richfaces-3/tree/master/cdk/maven-javascript-plugin/src/main/java/com/yahoo/platform/yui/compressor/JavaScriptCompressor.java", "rawCode": "  private static ArrayList processStringLiterals(ArrayList tokens, boolean merge) {\n\n    String tv;\n    int i, length;\n    ArrayList result = new ArrayList();\n    JavaScriptToken token, prevToken, nextToken;\n\n    // Concatenate string literals that are being appended wherever\n    // it is safe to do so. Note that we take care of the case:\n    // \"a\" + \"b\".toUpperCase()\n\n    for (i = 0, length = tokens.size(); i < length; i++) {\n      token = (JavaScriptToken) tokens.get(i);\n      switch (token.getType()) {\n        case Token.ADD:\n          if (merge) {\n            if (i > 0 && i < length) {\n              prevToken = (JavaScriptToken) result.get(result.size() - 1);\n              nextToken = (JavaScriptToken) tokens.get(i + 1);\n              if (prevToken.getType() == Token.STRING\n                  && nextToken.getType() == Token.STRING\n                  && (i == length - 1\n                      || ((JavaScriptToken) tokens.get(i + 2)).getType() != Token.DOT)) {\n                result.set(\n                    result.size() - 1,\n                    new JavaScriptToken(Token.STRING, prevToken.getValue() + nextToken.getValue()));\n                i++; // not a good practice, but oh well...\n                break;\n              }\n            }\n          }\n\n          /* FALLSTHROUGH */\n\n        default:\n          result.add(token);\n          break;\n      }\n    }\n\n    // Second pass...\n\n    for (i = 0, length = result.size(); i < length; i++) {\n      token = (JavaScriptToken) result.get(i);\n      if (token.getType() == Token.STRING) {\n        tv = token.getValue();\n\n        // Finally, add the quoting characters and escape the string. We use\n        // the quoting character that minimizes the amount of escaping to save\n        // a few additional bytes.\n\n        char quotechar;\n        int singleQuoteCount = countChar(tv, '\\'');\n        int doubleQuoteCount = countChar(tv, '\"');\n        if (doubleQuoteCount <= singleQuoteCount) {\n          quotechar = '\"';\n        } else {\n          quotechar = '\\'';\n        }\n\n        tv = quotechar + escapeString(tv, quotechar) + quotechar;\n\n        // String concatenation transforms the old script scheme:\n        // '<scr'+'ipt ...><'+'/script>'\n        // into the following:\n        // '<script ...></script>'\n        // which breaks if this code is embedded inside an HTML document.\n        // Since this is not the right way to do this, let's fix the code by\n        // transforming all \"</script\" into \"<\\/script\"\n\n        if (tv.indexOf(\"</script\") >= 0) {\n          tv = tv.replaceAll(\"<\\\\/script\", \"<\\\\\\\\/script\");\n        }\n\n        result.set(i, new JavaScriptToken(Token.STRING, tv));\n      }\n    }\n\n    return result;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8682, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 189, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["compile(resultStr)"], "useStart": [413], "useEnd": [435], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/olanto/MYCAT/tree/master/prog/mySelfQDAlgo/src/org/olanto/mysqd/util/WildCharExpander.java", "rawCode": "  public boolean Contains(String regex) {\n    // System.out.println(\"---------- target size :\" + target.length());\n    // System.out.println(\"---------- look 0 for :\" + regex);\n    regex = regex.replaceAll(\"\\\\*\", \".*\");\n    // System.out.println(\"---------- look 1 for :\" + regex);\n\n    regex = ITEM_START + regex + ITEM_STOP;\n    //// System.out.println(\"---------- look 2 for :\" + regex);\n    Pattern pattern = Pattern.compile(regex);\n    // Get a Matcher based on the target string.\n    Matcher matcher = pattern.matcher(target);\n    return matcher.find();\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8683, "initialization": ["String string = CoordinateReferenceSystem.toWKT()"], "initializationStart": [540], "initializationEnd": [551], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 561, "focalAPIEnd": 583, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "FileWriter.write(resultStr)"], "useStart": [561, 742], "useEnd": [603, 754], "hasFinally": 1, "cleanUpCall": ["FileWriter.close()"], "finallyExpressionStart": 762, "finallyExpressionEnd": 770, "finallyBlockStart": 762, "finallyBlockEnd": 796, "cleanUpCallStart": [778], "cleanUpCallEnd": [789], "url": "https://github.com/boundlessgeo/geotools-2.7.x/tree/master/modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/ShapefileDataStore.java", "rawCode": "  /**\n   * This method is used to force the creation of a .prj file.\n   *\n   * <p>The internally cached FeatureType will be removed, so the next call to getSchema() will read\n   * in the created file. This method is not thread safe and will have dire consequences for any\n   * other thread making use of the shapefile.\n   *\n   * <p>\n   *\n   * @param crs\n   */\n  public void forceSchemaCRS(CoordinateReferenceSystem crs) throws IOException {\n    if (crs == null) throw new NullPointerException(\"CRS required for .prj file\");\n\n    String s = crs.toWKT();\n    s = s.replaceAll(\"\\n\", \"\").replaceAll(\" \", \"\");\n    StorageFile storageFile = shpFiles.getStorageFile(PRJ);\n    FileWriter out = new FileWriter(storageFile.getFile());\n\n    try {\n      out.write(s);\n    } finally {\n      out.close();\n    }\n    storageFile.replaceOriginal();\n    schema = null;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8684, "initialization": ["String string = retrieve(String,*)"], "initializationStart": [252], "initializationEnd": [314], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 399, "focalAPIEnd": 431, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SITools2/core-v2/tree/master/workspace/fr.cnes.sitools.core/test/src/fr/cnes/sitools/DataSetFormTestCase.java", "rawCode": "  /** Test DataSet Metadatas. TODO SPRINT 6 */\n  @Test\n  public void testDataSetGridQueryingFilterSingleValueRadio() {\n    // un test avec un filtre string\n    String params = \"p[0]=RADIO|firstname|jc&start=0&limit=300&media=json\";\n    String result = retrieve(params, datasetUsers.getSitoolsAttachementForUsers());\n    String expected = \"{\\\"success\\\": true,\\r\\n\" + \"\\\"total\\\":2,\\r\\n\";\n    result = result.replaceAll(\"[\\r\\n]+\", \"\");\n    expected = expected.replaceAll(\"[\\r\\n]+\", \"\");\n    if (!result.startsWith(expected)) {\n      Assert.fail(result + \"<>\" + expected);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8685, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 180, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)"], "useStart": [180, 180], "useEnd": [233, 257], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/ttools/src/main/uk/ac/starlink/ttools/server/TaskServlet.java", "rawCode": "  /**\n   * Escapes a plain text string for use in HTML output.\n   *\n   * @param text input\n   * @return escaped text\n   */\n  private static String escape(String text) {\n    return text.replaceAll(\"&\", \"&amp;\").replaceAll(\"<\", \"&lt;\").replaceAll(\">\", \"&gt;\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8686, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1581, "focalAPIEnd": 1621, "followUpCheck": "\"\".equals(resultStr)", "checkType": "IF", "followUpCheckExpressionStart": 1635, "followUpCheckExpressionEnd": 1656, "followUpCheckBlockStart": 1635, "followUpCheckBlockEnd": 1700, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/escidoc/escidoc-core/tree/master/common/src/main/java/de/escidoc/core/common/servlet/invocation/Resource.java", "rawCode": "  /**\n   * Get the method parameter values from the request uri.\n   *\n   * @param uri The uri\n   * @param query The request Query.\n   * @param parameters\n   * @param body The http request body\n   * @param uriRegexp The uri regexp defining the uri format.\n   * @param invoke The invocation definition.\n   * @return An array containing the parameter values.\n   */\n  private Object[] getMethodParameters(\n      final String uri,\n      final String query,\n      final Map<String, String[]> parameters,\n      final Object body,\n      final String uriRegexp,\n      final Node invoke) {\n    Object[] result = null;\n    final Collection<String> paramNames = getMethodParameterNames(invoke);\n    if (!paramNames.isEmpty()) {\n      result = new Object[paramNames.size()];\n      for (int i = 0; i < paramNames.size(); ++i) {\n        Object value;\n        final String param = (String) ((List) paramNames).get(i);\n        if (param.equals(VAR_PREFIX + VAR_BODY + VAR_POSTFIX)) {\n          value = body;\n        } else if (param.equals(VAR_PREFIX + VAR_QUERY_STRING + VAR_POSTFIX)) {\n          value = query;\n        } else if (param.equals(VAR_PREFIX + VAR_PARAMETERS + VAR_POSTFIX)) {\n          value = parameters;\n        } else if (param.equals(VAR_PREFIX + VAR_BODY_LAST_MODIFICATION_DATE + VAR_POSTFIX)) {\n          value =\n              getValueFromRequestBody(\n                  (String) body,\n                  replaceIdentifierToRegexp(\n                      param, (Iterable<Node>) getDefinitions().get(DEFINITION_VAR_ELEMENT)));\n        } else {\n          try {\n            value = uri.replaceAll(uriRegexp, \"$\" + (i + 1));\n            if (\"\".equals(value)) {\n              value = null;\n            }\n          } catch (\n              final IndexOutOfBoundsException\n                  e) { // TODO: Refactor this! Don't use exceptions for control flow!\n            value = null;\n          }\n        }\n        result[i] = value;\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8687, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 43, "focalAPIEnd": 121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)"], "useStart": [43], "useEnd": [154], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/secondmarket/SecondMarket-Brown-Spring-2012/tree/master/src/main/webapp/Company.java", "rawCode": "  public String getOverview() {\n    return _overview\n        .replaceAll(\"href=\\\"/\", \"href=\\\"http://www.crunchbase.com/\")\n        .replaceAll(\"<br/>\", \"\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8688, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 248, "focalAPIEnd": 272, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/entwinemedia/weblounge/tree/master/modules/weblounge-common-api/src/main/java/ch/entwine/weblounge/common/url/PathUtils.java", "rawCode": "  /**\n   * Checks that the path only contains the system path separator. If not, wrong ones are replaced.\n   */\n  private static String adjustSeparator(String path) {\n    String sp = File.separator;\n    if (\"\\\\\".equals(sp)) sp = \"\\\\\\\\\";\n    return path.replaceAll(\"/\", sp);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8689, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string!=null", "guardType": "IF {", "guardExpressionStart": 83, "guardExpressionEnd": 101, "guardBlockStart": 83, "guardBlockEnd": 160, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 119, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mojavelinux/seam-forge/tree/master/parser-java/src/main/java/org/jboss/seam/forge/parser/java/util/Strings.java", "rawCode": "  public static String unquote(final String value) {\n    String result = null;\n    if (value != null) {\n      result = value.replaceAll(\"\\\"(.*)\\\"\", \"$1\");\n    }\n    return result;\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8690, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ParseException", "exceptionHandlingCall": ["new EquationFormatException(*,String)"], "tryExpressionStart": 416, "tryExpressionEnd": 420, "tryBlockStart": 416, "tryBlockEnd": 807, "catchExpressionStart": 718, "catchExpressionEnd": 744, "catchBlockStart": 718, "catchBlockEnd": 807, "exceptionHandlingCallStart": [758], "exceptionHandlingCallEnd": [800], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 515, "focalAPIEnd": 550, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new StringReader(resultStr)", "new EquationFormatException(*,resultStr)"], "useStart": [604, 758], "useEnd": [631, 800], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gmfawcett/openmark-mvn/tree/master/tags/v1.3.7/src/om/equation/Equation.java", "rawCode": "  /**\n   * Creates an equation from text (LaTeX-like) format.\n   *\n   * @param sEquation Equation text\n   * @param f ItemFactory to use\n   * @param fZoom Zoom factor (1.0 = default)\n   * @return Equation object\n   * @throws EquationFormatException If there's anything wrong with the input\n   */\n  public static Equation create(String sEquation, ItemFactory f, float fZoom)\n      throws EquationFormatException {\n    try {\n      // Ensure equation is a single line (makes it easier to show errors)\n      sEquation = sEquation.replaceAll(\"[\\r\\n]\", \" \").trim();\n      EquationFormat ef = new EquationFormat(new StringReader(sEquation));\n      return create(ef.equation().createDOM(XML.createDocument()), f, fZoom);\n    } catch (ParseException pe) {\n      throw new EquationFormatException(pe, sEquation);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8691, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "string.indexOf(\"-\",)!=-1", "guardType": "IF {", "guardExpressionStart": 91, "guardExpressionEnd": 123, "guardBlockStart": 91, "guardBlockEnd": 214, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 176, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["parseShort(resultStr)", "string.replaceAll(String,String)"], "useStart": [159, 243], "useEnd": [207, 273], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us8871/pim/src/main/java-se/com/funambol/common/pim/model/converter/VCalendarContentConverter.java", "rawCode": "  private static short instanceModifierToInt(String modifier) { // Irrespective of the\n    if (modifier.indexOf(\"-\") != -1) { // version\n      return (short) -Short.parseShort(modifier.replaceAll(\"\\\\-\", \"\"));\n    }\n    return Short.parseShort(modifier.replaceAll(\"\\\\+\", \"\"));\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8692, "initialization": ["String string = getTemplateAsString(String,String)"], "initializationStart": [453], "initializationEnd": [580], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 604, "focalAPIEnd": 664, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["create(resultStr)"], "useStart": [683], "useEnd": [699], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/crh/escidoc-core-1.4/tree/master/integration-tests/src/test/java/de/escidoc/core/test/om/item/SurrogateItemIT.java", "rawCode": "  /** @throws Exception */\n  @Test\n  public void testDecleaningCreateSurrogateItemWithReferenceToUnreleasedItem() throws Exception {\n    String itemXml =\n        EscidocAbstractTest.getTemplateAsString(\n            TEMPLATE_ITEM_PATH + \"/rest\", \"escidoc_item_198_for_create.xml\");\n    String createdItem = create(itemXml);\n    String itemId = getObjidValue(createdItem);\n    String itemHref = \"/ir/item/\" + itemId;\n    String surrogateItemXml =\n        EscidocAbstractTest.getTemplateAsString(\n            TEMPLATE_ITEM_PATH + \"/rest\", \"surrogate_escidoc_item_198_for_create.xml\");\n    String replaced = surrogateItemXml.replaceAll(\"##ITEMHREF##\", itemHref + \":2\");\n\n    try {\n      create(replaced);\n      fail(\n          \"Missing Exception on create an surrogate item with a reference\"\n              + \"to an unreleased item\");\n    } catch (final Exception e) {\n      // FIXME correct exception? its a value to much! JavaDoc: a\n      // mandatory attribute value is not set\n      Class<?> ec = InvalidStatusException.class;\n      EscidocAbstractTest.assertExceptionType(ec.getName() + \" expected.\", ec, e);\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8693, "initialization": ["String string = getFileContent(String)"], "initializationStart": [424], "initializationEnd": [452], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 579, "focalAPIEnd": 644, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["BufferedWriter.write(resultStr)"], "useStart": [3579], "useEnd": [3597], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aldaris/opensso/tree/master/products/amserver/distauth/configurator/source/com/sun/identity/distauth/setup/SetupDistAuthWAR.java", "rawCode": "  /**\n   * Creates AMDistAuthConfig.properties file\n   *\n   * @param configFile Absolute path to the AMDistAuthConfig.properties to be created.\n   * @param templateFile Template file for AMDistAuthConfig.properties\n   * @param properties Properties to be swapped in the template\n   */\n  public void createAMDistAuthConfigProperties(String templateFile, Properties properties)\n      throws IOException {\n    String content = getFileContent(templateFile);\n    for (Iterator i = properties.keySet().iterator(); i.hasNext(); ) {\n      String tag = (String) i.next();\n      content = content.replaceAll(\"@\" + tag + \"@\", (String) properties.get(tag));\n    }\n\n    StringBuffer sbDistAuthConfig = new StringBuffer();\n\n    sbDistAuthConfig.append(\"/*************************************\");\n    sbDistAuthConfig.append(\"*************************\\n\");\n    sbDistAuthConfig.append(\" * Distributed Authentication Service \");\n    sbDistAuthConfig.append(\"Configuration parameters\\n\");\n    sbDistAuthConfig.append(\" *************************************\");\n    sbDistAuthConfig.append(\"************************/\\n\");\n    sbDistAuthConfig.append(\"com.iplanet.distAuth.server.protocol=\");\n    sbDistAuthConfig.append((String) properties.get(\"DISTAUTH_SERVER_PROTOCOL\"));\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"com.iplanet.distAuth.server.host=\");\n    sbDistAuthConfig.append((String) properties.get(\"DISTAUTH_SERVER_HOST\"));\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"com.iplanet.distAuth.server.port=\");\n    sbDistAuthConfig.append((String) properties.get(\"DISTAUTH_SERVER_PORT\"));\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"\\ncom.iplanet.am.distauth.deploymentDescriptor=\");\n    sbDistAuthConfig.append((String) properties.get(\"DISTAUTH_DEPLOY_URI\"));\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"\\ncom.iplanet.am.cookie.secure=\");\n    sbDistAuthConfig.append((String) properties.get(\"AM_COOKIE_SECURE\"));\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"com.iplanet.am.cookie.encode=\");\n    sbDistAuthConfig.append((String) properties.get(\"AM_COOKIE_ENCODE\"));\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"\\n/*\\n\");\n    sbDistAuthConfig.append(\" * Load Balancer cookie name and value \");\n    sbDistAuthConfig.append(\"to be used when there are multiple\\n\");\n    sbDistAuthConfig.append(\" * distributed authentication web \");\n    sbDistAuthConfig.append(\"application servers behind Load Balancer\\n\");\n    sbDistAuthConfig.append(\" */\\n\");\n    sbDistAuthConfig.append(\"#com.iplanet.am.lbcookie.name=\");\n    sbDistAuthConfig.append(\"DistAuthLBCookieName\");\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"#com.iplanet.am.lbcookie.value=\");\n    sbDistAuthConfig.append(\"DistAuthLBCookieValue\");\n    sbDistAuthConfig.append(\"\\n\");\n    sbDistAuthConfig.append(\"\\n/*\\n\");\n    sbDistAuthConfig.append(\" * DistAuth cookie name\\n \");\n    sbDistAuthConfig.append(\" */\\n\");\n    sbDistAuthConfig.append(\"com.sun.identity.auth.cookieName=\");\n    sbDistAuthConfig.append((String) properties.get(\"DISTAUTH_COOKIE_NAME\"));\n    sbDistAuthConfig.append(\"\\n\");\n\n    content += sbDistAuthConfig.toString();\n\n    String protocol = (String) properties.get(TAG_SERVER_PROTOCOL);\n    if (protocol.equalsIgnoreCase(\"https\")) {\n      content += TRUST_ALL_CERTS;\n    }\n\n    File configFileDirectory = new File(configFileDir);\n    if (!configFileDirectory.exists()) {\n      configFileDirectory.mkdirs();\n    }\n    BufferedWriter out = new BufferedWriter(new FileWriter(configFile));\n    out.write(content);\n    out.close();\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8694, "initialization": ["String string = generate(Schema,*)"], "initializationStart": [554], "initializationEnd": [583], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 597, "focalAPIEnd": 641, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)", "string.replaceAll(String,String)", "executeSql(Statement,resultStr)", "executeSql(Statement,resultStr)", "executeSql(Statement,resultStr)"], "useStart": [655, 711, 765, 1039, 1476], "useEnd": [697, 757, 786, 1060, 1497], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LucidDB/luciddb/tree/master/luciddb/ext/aggdes/src/net/sf/luciddb/aggdes/LucidDbAggResultHandler.java", "rawCode": "  private void handleImpl(Map<Parameter, Object> parameterValues, Schema schema, Result result)\n      throws Exception {\n    AggregateTableOutputFactory outputFactory = new AggregateTableOutputFactory();\n\n    List<Output> outputs = outputFactory.createOutputs(schema, result.getAggregates());\n\n    Connection conn = DriverManager.getConnection(\"jdbc:default:connection\");\n\n    Statement stmt = conn.createStatement();\n\n    // CREATE TABLE\n    CreateTableGenerator tgen = new CreateTableGenerator();\n    for (Output output : outputs) {\n      String sql = tgen.generate(schema, output);\n      sql = sql.replaceAll(\"INTEGER\\\\(.*\\\\)\", \"INTEGER\");\n      sql = sql.replaceAll(\"BIGINT\\\\(.*\\\\)\", \"BIGINT\");\n      sql = sql.replaceAll(\"SMALLINT\\\\(.*\\\\)\", \"SMALLINT\");\n      executeSql(stmt, sql);\n    }\n\n    PopulateTableGenerator pgen = new PopulateTableGenerator();\n    for (Output output : outputs) {\n      // INSERT\n      AggregateTableOutput tableOutput = (AggregateTableOutput) output;\n      String sql = pgen.generate(schema, output);\n      executeSql(stmt, sql);\n\n      // ANALYZE\n      final StringBuilder buf = new StringBuilder();\n      buf.append(\"ANALYZE TABLE \");\n      schema\n          .getDialect()\n          .quoteIdentifier(\n              buf,\n              tableOutput.getCatalogName(),\n              tableOutput.getSchemaName(),\n              tableOutput.getTableName());\n      buf.append(\" ESTIMATE STATISTICS FOR ALL COLUMNS;\");\n      sql = buf.toString();\n      executeSql(stmt, sql);\n    }\n\n    // Regenerate XML\n    String mondrianOutput = null;\n    for (Parameter p : parameterValues.keySet()) {\n      if (p.getName().equals(\"mondrianOutput\")) {\n        mondrianOutput = (String) parameterValues.get(p);\n        break;\n      }\n    }\n    MondrianSchemaGenerator sgen = new MondrianSchemaGenerator();\n    String xml = sgen.generateFull(schema, outputs);\n    FileWriter fw = new FileWriter(mondrianOutput);\n    try {\n      fw.write(xml);\n    } finally {\n      fw.close();\n    }\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8695, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 73, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/branches/crux/5.2/crux-dev/src/main/java/org/cruxframework/crux/core/rebind/database/idb/IDBKeyRangeFactoryProxyCreator.java", "rawCode": "  @Override\n  public String getProxySimpleName() {\n    String typeName = parentName.replaceAll(\"\\\\W\", \"_\");\n    return typeName + \"_KeyRageFactory\";\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8696, "initialization": ["String regex = resolveRegex(*)"], "initializationStart": [554], "initializationEnd": [578], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 629, "focalAPIEnd": 655, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.replaceAll(String,String)"], "useStart": [702], "useEnd": [744], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/laiweiwei/eweb4j-framework/tree/master/src/main/java/org/eweb4j/util/CommonUtil.java", "rawCode": "  /**\n   * 删除标签\n   *\n   * @date 2013-1-5 下午05:35:27\n   * @param html\n   * @param isRMCnt 是否删除标签内的所有内容\n   *     <p>This is p.<a href=\"#\">This is a.</a>如果干掉a标签，就变成=>\n   *     <p>This is p.\n   * @param delTags 需要删除的Tag，如果不给定则删除所有标签\n   * @return\n   */\n  public static String cleanXmlTags(String html, boolean isRMCnt, String... delTags) {\n    if (isRMCnt) {\n      for (String delTag : delTags) {\n        List<String> tag = findByRegex(html, xmlTagsRegex(delTag));\n        if (tag == null || tag.isEmpty() || tag.size() != 2) continue;\n        String regex = resolveRegex(tag.get(0)) + \".*\" + resolveRegex(tag.get(1));\n        html = html.replaceAll(regex, \"\");\n      }\n      return html;\n    }\n\n    return html.replaceAll(xmlTagsRegex(delTags), \"\");\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8697, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 115, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vrockai/picketlink-idm/tree/master/picketlink-idm-cache/src/main/java/org/picketlink/idm/impl/cache/JBossCacheAPICacheProviderImpl.java", "rawCode": "  private Fqn getNamespacedFqn(String ns) {\n    String namespace = ns != null ? ns : NULL_NS_NODE;\n    namespace = namespace.replaceAll(\"/\", \"_\");\n    return Fqn.fromString(getRootNode() + \"/\" + namespace);\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8698, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 131, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(resultStr)"], "useStart": [112], "useEnd": [165], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ramesesinc/incubation/tree/master/rameses-common2/test/test/MyTTTTest.java", "rawCode": "  public void testHello() throws Exception {\n    String text = \"hello master #{1+1} and #{2+2} and #{3+3}\";\n    System.out.println(text.replaceAll(\"#\\\\{\", \"\\\\$\\\\{\"));\n  }\n"}, {"dataset": "replaceAll", "exampleID": 8699, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 1270, "focalAPIEnd": 1304, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeLine(resultStr,String,String,Project,int,int,Cell,int,int,*,*)", "writeLine(resultStr,String,*,Project,int,int,*,int,int,*,*)", "put(*,resultStr)", "writeLine(String,String,resultStr,Project,int,int,Cell,int,int,Cell,*)", "writeChildren(resultStr,Project,int,int,Cell)"], "useStart": [1331, 1455, 1641, 1900, 2218], "useEnd": [1441, 1563, 1676, 2197, 2289], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/analyst1001/OpenRefine-Hbase/tree/master/extensions/freebase/src/com/google/refine/freebase/protograph/transpose/TripleLoaderTransposedNodeFactory.java", "rawCode": "    @Override\n    public Object internalWrite(\n        String subject,\n        String predicate,\n        Project project,\n        int subjectRowIndex,\n        int subjectCellIndex,\n        Cell subjectCell) {\n      String id = null;\n      if (cell.recon != null && cell.recon.judgment != Recon.Judgment.None) {\n        int objectRowIndex = rowIndex;\n        int objectCellIndex = cellIndex;\n        Cell objectCell = cell;\n\n        String typeID = node.type.id;\n\n        Column column = project.columnModel.getColumnByCellIndex(cellIndex);\n        ReconConfig reconConfig = column.getReconConfig();\n        if (reconConfig instanceof StandardReconConfig) {\n          typeID = ((StandardReconConfig) reconConfig).typeID;\n        }\n\n        if (cell.recon.judgment == Recon.Judgment.Matched) {\n          id = cell.recon.match.id;\n\n        } else if (cell.recon.judgment == Judgment.New) {\n          if (newTopicVars.containsKey(cell.recon.id)) {\n            id = newTopicVars.get(cell.recon.id);\n          } else {\n            String columnName = column.getName();\n\n            long var = 0;\n            if (varPool.containsKey(columnName)) {\n              var = varPool.get(columnName);\n            }\n            varPool.put(columnName, var + 1);\n\n            id = \"$\" + columnName.replaceAll(\"\\\\W+\", \"_\") + \"_\" + var;\n\n            writeLine(\n                id, \"type\", typeID, project, rowIndex, cellIndex, cell, -1, -1, (Cell) null, !load);\n            writeLine(\n                id, \"name\", cell.value, project, -1, -1, (Cell) null, -1, -1, (Cell) null, !load);\n\n            getAssertedReconIDSet(typeID).add(cell.recon.id);\n\n            newTopicVars.put(cell.recon.id, id);\n          }\n        } else {\n          return null;\n        }\n\n        ensureAllIncludedTypesAsserted(cell.recon, typeID);\n\n        if (subject != null) {\n          ensureToTypesAsserted(cell.recon, predicate);\n\n          writeLine(\n              subject,\n              predicate,\n              id,\n              project,\n              subjectRowIndex,\n              subjectCellIndex,\n              subjectCell,\n              objectRowIndex,\n              objectCellIndex,\n              objectCell,\n              !load);\n        }\n\n        writeChildren(id, project, objectRowIndex, objectCellIndex, objectCell);\n      }\n\n      return id;\n    }\n"}, {"dataset": "replaceAll", "exampleID": 8700, "initialization": ["String string = String.substring(int,int)"], "initializationStart": [237], "initializationEnd": [274], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "resultStr = string.replaceAll(regex,replacement)", "focalAPIStart": 343, "focalAPIEnd": 388, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["append(resultStr)", "string.replaceAll(String,String)", "StringBuilder.append(string)"], "useStart": [329, 471, 517], "useEnd": [389, 503, 543], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Mylyn-Mantis/mylyn-mantis/tree/master/com.itsolut.mantis.core/src/com/itsolut/mantis/core/util/HtmlFormatter.java", "rawCode": "  public static String convertFromDisplayHtml(String input) {\n\n    List<Range> ranges = parseIntoRanges(input);\n\n    StringBuilder output = new StringBuilder(input.length());\n\n    for (Range range : ranges) {\n\n      String rangeString = input.substring(range.from, range.to);\n      if (range.rangeKind == RangeKind.TEXT)\n        output.append(rangeString.replaceAll(\"<br\\\\s?/>\\\\n?\", \"\\n\"));\n      else if (range.rangeKind == RangeKind.TAG_CLEAN_NL)\n        output.append(rangeString.replaceAll(\"\\n\", \"\"));\n      else output.append(rangeString);\n    }\n\n    return output.toString();\n  }\n"}]