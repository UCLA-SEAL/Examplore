[{"dataset": "setText", "exampleID": 9301, "initialization": ["CharSequence text = loadLabel(PackageManager)", "TextView textView = findViewById(*)"], "initializationStart": [1272, 1430], "initializationEnd": [1304, 1458], "hasTryCatch": 1, "exceptionType": "NameNotFoundException", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 1130, "tryExpressionEnd": 1134, "tryBlockStart": 1130, "tryBlockEnd": 1731, "catchExpressionStart": 1639, "catchExpressionEnd": 1671, "catchBlockStart": 1639, "catchBlockEnd": 1731, "exceptionHandlingCallStart": [1679], "exceptionHandlingCallEnd": [1724], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1466, "focalAPIEnd": 1482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Luminger/AnJaRoot/tree/master/src/org/failedprojects/anjaroot/RequestActivity.java", "rawCode": "  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    handler.postDelayed(\n        new Runnable() {\n          @Override\n          public void run() {\n            Log.v(LOGTAG, \"Timeout triggered\");\n            answerRequest(false);\n          }\n        },\n        timeout);\n    setContentView(R.layout.request_activity);\n\n    Button grant = (Button) findViewById(R.id.grant_btn);\n    grant.setOnClickListener(this);\n    Button deny = (Button) findViewById(R.id.deny_btn);\n    deny.setOnClickListener(this);\n\n    Intent intent = getIntent();\n    int uid = intent.getIntExtra(\"uid\", -1);\n    PackageManager pm = getPackageManager();\n    String[] pkgs = pm.getPackagesForUid(uid);\n\n    if (pkgs.length < 1) {\n      Log.e(LOGTAG, String.format(\"Failed to get package for uid %d\", uid));\n      return;\n    }\n\n    if (pkgs.length > 1) {\n      Log.e(LOGTAG, \"There is more than one package with uid %d, displaying only the first\");\n      Log.e(LOGTAG, \"Returned packages are:\");\n      for (String pkg : pkgs) {\n        Log.e(LOGTAG, String.format(\" %s\", pkg));\n      }\n    }\n\n    try {\n      PackageInfo pi = pm.getPackageInfo(pkgs[0], 0);\n\n      Drawable logo = pi.applicationInfo.loadIcon(pm);\n      CharSequence name = pi.applicationInfo.loadLabel(pm);\n\n      ImageView iv = (ImageView) findViewById(R.id.icon);\n      iv.setImageDrawable(logo);\n\n      TextView tv = (TextView) findViewById(R.id.icon_name);\n      tv.setText(name);\n\n      TextView t = (TextView) findViewById(R.id.title_text);\n      t.setText(String.format(getString(R.string.request_activity_title_text), name));\n    } catch (NameNotFoundException e) {\n      Log.e(LOGTAG, \"Failed to get PackageInfo\", e);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9302, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 219, "guardExpressionEnd": 242, "guardBlockStart": 219, "guardBlockEnd": 368, "focalAPI": " = textView.setText(text)", "focalAPIStart": 253, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rsavoye/k9-mail/tree/master/plugins/ActionBarSherlock/library/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  @Override\n  public void dispatchTitleChanged(CharSequence title, int color) {\n    if (DEBUG) Log.d(TAG, \"[dispatchTitleChanged] title: \" + title + \", color: \" + color);\n\n    if (!mIsDelegate || mIsTitleReady) {\n      if (mTitleView != null) {\n        mTitleView.setText(title);\n      } else if (wActionBar != null) {\n        wActionBar.setWindowTitle(title);\n      }\n    }\n\n    mTitle = title;\n  }\n"}, {"dataset": "setText", "exampleID": 9303, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 219, "guardExpressionEnd": 242, "guardBlockStart": 219, "guardBlockEnd": 368, "focalAPI": " = textView.setText(text)", "focalAPIStart": 253, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hugoflug/flashcards/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  @Override\n  public void dispatchTitleChanged(CharSequence title, int color) {\n    if (DEBUG) Log.d(TAG, \"[dispatchTitleChanged] title: \" + title + \", color: \" + color);\n\n    if (!mIsDelegate || mIsTitleReady) {\n      if (mTitleView != null) {\n        mTitleView.setText(title);\n      } else if (wActionBar != null) {\n        wActionBar.setWindowTitle(title);\n      }\n    }\n\n    mTitle = title;\n  }\n"}, {"dataset": "setText", "exampleID": 9304, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 49, "guardExpressionEnd": 67, "guardBlockStart": 49, "guardBlockEnd": 284, "focalAPI": " = textView.setText(text)", "focalAPIStart": 76, "focalAPIEnd": 101, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [153, 247], "useEnd": [186, 277], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yfli/aSM-clone/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/view/menu/ListMenuItemView.java", "rawCode": "  public void setTitle(CharSequence title) {\n    if (title != null) {\n      mTitleView.setText(title);\n\n      if (mTitleView.getVisibility() != VISIBLE) mTitleView.setVisibility(VISIBLE);\n    } else {\n      if (mTitleView.getVisibility() != GONE) mTitleView.setVisibility(GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9305, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 74, "guardExpressionEnd": 97, "guardBlockStart": 74, "guardBlockEnd": 417, "focalAPI": " = textView.setText(text)", "focalAPIStart": 106, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pixmob/freemobilenetstat/tree/master/deps/httpclient/demo/deps/abs/library/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  private void setTitleImpl(CharSequence title) {\n    mTitle = title;\n    if (mTitleView != null) {\n      mTitleView.setText(title);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n    if (mLogoNavItem != null) {\n      mLogoNavItem.setTitle(title);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9306, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 47, "focalAPIEnd": 70, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tom-and-jerry/eyeCam/tree/master/src/ch/hsr/eyecam/widget/FloatingColorBubble.java", "rawCode": "  public void setText(CharSequence text) {\n    mTextView.setText(text);\n  }\n"}, {"dataset": "setText", "exampleID": 9307, "initialization": ["TextView textView = inflate(Context,*,ListView,boolean)"], "initializationStart": [119], "initializationEnd": [226], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 232, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ListView.addHeaderView(textView)"], "useStart": [265], "useEnd": [297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Prototik/HoloEverywhere/tree/master/addons/preferences/src/org/holoeverywhere/preference/_RingtonePickerDialog.java", "rawCode": "  private int addStaticItem(ListView listView, int textResId) {\n    TextView textView =\n        (TextView)\n            LayoutInflater.inflate(\n                context, R.layout.select_dialog_singlechoice_holo, listView, false);\n    textView.setText(textResId);\n    listView.addHeaderView(textView);\n    staticItemCount++;\n    return listView.getHeaderViewsCount() - 1;\n  }\n"}, {"dataset": "setText", "exampleID": 9308, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 219, "guardExpressionEnd": 242, "guardBlockStart": 219, "guardBlockEnd": 368, "focalAPI": " = textView.setText(text)", "focalAPIStart": 253, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/actionbarsherlock/library/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  @Override\n  public void dispatchTitleChanged(CharSequence title, int color) {\n    if (DEBUG) Log.d(TAG, \"[dispatchTitleChanged] title: \" + title + \", color: \" + color);\n\n    if (!mIsDelegate || mIsTitleReady) {\n      if (mTitleView != null) {\n        mTitleView.setText(title);\n      } else if (wActionBar != null) {\n        wActionBar.setWindowTitle(title);\n      }\n    }\n\n    mTitle = title;\n  }\n"}, {"dataset": "setText", "exampleID": 9309, "initialization": ["CharSequence text = getTimeText()"], "initializationStart": [111], "initializationEnd": [124], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 130, "guardExpressionEnd": 150, "guardBlockStart": 130, "guardBlockEnd": 172, "focalAPI": " = textView.setText(text)", "focalAPIStart": 151, "focalAPIEnd": 171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/packages/SystemUI/src/com/android/systemui/statusbar/tablet/HoloClock.java", "rawCode": "  final void updateClock() {\n    mCalendar.setTimeInMillis(System.currentTimeMillis());\n    CharSequence txt = getTimeText();\n    if (mBgText != null) mBgText.setText(txt);\n    if (mFgText != null) mFgText.setText(txt);\n    if (mSolidText != null) mSolidText.setText(txt);\n  }\n"}, {"dataset": "setText", "exampleID": 9310, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [294], "initializationEnd": [347], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTextAppearance(Context,int)"], "configurationStart": [481], "configurationEnd": [535], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 670, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hugoflug/flashcards/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  private void initTitle() {\n    if (mTitleLayout == null) {\n      LayoutInflater inflater = LayoutInflater.from(getContext());\n      inflater.inflate(R.layout.abs__action_bar_title_item, this);\n      mTitleLayout = (LinearLayout) getChildAt(getChildCount() - 1);\n      mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);\n      mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);\n      if (mTitleStyleRes != 0) {\n        mTitleView.setTextAppearance(mContext, mTitleStyleRes);\n      }\n      if (mSubtitleStyleRes != 0) {\n        mSubtitleView.setTextAppearance(mContext, mSubtitleStyleRes);\n      }\n    }\n\n    mTitleView.setText(mTitle);\n    mSubtitleView.setText(mSubtitle);\n\n    final boolean hasTitle = !TextUtils.isEmpty(mTitle);\n    final boolean hasSubtitle = !TextUtils.isEmpty(mSubtitle);\n    mSubtitleView.setVisibility(hasSubtitle ? VISIBLE : GONE);\n    mTitleLayout.setVisibility(hasTitle || hasSubtitle ? VISIBLE : GONE);\n    if (mTitleLayout.getParent() == null) {\n      addView(mTitleLayout);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9311, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 40, "focalAPIEnd": 59, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RyanWang1015/linphone-android/tree/master/src/org/linphone/ui/SlidingTab.java", "rawCode": "    void setHintText(int resId) {\n      text.setText(resId);\n    }\n"}, {"dataset": "setText", "exampleID": 9312, "initialization": ["TextView textView = findViewById(*)", "CharSequence text = AccountType.getDisplayLabel(Context)"], "initializationStart": [308, 698], "initializationEnd": [351, 735], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 784, "focalAPIEnd": 804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setText(CharSequence)"], "useStart": [869], "useEnd": [890], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DroidJunk/droidjunk_packages_apps_Contacts/tree/master/src/com/android/contacts/detail/ContactDetailFragment.java", "rawCode": "    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n      final View resultView =\n          (convertView != null)\n              ? convertView\n              : mInflater.inflate(R.layout.account_selector_list_item, parent, false);\n\n      final TextView text1 = (TextView) resultView.findViewById(android.R.id.text1);\n      final TextView text2 = (TextView) resultView.findViewById(android.R.id.text2);\n      final ImageView icon = (ImageView) resultView.findViewById(android.R.id.icon);\n\n      final AccountType accountType = mAccountTypes.get(position);\n\n      CharSequence action = accountType.getInviteContactActionLabel(mContext);\n      CharSequence label = accountType.getDisplayLabel(mContext);\n      if (TextUtils.isEmpty(action)) {\n        text1.setText(label);\n        text2.setVisibility(View.GONE);\n      } else {\n        text1.setText(action);\n        text2.setVisibility(View.VISIBLE);\n        text2.setText(label);\n      }\n      icon.setImageDrawable(accountType.getDisplayIcon(mContext));\n\n      return resultView;\n    }\n"}, {"dataset": "setText", "exampleID": 9313, "initialization": ["TextView textView = new TextView(Context)"], "initializationStart": [297], "initializationEnd": [318], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 324, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setTextColor(int)", "textView.setGravity(int)", "textView.setBackgroundResource(int)", "IcsToast.setView(textView)"], "useStart": [537, 572, 609, 670], "useEnd": [566, 603, 664, 689], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/maplesyrup/maple-android/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/IcsToast.java", "rawCode": "  public static Toast makeText(Context context, CharSequence s, int duration) {\n    if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {\n      return Toast.makeText(context, s, duration);\n    }\n    IcsToast toast = new IcsToast(context);\n    toast.setDuration(duration);\n    TextView view = new TextView(context);\n    view.setText(s);\n    // Original AOSP using reference on @android:color/bright_foreground_dark\n    // bright_foreground_dark - reference on @android:color/background_light\n    // background_light - 0xffffffff\n    view.setTextColor(0xffffffff);\n    view.setGravity(Gravity.CENTER);\n    view.setBackgroundResource(R.drawable.abs__toast_frame);\n    toast.setView(view);\n    return toast;\n  }\n"}, {"dataset": "setText", "exampleID": 9314, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [1136], "initializationEnd": [1175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [1270], "configurationEnd": [1305], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 1183, "guardExpressionEnd": 1206, "guardBlockStart": 1183, "guardBlockEnd": 4247, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1465, "focalAPIEnd": 1491, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jTurnerCPW/sprintAndroid/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  private void installDecor() {\n    if (DEBUG) Log.d(TAG, \"[installDecor]\");\n\n    if (mDecor == null) {\n      mDecor = (ViewGroup) mActivity.getWindow().getDecorView().findViewById(android.R.id.content);\n    }\n    if (mContentParent == null) {\n      // Since we are not operating at the window level we need to take\n      // into account the fact that the true decor may have already been\n      // initialized and had content attached to it. If that is the case,\n      // copy over its children to our new content container.\n      List<View> views = null;\n      if (mDecor.getChildCount() > 0) {\n        views = new ArrayList<View>(1); // Usually there's only one child\n        for (int i = 0, children = mDecor.getChildCount(); i < children; i++) {\n          View child = mDecor.getChildAt(0);\n          mDecor.removeView(child);\n          views.add(child);\n        }\n      }\n\n      mContentParent = generateLayout();\n\n      // Copy over the old children. See above for explanation.\n      if (views != null) {\n        for (View child : views) {\n          mContentParent.addView(child);\n        }\n      }\n\n      mTitleView = (TextView) mDecor.findViewById(android.R.id.title);\n      if (mTitleView != null) {\n        if (hasFeature(Window.FEATURE_NO_TITLE)) {\n          mTitleView.setVisibility(View.GONE);\n          if (mContentParent instanceof FrameLayout) {\n            ((FrameLayout) mContentParent).setForeground(null);\n          }\n        } else {\n          mTitleView.setText(mTitle);\n        }\n      } else {\n        wActionBar = (ActionBarView) mDecor.findViewById(R.id.abs__action_bar);\n        if (wActionBar != null) {\n          wActionBar.setWindowCallback(this);\n          if (wActionBar.getTitle() == null) {\n            wActionBar.setWindowTitle(mActivity.getTitle());\n          }\n          if (hasFeature(Window.FEATURE_PROGRESS)) {\n            wActionBar.initProgress();\n          }\n          if (hasFeature(Window.FEATURE_INDETERMINATE_PROGRESS)) {\n            wActionBar.initIndeterminateProgress();\n          }\n\n          // Since we don't require onCreate dispatching, parse for uiOptions here\n          int uiOptions = loadUiOptionsFromManifest(mActivity);\n          if (uiOptions != 0) {\n            mUiOptions = uiOptions;\n          }\n\n          boolean splitActionBar = false;\n          final boolean splitWhenNarrow =\n              (mUiOptions & ActivityInfo.UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW) != 0;\n          if (splitWhenNarrow) {\n            splitActionBar =\n                getResources_getBoolean(mActivity, R.bool.abs__split_action_bar_is_narrow);\n          } else {\n            splitActionBar =\n                mActivity\n                    .getTheme()\n                    .obtainStyledAttributes(R.styleable.SherlockTheme)\n                    .getBoolean(R.styleable.SherlockTheme_windowSplitActionBar, false);\n          }\n          final ActionBarContainer splitView =\n              (ActionBarContainer) mDecor.findViewById(R.id.abs__split_action_bar);\n          if (splitView != null) {\n            wActionBar.setSplitView(splitView);\n            wActionBar.setSplitActionBar(splitActionBar);\n            wActionBar.setSplitWhenNarrow(splitWhenNarrow);\n\n            mActionModeView =\n                (ActionBarContextView) mDecor.findViewById(R.id.abs__action_context_bar);\n            mActionModeView.setSplitView(splitView);\n            mActionModeView.setSplitActionBar(splitActionBar);\n            mActionModeView.setSplitWhenNarrow(splitWhenNarrow);\n          } else if (splitActionBar) {\n            Log.e(\n                TAG,\n                \"Requested split action bar with incompatible window decor! Ignoring request.\");\n          }\n\n          // Post the panel invalidate for later; avoid application onCreateOptionsMenu\n          // being called in the middle of onCreate or similar.\n          mDecor.post(\n              new Runnable() {\n                @Override\n                public void run() {\n                  // Invalidate if the panel menu hasn't been created before this.\n                  if (!mIsDestroyed && !mActivity.isFinishing() && mMenu == null) {\n                    dispatchInvalidateOptionsMenu();\n                  }\n                }\n              });\n        }\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9315, "initialization": ["CharSequence text = MessageItem.getCachedFormattedMessage()", "CharSequence text = formatMessage(MessageItem,*,*,*,*,*)"], "initializationStart": [896, 1004], "initializationEnd": [931, 1208], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTransformationMethod(*)"], "configurationStart": [377], "configurationEnd": [461], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1220, "focalAPIEnd": 1259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cadavre/android_packages_apps_Mms/tree/master/src/com/android/mms/ui/MessageListItem.java", "rawCode": "  private void bindCommonMessage(final MessageItem msgItem) {\n    if (mDownloadButton != null) {\n      mDownloadButton.setVisibility(View.GONE);\n      mDownloadingLabel.setVisibility(View.GONE);\n    }\n    // Since the message text should be concatenated with the sender's\n    // address(or name), I have to display it here instead of\n    // displaying it by the Presenter.\n    mBodyTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());\n\n    boolean isSelf = Sms.isOutgoingFolder(msgItem.mBoxId);\n    String addr = isSelf ? null : msgItem.mAddress;\n    updateAvatarView(addr, isSelf);\n\n    // Get and/or lazily set the formatted message from/on the\n    // MessageItem. Because the MessageItem instances come from a\n    // cache (currently of size ~50), the hit rate on avoiding the\n    // expensive formatMessage() call is very high.\n    CharSequence formattedMessage = msgItem.getCachedFormattedMessage();\n    if (formattedMessage == null) {\n      formattedMessage =\n          formatMessage(\n              msgItem,\n              msgItem.mContact,\n              msgItem.mBody,\n              msgItem.mSubject,\n              msgItem.mHighlight,\n              msgItem.mTextContentType);\n    }\n    mBodyTextView.setText(formattedMessage);\n\n    // If we're in the process of sending a message (i.e. pending), then we show a \"SENDING...\"\n    // string in place of the timestamp.\n    mDateView.setText(\n        msgItem.isSending()\n            ? mContext.getResources().getString(R.string.sending_message)\n            : msgItem.mTimestamp);\n\n    if (msgItem.isSms()) {\n      hideMmsViewIfNeeded();\n    } else {\n      Presenter presenter =\n          PresenterFactory.getPresenter(\n              \"MmsThumbnailPresenter\", mContext, this, msgItem.mSlideshow);\n      presenter.present();\n\n      if (msgItem.mAttachmentType != WorkingMessage.TEXT) {\n        inflateMmsView();\n        mMmsView.setVisibility(View.VISIBLE);\n        setOnClickListener(msgItem);\n        drawPlaybackButton(msgItem);\n      } else {\n        hideMmsViewIfNeeded();\n      }\n    }\n    drawRightStatusIndicator(msgItem);\n\n    requestLayout();\n  }\n"}, {"dataset": "setText", "exampleID": 9316, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 145, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [204, 251], "useEnd": [230, 280], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/galievruslan/mss-android/tree/master/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java", "rawCode": "  private void setViewText(TextView v, CharSequence text) {\n    // Set the text even if it's null, since we need to clear any previous text.\n    v.setText(text);\n\n    if (TextUtils.isEmpty(text)) {\n      v.setVisibility(View.GONE);\n    } else {\n      v.setVisibility(View.VISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9317, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [272], "initializationEnd": [325], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTextAppearance(Context,int)"], "configurationStart": [580], "configurationEnd": [634], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 650, "guardExpressionEnd": 669, "guardBlockStart": 650, "guardBlockEnd": 715, "focalAPI": " = textView.setText(text)", "focalAPIStart": 680, "focalAPIEnd": 706, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ga-m3dv/ga-worldwind-suite/tree/master/AndroidRemote/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  private void initTitle() {\n    if (mTitleLayout == null) {\n      LayoutInflater inflater = LayoutInflater.from(getContext());\n      mTitleLayout =\n          (LinearLayout) inflater.inflate(R.layout.abs__action_bar_title_item, this, false);\n      mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);\n      mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);\n      mTitleUpView = mTitleLayout.findViewById(R.id.abs__up);\n\n      mTitleLayout.setOnClickListener(mUpClickListener);\n\n      if (mTitleStyleRes != 0) {\n        mTitleView.setTextAppearance(mContext, mTitleStyleRes);\n      }\n      if (mTitle != null) {\n        mTitleView.setText(mTitle);\n      }\n\n      if (mSubtitleStyleRes != 0) {\n        mSubtitleView.setTextAppearance(mContext, mSubtitleStyleRes);\n      }\n      if (mSubtitle != null) {\n        mSubtitleView.setText(mSubtitle);\n        mSubtitleView.setVisibility(VISIBLE);\n      }\n\n      final boolean homeAsUp = (mDisplayOptions & ActionBar.DISPLAY_HOME_AS_UP) != 0;\n      final boolean showHome = (mDisplayOptions & ActionBar.DISPLAY_SHOW_HOME) != 0;\n      mTitleUpView.setVisibility(!showHome ? (homeAsUp ? VISIBLE : INVISIBLE) : GONE);\n      mTitleLayout.setEnabled(homeAsUp && !showHome);\n    }\n\n    addView(mTitleLayout);\n    if (mExpandedActionView != null\n        || (TextUtils.isEmpty(mTitle) && TextUtils.isEmpty(mSubtitle))) {\n      // Don't show while in expanded mode or with empty text\n      mTitleLayout.setVisibility(GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9318, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [134], "configurationEnd": [173], "guardCondition": "!(TextUtils.isEmpty(text,)) && null!=textView", "guardType": "IF {", "guardExpressionStart": 58, "guardExpressionEnd": 85, "guardBlockStart": 58, "guardBlockEnd": 461, "focalAPI": " = textView.setText(text)", "focalAPIStart": 198, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [394], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/giftedbird/aituidao/tree/master/src_lib/PullToRefresh/src/com/handmark/pulltorefresh/library/internal/LoadingLayout.java", "rawCode": "  private void setSubHeaderText(CharSequence label) {\n    if (null != mSubHeaderText) {\n      if (TextUtils.isEmpty(label)) {\n        mSubHeaderText.setVisibility(View.GONE);\n      } else {\n        mSubHeaderText.setText(label);\n\n        // Only set it to Visible if we're GONE, otherwise VISIBLE will\n        // be set soon\n        if (View.GONE == mSubHeaderText.getVisibility()) {\n          mSubHeaderText.setVisibility(View.VISIBLE);\n        }\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9319, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 219, "guardExpressionEnd": 242, "guardBlockStart": 219, "guardBlockEnd": 368, "focalAPI": " = textView.setText(text)", "focalAPIStart": 253, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kansas9000/myvlc/tree/master/java-libs/ActionBarSherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  @Override\n  public void dispatchTitleChanged(CharSequence title, int color) {\n    if (DEBUG) Log.d(TAG, \"[dispatchTitleChanged] title: \" + title + \", color: \" + color);\n\n    if (!mIsDelegate || mIsTitleReady) {\n      if (mTitleView != null) {\n        mTitleView.setText(title);\n      } else if (wActionBar != null) {\n        wActionBar.setWindowTitle(title);\n      }\n    }\n\n    mTitle = title;\n  }\n"}, {"dataset": "setText", "exampleID": 9320, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 44, "focalAPIEnd": 68, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iceandfire/android_packages_apps_Settings/tree/master/src/com/android/settings/ConfirmLockPassword.java", "rawCode": "    private void showError(int msg) {\n      mHeaderText.setText(msg);\n      mPasswordEntry.setText(null);\n      mHandler.postDelayed(\n          new Runnable() {\n            public void run() {\n              mHeaderText.setText(R.string.lockpassword_confirm_your_password_header);\n            }\n          },\n          ERROR_MESSAGE_TIMEOUT);\n    }\n"}, {"dataset": "setText", "exampleID": 9321, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 214, "guardExpressionEnd": 242, "guardBlockStart": 214, "guardBlockEnd": 300, "focalAPI": " = textView.setText(text)", "focalAPIStart": 251, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NevRA/Giraffe/tree/master/libs/ActionBar-PullToRefresh-0.7.3/src/uk/co/senab/actionbarpulltorefresh/library/DefaultHeaderTransformer.java", "rawCode": "  /**\n   * Set Text to show to prompt the user is pull (or keep pulling).\n   *\n   * @param pullText - Text to display.\n   */\n  public void setPullText(CharSequence pullText) {\n    mPullRefreshLabel = pullText;\n    if (mHeaderTextView != null) {\n      mHeaderTextView.setText(mPullRefreshLabel);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9322, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 74, "guardExpressionEnd": 97, "guardBlockStart": 74, "guardBlockEnd": 417, "focalAPI": " = textView.setText(text)", "focalAPIStart": 106, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SuikoHero38/CraveParty/tree/master/FINAL/JakeWharton-ActionBarSherlock-e5c2d1c/library/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  private void setTitleImpl(CharSequence title) {\n    mTitle = title;\n    if (mTitleView != null) {\n      mTitleView.setText(title);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n    if (mLogoNavItem != null) {\n      mLogoNavItem.setTitle(title);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9323, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 117, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LGordon2/word-servant/tree/master/src/com/app/wordservant/ui/StaticDisplayReviewFragment.java", "rawCode": "  @Override\n  public void setScriptureReference(CharSequence reference) {\n    // TODO Auto-generated method stub\n    mScriptureReferenceField.setText(reference);\n  }\n"}, {"dataset": "setText", "exampleID": 9324, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [260], "initializationEnd": [294], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "text!=null && !(textView==null)", "guardType": "IF {", "guardExpressionStart": 300, "guardExpressionEnd": 325, "guardBlockStart": 300, "guardBlockEnd": 347, "focalAPI": " = textView.setText(text)", "focalAPIStart": 383, "focalAPIEnd": 413, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "ScrollView.removeView(textView)"], "useStart": [434, 479], "useEnd": [471, 515], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/core/java/com/android/internal/app/AlertController.java", "rawCode": "  private void setupContent(LinearLayout contentPanel) {\n    mScrollView = (ScrollView) mWindow.findViewById(R.id.scrollView);\n    mScrollView.setFocusable(false);\n\n    // Special case for users that only want to display a String\n    mMessageView = (TextView) mWindow.findViewById(R.id.message);\n    if (mMessageView == null) {\n      return;\n    }\n\n    if (mMessage != null) {\n      mMessageView.setText(mMessage);\n    } else {\n      mMessageView.setVisibility(View.GONE);\n      mScrollView.removeView(mMessageView);\n\n      if (mListView != null) {\n        contentPanel.removeView(mWindow.findViewById(R.id.scrollView));\n        contentPanel.addView(mListView, new LinearLayout.LayoutParams(FILL_PARENT, FILL_PARENT));\n        contentPanel.setLayoutParams(new LinearLayout.LayoutParams(FILL_PARENT, 0, 1.0f));\n      } else {\n        contentPanel.setVisibility(View.GONE);\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9325, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [369], "initializationEnd": [397], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 544, "focalAPIEnd": 578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/policy/src/com/android/internal/policy/impl/GlobalActions.java", "rawCode": "    public View create(\n        Context context, View convertView, ViewGroup parent, LayoutInflater inflater) {\n      View v =\n          (convertView != null)\n              ? convertView\n              : inflater.inflate(R.layout.global_actions_item, parent, false);\n\n      ImageView icon = (ImageView) v.findViewById(R.id.icon);\n      TextView messageView = (TextView) v.findViewById(R.id.message);\n\n      v.findViewById(R.id.status).setVisibility(View.GONE);\n\n      icon.setImageDrawable(context.getResources().getDrawable(mIconResId));\n      messageView.setText(mMessageResId);\n\n      return v;\n    }\n"}, {"dataset": "setText", "exampleID": 9326, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [419], "initializationEnd": [456], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 464, "focalAPIEnd": 482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setTextColor(int)"], "useStart": [697], "useEnd": [785], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/java/android/widget/TabHost.java", "rawCode": "    public View createIndicatorView() {\n      final Context context = getContext();\n      LayoutInflater inflater =\n          (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n      View tabIndicator =\n          inflater.inflate(\n              mTabLayoutId,\n              mTabWidget, // tab widget is the parent\n              false); // no inflate params\n\n      final TextView tv = (TextView) tabIndicator.findViewById(R.id.title);\n      tv.setText(mLabel);\n\n      if (context.getApplicationInfo().targetSdkVersion <= Build.VERSION_CODES.DONUT) {\n        // Donut apps get old color scheme\n        tabIndicator.setBackgroundResource(R.drawable.tab_indicator_v4);\n        tv.setTextColor(context.getResources().getColorStateList(R.color.tab_indicator_text_v4));\n      }\n\n      return tabIndicator;\n    }\n"}, {"dataset": "setText", "exampleID": 9327, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 74, "guardExpressionEnd": 97, "guardBlockStart": 74, "guardBlockEnd": 417, "focalAPI": " = textView.setText(text)", "focalAPIStart": 106, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yfli/aSM-clone/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  private void setTitleImpl(CharSequence title) {\n    mTitle = title;\n    if (mTitleView != null) {\n      mTitleView.setText(title);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n    if (mLogoNavItem != null) {\n      mLogoNavItem.setTitle(title);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9328, "initialization": ["CharSequence text = getSecondPriorityTextMessage(MutableInt)"], "initializationStart": [136], "initializationEnd": [170], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 37, "guardExpressionEnd": 62, "guardBlockStart": 37, "guardBlockEnd": 376, "focalAPI": " = textView.setText(text)", "focalAPIStart": 178, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)", "textView.setVisibility(int)"], "useStart": [214, 295], "useEnd": [287, 369], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/policy/src/com/android/internal/policy/impl/KeyguardStatusViewManager.java", "rawCode": "  private void updateStatus2() {\n    if (mStatus2View != null) {\n      MutableInt icon = new MutableInt(0);\n      CharSequence string = getSecondPriorityTextMessage(icon);\n      mStatus2View.setText(string);\n      mStatus2View.setCompoundDrawablesWithIntrinsicBounds(icon.value, 0, 0, 0);\n      mStatus2View.setVisibility(mShowingStatus ? View.VISIBLE : View.INVISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9329, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 907, "focalAPIEnd": 933, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/janisozaur/androminion/tree/master/androminion/src/com/mehtank/androminion/ui/HelpView.java", "rawCode": "  int helpText(int stringID, View parent, final int page, int bgID) {\n    helpNext.setOnClickListener(\n        new OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            showHelp(page + 1);\n          }\n        });\n    int[] location = new int[2];\n    parent.getLocationOnScreen(location);\n\n    int left = location[0];\n    int top = location[1];\n\n    // int left = parent.getLeft();\n    // int top = parent.getTop();\n    // ViewParent vp = parent.getParent();\n    // while (vp != getRootView()) {\n    // left += ((View)vp).getLeft();\n    // top += ((View)vp).getTop();\n    // vp = vp.getParent();\n    // }\n\n    if (bgID != 0) {\n      callout.setBackgroundResource(bgID);\n    }\n    /*\n     * This has to be subtracted since getLocationOnScreen gives the\n     */\n    ((View) getParent()).getLocationOnScreen(location);\n    left -= location[0];\n    top -= location[1];\n\n    helpText.setText(stringID);\n\n    FrameLayout.LayoutParams lp =\n        new FrameLayout.LayoutParams(parent.getWidth() + left, parent.getHeight() + top);\n    setLayoutParams(lp);\n\n    setPadding(left, top, 0, 0);\n    return 0;\n  }\n"}, {"dataset": "setText", "exampleID": 9330, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [1136], "initializationEnd": [1175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [1270], "configurationEnd": [1305], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 1183, "guardExpressionEnd": 1206, "guardBlockStart": 1183, "guardBlockEnd": 4247, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1465, "focalAPIEnd": 1491, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PROMAND/Code_Fighters/tree/master/libs/action_bar/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  private void installDecor() {\n    if (DEBUG) Log.d(TAG, \"[installDecor]\");\n\n    if (mDecor == null) {\n      mDecor = (ViewGroup) mActivity.getWindow().getDecorView().findViewById(android.R.id.content);\n    }\n    if (mContentParent == null) {\n      // Since we are not operating at the window level we need to take\n      // into account the fact that the true decor may have already been\n      // initialized and had content attached to it. If that is the case,\n      // copy over its children to our new content container.\n      List<View> views = null;\n      if (mDecor.getChildCount() > 0) {\n        views = new ArrayList<View>(1); // Usually there's only one child\n        for (int i = 0, children = mDecor.getChildCount(); i < children; i++) {\n          View child = mDecor.getChildAt(0);\n          mDecor.removeView(child);\n          views.add(child);\n        }\n      }\n\n      mContentParent = generateLayout();\n\n      // Copy over the old children. See above for explanation.\n      if (views != null) {\n        for (View child : views) {\n          mContentParent.addView(child);\n        }\n      }\n\n      mTitleView = (TextView) mDecor.findViewById(android.R.id.title);\n      if (mTitleView != null) {\n        if (hasFeature(Window.FEATURE_NO_TITLE)) {\n          mTitleView.setVisibility(View.GONE);\n          if (mContentParent instanceof FrameLayout) {\n            ((FrameLayout) mContentParent).setForeground(null);\n          }\n        } else {\n          mTitleView.setText(mTitle);\n        }\n      } else {\n        wActionBar = (ActionBarView) mDecor.findViewById(R.id.abs__action_bar);\n        if (wActionBar != null) {\n          wActionBar.setWindowCallback(this);\n          if (wActionBar.getTitle() == null) {\n            wActionBar.setWindowTitle(mActivity.getTitle());\n          }\n          if (hasFeature(Window.FEATURE_PROGRESS)) {\n            wActionBar.initProgress();\n          }\n          if (hasFeature(Window.FEATURE_INDETERMINATE_PROGRESS)) {\n            wActionBar.initIndeterminateProgress();\n          }\n\n          // Since we don't require onCreate dispatching, parse for uiOptions here\n          int uiOptions = loadUiOptionsFromManifest(mActivity);\n          if (uiOptions != 0) {\n            mUiOptions = uiOptions;\n          }\n\n          boolean splitActionBar = false;\n          final boolean splitWhenNarrow =\n              (mUiOptions & ActivityInfo.UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW) != 0;\n          if (splitWhenNarrow) {\n            splitActionBar =\n                getResources_getBoolean(mActivity, R.bool.abs__split_action_bar_is_narrow);\n          } else {\n            splitActionBar =\n                mActivity\n                    .getTheme()\n                    .obtainStyledAttributes(R.styleable.SherlockTheme)\n                    .getBoolean(R.styleable.SherlockTheme_windowSplitActionBar, false);\n          }\n          final ActionBarContainer splitView =\n              (ActionBarContainer) mDecor.findViewById(R.id.abs__split_action_bar);\n          if (splitView != null) {\n            wActionBar.setSplitView(splitView);\n            wActionBar.setSplitActionBar(splitActionBar);\n            wActionBar.setSplitWhenNarrow(splitWhenNarrow);\n\n            mActionModeView =\n                (ActionBarContextView) mDecor.findViewById(R.id.abs__action_context_bar);\n            mActionModeView.setSplitView(splitView);\n            mActionModeView.setSplitActionBar(splitActionBar);\n            mActionModeView.setSplitWhenNarrow(splitWhenNarrow);\n          } else if (splitActionBar) {\n            Log.e(\n                TAG,\n                \"Requested split action bar with incompatible window decor! Ignoring request.\");\n          }\n\n          // Post the panel invalidate for later; avoid application onCreateOptionsMenu\n          // being called in the middle of onCreate or similar.\n          mDecor.post(\n              new Runnable() {\n                @Override\n                public void run() {\n                  // Invalidate if the panel menu hasn't been created before this.\n                  if (!mIsDestroyed && !mActivity.isFinishing() && mMenu == null) {\n                    dispatchInvalidateOptionsMenu();\n                  }\n                }\n              });\n        }\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9331, "initialization": ["CharSequence text = getPriorityTextMessage(MutableInt)"], "initializationStart": [136], "initializationEnd": [164], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 37, "guardExpressionEnd": 62, "guardBlockStart": 37, "guardBlockEnd": 370, "focalAPI": " = textView.setText(text)", "focalAPIStart": 172, "focalAPIEnd": 200, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)", "textView.setVisibility(int)"], "useStart": [208, 289], "useEnd": [281, 363], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/policy/src/com/android/internal/policy/impl/KeyguardStatusViewManager.java", "rawCode": "  private void updateStatus1() {\n    if (mStatus1View != null) {\n      MutableInt icon = new MutableInt(0);\n      CharSequence string = getPriorityTextMessage(icon);\n      mStatus1View.setText(string);\n      mStatus1View.setCompoundDrawablesWithIntrinsicBounds(icon.value, 0, 0, 0);\n      mStatus1View.setVisibility(mShowingStatus ? View.VISIBLE : View.INVISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9332, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [227], "initializationEnd": [259], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [299], "configurationEnd": [333], "guardCondition": "!(resid==-1)", "guardType": "IF {", "guardExpressionStart": 265, "guardExpressionEnd": 290, "guardBlockStart": 265, "guardBlockEnd": 439, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 354, "focalAPIEnd": 387, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [395], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nbeloglazov/GeekAlarm/tree/master/android/src/com/geek_alarm/android/activities/TaskActivity.java", "rawCode": "  /**\n   * Shows (or removes) error message with given id.\n   *\n   * @param errorMessageId resource id of message, -1 if no error.\n   */\n  private void showErrorMessage(int errorMessageId) {\n    TextView errorView = (TextView) findViewById(R.id.error_message);\n    if (errorMessageId == -1) {\n      errorView.setVisibility(View.GONE);\n    } else {\n      errorView.setText(errorMessageId);\n      errorView.setVisibility(View.VISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9333, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 81, "guardExpressionEnd": 107, "guardBlockStart": 81, "guardBlockEnd": 503, "focalAPI": " = textView.setText(text)", "focalAPIStart": 116, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [155], "useEnd": [217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Nirespire/Rogo/tree/master/ActionBarSherlock/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  public void setSubtitle(CharSequence subtitle) {\n    mSubtitle = subtitle;\n    if (mSubtitleView != null) {\n      mSubtitleView.setText(subtitle);\n      mSubtitleView.setVisibility(subtitle != null ? VISIBLE : GONE);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9334, "initialization": ["TextView textView = new TextView(Context)"], "initializationStart": [297], "initializationEnd": [318], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 324, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setTextColor(int)", "textView.setGravity(int)", "textView.setBackgroundResource(int)", "IcsToast.setView(textView)"], "useStart": [537, 572, 609, 670], "useEnd": [566, 603, 664, 689], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhaoyuqing/ActionBarSherlock/tree/master/actionbarsherlock/src/com/actionbarsherlock/internal/widget/IcsToast.java", "rawCode": "  public static Toast makeText(Context context, CharSequence s, int duration) {\n    if (VERSION.SDK_INT >= VERSION_CODES.ICE_CREAM_SANDWICH) {\n      return Toast.makeText(context, s, duration);\n    }\n    IcsToast toast = new IcsToast(context);\n    toast.setDuration(duration);\n    TextView view = new TextView(context);\n    view.setText(s);\n    // Original AOSP using reference on @android:color/bright_foreground_dark\n    // bright_foreground_dark - reference on @android:color/background_light\n    // background_light - 0xffffffff\n    view.setTextColor(0xffffffff);\n    view.setGravity(Gravity.CENTER);\n    view.setBackgroundResource(R.drawable.abs__toast_frame);\n    toast.setView(view);\n    return toast;\n  }\n"}, {"dataset": "setText", "exampleID": 9335, "initialization": ["TextView textView = getLayoutInflater()"], "initializationStart": [405], "initializationEnd": [424], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 556, "focalAPIEnd": 583, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ListView.addHeaderView(textView)"], "useStart": [589], "useEnd": [621], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/java/com/android/internal/app/RingtonePickerActivity.java", "rawCode": "  /**\n   * Adds a static item to the top of the list. A static item is one that is not from the\n   * RingtoneManager.\n   *\n   * @param listView The ListView to add to.\n   * @param textResId The resource ID of the text for the item.\n   * @return The position of the inserted item.\n   */\n  private int addStaticItem(ListView listView, int textResId) {\n    TextView textView =\n        (TextView)\n            getLayoutInflater()\n                .inflate(\n                    com.android.internal.R.layout.select_dialog_singlechoice_holo, listView, false);\n    textView.setText(textResId);\n    listView.addHeaderView(textView);\n    mStaticItemCount++;\n    return listView.getHeaderViewsCount() - 1;\n  }\n"}, {"dataset": "setText", "exampleID": 9336, "initialization": ["CharSequence text = Task.getDescription()"], "initializationStart": [77], "initializationEnd": [98], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 370, "focalAPIEnd": 403, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mikegr/android-shuffle/tree/master/client/src/org/dodgybits/shuffle/android/list/view/TaskView.java", "rawCode": "  private void updateDescription(Task task) {\n    CharSequence description = task.getDescription();\n    if (task.isComplete()) {\n      // add strike-through for completed tasks\n      SpannableString desc = new SpannableString(description);\n      desc.setSpan(new StrikethroughSpan(), 0, description.length(), Spanned.SPAN_PARAGRAPH);\n      description = desc;\n    }\n    mDescription.setText(description);\n  }\n"}, {"dataset": "setText", "exampleID": 9337, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [419], "initializationEnd": [456], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 464, "focalAPIEnd": 482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setTextColor(int)"], "useStart": [697], "useEnd": [785], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/widget/TabHost.java", "rawCode": "    public View createIndicatorView() {\n      final Context context = getContext();\n      LayoutInflater inflater =\n          (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n      View tabIndicator =\n          inflater.inflate(\n              mTabLayoutId,\n              mTabWidget, // tab widget is the parent\n              false); // no inflate params\n\n      final TextView tv = (TextView) tabIndicator.findViewById(R.id.title);\n      tv.setText(mLabel);\n\n      if (context.getApplicationInfo().targetSdkVersion <= Build.VERSION_CODES.DONUT) {\n        // Donut apps get old color scheme\n        tabIndicator.setBackgroundResource(R.drawable.tab_indicator_v4);\n        tv.setTextColor(context.getResources().getColorStateList(R.color.tab_indicator_text_v4));\n      }\n\n      return tabIndicator;\n    }\n"}, {"dataset": "setText", "exampleID": 9338, "initialization": ["TextView textView = findViewById(*)", "CharSequence text = getDisplayLabel(Context,int,*)"], "initializationStart": [228, 330], "initializationEnd": [257, 398], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [693], "configurationEnd": [723], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 744, "focalAPIEnd": 768, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [776], "useEnd": [809], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cadavre/android_packages_apps_Mms/tree/master/src/com/android/mms/ui/RecipientsAdapter.java", "rawCode": "  @Override\n  public final void bindView(View view, Context context, Cursor cursor) {\n    TextView name = (TextView) view.findViewById(R.id.name);\n    name.setText(cursor.getString(NAME_INDEX));\n\n    TextView label = (TextView) view.findViewById(R.id.label);\n    int type = cursor.getInt(TYPE_INDEX);\n    CharSequence labelText = Phone.getDisplayLabel(mContext, type, cursor.getString(LABEL_INDEX));\n    // When there's no label, getDisplayLabel() returns a CharSequence of length==1 containing\n    // a unicode non-breaking space. Need to check for that and consider that as \"no label\".\n    if (labelText.length() == 0 || (labelText.length() == 1 && labelText.charAt(0) == '\\u00A0')) {\n      label.setVisibility(View.GONE);\n    } else {\n      label.setText(labelText);\n      label.setVisibility(View.VISIBLE);\n    }\n\n    TextView number = (TextView) view.findViewById(R.id.number);\n    number.setText(\n        PhoneNumberUtils.formatNumber(\n            cursor.getString(NUMBER_INDEX),\n            cursor.getString(NORMALIZED_NUMBER),\n            mDefaultCountryIso));\n  }\n"}, {"dataset": "setText", "exampleID": 9339, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 49, "focalAPIEnd": 64, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xunroudabing/DaBing/tree/master/WeiXinEmoj/src/com/dabing/emoj/demo/demoFile.java", "rawCode": "  private void maketext1(CharSequence txt) {\n    t1.setText(txt);\n  }\n"}, {"dataset": "setText", "exampleID": 9340, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [1136], "initializationEnd": [1175], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [1270], "configurationEnd": [1305], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 1183, "guardExpressionEnd": 1206, "guardBlockStart": 1183, "guardBlockEnd": 4247, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1465, "focalAPIEnd": 1491, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/janisozaur/androminion/tree/master/actionbarsherlock/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  private void installDecor() {\n    if (DEBUG) Log.d(TAG, \"[installDecor]\");\n\n    if (mDecor == null) {\n      mDecor = (ViewGroup) mActivity.getWindow().getDecorView().findViewById(android.R.id.content);\n    }\n    if (mContentParent == null) {\n      // Since we are not operating at the window level we need to take\n      // into account the fact that the true decor may have already been\n      // initialized and had content attached to it. If that is the case,\n      // copy over its children to our new content container.\n      List<View> views = null;\n      if (mDecor.getChildCount() > 0) {\n        views = new ArrayList<View>(1); // Usually there's only one child\n        for (int i = 0, children = mDecor.getChildCount(); i < children; i++) {\n          View child = mDecor.getChildAt(0);\n          mDecor.removeView(child);\n          views.add(child);\n        }\n      }\n\n      mContentParent = generateLayout();\n\n      // Copy over the old children. See above for explanation.\n      if (views != null) {\n        for (View child : views) {\n          mContentParent.addView(child);\n        }\n      }\n\n      mTitleView = (TextView) mDecor.findViewById(android.R.id.title);\n      if (mTitleView != null) {\n        if (hasFeature(Window.FEATURE_NO_TITLE)) {\n          mTitleView.setVisibility(View.GONE);\n          if (mContentParent instanceof FrameLayout) {\n            ((FrameLayout) mContentParent).setForeground(null);\n          }\n        } else {\n          mTitleView.setText(mTitle);\n        }\n      } else {\n        wActionBar = (ActionBarView) mDecor.findViewById(R.id.abs__action_bar);\n        if (wActionBar != null) {\n          wActionBar.setWindowCallback(this);\n          if (wActionBar.getTitle() == null) {\n            wActionBar.setWindowTitle(mActivity.getTitle());\n          }\n          if (hasFeature(Window.FEATURE_PROGRESS)) {\n            wActionBar.initProgress();\n          }\n          if (hasFeature(Window.FEATURE_INDETERMINATE_PROGRESS)) {\n            wActionBar.initIndeterminateProgress();\n          }\n\n          // Since we don't require onCreate dispatching, parse for uiOptions here\n          int uiOptions = loadUiOptionsFromManifest(mActivity);\n          if (uiOptions != 0) {\n            mUiOptions = uiOptions;\n          }\n\n          boolean splitActionBar = false;\n          final boolean splitWhenNarrow =\n              (mUiOptions & ActivityInfo.UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW) != 0;\n          if (splitWhenNarrow) {\n            splitActionBar =\n                getResources_getBoolean(mActivity, R.bool.abs__split_action_bar_is_narrow);\n          } else {\n            splitActionBar =\n                mActivity\n                    .getTheme()\n                    .obtainStyledAttributes(R.styleable.SherlockTheme)\n                    .getBoolean(R.styleable.SherlockTheme_windowSplitActionBar, false);\n          }\n          final ActionBarContainer splitView =\n              (ActionBarContainer) mDecor.findViewById(R.id.abs__split_action_bar);\n          if (splitView != null) {\n            wActionBar.setSplitView(splitView);\n            wActionBar.setSplitActionBar(splitActionBar);\n            wActionBar.setSplitWhenNarrow(splitWhenNarrow);\n\n            mActionModeView =\n                (ActionBarContextView) mDecor.findViewById(R.id.abs__action_context_bar);\n            mActionModeView.setSplitView(splitView);\n            mActionModeView.setSplitActionBar(splitActionBar);\n            mActionModeView.setSplitWhenNarrow(splitWhenNarrow);\n          } else if (splitActionBar) {\n            Log.e(\n                TAG,\n                \"Requested split action bar with incompatible window decor! Ignoring request.\");\n          }\n\n          // Post the panel invalidate for later; avoid application onCreateOptionsMenu\n          // being called in the middle of onCreate or similar.\n          mDecor.post(\n              new Runnable() {\n                @Override\n                public void run() {\n                  // Invalidate if the panel menu hasn't been created before this.\n                  if (!mIsDestroyed && !mActivity.isFinishing() && mMenu == null) {\n                    dispatchInvalidateOptionsMenu();\n                  }\n                }\n              });\n        }\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9341, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 49, "focalAPIEnd": 74, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hack4reno2011/BetaReno/tree/master/johannilsson-android-actionbar-1a98f28/actionbar/src/com/markupartist/android/widget/ActionBar.java", "rawCode": "  public void setTitle(CharSequence title) {\n    mTitleView.setText(title);\n  }\n"}, {"dataset": "setText", "exampleID": 9342, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [213], "configurationEnd": [264], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 180, "guardExpressionEnd": 204, "guardBlockStart": 180, "guardBlockEnd": 392, "focalAPI": " = textView.setText(text)", "focalAPIStart": 272, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [337], "useEnd": [385], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sdu-k-team/IC/tree/master/src/com/kernel/intelcurrent/widget/PullToRefreshListView.java", "rawCode": "  /**\n   * Set a text to represent when the list was last updated.\n   *\n   * @param lastUpdated Last updated at.\n   */\n  public void setLastUpdated(CharSequence lastUpdated) {\n    if (lastUpdated != null) {\n      mRefreshViewLastUpdated.setVisibility(View.VISIBLE);\n      mRefreshViewLastUpdated.setText(lastUpdated);\n    } else {\n      mRefreshViewLastUpdated.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9343, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 56, "guardExpressionEnd": 78, "guardBlockStart": 56, "guardBlockEnd": 336, "focalAPI": " = textView.setText(text)", "focalAPIStart": 87, "focalAPIEnd": 118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [126, 292], "useEnd": [166, 329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Sven-Dawitz/2.3.3-Phone-Merge/tree/master/src/com/android/phone/EnableIccPinScreen.java", "rawCode": "  private void showStatus(CharSequence statusMsg) {\n    if (statusMsg != null) {\n      mStatusField.setText(statusMsg);\n      mStatusField.setVisibility(View.VISIBLE);\n      mPinFieldContainer.setVisibility(View.GONE);\n    } else {\n      mPinFieldContainer.setVisibility(View.VISIBLE);\n      mStatusField.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9344, "initialization": ["TextView textView = findViewById(*)", "CharSequence text = AccountType.getDisplayLabel(Context)"], "initializationStart": [308, 698], "initializationEnd": [351, 735], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 784, "focalAPIEnd": 804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setText(CharSequence)"], "useStart": [869], "useEnd": [890], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ninjanetworks/contacts/tree/master/src/com/android/contacts/detail/ContactDetailFragment.java", "rawCode": "    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n      final View resultView =\n          (convertView != null)\n              ? convertView\n              : mInflater.inflate(R.layout.account_selector_list_item, parent, false);\n\n      final TextView text1 = (TextView) resultView.findViewById(android.R.id.text1);\n      final TextView text2 = (TextView) resultView.findViewById(android.R.id.text2);\n      final ImageView icon = (ImageView) resultView.findViewById(android.R.id.icon);\n\n      final AccountType accountType = mAccountTypes.get(position);\n\n      CharSequence action = accountType.getInviteContactActionLabel(mContext);\n      CharSequence label = accountType.getDisplayLabel(mContext);\n      if (TextUtils.isEmpty(action)) {\n        text1.setText(label);\n        text2.setVisibility(View.GONE);\n      } else {\n        text1.setText(action);\n        text2.setVisibility(View.VISIBLE);\n        text2.setText(label);\n      }\n      icon.setImageDrawable(accountType.getDisplayIcon(mContext));\n\n      return resultView;\n    }\n"}, {"dataset": "setText", "exampleID": 9345, "initialization": ["CharSequence text = getDescriptionFor(T)"], "initializationStart": [488], "initializationEnd": [511], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 517, "focalAPIEnd": 551, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kfgodel/vortex/tree/master/android/IronCommons/src/ar/com/iron/android/extensions/adapters/TextRenderBlock.java", "rawCode": "  /**\n   * @see ar.com.iron.android.extensions.adapters.RenderBlock#render(android.view.View,\n   *     java.lang.Object, android.view.LayoutInflater)\n   */\n  public void render(View itemView, T item, LayoutInflater inflater) {\n    if (!(itemView instanceof TextView)) {\n      throw new IllegalArgumentException(\n          \"Este render asume que se usa un textview como vista del grupo: \" + itemView);\n    }\n    TextView textView = (TextView) itemView;\n    CharSequence groupDescription = getDescriptionFor(item);\n    textView.setText(groupDescription);\n  };\n"}, {"dataset": "setText", "exampleID": 9346, "initialization": ["TextView textView = View.findViewById(int)"], "initializationStart": [100], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 126, "focalAPIEnd": 145, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Norwae/what-i-read/tree/master/client/src/com/github/norwae/whatiread/data/BookInfoListAdapter.java", "rawCode": "  private void initTextField(View src, CharSequence value, int id) {\n    TextView view = (TextView) src.findViewById(id);\n    view.setText(value);\n  }\n"}, {"dataset": "setText", "exampleID": 9347, "initialization": ["CharSequence text = fromHtml(String)"], "initializationStart": [614], "initializationEnd": [633], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 641, "focalAPIEnd": 682, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/element14/nocturne/tree/master/Android/nocturne/src/main/java/com/bime/nocturne/ui/StatusActivityFragment.java", "rawCode": "  public void update() {\n    if (!readyFragment) {\n      NocturneApplication.logMessage(Log.DEBUG, LOG_TAG + \"update() not ready\");\n      return;\n    }\n    NocturneApplication.logMessage(Log.DEBUG, LOG_TAG + \"update() ready\");\n    userObj = null;\n\n    final List<UserDb> users = NocturneApplication.getInstance().getDataModel().getUsers();\n    if (users.size() == 1) {\n      userObj = users.get(0);\n      String text =\n          String.format(\n              getResources().getString(R.string.statusScr1Heading1),\n              userObj.getNameFirst() + \" \" + userObj.getNameLast());\n      CharSequence styledText = Html.fromHtml(text);\n      txtStatusScr1Heading1.setText(styledText);\n    }\n\n    if (userObj != null) {\n      serverConnectionTask.execute();\n\n      // FIXME : get users connections\n\n      RequestQueue queue = Volley.newRequestQueue(getActivity());\n      final SharedPreferences settings =\n          PreferenceManager.getDefaultSharedPreferences(getActivity());\n      final String url =\n          \"http://\"\n              + settings.getString(\n                  SettingsActivity.PREF_SERVER_ADDRESS,\n                  SettingsActivity.PREF_SERVER_ADDRESS_DEFAULT)\n              + \":\"\n              + settings.getString(\n                  SettingsActivity.PREF_SERVER_PORT, SettingsActivity.PREF_SERVER_PORT_DEFAULT)\n              + \"/users/connect/user_email=\"\n              + userObj.getEmail1();\n\n      JSONObject response = new JSONObject();\n      JsonObjectRequest req =\n          new JsonObjectRequest(\n              Request.Method.GET,\n              url,\n              null,\n              new Response.Listener<JSONObject>() {\n                @Override\n                public void onResponse(JSONObject response) {\n                  NocturneApplication.logMessage(\n                      Log.DEBUG, LOG_TAG + \"GetConnectedUsers : Response : \" + response.toString());\n                  try {\n                    String req = response.getString(\"request\");\n                    String stat = response.getString(\"status\");\n                    String msg = response.getString(\"message\");\n\n                    if (stat.equalsIgnoreCase(\"success\")) {\n                      NocturneApplication.logMessage(\n                          Log.INFO, LOG_TAG + \"createUser callback() RegistrationStatus_ACCEPTED\");\n\n                    } else {\n                      NocturneApplication.logMessage(\n                          Log.INFO, LOG_TAG + \"createUser callback() RegistrationStatus_DENIED\");\n                    }\n                  } catch (JSONException e) {\n                    NocturneApplication.logMessage(\n                        Log.ERROR, LOG_TAG + \"createUser callback() JSON Exception\", e);\n                  }\n                }\n              },\n              new Response.ErrorListener() {\n                @Override\n                public void onErrorResponse(VolleyError error) {\n                  NocturneApplication.logMessage(\n                      Log.ERROR, LOG_TAG + \" get connections Error: \" + error.getMessage());\n                }\n              });\n      queue.add(req);\n\n    } else {\n      // Show user registration screen\n      Intent i = new Intent(getActivity(), UserRegistrationActivity.class);\n      startActivity(i);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9348, "initialization": ["TextView textView = View.getTag()"], "initializationStart": [83], "initializationEnd": [96], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 104, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ddnbrowser/Diva.NetBrowser/tree/master/src/net/diva/browser/util/ComplexAdapter.java", "rawCode": "    @Override\n    public void attach(View view) {\n      TextView text = (TextView) view.getTag();\n      text.setText(m_text);\n    }\n"}, {"dataset": "setText", "exampleID": 9349, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 219, "guardExpressionEnd": 242, "guardBlockStart": 219, "guardBlockEnd": 368, "focalAPI": " = textView.setText(text)", "focalAPIStart": 253, "focalAPIEnd": 278, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PROMAND/MINK/tree/master/libs/action_bar/src/com/actionbarsherlock/internal/ActionBarSherlockCompat.java", "rawCode": "  @Override\n  public void dispatchTitleChanged(CharSequence title, int color) {\n    if (DEBUG) Log.d(TAG, \"[dispatchTitleChanged] title: \" + title + \", color: \" + color);\n\n    if (!mIsDelegate || mIsTitleReady) {\n      if (mTitleView != null) {\n        mTitleView.setText(title);\n      } else if (wActionBar != null) {\n        wActionBar.setWindowTitle(title);\n      }\n    }\n\n    mTitle = title;\n  }\n"}, {"dataset": "setText", "exampleID": 9350, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 81, "guardExpressionEnd": 107, "guardBlockStart": 81, "guardBlockEnd": 503, "focalAPI": " = textView.setText(text)", "focalAPIStart": 116, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [155], "useEnd": [217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teeds/Broadband-Usage/tree/master/libs/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  public void setSubtitle(CharSequence subtitle) {\n    mSubtitle = subtitle;\n    if (mSubtitleView != null) {\n      mSubtitleView.setText(subtitle);\n      mSubtitleView.setVisibility(subtitle != null ? VISIBLE : GONE);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9351, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [255], "initializationEnd": [294], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 300, "focalAPIEnd": 320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vokalinteractive/android_packages_apps_Settings/tree/master/src/com/android/settings/DataUsageSummary.java", "rawCode": "  /**\n   * Set {@link android.R.id#title} for a preference view inflated with {@link\n   * #inflatePreference(LayoutInflater, ViewGroup, View)}.\n   */\n  private static void setPreferenceTitle(View parent, int resId) {\n    final TextView title = (TextView) parent.findViewById(android.R.id.title);\n    title.setText(resId);\n  }\n"}, {"dataset": "setText", "exampleID": 9352, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [149], "initializationEnd": [178], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 496, "focalAPIEnd": 524, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/JR8203/packages_apps_Stk/tree/master/src/com/android/stk/StkInputActivity.java", "rawCode": "  private void configInputDisplay() {\n    TextView numOfCharsView = (TextView) findViewById(R.id.num_of_chars);\n    TextView inTypeView = (TextView) findViewById(R.id.input_type);\n\n    int inTypeId = R.string.alphabet;\n\n    // set the prompt.\n    mPromptView.setText(mStkInput.text);\n\n    // Set input type (alphabet/digit) info close to the InText form.\n    if (mStkInput.digitOnly) {\n      mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());\n      inTypeId = R.string.digits;\n    }\n    inTypeView.setText(inTypeId);\n\n    if (mStkInput.icon != null) {\n      setFeatureDrawable(Window.FEATURE_LEFT_ICON, new BitmapDrawable(mStkInput.icon));\n    }\n\n    // Handle specific global and text attributes.\n    switch (mState) {\n      case STATE_TEXT:\n        int maxLen = mStkInput.maxLen;\n        int minLen = mStkInput.minLen;\n        mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(maxLen)});\n\n        // Set number of chars info.\n        String lengthLimit = String.valueOf(minLen);\n        if (maxLen != minLen) {\n          lengthLimit = minLen + \" - \" + maxLen;\n        }\n        numOfCharsView.setText(lengthLimit);\n\n        if (!mStkInput.echo) {\n          mTextIn.setTransformationMethod(PasswordTransformationMethod.getInstance());\n        }\n        // Set default text if present.\n        if (mStkInput.defaultText != null) {\n          mTextIn.setText(mStkInput.defaultText);\n        } else {\n          // make sure the text is cleared\n          mTextIn.setText(\"\", BufferType.EDITABLE);\n        }\n\n        break;\n      case STATE_YES_NO:\n        // Set display mode - normal / yes-no layout\n        mYesNoLayout.setVisibility(View.VISIBLE);\n        mNormalLayout.setVisibility(View.GONE);\n        break;\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9353, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 74, "guardExpressionEnd": 97, "guardBlockStart": 74, "guardBlockEnd": 417, "focalAPI": " = textView.setText(text)", "focalAPIStart": 106, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ChainsDD/Superuser/tree/master/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  private void setTitleImpl(CharSequence title) {\n    mTitle = title;\n    if (mTitleView != null) {\n      mTitleView.setText(title);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n    if (mLogoNavItem != null) {\n      mLogoNavItem.setTitle(title);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9354, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [312], "initializationEnd": [340], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1114, "focalAPIEnd": 1141, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/widget/AppSecurityPermissions.java", "rawCode": "    public void setPermission(\n        MyPermissionGroupInfo grp,\n        MyPermissionInfo perm,\n        boolean first,\n        CharSequence newPermPrefix) {\n      mGroup = grp;\n      mPerm = perm;\n\n      ImageView permGrpIcon = (ImageView) findViewById(R.id.perm_icon);\n      TextView permNameView = (TextView) findViewById(R.id.perm_name);\n\n      PackageManager pm = getContext().getPackageManager();\n      Drawable icon = null;\n      if (first) {\n        icon = grp.loadGroupIcon(pm);\n      }\n      CharSequence label = perm.mLabel;\n      if (perm.mNew && newPermPrefix != null) {\n        // If this is a new permission, format it appropriately.\n        SpannableStringBuilder builder = new SpannableStringBuilder();\n        Parcel parcel = Parcel.obtain();\n        TextUtils.writeToParcel(newPermPrefix, parcel, 0);\n        parcel.setDataPosition(0);\n        CharSequence newStr = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(parcel);\n        parcel.recycle();\n        builder.append(newStr);\n        builder.append(label);\n        label = builder;\n      }\n\n      permGrpIcon.setImageDrawable(icon);\n      permNameView.setText(label);\n      setOnClickListener(this);\n      if (localLOGV)\n        Log.i(TAG, \"Made perm item \" + perm.name + \": \" + label + \" in group \" + grp.name);\n    }\n"}, {"dataset": "setText", "exampleID": 9355, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [294], "initializationEnd": [347], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTextAppearance(Context,int)"], "configurationStart": [481], "configurationEnd": [535], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 670, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  private void initTitle() {\n    if (mTitleLayout == null) {\n      LayoutInflater inflater = LayoutInflater.from(getContext());\n      inflater.inflate(R.layout.abs__action_bar_title_item, this);\n      mTitleLayout = (LinearLayout) getChildAt(getChildCount() - 1);\n      mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);\n      mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);\n      if (mTitleStyleRes != 0) {\n        mTitleView.setTextAppearance(mContext, mTitleStyleRes);\n      }\n      if (mSubtitleStyleRes != 0) {\n        mSubtitleView.setTextAppearance(mContext, mSubtitleStyleRes);\n      }\n    }\n\n    mTitleView.setText(mTitle);\n    mSubtitleView.setText(mSubtitle);\n\n    final boolean hasTitle = !TextUtils.isEmpty(mTitle);\n    final boolean hasSubtitle = !TextUtils.isEmpty(mSubtitle);\n    mSubtitleView.setVisibility(hasSubtitle ? VISIBLE : GONE);\n    mTitleLayout.setVisibility(hasTitle || hasSubtitle ? VISIBLE : GONE);\n    if (mTitleLayout.getParent() == null) {\n      addView(mTitleLayout);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9356, "initialization": ["CharSequence text = getTitleOfGraphObject(T)", "TextView textView = findViewById(*)"], "initializationStart": [165, 237], "initializationEnd": [199, 286], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 292, "guardExpressionEnd": 314, "guardBlockStart": 292, "guardBlockEnd": 385, "focalAPI": " = textView.setText(text,type)", "focalAPIStart": 323, "focalAPIEnd": 378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/facebook/facebook/src/com/facebook/widget/GraphObjectAdapter.java", "rawCode": "  protected void populateGraphObjectView(View view, T graphObject) {\n    String id = getIdOfGraphObject(graphObject);\n    view.setTag(id);\n\n    CharSequence title = getTitleOfGraphObject(graphObject);\n    TextView titleView = (TextView) view.findViewById(R.id.com_facebook_picker_title);\n    if (titleView != null) {\n      titleView.setText(title, TextView.BufferType.SPANNABLE);\n    }\n\n    CharSequence subtitle = getSubTitleOfGraphObject(graphObject);\n    TextView subtitleView = (TextView) view.findViewById(R.id.picker_subtitle);\n    if (subtitleView != null) {\n      if (subtitle != null) {\n        subtitleView.setText(subtitle, TextView.BufferType.SPANNABLE);\n        subtitleView.setVisibility(View.VISIBLE);\n      } else {\n        subtitleView.setVisibility(View.GONE);\n      }\n    }\n\n    if (getShowCheckbox()) {\n      CheckBox checkBox = (CheckBox) view.findViewById(R.id.com_facebook_picker_checkbox);\n      updateCheckboxState(checkBox, isGraphObjectSelected(id));\n    }\n\n    if (getShowPicture()) {\n      URL pictureURL = getPictureUrlOfGraphObject(graphObject);\n\n      if (pictureURL != null) {\n        ImageView profilePic = (ImageView) view.findViewById(R.id.com_facebook_picker_image);\n\n        // See if we have already pre-fetched this; if not, download it.\n        if (prefetchedPictureCache.containsKey(id)) {\n          ImageResponse response = prefetchedPictureCache.get(id);\n          profilePic.setImageBitmap(response.getBitmap());\n          profilePic.setTag(response.getRequest().getImageUrl());\n        } else {\n          downloadProfilePicture(id, pictureURL, profilePic);\n        }\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9357, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [271], "initializationEnd": [312], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [318], "configurationEnd": [353], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 359, "focalAPIEnd": 382, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PerfectButter/platform_packages_apps_Settings/tree/master/src/com/android/settings/DataUsageSummary.java", "rawCode": "  /**\n   * Set {@link android.R.id#summary} for a preference view inflated with {@link\n   * #inflatePreference(LayoutInflater, ViewGroup, View)}.\n   */\n  private static void setPreferenceSummary(View parent, CharSequence string) {\n    final TextView summary = (TextView) parent.findViewById(android.R.id.summary);\n    summary.setVisibility(View.VISIBLE);\n    summary.setText(string);\n  }\n"}, {"dataset": "setText", "exampleID": 9358, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [294], "initializationEnd": [347], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTextAppearance(Context,int)"], "configurationStart": [481], "configurationEnd": [535], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 670, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jTurnerCPW/sprintAndroid/tree/master/ActionBarSherlock/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  private void initTitle() {\n    if (mTitleLayout == null) {\n      LayoutInflater inflater = LayoutInflater.from(getContext());\n      inflater.inflate(R.layout.abs__action_bar_title_item, this);\n      mTitleLayout = (LinearLayout) getChildAt(getChildCount() - 1);\n      mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);\n      mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);\n      if (mTitleStyleRes != 0) {\n        mTitleView.setTextAppearance(mContext, mTitleStyleRes);\n      }\n      if (mSubtitleStyleRes != 0) {\n        mSubtitleView.setTextAppearance(mContext, mSubtitleStyleRes);\n      }\n    }\n\n    mTitleView.setText(mTitle);\n    mSubtitleView.setText(mSubtitle);\n\n    final boolean hasTitle = !TextUtils.isEmpty(mTitle);\n    final boolean hasSubtitle = !TextUtils.isEmpty(mSubtitle);\n    mSubtitleView.setVisibility(hasSubtitle ? VISIBLE : GONE);\n    mTitleLayout.setVisibility(hasTitle || hasSubtitle ? VISIBLE : GONE);\n    if (mTitleLayout.getParent() == null) {\n      addView(mTitleLayout);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9359, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [272], "initializationEnd": [325], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTextAppearance(Context,int)"], "configurationStart": [580], "configurationEnd": [634], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 650, "guardExpressionEnd": 669, "guardBlockStart": 650, "guardBlockEnd": 715, "focalAPI": " = textView.setText(text)", "focalAPIStart": 680, "focalAPIEnd": 706, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/janisozaur/androminion/tree/master/actionbarsherlock/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  private void initTitle() {\n    if (mTitleLayout == null) {\n      LayoutInflater inflater = LayoutInflater.from(getContext());\n      mTitleLayout =\n          (LinearLayout) inflater.inflate(R.layout.abs__action_bar_title_item, this, false);\n      mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);\n      mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);\n      mTitleUpView = mTitleLayout.findViewById(R.id.abs__up);\n\n      mTitleLayout.setOnClickListener(mUpClickListener);\n\n      if (mTitleStyleRes != 0) {\n        mTitleView.setTextAppearance(mContext, mTitleStyleRes);\n      }\n      if (mTitle != null) {\n        mTitleView.setText(mTitle);\n      }\n\n      if (mSubtitleStyleRes != 0) {\n        mSubtitleView.setTextAppearance(mContext, mSubtitleStyleRes);\n      }\n      if (mSubtitle != null) {\n        mSubtitleView.setText(mSubtitle);\n        mSubtitleView.setVisibility(VISIBLE);\n      }\n\n      final boolean homeAsUp = (mDisplayOptions & ActionBar.DISPLAY_HOME_AS_UP) != 0;\n      final boolean showHome = (mDisplayOptions & ActionBar.DISPLAY_SHOW_HOME) != 0;\n      mTitleUpView.setVisibility(!showHome ? (homeAsUp ? VISIBLE : INVISIBLE) : GONE);\n      mTitleLayout.setEnabled(homeAsUp && !showHome);\n    }\n\n    addView(mTitleLayout);\n    if (mExpandedActionView != null\n        || (TextUtils.isEmpty(mTitle) && TextUtils.isEmpty(mSubtitle))) {\n      // Don't show while in expanded mode or with empty text\n      mTitleLayout.setVisibility(GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9360, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [176], "configurationEnd": [211], "guardCondition": "!(TextUtils.isEmpty(text,))", "guardType": "IF {", "guardExpressionStart": 105, "guardExpressionEnd": 133, "guardBlockStart": 105, "guardBlockEnd": 334, "focalAPI": " = textView.setText(text)", "focalAPIStart": 262, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [294], "useEnd": [327], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmobile/themes-platform-packages-apps-Contacts/tree/master/src/com/android/contacts/ContactListItemView.java", "rawCode": "  /** Adds or updates a text view for the data label. */\n  public void setLabel(CharSequence text) {\n    if (TextUtils.isEmpty(text)) {\n      if (mLabelView != null) {\n        mLabelView.setVisibility(View.GONE);\n      }\n    } else {\n      getLabelView();\n      mLabelView.setText(text);\n      mLabelView.setVisibility(VISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9361, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [322], "initializationEnd": [367], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [681], "configurationEnd": [716], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 375, "guardExpressionEnd": 398, "guardBlockStart": 375, "guardBlockEnd": 933, "focalAPI": " = textView.setText(text)", "focalAPIStart": 888, "focalAPIEnd": 914, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_frameworks_policies_base/tree/master/phone/com/android/internal/policy/impl/PhoneWindow.java", "rawCode": "  private void installDecor() {\n    if (mDecor == null) {\n      mDecor = generateDecor();\n      mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);\n      mDecor.setIsRootNamespace(true);\n    }\n    if (mContentParent == null) {\n      mContentParent = generateLayout(mDecor);\n\n      mTitleView = (TextView) findViewById(com.android.internal.R.id.title);\n      if (mTitleView != null) {\n        if ((getLocalFeatures() & (1 << FEATURE_NO_TITLE)) != 0) {\n          View titleContainer = findViewById(com.android.internal.R.id.title_container);\n          if (titleContainer != null) {\n            titleContainer.setVisibility(View.GONE);\n          } else {\n            mTitleView.setVisibility(View.GONE);\n          }\n          if (mContentParent instanceof FrameLayout) {\n            ((FrameLayout) mContentParent).setForeground(null);\n          }\n        } else {\n          mTitleView.setText(mTitle);\n        }\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9362, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 40, "focalAPIEnd": 64, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ConicalRom/platform_packages_apps_settings/tree/master/src/com/android/settings/ConfirmLockPassword.java", "rawCode": "  private void showError(int msg) {\n    mHeaderText.setText(msg);\n    mPasswordEntry.setText(null);\n    mHandler.postDelayed(\n        new Runnable() {\n          public void run() {\n            mHeaderText.setText(R.string.lockpassword_confirm_your_password_header);\n          }\n        },\n        ERROR_MESSAGE_TIMEOUT);\n  }\n"}, {"dataset": "setText", "exampleID": 9363, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [785], "initializationEnd": [834], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [881], "configurationEnd": [911], "guardCondition": "!(TextUtils.isEmpty(text,))", "guardType": "IF {", "guardExpressionStart": 840, "guardExpressionEnd": 872, "guardBlockStart": 840, "guardBlockEnd": 1003, "focalAPI": " = textView.setText(text)", "focalAPIStart": 932, "focalAPIEnd": 955, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [963], "useEnd": [996], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/duzy/CSipSimple/tree/master/src/com/csipsimple/ui/calllog/CallLogDetailsFragment.java", "rawCode": "  /** Configures the call button area using the given entry. */\n  private void configureCallButton(String callText, CharSequence nbrLabel, CharSequence number) {\n    View convertView = getView().findViewById(R.id.call_and_sms);\n    convertView.setVisibility(TextUtils.isEmpty(number) ? View.GONE : View.VISIBLE);\n\n    TextView text = (TextView) convertView.findViewById(R.id.call_and_sms_text);\n\n    View mainAction = convertView.findViewById(R.id.call_and_sms_main_action);\n    mainAction.setOnClickListener(mPrimaryActionListener);\n    mainAction.setContentDescription(callText);\n    if (TextUtils.isEmpty(number)) {\n      number = \"\";\n    }\n    mainAction.setTag(SipUri.getCanonicalSipContact(number.toString(), false));\n    text.setText(callText);\n\n    TextView label = (TextView) convertView.findViewById(R.id.call_and_sms_label);\n    if (TextUtils.isEmpty(nbrLabel)) {\n      label.setVisibility(View.GONE);\n    } else {\n      label.setText(nbrLabel);\n      label.setVisibility(View.VISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9364, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 49, "guardExpressionEnd": 67, "guardBlockStart": 49, "guardBlockEnd": 284, "focalAPI": " = textView.setText(text)", "focalAPIStart": 76, "focalAPIEnd": 101, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [153, 247], "useEnd": [186, 277], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mturley/luper/tree/master/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ListMenuItemView.java", "rawCode": "  public void setTitle(CharSequence title) {\n    if (title != null) {\n      mTitleView.setText(title);\n\n      if (mTitleView.getVisibility() != VISIBLE) mTitleView.setVisibility(VISIBLE);\n    } else {\n      if (mTitleView.getVisibility() != GONE) mTitleView.setVisibility(GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9365, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [134], "configurationEnd": [173], "guardCondition": "!(TextUtils.isEmpty(text,)) && null!=textView", "guardType": "IF {", "guardExpressionStart": 58, "guardExpressionEnd": 85, "guardBlockStart": 58, "guardBlockEnd": 294, "focalAPI": " = textView.setText(text)", "focalAPIStart": 198, "focalAPIEnd": 227, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [237], "useEnd": [279], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunqimin09/FirstApp/tree/master/library_pull_to_refresh/src/com/handmark/pulltorefresh/library/internal/LoadingLayout.java", "rawCode": "  private void setSubHeaderText(CharSequence label) {\n    if (null != mSubHeaderText) {\n      if (TextUtils.isEmpty(label)) {\n        mSubHeaderText.setVisibility(View.GONE);\n      } else {\n        mSubHeaderText.setText(label);\n        mSubHeaderText.setVisibility(View.VISIBLE);\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9366, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [80], "initializationEnd": [122], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 128, "guardExpressionEnd": 149, "guardBlockStart": 128, "guardBlockEnd": 188, "focalAPI": " = textView.setText(text)", "focalAPIStart": 158, "focalAPIEnd": 181, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Prototik/HoloEverywhere/tree/master/demo/src/org/holoeverywhere/demo/widget/WidgetContainer.java", "rawCode": "  public void setTitle(CharSequence title) {\n    TextView textView = (TextView) titleView.findViewById(android.R.id.text1);\n    if (textView != null) {\n      textView.setText(title);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9367, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setText(String)", "textView.setText(String)", "textView.setText(String)"], "configurationStart": [350, 464, 548], "configurationEnd": [388, 502, 578], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 674, "focalAPIEnd": 705, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_packages_apps_Settings/tree/master/src/com/android/settings/applications/AppViewHolder.java", "rawCode": "  void updateSizeText(CharSequence invalidSizeStr, int whichSize) {\n    if (ManageApplications.DEBUG)\n      Log.i(\n          ManageApplications.TAG,\n          \"updateSizeText of \" + entry.label + \" \" + entry + \": \" + entry.sizeStr);\n    if (entry.sizeStr != null) {\n      switch (whichSize) {\n        case ManageApplications.SIZE_INTERNAL:\n          appSize.setText(entry.internalSizeStr);\n          break;\n        case ManageApplications.SIZE_EXTERNAL:\n          appSize.setText(entry.externalSizeStr);\n          break;\n        default:\n          appSize.setText(entry.sizeStr);\n          break;\n      }\n    } else if (entry.size == ApplicationsState.SIZE_INVALID) {\n      appSize.setText(invalidSizeStr);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9368, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 264, "focalAPIEnd": 295, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setText(String)"], "useStart": [658], "useEnd": [706], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_settings/tree/master/src/com/android/settings/applications/InstalledAppDetails.java", "rawCode": "  private void refreshSizeInfo() {\n    if (mAppEntry.size == ApplicationsState.SIZE_INVALID\n        || mAppEntry.size == ApplicationsState.SIZE_UNKNOWN) {\n      mLastCodeSize = mLastDataSize = mLastCacheSize = mLastTotalSize = -1;\n      if (!mHaveSizes) {\n        mAppSize.setText(mComputingStr);\n        mDataSize.setText(mComputingStr);\n        mCacheSize.setText(mComputingStr);\n        mTotalSize.setText(mComputingStr);\n      }\n      mClearDataButton.setEnabled(false);\n      mClearCacheButton.setEnabled(false);\n\n    } else {\n      mHaveSizes = true;\n      if (mLastCodeSize != mAppEntry.codeSize) {\n        mLastCodeSize = mAppEntry.codeSize;\n        mAppSize.setText(getSizeStr(mAppEntry.codeSize));\n      }\n      if (mLastDataSize != mAppEntry.dataSize) {\n        mLastDataSize = mAppEntry.dataSize;\n        mDataSize.setText(getSizeStr(mAppEntry.dataSize));\n      }\n      if (mLastExternalCodeSize != mAppEntry.externalCodeSize) {\n        mLastExternalCodeSize = mAppEntry.externalCodeSize;\n        mExternalCodeSize.setText(getSizeStr(mAppEntry.externalCodeSize));\n      }\n      if (mLastExternalDataSize != mAppEntry.externalDataSize) {\n        mLastExternalDataSize = mAppEntry.externalDataSize;\n        mExternalDataSize.setText(getSizeStr(mAppEntry.externalDataSize));\n      }\n      if (mLastCacheSize != mAppEntry.cacheSize) {\n        mLastCacheSize = mAppEntry.cacheSize;\n        mCacheSize.setText(getSizeStr(mAppEntry.cacheSize));\n      }\n      if (mLastTotalSize != mAppEntry.size) {\n        mLastTotalSize = mAppEntry.size;\n        mTotalSize.setText(getSizeStr(mAppEntry.size));\n      }\n\n      if (mAppEntry.dataSize <= 0 || !mCanClearData) {\n        mClearDataButton.setEnabled(false);\n      } else {\n        mClearDataButton.setEnabled(true);\n        mClearDataButton.setOnClickListener(this);\n      }\n      if (mAppEntry.cacheSize <= 0) {\n        mClearCacheButton.setEnabled(false);\n      } else {\n        mClearCacheButton.setEnabled(true);\n        mClearCacheButton.setOnClickListener(this);\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9369, "initialization": ["TextView textView = View.findViewById(int)"], "initializationStart": [321], "initializationEnd": [357], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [482], "configurationEnd": [525], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 1264, "guardExpressionEnd": 1287, "guardBlockStart": 1264, "guardBlockEnd": 1393, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1298, "focalAPIEnd": 1336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["GridView.setEmptyView(textView)"], "useStart": [1346], "useEnd": [1384], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/vlc-android/src/org/videolan/android/ui/GridFragment.java", "rawCode": "  private void ensureGrid() {\n    if (mGrid != null) {\n      return;\n    }\n    View root = getView();\n    if (root == null) {\n      throw new IllegalStateException(\"Content view not yet created\");\n    }\n    if (root instanceof GridView) {\n      mGrid = (GridView) root;\n    } else {\n      mStandardEmptyView = (TextView) root.findViewById(INTERNAL_EMPTY_ID);\n      if (mStandardEmptyView == null) {\n        mEmptyView = root.findViewById(android.R.id.empty);\n      } else {\n        mStandardEmptyView.setVisibility(View.GONE);\n      }\n      mProgressContainer = root.findViewById(INTERNAL_PROGRESS_CONTAINER_ID);\n      mGridContainer = root.findViewById(INTERNAL_GRID_CONTAINER_ID);\n      View rawGridView = root.findViewById(android.R.id.list);\n      if (!(rawGridView instanceof GridView)) {\n        if (rawGridView == null) {\n          throw new RuntimeException(\n              \"Your content must have a GridView whose id attribute is \" + \"'android.R.id.list'\");\n        }\n        throw new RuntimeException(\n            \"Content has view with id attribute 'android.R.id.list' \"\n                + \"that is not a GridView class\");\n      }\n      mGrid = (GridView) rawGridView;\n      if (mEmptyView != null) {\n        mGrid.setEmptyView(mEmptyView);\n      } else if (mEmptyText != null) {\n        mStandardEmptyView.setText(mEmptyText);\n        mGrid.setEmptyView(mStandardEmptyView);\n      }\n    }\n    mGridShown = true;\n    mGrid.setOnItemClickListener(mOnClickListener);\n    if (mAdapter != null) {\n      ListAdapter adapter = mAdapter;\n      mAdapter = null;\n      setListAdapter(adapter);\n    } else {\n      // We are starting without an adapter, so assume we won't\n      // have our data right away and start with the progress indicator.\n      if (mProgressContainer != null) {\n        setGridShown(false, false);\n      }\n    }\n    mHandler.post(mRequestFocus);\n  }\n"}, {"dataset": "setText", "exampleID": 9370, "initialization": ["CharSequence text = format(*,String,int)"], "initializationStart": [113], "initializationEnd": [162], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 228, "guardExpressionEnd": 257, "guardBlockStart": 228, "guardBlockEnd": 303, "focalAPI": " = textView.setText(text)", "focalAPIStart": 266, "focalAPIEnd": 296, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/azapps/mirakel-android/tree/master/date-time-picker/src/com/sleepbot/datetimepicker/time/TimePicker.java", "rawCode": "  public void setMinute(int value) {\n    if (value == 60) {\n      value = 0;\n    }\n    final CharSequence text = String.format(Locale.getDefault(), \"%02d\", value);\n    Utils.tryAccessibilityAnnounce(this.mTimePicker, text);\n    if (this.mMinuteView != null) {\n      this.mMinuteView.setText(text);\n    }\n    if (this.mMinuteSpaceView != null) {\n      this.mMinuteSpaceView.setText(text);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9371, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 81, "guardExpressionEnd": 107, "guardBlockStart": 81, "guardBlockEnd": 503, "focalAPI": " = textView.setText(text)", "focalAPIStart": 116, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [155], "useEnd": [217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/francho/unutopia-android/tree/master/erralberto/library/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  public void setSubtitle(CharSequence subtitle) {\n    mSubtitle = subtitle;\n    if (mSubtitleView != null) {\n      mSubtitleView.setText(subtitle);\n      mSubtitleView.setVisibility(subtitle != null ? VISIBLE : GONE);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9372, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [785], "initializationEnd": [834], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [881], "configurationEnd": [911], "guardCondition": "!(TextUtils.isEmpty(text,))", "guardType": "IF {", "guardExpressionStart": 840, "guardExpressionEnd": 872, "guardBlockStart": 840, "guardBlockEnd": 1003, "focalAPI": " = textView.setText(text)", "focalAPIStart": 932, "focalAPIEnd": 955, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [963], "useEnd": [996], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/r3gis3r/CSipSimple/tree/master/src/com/csipsimple/ui/calllog/CallLogDetailsFragment.java", "rawCode": "  /** Configures the call button area using the given entry. */\n  private void configureCallButton(String callText, CharSequence nbrLabel, CharSequence number) {\n    View convertView = getView().findViewById(R.id.call_and_sms);\n    convertView.setVisibility(TextUtils.isEmpty(number) ? View.GONE : View.VISIBLE);\n\n    TextView text = (TextView) convertView.findViewById(R.id.call_and_sms_text);\n\n    View mainAction = convertView.findViewById(R.id.call_and_sms_main_action);\n    mainAction.setOnClickListener(mPrimaryActionListener);\n    mainAction.setContentDescription(callText);\n    if (TextUtils.isEmpty(number)) {\n      number = \"\";\n    }\n    mainAction.setTag(SipUri.getCanonicalSipContact(number.toString(), false));\n    text.setText(callText);\n\n    TextView label = (TextView) convertView.findViewById(R.id.call_and_sms_label);\n    if (TextUtils.isEmpty(nbrLabel)) {\n      label.setVisibility(View.GONE);\n    } else {\n      label.setText(nbrLabel);\n      label.setVisibility(View.VISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9373, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 49, "guardExpressionEnd": 67, "guardBlockStart": 49, "guardBlockEnd": 284, "focalAPI": " = textView.setText(text)", "focalAPIStart": 76, "focalAPIEnd": 101, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [153, 247], "useEnd": [186, 277], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ushahidi/Ushahidi_Android/tree/master/Libraries/abs/src/com/actionbarsherlock/internal/view/menu/ListMenuItemView.java", "rawCode": "  public void setTitle(CharSequence title) {\n    if (title != null) {\n      mTitleView.setText(title);\n\n      if (mTitleView.getVisibility() != VISIBLE) mTitleView.setVisibility(VISIBLE);\n    } else {\n      if (mTitleView.getVisibility() != GONE) mTitleView.setVisibility(GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9374, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 54, "focalAPIEnd": 74, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kvite/astridclone/tree/master/astrid/src/com/todoroo/astrid/ui/AstridDialog.java", "rawCode": "  public AstridDialog setAstridTitle(int resId) {\n    title.setText(resId);\n    return this;\n  }\n"}, {"dataset": "setText", "exampleID": 9375, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [321], "initializationEnd": [379], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [504], "configurationEnd": [547], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 1298, "guardExpressionEnd": 1321, "guardBlockStart": 1298, "guardBlockEnd": 1427, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1332, "focalAPIEnd": 1370, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ListView.setEmptyView(textView)"], "useStart": [1380], "useEnd": [1418], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/app/ListFragment.java", "rawCode": "  private void ensureList() {\n    if (mList != null) {\n      return;\n    }\n    View root = getView();\n    if (root == null) {\n      throw new IllegalStateException(\"Content view not yet created\");\n    }\n    if (root instanceof ListView) {\n      mList = (ListView) root;\n    } else {\n      mStandardEmptyView = (TextView) root.findViewById(com.android.internal.R.id.internalEmpty);\n      if (mStandardEmptyView == null) {\n        mEmptyView = root.findViewById(android.R.id.empty);\n      } else {\n        mStandardEmptyView.setVisibility(View.GONE);\n      }\n      mProgressContainer = root.findViewById(com.android.internal.R.id.progressContainer);\n      mListContainer = root.findViewById(com.android.internal.R.id.listContainer);\n      View rawListView = root.findViewById(android.R.id.list);\n      if (!(rawListView instanceof ListView)) {\n        throw new RuntimeException(\n            \"Content has view with id attribute 'android.R.id.list' \"\n                + \"that is not a ListView class\");\n      }\n      mList = (ListView) rawListView;\n      if (mList == null) {\n        throw new RuntimeException(\n            \"Your content must have a ListView whose id attribute is \" + \"'android.R.id.list'\");\n      }\n      if (mEmptyView != null) {\n        mList.setEmptyView(mEmptyView);\n      } else if (mEmptyText != null) {\n        mStandardEmptyView.setText(mEmptyText);\n        mList.setEmptyView(mStandardEmptyView);\n      }\n    }\n    mListShown = true;\n    mList.setOnItemClickListener(mOnClickListener);\n    if (mAdapter != null) {\n      ListAdapter adapter = mAdapter;\n      mAdapter = null;\n      setListAdapter(adapter);\n    } else {\n      // We are starting without an adapter, so assume we won't\n      // have our data right away and start with the progress indicator.\n      if (mProgressContainer != null) {\n        setListShown(false, false);\n      }\n    }\n    mHandler.post(mRequestFocus);\n  }\n"}, {"dataset": "setText", "exampleID": 9376, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [294], "initializationEnd": [347], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTextAppearance(Context,int)"], "configurationStart": [481], "configurationEnd": [535], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 670, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robomorphine/strictmode/tree/master/src/actionbarsherlock-lib/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  private void initTitle() {\n    if (mTitleLayout == null) {\n      LayoutInflater inflater = LayoutInflater.from(getContext());\n      inflater.inflate(R.layout.abs__action_bar_title_item, this);\n      mTitleLayout = (LinearLayout) getChildAt(getChildCount() - 1);\n      mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);\n      mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);\n      if (mTitleStyleRes != 0) {\n        mTitleView.setTextAppearance(mContext, mTitleStyleRes);\n      }\n      if (mSubtitleStyleRes != 0) {\n        mSubtitleView.setTextAppearance(mContext, mSubtitleStyleRes);\n      }\n    }\n\n    mTitleView.setText(mTitle);\n    mSubtitleView.setText(mSubtitle);\n\n    final boolean hasTitle = !TextUtils.isEmpty(mTitle);\n    final boolean hasSubtitle = !TextUtils.isEmpty(mSubtitle);\n    mSubtitleView.setVisibility(hasSubtitle ? VISIBLE : GONE);\n    mTitleLayout.setVisibility(hasTitle || hasSubtitle ? VISIBLE : GONE);\n    if (mTitleLayout.getParent() == null) {\n      addView(mTitleLayout);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9377, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resid!=0", "guardType": "IF {", "guardExpressionStart": 8861, "guardExpressionEnd": 8903, "guardBlockStart": 8861, "guardBlockEnd": 9180, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 8939, "focalAPIEnd": 8993, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setTextColor(int)", "textView.setVisibility(int)"], "useStart": [9001, 9094], "useEnd": [9086, 9134], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_phone/tree/master/src/com/android/phone/CallCard.java", "rawCode": "  /**\n   * Updates the main block of caller info on the CallCard (ie. the stuff in the primaryCallInfo\n   * block) based on the specified Call.\n   */\n  private void displayMainCallStatus(CallManager cm, Call call) {\n    log(\"displayMainCallStatus(call \" + call + \")...\");\n\n    if (call == null) {\n      // There's no call to display, presumably because the phone is idle.\n      mPrimaryCallInfo.setVisibility(View.GONE);\n      return;\n    }\n    mPrimaryCallInfo.setVisibility(View.VISIBLE);\n\n    Call.State state = call.getState();\n    log(\" - call.state: \" + call.getState());\n\n    switch (state) {\n      case ACTIVE:\n      case DISCONNECTING:\n        // update timer field\n        if (DBG) log(\"displayMainCallStatus: start periodicUpdateTimer\");\n        mCallTime.setActiveCallMode(call);\n        mCallTime.reset();\n        mCallTime.periodicUpdateTimer();\n\n        break;\n\n      case HOLDING:\n        // update timer field\n        mCallTime.cancelTimer();\n\n        break;\n\n      case DISCONNECTED:\n        // Stop getting timer ticks from this call\n        mCallTime.cancelTimer();\n\n        break;\n\n      case DIALING:\n      case ALERTING:\n        // Stop getting timer ticks from a previous call\n        cancelTimer(call);\n\n        break;\n\n      case INCOMING:\n      case WAITING:\n        // Stop getting timer ticks from a previous call\n        cancelTimer(call);\n\n        break;\n\n      case IDLE:\n        // The \"main CallCard\" should never be trying to display\n        // an idle call! In updateState(), if the phone is idle,\n        // we call updateNoCall(), which means that we shouldn't\n        // have passed a call into this method at all.\n        Log.w(LOG_TAG, \"displayMainCallStatus: IDLE call in the main call card!\");\n\n        // (It is possible, though, that we had a valid call which\n        // became idle *after* the check in updateState() but\n        // before we get here... So continue the best we can,\n        // with whatever (stale) info we can get from the\n        // passed-in Call object.)\n\n        break;\n\n      default:\n        Log.w(LOG_TAG, \"displayMainCallStatus: unexpected call state: \" + state);\n        break;\n    }\n\n    updateCallStateWidgets(call);\n\n    if (PhoneUtils.isConferenceCall(call)) {\n      // Update onscreen info for a conference call.\n      updateDisplayForConference(call);\n    } else {\n      // Update onscreen info for a regular call (which presumably\n      // has only one connection.)\n      Connection conn = null;\n      int phoneType = call.getPhone().getPhoneType();\n      if (phoneType == Phone.PHONE_TYPE_CDMA) {\n        conn = call.getLatestConnection();\n      } else if ((phoneType == Phone.PHONE_TYPE_GSM) || (phoneType == Phone.PHONE_TYPE_SIP)) {\n        conn = call.getEarliestConnection();\n      } else {\n        throw new IllegalStateException(\"Unexpected phone type: \" + phoneType);\n      }\n\n      if (conn == null) {\n        if (DBG) log(\"displayMainCallStatus: connection is null, using default values.\");\n        // if the connection is null, we run through the behaviour\n        // we had in the past, which breaks down into trivial steps\n        // with the current implementation of getCallerInfo and\n        // updateDisplayForPerson.\n        CallerInfo info = PhoneUtils.getCallerInfo(getContext(), null /* conn */);\n        updateDisplayForPerson(info, Connection.PRESENTATION_ALLOWED, false, call, conn);\n      } else {\n        if (DBG) log(\" - CONN: \" + conn + \", state = \" + conn.getState());\n        int presentation = conn.getNumberPresentation();\n\n        // make sure that we only make a new query when the current\n        // callerinfo differs from what we've been requested to display.\n        boolean runQuery = true;\n        Object o = conn.getUserData();\n        if (o instanceof PhoneUtils.CallerInfoToken) {\n          runQuery =\n              mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken) o).currentInfo);\n        } else {\n          runQuery = mPhotoTracker.isDifferentImageRequest(conn);\n        }\n\n        // Adding a check to see if the update was caused due to a Phone number update\n        // or CNAP update. If so then we need to start a new query\n        if (phoneType == Phone.PHONE_TYPE_CDMA) {\n          Object obj = conn.getUserData();\n          String updatedNumber = conn.getAddress();\n          String updatedCnapName = conn.getCnapName();\n          CallerInfo info = null;\n          if (obj instanceof PhoneUtils.CallerInfoToken) {\n            info = ((PhoneUtils.CallerInfoToken) o).currentInfo;\n          } else if (o instanceof CallerInfo) {\n            info = (CallerInfo) o;\n          }\n\n          if (info != null) {\n            if (updatedNumber != null && !updatedNumber.equals(info.phoneNumber)) {\n              if (DBG) log(\"- displayMainCallStatus: updatedNumber = \" + updatedNumber);\n              runQuery = true;\n            }\n            if (updatedCnapName != null && !updatedCnapName.equals(info.cnapName)) {\n              if (DBG) log(\"- displayMainCallStatus: updatedCnapName = \" + updatedCnapName);\n              runQuery = true;\n            }\n          }\n        }\n\n        if (runQuery) {\n          if (DBG) log(\"- displayMainCallStatus: starting CallerInfo query...\");\n          PhoneUtils.CallerInfoToken info =\n              PhoneUtils.startGetCallerInfo(getContext(), conn, this, call);\n          updateDisplayForPerson(info.currentInfo, presentation, !info.isFinal, call, conn);\n        } else {\n          // No need to fire off a new query. We do still need\n          // to update the display, though (since we might have\n          // previously been in the \"conference call\" state.)\n          if (DBG) log(\"- displayMainCallStatus: using data we already have...\");\n          if (o instanceof CallerInfo) {\n            CallerInfo ci = (CallerInfo) o;\n            // In case of emergency and voice mail numbers, ci.phoneNumber is\n            // updated with \"Emergency Number\" text and voice mail tag respectively.\n            // So, ci.phoneNumber will not match connection address.\n            String connAddress = conn.getAddress();\n            String number = PhoneNumberUtils.stripSeparators(ci.phoneNumber);\n            if (!(ci.isEmergencyNumber() || ci.isVoiceMailNumber())\n                && (connAddress != null && !connAddress.equals(number))) {\n              log(\"- displayMainCallStatus: Phone number modified!!\");\n              CallerInfo newCi = CallerInfo.getCallerInfo(getContext(), connAddress);\n              if (newCi != null) {\n                ci = newCi;\n                conn.setUserData(ci);\n              }\n            }\n            // Update CNAP information and phone number if Phone state change occurred\n            ci.cnapName = conn.getCnapName();\n            ci.numberPresentation = conn.getNumberPresentation();\n            ci.namePresentation = conn.getCnapNamePresentation();\n            if (DBG)\n              log(\n                  \"- displayMainCallStatus: CNAP data from Connection: \"\n                      + \"CNAP name=\"\n                      + ci.cnapName\n                      + \", Number/Name Presentation=\"\n                      + ci.numberPresentation\n                      + \", Number=\"\n                      + ci.phoneNumber);\n            if (DBG) log(\" ==> Got CallerInfo; updating display: ci = \" + ci);\n            updateDisplayForPerson(ci, presentation, false, call, conn);\n          } else if (o instanceof PhoneUtils.CallerInfoToken) {\n            CallerInfo ci = ((PhoneUtils.CallerInfoToken) o).currentInfo;\n            if (DBG)\n              log(\n                  \"- displayMainCallStatus: CNAP data from Connection: \"\n                      + \"CNAP name=\"\n                      + ci.cnapName\n                      + \", Number/Name Presentation=\"\n                      + ci.numberPresentation);\n            if (DBG) log(\" ==> Got CallerInfoToken; updating display: ci = \" + ci);\n            updateDisplayForPerson(ci, presentation, true, call, conn);\n          } else {\n            Log.w(\n                LOG_TAG,\n                \"displayMainCallStatus: runQuery was false, \"\n                    + \"but we didn't have a cached CallerInfo object! o = \"\n                    + o);\n            // TODO: any easy way to recover here (given that\n            // the CallCard is probably displaying stale info\n            // right now?) Maybe force the CallCard into the\n            // \"Unknown\" state?\n          }\n        }\n      }\n    }\n\n    // In some states we override the \"photo\" ImageView to be an\n    // indication of the current state, rather than displaying the\n    // regular photo as set above.\n    updatePhotoForCallState(call);\n\n    // One special feature of the \"number\" text field: For incoming\n    // calls, while the user is dragging the RotarySelector widget, we\n    // use mPhoneNumber to display a hint like \"Rotate to answer\".\n    if (mIncomingCallWidgetHintTextResId != 0) {\n      // Display the hint!\n      mPhoneNumber.setText(mIncomingCallWidgetHintTextResId);\n      mPhoneNumber.setTextColor(getResources().getColor(mIncomingCallWidgetHintColorResId));\n      mPhoneNumber.setVisibility(View.VISIBLE);\n      mLabel.setVisibility(View.GONE);\n    }\n    // If we don't have a hint to display, just don't touch\n    // mPhoneNumber and mLabel. (Their text / color / visibility have\n    // already been set correctly, by either updateDisplayForPerson()\n    // or updateDisplayForConference().)\n  }\n"}, {"dataset": "setText", "exampleID": 9378, "initialization": ["CharSequence text = TextView.get(int)"], "initializationStart": [387], "initializationEnd": [414], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 424, "focalAPIEnd": 450, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.measure(int,int)", "textView.getMeasuredHeight()", "textView.setVisibility(int)"], "useStart": [460, 860, 1691], "useEnd": [619, 892, 1726], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sim0629/hackerskeyboard/tree/master/java/src/org/pocketworkstation/pckeyboard/CandidateView.java", "rawCode": "  private void showPreview(int wordIndex, String altText) {\n    int oldWordIndex = mCurrentWordIndex;\n    mCurrentWordIndex = wordIndex;\n    // If index changed or changing text\n    if (oldWordIndex != mCurrentWordIndex || altText != null) {\n      if (wordIndex == OUT_OF_BOUNDS_WORD_INDEX) {\n        hidePreview();\n      } else {\n        CharSequence word = altText != null ? altText : mSuggestions.get(wordIndex);\n        mPreviewText.setText(word);\n        mPreviewText.measure(\n            MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED),\n            MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));\n        int wordWidth = (int) (mPaint.measureText(word, 0, word.length()) + X_GAP * 2);\n        final int popupWidth =\n            wordWidth + mPreviewText.getPaddingLeft() + mPreviewText.getPaddingRight();\n        final int popupHeight = mPreviewText.getMeasuredHeight();\n        // mPreviewText.setVisibility(INVISIBLE);\n        mPopupPreviewX =\n            mWordX[wordIndex]\n                - mPreviewText.getPaddingLeft()\n                - getScrollX()\n                + (mWordWidth[wordIndex] - wordWidth) / 2;\n        mPopupPreviewY = -popupHeight;\n        int[] offsetInWindow = new int[2];\n        getLocationInWindow(offsetInWindow);\n        if (mPreviewPopup.isShowing()) {\n          mPreviewPopup.update(\n              mPopupPreviewX, mPopupPreviewY + offsetInWindow[1], popupWidth, popupHeight);\n        } else {\n          mPreviewPopup.setWidth(popupWidth);\n          mPreviewPopup.setHeight(popupHeight);\n          mPreviewPopup.showAtLocation(\n              this, Gravity.NO_GRAVITY, mPopupPreviewX, mPopupPreviewY + offsetInWindow[1]);\n        }\n        mPreviewText.setVisibility(VISIBLE);\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9379, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [219], "configurationEnd": [273], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 186, "guardExpressionEnd": 210, "guardBlockStart": 186, "guardBlockEnd": 407, "focalAPI": " = textView.setText(text)", "focalAPIStart": 281, "focalAPIEnd": 328, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [349], "useEnd": [400], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amcereijo/trcardmanager/tree/master/src/com/trcardmanager/views/TRCardManagerListView.java", "rawCode": "  /**\n   * Set a text to represent when the list was last updated.\n   *\n   * @param lastUpdated Last updated at.\n   */\n  public void setLastHeaderUpdated(CharSequence lastUpdated) {\n    if (lastUpdated != null) {\n      mRefreshTopViewLastUpdated.setVisibility(View.VISIBLE);\n      mRefreshTopViewLastUpdated.setText(lastUpdated);\n    } else {\n      mRefreshTopViewLastUpdated.setVisibility(View.GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9380, "initialization": ["TextView textView = findViewById(*)", "CharSequence text = GroupDelta.getTitle(Context)"], "initializationStart": [362, 1013], "initializationEnd": [406, 1037], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 1047, "focalAPIEnd": 1072, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setText(String)"], "useStart": [1238], "useEnd": [1281], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Contacts/tree/master/src/com/android/contacts/list/CustomContactListFilterActivity.java", "rawCode": "    @Override\n    public View getChildView(\n        int groupPosition,\n        int childPosition,\n        boolean isLastChild,\n        View convertView,\n        ViewGroup parent) {\n      if (convertView == null) {\n        convertView = mInflater.inflate(R.layout.custom_contact_list_filter_group, parent, false);\n      }\n\n      final TextView text1 = (TextView) convertView.findViewById(android.R.id.text1);\n      final TextView text2 = (TextView) convertView.findViewById(android.R.id.text2);\n      final CheckBox checkbox = (CheckBox) convertView.findViewById(android.R.id.checkbox);\n\n      final AccountDisplay account = mAccounts.get(groupPosition);\n      final GroupDelta child = (GroupDelta) this.getChild(groupPosition, childPosition);\n      if (child != null) {\n        // Handle normal group, with title and checkbox\n        final boolean groupVisible = child.getVisible();\n        checkbox.setVisibility(View.VISIBLE);\n        checkbox.setChecked(groupVisible);\n\n        final CharSequence groupTitle = child.getTitle(mContext);\n        text1.setText(groupTitle);\n        text2.setVisibility(View.GONE);\n      } else {\n        // When unknown child, this is \"more\" footer view\n        checkbox.setVisibility(View.GONE);\n        text1.setText(R.string.display_more_groups);\n        text2.setVisibility(View.GONE);\n      }\n\n      return convertView;\n    }\n"}, {"dataset": "setText", "exampleID": 9381, "initialization": ["CharSequence text = getTitleOfGraphObject(T)", "TextView textView = findViewById(*)"], "initializationStart": [165, 245], "initializationEnd": [199, 319], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 325, "guardExpressionEnd": 347, "guardBlockStart": 325, "guardBlockEnd": 418, "focalAPI": " = textView.setText(text,type)", "focalAPIStart": 356, "focalAPIEnd": 411, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/satoshi-okawa/facebook-android-sdk-test1/tree/master/facebook/src/com/facebook/widget/GraphObjectAdapter.java", "rawCode": "  protected void populateGraphObjectView(View view, T graphObject) {\n    String id = getIdOfGraphObject(graphObject);\n    view.setTag(id);\n\n    CharSequence title = getTitleOfGraphObject(graphObject);\n    TextView titleView =\n        (TextView) view.findViewById(MobageFacebookResources.id(\"com_facebook_picker_title\"));\n    if (titleView != null) {\n      titleView.setText(title, TextView.BufferType.SPANNABLE);\n    }\n\n    CharSequence subtitle = getSubTitleOfGraphObject(graphObject);\n    TextView subtitleView =\n        (TextView) view.findViewById(MobageFacebookResources.id(\"picker_subtitle\"));\n    if (subtitleView != null) {\n      if (subtitle != null) {\n        subtitleView.setText(subtitle, TextView.BufferType.SPANNABLE);\n        subtitleView.setVisibility(View.VISIBLE);\n      } else {\n        subtitleView.setVisibility(View.GONE);\n      }\n    }\n\n    if (getShowCheckbox()) {\n      CheckBox checkBox =\n          (CheckBox) view.findViewById(MobageFacebookResources.id(\"com_facebook_picker_checkbox\"));\n      updateCheckboxState(checkBox, isGraphObjectSelected(id));\n    }\n\n    if (getShowPicture()) {\n      URL pictureURL = getPictureUrlOfGraphObject(graphObject);\n\n      if (pictureURL != null) {\n        ImageView profilePic =\n            (ImageView) view.findViewById(MobageFacebookResources.id(\"com_facebook_picker_image\"));\n\n        // See if we have already pre-fetched this; if not, download it.\n        if (prefetchedPictureCache.containsKey(id)) {\n          ImageResponse response = prefetchedPictureCache.get(id);\n          profilePic.setImageBitmap(response.getBitmap());\n          profilePic.setTag(response.getRequest().getImageUrl());\n        } else {\n          downloadProfilePicture(id, pictureURL, profilePic);\n        }\n      }\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9382, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "resid!=0", "guardType": "IF {", "guardExpressionStart": 7999, "guardExpressionEnd": 8037, "guardBlockStart": 7999, "guardBlockEnd": 8306, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 8073, "focalAPIEnd": 8123, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setTextColor(int)", "textView.setVisibility(int)"], "useStart": [8131, 8220], "useEnd": [8212, 8260], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnlk2-custom/android_packages_apps_Phone/tree/master/src/com/android/phone/CallCard.java", "rawCode": "  /**\n   * Updates the main block of caller info on the CallCard (ie. the stuff in the primaryCallInfo\n   * block) based on the specified Call.\n   */\n  private void displayMainCallStatus(CallManager cm, Call call) {\n    if (DBG) log(\"displayMainCallStatus(call \" + call + \")...\");\n\n    if (call == null) {\n      // There's no call to display, presumably because the phone is idle.\n      mPrimaryCallInfo.setVisibility(View.GONE);\n      return;\n    }\n    mPrimaryCallInfo.setVisibility(View.VISIBLE);\n\n    Call.State state = call.getState();\n    if (DBG) log(\" - call.state: \" + call.getState());\n\n    switch (state) {\n      case ACTIVE:\n      case DISCONNECTING:\n        // update timer field\n        if (DBG) log(\"displayMainCallStatus: start periodicUpdateTimer\");\n        mCallTime.setActiveCallMode(call);\n        mCallTime.reset();\n        mCallTime.periodicUpdateTimer();\n\n        break;\n\n      case HOLDING:\n        // update timer field\n        mCallTime.cancelTimer();\n\n        break;\n\n      case DISCONNECTED:\n        // Stop getting timer ticks from this call\n        mCallTime.cancelTimer();\n\n        break;\n\n      case DIALING:\n      case ALERTING:\n        // Stop getting timer ticks from a previous call\n        mCallTime.cancelTimer();\n\n        break;\n\n      case INCOMING:\n      case WAITING:\n        // Stop getting timer ticks from a previous call\n        mCallTime.cancelTimer();\n\n        break;\n\n      case IDLE:\n        // The \"main CallCard\" should never be trying to display\n        // an idle call! In updateState(), if the phone is idle,\n        // we call updateNoCall(), which means that we shouldn't\n        // have passed a call into this method at all.\n        Log.w(LOG_TAG, \"displayMainCallStatus: IDLE call in the main call card!\");\n\n        // (It is possible, though, that we had a valid call which\n        // became idle *after* the check in updateState() but\n        // before we get here... So continue the best we can,\n        // with whatever (stale) info we can get from the\n        // passed-in Call object.)\n\n        break;\n\n      default:\n        Log.w(LOG_TAG, \"displayMainCallStatus: unexpected call state: \" + state);\n        break;\n    }\n\n    updateCardTitleWidgets(call.getPhone(), call);\n\n    if (PhoneUtils.isConferenceCall(call)) {\n      // Update onscreen info for a conference call.\n      updateDisplayForConference(call);\n    } else {\n      // Update onscreen info for a regular call (which presumably\n      // has only one connection.)\n      Connection conn = null;\n      int phoneType = call.getPhone().getPhoneType();\n      if (phoneType == Phone.PHONE_TYPE_CDMA) {\n        conn = call.getLatestConnection();\n      } else if ((phoneType == Phone.PHONE_TYPE_GSM) || (phoneType == Phone.PHONE_TYPE_SIP)) {\n        conn = call.getEarliestConnection();\n      } else {\n        throw new IllegalStateException(\"Unexpected phone type: \" + phoneType);\n      }\n\n      if (conn == null) {\n        if (DBG) log(\"displayMainCallStatus: connection is null, using default values.\");\n        // if the connection is null, we run through the behaviour\n        // we had in the past, which breaks down into trivial steps\n        // with the current implementation of getCallerInfo and\n        // updateDisplayForPerson.\n        CallerInfo info = PhoneUtils.getCallerInfo(getContext(), null /* conn */);\n        updateDisplayForPerson(info, Connection.PRESENTATION_ALLOWED, false, call);\n      } else {\n        if (DBG) log(\" - CONN: \" + conn + \", state = \" + conn.getState());\n        int presentation = conn.getNumberPresentation();\n\n        // make sure that we only make a new query when the current\n        // callerinfo differs from what we've been requested to display.\n        boolean runQuery = true;\n        Object o = conn.getUserData();\n        if (o instanceof PhoneUtils.CallerInfoToken) {\n          runQuery =\n              mPhotoTracker.isDifferentImageRequest(((PhoneUtils.CallerInfoToken) o).currentInfo);\n        } else {\n          runQuery = mPhotoTracker.isDifferentImageRequest(conn);\n        }\n\n        // Adding a check to see if the update was caused due to a Phone number update\n        // or CNAP update. If so then we need to start a new query\n        if (phoneType == Phone.PHONE_TYPE_CDMA) {\n          Object obj = conn.getUserData();\n          String updatedNumber = conn.getAddress();\n          String updatedCnapName = conn.getCnapName();\n          CallerInfo info = null;\n          if (obj instanceof PhoneUtils.CallerInfoToken) {\n            info = ((PhoneUtils.CallerInfoToken) o).currentInfo;\n          } else if (o instanceof CallerInfo) {\n            info = (CallerInfo) o;\n          }\n\n          if (info != null) {\n            if (updatedNumber != null && !updatedNumber.equals(info.phoneNumber)) {\n              if (DBG) log(\"- displayMainCallStatus: updatedNumber = \" + updatedNumber);\n              runQuery = true;\n            }\n            if (updatedCnapName != null && !updatedCnapName.equals(info.cnapName)) {\n              if (DBG) log(\"- displayMainCallStatus: updatedCnapName = \" + updatedCnapName);\n              runQuery = true;\n            }\n          }\n        }\n\n        if (runQuery) {\n          if (DBG) log(\"- displayMainCallStatus: starting CallerInfo query...\");\n          PhoneUtils.CallerInfoToken info =\n              PhoneUtils.startGetCallerInfo(getContext(), conn, this, call);\n          updateDisplayForPerson(info.currentInfo, presentation, !info.isFinal, call);\n        } else {\n          // No need to fire off a new query. We do still need\n          // to update the display, though (since we might have\n          // previously been in the \"conference call\" state.)\n          if (DBG) log(\"- displayMainCallStatus: using data we already have...\");\n          if (o instanceof CallerInfo) {\n            CallerInfo ci = (CallerInfo) o;\n            // Update CNAP information if Phone state change occurred\n            ci.cnapName = conn.getCnapName();\n            ci.numberPresentation = conn.getNumberPresentation();\n            ci.namePresentation = conn.getCnapNamePresentation();\n            if (DBG)\n              log(\n                  \"- displayMainCallStatus: CNAP data from Connection: \"\n                      + \"CNAP name=\"\n                      + ci.cnapName\n                      + \", Number/Name Presentation=\"\n                      + ci.numberPresentation);\n            if (DBG) log(\" ==> Got CallerInfo; updating display: ci = \" + ci);\n            updateDisplayForPerson(ci, presentation, false, call);\n          } else if (o instanceof PhoneUtils.CallerInfoToken) {\n            CallerInfo ci = ((PhoneUtils.CallerInfoToken) o).currentInfo;\n            if (DBG)\n              log(\n                  \"- displayMainCallStatus: CNAP data from Connection: \"\n                      + \"CNAP name=\"\n                      + ci.cnapName\n                      + \", Number/Name Presentation=\"\n                      + ci.numberPresentation);\n            if (DBG) log(\" ==> Got CallerInfoToken; updating display: ci = \" + ci);\n            updateDisplayForPerson(ci, presentation, true, call);\n          } else {\n            Log.w(\n                LOG_TAG,\n                \"displayMainCallStatus: runQuery was false, \"\n                    + \"but we didn't have a cached CallerInfo object! o = \"\n                    + o);\n            // TODO: any easy way to recover here (given that\n            // the CallCard is probably displaying stale info\n            // right now?) Maybe force the CallCard into the\n            // \"Unknown\" state?\n          }\n        }\n      }\n    }\n\n    // In some states we override the \"photo\" ImageView to be an\n    // indication of the current state, rather than displaying the\n    // regular photo as set above.\n    updatePhotoForCallState(call);\n\n    // One special feature of the \"number\" text field: For incoming\n    // calls, while the user is dragging the RotarySelector widget, we\n    // use mPhoneNumber to display a hint like \"Rotate to answer\".\n    if (mRotarySelectorHintTextResId != 0) {\n      // Display the hint!\n      mPhoneNumber.setText(mRotarySelectorHintTextResId);\n      mPhoneNumber.setTextColor(getResources().getColor(mRotarySelectorHintColorResId));\n      mPhoneNumber.setVisibility(View.VISIBLE);\n      mLabel.setVisibility(View.GONE);\n    }\n    // If we don't have a hint to display, just don't touch\n    // mPhoneNumber and mLabel. (Their text / color / visibility have\n    // already been set correctly, by either updateDisplayForPerson()\n    // or updateDisplayForConference().)\n  }\n"}, {"dataset": "setText", "exampleID": 9383, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setVisibility(int)"], "configurationStart": [63], "configurationEnd": [104], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 112, "focalAPIEnd": 139, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.sendAccessibilityEvent(*)"], "useStart": [147], "useEnd": [221], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ktoonsez/AOKP-I777/tree/master/packages/apps/Settings/src/com/android/settings/AccessibilityTutorialActivity.java", "rawCode": "    private void addInstructionSync(CharSequence text) {\n      mInstructions.setVisibility(View.VISIBLE);\n      mInstructions.setText(text);\n      mInstructions.sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_FOCUSED);\n    }\n"}, {"dataset": "setText", "exampleID": 9384, "initialization": ["CharSequence text = getIMIName(InputMethodInfo)", "TextView textView = findViewById(*)"], "initializationStart": [338, 626], "initializationEnd": [353, 660], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 941, "focalAPIEnd": 967, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setText(CharSequence)", "textView.getText()"], "useStart": [1033, 1234], "useEnd": [1063, 1253], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/packages/SystemUI/src/com/android/systemui/statusbar/tablet/InputMethodsPanel.java", "rawCode": "  private View createInputMethodItem(final InputMethodInfo imi, final InputMethodSubtype subtype) {\n    final CharSequence subtypeName;\n    if (subtype == null || subtype.overridesImplicitlyEnabledSubtype()) {\n      subtypeName = null;\n    } else {\n      subtypeName = getSubtypeName(imi, subtype);\n    }\n    final CharSequence imiName = getIMIName(imi);\n    final Drawable icon = getSubtypeIcon(imi, subtype);\n    final View view = View.inflate(mContext, R.layout.system_bar_input_methods_item, null);\n    final ImageView subtypeIcon = (ImageView) view.findViewById(R.id.item_icon);\n    final TextView itemTitle = (TextView) view.findViewById(R.id.item_title);\n    final TextView itemSubtitle = (TextView) view.findViewById(R.id.item_subtitle);\n    final ImageView settingsIcon = (ImageView) view.findViewById(R.id.item_settings_icon);\n    final View subtypeView = view.findViewById(R.id.item_subtype);\n    if (subtypeName == null) {\n      itemTitle.setText(imiName);\n      itemSubtitle.setVisibility(View.GONE);\n    } else {\n      itemTitle.setText(subtypeName);\n      itemSubtitle.setVisibility(View.VISIBLE);\n      itemSubtitle.setText(imiName);\n    }\n    subtypeIcon.setImageDrawable(icon);\n    subtypeIcon.setContentDescription(itemTitle.getText());\n    final String settingsActivity = imi.getSettingsActivity();\n    if (!TextUtils.isEmpty(settingsActivity)) {\n      settingsIcon.setOnClickListener(\n          new View.OnClickListener() {\n            @Override\n            public void onClick(View arg0) {\n              Intent intent = new Intent(Intent.ACTION_MAIN);\n              intent.setClassName(imi.getPackageName(), settingsActivity);\n              intent.setFlags(\n                  Intent.FLAG_ACTIVITY_NEW_TASK\n                      | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED\n                      | Intent.FLAG_ACTIVITY_CLEAR_TOP);\n              startActivity(intent);\n              closePanel(true);\n            }\n          });\n    } else {\n      // Do not show the settings icon if the IME does not have a settings preference\n      view.findViewById(R.id.item_vertical_separator).setVisibility(View.GONE);\n      settingsIcon.setVisibility(View.GONE);\n    }\n    mRadioViewAndImiMap.put(\n        subtypeView, new Pair<InputMethodInfo, InputMethodSubtype>(imi, subtype));\n    subtypeView.setOnClickListener(\n        new View.OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            Pair<InputMethodInfo, InputMethodSubtype> imiAndSubtype = updateRadioButtonsByView(v);\n            closePanel(false);\n            setInputMethodAndSubtype(imiAndSubtype.first, imiAndSubtype.second);\n          }\n        });\n    return view;\n  }\n"}, {"dataset": "setText", "exampleID": 9385, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [294], "initializationEnd": [347], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["textView.setTextAppearance(Context,int)"], "configurationStart": [481], "configurationEnd": [535], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 670, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benetech/martus-android/tree/master/actionbarSherlock/library/src/com/actionbarsherlock/internal/widget/ActionBarContextView.java", "rawCode": "  private void initTitle() {\n    if (mTitleLayout == null) {\n      LayoutInflater inflater = LayoutInflater.from(getContext());\n      inflater.inflate(R.layout.abs__action_bar_title_item, this);\n      mTitleLayout = (LinearLayout) getChildAt(getChildCount() - 1);\n      mTitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_title);\n      mSubtitleView = (TextView) mTitleLayout.findViewById(R.id.abs__action_bar_subtitle);\n      if (mTitleStyleRes != 0) {\n        mTitleView.setTextAppearance(mContext, mTitleStyleRes);\n      }\n      if (mSubtitleStyleRes != 0) {\n        mSubtitleView.setTextAppearance(mContext, mSubtitleStyleRes);\n      }\n    }\n\n    mTitleView.setText(mTitle);\n    mSubtitleView.setText(mSubtitle);\n\n    final boolean hasTitle = !TextUtils.isEmpty(mTitle);\n    final boolean hasSubtitle = !TextUtils.isEmpty(mSubtitle);\n    mSubtitleView.setVisibility(hasSubtitle ? VISIBLE : GONE);\n    mTitleLayout.setVisibility(hasTitle || hasSubtitle ? VISIBLE : GONE);\n    if (mTitleLayout.getParent() == null) {\n      addView(mTitleLayout);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9386, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 69, "guardExpressionEnd": 92, "guardBlockStart": 69, "guardBlockEnd": 133, "focalAPI": " = textView.setText(text)", "focalAPIStart": 101, "focalAPIEnd": 126, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/greendroid/GreenDroid/src/greendroid/widget/GDActionBar.java", "rawCode": "  public void setTitle(CharSequence title) {\n    mTitle = title;\n    if (mTitleView != null) {\n      mTitleView.setText(title);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9387, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 74, "guardExpressionEnd": 97, "guardBlockStart": 74, "guardBlockEnd": 417, "focalAPI": " = textView.setText(text)", "focalAPIStart": 106, "focalAPIEnd": 131, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brk3/finch/tree/master/libs/JakeWharton-ActionBarSherlock-2eabf25/library/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  private void setTitleImpl(CharSequence title) {\n    mTitle = title;\n    if (mTitleView != null) {\n      mTitleView.setText(title);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n    if (mLogoNavItem != null) {\n      mLogoNavItem.setTitle(title);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9388, "initialization": ["CharSequence text = String.subSequence(int,int)"], "initializationStart": [146], "initializationEnd": [171], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 269, "focalAPIEnd": 294, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jjuran/noisegate-android/tree/master/src/Teletype.java", "rawCode": "  void update() {\n    CharSequence newText = text;\n\n    if (mark >= text.length()) {\n      mark = -1;\n    }\n\n    if (mark >= 0) {\n      newText = text.subSequence(0, mark);\n    }\n\n    if (cursorState == 1) {\n      newText = newText + \"\\u2588\"; // full block\n    }\n\n    textView.setText(newText);\n  }\n"}, {"dataset": "setText", "exampleID": 9389, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 196, "focalAPIEnd": 225, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_frameworks_base/tree/master/core/java/android/app/ProgressDialog.java", "rawCode": "  @Override\n  public void setMessage(CharSequence message) {\n    if (mProgress != null) {\n      if (mProgressStyle == STYLE_HORIZONTAL) {\n        super.setMessage(message);\n      } else {\n        mMessageView.setText(message);\n      }\n    } else {\n      mMessage = message;\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9390, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 169, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tedk/Dash/tree/master/main/src/main/java/com/google/android/apps/dashclock/ui/UndoBarController.java", "rawCode": "  public void showUndoBar(boolean immediate, CharSequence message, Bundle undoToken) {\n    mBarShown = true;\n    mUndoToken = undoToken;\n    mUndoMessage = message;\n    mMessageView.setText(mUndoMessage);\n\n    mBarView.setVisibility(View.VISIBLE);\n    if (immediate) {\n      mBarView.setAlpha(1);\n    } else {\n      mBarAnimator.cancel();\n      mBarAnimator\n          .alpha(1)\n          .setDuration(mBarView.getResources().getInteger(android.R.integer.config_shortAnimTime))\n          .setListener(null);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9391, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 55, "focalAPIEnd": 76, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/romainguefveneu/naonedbus/tree/master/src/net/naonedbus/helper/HeaderHelper.java", "rawCode": "  public void setTitle(final CharSequence title) {\n    mTitle.setText(title);\n  }\n"}, {"dataset": "setText", "exampleID": 9392, "initialization": ["TextView textView = findViewById(*)"], "initializationStart": [247], "initializationEnd": [284], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 290, "focalAPIEnd": 318, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/g3tsum/rb_apps_Settings/tree/master/src/com/android/settings/fuelgauge/PowerGaugePreference.java", "rawCode": "  @Override\n  protected void onBindView(View view) {\n    super.onBindView(view);\n\n    final ProgressBar progress = (ProgressBar) view.findViewById(android.R.id.progress);\n    progress.setProgress(mProgress);\n\n    final TextView text1 = (TextView) view.findViewById(android.R.id.text1);\n    text1.setText(mProgressText);\n  }\n"}, {"dataset": "setText", "exampleID": 9393, "initialization": ["TextView textView = findViewById(*)", "CharSequence text = ResultHandler.getDisplayContents()"], "initializationStart": [2183, 2257], "initializationEnd": [2220, 2291], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 2297, "focalAPIEnd": 2338, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setTextSize(int,int)"], "useStart": [2486], "useEnd": [2554], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android/tree/master/src/com/google/zxing/client/android/CaptureActivity.java", "rawCode": "  private void handleDecodeInternally(Result rawResult, Bitmap barcode) {\n    statusView.setVisibility(View.GONE);\n    viewfinderView.setVisibility(View.GONE);\n    resultView.setVisibility(View.VISIBLE);\n\n    ImageView barcodeImageView = (ImageView) findViewById(R.id.barcode_image_view);\n    if (barcode == null) {\n      // barcodeImageView.setImageBitmap(BitmapFactory.decodeResource(getResources(),\n      // R.drawable.launcher_icon));\n    } else {\n      barcodeImageView.setImageBitmap(barcode);\n    }\n\n    TextView formatTextView = (TextView) findViewById(R.id.format_text_view);\n    formatTextView.setText(rawResult.getBarcodeFormat().toString());\n\n    ResultHandler resultHandler = ResultHandlerFactory.makeResultHandler(this, rawResult);\n    TextView typeTextView = (TextView) findViewById(R.id.type_text_view);\n    typeTextView.setText(resultHandler.getType().toString());\n\n    DateFormat formatter = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);\n    String formattedTime = formatter.format(new Date(rawResult.getTimestamp()));\n    TextView timeTextView = (TextView) findViewById(R.id.time_text_view);\n    timeTextView.setText(formattedTime);\n\n    TextView metaTextView = (TextView) findViewById(R.id.meta_text_view);\n    View metaTextViewLabel = findViewById(R.id.meta_text_view_label);\n    metaTextView.setVisibility(View.GONE);\n    metaTextViewLabel.setVisibility(View.GONE);\n    @SuppressWarnings(\"unchecked\")\n    Map<ResultMetadataType, Object> metadata =\n        (Map<ResultMetadataType, Object>) rawResult.getResultMetadata();\n    if (metadata != null) {\n      StringBuilder metadataText = new StringBuilder(20);\n      for (Map.Entry<ResultMetadataType, Object> entry : metadata.entrySet()) {\n        if (DISPLAYABLE_METADATA_TYPES.contains(entry.getKey())) {\n          metadataText.append(entry.getValue()).append('\\n');\n        }\n      }\n      if (metadataText.length() > 0) {\n        metadataText.setLength(metadataText.length() - 1);\n        metaTextView.setText(metadataText);\n        metaTextView.setVisibility(View.VISIBLE);\n        metaTextViewLabel.setVisibility(View.VISIBLE);\n      }\n    }\n\n    TextView contentsTextView = (TextView) findViewById(R.id.contents_text_view);\n    CharSequence displayContents = resultHandler.getDisplayContents();\n    contentsTextView.setText(displayContents);\n    // Crudely scale betweeen 22 and 32 -- bigger font for shorter text\n    int scaledSize = Math.max(22, 32 - displayContents.length() / 4);\n    contentsTextView.setTextSize(TypedValue.COMPLEX_UNIT_SP, scaledSize);\n    /*\n    int buttonCount = resultHandler.getButtonCount();\n    ViewGroup buttonView = (ViewGroup) findViewById(R.id.result_button_view);\n    buttonView.requestFocus();\n    for (int x = 0; x < ResultHandler.MAX_BUTTON_COUNT; x++) {\n    TextView button = (TextView) buttonView.getChildAt(x);\n    if (x < buttonCount) {\n    button.setVisibility(View.VISIBLE);\n    button.setText(resultHandler.getButtonText(x));\n    button.setOnClickListener(new ResultButtonListener(resultHandler, x));\n    } else {\n    button.setVisibility(View.GONE);\n    }\n    }\n    */\n    if (copyToClipboard) {\n      ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);\n      clipboard.setText(displayContents);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9394, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(resid)", "focalAPIStart": 3576, "focalAPIEnd": 3605, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/bluetooth/BluetoothSettings.java", "rawCode": "  private void updateContent(int bluetoothState, boolean scanState) {\n    final PreferenceScreen preferenceScreen = getPreferenceScreen();\n    int messageId = 0;\n\n    switch (bluetoothState) {\n      case BluetoothAdapter.STATE_ON:\n        preferenceScreen.removeAll();\n        preferenceScreen.setOrderingAsAdded(true);\n        mDevicePreferenceMap.clear();\n\n        // This device\n        if (mMyDevicePreference == null) {\n          mMyDevicePreference = new Preference(getActivity());\n        }\n        mMyDevicePreference.setTitle(mLocalAdapter.getName());\n        if (getResources().getBoolean(com.android.internal.R.bool.config_voice_capable)) {\n          mMyDevicePreference.setIcon(R.drawable.ic_bt_cellphone); // for phones\n        } else {\n          mMyDevicePreference.setIcon(R.drawable.ic_bt_laptop); // for tablets, etc.\n        }\n        mMyDevicePreference.setPersistent(false);\n        mMyDevicePreference.setEnabled(true);\n        preferenceScreen.addPreference(mMyDevicePreference);\n\n        if (mDiscoverableEnabler == null) {\n          mDiscoverableEnabler =\n              new BluetoothDiscoverableEnabler(getActivity(), mLocalAdapter, mMyDevicePreference);\n          mDiscoverableEnabler.resume();\n          LocalBluetoothManager.getInstance(getActivity())\n              .setDiscoverableEnabler(mDiscoverableEnabler);\n        }\n\n        // Paired devices category\n        if (mPairedDevicesCategory == null) {\n          mPairedDevicesCategory = new PreferenceCategory(getActivity());\n        } else {\n          mPairedDevicesCategory.removeAll();\n        }\n        addDeviceCategory(\n            mPairedDevicesCategory,\n            R.string.bluetooth_preference_paired_devices,\n            BluetoothDeviceFilter.BONDED_DEVICE_FILTER);\n        int numberOfPairedDevices = mPairedDevicesCategory.getPreferenceCount();\n\n        mDiscoverableEnabler.setNumberOfPairedDevices(numberOfPairedDevices);\n\n        // Available devices category\n        if (mAvailableDevicesCategory == null) {\n          mAvailableDevicesCategory = new BluetoothProgressCategory(getActivity(), null);\n        } else {\n          mAvailableDevicesCategory.removeAll();\n        }\n        addDeviceCategory(\n            mAvailableDevicesCategory,\n            R.string.bluetooth_preference_found_devices,\n            BluetoothDeviceFilter.UNBONDED_DEVICE_FILTER);\n        int numberOfAvailableDevices = mAvailableDevicesCategory.getPreferenceCount();\n        mAvailableDevicesCategoryIsPresent = true;\n\n        if (numberOfAvailableDevices == 0) {\n          preferenceScreen.removePreference(mAvailableDevicesCategory);\n          mAvailableDevicesCategoryIsPresent = false;\n        }\n\n        if (numberOfPairedDevices == 0) {\n          preferenceScreen.removePreference(mPairedDevicesCategory);\n          if (scanState == true) {\n            mActivityStarted = false;\n            startScanning();\n          } else {\n            if (!mAvailableDevicesCategoryIsPresent) {\n              getPreferenceScreen().addPreference(mAvailableDevicesCategory);\n            }\n          }\n        }\n        getActivity().invalidateOptionsMenu();\n        return; // not break\n\n      case BluetoothAdapter.STATE_TURNING_OFF:\n        messageId = R.string.bluetooth_turning_off;\n        break;\n\n      case BluetoothAdapter.STATE_OFF:\n        messageId = R.string.bluetooth_empty_list_bluetooth_off;\n        break;\n\n      case BluetoothAdapter.STATE_TURNING_ON:\n        messageId = R.string.bluetooth_turning_on;\n        break;\n    }\n\n    setDeviceListGroup(preferenceScreen);\n    removeAllDevices();\n    mEmptyView.setText(messageId);\n    getActivity().invalidateOptionsMenu();\n  }\n"}, {"dataset": "setText", "exampleID": 9395, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 145, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [204, 251], "useEnd": [230, 280], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zhaoyuqing/ActionBarSherlock/tree/master/actionbarsherlock/src/com/actionbarsherlock/widget/SuggestionsAdapter.java", "rawCode": "  private void setViewText(TextView v, CharSequence text) {\n    // Set the text even if it's null, since we need to clear any previous text.\n    v.setText(text);\n\n    if (TextUtils.isEmpty(text)) {\n      v.setVisibility(View.GONE);\n    } else {\n      v.setVisibility(View.VISIBLE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9396, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "textView!=null", "guardType": "IF {", "guardExpressionStart": 81, "guardExpressionEnd": 107, "guardBlockStart": 81, "guardBlockEnd": 503, "focalAPI": " = textView.setText(text)", "focalAPIStart": 116, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)"], "useStart": [155], "useEnd": [217], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/PROMAND/MINK/tree/master/libs/action_bar/src/com/actionbarsherlock/internal/widget/ActionBarView.java", "rawCode": "  public void setSubtitle(CharSequence subtitle) {\n    mSubtitle = subtitle;\n    if (mSubtitleView != null) {\n      mSubtitleView.setText(subtitle);\n      mSubtitleView.setVisibility(subtitle != null ? VISIBLE : GONE);\n      final boolean visible =\n          mExpandedActionView == null\n              && (mDisplayOptions & ActionBar.DISPLAY_SHOW_TITLE) != 0\n              && (!TextUtils.isEmpty(mTitle) || !TextUtils.isEmpty(mSubtitle));\n      mTitleLayout.setVisibility(visible ? VISIBLE : GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9397, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 49, "focalAPIEnd": 75, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Vallle/timeline-gamified/tree/master/src/com/bjorsond/android/timeline/TimelineActivity.java", "rawCode": "  public void setTitle(CharSequence title) {\n    screenTitle.setText(title);\n  }\n"}, {"dataset": "setText", "exampleID": 9398, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 55, "guardExpressionEnd": 76, "guardBlockStart": 55, "guardBlockEnd": 221, "focalAPI": " = textView.setText(text)", "focalAPIStart": 85, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [124, 181], "useEnd": [160, 214], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android/tree/master/src/edu/mit/mitmobile2/TwoLineActionRow.java", "rawCode": "  public void setSubtitle(CharSequence subtitle) {\n    if (subtitle != null) {\n      mSubtitleView.setText(subtitle);\n      mSubtitleView.setVisibility(VISIBLE);\n    } else {\n      mSubtitleView.setVisibility(GONE);\n    }\n  }\n"}, {"dataset": "setText", "exampleID": 9399, "initialization": ["TextView textView = findViewById(*)", "CharSequence text = AccountType.getDisplayLabel(Context)"], "initializationStart": [308, 698], "initializationEnd": [351, 735], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": " = textView.setText(text)", "focalAPIStart": 784, "focalAPIEnd": 804, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setText(CharSequence)"], "useStart": [869], "useEnd": [890], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamSourcery/packages_apps_Contacts/tree/master/src/com/android/contacts/detail/ContactDetailFragment.java", "rawCode": "    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n      final View resultView =\n          (convertView != null)\n              ? convertView\n              : mInflater.inflate(R.layout.account_selector_list_item, parent, false);\n\n      final TextView text1 = (TextView) resultView.findViewById(android.R.id.text1);\n      final TextView text2 = (TextView) resultView.findViewById(android.R.id.text2);\n      final ImageView icon = (ImageView) resultView.findViewById(android.R.id.icon);\n\n      final AccountType accountType = mAccountTypes.get(position);\n\n      CharSequence action = accountType.getInviteContactActionLabel(mContext);\n      CharSequence label = accountType.getDisplayLabel(mContext);\n      if (TextUtils.isEmpty(action)) {\n        text1.setText(label);\n        text2.setVisibility(View.GONE);\n      } else {\n        text1.setText(action);\n        text2.setVisibility(View.VISIBLE);\n        text2.setText(label);\n      }\n      icon.setImageDrawable(accountType.getDisplayIcon(mContext));\n\n      return resultView;\n    }\n"}, {"dataset": "setText", "exampleID": 9400, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "text!=null", "guardType": "IF {", "guardExpressionStart": 56, "guardExpressionEnd": 78, "guardBlockStart": 56, "guardBlockEnd": 336, "focalAPI": " = textView.setText(text)", "focalAPIStart": 87, "focalAPIEnd": 118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["textView.setVisibility(int)", "textView.setVisibility(int)"], "useStart": [126, 292], "useEnd": [166, 329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mnlk2-custom/android_packages_apps_Phone/tree/master/src/com/android/phone/EnableFdnScreen.java", "rawCode": "  private void showStatus(CharSequence statusMsg) {\n    if (statusMsg != null) {\n      mStatusField.setText(statusMsg);\n      mStatusField.setVisibility(View.VISIBLE);\n      mPinFieldContainer.setVisibility(View.GONE);\n    } else {\n      mPinFieldContainer.setVisibility(View.VISIBLE);\n      mStatusField.setVisibility(View.GONE);\n    }\n  }\n"}]