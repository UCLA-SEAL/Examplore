[{"dataset": "query", "exampleID": 8101, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 226, "focalAPIEnd": 311, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 329, "followUpCheckExpressionEnd": 351, "followUpCheckBlockStart": 329, "followUpCheckBlockEnd": 408, "use": ["insertPhoto(cursor,SQLiteStatement,SQLiteStatement)", "cursor.close()"], "useStart": [362, 431], "useEnd": [399, 440], "hasFinally": 1, "cleanUpCall": ["Cursor.close()", "SQLiteStatement.close()", "SQLiteStatement.close()"], "finallyExpressionStart": 415, "finallyExpressionEnd": 423, "finallyBlockStart": 415, "finallyBlockEnd": 498, "cleanUpCallStart": [431, 448, 470], "cleanUpCallEnd": [440, 462, 491], "url": "https://github.com/classicnerd/android_packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/LegacyContactImporter.java", "rawCode": "  private void importPhotos() {\n    SQLiteStatement insert = mTargetDb.compileStatement(PhotoInsert.INSERT_SQL);\n    SQLiteStatement photoIdUpdate = mTargetDb.compileStatement(PhotoIdUpdate.UPDATE_SQL);\n    Cursor c =\n        mSourceDb.query(PhotosQuery.TABLE, PhotosQuery.COLUMNS, null, null, null, null, null);\n    try {\n      while (c.moveToNext()) {\n        insertPhoto(c, insert, photoIdUpdate);\n      }\n    } finally {\n      c.close();\n      insert.close();\n      photoIdUpdate.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8102, "initialization": ["SQLiteDatabase database = AcalDBHelper.getWritableDatabase()"], "initializationStart": [264], "initializationEnd": [294], "hasTryCatch": 1, "exceptionType": "SQLiteException", "exceptionHandlingCall": ["getStackTraceString(*)", "i(String,*)", "SQLiteDatabase.close()", "AcalDBHelper.close()", "releaseMetaLock()"], "tryExpressionStart": 425, "tryExpressionEnd": 429, "tryBlockStart": 425, "tryBlockEnd": 719, "catchExpressionStart": 511, "catchExpressionEnd": 537, "catchBlockStart": 511, "catchBlockEnd": 719, "exceptionHandlingCallStart": [556, 545, 639, 657, 681], "exceptionHandlingCallEnd": [582, 583, 649, 673, 698], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 447, "focalAPIEnd": 503, "followUpCheck": "cursor.getCount() < 1", "checkType": "IF", "followUpCheckExpressionStart": 761, "followUpCheckExpressionEnd": 788, "followUpCheckBlockStart": 761, "followUpCheckBlockEnd": 1226, "use": ["database.close()", "cursor.moveToFirst()", "cursorRowToContentValues(cursor,ContentValues)", "cursor.close()", "database.delete(String,String,String[])", "database.close()"], "useStart": [639, 1133, 1164, 1397, 2013, 2133], "useEnd": [649, 1154, 1217, 1412, 2046, 2143], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1360, "finallyExpressionEnd": 1368, "finallyBlockStart": 1360, "finallyBlockEnd": 1419, "cleanUpCallStart": [1397], "cleanUpCallEnd": [1412], "url": "https://github.com/ujayant/acal/tree/master/src/com/morphoss/acal/database/cachemanager/CacheManager.java", "rawCode": "  /** Called on start up. if safe==false flush cache. set safe to false regardless. */\n  private void loadState() {\n    acquireMetaLock();\n    ContentValues data = new ContentValues();\n    AcalDBHelper dbHelper = new AcalDBHelper(context);\n    SQLiteDatabase db = dbHelper.getWritableDatabase();\n\n    // load start/end range from meta table\n    AcalDateTime defaultWindow = new AcalDateTime();\n    Cursor mCursor = null;\n    try {\n      mCursor = db.query(META_TABLE, null, null, null, null, null, null);\n    } catch (SQLiteException e) {\n      Log.i(TAG, Log.getStackTraceString(e));\n      // AcalDBHelper.recoverDatabase(db,true);\n      db.close();\n      dbHelper.close();\n      releaseMetaLock();\n      return;\n    }\n    int closedState = 0;\n    try {\n      if (mCursor.getCount() < 1) {\n        if (CacheManager.DEBUG && Constants.LOG_DEBUG)\n          Log.println(Constants.LOGD, TAG, \"Initializing cache for first use.\");\n        data.put(FIELD_CLOSED, 0);\n        data.put(FIELD_COUNT, 0);\n        data.put(FIELD_START, defaultWindow.getMillis());\n        data.put(FIELD_END, defaultWindow.getMillis());\n      } else {\n        mCursor.moveToFirst();\n        DatabaseUtils.cursorRowToContentValues(mCursor, data);\n      }\n      closedState = data.getAsInteger(FIELD_CLOSED);\n    } catch (Exception e) {\n      Log.i(TAG, Log.getStackTraceString(e));\n    } finally {\n      if (mCursor != null) mCursor.close();\n    }\n\n    if (!(closedState == 1)) {\n      Log.println(\n          Constants.LOGI, TAG, \"Application not closed correctly last time. Resetting cache.\");\n      Toast.makeText(\n              context,\n              \"aCal was not correctly shutdown last time.\\nRebuilding cache - It may take some time before events are visible.\",\n              Toast.LENGTH_LONG)\n          .show();\n      this.CTMinstance.clearCache();\n      data.put(FIELD_COUNT, 0);\n      data.put(FIELD_START, defaultWindow.getMillis());\n      data.put(FIELD_END, defaultWindow.getMillis());\n    }\n    data.put(FIELD_CLOSED, 1);\n    db.delete(META_TABLE, null, null);\n    data.remove(FIELD_ID);\n    this.metaRow = db.insert(META_TABLE, null, data);\n    db.close();\n    dbHelper.close();\n    long start = data.getAsLong(FIELD_START);\n    long end = data.getAsLong(FIELD_END);\n    AcalDateRange range = null;\n    if (start >= 0 && end >= 0)\n      range = new AcalDateRange(AcalDateTime.fromMillis(start), AcalDateTime.fromMillis(end));\n\n    window =\n        new CacheWindow(\n            lookForward,\n            lookBack,\n            maxSize,\n            minPaddingBack,\n            minPaddingForward,\n            increment,\n            this,\n            new AcalDateTime());\n    if (range != null) window.setWindowSize(range);\n\n    rm.addListener(this);\n    releaseMetaLock();\n  }\n"}, {"dataset": "query", "exampleID": 8103, "initialization": ["String[] selectionArgs = toString(*)"], "initializationStart": [230], "initializationEnd": [260], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["warn(String,*)"], "tryExpressionStart": 106, "tryExpressionEnd": 110, "tryBlockStart": 106, "tryBlockEnd": 983, "catchExpressionStart": 891, "catchExpressionEnd": 917, "catchBlockStart": 891, "catchBlockEnd": 983, "exceptionHandlingCallStart": [925], "exceptionHandlingCallEnd": [976], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 481, "focalAPIEnd": 686, "followUpCheck": "cursor.getCount() != 0", "checkType": "IF", "followUpCheckExpressionStart": 695, "followUpCheckExpressionEnd": 719, "followUpCheckBlockStart": 695, "followUpCheckBlockEnd": 812, "use": ["cursor.moveToFirst()", "cursor.getBlob(int)", "cursor.close()"], "useStart": [730, 788, 819], "useEnd": [747, 802, 830], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kops/osmdroid-itinerennes/tree/master/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/MBTilesFileArchive.java", "rawCode": "  @Override\n  public InputStream getInputStream(final ITileSource pTileSource, final MapTile pTile) {\n    try {\n      InputStream ret = null;\n      final String[] tile = {COL_TILES_TILE_DATA};\n      final String[] xyz = {\n        Integer.toString(pTile.getX()),\n        Double.toString(\n            Math.pow(2, pTile.getZoomLevel()) - pTile.getY() - 1) // Use Google Tiling Spec\n        ,\n        Integer.toString(pTile.getZoomLevel())\n      };\n\n      final Cursor cur =\n          mDatabase.query(\n              TABLE_TILES,\n              tile,\n              \"tile_column=? and tile_row=? and zoom_level=?\",\n              xyz,\n              null,\n              null,\n              null);\n\n      if (cur.getCount() != 0) {\n        cur.moveToFirst();\n        ret = new ByteArrayInputStream(cur.getBlob(0));\n      }\n      cur.close();\n      if (ret != null) {\n        return ret;\n      }\n    } catch (final Throwable e) {\n      logger.warn(\"Error getting db stream: \" + pTile, e);\n    }\n\n    return null;\n  }\n"}, {"dataset": "query", "exampleID": 8104, "initialization": ["String[] selectionArgs = valueOf(long)"], "initializationStart": [132], "initializationEnd": [157], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 93, "tryExpressionEnd": 97, "tryBlockStart": 93, "tryBlockEnd": 479, "catchExpressionStart": 394, "catchExpressionEnd": 414, "catchBlockStart": 394, "catchBlockEnd": 479, "exceptionHandlingCallStart": [422], "exceptionHandlingCallEnd": [472], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 182, "focalAPIEnd": 386, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Gris87/EGE/tree/master/src/com/gris/ege/db/ResultsOpenHelper.java", "rawCode": "  public Cursor getAnswers(SQLiteDatabase aDb, long aResultId) {\n    Cursor res = null;\n\n    try {\n      String[] aSelectionArgs = {String.valueOf(aResultId)};\n      res =\n          aDb.query(\n              ANSWERS_TABLE_NAME,\n              ANSWERS_COLUMNS,\n              COLUMN_RESULT_ID + \"=?\",\n              aSelectionArgs,\n              null,\n              null,\n              null);\n    } catch (Exception e) {\n      Log.e(TAG, \"Problem occurred while getAnswers\", e);\n    }\n\n    return res;\n  }\n"}, {"dataset": "query", "exampleID": 8105, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 285, "focalAPIEnd": 471, "followUpCheck": "cursor.getCount() > 0", "checkType": "IF", "followUpCheckExpressionStart": 478, "followUpCheckExpressionEnd": 505, "followUpCheckBlockStart": 478, "followUpCheckBlockEnd": 585, "use": ["cursor.moveToFirst()", "new DbMetadata(cursor)", "cursor.close()", "database.insert(String,String,ContentValues)"], "useStart": [514, 555, 590, 773], "useEnd": [535, 578, 605, 850], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/element14/nocturne/tree/master/Android/mobile/src/main/java/com/projectnocturne/datamodel/DataModel.java", "rawCode": "  private DbMetadata getDbMetadata() {\n    DbMetadata dbMetaDta = null;\n\n    final String selectionSql = null;\n    final String[] selectionArgs = null;\n    final String groupBy = null;\n    final String having = null;\n    final String orderBy = null;\n    final Cursor results =\n        db.query(\n            DbMetadata.DATABASE_TABLE_NAME,\n            null,\n            selectionSql,\n            selectionArgs,\n            groupBy,\n            having,\n            orderBy);\n\n    if (results.getCount() > 0) {\n      results.moveToFirst();\n      dbMetaDta = new DbMetadata(results);\n    }\n    results.close();\n    if (dbMetaDta == null) {\n      dbMetaDta = new DbMetadata();\n      dbMetaDta.lastUpdated = new DateTime().toString(NocturneApplication.simpleDateFmtStrDb);\n      db.insert(DbMetadata.DATABASE_TABLE_NAME, null, dbMetaDta.getContentValues());\n      NocturneApplication.logMessage(\n          Log.DEBUG, LOG_TAG + \"getDbMetadata() new metadata object created\");\n    }\n    return dbMetaDta;\n  }\n"}, {"dataset": "query", "exampleID": 8106, "initialization": ["SQLiteDatabase database = getReadableDatabase()"], "initializationStart": [395], "initializationEnd": [421], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 363, "tryExpressionEnd": 367, "tryBlockStart": 363, "tryBlockEnd": 943, "catchExpressionStart": 673, "catchExpressionEnd": 693, "catchBlockStart": 673, "catchBlockEnd": 766, "exceptionHandlingCallStart": [701], "exceptionHandlingCallEnd": [759], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 433, "focalAPIEnd": 507, "followUpCheck": "!cursor.isNull(0)", "checkType": "IF", "followUpCheckExpressionStart": 558, "followUpCheckExpressionEnd": 588, "followUpCheckBlockStart": 558, "followUpCheckBlockEnd": 631, "use": ["cursor.moveToFirst()", "cursor.getString(int)", "cursor.close()", "database.close()", "cursor.close()"], "useStart": [535, 608, 638, 655, 824], "useEnd": [550, 622, 647, 665, 833], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 767, "finallyExpressionEnd": 775, "finallyBlockStart": 767, "finallyBlockEnd": 943, "cleanUpCallStart": [638], "cleanUpCallEnd": [647], "url": "https://github.com/chrispbailey/ToDo-List-Widget/tree/master/src/org/chrisbailey/todo/db/ToDoDatabase.java", "rawCode": "  /**\n   * Reads the value of the parameter identified by <code>name</code>\n   *\n   * @param name\n   * @return String value of the parameter, <code>null</code> otherwise\n   */\n  private String getVariable(String name) {\n    String[] cols = new String[] {\"value\"};\n    String[] whereArgs = new String[] {name};\n\n    Cursor c = null;\n\n    String result = null;\n    try {\n      SQLiteDatabase db = this.getReadableDatabase();\n      c = db.query(VARIABLE_TABLE_NAME, cols, \"name=?\", whereArgs, null, null, null);\n      boolean hasResult = c.moveToFirst();\n      if (hasResult && !c.isNull(0)) {\n        result = c.getString(0);\n      }\n      c.close();\n      db.close();\n    } catch (Exception e) {\n      Log.e(LOG_TAG, \"Error getting variable [\" + name + \"]\", e);\n    } finally {\n      if (null != c) {\n        try {\n          c.close();\n        } catch (Exception e) {\n          Log.e(LOG_TAG, \"Error closing cursor\", e);\n        }\n      }\n    }\n    return result;\n  }\n"}, {"dataset": "query", "exampleID": 8107, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 74, "focalAPIEnd": 328, "followUpCheck": "cursor == null || cursor.getCount() == 0", "checkType": "IF", "followUpCheckExpressionStart": 335, "followUpCheckExpressionEnd": 380, "followUpCheckBlockStart": 335, "followUpCheckBlockEnd": 394, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hamo26/EECE419Group7/tree/master/schedushare-android/SchedUShare/src/com/schedushare/android/db/SchedulesDataSource.java", "rawCode": "  public boolean isScheduleExists(long sid) {\n    Cursor cursor =\n        this.database.query(\n            SchedulesSQLiteHelper.TABLE_SCHEDULE,\n            SchedulesDataSource.allScheduleColumns,\n            SchedulesSQLiteHelper.COLUMN_SID + \" = \" + sid,\n            null,\n            null,\n            null,\n            null);\n\n    if (cursor == null || cursor.getCount() == 0) return false;\n\n    return true;\n  }\n"}, {"dataset": "query", "exampleID": 8108, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 175, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggrassi/challp/tree/master/traildevils/src/ch/hsr/challp/and4/billing/PurchaseDatabase.java", "rawCode": "  /**\n   * Returns a cursor that can be used to read all the rows and columns of the \"purchased items\"\n   * table.\n   */\n  public Cursor queryAllPurchasedItems() {\n    return mDb.query(PURCHASED_ITEMS_TABLE_NAME, PURCHASED_COLUMNS, null, null, null, null, null);\n  }\n"}, {"dataset": "query", "exampleID": 8109, "initialization": ["SQLiteDatabase database = SQLiteHelper.getWritableDatabase()"], "initializationStart": [210], "initializationEnd": [247], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 744, "focalAPIEnd": 815, "followUpCheck": "cursor.getCount() > 0", "checkType": "IF", "followUpCheckExpressionStart": 871, "followUpCheckExpressionEnd": 897, "followUpCheckBlockStart": 871, "followUpCheckBlockEnd": 1617, "use": ["cursor.moveToFirst()", "cursor.getInt(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.moveToNext()"], "useStart": [906, 1029, 1070, 1115, 1165, 1214, 1265, 1435, 1478, 1521, 1583], "useEnd": [926, 1045, 1089, 1134, 1184, 1233, 1284, 1454, 1497, 1540, 1602], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cainan/TccInatel/tree/master/GerenciadorFinanceiro/src/br/com/tcc/model/database/DatabaseDelegate.java", "rawCode": "  /**\n   * Read the bills of current day\n   *\n   * @param month\n   * @param year\n   */\n  public synchronized ArrayList<Conta> readDailyBills(int day, int month, int year) {\n    // Open Database\n    mDataBase = mDatabaseHelper.getWritableDatabase();\n\n    ArrayList<Conta> arrayConta = new ArrayList<Conta>();\n    Conta conta;\n\n    String[] allColumns = {\n      \"_id\", \"conta\", \"valor\", \"vencimento\", \"notificar\", \"codigo\", \"status\", \"dia\", \"mes\", \"ano\"\n    };\n\n    String where;\n    where = \"dia=\" + day + \" and mes=\" + month + \" and ano=\" + year + \" and status=\" + \"0\";\n    Log.d(\"log\", \"dia \" + day);\n    Log.d(\"log\", \"mes \" + month);\n    Log.d(\"log\", \"ano \" + year);\n\n    // SELECT * FROM CONTAS WHERE MES = ? AND ANO = ?\n    Cursor cursor = mDataBase.query(TABLE_NAME, allColumns, where, null, null, null, \"dia\");\n    Log.d(\"log\", \"cursor: \" + cursor.getCount());\n    if (cursor.getCount() > 0) {\n      cursor.moveToFirst();\n      for (int i = 0; i < cursor.getCount(); i++) {\n        conta = new Conta();\n        conta.setId(cursor.getInt(0));\n        conta.setNome(cursor.getString(1));\n        conta.setValor(cursor.getString(2));\n        conta.setVencimento(cursor.getString(3));\n        conta.setNotificar(cursor.getString(4));\n        conta.setCodigoBarra(cursor.getString(5));\n        if (cursor.getInt(6) == 0) {\n          conta.setPago(false);\n        } else {\n          conta.setPago(true);\n        }\n        conta.setDia(cursor.getString(7));\n        conta.setMes(cursor.getString(8));\n        conta.setAno(cursor.getString(9));\n\n        arrayConta.add(conta);\n        cursor.moveToNext();\n      }\n    }\n\n    // Open Database\n    closeDb();\n\n    return arrayConta;\n  }\n"}, {"dataset": "query", "exampleID": 8110, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 345, "focalAPIEnd": 540, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 582, "followUpCheckExpressionEnd": 607, "followUpCheckBlockStart": 582, "followUpCheckBlockEnd": 659, "use": ["cursor.getString(int)", "cursor.close()"], "useStart": [633, 665], "useEnd": [652, 679], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ROGUE-JCTD/Arbiter-Android/tree/master/Arbiter-Android/src/com/lmn/Arbiter_Android/DatabaseHelpers/TableHelpers/FeaturesHelper.java", "rawCode": "  private String getGeometryColumn(SQLiteDatabase db, String featureType)\n      throws FeatureHelperException {\n    String[] columns = {\n      GeometryColumnsHelper.FEATURE_GEOMETRY_COLUMN // 0\n    };\n\n    String whereClause = GeometryColumnsHelper.FEATURE_TABLE_NAME + \"=?\";\n    String[] whereArgs = {featureType};\n\n    Cursor cursor =\n        db.query(\n            GeometryColumnsHelper.GEOMETRY_COLUMNS_TABLE_NAME,\n            columns,\n            whereClause,\n            whereArgs,\n            null,\n            null,\n            null);\n\n    String geometryColumn = null;\n\n    if (cursor.moveToFirst()) {\n      geometryColumn = cursor.getString(0);\n    }\n\n    cursor.close();\n\n    if (geometryColumn != null) {\n      return geometryColumn;\n    }\n\n    throw new FeatureHelperException(Errors.NO_GEOMETRY_COLUMN);\n  }\n"}, {"dataset": "query", "exampleID": 8111, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 172, "focalAPIEnd": 232, "followUpCheck": "cursor != null", "checkType": "IF", "followUpCheckExpressionStart": 239, "followUpCheckExpressionEnd": 259, "followUpCheckBlockStart": 239, "followUpCheckBlockEnd": 304, "use": ["cursor.moveToFirst()", "cursor.close()"], "useStart": [276, 360], "useEnd": [297, 375], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/welovechickens/Annenberg-Friend-Finder/tree/master/Annenberg Friend Finder/src/com/harvard/annenberg/DbAdapter.java", "rawCode": "  /**\n   * Fetch a list of all contacts in the database\n   *\n   * @return Db cursor\n   */\n  public Cursor fetchAllUsers() {\n    boolean found = false;\n    Cursor mCursor = mDb.query(USER_DB_TABLE, null, null, null, null, null, null);\n\n    if (mCursor != null) {\n      found = mCursor.moveToFirst();\n    }\n    if (!found) {\n      if (mCursor != null) {\n        mCursor.close();\n      }\n      return null;\n    }\n    return mCursor;\n  }\n"}, {"dataset": "query", "exampleID": 8112, "initialization": ["SQLiteDatabase database = MyDbHelper.getReadableDatabase()"], "initializationStart": [100], "initializationEnd": [128], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 446, "focalAPIEnd": 522, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Guillermoo/unutopia-android/tree/master/francho/05-persistencia/src/org/francho/unutopia_android/persistencia/MainActivity.java", "rawCode": "  private Cursor getUsers() {\n    MyDbHelper helper = new MyDbHelper(this);\n    SQLiteDatabase db = helper.getReadableDatabase();\n\n    String table = UsersTable.TABLE_NAME;\n    String[] columns = new String[] {UsersTable._ID, UsersTable.USERNAME, UsersTable.EMAIL};\n    String selection = null;\n    String[] selectionArgs = null;\n    String orderBy = UsersTable.USERNAME + \" DESC\";\n    String groupBy = null;\n    String having = null;\n    return db.query(table, columns, selection, selectionArgs, groupBy, having, orderBy);\n  }\n"}, {"dataset": "query", "exampleID": 8113, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 115, "focalAPIEnd": 610, "followUpCheck": "!cursor.isAfterLast()", "checkType": "LOOP {", "followUpCheckExpressionStart": 717, "followUpCheckExpressionEnd": 746, "followUpCheckBlockStart": 717, "followUpCheckBlockEnd": 948, "use": ["cursor.moveToFirst()", "timeBlockFromCursor(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [616, 886, 922, 954], "useEnd": [636, 913, 941, 968], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hamo26/EECE419Group7/tree/master/schedushare-android/SchedUShare/src/com/schedushare/android/db/SchedulesDataSource.java", "rawCode": "  public ArrayList<TimeBlockData> getScheduleDayTimeBlocks(long scheduleId, int day) {\n    Cursor cursor =\n        this.database.query(\n            SchedulesSQLiteHelper.TABLE_TIME_BLOCK,\n            SchedulesDataSource.allTimeBlockColumns,\n            SchedulesSQLiteHelper.COLUMN_SCHEDULE_ID\n                + \" = \"\n                + Long.toString(scheduleId)\n                + \" AND \"\n                + SchedulesSQLiteHelper.COLUMN_DAY\n                + \" = \"\n                + Integer.toString(day),\n            null,\n            null,\n            null,\n            SchedulesSQLiteHelper.COLUMN_START_TIME);\n    cursor.moveToFirst();\n\n    ArrayList<TimeBlockData> timeBlocks = new ArrayList<TimeBlockData>();\n    while (!cursor.isAfterLast()) {\n      // System.out.println(\"DataSource: start: \" + cursor.getString(2) + \" end: \" +\n      // cursor.getString(3));\n      timeBlocks.add(timeBlockFromCursor(cursor));\n      cursor.moveToNext();\n    }\n\n    cursor.close();\n    return timeBlocks;\n  }\n"}, {"dataset": "query", "exampleID": 8114, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getReadableDatabase()"], "initializationStart": [168], "initializationEnd": [196], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 213, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.getInt(int)", "close(cursor,SQLiteDatabase)"], "useStart": [294, 329, 373], "useEnd": [314, 345, 390], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 357, "finallyExpressionEnd": 365, "finallyBlockStart": 357, "finallyBlockEnd": 397, "cleanUpCallStart": [373], "cleanUpCallEnd": [390], "url": "https://github.com/jTurnerCPW/sprintAndroid/tree/master/CaptureActivity/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public boolean hasHistoryItems() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor = db.query(DBHelper.TABLE_NAME, COUNT_COLUMN, null, null, null, null, null);\n      cursor.moveToFirst();\n      return cursor.getInt(0) > 0;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8115, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 281, "focalAPIEnd": 354, "followUpCheck": "cursor.moveToNext()", "checkType": "IF", "followUpCheckExpressionStart": 393, "followUpCheckExpressionEnd": 417, "followUpCheckBlockStart": 393, "followUpCheckBlockEnd": 480, "use": ["cursor.getLong(int)", "cursor.close()"], "useStart": [442, 503], "useEnd": [471, 517], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 487, "finallyExpressionEnd": 495, "finallyBlockStart": 487, "finallyBlockEnd": 524, "cleanUpCallStart": [503], "cleanUpCallEnd": [517], "url": "https://github.com/MIPS/packages-apps-Gallery2/tree/master/src/com/android/gallery3d/data/DownloadCache.java", "rawCode": "  private synchronized void initialize() {\n    if (mInitialized) return;\n    mInitialized = true;\n    if (!mRoot.isDirectory()) mRoot.mkdirs();\n    if (!mRoot.isDirectory()) {\n      throw new RuntimeException(\"cannot create \" + mRoot.getAbsolutePath());\n    }\n\n    Cursor cursor = mDatabase.query(TABLE_NAME, SUM_PROJECTION, null, null, null, null, null);\n    mTotalBytes = 0;\n    try {\n      if (cursor.moveToNext()) {\n        mTotalBytes = cursor.getLong(SUM_INDEX_SUM);\n      }\n    } finally {\n      cursor.close();\n    }\n    if (mTotalBytes > mCapacity) freeSomeSpaceIfNeed(MAX_DELETE_COUNT);\n  }\n"}, {"dataset": "query", "exampleID": 8116, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 124, "focalAPIEnd": 208, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 214, "followUpCheckExpressionEnd": 239, "followUpCheckBlockStart": 214, "followUpCheckBlockEnd": 532, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getInt(int)"], "useStart": [337, 393, 451], "useEnd": [356, 412, 467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/darklord777/ProyectoCargaAcademica/tree/master/cargaAcademicaEISI/src/sv/ues/fia/cargaacademicaeisi/ControlDB.java", "rawCode": "  public Modalidad_Curso consultarModCurso(String idModCurso) {\n    String[] id = {idModCurso};\n    Cursor cursor =\n        db.query(\"MODALIDAD_CURSO\", camposModCurso, \"IDMODALIDAD = ?\", id, null, null, null);\n    if (cursor.moveToFirst()) {\n      Modalidad_Curso ModalCurso = new Modalidad_Curso();\n      ModalCurso.setIdmodalidadCurso(cursor.getString(0));\n      ModalCurso.setNom_modalidad(cursor.getString(1));\n      ModalCurso.setDescuento_horas(cursor.getInt(2));\n      return ModalCurso;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8117, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 117, "focalAPIEnd": 205, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 253, "followUpCheckExpressionEnd": 275, "followUpCheckBlockStart": 253, "followUpCheckBlockEnd": 539, "use": ["cursor.getString(int)", "cursor.close()"], "useStart": [302, 544], "useEnd": [316, 553], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Browser/tree/master/src/com/android/browser/provider/SnapshotProvider.java", "rawCode": "  private void deleteDataFiles(SQLiteDatabase db, String selection, String[] selectionArgs) {\n    Cursor c =\n        db.query(TABLE_SNAPSHOTS, DELETE_PROJECTION, selection, selectionArgs, null, null, null);\n    final Context context = getContext();\n    while (c.moveToNext()) {\n      String filename = c.getString(0);\n      if (TextUtils.isEmpty(filename)) {\n        continue;\n      }\n      File f = context.getFileStreamPath(filename);\n      if (f.exists()) {\n        if (!f.delete()) {\n          f.deleteOnExit();\n        }\n      }\n    }\n    c.close();\n  }\n"}, {"dataset": "query", "exampleID": 8118, "initialization": ["SQLiteDatabase database = DBHelper.getReadableDatabase()"], "initializationStart": [55], "initializationEnd": [85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 247, "focalAPIEnd": 438, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startManagingCursor(cursor)"], "useStart": [444], "useEnd": [471], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neokongwai/abc/tree/master/src/watsons/wine/notification/NotificationMainActivity.java", "rawCode": "  private Cursor getCursor() {\n    SQLiteDatabase db = dbhelper.getReadableDatabase();\n    String[] columns = {\n      DbConstants.NOTIFICATION_TITLE, DbConstants.NOTIFICATION_TIME, DbConstants.NOTIFICATION_READ\n    };\n\n    Cursor cursor =\n        db.query(\n            DbConstants.NOTIFICATION_TABLE_NAME,\n            null,\n            null,\n            null,\n            null,\n            null,\n            DbConstants.NOTIFICATION_TIME);\n    startManagingCursor(cursor);\n\n    return cursor;\n  }\n"}, {"dataset": "query", "exampleID": 8119, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 1178, "focalAPIEnd": 1431, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 2647, "followUpCheckExpressionEnd": 2675, "followUpCheckBlockStart": 2647, "followUpCheckBlockEnd": 2760, "use": ["getInstance(cursor)", "detectPackageChange(*,SQLiteDatabase,*,cursor,ThemeItem,CustomTheme)", "database.yieldIfContendedSafely()", "deleteTheme(database,ThemeItem)"], "useStart": [1463, 2320, 2486, 2688], "useEnd": [1493, 2398, 2514, 2717], "hasFinally": 1, "cleanUpCall": ["ThemeItem.close()"], "finallyExpressionStart": 2769, "finallyExpressionEnd": 2777, "finallyBlockStart": 2769, "finallyBlockEnd": 2928, "cleanUpCallStart": [2824], "cleanUpCallEnd": [2843], "url": "https://github.com/tmobile/themes-platform-vendor-tmobile-providers-ThemeManager/tree/master/src/com/tmobile/thememanager/provider/ThemesProvider.java", "rawCode": "    private void verifyPackages() {\n      CustomTheme appliedTheme = ThemeUtilities.getAppliedTheme(getContext());\n\n      /*\n       * Tracks whether any actual modifications to the database occurred.\n       * If true, we must notify content observers when the package\n       * verification phase completes.\n       */\n      boolean notifyChanges = false;\n\n      /*\n       * Handle the \"default\" special case outside the main loop involving\n       * actual theme packages.\n       */\n      boolean invalidatedSystemDefault = detectSystemDefaultChange(mDb, appliedTheme);\n      if (invalidatedSystemDefault) {\n        notifyChanges = true;\n      }\n\n      /* List all currently installed theme packages. */\n      List<PackageInfo> themePackages =\n          getContext().getPackageManager().getInstalledThemePackages();\n\n      /*\n       * Get a sorted cursor of all currently known themes. We'll walk\n       * this cursor along with the package managers sorted output to\n       * determine changes. This cursor intentionally excludes the\n       * \"special\" case system default theme (which has THEME_PACKAGE set\n       * to a blank string).\n       */\n      Cursor current =\n          mDb.query(\n              TABLE_NAME,\n              null,\n              \"LENGTH(\" + ThemeColumns.THEME_PACKAGE + \") > 0\",\n              null,\n              null,\n              null,\n              ThemeColumns.THEME_PACKAGE + \", \" + ThemeColumns.THEME_ID);\n      ThemeItem currentItem = ThemeItem.getInstance(current);\n\n      Collections.sort(\n          themePackages,\n          new Comparator<PackageInfo>() {\n            public int compare(PackageInfo a, PackageInfo b) {\n              return a.packageName.compareTo(b.packageName);\n            }\n          });\n\n      try {\n        for (PackageInfo pi : themePackages) {\n          if (pi.themeInfos == null) {\n            continue;\n          }\n\n          /*\n           * Deal with potential package change, moving `current'\n           * along to efficiently detect differences. This method\n           * handles insert, delete, and modify returning with\n           * `current' positioned ahead of the theme matching the last\n           * of `pi's ThemeInfo objects (or passed the last\n           * entry if the cursor is exhausted).\n           */\n          boolean invalidated =\n              detectPackageChange(getContext(), mDb, pi, current, currentItem, appliedTheme);\n          if (invalidated) {\n            notifyChanges = true;\n          }\n\n          mDb.yieldIfContendedSafely();\n        }\n\n        /*\n         * Delete any items left-over that were not found in\n         * `themePackages'.\n         */\n        while (current.moveToNext()) {\n          deleteTheme(mDb, currentItem);\n          notifyChanges = true;\n        }\n      } finally {\n        if (currentItem != null) {\n          currentItem.close();\n        }\n        if (notifyChanges) {\n          notifyChanges();\n        }\n      }\n    }\n"}, {"dataset": "query", "exampleID": 8120, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 476, "focalAPIEnd": 553, "followUpCheck": "cursor.getCount() > 0", "checkType": "IF", "followUpCheckExpressionStart": 559, "followUpCheckExpressionEnd": 582, "followUpCheckBlockStart": 559, "followUpCheckBlockEnd": 964, "use": ["cursor.moveToFirst()"], "useStart": [591], "useEnd": [608], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/igrir/teroka/tree/master/src/com/tanyoo/teroka/lib/DbTeroka.java", "rawCode": "  /**\n   * Tidak digunakan, karena pemain cuma ada 1\n   *\n   * @param nama\n   * @return\n   */\n  public DataPemain getDataPemainByNama(String nama) {\n    Cursor cur = null;\n    DataPemain T = new DataPemain();\n\n    String[] COLS =\n        new String[] {\n          \"ID\",\n          \"NAMA\",\n          \"LEVEL\",\n          \"J_BINTANG\",\n          \"J_STEP\",\n          \"J_KALORI\",\n          \"MAX_STEP\",\n          \"NOW_ARMOR\",\n          \"J_WIN\",\n          \"J_LOSE\"\n        };\n\n    cur = db.query(\"DATA_PEMAIN\", COLS, \"NAMA ='\" + nama + \"'\", null, null, null, null);\n    if (cur.getCount() > 0) {\n      cur.moveToFirst();\n      T.id = cur.getInt(0);\n      T.nama = cur.getString(1);\n      T.level = cur.getString(2);\n      T.j_bintang = cur.getString(3);\n      T.j_step = cur.getString(4);\n      T.j_kalori = cur.getString(5);\n      T.max_step = cur.getString(6);\n      T.now_armor = cur.getString(7);\n      T.j_win = cur.getString(7);\n      T.j_lose = cur.getString(7);\n    }\n\n    return T;\n  }\n"}, {"dataset": "query", "exampleID": 8121, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 139, "focalAPIEnd": 347, "followUpCheck": "!cursor.isAfterLast()", "checkType": "LOOP {", "followUpCheckExpressionStart": 380, "followUpCheckExpressionEnd": 409, "followUpCheckBlockStart": 380, "followUpCheckBlockEnd": 514, "use": ["cursor.moveToFirst()", "cursor.getLong(int)", "cursor.moveToNext()", "cursor.close()"], "useStart": [354, 432, 488, 556], "useEnd": [374, 449, 507, 570], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kevinschaul/PlanMyMeal/tree/master/src/com/csci5115/group2/planmymeal/database/DataSourceManager.java", "rawCode": "  private List<Long> getStepIdsForRecipe(long recipeId) {\n    List<Long> recipeSteps = new ArrayList<Long>();\n\n    Cursor cursor =\n        database.query(\n            TABLE_RECIPE_STEP_REL,\n            allRecipeStepRelColumns,\n            COLUMN_RECIPE_ID + \" = \" + recipeId,\n            null,\n            null,\n            null,\n            null);\n\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      long stepId = cursor.getLong(2);\n      recipeSteps.add(stepId);\n      cursor.moveToNext();\n    }\n    // make sure to close the cursor\n    cursor.close();\n    return recipeSteps;\n  }\n"}, {"dataset": "query", "exampleID": 8122, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["database.execSQL(String)", "database.execSQL(String)"], "configurationStart": [68, 525], "configurationEnd": [144, 558], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 576, "focalAPIEnd": 635, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertNotNull(cursor)", "cursor.getCount()", "cursor.moveToFirst()", "cursor.getPosition()", "cursor.getColumnIndexOrThrow(String)", "cursor.getString(*)", "cursor.close()"], "useStart": [641, 679, 710, 748, 803, 791, 929], "useEnd": [657, 691, 725, 763, 834, 835, 938], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/tests/coretests/src/android/database/DatabaseCursorTest.java", "rawCode": "  @MediumTest\n  public void testLargeField() throws Exception {\n    mDatabase.execSQL(\"CREATE TABLE test (_id INTEGER PRIMARY KEY, data TEXT);\");\n\n    StringBuilder sql = new StringBuilder(2100);\n    sql.append(\"INSERT INTO test (data) VALUES ('\");\n    Random random = new Random(System.currentTimeMillis());\n    StringBuilder randomString = new StringBuilder(1979);\n    for (int i = 0; i < 1979; i++) {\n      randomString.append((random.nextInt() & 0xf) % 10);\n    }\n    sql.append(randomString);\n    sql.append(\"');\");\n    mDatabase.execSQL(sql.toString());\n\n    Cursor c = mDatabase.query(\"test\", null, null, null, null, null, null);\n    assertNotNull(c);\n    assertEquals(1, c.getCount());\n\n    assertTrue(c.moveToFirst());\n    assertEquals(0, c.getPosition());\n    String largeString = c.getString(c.getColumnIndexOrThrow(\"data\"));\n    assertNotNull(largeString);\n    assertEquals(randomString.toString(), largeString);\n    c.close();\n  }\n"}, {"dataset": "query", "exampleID": 8123, "initialization": ["SQLiteDatabase database = initializeDatabase()", "String[] selectionArgs = toString(Long)"], "initializationStart": [70, 204], "initializationEnd": [90, 228], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 246, "focalAPIEnd": 322, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 389, "followUpCheckExpressionEnd": 411, "followUpCheckBlockStart": 389, "followUpCheckBlockEnd": 466, "use": ["fillInStandardFields(cursor)", "cursor.close()"], "useStart": [433, 510], "useEnd": [456, 519], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 494, "finallyExpressionEnd": 502, "finallyBlockStart": 494, "finallyBlockEnd": 526, "cleanUpCallStart": [510], "cleanUpCallEnd": [519], "url": "https://github.com/kanakb/OmniStanford/tree/master/src/mobisocial/omnistanford/db/TagManager.java", "rawCode": "  public List<MTag> getTags(Long checkinId) {\n    SQLiteDatabase db = initializeDatabase();\n    String table = MTag.TABLE;\n    String selection = MTag.COL_CHECKIN_ID + \"=?\";\n    String[] selectionArgs = {Long.toString(checkinId)};\n    Cursor c = db.query(table, STANDARD_FIELDS, selection, selectionArgs, null, null, null);\n    try {\n      List<MTag> result = new ArrayList<MTag>();\n      while (c.moveToNext()) {\n        result.add(fillInStandardFields(c));\n      }\n      return result;\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8124, "initialization": ["SQLiteDatabase database = getReadableDatabase()"], "initializationStart": [54], "initializationEnd": [80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 93, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AndrewChanChina/ppc1/tree/master/src/com/smit/rssreader/RSSOpenHelper.java", "rawCode": "  public Cursor queryFeed() {\n    SQLiteDatabase db = this.getReadableDatabase();\n    return db.query(TAB_RSSINFO, null, RSS_URL + \"!='\" + \"'\", null, null, null, null);\n  }\n"}, {"dataset": "query", "exampleID": 8125, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 63, "focalAPIEnd": 255, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ramblurr/mp3tunes-android/tree/master/src/com/mp3tunes/android/LockerDb.java", "rawCode": "  private Cursor queryTracksArtist(int artist_id) {\n    return mDb.query(\n        \"track\",\n        Music.TRACK,\n        \"artist_id=\" + artist_id,\n        null,\n        null,\n        null,\n        \"lower(\" + Music.TRACK[Music.TRACK_MAPPING.TRACKNUM] + \")\");\n  }\n"}, {"dataset": "query", "exampleID": 8126, "initialization": ["SQLiteDatabase database = MyDbHelper.getReadableDatabase()"], "initializationStart": [164], "initializationEnd": [195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 633, "focalAPIEnd": 714, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/francho/unutopia-android/tree/master/dundarr/ContentProviderPruebas/src/org/cacahuete/app/contentproviderpruebas/data/MyContentProvider.java", "rawCode": "  @Override\n  public Cursor query(\n      Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n\n    final SQLiteDatabase db = mDbHelper.getReadableDatabase();\n\n    switch (sUriMatcher.match(uri)) {\n      case TYPE_USERS_ITEM:\n        String id = uri.getLastPathSegment();\n\n        if (!TextUtils.isEmpty(selection)) {\n          selection += \" AND\";\n        } else {\n          selection = \"\";\n        }\n        selection += UsersTable._ID + \"==\" + id;\n\n        String table = UsersTable.TABLE_NAME;\n        String groupBy = null;\n        String having = null;\n        Cursor cursor =\n            db.query(table, projection, selection, selectionArgs, groupBy, having, sortOrder);\n        return cursor;\n      default:\n        return null;\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8127, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getReadableDatabase()"], "initializationStart": [142], "initializationEnd": [179], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 290, "focalAPIEnd": 378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIT-Mobile/MIT-Mobile-for-Android/tree/master/src/edu/mit/mitmobile2/alerts/AlertsDB.java", "rawCode": "  /** ***************************************************************** */\n  public Cursor getShuttleAlertsCursor() {\n    SQLiteDatabase db = mAlertsDBHelper.getReadableDatabase();\n    String[] fields = new String[] {ID, ROUTE_ID, STOP_ID, TITLE, LAST_UPDATE};\n\n    Cursor cursor =\n        db.query(SHUTTLE_ALERTS_TABLE, fields, null, null, null, null, ROUTE_ID + \" DESC\", null);\n    return cursor;\n  }\n"}, {"dataset": "query", "exampleID": 8128, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 110, "focalAPIEnd": 191, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 197, "followUpCheckExpressionEnd": 222, "followUpCheckBlockStart": 197, "followUpCheckBlockEnd": 456, "use": ["cursor.getString(int)", "cursor.getString(int)"], "useStart": [316, 370], "useEnd": [335, 389], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/darklord777/ProyectoCargaAcademica/tree/master/cargaAcademicaEISI/src/sv/ues/fia/cargaacademicaeisi/ControlDB.java", "rawCode": "  public Departamento consultarDepto(String idepto) {\n    String[] id = {idepto};\n    Cursor cursor =\n        db.query(\"DEPARTAMENTO\", camposDepto, \"IDDEPARTAMENTO = ?\", id, null, null, null);\n    if (cursor.moveToFirst()) {\n      Departamento departamento = new Departamento();\n      departamento.setIddepartamento(cursor.getString(0));\n      departamento.setNom_depto(cursor.getString(1));\n      return departamento;\n    } else {\n      return null;\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8129, "initialization": ["String selection = getId()"], "initializationStart": [331], "initializationEnd": [345], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 363, "focalAPIEnd": 430, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 488, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 488, "followUpCheckBlockEnd": 552, "use": ["cursor.getLong(int)", "cursor.close()"], "useStart": [531, 557], "useEnd": [544, 567], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brianmikkelsen/splurge/tree/master/branches/third_prototype/src/dk/aau/sw802f12/splurge/database/DBHelper.java", "rawCode": "  /**\n   * Add {@link Tag}s to the {@link Artist}, they have been applied to.\n   *\n   * @param artist The Artist to find Tags for.\n   */\n  private void artistTags(Artist artist) {\n    openDB();\n    Collection<Tag> c = new HashSet<Tag>();\n    String[] cols = {DB.ARTISTTAG_TAG};\n    String selection = DB.ARTISTTAG_ARTIST + \" = \" + artist.getId();\n    Cursor cu = db.query(DB.TB_ARTISTTAGS, cols, selection, null, null, null, null);\n    ArrayList<Long> tagIds = new ArrayList<Long>();\n    while (cu.moveToNext()) {\n      tagIds.add(cu.getLong(0));\n    }\n    cu.close();\n    for (Long tagId : tagIds) c.add(mr.getTag(tagId));\n    artist.addTags(c);\n  }\n"}, {"dataset": "query", "exampleID": 8130, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 395, "focalAPIEnd": 571, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rbolliger/otokou/tree/master/android/src/com/bl457xor/app/otokou/db/OtokouChargeAdapter.java", "rawCode": "  /**\n   * Since Version 1\n   *\n   * <p>Get a row identified by its id.\n   *\n   * <p>note: need a call to the open() method before a call to this method.\n   *\n   * @param id id of the row to update\n   * @return cursor object containing the row data. null object will be returned in case of errors.\n   */\n  public Cursor getChargeById(long id) {\n    if (!connectionOpen) return null;\n\n    return db.query(\n        OtokouChargeAdapter.TABLE_NAME,\n        null,\n        \"\" + OtokouChargeAdapter.COL_ID_NAME + \"=\" + id,\n        null,\n        null,\n        null,\n        null);\n  }\n"}, {"dataset": "query", "exampleID": 8131, "initialization": ["SQLiteDatabase database = openOrCreateDatabase(*,*)"], "initializationStart": [288], "initializationEnd": [354], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["database.execSQL(String)"], "configurationStart": [394], "configurationEnd": [473], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 534, "focalAPIEnd": 594, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/database/src/android/database/cts/AbstractCursorTest.java", "rawCode": "  private void setupDatabase() {\n    File dbDir =\n        getInstrumentation().getTargetContext().getDir(\"tests\", Context.MODE_WORLD_WRITEABLE);\n    mDatabaseFile = new File(dbDir, \"database_test.db\");\n    if (mDatabaseFile.exists()) {\n      mDatabaseFile.delete();\n    }\n    mDatabase = SQLiteDatabase.openOrCreateDatabase(mDatabaseFile.getPath(), null);\n    assertNotNull(mDatabaseFile);\n    mDatabase.execSQL(\"CREATE TABLE test1 (_id INTEGER PRIMARY KEY, number TEXT);\");\n    generateData();\n    mDatabaseCursor = (AbstractCursor) mDatabase.query(\"test1\", null, null, null, null, null, null);\n  }\n"}, {"dataset": "query", "exampleID": 8132, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 113, "focalAPIEnd": 189, "followUpCheck": "!cursor.isAfterLast()", "checkType": "LOOP {", "followUpCheckExpressionStart": 222, "followUpCheckExpressionEnd": 251, "followUpCheckBlockStart": 222, "followUpCheckBlockEnd": 359, "use": ["cursor.moveToFirst()", "cursorToRecipe(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [196, 276, 333, 401], "useEnd": [216, 298, 352, 415], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kevinschaul/PlanMyMeal/tree/master/src/com/csci5115/group2/planmymeal/database/DataSourceManager.java", "rawCode": "  public List<Recipe> getAllRecipes() {\n    List<Recipe> recipes = new ArrayList<Recipe>();\n\n    Cursor cursor = database.query(TABLE_RECIPE, allRecipeColumns, null, null, null, null, null);\n\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      Recipe recipe = cursorToRecipe(cursor);\n      recipes.add(recipe);\n      cursor.moveToNext();\n    }\n    // make sure to close the cursor\n    cursor.close();\n    return recipes;\n  }\n"}, {"dataset": "query", "exampleID": 8133, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(distinct,table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 92, "focalAPIEnd": 407, "followUpCheck": "cursor.getCount() < 0", "checkType": "IF", "followUpCheckExpressionStart": 414, "followUpCheckExpressionEnd": 440, "followUpCheckBlockStart": 414, "followUpCheckBlockEnd": 472, "use": ["cursor.getCount()", "createHighScoreDao(cursor)"], "useStart": [418, 611], "useEnd": [435, 637], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SamPortnow/Depression_Prevention_Program/tree/master/bato/src/com/samportnow/bato/database/BatoDataSource.java", "rawCode": "  public List<HighScoreDao> getTopHighScores(Integer limitBy) {\n    Cursor cursor =\n        mDatabase.query(\n            false,\n            BatoSQLiteOpenHelper.TABLE_HIGH_SCORES,\n            HIGH_SCORE_DAO_QUERY_COLUMNS,\n            null,\n            null,\n            null,\n            null,\n            BatoSQLiteOpenHelper.COLUMN_SCORE + \" DESC\",\n            limitBy != null ? limitBy.toString() : null);\n\n    if (cursor.getCount() < 0) return Collections.emptyList();\n\n    ArrayList<HighScoreDao> highScores = new ArrayList<HighScoreDao>(cursor.getCount());\n\n    while (cursor.moveToNext()) highScores.add(createHighScoreDao(cursor));\n\n    return highScores;\n  }\n"}, {"dataset": "query", "exampleID": 8134, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 508, "focalAPIEnd": 595, "followUpCheck": "cursor.moveToNext()", "checkType": "IF", "followUpCheckExpressionStart": 613, "followUpCheckExpressionEnd": 637, "followUpCheckBlockStart": 613, "followUpCheckBlockEnd": 849, "use": ["cursor.getString(int)", "cursor.getLong(int)", "cursor.getLong(int)", "cursor.close()"], "useStart": [659, 730, 797, 902], "useEnd": [706, 773, 840, 916], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 856, "finallyExpressionEnd": 864, "finallyBlockStart": 856, "finallyBlockEnd": 931, "cleanUpCallStart": [902], "cleanUpCallEnd": [916], "url": "https://github.com/MIPS/packages-providers-CalendarProvider/tree/master/src/com/android/providers/calendar/MetaData.java", "rawCode": "  /**\n   * Reads the meta-data for the CalendarProvider from the database and updates the member\n   * variables. This method executes while the database lock is held. If there were no exceptions\n   * reading the database, mInitialized is set to true.\n   */\n  private void readLocked(SQLiteDatabase db) {\n    String timezone = null;\n    long minInstance = 0, maxInstance = 0;\n\n    // Read the database directly. We only do this once to initialize\n    // the members of this class.\n    Cursor cursor =\n        db.query(\"CalendarMetaData\", sCalendarMetaDataProjection, null, null, null, null, null);\n    try {\n      if (cursor.moveToNext()) {\n        timezone = cursor.getString(METADATA_INDEX_LOCAL_TIMEZONE);\n        minInstance = cursor.getLong(METADATA_INDEX_MIN_INSTANCE);\n        maxInstance = cursor.getLong(METADATA_INDEX_MAX_INSTANCE);\n      }\n    } finally {\n      if (cursor != null) {\n        cursor.close();\n      }\n    }\n\n    // Cache the result of reading the database\n    mFields.timezone = timezone;\n    mFields.minInstance = minInstance;\n    mFields.maxInstance = maxInstance;\n\n    // Mark the fields as initialized\n    mInitialized = true;\n  }\n"}, {"dataset": "query", "exampleID": 8135, "initialization": ["SQLiteDatabase database = MyDbHelper.getReadableDatabase()"], "initializationStart": [164], "initializationEnd": [195], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 633, "focalAPIEnd": 714, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/francho/unutopia-android/tree/master/gothalo/08-MyContentProvider/src/org/francho/unutopia/mycontenterprovider/data/MyContentProvider.java", "rawCode": "  @Override\n  public Cursor query(\n      Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n\n    final SQLiteDatabase db = mDbHelper.getReadableDatabase();\n\n    switch (sUriMatcher.match(uri)) {\n      case TYPE_USERS_ITEM:\n        String id = uri.getLastPathSegment();\n\n        if (!TextUtils.isEmpty(selection)) {\n          selection += \" AND\";\n        } else {\n          selection = \"\";\n        }\n        selection += UsersTable._ID + \"==\" + id;\n\n        String table = UsersTable.TABLE_NAME;\n        String groupBy = null;\n        String having = null;\n        Cursor cursor =\n            db.query(table, projection, selection, selectionArgs, groupBy, having, sortOrder);\n        return cursor;\n      default:\n        return null;\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8136, "initialization": ["SQLiteDatabase database = ModelDetailDao.getDatabase()"], "initializationStart": [203], "initializationEnd": [231], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 271, "focalAPIEnd": 358, "followUpCheck": "cursor != null && cursor.getCount() > 0", "checkType": "IF", "followUpCheckExpressionStart": 364, "followUpCheckExpressionEnd": 428, "followUpCheckBlockStart": 364, "followUpCheckBlockEnd": 1845, "use": ["cursor.getColumnIndex(*)", "cursor.getLong(*)", "cursor.getColumnIndex(*)", "cursor.getString(*)", "cursor.getColumnIndex(*)", "cursor.getString(*)", "cursor.getColumnIndex(*)", "cursor.getString(*)", "cursor.close()"], "useStart": [604, 562, 758, 714, 919, 875, 1077, 1033, 1814], "useEnd": [670, 671, 835, 836, 996, 997, 1151, 1152, 1838], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xstd/private_phone/tree/master/android_code/src/com/xstd/pirvatephone/activity/ContextModelActivity.java", "rawCode": "  public void deleteModelDetail(String modelName) {\n    ModelDetailDao modelDetailDao =\n        ModelDetailDaoUtils.getModelDetailDao(ContextModelActivity.this);\n    SQLiteDatabase modelDetailDatebase = modelDetailDao.getDatabase();\n    Cursor modelDetailQuery =\n        modelDetailDatebase.query(ModelDetailDao.TABLENAME, null, null, null, null, null, null);\n    if (modelDetailQuery != null && modelDetailQuery.getCount() > 0) {\n      while (modelDetailQuery.moveToNext()) {\n\n        ModelDetail modelDetail = new ModelDetail();\n        Long _id =\n            modelDetailQuery.getLong(\n                modelDetailQuery.getColumnIndex(ModelDao.Properties.Id.columnName));\n        String jsonMassage =\n            modelDetailQuery.getString(\n                modelDetailQuery.getColumnIndex(ModelDetailDao.Properties.Massage.columnName));\n        String address =\n            modelDetailQuery.getString(\n                modelDetailQuery.getColumnIndex(ModelDetailDao.Properties.Address.columnName));\n        String name =\n            modelDetailQuery.getString(\n                modelDetailQuery.getColumnIndex(ModelDetailDao.Properties.Name.columnName));\n        try {\n          JSONObject json = new JSONObject(jsonMassage);\n          Object object = json.get(modelName);\n          if (object != null) {\n            Tools.logSh(\"移除了：：\" + address + \":::\" + modelName);\n            json.remove(modelName);\n            jsonMassage = json.toString();\n          } else {\n\n          }\n\n        } catch (JSONException e) {\n          // TODO Auto-generated catch block\n          e.printStackTrace();\n        }\n\n        modelDetail.setId(_id);\n        modelDetail.setAddress(address);\n        modelDetail.setName(name);\n        modelDetail.setMassage(jsonMassage);\n        modelDetailDao.update(modelDetail);\n      }\n      modelDetailQuery.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8137, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getWritableDatabase()"], "initializationStart": [706], "initializationEnd": [734], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 761, "focalAPIEnd": 956, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 965, "followUpCheckExpressionEnd": 992, "followUpCheckBlockStart": 965, "followUpCheckBlockEnd": 1843, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)", "close(cursor,SQLiteDatabase)"], "useStart": [1055, 1151, 1247, 1343, 1448, 1796, 1892], "useEnd": [1074, 1170, 1266, 1362, 1465, 1815, 1909], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 1876, "finallyExpressionEnd": 1884, "finallyBlockStart": 1876, "finallyBlockEnd": 1916, "cleanUpCallStart": [1892], "cleanUpCallEnd": [1909], "url": "https://github.com/naoric/my_card/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  /**\n   * Builds a text representation of the scanning history. Each scan is encoded on one line,\n   * terminated by a line break (\\r\\n). The values in each line are comma-separated, and\n   * double-quoted. Double-quotes within values are escaped with a sequence of two double-quotes.\n   * The fields output are:\n   *\n   * <ul>\n   *   <li>Raw text\n   *   <li>Display text\n   *   <li>Format (e.g. QR_CODE)\n   *   <li>Timestamp\n   *   <li>Formatted version of timestamp\n   * </ul>\n   */\n  CharSequence buildHistory() {\n    StringBuilder historyText = new StringBuilder(1000);\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getWritableDatabase();\n      cursor =\n          db.query(\n              DBHelper.TABLE_NAME,\n              COLUMNS,\n              null,\n              null,\n              null,\n              null,\n              DBHelper.TIMESTAMP_COL + \" DESC\");\n\n      while (cursor.moveToNext()) {\n\n        historyText.append('\"').append(massageHistoryField(cursor.getString(0))).append(\"\\\",\");\n        historyText.append('\"').append(massageHistoryField(cursor.getString(1))).append(\"\\\",\");\n        historyText.append('\"').append(massageHistoryField(cursor.getString(2))).append(\"\\\",\");\n        historyText.append('\"').append(massageHistoryField(cursor.getString(3))).append(\"\\\",\");\n\n        // Add timestamp again, formatted\n        long timestamp = cursor.getLong(3);\n        historyText\n            .append('\"')\n            .append(massageHistoryField(EXPORT_DATE_TIME_FORMAT.format(new Date(timestamp))))\n            .append(\"\\\",\");\n\n        // Above we're preserving the old ordering of columns which had formatted data in position 5\n\n        historyText.append('\"').append(massageHistoryField(cursor.getString(4))).append(\"\\\"\\r\\n\");\n      }\n      return historyText;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8138, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["database.update(String,ContentValues,String,String[])"], "configurationStart": [209], "configurationEnd": [256], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 274, "focalAPIEnd": 336, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertNotNull(cursor)", "cursor.getCount()", "cursor.moveToFirst()", "cursor.getColumnIndexOrThrow(String)", "cursor.getString(*)"], "useStart": [342, 380, 399, 447, 435], "useEnd": [358, 392, 414, 478, 479], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/tests/coretests/src/android/database/DatabaseGeneralTest.java", "rawCode": "  @MediumTest\n  public void testUpdate() throws Exception {\n    populateDefaultTable();\n\n    ContentValues values = new ContentValues(1);\n    values.put(\"data\", \"this is an updated test\");\n    assertEquals(1, mDatabase.update(\"test\", values, \"_id=1\", null));\n    Cursor c = mDatabase.query(\"test\", null, \"_id=1\", null, null, null, null);\n    assertNotNull(c);\n    assertEquals(1, c.getCount());\n    c.moveToFirst();\n    String value = c.getString(c.getColumnIndexOrThrow(\"data\"));\n    assertEquals(\"this is an updated test\", value);\n  }\n"}, {"dataset": "query", "exampleID": 8139, "initialization": ["String[] selectionArgs = valueOf(long)"], "initializationStart": [63], "initializationEnd": [81], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 99, "focalAPIEnd": 171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MentoSchool/skincare/tree/master/Collage_GoddessOfSkin-prototype/src/com/collage/goddessofskin/prototype/fragment/settings/NotesDbAdapter.java", "rawCode": "  public Cursor check(long id) {\n    String[] selectionArgs = {String.valueOf(id)};\n    Cursor c = mDb.query(TABLE_NAME, null, _ID + \"=?\", selectionArgs, null, null, null);\n    return c;\n  }\n"}, {"dataset": "query", "exampleID": 8140, "initialization": ["SQLiteDatabase database = initializeDatabase()"], "initializationStart": [64], "initializationEnd": [84], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 242, "focalAPIEnd": 318, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 336, "followUpCheckExpressionEnd": 356, "followUpCheckBlockStart": 336, "followUpCheckBlockEnd": 442, "use": ["fillInStandardFields(cursor)", "cursor.close()"], "useStart": [374, 465], "useEnd": [397, 474], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 449, "finallyExpressionEnd": 457, "finallyBlockStart": 449, "finallyBlockEnd": 481, "cleanUpCallStart": [465], "cleanUpCallEnd": [474], "url": "https://github.com/kanakb/OmniStanford/tree/master/src/mobisocial/omnistanford/db/AccountManager.java", "rawCode": "  public MAccount getAccount(Long id) {\n    SQLiteDatabase db = initializeDatabase();\n    String table = MAccount.TABLE;\n    String selection = MAccount.COL_ID + \"=?\";\n    String[] selectionArgs = new String[] {id.toString()};\n    Cursor c = db.query(table, STANDARD_FIELDS, selection, selectionArgs, null, null, null);\n    try {\n      if (c.moveToFirst()) {\n        return fillInStandardFields(c);\n      } else {\n        return null;\n      }\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8141, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["database.update(String,ContentValues,String,String[])"], "configurationStart": [420], "configurationEnd": [485], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 515, "focalAPIEnd": 628, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursorToRecipe(cursor)", "cursor.close()"], "useStart": [634, 679, 707], "useEnd": [654, 701, 721], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kevinschaul/PlanMyMeal/tree/master/src/com/csci5115/group2/planmymeal/database/DataSourceManager.java", "rawCode": "  public Recipe updateRecipe(\n      long id, String name, double time, String description, Integer numServings) {\n    ContentValues values = new ContentValues();\n    values.put(COLUMN_NAME, name);\n    values.put(COLUMN_TIME, time);\n    values.put(COLUMN_DESCRIPTION, description);\n    values.put(COLUMN_RECIPE_NUM_SERVINGS, numServings);\n    values.put(COLUMN_USER, 1);\n    values.put(COLUMN_CC, 0);\n    long insertId = database.update(TABLE_RECIPE, values, COLUMN_ID + \"=\" + id, null);\n    Cursor cursor =\n        database.query(\n            TABLE_RECIPE, allRecipeColumns, COLUMN_ID + \" = \" + insertId, null, null, null, null);\n    cursor.moveToFirst();\n    Recipe newRecipe = cursorToRecipe(cursor);\n    cursor.close();\n    return newRecipe;\n  }\n"}, {"dataset": "query", "exampleID": 8142, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 337, "focalAPIEnd": 422, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 440, "followUpCheckExpressionEnd": 462, "followUpCheckBlockStart": 440, "followUpCheckBlockEnd": 544, "use": ["insertPhone(cursor,SQLiteStatement,SQLiteStatement,SQLiteStatement)", "cursor.close()"], "useStart": [473, 567], "useEnd": [535, 576], "hasFinally": 1, "cleanUpCall": ["Cursor.close()", "SQLiteStatement.close()", "SQLiteStatement.close()", "SQLiteStatement.close()"], "finallyExpressionStart": 551, "finallyExpressionEnd": 559, "finallyBlockStart": 551, "finallyBlockEnd": 673, "cleanUpCallStart": [567, 584, 611, 644], "cleanUpCallEnd": [576, 603, 636, 666], "url": "https://github.com/OMFGB/packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/LegacyContactImporter.java", "rawCode": "  private void importPhones() {\n    SQLiteStatement phoneInsert = mTargetDb.compileStatement(PhoneInsert.INSERT_SQL);\n    SQLiteStatement phoneLookupInsert = mTargetDb.compileStatement(PhoneLookupInsert.INSERT_SQL);\n    SQLiteStatement hasPhoneUpdate = mTargetDb.compileStatement(HasPhoneNumberUpdate.UPDATE_SQL);\n    Cursor c =\n        mSourceDb.query(PhonesQuery.TABLE, PhonesQuery.COLUMNS, null, null, null, null, null);\n    try {\n      while (c.moveToNext()) {\n        insertPhone(c, phoneInsert, phoneLookupInsert, hasPhoneUpdate);\n      }\n    } finally {\n      c.close();\n      phoneInsert.close();\n      phoneLookupInsert.close();\n      hasPhoneUpdate.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8143, "initialization": ["SQLiteDatabase database = MyDbHelper.getReadableDatabase()"], "initializationStart": [100], "initializationEnd": [128], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 562, "focalAPIEnd": 638, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Guillermoo/unutopia-android/tree/master/merybere/05-persistencia/src/com/merybere/app/persistencia/MainActivity.java", "rawCode": "  private Cursor getUsers() {\n    MyDbHelper helper = new MyDbHelper(this);\n    SQLiteDatabase db = helper.getReadableDatabase();\n\n    String table = UsersTable.TABLE_NAME;\n    String[] columns = new String[] {UsersTable._ID, UsersTable.USERNAME, UsersTable.EMAIL};\n    // la parte del where; usamos el ?, en los datos, ya que como se suele coger de pantalla, se\n    // normalizará\n    String selection = null;\n    String[] selectionArgs = null;\n    String orderBy = UsersTable.USERNAME + \" DESC\";\n    String groupBy = null;\n    String having = null;\n    return db.query(table, columns, selection, selectionArgs, groupBy, having, orderBy);\n  }\n"}, {"dataset": "query", "exampleID": 8144, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "database!=null", "guardType": "IF {", "guardExpressionStart": 207, "guardExpressionEnd": 236, "guardBlockStart": 207, "guardBlockEnd": 378, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 252, "focalAPIEnd": 353, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andynicholson/Vidiom/tree/master/src/au/com/infiniterecursion/vidiom/utils/DBUtils.java", "rawCode": "  public Cursor query(\n      String table,\n      String[] columns,\n      String selection,\n      String[] selectionArgs,\n      String groupBy,\n      String having,\n      String orderBy) {\n    // wrapper\n    if (generic_write_db != null) {\n      return generic_write_db.query(\n          table, columns, selection, selectionArgs, groupBy, having, orderBy);\n    } else return null;\n  }\n"}, {"dataset": "query", "exampleID": 8145, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 1034, "focalAPIEnd": 1091, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 1294, "followUpCheckExpressionEnd": 1321, "followUpCheckBlockStart": 1294, "followUpCheckBlockEnd": 2733, "use": ["cursor.getInt(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)", "cursor.getInt(int)", "cursor.close()"], "useStart": [1408, 1457, 1514, 1576, 2669, 2817], "useEnd": [1424, 1476, 1531, 1595, 2685, 2831], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 2767, "finallyExpressionEnd": 2775, "finallyBlockStart": 2767, "finallyBlockEnd": 2850, "cleanUpCallStart": [2817], "cleanUpCallEnd": [2831], "url": "https://github.com/nolanlawson/KeepScore/tree/master/KeepScore/src/com/nolanlawson/keepscore/db/GameDBHelper.java", "rawCode": "  public List<GameSummary> findAllGameSummaries() {\n    synchronized (GameDBHelper.class) {\n      String[] columns = {\n        \"g.\" + COLUMN_ID,\n        \"g.\" + COLUMN_NAME,\n        \"g.\" + COLUMN_DATE_SAVED,\n        // player names; the \"separator\" is a trick to ensure that we can cleanly separate the\n        // response,\n        // and put it into the proper order, since group_concat is always unordered in sqlite\n        \"group_concat((ps.name || '\"\n            + GROUP_CONCAT_INNER_SEPARATOR\n            + \"' || ps.playerNumber), '\"\n            + GROUP_CONCAT_SEPARATOR\n            + \"')\",\n        \"max(length(ps.history) - length(replace(ps.history, ',', '')) + 1)\" // num rounds\n      };\n\n      String table =\n          TABLE_GAMES\n              + \" g join \"\n              + TABLE_PLAYER_SCORES\n              + \" ps \"\n              + \" on g.\"\n              + COLUMN_ID\n              + \" = ps.\"\n              + COLUMN_GAME_ID;\n      String groupBy = \"g.\" + COLUMN_ID;\n\n      Cursor cursor = null;\n\n      try {\n\n        cursor = db.query(table, columns, null, null, groupBy, null, null);\n\n        List<GameSummary> result = new ArrayList<GameSummary>();\n\n        // re-use sparse array for performance\n        SparseArray<String> playerNumbersToNames = new SparseArray<String>();\n\n        while (cursor.moveToNext()) {\n          GameSummary gameSummary = new GameSummary();\n\n          gameSummary.setId(cursor.getInt(0));\n          gameSummary.setName(cursor.getString(1));\n          gameSummary.setDateSaved(cursor.getLong(2));\n\n          String playerNumbersAndNames = cursor.getString(3);\n          // sort by player number, get player names in order (no way to do this in sqlite,\n          // unfortunately)\n\n          playerNumbersToNames.clear();\n          for (String playerNumberAndName :\n              StringUtil.split(playerNumbersAndNames, GROUP_CONCAT_SEPARATOR)) {\n            int idx = playerNumberAndName.indexOf(GROUP_CONCAT_INNER_SEPARATOR);\n            String playerName = playerNumberAndName.substring(0, idx);\n            int playerNumber =\n                Integer.parseInt(\n                    playerNumberAndName.substring(idx + GROUP_CONCAT_INNER_SEPARATOR.length()));\n            playerNumbersToNames.put(playerNumber, playerName);\n          }\n          List<String> playerNames = new ArrayList<String>(playerNumbersToNames.size());\n          for (int i = 0, len = playerNumbersToNames.size(); i < len; i++) {\n            int playerNumber = playerNumbersToNames.keyAt(i);\n            playerNames.add(playerNumbersToNames.get(playerNumber));\n          }\n          gameSummary.setPlayerNames(playerNames);\n\n          gameSummary.setNumRounds(cursor.getInt(4));\n\n          result.add(gameSummary);\n        }\n\n        return result;\n\n      } finally {\n        if (cursor != null) {\n          cursor.close();\n        }\n      }\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8146, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getReadableDatabase()"], "initializationStart": [168], "initializationEnd": [196], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 213, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.getInt(int)", "close(cursor,SQLiteDatabase)"], "useStart": [294, 329, 373], "useEnd": [314, 345, 390], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 357, "finallyExpressionEnd": 365, "finallyBlockStart": 357, "finallyBlockEnd": 397, "cleanUpCallStart": [373], "cleanUpCallEnd": [390], "url": "https://github.com/oturpe/barcode-agent-client/tree/master/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public boolean hasHistoryItems() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor = db.query(DBHelper.TABLE_NAME, COUNT_COLUMN, null, null, null, null, null);\n      cursor.moveToFirst();\n      return cursor.getInt(0) > 0;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8147, "initialization": ["SQLiteDatabase database = DatabaseHelper.getReadableDatabase()"], "initializationStart": [157], "initializationEnd": [190], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 258, "focalAPIEnd": 339, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/tests/LocationTracker/src/com/android/locationtracker/data/TrackerProvider.java", "rawCode": "  @Override\n  public Cursor query(\n      Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n    SQLiteDatabase db = mOpenHelper.getReadableDatabase();\n    // TODO: extract limit from URI ?\n    Cursor cursor =\n        db.query(TABLE_NAME, projection, selection, selectionArgs, null, null, sortOrder);\n    getContext().getContentResolver().notifyChange(uri, null);\n    return cursor;\n  }\n"}, {"dataset": "query", "exampleID": 8148, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 584, "focalAPIEnd": 667, "followUpCheck": "!cursor.moveToNext()", "checkType": "IF", "followUpCheckExpressionStart": 678, "followUpCheckExpressionEnd": 698, "followUpCheckBlockStart": 678, "followUpCheckBlockEnd": 949, "use": ["database.insert(String,String,ContentValues)", "database.update(String,ContentValues,String,String[])", "cursor.close()"], "useStart": [730, 878, 959], "useEnd": [769, 938, 968], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ramblurr/mp3tunes-android/tree/master/src/com/mp3tunes/android/LockerDb.java", "rawCode": "  private void insertAlbum(Album album) throws IOException, SQLiteException {\n    if (album == null) {\n      System.out.println(\"OMG Album NULL\");\n      return;\n    }\n    try {\n      if (album.getName().length() > 0) {\n        ContentValues cv = new ContentValues(2);\n        cv.put(\"_id\", album.getId());\n        cv.put(\"album_name\", album.getName());\n        cv.put(\"artist_name\", album.getArtistName());\n        cv.put(\"artist_id\", album.getArtistId());\n        cv.put(\"year\", album.getYear());\n        cv.put(\"track_count\", album.getTrackCount());\n\n        Cursor c =\n            mDb.query(\"album\", Music.ID, \"_id='\" + album.getId() + \"'\", null, null, null, null);\n\n        if (!c.moveToNext()) // album doesn't exist\n        mDb.insert(\"album\", UNKNOWN_STRING, cv);\n        else // album exists, so lets update with new data\n        {\n          cv.remove(\"_id\");\n          mDb.update(\"album\", cv, \"_id='\" + album.getId() + \"'\", null);\n        }\n\n        c.close();\n      }\n    } catch (SQLiteException e) {\n      throw e;\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8149, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 50, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nebogeo/borrowed-scenery/tree/master/zizim/zizim-android/src/foam/zizim/android/data/BoskoiDatabase.java", "rawCode": "  public Cursor fetchAllCategories() {\n    return mDb.query(\n        CATEGORIES_TABLE, CATEGORIES_COLUMNS, null, null, null, null, CATEGORY_TITLE + \" ASC\");\n  }\n"}, {"dataset": "query", "exampleID": 8150, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 1144, "focalAPIEnd": 1224, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 1292, "followUpCheckExpressionEnd": 1331, "followUpCheckBlockStart": 1292, "followUpCheckBlockEnd": 1800, "use": ["cursor.getCount()", "cursor.close()", "cursorRowToContentValues(cursor,ContentValues)", "cursorLongToContentValues(cursor,String,ContentValues,*)", "cursor.close()", "queryNumEntries(database,String)", "database.query(String,String[],String,String[],String,String,String)"], "useStart": [1257, 1373, 1566, 1656, 1805, 1978, 2126], "useEnd": [1286, 1399, 1619, 1747, 1831, 2020, 2398], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/android/content/AbstractTableMerger.java", "rawCode": "  /**\n   * Finds local changes, placing the results in the given result object.\n   *\n   * @param temporaryInstanceFactory As an optimization for the case where there are no client-side\n   *     diffs, mergeResult may initially have no {@link\n   *     android.content.TempProviderSyncResult#tempContentProvider}. If this is the first in the\n   *     sequence of AbstractTableMergers to find client-side diffs, it will use the given\n   *     ContentProvider to create a temporary instance and store its {@link ContentProvider} in the\n   *     mergeResult.\n   * @param account\n   * @param syncResult\n   */\n  private void findLocalChanges(\n      TempProviderSyncResult mergeResult,\n      SyncableContentProvider temporaryInstanceFactory,\n      String account,\n      SyncResult syncResult) {\n    SyncableContentProvider clientDiffs = mergeResult.tempContentProvider;\n    if (Log.isLoggable(TAG, Log.VERBOSE)) Log.v(TAG, \"generating client updates\");\n\n    final String[] accountSelectionArgs = new String[] {account};\n\n    // Generate the client updates and insertions\n    // Create a cursor for dirty records\n    Cursor localChangesCursor =\n        mDb.query(mTable, null, SELECT_UNSYNCED, accountSelectionArgs, null, null, null);\n    long numInsertsOrUpdates = localChangesCursor.getCount();\n    while (localChangesCursor.moveToNext()) {\n      if (mIsMergeCancelled) {\n        localChangesCursor.close();\n        return;\n      }\n      if (clientDiffs == null) {\n        clientDiffs = temporaryInstanceFactory.getTemporaryInstance();\n      }\n      mValues.clear();\n      cursorRowToContentValues(localChangesCursor, mValues);\n      mValues.remove(\"_id\");\n      DatabaseUtils.cursorLongToContentValues(localChangesCursor, \"_id\", mValues, _SYNC_LOCAL_ID);\n      clientDiffs.insert(mTableURL, mValues);\n    }\n    localChangesCursor.close();\n\n    // Generate the client deletions\n    if (Log.isLoggable(TAG, Log.VERBOSE)) Log.v(TAG, \"generating client deletions\");\n    long numEntries = DatabaseUtils.queryNumEntries(mDb, mTable);\n    long numDeletedEntries = 0;\n    if (mDeletedTable != null) {\n      Cursor deletedCursor =\n          mDb.query(\n              mDeletedTable,\n              syncIdAndVersionProjection,\n              _SYNC_ACCOUNT + \"=? AND \" + _SYNC_ID + \" IS NOT NULL\",\n              accountSelectionArgs,\n              null,\n              null,\n              mDeletedTable + \".\" + _SYNC_ID);\n\n      numDeletedEntries = deletedCursor.getCount();\n      while (deletedCursor.moveToNext()) {\n        if (mIsMergeCancelled) {\n          deletedCursor.close();\n          return;\n        }\n        if (clientDiffs == null) {\n          clientDiffs = temporaryInstanceFactory.getTemporaryInstance();\n        }\n        mValues.clear();\n        DatabaseUtils.cursorRowToContentValues(deletedCursor, mValues);\n        clientDiffs.insert(mDeletedTableURL, mValues);\n      }\n      deletedCursor.close();\n    }\n\n    if (clientDiffs != null) {\n      mergeResult.tempContentProvider = clientDiffs;\n    }\n    syncResult.stats.numDeletes += numDeletedEntries;\n    syncResult.stats.numUpdates += numInsertsOrUpdates;\n    syncResult.stats.numEntries += numEntries;\n  }\n"}, {"dataset": "query", "exampleID": 8151, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 125, "focalAPIEnd": 189, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tolien/serendipity/tree/master/src/com/swindells/map/SelectedLocationList.java", "rawCode": "  public Cursor fetchAll() {\n    String[] columns = {KEY_ROWID, KEY_LATITUDE, KEY_LONGITUDE, KEY_NAME, KEY_DESC};\n    return mDb.query(DATABASE_TABLE, columns, null, null, null, null, null);\n  }\n"}, {"dataset": "query", "exampleID": 8152, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 969, "focalAPIEnd": 1637, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kanata3249/Android-FFXIEQ/tree/master/ffxieq/src/com/github/kanata3249/ffxieq/android/db/EquipmentTable.java", "rawCode": "  public Cursor getCursor(\n      FFXIDAO dao,\n      SQLiteDatabase db,\n      int part,\n      int race,\n      int job,\n      int level,\n      String[] columns,\n      String orderBy,\n      String filter,\n      String weaponType) {\n    Cursor cursor;\n    String partStr, jobStr, alljobStr;\n    String filterexp;\n    String weaponexp;\n\n    partStr = dao.getString(FFXIString.PART_DB_MAIN + part);\n    jobStr = dao.getString(FFXIString.JOB_DB_WAR + job);\n    alljobStr = dao.getString(FFXIString.JOB_DB_ALL);\n    filterexp = \"\";\n    if (filter.length() > 0) {\n      filterexp =\n          \" AND (\"\n              + C_Name\n              + \" LIKE '%\"\n              + filter\n              + \"%' OR \"\n              + C_Description\n              + \" LIKE '%\"\n              + filter\n              + \"%')\";\n    }\n    weaponexp = \"\";\n    if (weaponType.length() > 0) {\n      weaponexp = \" AND (\" + C_Weapon + \" LIKE '%\" + weaponType + \"%')\";\n    }\n\n    try {\n      cursor =\n          db.query(\n              TABLE_NAME,\n              columns,\n              C_Part\n                  + \" LIKE '%\"\n                  + partStr\n                  + \"%' AND \"\n                  + C_Level\n                  + \" <= '\"\n                  + level\n                  + \"' AND \"\n                  + \"(\"\n                  + C_Job\n                  + \" LIKE '%\"\n                  + jobStr\n                  + \"%' OR \"\n                  + C_Job\n                  + \" = '\"\n                  + alljobStr\n                  + \"')\"\n                  + weaponexp\n                  + filterexp,\n              null,\n              null,\n              null,\n              orderBy);\n    } catch (SQLiteException e) {\n      cursor = null;\n    }\n\n    return cursor;\n  }\n"}, {"dataset": "query", "exampleID": 8153, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getReadableDatabase()"], "initializationStart": [347], "initializationEnd": [380], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 1031, "focalAPIEnd": 1243, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.setNotificationUri(*,Uri)", "database.query(String,String[],String,String[],String,String,String,String)", "cursor.setNotificationUri(*,Uri)"], "useStart": [1251, 2522, 2722], "useEnd": [1311, 2716, 2782], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/java/android/content/SearchRecentSuggestionsProvider.java", "rawCode": "  /**\n   * This method is provided for use by the ContentResolver. Do not override, or directly call from\n   * your own code.\n   */\n  // TODO: Confirm no injection attacks here, or rewrite.\n  @Override\n  public Cursor query(\n      Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n    SQLiteDatabase db = mOpenHelper.getReadableDatabase();\n\n    // special case for actual suggestions (from search manager)\n    if (mUriMatcher.match(uri) == URI_MATCH_SUGGEST) {\n      String suggestSelection;\n      String[] myArgs;\n      if (TextUtils.isEmpty(selectionArgs[0])) {\n        suggestSelection = null;\n        myArgs = null;\n      } else {\n        String like = \"%\" + selectionArgs[0] + \"%\";\n        if (mTwoLineDisplay) {\n          myArgs = new String[] {like, like};\n        } else {\n          myArgs = new String[] {like};\n        }\n        suggestSelection = mSuggestSuggestionClause;\n      }\n      // Suggestions are always performed with the default sort order\n      Cursor c =\n          db.query(\n              sSuggestions,\n              mSuggestionProjection,\n              suggestSelection,\n              myArgs,\n              null,\n              null,\n              ORDER_BY,\n              null);\n      c.setNotificationUri(getContext().getContentResolver(), uri);\n      return c;\n    }\n\n    // otherwise process arguments and perform a standard query\n    int length = uri.getPathSegments().size();\n    if (length != 1 && length != 2) {\n      throw new IllegalArgumentException(\"Unknown Uri\");\n    }\n\n    String base = uri.getPathSegments().get(0);\n    if (!base.equals(sSuggestions)) {\n      throw new IllegalArgumentException(\"Unknown Uri\");\n    }\n\n    String[] useProjection = null;\n    if (projection != null && projection.length > 0) {\n      useProjection = new String[projection.length + 1];\n      System.arraycopy(projection, 0, useProjection, 0, projection.length);\n      useProjection[projection.length] = \"_id AS _id\";\n    }\n\n    StringBuilder whereClause = new StringBuilder(256);\n    if (length == 2) {\n      whereClause.append(\"(_id = \").append(uri.getPathSegments().get(1)).append(\")\");\n    }\n\n    // Tack on the user's selection, if present\n    if (selection != null && selection.length() > 0) {\n      if (whereClause.length() > 0) {\n        whereClause.append(\" AND \");\n      }\n\n      whereClause.append('(');\n      whereClause.append(selection);\n      whereClause.append(')');\n    }\n\n    // And perform the generic query as requested\n    Cursor c =\n        db.query(\n            base,\n            useProjection,\n            whereClause.toString(),\n            selectionArgs,\n            null,\n            null,\n            sortOrder,\n            null);\n    c.setNotificationUri(getContext().getContentResolver(), uri);\n    return c;\n  }\n"}, {"dataset": "query", "exampleID": 8154, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(database==null)", "guardType": "IF {", "guardExpressionStart": 27, "guardExpressionEnd": 54, "guardBlockStart": 27, "guardBlockEnd": 82, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 104, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.close()"], "useStart": [198, 232], "useEnd": [218, 246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/embest-tech/rowboat-frameworks-base/tree/master/core/java/android/webkit/WebViewDatabase.java", "rawCode": "  boolean hasCache() {\n    if (mCacheDatabase == null) {\n      return false;\n    }\n\n    Cursor cursor = mCacheDatabase.query(\"cache\", ID_PROJECTION, null, null, null, null, null);\n    boolean ret = cursor.moveToFirst() == true;\n    cursor.close();\n    return ret;\n  }\n"}, {"dataset": "query", "exampleID": 8155, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getReadableDatabase()"], "initializationStart": [183], "initializationEnd": [211], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 238, "focalAPIEnd": 433, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.move(*)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.getString(int)", "close(cursor,SQLiteDatabase)"], "useStart": [441, 486, 530, 573, 617, 659, 852], "useEnd": [464, 505, 549, 592, 634, 678, 869], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 836, "finallyExpressionEnd": 844, "finallyBlockStart": 836, "finallyBlockEnd": 876, "cleanUpCallStart": [852], "cleanUpCallEnd": [869], "url": "https://github.com/cgoines/doweown/tree/master/build/doweown/cordova/plugins/com.phonegap.plugins.barcodescanner/src/android/LibraryProject/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public HistoryItem buildHistoryItem(int number) {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor =\n          db.query(\n              DBHelper.TABLE_NAME,\n              COLUMNS,\n              null,\n              null,\n              null,\n              null,\n              DBHelper.TIMESTAMP_COL + \" DESC\");\n      cursor.move(number + 1);\n      String text = cursor.getString(0);\n      String display = cursor.getString(1);\n      String format = cursor.getString(2);\n      long timestamp = cursor.getLong(3);\n      String details = cursor.getString(4);\n      Result result = new Result(text, null, null, BarcodeFormat.valueOf(format), timestamp);\n      return new HistoryItem(result, display, details);\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8156, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 156, "focalAPIEnd": 272, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 290, "followUpCheckExpressionEnd": 312, "followUpCheckBlockStart": 290, "followUpCheckBlockEnd": 364, "use": ["insertGroupMembership(cursor,SQLiteStatement)", "cursor.close()"], "useStart": [323, 387], "useEnd": [355, 396], "hasFinally": 1, "cleanUpCall": ["Cursor.close()", "SQLiteStatement.close()"], "finallyExpressionStart": 371, "finallyExpressionEnd": 379, "finallyBlockStart": 371, "finallyBlockEnd": 425, "cleanUpCallStart": [387, 404], "cleanUpCallEnd": [396, 418], "url": "https://github.com/OMFGB/packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/LegacyContactImporter.java", "rawCode": "  private void importGroupMemberships() {\n    SQLiteStatement insert = mTargetDb.compileStatement(GroupMembershipInsert.INSERT_SQL);\n    Cursor c =\n        mSourceDb.query(\n            GroupMembershipQuery.TABLE, GroupMembershipQuery.COLUMNS, null, null, null, null, null);\n    try {\n      while (c.moveToNext()) {\n        insertGroupMembership(c, insert);\n      }\n    } finally {\n      c.close();\n      insert.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8157, "initialization": ["SQLiteDatabase database = DatabaseHelper.getReadableDatabase()"], "initializationStart": [166], "initializationEnd": [198], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 427, "focalAPIEnd": 501, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.getInt(int)", "cursor.close()"], "useStart": [519, 574, 653], "useEnd": [539, 590, 667], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 637, "finallyExpressionEnd": 645, "finallyBlockStart": 637, "finallyBlockEnd": 674, "cleanUpCallStart": [653], "cleanUpCallEnd": [667], "url": "https://github.com/thomasychen/andoku/tree/master/Andoku/src/com/googlecode/andoku/db/AndokuDatabase.java", "rawCode": "  public GameStatistics getStatistics(String puzzleSourceId) {\n    if (Constants.LOG_V) Log.v(TAG, \"getStatistics(\" + puzzleSourceId + \")\");\n\n    SQLiteDatabase db = openHelper.getReadableDatabase();\n\n    String[] columns = {\"COUNT(*)\", \"SUM(timer)\", \"MIN(timer)\", \"MAX(timer)\"};\n    String selection = COL_SOURCE + \"=? AND \" + COL_SOLVED + \"=1\";\n    String[] selectionArgs = new String[] {puzzleSourceId};\n    Cursor cursor = db.query(TABLE_GAMES, columns, selection, selectionArgs, null, null, null);\n    try {\n      cursor.moveToFirst();\n\n      return new GameStatistics(cursor.getInt(0), cursor.getLong(1), cursor.getLong(2));\n    } finally {\n      cursor.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8158, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 190, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getCount()", "cursor.deactivate()"], "useStart": [285, 309], "useEnd": [302, 328], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mWater/mWater-Android-App/tree/master/android/tests/src/co/mwater/clientapp/test/SyncTableTests.java", "rawCode": "  public void testInsertServer() {\n    String uid = UUID.randomUUID().toString();\n    testSyncDatabase.insert(uid, 1);\n\n    // Check that changes table contains no entry\n    Cursor cursor = db.query(SyncChangesTable.TABLE_NAME, null, null, null, null, null, null);\n    assertEquals(0, cursor.getCount());\n    cursor.deactivate();\n  }\n"}, {"dataset": "query", "exampleID": 8159, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 68, "focalAPIEnd": 174, "followUpCheck": "cursor.getCount() == 0", "checkType": "IF", "followUpCheckExpressionStart": 181, "followUpCheckExpressionEnd": 205, "followUpCheckBlockStart": 181, "followUpCheckBlockEnd": 275, "use": ["cursor.close()", "cursor.moveToFirst()", "toSociety(cursor)", "cursor.close()"], "useStart": [214, 257, 299, 320], "useEnd": [225, 274, 313, 331], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/matthew117/DurhamLife-Android/tree/master/DuchessAndroid/src/uk/ac/dur/duchess/io/provider/DatabaseHandler.java", "rawCode": "  public Society getSociety(String name) {\n    Cursor row =\n        db.query(\n            SOCIETY_TABLE, null, KEY_SOCIETY_NAME + \"=\\\"\" + name + \"\\\"\", null, null, null, null);\n\n    if (row.getCount() == 0) {\n      row.close();\n      return null;\n    } else row.moveToFirst();\n\n    Society society = toSociety(row);\n\n    row.close();\n\n    return society;\n  }\n"}, {"dataset": "query", "exampleID": 8160, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getWritableDatabase()"], "initializationStart": [161], "initializationEnd": [189], "hasTryCatch": 1, "exceptionType": "SQLiteException", "exceptionHandlingCall": ["w(String,*)"], "tryExpressionStart": 144, "tryExpressionEnd": 148, "tryBlockStart": 144, "tryBlockEnd": 979, "catchExpressionStart": 672, "catchExpressionEnd": 701, "catchBlockStart": 672, "catchBlockEnd": 938, "exceptionHandlingCallStart": [897], "exceptionHandlingCallEnd": [913], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 216, "focalAPIEnd": 421, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 459, "followUpCheckExpressionEnd": 486, "followUpCheckBlockStart": 459, "followUpCheckBlockEnd": 665, "use": ["cursor.move(int)", "cursor.getString(int)", "database.delete(String,String,String[])", "close(cursor,SQLiteDatabase)"], "useStart": [429, 509, 592, 955], "useEnd": [451, 528, 656, 972], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 939, "finallyExpressionEnd": 947, "finallyBlockStart": 939, "finallyBlockEnd": 979, "cleanUpCallStart": [955], "cleanUpCallEnd": [972], "url": "https://github.com/youknowone/zxing/tree/master/android/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public void trimHistory() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getWritableDatabase();\n      cursor =\n          db.query(\n              DBHelper.TABLE_NAME,\n              ID_COL_PROJECTION,\n              null,\n              null,\n              null,\n              null,\n              DBHelper.TIMESTAMP_COL + \" DESC\");\n      cursor.move(MAX_ITEMS);\n      while (cursor.moveToNext()) {\n        String id = cursor.getString(0);\n        Log.i(TAG, \"Deleting scan history ID \" + id);\n        db.delete(DBHelper.TABLE_NAME, DBHelper.ID_COL + '=' + id, null);\n      }\n    } catch (SQLiteException sqle) {\n      // We're seeing an error here when called in CaptureActivity.onCreate() in rare cases\n      // and don't understand it. First theory is that it's transient so can be safely ignored.\n      Log.w(TAG, sqle);\n      // continue\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8161, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 496, "focalAPIEnd": 696, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/krli/InfosierrAPP/tree/master/InfosierrAPP/src/es/ulpgc/IST/infosierrapp/datos/local/BD_local_Acceso.java", "rawCode": "  /**\n   * Devuelve todo el contenido de la BD mediante un cursor. Importante cerrar el cursor y la base\n   * de datos una vez se terminen de usar.\n   *\n   * @return un cursor apuntando a todos los resultados o null si la db estaba vacía o hubo algún\n   *     error\n   */\n  public Cursor get_all_cursor() {\n    // Cursor devuelto\n    Cursor cursor = null;\n    // Abre la conexón con la BD\n    if (open_db()) {\n      // Obtiene el cursor con todos los resultados de la BD\n      cursor =\n          database.query(\n              TablaResultados.TABLE_NAME,\n              TablaResultados.ALL_COLUMNS,\n              null,\n              null,\n              null,\n              null,\n              null);\n    } // error abriendo la db\n    return cursor;\n  }\n"}, {"dataset": "query", "exampleID": 8162, "initialization": ["String selection = getId()"], "initializationStart": [326], "initializationEnd": [337], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 354, "focalAPIEnd": 418, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 479, "followUpCheckExpressionEnd": 501, "followUpCheckBlockStart": 479, "followUpCheckBlockEnd": 544, "use": ["cursor.getLong(int)", "cursor.close()"], "useStart": [524, 549], "useEnd": [536, 558], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brianmikkelsen/splurge/tree/master/tags/appendix_cd/src/dk/aau/sw802f12/splurge/database/DBHelper.java", "rawCode": "  /**\n   * Add {@link Artist}s to the {@link Tag}s list of artists.\n   *\n   * @param tag The Tag to retrieve Artists for.\n   */\n  private void taggedArtists(Tag tag) {\n    openDB();\n    Collection<Artist> artists = new HashSet<Artist>();\n    String[] cols = {DB.ARTISTTAG_ARTIST};\n    String select = DB.ARTISTTAG_TAG + \"=\" + tag.getId();\n    Cursor c = db.query(DB.TB_ARTISTTAGS, cols, select, null, null, null, null);\n    ArrayList<Long> artistIds = new ArrayList<Long>();\n    while (c.moveToNext()) {\n      artistIds.add(c.getLong(0));\n    }\n    c.close();\n    for (long l : artistIds) {\n      artists.add(mr.getArtist(l));\n    }\n    tag.tagArtists(artists);\n  }\n"}, {"dataset": "query", "exampleID": 8163, "initialization": ["SQLiteDatabase database = ContactInfoDao.getDatabase()"], "initializationStart": [303], "initializationEnd": [331], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 367, "focalAPIEnd": 450, "followUpCheck": "cursor != null && cursor.getCount() > 0", "checkType": "IF", "followUpCheckExpressionStart": 457, "followUpCheckExpressionEnd": 513, "followUpCheckBlockStart": 457, "followUpCheckBlockEnd": 987, "use": ["cursor.getColumnIndex(*)", "cursor.getString(*)", "cursor.getColumnIndex(*)", "cursor.getInt(*)", "cursor.close()"], "useStart": [634, 594, 789, 752, 960], "useEnd": [712, 713, 859, 860, 980], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xstd/private_phone/tree/master/android_code/src/com/xstd/pirvatephone/utils/ContactUtils.java", "rawCode": "  public static ArrayList<String> queryPrivateNotIntereptNumber(Context context) {\n    ArrayList<String> notIntereptNumbers = null;\n    notIntereptNumbers = new ArrayList<String>();\n    ContactInfoDao contactInfoDao = ContactInfoDaoUtils.getContactInfoDao(context);\n    SQLiteDatabase contactDatabase = contactInfoDao.getDatabase();\n    Cursor contactQuery =\n        contactDatabase.query(ContactInfoDao.TABLENAME, null, null, null, null, null, null);\n\n    if (contactQuery != null && contactQuery.getCount() > 0) {\n      while (contactQuery.moveToNext()) {\n        String number =\n            contactQuery.getString(\n                contactQuery.getColumnIndex(ContactInfoDao.Properties.Phone_number.columnName));\n        int numbertype =\n            contactQuery.getInt(\n                contactQuery.getColumnIndex(ContactInfoDao.Properties.Type.columnName));\n\n        if (numbertype == 0) {\n          notIntereptNumbers.add(number);\n        }\n      }\n      contactQuery.close();\n    }\n    return notIntereptNumbers;\n  }\n"}, {"dataset": "query", "exampleID": 8164, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 130, "focalAPIEnd": 202, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new CassEventCursor(cursor)"], "useStart": [99], "useEnd": [203], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apps8os/contextlogger3/tree/master/loggerApp/src/org/apps8os/logger/android/storage/CassCaseDatabase.java", "rawCode": "  @Override\n  public CassEventCursor getAllEventCursor() {\n    synchronized (mLock) {\n      return new CassEventCursor(\n          mDatabase.query(CassEventTable.name, null, null, null, null, null, null));\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8165, "initialization": ["SQLiteDatabase database = SQLiteMasterDataHelper.getReadableDatabase()"], "initializationStart": [69], "initializationEnd": [97], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 122, "focalAPIEnd": 208, "followUpCheck": "cursor.moveToNext()", "checkType": "IF", "followUpCheckExpressionStart": 236, "followUpCheckExpressionEnd": 255, "followUpCheckBlockStart": 236, "followUpCheckBlockEnd": 316, "use": ["applyCursor(Book,cursor)", "cursor.close()"], "useStart": [289, 321], "useEnd": [309, 330], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dennischen/daily-money/tree/master/dailymoney/src/com/bottleworks/dailymoney/data/SQLiteMasterDataProvider.java", "rawCode": "  @Override\n  public Book findBook(int id) {\n    SQLiteDatabase db = helper.getReadableDatabase();\n    Cursor c =\n        db.query(TB_BOOK, COL_BOOK_ALL, COL_BOOK_ID + \" = \" + id, null, null, null, null, \"1\");\n    Book book = null;\n    if (c.moveToNext()) {\n      book = new Book();\n      applyCursor(book, c);\n    }\n    c.close();\n    return book;\n  }\n"}, {"dataset": "query", "exampleID": 8166, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 1490, "focalAPIEnd": 1608, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["extractParticipation(cursor)"], "useStart": [1623], "useEnd": [1655], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neeraj2608/realtrack/tree/master/src/com/realtrackandroid/backend/activities/ParticipationDAO.java", "rawCode": "  public ArrayList<Participation> getAllUnservicedParticipations() {\n    openDB();\n    ArrayList<Participation> output = null;\n    String[] columnsToRead = new String[22];\n    columnsToRead[0] = Participation.COLUMN_ID;\n    columnsToRead[1] = Participation.COLUMN_REMINDERID;\n    columnsToRead[2] = Participation.COLUMN_MEN09;\n    columnsToRead[3] = Participation.COLUMN_MEN1824;\n    columnsToRead[4] = Participation.COLUMN_MENOVER25;\n    columnsToRead[5] = Participation.COLUMN_WOMEN09;\n    columnsToRead[6] = Participation.COLUMN_WOMEN1824;\n    columnsToRead[7] = Participation.COLUMN_WOMENOVER25;\n    columnsToRead[8] = Participation.COLUMN_DATE;\n    columnsToRead[9] = Participation.COLUMN_ISSERVICED;\n    columnsToRead[10] = Participation.COLUMN_ACTIVITYID;\n    columnsToRead[11] = Participation.COLUMN_NOTES;\n    columnsToRead[12] = Participation.COLUMN_MEN1017;\n    columnsToRead[13] = Participation.COLUMN_WOMEN1017;\n    columnsToRead[14] = Participation.COLUMN_SPMEN09;\n    columnsToRead[15] = Participation.COLUMN_SPMEN1017;\n    columnsToRead[16] = Participation.COLUMN_SPMEN1824;\n    columnsToRead[17] = Participation.COLUMN_SPMENOVER25;\n    columnsToRead[18] = Participation.COLUMN_SPWOMEN09;\n    columnsToRead[19] = Participation.COLUMN_SPWOMEN1017;\n    columnsToRead[20] = Participation.COLUMN_SPWOMEN1824;\n    columnsToRead[21] = Participation.COLUMN_SPWOMENOVER25;\n\n    String whereClause = Participation.COLUMN_ISSERVICED + '=' + \"'false'\";\n    Cursor returnData =\n        readDatabase.query(\n            Participation.PARTICIPATION_TABLE, columnsToRead, whereClause, null, null, null, null);\n    output = extractParticipation(returnData);\n    closeDB();\n    return output;\n  }\n"}, {"dataset": "query", "exampleID": 8167, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 151, "focalAPIEnd": 373, "followUpCheck": "!cursor.isAfterLast()", "checkType": "LOOP {", "followUpCheckExpressionStart": 405, "followUpCheckExpressionEnd": 434, "followUpCheckBlockStart": 405, "followUpCheckBlockEnd": 562, "use": ["cursor.moveToFirst()", "cursorToAssignment(cursor)", "cursor.moveToNext()", "cursor.close()"], "useStart": [379, 467, 536, 568], "useEnd": [399, 493, 555, 582], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/randallm/shukudai/tree/master/src/com/randallma/shukudai/AssignmentsDataSource.java", "rawCode": "  public ArrayList<Assignment> getNewAssignments() {\n    ArrayList<Assignment> assignments = new ArrayList<Assignment>();\n\n    Cursor cursor =\n        db.query(\n            SQLiteHelper.TABLE_ASSIGNMENTS,\n            null,\n            SQLiteHelper.COLUMN_ARCHIVED + \" = 0\",\n            null,\n            null,\n            null,\n            SQLiteHelper.COLUMN_ID + \" DESC\");\n    cursor.moveToFirst();\n    while (!cursor.isAfterLast()) {\n      Assignment assignment = cursorToAssignment(cursor);\n      assignments.add(assignment);\n      cursor.moveToNext();\n    }\n\n    cursor.close();\n    return assignments;\n  }\n"}, {"dataset": "query", "exampleID": 8168, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["database.insert(String,String,ContentValues)"], "configurationStart": [594], "configurationEnd": [647], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 677, "focalAPIEnd": 885, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 891, "followUpCheckExpressionEnd": 916, "followUpCheckBlockStart": 891, "followUpCheckBlockEnd": 959, "use": ["cursorToMole(cursor)"], "useStart": [932], "useEnd": [952], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CS301CodeBSOD/MoleFinder/tree/master/src/cs310w10/MoleFinder/Model/MolesDataSource.java", "rawCode": "  /**\n   * Create a Mole object and set its attribute to the values supplied. Id is assigned by the\n   * database.\n   *\n   * @param the name of the mole\n   * @param the description of the mole\n   * @param the location of the mole\n   * @return A Mole object\n   */\n  public Mole createMole(String name, String description, String location) {\n    Mole mole = new Mole();\n    ContentValues values = new ContentValues();\n    values.put(TableMoles.COLUMN_NAME, name);\n    values.put(TableMoles.COLUMN_LOCATION, location);\n    values.put(TableMoles.COLUMN_DESCRIPTION, description);\n\n    long rowId = database.insert(TableMoles.TABLE_MOLES, null, values);\n    Cursor cursor =\n        database.query(\n            TableMoles.TABLE_MOLES,\n            TableMoles.ALLCOLUMNS,\n            TableMoles.COLUMN_ID + \" = \" + rowId,\n            null,\n            null,\n            null,\n            null);\n    if (cursor.moveToFirst()) {\n      mole = cursorToMole(cursor);\n    }\n    return mole;\n  }\n"}, {"dataset": "query", "exampleID": 8169, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 155, "focalAPIEnd": 267, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 285, "followUpCheckExpressionEnd": 307, "followUpCheckBlockStart": 285, "followUpCheckBlockEnd": 357, "use": ["insertDeletedPerson(cursor,SQLiteStatement)", "cursor.close()"], "useStart": [318, 380], "useEnd": [348, 389], "hasFinally": 1, "cleanUpCall": ["Cursor.close()", "SQLiteStatement.close()"], "finallyExpressionStart": 364, "finallyExpressionEnd": 372, "finallyBlockStart": 364, "finallyBlockEnd": 418, "cleanUpCallStart": [380, 397], "cleanUpCallEnd": [389, 411], "url": "https://github.com/classicnerd/android_packages_providers_ContactsProvider/tree/master/src/com/android/providers/contacts/LegacyContactImporter.java", "rawCode": "  private void importDeletedPeople() {\n    SQLiteStatement insert = mTargetDb.compileStatement(DeletedRawContactInsert.INSERT_SQL);\n    Cursor c =\n        mSourceDb.query(\n            DeletedPeopleQuery.TABLE, DeletedPeopleQuery.COLUMNS, null, null, null, null, null);\n    try {\n      while (c.moveToNext()) {\n        insertDeletedPerson(c, insert);\n      }\n    } finally {\n      c.close();\n      insert.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8170, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 448, "focalAPIEnd": 736, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new SimpleCursorAdapter(*,*,cursor,String[],int[])"], "useStart": [780], "useEnd": [846], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HiroshiOkada/PwMemo/tree/master/src/com/toycode/pwmemo/InterceptListActivity.java", "rawCode": "  @Override\n  protected void updateAdapter() {\n    if (App.isEmptyCharSequence(mSearchString)) {\n      super.updateAdapter();\n      return;\n    }\n\n    final String[] COLUMNS = {Const.COLUMN.ID, Const.COLUMN.TITLE};\n    final String WHERE = Const.COLUMN.TITLE + \" LIKE ?\";\n    final String[] FROM = {Const.COLUMN.TITLE};\n    final int[] TO = {R.id.RowTitleTextView};\n    String[] whereArgs = {\"%\" + mSearchString + \"%\"};\n    Cursor cursor =\n        mDb.query(\n            Const.TABLE.PWMEMO, // table\n            COLUMNS, // columns\n            WHERE, // selection\n            whereArgs, // selectionArgs\n            null, // groupBy\n            null, // having\n            Const.COLUMN.TITLE + \" COLLATE NOCASE\" // orderBy\n            );\n    SimpleCursorAdapter adapter =\n        new SimpleCursorAdapter(this, R.layout.list_row, cursor, FROM, TO);\n    setListAdapter(adapter);\n  }\n"}, {"dataset": "query", "exampleID": 8171, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 276, "focalAPIEnd": 479, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 485, "followUpCheckExpressionEnd": 511, "followUpCheckBlockStart": 485, "followUpCheckBlockEnd": 701, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.close()"], "useStart": [535, 577, 706], "useEnd": [555, 597, 721], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ggc-itec/ggc-connect/tree/master/src/edu/ggc/it/banner/CourseSearchBuilder.java", "rawCode": "  private Instructor getInstructor(SQLiteDatabase db, long instId) {\n    if (cachedInstructors.containsKey(instId)) return cachedInstructors.get(instId);\n\n    Instructor instructor = null;\n    String[] args = new String[] {Long.toString(instId)};\n    Cursor instcsr =\n        db.query(\n            CourseDB.Instructors.TABLE,\n            INSTRUCTOR_COLUMNS,\n            CourseDB.Instructors.COL_ID + \" = ?\",\n            args,\n            null,\n            null,\n            null);\n    if (instcsr.moveToFirst()) {\n      String email = instcsr.getString(1);\n      String name = instcsr.getString(2);\n      instructor = new Instructor(name, email);\n      cachedInstructors.put(instId, instructor);\n    }\n    instcsr.close();\n\n    return instructor;\n  }\n"}, {"dataset": "query", "exampleID": 8172, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(distinct,table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 311, "focalAPIEnd": 518, "followUpCheck": "cursor != null", "checkType": "IF", "followUpCheckExpressionStart": 524, "followUpCheckExpressionEnd": 538, "followUpCheckBlockStart": 524, "followUpCheckBlockEnd": 569, "use": ["cursor.moveToFirst()"], "useStart": [547], "useEnd": [562], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zeitkunst/FluidNexusAndroid/tree/master/src/net/fluidnexus/FluidNexusAndroid/provider/MessagesProviderHelper.java", "rawCode": "  /**\n   * Return item based on its ID\n   *\n   * @param id ID of the desired item\n   */\n  public Cursor returnItemByID(long id) throws SQLException {\n    // Uri uri = ContentUris.withAppendedId(MESSAGES_URI_ID_BASE, id);\n    // Cursor c = cr.query(uri, ALL_PROJECTION, null, null, null);\n    Cursor c =\n        mDb.query(\n            true,\n            DATABASE_TABLE,\n            ALL_PROJECTION,\n            KEY_ID + \" = \" + id,\n            null,\n            null,\n            null,\n            null,\n            null);\n    if (c != null) {\n      c.moveToFirst();\n    }\n    return c;\n  }\n"}, {"dataset": "query", "exampleID": 8173, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 61, "focalAPIEnd": 243, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 277, "followUpCheckExpressionEnd": 299, "followUpCheckBlockStart": 277, "followUpCheckBlockEnd": 446, "use": ["cursor.getColumnIndex(String)", "cursor.getString(*)", "cursor.close()"], "useStart": [344, 332, 451], "useEnd": [371, 372, 460], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/viv/linphone-android/tree/master/src/org/linphone/ChatStorage.java", "rawCode": "  public String getDraft(String to) {\n    Cursor c =\n        db.query(\n            DRAFT_TABLE_NAME,\n            null,\n            \"remoteContact LIKE \\\"\" + to + \"\\\"\",\n            null,\n            null,\n            null,\n            \"id ASC\");\n\n    String message = null;\n    while (c.moveToNext()) {\n      try {\n        message = c.getString(c.getColumnIndex(\"message\"));\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n    c.close();\n\n    return message;\n  }\n"}, {"dataset": "query", "exampleID": 8174, "initialization": ["SQLiteDatabase database = getWritableDatabase()", "String[] selectionArgs = valueOf(long)"], "initializationStart": [160, 226], "initializationEnd": [181, 249], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["e(String,String,*)"], "tryExpressionStart": 142, "tryExpressionEnd": 146, "tryBlockStart": 142, "tryBlockEnd": 1166, "catchExpressionStart": 1076, "catchExpressionEnd": 1096, "catchBlockStart": 1076, "catchBlockEnd": 1166, "exceptionHandlingCallStart": [1104], "exceptionHandlingCallEnd": [1159], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 341, "focalAPIEnd": 739, "followUpCheck": "cursor == null || cursor.getCount() == 0", "checkType": "IF", "followUpCheckExpressionStart": 748, "followUpCheckExpressionEnd": 795, "followUpCheckBlockStart": 748, "followUpCheckBlockEnd": 1069, "use": ["database.insertOrThrow(String,String,ContentValues)", "cursor.close()", "database.close()"], "useStart": [1010, 1201, 1254], "useEnd": [1060, 1216, 1265], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Gris87/EGE/tree/master/src/com/gris/ege/db/ResultsOpenHelper.java", "rawCode": "  public void setTaskFinished(long aUsedId, long aLessonId, int aTaskNumber) {\n    SQLiteDatabase aDb = null;\n    Cursor aCursor = null;\n\n    try {\n      aDb = getWritableDatabase();\n\n      String[] aSelectionArgs = {\n        String.valueOf(aUsedId), String.valueOf(aLessonId), String.valueOf(aTaskNumber)\n      };\n      aCursor =\n          aDb.query(\n              TASKS_TABLE_NAME,\n              TASKS_COLUMNS,\n              COLUMN_USER_ID\n                  + \"=?\"\n                  + \" AND \"\n                  + COLUMN_LESSON_ID\n                  + \"=?\"\n                  + \" AND \"\n                  + COLUMN_TASK_NUMBER\n                  + \"=?\",\n              aSelectionArgs,\n              null,\n              null,\n              null);\n\n      if (aCursor == null || aCursor.getCount() == 0) {\n        ContentValues aValues = new ContentValues();\n        aValues.put(COLUMN_USER_ID, aUsedId);\n        aValues.put(COLUMN_LESSON_ID, aLessonId);\n        aValues.put(COLUMN_TASK_NUMBER, aTaskNumber);\n\n        aDb.insertOrThrow(TASKS_TABLE_NAME, null, aValues);\n      }\n    } catch (Exception e) {\n      Log.e(TAG, \"Problem occurred while setTaskFinished\", e);\n    }\n\n    if (aCursor != null) {\n      aCursor.close();\n    }\n\n    if (aDb != null) {\n      aDb.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8175, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 93, "focalAPIEnd": 203, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 210, "followUpCheckExpressionEnd": 230, "followUpCheckBlockStart": 210, "followUpCheckBlockEnd": 498, "use": ["cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.getDouble(int)", "cursor.close()"], "useStart": [306, 332, 393, 409, 459, 504], "useEnd": [320, 346, 407, 423, 473, 513], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/michaelkanis/SipgateInfo/tree/master/src/net/skweez/sipgate/db/DataSource.java", "rawCode": "  public AccountInfo getAccountInfo() {\n    AccountInfo info = null;\n\n    Cursor c =\n        database.query(\n            DatabaseHelper.TABLE_ACCOUNTS, allColumnsInAccounts, null, null, null, null, null);\n\n    if (c.moveToFirst()) {\n      info = new AccountInfo();\n      info.setDefaultUserUri(new UserUri(c.getString(4), Uri.parse(c.getString(1)), true));\n      info.setUserName(new UserName(c.getString(2), c.getString(3)));\n      info.setBalance(new Price(c.getDouble(5), c.getString(6)));\n    }\n\n    c.close();\n\n    return info;\n  }\n"}, {"dataset": "query", "exampleID": 8176, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 342, "focalAPIEnd": 551, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 570, "followUpCheckExpressionEnd": 592, "followUpCheckBlockStart": 570, "followUpCheckBlockEnd": 1295, "use": ["cursor.getLong(*)", "cursor.getString(*)", "cursor.getInt(*)", "cursor.close()"], "useStart": [620, 688, 764, 1318], "useEnd": [664, 739, 806, 1327], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 1302, "finallyExpressionEnd": 1310, "finallyBlockStart": 1302, "finallyBlockEnd": 1334, "cleanUpCallStart": [1318], "cleanUpCallEnd": [1327], "url": "https://github.com/android/platform_packages_providers_contactsprovider/tree/master/src/com/android/providers/contacts/aggregation/ContactAggregator.java", "rawCode": "  /**\n   * Loads all candidate rows from the name lookup table and updates match scores based on that\n   * data.\n   */\n  private void matchAllCandidates(\n      SQLiteDatabase db,\n      String selection,\n      MatchCandidateList candidates,\n      ContactMatcher matcher,\n      int algorithm,\n      String limit) {\n    final Cursor c =\n        db.query(\n            ContactNameLookupQuery.TABLE,\n            ContactNameLookupQuery.COLUMNS,\n            selection,\n            null,\n            null,\n            null,\n            null,\n            limit);\n\n    try {\n      while (c.moveToNext()) {\n        Long contactId = c.getLong(ContactNameLookupQuery.CONTACT_ID);\n        String name = c.getString(ContactNameLookupQuery.NORMALIZED_NAME);\n        int nameType = c.getInt(ContactNameLookupQuery.NAME_TYPE);\n\n        // Note the N^2 complexity of the following fragment. This is not a huge concern\n        // since the number of candidates is very small and in general secondary hits\n        // in the absence of primary hits are rare.\n        for (int i = 0; i < candidates.mCount; i++) {\n          NameMatchCandidate candidate = candidates.mList.get(i);\n          matcher.matchName(\n              contactId, candidate.mLookupType, candidate.mName, nameType, name, algorithm);\n        }\n      }\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8177, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 172, "focalAPIEnd": 232, "followUpCheck": "cursor != null", "checkType": "IF", "followUpCheckExpressionStart": 239, "followUpCheckExpressionEnd": 259, "followUpCheckBlockStart": 239, "followUpCheckBlockEnd": 304, "use": ["cursor.moveToFirst()", "cursor.close()"], "useStart": [276, 360], "useEnd": [297, 375], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/welovechickens/Annenberg-Friend-Finder/tree/master/Annenberg Friend Finder/src/com/harvard/annenberg/MenuDbAdapter.java", "rawCode": "  /**\n   * Fetch a list of all contacts in the database\n   *\n   * @return Db cursor\n   */\n  public Cursor fetchAllFoods() {\n    boolean found = false;\n    Cursor mCursor = mDb.query(FOOD_DB_TABLE, null, null, null, null, null, null);\n\n    if (mCursor != null) {\n      found = mCursor.moveToFirst();\n    }\n    if (!found) {\n      if (mCursor != null) {\n        mCursor.close();\n      }\n      return null;\n    }\n    return mCursor;\n  }\n"}, {"dataset": "query", "exampleID": 8178, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 86, "focalAPIEnd": 330, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToCategorieTab(cursor)"], "useStart": [343], "useEnd": [366], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amanigot/appsevenementandroid/tree/master/src/fr/clivana/lemansnews/dao/CategoriesDAO.java", "rawCode": "  public List<Categorie> getSelectedCategories() {\n    open();\n    Cursor c =\n        dbClivana.query(\n            NomsSQL.TABLE_CATEGORIE,\n            null,\n            NomsSQL.COLONNE_CATEGORIE_SELECTION + \" = 1\",\n            null,\n            null,\n            null,\n            NomsSQL.COLONNE_CATEGORIE_NOM,\n            null);\n    return cursorToCategorieTab(c);\n  }\n"}, {"dataset": "query", "exampleID": 8179, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 112, "focalAPIEnd": 301, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/blegat/Horeca/tree/master/src/com/horeca/Picture.java", "rawCode": "  private static Cursor getPlatCursor(SQLiteDatabase db, String selection, String[] selectionArgs) {\n    return db.query(\n        HorecaContract.PlatPicture.TABLE_NAME,\n        HorecaContract.PlatPicture.COLUMN_NAMES,\n        selection,\n        selectionArgs,\n        null,\n        null,\n        null);\n  }\n"}, {"dataset": "query", "exampleID": 8180, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getReadableDatabase()"], "initializationStart": [168], "initializationEnd": [196], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 213, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.getInt(int)", "close(cursor,SQLiteDatabase)"], "useStart": [294, 329, 373], "useEnd": [314, 345, 390], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 357, "finallyExpressionEnd": 365, "finallyBlockStart": 357, "finallyBlockEnd": 397, "cleanUpCallStart": [373], "cleanUpCallEnd": [390], "url": "https://github.com/Dominik8787/GunzenhausenTour/tree/master/WebAppGun/CaptureActivity/CaptureActivity/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public boolean hasHistoryItems() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor = db.query(DBHelper.TABLE_NAME, COUNT_COLUMN, null, null, null, null, null);\n      cursor.moveToFirst();\n      return cursor.getInt(0) > 0;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8181, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 91, "focalAPIEnd": 190, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/todoroo/astrid/tree/master/astrid/src-legacy/com/timsu/astrid/data/task/TaskController.java", "rawCode": "  /** Return a list of all tasks */\n  public Cursor getBackupTaskListCursor() {\n    return database.query(\n        tasksTable, TaskModelForXml.FIELD_LIST, null, null, null, null, null, null);\n  }\n"}, {"dataset": "query", "exampleID": 8182, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 88, "focalAPIEnd": 161, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.isAfterLast()"], "useStart": [167, 197], "useEnd": [182, 212], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/idanna/Final-Project/tree/master/src/clock/db/DbAdapter.java", "rawCode": "  public boolean hasInitialData() {\n    boolean retVal;\n    this.open();\n    Cursor c = database.query(Connection.TABLE_DATA, null, null, null, null, null, null);\n    c.moveToFirst();\n    retVal = c.isAfterLast();\n    this.close();\n    return !retVal;\n  }\n"}, {"dataset": "query", "exampleID": 8183, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 46, "focalAPIEnd": 216, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ramblurr/mp3tunes-android/tree/master/src/com/mp3tunes/android/LockerDb.java", "rawCode": "  public Cursor getQueueCursor() {\n    return mDb.query(\n        \"track, current_playlist\",\n        Music.TRACK,\n        \"track._id=current_playlist.track_id\",\n        null,\n        null,\n        null,\n        \"pos\");\n  }\n"}, {"dataset": "query", "exampleID": 8184, "initialization": ["String selection = appendRowId(String,long)", "SQLiteDatabase database = EventsData.getReadableDatabase()"], "initializationStart": [257, 358], "initializationEnd": [283, 386], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 416, "focalAPIEnd": 506, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.setNotificationUri(*,Uri)"], "useStart": [603], "useEnd": [668], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/francho/unutopia-android/tree/master/carlossanchezp/SixPackOn/src/carloscsanchezperez/gmail/sixpackon/EventsProvider.java", "rawCode": "  @Override\n  public Cursor query(\n      Uri uri, String[] projection, String selection, String[] selectionArgs, String orderBy) {\n    if (uriMatcher.match(uri) == EVENTS_ID) {\n      long id = Long.parseLong(uri.getPathSegments().get(1));\n      selection = appendRowId(selection, id);\n    }\n\n    // Get the database and run the query\n    SQLiteDatabase db = events.getReadableDatabase();\n    Cursor cursor =\n        db.query(FeedsTable.TABLE_NAME, projection, selection, selectionArgs, null, null, orderBy);\n\n    // Tell the cursor what uri to watch, so it knows when its\n    // source data changes\n    cursor.setNotificationUri(getContext().getContentResolver(), uri);\n    return cursor;\n  }\n"}, {"dataset": "query", "exampleID": 8185, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 108, "focalAPIEnd": 317, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursorToEventsItem(cursor)", "cursor.close()"], "useStart": [323, 362, 395], "useEnd": [343, 388, 409], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dusken/Kulturkalender-Android/tree/master/Barteguiden/src/main/java/com/underdusken/kulturekalendar/data/db/DatabaseManager.java", "rawCode": "  public EventItem getEventsItemById(long id) {\n    EventItem eventItem = null;\n    Cursor cursor =\n        database.query(\n            MySQLiteHelper.TABLE_EVENTS,\n            allColumnsEvents,\n            MySQLiteHelper.COLUMN_ID + \" = \" + id,\n            null,\n            null,\n            null,\n            null);\n    cursor.moveToFirst();\n\n    eventItem = cursorToEventsItem(cursor);\n\n    cursor.close();\n    return eventItem;\n  }\n"}, {"dataset": "query", "exampleID": 8186, "initialization": ["SQLiteDatabase database = initializeDatabase()"], "initializationStart": [145], "initializationEnd": [165], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 417, "focalAPIEnd": 493, "followUpCheck": "cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 511, "followUpCheckExpressionEnd": 531, "followUpCheckBlockStart": 511, "followUpCheckBlockEnd": 617, "use": ["fillInStandardFields(cursor)", "cursor.close()"], "useStart": [549, 640], "useEnd": [572, 649], "hasFinally": 1, "cleanUpCall": ["Cursor.close()"], "finallyExpressionStart": 624, "finallyExpressionEnd": 632, "finallyBlockStart": 624, "finallyBlockEnd": 656, "cleanUpCallStart": [640], "cleanUpCallEnd": [649], "url": "https://github.com/kanakb/OmniStanford/tree/master/src/mobisocial/omnistanford/db/CheckinManager.java", "rawCode": "  public MCheckinData getRecentCheckin(Long locationId) {\n    Long cutoff = System.currentTimeMillis() - SHORT_INTERVAL;\n    SQLiteDatabase db = initializeDatabase();\n    String table = MCheckinData.TABLE;\n    String selection =\n        MCheckinData.COL_LOCATION_ID + \"=? AND \" + MCheckinData.COL_ENTRY_TIME + \">?\";\n    String[] selectionArgs = new String[] {locationId.toString(), cutoff.toString()};\n    Cursor c = db.query(table, STANDARD_FIELDS, selection, selectionArgs, null, null, null);\n    try {\n      if (c.moveToFirst()) {\n        return fillInStandardFields(c);\n      } else {\n        return null;\n      }\n    } finally {\n      c.close();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8187, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 311, "focalAPIEnd": 505, "followUpCheck": "cursor.getLong(cursor.getColumnIndex(Contract.Messages.COLUMN_NAME_CONTACT_ID)) != messageLogRecord.getContact().getId()", "checkType": "IF", "followUpCheckExpressionStart": 537, "followUpCheckExpressionEnd": 670, "followUpCheckBlockStart": 537, "followUpCheckBlockEnd": 974, "use": ["cursor.moveToFirst()", "database.update(String,ContentValues,String,String[])", "database.update(String,ContentValues,String,String[])", "database.update(String,ContentValues,String,String[])", "database.update(String,ContentValues,String,String[])", "database.update(String,ContentValues,String,String[])", "database.update(String,ContentValues,String,String[])"], "useStart": [511, 796, 1223, 1640, 2076, 2528, 2961], "useEnd": [531, 938, 1365, 1782, 2218, 2670, 3103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OrangeTeam/FamilyLink/tree/master/app/src/org/orange/familylink/database/FamilyLinkDBAdapter.java", "rawCode": "  /**\n   * 更新信息记录\n   *\n   * @param messageLogRecord\n   */\n  public void updateMessage(MessageLogRecord messageLogRecord) {\n    if (messageLogRecord == null) return;\n    ContentValues contentValues = new ContentValues();\n    long mId = messageLogRecord.getId();\n    // 先把游标指向要更新的那条记录\n    Cursor cursor =\n        db.query(\n            Contract.DATABASE_MESSAGES_TABLE,\n            null,\n            Contract.Messages._ID + \" = \" + mId,\n            null,\n            null,\n            null,\n            null);\n    cursor.moveToFirst();\n    if (cursor.getLong(cursor.getColumnIndex(Contract.Messages.COLUMN_NAME_CONTACT_ID))\n        != messageLogRecord.getContact().getId()) {\n      contentValues.put(\n          Contract.Messages.COLUMN_NAME_CONTACT_ID, messageLogRecord.getContact().getId());\n      db.update(\n          Contract.DATABASE_MESSAGES_TABLE,\n          contentValues,\n          Contract.Messages._ID + \" = \" + mId,\n          null);\n      contentValues.clear();\n    }\n    if (!cursor\n        .getString(cursor.getColumnIndex(Contract.Messages.COLUMN_NAME_ADDRESS))\n        .equals(messageLogRecord.getAddress())) {\n      contentValues.put(Contract.Messages.COLUMN_NAME_ADDRESS, messageLogRecord.getAddress());\n      db.update(\n          Contract.DATABASE_MESSAGES_TABLE,\n          contentValues,\n          Contract.Messages._ID + \" = \" + mId,\n          null);\n      contentValues.clear();\n    }\n    if (cursor.getLong(cursor.getColumnIndex(Contract.Messages.COLUMN_NAME_TIME))\n        != messageLogRecord.getDate().getTime()) {\n      contentValues.put(Contract.Messages.COLUMN_NAME_TIME, messageLogRecord.getDate().getTime());\n      db.update(\n          Contract.DATABASE_MESSAGES_TABLE,\n          contentValues,\n          Contract.Messages._ID + \" = \" + mId,\n          null);\n      contentValues.clear();\n    }\n    if (cursor\n        .getString(cursor.getColumnIndex(Contract.Messages.COLUMN_NAME_STATUS))\n        .equals(messageLogRecord.getStatus().name())) {\n      contentValues.put(Contract.Messages.COLUMN_NAME_STATUS, messageLogRecord.getStatus().name());\n      db.update(\n          Contract.DATABASE_MESSAGES_TABLE,\n          contentValues,\n          Contract.Messages._ID + \" = \" + mId,\n          null);\n      contentValues.clear();\n    }\n    if (!cursor\n        .getString(cursor.getColumnIndex(Contract.Messages.COLUMN_NAME_BODY))\n        .equals(messageLogRecord.getMessage().getBody())) {\n      contentValues.put(\n          Contract.Messages.COLUMN_NAME_BODY, messageLogRecord.getMessage().getBody());\n      db.update(\n          Contract.DATABASE_MESSAGES_TABLE,\n          contentValues,\n          Contract.Messages._ID + \" = \" + mId,\n          null);\n      contentValues.clear();\n    }\n    if (cursor.getInt(cursor.getColumnIndex(Contract.Messages.COLUMN_NAME_CODE))\n        != messageLogRecord.getMessage().getCode()) {\n      contentValues.put(\n          Contract.Messages.COLUMN_NAME_CODE, messageLogRecord.getMessage().getCode());\n      db.update(\n          Contract.DATABASE_MESSAGES_TABLE,\n          contentValues,\n          Contract.Messages._ID + \" = \" + mId,\n          null);\n      contentValues.clear();\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8188, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 359, "focalAPIEnd": 430, "followUpCheck": "!cursor.moveToFirst()", "checkType": "IF", "followUpCheckExpressionStart": 436, "followUpCheckExpressionEnd": 457, "followUpCheckBlockStart": 436, "followUpCheckBlockEnd": 470, "use": ["cursor.getLong(int)", "cursor.getLong(int)", "cursor.getString(int)", "cursor.getString(int)", "cursor.close()"], "useStart": [486, 515, 549, 583, 603], "useEnd": [498, 527, 563, 597, 612], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brianmikkelsen/splurge/tree/master/trunk/src/dk/aau/sw802f12/splurge/database/DBHelper.java", "rawCode": "  /**\n   * Retrieve the {@link Song} with the provided id from the database. Returns null if the Song does\n   * not exist.\n   *\n   * @param songId The id to search for.\n   * @return The Song with matching id.\n   */\n  Song getSong(long songId) {\n    openDB();\n    String[] cols = {DB.SONG_ARTIST, DB.SONG_TITLE, DB.SONG_HOST, DB.SONG_LOCATION};\n    Cursor c = db.query(DB.TB_SONG, cols, \"rowid = \" + songId, null, null, null, null);\n    if (!c.moveToFirst()) return null;\n    long aId = c.getLong(0);\n    long uId = c.getLong(2);\n    String sTitle = c.getString(1);\n    String sLoc = c.getString(3);\n    c.close();\n    Artist a = mr.getArtist(aId);\n    User u = mr.getUser(uId);\n    Song s = new Song(sTitle, a, u, sLoc);\n    songTags(s);\n    s.setId(songId);\n    return s;\n  }\n"}, {"dataset": "query", "exampleID": 8189, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 143, "focalAPIEnd": 253, "followUpCheck": "cursor.getCount() > 0", "checkType": "IF", "followUpCheckExpressionStart": 319, "followUpCheckExpressionEnd": 345, "followUpCheckBlockStart": 319, "followUpCheckBlockEnd": 671, "use": ["cursor.getColumnIndex(*)", "cursor.getLong(*)", "cursor.getColumnIndex(*)", "cursor.getString(*)", "cursor.close()"], "useStart": [448, 433, 564, 547, 676], "useEnd": [508, 509, 626, 627, 690], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/manask88/proLog/tree/master/src/com/example/prolog/db/ContactsDataSource.java", "rawCode": "  public ArrayList<Group> findAllGroups() {\n    ArrayList<Group> groups = new ArrayList<Group>();\n    Group group;\n    Cursor cursor =\n        database.query(\n            ContactsDBOpenHelper.TABLE_GROUPS, allColumnsGroups, null, null, null, null, null);\n\n    Log.i(TAG, \"Returned\" + cursor.getCount() + \" rows\");\n\n    if (cursor.getCount() > 0) {\n      while (cursor.moveToNext()) {\n        group = new Group();\n        group.setId(cursor.getLong(cursor.getColumnIndex(ContactsDBOpenHelper.COLUMN_GROUPS_ID)));\n        group.setName(\n            cursor.getString(cursor.getColumnIndex(ContactsDBOpenHelper.COLUMN_GROUPS_NAME)));\n\n        groups.add(group);\n      }\n    }\n    cursor.close();\n    Log.i(TAG, \"Filled\" + groups.size() + \" groups in arraylist\");\n\n    return groups;\n  }\n"}, {"dataset": "query", "exampleID": 8190, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 243, "focalAPIEnd": 470, "followUpCheck": "cursor.getCount() != 0", "checkType": "IF", "followUpCheckExpressionStart": 477, "followUpCheckExpressionEnd": 504, "followUpCheckBlockStart": 477, "followUpCheckBlockEnd": 830, "use": ["cursor.moveToFirst()", "cursor.getColumnIndexOrThrow(*)", "cursor.getBlob(*)", "cursor.close()"], "useStart": [513, 582, 567, 873], "useEnd": [533, 647, 648, 887], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TianziHou/tzPalette/tree/master/src/com/tzapps/tzpalette/db/PaletteDataSource.java", "rawCode": "  /**\n   * Get the regular thumb by the indicated palette data id\n   *\n   * @param id the palette data id\n   * @return the regular size thumb\n   */\n  public Bitmap getThumb(long dataId) {\n    Bitmap bitmap = null;\n\n    Cursor cursor =\n        db.query(\n            PaletteThumbEntry.TABLE_NAME,\n            paletteThumbColumns,\n            PaletteThumbEntry.COLUMN_NAME_PALETTE_ID + \" = \" + dataId,\n            null,\n            null,\n            null,\n            null);\n\n    if (cursor.getCount() != 0) {\n      cursor.moveToFirst();\n\n      byte[] thumb =\n          cursor.getBlob(cursor.getColumnIndexOrThrow(PaletteThumbEntry.COLUMN_NAME_THUMB));\n      bitmap = BitmapFactory.decodeByteArray(thumb, 0, thumb.length);\n    } else {\n      if (MyDebug.LOG) Log.d(TAG, \"the palette data =\" + dataId + \" doesn't have a thumb\");\n    }\n\n    // Make sure to close the cursor\n    cursor.close();\n\n    return bitmap;\n  }\n"}, {"dataset": "query", "exampleID": 8191, "initialization": ["SQLiteDatabase database = EventsData.getReadableDatabase()"], "initializationStart": [55], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 105, "focalAPIEnd": 165, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startManagingCursor(cursor)"], "useStart": [171], "useEnd": [198], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zwycid/dimension-drive-downside/tree/master/zeraf29/TestDB/src/com/hanback/testdb/TestDBActivity.java", "rawCode": "  private Cursor getEvents() {\n    SQLiteDatabase db = events.getReadableDatabase();\n    Cursor cursor = db.query(TABLE_NAME, null, null, null, null, null, ORDER_BY);\n    startManagingCursor(cursor);\n    return cursor;\n  }\n"}, {"dataset": "query", "exampleID": 8192, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 71, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursorToPermissionList(cursor)", "cursor.close()"], "useStart": [315, 346], "useEnd": [340, 355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/societies/SOCIETIES-Platform/tree/master/privacy-trust/android/privacy-trust/privacy-data-management/apklib/src/main/java/org/societies/android/privacytrust/data/accessor/PrivacyPermissionDao.java", "rawCode": "  public List<ResponseItem> findPermissions() {\n    Cursor c =\n        db.query(\n            Constants.TABLE_PRIVACY_PERMISSION,\n            Constants.TABLE_PRIVACY_PERMISSION_FIELDS,\n            null,\n            null,\n            null,\n            null,\n            null);\n    List<ResponseItem> permissionList = cursorToPermissionList(c);\n    c.close();\n    return permissionList;\n  }\n"}, {"dataset": "query", "exampleID": 8193, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 898, "focalAPIEnd": 1541, "followUpCheck": "cursor.getCount() > 0", "checkType": "IF", "followUpCheckExpressionStart": 1550, "followUpCheckExpressionEnd": 1576, "followUpCheckBlockStart": 1550, "followUpCheckBlockEnd": 1829, "use": ["cursor.moveToFirst()", "cursor.getColumnIndex(String)", "cursor.moveToNext()", "cursor.close()"], "useStart": [1636, 1747, 1791, 1837], "useEnd": [1656, 1778, 1810, 1851], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kanata3249/Android-FFXIEQ/tree/master/ffxieq/src/com/github/kanata3249/ffxieq/android/db/AugmentTable.java", "rawCode": "  public String[] getAvailableWeaponTypes(\n      FFXIDAO dao, SQLiteDatabase db, int part, int race, int job, int level, String filter) {\n    Cursor cursor;\n    String partStr, jobStr, alljobStr;\n    String filterexp;\n    String result[];\n    String columns[] = {C_Weapon};\n\n    partStr = dao.getString(FFXIString.PART_DB_MAIN + part);\n    jobStr = dao.getString(FFXIString.JOB_DB_WAR + job);\n    alljobStr = dao.getString(FFXIString.JOB_DB_ALL);\n    filterexp = \"\";\n    if (filter.length() > 0) {\n      filterexp =\n          \" AND (\"\n              + C_Name\n              + \" LIKE '%\"\n              + filter\n              + \"%' OR \"\n              + C_Description\n              + \" LIKE '%\"\n              + filter\n              + \"%' OR \"\n              + C_Augment\n              + \" LIKE '%\"\n              + filter\n              + \"%')\";\n    }\n\n    result = null;\n    try {\n      cursor =\n          db.query(\n              TABLE_NAME,\n              columns,\n              C_Part\n                  + \" LIKE '%\"\n                  + partStr\n                  + \"%' AND \"\n                  + C_Level\n                  + \" <= '\"\n                  + level\n                  + \"' AND \"\n                  + \"(\"\n                  + C_Job\n                  + \" LIKE '%\"\n                  + jobStr\n                  + \"%' OR \"\n                  + C_Job\n                  + \" = '\"\n                  + alljobStr\n                  + \"')\"\n                  + filterexp,\n              null,\n              C_Weapon,\n              null,\n              C_Weapon);\n\n      if (cursor.getCount() > 0) {\n        result = new String[cursor.getCount()];\n\n        cursor.moveToFirst();\n        for (int i = 0; i < result.length; i++) {\n          result[i] = cursor.getString(cursor.getColumnIndex(C_Weapon));\n          cursor.moveToNext();\n        }\n      }\n\n      cursor.close();\n    } catch (SQLiteException e) {\n    }\n\n    return result;\n  }\n"}, {"dataset": "query", "exampleID": 8194, "initialization": ["SQLiteDatabase database = VeriTabani.getReadableDatabase()"], "initializationStart": [95], "initializationEnd": [126], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 150, "focalAPIEnd": 205, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["startManagingCursor(cursor)"], "useStart": [213], "useEnd": [240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/COMU/homescreen/tree/master/ayse/CoverFlowTemp/src/com/comu/android/SubMenuActivity.java", "rawCode": "    private Cursor GetDataFromDB() {\n      // get data from database\n      SQLiteDatabase db = imagepath.getReadableDatabase();\n      Cursor cursor = db.query(\"tema2\", SELECT, null, null, null, null, null);\n      startManagingCursor(cursor);\n      return cursor;\n    }\n"}, {"dataset": "query", "exampleID": 8195, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(distinct,table,columns,selection,selectionArgs,groupBy,having,orderBy,limit)", "focalAPIStart": 172, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.getColumnIndexOrThrow(String)", "cursor.getColumnIndexOrThrow(String)", "cursor.moveToFirst()"], "useStart": [425, 505, 599], "useEnd": [470, 552, 619], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/funambol-mirror/funambol-client-sdk/tree/master/us9098/common/src/main/java-se-android/com/funambol/storage/StringKeyValueSQLiteStore.java", "rawCode": "  /** @see StringKeyValueStore#keyValuePairs() */\n  public Enumeration keyValuePairs() {\n\n    if (dbStore == null) {\n      open();\n    }\n\n    final Cursor result =\n        dbStore.query(\n            true,\n            tableName,\n            QUERY_KEY_VALUE_COLUMN,\n            null,\n            null,\n            null,\n            null,\n            KEY_COLUMN_NAME + \" ASC\",\n            null);\n\n    final int keyColumnIndex = result.getColumnIndexOrThrow(KEY_COLUMN_NAME);\n    final int valueColumnIndex = result.getColumnIndexOrThrow(VALUE_COLUMN_NAME);\n\n    // Move Cursor to the first element\n    result.moveToFirst();\n\n    return new Enumeration() {\n\n      boolean last = false;\n      boolean closed = false;\n\n      public Object nextElement() {\n\n        // Get the Current value\n        String key = result.getString(keyColumnIndex);\n        String value = result.getString(valueColumnIndex);\n\n        // Move Cursor to the next element\n        result.moveToNext();\n\n        return new StringKeyValuePair(key, value);\n      }\n\n      public boolean hasMoreElements() {\n        if (last) {\n          return false;\n        }\n        last = result.isAfterLast();\n        if (last) {\n          result.close();\n          closed = true;\n        }\n        return !last;\n      }\n\n      public void finalize() throws Throwable {\n        try {\n          if (!closed) {\n            result.close();\n            closed = true;\n          }\n        } finally {\n          super.finalize();\n        }\n      }\n    };\n  }\n"}, {"dataset": "query", "exampleID": 8196, "initialization": ["SQLiteDatabase database = getReadableDatabase()"], "initializationStart": [62], "initializationEnd": [83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 96, "focalAPIEnd": 147, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/craining/android-ringforyou/tree/master/src/com/zgy/ringforu/util/SQLiteHelper.java", "rawCode": "  public Cursor query(String table) {\n    SQLiteDatabase db = getReadableDatabase();\n    return db.query(table, null, null, null, null, null, null);\n  }\n"}, {"dataset": "query", "exampleID": 8197, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 211, "focalAPIEnd": 283, "followUpCheck": "cursor != null", "checkType": "IF", "followUpCheckExpressionStart": 423, "followUpCheckExpressionEnd": 442, "followUpCheckBlockStart": 423, "followUpCheckBlockEnd": 1419, "use": ["cursor.getString(int)", "cursor.getBlob(int)", "cursor.getString(int)", "cursor.getLong(int)", "cursor.close()"], "useStart": [515, 567, 617, 668, 1301], "useEnd": [534, 584, 636, 685, 1315], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RyanLee7/redreader/tree/master/src/main/java/org/quantumbadger/redreader/account/RedditAccountManager.java", "rawCode": "  private synchronized void reloadAccounts(final SQLiteDatabase db) {\n\n    final String[] fields =\n        new String[] {FIELD_USERNAME, FIELD_COOKIES, FIELD_MODHASH, FIELD_PRIORITY};\n\n    final Cursor cursor = db.query(TABLE, fields, null, null, null, null, FIELD_PRIORITY + \" ASC\");\n\n    accountsCache = new LinkedList<RedditAccount>();\n    defaultAccountCache = null;\n\n    // TODO handle null? can this even happen?\n    if (cursor != null) {\n\n      while (cursor.moveToNext()) {\n\n        final String username = cursor.getString(0);\n        final byte[] cookies = cursor.getBlob(1);\n        final String modhash = cursor.getString(2);\n        final long priority = cursor.getLong(3);\n\n        final RedditAccount account;\n\n        try {\n          account =\n              new RedditAccount(\n                  username,\n                  modhash,\n                  cookies == null ? null : new PersistentCookieStore(cookies),\n                  priority);\n\n        } catch (IOException e) {\n          BugReportActivity.handleGlobalError(context, new RRError(null, null, e));\n          return;\n        }\n\n        accountsCache.add(account);\n\n        if (defaultAccountCache == null || account.priority < defaultAccountCache.priority) {\n          defaultAccountCache = account;\n        }\n      }\n\n      cursor.close();\n\n    } else {\n      BugReportActivity.handleGlobalError(context, \"Cursor was null after query\");\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8198, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 113, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertNotNull(String,cursor)"], "useStart": [72], "useEnd": [165], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/btmura/rbb/tree/master/tests/src/com/btmura/android/reddit/database/DbHelperTest.java", "rawCode": "  private void assertTableExists(SQLiteDatabase db, String table) {\n    assertNotNull(\"Missing table: \" + table, db.query(table, null, null, null, null, null, null));\n  }\n"}, {"dataset": "query", "exampleID": 8199, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getWritableDatabase()"], "initializationStart": [161], "initializationEnd": [189], "hasTryCatch": 1, "exceptionType": "SQLiteException", "exceptionHandlingCall": ["w(String,*)"], "tryExpressionStart": 144, "tryExpressionEnd": 148, "tryBlockStart": 144, "tryBlockEnd": 981, "catchExpressionStart": 594, "catchExpressionEnd": 623, "catchBlockStart": 594, "catchBlockEnd": 940, "exceptionHandlingCallStart": [899], "exceptionHandlingCallEnd": [915], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 216, "focalAPIEnd": 421, "followUpCheck": "cursor.moveToNext()", "checkType": "LOOP {", "followUpCheckExpressionStart": 459, "followUpCheckExpressionEnd": 486, "followUpCheckBlockStart": 459, "followUpCheckBlockEnd": 587, "use": ["cursor.move(int)", "database.delete(String,String,String[])", "close(cursor,SQLiteDatabase)"], "useStart": [429, 497, 957], "useEnd": [451, 578, 974], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 941, "finallyExpressionEnd": 949, "finallyBlockStart": 941, "finallyBlockEnd": 981, "cleanUpCallStart": [957], "cleanUpCallEnd": [974], "url": "https://github.com/TonnyXu/Zxing/tree/master/android/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public void trimHistory() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getWritableDatabase();\n      cursor =\n          db.query(\n              DBHelper.TABLE_NAME,\n              ID_COL_PROJECTION,\n              null,\n              null,\n              null,\n              null,\n              DBHelper.TIMESTAMP_COL + \" DESC\");\n      cursor.move(MAX_ITEMS);\n      while (cursor.moveToNext()) {\n        db.delete(DBHelper.TABLE_NAME, DBHelper.ID_COL + '=' + cursor.getString(0), null);\n      }\n    } catch (SQLiteException sqle) {\n      // We're seeing an error here when called in CaptureActivity.onCreate() in rare cases\n      // and don't understand it. First theory is that it's transient so can be safely ignored.\n      // TODO revisit this after live in a future version to see if it 'worked'\n      Log.w(TAG, sqle);\n      // continue\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}, {"dataset": "query", "exampleID": 8200, "initialization": ["SQLiteDatabase database = SQLiteOpenHelper.getReadableDatabase()"], "initializationStart": [168], "initializationEnd": [196], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cursor = database.query(table,columns,selection,selectionArgs,groupBy,having,orderBy)", "focalAPIStart": 213, "focalAPIEnd": 286, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cursor.moveToFirst()", "cursor.getInt(int)", "close(cursor,SQLiteDatabase)"], "useStart": [294, 329, 373], "useEnd": [314, 345, 390], "hasFinally": 1, "cleanUpCall": ["close(Cursor,SQLiteDatabase)"], "finallyExpressionStart": 357, "finallyExpressionEnd": 365, "finallyBlockStart": 357, "finallyBlockEnd": 397, "cleanUpCallStart": [373], "cleanUpCallEnd": [390], "url": "https://github.com/youknowone/zxing/tree/master/android/src/com/google/zxing/client/android/history/HistoryManager.java", "rawCode": "  public boolean hasHistoryItems() {\n    SQLiteOpenHelper helper = new DBHelper(activity);\n    SQLiteDatabase db = null;\n    Cursor cursor = null;\n    try {\n      db = helper.getReadableDatabase();\n      cursor = db.query(DBHelper.TABLE_NAME, COUNT_COLUMN, null, null, null, null, null);\n      cursor.moveToFirst();\n      return cursor.getInt(0) > 0;\n    } finally {\n      close(cursor, db);\n    }\n  }\n"}]