[{"dataset": "stringFormat", "exampleID": 8301, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 222, "focalAPIEnd": 254, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)", "string.format(String,*)"], "useStart": [212, 273], "useEnd": [255, 305], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/UniLab/POO/tree/master/poo/sistema/Cramer.java", "rawCode": "  public String toString() {\n    int n = getN();\n    final int ELEM_LENGTH = 10;\n    StringBuilder sb = new StringBuilder(n * n * ELEM_LENGTH);\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < n; j++) sb.append(String.format(\"%8.2f \", a[i][j]));\n      sb.append(String.format(\"| %1.2f\\n\", y[i]));\n    }\n    return sb.toString();\n  } // toString\n"}, {"dataset": "stringFormat", "exampleID": 8302, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 597, "focalAPIEnd": 632, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["literal(str)"], "useStart": [655], "useEnd": [673], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victortey/geotool/tree/master/modules/library/main/src/test/java/org/geotools/filter/function/InterpolateFunctionTest.java", "rawCode": "  @Test\n  public void testForOutOfRangeColorValues() {\n    System.out.println(\" out of range color values\");\n\n    parameters = new ArrayList<Expression>();\n    parameters.add(ff2.literal(\"RasterData\"));\n\n    // Create interpolation points that will lead to a cubic\n    // curve going out of range: the unclamped curve will dip\n    // below 0 betwee points 1 and 2 and go above 255 between\n    // points 3 and 4\n    double[] x = {0, 1, 2, 3, 4, 5};\n    int[] reds = {128, 0, 0, 255, 255, 128};\n\n    for (int i = 0; i < x.length; i++) {\n      parameters.add(ff2.literal(x[i]));\n      String color = String.format(\"#%02x0000\", reds[i]);\n      parameters.add(ff2.literal(color));\n    }\n\n    parameters.add(ff2.literal(InterpolateFunction.METHOD_COLOR));\n    parameters.add(ff2.literal(InterpolateFunction.MODE_CUBIC));\n\n    Function fn = finder.findFunction(\"interpolate\", parameters);\n\n    // check between points 1 and 2\n    Color result = fn.evaluate(Double.valueOf(1.5), Color.class);\n    assertEquals(0, result.getRed());\n\n    // check between points 3 and 4\n    result = fn.evaluate(Double.valueOf(3.5), Color.class);\n    assertEquals(255, result.getRed());\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8303, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 318, "focalAPIEnd": 359, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)", "string.format(String,int)", "string.format(String,double)", "string.format(String,double)", "string.format(String,int)", "string.format(String,int,*)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)"], "useStart": [307, 411, 490, 575, 659, 753, 926, 1056, 1149], "useEnd": [360, 447, 532, 616, 701, 843, 980, 1106, 1202], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sbliven/biojava/tree/master/biojava3-structure/src/main/java/org/biojava/bio/structure/align/model/AfpChainWriter.java", "rawCode": "  private static void printScoresInLines(\n      AFPChain afpChain,\n      int blockNum,\n      int optLength,\n      double totalRmsdOpt,\n      double alignScore,\n      int alnLength,\n      int gapLen,\n      double identity,\n      double similarity,\n      StringBuffer txt) {\n    if (blockNum - 1 > 0) {\n      txt.append(String.format(\"Twists %d \", blockNum - 1));\n      txt.append(newline);\n    }\n\n    txt.append(String.format(\"Equ: %d \", optLength));\n    txt.append(newline);\n    txt.append(String.format(\"RMSD: %.2f \", totalRmsdOpt));\n    txt.append(newline);\n    txt.append(String.format(\"Score: %.2f \", alignScore));\n    txt.append(newline);\n    txt.append(String.format(\"Align-len: %d \", alnLength));\n    txt.append(newline);\n    txt.append(\n        String.format(\"Gaps: %d (%.2f%%)\", gapLen, (100.0 * (double) gapLen / (double) alnLength)));\n    txt.append(newline);\n    if (afpChain.getTMScore() >= 0) {\n      txt.append(String.format(\"TM-score: %.2f\", afpChain.getTMScore()));\n      txt.append(newline);\n    }\n    txt.append(newline);\n    txt.append(String.format(\"Identity: %.2f%% \", identity * 100));\n    txt.append(newline);\n    txt.append(String.format(\"Similarity: %.2f%%\", similarity * 100));\n    txt.append(newline);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8304, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 557, "focalAPIEnd": 624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [544], "useEnd": [625], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/varialus/jython-legacy/tree/master/jython/src/org/python/core/PyDictionaryDerived.java", "rawCode": "  public int hashCode() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__hash__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger) {\n        return ((PyInteger) res).getValue();\n      } else if (res instanceof PyLong) {\n        return ((PyLong) res).getValue().intValue();\n      }\n      throw Py.TypeError(\"__hash__ should return a int\");\n    }\n    if (self_type.lookup(\"__eq__\") != null || self_type.lookup(\"__cmp__\") != null) {\n      throw Py.TypeError(String.format(\"unhashable type: '%.200s'\", getType().fastGetName()));\n    }\n    return super.hashCode();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8305, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 172, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mattlaten/swarm-ai/tree/master/src/backend/HeightMap.java", "rawCode": "  /** Debugging method */\n  public void printGrid() {\n    String line = null;\n    for (int i = 0; i < y; i++) {\n      line = \"\";\n      for (int j = 0; j < x; j++) line += (String.format(\"%.2f \", terrain[i][j]));\n      System.out.println(line);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8306, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 135, "focalAPIEnd": 159, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [123], "useEnd": [160], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OrangeTeam/FamilyLink/tree/master/app/src/org/orange/familylink/util/Crypto.java", "rawCode": "  private static String toHex(byte[] bytes) {\n    StringBuffer buff = new StringBuffer();\n    for (byte b : bytes) {\n      buff.append(String.format(\"%02X\", b));\n    }\n    return buff.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8307, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 290, "focalAPIEnd": 340, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [281], "useEnd": [341], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vedina/RESTNet/tree/master/restnet-userdb/src/main/java/net/idea/restnet/user/alerts/db/ReadAlert.java", "rawCode": "  public static String getFrequencySQL(Set<RecurrenceFrequency> frequency) {\n    StringBuilder b = null;\n    Iterator<RecurrenceFrequency> i = frequency.iterator();\n    String d = \"\";\n    while (i.hasNext()) {\n      if (b == null) b = new StringBuilder();\n      b.append(d);\n      b.append(String.format(\" rfrequency='%s'\", i.next().name()));\n      d = \" or \";\n    }\n    if (b == null) return null;\n    b.append(\")\");\n    return b.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8308, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 559, "focalAPIEnd": 601, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["FileChannel.close()"], "finallyExpressionStart": 609, "finallyExpressionEnd": 617, "finallyBlockStart": 609, "finallyBlockEnd": 651, "cleanUpCallStart": [625], "cleanUpCallEnd": [644], "url": "https://github.com/bwilson30/distributed-ftp/tree/master/the_final_folder/client/filehash.java", "rawCode": "  public static String computeHash(File file) throws IOException {\n    long size = file.length();\n    long chunkSizeForFile = Math.min(HASH_CHUNK_SIZE, size);\n    if (!file.exists()) return \"\";\n    FileChannel fileChannel = new FileInputStream(file).getChannel();\n\n    try {\n      long head = computeHashForChunk(fileChannel.map(MapMode.READ_ONLY, 0, chunkSizeForFile));\n      long tail =\n          computeHashForChunk(\n              fileChannel.map(\n                  MapMode.READ_ONLY, Math.max(size - HASH_CHUNK_SIZE, 0), chunkSizeForFile));\n\n      return String.format(\"%016x\", size + head + tail);\n    } finally {\n      fileChannel.close();\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8309, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 447, "focalAPIEnd": 581, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["debug(String,str)", "string.format(String,*)", "debug(String,str)"], "useStart": [589, 1193, 1307], "useEnd": [638, 1301, 1356], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/WSN-2012/BPF/tree/master/src/se/kth/ssvl/tslab/wsn/general/servlib/conv_layers/connection/Connection.java", "rawCode": "  private void check_completed(InFlightBundle inflight) {\n\n    // \"we can pop the inflight bundle off of the queue and clean it up\n    // only when both finish_bundle is called (so current_inflight_ no\n    // longer points to the inflight bundle), and after the final ack\n    // for the bundle has been received (determined by looking at\n    // inflight->ack_data_)\" [DTN2].\n\n    if (current_inflight_ == inflight) {\n      String text =\n          String.format(\n              \"check_completed: bundle %s still waiting for finish_bundle\",\n              inflight.bundle().bundleid());\n      BPF.getInstance().getBPFLogger().debug(TAG, text);\n      return;\n    }\n\n    if (params_.segment_ack_enabled()) {\n      int acked_len = inflight.ack_data().size();\n      if (acked_len != inflight.total_length()) {\n        // TODO: Verify that commenting this out doesn't confuse anyone\n        // String text = String\n        // .format(\"check_completed: bundle %d fail because only acked %d/%d\",\n        // inflight.bundle().bundleid(), acked_len,\n        // inflight.total_length());\n        // BPF.getInstance().getBPFLogger().error(TAG, text);\n        return;\n      }\n    }\n\n    String text =\n        String.format(\n            \"check_completed: bundle %d transmission complete\", inflight.bundle().bundleid());\n    BPF.getInstance().getBPFLogger().debug(TAG, text);\n    assert (inflight == inflight_.get(0));\n\n    handle_bundle_end_upload(inflight);\n\n    inflight_.remove(0);\n\n    // if the ack is not enable add the BundleTransmittedEvent here in order\n    // to remove bundle from the system\n    if (!params_.segment_ack_enabled()) {\n\n      inflight.set_transmit_event_posted(true);\n      BundleTransmittedEvent event =\n          new BundleTransmittedEvent(\n              inflight.bundle(), contact_, contact_.link(), inflight.sent_data().size(), 0);\n      BundleDaemon.getInstance().post(event);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8310, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1327, "focalAPIEnd": 1383, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Long(str)"], "useStart": [1318], "useEnd": [1384], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jasoncorbett/slickqa/tree/master/slickij-data/src/main/java/org/tcrun/slickij/data/dao/TestrunDAOImpl.java", "rawCode": "  @Override\n  public TestRunSummary getSummary(Testrun run) {\n    // to understand what is going on here read:\n    // - the group command: http://www.mongodb.org/display/DOCS/Aggregation\n    // - this comment: http://www.mongodb.org/display/DOCS/Java+Tutorial#comment-134207880\n\n    TestplanDAOImpl tpdao = new TestplanDAOImpl(ds);\n    TestplanReference tpref = new TestplanReference();\n    if (run.getTestplanObjectId() != null) {\n      Testplan plan = tpdao.get(run.getTestplanObjectId());\n      tpref = new TestplanReference(plan);\n    }\n\n    TestRunSummary summary = new TestRunSummary();\n    DBCollection resultsCol = ds.getCollection(Result.class);\n    BasicDBObject key = new BasicDBObject();\n    key.put(\"status\", true);\n    BasicDBObject condition = new BasicDBObject();\n    condition.put(\"testrun.testrunId\", run.getObjectId());\n    BasicDBObject initial = new BasicDBObject();\n    initial.put(\"count\", 0);\n    String reduce = \"function(obj, prev) { prev.count++; }\";\n\n    DBObject resultsObject = resultsCol.group(key, condition, initial, reduce);\n    List<DBObject> results = (List<DBObject>) resultsObject;\n    summary.setTotalTime(0);\n    for (DBObject statuscount : results) {\n      summary\n          .getResultsByStatus()\n          .put(\n              (String) statuscount.get(\"status\"),\n              new Long(String.format(\"%.0f\", (Double) statuscount.get(\"count\"))));\n    }\n\n    return summary;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8311, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 136, "focalAPIEnd": 160, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [120], "useEnd": [161], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rene-anderes/edu/tree/master/oo.basics/src/main/java/org/anderes/edu/gui/pv/gui/View.java", "rawCode": "  @Override\n  public void setStack(List<Double> values) {\n    textArea.setText(\"\");\n    for (Double d : values) {\n      textArea.append(String.format(\"%1$f\", d));\n      textArea.append(\"\\n\");\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8312, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 85, "focalAPIEnd": 123, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [74], "useEnd": [124], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/webx/citrus-tool/tree/master/eclipse/springext-eclipse-plugin/src/main/java/com/alibaba/ide/plugin/eclipse/springext/util/HyperlinkTextBuilder.java", "rawCode": "  public HyperlinkTextBuilder format(String format, String... args) {\n    buf.append(String.format(format, (Object[]) args));\n    return this;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8313, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1314, "focalAPIEnd": 1350, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openGDA/gda-core/tree/master/uk.ac.gda.core.test/src/gda/data/metadata/NXMetaDataProviderTest.java", "rawCode": "  @Test\n  public void testAddForUserSuppliedDoubleArrayWithUnitsAgainstLongList()\n      throws InterruptedException, Exception {\n    TestHelpers.setUpTest(\n        NXMetaDataProviderTest.class,\n        \"testAddForUserSuppliedDoubleArrayWithUnitsAgainstLongList\",\n        true);\n    NXMetaDataProvider metaDataProvider = new NXMetaDataProvider();\n\n    String userSuppliedKey = \"myDoubleArray\";\n    double[] userSuppliedValue = {3.0, 1.0, 4.0, 159.0};\n    String userSuppliedUnits = \"eV\";\n\n    // add\n    metaDataProvider.add(userSuppliedKey, userSuppliedValue, userSuppliedUnits);\n\n    userSuppliedItems.clear();\n    userSuppliedItems.add(\n        new MetaDataUserSuppliedItem(userSuppliedKey, userSuppliedValue, userSuppliedUnits));\n\n    for (MetaDataUserSuppliedItem item : userSuppliedItems) metaDataProvider.add(item);\n\n    // list\n    boolean withValues = true;\n\n    String llUnitsSeparator = \"\";\n\n    String llArrayItemSeparatorUsed = formattingMap.get(\"llArrayItemSeparator\");\n\n    String expected = formattingMap.get(\"preamble\");\n    expected += userSuppliedKey;\n    expected += formattingMap.get(\"llMidConnector\");\n    expected += formattingMap.get(\"llArrayOpen\");\n    int arrLen = userSuppliedValue.length;\n    for (int i = 0; i < arrLen; i++) {\n      Double dbl = userSuppliedValue[i];\n      expected += String.format(\"%5.3f\", (Object) dbl);\n      expected += formattingMap.get(\"llArrayItemSeparator\");\n    }\n    int substringLen = expected.length() - llArrayItemSeparatorUsed.length();\n    if (substringLen >= 0) expected = expected.substring(0, substringLen);\n    expected += formattingMap.get(\"llArrayClose\");\n    expected += llUnitsSeparator;\n    expected += userSuppliedUnits;\n\n    metaDataProvider.preamble = formattingMap.get(\"preamble\");\n    metaDataProvider.lsNextItemSeparator = formattingMap.get(\"lsNextItemSeparator\");\n    metaDataProvider.llMidConnector = formattingMap.get(\"llMidConnector\");\n    metaDataProvider.llNextItemSeparator = formattingMap.get(\"llNextItemSeparator\");\n    metaDataProvider.llUnitsSeparator = formattingMap.get(\"llUnitsSeparator\");\n    // metaDataProvider.modifyFormattingMap(formattingMap);\n    String actual = metaDataProvider.list(withValues);\n\n    // test\n    Assert.assertEquals(expected, actual);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8314, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.format(String,*,*)"], "configurationStart": [104], "configurationEnd": [191], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 209, "focalAPIEnd": 272, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aliok/trnltk-java/tree/master/core/src/main/java/org/trnltk/morphology/morphotactics/suffixformspecifications/HasSuffixFormAsLastDerivation.java", "rawCode": "  @Override\n  public String describe() {\n    if (this.suffixFormStr != null) // can be blank\n    return String.format(\"has_suffix_form_as_last_deriv(%s[%s])\", this.suffix, this.suffixFormStr);\n    else return String.format(\"has_suffix_form_as_last_deriv(%s)\", this.suffix);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8315, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 281, "focalAPIEnd": 351, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["e(String,str)"], "useStart": [268], "useEnd": [352], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunnyfarmer/SFTools/tree/master/SFPeddlers/src/sf/tools/peddlers/db/DBController.java", "rawCode": "  /**\n   * 更新对象\n   *\n   * @param model\n   * @param whereClause\n   * @param whereArgs\n   * @return\n   */\n  public int update(Model model, String whereClause, String[] whereArgs) {\n    if (model == null) {\n      return -1;\n    }\n    if (this.mTableName == null) {\n      SFLog.e(TAG, String.format(\"%s : mTableName is not set\", this.getClass().getName()));\n      return -1;\n    }\n    int rowAffected =\n        this.mDatabase.update(this.mTableName, model.getContentValues(), whereClause, whereArgs);\n    return rowAffected;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8316, "initialization": ["Object args = FSimpleType.getName()"], "initializationStart": [875], "initializationEnd": [889], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "null!=args", "guardType": "IF {", "guardExpressionStart": 847, "guardExpressionEnd": 890, "guardBlockStart": 847, "guardBlockEnd": 1092, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 927, "focalAPIEnd": 1007, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.error(str)"], "useStart": [901], "useEnd": [1008], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pfisterer/fabric/tree/master/module/typegen/src/main/java/fabric/module/typegen/FabricTypeGenHandler.java", "rawCode": "  /**\n   * Handle end of a top-level simple type. As soon as the construction of a simple type is\n   * finished, we can close the current container by building it.\n   *\n   * @param type FSimpleType object\n   * @param parent Parent FElement object\n   * @throws Exception Error during processing\n   */\n  @Override\n  public void endTopLevelSimpleType(FSimpleType type, FElement parent) throws Exception {\n    LOGGER.debug(\"Called endTopLevelSimpleType().\");\n\n    try {\n      // Top-level enums are created without AttributeContainer class,\n      // so we have to skip building here (otherwise we would build\n      // a container that is not yet complete)\n      if (!FSchemaTypeHelper.isEnum(type)) {\n        this.typeGenerator.buildCurrentContainer();\n      }\n    } catch (Exception e) {\n      // Write message to logger and re-throw exception\n      if (null != type && null != type.getName()) {\n        LOGGER.error(\n            String.format(\"Failed building container for simple type '%s'.\", type.getName()));\n      } else {\n        LOGGER.error(\"Failed building current container.\");\n      }\n\n      throw e;\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8317, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 355, "focalAPIEnd": 418, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["debug(str)", "string.format(String,*)"], "useStart": [345, 584], "useEnd": [419, 621], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xwiki-contrib/sankoreorg/tree/master/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/xmlrpc/XWikiXmlRpcApiImpl.java", "rawCode": "  /**\n   * Get the list of spaces.\n   *\n   * @param token The authentication token.\n   * @return A list of Maps that represent SpaceSummary objects.\n   * @throws Exception An invalid token is provided.\n   */\n  public List getSpaces(String token) throws Exception {\n    XWikiXmlRpcUser user = XWikiUtils.checkToken(token, this.xwikiContext);\n    LOG.debug(String.format(\"User %s has called getSpaces()\", user.getName()));\n\n    List result = new ArrayList();\n    List<String> spaceKeys = this.xwikiApi.getSpaces();\n\n    for (String spaceKey : spaceKeys) {\n      String spaceWebHomeId = String.format(\"%s.WebHome\", spaceKey);\n\n      if (!this.xwikiApi.exists(spaceWebHomeId)) {\n        result.add(DomainObjectFactory.createSpaceSummary(spaceKey).toRawMap());\n      } else {\n        Document spaceWebHome = this.xwikiApi.getDocument(spaceWebHomeId);\n\n        /*\n         * If doc is null, then we don't have the rights to access the document, and therefore to the space.\n         */\n        if (spaceWebHome != null) {\n          result.add(DomainObjectFactory.createSpaceSummary(spaceWebHome).toRawMap());\n        }\n      }\n    }\n\n    return result;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8318, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 331, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [307], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/purplefox/jython/tree/master/src/org/python/antlr/ast/SuiteDerived.java", "rawCode": "  public PyObject __index__() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__index__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger || res instanceof PyLong) {\n        return res;\n      }\n      throw Py.TypeError(\n          String.format(\n              \"__index__ returned non-(int,long) (type %s)\", res.getType().fastGetName()));\n    }\n    return super.__index__();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8319, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 67, "focalAPIEnd": 124, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ArrayList<String>.add(str)", "ArrayList<String>.add(str)", "new Sample(*,str,ArrayList<String>)", "new Sample2(*,str,ArrayList<String>)"], "useStart": [296, 315, 345, 408], "useEnd": [309, 328, 390, 454], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nipuntalukdar/NipunTalukdarExamples/tree/master/java/stormexample/src/main/java/cogeet/example/org/SampleBoltA.java", "rawCode": "  @Override\n  public void execute(Tuple input) {\n    String name = String.format(\"Sample string %d\", new Random().nextInt());\n    HashMap<String, Object> hms =\n        (HashMap<String, Object>) input.getValueByField(Consts.SPOUT_FIELD_1);\n    ArrayList<String> ids = new ArrayList<String>();\n    ids.add(name);\n    ids.add(name);\n    Sample a = new Sample(new Random().nextInt(), name, ids);\n    Sample2 b = new Sample2(new Random().nextInt(), name, ids);\n    collector.emit(input, new Values(a, b));\n    collector.ack(input);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8320, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 451, "focalAPIEnd": 532, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["fitLength(str,int)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)", "string.format(*,String,*,*)", "string.format(*,String,*,*)"], "useStart": [424, 601, 825, 1038, 1325, 1538, 1825, 1971, 2664, 3071], "useEnd": [559, 682, 969, 1182, 1469, 1682, 1902, 2048, 2848, 3255], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mrtazz/kangaroo/tree/master/technology_scouting/routing/MobileTSM/src/com/mobiletsm/osm/OsmHelper.java", "rawCode": "  public static boolean compareRoutes(IDataSet map1, Route route1, IDataSet map2, Route route2) {\n    List<WayNode> wayNodes1 = getRouteNodes(map1, route1);\n    List<WayNode> wayNodes2 = getRouteNodes(map2, route2);\n\n    final int colWidth = 70;\n    final int colWidth_ = 20;\n    boolean identical = true;\n    int i1 = 0;\n    int i2 = 0;\n\n    System.out.println(\n        fitLength(\"compareRoutes:\", colWidth_)\n            + fitLength(\n                String.format(\"OsmHelper.getRouteLength(route1) = %.2fm\", getRouteLength(route1)),\n                colWidth)\n            + fitLength(\n                String.format(\"OsmHelper.getRouteLength(route2) = %.2fm\", getRouteLength(route2)),\n                colWidth));\n\n    System.out.println(\n        fitLength(\"compareRoutes:\", colWidth_)\n            + fitLength(\n                String.format(\n                    \"OsmHelper.getRouteLengthOnMap(map1, route1) = %.2fm\",\n                    getRouteLengthOnMap(map1, route1)),\n                colWidth)\n            + fitLength(\n                String.format(\n                    \"OsmHelper.getRouteLengthOnMap(map2, route2) = %.2fm\",\n                    getRouteLengthOnMap(map2, route2)),\n                colWidth));\n\n    System.out.println(\n        fitLength(\"compareRoutes:\", colWidth_)\n            + fitLength(\n                String.format(\n                    \"OsmHelper.getRouteLengthOnMap(map2, route1) = %.2fm\",\n                    getRouteLengthOnMap(map2, route1)),\n                colWidth)\n            + fitLength(\n                String.format(\n                    \"OsmHelper.getRouteLengthOnMap(map1, route2) = %.2fm\",\n                    getRouteLengthOnMap(map1, route2)),\n                colWidth));\n\n    System.out.println(\n        fitLength(\"compareRoutes:\", colWidth_)\n            + fitLength(\n                String.format(\"route1.distanceInMeters() = %.2fm\", route1.distanceInMeters()),\n                colWidth)\n            + fitLength(\n                String.format(\"route2.distanceInMeters() = %.2fm\", route2.distanceInMeters()),\n                colWidth));\n\n    Node thisNode1 = null;\n    Node thisNode2 = null;\n\n    while (i1 < wayNodes1.size() || i2 < wayNodes2.size()) {\n\n      StringBuffer line = new StringBuffer(fitLength(\"compareRoutes:\", colWidth_));\n\n      long stepNodeId1 = wayNodes1.get(i1).getNodeId();\n      long stepNodeId2 = wayNodes2.get(i2).getNodeId();\n\n      String wayInfo1 = \"\";\n      String wayInfo2 = \"\";\n\n      if (wayNodes1.get(i1) instanceof MobileWayNode) {\n        MobileWayNode wayNode = (MobileWayNode) wayNodes1.get(i1);\n        thisNode1 = map1.getNodeByID(wayNode.getNodeId());\n        wayInfo1 =\n            String.format(\n                Locale.US,\n                \"--- wayid:%d,dist:%.2fm ---> \",\n                wayNode.getWay().getId(),\n                wayNode.getDistanceToPredecessor());\n      }\n      if (wayNodes2.get(i2) instanceof MobileWayNode) {\n        MobileWayNode wayNode = (MobileWayNode) wayNodes2.get(i2);\n        thisNode2 = map2.getNodeByID(wayNode.getNodeId());\n        wayInfo2 =\n            String.format(\n                Locale.US,\n                \"--- wayid:%d,dist:%.2fm ---> \",\n                wayNode.getWay().getId(),\n                wayNode.getDistanceToPredecessor());\n      }\n\n      if (stepNodeId1 == stepNodeId2) {\n\n        /* if current nodes are the same in both routes */\n        line.append(fitLength(wayInfo1 + Long.toString(stepNodeId1), colWidth));\n        line.append(fitLength(wayInfo2 + Long.toString(stepNodeId2), colWidth));\n        i1++;\n        i2++;\n\n      } else {\n\n        /* if nodes differ */\n        identical = false;\n        boolean found = false;\n        for (int i = i2; i < wayNodes2.size() && !found; i++) {\n          if (stepNodeId1 == wayNodes2.get(i).getNodeId()) {\n            line.append(fitLength(\"|\", colWidth));\n            line.append(fitLength(wayInfo2 + Long.toString(stepNodeId2), colWidth));\n            i2++;\n            found = true;\n          }\n        }\n        for (int i = i1; i < wayNodes1.size() && !found; i++) {\n          if (stepNodeId2 == wayNodes1.get(i).getNodeId()) {\n            line.append(fitLength(wayInfo1 + Long.toString(stepNodeId1), colWidth));\n            line.append(fitLength(\"|\", colWidth));\n            i1++;\n            found = true;\n          }\n        }\n        if (!found) {\n          line.append(fitLength(wayInfo1 + Long.toString(stepNodeId1), colWidth));\n          line.append(fitLength(\"|\", colWidth));\n          i1++;\n        }\n      }\n\n      System.out.println(line.toString());\n    }\n\n    return identical;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8321, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 52, "focalAPIEnd": 106, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/soartech/soar/tree/master/Domains/RoomsWorld/SoarRobotServer/src/main/java/edu/umich/robot/events/control/EffectorCancelEvent.java", "rawCode": "  @Override\n  public String toString() {\n    return String.format(\"%s()\", this.getClass().getSimpleName());\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8322, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClientProtocolException", "exceptionHandlingCall": ["getUrl()", "getMessage()", "error(String,*)", "new RuntimeException(String,*)"], "tryExpressionStart": 222, "tryExpressionEnd": 226, "tryBlockStart": 222, "tryBlockEnd": 1691, "catchExpressionStart": 1037, "catchExpressionEnd": 1071, "catchBlockStart": 1037, "catchBlockEnd": 1322, "exceptionHandlingCallStart": [1148, 1227, 1252, 1285], "exceptionHandlingCallEnd": [1172, 1241, 1269, 1313], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 757, "focalAPIEnd": 831, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["debug(str)"], "useStart": [747], "useEnd": [832], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wholcomb/tip/tree/master/work/welchutils/java/jhu/welch/atis/utils/httpchain/HttpChainsCaller.java", "rawCode": "  /** Call the current url in a chain */\n  public void call() {\n    if (currentUrlChain == null) {\n      return;\n    }\n\n    // Reset current content\n    currentContent = null;\n\n    if (currentUrlChain.isEnabled()) {\n      try {\n        // Enable redirect in a post request.\n        // REMARK: RFC standard does not allow redirect on a post request.\n        if (currentUrlChain.isPostRedirect()) {\n          ((DefaultHttpClient) httpclient).setRedirectStrategy(new CustomRedirectStrategy());\n        }\n\n        // setup get/post HTTPRequest based on current URL Chain\n        HttpRequestBase httpRequest = getHttpRequest(currentUrlChain);\n\n        // Execute a HTTP request\n        HttpResponse response = httpclient.execute(httpRequest);\n\n        log.debug(String.format(\"Status Code: %s\", response.getStatusLine().getStatusCode()));\n\n        // Handle http client requested content\n        handleHttpContent(response.getEntity());\n\n        // sleep for a moment as need before the next request\n        waiting(currentUrlChain);\n      } catch (ClientProtocolException e) {\n        String msg =\n            (\"Failed to load url: \"\n                + currentUrlChain.getUrl()\n                + \" with message: \"\n                + e.getMessage());\n        log.error(msg, e);\n        throw new RuntimeException(msg, e);\n      } catch (UnknownHostException e) {\n        log.error(\"Unknown Host: \" + e.getMessage());\n      } catch (IOException e) {\n        String msg =\n            (\"Failed to load url: \"\n                + currentUrlChain.getUrl()\n                + \" with message: \"\n                + e.getMessage());\n        log.error(msg, e);\n        throw new RuntimeException(msg, e);\n      }\n    }\n\n    // Reset currentUrlChain\n    currentUrlChain = null;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8323, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 156, "focalAPIEnd": 237, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/oryx-neffics/tree/master/editor/server/src/de/hpi/yawl/YResourcing.java", "rawCode": "  /**\n   * serializes allocate to XML\n   *\n   * @param s XML String\n   * @return XML String\n   */\n  private String writeAllocateToYAWL(String s) {\n    s += String.format(\"\\t<allocate initiator=\\\"%s\\\" \", allocate.toString().toLowerCase());\n    if ((allocate == InitiatorType.SYSTEM)\n        && (allocateDistributionSet != null)\n        && (allocateDistributionSet.getInitialSetList().size() > 0)) {\n      s += \">\\n\";\n      s += allocateDistributionSet.writeToYAWL();\n      s += \"\\t</allocate>\\n\";\n    } else s += \"/>\\n\";\n    return s;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8324, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 84, "focalAPIEnd": 290, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/google-web-toolkit/gwt/tree/master/user/src/com/google/web/bindery/requestfactory/apt/Messages.java", "rawCode": "  public static String contextMissingDomainType(Object domainTypeName) {\n    return String.format(\n        \"Cannot fully validate context since domain type %s is not available.\\n\"\n            + \"You must run the ValidationTool as part of your server build process.\",\n        domainTypeName);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8325, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 127, "focalAPIEnd": 158, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ZMsg.push(str)"], "useStart": [164], "useEnd": [190], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wuxiang/language/tree/master/zguide/examples/Java/flclient2.java", "rawCode": "  private ZMsg request(ZMsg request) {\n    // Prefix request with sequence number and empty envelope\n    String sequenceText = String.format(\"%d\", ++sequence);\n    request.push(sequenceText);\n    request.push(\"\");\n\n    // Blast the request to all connected servers\n    int server;\n    for (server = 0; server < servers; server++) {\n      ZMsg msg = request.duplicate();\n      msg.send(socket);\n    }\n    // Wait for a matching reply to arrive from anywhere\n    // Since we can poll several times, calculate each one\n    ZMsg reply = null;\n    long endtime = System.currentTimeMillis() + GLOBAL_TIMEOUT;\n    while (System.currentTimeMillis() < endtime) {\n      PollItem[] items = {new PollItem(socket, ZMQ.Poller.POLLIN)};\n      ZMQ.poll(items, endtime - System.currentTimeMillis());\n      if (items[0].isReadable()) {\n        // Reply is [empty][sequence][OK]\n        reply = ZMsg.recvMsg(socket);\n        assert (reply.size() == 3);\n        reply.pop();\n        String sequenceStr = reply.popString();\n        int sequenceNbr = Integer.parseInt(sequenceStr);\n        if (sequenceNbr == sequence) break;\n        reply.destroy();\n      }\n    }\n    request.destroy();\n    return reply;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8326, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 78, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["debug(str)"], "useStart": [65], "useEnd": [135], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iweinzierl/passsafe/tree/master/androidapp/src/de/iweinzierl/passsafe/android/activity/list/ListActivity.java", "rawCode": "  protected void showEntries(final EntryCategory category) {\n    LOGGER.debug(String.format(\"> showCategory(%s)\", category.getTitle()));\n    getListFragment().showEntries(getEntriesFromBackend(category));\n\n    if (searchView != null) {\n      filterEntries(searchView.getQuery().toString());\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8327, "initialization": ["Object args = getString()"], "initializationStart": [1764], "initializationEnd": [1775], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1889, "focalAPIEnd": 1947, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["ValueError(str)"], "useStart": [1875], "useEnd": [1948], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jstroem/TAPY/tree/master/lib/jython-2.7-b1/src/org/python/core/PyString.java", "rawCode": "  @SuppressWarnings(\"fallthrough\")\n  @Override\n  public PyComplex __complex__() {\n    boolean got_re = false;\n    boolean got_im = false;\n    boolean done = false;\n    boolean sw_error = false;\n\n    int s = 0;\n    int n = getString().length();\n    while (s < n && Character.isSpaceChar(getString().charAt(s))) s++;\n\n    if (s == n) {\n      throw Py.ValueError(\"empty string for complex()\");\n    }\n\n    double z = -1.0;\n    double x = 0.0;\n    double y = 0.0;\n\n    int sign = 1;\n    do {\n      char c = getString().charAt(s);\n      switch (c) {\n        case '-':\n          sign = -1;\n          /* Fallthrough */\n        case '+':\n          if (done || s + 1 == n) {\n            sw_error = true;\n            break;\n          }\n          // a character is guaranteed, but it better be a digit\n          // or J or j\n          c = getString().charAt(++s); // eat the sign character\n          // and check the next\n          if (!Character.isDigit(c) && c != 'J' && c != 'j') sw_error = true;\n          break;\n\n        case 'J':\n        case 'j':\n          if (got_im || done) {\n            sw_error = true;\n            break;\n          }\n          if (z < 0.0) {\n            y = sign;\n          } else {\n            y = sign * z;\n          }\n          got_im = true;\n          done = got_re;\n          sign = 1;\n          s++; // eat the J or j\n          break;\n\n        case ' ':\n          while (s < n && Character.isSpaceChar(getString().charAt(s))) s++;\n          if (s != n) sw_error = true;\n          break;\n\n        default:\n          boolean digit_or_dot = (c == '.' || Character.isDigit(c));\n          if (!digit_or_dot) {\n            sw_error = true;\n            break;\n          }\n          int end = endDouble(getString(), s);\n          z = Double.valueOf(getString().substring(s, end)).doubleValue();\n          if (z == Double.POSITIVE_INFINITY) {\n            throw Py.ValueError(String.format(\"float() out of range: %.150s\", getString()));\n          }\n\n          s = end;\n          if (s < n) {\n            c = getString().charAt(s);\n            if (c == 'J' || c == 'j') {\n              break;\n            }\n          }\n          if (got_re) {\n            sw_error = true;\n            break;\n          }\n\n          /* accept a real part */\n          x = sign * z;\n          got_re = true;\n          done = got_im;\n          z = -1.0;\n          sign = 1;\n          break;\n      } /* end of switch */\n\n    } while (s < n && !sw_error);\n\n    if (sw_error) {\n      throw Py.ValueError(\"malformed string for complex() \" + getString().substring(s));\n    }\n\n    return new PyComplex(x, y);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8328, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 384, "focalAPIEnd": 492, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [356], "useEnd": [493], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/varialus/jython-legacy/tree/master/sandbox/wierzbicki/test27/src/org/python/antlr/op/ModDerived.java", "rawCode": "  public void dispatch__init__(PyType type, PyObject[] args, String[] keywords) {\n    PyType self_type = getType();\n    if (self_type.isSubType(type)) {\n      PyObject impl = self_type.lookup(\"__init__\");\n      if (impl != null) {\n        PyObject res = impl.__get__(this, self_type).__call__(args, keywords);\n        if (res != Py.None) {\n          throw Py.TypeError(\n              String.format(\n                  \"__init__() should return None, not '%.200s'\", res.getType().fastGetName()));\n        }\n        proxyInit();\n      }\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8329, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 52, "focalAPIEnd": 93, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/VPAC/rsa/tree/master/src/rsaquery/src/org/vpac/ndg/query/DatasetInput.java", "rawCode": "  @Override\n  public String toString() {\n    return String.format(\"DatasetInput(%s)\", def.id);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8330, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 581, "focalAPIEnd": 615, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tmyroadctfig/unexceptional-javac/tree/master/src/share/classes/com/sun/tools/javac/util/Convert.java", "rawCode": "  /**\n   * Escapes a character if it has an escape sequence or is non-printable ASCII. Leaves non-ASCII\n   * characters alone.\n   */\n  public static String quote(char ch) {\n    switch (ch) {\n      case '\\b':\n        return \"\\\\b\";\n      case '\\f':\n        return \"\\\\f\";\n      case '\\n':\n        return \"\\\\n\";\n      case '\\r':\n        return \"\\\\r\";\n      case '\\t':\n        return \"\\\\t\";\n      case '\\'':\n        return \"\\\\'\";\n      case '\\\"':\n        return \"\\\\\\\"\";\n      case '\\\\':\n        return \"\\\\\\\\\";\n      default:\n        return (isPrintableAscii(ch)) ? String.valueOf(ch) : String.format(\"\\\\u%04x\", (int) ch);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8331, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 222, "focalAPIEnd": 292, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new URL(str)", "put(*,str)", "put(*,str)"], "useStart": [315, 801, 1984], "useEnd": [335, 953, 2105], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mperdikeas/archetypes/tree/master/ant/013-jax-ws-top-down-manual-auto-wt-proxy/client/src/FooMain.java", "rawCode": "  public static void main(String[] args) throws Exception {\n    FooMainCLI cli = CLIUtil.cli(FooMain.class.getName(), args, FooMainCLI.class);\n    boolean useProxy = cli.proxy == 0 ? false : true;\n    String serviceURLS = String.format(\"http://localhost:%d/soap?wsdl\", useProxy ? 9001 : 9000);\n    URL serviceURL = new URL(serviceURLS);\n    if (!useProxy) { // WAY 1\n      QName qname = new QName(\"urn:playground:jax-ws\", \"MyService\");\n      Service service = Service.create(serviceURL, qname);\n      IHello port = service.getPort(IHello.class);\n      System.out.println(port.sayHello(\"Long John Silver\"));\n      System.out.println(out(port.mulString(in(\"alpha-\", 5))));\n    }\n    if (!useProxy) { // WAY 2\n      MyService service = new MyService();\n      IHello port = service.getHelloPort();\n\n      ((javax.xml.ws.BindingProvider) port)\n          .getRequestContext()\n          .put(javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, serviceURLS);\n\n      System.out.println(port.sayHello(\"Long John Silver\"));\n      System.out.println(out(port.mulString(in(\"alpha-\", 5))));\n    }\n    if (!useProxy) { // WAY 3\n      QName qname = new QName(\"urn:playground:jax-ws\", \"MyService\");\n      MyService service = new MyService(serviceURL, qname);\n      IHello port = service.getHelloPort();\n      System.out.println(port.sayHello(\"Long John Silver\"));\n      System.out.println(out(port.mulString(in(\"alpha-\", 5))));\n    }\n    { // WAY 4\n      for (int i = 0; i < 5; i++) {\n        QName qname = new QName(\"urn:playground:jax-ws\", \"MyService\");\n        // see:\n        // http://stackoverflow.com/questions/8085826/instantiate-jax-ws-service-without-downloading-wsdl\n        // - and -\n        // http://stackoverflow.com/questions/18925888/jax-ws-ways-to-call-a-web-service-from-a-standalone-java-7-se-client\n        MyService service = new MyService(null, qname);\n        IHello port = service.getHelloPort();\n        BindingProvider bindingProvider = (BindingProvider) port;\n        bindingProvider\n            .getRequestContext()\n            .put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, serviceURLS);\n\n        System.out.println(port.sayHello(\"Long John Silver\"));\n        System.out.println(out(port.mulString(in(\"alpha-\", 5))));\n      }\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8332, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 355, "focalAPIEnd": 411, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.format(String,*)", "string.format(String,*)"], "useStart": [457, 538], "useEnd": [510, 576], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_packages_apps_Settings/tree/master/src/com/android/settings/fuelgauge/Utils.java", "rawCode": "  /**\n   * Formats data size in KB, MB, from the given bytes.\n   *\n   * @param context the application context\n   * @param bytes data size in bytes\n   * @return the formatted size such as 4.52 MB or 245 KB or 332 bytes\n   */\n  public static String formatBytes(Context context, double bytes) {\n    // TODO: I18N\n    if (bytes > 1000 * 1000) {\n      return String.format(\"%.2f MB\", ((int) (bytes / 1000)) / 1000f);\n    } else if (bytes > 1024) {\n      return String.format(\"%.2f KB\", ((int) (bytes / 10)) / 100f);\n    } else {\n      return String.format(\"%d bytes\", (int) bytes);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8333, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "args.compareTo(creditLimit,)>0", "guardType": "IF {", "guardExpressionStart": 112, "guardExpressionEnd": 165, "guardBlockStart": 112, "guardBlockEnd": 748, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 240, "focalAPIEnd": 352, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InvalidInputException(BigDecimal,str)"], "useStart": [180], "useEnd": [353], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/meyerkizner/COP3504/tree/master/src/project/model/LineOfCredit.java", "rawCode": "  public void setCreditLimit(BigDecimal creditLimit)\n      throws InvalidInputException, LoanCapException {\n    if (getBalance().negate().compareTo(creditLimit) > 0) {\n      throw new InvalidInputException(\n          creditLimit,\n          String.format(\n              \"the current balance of $%.2f exceeds the new credit limit\", getBalance().negate()));\n    } else if (this.creditLimit.compareTo(creditLimit) < 0) {\n      // we are increasing the credit limit, so check for loan authorization\n      Bank.getInstance().authorizeLoan(creditLimit.subtract(this.creditLimit));\n    } else {\n      // we are decreasing the credit limit, so return some loan authorization\n      Bank.getInstance().returnLoan(this.creditLimit.subtract(creditLimit));\n    }\n    this.creditLimit = creditLimit;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8334, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 151, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [142], "useEnd": [180], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/goodow/gwt/tree/master/user/src/com/google/gwt/uibinder/rebind/messages/GenerateAnnotationWriter.java", "rawCode": "  private static String toArrayLiteral(String[] strings) {\n    StringBuilder b = new StringBuilder(\"{\");\n    for (String s : strings) {\n      b.append(String.format(\"\\\"%s\\\", \", s));\n    }\n    b.append('}');\n    return b.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8335, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 911, "focalAPIEnd": 952, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["string.format(String,*)"], "useStart": [1211], "useEnd": [1270], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/util/ServiceLoader/Load.java", "rawCode": "  public static void main(String[] args) throws Exception {\n\n    boolean installedOnly = false;\n\n    List<String> expected = new ArrayList<String>(Arrays.asList(args));\n    if (!expected.isEmpty() && expected.get(0).equals(\"-i\")) {\n      expected.remove(0);\n      installedOnly = true;\n    }\n    if (expected.isEmpty()) throw new Exception(\"usage: Load [-i] ( fail | provider-class-name )*\");\n\n    ServiceLoader<FooService> sl =\n        (installedOnly\n            ? ServiceLoader.loadInstalled(FooService.class)\n            : ServiceLoader.load(FooService.class));\n    out.format(\"%s%n\", sl);\n    Iterator<FooService> sli = sl.iterator();\n    Iterator<String> ei = expected.iterator();\n\n    for (; ; ei.remove()) {\n      FooService fp = null;\n      try {\n        if (!sli.hasNext()) break;\n        fp = sli.next();\n      } catch (ServiceConfigurationError x) {\n        if (ei.next().equals(\"fail\")) {\n          out.format(\"Failed as expected: %s%n\", x);\n          continue;\n        }\n        throw x;\n      }\n      String ec = ei.next();\n      if (!fp.getClass().getName().equals(ec))\n        throw new Exception(\n            String.format(\"Wrong provider %s; expected %s\", fp.getClass().getName(), ec));\n      out.format(\"Provider found: %s%n\", fp.getClass().getName());\n    }\n\n    if (ei.hasNext()) throw new Exception(\"Missing providers: \" + expected);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8336, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 353, "focalAPIEnd": 385, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["warn(str)"], "useStart": [344], "useEnd": [386], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/r351574nc3/kfs-maven/tree/master/kfs-parent/core/src/main/java/org/kuali/kfs/sys/batch/service/impl/FiscalYearMakerServiceImpl.java", "rawCode": "  /**\n   * Write outs errors encountered while creating new records for an object to LOG.\n   *\n   * @param copyErrors Collection of error messages to write\n   */\n  protected void writeCopyFailureMessages(Collection<String> copyErrors) {\n    if (!copyErrors.isEmpty()) {\n      LOG.warn(\"\\n\");\n      for (String copyError : copyErrors) {\n        LOG.warn(String.format(\"\\n%s\", copyError));\n      }\n      LOG.warn(\"\\n\");\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8337, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 906, "focalAPIEnd": 941, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(str,*)", "string.format(String,*)", "string.format(String,*)", "assertTrue(str,*)", "string.format(String,*)"], "useStart": [895, 989, 1276, 1265, 1359], "useEnd": [969, 1025, 1311, 1339, 1395], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ieure/lucene-solr-snapshot/tree/master/modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet.java", "rawCode": "  /**\n   * @deprecated (3.1) remove this test when lucene 3.0 \"broken unicode 4\" support is no longer\n   *     needed.\n   */\n  @Deprecated\n  public void testSupplementaryCharsBWCompat() {\n    String missing = \"Term %s is missing in the set\";\n    String falsePos = \"Term %s is in the set but shouldn't\";\n    // for reference see\n    // http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[[%3ACase_Sensitive%3DTrue%3A]%26[^[\\u0000-\\uFFFF]]]&esc=on\n    String[] upperArr =\n        new String[] {\"Abc\\ud801\\udc1c\", \"\\ud801\\udc1c\\ud801\\udc1cCDE\", \"A\\ud801\\udc1cB\"};\n    String[] lowerArr =\n        new String[] {\"abc\\ud801\\udc44\", \"\\ud801\\udc44\\ud801\\udc44cde\", \"a\\ud801\\udc44b\"};\n    CharArraySet set = new CharArraySet(Version.LUCENE_30, Arrays.asList(TEST_STOP_WORDS), true);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n    set = new CharArraySet(Version.LUCENE_30, Arrays.asList(TEST_STOP_WORDS), false);\n    for (String upper : upperArr) {\n      set.add(upper);\n    }\n    for (int i = 0; i < upperArr.length; i++) {\n      assertTrue(String.format(missing, upperArr[i]), set.contains(upperArr[i]));\n      assertFalse(String.format(falsePos, lowerArr[i]), set.contains(lowerArr[i]));\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8338, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 331, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [307], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/varialus/jython-legacy/tree/master/jython/src/org/python/antlr/op/MultDerived.java", "rawCode": "  public PyObject __index__() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__index__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger || res instanceof PyLong) {\n        return res;\n      }\n      throw Py.TypeError(\n          String.format(\n              \"__index__ returned non-(int,long) (type %s)\", res.getType().fastGetName()));\n    }\n    return super.__index__();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8339, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 279, "focalAPIEnd": 319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getResourceAsStream(str)"], "useStart": [197], "useEnd": [320], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vedina/RESTNet/tree/master/restnet-sparql/src/main/java/net/idea/restnet/sparql/TripleStoreResource.java", "rawCode": "  protected void readOntologies(Model ontology) {\n    String[] owls =\n        new String[] {\n          \"isatab.owl\",\n        };\n    for (String owl : owls)\n      try {\n        readOWL(\n            getClass()\n                .getClassLoader()\n                .getResourceAsStream(String.format(\"ambit2/rest/owl/%s\", owl)),\n            ontology);\n      } catch (Exception x) {\n\n      }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8340, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 141, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [130], "useEnd": [175], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/amal029/jop/tree/master/java/tools/src/com/jopdesign/common/graphutils/InvokeDot.java", "rawCode": "  private String byteArrayToString(byte[] barray) {\n    StringBuffer buf = new StringBuffer();\n    for (Byte by : barray) {\n      buf.append(String.format(\"%02x\", (short) by));\n    }\n    return buf.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8341, "initialization": ["Object args = getKey()"], "initializationStart": [690], "initializationEnd": [704], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 789, "focalAPIEnd": 839, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["executeTest(str,WalkerTest.WalkerTestSpec)"], "useStart": [777], "useEnd": [846], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jianwang2010/Test/tree/master/public/java/test/org/broadinstitute/sting/gatk/walkers/genotyper/UnifiedGenotyperIntegrationTest.java", "rawCode": "  @Test\n  public void testOutputParameter() {\n    HashMap<String, String> e = new HashMap<String, String>();\n    e.put(\"-sites_only\", \"d40114aa201aa33ff5f174f15b6b73af\");\n    e.put(\"--output_mode EMIT_ALL_CONFIDENT_SITES\", \"3c681b053fd2280f3c42041d24243752\");\n    e.put(\"--output_mode EMIT_ALL_SITES\", \"eafa6d71c5ecd64dfee5d7a3f60e392e\");\n\n    for (Map.Entry<String, String> entry : e.entrySet()) {\n      WalkerTest.WalkerTestSpec spec =\n          new WalkerTest.WalkerTestSpec(\n              baseCommand\n                  + \" -I \"\n                  + validationDataLocation\n                  + \"NA12878.1kg.p2.chr1_10mb_11_mb.SLX.bam -o %s -L 1:10,000,000-10,010,000 \"\n                  + entry.getKey(),\n              1,\n              Arrays.asList(entry.getValue()));\n      executeTest(String.format(\"testParameter[%s]\", entry.getKey()), spec);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8342, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 440, "focalAPIEnd": 504, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["debug(str)", "string.format(String,*,*)", "string.format(String,String)"], "useStart": [430, 674, 885], "useEnd": [505, 814, 940], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xwiki-contrib/sankoreorg/tree/master/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/xmlrpc/XWikiXmlRpcApiImpl.java", "rawCode": "  /**\n   * Remove a page.\n   *\n   * @param token The authentication token.\n   * @param pageId The pageId in the 'Space.Page' format.\n   * @throws Exception An invalid token is provided or if the page does not exist or the user has\n   *     not the right to access it.\n   */\n  public Boolean removePage(String token, String pageId) throws Exception {\n    XWikiXmlRpcUser user = XWikiUtils.checkToken(token, this.xwikiContext);\n    LOG.debug(String.format(\"User %s has called removePage()\", user.getName()));\n\n    Document doc = XWikiUtils.getDocument(this.xwikiApi, pageId, true);\n\n    if (doc != null) {\n      if (doc.getLocked()) {\n        throw new Exception(\n            String.format(\n                \"[Unable to remove page. Document '%s' locked by '%s']\",\n                doc.getName(), doc.getLockingUser()));\n      }\n\n      doc.delete();\n    } else {\n      throw new Exception(String.format(\"[Page '%s' cannot be accessed]\", pageId));\n    }\n\n    return true;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8343, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 384, "focalAPIEnd": 430, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dcoraboeuf/jsido/tree/master/sido-gen-model/src/main/java/net/sf/sido/gen/model/support/java/BasicRefPropertyBinder.java", "rawCode": "  @Override\n  public String getFieldSingleDefault(\n      GenerationContext generationContext, SidoRefProperty property, JClass propertyClass) {\n    SidoType type = property.getType();\n    if (type.isAbstractType()) {\n      // Cannot initialise an abstract type\n      return null;\n    } else {\n      JClass typeClass = JClassUtils.createClassRef(generationContext, type);\n      return String.format(\"new %s()\", typeClass.getName());\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8344, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 322, "focalAPIEnd": 365, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Send(str)"], "useStart": [307], "useEnd": [366], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thecopy/ThorBangMQ/tree/master/handin/code/java/server/src/asl/ClientRequestWorker.java", "rawCode": "  public void removeClient(String arg) throws Exception {\n\n    try {\n      persistence.removeClient(Long.parseLong(arg));\n      transport.Send(okMessage);\n    } catch (PersistenceException e) {\n      transport.Send(this.persistenceFailMessage);\n      throw e;\n    } catch (InvalidClientException e) {\n      transport.Send(String.format(this.clientFailMessage, e.id));\n      throw e;\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8345, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1025, "focalAPIEnd": 1077, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["debug(str)", "string.format(String,int,int,int,int)"], "useStart": [1015, 1942], "useEnd": [1078, 2076], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lindenbaum/maven-erlang-plugin/tree/master/src/main/java/eu/lindenbaum/maven/mojo/app/TestRunner.java", "rawCode": "  @Override\n  protected void execute(Log log, Properties p)\n      throws MojoExecutionException, MojoFailureException {\n    log.info(MavenUtils.SEPARATOR);\n    log.info(\" T E S T - R U N N E R\");\n    log.info(MavenUtils.SEPARATOR);\n\n    if (this.skipTests) {\n      log.info(\"Tests are skipped.\");\n      return;\n    }\n\n    List<File> tests = new ArrayList<File>();\n    if (this.test == null || this.test.isEmpty()) {\n      tests.addAll(MojoUtils.getEunitTestSet(p.modules(true, false), p.testSupportArtifacts()));\n    } else {\n      String[] testNames = this.test.split(\",\");\n      for (String testName : testNames) {\n        File test =\n            new File(p.targetLayout().testEbin(), testName.trim() + ErlConstants.BEAM_SUFFIX);\n        if (test.isFile()) {\n          tests.add(test);\n        }\n      }\n    }\n\n    if (tests.isEmpty()) {\n      log.info(\"No tests to run.\");\n      return;\n    }\n\n    File surefireReports = p.targetLayout().surefireReports();\n    FileUtils.ensureDirectories(surefireReports);\n\n    log.debug(String.format(\"Executing %s test(s):\", tests.size()));\n    MavenUtils.logCollection(log, LogLevel.DEBUG, tests, \" * \");\n\n    String suiteName = p.project().getArtifactId();\n    Script<TestResult> script = new TestScript(tests, surefireReports, suiteName);\n    TestResult result = MavenSelf.get(p.cookie()).exec(p.testNode(), script);\n    result.logOutput(log);\n\n    int passed = result.passed();\n    int failed = result.failed();\n    int skipped = result.skipped();\n    int cancelled = result.cancelled();\n\n    if ((passed | failed | skipped | cancelled) == 0) {\n      log.warn(\" There were no tests to run.\");\n    } else if ((failed | skipped | cancelled) == 0 && passed == 1) {\n      log.info(\" Test passed.\");\n    } else if ((failed | skipped | cancelled) == 0 && passed > 1) {\n      log.info(\" All \" + passed + \" tests passed.\");\n    } else {\n      log.error(MavenUtils.FAT_SEPARATOR);\n      log.error(\n          String.format(\n              \" Failed: %s. Skipped: %s. Passed: %s. Cancelled: %s.\",\n              failed, skipped, passed, cancelled));\n      throw new MojoFailureException(\"There were test failures.\");\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8346, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 220, "focalAPIEnd": 276, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["trace(str)", "string.format(String,Enum,*)"], "useStart": [210, 422], "useEnd": [277, 489], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drepshas/hib-core/tree/master/hibernate-core/src/main/java/org/hibernate/type/EnumType.java", "rawCode": "    @Override\n    public Enum getValue(ResultSet rs, String[] names) throws SQLException {\n      final int ordinal = rs.getInt(names[0]);\n      if (rs.wasNull()) {\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(String.format(\"Returning null as column [%s]\", names[0]));\n        }\n        return null;\n      }\n\n      final Enum enumValue = fromOrdinal(ordinal);\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(String.format(\"Returning [%s] as column [%s]\", enumValue, names[0]));\n      }\n      return enumValue;\n    }\n"}, {"dataset": "stringFormat", "exampleID": 8347, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 2825, "focalAPIEnd": 2900, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["info(str)"], "useStart": [2816], "useEnd": [2901], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mirror/jpcsp/tree/master/src/jpcsp/memory/DebuggerMemory.java", "rawCode": "  public final void importBreakpoints(File f) {\n    BufferedReader in = null;\n    try {\n      in = new BufferedReader(new FileReader(f));\n\n      // reset current configuration\n      traceMemoryRead = false;\n      traceMemoryWrite = false;\n      traceMemoryRead8 = false;\n      traceMemoryWrite8 = false;\n      traceMemoryRead16 = false;\n      traceMemoryWrite16 = false;\n      traceMemoryRead32 = false;\n      traceMemoryWrite32 = false;\n      pauseEmulatorOnMemoryBreakpoint = false;\n\n      while (true) {\n        String line = in.readLine();\n        if (line == null) {\n          break;\n        }\n        line = line.trim();\n        int rangeIndex = line.indexOf(\"-\");\n        if (rangeIndex >= 0) {\n          // Range parsing\n          if (line.startsWith(\"RW \")) {\n            int start = Utilities.parseAddress(line.substring(2, rangeIndex));\n            int end = Utilities.parseAddress(line.substring(rangeIndex + 1));\n            memoryBreakpoints.add(\n                new MemoryBreakpoint(this, start, end, MemoryBreakpoint.AccessType.READWRITE));\n          } else if (line.startsWith(\"R \")) {\n            int start = Utilities.parseAddress(line.substring(1, rangeIndex));\n            int end = Utilities.parseAddress(line.substring(rangeIndex + 1));\n            memoryBreakpoints.add(\n                new MemoryBreakpoint(this, start, end, MemoryBreakpoint.AccessType.READ));\n          } else if (line.startsWith(\"W \")) {\n            int start = Utilities.parseAddress(line.substring(1, rangeIndex));\n            int end = Utilities.parseAddress(line.substring(rangeIndex + 1));\n            memoryBreakpoints.add(\n                new MemoryBreakpoint(this, start, end, MemoryBreakpoint.AccessType.WRITE));\n          }\n        } else if (line.startsWith(\"RW \")) {\n          int address = Utilities.parseAddress(line.substring(2));\n          memoryBreakpoints.add(\n              new MemoryBreakpoint(this, address, MemoryBreakpoint.AccessType.READWRITE));\n        } else if (line.startsWith(\"R \")) {\n          int address = Utilities.parseAddress(line.substring(1));\n          memoryBreakpoints.add(\n              new MemoryBreakpoint(this, address, MemoryBreakpoint.AccessType.READ));\n        } else if (line.startsWith(\"W \")) {\n          int address = Utilities.parseAddress(line.substring(1));\n          memoryBreakpoints.add(\n              new MemoryBreakpoint(this, address, MemoryBreakpoint.AccessType.WRITE));\n        } else if (!line.startsWith(\"#\")) {\n          String[] tokens = line.split(\"\\\\|\");\n          for (int i = 0; tokens != null && i < tokens.length; i++) {\n            String token = tokens[i].trim().toLowerCase();\n            setBreakpointToken(token);\n          }\n        }\n      }\n    } catch (IOException ioe) {\n      // ignore\n    } finally {\n      Utilities.close(in);\n    }\n\n    log.info(String.format(\"%d memory breakpoint(s) imported\", memoryBreakpoints.size()));\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8348, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1019, "focalAPIEnd": 1179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new VDSTaskResultNotSuccessException(str)"], "useStart": [965], "useEnd": [1180], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Dhandapani/gluster-ovirt/tree/master/backend/manager/modules/vdsbroker/src/main/java/org/ovirt/engine/core/vdsbroker/vdsbroker/HSMGetAllTasksStatusesVDSCommand.java", "rawCode": "  protected AsyncTaskStatus ParseTaskStatus(TaskStatusForXmlRpc taskStatus) {\n    AsyncTaskStatus task = new AsyncTaskStatus();\n    task.setStatus(\n        (taskStatus != null && taskStatus.mTaskState != null)\n            ? (AsyncTaskStatusEnum.valueOf(taskStatus.mTaskState))\n            : AsyncTaskStatusEnum.unknown);\n\n    if (task.getStatus() == AsyncTaskStatusEnum.finished) {\n      UpdateReturnStatus(taskStatus);\n\n      try {\n        ProceedProxyReturnValue();\n      } catch (RuntimeException ex) {\n        task.setException(ex);\n      }\n\n      task.setResult((AsyncTaskResultEnum.valueOf(taskStatus.mTaskResult)));\n\n      // Normally, when the result is not 'success', there is an\n      // exception.\n      // Just in case, we check the result here and if there is no\n      // exception,\n      // we throw a special one here:\n      if (task.getResult() != AsyncTaskResultEnum.success && task.getException() == null) {\n        task.setException(\n            new VDSTaskResultNotSuccessException(\n                String.format(\n                    \"TaskState contained successful return code, but a non-success result ('%1$s').\",\n                    taskStatus.mTaskResult)));\n      }\n    }\n    return task;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8349, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 158, "focalAPIEnd": 191, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getResource(str)"], "useStart": [135], "useEnd": [192], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lveci/nest/tree/master/beam/beam-scripting/src/main/java/org/esa/beam/scripting/visat/ScriptManager.java", "rawCode": "  private URL findInitScript(String pattern) {\n    for (String extension : engine.getFactory().getExtensions()) {\n      URL resource = getClass().getResource(String.format(pattern, extension));\n      if (resource != null) {\n        return resource;\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8350, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 331, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [307], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jstroem/TAPY/tree/master/lib/jython-2.7-b1/src/org/python/antlr/ast/SuiteDerived.java", "rawCode": "  public PyObject __index__() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__index__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger || res instanceof PyLong) {\n        return res;\n      }\n      throw Py.TypeError(\n          String.format(\n              \"__index__ returned non-(int,long) (type %s)\", res.getType().fastGetName()));\n    }\n    return super.__index__();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8351, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 334, "focalAPIEnd": 379, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mrp1q7z/YumekaNow/tree/master/src/com/yojiokisoft/yumekanow/activity/MakeCardActivity.java", "rawCode": "  /**\n   * 文字／文字の影のラベルをセットする.\n   *\n   * @param textView\n   * @param backColor\n   */\n  private void setBackAndForeColorLabel(TextView textView, int backColor) {\n    int foreColor = backColor ^ 0xffffff;\n    textView.setTextColor(foreColor);\n    textView.setBackgroundColor(backColor);\n    textView.setTag(backColor);\n\n    String hex = String.format(\"%06x\", backColor & 0x00ffffff);\n    textView.setText(\"#\" + hex);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8352, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 331, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [307], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/varialus/jython-legacy/tree/master/jython/src/org/python/antlr/op/BitAndDerived.java", "rawCode": "  public PyObject __index__() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__index__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger || res instanceof PyLong) {\n        return res;\n      }\n      throw Py.TypeError(\n          String.format(\n              \"__index__ returned non-(int,long) (type %s)\", res.getType().fastGetName()));\n    }\n    return super.__index__();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8353, "initialization": ["Object args = VirtualMachineDescriptor.id()"], "initializationStart": [235], "initializationEnd": [250], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 342, "focalAPIEnd": 423, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new VirtualMachineResolverException(str)", "string.format(String,*)", "new VirtualMachineResolverException(str)"], "useStart": [295, 663, 614], "useEnd": [424, 744, 745], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/appfirst/nagios-plugins/tree/master/jmx-collector/src/main/java/com/objectstyle/appfirst/jmx/collector/resolve/LocalVirtualMachineResolver.java", "rawCode": "  private JMXServiceURL attach(VirtualMachineDescriptor descriptor)\n      throws MalformedURLException, VirtualMachineResolverException {\n    LocalVirtualMachine lvm =\n        LocalVirtualMachine.getLocalVirtualMachine(Integer.valueOf(descriptor.id()));\n    if (!lvm.isAttachable())\n      throw new VirtualMachineResolverException(\n          String.format(\"Unable to attach to the virtual machine pid: %s\", descriptor.id()));\n    if (!lvm.isManageable()) {\n      JVMAttach attach = new JVMAttach();\n      attach.setLvm(lvm);\n      lvm = attach.attach();\n      if (lvm == null || !lvm.isManageable())\n        throw new VirtualMachineResolverException(\n            String.format(\"Unable to attach to the virtual machine pid: %s\", descriptor.id()));\n    }\n    return new JMXServiceURL(lvm.connectorAddress());\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8354, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "NoSuchAlgorithmException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 93, "tryExpressionEnd": 97, "tryBlockStart": 93, "tryBlockEnd": 573, "catchExpressionStart": 430, "catchExpressionEnd": 465, "catchBlockStart": 430, "catchBlockEnd": 499, "exceptionHandlingCallStart": [473], "exceptionHandlingCallEnd": [492], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 347, "focalAPIEnd": 378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [330], "useEnd": [379], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HamiltonSantos/TCC/tree/master/Desenvolvimento/workspace/src/main/java/br/com/faddvm/dao/impl/HibernateFisioterapeutaDao.java", "rawCode": "  private String senhaCriptografada(String senhaDescript) {\n    MessageDigest algorithm;\n    try {\n      algorithm = MessageDigest.getInstance(\"MD5\");\n      byte messageDigest[] = algorithm.digest(senhaDescript.getBytes(\"UTF-8\"));\n\n      StringBuilder hexString = new StringBuilder();\n      for (byte b : messageDigest) {\n        hexString.append(String.format(\"%02X\", 0xFF & b));\n      }\n      return hexString.toString();\n    } catch (NoSuchAlgorithmException e) {\n      e.printStackTrace();\n    } catch (UnsupportedEncodingException e) {\n      e.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8355, "initialization": ["Object args = Resident.getName()"], "initializationStart": [155], "initializationEnd": [173], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 220, "focalAPIEnd": 273, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new TownyException(str)"], "useStart": [201], "useEnd": [274], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Zren/Towny/tree/master/src/com/palmergames/bukkit/towny/object/TownyUniverse.java", "rawCode": "  public static Player getPlayer(Resident resident) throws TownyException {\n    for (Player player : getOnlinePlayers())\n      if (player.getName().equals(resident.getName())) return player;\n    throw new TownyException(String.format(\"%s is not online\", resident.getName()));\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8356, "initialization": ["Object args = Text.getData(String)"], "initializationStart": [112], "initializationEnd": [139], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 234, "focalAPIEnd": 279, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setErrorMessage(str)", "string.format(String,Object)", "setErrorMessage(str)"], "useStart": [218, 387, 371], "useEnd": [280, 432, 433], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/openGDA/gda-tomography/tree/master/uk.ac.gda.client.tomo/src/uk/ac/gda/client/tomo/preferences/TomoAlignmentPreferencePage.java", "rawCode": "  private boolean validateDoubleValue(Text txtCtrl) {\n    String txt = txtCtrl.getText();\n    Object errMsgId = txtCtrl.getData(ERR_MSG_ID);\n    boolean result = true;\n\n    if (txt == null || txt.length() < 1) {\n      setErrorMessage(String.format(INVALID_VALUE_ERRMSG, errMsgId));\n      result = false;\n    } else if (!doubleRegexPattern.matcher(txt).matches()) {\n      setErrorMessage(String.format(INVALID_VALUE_ERRMSG, errMsgId));\n      result = false;\n    } else {\n      setErrorMessage(null);\n    }\n    return result;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8357, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 536, "focalAPIEnd": 574, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)", "string.format(String,*)"], "useStart": [524, 644], "useEnd": [575, 692], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/soulgalore/image-resize-servlet/tree/master/src/main/java/com/soulgalore/servlet/thumbnail/Thumbnail.java", "rawCode": "  /**\n   * Create the generated the file path, will always use the original filename, so that all sizes of\n   * one file end up in one directory.\n   *\n   * @return the path in the style of two dirs example /205/070/\n   */\n  private String createFilePath() {\n\n    // setup the thumbs dir based on the original name, so that all sizes\n    // are in the same working dir\n    final int hashcode = originalImageNameWithExtension.hashCode();\n\n    final StringBuilder path = new StringBuilder(File.separator);\n    // first dir\n    path.append(String.format(\"%03d\", hashcode & MASK));\n    path.append(File.separator);\n    // second dir\n    path.append(String.format(\"%03d\", (hashcode >> BYTE) & MASK));\n    path.append(File.separator);\n\n    return path.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8358, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 138, "focalAPIEnd": 194, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InterpreterException(str)"], "useStart": [113], "useEnd": [195], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/munificent/magpie-optionally-typed/tree/master/src/com/stuffwithstuff/magpie/interpreter/Obj.java", "rawCode": "  public ClassObj asClass() {\n    if (this instanceof ClassObj) {\n      return (ClassObj) this;\n    }\n\n    throw new InterpreterException(String.format(\"The object \\\"%s\\\" is not a class.\", this));\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8359, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 840, "focalAPIEnd": 1330, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RuntimeException(str)"], "useStart": [808], "useEnd": [1331], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/tapestry-5/tree/master/tapestry-jpa/src/main/java/org/apache/tapestry5/internal/jpa/EntityManagerSourceImpl.java", "rawCode": "  private void validateUnitInfos(List<TapestryPersistenceUnitInfo> persistenceUnitInfos) {\n    final List<String> affectedUnits =\n        F.flow(persistenceUnitInfos)\n            .filter(\n                new Predicate<TapestryPersistenceUnitInfo>() {\n                  @Override\n                  public boolean accept(TapestryPersistenceUnitInfo info) {\n                    return !info.excludeUnlistedClasses();\n                  }\n                })\n            .map(\n                new Mapper<TapestryPersistenceUnitInfo, String>() {\n                  @Override\n                  public String map(TapestryPersistenceUnitInfo info) {\n                    return info.getPersistenceUnitName();\n                  }\n                })\n            .toList();\n\n    if (0 < affectedUnits.size()) {\n      throw new RuntimeException(\n          String.format(\n              \"Persistence units '%s' are configured to include managed classes that have not been explicitly listed. \"\n                  + \"This is forbidden when multiple persistence units are used in the same application. \"\n                  + \"Please configure persistence units to exclude unlisted managed classes (e.g. by removing <exclude-unlisted-classes> element) \"\n                  + \"and include them explicitly.\",\n              InternalUtils.join(affectedUnits)));\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8360, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IOException", "exceptionHandlingCall": ["new ValidationReportEntry(*,String)", "add(*)"], "tryExpressionStart": 146, "tryExpressionEnd": 226, "tryBlockStart": 146, "tryBlockEnd": 1263, "catchExpressionStart": 1127, "catchExpressionEnd": 1155, "catchBlockStart": 1127, "catchBlockEnd": 1263, "exceptionHandlingCallStart": [1174, 1163], "exceptionHandlingCallEnd": [1255, 1256], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 949, "focalAPIEnd": 1099, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ValidationReportEntry(*,str)"], "useStart": [862], "useEnd": [1100], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OCHA-DAP/DAP-System/tree/master/HDX-System/src/main/java/org/ocha/hdx/validation/ScraperValidator.java", "rawCode": "  List<ValidationReportEntry> validateDatasetFile(final File datasetFile) {\n    final List<ValidationReportEntry> result = new ArrayList<>();\n    try (final BufferedReader br = new BufferedReader(new FileReader(datasetFile))) {\n      String line;\n      // first validating first line\n      line = br.readLine();\n      // use comma as separator\n      final String[] values = line.split(\",\");\n      if (values.length != 4\n          || !values[0].equals(\"dsID\")\n          || !values[1].equals(\"last_updated\")\n          || !values[2].equals(\"last_scraped\")\n          || !values[3].equals(\"name\")) {\n        result.add(\n            new ValidationReportEntry(\n                ValidationStatus.ERROR, \"Incorrect first line for Dataset file\"));\n      }\n      while ((line = br.readLine()) != null) {\n        if (values.length != 4) {\n          result.add(\n              new ValidationReportEntry(\n                  ValidationStatus.ERROR,\n                  String.format(\n                      \"A ligne contains an incorrect number of values, expected : 4, actual : %d\",\n                      values.length)));\n        }\n      }\n    } catch (final IOException e) {\n      result.add(new ValidationReportEntry(ValidationStatus.ERROR, \"Error caused by an exception\"));\n    }\n    return result;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8361, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 619, "focalAPIEnd": 746, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertTrue(str,*)"], "useStart": [592], "useEnd": [787], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AdeleResearchGroup/ApAM/tree/master/tests/apam-pax-test-core/src/test/java/fr/imag/adele/apam/test/testcases/RelationTest.java", "rawCode": "  @Test\n  public void RelationSourceInstanceTargetInstance_tc109() {\n\n    Implementation target = waitForImplByName(null, \"S07-DependencyImpl\");\n    target.createInstance(null, null);\n\n    Implementation implementation = waitForImplByName(null, \"S07-implementation-13\");\n\n    Instance instance = implementation.createInstance(null, null);\n\n    S07ImplementationImporter13 dependency =\n        (S07ImplementationImporter13) instance.getServiceObject();\n\n    // Force field injection\n    dependency.getInjected();\n\n    ComponentImpl ci = (ComponentImpl) instance;\n\n    auxListInstances();\n\n    Assert.assertTrue(\n        String.format(\n            \"One link should have been created, but %s links were found\",\n            ci.getLocalLinks().size()),\n        ci.getLocalLinks().size() == 1);\n\n    AssertCorrectSourceTargetTypes(instance, Instance.class, Instance.class);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8362, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1816, "focalAPIEnd": 1850, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Flexibity/contiki/tree/master/tools/cooja/apps/mrm/java/se/sics/mrm/ChannelModel.java", "rawCode": "  /**\n   * Calculates and returns the signal to noise ratio (dB) of a signal sent from the given source\n   * position to the given destination position as a random variable. This method uses current\n   * parameters such as transmitted power, obstacles, overall system loss etc.\n   *\n   * @param sourceX Source position X\n   * @param sourceY Source position Y\n   * @param destX Destination position X\n   * @param destY Destination position Y\n   * @return Received SNR (dB) random variable: The first value in the array is the random variable\n   *     mean. The second is the variance. The third value is the received signal strength which may\n   *     be used in comparison with interference etc.\n   */\n  public double[] getSINR(TxPair txPair, double interference) {\n    /* TODO Cache values: called repeatedly with noise sources. */\n\n    // Calculate received signal strength\n    double[] signalStrength = getReceivedSignalStrength(txPair);\n    double[] snrData = new double[] {signalStrength[0], signalStrength[1], signalStrength[0]};\n\n    // Add antenna gain\n    if (getParameterBooleanValue(Parameter.rx_with_gain)) {\n      snrData[0] += txPair.getRxGain();\n    }\n\n    double noiseVariance = getParameterDoubleValue(Parameter.bg_noise_var);\n    double noiseMean = getParameterDoubleValue(Parameter.bg_noise_mean);\n\n    if (interference > noiseMean) {\n      noiseMean = interference;\n    }\n\n    if (getParameterBooleanValue(Parameter.apply_random)) {\n      Random random = new Random(); /* TODO Use main random generator? */\n      noiseMean += Math.sqrt(noiseVariance) * random.nextGaussian();\n      noiseVariance = 0;\n    }\n\n    // Applying noise to calculate SNR\n    snrData[0] -= noiseMean;\n    snrData[1] += noiseVariance;\n\n    if (logMode) {\n      logInfo.append(\n          \"\\nReceived SNR: \"\n              + String.format(\"%2.3f\", snrData[0])\n              + \" dB (variance \"\n              + snrData[1]\n              + \")\\n\");\n    }\n    return snrData;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8363, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 126, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new InterpreterException(str)"], "useStart": [101], "useEnd": [186], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/munificent/magpie-optionally-typed/tree/master/src/com/stuffwithstuff/magpie/interpreter/Obj.java", "rawCode": "  public FnObj asFn() {\n    if (this instanceof FnObj) {\n      return (FnObj) this;\n    }\n\n    throw new InterpreterException(String.format(\"The object \\\"%s\\\" is not a function.\", this));\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8364, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 425, "focalAPIEnd": 530, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["prepareStatement(str)"], "useStart": [338], "useEnd": [531], "hasFinally": 1, "cleanUpCall": ["PreparedStatement.close()"], "finallyExpressionStart": 976, "finallyExpressionEnd": 984, "finallyBlockStart": 976, "finallyBlockEnd": 1012, "cleanUpCallStart": [992], "cleanUpCallEnd": [1005], "url": "https://github.com/e-yamane/framework/tree/master/src/testingFramework/jp/rough_diamond/commons/testing/InsertOperationExt.java", "rawCode": "  boolean checkTestData(\n      IDatabaseConnection connection, DataSetProxy dsp, String resourceName, String tempTableName)\n      throws SQLException {\n    URL url = this.getClass().getClassLoader().getResource(dsp.resourceName);\n    File f = new File(url.getPath());\n    long ts = f.lastModified();\n    PreparedStatement pstmt =\n        connection\n            .getConnection()\n            .prepareStatement(\n                String.format(\n                    \"select ts from %s where name = ?\", DBInitializer.TEST_DATA_CONTROLER));\n    try {\n      pstmt.setString(1, resourceName);\n      ResultSet rs = pstmt.executeQuery();\n      if (rs.next()) {\n        long modified = Long.parseLong(rs.getString(1));\n        if (modified != ts) {\n          updateTestDataRecord(connection, resourceName, ts);\n          return true;\n        }\n      } else {\n        createTestDataRecord(connection, resourceName, tempTableName, ts);\n        return true;\n      }\n      return false;\n    } finally {\n      pstmt.close();\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8365, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.format(String,int)"], "configurationStart": [521], "configurationEnd": [589], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 878, "focalAPIEnd": 959, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["info(str)", "string.format(String,*)", "string.format(String,*)", "string.format(String,int)"], "useStart": [869, 1007, 1326, 3796], "useEnd": [960, 1090, 1469, 3875], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mirror/jpcsp/tree/master/src/jpcsp/HLE/modules150/ModuleMgrForUser.java", "rawCode": "  @HLEFunction(nid = 0x50F0C1EC, version = 150, checkInsideInterrupt = true)\n  public int sceKernelStartModule(\n      int uid,\n      int argSize,\n      @CanBeNull TPointer argp,\n      @CanBeNull TPointer32 statusAddr,\n      @CanBeNull TPointer optionAddr) {\n    SceModule sceModule = Managers.modules.getModuleByUID(uid);\n    SceKernelSMOption smOption = null;\n    if (optionAddr.isNotNull()) {\n      smOption = new SceKernelSMOption();\n      smOption.read(optionAddr);\n    }\n\n    if (sceModule == null) {\n      log.warn(String.format(\"sceKernelStartModule - unknown module UID 0x%X\", uid));\n      return ERROR_KERNEL_UNKNOWN_MODULE;\n    }\n\n    statusAddr.setValue(0);\n\n    if (sceModule.isFlashModule) {\n      // Trying to start a module loaded from flash0:\n      // Do nothing...\n      if (HLEModuleManager.getInstance().hasFlash0Module(sceModule.modname)) {\n        log.info(String.format(\"IGNORING:sceKernelStartModule HLE module '%s'\", sceModule.modname));\n      } else {\n        log.warn(\n            String.format(\"IGNORING:sceKernelStartModule flash module '%s'\", sceModule.modname));\n      }\n      sceModule.start();\n      return sceModule.modid; // return the module id\n    }\n    if (HLEModuleManager.getInstance().hasFlash0Module(sceModule.modname)) {\n      if (log.isInfoEnabled()) {\n        log.info(\n            String.format(\n                \"sceKernelStartModule - loading missing HLE module '%s' (was loaded as ELF)\",\n                sceModule.modname));\n      }\n      HLEModuleManager.getInstance().LoadFlash0Module(sceModule.modname);\n      sceModule.start();\n      return sceModule.modid; // return the module id\n    }\n\n    ThreadManForUser threadMan = Modules.ThreadManForUserModule;\n    int attribute = sceModule.attribute;\n    int entryAddr = sceModule.entry_addr;\n    if (Memory.isAddressGood(sceModule.module_start_func)) {\n      // Always take the module start function if one is defined.\n      entryAddr = sceModule.module_start_func;\n      attribute = sceModule.module_start_thread_attr;\n    }\n\n    if (Memory.isAddressGood(entryAddr)) {\n      int priority = 0x20;\n      if (smOption != null && smOption.priority > 0) {\n        priority = smOption.priority;\n      } else if (sceModule.module_start_thread_priority > 0) {\n        priority = sceModule.module_start_thread_priority;\n      }\n\n      int stackSize = 0x40000;\n      if (smOption != null && smOption.stackSize > 0) {\n        stackSize = smOption.stackSize;\n      } else if (sceModule.module_start_thread_stacksize > 0) {\n        stackSize = sceModule.module_start_thread_stacksize;\n      }\n\n      if (smOption != null) {\n        attribute = smOption.attribute;\n      }\n\n      // Remember the current thread as it can be changed by hleKernelStartThread.\n      SceKernelThreadInfo currentThread = threadMan.getCurrentThread();\n\n      SceKernelThreadInfo thread =\n          threadMan.hleKernelCreateThread(\n              \"SceModmgrStart\", entryAddr, priority, stackSize, attribute, 0);\n      // override inherited module id with the new module we are starting\n      thread.moduleid = sceModule.modid;\n      // Store the thread exit status into statusAddr when the thread terminates\n      thread.exitStatusAddr = statusAddr;\n      sceModule.start();\n\n      // Start the module start thread\n      threadMan.hleKernelStartThread(thread, argSize, argp.getAddress(), sceModule.gp_value);\n\n      // Wait for the end of the module start thread.\n      // Do no return the thread exit status as the result of this call,\n      // return the module ID.\n      threadMan.hleKernelWaitThreadEnd(currentThread, thread.uid, TPointer32.NULL, false, false);\n    } else if (entryAddr == 0 || entryAddr == -1) {\n      Modules.log.info(\"sceKernelStartModule - no entry address\");\n      sceModule.start();\n    } else {\n      log.warn(String.format(\"sceKernelStartModule - invalid entry address 0x%08X\", entryAddr));\n      return -1;\n    }\n\n    return sceModule.modid;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8366, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 390, "focalAPIEnd": 456, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["warn(str)", "string.format(String,*,*,*)"], "useStart": [372, 1258], "useEnd": [457, 1435], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/tapestry-5/tree/master/tapestry-core/src/main/java/org/apache/tapestry5/corelib/pages/PageCatalog.java", "rawCode": "  Object onActionFromForceLoad() {\n    if (failures == null) {\n      failures = CollectionFactory.newSet();\n    }\n\n    long startTime = System.currentTimeMillis();\n\n    final Collection<Page> initialPages = getPages();\n\n    final PageLoadData data = new PageLoadData();\n\n    for (final String name : resolver.getPageNames()) {\n      if (failures.contains(name)) {\n        alertManager.warn(String.format(\"Skipping page %s due to prior load failure.\", name));\n        data.someFail = true;\n        continue;\n      }\n\n      operationTracker.run(\n          \"Loading page \" + name,\n          new Runnable() {\n            public void run() {\n              try {\n                Page newPage = pageSource.getPage(name);\n\n                if (!initialPages.contains(newPage)) {\n                  data.loadedCount++;\n                }\n              } catch (RuntimeException ex) {\n                alertManager.error(String.format(\"Page %s failed to load.\", name));\n                failures.add(name);\n\n                if (data.fail == null) {\n                  pageName = name;\n                  data.fail = ex;\n                }\n              }\n            }\n          });\n\n      if (data.fail != null) {\n        break;\n      }\n    }\n\n    alertManager.info(\n        String.format(\n            \"Loaded %,d new pages for selector '%s' (in %,d ms).\",\n            data.loadedCount, selector.toShortString(), System.currentTimeMillis() - startTime));\n\n    if (data.someFail) {\n      alertManager.warn(\"Clear the cache to reset the list of failed pages.\");\n    }\n\n    if (data.fail != null) {\n      throw data.fail;\n    }\n\n    return pagesZone.getBody();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8367, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 331, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [307], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/purplefox/jython/tree/master/src/org/python/antlr/op/DelDerived.java", "rawCode": "  public PyObject __index__() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__index__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger || res instanceof PyLong) {\n        return res;\n      }\n      throw Py.TypeError(\n          String.format(\n              \"__index__ returned non-(int,long) (type %s)\", res.getType().fastGetName()));\n    }\n    return super.__index__();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8368, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.format(String,String)", "string.format(String,*,int)", "string.format(String,String)", "string.format(String,String)"], "configurationStart": [450, 839, 1046, 1819], "configurationEnd": [480, 949, 1101, 1874], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1899, "focalAPIEnd": 1946, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["d(String,str)"], "useStart": [1887], "useEnd": [1947], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/services/java/com/android/server/NetworkManagementService.java", "rawCode": "  public InterfaceConfiguration getInterfaceConfig(String iface) throws IllegalStateException {\n    mContext.enforceCallingOrSelfPermission(ACCESS_NETWORK_STATE, TAG);\n    String rsp;\n    try {\n      rsp = mConnector.doCommand(\"interface getcfg \" + iface).get(0);\n    } catch (NativeDaemonConnectorException e) {\n      throw new IllegalStateException(\n          \"Cannot communicate with native daemon to get interface config\");\n    }\n    Slog.d(TAG, String.format(\"rsp <%s>\", rsp));\n\n    // Rsp: 213 xx:xx:xx:xx:xx:xx yyy.yyy.yyy.yyy zzz [flag1 flag2 flag3]\n    StringTokenizer st = new StringTokenizer(rsp);\n\n    InterfaceConfiguration cfg;\n    try {\n      try {\n        int code = Integer.parseInt(st.nextToken(\" \"));\n        if (code != NetdResponseCode.InterfaceGetCfgResult) {\n          throw new IllegalStateException(\n              String.format(\n                  \"Expected code %d, but got %d\", NetdResponseCode.InterfaceGetCfgResult, code));\n        }\n      } catch (NumberFormatException nfe) {\n        throw new IllegalStateException(String.format(\"Invalid response from daemon (%s)\", rsp));\n      }\n\n      cfg = new InterfaceConfiguration();\n      cfg.hwAddr = st.nextToken(\" \");\n      InetAddress addr = null;\n      int prefixLength = 0;\n      try {\n        addr = NetworkUtils.numericToInetAddress(st.nextToken(\" \"));\n      } catch (IllegalArgumentException iae) {\n        Slog.e(TAG, \"Failed to parse ipaddr\", iae);\n      }\n\n      try {\n        prefixLength = Integer.parseInt(st.nextToken(\" \"));\n      } catch (NumberFormatException nfe) {\n        Slog.e(TAG, \"Failed to parse prefixLength\", nfe);\n      }\n\n      cfg.addr = new LinkAddress(addr, prefixLength);\n      cfg.interfaceFlags = st.nextToken(\"]\").trim() + \"]\";\n    } catch (NoSuchElementException nsee) {\n      throw new IllegalStateException(String.format(\"Invalid response from daemon (%s)\", rsp));\n    }\n    Slog.d(TAG, String.format(\"flags <%s>\", cfg.interfaceFlags));\n    return cfg;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8369, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 300, "focalAPIEnd": 483, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["warn(str)", "string.format(String,String,String,String)", "warn(str)", "Context.put(String,str)", "string.format(String,*)"], "useStart": [495, 694, 895, 964, 1114], "useEnd": [511, 883, 911, 992, 1257], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Paxle/Paxle/tree/master/bundles/GUI/src/main/java/org/paxle/gui/impl/servlets/BundleView.java", "rawCode": "    public File getSaveLocation(final String fileName, final boolean overrideOlderVersion)\n        throws IOException {\n      File file = new File(dir, fileName);\n      if (!file.exists()) return file;\n\n      if (replace) {\n        if (oldBundle == null) {\n          final String msg =\n              String.format(\n                  \"Targetfile '%s' already exists but the corresponding bundle cannot be found, deleting file...\",\n                  file.getCanonicalFile().toString());\n          logger.warn(msg);\n        } else if (compareVersions(oldVersion, newVersion) < 0) {\n          // TODO: remove .jar-file only if the new one is really newer\n          final String msg =\n              String.format(\n                  \"Version of uploaded bundle is smaller than the version of the installed bundle '%s' (old: %s, new: %s)\",\n                  oldName, oldVersion, newVersion);\n          logger.warn(msg);\n          if (!overrideOlderVersion) {\n            context.put(\"errorMsg\", msg);\n            return null;\n          }\n        }\n\n        if (!file.delete()) {\n          String errorMsg =\n              String.format(\n                  \"Targetfile '%s' already exists and cannot be deleted.\",\n                  file.getCanonicalFile().toString());\n          logger.warn(errorMsg);\n          context.put(\"errorMsg\", errorMsg);\n          return null;\n        }\n        return file;\n\n      } else {\n        final int idx = fileName.lastIndexOf('.');\n        final String name =\n            ((idx == -1)\n                ? fileName + \"_\" + System.currentTimeMillis()\n                : fileName.substring(0, idx)\n                    + \"_\"\n                    + System.currentTimeMillis()\n                    + fileName.substring(idx));\n        return new File(dir, name);\n      }\n    }\n"}, {"dataset": "stringFormat", "exampleID": 8370, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 3082, "focalAPIEnd": 3119, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addTag(String,str)", "string.format(String,*)"], "useStart": [3064, 3556], "useEnd": [3120, 3597], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/burto/mkgmap/tree/master/src/uk/me/parabola/mkgmap/reader/dem/DEM.java", "rawCode": "  public static void createContours(LoadableMapDataSource mapData, EnhancedProperties config) {\n    Area bounds = mapData.getBounds();\n\n    double minLat = Utils.toDegrees(bounds.getMinLat());\n    double minLon = Utils.toDegrees(bounds.getMinLong());\n    double maxLat = Utils.toDegrees(bounds.getMaxLat());\n    double maxLon = Utils.toDegrees(bounds.getMaxLong());\n\n    System.out.printf(\"bounds: %f %f %f %f\\n\", minLat, minLon, maxLat, maxLon);\n    DEM data;\n    String demType = config.getProperty(\"dem-type\", \"SRTM\");\n\n    String dataPath;\n    Class demClass;\n    try {\n      if (demType.equals(\"ASTER\")) {\n        dataPath = config.getProperty(\"dem-path\", \"ASTER\");\n        demClass = Class.forName(\"uk.me.parabola.mkgmap.reader.dem.optional.GeoTiffDEM$ASTER\");\n      } else if (demType.equals(\"CGIAR\")) {\n        dataPath = config.getProperty(\"dem-path\", \"CGIAR\");\n        demClass = Class.forName(\"uk.me.parabola.mkgmap.reader.dem.optional.GeoTiffDEM$CGIAR\");\n      } else {\n        dataPath = config.getProperty(\"dem-path\", \"SRTM\");\n        demClass = Class.forName(\"uk.me.parabola.mkgmap.reader.dem.HGTDEM\");\n      }\n      java.lang.reflect.Constructor<DEM> constructor =\n          demClass.getConstructor(String.class, Double.TYPE, Double.TYPE, Double.TYPE, Double.TYPE);\n      data = constructor.newInstance(dataPath, minLat, minLon, maxLat, maxLon);\n    } catch (Exception ex) {\n      throw new RuntimeException(\"failed to create DEM\", ex);\n    }\n\n    Isolines lines = data.new Isolines(data, minLat, minLon, maxLat, maxLon);\n    int increment = config.getProperty(\"dem-increment\", 10);\n\n    double minHeight = lines.getMinHeight();\n    double maxHeight = lines.getMaxHeight();\n    int maxLevels = config.getProperty(\"dem-maxlevels\", 100);\n    while ((maxHeight - minHeight) / increment > maxLevels) increment *= 2;\n\n    String loc = config.getProperty(\"style-file\");\n    if (loc == null) loc = config.getProperty(\"map-features\");\n    String name = config.getProperty(\"style\");\n\n    if (loc == null && name == null) name = \"default\";\n\n    LoadableMapDataSource dest = mapData;\n    if (config.getProperty(\"dem-separate-img\", false)) {\n      dest = new DEMMapDataSource(mapData, config);\n    }\n\n    OsmConverter converter;\n    try {\n      Style style = new StyleImpl(loc, name);\n      style.applyOptionOverride(config);\n\n      converter = new StyledConverter(style, ((MapperBasedMapDataSource) dest).getMapper(), config);\n    } catch (SyntaxException e) {\n      System.err.println(\"Error in style: \" + e.getMessage());\n      throw new ExitException(\"Could not open style \" + name);\n    } catch (FileNotFoundException e) {\n      String name1 = (name != null) ? name : loc;\n      throw new ExitException(\"Could not open style \" + name1);\n    }\n\n    for (int level = 0; level < maxHeight; level += increment) {\n      if (level < minHeight) continue;\n\n      // create isolines\n      lines.addLevel(level);\n\n      for (Isolines.Isoline line : lines.isolines) {\n        Way way = new Way(id--, line.points);\n        way.addTag(\"contour\", \"elevation\");\n        way.addTag(\"ele\", String.format(\"%d\", (int) line.level));\n        converter.convertWay(way);\n      }\n      lines.isolines.clear();\n    }\n\n    if (config.getProperty(\"dem-separate-img\", false)) {\n      MapBuilder builder = new MapBuilder();\n      builder.config(config);\n\n      FileSystemParam params = new FileSystemParam();\n      params.setMapDescription(\"contour lines\");\n      long mapName = Integer.valueOf(config.getProperty(\"mapname\", \"63240000\"));\n      try {\n        String mapname = String.format(\"%08d\", mapName + 10000000);\n        Map map = Map.createMap(mapname, params, mapname);\n        builder.makeMap(map, dest);\n        map.close();\n      } catch (Exception ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8371, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 331, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [307], "useEnd": [436], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jstroem/TAPY/tree/master/lib/jython-2.7-b1/src/org/python/modules/itertools/countDerived.java", "rawCode": "  public PyObject __index__() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__index__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger || res instanceof PyLong) {\n        return res;\n      }\n      throw Py.TypeError(\n          String.format(\n              \"__index__ returned non-(int,long) (type %s)\", res.getType().fastGetName()));\n    }\n    return super.__index__();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8372, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 38, "tryExpressionEnd": 42, "tryBlockStart": 38, "tryBlockEnd": 531, "catchExpressionStart": 463, "catchExpressionEnd": 483, "catchBlockStart": 463, "catchBlockEnd": 531, "exceptionHandlingCallStart": [491], "exceptionHandlingCallEnd": [510], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 340, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["debug(Logger,str,*)"], "useStart": [314], "useEnd": [403], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sinjax/trendminer-java/tree/master/tools/TwitterPreprocessingWebService/src/main/java/org/openimaj/webservice/twitter/PreProcessTask.java", "rawCode": "  @Override\n  public void run() {\n    try {\n      logger.debug(\"Processing all requests\");\n      List<USMFStatus> list =\n          StreamTwitterStatusList.readUSMF(\n              fi.getInputStream(), options.getInputClass().type(), \"UTF-8\");\n      long seen = 0;\n      for (USMFStatus usmfStatus : list) {\n        LoggerUtils.debug(logger, String.format(\"Processing item: %d\", seen++), seen % 1000 == 0);\n        processStatus(usmfStatus, options);\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      return;\n    }\n    options.close();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8373, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 52, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/stratosphere/stratosphere-sopremo/tree/master/sopremo/sopremo-query/src/main/java/eu/stratosphere/sopremo/query/PackageManager.java", "rawCode": "  @Override\n  public String toString() {\n    return String.format(\"Package manager with packages %s\", this.packages);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8374, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 2959, "focalAPIEnd": 3127, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setMessage(str)"], "useStart": [2920], "useEnd": [3128], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/xwiki-contrib/retired/tree/master/xwiki-offline-gsoc/xeclipse/src/plugins/org.xwiki.eclipse.ui/src/main/java/org/xwiki/eclipse/ui/editors/PageEditor.java", "rawCode": "  public void handleCoreEvent(CoreEvent event) {\n    final PageEditorInput input = (PageEditorInput) getEditorInput();\n    XWikiEclipsePage page = input.getPage();\n    String targetPageId = null;\n    DataManager dataManager = null;\n    if (event.getSource() instanceof DataManager) {\n      dataManager = (DataManager) event.getSource();\n    }\n\n    boolean updatePage = false;\n\n    switch (event.getType()) {\n      case OBJECT_STORED:\n        /*\n         * When objects are modified, the version number of the page is incremented. Here, we retrieve the\n         * current page. If the version numbers are not equal and the editor is not dirty then it means that an\n         * object of the page has been modified, but not the page content. So we basically update the page\n         * content. If the editor is dirty then we do not do nothing.\n         */\n        XWikiEclipseObject object = (XWikiEclipseObject) event.getData();\n        targetPageId = object.getData().getPageId();\n\n        updatePage =\n            page.getDataManager().equals(dataManager)\n                && page.getData().getId().equals(targetPageId);\n\n        break;\n\n      case OBJECT_REMOVED:\n        targetPageId = ((XWikiEclipseObject) event.getData()).getPageSummary().getId();\n\n        updatePage =\n            page.getDataManager().equals(dataManager)\n                && page.getData().getId().equals(targetPageId);\n\n        break;\n\n      case DATA_MANAGER_CONNECTED:\n        updatePage = page.getDataManager().equals(dataManager);\n\n        break;\n\n      case REFRESH:\n        Object data = event.getData();\n        if (data instanceof DataManager\n            || data instanceof XWikiEclipsePageSummary\n            || data instanceof XWikiEclipseSpaceSummary) {\n\n          // Check if this refresh event was triggered for the page managed by this editor\n          if (data instanceof XWikiEclipsePageSummary) {\n            XWikiEclipsePageSummary refreshedPageSummary = (XWikiEclipsePageSummary) data;\n            if (!refreshedPageSummary\n                .getXWikiEclipseId()\n                .equals(page.getSummary().getXWikiEclipseId())) return;\n          } else if (data instanceof DataManager) {\n            DataManager aDataManager = (DataManager) data;\n\n            if (!aDataManager.equals(page.getDataManager())) return;\n          } else if (data instanceof XWikiEclipseSpaceSummary) {\n            XWikiEclipseSpaceSummary space = (XWikiEclipseSpaceSummary) data;\n\n            if (!space.getDataManager().equals(page.getDataManager())\n                || !space.getData().getKey().equals(page.getData().getSpace())) return;\n          }\n\n          // Check if the user was in the middle of something.\n          if (isDirty()) {\n            MessageBox messageBox =\n                new MessageBox(\n                    Display.getCurrent().getShells()[0],\n                    SWT.YES | SWT.NO | SWT.CANCEL | SWT.ICON_QUESTION);\n            messageBox.setMessage(\n                String.format(\n                    \"Refreshing the page %s will overwrite your current work on it. Do you wish to save it?\",\n                    page.getData().getId()));\n            messageBox.setText(\"Save work\");\n            this.setFocus();\n\n            int result = messageBox.open();\n            if (result == SWT.YES) {\n              this.doSave(null);\n\n              // let the conflict resolution solve any conflict if it is the case.\n              return;\n            } else if (result == SWT.CANCEL) {\n              return;\n            }\n\n            try {\n              page.getDataManager().clearPageStatus(page.getData().getId());\n            } catch (Exception ex) {\n              // ignore\n            }\n\n            // we are here if the user said no\n          }\n\n          doRevertToSaved();\n          updatePage = true;\n        }\n        break;\n\n      case PAGE_REMOVED:\n        XWikiEclipsePage aPage = (XWikiEclipsePage) event.getData();\n\n        if (aPage.getXWikiEclipseId().equals(page.getXWikiEclipseId())) {\n          // The page being edited has been deleted.\n          this.close(false);\n        }\n\n        break;\n\n      case SPACE_REMOVED:\n        XWikiEclipseSpaceSummary aSpace = (XWikiEclipseSpaceSummary) event.getData();\n\n        if (aSpace.getDataManager().equals(page.getDataManager())\n            && aSpace.getData().getKey().equals(page.getData().getSpace())) {\n          // The space that the page being edited belonged to has been deleted.\n          this.close(false);\n        }\n\n        break;\n\n      case DATA_MANAGER_UNREGISTERED:\n        DataManager aDataManager = (DataManager) event.getData();\n        if (aDataManager.equals(page.getDataManager())) {\n          // The connection that the page being edited belonged to has been deleted.\n          this.close(false);\n        }\n\n        break;\n    }\n\n    try {\n      if (updatePage) {\n        if (!isDirty()) {\n          final XWikiEclipsePage newPage = page.getDataManager().getPage(page.getData().getId());\n\n          if (page.getData().getVersion() != newPage.getData().getVersion()) {\n            /*\n             * If we are here then the editor is not dirty and the page versions differ. So we update the\n             * page being edited. This may happen when an object associated to a page is stored or when\n             * pages are synchronized when a data manager is connected.\n             */\n            final ISourceViewer sourceViewer = getSourceViewer();\n            if (sourceViewer != null) {\n              Display.getDefault()\n                  .syncExec(\n                      new Runnable() {\n                        public void run() {\n                          int caretOffset = sourceViewer.getTextWidget().getCaretOffset();\n                          int topPixel = sourceViewer.getTextWidget().getTopPixel();\n                          try {\n                            doSetInput(new PageEditorInput(newPage, input.isReadOnly()));\n                          } catch (CoreException e) {\n                            CoreLog.logError(\"Error while handling XWiki Eclipse event\", e);\n                          }\n                          sourceViewer.getTextWidget().setCaretOffset(caretOffset);\n                          sourceViewer.getTextWidget().setTopPixel(topPixel);\n                          updateInfo();\n                        }\n                      });\n            }\n          }\n        }\n      }\n    } catch (XWikiEclipseException e) {\n      CoreLog.logError(\"Error while handling XWiki Eclipse event\", e);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8375, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 557, "focalAPIEnd": 624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [544], "useEnd": [625], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jstroem/TAPY/tree/master/lib/jython-2.7-b1/src/org/python/antlr/op/OrDerived.java", "rawCode": "  public int hashCode() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__hash__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger) {\n        return ((PyInteger) res).getValue();\n      } else if (res instanceof PyLong) {\n        return ((PyLong) res).getValue().intValue();\n      }\n      throw Py.TypeError(\"__hash__ should return a int\");\n    }\n    if (self_type.lookup(\"__eq__\") != null || self_type.lookup(\"__cmp__\") != null) {\n      throw Py.TypeError(String.format(\"unhashable type: '%.200s'\", getType().fastGetName()));\n    }\n    return super.hashCode();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8376, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["args.getClass()"], "configurationStart": [133], "configurationEnd": [149], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 336, "focalAPIEnd": 364, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [324], "useEnd": [365], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/forcedotcom/java-sdk/tree/master/jpa/src/main/java/com/force/sdk/jpa/query/ForceQueryUtils.java", "rawCode": "  private void appendValue(ExpressionBuilderHelper h, Object value) {\n    Class clazz = null;\n    if (value != null) {\n      clazz = value.getClass();\n    }\n    if (clazz == String.class\n        || clazz == Character.class\n        || clazz == URL.class\n        || clazz == Byte.class\n        || clazz == byte.class) {\n      h.sb.append(String.format(\"'%s'\", value));\n    } else if (clazz == Date.class || value instanceof Calendar) {\n      if (clazz == Date.class) {\n        h.sb.append(SOQLDateFormatUtil.getSOQLFormat((Date) value));\n      } else {\n        h.sb.append(SOQLDateFormatUtil.getSOQLFormat((Calendar) value));\n      }\n    } else {\n      h.sb.append(value);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8377, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1187, "focalAPIEnd": 1232, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["print(str)"], "useStart": [1178], "useEnd": [1233], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/InI4/ingress-hacktrack/tree/master/src/Phase1.java", "rawCode": "  /** Base way to attack KNIME or something common to the data. Please add columns as required! */\n  public void dumpCSV(String fName, String sep, HackFilter... filters) throws IOException {\n    LinkedHashSet<String> patterns = new LinkedHashSet<>();\n    LinkedHashSet<String> rares = new LinkedHashSet<>();\n    outerloop1:\n    for (HackResult hackResult : allHacks) {\n      for (HackFilter fi : filters) if (!fi.accept(hackResult)) continue outerloop1;\n      String pat = smallPattern(hackResult);\n      patterns.add(pat);\n      List<String> items = rareItems(hackResult);\n      rares.addAll(items);\n    }\n    PrintWriter pw = new PrintWriter(new FileWriter(new File(fName)));\n    pw.print(\"# \");\n    for (HackFilter f : filters) pw.print(\" \" + f.toString());\n    pw.println();\n    pw.print(\"# \");\n    for (String s : patterns) pw.print(\" \" + s);\n    pw.print(\" \");\n    for (String s : rares) pw.print(\" \" + s);\n    pw.println();\n    outerloop2:\n    for (HackResult hackResult : allHacks) {\n      for (HackFilter fi : filters) if (!fi.accept(hackResult)) continue outerloop2;\n      String pat = smallPattern(hackResult);\n      List<String> items = rareItems(hackResult);\n      pw.print(String.format(\"%10.0f\", hackResult.timestamp));\n      for (String s : patterns) {\n        pw.print(sep);\n        pw.print(pat.equals(s) ? 1 : 0);\n      }\n      pw.print(\" \");\n      for (String s : rares) {\n        pw.print(sep);\n        pw.print(items.contains(s) ? 1 : 0);\n      }\n      pw.println();\n    }\n    pw.close();\n    L.info(\"Finished <\" + fName + \">.\");\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8378, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 564, "focalAPIEnd": 596, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)", "string.format(String,*)"], "useStart": [554, 661], "useEnd": [597, 699], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cscott/SDR/tree/master/src/net/cscott/sdr/util/StringEscapeUtils.java", "rawCode": "  /** Return the parameter as a properly-escaped Java string literal. */\n  public static String escapeJava(String s) {\n    StringBuilder sb = new StringBuilder();\n    // sb.append('\"');\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if (c < 128 && Character.isJavaIdentifierPart(c)) sb.append(c); // ASCII and alphanumeric-ish\n      else if (c == ' ' || c == '/' || c == '-' || c == '+')\n        sb.append(c); // some specific safe characters\n      else if (c < 256) // this handles quotes, slashes, and other nasties\n      sb.append(String.format(\"\\\\%03o\", (int) c));\n      else // make the world safe for unicode\n      sb.append(String.format(\"\\\\\" + \"u%04x\", (int) c));\n    }\n    // sb.append('\"');\n    return sb.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8379, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 407, "focalAPIEnd": 461, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setFilter(str)"], "useStart": [391], "useEnd": [462], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sodas2002/m-gov/tree/master/M-GOV_gae/src/server/UpdateStatus.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  @GET\n  @Produces(MediaType.TEXT_PLAIN)\n  public static String go() {\n\n    PersistenceManager pm = PMF.get().getPersistenceManager();\n    ArrayList<String> sno_list = new ArrayList<String>();\n\n    for (int i = 0; i < StaticValue.statusv.length; i++) {\n      if (StaticValue.statusv[i] == 0) {\n        Query query = pm.newQuery(GAENodeSimple.class);\n        query.setFilter(String.format(\"status == '%s'\", StaticValue.status[i]));\n        query.execute();\n        List<GAENodeSimple> results = (List<GAENodeSimple>) query.execute();\n        for (GAENodeSimple ob : results) {\n          sno_list.add(ob.getKey());\n        }\n      }\n    }\n    Queue queue = QueueFactory.getQueue(\"subscription-queue\");\n    for (String sno : sno_list) {\n      queue.add(TaskOptions.Builder.url(\"/czone/parse_id/\" + sno).method(Method.GET));\n    }\n\n    return sno_list.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8380, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 547, "focalAPIEnd": 579, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scrosby/fastsig/tree/master/src.bench/edu/rice/batchsig/bench/CreateAndQueueMessagesForSigningThread.java", "rawCode": "  @Override\n  public void run() {\n    long initTime = System.currentTimeMillis(); // When we started.\n    long insertedNum = 0;\n    while (!isShuttingdown()) {\n      long now = System.currentTimeMillis();\n      long deltaTime = now - initTime; // Ok. In DELTA ms, we should have inserted..\n      long targetNum = deltaTime * rate / 1000; // this many messages.\n      if (insertedNum < targetNum) {\n        while (insertedNum < targetNum) {\n          insertedNum++;\n          queue.add(\n              new OutgoingMessage(\n                  output, String.format(\"Msg:%d\", seqno++).getBytes(), new Object(), DEFAULT_USER));\n          checkQueueOverflow();\n        }\n      } else {\n        // (insertNum+1)/rate*1000 (but we rearrange for better roundoff\n        long wakeupTime = initTime + (insertedNum + 1) * 1000 / rate;\n        // Running ahead. Lets sleep for a little bit.\n        long sleepTime = wakeupTime - now;\n        if (sleepTime > 0)\n          try {\n            Thread.sleep(sleepTime);\n          } catch (InterruptedException e) {\n          }\n      }\n    }\n    queue.finish();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8381, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["string.format(String)"], "configurationStart": [1027], "configurationEnd": [1081], "guardCondition": "args>1", "guardType": "IF {", "guardExpressionStart": 1401, "guardExpressionEnd": 1437, "guardBlockStart": 1401, "guardBlockEnd": 1840, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1527, "focalAPIEnd": 1607, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new RuntimeException(str)", "string.valueOf(*)"], "useStart": [1495, 1772], "useEnd": [1608, 1832], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mhl/libbio-formats-java/tree/master/components/ome-xml/src/ome/xml/model/Project.java", "rawCode": "  /**\n   * Updates Project recursively from an XML DOM tree. <b>NOTE:</b> No properties are removed, only\n   * added or updated.\n   *\n   * @param element Root of the XML DOM tree to construct a model object graph from.\n   * @param model Handler for the OME model which keeps track of instances and references seen\n   *     during object population.\n   * @throws EnumerationException If there is an error instantiating an enumeration during model\n   *     object creation.\n   */\n  public void update(Element element, OMEModel model) throws EnumerationException {\n    super.update(element, model);\n    String tagName = element.getTagName();\n    if (!\"Project\".equals(tagName)) {\n      LOGGER.debug(\"Expecting node name of Project got {}\", tagName);\n    }\n    if (element.hasAttribute(\"Name\")) {\n      // Attribute property Name\n      setName(String.valueOf(element.getAttribute(\"Name\")));\n    }\n    if (!element.hasAttribute(\"ID\") && getID() == null) {\n      // TODO: Should be its own exception\n      throw new RuntimeException(String.format(\"Project missing required ID property.\"));\n    }\n    if (element.hasAttribute(\"ID\")) {\n      // ID property\n      setID(String.valueOf(element.getAttribute(\"ID\")));\n      // Adding this model object to the model handler\n      model.addModelObject(getID(), this);\n    }\n    List<Element> Description_nodeList = getChildrenByTagName(element, \"Description\");\n    if (Description_nodeList.size() > 1) {\n      // TODO: Should be its own Exception\n      throw new RuntimeException(\n          String.format(\"Description node list size %d != 1\", Description_nodeList.size()));\n    } else if (Description_nodeList.size() != 0) {\n      // Element property Description which is not complex (has no\n      // sub-elements)\n      setDescription(String.valueOf(Description_nodeList.get(0).getTextContent()));\n    }\n    // Element reference ExperimenterRef\n    List<Element> ExperimenterRef_nodeList = getChildrenByTagName(element, \"ExperimenterRef\");\n    for (Element ExperimenterRef_element : ExperimenterRef_nodeList) {\n      ExperimenterRef experimenter_reference = new ExperimenterRef();\n      experimenter_reference.setID(ExperimenterRef_element.getAttribute(\"ID\"));\n      model.addReference(this, experimenter_reference);\n    }\n    // Element reference GroupRef\n    List<Element> GroupRef_nodeList = getChildrenByTagName(element, \"GroupRef\");\n    for (Element GroupRef_element : GroupRef_nodeList) {\n      GroupRef group_reference = new GroupRef();\n      group_reference.setID(GroupRef_element.getAttribute(\"ID\"));\n      model.addReference(this, group_reference);\n    }\n    // Element reference AnnotationRef\n    List<Element> AnnotationRef_nodeList = getChildrenByTagName(element, \"AnnotationRef\");\n    for (Element AnnotationRef_element : AnnotationRef_nodeList) {\n      AnnotationRef annotationList_reference = new AnnotationRef();\n      annotationList_reference.setID(AnnotationRef_element.getAttribute(\"ID\"));\n      model.addReference(this, annotationList_reference);\n    }\n    // *** IGNORING *** Skipped back reference Dataset_BackReference\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8382, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 557, "focalAPIEnd": 624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [544], "useEnd": [625], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jstroem/TAPY/tree/master/lib/jython-2.7-b1/src/org/python/antlr/op/IsDerived.java", "rawCode": "  public int hashCode() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__hash__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger) {\n        return ((PyInteger) res).getValue();\n      } else if (res instanceof PyLong) {\n        return ((PyLong) res).getValue().intValue();\n      }\n      throw Py.TypeError(\"__hash__ should return a int\");\n    }\n    if (self_type.lookup(\"__eq__\") != null || self_type.lookup(\"__cmp__\") != null) {\n      throw Py.TypeError(String.format(\"unhashable type: '%.200s'\", getType().fastGetName()));\n    }\n    return super.hashCode();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8383, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 2095, "focalAPIEnd": 2140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/retornaz/contiki-cc253x/tree/master/tools/cooja/apps/mrm/java/se/sics/mrm/ChannelModel.java", "rawCode": "  /**\n   * Calculates probability that a receiver at given destination receives a packet from a\n   * transmitter at given source. This method uses current parameters such as transmitted power,\n   * obstacles, overall system loss, packet size etc.\n   *\n   * <p>TODO Packet size TODO External interference/Background noise\n   *\n   * @param sourceX Source position X\n   * @param sourceY Source position Y\n   * @param destX Destination position X\n   * @param destY Destination position Y\n   * @param interference Current interference at destination (dBm)\n   * @return [Probability of reception, signal strength at destination]\n   */\n  public double[] getProbability(TxPair txPair, double interference) {\n    double[] snrData = getSINR(txPair, interference);\n    double snrMean = snrData[0];\n    double snrVariance = snrData[1];\n    double signalStrength = snrData[2];\n    double threshold = getParameterDoubleValue(Parameter.snr_threshold);\n    double rxSensitivity = getParameterDoubleValue(Parameter.rx_sensitivity);\n\n    // Check signal strength against receiver sensitivity and interference\n    if (rxSensitivity > signalStrength - snrMean\n        && threshold < rxSensitivity + snrMean - signalStrength) {\n      if (logMode) {\n        logInfo.append(\"Weak signal: increasing threshold\\n\");\n      }\n\n      // Keeping snr variance but increasing theshold to sensitivity\n      threshold = rxSensitivity + snrMean - signalStrength;\n    }\n\n    // If not random varianble, probability is either 1 or 0\n    if (snrVariance == 0) {\n      return new double[] {threshold - snrMean > 0 ? 0 : 1, signalStrength};\n    }\n    double snrStdDev = Math.sqrt(snrVariance);\n\n    // \"Missing\" signal strength in order to receive packet is probability that\n    // random variable with mean snrMean and standard deviance snrStdDev is above\n    // current threshold.\n\n    // (Using error algorithm method, much faster than taylor approximation!)\n    double probReception = 1 - GaussianWrapper.cdfErrorAlgo(threshold, snrMean, snrStdDev);\n\n    if (logMode) {\n      logInfo.append(\n          \"Reception probability: \" + String.format(\"%1.1f%%\", 100 * probReception) + \"\\n\");\n    }\n\n    // Returns probabilities\n    return new double[] {probReception, signalStrength};\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8384, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 98, "tryExpressionEnd": 102, "tryBlockStart": 98, "tryBlockEnd": 749, "catchExpressionStart": 695, "catchExpressionEnd": 715, "catchBlockStart": 695, "catchBlockEnd": 749, "exceptionHandlingCallStart": [723], "exceptionHandlingCallEnd": [742], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 128, "focalAPIEnd": 164, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addSection(str,*)"], "useStart": [589], "useEnd": [642], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nirvash/svgEpub/tree/master/svgEpub/src/com/github/nirvash/svgEpub/Epub.java", "rawCode": "  private int createReflowPage(Book book, int page, String template, ReflowPage reflowPage) {\n    try {\n      String pageName = String.format(\"page_%04d\", page - 1);\n      String pageFile = pageName + \".xhtml\";\n\n      String css =\n          \"html { writing-mode: vertical-rl;-webkit-writing-mode: vertical-rl;-epub-writing-mode: vertical-rl;}\";\n      css += reflowPage.getCss();\n      String html = template.replaceAll(\"%%CSS%%\", css);\n      html = html.replaceAll(\"%%BODY%%\", reflowPage.getBody());\n\n      ByteArrayInputStream bi = new ByteArrayInputStream(html.getBytes(\"UTF-8\"));\n      book.addSection(pageName, new Resource(bi, pageFile));\n      bi.close();\n\n      reflowPage.clear();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    return page;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8385, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 56, "focalAPIEnd": 98, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spring-projects/eclipse-integration-commons/tree/master/org.springsource.ide.eclipse.commons.frameworks.test.util/src/org/springsource/ide/eclipse/commons/frameworks/test/util/SWTBotUtils.java", "rawCode": "  private static String screenshotNumber() {\n    return String.format(\"%03d_\", screenshotNumber++);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8386, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 862, "focalAPIEnd": 891, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.append(str)"], "useStart": [851], "useEnd": [892], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DevBoost/EMFText/tree/master/Core/Commons/org.emftext.commons.antlr3_4_0/src/org/antlr/runtime3_4_0/debug/Profiler.java", "rawCode": "  public String getDecisionStatsDump() {\n    StringBuffer buf = new StringBuffer();\n    buf.append(\"location\");\n    buf.append(DATA_SEP);\n    buf.append(\"n\");\n    buf.append(DATA_SEP);\n    buf.append(\"avgk\");\n    buf.append(DATA_SEP);\n    buf.append(\"maxk\");\n    buf.append(DATA_SEP);\n    buf.append(\"synpred\");\n    buf.append(DATA_SEP);\n    buf.append(\"sempred\");\n    buf.append(DATA_SEP);\n    buf.append(\"canbacktrack\");\n    buf.append(\"\\n\");\n    for (String fileName : decisions.keySet()) {\n      for (int d : decisions.keySet(fileName)) {\n        DecisionDescriptor s = decisions.get(fileName, d);\n        buf.append(s.decision);\n        buf.append(\"@\");\n        buf.append(locationDescription(s.fileName, s.ruleName, s.line, s.pos)); // decision number\n        buf.append(DATA_SEP);\n        buf.append(s.n);\n        buf.append(DATA_SEP);\n        buf.append(String.format(\"%.2f\", s.avgk));\n        buf.append(DATA_SEP);\n        buf.append(s.maxk);\n        buf.append(DATA_SEP);\n        buf.append(s.numBacktrackOccurrences);\n        buf.append(DATA_SEP);\n        buf.append(s.numSemPredEvals);\n        buf.append(DATA_SEP);\n        buf.append(s.couldBacktrack ? \"1\" : \"0\");\n        buf.append(newline);\n      }\n    }\n    return buf.toString();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8387, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 302, "focalAPIEnd": 375, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["String.replace(String,str)"], "useStart": [390], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epronk/fitnesse/tree/master/src/fitnesse/responders/run/slimResponder/TableScanner.java", "rawCode": "  private static void replaceProcessedLiterals(TextWidget textWidget) {\n    String text = textWidget.getRawText();\n    Matcher matcher = LiteralWidget.pattern.matcher(text);\n    while (matcher.find()) {\n      int literalNumber = Integer.parseInt(matcher.group(1));\n      String replacement =\n          String.format(\"!-%s-!\", textWidget.getParent().getLiteral(literalNumber));\n      text = text.replace(matcher.group(), replacement);\n      matcher = LiteralWidget.pattern.matcher(text);\n    }\n    textWidget.setText(text);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8388, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 770, "focalAPIEnd": 824, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nickman/jzab/tree/master/agent/src/main/java/org/helios/jzab/agent/net/active/ActiveHost.java", "rawCode": "  /**\n   * Removes all marked active host checks\n   *\n   * @return The number of active host checks removed\n   */\n  protected int clearMarkedChecks() {\n    Set<ActiveHostCheck> checksToRemove = new HashSet<ActiveHostCheck>();\n    for (ActiveHostCheck ac : hostChecks.values()) {\n      if (ac.marked) {\n        checksToRemove.add(ac);\n      }\n    }\n    for (ActiveHostCheck ac : checksToRemove) {\n      hostChecks.remove(ac.itemKey);\n      scheduleBucket.removeItem(ac.delay, ac);\n      if (log.isDebugEnabled()) removedCheckNames.add(ac.itemKey);\n      sendNotification(\n          new Notification(\n              \"host.activecheck.removed\",\n              objectName,\n              notificationSequence.incrementAndGet(),\n              this.stateTimestamp,\n              String.format(\"Removed Active Check [%s]\", ac.itemKey)));\n    }\n    return checksToRemove.size();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8389, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 624, "focalAPIEnd": 675, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(*,str)"], "useStart": [597], "useEnd": [676], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/junichi11/netbeans-vagrant-plugin/tree/master/vagrant/src/org/netbeans/modules/vagrant/ui/RunCommandPanel.java", "rawCode": "  private void addSubcommands(String command, int selectedIndex)\n      throws InvalidVagrantExecutableException {\n    String[] split = command.split(\" \"); // NOI18N\n    ArrayList<String> subcommands = new ArrayList<>();\n    subcommands.addAll(Arrays.asList(split));\n    Vagrant vagrant = Vagrant.getDefault();\n    List<String> subcommandList = vagrant.getSubcommandListLines(subcommands);\n    if (!subcommandList.isEmpty()) {\n      DefaultListModel<String> model = getListModel();\n      for (String subcommand : subcommandList) {\n        subcommand = command + \" \" + subcommand; // NOI18N\n        model.add(++selectedIndex, String.format(\"<html><b>%s</b></html>\", subcommand)); // NOI18N\n        commands.add(selectedIndex, subcommand);\n      }\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8390, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1019, "focalAPIEnd": 1082, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["format(String,int,str,*)"], "useStart": [1110], "useEnd": [1269], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jodaiber/dbpedia-spotlight-db/tree/master/core/src/main/java/org/dbpedia/spotlight/spot/SpotterWithSelector.java", "rawCode": "  /**\n   * Applies the base spotter specified, then applies the selector on the generated spots. Before\n   * applying the spotter it uses the abstract method buildText to create a Text object. As a\n   * result, it will first POS tag the sentence if this is a TaggedSpotSelector,\n   *\n   * @param text\n   * @return\n   * @throws SpottingException\n   */\n  public List<SurfaceFormOccurrence> extract(Text text) throws SpottingException {\n    LOG.debug(\n        String.format(\n            \"Spotting with spotter %s and selector %s.\", spotter.getName(), spotSelector));\n\n    Text textObject = buildText(text);\n\n    List<SurfaceFormOccurrence> spottedSurfaceForms = spotter.extract(textObject);\n\n    if (spotSelector != null) {\n      List<SurfaceFormOccurrence> selectedSpots = spotSelector.select(spottedSurfaceForms);\n\n      LOG.info(\"Selecting candidates...\");\n      int previousSize = spottedSurfaceForms.size();\n      int count = previousSize - selectedSpots.size();\n      String percent =\n          (count == 0) ? \"0\" : String.format(\"%1.0f\", (((double) count) / previousSize) * 100);\n      LOG.info(\n          String.format(\n              \"Removed %s (%s percent) spots using spotSelector %s\",\n              count, percent, this.spotSelector.getClass().getSimpleName()));\n\n      return selectedSpots;\n\n    } else {\n      return spottedSurfaceForms;\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8391, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 53, "focalAPIEnd": 85, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vedina/RESTNet/tree/master/restnet-c/src/main/java/net/idea/restnet/c/reporters/CatalogHTMLReporter.java", "rawCode": "  public String renderItemTitle(T item) {\n    return String.format(\"%d.\", record + 1);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8392, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 415, "focalAPIEnd": 520, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["error(str,*)"], "useStart": [386], "useEnd": [534], "hasFinally": 1, "cleanUpCall": ["removeActiveWorker(IWorker<Data>)"], "finallyExpressionStart": 568, "finallyExpressionEnd": 576, "finallyBlockStart": 568, "finallyBlockEnd": 640, "cleanUpCallStart": [602], "cleanUpCallEnd": [633], "url": "https://github.com/Paxle/Paxle/tree/master/bundles/Core/src/main/java/org/paxle/core/threading/impl/Pool.java", "rawCode": "  /**\n   * @see IPool#invalidateWorker(IWorker)\n   * @see GenericObjectPool#invalidateObject(Object)\n   */\n  public void invalidateWorker(IWorker<Data> worker) {\n    try {\n      if (this.closed) return;\n\n      if (this.isPooledWorker(worker)) {\n        super.invalidateObject(worker);\n      } else {\n        this.factory.destroyObject(worker);\n      }\n    } catch (Exception e) {\n      this.logger.error(\n          String.format(\n              \"Unexpected '%s' while invalidating worker thread.\", e.getClass().getName()),\n          e);\n      worker.terminate();\n    } finally {\n      if (!this.closed) this.removeActiveWorker(worker);\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8393, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 75, "focalAPIEnd": 110, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/StuartMacKay/transform-swf/tree/master/src/main/java/com/flagstone/transform/image/JPEGEncodingTable.java", "rawCode": "  /** {@inheritDoc} */\n  @Override\n  public String toString() {\n    return String.format(FORMAT, table.length);\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8394, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 557, "focalAPIEnd": 624, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TypeError(str)"], "useStart": [544], "useEnd": [625], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/purplefox/jython/tree/master/src/org/python/antlr/ast/InteractiveDerived.java", "rawCode": "  public int hashCode() {\n    PyType self_type = getType();\n    PyObject impl = self_type.lookup(\"__hash__\");\n    if (impl != null) {\n      PyObject res = impl.__get__(this, self_type).__call__();\n      if (res instanceof PyInteger) {\n        return ((PyInteger) res).getValue();\n      } else if (res instanceof PyLong) {\n        return ((PyLong) res).getValue().intValue();\n      }\n      throw Py.TypeError(\"__hash__ should return a int\");\n    }\n    if (self_type.lookup(\"__eq__\") != null || self_type.lookup(\"__cmp__\") != null) {\n      throw Py.TypeError(String.format(\"unhashable type: '%.200s'\", getType().fastGetName()));\n    }\n    return super.hashCode();\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8395, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 1748, "focalAPIEnd": 1885, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["add(str)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)", "string.format(String,*)"], "useStart": [1720, 1990, 2232, 2496, 2738, 2979], "useEnd": [1886, 2127, 2376, 2633, 2875, 3123], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gkoch/PawnsNRoses/tree/master/src/sf/pnr/base/Utils.java", "rawCode": "  public static Set<String> checkBoard(final Board board) {\n    final Set<String> problems = new HashSet<String>();\n    final int state = board.getState();\n    final int[] squares = board.getBoard();\n    if ((state & CASTLING_WHITE_KINGSIDE) > 0) {\n      if (squares[H[0]] != ROOK) {\n        problems.add(\"King-side castling for white is allowed, but no white rook on h1\");\n      }\n      if (squares[E[0]] != KING) {\n        problems.add(\"King-side castling for white is allowed, but white king is not on e1\");\n      }\n    }\n    if ((state & CASTLING_WHITE_QUEENSIDE) > 0) {\n      if (squares[A[0]] != ROOK) {\n        problems.add(\"Queen-side castling for white is allowed, but no white rook on a1\");\n      }\n      if (squares[E[0]] != KING) {\n        problems.add(\"King-side castling for white is allowed, but white king is not on e1\");\n      }\n    }\n    if ((state & CASTLING_BLACK_KINGSIDE) > 0) {\n      if (squares[H[7]] != -ROOK) {\n        problems.add(\"King-side castling for white is allowed, but no black rook on h8\");\n      }\n      if (squares[E[7]] != -KING) {\n        problems.add(\"King-side castling for white is allowed, but black king is not on e8\");\n      }\n    }\n    if ((state & CASTLING_BLACK_QUEENSIDE) > 0) {\n      if (squares[A[7]] != -ROOK) {\n        problems.add(\"Queen-side castling for white is allowed, but no black rook on a8\");\n      }\n      if (squares[E[7]] != -KING) {\n        problems.add(\"King-side castling for white is allowed, but black king is not on e8\");\n      }\n    }\n    if ((state & EN_PASSANT) > 0) {\n      final int file = ((state & EN_PASSANT) >> SHIFT_EN_PASSANT) - 1;\n      if ((state & WHITE_TO_MOVE) > 0) {\n        if (squares[getPosition(file, 6)] != EMPTY) {\n          problems.add(\n              String.format(\n                  \"En passant file '%1$s' is defined, but '%1$s7' is not empty\",\n                  StringUtils.FILE[file]));\n        }\n        if (squares[getPosition(file, 5)] != EMPTY) {\n          problems.add(\n              String.format(\n                  \"En passant file '%1$s' is defined, but '%1$s6' is not empty\",\n                  StringUtils.FILE[file]));\n        }\n        if (squares[getPosition(file, 4)] != -PAWN) {\n          problems.add(\n              String.format(\n                  \"En passant file '%1$s' is defined, but no black pawn is on '%1$s6'\",\n                  StringUtils.FILE[file]));\n        }\n      } else {\n        if (squares[getPosition(file, 1)] != EMPTY) {\n          problems.add(\n              String.format(\n                  \"En passant file '%1$s' is defined, but '%1$s2' is not empty\",\n                  StringUtils.FILE[file]));\n        }\n        if (squares[getPosition(file, 2)] != EMPTY) {\n          problems.add(\n              String.format(\n                  \"En passant file '%1$s' is defined, but '%1$s3' is not empty\",\n                  StringUtils.FILE[file]));\n        }\n        if (squares[getPosition(file, 3)] != PAWN) {\n          problems.add(\n              String.format(\n                  \"En passant file '%1$s' is defined, but no black pawn is on '%1$s4'\",\n                  StringUtils.FILE[file]));\n        }\n      }\n    }\n    return problems;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8396, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 305, "focalAPIEnd": 384, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SINTEF-9012/oryx-neffics/tree/master/editor/server/src/de/hpi/yawl/YEdge.java", "rawCode": "  /**\n   * Serializes the edge to XML.\n   *\n   * @param splitType The split type of the originating YAWL node.\n   * @return String The string to export for this YAWLDecompositon.\n   */\n  public String writeToYAWL(SplitJoinType splitType) {\n    String s = \"\";\n\n    s += \"\\t\\t\\t\\t\\t<flowsInto>\\n\";\n    s += String.format(\"\\t\\t\\t\\t\\t\\t<nextElementRef id=\\\"%s\\\"/>\\n\", getTarget().getID());\n\n    if (predicate != null && predicate.length() > 0) s = writePredicateToYAWL(splitType, s);\n\n    if (isDefault()) s += \"\\t\\t\\t\\t\\t\\t<isDefaultFlow/>\\n\";\n\n    s += \"\\t\\t\\t\\t\\t</flowsInto>\\n\";\n    return s;\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8397, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 730, "focalAPIEnd": 793, "followUpCheck": "str != null", "checkType": "IF", "followUpCheckExpressionStart": 2206, "followUpCheckExpressionEnd": 2224, "followUpCheckBlockStart": 2206, "followUpCheckBlockEnd": 2269, "use": ["string.format(String,*,*)", "string.format(String,*,*)", "string.format(String,*)", "string.format(String,*)", "StringBuilder.append(str)"], "useStart": [1029, 1258, 1979, 2102, 2233], "useEnd": [1174, 1343, 2056, 2153, 2262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/sdk/tree/master/sdkmanager/libs/sdklib/src/com/android/sdklib/internal/repository/packages/SystemImagePackage.java", "rawCode": "  /**\n   * Creates a {@link BrokenPackage} representing a system image that failed to load with the\n   * regular {@link SdkManager} workflow.\n   *\n   * @param abiDir The SDK/system-images/android-N/abi folder\n   * @param props The properties located in {@code abiDir} or null if not found.\n   * @return A new {@link BrokenPackage} that represents this installed package.\n   */\n  public static Package createBroken(File abiDir, Properties props) {\n    AndroidVersion version = null;\n    String abiType = abiDir.getName();\n    String error = null;\n\n    // Try to load the android version & ABI from the sources.props.\n    // If we don't find them, it would explain why this package is broken.\n    if (props == null) {\n      error = String.format(\"Missing file %1$s\", SdkConstants.FN_SOURCE_PROP);\n    } else {\n      try {\n        version = new AndroidVersion(props);\n\n        String abi = props.getProperty(PkgProps.SYS_IMG_ABI);\n        if (abi != null) {\n          abiType = abi;\n        } else {\n          error =\n              String.format(\n                  \"Invalid file %1$s: Missing property %2$s\",\n                  SdkConstants.FN_SOURCE_PROP, PkgProps.SYS_IMG_ABI);\n        }\n      } catch (AndroidVersionException e) {\n        error =\n            String.format(\"Invalid file %1$s: %2$s\", SdkConstants.FN_SOURCE_PROP, e.getMessage());\n      }\n    }\n\n    if (version == null) {\n      try {\n        // Try to parse the first number out of the platform folder name.\n        String platform = abiDir.getParentFile().getName();\n        platform = platform.replaceAll(\"[^0-9]+\", \" \").trim(); // $NON-NLS-1$ //$NON-NLS-2$\n        int pos = platform.indexOf(' ');\n        if (pos >= 0) {\n          platform = platform.substring(0, pos);\n        }\n        int apiLevel = Integer.parseInt(platform);\n        version = new AndroidVersion(apiLevel, null /*codename*/);\n      } catch (Exception ignore) {\n      }\n    }\n\n    StringBuilder sb =\n        new StringBuilder(\n            String.format(\"Broken %1$s System Image\", getAbiDisplayNameInternal(abiType)));\n    if (version != null) {\n      sb.append(String.format(\", API %1$s\", version.getApiString()));\n    }\n\n    String shortDesc = sb.toString();\n\n    if (error != null) {\n      sb.append('\\n').append(error);\n    }\n\n    String longDesc = sb.toString();\n\n    return new BrokenPackage(\n        props,\n        shortDesc,\n        longDesc,\n        IMinApiLevelDependency.MIN_API_LEVEL_NOT_SPECIFIED,\n        version == null ? IExactApiLevelDependency.API_LEVEL_INVALID : version.getApiLevel(),\n        abiDir.getAbsolutePath());\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8398, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 399, "focalAPIEnd": 476, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new TemplateException(str)"], "useStart": [364], "useEnd": [477], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/astamuse/asta4d/tree/master/asta4d-core/src/main/java/com/astamuse/asta4d/template/Template.java", "rawCode": "  private void processExtension() throws TemplateException, TemplateNotFoundException {\n    Element extension = doc.select(ExtNodeConstants.EXTENSION_NODE_TAG_SELECTOR).first();\n    if (extension != null) {\n      String parentPath = extension.attr(ExtNodeConstants.EXTENSION_NODE_ATTR_PARENT);\n      if (parentPath == null || parentPath.isEmpty()) {\n        throw new TemplateException(\n            String.format(\"You must specify the parent of an extension (%s).\", this.path));\n      }\n      Configuration conf = Configuration.getConfiguration();\n      Template parent = conf.getTemplateResolver().findTemplate(parentPath);\n      Document parentDoc = parent.getDocumentClone();\n      TemplateUtil.mergeBlock(parentDoc, extension);\n\n      doc = parentDoc;\n    }\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8399, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "args!=16&&args!=0", "guardType": "IF {", "guardExpressionStart": 71, "guardExpressionEnd": 125, "guardBlockStart": 71, "guardBlockEnd": 248, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 170, "focalAPIEnd": 246, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new MarshalException(str)"], "useStart": [138], "useEnd": [247], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/godares79/CS848-Project/tree/master/apache-cassandra-1.1.6-src/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java", "rawCode": "  public void validate(ByteBuffer bytes) throws MarshalException {\n    if (bytes.remaining() != 16 && bytes.remaining() != 0)\n      throw new MarshalException(\n          String.format(\"LexicalUUID should be 16 or 0 bytes (%d)\", bytes.remaining()));\n    // not sure what the version should be for this.\n  }\n"}, {"dataset": "stringFormat", "exampleID": 8400, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "str = string.format(format,args)", "focalAPIStart": 387, "focalAPIEnd": 451, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setText(str)"], "useStart": [360], "useEnd": [452], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OliverHoffmann/PleoCommand/tree/master/src/pleocmd/itfc/gui/ErrorDialog.java", "rawCode": "  protected void showLog(final Log log) {\n    final String caller = log.getCaller().toString();\n    if (cfgSuppressed.contains(caller)) return;\n    MessageCount mc = messageCount.get(caller);\n    if (mc == null) {\n      mc = new MessageCount();\n      messageCount.put(caller, mc);\n    }\n    if (mc.inc() > 5) {\n      mc.getMostRecent().setVisible(true);\n      mc.getMostRecent().setText(String.format(\"%d more from the same caller\", mc.getCount() - 5));\n      resizeDialog();\n      return;\n    }\n\n    final JLabel lblT;\n    final JLabel lblC;\n    final JLabel lblS;\n    final JTextArea lblM;\n    final JCheckBox cbS;\n    if (errorCount > 0) layErrorPanel.addWholeLine(new JSeparator(), false);\n    layErrorPanel.add(lblT = new JLabel(log.getFormattedTime()), false);\n    layErrorPanel.add(lblC = new JLabel(log.getFormattedCaller()), false);\n    layErrorPanel.addSpacer();\n    layErrorPanel.add(cbS = new JCheckBox(\"Suppress\"), false);\n    layErrorPanel.newLine();\n    layErrorPanel.addWholeLine(lblM = new JTextArea(log.getMsg()), false);\n    layErrorPanel.addWholeLine(lblS = new JLabel(\"\"), false);\n\n    lblM.setLineWrap(true);\n    lblM.setWrapStyleWord(true);\n    lblM.setEditable(false);\n    lblM.setOpaque(false);\n    lblM.setForeground(Color.RED);\n    lblS.setVisible(false);\n\n    map.put(cbS, caller);\n    mc.setMostRecent(lblS);\n    cbS.addActionListener(\n        new ActionListener() {\n          @Override\n          public void actionPerformed(final ActionEvent e) {\n            final boolean sel = cbS.isSelected();\n            lblT.setForeground(sel ? Color.GRAY : cbS.getForeground());\n            lblC.setForeground(sel ? Color.GRAY : cbS.getForeground());\n            lblM.setForeground(sel ? Color.GRAY : Color.RED);\n            lblS.setForeground(sel ? Color.GRAY : cbS.getForeground());\n            try {\n              changeSuppress(caller, sel);\n            } catch (final ConfigurationException exc) {\n              Log.error(exc);\n            }\n          }\n        });\n\n    ++errorCount;\n    resizeDialog();\n  }\n"}]