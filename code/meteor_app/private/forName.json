[{"dataset": "forName", "exampleID": 1101, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["println(String)", "new DatabaseException()"], "tryExpressionStart": 187, "tryExpressionEnd": 191, "tryBlockStart": 187, "tryBlockEnd": 758, "catchExpressionStart": 609, "catchExpressionEnd": 643, "catchBlockStart": 609, "catchBlockEnd": 758, "exceptionHandlingCallStart": [651, 728], "exceptionHandlingCallEnd": [714, 751], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 273, "focalAPIEnd": 298, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fudge22/cs340hyperweb/tree/master/Phase1_src/database/Database.java", "rawCode": "  /**\n   * Load the SQLite database driver\n   *\n   * @throws ServerException\n   */\n  public static void initialize() throws DatabaseException {\n    // Load the SQLite database driver\n    try {\n      // register the driver\n      String driverName = \"org.sqlite.JDBC\";\n      Class.forName(driverName);\n      File currentDir = new File(\"./\");\n      String dbName = currentDir.getAbsolutePath() + \"/database/indexer_server.sqlite\";\n      String jdbcDef = \"jdbc:sqlite\";\n      dbUrl = jdbcDef + \":\" + dbName;\n      // which will produce a legitimate Url for SqlLite JDBC :\n      // jdbc:sqlite:myDatabase.db\n    } catch (ClassNotFoundException e1) {\n      System.out.println(\"Database driver class could not be found.\");\n      throw new DatabaseException();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1102, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 599, "focalAPIEnd": 647, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nasa/coeci-cms-mpsp/tree/master/pesp-was8.5-ext-srcs/tests/src/tests/java/gov/medicaid/screening/services/StatsTrackerServiceTest.java", "rawCode": "  /**\n   * Setup test class.\n   *\n   * @throws Exception to JUnit\n   */\n  @Before\n  public void setUp() throws Exception {\n    Properties props = new Properties();\n    props.setProperty(\"java.naming.provider.url\", getProperty(\"java.naming.provider.url\"));\n    props.setProperty(\"java.naming.factory.url.pkgs\", getProperty(\"java.naming.factory.url.pkgs\"));\n    props.setProperty(\"java.naming.factory.initial\", getProperty(\"java.naming.factory.initial\"));\n\n    InitialContext ctx = new InitialContext(props);\n    service = (StatsTrackerService) ctx.lookup(getProperty(\"StatsTrackerServiceJNDI\"));\n    Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n    clearStatsAndLogs();\n  }\n"}, {"dataset": "forName", "exampleID": 1103, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": [], "tryExpressionStart": 663, "tryExpressionEnd": 667, "tryBlockStart": 663, "tryBlockEnd": 842, "catchExpressionStart": 792, "catchExpressionEnd": 812, "catchBlockStart": 792, "catchBlockEnd": 842, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 697, "focalAPIEnd": 729, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [757], "useEnd": [782], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scs/uclinux/tree/master/lib/classpath/javax/imageio/ImageIO.java", "rawCode": "  /**\n   * Retrieve an image reader corresponding to an image writer, or null if writer is not registered\n   * or if no corresponding reader is registered.\n   *\n   * @param writer a registered image writer\n   * @return an image reader corresponding to writer, or null\n   * @exception IllegalArgumentException if writer is null\n   */\n  public static ImageReader getImageReader(ImageWriter writer) {\n    if (writer == null) throw new IllegalArgumentException(\"null argument\");\n\n    ImageWriterSpi spi = writer.getOriginatingProvider();\n\n    String[] readerSpiNames = spi.getImageReaderSpiNames();\n\n    ImageReader r = null;\n\n    if (readerSpiNames != null) {\n      try {\n        Class readerClass = Class.forName(readerSpiNames[0]);\n        r = (ImageReader) readerClass.newInstance();\n      } catch (Exception e) {\n        return null;\n      }\n    }\n    return r;\n  }\n"}, {"dataset": "forName", "exampleID": 1104, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 63, "focalAPIEnd": 84, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Gruppe8DTU/Rejsekortet/tree/master/src/persistance/SQL_Connect.java", "rawCode": "  public ResultSet select(String query) throws Exception {\n    Class.forName(driver);\n    Connection connect = DriverManager.getConnection(database_url, username, password);\n    PreparedStatement stmt = connect.prepareStatement(query);\n    ResultSet result = stmt.executeQuery();\n    return result;\n  }\n"}, {"dataset": "forName", "exampleID": 1105, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 904, "catchExpressionStart": 825, "catchExpressionEnd": 845, "catchBlockStart": 825, "catchBlockEnd": 904, "exceptionHandlingCallStart": [853], "exceptionHandlingCallEnd": [897], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 214, "focalAPIEnd": 236, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getMethod(String,Class<?>[])", "Method.invoke(cls,Object[])"], "useStart": [603, 774], "useEnd": [643, 816], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shutterstock/tungsten-replicator/tree/master/commons/src/java/com/continuent/tungsten/commons/utils/SignalUtils.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      // Install diagnostic signal handler\n      DiagSignalHandler.install(\"SIGINT\");\n\n      // Get the passed application's class\n      Class<?> wrappedClass = Class.forName(args[0]);\n\n      // Setup application's input arguments\n      String wrappedArgs[] = new String[args.length - 1];\n      for (int i = 0; i < wrappedArgs.length; i++) {\n        wrappedArgs[i] = args[i + 1];\n      }\n\n      // Get the main method for the application\n      Class<?>[] argTypes = new Class[1];\n      argTypes[0] = wrappedArgs.getClass();\n      Method mainMethod = wrappedClass.getMethod(\"main\", argTypes);\n\n      // Invoke the application's main method\n      Object[] argValues = new Object[1];\n      argValues[0] = wrappedArgs;\n      mainMethod.invoke(wrappedClass, argValues);\n\n    } catch (Exception e) {\n      System.out.println(\"AppWrap exception \" + e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1106, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 102, "tryExpressionEnd": 106, "tryBlockStart": 102, "tryBlockEnd": 1079, "catchExpressionStart": 1010, "catchExpressionEnd": 1044, "catchBlockStart": 1010, "catchBlockEnd": 1079, "exceptionHandlingCallStart": [1052], "exceptionHandlingCallEnd": [1072], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 134, "focalAPIEnd": 307, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getConstructors()"], "useStart": [344], "useEnd": [363], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/duke-compsci308-spring2013/vooga/tree/master/src/vooga/towerdefense/gameeditor/gamemaker/editorscreens/subeditorscreens/ActionSection.java", "rawCode": "  /**\n   * returns the action as a string.\n   *\n   * @return\n   */\n  private String addAction() {\n    try {\n      Class c =\n          Class.forName(\n              myActionPath\n                  + \".\"\n                  + myActionsBox.getSelectedItem().toString()\n                  + FACTORY_INDICATOR_STRING);\n      Constructor[] constructors = c.getConstructors();\n      Annotation[][] annotations = constructors[0].getParameterAnnotations();\n      String display = myActionsBox.getSelectedItem().toString();\n      for (Annotation[] annotation : annotations) {\n        for (Annotation a : annotation) {\n          display +=\n              \" \"\n                  + JOptionPane.showInputDialog(\n                      \"Enter the \"\n                          + ((ActionAnnotation) a).name()\n                          + \" (\"\n                          + ((ActionAnnotation) a).value()\n                          + \")\"\n                          + \" for this action\");\n        }\n      }\n      return display + \"\\n\";\n    } catch (ClassNotFoundException e1) {\n      e1.printStackTrace();\n    }\n    return null;\n  }\n"}, {"dataset": "forName", "exampleID": 1107, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 122, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/deegree/deegree3/tree/master/deegree-core/deegree-connectionprovider-datasource/src/main/java/org/deegree/db/datasource/DataSourceInitializer.java", "rawCode": "  private Class<?> getClass(String javaClass) throws ClassNotFoundException {\n    if (classLoader == null) {\n      return Class.forName(javaClass);\n    }\n    return classLoader.loadClass(javaClass);\n  }\n"}, {"dataset": "forName", "exampleID": 1108, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 93, "tryExpressionEnd": 97, "tryBlockStart": 93, "tryBlockEnd": 627, "catchExpressionStart": 454, "catchExpressionEnd": 474, "catchBlockStart": 454, "catchBlockEnd": 627, "exceptionHandlingCallStart": [482], "exceptionHandlingCallEnd": [512], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 105, "focalAPIEnd": 135, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MathildeLemee/Hands_On_Ehcache/tree/master/src/main/java/org/terracotta/qa/TestDbServer.java", "rawCode": "  public static void main(String[] args) {\n\n    List<Wine> list = new ArrayList<Wine>();\n    try {\n      Class.forName(\"org.h2.Driver\");\n      Connection conn =\n          DriverManager.getConnection(\"jdbc:h2:tcp://localhost:8092/mem:db1\", \"sa\", \"\");\n      Statement s = conn.createStatement();\n      ResultSet rs = s.executeQuery(\"select * from PUBLIC.WINE\");\n      while (rs.next()) {\n        list.add(processRow(rs));\n      }\n      conn.close();\n    } catch (Exception e) {\n      e\n          .printStackTrace(); // To change body of catch statement use File | Settings | File\n                              // Templates.\n    }\n\n    for (Wine wine : list) {\n      System.out.println(\"Wine => \" + wine.toString());\n    }\n\n    /*\n    List<Wine> list = new ArrayList<Wine>();\n    Connection c = null;\n    String sql = \"select * from PUBLIC.WINE\";\n    // String sql = \"SELECT * FROM PUBLIC.WINE ORDER BY name\";\n    try {\n    c = ConnectionHelper.getH2Connection();\n    Statement s = c.createStatement();\n    ResultSet rs = s.executeQuery(sql);\n    while (rs.next()) {\n    list.add(processRow(rs));\n    }\n    } catch (SQLException e) {\n    e.printStackTrace();\n    throw new RuntimeException(e);\n    } finally {\n    ConnectionHelper.close(c);\n    }\n\n    for (Wine wine : list) {\n    System.out.println(\"Wine => \" + wine.toString());\n    }*/\n  }\n"}, {"dataset": "forName", "exampleID": 1109, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 493, "focalAPIEnd": 571, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [607], "useEnd": [622], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/scs/uclinux/tree/master/lib/classpath/javax/swing/UIManager.java", "rawCode": "  /**\n   * Set the current default look and feel using a class name.\n   *\n   * @param className the look and feel class name.\n   * @throws UnsupportedLookAndFeelException if the look and feel is not supported on the current\n   *     platform.\n   * @see LookAndFeel#isSupportedLookAndFeel()\n   */\n  public static void setLookAndFeel(String className)\n      throws ClassNotFoundException, InstantiationException, IllegalAccessException,\n          UnsupportedLookAndFeelException {\n    Class c = Class.forName(className, true, Thread.currentThread().getContextClassLoader());\n    LookAndFeel a = (LookAndFeel) c.newInstance(); // throws class-cast-exception\n    setLookAndFeel(a);\n  }\n"}, {"dataset": "forName", "exampleID": 1110, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 231, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/coderplay/h2-bitmap/tree/master/h2/src/test/org/h2/test/todo/TestDiskSpaceLeak.java", "rawCode": "  /**\n   * Run just this test.\n   *\n   * @param args ignored\n   */\n  public static void main(String... args) throws Exception {\n    System.setProperty(\"h2.lobInDatabase\", \"true\");\n    DeleteDbFiles.execute(\"data\", null, true);\n    Class.forName(\"org.h2.Driver\");\n    Connection conn;\n    long before = 0;\n    for (int i = 0; i < 10; i++) {\n      conn = DriverManager.getConnection(\"jdbc:h2:data/test\");\n      ResultSet rs;\n      rs = conn.createStatement().executeQuery(\"select count(*) from information_schema.lobs\");\n      rs.next();\n      System.out.println(\"lobs: \" + rs.getInt(1));\n      rs = conn.createStatement().executeQuery(\"select count(*) from information_schema.lob_map\");\n      rs.next();\n      System.out.println(\"lob_map: \" + rs.getInt(1));\n      rs = conn.createStatement().executeQuery(\"select count(*) from information_schema.lob_data\");\n      rs.next();\n      System.out.println(\"lob_data: \" + rs.getInt(1));\n      conn.close();\n      Recover.execute(\"data\", \"test\");\n      new File(\"data/test.h2.sql\").renameTo(new File(\"data/test.\" + i + \".sql\"));\n      conn = DriverManager.getConnection(\"jdbc:h2:data/test\");\n      // ((JdbcConnection) conn).setPowerOffCount(i);\n      ((JdbcConnection) conn).setPowerOffCount(28);\n      String last = \"connect\";\n      try {\n        conn.createStatement().execute(\"drop table test if exists\");\n        last = \"drop\";\n        conn.createStatement().execute(\"create table test(id identity, b blob)\");\n        last = \"create\";\n        conn.createStatement().execute(\"insert into test values(1, space(10000))\");\n        last = \"insert\";\n        conn.createStatement().execute(\"delete from test\");\n        last = \"delete\";\n        conn.createStatement().execute(\"insert into test values(1, space(10000))\");\n        last = \"insert2\";\n        conn.createStatement().execute(\"delete from test\");\n        last = \"delete2\";\n      } catch (SQLException e) {\n        // ignore\n      } finally {\n        JdbcUtils.closeSilently(conn);\n      }\n      long now = new File(\"data/test.h2.db\").length();\n      long diff = now - before;\n      before = now;\n      System.out.println(now + \" \" + diff + \" \" + i + \" \" + last);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1111, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 2532, "focalAPIEnd": 2567, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [2607], "useEnd": [2629], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fanhongtao/JDK/tree/master/src/java/rmi/server/RemoteObject.java", "rawCode": "  /**\n   * <code>readObject</code> for custom serialization.\n   *\n   * <p>This method reads this object's serialized form for this class as follows:\n   *\n   * <p>The <code>readUTF</code> method is invoked on <code>in</code> to read the external ref type\n   * name for the <code>RemoteRef</code> instance to be filled in to this object's <code>ref</code>\n   * field. If the string returned by <code>readUTF</code> has length zero, the <code>readObject\n   * </code> method is invoked on <code>in</code>, and than the value returned by <code>readObject\n   * </code> is cast to <code>RemoteRef</code> and this object's <code>ref</code> field is set to\n   * that value. Otherwise, this object's <code>ref</code> field is set to a <code>RemoteRef</code>\n   * instance that is created of an implementation-specific class corresponding to the external ref\n   * type name returned by <code>readUTF</code>, and then the <code>readExternal</code> method is\n   * invoked on this object's <code>ref</code> field.\n   *\n   * <p>If the external ref type name is <code>\"UnicastRef\"</code>, <code>\"UnicastServerRef\"</code>,\n   * <code>\"UnicastRef2\"</code>, <code>\"UnicastServerRef2\"</code>, or <code>\"ActivatableRef\"</code>,\n   * a corresponding implementation-specific class must be found, and its <code>readExternal</code>\n   * method must read the serial data for that external ref type name as specified to be written in\n   * the <b>serialData</b> documentation for this class. If the external ref type name is any other\n   * string (of non-zero length), a <code>ClassNotFoundException</code> will be thrown, unless the\n   * implementation provides an implementation-specific class corresponding to that external ref\n   * type name, in which case this object's <code>ref</code> field will be set to an instance of\n   * that implementation-specific class.\n   */\n  private void readObject(java.io.ObjectInputStream in)\n      throws java.io.IOException, java.lang.ClassNotFoundException {\n    String refClassName = in.readUTF();\n    if (refClassName == null || refClassName.length() == 0) {\n      /*\n       * No reference class name specified, so construct\n       * remote reference from its serialized form.\n       */\n      ref = (RemoteRef) in.readObject();\n    } else {\n      /*\n       * Built-in reference class specified, so delegate to\n       * internal reference class to initialize its fields from\n       * its external form.\n       */\n      String internalRefClassName = RemoteRef.packagePrefix + \".\" + refClassName;\n      Class refClass = Class.forName(internalRefClassName);\n      try {\n        ref = (RemoteRef) refClass.newInstance();\n\n        /*\n         * If this step fails, assume we found an internal\n         * class that is not meant to be a serializable ref\n         * type.\n         */\n      } catch (InstantiationException e) {\n        throw new ClassNotFoundException(internalRefClassName, e);\n      } catch (IllegalAccessException e) {\n        throw new ClassNotFoundException(internalRefClassName, e);\n      } catch (ClassCastException e) {\n        throw new ClassNotFoundException(internalRefClassName, e);\n      }\n      ref.readExternal(in);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1112, "initialization": ["String className = Element.getAttributeValue(String)"], "initializationStart": [857], "initializationEnd": [892], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new JMIException(*,String,*)"], "tryExpressionStart": 1052, "tryExpressionEnd": 1056, "tryBlockStart": 1052, "tryBlockEnd": 2421, "catchExpressionStart": 1567, "catchExpressionEnd": 1600, "catchBlockStart": 1567, "catchBlockEnd": 1766, "exceptionHandlingCallStart": [1614], "exceptionHandlingCallEnd": [1759], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(className==null)", "guardType": "IF {", "guardExpressionStart": 898, "guardExpressionEnd": 920, "guardBlockStart": 898, "guardBlockEnd": 1046, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 1245, "focalAPIEnd": 1269, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)", "cls.getDeclaredMethod(String,Class[])"], "useStart": [1325, 1290], "useEnd": [1358, 1359], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/social-computing/jmi-server/tree/master/jmi-server/src/main/java/com/socialcomputing/wps/server/plandictionary/WPSDictionary.java", "rawCode": "  public static WPSDictionary readObject(Element element) throws JMIException, JDOMException {\n\n    String dictionnaryName = element.getAttributeValue(\"name\");\n\n    WPSDictionary dico = new WPSDictionary(dictionnaryName);\n\n    dico.m_Description = element.getChildText(\"comment\");\n\n    // Connecteur d'entites\n    Element entities = element.getChild(\"entities\");\n\n    if (entities == null)\n      throw new JMIException(\n          JMIException.ORIGIN.DEFINITION, dico.m_Name + \" : No Entities Specified\");\n\n    entities = (org.jdom.Element) entities.getChildren().get(0);\n\n    // TODO : Do not throw JDOMExceptions !! They are specific to the JDOM Framework and\n    // shouldn't be thrown up\n    if (entities == null)\n      throw new JMIException(\n          JMIException.ORIGIN.DEFINITION, dico.m_Name + \" : No Entities entry found\");\n    String className = entities.getAttributeValue(\"class\");\n    if (className == null)\n      throw new JMIException(\n          JMIException.ORIGIN.DEFINITION, dico.m_Name + \" : No Entities class name specified\");\n\n    try {\n      // Use reflection to get a method named \"readObject\"\n      // with a parameter that has a jdom element type\n      // TODO : replace this by dependency injection\n      Class<?> cl = Class.forName(className);\n      Method met = cl.getDeclaredMethod(\"readObject\", Class.forName(\"org.jdom.Element\"));\n      met.setAccessible(true);\n\n      // Invoke the readObject method with the entities read in the XML dictionary file\n      dico.m_EntitiesConnector = (iEntityConnector) met.invoke(null, entities);\n    } catch (ClassNotFoundException e) {\n      throw new JMIException(\n          JMIException.ORIGIN.DEFINITION,\n          dico.m_Name + \" : Unknown Entities Class '\" + className + \"'\",\n          e);\n    } catch (IllegalAccessException e) {\n      throw new JMIException(\n          JMIException.ORIGIN.DEFINITION,\n          dico.m_Name + \" : Invalid Entities Class Access '\" + className + \"'\",\n          e);\n    } catch (NoSuchMethodException e) {\n      throw new JMIException(\n          JMIException.ORIGIN.DEFINITION,\n          dico.m_Name + \" : Unknown Entities Class Method 'readObject' in '\" + className + \"'\",\n          e);\n    } catch (InvocationTargetException e) {\n      throw new JMIException(\n          JMIException.ORIGIN.DEFINITION,\n          dico.m_Name + \" : Invalid Entities Class Method 'readObject' in '\" + className + \"'\",\n          e);\n    }\n\n    { // Global Env Properties\n      List<Element> lst = (List<Element>) element.getChildren(\"env-property\");\n      int size = lst.size();\n      for (int i = 0; i < size; ++i) {\n        org.jdom.Element elem = (org.jdom.Element) lst.get(i);\n        dico.m_EnvProperties.add(\n            new NameValuePair(elem.getAttributeValue(\"name\"), elem.getAttributeValue(\"value\")));\n      }\n    }\n\n    { // Filtering scheduling\n      org.jdom.Element schedule = element.getChild(\"filtering-scheduling\");\n      if (schedule != null) {\n        dico.m_FilteringSchedule.readObject(schedule);\n      }\n    }\n\n    { // Filtering Profiles\n      java.util.List lst = element.getChildren(\"filtering-profile\");\n      int size = lst.size();\n      for (int i = 0; i < size; ++i) {\n        FilteringProfile profile = FilteringProfile.readObject((org.jdom.Element) lst.get(i));\n        profile.checkIntegrity(dico.m_Name, dico.m_EntitiesConnector);\n        dico.m_FilteringProfiles.put(profile.m_Name, profile);\n      }\n    }\n    { // Affinity Reader Profiles\n      java.util.List lst = element.getChildren(\"affinity-reader-profile\");\n      int size = lst.size();\n      for (int i = 0; i < size; ++i) {\n        AffinityReaderProfile profile =\n            AffinityReaderProfile.readObject((org.jdom.Element) lst.get(i));\n        profile.checkIntegrity(dico.m_Name, dico.m_EntitiesConnector);\n        dico.m_AffinityReaderProfiles.put(profile.m_Name, profile);\n      }\n    }\n    { // Analysis Profiles\n      java.util.List lst = element.getChildren(\"analysis-profile\");\n      int size = lst.size();\n      for (int i = 0; i < size; ++i) {\n        AnalysisProfile profile = AnalysisProfile.readObject((org.jdom.Element) lst.get(i));\n        profile.checkIntegrity(dico.m_Name, dico.m_EntitiesConnector);\n        dico.m_AnalysisProfiles.put(profile.m_Name, profile);\n      }\n    }\n    { // Mod\\uFFFDles\n      java.util.List lst = element.getChildren(\"display-profile\");\n      int size = lst.size();\n      for (int i = 0; i < size; ++i) {\n        Model model = Model.readObject((org.jdom.Element) lst.get(i));\n        dico.m_Models.put(model.m_Name, model);\n      }\n    }\n    { // Segmentation\n      org.jdom.Element segmentation = element.getChild(\"segmentation\");\n      if (segmentation.getChild(\"filtering-segmentation\") != null) { // Filtering Segmentation\n        dico.m_FilteringMapper =\n            ClassifierMapper.readObject(segmentation.getChild(\"filtering-segmentation\"));\n        // V\\uFFFDrification\n        dico.m_FilteringMapper.checkIntegrityForFilteringProfiles(\n            dico.m_Name + \", Filtering Segmentation\", dico);\n      }\n\n      if (segmentation.getChild(\"affinity-reader-segmentation\")\n          != null) { // AffinityReader Segmentation\n        dico.m_AffinityReaderMapper =\n            AffinityReaderMapper.readObject(segmentation.getChild(\"affinity-reader-segmentation\"));\n        // V\\uFFFDrification\n        dico.m_AffinityReaderMapper.checkIntegrity(\n            dico.m_Name + \", Affinity Reader Segmentation\", dico);\n      }\n\n      // Analysis Segmentation\n      dico.m_AnalysisMapper =\n          ClassifierMapper.readObject(segmentation.getChild(\"analysis-segmentation\"));\n      // V\\uFFFDrification\n      dico.m_AnalysisMapper.checkIntegrityForAnalysisProfiles(\n          dico.m_Name + \", Analysis Segmentation\", dico);\n\n      // Model Segmentation\n      dico.m_AnalysisLanguageModelMapper =\n          ModelMapper.readObject(segmentation.getChild(\"display-segmentation\"));\n      // V\\uFFFDrification\n      dico.m_AnalysisLanguageModelMapper.checkIntegrity(\n          dico.m_Name + \", Display Profile Segmentation\", dico);\n    }\n\n    return dico;\n  }\n"}, {"dataset": "forName", "exampleID": 1113, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 91, "tryExpressionEnd": 95, "tryBlockStart": 91, "tryBlockEnd": 1424, "catchExpressionStart": 922, "catchExpressionEnd": 958, "catchBlockStart": 922, "catchBlockEnd": 1150, "exceptionHandlingCallStart": [966], "exceptionHandlingCallEnd": [1143], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 128, "focalAPIEnd": 171, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getConstructor(Class[])", "class.forName(String)", "cls.getDeclaredMethod(String,Class)"], "useStart": [252, 377, 473], "useEnd": [299, 428, 559], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nodebox/nodebox/tree/master/src/main/java/nodebox/client/OSXAdapter.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  public static void setHandler(OSXAdapter adapter) {\n    try {\n      Class applicationClass = Class.forName(\"com.apple.eawt.Application\");\n      if (macOSXApplication == null) {\n        macOSXApplication =\n            applicationClass.getConstructor((Class[]) null).newInstance((Object[]) null);\n      }\n      Class applicationListenerClass = Class.forName(\"com.apple.eawt.ApplicationListener\");\n      Method addListenerMethod =\n          applicationClass.getDeclaredMethod(\"addApplicationListener\", applicationListenerClass);\n      // Create a proxy object around this handler that can be reflectively added as an Apple\n      // ApplicationListener\n      Object osxAdapterProxy =\n          Proxy.newProxyInstance(\n              OSXAdapter.class.getClassLoader(), new Class[] {applicationListenerClass}, adapter);\n      addListenerMethod.invoke(macOSXApplication, osxAdapterProxy);\n    } catch (ClassNotFoundException cnfe) {\n      System.err.println(\n          \"This version of Mac OS X does not support the Apple EAWT. ApplicationEvent handling has been disabled (\"\n              + cnfe\n              + \")\");\n    } catch (\n        Exception\n            ex) { // Likely a NoSuchMethodException or an IllegalAccessException loading/invoking\n                  // eawt.Application methods\n      System.err.println(\"Mac OS X Adapter could not talk to EAWT:\");\n      ex.printStackTrace();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1114, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["getMessage()", "log(*,String,*)"], "tryExpressionStart": 271, "tryExpressionEnd": 275, "tryBlockStart": 271, "tryBlockEnd": 464, "catchExpressionStart": 328, "catchExpressionEnd": 348, "catchBlockStart": 328, "catchBlockEnd": 464, "exceptionHandlingCallStart": [423, 356], "exceptionHandlingCallEnd": [437, 438], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 291, "focalAPIEnd": 320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [488], "useEnd": [507], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/poc/bps/org.eclipse.bpel.validator/src/org/eclipse/bpel/validator/rules/Factory.java", "rawCode": "  @SuppressWarnings(\"nls\")\n  Validator createValidator(String nodeName) {\n\n    String name = Character.toUpperCase(nodeName.charAt(0)) + nodeName.substring(1);\n\n    String validatorClass = PACKAGE_NAME + \".\" + name + \"Validator\";\n\n    Object obj;\n    Class<?> clazz;\n    try {\n      clazz = Class.forName(validatorClass);\n    } catch (Throwable t) {\n      mLogger.log(Level.FINE, \"Validator not found in this factory {0}\", t.getMessage());\n      return null;\n    }\n\n    try {\n      obj = clazz.newInstance();\n    } catch (Throwable t) {\n      mLogger.log(Level.WARNING, \"Validator class cannot be created.\", t);\n      return null;\n    }\n\n    if (obj instanceof Validator) {\n      return (Validator) obj;\n    }\n    mLogger.log(Level.WARNING, \"Object is {0} is not a validator\", obj);\n    return null;\n  }\n"}, {"dataset": "forName", "exampleID": 1115, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 56, "focalAPIEnd": 80, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/djspiewak/activeobjects/tree/master/ActiveObjects/src/net/java/ao/db/ProxoolPoolProvider.java", "rawCode": "  public static boolean isAvailable() {\n    try {\n      Class.forName(CLASSNAME);\n    } catch (ClassNotFoundException e) {\n      return false;\n    }\n\n    return true;\n  }\n"}, {"dataset": "forName", "exampleID": 1116, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 495, "focalAPIEnd": 517, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["getType(cls)", "extract(cls)"], "useStart": [567, 624], "useEnd": [583, 640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/johdah/Weka/tree/master/src/main/java/weka/core/RevisionUtils.java", "rawCode": "  /**\n   * For testing only. The first parameter must be a classname of a class implementing the\n   * weka.core.RevisionHandler interface.\n   *\n   * @param args the commandline arguments\n   * @throws Exception if something goes wrong\n   */\n  public static void main(String[] args) throws Exception {\n    if (args.length != 1) {\n      System.err.println(\"\\nUsage: \" + RevisionUtils.class.getName() + \" <classname>\\n\");\n      System.exit(1);\n    }\n\n    RevisionHandler handler = (RevisionHandler) Class.forName(args[0]).newInstance();\n    System.out.println(\"Type: \" + getType(handler));\n    System.out.println(\"Revision: \" + extract(handler));\n  }\n"}, {"dataset": "forName", "exampleID": 1117, "initialization": ["String className = Element.getAttribute(String)"], "initializationStart": [572], "initializationEnd": [603], "hasTryCatch": 1, "exceptionType": "InstantiationException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 125, "tryExpressionEnd": 129, "tryBlockStart": 125, "tryBlockEnd": 1424, "catchExpressionStart": 1098, "catchExpressionEnd": 1131, "catchBlockStart": 1098, "catchBlockEnd": 1206, "exceptionHandlingCallStart": [1180], "exceptionHandlingCallEnd": [1199], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 640, "focalAPIEnd": 664, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.setReceiver(*)", "cls.setMethod(*)", "cls.setOperator(*)", "cls.setArgument(*)", "List<Condition>.add(cls)"], "useStart": [690, 782, 870, 962, 1054], "useEnd": [770, 858, 950, 1042, 1072], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.4/kernel-impl/src/main/java/org/sakaiproject/conditions/impl/ResourceReleaseRule.java", "rawCode": "  private List<Condition> reconstitutePredicates(Element element) {\n    List<Condition> rv = new ArrayList<Condition>();\n    try {\n      Condition aPredicate = null;\n      NodeList children = element.getChildNodes();\n      final int length = children.getLength();\n      for (int i = 0; i < length; i++) {\n        Node child = children.item(i);\n        if (child.getNodeType() != Node.ELEMENT_NODE) continue;\n        Element predicate = (Element) child;\n\n        // look for properties\n        if (predicate.getTagName().equals(\"predicate\")) {\n          String className = predicate.getAttribute(\"class\");\n          aPredicate = (Condition) Class.forName(className).newInstance();\n          ((BooleanExpression) aPredicate).setReceiver(predicate.getAttribute(\"receiver\"));\n          ((BooleanExpression) aPredicate).setMethod(predicate.getAttribute(\"method\"));\n          ((BooleanExpression) aPredicate).setOperator(predicate.getAttribute(\"operator\"));\n          ((BooleanExpression) aPredicate).setArgument(predicate.getAttribute(\"argument\"));\n          rv.add(aPredicate);\n        }\n      }\n    } catch (InstantiationException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    return rv;\n  }\n"}, {"dataset": "forName", "exampleID": 1118, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "println(String)", "getStackTrace()", "exit(int)"], "tryExpressionStart": 47, "tryExpressionEnd": 51, "tryBlockStart": 47, "tryBlockEnd": 1408, "catchExpressionStart": 1268, "catchExpressionEnd": 1288, "catchBlockStart": 1268, "catchBlockEnd": 1408, "exceptionHandlingCallStart": [1339, 1296, 1362, 1387], "exceptionHandlingCallEnd": [1353, 1354, 1379, 1401], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 59, "focalAPIEnd": 99, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mattibickel/csql/tree/master/test/jdbc/Connection/ConnTest15.java", "rawCode": "  public static void main(String[] args) {\n    try {\n      Class.forName(\"csql.jdbc.JdbcSqlDriver\");\n      Connection con =\n          DriverManager.getConnection(\n              \"jdbc:csql\",\n              \"wrongusertestxieliangiiiiiiiiiiisooooooooooooooooooooooooooooooooooooooooooooooooolllllllllllllllllllllllloooooooooooooooonnnnnnnnnnnnnnnnnnnnnggggggggggggggggggggg11111111111111111111111111222222222222222222222222222222233333333333333333333333333444444444444444444444444455555555555555555555555555555556666666666666666666666666666666667777777777777777777777777777777777788888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999999999999999xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiieeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeellllllllllllllllllllllllllllllllllllllllllllllllllllllliiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaannnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnggggggggggggggggggggggggggggggggggghhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaatttttttttttttttttttttttttttteeeeeeeeeeeeeeeeeeeeeeeeesssssssssssssssstttttttttttttttttttttttttttttttttttttttttttttt\",\n              \"manager\");\n    } catch (Exception e) {\n      System.out.println(\"Exception in Test: \" + e.getMessage());\n      e.getStackTrace();\n      System.exit(0);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1119, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 113, "tryExpressionEnd": 117, "tryBlockStart": 113, "tryBlockEnd": 616, "catchExpressionStart": 501, "catchExpressionEnd": 521, "catchBlockStart": 501, "catchBlockEnd": 616, "exceptionHandlingCallStart": [535], "exceptionHandlingCallEnd": [609], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 156, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getConstructor(Class[])"], "useStart": [391], "useEnd": [432], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/icefaces/tree/master/ace/component/src/org/icefaces/ace/component/fileentry/FileEntryResourceHandler.java", "rawCode": "  private static Object getPortletRequestWrapper(Object requestObject, Map map) {\n    Object wrapper = null;\n    try {\n      Class wrapperClass =\n          Class.forName(\"org.icefaces.ace.component.fileentry.FileUploadPortletRequestWrapper\");\n      Class paramClasses[] = new Class[2];\n      paramClasses[0] = Object.class;\n      paramClasses[1] = Map.class;\n      Constructor constructor = wrapperClass.getConstructor(paramClasses);\n      wrapper = constructor.newInstance(requestObject, map);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Problem getting FileUploadPortletRequestWrapper\", e);\n    }\n    return wrapper;\n  }\n"}, {"dataset": "forName", "exampleID": 1120, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 59, "tryExpressionEnd": 63, "tryBlockStart": 59, "tryBlockEnd": 207, "catchExpressionStart": 128, "catchExpressionEnd": 162, "catchBlockStart": 128, "catchBlockEnd": 207, "exceptionHandlingCallStart": [176], "exceptionHandlingCallEnd": [200], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 90, "focalAPIEnd": 120, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/infoScoop/infoscoop/tree/master/src/migration/java/org/infoscoop/batch/migration/v1300to1400/ImportTask.java", "rawCode": "  public void setBeanFactory(String workerClassName) {\n    try {\n      this.workerClass = Class.forName(workerClassName);\n    } catch (ClassNotFoundException ex) {\n      throw new RuntimeException(ex);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1121, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 109, "focalAPIEnd": 138, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getAnnotation(Class<? extends Annotation>)", "new CommandRef(cls,Command)", "new CommandRef(cls)"], "useStart": [497, 557, 597], "useEnd": [531, 581, 618], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SiteView/NEWECC9.2/tree/master/org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/CommandCatalog.java", "rawCode": "  private void load(final String cn) {\n    final Class<? extends TextBuiltin> clazz;\n    try {\n      clazz = Class.forName(cn, false, ldr).asSubclass(TextBuiltin.class);\n    } catch (ClassNotFoundException notBuiltin) {\n      // Doesn't exist, even though the service entry is present.\n      //\n      return;\n    } catch (ClassCastException notBuiltin) {\n      // Isn't really a builtin, even though its listed as such.\n      //\n      return;\n    }\n\n    final CommandRef cr;\n    final Command a = clazz.getAnnotation(Command.class);\n    if (a != null) cr = new CommandRef(clazz, a);\n    else cr = new CommandRef(clazz);\n\n    commands.put(cr.getName(), cr);\n  }\n"}, {"dataset": "forName", "exampleID": 1122, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["toString()", "new IOException(*)"], "tryExpressionStart": 70, "tryExpressionEnd": 74, "tryBlockStart": 70, "tryBlockEnd": 851, "catchExpressionStart": 777, "catchExpressionEnd": 797, "catchBlockStart": 777, "catchBlockEnd": 851, "exceptionHandlingCallStart": [829, 813], "exceptionHandlingCallEnd": [841, 842], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 107, "focalAPIEnd": 132, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [195], "useEnd": [220], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/LucidDB/luciddb/tree/master/farrago/src/org/eigenbase/test/concurrent/ConcurrentTestCommandScript.java", "rawCode": "    private void plugin(String pluginName) throws IOException {\n      try {\n        Class<?> pluginClass = Class.forName(pluginName);\n        ConcurrentTestPlugin plugin = (ConcurrentTestPlugin) pluginClass.newInstance();\n        plugins.add(plugin);\n        addExtraCommands(plugin.getSupportedThreadCommands(), THREAD_STATE);\n        addExtraCommands(plugin.getSupportedThreadCommands(), REPEAT_STATE);\n        for (String commandName : plugin.getSupportedThreadCommands()) {\n          pluginForCommand.put(commandName, plugin);\n        }\n        addExtraCommands(plugin.getSupportedPreSetupCommands(), PRE_SETUP_STATE);\n        for (String commandName : plugin.getSupportedPreSetupCommands()) {\n          preSetupPluginForCommand.put(commandName, plugin);\n        }\n      } catch (Exception e) {\n        throw new IOException(e.toString());\n      }\n    }\n"}, {"dataset": "forName", "exampleID": 1123, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["showMessageDialog(*,String)"], "tryExpressionStart": 137, "tryExpressionEnd": 141, "tryBlockStart": 137, "tryBlockEnd": 509, "catchExpressionStart": 264, "catchExpressionEnd": 297, "catchBlockStart": 264, "catchBlockEnd": 374, "exceptionHandlingCallStart": [305], "exceptionHandlingCallEnd": [367], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 149, "focalAPIEnd": 174, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/askpt/LAPR4/tree/master/src/csheets/ext/database/core/DerbyConnection.java", "rawCode": "  @Override\n  public void createConnection(String url, String user, String pass)\n      throws ClassNotFoundException, SQLException {\n    try {\n      Class.forName(driverPath);\n      connection = DriverManager.getConnection(url + \";create=true\", user, pass);\n    } catch (ClassNotFoundException e) {\n      JOptionPane.showMessageDialog(null, \"Error: class not found!\");\n    } catch (SQLException e) {\n      JOptionPane.showMessageDialog(null, \"Error: connection to database!\");\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1124, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 1132, "focalAPIEnd": 1197, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)", "class.forName(String)", "cls.getMethod(String,Class[])", "cls.newInstance()"], "useStart": [1220, 1325, 1421, 1560], "useEnd": [1270, 1382, 1461, 1577], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/release-3-1-0b/src/lib/com/izforge/izpack/installer/GUIInstaller.java", "rawCode": "  /**\n   * Loads the suitable L&F.\n   *\n   * @exception Exception Description of the Exception\n   */\n  private void loadLookAndFeel() throws Exception {\n    if (this.installdata.kind.equalsIgnoreCase(\"standard\")\n        || this.installdata.kind.equalsIgnoreCase(\"web\")) {\n      if (getClass().getResourceAsStream(\"/res/useNativeLAF\") != null) {\n        String nlaf = UIManager.getSystemLookAndFeelClassName();\n        UIManager.setLookAndFeel(nlaf);\n      }\n      if (UIManager.getLookAndFeel() instanceof MetalLookAndFeel) {\n        // We simply put our nice theme\n        MetalLookAndFeel.setCurrentTheme(new IzPackMetalTheme());\n        ButtonFactory.useHighlightButtons();\n        this.installdata.buttonsHColor = new Color(182, 182, 204);\n      }\n      lnf = \"swing\";\n    } else if (this.installdata.kind.equalsIgnoreCase(\"standard-kunststoff\")\n        || this.installdata.kind.equalsIgnoreCase(\"web-kunststoff\")) {\n      ButtonFactory.useHighlightButtons();\n      // We change the highlight color for the buttons\n      this.installdata.buttonsHColor = new Color(255, 255, 255);\n\n      // Some reflection ...\n      Class laf = Class.forName(\"com.incors.plaf.kunststoff.KunststoffLookAndFeel\");\n      Class mtheme = Class.forName(\"javax.swing.plaf.metal.MetalTheme\");\n      Class[] params = {mtheme};\n      Class theme = Class.forName(\"com.izforge.izpack.gui.IzPackKMetalTheme\");\n      Method setCurrentThemeMethod = laf.getMethod(\"setCurrentTheme\", params);\n\n      // We invoke and place Kunststoff as our L&F\n      LookAndFeel kunststoff = (LookAndFeel) laf.newInstance();\n      MetalTheme ktheme = (MetalTheme) theme.newInstance();\n      Object[] kparams = {ktheme};\n      UIManager.setLookAndFeel(kunststoff);\n      setCurrentThemeMethod.invoke(kunststoff, kparams);\n\n      lnf = \"kunststoff\";\n    }\n    ButtonFactory.useButtonIcons();\n  }\n"}, {"dataset": "forName", "exampleID": 1125, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 449, "focalAPIEnd": 509, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.3.0/src/lib/com/izforge/izpack/installer/InstallerFrame.java", "rawCode": "  /**\n   * Loads the panels.\n   *\n   * @throws Exception Description of the Exception\n   */\n  private void loadPanels() throws Exception {\n    // Initialisation\n    java.util.List<Panel> panelsOrder = installdata.panelsOrder;\n    int i;\n    int size = panelsOrder.size();\n    String className;\n    Class objectClass;\n    Constructor constructor;\n    Object object;\n    IzPanel panel;\n    Class[] paramsClasses = new Class[2];\n    paramsClasses[0] = Class.forName(\"com.izforge.izpack.installer.InstallerFrame\");\n    paramsClasses[1] = Class.forName(\"com.izforge.izpack.installer.InstallData\");\n    Object[] params = {this, installdata};\n\n    // We load each of them\n    int curVisPanelNumber = 0;\n    int lastVis = 0;\n    int count = 0;\n    for (i = 0; i < size; i++) {\n      // We add the panel\n      Panel p = panelsOrder.get(i);\n      if (!OsConstraint.oneMatchesCurrentSystem(p.osConstraints)) {\n        continue;\n      }\n      className = p.className;\n      String praefix = \"com.izforge.izpack.panels.\";\n      if (className.indexOf('.') > -1)\n      // Full qualified class name\n      {\n        praefix = \"\";\n      }\n      objectClass = Class.forName(praefix + className);\n      constructor = objectClass.getDeclaredConstructor(paramsClasses);\n      installdata.currentPanel = p; // A hack to use meta data in IzPanel constructor\n      // Do not call constructor of IzPanel or it's derived at an other place else\n      // metadata will be not set.\n      List<String> preConstgructionActions = p.getPreConstructionActions();\n      if (preConstgructionActions != null) {\n        for (int actionIndex = 0; actionIndex < preConstgructionActions.size(); actionIndex++) {\n          PanelAction action =\n              PanelActionFactory.createPanelAction(preConstgructionActions.get(actionIndex));\n          action.initialize(\n              p.getPanelActionConfiguration(preConstgructionActions.get(actionIndex)));\n          action.executeAction(AutomatedInstallData.getInstance(), null);\n        }\n      }\n      object = constructor.newInstance(params);\n      panel = (IzPanel) object;\n      String dataValidator = p.getValidator();\n      if (dataValidator != null) {\n        panel.setValidationService(DataValidatorFactory.createDataValidator(dataValidator));\n      }\n\n      panel.setHelps(p.getHelpsMap());\n\n      List<String> preActivateActions = p.getPreActivationActions();\n      if (preActivateActions != null) {\n        for (int actionIndex = 0; actionIndex < preActivateActions.size(); actionIndex++) {\n          String panelActionClass = preActivateActions.get(actionIndex);\n          PanelAction action = PanelActionFactory.createPanelAction(panelActionClass);\n          action.initialize(p.getPanelActionConfiguration(panelActionClass));\n          panel.addPreActivationAction(action);\n        }\n      }\n      List<String> preValidateActions = p.getPreValidationActions();\n      if (preValidateActions != null) {\n        for (int actionIndex = 0; actionIndex < preValidateActions.size(); actionIndex++) {\n          String panelActionClass = preValidateActions.get(actionIndex);\n          PanelAction action = PanelActionFactory.createPanelAction(panelActionClass);\n          action.initialize(p.getPanelActionConfiguration(panelActionClass));\n          panel.addPreValidationAction(action);\n        }\n      }\n      List<String> postValidateActions = p.getPostValidationActions();\n      if (postValidateActions != null) {\n        for (int actionIndex = 0; actionIndex < postValidateActions.size(); actionIndex++) {\n          String panelActionClass = postValidateActions.get(actionIndex);\n          PanelAction action = PanelActionFactory.createPanelAction(panelActionClass);\n          action.initialize(p.getPanelActionConfiguration(panelActionClass));\n          panel.addPostValidationAction(action);\n        }\n      }\n\n      installdata.panels.add(panel);\n      if (panel.isHidden()) {\n        visiblePanelMapping.add(count, -1);\n      } else {\n        visiblePanelMapping.add(count, curVisPanelNumber);\n        curVisPanelNumber++;\n        lastVis = count;\n      }\n      count++;\n      // We add the XML data panel root\n      IXMLElement panelRoot = new XMLElementImpl(className, installdata.xmlData);\n      // if set, we add the id as an attribute to the panelRoot\n      String panelId = p.getPanelid();\n      if (panelId != null) {\n        panelRoot.setAttribute(\"id\", panelId);\n      }\n      installdata.xmlData.addChild(panelRoot);\n    }\n    visiblePanelMapping.add(count, lastVis);\n  }\n"}, {"dataset": "forName", "exampleID": 1126, "initialization": ["ClassLoader loader = new TestLoader(boolean)"], "initializationStart": [94], "initializationEnd": [115], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 136, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getClassLoader()", "cls.getDeclaredField(String)", "new WeakReference(cls)", "class.forName(String,boolean,ClassLoader)"], "useStart": [234, 364, 564, 1436], "useEnd": [254, 403, 596, 1485], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/twall/jna/tree/master/test/com/sun/jna/JNALoadTest.java", "rawCode": "  public void testLoadAndUnloadFromResourcePath() throws Exception {\n    ClassLoader loader = new TestLoader(false);\n    Class<?> cls = Class.forName(\"com.sun.jna.Native\", true, loader);\n    assertEquals(\"Wrong class loader\", loader, cls.getClassLoader());\n    assertTrue(\"System property jna.loaded not set\", Boolean.getBoolean(\"jna.loaded\"));\n\n    Field field = cls.getDeclaredField(\"jnidispatchPath\");\n    field.setAccessible(true);\n    String path = (String) field.get(null);\n    assertNotNull(\"Native library not found\", path);\n\n    Reference<Class<?>> ref = new WeakReference<Class<?>>(cls);\n    Reference<ClassLoader> clref = new WeakReference<ClassLoader>(loader);\n    loader = null;\n    cls = null;\n    field = null;\n    System.gc();\n    for (int i = 0;\n        i < GCWaits.GC_WAITS\n            && (ref.get() != null || clref.get() != null || Boolean.getBoolean(\"jna.loaded\"));\n        i++) {\n      GCWaits.gcRun();\n    }\n    assertNull(\"Class not GC'd: \" + ref.get(), ref.get());\n    assertNull(\"ClassLoader not GC'd: \" + clref.get(), clref.get());\n    assertFalse(\"System property jna.loaded not cleared\", Boolean.getBoolean(\"jna.loaded\"));\n\n    Throwable throwable = null;\n    // NOTE: IBM J9 needs some extra time to unload the native library,\n    // so try a few times before failing\n    for (int i = 0; i < GCWaits.GC_WAITS; i++) {\n      GCWaits.gcRun();\n      try {\n        loader = new TestLoader(false);\n        cls = Class.forName(\"com.sun.jna.Native\", true, loader);\n        break;\n      } catch (Throwable t) {\n        loader = null;\n        throwable = t;\n      }\n    }\n    try {\n      if (loader == null) {\n        fail(\"Native library not unloaded: \" + throwable.getMessage());\n      }\n    } finally {\n      loader = null;\n      cls = null;\n      System.gc();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1127, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 119, "focalAPIEnd": 157, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arweed/kcalculator/tree/master/kcalculator/kcalculator-datageneration/src/main/java/com/kcalculator/db/Connections.java", "rawCode": "  public static Connection getConnection() throws SQLException, ClassNotFoundException {\n    if (conn == null) {\n      Class.forName(\"org.postgresql.Driver\");\n      conn =\n          DriverManager.getConnection(\n              \"jdbc:postgresql://localhost:5432/kcalculator\", \"kcalculator\", \"kcalculator\");\n    }\n    return conn;\n  }\n"}, {"dataset": "forName", "exampleID": 1128, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 464, "focalAPIEnd": 482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Realmcraft/Vault/tree/master/src/net/milkbowl/vault/Vault.java", "rawCode": "  /**\n   * Determines if all packages in a String array are within the Classpath This is the best way to\n   * determine if a specific plugin exists and will be loaded. If the plugin package isn't loaded,\n   * we shouldn't bother waiting for it!\n   *\n   * @param packages String Array of package names to check\n   * @return Success or Failure\n   */\n  private static boolean packagesExists(String... packages) {\n    try {\n      for (String pkg : packages) {\n        Class.forName(pkg);\n      }\n      return true;\n    } catch (Exception e) {\n      return false;\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1129, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 94, "tryExpressionEnd": 98, "tryBlockStart": 94, "tryBlockEnd": 1744, "catchExpressionStart": 1619, "catchExpressionEnd": 1642, "catchBlockStart": 1619, "catchBlockEnd": 1676, "exceptionHandlingCallStart": [1650], "exceptionHandlingCallEnd": [1669], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 106, "focalAPIEnd": 149, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ferquies/2dam/tree/master/AD/Tema 2/hsqldb-2.3.1/hsqldb/src/org/hsqldb/test/TestBatchExecution.java", "rawCode": "  public static void preparedTestThree() {\n\n    System.out.println(\"preparedTestThree\");\n\n    try {\n      Class.forName(\"org.hsqldb.jdbc.JDBCDriver\");\n\n      Connection con = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\", \"sa\", \"\");\n\n      con.setAutoCommit(false);\n      System.out.println(\"con=\" + con);\n\n      Statement stmt = con.createStatement();\n\n      try {\n        stmt.executeUpdate(\"drop table node\");\n      } catch (Exception e) {\n      }\n\n      stmt.executeUpdate(\n          \"create table Node (id varbinary(255) not null, name varchar(255), primary key (id))\");\n\n      PreparedStatement prep = con.prepareStatement(\"insert into Node (name, id) values (?, ?)\");\n      byte[] byteArray = null;\n\n      try {\n        byteArray =\n            org.hsqldb.lib.StringConverter.hexStringToByteArray(\"c0a8000a30d110808130d18080880000\");\n      } catch (Exception e) {\n      }\n      ;\n\n      prep.setNull(1, java.sql.Types.VARCHAR);\n      prep.setBytes(2, byteArray);\n\n      int result = prep.executeUpdate();\n\n      prep.close();\n\n      prep = con.prepareStatement(\"delete from Node where id=?\");\n\n      prep.setBytes(1, byteArray);\n      prep.addBatch();\n      System.out.println(\"executeBatch() for delete\");\n      prep.executeBatch();\n      con.commit();\n\n      // prep.clearBatch(); // -> java.lang.NullPointerException\n      // at org.hsqldb.Result.getUpdateCounts(Unknown Source)\n      prep.close();\n\n      // see what we got\n      ResultSet rs = stmt.executeQuery(\"select * from Node\");\n\n      while (rs.next()) {\n        System.out.println(\"row retreived\");\n      }\n\n      System.out.println(\"bye.\");\n    } catch (SQLException e) {\n      e.printStackTrace();\n    } catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1130, "initialization": ["String className = String.trim()"], "initializationStart": [3105], "initializationEnd": [3113], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["argInvalid(String)"], "tryExpressionStart": 2921, "tryExpressionEnd": 2925, "tryBlockStart": 2921, "tryBlockEnd": 4237, "catchExpressionStart": 3644, "catchExpressionEnd": 3677, "catchBlockStart": 3644, "catchBlockEnd": 3753, "exceptionHandlingCallStart": [3689], "exceptionHandlingCallEnd": [3742], "configuration": ["className.trim()"], "configurationStart": [3105], "configurationEnd": [3113], "guardCondition": "className.length()>0 && (className)!=null", "guardType": "LOOP {", "guardExpressionStart": 3049, "guardExpressionEnd": 3086, "guardBlockStart": 3049, "guardBlockEnd": 3433, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 3376, "focalAPIEnd": 3392, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [3376], "useEnd": [3406], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joninvski/Appia/tree/master/tags/release_3_2_4/appia/src/org/continuent/appia/demo/Appl.java", "rawCode": "  public static void main(String args[]) {\n    int i;\n    int port = -1;\n    InetSocketAddress multicast = null;\n    InetSocketAddress[] gossips = null;\n    InetSocketAddress[] viewAddrs = null;\n    Group group = null;\n    LineNumberReader file = null;\n\n    boolean ssl = false;\n    String keystoreFile = null;\n    String keystorePass = null;\n\n    for (i = 0; i < args.length; i++) {\n\n      // PORT\n      if (args[i].equals(\"-port\")) {\n        if (++i >= args.length) argInvalid(\"missing port number\");\n        try {\n          port = Integer.parseInt(args[i]);\n        } catch (NumberFormatException ex) {\n          argInvalid(\"invalid port: \" + args[i]);\n        }\n\n        // GOSSIP\n      } else if (args[i].equals(\"-gossip\")) {\n        if (++i >= args.length) argInvalid(\"missing gossip server list\");\n        try {\n          gossips =\n              ParseUtils.parseSocketAddressArray(\n                  args[i], InetAddress.getLocalHost(), DEFAULT_GOSSIP_PORT);\n        } catch (UnknownHostException e) {\n          System.err.println(\"Host unknown: \" + e.getMessage());\n          System.exit(1);\n        } catch (ParseException e) {\n          System.err.println(\"Incorrect gossip server list format: \" + e.getMessage());\n          System.exit(1);\n        } catch (NumberFormatException e) {\n          System.err.println(\"Incorrect port: \" + e.getMessage());\n          System.exit(1);\n        }\n\n        // MULTICAST\n      } else if (args[i].equals(\"-multicast\")) {\n        if (++i >= args.length) argInvalid(\"missing multicast address\");\n        try {\n          multicast = ParseUtils.parseSocketAddress(args[i], null, DEFAULT_MULTICAST_PORT);\n        } catch (NumberFormatException ex) {\n          argInvalid(\"invalid port in multicast: \\\"\" + args[i] + \"\\\"\");\n        } catch (java.net.UnknownHostException ex) {\n          argInvalid(\"invalid address in multicast: \\\"\" + args[i] + \"\\\"\");\n        } catch (ParseException e) {\n          argInvalid(\"invalid format in multicast: \\\"\" + args[i] + \"\\\"\");\n        }\n        if (!multicast.getAddress().isMulticastAddress())\n          argInvalid(\"not multicast address: \\\"\" + args[i] + \"\\\"\");\n\n        // VIEW\n      } else if (args[i].equals(\"-view\")) {\n        if (++i >= args.length) argInvalid(\"missing view addresses list\");\n        try {\n          viewAddrs = ParseUtils.parseSocketAddressArray(args[i], null, -1);\n        } catch (UnknownHostException e) {\n          System.err.println(\"Host unknown: \" + e.getMessage());\n          System.exit(1);\n        } catch (ParseException e) {\n          System.err.println(\"Incorrect view format: \" + e.getMessage());\n          System.exit(1);\n        } catch (NumberFormatException e) {\n          System.err.println(\"Incorrect port: \" + e.getMessage());\n          System.exit(1);\n        }\n\n        // QOS\n      } else if (args[i].equals(\"-qos\")) {\n        if (++i >= args.length) argInvalid(\"missing qos file name\");\n        try {\n          file = new LineNumberReader(new FileReader(args[i]));\n          String s = null;\n          int j = 0;\n          while ((s = file.readLine()) != null) {\n            s = s.trim();\n            if (s.length() > 0) {\n              if (j == qos.length - 1) {\n                Layer[] aux = new Layer[qos.length * 2];\n                System.arraycopy(qos, 0, aux, 0, j);\n                qos = aux;\n              }\n              qos[j++] = (Layer) Class.forName(s).newInstance();\n            }\n          }\n          if (j < qos.length - 1) {\n            Layer[] aux = new Layer[j + 1];\n            System.arraycopy(qos, 0, aux, 0, j);\n            qos = aux;\n          }\n          qos[j] = new ApplLayer();\n        } catch (FileNotFoundException ex) {\n          argInvalid(\"qos file not found: \\\"\" + args[i] + \"\\\"\");\n        } catch (IOException ex) {\n          ex.printStackTrace();\n          argInvalid(\"impossible to read qos file: \\\"\" + args[i] + \"\\\"\");\n        } catch (ClassNotFoundException ex) {\n          argInvalid(\"class not found: \" + ex.getMessage());\n        } catch (InstantiationException ex) {\n          argInvalid(\"impossible to create layer: \" + ex.getMessage());\n        } catch (IllegalAccessException ex) {\n          argInvalid(\"impossible to create layer: \" + ex.getMessage());\n        }\n\n        // SSL\n      } else if (args[i].equals(\"-ssl\")) {\n        ssl = true;\n\n        // SSLKEYS\n      } else if (args[i].equals(\"-sslkeys\")) {\n        ssl = true;\n        if (++i >= args.length) argInvalid(\"missing key store file\");\n        keystoreFile = args[i];\n        if (++i >= args.length) argInvalid(\"missing key store password\");\n        keystorePass = args[i];\n\n        // HELP\n      } else if (args[i].equals(\"-help\")) {\n        printUsage();\n        System.exit(0);\n\n        // DEFAULT\n      } else {\n        argInvalid(\"Invalid parameters: \" + args[i]);\n      }\n    }\n\n    // for (int k=0 ; k < qos.length ; k++) {\n    // System.out.println(\" \"+k+\": \"+qos[k]);\n    // }\n\n    /* Create a QoS */\n    QoS myQoS = null;\n    try {\n      myQoS = new QoS(\"Appl QoS\", qos);\n    } catch (AppiaInvalidQoSException ex) {\n      System.err.println(\"Invalid QoS\");\n      System.err.println(ex.getMessage());\n      System.exit(1);\n    }\n\n    /* Create a channel. Uses default event scheduler. */\n    Channel myChannel = myQoS.createUnboundChannel(\"Appl Channel\");\n\n    /* Application Session requires special arguments: qos and port.\n    A session is created and binded to the stack. Remaining ones\n    are created by default\n    */\n\n    ApplSession as = (ApplSession) qos[qos.length - 1].createSession();\n    if (ssl) as.initWithSSL(port, multicast, gossips, group, viewAddrs, keystoreFile, keystorePass);\n    else as.init(port, multicast, gossips, group, viewAddrs);\n\n    ChannelCursor cc = myChannel.getCursor();\n    /* Application is the last session of the array. Positioning\n    in it is simple */\n    try {\n      cc.top();\n      cc.setSession(as);\n    } catch (AppiaCursorException ex) {\n      System.err.println(\"Unexpected exception in main. Type code:\" + ex.type);\n      System.exit(1);\n    }\n\n    /* Remaining ones are created by default. Just tell the channel to start */\n    try {\n      myChannel.start();\n    } catch (AppiaDuplicatedSessionsException ex) {\n      System.err.println(\n          \"Sessions binding strangely resulted in \"\n              + \"one single sessions occurring more than \"\n              + \"once in a channel\");\n      System.exit(1);\n    }\n\n    /* All set. Appia main class will handle the rest */\n    Appia.run();\n  }\n"}, {"dataset": "forName", "exampleID": 1131, "initialization": ["String className = XmlPullParser.getName()"], "initializationStart": [204], "initializationEnd": [220], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new XmlPullParserException(String,XmlPullParser,*)"], "tryExpressionStart": 226, "tryExpressionEnd": 230, "tryBlockStart": 226, "tryBlockEnd": 602, "catchExpressionStart": 481, "catchExpressionEnd": 501, "catchBlockStart": 481, "catchBlockEnd": 602, "exceptionHandlingCallStart": [515], "exceptionHandlingCallEnd": [595], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "className.indexOf('.',)>0", "guardType": "IF {", "guardExpressionStart": 373, "guardExpressionEnd": 399, "guardBlockStart": 373, "guardBlockEnd": 474, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 432, "focalAPIEnd": 451, "followUpCheck": "cls == null", "checkType": "IF", "followUpCheckExpressionStart": 607, "followUpCheckExpressionEnd": 628, "followUpCheckBlockStart": 607, "followUpCheckBlockEnd": 696, "use": ["cls.inflate(Resources,XmlPullParser,AttributeSet)"], "useStart": [701], "useEnd": [735], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/practo/ActionBarSherlock/tree/master/library/src/org/holoeverywhere/drawable/DrawableCompat.java", "rawCode": "  public static Drawable createFromXmlInner(Resources r, XmlPullParser parser, AttributeSet attrs)\n      throws XmlPullParserException, IOException {\n    Drawable drawable = null;\n    final String name = parser.getName();\n    try {\n      Class<? extends Drawable> clazz = CLASS_MAP.get(name);\n      if (clazz != null) {\n        drawable = clazz.newInstance();\n      } else if (name.indexOf('.') > 0) {\n        drawable = (Drawable) Class.forName(name).newInstance();\n      }\n    } catch (Exception e) {\n      throw new XmlPullParserException(\"Error while inflating drawable resource\", parser, e);\n    }\n    if (drawable == null) {\n      return Drawable.createFromXmlInner(r, parser, attrs);\n    }\n    drawable.inflate(r, parser, attrs);\n    return drawable;\n  }\n"}, {"dataset": "forName", "exampleID": 1132, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new IllegalStateException(String,*)"], "tryExpressionStart": 105, "tryExpressionEnd": 109, "tryBlockStart": 105, "tryBlockEnd": 747, "catchExpressionStart": 216, "catchExpressionEnd": 249, "catchBlockStart": 216, "catchBlockEnd": 390, "exceptionHandlingCallStart": [350], "exceptionHandlingCallEnd": [383], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 137, "focalAPIEnd": 158, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [192], "useEnd": [208], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seasarorg/dbflute/tree/master/dbflute/src/main/java/org/seasar/dbflute/helper/jdbc/connection/DfDataSourceHandler.java", "rawCode": "  protected Driver newDriver() {\n    final String driver = _driver;\n    final Driver driverInstance;\n    try {\n      final Class<?> dc = Class.forName(driver);\n      driverInstance = (Driver) dc.newInstance();\n    } catch (ClassNotFoundException e) {\n      String msg = \"Class Not Found: JDBC driver \" + driver + \" could not be loaded.\";\n      throw new IllegalStateException(msg, e);\n    } catch (IllegalAccessException e) {\n      String msg = \"Illegal Access: JDBC driver \" + driver + \" could not be loaded.\";\n      throw new IllegalStateException(msg, e);\n    } catch (InstantiationException e) {\n      String msg = \"Instantiation Exception: JDBC driver \" + driver + \" could not be loaded.\";\n      throw new IllegalStateException(msg, e);\n    }\n    return driverInstance;\n  }\n"}, {"dataset": "forName", "exampleID": 1133, "initialization": ["ClassLoader loader = new URLClassLoader(*)"], "initializationStart": [350], "initializationEnd": [379], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["println(String)", "printStackTrace(*)"], "tryExpressionStart": 457, "tryExpressionEnd": 461, "tryBlockStart": 457, "tryBlockEnd": 678, "catchExpressionStart": 520, "catchExpressionEnd": 554, "catchBlockStart": 520, "catchBlockEnd": 678, "exceptionHandlingCallStart": [562, 622], "exceptionHandlingCallEnd": [614, 652], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 473, "focalAPIEnd": 511, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getMethod(String,Class[])"], "useStart": [721], "useEnd": [756], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DavidWhitlock/PortlandStateJava/tree/master/grader/src/main/java/edu/pdx/cs410J/grader/Tester.java", "rawCode": "  /**\n   * Executes a static method of a given name in a given class with a given set of parameters.\n   *\n   * @param printBanner Do we print a banner message?\n   */\n  public Object executeStatic(\n      String className,\n      String methodName,\n      Class[] paramTypes,\n      Object[] params,\n      boolean printBanner) {\n\n    ClassLoader loader = new URLClassLoader(this.urls);\n\n    // First load the class and the desired method\n    Class c = null;\n    try {\n      c = Class.forName(className, true, loader);\n\n    } catch (ClassNotFoundException ex) {\n      System.err.println(\"** Could not load \" + className);\n      ex.printStackTrace(System.err);\n      return null;\n    }\n\n    Method m = null;\n    try {\n      m = c.getMethod(methodName, paramTypes);\n\n    } catch (NoSuchMethodException ex) {\n      System.err.println(\"** Could not find method \" + methodName + \" in \" + className);\n      ex.printStackTrace(System.err);\n      return null;\n    }\n\n    if (printBanner) {\n      // Print out some information\n      this.printBanner(\"Executing \" + className + \".\" + methodName + \"()\", '-');\n    }\n\n    // Run the method\n    Object result = null;\n    try {\n      try {\n        result = m.invoke(null, params);\n\n      } catch (InvocationTargetException ex) {\n        throw ex.getTargetException();\n      }\n\n    } catch (TesterExitException ex) {\n      // That's okay, we're just exiting from one invocation of the\n      // main method\n\n    } catch (IllegalAccessException ex) {\n      System.err.println(\n          \"** IllegalAccessException while invoking \" + className + \".\" + methodName + \"()\");\n      ex.printStackTrace(System.err);\n      result = null;\n\n    } catch (Exception ex) {\n      // Log everything else\n      System.err.println(\"** Exception while invoking \" + className + \".\" + methodName + \"()\");\n      ex.printStackTrace(System.err);\n      result = null;\n\n    } catch (Throwable ex) {\n      // EEEP!!!\n      System.err.println(\"*** SEVERE ERROR!!!\");\n      ex.printStackTrace(System.err);\n      System.exit(1);\n    }\n\n    System.out.flush();\n    System.err.flush();\n\n    this.log.println(\"\");\n    this.log.flush();\n    return result;\n  }\n"}, {"dataset": "forName", "exampleID": 1134, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new UserManagerException(String,*)"], "tryExpressionStart": 75, "tryExpressionEnd": 79, "tryBlockStart": 75, "tryBlockEnd": 1922, "catchExpressionStart": 1826, "catchExpressionEnd": 1846, "catchBlockStart": 1826, "catchBlockEnd": 1922, "exceptionHandlingCallStart": [1860], "exceptionHandlingCallEnd": [1915], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 101, "focalAPIEnd": 122, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [155], "useEnd": [174], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/commons/tree/master/usermanager/modules/verification/src/main/java/org/wso2/usermanager/verification/email/EmailVerifier.java", "rawCode": "  protected static void createDatabase() throws UserManagerException {\n    try {\n      Class clazz = Class.forName(DRIVER);\n      Driver driver = (Driver) clazz.newInstance();\n\n      Properties props = new Properties();\n\n      String connectionURL = PROTOCOL + \"UnVerifiedUserDatabase;create=true\";\n      dbConnection = driver.connect(connectionURL, props);\n\n      Statement stmt =\n          dbConnection.createStatement(\n              ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);\n\n      DatabaseMetaData dbmd = dbConnection.getMetaData();\n      ResultSet rs = dbmd.getTables(null, null, \"PENDING_USERS\", null);\n\n      if (rs.next() == false) {\n        log.debug(\"Creating a new table in the database.\");\n        stmt =\n            dbConnection.createStatement(\n                ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);\n        stmt.executeUpdate(\n            \"create table PENDING_USERS(username varchar(255) not null, email_address varchar(255) not null, password varchar(255) not null, confirmation varchar(255) not null unique, primary key (username))\");\n        stmt.executeUpdate(\n            \"create table PENDING_USER_PROPERTIES(username varchar(255) not null, property_name varchar(255) not null, property_value varchar(255) not null, primary key (username, property_name))\");\n\n        stmt.executeUpdate(\n            \"insert into PENDING_USERS(username, email_address, password, confirmation) values('admin', 'admin', 'dummyPass', 'adminConfirmation')\");\n        stmt.executeUpdate(\n            \"insert into PENDING_USERS(username, email_address, password, confirmation) values('root', 'root', 'dummyPass', 'rootConfirmation')\");\n        dbConnection.commit();\n      } else {\n        log.debug(\"Database and table already found.\");\n      }\n      dbConnection.commit();\n    } catch (Exception e) {\n      throw new UserManagerException(\"verifierUserDatabaseInit\", e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1135, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "localeResolverInitialisationError(*)", "error(*,*)"], "tryExpressionStart": 159, "tryExpressionEnd": 163, "tryBlockStart": 159, "tryBlockEnd": 525, "catchExpressionStart": 378, "catchExpressionEnd": 398, "catchBlockStart": 378, "catchBlockEnd": 488, "exceptionHandlingCallStart": [462, 419, 406], "exceptionHandlingCallEnd": [476, 477, 481], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 298, "focalAPIEnd": 370, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 1, "cleanUpCall": ["Lock.unlock()"], "finallyExpressionStart": 489, "finallyExpressionEnd": 497, "finallyBlockStart": 489, "finallyBlockEnd": 525, "cleanUpCallStart": [505], "cleanUpCallEnd": [518], "url": "https://github.com/svn2github/crux-framework/tree/master/branches/crux/old/before-declarative-widgets/Crux/src/br/com/sysmap/crux/core/i18n/LocaleResolverInitialiser.java", "rawCode": "  /** */\n  @SuppressWarnings(\"unchecked\")\n  private static void initLocaleResolverClass() {\n    if (localeResolverClass != null) return;\n\n    lock.lock();\n    try {\n      if (localeResolverClass != null) return;\n      localeResolverClass =\n          (Class<? extends LocaleResolver>)\n              Class.forName(ConfigurationFactory.getConfigurations().localeResolver());\n    } catch (Exception e) {\n      logger.error(messages.localeResolverInitialisationError(e.getMessage()), e);\n    } finally {\n      lock.unlock();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1136, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 2185, "focalAPIEnd": 2250, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)", "class.forName(String)", "cls.getMethod(String,Map)", "cls.newInstance()"], "useStart": [2273, 2378, 2474, 2618], "useEnd": [2323, 2435, 2519, 2640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/switch-gpl-to-asl/src/lib/com/izforge/izpack/installer/GUIInstaller.java", "rawCode": "  /**\n   * Loads the suitable L&F.\n   *\n   * @exception Exception Description of the Exception\n   */\n  protected void loadLookAndFeel() throws Exception {\n    // Do we have any preference for this OS ?\n    String syskey = \"unix\";\n    if (OsVersion.IS_WINDOWS) {\n      syskey = \"windows\";\n    } else if (OsVersion.IS_OSX) {\n      syskey = \"mac\";\n    }\n    String laf = null;\n    if (installdata.guiPrefs.lookAndFeelMapping.containsKey(syskey)) {\n      laf = (String) installdata.guiPrefs.lookAndFeelMapping.get(syskey);\n    }\n\n    // Let's use the system LAF\n    // Resolve whether button icons should be used or not.\n    boolean useButtonIcons = true;\n    if (installdata.guiPrefs.modifier.containsKey(\"useButtonIcons\")\n        && ((String) installdata.guiPrefs.modifier.get(\"useButtonIcons\")).equalsIgnoreCase(\"no\"))\n      useButtonIcons = false;\n    ButtonFactory.useButtonIcons(useButtonIcons);\n    boolean useLabelIcons = true;\n    if (installdata.guiPrefs.modifier.containsKey(\"useLabelIcons\")\n        && ((String) installdata.guiPrefs.modifier.get(\"useLabelIcons\")).equalsIgnoreCase(\"no\"))\n      useLabelIcons = false;\n    LabelFactory.setUseLabelIcons(useLabelIcons);\n    if (laf == null) {\n      if (!syskey.equals(\"mac\")) {\n        String syslaf = UIManager.getSystemLookAndFeelClassName();\n        UIManager.setLookAndFeel(syslaf);\n        if (UIManager.getLookAndFeel() instanceof MetalLookAndFeel) {\n          MetalLookAndFeel.setCurrentTheme(new IzPackMetalTheme());\n          ButtonFactory.useHighlightButtons();\n          // Reset the use button icons state because\n          // useHighlightButtons\n          // make it always true.\n          ButtonFactory.useButtonIcons(useButtonIcons);\n          installdata.buttonsHColor = new Color(182, 182, 204);\n        }\n      }\n      lnf = \"swing\";\n      return;\n    }\n\n    // Kunststoff (http://www.incors.org/)\n    if (laf.equals(\"kunststoff\")) {\n      ButtonFactory.useHighlightButtons();\n      // Reset the use button icons state because useHighlightButtons\n      // make it always true.\n      ButtonFactory.useButtonIcons(useButtonIcons);\n      installdata.buttonsHColor = new Color(255, 255, 255);\n      Class lafClass = Class.forName(\"com.incors.plaf.kunststoff.KunststoffLookAndFeel\");\n      Class mtheme = Class.forName(\"javax.swing.plaf.metal.MetalTheme\");\n      Class[] params = {mtheme};\n      Class theme = Class.forName(\"com.izforge.izpack.gui.IzPackKMetalTheme\");\n      Method setCurrentThemeMethod = lafClass.getMethod(\"setCurrentTheme\", params);\n\n      // We invoke and place Kunststoff as our L&F\n      LookAndFeel kunststoff = (LookAndFeel) lafClass.newInstance();\n      MetalTheme ktheme = (MetalTheme) theme.newInstance();\n      Object[] kparams = {ktheme};\n      UIManager.setLookAndFeel(kunststoff);\n      setCurrentThemeMethod.invoke(kunststoff, kparams);\n\n      lnf = \"kunststoff\";\n      return;\n    }\n\n    // Liquid (http://liquidlnf.sourceforge.net/)\n    if (laf.equals(\"liquid\")) {\n      UIManager.setLookAndFeel(\"com.birosoft.liquid.LiquidLookAndFeel\");\n      lnf = \"liquid\";\n\n      Map params = (Map) installdata.guiPrefs.lookAndFeelParams.get(laf);\n      if (params.containsKey(\"decorate.frames\")) {\n        String value = (String) params.get(\"decorate.frames\");\n        if (value.equals(\"yes\")) {\n          JFrame.setDefaultLookAndFeelDecorated(true);\n        }\n      }\n      if (params.containsKey(\"decorate.dialogs\")) {\n        String value = (String) params.get(\"decorate.dialogs\");\n        if (value.equals(\"yes\")) {\n          JDialog.setDefaultLookAndFeelDecorated(true);\n        }\n      }\n\n      return;\n    }\n\n    // Metouia (http://mlf.sourceforge.net/)\n    if (laf.equals(\"metouia\")) {\n      UIManager.setLookAndFeel(\"net.sourceforge.mlf.metouia.MetouiaLookAndFeel\");\n      lnf = \"metouia\";\n      return;\n    }\n\n    // JGoodies Looks (http://looks.dev.java.net/)\n    if (laf.equals(\"looks\")) {\n      Map variants = new TreeMap();\n      variants.put(\"extwin\", \"com.jgoodies.plaf.windows.ExtWindowsLookAndFeel\");\n      variants.put(\"plastic\", \"com.jgoodies.plaf.plastic.PlasticLookAndFeel\");\n      variants.put(\"plastic3D\", \"com.jgoodies.plaf.plastic.Plastic3DLookAndFeel\");\n      variants.put(\"plasticXP\", \"com.jgoodies.plaf.plastic.PlasticXPLookAndFeel\");\n      String variant = (String) variants.get(\"plasticXP\");\n\n      Map params = (Map) installdata.guiPrefs.lookAndFeelParams.get(laf);\n      if (params.containsKey(\"variant\")) {\n        String param = (String) params.get(\"variant\");\n        if (variants.containsKey(param)) {\n          variant = (String) variants.get(param);\n        }\n      }\n\n      UIManager.setLookAndFeel(variant);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1137, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InvocationTargetException", "exceptionHandlingCall": ["getCause()"], "tryExpressionStart": 175, "tryExpressionEnd": 179, "tryBlockStart": 175, "tryBlockEnd": 481, "catchExpressionStart": 263, "catchExpressionEnd": 299, "catchBlockStart": 263, "catchBlockEnd": 481, "exceptionHandlingCallStart": [311], "exceptionHandlingCallEnd": [323], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 187, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getMethod(String)"], "useStart": [187], "useEnd": [227], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chalstrick/jgit/tree/master/org.eclipse.jgit.pgm/src/org/eclipse/jgit/pgm/Main.java", "rawCode": "  private static void install(final String name)\n      throws IllegalAccessException, InvocationTargetException, NoSuchMethodException,\n          ClassNotFoundException {\n    try {\n      Class.forName(name).getMethod(\"install\").invoke(null); // $NON-NLS-1$\n    } catch (InvocationTargetException e) {\n      if (e.getCause() instanceof RuntimeException) throw (RuntimeException) e.getCause();\n      if (e.getCause() instanceof Error) throw (Error) e.getCause();\n      throw e;\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1138, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 84, "focalAPIEnd": 129, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [157], "useEnd": [173], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-cgmdr/tree/master/test/src/org/exist/xquery/JavaFunctionsTest.java", "rawCode": "  protected void setUp() throws Exception {\n    // initialize driver\n    Class cl = Class.forName(\"org.exist.xmldb.DatabaseImpl\");\n    database = (Database) cl.newInstance();\n    database.setProperty(\"create-database\", \"true\");\n    DatabaseManager.registerDatabase(database);\n    root =\n        DatabaseManager.getCollection(\"xmldb:exist://\" + DBBroker.ROOT_COLLECTION, \"admin\", null);\n    service = (XPathQueryService) root.getService(\"XQueryService\", \"1.0\");\n\n    // Check the configuration file to see if Java binding is enabled\n    // if it is not enabled then we expect an exception when trying to\n    // perform Java binding.\n    Configuration config = new Configuration();\n    String javabinding = (String) config.getProperty(FunctionFactory.PROPERTY_ENABLE_JAVA_BINDING);\n    if (javabinding != null) {\n      if (javabinding.equals(\"yes\")) {\n        javabindingenabled = true;\n      }\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1139, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 588, "tryExpressionEnd": 592, "tryBlockStart": 588, "tryBlockEnd": 754, "catchExpressionStart": 646, "catchExpressionEnd": 679, "catchBlockStart": 646, "catchBlockEnd": 754, "exceptionHandlingCallStart": [728], "exceptionHandlingCallEnd": [747], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 600, "focalAPIEnd": 638, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mmalina/jbosstools-integration-tests-non-soa/tree/master/tests/org.jboss.tools.ui.bot.ext/src/org/jboss/tools/ui/bot/ext/helper/DatabaseHelper.java", "rawCode": "  /**\n   * Run HSQLDB database in server mode\n   *\n   * @param dbFilePath - hsqldb database file path\n   * @param dbname - database name\n   */\n  public static void startHSQLDBServer(final String dbFilePath, final String dbname) {\n    if (isHSQLDBRunning()) {\n      log.info(\"Internal HSQLDB is already running\");\n    }\n    // port check\n    log.info(\"Check HSQLDB (9001) port availablity\");\n    boolean available = portAvailable(9001);\n    if (!available) throw new RuntimeException(\"HSQLDB port is already in use\");\n\n    Thread hsqlThread = null;\n    log.info(\"Starting HSQLDB...\");\n    try {\n      Class.forName(\"org.hsqldb.jdbcDriver\");\n    } catch (ClassNotFoundException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n    Runnable runable =\n        new Runnable() {\n\n          public void run() {\n            Server.main(new String[] {\"-database.0\", \"file:\" + dbFilePath, \"-dbname.0\", dbname});\n          }\n        };\n\n    hsqlThread = new Thread(runable);\n    hsqlThread.start();\n    hsqlRunning = true;\n    log.info(\"HSQLDB started\");\n  }\n"}, {"dataset": "forName", "exampleID": 1140, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["getMessage()", "log(*,String,*)"], "tryExpressionStart": 271, "tryExpressionEnd": 275, "tryBlockStart": 271, "tryBlockEnd": 477, "catchExpressionStart": 328, "catchExpressionEnd": 361, "catchBlockStart": 328, "catchBlockEnd": 477, "exceptionHandlingCallStart": [436, 369], "exceptionHandlingCallEnd": [450, 451], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 291, "focalAPIEnd": 320, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [501], "useEnd": [520], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/tools/tree/master/poc/bps/org.eclipse.bpel.validator/src/org/eclipse/bpel/validator/plt/Factory.java", "rawCode": "  @SuppressWarnings(\"nls\")\n  Validator createValidator(String nodeName) {\n\n    String name = Character.toUpperCase(nodeName.charAt(0)) + nodeName.substring(1);\n\n    String validatorClass = PACKAGE_NAME + \".\" + name + \"Validator\";\n\n    Object obj;\n    Class<?> clazz;\n    try {\n      clazz = Class.forName(validatorClass);\n    } catch (ClassNotFoundException e) {\n      mLogger.log(Level.FINE, \"Validator not found in this factory {0}\", e.getMessage());\n      return null;\n    }\n\n    try {\n      obj = clazz.newInstance();\n    } catch (Exception ex) {\n      mLogger.log(Level.WARNING, \"Validator class cannot be created.\", ex);\n      return null;\n    }\n\n    if (obj instanceof Validator) {\n      return (Validator) obj;\n    }\n    mLogger.log(Level.WARNING, \"Object is {0} is not a validator\", obj);\n    return null;\n  }\n"}, {"dataset": "forName", "exampleID": 1141, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["error(String,*)"], "tryExpressionStart": 374, "tryExpressionEnd": 378, "tryBlockStart": 374, "tryBlockEnd": 970, "catchExpressionStart": 864, "catchExpressionEnd": 897, "catchBlockStart": 864, "catchBlockEnd": 970, "exceptionHandlingCallStart": [909], "exceptionHandlingCallEnd": [959], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 411, "focalAPIEnd": 436, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getAnnotation(Class<? extends Annotation>)", "extractIdentifiers(cls)"], "useStart": [467, 822], "useEnd": [508, 851], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/crux/5.1.3/crux-dev/src/main/java/org/cruxframework/crux/core/rebind/dto/DataObjects.java", "rawCode": "  /** */\n  protected static void initializeDataObjects() {\n    dataObjects = new HashMap<String, String>();\n    dataObjectIdentifiers = new HashMap<String, String[]>();\n\n    initializeDefaultDataObjects();\n\n    Set<String> dataNames = ClassScanner.searchClassesByAnnotation(DataObject.class);\n    if (dataNames != null) {\n      for (String dataObject : dataNames) {\n        try {\n          Class<?> dataClass = Class.forName(dataObject);\n          DataObject annot = dataClass.getAnnotation(DataObject.class);\n          if (dataObjects.containsKey(annot.value())) {\n            throw new CruxGeneratorException(\n                \"Duplicated DataObject found: [\" + annot.value() + \"].\");\n          }\n\n          dataObjects.put(annot.value(), dataClass.getCanonicalName());\n          dataObjectIdentifiers.put(annot.value(), extractIdentifiers(dataClass));\n        } catch (ClassNotFoundException e) {\n          logger.error(\"Error initializing DataObjects.\", e);\n        }\n      }\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1142, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["info(String)"], "tryExpressionStart": 42, "tryExpressionEnd": 46, "tryBlockStart": 42, "tryBlockEnd": 472, "catchExpressionStart": 347, "catchExpressionEnd": 367, "catchBlockStart": 347, "catchBlockEnd": 472, "exceptionHandlingCallStart": [375], "exceptionHandlingCallEnd": [445], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 71, "focalAPIEnd": 127, "followUpCheck": "cls == null", "checkType": "IF", "followUpCheckExpressionStart": 135, "followUpCheckExpressionEnd": 150, "followUpCheckBlockStart": 135, "followUpCheckBlockEnd": 255, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/plantuml/tree/master/tags/plantuml-6703/src/net/sourceforge/plantuml/png/PngIO.java", "rawCode": "  static boolean checkPNGMetadata() {\n    try {\n      final Class cl = Class.forName(\"com.sun.imageio.plugins.png.PNGMetadata\");\n      if (cl == null) {\n        Log.info(\"Cannot load com.sun.imageio.plugins.png.PNGMetadata\");\n        return false;\n      }\n      Log.info(\"Ok for com.sun.imageio.plugins.png.PNGMetadata\");\n      return true;\n    } catch (Exception e) {\n      Log.info(\"Error loading com.sun.imageio.plugins.png.PNGMetadata \" + e);\n      return false;\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1143, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["forName(*)"], "tryExpressionStart": 2667, "tryExpressionEnd": 2671, "tryBlockStart": 2667, "tryBlockEnd": 3312, "catchExpressionStart": 2853, "catchExpressionEnd": 2882, "catchBlockStart": 2853, "catchBlockEnd": 3312, "exceptionHandlingCallStart": [2917], "exceptionHandlingCallEnd": [2974], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 2787, "focalAPIEnd": 2812, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()", "class.forName(*)"], "useStart": [2827, 2917], "useEnd": [2845, 2974], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.2.1/src/lib/com/izforge/izpack/util/TargetFactory.java", "rawCode": "  /**\n   * This method returns an OS and OS flavor specific instance of the requested class. <br>\n   * <br>\n   * <b>Class Naming Rules</b><br>\n   * Class versions must be named with the OS and OS flavor as prefix. The prefixes are simply\n   * concatenated, with the OS prefix first and the flavor prefix second. Use the following OS\n   * specific prefixes:<br>\n   * <br>\n   *\n   * <TABLE BORDER=1>\n   * <TR>\n   * <TH>Operating System</TH>\n   * <TH>Prefix</TH>\n   * </TR>\n   * <TR>\n   * <TD>Microsoft Windows</TD>\n   * <TD>Win_</TD>\n   * </TR>\n   * <TR>\n   * <TD>Mac OS</TD>\n   * <TD>Mac_</TD>\n   * </TR>\n   * <TR>\n   * <TD>UNIX</TD>\n   * <TD>UNIX_</TD>\n   * </TR>\n   * </TABLE>\n   *\n   * <br>\n   * For the different OS flavors, use these prefixes:<br>\n   * <br>\n   *\n   * <TABLE BORDER=1>\n   * <TR>\n   * <TH>OS Flavor</TH>\n   * <TH>Prefix</TH>\n   * </TR>\n   * <TR>\n   * <TD>NT</TD>\n   * <TD>NT_</TD>\n   * </TR>\n   * <TR>\n   * <TD>Mac OS X</TD>\n   * <TD>X_</TD>\n   * </TR>\n   * </TABLE>\n   *\n   * <br>\n   * <br>\n   * <b>Naming Example:</b> <br>\n   * <br>\n   * For the class <code>MyClass</code>, the specific version for Windows NT must be in the same\n   * package as <code>MyClass</code> and the name must be <code>Win_NT_MyClass</code>. A version\n   * that should be instantiated for any non-NT flavor would be called <code>Win_MyClass</code>.\n   * This would also be the version instantiated on Windows NT if the version <code>Win_NT_MyClass\n   * </code> does not exist. <br>\n   * <br>\n   * <b>The Loading Process</b> <br>\n   * <br>\n   * The process is completed after the first successful attempt to load a class. <br>\n   *\n   * <ol>\n   *   <li>load a version that is OS and OS-Flavor specific\n   *   <li>load a version that is OS specific\n   *   <li>load the base version (without OS or OS-Flavor prefix)\n   * </ol>\n   *\n   * <br>\n   * See the <A HREF=doc-files/TargetFactory.html>TargetFactory Tutorial</A> for more information.\n   * <br>\n   * <br>\n   *\n   * @param name the fully qualified name of the class to load without the extension.\n   * @return An instance of the requested class. Note that specific initialization that can not be\n   *     accomplished in the default constructor still needs to be performed before the object can\n   *     be used.\n   * @throws Exception if all attempts to instantiate class fail\n   */\n  /*--------------------------------------------------------------------------*/\n  public Object makeObject(String name) throws Exception {\n    int nameStart = name.lastIndexOf('.') + 1;\n    String packageName = name.substring(0, nameStart);\n    String className = name.substring(nameStart, name.length());\n    String actualName;\n\n    try {\n      actualName = packageName + CLASS_PREFIX[os] + CLASS_FLAVOR_PREFIX[osFlavor] + className;\n      Class temp = Class.forName(actualName);\n      return temp.newInstance();\n    } catch (Throwable exception1) {\n      try {\n        Class temp = Class.forName(packageName + CLASS_PREFIX[os] + className);\n        return temp.newInstance();\n      } catch (Throwable exception2) {\n        try {\n          actualName = name;\n          Class temp = Class.forName(actualName);\n          return temp.newInstance();\n        } catch (Throwable exception3) {\n          throw new Exception(\"can not instantiate class \" + name);\n        }\n      }\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1144, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 100, "focalAPIEnd": 141, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jboss-modules/jboss-modules/tree/master/src/main/java/org/jboss/modules/ClassLoaderLocalLoader.java", "rawCode": "  public Class<?> loadClassLocal(final String name, final boolean resolve) {\n    try {\n      return Class.forName(name, resolve, classLoader);\n    } catch (ClassNotFoundException e) {\n      final Throwable cause = e.getCause();\n      if (cause instanceof Error) {\n        throw (Error) cause;\n      } else if (cause instanceof RuntimeException) {\n        // unlikely\n        throw (RuntimeException) cause;\n      }\n      return null;\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1145, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new FlashCodeUtilsNone()"], "tryExpressionStart": 139, "tryExpressionEnd": 143, "tryBlockStart": 139, "tryBlockEnd": 482, "catchExpressionStart": 243, "catchExpressionEnd": 276, "catchBlockStart": 243, "catchBlockEnd": 322, "exceptionHandlingCallStart": [291], "exceptionHandlingCallEnd": [315], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 168, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [219], "useEnd": [235], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/plantuml/tree/master/tags/plantuml-7936/trunk/src/net/sourceforge/plantuml/flashcode/FlashCodeFactory.java", "rawCode": "  public static FlashCodeUtils getFlashCodeUtils() {\n    final String name = \"net.sourceforge.plantuml.flashcode.FlashCodeUtilsZxing\";\n    try {\n      final Class cl = Class.forName(name);\n      return (FlashCodeUtils) cl.newInstance();\n    } catch (ClassNotFoundException e) {\n      return new FlashCodeUtilsNone();\n    } catch (InstantiationException e) {\n      return new FlashCodeUtilsNone();\n    } catch (IllegalAccessException e) {\n      return new FlashCodeUtilsNone();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1146, "initialization": ["String className = new String(byte[],int,int,String)"], "initializationStart": [426], "initializationEnd": [468], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["printStackTrace()", "getAddress()", "getHostName()", "getPort()", "Logger.debug(String)"], "tryExpressionStart": 240, "tryExpressionEnd": 244, "tryBlockStart": 240, "tryBlockEnd": 2264, "catchExpressionStart": 1906, "catchExpressionEnd": 1927, "catchBlockStart": 1906, "catchBlockEnd": 2264, "exceptionHandlingCallStart": [1981, 2115, 2115, 2188, 2013], "exceptionHandlingCallEnd": [2001, 2129, 2143, 2199, 2245], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 519, "focalAPIEnd": 543, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [1271], "useEnd": [1286], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joninvski/Appia/tree/master/trunk/appia/src/core/net/sf/appia/protocols/udpsimple/UdpSimpleSession.java", "rawCode": "    private void receiveFormatSend(DatagramPacket p) {\n\n      byte[] data = new byte[p.getLength()];\n      System.arraycopy(p.getData(), p.getOffset(), data, 0, p.getLength());\n      SendableEvent e = null;\n      Message msg = null;\n\n      try {\n        /* Extract event class name */\n        // size of class name\n        int sLength = ParseUtils.byteArrayToInt(data, 0);\n        // the class name\n        String className = new String(data, 4, sLength, \"ISO-8859-1\");\n\n        /* Create event */\n        Class<?> c = Class.forName(className);\n        if (debugFull) {\n          logReader.debug(\":receiveAndFormat: Reader, creating \" + className + \" event.\");\n        }\n\n        /* Extract channel hash and put event in it*/\n\n        int channelHash = ParseUtils.byteArrayToInt(data, 4 + sLength);\n        Channel msgChannel = parentSession.channels.get(new Integer(channelHash));\n\n        /* If channel does not exist, discard message */\n        if (msgChannel == null) {\n          if (debugFull)\n            logReader.debug(\n                this.getClass().getName()\n                    + \": channel does not exist. message will be discarded. \"\n                    + \"hash=\"\n                    + channelHash);\n          return;\n        }\n\n        e = (SendableEvent) c.newInstance();\n        e.setMessage(msgChannel.getMessageFactory().newMessage());\n        msg = e.getMessage();\n        msg.setByteArray(data, 8 + sLength, data.length - (8 + sLength));\n\n        if (debugFull)\n          logReader.debug(\n              \":receiveAndFormat: \" + msgChannel.getChannelID() + \" (\" + channelHash + \")\");\n\n        /* Extract the addresses and put them on the event */\n        InetSocketAddress addr = new InetSocketAddress(p.getAddress(), p.getPort());\n        e.source = addr;\n\n        // msg's destination\n        e.dest = dest;\n\n        // send event\n        e.asyncGo(msgChannel, Direction.UP);\n\n      } catch (Exception ex) {\n        if (logReader.isDebugEnabled()) {\n          ex.printStackTrace();\n          logReader.debug(\n              \"Exception catched while processing message from \"\n                  + p.getAddress().getHostName()\n                  + \":\"\n                  + p.getPort()\n                  + \". Continued operation.\");\n        }\n      }\n    }\n"}, {"dataset": "forName", "exampleID": 1147, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 603, "focalAPIEnd": 647, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()", "cls.getMethod(String,Class[])", "cls.getMethod(String,Class[])"], "useStart": [685, 879, 1195], "useEnd": [718, 925, 1249], "hasFinally": 1, "cleanUpCall": ["Class.getMethod(String,Class[])", "invoke(Object,*)"], "finallyExpressionStart": 1156, "finallyExpressionEnd": 1164, "finallyBlockStart": 1156, "finallyBlockEnd": 1319, "cleanUpCallStart": [1195, 1259], "cleanUpCallEnd": [1249, 1310], "url": "https://github.com/2pirad/jacorb/tree/master/src/org/jacorb/orb/ParsedIOR.java", "rawCode": "  private void parse_jndi(String jndiName) {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Trying to resolve JNDI/IOR from name: \" + jndiName);\n    }\n\n    try {\n      // javax.naming.Context initialContext =\n      // new javax.naming.InitialContext ();\n      // obj = initialContext.lookup (jndiName);\n\n      // Replaced lines above with reflected equivalent so will compile &\n      // run on VM's that do not include javax.naming.*.\n      // for jndi based name resolution to work obviously javax.naming\n      // classes must be in available.\n      //\n\n      final Class initialContextClazz = Class.forName(\"javax.naming.InitialContext\");\n      final Object initialContext = initialContextClazz.newInstance();\n\n      try {\n        final Class[] types = new Class[] {String.class};\n        final Object[] params = new Object[] {jndiName};\n\n        final Method method = initialContextClazz.getMethod(\"lookup\", types);\n        final Object result = method.invoke(initialContext, params);\n\n        if (result == null) {\n\n          throw new IllegalArgumentException(\"Null JNDI/IOR: \" + jndiName);\n        }\n        parse(result.toString());\n      } finally {\n        Method closeMethod = initialContextClazz.getMethod(\"close\", (Class[]) null);\n        closeMethod.invoke(initialContext, (Object[]) null);\n      }\n    } catch (Exception ex) {\n      throw new IllegalArgumentException(\"Failed to lookup JNDI/IOR: \" + jndiName + \": \" + ex);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1148, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getClass()", "getName()", "new MojoExecutionException(String)"], "tryExpressionStart": 567, "tryExpressionEnd": 571, "tryBlockStart": 567, "tryBlockEnd": 806, "catchExpressionStart": 648, "catchExpressionEnd": 668, "catchBlockStart": 648, "catchBlockEnd": 806, "exceptionHandlingCallStart": [774, 774, 684], "exceptionHandlingCallEnd": [786, 796, 797], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(\"xml\".equals(className,)) && !(\"\".equals(className,))&&!(\"none\".equals(className,)) && !(\"csv\".equals(className,))", "guardType": "IF {", "guardExpressionStart": 352, "guardExpressionEnd": 377, "guardBlockStart": 352, "guardBlockEnd": 812, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 603, "focalAPIEnd": 624, "followUpCheck": "cls == null", "checkType": "IF", "followUpCheckExpressionStart": 818, "followUpCheckExpressionEnd": 839, "followUpCheckBlockStart": 818, "followUpCheckBlockEnd": 935, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/epabst/sonar-plugins/tree/master/dotnet/maven/maven-dotnet-plugin/src/main/java/org/apache/maven/dotnet/CpdMojo.java", "rawCode": "  /**\n   * Create and return the correct renderer for the output type.\n   *\n   * @return the renderer based on the configured output\n   * @throws org.apache.maven.reporting.MavenReportException if no renderer found for the output\n   *     type\n   */\n  public Renderer createRenderer() throws MojoExecutionException {\n\n    Renderer renderer = null;\n    if (\"xml\".equals(format)) {\n      renderer = new XMLRenderer(\"UTF-8\");\n    } else if (\"csv\".equals(format)) {\n      renderer = new CSVRenderer();\n    } else if (!\"\".equals(format) && !\"none\".equals(format)) {\n      try {\n        renderer = (Renderer) Class.forName(format).newInstance();\n      } catch (Exception e) {\n        throw new MojoExecutionException(\n            \"Can't find the custom format \" + format + \": \" + e.getClass().getName());\n      }\n    }\n\n    if (renderer == null) {\n      throw new MojoExecutionException(\"Can't create report with format of \" + format);\n    }\n\n    return renderer;\n  }\n"}, {"dataset": "forName", "exampleID": 1149, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getName()", "getLogger(*)", "log(*,*,*)"], "tryExpressionStart": 114, "tryExpressionEnd": 118, "tryBlockStart": 114, "tryBlockEnd": 912, "catchExpressionStart": 673, "catchExpressionEnd": 697, "catchBlockStart": 673, "catchBlockEnd": 787, "exceptionHandlingCallStart": [722, 705, 705], "exceptionHandlingCallEnd": [751, 752, 780], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 127, "focalAPIEnd": 165, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/shresthap/clubuml2013/tree/master/trunk/Backend/ClubUml2/src/java/controller/UploadServlet.java", "rawCode": "  private void storeDatabase(\n      String username, String path, String fileName, String time, int userID) {\n    try {\n\n      Class.forName(\"com.mysql.jdbc.Driver\");\n      Connection con =\n          DriverManager.getConnection(\"jdbc:mysql://localhost:3306/clubuml2\", \"root\", \"\");\n      Statement stmnt = con.createStatement();\n      String sql1 =\n          \"INSERT INTO diagram(`diagramName`, `filePath`,`createdTime`, `owner_Id`) VALUES\"\n              + \"('\"\n              + fileName\n              + \"','\"\n              + path\n              + \"','\"\n              + time\n              + \"','\"\n              + userID\n              + \"')\";\n      stmnt.execute(sql1);\n\n    } catch (SQLException ex) {\n      Logger.getLogger(UploadServlet.class.getName()).log(Level.SEVERE, null, ex);\n    } catch (ClassNotFoundException ex) {\n      Logger.getLogger(UploadServlet.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1150, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 69, "focalAPIEnd": 101, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/sqlite-jdbc/tree/master/src/test/java/org/sqlite/ConnectionTest.java", "rawCode": "  @BeforeClass\n  public static void forName() throws Exception {\n    Class.forName(\"org.sqlite.JDBC\");\n  }\n"}, {"dataset": "forName", "exampleID": 1151, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 483, "tryExpressionEnd": 487, "tryBlockStart": 483, "tryBlockEnd": 961, "catchExpressionStart": 897, "catchExpressionEnd": 917, "catchBlockStart": 897, "catchBlockEnd": 961, "exceptionHandlingCallStart": [931], "exceptionHandlingCallEnd": [954], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 608, "focalAPIEnd": 668, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getMethod(String,Class,Class)"], "useStart": [608], "useEnd": [753], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mak326428/LevelStorage/tree/master/ic2/api/network/NetworkHelper.java", "rawCode": "  /**\n   * Immediately send an event for the specified Item to the clients in range.\n   *\n   * <p>The item should implement INetworkItemEventListener to receive the event.\n   *\n   * <p>This method doesn't do anything if executed on the server.\n   *\n   * @param itemStack ItemStack containing the item\n   * @param event Arbitrary integer to represent the event, choosing the values is up to you\n   */\n  public static void initiateClientItemEvent(ItemStack itemStack, int event) {\n    try {\n      if (NetworkManager_initiateClientItemEvent == null)\n        NetworkManager_initiateClientItemEvent =\n            Class.forName(getPackage() + \".core.network.NetworkManager\")\n                .getMethod(\"initiateClientItemEvent\", ItemStack.class, Integer.TYPE);\n      if (instance == null) instance = getInstance();\n\n      NetworkManager_initiateClientItemEvent.invoke(instance, itemStack, event);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1152, "initialization": ["String name = getSession()"], "initializationStart": [494], "initializationEnd": [521], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["forName(String)"], "tryExpressionStart": 722, "tryExpressionEnd": 726, "tryBlockStart": 722, "tryBlockEnd": 1085, "catchExpressionStart": 869, "catchExpressionEnd": 902, "catchBlockStart": 869, "catchBlockEnd": 1085, "exceptionHandlingCallStart": [1046], "exceptionHandlingCallEnd": [1070], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 775, "focalAPIEnd": 853, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)", "cls.newInstance()"], "useStart": [1046, 1124], "useEnd": [1070, 1150], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/exxcellent/wings3/tree/master/wings/src/java/org/wings/io/DeviceFactory.java", "rawCode": "  /**\n   * Returns or lazily creates the current device factory. Use {@link\n   * #setDeviceFactory(DeviceFactory)} or an <code>web.xml</code> init property <code>\n   * wings.device.factory</code> to declare an alternative deivce factory.\n   *\n   * @return The current device factory.\n   */\n  public static DeviceFactory getDeviceFactory() {\n    if (factory == null) {\n      synchronized (DeviceFactory.class) {\n        if (factory == null) {\n          String className =\n              (String) SessionManager.getSession().getProperty(\"wings.device.factory\");\n          if (className == null) {\n            className = DEFAULT_DEVICE_FACTORY;\n          }\n\n          try {\n            Class factoryClass = null;\n            try {\n              factoryClass =\n                  Class.forName(className, true, Thread.currentThread().getContextClassLoader());\n            } catch (ClassNotFoundException e) {\n              // fallback, in case the servlet container fails to set the\n              // context class loader.\n              factoryClass = Class.forName(className);\n            }\n            factory = (DeviceFactory) factoryClass.newInstance();\n          } catch (Exception e) {\n            log.fatal(\"could not load wings.device.factory: \" + className, e);\n            throw new RuntimeException(\n                \"could not load wings.device.factory: \" + className + \"(\" + e.getMessage() + \")\");\n          }\n        }\n      }\n    }\n    return factory;\n  }\n"}, {"dataset": "forName", "exampleID": 1153, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 430, "tryExpressionEnd": 434, "tryBlockStart": 430, "tryBlockEnd": 766, "catchExpressionStart": 500, "catchExpressionEnd": 535, "catchBlockStart": 500, "catchBlockEnd": 571, "exceptionHandlingCallStart": [543], "exceptionHandlingCallEnd": [564], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 454, "focalAPIEnd": 478, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map<String, Object>.put(String,cls)"], "useStart": [771], "useEnd": [800], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/IQSS/dvn/tree/master/src/DVN-ingest/src/edu/harvard/iq/dvn/ingest/org/thedata/statdataio/spi/Registry.java", "rawCode": "  /**\n   * Returns a singleton of a given class by refection\n   *\n   * @param classname the name of a class to be instantiated.\n   * @return the singleton of the supplied class.\n   */\n  public static synchronized Object getInstance(String classname) {\n\n    Object singleton = map.get(classname);\n\n    if (singleton != null) {\n      dbgLog.fine(\"Registry.getInstance(): already-registered case\");\n      return singleton;\n    }\n    try {\n      singleton = Class.forName(classname).newInstance();\n    } catch (ClassNotFoundException cnf) {\n      cnf.printStackTrace();\n    } catch (InstantiationException ie) {\n      ie.printStackTrace();\n    } catch (IllegalAccessException ia) {\n      ia.printStackTrace();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n    map.put(classname, singleton);\n    dbgLog.fine(\"Registry.getInstance(): not-registered case\");\n    return singleton;\n  }\n"}, {"dataset": "forName", "exampleID": 1154, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["debug(String,*)"], "tryExpressionStart": 284, "tryExpressionEnd": 288, "tryBlockStart": 284, "tryBlockEnd": 1619, "catchExpressionStart": 1023, "catchExpressionEnd": 1056, "catchBlockStart": 1023, "catchBlockEnd": 1141, "exceptionHandlingCallStart": [1066], "exceptionHandlingCallEnd": [1103], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 315, "focalAPIEnd": 351, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)", "cls.getConstructor()", "class.forName(String)", "cls.getMethod(String,Class[])", "cls.getMethod(String,Class[])"], "useStart": [380, 522, 716, 681, 848], "useEnd": [437, 547, 748, 749, 892], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacksonicson/twospot/tree/master/3party/Zookeeper/zookeeper-3.2.1/src/java/main/org/apache/zookeeper/ZooKeeperMain.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  void run() throws KeeperException, IOException, InterruptedException {\n    if (cl.getCommand() == null) {\n      System.out.println(\"Welcome to ZooKeeper!\");\n\n      boolean jlinemissing = false;\n      // only use jline if it's in the classpath\n      try {\n        Class consoleC = Class.forName(\"jline.ConsoleReader\");\n        Class completorC = Class.forName(\"org.apache.zookeeper.JLineZNodeCompletor\");\n\n        System.out.println(\"JLine support is enabled\");\n\n        Object console = consoleC.getConstructor().newInstance();\n\n        Object completor = completorC.getConstructor(ZooKeeper.class).newInstance(zk);\n        Method addCompletor = consoleC.getMethod(\"addCompletor\", Class.forName(\"jline.Completor\"));\n        addCompletor.invoke(console, completor);\n\n        String line;\n        Method readLine = consoleC.getMethod(\"readLine\", String.class);\n        while ((line = (String) readLine.invoke(console, getPrompt())) != null) {\n          executeLine(line);\n        }\n      } catch (ClassNotFoundException e) {\n        LOG.debug(\"Unable to start jline\", e);\n        jlinemissing = true;\n      } catch (NoSuchMethodException e) {\n        LOG.debug(\"Unable to start jline\", e);\n        jlinemissing = true;\n      } catch (InvocationTargetException e) {\n        LOG.debug(\"Unable to start jline\", e);\n        jlinemissing = true;\n      } catch (IllegalAccessException e) {\n        LOG.debug(\"Unable to start jline\", e);\n        jlinemissing = true;\n      } catch (InstantiationException e) {\n        LOG.debug(\"Unable to start jline\", e);\n        jlinemissing = true;\n      }\n\n      if (jlinemissing) {\n        System.out.println(\"JLine support is disabled\");\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        String line;\n        while ((line = br.readLine()) != null) {\n          executeLine(line);\n        }\n      }\n    }\n\n    boolean watch = processCmd(cl);\n    if (!watch) {\n      System.exit(0);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1155, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 2347, "focalAPIEnd": 2412, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)", "class.forName(String)", "cls.getMethod(String,Map<String, String>)", "cls.newInstance()"], "useStart": [2435, 2582, 2678, 2808], "useEnd": [2485, 2639, 2723, 2830], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.0.1/src/lib/com/izforge/izpack/installer/GUIInstaller.java", "rawCode": "  /**\n   * Loads the suitable L&F.\n   *\n   * @throws Exception Description of the Exception\n   */\n  protected void loadLookAndFeel() throws Exception {\n    // Do we have any preference for this OS ?\n    String syskey = \"unix\";\n    if (OsVersion.IS_WINDOWS) {\n      syskey = \"windows\";\n    } else if (OsVersion.IS_OSX) {\n      syskey = \"mac\";\n    }\n    String laf = null;\n    if (installdata.guiPrefs.lookAndFeelMapping.containsKey(syskey)) {\n      laf = installdata.guiPrefs.lookAndFeelMapping.get(syskey);\n    }\n\n    // Let's use the system LAF\n    // Resolve whether button icons should be used or not.\n    boolean useButtonIcons = true;\n    if (installdata.guiPrefs.modifier.containsKey(\"useButtonIcons\")\n        && \"no\".equalsIgnoreCase(installdata.guiPrefs.modifier.get(\"useButtonIcons\"))) {\n      useButtonIcons = false;\n    }\n    ButtonFactory.useButtonIcons(useButtonIcons);\n    boolean useLabelIcons = true;\n    if (installdata.guiPrefs.modifier.containsKey(\"useLabelIcons\")\n        && \"no\".equalsIgnoreCase(installdata.guiPrefs.modifier.get(\"useLabelIcons\"))) {\n      useLabelIcons = false;\n    }\n    LabelFactory.setUseLabelIcons(useLabelIcons);\n    if (laf == null) {\n      if (!\"mac\".equals(syskey)) {\n        // In Linux we will use the English locale, because of a bug in\n        // JRE6. In Korean, Persian, Chinese, japanese and some other\n        // locales the installer throws and exception and doesn't load\n        // at all. See http://jira.jboss.com/jira/browse/JBINSTALL-232.\n        // This is a workaround until this bug gets fixed.\n        if (\"unix\".equals(syskey)) {\n          Locale.setDefault(Locale.ENGLISH);\n        }\n        String syslaf = UIManager.getSystemLookAndFeelClassName();\n        UIManager.setLookAndFeel(syslaf);\n        if (UIManager.getLookAndFeel() instanceof MetalLookAndFeel) {\n          ButtonFactory.useButtonIcons(useButtonIcons);\n        }\n      }\n      lnf = \"swing\";\n      return;\n    }\n\n    // Kunststoff (http://www.incors.org/)\n    if (\"kunststoff\".equals(laf)) {\n      ButtonFactory.useHighlightButtons();\n      // Reset the use button icons state because useHighlightButtons\n      // make it always true.\n      ButtonFactory.useButtonIcons(useButtonIcons);\n      installdata.buttonsHColor = new Color(255, 255, 255);\n      Class<LookAndFeel> lafClass =\n          (Class<LookAndFeel>) Class.forName(\"com.incors.plaf.kunststoff.KunststoffLookAndFeel\");\n      Class mtheme = Class.forName(\"javax.swing.plaf.metal.MetalTheme\");\n      Class[] params = {mtheme};\n      Class<MetalTheme> theme =\n          (Class<MetalTheme>) Class.forName(\"com.izforge.izpack.gui.IzPackKMetalTheme\");\n      Method setCurrentThemeMethod = lafClass.getMethod(\"setCurrentTheme\", params);\n\n      // We invoke and place Kunststoff as our L&F\n      LookAndFeel kunststoff = lafClass.newInstance();\n      MetalTheme ktheme = theme.newInstance();\n      Object[] kparams = {ktheme};\n      UIManager.setLookAndFeel(kunststoff);\n      setCurrentThemeMethod.invoke(kunststoff, kparams);\n\n      lnf = \"kunststoff\";\n      return;\n    }\n\n    // Liquid (http://liquidlnf.sourceforge.net/)\n    if (\"liquid\".equals(laf)) {\n      UIManager.setLookAndFeel(\"com.birosoft.liquid.LiquidLookAndFeel\");\n      lnf = \"liquid\";\n\n      Map<String, String> params = installdata.guiPrefs.lookAndFeelParams.get(laf);\n      if (params.containsKey(\"decorate.frames\")) {\n        String value = params.get(\"decorate.frames\");\n        if (\"yes\".equals(value)) {\n          JFrame.setDefaultLookAndFeelDecorated(true);\n        }\n      }\n      if (params.containsKey(\"decorate.dialogs\")) {\n        String value = params.get(\"decorate.dialogs\");\n        if (\"yes\".equals(value)) {\n          JDialog.setDefaultLookAndFeelDecorated(true);\n        }\n      }\n\n      return;\n    }\n\n    // Metouia (http://mlf.sourceforge.net/)\n    if (\"metouia\".equals(laf)) {\n      UIManager.setLookAndFeel(\"net.sourceforge.mlf.metouia.MetouiaLookAndFeel\");\n      lnf = \"metouia\";\n      return;\n    }\n\n    // Nimbus (http://nimbus.dev.java.net/)\n    if (\"nimbus\".equals(laf)) {\n      UIManager.setLookAndFeel(\"org.jdesktop.swingx.plaf.nimbus.NimbusLookAndFeel\");\n      return;\n    }\n\n    // JGoodies Looks (http://looks.dev.java.net/)\n    if (\"looks\".equals(laf)) {\n      Map<String, String> variants = new TreeMap<String, String>();\n      variants.put(\"windows\", \"com.jgoodies.looks.windows.WindowsLookAndFeel\");\n      variants.put(\"plastic\", \"com.jgoodies.looks.plastic.PlasticLookAndFeel\");\n      variants.put(\"plastic3D\", \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\");\n      variants.put(\"plasticXP\", \"com.jgoodies.looks.plastic.Plastic3DLookAndFeel\");\n      String variant = variants.get(\"plasticXP\");\n\n      Map<String, String> params = installdata.guiPrefs.lookAndFeelParams.get(laf);\n      if (params.containsKey(\"variant\")) {\n        String param = params.get(\"variant\");\n        if (variants.containsKey(param)) {\n          variant = variants.get(param);\n        }\n      }\n\n      UIManager.setLookAndFeel(variant);\n      return;\n    }\n\n    // Substance (http://substance.dev.java.net/)\n    if (\"substance\".equals(laf)) {\n      Map<String, String> variants = new TreeMap<String, String>();\n      variants.put(\"default\", \"org.jvnet.substance.SubstanceLookAndFeel\"); // Ugly!!!\n      variants.put(\"business\", \"org.jvnet.substance.skin.SubstanceBusinessLookAndFeel\");\n      variants.put(\n          \"business-blue\", \"org.jvnet.substance.skin.SubstanceBusinessBlueSteelLookAndFeel\");\n      variants.put(\n          \"business-black\", \"org.jvnet.substance.skin.SubstanceBusinessBlackSteelLookAndFeel\");\n      variants.put(\"creme\", \"org.jvnet.substance.skin.SubstanceCremeLookAndFeel\");\n      variants.put(\"sahara\", \"org.jvnet.substance.skin.SubstanceSaharaLookAndFeel\");\n      variants.put(\"moderate\", \"org.jvnet.substance.skin.SubstanceModerateLookAndFeel\");\n      variants.put(\"officesilver\", \"org.jvnet.substance.skin.SubstanceOfficeSilver2007LookAndFeel\");\n      String variant = variants.get(\"default\");\n\n      Map<String, String> params = installdata.guiPrefs.lookAndFeelParams.get(laf);\n      if (params.containsKey(\"variant\")) {\n        String param = params.get(\"variant\");\n        if (variants.containsKey(param)) {\n          variant = variants.get(param);\n        }\n      }\n\n      UIManager.setLookAndFeel(variant);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1156, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 143, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getConstructor(Class<?>[])"], "useStart": [202], "useEnd": [243], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/codehaus/fest-git/tree/master/fest-assert/src/main/java/org/fest/assertions/ConstructorInvoker.java", "rawCode": "  Object newInstance(String className, Class<?>[] parameterTypes, Object[] parameterValues)\n      throws Exception {\n    Class<?> targetType = Class.forName(className);\n    Constructor<?> constructor = targetType.getConstructor(parameterTypes);\n    boolean accessible = constructor.isAccessible();\n    try {\n      setAccessible(constructor, true);\n      return constructor.newInstance(parameterValues);\n    } finally {\n      try {\n        setAccessible(constructor, accessible);\n      } catch (RuntimeException e) {\n      }\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1157, "initialization": ["String className = Map<String, Object>.get(String)"], "initializationStart": [1017], "initializationEnd": [1044], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 1067, "focalAPIEnd": 1092, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Logger.info(String,String,cls)"], "useStart": [1393], "useEnd": [1459], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/raydavis/sparsemapcontent/tree/master/src/main/java/org/sakaiproject/nakamura/lite/storage/jdbc/JDBCStorageClientPool.java", "rawCode": "  @Activate\n  @SuppressWarnings(\n    value = {\"NP_CLOSING_NULL\"},\n    justification = \"Invalid report, if this was the case then nothing would work\"\n  )\n  public void activate(Map<String, Object> properties) throws ClassNotFoundException {\n    this.properties = properties;\n    super.activate(properties);\n\n    connectionManager = new ConnectionManager();\n    timer = new Timer();\n    timer.schedule(connectionManager, 30000L, 30000L);\n\n    sharedCache = new ConcurrentLRUMap<String, CacheHolder>(10000);\n    // this is a default cache used where none has been provided.\n    defaultStorageManagerCache =\n        new StorageCacheManager() {\n\n          public Map<String, CacheHolder> getContentCache() {\n            return sharedCache;\n          }\n\n          public Map<String, CacheHolder> getAuthorizableCache() {\n            return sharedCache;\n          }\n\n          public Map<String, CacheHolder> getAccessControlCache() {\n            return sharedCache;\n          }\n        };\n\n    String jdbcDriver = (String) properties.get(JDBC_DRIVER);\n    Class<?> clazz = Class.forName(jdbcDriver);\n\n    connectionProperties = getConnectionProperties(properties);\n    username = StorageClientUtils.getSetting(properties.get(USERNAME), \"\");\n    password = StorageClientUtils.getSetting(properties.get(PASSWORD), \"\");\n    url = StorageClientUtils.getSetting(properties.get(CONNECTION_URL), \"\");\n\n    LOGGER.info(\"Loaded Database Driver {} as {} \", jdbcDriver, clazz);\n    JDBCStorageClient client = null;\n    try {\n      client = (JDBCStorageClient) getClient();\n      if (client == null) {\n        LOGGER.warn(\"Failed to check Schema, no connection\");\n      }\n    } catch (ClientPoolException e) {\n      LOGGER.warn(\"Failed to check Schema\", e);\n    } finally {\n      client.close();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1158, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InvocationTargetException", "exceptionHandlingCall": ["getTargetException()"], "tryExpressionStart": 588, "tryExpressionEnd": 592, "tryBlockStart": 588, "tryBlockEnd": 2702, "catchExpressionStart": 2283, "catchExpressionEnd": 2319, "catchBlockStart": 2283, "catchBlockEnd": 2584, "exceptionHandlingCallStart": [2355], "exceptionHandlingCallEnd": [2377], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 680, "focalAPIEnd": 728, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)"], "useStart": [808], "useEnd": [865], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/rollerderby/scoreboard/tree/master/jdom/src/java/org/jdom/adapters/JAXPDOMAdapter.java", "rawCode": "  /**\n   * This creates a new <code>{@link Document}</code> from an existing <code>InputStream</code> by\n   * letting a JAXP parser handle parsing using the supplied stream.\n   *\n   * @param in <code>InputStream</code> to parse.\n   * @param validate <code>boolean</code> to indicate if validation should occur.\n   * @return <code>Document</code> - instance ready for use.\n   * @throws IOException when I/O error occurs.\n   * @throws JDOMException when errors occur in parsing.\n   */\n  public Document getDocument(InputStream in, boolean validate) throws IOException, JDOMException {\n\n    try {\n      // Try using JAXP...\n      // Note we need DOM Level 2 and thus JAXP 1.1.\n      Class.forName(\"javax.xml.transform.Transformer\");\n\n      // Try JAXP 1.1 calls to build the document\n      Class factoryClass = Class.forName(\"javax.xml.parsers.DocumentBuilderFactory\");\n\n      // factory = DocumentBuilderFactory.newInstance();\n      Method newParserInstance = factoryClass.getMethod(\"newInstance\", null);\n      Object factory = newParserInstance.invoke(null, null);\n\n      // factory.setValidating(validate);\n      Method setValidating = factoryClass.getMethod(\"setValidating\", new Class[] {boolean.class});\n      setValidating.invoke(factory, new Object[] {new Boolean(validate)});\n\n      // factory.setNamespaceAware(true);\n      Method setNamespaceAware =\n          factoryClass.getMethod(\"setNamespaceAware\", new Class[] {boolean.class});\n      setNamespaceAware.invoke(factory, new Object[] {Boolean.TRUE});\n\n      // jaxpParser = factory.newDocumentBuilder();\n      Method newDocBuilder = factoryClass.getMethod(\"newDocumentBuilder\", null);\n      Object jaxpParser = newDocBuilder.invoke(factory, null);\n\n      // jaxpParser.setErrorHandler(null);\n      Class parserClass = jaxpParser.getClass();\n      Method setErrorHandler =\n          parserClass.getMethod(\"setErrorHandler\", new Class[] {org.xml.sax.ErrorHandler.class});\n      setErrorHandler.invoke(jaxpParser, new Object[] {new BuilderErrorHandler()});\n\n      // domDoc = jaxpParser.parse(in);\n      Method parse = parserClass.getMethod(\"parse\", new Class[] {InputStream.class});\n      org.w3c.dom.Document domDoc =\n          (org.w3c.dom.Document) parse.invoke(jaxpParser, new Object[] {in});\n\n      return domDoc;\n    } catch (InvocationTargetException e) {\n      Throwable targetException = e.getTargetException();\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else {\n        throw new JDOMException(targetException.getMessage(), targetException);\n      }\n    } catch (Exception e) {\n      throw new JDOMException(\"Reflection failed while parsing a document with JAXP\", e);\n    }\n\n    // Allow all exceptions to pass through\n  }\n"}, {"dataset": "forName", "exampleID": 1159, "initialization": ["String className = ObjectInput.readObject()"], "initializationStart": [347], "initializationEnd": [362], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(className==null)", "guardType": "IF {", "guardExpressionStart": 232, "guardExpressionEnd": 254, "guardBlockStart": 232, "guardBlockEnd": 311, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 439, "focalAPIEnd": 463, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["valueOf(cls,String)"], "useStart": [402], "useEnd": [469], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Lehirti/Lehirti-Game-Engine/tree/master/LehirtiGameEngine/src/lge/res/images/ImageKey.java", "rawCode": "    @SuppressWarnings(\"unchecked\")\n    @CheckForNull\n    public static ImageKey read(final @Nonnull ObjectInput in)\n        throws ClassNotFoundException, IOException {\n      final String className = (String) in.readObject();\n      if (className == null) {\n        // input was null\n        return null;\n      }\n\n      final String key = (String) in.readObject();\n      try {\n        return (ImageKey) Enum.valueOf((Class<? extends Enum>) Class.forName(className), key);\n      } catch (final ClassNotFoundException | ClassCastException e) {\n        LOGGER.warn(\n            \"Failed to reconstruct ImageKey from className \" + className + \" and key \" + key, e);\n      }\n      return null;\n    }\n"}, {"dataset": "forName", "exampleID": 1160, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Throwable", "exceptionHandlingCall": ["println(String)", "printStackTrace(*)", "new SQLNestedException(String,*)"], "tryExpressionStart": 906, "tryExpressionEnd": 910, "tryBlockStart": 906, "tryBlockEnd": 1197, "catchExpressionStart": 960, "catchExpressionEnd": 980, "catchBlockStart": 960, "catchBlockEnd": 1197, "exceptionHandlingCallStart": [1074, 1110, 1154], "exceptionHandlingCallEnd": [1100, 1138, 1188], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 920, "focalAPIEnd": 950, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/branches/KNL-1011/api/src/main/java/org/apache/commons/dbcp/SakaiBasicDataSource.java", "rawCode": "  /**\n   * Sakai changes: use the SakaiPoolableConnectionFactory, removed some not-visible (damn the use\n   * of private!) code.\n   *\n   * <p>Create (if necessary) and return the internal data source we are using to manage our\n   * connections.\n   *\n   * <p><strong>IMPLEMENTATION NOTE</strong> - It is tempting to use the \"double checked locking\"\n   * idiom in an attempt to avoid synchronizing on every single call to this method. However, this\n   * idiom fails to work correctly in the face of some optimizations that are legal for a JVM to\n   * perform.\n   *\n   * @exception SQLException if the object pool cannot be created.\n   */\n  protected synchronized DataSource createDataSource() throws SQLException {\n\n    // Return the pool if we have already created it\n    if (dataSource != null) {\n      return (dataSource);\n    }\n\n    // Load the JDBC driver class\n    if (driverClassName != null) {\n      try {\n        Class.forName(driverClassName);\n      } catch (Throwable t) {\n        String message = \"Cannot load JDBC driver class '\" + driverClassName + \"'\";\n        logWriter.println(message);\n        t.printStackTrace(logWriter);\n        throw new SQLNestedException(message, t);\n      }\n    }\n\n    // Create a JDBC driver instance\n    Driver driver = null;\n    try {\n      driver = DriverManager.getDriver(url);\n    } catch (Throwable t) {\n      String message =\n          \"Cannot create JDBC driver of class '\"\n              + (driverClassName != null ? driverClassName : \"\")\n              + \"' for connect URL '\"\n              + url\n              + \"'\";\n      logWriter.println(message);\n      t.printStackTrace(logWriter);\n      throw new SQLNestedException(message, t);\n    }\n\n    // Can't test without a validationQuery\n    if (validationQuery == null) {\n      setTestOnBorrow(false);\n      setTestOnReturn(false);\n      setTestWhileIdle(false);\n    }\n\n    // Create an object pool to contain our active connections\n    // Sakai:\n    // if ((abandonedConfig != null) && (abandonedConfig.getRemoveAbandoned() == true))\n    // {\n    // connectionPool = new AbandonedObjectPool(null, abandonedConfig);\n    // }\n    // else\n    {\n      connectionPool = new GenericObjectPool();\n    }\n    connectionPool.setMaxActive(maxActive);\n    connectionPool.setMaxIdle(maxIdle);\n    connectionPool.setMinIdle(minIdle);\n    connectionPool.setMaxWait(maxWait);\n    connectionPool.setTestOnBorrow(testOnBorrow);\n    connectionPool.setTestOnReturn(testOnReturn);\n    connectionPool.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);\n    connectionPool.setNumTestsPerEvictionRun(numTestsPerEvictionRun);\n    connectionPool.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);\n    connectionPool.setTestWhileIdle(testWhileIdle);\n\n    // Set up statement pool, if desired\n    GenericKeyedObjectPoolFactory statementPoolFactory = null;\n    if (isPoolPreparedStatements()) {\n      statementPoolFactory =\n          new GenericKeyedObjectPoolFactory(\n              null,\n              -1, // unlimited maxActive (per key)\n              GenericKeyedObjectPool.WHEN_EXHAUSTED_FAIL,\n              0, // maxWait\n              1, // maxIdle (per key)\n              maxOpenPreparedStatements);\n    }\n\n    // Set up the driver connection factory we will use\n    if (username != null) {\n      connectionProperties.put(\"user\", username);\n    } else {\n      // Sakai: log(\"DBCP DataSource configured without a 'username'\");\n    }\n\n    if (password != null) {\n      connectionProperties.put(\"password\", password);\n    } else {\n      // Sakai: log(\"DBCP DataSource configured without a 'password'\");\n    }\n\n    DriverConnectionFactory driverConnectionFactory =\n        new DriverConnectionFactory(driver, url, connectionProperties);\n\n    // Set up the poolable connection factory we will use\n    PoolableConnectionFactory connectionFactory = null;\n    try {\n      connectionFactory =\n          new SakaiPoolableConnectionFactory(\n              driverConnectionFactory,\n              connectionPool,\n              statementPoolFactory,\n              validationQuery,\n              defaultReadOnly,\n              defaultAutoCommit,\n              defaultTransactionIsolation,\n              defaultCatalog,\n              /* abandonedConfig Sakai: */ null,\n              m_rollbackOnReturn);\n      if (connectionFactory == null) {\n        throw new SQLException(\"Cannot create PoolableConnectionFactory\");\n      }\n      // Sakai: validateConnectionFactory(connectionFactory);\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SQLNestedException(\n          \"Cannot create PoolableConnectionFactory (\" + e.getMessage() + \")\", e);\n    }\n\n    // Create and return the pooling data source to manage the connections\n    dataSource = new PoolingDataSource(connectionPool);\n    ((PoolingDataSource) dataSource)\n        .setAccessToUnderlyingConnectionAllowed(isAccessToUnderlyingConnectionAllowed());\n    dataSource.setLogWriter(logWriter);\n\n    try {\n      for (int i = 0; i < initialSize; i++) {\n        connectionPool.addObject();\n      }\n    } catch (Exception e) {\n      throw new SQLNestedException(\"Error preloading the connection pool\", e);\n    }\n\n    return dataSource;\n  }\n"}, {"dataset": "forName", "exampleID": 1161, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new RequestProcessorException(String,*)"], "tryExpressionStart": 75, "tryExpressionEnd": 79, "tryBlockStart": 75, "tryBlockEnd": 409, "catchExpressionStart": 265, "catchExpressionEnd": 285, "catchBlockStart": 265, "catchBlockEnd": 409, "exceptionHandlingCallStart": [299], "exceptionHandlingCallEnd": [402], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 154, "focalAPIEnd": 187, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map<String, RequestPreprocessor>.put(String,cls)"], "useStart": [209], "useEnd": [257], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/crux-framework/tree/master/tags/crux/5.1.2/crux-runtime/src/main/java/org/cruxframework/crux/core/server/rest/core/RequestPreprocessors.java", "rawCode": "  public static void registerPreprocessor(String processorClassName) {\n    try {\n      RequestPreprocessor preprocessor =\n          (RequestPreprocessor) Class.forName(processorClassName).newInstance();\n      processors.put(processorClassName, preprocessor);\n    } catch (Exception e) {\n      throw new RequestProcessorException(\n          \"Error creating preprocessor [\" + processorClassName + \"]\", e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1162, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["Logger.fine(String)"], "tryExpressionStart": 186, "tryExpressionEnd": 190, "tryBlockStart": 186, "tryBlockEnd": 706, "catchExpressionStart": 541, "catchExpressionEnd": 576, "catchBlockStart": 541, "catchBlockEnd": 706, "exceptionHandlingCallStart": [471], "exceptionHandlingCallEnd": [525], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 198, "focalAPIEnd": 276, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/geotools-2.7.x/tree/master/modules/plugin/imageio-ext-gdal/src/main/java/org/geotools/coverageio/gdal/envihdr/EnviHdrFormatFactory.java", "rawCode": "  public boolean isAvailable() {\n    boolean available = true;\n\n    // if these classes are here, then the runtime environment has\n    // access to JAI and the JAI ImageI/O toolbox.\n    try {\n      Class.forName(\"it.geosolutions.imageio.plugins.envihdr.ENVIHdrImageReaderSpi\");\n      available = new ENVIHdrImageReaderSpi().isAvailable();\n\n      if (LOGGER.isLoggable(Level.FINE)) {\n        if (available) LOGGER.fine(\"EnviHdrFormatFactory is availaible.\");\n        else LOGGER.fine(\"EnviHdrFormatFactory is not availaible.\");\n      }\n    } catch (ClassNotFoundException cnf) {\n      if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine(\"EnviHdrFormatFactory is not availaible.\");\n\n      available = false;\n    }\n\n    return available;\n  }\n"}, {"dataset": "forName", "exampleID": 1163, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InstantiationException", "exceptionHandlingCall": ["getMessage()", "new IllegalArgumentException(String)"], "tryExpressionStart": 470, "tryExpressionEnd": 474, "tryBlockStart": 470, "tryBlockEnd": 1287, "catchExpressionStart": 712, "catchExpressionEnd": 745, "catchBlockStart": 712, "catchBlockEnd": 905, "exceptionHandlingCallStart": [877, 765], "exceptionHandlingCallEnd": [891, 892], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 498, "focalAPIEnd": 528, "followUpCheck": "cls != null", "checkType": "IF", "followUpCheckExpressionStart": 538, "followUpCheckExpressionEnd": 556, "followUpCheckBlockStart": 538, "followUpCheckBlockEnd": 1104, "use": ["cls.newInstance()"], "useStart": [630], "useEnd": [649], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bogeblad/infoglue/tree/master/src/java/org/infoglue/cms/util/sorters/ContentSort.java", "rawCode": "  /**\n   * Returns a list of sorted <code>ContentVO</code> objects.\n   *\n   * @param sorts the list using the comparatorClass specified. The comparator must implement the\n   *     interface org.infoglue.cms.util.sorters.TemplateControllerAwareComparator\n   * @return the sorted list.\n   */\n  public List getContentResult(String comparatorClass) {\n    TemplateControllerAwareComparator comp = null;\n    if (comparatorClass != null && !comparatorClass.equals(\"\")) {\n      try {\n        Class clazz = Class.forName(comparatorClass);\n        if (clazz != null) {\n          try {\n            comp = (TemplateControllerAwareComparator) clazz.newInstance();\n            comp.setController(this.controller);\n          } catch (InstantiationException e) {\n            throw new IllegalArgumentException(\n                \"Couldnt instantiate comparator class \" + comparatorClass + \" \" + e.getMessage());\n          } catch (IllegalAccessException e) {\n            throw new IllegalArgumentException(\n                \"Couldnt access comparator class \" + comparatorClass + \" \" + e.getMessage());\n          }\n        }\n      } catch (ClassNotFoundException e) {\n        throw new IllegalArgumentException(\n            \"Couldnt find comparator class \" + comparatorClass + \" \" + e.getMessage());\n      }\n    } else {\n      throw new IllegalArgumentException(\"Must specify a comparator classname\");\n    }\n\n    Collections.sort(elements, comp);\n\n    final List result = new ArrayList();\n    for (final Iterator i = elements.iterator(); i.hasNext(); ) {\n      final SortElement struct = (SortElement) i.next();\n      result.add(struct.getContentVO());\n    }\n\n    return result;\n  }\n"}, {"dataset": "forName", "exampleID": 1164, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 135, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/collectionspace/services/tree/master/services/workflow/service/src/main/java/org/collectionspace/services/workflow/WorkflowResource.java", "rawCode": "  @Override\n  // public Class<ObjectexitCommon> getCommonPartClass() {\n  public Class<?> getCommonPartClass() {\n    try {\n      return Class.forName(\"org.collectionspace.services.objectexit.WorkflowCommon\"); // .class;\n    } catch (ClassNotFoundException e) {\n      return null;\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1165, "initialization": ["String className = getRefactoredClassName(String)"], "initializationStart": [243], "initializationEnd": [276], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new ClassNotFoundException(String,ClassNotFoundException)"], "tryExpressionStart": 451, "tryExpressionEnd": 455, "tryBlockStart": 451, "tryBlockEnd": 879, "catchExpressionStart": 523, "catchExpressionEnd": 580, "catchBlockStart": 523, "catchBlockEnd": 879, "exceptionHandlingCallStart": [641], "exceptionHandlingCallEnd": [872], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(className==null)", "guardType": "IF {", "guardExpressionStart": 282, "guardExpressionEnd": 314, "guardBlockStart": 282, "guardBlockEnd": 391, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 481, "focalAPIEnd": 515, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/idega/com.idega.core/tree/master/src/java/com/idega/repository/data/RefactorClassRegistry.java", "rawCode": "  @SuppressWarnings(\"unchecked\")\n  private <T> Class<T> findClass(String className, ClassNotFoundException classNotFoundEx)\n      throws ClassNotFoundException {\n    // bad luck\n    // is the class refactored?\n    String refactoredClassName = getRefactoredClassName(className);\n    if (refactoredClassName == null) {\n      // nothing found, throw exception\n      throw classNotFoundEx;\n    }\n    // something was found...but does the class exist?\n    try {\n      return (Class<T>) Class.forName(refactoredClassName);\n    } catch (ClassNotFoundException refactoredClassNotFoundEx) {\n      // that is really bad luck (and strange)\n      throw new ClassNotFoundException(\n          \"[RefactorClassRegistry] Refactored class ( \"\n              + refactoredClassName\n              + \" ) was not found. Original class name: \"\n              + className,\n          classNotFoundEx);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1166, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 112, "focalAPIEnd": 136, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [112], "useEnd": [150], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/paddymul/wikipedia_solr/tree/master/lib/nekohtml-1.9.15/src/org/cyberneko/html/xercesbridge/XercesBridge.java", "rawCode": "  private static XercesBridge newInstanceOrNull(final String className) {\n    try {\n      return (XercesBridge) Class.forName(className).newInstance();\n    } catch (ClassNotFoundException ex) {\n    } catch (SecurityException ex) {\n    } catch (LinkageError ex) {\n    } catch (IllegalArgumentException e) {\n    } catch (IllegalAccessException e) {\n    } catch (InstantiationException e) {\n    }\n\n    return null;\n  }\n"}, {"dataset": "forName", "exampleID": 1167, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["toString()", "new StubException(*)"], "tryExpressionStart": 160, "tryExpressionEnd": 164, "tryBlockStart": 160, "tryBlockEnd": 465, "catchExpressionStart": 380, "catchExpressionEnd": 413, "catchBlockStart": 380, "catchBlockEnd": 465, "exceptionHandlingCallStart": [445, 427], "exceptionHandlingCallEnd": [457, 458], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 241, "focalAPIEnd": 287, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["HashSet.add(cls)", "getInterfacesFor(cls,HashSet,boolean)"], "useStart": [297, 325], "useEnd": [315, 364], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/AllBinary/phoneme-components-jump/tree/master/src/share/impl/jumpixc/classes/com/sun/jumpimpl/ixc/RemoteObjectType.java", "rawCode": "  private Class[] getRemoteInterfacesFor(String[] interfaceNames, ClassLoader loader)\n      throws StubException {\n    HashSet interfaces = new HashSet();\n\n    try {\n      for (int i = 0; i < interfaceNames.length; i++) {\n        Class cl = Class.forName(interfaceNames[i], true, loader);\n        interfaces.add(cl);\n        getInterfacesFor(cl, interfaces, false);\n      }\n    } catch (ClassNotFoundException e) {\n      throw new StubException(e.toString());\n    }\n\n    return (Class[]) new ArrayList(interfaces).toArray(new Class[] {});\n  }\n"}, {"dataset": "forName", "exampleID": 1168, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["println(String)"], "tryExpressionStart": 46, "tryExpressionEnd": 50, "tryBlockStart": 46, "tryBlockEnd": 250, "catchExpressionStart": 113, "catchExpressionEnd": 160, "catchBlockStart": 113, "catchBlockEnd": 250, "exceptionHandlingCallStart": [168], "exceptionHandlingCallEnd": [223], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 58, "focalAPIEnd": 105, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/hoijui/dANN/tree/master/projects/java_dann_examples/src/com/syncleus/core/dann/examples/hyperassociativemap/visualization/ViewMap.java", "rawCode": "  private static boolean checkClasses() {\n    try {\n      Class.forName(\"javax.media.j3d.NativePipeline\");\n    } catch (ClassNotFoundException caughtException) {\n      System.out.println(\"java3D library isnt in classpath!\");\n      return false;\n    }\n\n    return true;\n  }\n"}, {"dataset": "forName", "exampleID": 1169, "initialization": ["String className = String.trim()"], "initializationStart": [1051], "initializationEnd": [1059], "hasTryCatch": 1, "exceptionType": "FileNotFoundException", "exceptionHandlingCall": ["argInvalid(String)"], "tryExpressionStart": 867, "tryExpressionEnd": 871, "tryBlockStart": 867, "tryBlockEnd": 2195, "catchExpressionStart": 1602, "catchExpressionEnd": 1635, "catchBlockStart": 1602, "catchBlockEnd": 1711, "exceptionHandlingCallStart": [1647], "exceptionHandlingCallEnd": [1700], "configuration": ["className.trim()"], "configurationStart": [1051], "configurationEnd": [1059], "guardCondition": "className.length()>0 && (className)!=null", "guardType": "LOOP {", "guardExpressionStart": 995, "guardExpressionEnd": 1032, "guardBlockStart": 995, "guardBlockEnd": 1385, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 1328, "focalAPIEnd": 1344, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [1328], "useEnd": [1358], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joninvski/Appia/tree/master/branches/Xappia20090527/src/test/net/sf/appia/demo/Perf.java", "rawCode": "  public static void main(String args[]) {\n    int i;\n    LineNumberReader file = null;\n    final SessionProperties params = new SessionProperties();\n\n    for (i = 0; i < args.length; i++) {\n\n      // SESSION PARAMS #1\n      if (SESSION_PARAMS.indexOf(args[i] + \"#1\") >= 0) {\n        final String key = args[i].substring(1);\n        if (++i >= args.length) argInvalid(\"missing \" + key + \" value\");\n        params.put(key, args[i]);\n\n        // SESSION PARAMS #0\n      } else if (SESSION_PARAMS.indexOf(args[i] + \"#0-\") >= 0) {\n        final String key = args[i].substring(1);\n        params.put(key, \"true\");\n\n        // DEBUG\n      } else if (args[i].equals(\"-debug\")) {\n        params.put(\"debug\", \"true\");\n        debug = true;\n\n        // QOS\n      } else if (args[i].equals(\"-qos\")) {\n        if (++i >= args.length) argInvalid(\"missing qos file name\");\n        try {\n          file = new LineNumberReader(new FileReader(args[i]));\n          String s = null;\n          int j = 0;\n          while ((s = file.readLine()) != null) {\n            s = s.trim();\n            if (s.length() > 0) {\n              if (j == qos.length - 1) {\n                final Layer[] aux = new Layer[qos.length * 2];\n                System.arraycopy(qos, 0, aux, 0, j);\n                qos = aux;\n              }\n              qos[j++] = (Layer) Class.forName(s).newInstance();\n            }\n          }\n          if (j < qos.length - 1) {\n            final Layer[] aux = new Layer[j + 1];\n            System.arraycopy(qos, 0, aux, 0, j);\n            qos = aux;\n          }\n          qos[j] = new PerfLayer();\n        } catch (FileNotFoundException ex) {\n          argInvalid(\"qos file not found: \\\"\" + args[i] + \"\\\"\");\n        } catch (IOException ex) {\n          ex.printStackTrace();\n          argInvalid(\"impossible to read qos file: \\\"\" + args[i] + \"\\\"\");\n        } catch (ClassNotFoundException ex) {\n          argInvalid(\"class not found: \" + ex.getMessage());\n        } catch (InstantiationException ex) {\n          argInvalid(\"impossible to create layer: \" + ex.getMessage());\n        } catch (IllegalAccessException ex) {\n          argInvalid(\"impossible to create layer: \" + ex.getMessage());\n        }\n\n        // G\n      } else if (args[i].equals(\"-g\")) {\n        if (++i >= args.length) argInvalid(\"missing \\\"\" + args[i - 1] + \"\\\" value\");\n        try {\n          groups = Integer.parseInt(args[i]);\n        } catch (NumberFormatException ex) {\n          argInvalid(\"illegal value: \" + args[i]);\n        }\n\n        // INSTANCES\n      } else if (args[i].equals(\"-instances\")) {\n        if (++i >= args.length) argInvalid(\"missing \\\"\" + args[i - 1] + \"\\\" value\");\n        try {\n          instances = Integer.parseInt(args[i]);\n        } catch (NumberFormatException ex) {\n          argInvalid(\"illegal value: \" + args[i]);\n        }\n\n        // LWG\n      } else if (args[i].equals(\"-lwg\")) {\n        lwg = true;\n\n        // HELP\n      } else if (args[i].equals(\"-help\")) {\n        printUsage();\n        System.exit(0);\n\n        // DEFAULT\n      } else {\n        argInvalid(\"Invalid parameters: \" + args[i]);\n      }\n    }\n\n    System.out.println(\"Perf: QoS\");\n    for (int k = 0; k < qos.length; k++) {\n      System.out.println(\" \" + k + \": \" + qos[k]);\n    }\n\n    System.out.println(\"instances=\" + instances + \" groups=\" + groups);\n    PerfSession.instances(instances * groups);\n\n    /* Create a QoS */\n    QoS myQoS = null;\n    try {\n      myQoS = new QoS(\"Perf QoS\", qos);\n    } catch (AppiaInvalidQoSException ex) {\n      System.err.println(\"Invalid QoS\");\n      System.err.println(ex.getMessage());\n      System.exit(1);\n    }\n\n    for (; instances > 0; instances--) {\n      final Appia appiaInstance = new Appia();\n      ThreadFactory threadFactory = null;\n\n      // TODO: test schedulers\n      final EventScheduler es = new EventScheduler(appiaInstance);\n\n      if (debug)\n        System.out.println(\"New Instance \\\"\" + appiaInstance + \"\\\" with Scheduler \\\"\" + es + \"\\\"\");\n\n      // Session lwg_session=null;\n      for (int g = groups; g > 0; g--) {\n        final Channel myChannel = myQoS.createUnboundChannel(\"Perf Channel \" + g, es);\n        threadFactory = myChannel.getThreadFactory();\n        final PerfSession ps = (PerfSession) qos[qos.length - 1].createSession();\n        params.put(\"group\", \"Perf Group \" + g);\n        ps.init(params);\n\n        final ChannelCursor cc = myChannel.getCursor();\n        try {\n          cc.top();\n          cc.setSession(ps);\n        } catch (AppiaCursorException ex) {\n          System.err.println(\"Unexpected exception in main. Type code:\" + ex.type);\n          System.exit(1);\n        }\n\n        // if (lwg) {\n        // try {\n        // cc.down();\n        // while (cc.isPositioned()) {\n        // if (cc.getLayer() instanceof appia.protocols.lwg.LwgLayer) {\n        // if (lwg_session == null)\n        // lwg_session=cc.getLayer().createSession();\n        // cc.setSession(lwg_session);\n        // }\n        // cc.down();\n        // }\n        // } catch(AppiaCursorException ex) {\n        // System.err.println(\"Unexpected exception in main. Type code:\"+\n        // ex.type);\n        // System.exit(1);\n        // }\n        // }\n\n        /* Remaining ones are created by default. Just tell the channel to start */\n        try {\n          myChannel.start();\n        } catch (AppiaDuplicatedSessionsException ex) {\n          System.err.println(\n              \"Sessions binding strangely resulted in \"\n                  + \"one single sessions occurring more than \"\n                  + \"once in a channel\");\n          System.exit(1);\n        }\n      }\n\n      if (instances > 1) {\n        final Thread t =\n            threadFactory.newThread(\n                new Runnable() {\n                  public void run() {\n                    System.out.println(\"Instance \" + appiaInstance + \" running on thread \" + this);\n                    appiaInstance.instanceRun();\n                  }\n                });\n        t.setName(\"Perf\");\n        t.start();\n      } else {\n        System.out.println(\n            \"Instance \" + appiaInstance + \" running on thread \" + Thread.currentThread());\n        appiaInstance.instanceRun();\n      }\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1170, "initialization": ["String className = Map<String, String>.get(String)"], "initializationStart": [204], "initializationEnd": [235], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 329, "tryExpressionEnd": 333, "tryBlockStart": 329, "tryBlockEnd": 646, "catchExpressionStart": 418, "catchExpressionEnd": 451, "catchBlockStart": 418, "catchBlockEnd": 527, "exceptionHandlingCallStart": [465], "exceptionHandlingCallEnd": [520], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(className==null)", "guardType": "IF {", "guardExpressionStart": 241, "guardExpressionEnd": 269, "guardBlockStart": 241, "guardBlockEnd": 296, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 348, "focalAPIEnd": 378, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.asSubclass(Class)"], "useStart": [348], "useEnd": [410], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vaadin/gwt/tree/master/user/src/com/google/gwt/uibinder/rebind/UiBinderWriter.java", "rawCode": "  private Class<? extends ElementParser> getParserForClass(JClassType uiClass) {\n    // Find the associated parser.\n    String uiClassName = uiClass.getQualifiedSourceName();\n    String parserClassName = elementParsers.get(uiClassName);\n    if (parserClassName == null) {\n      return null;\n    }\n\n    // And instantiate it.\n    try {\n      return Class.forName(parserClassName).asSubclass(ElementParser.class);\n    } catch (ClassNotFoundException e) {\n      throw new RuntimeException(\"Unable to instantiate parser\", e);\n    } catch (ClassCastException e) {\n      throw new RuntimeException(parserClassName + \" must extend ElementParser\");\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1171, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 311, "focalAPIEnd": 330, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()", "cls.newInstance()"], "useStart": [416, 1803], "useEnd": [439, 1826], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/harshasraja/mscthesis/tree/master/ResearchTestApplication/src/harsha/thesis/api/solution1/dao/BaseDAO.java", "rawCode": "  public List<BaseEntity> read(String type)\n      throws ClassNotFoundException, InstantiationException, IllegalAccessException,\n          IllegalArgumentException, InvocationTargetException {\n    logger.debug(\"Inside read with parameters [Type]:\" + type);\n    Class<BaseEntity> tempClass = (Class<BaseEntity>) Class.forName(type);\n\n    List<BaseEntity> list = new LinkedList<BaseEntity>();\n\n    BaseEntity entity = tempClass.newInstance();\n    String primaryKey = getPrimaryKeyFieldForEntity(entity);\n    Method[] methods = entity.getClass().getDeclaredMethods();\n    String columnFamily = entity.getColumnFamilyRepresentation();\n\n    logger.debug(\"Column family in RangeSliceQuery:\" + columnFamily);\n\n    RangeSlicesQuery<String, String, String> rangeSlicesQuery = connection.getRangeSliceQuery();\n    rangeSlicesQuery.setColumnFamily(columnFamily);\n    rangeSlicesQuery.setKeys(\"\", \"\");\n    rangeSlicesQuery.setRange(\"\", \"\", false, 9);\n\n    rangeSlicesQuery.setRowCount(1000);\n\n    QueryResult<OrderedRows<String, String, String>> result = rangeSlicesQuery.execute();\n\n    Rows<String, String, String> orderRows = result.get();\n\n    for (Row<String, String, String> row : orderRows) {\n\n      logger.debug(\"Key=\" + row.getKey() + \"::> \");\n      List<HColumn<String, String>> columns = row.getColumnSlice().getColumns();\n      for (HColumn<String, String> hColumn : columns) {\n        for (Method method : methods) {\n          if (method.getName().equals(\"set\" + hColumn.getName())) {\n            method.invoke(entity, hColumn.getValue());\n          } else if (method.getName().equals(\"set\" + primaryKey)) {\n            method.invoke(entity, row.getKey());\n          }\n        }\n\n        logger.debug(hColumn.getName() + \":\" + hColumn.getValue() + \">>\");\n      }\n      list.add(entity);\n      entity = tempClass.newInstance();\n    }\n\n    return list;\n  }\n"}, {"dataset": "forName", "exampleID": 1172, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "java.lang.Exception", "exceptionHandlingCall": ["toString()", "log(String,String)"], "tryExpressionStart": 88, "tryExpressionEnd": 92, "tryBlockStart": 88, "tryBlockEnd": 1728, "catchExpressionStart": 765, "catchExpressionEnd": 804, "catchBlockStart": 765, "catchBlockEnd": 1213, "exceptionHandlingCallStart": [1042, 822], "exceptionHandlingCallEnd": [1063, 1196], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 125, "focalAPIEnd": 156, "followUpCheck": "class2.getSuperclass() == cls", "checkType": "IF", "followUpCheckExpressionStart": 604, "followUpCheckExpressionEnd": 641, "followUpCheckBlockStart": 604, "followUpCheckBlockEnd": 1227, "use": ["class.forName(String)"], "useStart": [525], "useEnd": [590], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SiteView/NEWECC9.2/tree/master/com.siteview.kernel.core/src/COM/dragonflow/XmlApi/XmlApiRequest.java", "rawCode": "  public static jgl.Array getObjects(String s) {\n    jgl.Array array = new Array();\n    try {\n      java.lang.Class class1 = java.lang.Class.forName(\"\" + s);\n      File file = new File(Platform.getRoot() + \"/classes/COM/dragonflow/Standard\" + s);\n      String as[] = file.list();\n      for (int i = 0; i < as.length; i++) {\n        if (as[i].endsWith(\".class\")) {\n          int j = as[i].lastIndexOf(\".class\");\n          String s1 = as[i].substring(0, j);\n          try {\n            java.lang.Class class2 =\n                java.lang.Class.forName(\"COM.dragonflow.Standard\" + s + \".\" + s1);\n            if (class2.getSuperclass() == class1) {\n              try {\n                class2.getField(\"is\" + s + \"Object\");\n                array.add(s1);\n              } catch (java.lang.Exception exception1) {\n                COM.dragonflow.Log.LogManager.log(\n                    \"Error\",\n                    \"XmlApiRequest.getObjects(\"\n                        + s\n                        + \") failed with exception '\"\n                        + exception1.toString()\n                        + \"' while adding class '\"\n                        + as[i]\n                        + \"' to myObjects array\");\n              }\n            }\n          } catch (java.lang.Throwable throwable) {\n            COM.dragonflow.Log.LogManager.log(\n                \"Error\",\n                \"XmlApiRequest.getObjects(\"\n                    + s\n                    + \") Standard directory handler failed with exception '\"\n                    + throwable.toString()\n                    + \"' while processing file '\"\n                    + as[i]\n                    + \"'\");\n          }\n        }\n      }\n\n    } catch (java.lang.Exception exception) {\n    }\n    return array;\n  }\n"}, {"dataset": "forName", "exampleID": 1173, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 470, "tryExpressionEnd": 474, "tryBlockStart": 470, "tryBlockEnd": 961, "catchExpressionStart": 836, "catchExpressionEnd": 869, "catchBlockStart": 836, "catchBlockEnd": 903, "exceptionHandlingCallStart": [877], "exceptionHandlingCallEnd": [896], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 483, "focalAPIEnd": 505, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wallnerryan/floodlight/tree/master/src/main/java/net/floodlightcontroller/qos/QoSDBStorageSource.java", "rawCode": "  public void connectToDB() {\n\n    try {\n      // load a properties file\n      prop.load(new FileInputStream(\"src/main/resources/db.mysql.properties\"));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    databaseUrl = prop.getProperty(\"dburl\");\n    uname = prop.getProperty(\"username\");\n    pwd = prop.getProperty(\"password\");\n    System.out.println(\"Connected to: \" + databaseUrl);\n    // System.out.println(uname);\n    // System.out.println(pwd);\n\n    try {\n\n      Class.forName(dbClass);\n      Connection con = DriverManager.getConnection(databaseUrl, uname, pwd);\n      Statement stmt = con.createStatement();\n      ResultSet rs = stmt.executeQuery(query);\n\n      while (rs.next()) {\n        dbtime = rs.getString(1);\n        System.out.println(dbtime);\n      } // end while\n\n      con.close();\n    } // end try\n    catch (ClassNotFoundException e) {\n      e.printStackTrace();\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1174, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new JasonException(String,*)"], "tryExpressionStart": 382, "tryExpressionEnd": 386, "tryBlockStart": 382, "tryBlockEnd": 958, "catchExpressionStart": 841, "catchExpressionEnd": 861, "catchBlockStart": 841, "catchBlockEnd": 958, "exceptionHandlingCallStart": [875], "exceptionHandlingCallEnd": [951], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 413, "focalAPIEnd": 435, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new TransitionSystem(cls,*,Settings,AgArch)", "class.forName(*)", "cls.setBB(BeliefBase)", "cls.initAg()", "init(cls,*)", "cls.load(String)"], "useStart": [458, 552, 610, 697, 717, 765], "useEnd": [514, 588, 622, 708, 757, 779], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Monomachus/Jason.NET/tree/master/javaSrc/jason/asSemantics/Agent.java", "rawCode": "  /**\n   * Setup the default agent configuration.\n   *\n   * <p>Creates the agent class defined by <i>agClass</i>, default is jason.asSemantics.Agent.\n   * Creates the TS for the agent. Creates the belief base for the agent.\n   */\n  public static Agent create(\n      AgArch arch, String agClass, ClassParameters bbPars, String asSrc, Settings stts)\n      throws JasonException {\n    try {\n      Agent ag = (Agent) Class.forName(agClass).newInstance();\n\n      new TransitionSystem(ag, new Circumstance(), stts, arch);\n\n      BeliefBase bb = (BeliefBase) Class.forName(bbPars.getClassName()).newInstance();\n      ag.setBB(bb); // the agent's BB have to be already set for the BB initialisation\n      ag.initAg();\n\n      bb.init(ag, bbPars.getParametersArray());\n      ag.load(asSrc); // load the source code of the agent\n      return ag;\n    } catch (Exception e) {\n      throw new JasonException(\"as2j: error creating the customised Agent class! - \", e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1175, "initialization": ["String className = XmlPullParser.nextText()"], "initializationStart": [1286], "initializationEnd": [1303], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["printStackTrace()"], "tryExpressionStart": 1874, "tryExpressionEnd": 1878, "tryBlockStart": 1874, "tryBlockEnd": 2421, "catchExpressionStart": 2316, "catchExpressionEnd": 2352, "catchBlockStart": 2316, "catchBlockEnd": 2421, "exceptionHandlingCallStart": [2376], "exceptionHandlingCallEnd": [2398], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 1973, "focalAPIEnd": 1997, "followUpCheck": "IQProvider.class.isAssignableFrom(cls)", "checkType": "IF", "followUpCheckExpressionStart": 2021, "followUpCheckExpressionEnd": 2069, "followUpCheckBlockStart": 2021, "followUpCheckBlockEnd": 2293, "use": ["cls.newInstance()", "Map<String, Object>.put(String,cls)", "class.forName(String)", "cls.newInstance()", "Map<String, Object>.put(String,cls)"], "useStart": [2117, 2238, 3589, 3753, 3887], "useEnd": [2139, 2268, 3613, 3775, 3924], "hasFinally": 1, "cleanUpCall": ["InputStream.close()"], "finallyExpressionStart": 4248, "finallyExpressionEnd": 4256, "finallyBlockStart": 4248, "finallyBlockEnd": 4400, "cleanUpCallStart": [4290], "cleanUpCallEnd": [4312], "url": "https://github.com/vyloy/lnvc/tree/master/common/smack_src_3_2_1/source/org/jivesoftware/smack/provider/ProviderManager.java", "rawCode": "  protected void initialize() {\n    // Load IQ processing providers.\n    try {\n      // Get an array of class loaders to try loading the providers files from.\n      ClassLoader[] classLoaders = getClassLoaders();\n      for (ClassLoader classLoader : classLoaders) {\n        Enumeration providerEnum = classLoader.getResources(\"META-INF/smack.providers\");\n        while (providerEnum.hasMoreElements()) {\n          URL url = (URL) providerEnum.nextElement();\n          InputStream providerStream = null;\n          try {\n            providerStream = url.openStream();\n            XmlPullParser parser = new MXParser();\n            parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true);\n            parser.setInput(providerStream, \"UTF-8\");\n            int eventType = parser.getEventType();\n            do {\n              if (eventType == XmlPullParser.START_TAG) {\n                if (parser.getName().equals(\"iqProvider\")) {\n                  parser.next();\n                  parser.next();\n                  String elementName = parser.nextText();\n                  parser.next();\n                  parser.next();\n                  String namespace = parser.nextText();\n                  parser.next();\n                  parser.next();\n                  String className = parser.nextText();\n                  // Only add the provider for the namespace if one isn't\n                  // already registered.\n                  String key = getProviderKey(elementName, namespace);\n                  if (!iqProviders.containsKey(key)) {\n                    // Attempt to load the provider class and then create\n                    // a new instance if it's an IQProvider. Otherwise, if it's\n                    // an IQ class, add the class object itself, then we'll use\n                    // reflection later to create instances of the class.\n                    try {\n                      // Add the provider to the map.\n                      Class provider = Class.forName(className);\n                      if (IQProvider.class.isAssignableFrom(provider)) {\n                        iqProviders.put(key, provider.newInstance());\n                      } else if (IQ.class.isAssignableFrom(provider)) {\n                        iqProviders.put(key, provider);\n                      }\n                    } catch (ClassNotFoundException cnfe) {\n                      cnfe.printStackTrace();\n                    }\n                  }\n                } else if (parser.getName().equals(\"extensionProvider\")) {\n                  parser.next();\n                  parser.next();\n                  String elementName = parser.nextText();\n                  parser.next();\n                  parser.next();\n                  String namespace = parser.nextText();\n                  parser.next();\n                  parser.next();\n                  String className = parser.nextText();\n                  // Only add the provider for the namespace if one isn't\n                  // already registered.\n                  String key = getProviderKey(elementName, namespace);\n                  if (!extensionProviders.containsKey(key)) {\n                    // Attempt to load the provider class and then create\n                    // a new instance if it's a Provider. Otherwise, if it's\n                    // a PacketExtension, add the class object itself and\n                    // then we'll use reflection later to create instances\n                    // of the class.\n                    try {\n                      // Add the provider to the map.\n                      Class provider = Class.forName(className);\n                      if (PacketExtensionProvider.class.isAssignableFrom(provider)) {\n                        extensionProviders.put(key, provider.newInstance());\n                      } else if (PacketExtension.class.isAssignableFrom(provider)) {\n                        extensionProviders.put(key, provider);\n                      }\n                    } catch (ClassNotFoundException cnfe) {\n                      cnfe.printStackTrace();\n                    }\n                  }\n                }\n              }\n              eventType = parser.next();\n            } while (eventType != XmlPullParser.END_DOCUMENT);\n          } finally {\n            try {\n              providerStream.close();\n            } catch (Exception e) {\n              // Ignore.\n            }\n          }\n        }\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1176, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new Exception(String)"], "tryExpressionStart": 162, "tryExpressionEnd": 166, "tryBlockStart": 162, "tryBlockEnd": 347, "catchExpressionStart": 244, "catchExpressionEnd": 277, "catchBlockStart": 244, "catchBlockEnd": 347, "exceptionHandlingCallStart": [291], "exceptionHandlingCallEnd": [340], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 174, "focalAPIEnd": 236, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sortdc/SortDC/tree/master/src/org/sortdc/sortdc/Tokenization.java", "rawCode": "  /**\n   * Enables stemming and sets language\n   *\n   * @param lang\n   * @throws Exception\n   */\n  public void enableStemming(String lang) throws Exception {\n    try {\n      Class.forName(\"org.tartarus.snowball.ext.\" + lang + \"Stemmer\");\n    } catch (ClassNotFoundException e) {\n      throw new Exception(\"Language not recognized: \" + lang);\n    }\n    this.lang = lang;\n    this.apply_stemming = true;\n  }\n"}, {"dataset": "forName", "exampleID": 1177, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 45, "focalAPIEnd": 99, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/apache-commons-dbcp/tree/master/branches/dbcp/src/test/org/apache/commons/dbcp/TestJOCLed.java", "rawCode": "  public void setUp() throws Exception {\n    Class.forName(\"org.apache.commons.dbcp.PoolingDriver\");\n  }\n"}, {"dataset": "forName", "exampleID": 1178, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 472, "focalAPIEnd": 498, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/virgo.eclipse-mirror/tree/master/hotfix/source/openejb-core_4.5.2/src.original/main/java/org/apache/openejb/util/Logger.java", "rawCode": "  private static Class<?> load(final String factoryName) {\n    try {\n      final ClassLoader classLoader = Logger.class.getClassLoader();\n      return classLoader.loadClass(factoryName);\n    } catch (Throwable e) {\n      // Ignore\n    }\n\n    try {\n      final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n      return contextClassLoader.loadClass(factoryName);\n    } catch (Throwable e1) {\n      // Ignore\n    }\n\n    try {\n      return Class.forName(factoryName);\n    } catch (Throwable e2) {\n      // Ignore\n    }\n\n    return null;\n  }\n"}, {"dataset": "forName", "exampleID": 1179, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 770, "focalAPIEnd": 836, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)", "cls.newInstance()"], "useStart": [917, 1010], "useEnd": [979, 1035], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/janrose/gpsmid/tree/master/src/de/ueller/midlet/gps/data/Gpx.java", "rawCode": "  private boolean receiveGpx() {\n    try {\n      boolean success;\n      String jsr172Version = null;\n      Class parserClass;\n      Object parserObject;\n      GpxParser parser;\n      GpxImportHandler gpxH = new GpxImportHandler(maxDistance, this, feedbackListener);\n      try {\n        jsr172Version = System.getProperty(\"xml.jaxp.subset.version\");\n      } catch (RuntimeException re) {\n        /**\n         * Some phones throw exceptions if trying to access properties that don't exist, so we have\n         * to catch these and just ignore them.\n         */\n      } catch (Exception e) {\n        /** See above */\n      }\n      if ((jsr172Version != null) && (jsr172Version.length() > 0)) {\n        logger.info(\"Using builtin jsr 172 XML parser\");\n        parserClass = Class.forName(\"de.ueller.midlet.gps.importexport.Jsr172GpxParser\");\n      } else {\n        logger.info(\"Using QDXMLParser\");\n        parserClass = Class.forName(\"de.ueller.midlet.gps.importexport.QDGpxParser\");\n      }\n      parserObject = parserClass.newInstance();\n      parser = (GpxParser) parserObject;\n\n      applyRecordingRules = false;\n      success = parser.parse(in, gpxH);\n      applyRecordingRules = true;\n      in.close();\n      importExportMessage = gpxH.getMessage();\n\n      return success;\n    } catch (ClassNotFoundException cnfe) {\n      importExportMessage = \"Your phone does not support XML parsing\";\n    } catch (Exception e) {\n      importExportMessage = \"Something went wrong while importing GPX, \" + e;\n    }\n    return false;\n  }\n"}, {"dataset": "forName", "exampleID": 1180, "initialization": ["String className = BlojsomConfiguration.getFetcherClass()"], "initializationStart": [700], "initializationEnd": [738], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["error(*)", "new BlojsomPluginException(*)"], "tryExpressionStart": 744, "tryExpressionEnd": 748, "tryBlockStart": 744, "tryBlockEnd": 1434, "catchExpressionStart": 1002, "catchExpressionEnd": 1035, "catchBlockStart": 1002, "catchBlockEnd": 1109, "exceptionHandlingCallStart": [1043, 1073], "exceptionHandlingCallEnd": [1059, 1102], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 777, "focalAPIEnd": 808, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [844], "useEnd": [870], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/branches/blojsom-2_27-final/blojsom-2.0/plugins/src/org/blojsom/plugin/trackback/TrackbackPlugin.java", "rawCode": "  /**\n   * Initialize this plugin. This method only called when the plugin is instantiated.\n   *\n   * @param servletConfig Servlet config object for the plugin to retrieve any initialization\n   *     parameters\n   * @param blojsomConfiguration {@link org.blojsom.blog.BlojsomConfiguration} information\n   * @throws BlojsomPluginException If there is an error initializing the plugin\n   */\n  public void init(ServletConfig servletConfig, BlojsomConfiguration blojsomConfiguration)\n      throws BlojsomPluginException {\n    super.init(servletConfig, blojsomConfiguration);\n\n    _blojsomConfiguration = blojsomConfiguration;\n    _ipAddressTrackbackTimes = new HashMap(10);\n    String fetcherClassName = blojsomConfiguration.getFetcherClass();\n    try {\n      Class fetcherClass = Class.forName(fetcherClassName);\n      _fetcher = (BlojsomFetcher) fetcherClass.newInstance();\n      _fetcher.init(servletConfig, blojsomConfiguration);\n      _logger.info(\"Added blojsom fetcher: \" + fetcherClassName);\n    } catch (ClassNotFoundException e) {\n      _logger.error(e);\n      throw new BlojsomPluginException(e);\n    } catch (InstantiationException e) {\n      _logger.error(e);\n      throw new BlojsomPluginException(e);\n    } catch (IllegalAccessException e) {\n      _logger.error(e);\n      throw new BlojsomPluginException(e);\n    } catch (BlojsomFetcherException e) {\n      _logger.error(e);\n      throw new BlojsomPluginException(e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1181, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new IllegalArgumentException(*)"], "tryExpressionStart": 92, "tryExpressionEnd": 96, "tryBlockStart": 92, "tryBlockEnd": 226, "catchExpressionStart": 141, "catchExpressionEnd": 174, "catchBlockStart": 141, "catchBlockEnd": 226, "exceptionHandlingCallStart": [188], "exceptionHandlingCallEnd": [219], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 111, "focalAPIEnd": 133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yanchenko/droidparts/tree/master/droidparts/src/org/droidparts/inner/ReflectionUtils.java", "rawCode": "  public static Class<?> classForName(String clsName) throws IllegalArgumentException {\n    try {\n      return Class.forName(clsName);\n    } catch (ClassNotFoundException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1182, "initialization": ["String className = Vector.elementAt(int)"], "initializationStart": [137], "initializationEnd": [162], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["println(*)"], "tryExpressionStart": 170, "tryExpressionEnd": 174, "tryBlockStart": 170, "tryBlockEnd": 404, "catchExpressionStart": 344, "catchExpressionEnd": 364, "catchBlockStart": 344, "catchBlockEnd": 404, "exceptionHandlingCallStart": [374], "exceptionHandlingCallEnd": [395], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 194, "focalAPIEnd": 218, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [244], "useEnd": [259], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/tinyprod/prod/tree/master/support/sdk/java/net/tinyos/mviz/MessageInput.java", "rawCode": "  private void loadMessages(Vector packetVector) {\n    for (int i = 0; i < packetVector.size(); i++) {\n      String className = (String) packetVector.elementAt(i);\n      try {\n        Class c = Class.forName(className);\n        Object packet = c.newInstance();\n        Message msg = (Message) packet;\n        msgVector.addElement(msg);\n      } catch (Exception e) {\n        System.err.println(e);\n      }\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1183, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InstantiationException", "exceptionHandlingCall": ["printStackTrace()", "getMessage()", "println(*)"], "tryExpressionStart": 257, "tryExpressionEnd": 261, "tryBlockStart": 257, "tryBlockEnd": 914, "catchExpressionStart": 333, "catchExpressionEnd": 366, "catchBlockStart": 333, "catchBlockEnd": 526, "exceptionHandlingCallStart": [376, 450, 405], "exceptionHandlingCallEnd": [395, 464, 465], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 271, "focalAPIEnd": 309, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [271], "useEnd": [323], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bomm/thera-pi-2/tree/master/RehaStatistik/src/rehaStatistik/RehaStatistik.java", "rawCode": "    private void StarteDB() {\n      final RehaStatistik obj = RehaStatistik.thisClass;\n\n      final String sDB = \"SQL\";\n      if (obj.conn != null) {\n        try {\n          obj.conn.close();\n        } catch (final SQLException e) {\n        }\n      }\n      try {\n        Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n      } catch (InstantiationException e) {\n        e.printStackTrace();\n        System.out.println(sDB + \"Treiberfehler: \" + e.getMessage());\n        RehaStatistik.DbOk = false;\n        return;\n      } catch (IllegalAccessException e) {\n        e.printStackTrace();\n        System.out.println(sDB + \"Treiberfehler: \" + e.getMessage());\n        RehaStatistik.DbOk = false;\n        return;\n      } catch (ClassNotFoundException e) {\n        e.printStackTrace();\n        System.out.println(sDB + \"Treiberfehler: \" + e.getMessage());\n        RehaStatistik.DbOk = false;\n        return;\n      }\n      try {\n\n        obj.conn = (Connection) DriverManager.getConnection(dbIpAndName, dbUser, dbPassword);\n        sqlInfo.setConnection(obj.conn);\n        RehaStatistik.DbOk = true;\n        System.out.println(\"Datenbankkontakt hergestellt\");\n      } catch (final SQLException ex) {\n        System.out.println(\"SQLException: \" + ex.getMessage());\n        System.out.println(\"SQLState: \" + ex.getSQLState());\n        System.out.println(\"VendorError: \" + ex.getErrorCode());\n        RehaStatistik.DbOk = false;\n      }\n      return;\n    }\n"}, {"dataset": "forName", "exampleID": 1184, "initialization": ["String name = String.substring(int,int)", "ClassLoader loader = JDBCStore.getConfiguration()"], "initializationStart": [387, 531], "initializationEnd": [408, 568], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new StoreException(*)"], "tryExpressionStart": 700, "tryExpressionEnd": 704, "tryBlockStart": 700, "tryBlockEnd": 843, "catchExpressionStart": 762, "catchExpressionEnd": 798, "catchBlockStart": 762, "catchBlockEnd": 843, "exceptionHandlingCallStart": [812], "exceptionHandlingCallEnd": [836], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(name,initialize,loader)", "focalAPIStart": 718, "focalAPIEnd": 754, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["StoreContext.newObjectId(cls,String)"], "useStart": [862], "useEnd": [890], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wso2/commons/tree/master/openjpa-2.2.0/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/meta/strats/UntypedPCValueHandler.java", "rawCode": "  public Object toObjectValue(\n      ValueMapping vm,\n      Object val,\n      OpenJPAStateManager sm,\n      JDBCStore store,\n      JDBCFetchConfiguration fetch)\n      throws SQLException {\n    if (val == null) return null;\n\n    String str = (String) val;\n    int idx = str.indexOf(':');\n    if (idx == -1) throw new StoreException(_loc.get(\"oid-invalid\", str, vm));\n    String clsName = str.substring(0, idx);\n    String oidStr = str.substring(idx + 1);\n\n    StoreContext ctx = store.getContext();\n    ClassLoader loader =\n        store\n            .getConfiguration()\n            .getClassResolverInstance()\n            .getClassLoader(vm.getType(), ctx.getClassLoader());\n    Class cls = null;\n    try {\n      cls = Class.forName(clsName, true, loader);\n    } catch (ClassNotFoundException cnfe) {\n      throw new StoreException(cnfe);\n    }\n\n    Object oid = ctx.newObjectId(cls, oidStr);\n    return store.find(oid, vm, fetch);\n  }\n"}, {"dataset": "forName", "exampleID": 1185, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["new FrontControllerException(*)"], "tryExpressionStart": 225, "tryExpressionEnd": 229, "tryBlockStart": 225, "tryBlockEnd": 707, "catchExpressionStart": 631, "catchExpressionEnd": 651, "catchBlockStart": 631, "catchBlockEnd": 707, "exceptionHandlingCallStart": [667], "exceptionHandlingCallEnd": [698], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 310, "focalAPIEnd": 538, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.execute(CommandInput)"], "useStart": [583], "useEnd": [621], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lsegal/jml4disco/tree/master/org.jmlspecs.jml4.esc.distribution.configuration/src/org/jmlspecs/jml4/esc/distribution/configuration/commands/prover/SetNumberOfProverProcesses.java", "rawCode": "  @Override\n  public void execute(CommandInput arg) throws FrontControllerException {\n    String proverName = arg.getParameter(\"Prover-Name\");\n    if (proverName != null) {\n      FrontCommand addProverProcessesCommand;\n      try {\n        addProverProcessesCommand =\n            (FrontCommand)\n                Class.forName(\n                        \"org.jmlspecs.jml4.esc.distribution.configuration.commands.prover.setNumberOfProverProcesses.SetNumberOf\"\n                            + proverName\n                            + \"Processes\")\n                    .newInstance();\n        addProverProcessesCommand.execute(arg);\n      } catch (Exception e) {\n        throw new FrontControllerException(e);\n      }\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1186, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getMessage()", "println(*)"], "tryExpressionStart": 165, "tryExpressionEnd": 169, "tryBlockStart": 165, "tryBlockEnd": 510, "catchExpressionStart": 438, "catchExpressionEnd": 461, "catchBlockStart": 438, "catchBlockEnd": 510, "exceptionHandlingCallStart": [488, 469], "exceptionHandlingCallEnd": [502, 503], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 177, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/holgerwurst/Lagerverwaltung_Software/tree/master/src/model/Datenbankverbindung.java", "rawCode": "  /** Einfache Erstellung einer Verbindung ohne die Erstellung eines SQLStatements */\n  public void basic_connect(String select) throws ClassNotFoundException {\n    try {\n      Class.forName(\"org.sqlite.JDBC\");\n      connection = DriverManager.getConnection(\"jdbc:sqlite:Lagerverwaltung.db\");\n      Statement statement = connection.createStatement();\n      statement.setQueryTimeout(30);\n      rs = statement.executeQuery(select);\n\n    } catch (SQLException e) {\n      System.err.println(e.getMessage());\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1187, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "println(*)", "printStackTrace()", "exit(int)"], "tryExpressionStart": 32, "tryExpressionEnd": 36, "tryBlockStart": 32, "tryBlockEnd": 1073, "catchExpressionStart": 947, "catchExpressionEnd": 967, "catchBlockStart": 947, "catchBlockEnd": 1073, "exceptionHandlingCallStart": [996, 977, 1021, 1050], "exceptionHandlingCallEnd": [1010, 1011, 1040, 1064], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 107, "focalAPIEnd": 153, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getDeclaredMethod(String,Class[])"], "useStart": [340], "useEnd": [390], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ikeji/openjdk7-jdk/tree/master/test/java/rmi/transport/dgcDeadLock/TestImpl.java", "rawCode": "    public Object run() {\n      try {\n\n        Class args[] = new Class[1];\n\n        Class objTableClass = Class.forName(\"sun.rmi.transport.ObjectTable\");\n\n        /* get the Target that corresponds to toLock from the\n         * ObjectTable\n         */\n        args[0] = Class.forName(\"java.rmi.Remote\");\n        Method objTableGetTarget = objTableClass.getDeclaredMethod(\"getTarget\", args);\n        objTableGetTarget.setAccessible(true);\n\n        Target lockTarget = ((Target) objTableGetTarget.invoke(null, new Object[] {toLock}));\n\n        // make sure the lease on this object has expired.\n        expireLeases(lockTarget);\n\n        // stop other threads from using the target for toLock.\n        synchronized (lockTarget) {\n          System.err.println(\"Locked the relevant target, sleeping \" + timeOut / 1000 + \" seconds\");\n          Thread.currentThread().sleep(timeOut);\n          System.err.println(\"Target unlocked\");\n        }\n\n      } catch (Exception e) {\n        System.err.println(e.getMessage());\n        e.printStackTrace();\n        System.exit(1);\n      }\n      return null;\n    }\n"}, {"dataset": "forName", "exampleID": 1188, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 142, "focalAPIEnd": 166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getDeclaredMethod(String,Class<?>...)"], "useStart": [174], "useEnd": [225], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sevenler/Android_Gallery2D_Custom/tree/master/src/com/androidesk/gallery3d/common/ApiHelper.java", "rawCode": "  private static boolean hasMethod(\n      String className, String methodName, Class<?>... parameterTypes) {\n    try {\n      Class<?> klass = Class.forName(className);\n      klass.getDeclaredMethod(methodName, parameterTypes);\n      return true;\n    } catch (Throwable th) {\n      return false;\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1189, "initialization": ["String className = Properties.getProperty(String)"], "initializationStart": [851], "initializationEnd": [903], "hasTryCatch": 1, "exceptionType": "InstantiationException", "exceptionHandlingCall": ["error(*)"], "tryExpressionStart": 577, "tryExpressionEnd": 581, "tryBlockStart": 577, "tryBlockEnd": 1514, "catchExpressionStart": 1266, "catchExpressionEnd": 1299, "catchBlockStart": 1266, "catchBlockEnd": 1330, "exceptionHandlingCallStart": [1307], "exceptionHandlingCallEnd": [1323], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 937, "focalAPIEnd": 975, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [1036], "useEnd": [1065], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/czarneckid/blojsom-sourceforge/tree/master/tags/blojsom-1_4/blojsom/src/org/ignition/blojsom/servlet/BlojsomServlet.java", "rawCode": "  /**\n   * Configure the dispatchers that blojsom will use when passing a request/response on to a\n   * particular template\n   *\n   * @param servletConfig Servlet configuration information\n   */\n  private void configureDispatchers(ServletConfig servletConfig) {\n    String templateConfiguration =\n        servletConfig.getInitParameter(BLOG_DISPATCHER_MAP_CONFIGURATION_IP);\n    _templateDispatchers = new HashMap();\n    Properties templateMapProperties = new Properties();\n    InputStream is = servletConfig.getServletContext().getResourceAsStream(templateConfiguration);\n    try {\n      templateMapProperties.load(is);\n      Iterator templateIterator = templateMapProperties.keySet().iterator();\n      while (templateIterator.hasNext()) {\n        String templateExtension = (String) templateIterator.next();\n        String templateDispatcherClass = templateMapProperties.getProperty(templateExtension);\n        Class dispatcherClass = Class.forName(templateDispatcherClass);\n        GenericDispatcher dispatcher = (GenericDispatcher) dispatcherClass.newInstance();\n        dispatcher.init(servletConfig);\n        _templateDispatchers.put(templateExtension, dispatcher);\n        _logger.debug(\"Added template dispatcher: \" + templateDispatcherClass);\n      }\n    } catch (InstantiationException e) {\n      _logger.error(e);\n    } catch (IllegalAccessException e) {\n      _logger.error(e);\n    } catch (ClassNotFoundException e) {\n      _logger.error(e);\n    } catch (IOException e) {\n      _logger.error(e);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1190, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 76, "focalAPIEnd": 97, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nuxeo/nuxeo-core/tree/master/nuxeo-core-storage-sql/nuxeo-core-storage-sql-test/src/main/java/org/nuxeo/ecm/core/storage/sql/DatabaseMySQL.java", "rawCode": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    Class.forName(DRIVER);\n    setProperties();\n    Connection connection =\n        DriverManager.getConnection(\n            Framework.getProperty(URL_PROPERTY),\n            Framework.getProperty(USER_PROPERTY),\n            Framework.getProperty(PASSWORD_PROPERTY));\n    doOnAllTables(connection, null, null, \"DROP TABLE `%s` CASCADE\");\n    connection.close();\n  }\n"}, {"dataset": "forName", "exampleID": 1191, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new InvalidConfigurationException(String)"], "tryExpressionStart": 577, "tryExpressionEnd": 581, "tryBlockStart": 577, "tryBlockEnd": 1284, "catchExpressionStart": 1040, "catchExpressionEnd": 1074, "catchBlockStart": 1040, "catchBlockEnd": 1179, "exceptionHandlingCallStart": [1088], "exceptionHandlingCallEnd": [1172], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 646, "focalAPIEnd": 670, "followUpCheck": "cls instanceof CifsAuthenticator", "checkType": "IF", "followUpCheckExpressionStart": 692, "followUpCheckExpressionEnd": 733, "followUpCheckBlockStart": 692, "followUpCheckBlockEnd": 1033, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MiniSEC/adito_reload/tree/master/Alfresco-JLAN/alfresco-jlan/source/java/org/alfresco/jlan/smb/server/CIFSConfigSection.java", "rawCode": "  /**\n   * Set the authenticator to be used to authenticate users and share connections.\n   *\n   * @param authClass String\n   * @param params ConfigElement\n   * @param accessMode int\n   * @param allowGuest boolean\n   * @return int\n   * @exception InvalidConfigurationException\n   */\n  public final int setAuthenticator(\n      String authClass, ConfigElement params, int accessMode, boolean allowGuest)\n      throws InvalidConfigurationException {\n\n    // Validate the authenticator class\n\n    int sts = ConfigurationListener.StsIgnored;\n    CifsAuthenticator auth = null;\n\n    try {\n\n      // Load the authenticator class\n\n      Object authObj = Class.forName(authClass).newInstance();\n      if (authObj instanceof CifsAuthenticator) {\n\n        // Set the server authenticator\n\n        auth = (CifsAuthenticator) authObj;\n        auth.setAccessMode(accessMode);\n        auth.setAllowGuest(allowGuest);\n      } else\n        throw new InvalidConfigurationException(\n            \"Authenticator is not derived from required base class\");\n    } catch (ClassNotFoundException ex) {\n      throw new InvalidConfigurationException(\"Authenticator class \" + authClass + \" not found\");\n    } catch (Exception ex) {\n      throw new InvalidConfigurationException(\"Authenticator class error\");\n    }\n\n    // Initialize the authenticator using the parameter values\n\n    auth.initialize(getServerConfiguration(), params);\n\n    // Inform listeners, validate the configuration change\n\n    sts = setAuthenticator(auth);\n\n    // Remember that the authenticator instance will need destroying\n    m_localAuthenticator = true;\n\n    // Set initialization parameters\n\n    m_authParams = params;\n\n    // Return the change status\n\n    return sts;\n  }\n"}, {"dataset": "forName", "exampleID": 1192, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 90, "focalAPIEnd": 108, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/drmikehenry/vimfiles/tree/master/bundle/javacomplete/autoload/Reflection.java", "rawCode": "  public static boolean existed(String fqn) {\n    boolean result = false;\n    try {\n      Class.forName(fqn);\n      result = true;\n    } catch (Exception ex) {\n    }\n    return result;\n  }\n"}, {"dataset": "forName", "exampleID": 1193, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 78, "focalAPIEnd": 140, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sainthxd/cassandra-jdbc/tree/master/src/test/java/org/apache/cassandra/cql/jdbc/JdbcRegressionTest.java", "rawCode": "  @BeforeClass\n  public static void setUpBeforeClass() throws Exception {\n    Class.forName(\"org.apache.cassandra.cql.jdbc.CassandraDriver\");\n    String URL = String.format(\"jdbc:cassandra://%s:%d/%s\", HOST, PORT, \"system\");\n    System.out.println(\"Connection URL = '\" + URL + \"'\");\n\n    con = DriverManager.getConnection(URL);\n    Statement stmt = con.createStatement();\n\n    // Drop Keyspace\n    String dropKS = String.format(\"DROP KEYSPACE \\\"%s\\\";\", KEYSPACE);\n\n    try {\n      stmt.execute(dropKS);\n    } catch (Exception e) {\n      /* Exception on DROP is OK */\n    }\n\n    // Create KeySpace\n    String createKS =\n        String.format(\n            \"CREATE KEYSPACE \\\"%s\\\" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\",\n            KEYSPACE);\n    System.out.println(\"createKS = '\" + createKS + \"'\");\n    stmt = con.createStatement();\n    stmt.execute(\"USE system;\");\n    stmt.execute(createKS);\n\n    // Use Keyspace\n    String useKS = String.format(\"USE \\\"%s\\\";\", KEYSPACE);\n    stmt.execute(useKS);\n\n    // Create the target Column family\n    String createCF =\n        \"CREATE COLUMNFAMILY \"\n            + TABLE\n            + \" (keyname text PRIMARY KEY,\"\n            + \" bValue boolean,\"\n            + \" iValue int\"\n            + \");\";\n\n    stmt.execute(createCF);\n    stmt.close();\n    con.close();\n\n    // open it up again to see the new CF\n    con =\n        DriverManager.getConnection(\n            String.format(\"jdbc:cassandra://%s:%d/%s\", HOST, PORT, KEYSPACE));\n    System.out.println(con);\n  }\n"}, {"dataset": "forName", "exampleID": 1194, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 334, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getDeclaredField(String)", "class.forName(String)", "cls.getDeclaredField(String)"], "useStart": [384, 488, 538], "useEnd": [413, 526, 567], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/afcowie/java-gnome/tree/master/tests/bindings/org/gnome/gtk/ValidateTextBuffer.java", "rawCode": "  public final void testCrossPackageConstantAccess()\n      throws ClassNotFoundException, SecurityException, NoSuchFieldException,\n          IllegalArgumentException, IllegalAccessException {\n    final TextTag tag;\n    Class<?> cls;\n    Field fld;\n    double scale1, scale2;\n\n    tag = new TextTag();\n    tag.setRise(4.5);\n\n    cls = Class.forName(\"org.gnome.gtk.TextTag\");\n    fld = cls.getDeclaredField(\"SCALE\");\n    fld.setAccessible(true);\n    scale1 = fld.getDouble(tag);\n\n    cls = Class.forName(\"org.gnome.pango.Pango\");\n    fld = cls.getDeclaredField(\"SCALE\");\n    fld.setAccessible(true);\n    scale2 = fld.getDouble(tag);\n\n    assertEquals(scale2, scale1);\n  }\n"}, {"dataset": "forName", "exampleID": 1195, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["log(*,String,*)"], "tryExpressionStart": 565, "tryExpressionEnd": 569, "tryBlockStart": 565, "tryBlockEnd": 823, "catchExpressionStart": 724, "catchExpressionEnd": 745, "catchBlockStart": 724, "catchBlockEnd": 823, "exceptionHandlingCallStart": [755], "exceptionHandlingCallEnd": [814], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 594, "focalAPIEnd": 646, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.getConstructor(Class[])"], "useStart": [665], "useEnd": [694], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/liucong/jms4cxf2/tree/master/common/common/src/main/java/org/apache/cxf/jaxb/JAXBUtils.java", "rawCode": "  public static void setNamespaceWrapper(final Map<String, String> nspref, Marshaller marshaller)\n      throws PropertyException {\n    Object mapper = null;\n    if (marshaller.getClass().getName().contains(\".internal.\")) {\n      mapper = createNamespaceWrapper(nspref);\n      if (mapper == null) {\n        LOG.log(\n            Level.INFO,\n            \"Could not create namespace mapper for JDK internal\" + \" JAXB implementation.\");\n      } else {\n        marshaller.setProperty(\"com.sun.xml.internal.bind.namespacePrefixMapper\", mapper);\n      }\n    } else {\n      try {\n        Class<?> cls = Class.forName(\"org.apache.cxf.jaxb.NamespaceMapper\");\n        mapper = cls.getConstructor(Map.class).newInstance(nspref);\n      } catch (Exception ex) {\n        LOG.log(Level.INFO, \"Could not create NamespaceMapper\", ex);\n      }\n      marshaller.setProperty(\"com.sun.xml.bind.namespacePrefixMapper\", mapper);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1196, "initialization": ["String className = Properties.getProperty(String)"], "initializationStart": [752], "initializationEnd": [785], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 899, "focalAPIEnd": 934, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["class.forName(String)"], "useStart": [991], "useEnd": [1025], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/pmaia/ManelSim/tree/master/src/main/java/manelsim/ManelSim.java", "rawCode": "  public static void main(String[] args)\n      throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException {\n\n    if (args.length < 1) {\n      System.out.println(\"Usage: ManelSim <conf file>\");\n      System.exit(1);\n    }\n\n    Properties config = new Properties();\n    config.load(new FileInputStream(args[0]));\n\n    if (!config.containsKey(\"initializer\")\n        || !config.containsKey(\"summarizer\")\n        || !config.containsKey(\"simulation_start\")\n        || !config.containsKey(\"simulation_end\")) {\n      throw new IllegalArgumentException(\n          \"The keys \\\"initializer\\\", \\\"summarizer\\\", \\\"simulation_start\\\" and \"\n              + \"\\\"simulation_end\\\" are mandatory.\");\n    }\n\n    String initializerClassName = config.getProperty(\"initializer\");\n    String summarizerClassName = config.getProperty(\"summarizer\");\n\n    Initializer initializer = (Initializer) Class.forName(initializerClassName).newInstance();\n    Summarizer summarizer = (Summarizer) Class.forName(summarizerClassName).newInstance();\n\n    Context context = initializer.initialize(config);\n\n    Time simulationStart =\n        new Time(Long.parseLong(config.getProperty(\"simulation_start\")), Unit.SECONDS);\n    Time simulationEnd =\n        new Time(Long.parseLong(config.getProperty(\"simulation_end\")), Unit.SECONDS);\n    boolean stopOnError = Boolean.parseBoolean(config.getProperty(\"stop_on_error\", \"true\"));\n\n    EventScheduler.setup(\n        simulationStart, simulationEnd, context.getEventSourceMultiplexer(), stopOnError);\n\n    try {\n      EventScheduler.start();\n    } catch (Throwable t) {\n      throw new RuntimeException(\"Simulation failed at time: \" + EventScheduler.now(), t);\n    }\n\n    System.out.println(summarizer.summarize(context));\n  }\n"}, {"dataset": "forName", "exampleID": 1197, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InstantiationException", "exceptionHandlingCall": ["new DatabaseConnectionFailedException(String)"], "tryExpressionStart": 182, "tryExpressionEnd": 186, "tryBlockStart": 182, "tryBlockEnd": 1207, "catchExpressionStart": 441, "catchExpressionEnd": 474, "catchBlockStart": 441, "catchBlockEnd": 604, "exceptionHandlingCallStart": [488], "exceptionHandlingCallEnd": [597], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 225, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["cls.newInstance()"], "useStart": [225], "useEnd": [277], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/luukholleman/ASRSJava/tree/master/utilities/Database.java", "rawCode": "  /**\n   * Maakt de connectie met de database\n   *\n   * @throws DatabaseConnectionFailedException\n   */\n  public static void connect() throws DatabaseConnectionFailedException {\n    try {\n      // Start de mysql driver\n      Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n\n      // Maak database connectie aan\n      dbConnection =\n          DriverManager.getConnection(\"jdbc:mysql://209.105.248.9/asrs\", \"asrs\", \"w1nd3sh31m\");\n\n    } catch (InstantiationException e) {\n      throw new DatabaseConnectionFailedException(\n          \"Kan niet met de database verbinden(Initalization failed).\");\n    } catch (IllegalAccessException e) {\n      throw new DatabaseConnectionFailedException(\n          \"Kan niet met de database verbinden(Illigal action performed).\");\n    } catch (ClassNotFoundException e) {\n      throw new DatabaseConnectionFailedException(\n          \"Kan niet met de database verbinden(Class not found).\");\n    } catch (SQLException e) {\n      throw new DatabaseConnectionFailedException(\"Kan niet met de database verbinden(SQL error).\");\n    } catch (Exception e) {\n      throw new DatabaseConnectionFailedException(\n          \"Kan niet met de database verbinden(Unknown error).\");\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1198, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new RuntimeException(String,*)"], "tryExpressionStart": 371, "tryExpressionEnd": 375, "tryBlockStart": 371, "tryBlockEnd": 516, "catchExpressionStart": 427, "catchExpressionEnd": 460, "catchBlockStart": 427, "catchBlockEnd": 516, "exceptionHandlingCallStart": [476], "exceptionHandlingCallEnd": [507], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 385, "focalAPIEnd": 417, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/olap4j/olap4j/tree/master/testsrc/org/olap4j/XmlaConnectionTest.java", "rawCode": "  /**\n   * Verifies that the construction of the necessary XMLA objects during\n   * DriverManager.getConnection() do not make calls that could cause deadlocks.\n   */\n  public void testNoNonTrivalCallsOnConnect() throws Exception {\n    String cookie = XmlaOlap4jDriver.nextCookie();\n    try {\n      XmlaOlap4jDriver.PROXY_MAP.put(cookie, new XmlaOlap4jProxyMock());\n      try {\n        Class.forName(DRIVER_CLASS_NAME);\n      } catch (ClassNotFoundException e) {\n        throw new RuntimeException(\"oops\", e);\n      }\n      Properties info = new Properties();\n      info.setProperty(XmlaOlap4jDriver.Property.CATALOG.name(), \"FoodMart\");\n      DriverManager.getConnection(\n          \"jdbc:xmla:Server=http://foo;Catalog=FoodMart;TestProxyCookie=\" + cookie, info);\n    } catch (Throwable t) {\n      t.printStackTrace();\n      fail(\"Non-Trival Call executed during construction of XmlaOlap4j \" + \"Connection\");\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1199, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["new RuntimeException(*)"], "tryExpressionStart": 59, "tryExpressionEnd": 63, "tryBlockStart": 59, "tryBlockEnd": 237, "catchExpressionStart": 156, "catchExpressionEnd": 191, "catchBlockStart": 156, "catchBlockEnd": 237, "exceptionHandlingCallStart": [205], "exceptionHandlingCallEnd": [230], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 78, "focalAPIEnd": 148, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/neo4j/graph-collections/tree/master/src/main/java/org/neo4j/collections/graphdb/impl/BinaryEdgeTypeImpl.java", "rawCode": "  protected static Class<?> getImplementationClass() {\n    try {\n      return Class.forName(\"org.neo4j.collections.graphdb.impl.BinaryEdgeTypeImpl\");\n    } catch (ClassNotFoundException cce) {\n      throw new RuntimeException(cce);\n    }\n  }\n"}, {"dataset": "forName", "exampleID": 1200, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "ClassNotFoundException", "exceptionHandlingCall": ["getMessage(*)", "new IllegalArgumentException(*)"], "tryExpressionStart": 580, "tryExpressionEnd": 584, "tryBlockStart": 580, "tryBlockEnd": 790, "catchExpressionStart": 670, "catchExpressionEnd": 703, "catchBlockStart": 670, "catchBlockEnd": 790, "exceptionHandlingCallStart": [748, 719], "exceptionHandlingCallEnd": [780, 781], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(StringUtil.isBlank(className,))", "guardType": "IF {", "guardExpressionStart": 421, "guardExpressionEnd": 452, "guardBlockStart": 421, "guardBlockEnd": 573, "focalAPI": "cls = class.forName(className)", "focalAPIStart": 639, "focalAPIEnd": 660, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elek/identityconnectors/tree/master/projects/bundles/oracleerp/src/main/java/org/identityconnectors/oracleerp/OracleERPConfiguration.java", "rawCode": "  /** {@inheritDoc} */\n  @Override\n  public void validate() {\n    if (StringUtil.isBlank(dataSource)) {\n      if (getPassword() == null) {\n        log.info(\"validate Password\");\n        throw new IllegalArgumentException(getMessage(MSG_PASSWORD_BLANK));\n      }\n      if (StringUtil.isBlank(user)) {\n        log.info(\"validate user\");\n        throw new IllegalArgumentException(getMessage(MSG_USER_BLANK));\n      }\n      if (StringUtil.isBlank(driver)) {\n        log.info(\"validate driver\");\n        throw new IllegalArgumentException(getMessage(MSG_DRIVER_BLANK));\n      }\n      try {\n        log.info(\"validate driver forName\");\n        Class.forName(driver);\n      } catch (ClassNotFoundException e) {\n        throw new IllegalArgumentException(getMessage(MSG_DRIVER_NOT_FOUND));\n      }\n      if (StringUtil.isBlank(url)) {\n        if (StringUtil.isBlank(host)) {\n          log.info(\"validate driver host\");\n          throw new IllegalArgumentException(getMessage(MSG_HOST_BLANK));\n        }\n        if (StringUtil.isBlank(port)) {\n          log.info(\"validate driver port\");\n          throw new IllegalArgumentException(getMessage(MSG_PORT_BLANK));\n        }\n        if (StringUtil.isBlank(database)) {\n          log.info(\"validate driver database\");\n          throw new IllegalArgumentException(getMessage(MSG_DATABASE_BLANK));\n        }\n      }\n      log.ok(\"driver configuration is ok\");\n    } else {\n      log.info(\"validate dataSource\");\n      // Validate the JNDI properties\n      JNDIUtil.arrayToHashtable(jndiProperties, getConnectorMessages());\n      log.ok(\"dataSource configuration is ok\");\n    }\n  }\n"}]