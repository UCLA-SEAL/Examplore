[{"dataset": "findViewById","exampleID": 0, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 136, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[189, 240, 303, 381, 461, 530, 589, 653, 729], "useEnd":[221, 273, 348, 429, 510, 564, 628, 693, 781], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/tests/coretests/src/android/widget/layout/frame/FrameLayoutGravityTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n\n    mParent = activity.findViewById(R.id.parent);\n\n    mLeftView = activity.findViewById(R.id.left);\n    mRightView = activity.findViewById(R.id.right);\n    mCenterHorizontalView = activity.findViewById(R.id.center_horizontal);\n\n    mLeftCenterVerticalView = activity.findViewById(R.id.left_center_vertical);\n    mRighCenterVerticalView = activity.findViewById(R.id.right_center_vertical);\n    mCenterView = activity.findViewById(R.id.center);\n\n    mLeftBottomView = activity.findViewById(R.id.left_bottom);\n    mRightBottomView = activity.findViewById(R.id.right_bottom);\n    mCenterHorizontalBottomView = activity.findViewById(R.id.center_horizontal_bottom);\n  }\n"},
{"dataset": "findViewById","exampleID": 1, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 96, "focalAPIEnd": 133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "view.getText()"], "useStart":[171, 423], "useEnd":[211, 444], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dhavalsdoshi/orteroid/tree/master/test/src/com/thoughtworks/orteroid/activities/ViewBoardActivityTest.java", "rawCode": "  public void testShouldListThePointsOfDefaultSection() {\n    TextView firstButton = (TextView) activity.findViewById(R.id.idea_text);\n\n    ListView listView = (ListView) activity.findViewById(android.R.id.list);\n    TextView secondButton = (TextView) listView.getChildAt(1).findViewById(R.id.idea_text);\n    TextView thirdButton = (TextView) listView.getChildAt(2).findViewById(R.id.idea_text);\n\n    assertEquals(\"point\", firstButton.getText());\n    assertEquals(\"point2\", secondButton.getText());\n    assertEquals(\"point4\", thirdButton.getText());\n  }\n"},
{"dataset": "findViewById","exampleID": 2, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 140, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[198, 263, 323, 384, 433], "useEnd":[235, 295, 355, 417, 467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NEXUS-EVO/frameworks_base/tree/master/core/tests/coretests/src/android/widget/layout/linear/BaselineButtonsTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mCurrentTime = activity.findViewById(R.id.currenttime);\n    mTotalTime = activity.findViewById(R.id.totaltime);\n    mPrev = (ImageButton) activity.findViewById(R.id.prev);\n    mNext = (ImageButton) activity.findViewById(R.id.next);\n    mPause = (ImageButton) activity.findViewById(R.id.pause);\n    mLayout = activity.findViewById(R.id.layout);\n  }\n"},
{"dataset": "findViewById","exampleID": 3, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[699, 976], "configurationEnd":[718, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1465, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeView(View)", "view.addView(*)"], "useStart":[1533, 1570, 1613], "useEnd":[1560, 1603, 1640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/elyas-bhy/CampusUB1/tree/master/source/libs/slidingmenu_lib/src/com/slidingmenu/lib/SlidingMenu.java", "rawCode": "  /**\n   * Attaches the SlidingMenu to an entire Activity\n   *\n   * @param activity the Activity\n   * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW\n   * @param actionbarOverlay whether or not the ActionBar is overlaid\n   */\n  public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {\n    if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)\n      throw new IllegalArgumentException(\n          \"slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT\");\n\n    if (getParent() != null)\n      throw new IllegalStateException(\"This SlidingMenu appears to already be attached\");\n\n    // get the window background\n    TypedArray a =\n        activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n\n    switch (slideStyle) {\n      case SLIDING_WINDOW:\n        mActionbarOverlay = false;\n        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n        // save ActionBar themes that have transparent assets\n        decorChild.setBackgroundResource(background);\n        decor.removeView(decorChild);\n        decor.addView(this);\n        setContent(decorChild);\n        break;\n      case SLIDING_CONTENT:\n        mActionbarOverlay = actionbarOverlay;\n        // take the above view out of\n        ViewGroup contentParent = (ViewGroup) activity.findViewById(android.R.id.content);\n        View content = contentParent.getChildAt(0);\n        contentParent.removeView(content);\n        contentParent.addView(this);\n        setContent(content);\n        // save people from having transparent backgrounds\n        if (content.getBackground() == null) content.setBackgroundResource(background);\n        break;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 4, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 168, "focalAPIEnd": 224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "view.setText(String)"], "useStart":[257, 336, 398], "useEnd":[305, 379, 414], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eakmeister/STEP_Android/tree/master/STEP-Launcher/src/step/email/SendEmailTask.java", "rawCode": "  @Override\n  protected void onPostExecute(String result) {\n    Toast.makeText(this.activity, \"Email Sent!\", Toast.LENGTH_SHORT).show();\n    EditText body = (EditText) this.activity.findViewById(R.id.compose_message_content);\n    EditText subj = (EditText) this.activity.findViewById(R.id.compose_subject);\n    TextView to = (TextView) this.activity.findViewById(R.id.compose_to);\n\n    try {\n      body.setText(\"\");\n      subj.setText(\"\");\n      to.setText(\"\");\n    } catch (NullPointerException e) {\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 5, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 109, "focalAPIEnd": 134, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.findViewById(int)"], "useStart":[153], "useEnd":[183], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sunlightlabs/adhawk-android/tree/master/src/com/sunlightfoundation/adhawk/android/utils/ActionBarUtils.java", "rawCode": "  public static void setActionIcon(Activity activity, int id, int icon) {\n    ViewGroup button = (ViewGroup) activity.findViewById(id);\n    ((ImageView) button.findViewById(R.id.icon)).setImageResource(icon);\n  }\n"},
{"dataset": "findViewById","exampleID": 6, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 522, "focalAPIEnd": 562, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.loadDataWithBaseURL(String,String,String,String,String)", "view.setBackgroundColor(*)"], "useStart":[864, 948], "useEnd":[942, 980], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Hasselmannen/sleepfighter/tree/master/application/sleepfighter/src/main/java/se/toxbee/sleepfighter/challenge/math/MathChallenge.java", "rawCode": "  private void renderMathProblem(final Activity activity) {\n\n    final String open_html =\n        \"<!DOCTYPE html><html lang=\\\"en\\\" xmlns:m=\\\"http://www.w3.org/1998/Math/MathML\\\"><head><meta charset=\\\"utf-8\\\"><link rel=\\\"stylesheet\\\" href=\\\"file:///android_asset/jqmath-0.4.0.css\\\"><script src=\\\"file:///android_asset/jquery-1.4.3.min.js\\\"></script><script src=\\\"file:///android_asset/jqmath-etc-0.4.0.min.js\\\"></script></head><html>\";\n    final String close_html = \"</html>\";\n\n    final CustomWebView w = (CustomWebView) activity.findViewById(R.id.math_webview);\n\n    String problem = \"<p style=\\\"text-align: center;\\\">\" + this.problemString + \"</p>\";\n\n    String html =\n        new StringBuilder()\n            .append(open_html)\n            .append(this.getStyleSheet())\n            .append(problem)\n            .append(close_html)\n            .toString();\n\n    w.loadDataWithBaseURL(\"file:///android_asset\", html, \"text/html\", \"utf-8\", \"\");\n    w.setBackgroundColor(0x00000000);\n  }\n"},
{"dataset": "findViewById","exampleID": 7, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 91, "focalAPIEnd": 116, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setChecked(boolean)"], "useStart":[122], "useEnd":[147], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/HabitatMap/AirCastingAndroidClient/tree/master/src/test/java/pl/llp/aircasting/TestHelper.java", "rawCode": "  public static void check(Activity activity, int id) {\n    CheckBox checkBox = (CheckBox) activity.findViewById(id);\n    checkBox.setChecked(true);\n  }\n"},
{"dataset": "findViewById","exampleID": 8, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[699, 976], "configurationEnd":[718, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1465, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeView(View)", "view.addView(*)"], "useStart":[1533, 1570, 1613], "useEnd":[1560, 1603, 1640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emolinablas/CoretelProject/tree/master/libs externas/library/src/com/slidingmenu/lib/SlidingMenu.java", "rawCode": "  /**\n   * Attaches the SlidingMenu to an entire Activity\n   *\n   * @param activity the Activity\n   * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW\n   * @param actionbarOverlay whether or not the ActionBar is overlaid\n   */\n  public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {\n    if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)\n      throw new IllegalArgumentException(\n          \"slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT\");\n\n    if (getParent() != null)\n      throw new IllegalStateException(\"This SlidingMenu appears to already be attached\");\n\n    // get the window background\n    TypedArray a =\n        activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n\n    switch (slideStyle) {\n      case SLIDING_WINDOW:\n        mActionbarOverlay = false;\n        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n        // save ActionBar themes that have transparent assets\n        decorChild.setBackgroundResource(background);\n        decor.removeView(decorChild);\n        decor.addView(this);\n        setContent(decorChild);\n        break;\n      case SLIDING_CONTENT:\n        mActionbarOverlay = actionbarOverlay;\n        // take the above view out of\n        ViewGroup contentParent = (ViewGroup) activity.findViewById(android.R.id.content);\n        View content = contentParent.getChildAt(0);\n        contentParent.removeView(content);\n        contentParent.addView(this);\n        setContent(content);\n        // save people from having transparent backgrounds\n        if (content.getBackground() == null) content.setBackgroundResource(background);\n        break;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 9, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 136, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[189, 240, 290, 341], "useEnd":[221, 273, 321, 375], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/spacecaker/android_frameworks_base_CSM9.1/tree/master/core/tests/coretests/src/android/widget/layout/frame/FrameLayoutMarginTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n\n    mParent = activity.findViewById(R.id.parent);\n\n    mLeftView = activity.findViewById(R.id.left);\n    mRightView = activity.findViewById(R.id.right);\n    mTopView = activity.findViewById(R.id.top);\n    mBottomView = activity.findViewById(R.id.bottom);\n  }\n"},
{"dataset": "findViewById","exampleID": 10, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 232, "focalAPIEnd": 272, "followUpCheck": "view == null", "checkType": "IF", "followUpCheckExpressionStart": 279, "followUpCheckExpressionEnd": 303, "followUpCheckBlockStart": 279, "followUpCheckBlockEnd": 325, "use":["activity.findViewById(int)"], "useStart":[366], "useEnd":[406], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DomoTop/DomoTop/tree/master/Product/Android/src/org/openremote/android/console/util/AsyncResourceLoader.java", "rawCode": "  /**\n   * Update progress message in text.\n   *\n   * @see android.os.AsyncTask#onProgressUpdate(Progress[])\n   */\n  @Override\n  protected void onProgressUpdate(String... values) {\n    RelativeLayout loadingView = (RelativeLayout) (activity.findViewById(R.id.welcome_view));\n    if (loadingView == null) {\n      return;\n    }\n\n    TextView loadingText = (TextView) (activity.findViewById(R.id.loading_text));\n    loadingText.setText(\"loading \" + values[0] + \"...\");\n    loadingText.setEllipsize(TruncateAt.MIDDLE);\n    loadingText.setSingleLine(true);\n  }\n"},
{"dataset": "findViewById","exampleID": 11, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[699, 976], "configurationEnd":[718, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1465, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeView(View)", "view.addView(*)"], "useStart":[1533, 1570, 1613], "useEnd":[1560, 1603, 1640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/songzhiyong/lib_song/tree/master/src/com/slidingmenu/lib/SlidingMenu.java", "rawCode": "  /**\n   * Attaches the SlidingMenu to an entire Activity\n   *\n   * @param activity the Activity\n   * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW\n   * @param actionbarOverlay whether or not the ActionBar is overlaid\n   */\n  public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {\n    if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)\n      throw new IllegalArgumentException(\n          \"slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT\");\n\n    if (getParent() != null)\n      throw new IllegalStateException(\"This SlidingMenu appears to already be attached\");\n\n    // get the window background\n    TypedArray a =\n        activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n\n    switch (slideStyle) {\n      case SLIDING_WINDOW:\n        mActionbarOverlay = false;\n        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n        // save ActionBar themes that have transparent assets\n        decorChild.setBackgroundResource(background);\n        decor.removeView(decorChild);\n        decor.addView(this);\n        setContent(decorChild);\n        break;\n      case SLIDING_CONTENT:\n        mActionbarOverlay = actionbarOverlay;\n        // take the above view out of\n        ViewGroup contentParent = (ViewGroup) activity.findViewById(android.R.id.content);\n        View content = contentParent.getChildAt(0);\n        contentParent.removeView(content);\n        contentParent.addView(this);\n        setContent(content);\n        // save people from having transparent backgrounds\n        if (content.getBackground() == null) content.setBackgroundResource(background);\n        break;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 12, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 269, "focalAPIEnd": 311, "followUpCheck": "view != null", "checkType": "IF", "followUpCheckExpressionStart": 320, "followUpCheckExpressionEnd": 345, "followUpCheckBlockStart": 320, "followUpCheckBlockEnd": 659, "use":["view.inflate()", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[356, 426, 567, 727], "useEnd":[378, 473, 604, 764], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mdfeist/CMPUT301F12T12/tree/master/CompleteMyTask/src/ca/ualberta/cs/completemytask/views/LoadingView.java", "rawCode": "  /**\n   * Hides and displays the loading screen when the application is loading.\n   *\n   * @param whether the screen should be displayed\n   */\n  public void showLoadView(boolean show) {\n    if (show) {\n      enableView(false);\n      ViewStub loadViewStub = (ViewStub) this.activity.findViewById(LOAD_VIEW_STUB);\n\n      if (loadViewStub != null) {\n        loadViewStub.inflate();\n\n        TextView loadingMessage = (TextView) this.activity.findViewById(R.id.loadingMessage);\n        loadingMessage.setText(this.message);\n      } else {\n        View loadView = (View) this.activity.findViewById(LOAD_VIEW);\n        loadView.setVisibility(View.VISIBLE);\n      }\n    } else {\n      enableView(true);\n\n      View loadView = (View) this.activity.findViewById(LOAD_VIEW);\n      loadView.setVisibility(View.INVISIBLE);\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 13, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 104, "focalAPIEnd": 143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setImageResource(*)", "view.setImageResource(*)"], "useStart":[235, 380], "useEnd":[291, 435], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/carnero/c-geo/tree/master/src/carnero/cgeo/mapcommon/cgeomap.java", "rawCode": "    public void onClick(View view) {\n      if (myLocSwitch == null) {\n        myLocSwitch = (ImageView) activity.findViewById(R.id.my_position);\n      }\n\n      if (followMyLocation == true) {\n        followMyLocation = false;\n\n        myLocSwitch.setImageResource(R.drawable.my_location_off);\n      } else {\n        followMyLocation = true;\n        myLocationInMiddle();\n\n        myLocSwitch.setImageResource(R.drawable.my_location_on);\n      }\n    }\n"},
{"dataset": "findViewById","exampleID": 14, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[699, 976], "configurationEnd":[718, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1465, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeView(View)", "view.addView(*)"], "useStart":[1533, 1570, 1613], "useEnd":[1560, 1603, 1640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/victoralex911/Quirofano-App-Movil/tree/master/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "rawCode": "  /**\n   * Attaches the SlidingMenu to an entire Activity\n   *\n   * @param activity the Activity\n   * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW\n   * @param actionbarOverlay whether or not the ActionBar is overlaid\n   */\n  public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {\n    if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)\n      throw new IllegalArgumentException(\n          \"slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT\");\n\n    if (getParent() != null)\n      throw new IllegalStateException(\"This SlidingMenu appears to already be attached\");\n\n    // get the window background\n    TypedArray a =\n        activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n\n    switch (slideStyle) {\n      case SLIDING_WINDOW:\n        mActionbarOverlay = false;\n        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n        // save ActionBar themes that have transparent assets\n        decorChild.setBackgroundResource(background);\n        decor.removeView(decorChild);\n        decor.addView(this);\n        setContent(decorChild);\n        break;\n      case SLIDING_CONTENT:\n        mActionbarOverlay = actionbarOverlay;\n        // take the above view out of\n        ViewGroup contentParent = (ViewGroup) activity.findViewById(android.R.id.content);\n        View content = contentParent.getChildAt(0);\n        contentParent.removeView(content);\n        contentParent.addView(this);\n        setContent(content);\n        // save people from having transparent backgrounds\n        if (content.getBackground() == null) content.setBackgroundResource(background);\n        break;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 15, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getSystemService(*)"], "configurationStart":[128], "configurationEnd":[186], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 224, "focalAPIEnd": 263, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.findViewById(int)", "view.addView(View)"], "useStart":[270, 1079], "useEnd":[306, 1104], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/benweissmann/zephyr-mobile/tree/master/android-client/src/com/benweissmann/zmobile/components/ListHeader.java", "rawCode": "  public static void populate(final Activity activity, List<Breadcrumb> breadcrumbs) {\n    LayoutInflater vi = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    LinearLayout v = (LinearLayout) activity.findViewById(R.id.list_header);\n\n    v.findViewById(R.id.breadcrumb_home)\n        .setOnClickListener(\n            new View.OnClickListener() {\n              public void onClick(View v) {\n                goToBreadcrumbActivity(activity, new Intent(activity, ClassListActivity.class));\n              }\n            });\n\n    for (final Breadcrumb breadcrumb : breadcrumbs) {\n      View breadcrumbView = vi.inflate(R.layout.breadcrumb, null);\n      TextView label = (TextView) breadcrumbView.findViewById(R.id.breadcrumb_label);\n      label.setText(breadcrumb.getLabel());\n\n      if (breadcrumb.hasIntent()) {\n        label.setOnClickListener(\n            new View.OnClickListener() {\n              public void onClick(View v) {\n                goToBreadcrumbActivity(activity, breadcrumb.getIntent());\n              }\n            });\n      }\n\n      v.addView(breadcrumbView);\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 16, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getBaseContext()"], "configurationStart":[85], "configurationEnd":[103], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 397, "focalAPIEnd": 440, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.OnClickListener)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[381, 513, 607, 1297, 1418, 1513, 1869, 1969, 2058, 2396, 2490, 2576], "useEnd":[492, 546, 637, 1344, 1451, 1543, 1910, 2002, 2088, 2434, 2523, 2606], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/indrek-koue/SERP-Tracker-Android/tree/master/src/com/inc/im/serptrackerpremium/util/MainActivityHelper.java", "rawCode": "  public static void bindMenuBarButtons(final Activity a) {\n\n    final Context con = a.getBaseContext();\n\n    // insert website\n    View.OnClickListener insertProfileListener =\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View arg0) {\n            a.startActivity(new Intent(con, InsertWebsiteActivity.class));\n          }\n        };\n\n    ((LinearLayout) a.findViewById(R.id.linearLayoutAddProfile))\n        .setOnClickListener(insertProfileListener);\n    ((ImageButton) a.findViewById(R.id.imageButton1)).setOnClickListener(insertProfileListener);\n    ((TextView) a.findViewById(R.id.textView1)).setOnClickListener(insertProfileListener);\n\n    // manage websites\n    View.OnClickListener manageProfilesListener =\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View arg0) {\n\n            if (new DbAdapter(con).loadAllProfiles().size() == 0) {\n              Toast.makeText(\n                      con,\n                      a.getString(R.string.no_websites_to_manage_please_add_a_website),\n                      Toast.LENGTH_SHORT)\n                  .show();\n            } else {\n              a.startActivity(new Intent(con, ManageWebsitesActivity.class));\n            }\n          }\n        };\n\n    ((LinearLayout) a.findViewById(R.id.linearLayoutManageProfiles))\n        .setOnClickListener(manageProfilesListener);\n    ((ImageButton) a.findViewById(R.id.imageButton2)).setOnClickListener(manageProfilesListener);\n    ((TextView) a.findViewById(R.id.textView2)).setOnClickListener(manageProfilesListener);\n\n    // settings\n    View.OnClickListener settingsListener =\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View arg0) {\n\n            a.startActivity(new Intent(con, PreferencesActivity.class));\n          }\n        };\n\n    ((LinearLayout) a.findViewById(R.id.linearLayoutSettings)).setOnClickListener(settingsListener);\n    ((ImageButton) a.findViewById(R.id.imageButton3)).setOnClickListener(settingsListener);\n    ((TextView) a.findViewById(R.id.textView3)).setOnClickListener(settingsListener);\n\n    // about\n    View.OnClickListener aboutListener =\n        new View.OnClickListener() {\n\n          @Override\n          public void onClick(View arg0) {\n\n            a.startActivity(new Intent(con, AboutActivity.class));\n          }\n        };\n\n    ((LinearLayout) a.findViewById(R.id.linearLayoutAbout)).setOnClickListener(aboutListener);\n    ((ImageButton) a.findViewById(R.id.imageButton4)).setOnClickListener(aboutListener);\n    ((TextView) a.findViewById(R.id.textView4)).setOnClickListener(aboutListener);\n  }\n"},
{"dataset": "findViewById","exampleID": 17, "initialization":["Activity activity = createMock(*)"], "initializationStart":[759], "initializationEnd":[795], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 912, "focalAPIEnd": 953, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["expect(view)", "new SearchOnlineActivityDelegate(activity,SensorManager,Provider<CompassListener>,CombinedLocationManager,CombinedLocationListener,LocationControlBuffered,ActivitySaver,ActivityVisible,*)"], "useStart":[896, 1274], "useEnd":[954, 1579], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/trunk/GeoBeagleTest/test/com/google/code/geobeagle/activity/searchonline/SearchOnlineActivityDelegateTest.java", "rawCode": "  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void onPause() {\n    SensorManager sensorManager = PowerMock.createMock(SensorManager.class);\n    CompassListener compassListener = PowerMock.createMock(CompassListener.class);\n    LocationControlBuffered locationControlBuffered =\n        PowerMock.createMock(LocationControlBuffered.class);\n    CombinedLocationListener combinedLocationListener =\n        PowerMock.createMock(CombinedLocationListener.class);\n    CombinedLocationManager combinedLocationManager =\n        PowerMock.createMock(CombinedLocationManager.class);\n    ActivitySaver activitySaver = PowerMock.createMock(ActivitySaver.class);\n    ActivityVisible activityVisible = PowerMock.createMock(ActivityVisible.class);\n    Activity activity = PowerMock.createMock(Activity.class);\n    Provider<CompassListener> compassListenerProvider = PowerMock.createMock(Provider.class);\n\n    EasyMock.expect(activity.findViewById(R.id.help_contents)).andReturn(null);\n    combinedLocationManager.removeUpdates();\n    EasyMock.expect(compassListenerProvider.get()).andReturn(compassListener);\n    sensorManager.unregisterListener(compassListener);\n    activitySaver.save(ActivityType.SEARCH_ONLINE);\n    activityVisible.setVisible(false);\n\n    PowerMock.replayAll();\n    new SearchOnlineActivityDelegate(\n            activity,\n            sensorManager,\n            compassListenerProvider,\n            combinedLocationManager,\n            combinedLocationListener,\n            locationControlBuffered,\n            activitySaver,\n            activityVisible,\n            null)\n        .onPause();\n    PowerMock.verifyAll();\n  }\n"},
{"dataset": "findViewById","exampleID": 18, "initialization":["Activity activity = getActivity()"], "initializationStart":[72], "initializationEnd":[85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 147, "focalAPIEnd": 172, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getVisibility()"], "useStart":[189], "useEnd":[209], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_camera/tree/master/tests/src/com/android/camera/activity/CameraTestCase.java", "rawCode": "  protected void assertViewNotVisible(int id) {\n    Activity activity = getActivity();\n    getInstrumentation().waitForIdleSync();\n    View view = activity.findViewById(id);\n    assertTrue(view.getVisibility() != View.VISIBLE);\n  }\n"},
{"dataset": "findViewById","exampleID": 19, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getWindow()"], "configurationStart":[993], "configurationEnd":[1013], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1075, "focalAPIEnd": 1118, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.addView(ShowcaseView)", "ShowcaseView.setShowcaseItem(int,int,activity)"], "useStart":[1062, 1143], "useEnd":[1131, 1185], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/RobertoEstrada/WLANAudit-Android/tree/master/Vendor/ShowcaseView/library/src/com/github/espiandev/showcaseview/ShowcaseView.java", "rawCode": "  /**\n   * Quickly insert a ShowcaseView into an Activity, highlighting an item.\n   *\n   * @param type the type of item to showcase (can be ITEM_ACTION_HOME, ITEM_TITLE_OR_SPINNER,\n   *     ITEM_ACTION_ITEM or ITEM_ACTION_OVERFLOW)\n   * @param itemId the ID of an Action item to showcase (only required for ITEM_ACTION_ITEM\n   * @param activity Activity to insert the ShowcaseView into\n   * @param title Text to show as a title. Can be null.\n   * @param detailText More detailed text. Can be null.\n   * @param options A set of options to customise the ShowcaseView\n   * @return the created ShowcaseView instance\n   */\n  public static ShowcaseView insertShowcaseViewWithType(\n      int type,\n      int itemId,\n      Activity activity,\n      String title,\n      String detailText,\n      ConfigOptions options) {\n    ShowcaseView sv = new ShowcaseView(activity);\n    if (options != null) sv.setConfigOptions(options);\n    if (sv.getConfigOptions().insert == INSERT_TO_DECOR) {\n      ((ViewGroup) activity.getWindow().getDecorView()).addView(sv);\n    } else {\n      ((ViewGroup) activity.findViewById(android.R.id.content)).addView(sv);\n    }\n    sv.setShowcaseItem(type, itemId, activity);\n    sv.setText(title, detailText);\n    return sv;\n  }\n"},
{"dataset": "findViewById","exampleID": 20, "initialization":["Activity activity = getActivity()"], "initializationStart":[70], "initializationEnd":[83], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 144, "focalAPIEnd": 169, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["assertNull(view)"], "useStart":[133], "useEnd":[170], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_camera/tree/master/tests/src/com/android/camera/activity/CameraTestCase.java", "rawCode": "  protected void assertViewNotExist(int id) {\n    Activity activity = getActivity();\n    getInstrumentation().waitForIdleSync();\n    assertNull(activity.findViewById(id));\n  }\n"},
{"dataset": "findViewById","exampleID": 21, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 66, "focalAPIEnd": 107, "followUpCheck": "view != null", "checkType": "IF", "followUpCheckExpressionStart": 113, "followUpCheckExpressionEnd": 136, "followUpCheckBlockStart": 113, "followUpCheckBlockEnd": 169, "use":["activity.getResources()", "activity.getPackageName()", "activity.findViewById(int)"], "useStart":[195, 253, 299], "useEnd":[219, 279, 329], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blechd0se/android_packages_apps_AeroControl/tree/master/AeroControl/library/showcase/java/com/github/amlcurran/showcaseview/targets/SherlockReflector.java", "rawCode": "  @Override\n  public View getHomeButton() {\n    View homeButton = mActivity.findViewById(android.R.id.home);\n    if (homeButton != null) {\n      return homeButton;\n    }\n    int homeId =\n        mActivity.getResources().getIdentifier(\"abs__home\", \"id\", mActivity.getPackageName());\n    homeButton = mActivity.findViewById(homeId);\n    if (homeButton == null) {\n      throw new RuntimeException(\n          \"insertShowcaseViewWithType cannot be used when the theme \" + \"has no ActionBar\");\n    }\n    return homeButton;\n  }\n"},
{"dataset": "findViewById","exampleID": 22, "initialization":["Activity activity = getActivity()"], "initializationStart":[92], "initializationEnd":[105], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 185, "focalAPIEnd": 225, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["assertNotNull(activity)", "assertNotNull(view)"], "useStart":[231, 298], "useEnd":[255, 325], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/widget/src/android/widget/cts/FrameLayoutTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    mActivity = getActivity();\n    mInstrumentation = getInstrumentation();\n    mFrameLayout = (FrameLayout) mActivity.findViewById(R.id.framelayout);\n    assertNotNull(mActivity);\n    assertNotNull(mInstrumentation);\n    assertNotNull(mFrameLayout);\n  }\n"},
{"dataset": "findViewById","exampleID": 23, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 134, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)"], "useStart":[186], "useEnd":[223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/tests/coretests/src/android/widget/layout/linear/WeightSumTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mChild = activity.findViewById(R.id.child);\n    mContainer = activity.findViewById(R.id.container);\n  }\n"},
{"dataset": "findViewById","exampleID": 24, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 422, "focalAPIEnd": 467, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "view.isFlipping()", "view.getCurrentView()", "view.startFlipping()", "view.isFlipping()", "view.getCurrentView()", "view.getCurrentView()", "view.getCurrentView()", "view.stopFlipping()", "view.isFlipping()"], "useStart":[536, 618, 687, 734, 770, 814, 861, 1137, 1338, 1477, 1521], "useEnd":[586, 668, 711, 762, 797, 838, 889, 1165, 1366, 1503, 1545], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/widget/src/android/widget/cts/ViewFlipperTest.java", "rawCode": "  @TestTargets({\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      method = \"startFlipping\",\n      args = {}\n    ),\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      method = \"stopFlipping\",\n      args = {}\n    ),\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      method = \"isFlipping\",\n      args = {}\n    )\n  })\n  public void testViewFlipper() {\n    ViewFlipper viewFlipper = (ViewFlipper) mActivity.findViewById(R.id.viewflipper_test);\n\n    final int FLIP_INTERVAL = 1000;\n    TextView iv1 = (TextView) mActivity.findViewById(R.id.viewflipper_textview1);\n    TextView iv2 = (TextView) mActivity.findViewById(R.id.viewflipper_textview2);\n\n    assertFalse(viewFlipper.isFlipping());\n    assertSame(iv1, viewFlipper.getCurrentView());\n\n    viewFlipper.startFlipping();\n    assertTrue(viewFlipper.isFlipping());\n    assertSame(iv1, viewFlipper.getCurrentView());\n    assertEquals(View.VISIBLE, iv1.getVisibility());\n    assertEquals(View.GONE, iv2.getVisibility());\n\n    // wait for a longer time to make sure the view flipping is completed.\n    waitForViewFlipping(FLIP_INTERVAL + 200);\n    assertSame(iv2, viewFlipper.getCurrentView());\n    assertEquals(View.GONE, iv1.getVisibility());\n    assertEquals(View.VISIBLE, iv2.getVisibility());\n\n    waitForViewFlipping(FLIP_INTERVAL + 200);\n    assertSame(iv1, viewFlipper.getCurrentView());\n    assertEquals(View.VISIBLE, iv1.getVisibility());\n    assertEquals(View.GONE, iv2.getVisibility());\n\n    viewFlipper.stopFlipping();\n    assertFalse(viewFlipper.isFlipping());\n  }\n"},
{"dataset": "findViewById","exampleID": 25, "initialization":["int id = getSystem()"], "initializationStart":[69], "initializationEnd":[90], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 164, "focalAPIEnd": 196, "followUpCheck": "view == null", "checkType": "IF", "followUpCheckExpressionStart": 202, "followUpCheckExpressionEnd": 216, "followUpCheckBlockStart": 202, "followUpCheckBlockEnd": 321, "use":["activity.findViewById(int)", "from(activity)", "activity.getTheme()"], "useStart":[282, 424, 718], "useEnd":[314, 454, 738], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/photo/mobile-android/tree/master/common/src/com/trovebox/android/common/fragment/sync/SyncActionModeHandler.java", "rawCode": "  private void customizeActionModeCloseButton() {\n    int buttonId = Resources.getSystem().getIdentifier(\"action_mode_close_button\", \"id\", \"android\");\n    View v = mActivity.findViewById(buttonId);\n    if (v == null) {\n      buttonId = R.id.abs__action_mode_close_button;\n      v = mActivity.findViewById(buttonId);\n    }\n    if (v == null) return;\n    ViewGroup ll = (ViewGroup) v;\n    if (ll.getChildCount() == 1) {\n      LayoutInflater.from(mActivity).inflate(R.layout.action_mode_close_text, ll, true);\n    }\n    if (ll.getChildCount() > 1 && ll.getChildAt(1) != null) {\n      TextView tv = (TextView) ll.getChildAt(1);\n      tv.setText(mActionButtonTextResource);\n      TypedValue value = new TypedValue();\n      mActivity.getTheme().resolveAttribute(R.attr.actionMenuTextColor, value, true);\n      tv.setTextColor(value.data);\n    }\n    if (mDoneButtonOnClickListener != null) {\n      ll.setOnClickListener(mDoneButtonOnClickListener);\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 26, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 185, "focalAPIEnd": 222, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setText(*)"], "useStart":[228], "useEnd":[262], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NineWorlds/serenity-android/tree/master/serenity-app/src/main/java/us/nineworlds/serenity/ui/browser/music/albums/MusicAlbumsGridOnItemSelectedListener.java", "rawCode": "  private void createMusicMetaData(MusicAlbumImageView v) {\n    MusicAlbumImageView mpiv = v;\n    MusicAlbumContentInfo mi = mpiv.getPosterInfo();\n    TextView posterTitle = (TextView) context.findViewById(R.id.musicTitle);\n    posterTitle.setText(mi.getTitle());\n  }\n"},
{"dataset": "findViewById","exampleID": 27, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 370, "focalAPIEnd": 410, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["loadAnimation(activity,*)", "assertRunAnimation(*,view,Animation)", "assertRunAnimation(*,view,Animation)"], "useStart":[718, 1068, 2350], "useEnd":[782, 1145, 2427], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/animation/cts/AccelerateInterpolatorTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes =\n        \"Test case will accelerate AlphaAnimation. It will change alpha from 0.1 to\"\n            + \" 0.9, the rate of change alpha starts out slowly and then accelerates.\",\n    method = \"getInterpolation\",\n    args = {float.class}\n  )\n  public void testAccelerateInterpolator() {\n    final View animWindow = mActivity.findViewById(R.id.anim_window);\n\n    // XML file of R.anim.accelerate_alpha\n    // <alpha xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    // android:interpolator=\"@android:anim/accelerate_interpolator\"\n    // android:fromAlpha=\"0.1\"\n    // android:toAlpha=\"0.9\"\n    // android:duration=\"1000\" />\n    final Animation anim = AnimationUtils.loadAnimation(mActivity, R.anim.accelerate_alpha);\n\n    assertEquals(ACCELERATE_ALPHA_DURATION, anim.getDuration());\n    assertTrue(anim instanceof AlphaAnimation);\n\n    // factor is 1.0f\n    Interpolator interpolator = new AccelerateInterpolator(1.0f);\n    anim.setInterpolator(interpolator);\n    assertFalse(anim.hasStarted());\n\n    AnimationTestUtils.assertRunAnimation(getInstrumentation(), animWindow, anim);\n\n    Transformation transformation = new Transformation();\n    long startTime = anim.getStartTime();\n    anim.getTransformation(startTime, transformation);\n    float alpha1 = transformation.getAlpha();\n    assertEquals(0.1f, alpha1, ALPHA_DELTA);\n\n    anim.getTransformation(startTime + 250, transformation);\n    float alpha2 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 500, transformation);\n    float alpha3 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 750, transformation);\n    float alpha4 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + ACCELERATE_ALPHA_DURATION, transformation);\n    float alpha5 = transformation.getAlpha();\n    assertEquals(0.9f, alpha5, ALPHA_DELTA);\n\n    // check accelerating delta alpha\n    float delta1 = alpha2 - alpha1;\n    float delta2 = alpha3 - alpha2;\n    float delta3 = alpha4 - alpha3;\n    float delta4 = alpha5 - alpha4;\n    assertTrue(delta1 < delta2);\n    assertTrue(delta2 < delta3);\n    assertTrue(delta3 < delta4);\n\n    // factor is 1.5f, it starts even slower and ends even faster than 1.0f\n    interpolator = new AccelerateInterpolator(1.5f);\n    anim.setInterpolator(interpolator);\n\n    AnimationTestUtils.assertRunAnimation(getInstrumentation(), animWindow, anim);\n\n    transformation = new Transformation();\n    startTime = anim.getStartTime();\n    anim.getTransformation(startTime, transformation);\n    float alpha6 = transformation.getAlpha();\n    assertEquals(0.1f, alpha1, ALPHA_DELTA);\n\n    anim.getTransformation(startTime + 250, transformation);\n    float alpha7 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 500, transformation);\n    float alpha8 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 750, transformation);\n    float alpha9 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + ACCELERATE_ALPHA_DURATION, transformation);\n    float alpha10 = transformation.getAlpha();\n    assertEquals(0.9f, alpha5, ALPHA_DELTA);\n\n    // check accelerating delta alpha\n    float delta5 = alpha7 - alpha6;\n    float delta6 = alpha8 - alpha7;\n    float delta7 = alpha9 - alpha8;\n    float delta8 = alpha10 - alpha9;\n    assertTrue(delta5 < delta6);\n    assertTrue(delta6 < delta7);\n    assertTrue(delta7 < delta8);\n\n    // check whether it starts even slower\n    assertTrue(delta5 < delta1);\n  }\n"},
{"dataset": "findViewById","exampleID": 28, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 563, "focalAPIEnd": 595, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.findViewById(int)", "view.findViewById(int)"], "useStart":[643, 732], "useEnd":[681, 770], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/android/platform_packages_apps_packageinstaller/tree/master/src/com/android/packageinstaller/PackageUtil.java", "rawCode": "  /**\n   * Utility method to display application snippet of a new package. The content view should have\n   * been set on context before invoking this method. appSnippet view should include R.id.app_icon\n   * and R.id.app_name defined on it.\n   *\n   * @param pContext context of package that can load the resources\n   * @param as The resources to be loaded\n   * @param snippetId view id of app snippet view\n   */\n  @NonNull\n  public static View initSnippetForNewApp(\n      @NonNull Activity pContext, @NonNull AppSnippet as, int snippetId) {\n    View appSnippet = pContext.findViewById(snippetId);\n    if (as.icon != null) {\n      ((ImageView) appSnippet.findViewById(R.id.app_icon)).setImageDrawable(as.icon);\n    }\n    ((TextView) appSnippet.findViewById(R.id.app_name)).setText(as.label);\n    return appSnippet;\n  }\n"},
{"dataset": "findViewById","exampleID": 29, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 112, "focalAPIEnd": 142, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setChecked(boolean)"], "useStart":[148], "useEnd":[171], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/yourealwaysbe/teacup/tree/master/src/net/chilon/matt/teacup/Config.java", "rawCode": "  private void setCheckedValue(Activity activity, int checkId, boolean value) {\n    CheckBox check = (CheckBox) activity.findViewById(checkId);\n    check.setChecked(value);\n  }\n"},
{"dataset": "findViewById","exampleID": 30, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 166, "focalAPIEnd": 206, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.requestFocus()"], "useStart":[214], "useEnd":[237], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NineWorlds/serenity-android/tree/master/serenity-app/src/main/java/us/nineworlds/serenity/ui/browser/music/MusicPosterGridViewAdapter.java", "rawCode": "    @Override\n    public void handleMessage(Message msg) {\n      posterList = (List<MusicAlbumContentInfo>) msg.obj;\n      TwoWayGridView gridView = (TwoWayGridView) context.findViewById(R.id.musicGridView);\n      gridView.requestFocus();\n      notifyAdapter.notifyDataSetChanged();\n      // pd.dismiss();\n    }\n"},
{"dataset": "findViewById","exampleID": 31, "initialization":["Activity activity = getActivity()"], "initializationStart":[350], "initializationEnd":[363], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 455, "focalAPIEnd": 503, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":[], "useStart":[], "useEnd":[], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/span/Team05/tree/master/tests/src/se/team05/test/ui/ShowResultsActivityTest.java", "rawCode": "  /**\n   * Automatically run by JUnit to before a test is run. Will set up the needed environment fo test\n   * to run correctly. A Solo instance is created for Robotium and setting variables are created for\n   * beeing used in the test-method.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    Activity activity = getActivity();\n    solo = new Solo(this.getInstrumentation(), activity);\n    oldRouteImage = (ImageView) activity.findViewById(R.id.image_existing_route);\n\n    SQLiteDatabase db =\n        new Database(this.getInstrumentation().getTargetContext()).getWritableDatabase();\n    db.delete(DBRouteAdapter.TABLE_ROUTES, null, null);\n    db.delete(DBCheckPointAdapter.TABLE_CHECKPOINTS, null, null);\n    db.delete(DBGeoPointAdapter.TABLE_GEOPOINTS, null, null);\n  }\n"},
{"dataset": "findViewById","exampleID": 32, "initialization":["int id = Bundle.getInt(String)"], "initializationStart":[573], "initializationEnd":[599], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 623, "focalAPIEnd": 653, "followUpCheck": "view == null || !(view instanceof DialogShowingView)", "checkType": "IF", "followUpCheckExpressionStart": 659, "followUpCheckExpressionEnd": 716, "followUpCheckBlockStart": 659, "followUpCheckBlockEnd": 743, "use":["view.createDialog(Bundle)"], "useStart":[770], "useEnd":[817], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/packages_apps_Contacts/tree/master/src/com/android/contacts/util/DialogManager.java", "rawCode": "  /**\n   * Callback function called by the Activity to handle View-managed Dialogs. This function returns\n   * null if the id is not one of the two reserved Ids.\n   */\n  public Dialog onCreateDialog(final int id, final Bundle bundle) {\n    if (id == R.id.dialog_manager_id_1) {\n      mUseDialogId2 = true;\n    } else if (id == R.id.dialog_manager_id_2) {\n      mUseDialogId2 = false;\n    } else {\n      return null;\n    }\n    if (!bundle.containsKey(VIEW_ID_KEY)) {\n      throw new IllegalArgumentException(\"Bundle does not contain a ViewId\");\n    }\n    final int viewId = bundle.getInt(VIEW_ID_KEY);\n    final View view = mActivity.findViewById(viewId);\n    if (view == null || !(view instanceof DialogShowingView)) {\n      return null;\n    }\n    final Dialog dialog = ((DialogShowingView) view).createDialog(bundle);\n    if (dialog == null) {\n      return dialog;\n    }\n\n    // As we will never re-use this dialog, we can completely kill it here\n    dialog.setOnDismissListener(\n        new OnDismissListener() {\n          public void onDismiss(DialogInterface dialogInterface) {\n            mActivity.removeDialog(id);\n          }\n        });\n    return dialog;\n  }\n"},
{"dataset": "findViewById","exampleID": 33, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 217, "focalAPIEnd": 249, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.getSystemService(*)", "inflate(*,view)"], "useStart":[312, 389], "useEnd":[369, 443], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ipisncku/routetaiwan/tree/master/src/tw/ipis/routetaiwan/showmap.java", "rawCode": "  @SuppressWarnings(\"deprecation\")\n  private void showPopup(final Activity context, final LatLng position, final String default_name) {\n\n    // Inflate the popup_layout.xml\n    LinearLayout viewGroup = (LinearLayout) context.findViewById(R.id.menu1);\n    LayoutInflater layoutInflater =\n        (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n    View layout = layoutInflater.inflate(R.layout.menu_route, viewGroup);\n\n    // Creating the PopupWindow\n    final PopupWindow popup =\n        new PopupWindow(\n            layout, ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, true);\n\n    // Some offset to align the popup a bit to the right, and a bit down, relative to button's\n    // position.\n    int OFFSET_X = 10;\n    int OFFSET_Y = 60;\n\n    // Clear the default translucent background\n    popup.setBackgroundDrawable(new BitmapDrawable());\n    popup.setOutsideTouchable(true);\n    popup.setAnimationStyle(R.style.PopupWindowAnimation);\n\n    // Displaying the popup at the specified location, + offsets.\n    popup.showAtLocation(layout, Gravity.NO_GRAVITY, p.x + OFFSET_X, p.y + OFFSET_Y);\n\n    Drawable dr = getResources().getDrawable(R.drawable.start);\n    Bitmap bitmap = ((BitmapDrawable) dr).getBitmap();\n\n    Drawable drawable =\n        new BitmapDrawable(\n            getResources(),\n            Bitmap.createScaledBitmap(\n                bitmap,\n                (int) (24 * getResources().getDisplayMetrics().density),\n                (int) (24 * getResources().getDisplayMetrics().density),\n                true));\n\n    Button set_start = (Button) layout.findViewById(R.id.add_to_departure);\n    set_start.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);\n    set_start.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            if (start != null) start.remove();\n            temp.remove();\n            opt_start.position(position);\n            start = googleMap.addMarker(opt_start);\n            popup.dismiss();\n            create_button();\n            v.setOnClickListener(null);\n          }\n        });\n\n    dr = getResources().getDrawable(R.drawable.destination);\n    bitmap = ((BitmapDrawable) dr).getBitmap();\n\n    drawable =\n        new BitmapDrawable(\n            getResources(),\n            Bitmap.createScaledBitmap(\n                bitmap,\n                (int) (24 * getResources().getDisplayMetrics().density),\n                (int) (24 * getResources().getDisplayMetrics().density),\n                true));\n\n    Button set_end = (Button) layout.findViewById(R.id.add_to_arrival);\n    set_end.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);\n    set_end.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            if (dest != null) dest.remove();\n            temp.remove();\n            opt_destination.position(position);\n            dest = googleMap.addMarker(opt_destination);\n            popup.dismiss();\n            create_button();\n            v.setOnClickListener(null);\n          }\n        });\n\n    dr = getResources().getDrawable(R.drawable.friend);\n    bitmap = ((BitmapDrawable) dr).getBitmap();\n\n    drawable =\n        new BitmapDrawable(\n            getResources(),\n            Bitmap.createScaledBitmap(\n                bitmap,\n                (int) (24 * getResources().getDisplayMetrics().density),\n                (int) (24 * getResources().getDisplayMetrics().density),\n                true));\n\n    Button send_friend = (Button) layout.findViewById(R.id.send_friend);\n    send_friend.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);\n    send_friend.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            popup.dismiss();\n            send_sms(default_name);\n            v.setOnClickListener(null);\n          }\n        });\n\n    dr = getResources().getDrawable(R.drawable.favorite_32);\n    bitmap = ((BitmapDrawable) dr).getBitmap();\n\n    drawable =\n        new BitmapDrawable(\n            getResources(),\n            Bitmap.createScaledBitmap(\n                bitmap,\n                (int) (24 * getResources().getDisplayMetrics().density),\n                (int) (24 * getResources().getDisplayMetrics().density),\n                true));\n\n    Button save_point = (Button) layout.findViewById(R.id.save);\n    save_point.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);\n    save_point.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            save2fav(default_name);\n            popup.dismiss();\n            v.setOnClickListener(null);\n          }\n        });\n\n    dr = getResources().getDrawable(R.drawable.clean);\n    bitmap = ((BitmapDrawable) dr).getBitmap();\n\n    drawable =\n        new BitmapDrawable(\n            getResources(),\n            Bitmap.createScaledBitmap(\n                bitmap,\n                (int) (24 * getResources().getDisplayMetrics().density),\n                (int) (24 * getResources().getDisplayMetrics().density),\n                true));\n\n    // Getting a reference to Close button, and close the popup when clicked.\n    Button clearall = (Button) layout.findViewById(R.id.close);\n    clearall.setCompoundDrawablesWithIntrinsicBounds(null, drawable, null, null);\n    clearall.setOnClickListener(\n        new OnClickListener() {\n\n          @Override\n          public void onClick(View v) {\n            if (start != null) start.remove();\n            if (dest != null) dest.remove();\n            temp.remove();\n            remove_button();\n            for (int i = 0; i < results.size(); i++) {\n              results.get(i).remove();\n            }\n            if (results.size() > 0) results.clear();\n            popup.dismiss();\n            v.setOnClickListener(null);\n          }\n        });\n  }\n"},
{"dataset": "findViewById","exampleID": 34, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 257, "focalAPIEnd": 294, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setOnInflateListener(MockOnInflateListener)", "view.getParent()", "view.setVisibility(*)", "view.getVisibility()", "view.getParent()", "view.setVisibility(*)", "view.getVisibility()", "view.getParent()"], "useStart":[366, 474, 519, 583, 706, 754, 824, 950], "useEnd":[406, 495, 553, 608, 727, 791, 849, 971], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/cts/ViewStubTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"Test {@link ViewStub#setVisibility(int)}\",\n    method = \"setVisibility\",\n    args = {int.class}\n  )\n  @UiThreadTest\n  public void testSetVisibility() {\n    final ViewStub viewStub1 = (ViewStub) mActivity.findViewById(R.id.viewstub);\n    MockOnInflateListener listener = new MockOnInflateListener();\n    viewStub1.setOnInflateListener(listener);\n    assertFalse(listener.hasCalledOnInflate());\n    assertNotNull(viewStub1.getParent());\n\n    // set GONE\n    viewStub1.setVisibility(View.GONE);\n    assertEquals(View.GONE, viewStub1.getVisibility());\n    // does not call inflate\n    assertFalse(listener.hasCalledOnInflate());\n    assertNotNull(viewStub1.getParent());\n\n    // set VISIBLE\n    viewStub1.setVisibility(View.VISIBLE);\n    assertEquals(View.VISIBLE, viewStub1.getVisibility());\n    // assure the inflate is called\n    assertTrue(listener.hasCalledOnInflate());\n    assertNull(viewStub1.getParent());\n\n    // set INVISIBLE when parent is null\n    final ViewStub viewStub2 = new ViewStub(mContext);\n    assertNull(viewStub2.getParent());\n    try {\n      viewStub2.setVisibility(View.INVISIBLE);\n      fail(\"should throw IllegalStateException\");\n    } catch (IllegalStateException e) {\n    }\n    assertEquals(View.INVISIBLE, viewStub2.getVisibility());\n  }\n"},
{"dataset": "findViewById","exampleID": 35, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "!(Boolean.parseBoolean(activity.getString(R.string.isPremium,),))", "guardType": "IF {", "guardExpressionStart": 87, "guardExpressionEnd": 145, "guardBlockStart": 87, "guardBlockEnd": 158, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 378, "focalAPIEnd": 411, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.addView(AdView)"], "useStart":[446], "useEnd":[468], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/indrek-koue/SERP-Tracker-Android/tree/master/src/com/inc/im/serptrackerpremium/util/Util.java", "rawCode": "  public static AdView loadAdmob(Activity a) {\n\n    // if premium, don't show ad's\n    if (Boolean.parseBoolean(a.getString(R.string.isPremium))) return null;\n\n    AdView adView = new AdView(a, AdSize.BANNER, \"a14e6777b9a798c\");\n\n    // Lookup your LinearLayout assuming it\u2019s been given\n    // the attribute android:id=\"@+id/mainLayout\"\n    LinearLayout layout = (LinearLayout) a.findViewById(R.id.admob_banner);\n\n    // Add the adView to it\n    layout.addView(adView);\n\n    // Initiate a generic request to load it with an ad\n    AdRequest adRequest = new AdRequest();\n    adView.loadAd(adRequest);\n\n    return adView;\n  }\n"},
{"dataset": "findViewById","exampleID": 36, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getWindow()", "activity.setContentView(int)"], "configurationStart":[147, 234], "configurationEnd":[168, 282], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 313, "focalAPIEnd": 353, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "initialize(Activity,view,String,String,String,boolean)", "view.getHolder()", "view.getHolder()", "view.getLayoutParams()", "view.setLayoutParams(FrameLayout.LayoutParams)", "activity.getActionBar()", "activity.getActionBar()", "activity.getResources()", "new NativeXperiaTouchpad(activity)"], "useStart":[384, 509, 671, 751, 910, 1119, 1273, 1451, 1749, 2315], "useEnd":[424, 597, 691, 771, 936, 1151, 1297, 1475, 1773, 2350], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/paulscode/mupen64plus-ae/tree/master/src/paulscode/android/mupen64plusae/GameLifecycleHandler.java", "rawCode": "  @TargetApi(11)\n  public void onCreateEnd(Bundle savedInstanceState) {\n    // Take control of the GameSurface if necessary\n    if (mIsXperiaPlay) mActivity.getWindow().takeSurface(null);\n\n    // Lay out content and get the views\n    mActivity.setContentView(R.layout.game_activity);\n    mSurface = (GameSurface) mActivity.findViewById(R.id.gameSurface);\n    mOverlay = (GameOverlay) mActivity.findViewById(R.id.gameOverlay);\n\n    // Initialize the objects and data files interfacing to the emulator core\n    CoreInterface.initialize(mActivity, mSurface, mRomPath, mRomMd5, mCheatArgs, mDoRestart);\n\n    // Listen to game surface events (created, changed, destroyed)\n    mSurface.getHolder().addCallback(this);\n\n    // Update the GameSurface size\n    mSurface.getHolder().setFixedSize(mUserPrefs.videoRenderWidth, mUserPrefs.videoRenderHeight);\n    FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) mSurface.getLayoutParams();\n    params.width = mUserPrefs.videoSurfaceWidth;\n    params.height = mUserPrefs.videoSurfaceHeight;\n    params.gravity = mUserPrefs.displayPosition | Gravity.CENTER_HORIZONTAL;\n    mSurface.setLayoutParams(params);\n\n    // Configure the action bar introduced in higher Android versions\n    if (mUserPrefs.isActionBarAvailable) {\n      mActivity.getActionBar().hide();\n      ColorDrawable color = new ColorDrawable(Color.parseColor(\"#303030\"));\n      color.setAlpha(mUserPrefs.displayActionBarTransparency);\n      mActivity.getActionBar().setBackgroundDrawable(color);\n    }\n\n    // Initialize the screen elements\n    if (mGamePrefs.isTouchscreenEnabled || mUserPrefs.isFpsEnabled) {\n      // The touch map and overlay are needed to display frame rate and/or controls\n      mTouchscreenMap = new VisibleTouchMap(mActivity.getResources());\n      mTouchscreenMap.load(\n          mUserPrefs.touchscreenSkin,\n          mGamePrefs.touchscreenProfile,\n          mUserPrefs.touchscreenRefresh > 0,\n          mUserPrefs.isFpsEnabled,\n          mUserPrefs.touchscreenScale,\n          mUserPrefs.touchscreenTransparency);\n      mOverlay.initialize(\n          mTouchscreenMap,\n          !mGamePrefs.isTouchscreenHidden,\n          mUserPrefs.displayFpsRefresh,\n          mUserPrefs.touchscreenRefresh);\n    }\n\n    // Initialize user interface devices\n    View inputSource = mIsXperiaPlay ? new NativeXperiaTouchpad(mActivity) : mOverlay;\n    initControllers(inputSource);\n\n    // Override the peripheral controllers' key provider, to add some extra functionality\n    inputSource.setOnKeyListener(this);\n  }\n"},
{"dataset": "findViewById","exampleID": 37, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 1, "exceptionType": "InvalidFileException", "exceptionHandlingCall": ["getLocalizedMessage()", "e(String,*)", "getMessage()", "makeText(Activity,*,*)", "show()"], "tryExpressionStart": 644, "tryExpressionEnd": 648, "tryBlockStart": 644, "tryBlockEnd": 1051, "catchExpressionStart": 872, "catchExpressionEnd": 903, "catchBlockStart": 872, "catchBlockEnd": 1051, "exceptionHandlingCallStart":[937, 915, 998, 973, 973], "exceptionHandlingCallEnd":[960, 961, 1012, 1033, 1040], "configuration":["activity.getWindowManager()"], "configurationStart":[469], "configurationEnd":[496], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 772, "focalAPIEnd": 811, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setImageDrawable(Drawable)", "makeText(activity,*,*)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[823, 973, 1184, 1356, 1583], "useEnd":[860, 1033, 1222, 1395, 1620], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emobc/emobc-android/tree/master/src/com/emobc/android/activities/generators/ImageTextDescriptionActivityGenerator.java", "rawCode": "  @Override\n  protected void loadAppLevelData(final Activity activity, final AppLevelData data) {\n    item = (ImageTextDescriptionLevelDataItem) data.findByNextLevel(nextLevel);\n\n    if (item == null) {\n      showAlerDialog(activity, \"No se ha encontrado el NextLevel:\\n\" + nextLevel.toString());\n    } else {\n      initializeHeader(activity, item);\n\n      // Create Banner\n      CreateMenus c = (CreateMenus) activity;\n      c.createBanner();\n\n      Display display = activity.getWindowManager().getDefaultDisplay();\n      int height = display.getHeight();\n\n      if (Utils.hasLength(item.getImageFile())) {\n        Drawable drawable;\n        try {\n          drawable = ImagesUtils.getDrawable(activity, item.getImageFile());\n          ImageView descrImaga = (ImageView) activity.findViewById(R.id.descr_image);\n          descrImaga.setImageDrawable(drawable);\n        } catch (InvalidFileException e) {\n          Log.e(\"AppCoverData\", e.getLocalizedMessage());\n          Toast.makeText(activity, e.getMessage(), Toast.LENGTH_SHORT).show();\n        }\n      }\n      // TODO: \u00BFpor qu\u00E9 est\u00E1 esto as\u00ED?\n      if (Utils.hasLength(item.getText())) {\n        TextView descrText = (TextView) activity.findViewById(R.id.basic_text);\n        descrText.setText(item.getText(), BufferType.EDITABLE);\n\n        if (height > 533) {\n          ScrollView sv = (ScrollView) activity.findViewById(R.id.text_scroll);\n          LayoutParams params = sv.getLayoutParams();\n          params.height += 35;\n          sv.setLayoutParams(params);\n        }\n      }\n\n      LinearLayout nextBtn = (LinearLayout) activity.findViewById(R.id.descr_mas);\n\n      if (item.getNextLevel() != null && item.getNextLevel().isDefined()) {\n        nextBtn.setOnClickListener(\n            new View.OnClickListener() {\n              public void onClick(View view) {\n                showNextLevel(activity, item.getNextLevel());\n              }\n            });\n        nextBtn.setBackgroundResource(R.drawable.mas_selector);\n      } else {\n        nextBtn.setVisibility(View.GONE);\n      }\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 38, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 1, "exceptionType": "InvalidFileException", "exceptionHandlingCall": ["getLocalizedMessage()", "e(String,*)", "getMessage()", "makeText(Activity,*,*)", "show()"], "tryExpressionStart": 405, "tryExpressionEnd": 409, "tryBlockStart": 405, "tryBlockEnd": 798, "catchExpressionStart": 625, "catchExpressionEnd": 656, "catchBlockStart": 625, "catchBlockEnd": 798, "exceptionHandlingCallStart":[688, 666, 747, 722, 722], "exceptionHandlingCallEnd":[711, 712, 761, 782, 789], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 529, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setImageDrawable(Drawable)", "makeText(activity,*,*)", "activity.findViewById(int)", "new NwListAdapter(activity,*,List<ListItemDataItem>)"], "useStart":[578, 722, 1301, 1355], "useEnd":[615, 782, 1333, 1417], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emobc/emobc-android/tree/master/src/com/emobc/android/activities/generators/ImageListActivityGenerator.java", "rawCode": "  @Override\n  protected void loadAppLevelData(final Activity activity, final AppLevelData data) {\n    item = (ImageListLevelDataItem) data.findByNextLevel(nextLevel);\n\n    // rotateScreen(activity);\n    initializeHeader(activity, item);\n\n    // Create Banner\n    CreateMenus c = (CreateMenus) activity;\n    c.createBanner();\n\n    if (Utils.hasLength(item.getImageFile())) {\n      Drawable drawable;\n      try {\n        drawable = ImagesUtils.getDrawable(activity, item.getImageFile());\n        ImageView descrImaga = (ImageView) activity.findViewById(R.id.descr_image);\n        descrImaga.setImageDrawable(drawable);\n      } catch (InvalidFileException e) {\n        Log.e(\"AppCoverData\", e.getLocalizedMessage());\n        Toast.makeText(activity, e.getMessage(), Toast.LENGTH_SHORT).show();\n      }\n    }\n    if (item.getList() != null && !item.getList().isEmpty()) {\n      List<ListItemDataItem> objects = item.getList();\n      if (item.isOrder()) {\n        Collections.sort(\n            objects,\n            new Comparator<ListItemDataItem>() {\n              @Override\n              public int compare(ListItemDataItem object1, ListItemDataItem object2) {\n                return object1.getText().compareTo(object2.getText());\n              }\n            });\n      }\n\n      ListView lv = (ListView) activity.findViewById(R.id.list);\n      lv.setAdapter(new NwListAdapter(activity, R.layout.image_list_item, objects));\n      lv.setTextFilterEnabled(true);\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 39, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 136, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[189, 240, 303, 381, 461, 530, 589, 653, 729], "useEnd":[221, 273, 348, 429, 510, 564, 628, 693, 781], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/tests/coretests/src/android/widget/layout/frame/FrameLayoutGravityTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n\n    mParent = activity.findViewById(R.id.parent);\n\n    mLeftView = activity.findViewById(R.id.left);\n    mRightView = activity.findViewById(R.id.right);\n    mCenterHorizontalView = activity.findViewById(R.id.center_horizontal);\n\n    mLeftCenterVerticalView = activity.findViewById(R.id.left_center_vertical);\n    mRighCenterVerticalView = activity.findViewById(R.id.right_center_vertical);\n    mCenterView = activity.findViewById(R.id.center);\n\n    mLeftBottomView = activity.findViewById(R.id.left_bottom);\n    mRightBottomView = activity.findViewById(R.id.right_bottom);\n    mCenterHorizontalBottomView = activity.findViewById(R.id.center_horizontal_bottom);\n  }\n"},
{"dataset": "findViewById","exampleID": 40, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 207, "focalAPIEnd": 253, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getSelectedItemPosition()", "activity.getActionBar()"], "useStart":[277, 344], "useEnd":[310, 367], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dhavalsdoshi/orteroid/tree/master/test/src/com/ideaboardz/android/activities/ViewBoardActivityTest.java", "rawCode": "  public void testShouldHaveDefaultSectionSelectedOnStart() {\n    ActionBar actionBar;\n    Spinner spinner;\n    if (Build.VERSION.SDK_INT <= Constants.VERSION_CODE_FOR_ANDROID_3) {\n      spinner = (Spinner) activity.findViewById(R.id.spinnerForSections);\n      assertEquals(0, spinner.getSelectedItemPosition());\n    } else {\n      actionBar = activity.getActionBar();\n      assertEquals(0, actionBar.getSelectedNavigationIndex());\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 41, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 674, "focalAPIEnd": 711, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":[], "useStart":[], "useEnd":[], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/SvenAke/AboveGameServer/tree/master/abovegame/src/com/aboveware/common/crouton/Crouton.java", "rawCode": "  /**\n   * Creates a {@link Crouton} with provided text and style for a given activity.\n   *\n   * @param activity The {@link Activity} that represents the context in which the Crouton should\n   *     exist.\n   * @param text The text you want to display.\n   * @param style The style that this {@link Crouton} should be created with.\n   * @param viewGroupResId The resource id of the {@link ViewGroup} that this {@link Crouton} should\n   *     be added to.\n   * @return The created {@link Crouton}.\n   */\n  public static Crouton makeText(\n      Activity activity, CharSequence text, Style style, int viewGroupResId) {\n    return new Crouton(activity, text, style, (ViewGroup) activity.findViewById(viewGroupResId));\n  }\n"},
{"dataset": "findViewById","exampleID": 42, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 214, "focalAPIEnd": 248, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[273, 334, 399], "useEnd":[309, 374, 440], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/branches/sng/GeoBeagle/src/com/google/code/geobeagle/activity/main/view/EditCacheActivityDelegate.java", "rawCode": "  public void onResume() {\n    Intent intent = mParent.getIntent();\n    Geocache geocache = intent.<Geocache>getParcelableExtra(\"geocache\");\n\n    EditCache editCache =\n        new EditCache(\n            (EditText) mParent.findViewById(R.id.edit_id),\n            (EditText) mParent.findViewById(R.id.edit_name),\n            (EditText) mParent.findViewById(R.id.edit_latitude),\n            (EditText) mParent.findViewById(R.id.edit_longitude));\n    editCache.set(geocache);\n\n    SetButtonOnClickListener setButtonOnClickListener =\n        new SetButtonOnClickListener(mParent, editCache, mLocationSaver);\n    ((Button) mParent.findViewById(R.id.edit_set)).setOnClickListener(setButtonOnClickListener);\n\n    Button cancel = (Button) mParent.findViewById(R.id.edit_cancel);\n    cancel.setOnClickListener(mCancelButtonOnClickListener);\n  }\n"},
{"dataset": "findViewById","exampleID": 43, "initialization":["Activity activity = getActivity()"], "initializationStart":[78], "initializationEnd":[91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 125, "focalAPIEnd": 170, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":[], "useStart":[], "useEnd":[], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bkrieger/fruity/tree/master/src/edu/upenn/cis/fruity/test/SchoolSelectTester.java", "rawCode": "  protected void setUp() throws Exception {\n    super.setUp();\n    activity = getActivity();\n    schoolListView = (ListView) activity.findViewById(R.id.list_view_schools);\n  }\n"},
{"dataset": "findViewById","exampleID": 44, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 134, "focalAPIEnd": 166, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)"], "useStart":[185], "useEnd":[219], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/tests/coretests/src/android/widget/layout/linear/FillInWrapTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mChild = activity.findViewById(R.id.data);\n    mContainer = activity.findViewById(R.id.layout);\n  }\n"},
{"dataset": "findViewById","exampleID": 45, "initialization":["int id = Bundle.getInt(String)"], "initializationStart":[573], "initializationEnd":[599], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 623, "focalAPIEnd": 653, "followUpCheck": "view == null || !(view instanceof DialogShowingView)", "checkType": "IF", "followUpCheckExpressionStart": 659, "followUpCheckExpressionEnd": 716, "followUpCheckBlockStart": 659, "followUpCheckBlockEnd": 743, "use":["view.createDialog(Bundle)"], "useStart":[770], "useEnd":[817], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Contacts/tree/master/src/com/android/contacts/util/DialogManager.java", "rawCode": "  /**\n   * Callback function called by the Activity to handle View-managed Dialogs. This function returns\n   * null if the id is not one of the two reserved Ids.\n   */\n  public Dialog onCreateDialog(final int id, final Bundle bundle) {\n    if (id == R.id.dialog_manager_id_1) {\n      mUseDialogId2 = true;\n    } else if (id == R.id.dialog_manager_id_2) {\n      mUseDialogId2 = false;\n    } else {\n      return null;\n    }\n    if (!bundle.containsKey(VIEW_ID_KEY)) {\n      throw new IllegalArgumentException(\"Bundle does not contain a ViewId\");\n    }\n    final int viewId = bundle.getInt(VIEW_ID_KEY);\n    final View view = mActivity.findViewById(viewId);\n    if (view == null || !(view instanceof DialogShowingView)) {\n      return null;\n    }\n    final Dialog dialog = ((DialogShowingView) view).createDialog(bundle);\n    if (dialog == null) {\n      return dialog;\n    }\n\n    // As we will never re-use this dialog, we can completely kill it here\n    dialog.setOnDismissListener(\n        new OnDismissListener() {\n          public void onDismiss(DialogInterface dialogInterface) {\n            mActivity.removeDialog(id);\n          }\n        });\n    return dialog;\n  }\n"},
{"dataset": "findViewById","exampleID": 46, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 104, "focalAPIEnd": 143, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setImageResource(*)", "view.setImageResource(*)"], "useStart":[235, 380], "useEnd":[291, 435], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/carnero/c-geo/tree/master/src/carnero/cgeo/googlemaps/cgeomap.java", "rawCode": "    public void onClick(View view) {\n      if (myLocSwitch == null) {\n        myLocSwitch = (ImageView) activity.findViewById(R.id.my_position);\n      }\n\n      if (followMyLocation == true) {\n        followMyLocation = false;\n\n        myLocSwitch.setImageResource(R.drawable.my_location_off);\n      } else {\n        followMyLocation = true;\n        myLocationInMiddle();\n\n        myLocSwitch.setImageResource(R.drawable.my_location_on);\n      }\n    }\n"},
{"dataset": "findViewById","exampleID": 47, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 77, "focalAPIEnd": 120, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":[], "useStart":[], "useEnd":[], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sefirot/androidStuff/tree/master/Berichtsheft/src/com/applang/Util1.java", "rawCode": "  public static View getContentView(Activity activity) {\n    View rootView = activity.findViewById(android.R.id.content);\n    ViewGroup viewGroup = (ViewGroup) rootView;\n    return viewGroup.getChildAt(0);\n  }\n"},
{"dataset": "findViewById","exampleID": 48, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 152, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setOnClickListener(CacheDetailsOnClickListener)"], "useStart":[142], "useEnd":[251], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/branches/robertlipe/GeoBeagle/src/com/google/code/geobeagle/GeoBeagleDelegate.java", "rawCode": "  public void onCreate() {\n    mCacheDetailsBuilder.setPositiveButton(\"Ok\", mCacheDetailsOkListener);\n    mCacheDetailsBuilder.create();\n\n    ((Button) mParent.findViewById(R.id.cache_details))\n        .setOnClickListener(mCacheDetailsOnClickListener);\n  }\n"},
{"dataset": "findViewById","exampleID": 49, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 145, "focalAPIEnd": 180, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[206, 267], "useEnd":[241, 302], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/tests/FrameworkTest/tests/src/com/android/frameworktest/layout/linear/BaselineAlignmentCenterGravityTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mButton1 = (Button) activity.findViewById(R.id.button1);\n    mButton2 = (Button) activity.findViewById(R.id.button2);\n    mButton3 = (Button) activity.findViewById(R.id.button3);\n  }\n"},
{"dataset": "findViewById","exampleID": 50, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 206, "focalAPIEnd": 233, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["setVisibilitySafe(view,int)"], "useStart":[188], "useEnd":[246], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/TeamNyx/packages_apps_Email/tree/master/src/com/android/email/activity/UiUtilities.java", "rawCode": "  /** Same as {@link View#setVisibility(int)}, but doesn't crash even if {@code view} is null. */\n  public static void setVisibilitySafe(Activity parent, int viewId, int visibility) {\n    setVisibilitySafe(parent.findViewById(viewId), visibility);\n  }\n"},
{"dataset": "findViewById","exampleID": 51, "initialization":["Activity activity = getActivity()"], "initializationStart":[58], "initializationEnd":[71], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 292, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["clickOnView(view)", "activity.findViewById(int)"], "useStart":[275, 396], "useEnd":[322, 426], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Ian-Wright1979/INB372-Solar/tree/master/INB372-SolarAndroid/src/unitTests/solarAndroidTests.java", "rawCode": "  public void testValidTariffCents() {\n    Activity act = getActivity();\n    // EditText editText = (EditText)act.findViewById(R.id.TariffRate);\n    // solo.clickOnView(editText);\n    // solo.clearEditText(editText);\n    // solo.enterText(editText, Double.toString(44));\n    solo.clickOnView(act.findViewById(R.id.Submit));\n    solo.sleep(servletResponseDelay);\n    String strValue = ((TextView) act.findViewById(R.id.Savings)).getText().toString().substring(1);\n    Float value = Float.parseFloat(strValue);\n    assertTrue(\"Servlet didn't respond in time or bad savings returned.\", value > 0);\n  }\n"},
{"dataset": "findViewById","exampleID": 52, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 182, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setText(*)"], "useStart":[272], "useEnd":[307], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cstdr/cstdr.ningningcat/tree/master/src/cstdr/ningningcat/NncApp.java", "rawCode": "        @Override\n        public void onResetFB(\n            Activity activity, Map<String, String> contactMap, Map<String, String> remarkMap) {\n          EditText name = (EditText) activity.findViewById(R.id.feedback_name);\n          if (remarkMap != null) {\n            name.setText(remarkMap.get(\"name\"));\n          }\n        }\n"},
{"dataset": "findViewById","exampleID": 53, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 340, "focalAPIEnd": 376, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["tapView(*,view)", "view.getViewTreeObserver()"], "useStart":[419, 473], "useEnd":[446, 496], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/cts/ViewTreeObserverTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"Test removeOnTouchModeChangeListener(OnTouchModeChangeListener)\",\n    method = \"removeOnTouchModeChangeListener\",\n    args = {android.view.ViewTreeObserver.OnTouchModeChangeListener.class}\n  )\n  public void testRemoveOnTouchModeChangeListener() {\n    final Button b = (Button) mActivity.findViewById(R.id.button1);\n    // let the button be touch mode.\n    TouchUtils.tapView(this, b);\n\n    mViewTreeObserver = b.getViewTreeObserver();\n\n    MockOnTouchModeChangeListener listener = new MockOnTouchModeChangeListener();\n    mViewTreeObserver.addOnTouchModeChangeListener(listener);\n    assertFalse(listener.hasCalledOnTouchModeChanged());\n    mInstrumentation.runOnMainSync(\n        new Runnable() {\n          public void run() {\n            b.requestFocusFromTouch();\n          }\n        });\n    mInstrumentation.waitForIdleSync();\n\n    assertTrue(listener.hasCalledOnTouchModeChanged());\n\n    listener = new MockOnTouchModeChangeListener();\n    assertFalse(listener.hasCalledOnTouchModeChanged());\n    mInstrumentation.runOnMainSync(\n        new Runnable() {\n          public void run() {\n            b.requestFocusFromTouch();\n          }\n        });\n    mInstrumentation.waitForIdleSync();\n\n    assertFalse(listener.hasCalledOnTouchModeChanged());\n  }\n"},
{"dataset": "findViewById","exampleID": 54, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 286, "focalAPIEnd": 324, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setImageBitmap(Bitmap)"], "useStart":[332], "useEnd":[361], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jacobhanshaw/Sniper/tree/master/android/src/com/sniper/utility/LoadUserImage.java", "rawCode": "    public void run() {\n      if (activity instanceof ActivityTargets) {\n        ActivityTargets targetActivity = (ActivityTargets) activity;\n        targetActivity.images[index] = bitmap;\n        targetActivity.SetupList();\n        return;\n      }\n      ImageView output = (ImageView) activity.findViewById(R.id.user_image);\n      output.setImageBitmap(bitmap);\n    }\n"},
{"dataset": "findViewById","exampleID": 55, "initialization":["Activity activity = getActivity()"], "initializationStart":[224], "initializationEnd":[237], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 264, "focalAPIEnd": 316, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":[], "useStart":[], "useEnd":[], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jeanin92/DieVerrueckteSightseeingtour/tree/master/DVST_TestTest/src/com/dhbw/dvst/unit/activities/StartActivityTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Intent intent = new Intent(getInstrumentation().getTargetContext(), StartActivity.class);\n    startActivity(intent, null, null);\n    mActivity = getActivity();\n    btn_start = (Button) mActivity.findViewById(com.dhbw.dvst.R.id.btn_start);\n  }\n"},
{"dataset": "findViewById","exampleID": 56, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 529, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.addView(ViewStub)"], "useStart":[574], "useEnd":[604], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mdfeist/CMPUT301F12T12/tree/master/CompleteMyTask/src/ca/ualberta/cs/completemytask/views/LoadingView.java", "rawCode": "  private void initView() {\n    ViewStub loadingView = new ViewStub(this.activity);\n    loadingView.setLayoutResource(R.layout.progress_overlay);\n    loadingView.setId(LOAD_VIEW_STUB);\n    loadingView.setInflatedId(LOAD_VIEW);\n\n    RelativeLayout.LayoutParams lp =\n        new RelativeLayout.LayoutParams(\n            RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);\n    lp.addRule(RelativeLayout.CENTER_IN_PARENT);\n\n    loadingView.setLayoutParams(lp);\n\n    ViewGroup viewGroup = (ViewGroup) this.activity.findViewById(this.viewId);\n    viewGroup.addView(loadingView);\n  }\n"},
{"dataset": "findViewById","exampleID": 57, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 371, "focalAPIEnd": 411, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["loadAnimation(activity,*)", "assertRunAnimation(*,view,Animation)", "assertRunAnimation(*,view,Animation)"], "useStart":[719, 1069, 2354], "useEnd":[783, 1146, 2431], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/animation/cts/DecelerateInterpolatorTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes =\n        \"test case will decelerate AlphaAnimation. It will change alpha from 0.0 to\"\n            + \" 1.0, the rate of change alpha starts out quickly and then decelerates.\",\n    method = \"getInterpolation\",\n    args = {float.class}\n  )\n  public void testDecelerateInterpolator() {\n    final View animWindow = mActivity.findViewById(R.id.anim_window);\n\n    // XML file of R.anim.decelerate_alpha\n    // <alpha xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    // android:interpolator=\"@android:anim/decelerate_interpolator\"\n    // android:fromAlpha=\"0.0\"\n    // android:toAlpha=\"1.0\"\n    // android:duration=\"2000\" />\n    final Animation anim = AnimationUtils.loadAnimation(mActivity, R.anim.decelerate_alpha);\n\n    assertEquals(DECELERATE_ALPHA_DURATION, anim.getDuration());\n    assertTrue(anim instanceof AlphaAnimation);\n\n    // factor is 1.0f\n    Interpolator interpolator = new DecelerateInterpolator(1.0f);\n    anim.setInterpolator(interpolator);\n    assertFalse(anim.hasStarted());\n\n    AnimationTestUtils.assertRunAnimation(getInstrumentation(), animWindow, anim);\n\n    Transformation transformation = new Transformation();\n    long startTime = anim.getStartTime();\n    anim.getTransformation(startTime, transformation);\n    float alpha1 = transformation.getAlpha();\n    assertEquals(0.0f, alpha1, ALPHA_DELTA);\n\n    anim.getTransformation(startTime + 500, transformation);\n    float alpha2 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 1000, transformation);\n    float alpha3 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 1500, transformation);\n    float alpha4 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + DECELERATE_ALPHA_DURATION, transformation);\n    float alpha5 = transformation.getAlpha();\n    assertEquals(1.0f, alpha5, ALPHA_DELTA);\n\n    // check decelerating delta alpha\n    float delta1 = alpha2 - alpha1;\n    float delta2 = alpha3 - alpha2;\n    float delta3 = alpha4 - alpha3;\n    float delta4 = alpha5 - alpha4;\n    assertTrue(delta1 > delta2);\n    assertTrue(delta2 > delta3);\n    assertTrue(delta3 > delta4);\n\n    // factor is 1.5f, it starts even faster and ends evens slower than 1.0f\n    interpolator = new DecelerateInterpolator(1.5f);\n    anim.setInterpolator(interpolator);\n\n    AnimationTestUtils.assertRunAnimation(getInstrumentation(), animWindow, anim);\n\n    transformation = new Transformation();\n    startTime = anim.getStartTime();\n    anim.getTransformation(startTime, transformation);\n    float alpha6 = transformation.getAlpha();\n    assertEquals(0.0f, alpha1, ALPHA_DELTA);\n\n    anim.getTransformation(startTime + 500, transformation);\n    float alpha7 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 1000, transformation);\n    float alpha8 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + 1500, transformation);\n    float alpha9 = transformation.getAlpha();\n\n    anim.getTransformation(startTime + DECELERATE_ALPHA_DURATION, transformation);\n    float alpha10 = transformation.getAlpha();\n    assertEquals(1.0f, alpha5, ALPHA_DELTA);\n\n    // check decelerating delta alpha\n    float delta5 = alpha7 - alpha6;\n    float delta6 = alpha8 - alpha7;\n    float delta7 = alpha9 - alpha8;\n    float delta8 = alpha10 - alpha9;\n    assertTrue(delta5 > delta6);\n    assertTrue(delta6 > delta7);\n    assertTrue(delta7 > delta8);\n\n    // check whether it starts even faster\n    assertTrue(delta5 > delta1);\n  }\n"},
{"dataset": "findViewById","exampleID": 58, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 260, "focalAPIEnd": 295, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["getImagesOnDifficulty(Drawable[],view,RatingsArray)"], "useStart":[524], "useEnd":[591], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/trunk/GeoBeagle/di/com/google/code/geobeagle/activity/main/GeoBeagleModule.java", "rawCode": "  private AttributeViewer getLabelledAttributeViewer(\n      Activity activity,\n      Resources resources,\n      RatingsArray ratingsArray,\n      int[] resourceIds,\n      int difficultyId,\n      int labelId) {\n    final ImageView imageViewTerrain = (ImageView) activity.findViewById(difficultyId);\n\n    final Drawable[] pawDrawables = {\n      resources.getDrawable(resourceIds[0]),\n      resources.getDrawable(resourceIds[1]),\n      resources.getDrawable(resourceIds[2]),\n    };\n    final AttributeViewer pawImages =\n        getImagesOnDifficulty(pawDrawables, imageViewTerrain, ratingsArray);\n    final AttributeViewer gcTerrain =\n        new LabelledAttributeViewer((TextView) activity.findViewById(labelId), pawImages);\n    return gcTerrain;\n  }\n"},
{"dataset": "findViewById","exampleID": 59, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 136, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)"], "useStart":[194], "useEnd":[237], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/faux123/android_frameworks_base/tree/master/core/tests/coretests/src/android/widget/layout/linear/BaselineAlignmentSpinnerButton.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mSpinner = activity.findViewById(R.id.reminder_value);\n    mButton = activity.findViewById(R.id.reminder_remove);\n  }\n"},
{"dataset": "findViewById","exampleID": 60, "initialization":["Activity activity = getActivity()"], "initializationStart":[67], "initializationEnd":[80], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 419, "focalAPIEnd": 454, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "view.setError(*)", "view.getText()", "view.setError(String)", "view.setError(String)"], "useStart":[495, 575, 655, 700, 846, 1565, 1718], "useEnd":[533, 614, 693, 724, 865, 1621, 1770], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mturley/luper/tree/master/luper-android/src/com/teamluper/luper/TabRegisterFragment.java", "rawCode": "  @UiThread\n  public void attemptRegistration() {\n    Activity a = getActivity();\n    if (!LuperMainActivity.deviceIsOnline(a)) {\n      DialogFactory.alert(\n          a,\n          \"Registration Failed!\",\n          \"You are not connected to the internet! \"\n              + \"You must be online to register or log in. Once logged in, however, you can use Luper while offline.\");\n    }\n\n    EditText editEmail = (EditText) a.findViewById(R.id.register_email);\n    EditText editPassword = (EditText) a.findViewById(R.id.register_password);\n    EditText editPassword2 = (EditText) a.findViewById(R.id.register_password2);\n    EditText editUsername = (EditText) a.findViewById(R.id.register_username);\n\n    editEmail.setError(null);\n    editPassword.setError(null);\n    editPassword2.setError(null);\n    editUsername.setError(null);\n\n    String email = editEmail.getText().toString();\n    String password = editPassword.getText().toString();\n    String password2 = editPassword2.getText().toString();\n    String username = editUsername.getText().toString();\n\n    boolean cancel = false;\n    View focusView = null;\n\n    // Check that the passwords match and are valid.\n    if (!password.equals(password2)) {\n      editPassword.setError(\"Passwords do not match!\");\n      focusView = editPassword;\n      cancel = true;\n    } else if (password.length() < 4) {\n      editPassword.setError(\"Password must be greater than 4 characters.\");\n      focusView = editPassword;\n      cancel = true;\n    }\n\n    // Check that the email is valid.\n    if (TextUtils.isEmpty(email)) {\n      editEmail.setError(\"A valid email address is required!\");\n      focusView = editEmail;\n      cancel = true;\n    } else if (!email.contains(\"@\")) {\n      editEmail.setError(\"This email address is invalid!\");\n      focusView = editEmail;\n      cancel = true;\n    }\n\n    // Check that the username is specified\n    if (TextUtils.isEmpty(username) || username.length() < 4) {\n      editUsername.setError(\"A display name of at least 4 characters is required.\");\n      focusView = editUsername;\n      cancel = true;\n    }\n\n    if (cancel) {\n      focusView.requestFocus();\n      return;\n    }\n\n    completeRegistration(email, password, username);\n  }\n"},
{"dataset": "findViewById","exampleID": 61, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[699, 976], "configurationEnd":[718, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1465, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeView(View)", "view.addView(*)"], "useStart":[1533, 1570, 1613], "useEnd":[1560, 1603, 1640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/huskysoft/403Interviewer/tree/master/SlidingMenu-master/library/src/com/jeremyfeinstein/slidingmenu/lib/SlidingMenu.java", "rawCode": "  /**\n   * Attaches the SlidingMenu to an entire Activity\n   *\n   * @param activity the Activity\n   * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW\n   * @param actionbarOverlay whether or not the ActionBar is overlaid\n   */\n  public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {\n    if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)\n      throw new IllegalArgumentException(\n          \"slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT\");\n\n    if (getParent() != null)\n      throw new IllegalStateException(\"This SlidingMenu appears to already be attached\");\n\n    // get the window background\n    TypedArray a =\n        activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n\n    switch (slideStyle) {\n      case SLIDING_WINDOW:\n        mActionbarOverlay = false;\n        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n        // save ActionBar themes that have transparent assets\n        decorChild.setBackgroundResource(background);\n        decor.removeView(decorChild);\n        decor.addView(this);\n        setContent(decorChild);\n        break;\n      case SLIDING_CONTENT:\n        mActionbarOverlay = actionbarOverlay;\n        // take the above view out of\n        ViewGroup contentParent = (ViewGroup) activity.findViewById(android.R.id.content);\n        View content = contentParent.getChildAt(0);\n        contentParent.removeView(content);\n        contentParent.addView(this);\n        setContent(content);\n        // save people from having transparent backgrounds\n        if (content.getBackground() == null) content.setBackgroundResource(background);\n        break;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 62, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 134, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)"], "useStart":[186], "useEnd":[223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/teamgummy/frameworks_base/tree/master/core/tests/coretests/src/android/widget/layout/linear/WeightSumTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mChild = activity.findViewById(R.id.child);\n    mContainer = activity.findViewById(R.id.container);\n  }\n"},
{"dataset": "findViewById","exampleID": 63, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 432, "focalAPIEnd": 457, "followUpCheck": "view == null", "checkType": "IF", "followUpCheckExpressionStart": 463, "followUpCheckExpressionEnd": 484, "followUpCheckBlockStart": 463, "followUpCheckBlockEnd": 506, "use":["formatSpeed(activity,double,boolean,boolean)", "view.setText(*)"], "useStart":[528, 511], "useEnd":[594, 595], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fumingshih/mytracks/tree/master/MyTracks/src/com/google/android/apps/mytracks/util/StatsUtils.java", "rawCode": "  /**\n   * Sets a speed value.\n   *\n   * @param activity the activity\n   * @param id the speed value resource id\n   * @param speed the speed in meters per second\n   * @param metricUnits true to display in metric units\n   * @param reportSpeed true to report speed\n   */\n  private static void setSpeedValue(\n      Activity activity, int id, double speed, boolean metricUnits, boolean reportSpeed) {\n    TextView textView = (TextView) activity.findViewById(id);\n    if (textView == null) {\n      return;\n    }\n    textView.setText(StringUtils.formatSpeed(activity, speed, metricUnits, reportSpeed));\n  }\n"},
{"dataset": "findViewById","exampleID": 64, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 136, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)"], "useStart":[194], "useEnd":[237], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kitkatandroid/JLS36G_base/tree/master/core/tests/coretests/src/android/widget/layout/linear/BaselineAlignmentSpinnerButton.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mSpinner = activity.findViewById(R.id.reminder_value);\n    mButton = activity.findViewById(R.id.reminder_remove);\n  }\n"},
{"dataset": "findViewById","exampleID": 65, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 715, "focalAPIEnd": 757, "followUpCheck": "view != null", "checkType": "IF", "followUpCheckExpressionStart": 763, "followUpCheckExpressionEnd": 785, "followUpCheckBlockStart": 763, "followUpCheckBlockEnd": 840, "use":["view.setText(*)"], "useStart":[794], "useEnd":[833], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NineWorlds/serenity-android/tree/master/serenity-app/src/main/java/us/nineworlds/serenity/ui/browser/tv/TVShowGridOnItemSelectedListener.java", "rawCode": "  @Override\n  public void onItemSelected(TwoWayAdapterView<?> av, View v, int position, long id) {\n\n    videoInfo = (SeriesContentInfo) av.getItemAtPosition(position);\n    if (previous != null) {\n      previous.setPadding(0, 0, 0, 0);\n    }\n\n    previous = v;\n\n    v.setPadding(5, 5, 5, 5);\n\n    final ImageView imageView = (ImageView) v.findViewById(R.id.posterImageView);\n\n    if (runnable != null) {\n      handler.removeCallbacks(runnable);\n    }\n    runnable =\n        new Runnable() {\n          @Override\n          public void run() {\n            changeBackgroundImage(imageView);\n            runnable = null;\n          }\n        };\n    handler.postDelayed(runnable, 500);\n\n    TextView titleView = (TextView) context.findViewById(R.id.tvShowGridTitle);\n    if (titleView != null) {\n      titleView.setText(videoInfo.getTitle());\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 66, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 199, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getViewTreeObserver()"], "useStart":[267], "useEnd":[295], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/cts/ViewTreeObserverTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"Test isAlive()\",\n    method = \"isAlive\",\n    args = {}\n  )\n  public void testIsAlive() {\n    final LinearLayout layout = (LinearLayout) mActivity.findViewById(R.id.linearlayout);\n\n    mViewTreeObserver = layout.getViewTreeObserver();\n    assertTrue(mViewTreeObserver.isAlive());\n  }\n"},
{"dataset": "findViewById","exampleID": 67, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 140, "focalAPIEnd": 179, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)", "activity.findViewById(int)"], "useStart":[198, 263, 323, 384, 433], "useEnd":[235, 295, 355, 417, 467], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/arjunroy/cinder_base/tree/master/tests/FrameworkTest/tests/src/com/android/frameworktest/layout/linear/BaselineButtonsTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mCurrentTime = activity.findViewById(R.id.currenttime);\n    mTotalTime = activity.findViewById(R.id.totaltime);\n    mPrev = (ImageButton) activity.findViewById(R.id.prev);\n    mNext = (ImageButton) activity.findViewById(R.id.next);\n    mPause = (ImageButton) activity.findViewById(R.id.pause);\n    mLayout = activity.findViewById(R.id.layout);\n  }\n"},
{"dataset": "findViewById","exampleID": 68, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 218, "focalAPIEnd": 256, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.clearAnimation()", "view.getAnimation()"], "useStart":[603, 749], "useEnd":[624, 768], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/cts/View_AnimationTest.java", "rawCode": "  @TestTargets({\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      method = \"View.clearAnimation\",\n      args = {}\n    )\n  })\n  public void testClearDuringAnimation() throws Throwable {\n    final View view = mActivity.findViewById(R.id.mock_view);\n    runTestOnUiThread(\n        new Runnable() {\n          public void run() {\n            view.startAnimation(mAnimation);\n            assertNotNull(view.getAnimation());\n          }\n        });\n\n    new DelayedCheck(TIME_OUT) {\n      @Override\n      protected boolean check() {\n        return mAnimation.hasStarted();\n      }\n    }.run();\n\n    view.clearAnimation();\n    Thread.sleep(TIME_OUT);\n    assertTrue(mAnimation.hasStarted());\n    assertTrue(mAnimation.hasEnded());\n    assertNull(view.getAnimation());\n  }\n"},
{"dataset": "findViewById","exampleID": 69, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 421, "focalAPIEnd": 462, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["checkUnselectedAlpha(view,*)", "checkUnselectedAlpha(view,*)"], "useStart":[469, 511], "useEnd":[504, 546], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/widget/src/android/widget/cts/GalleryTest.java", "rawCode": "  @TestTargets({\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      method = \"setUnselectedAlpha\",\n      args = {float.class}\n    ),\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      method = \"getChildStaticTransformation\",\n      args = {android.view.View.class, android.view.animation.Transformation.class}\n    )\n  })\n  public void testSetUnselectedAlpha() {\n    final MyGallery gallery = (MyGallery) mActivity.findViewById(R.id.gallery_test);\n\n    checkUnselectedAlpha(gallery, 0.0f);\n\n    checkUnselectedAlpha(gallery, 0.5f);\n  }\n"},
{"dataset": "findViewById","exampleID": 70, "initialization":["Activity activity = getActivity()"], "initializationStart":[210], "initializationEnd":[223], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 255, "focalAPIEnd": 299, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["new ImageView(activity)", "view.addView(ImageView)"], "useStart":[615, 777], "useEnd":[636, 795], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cachirulop/Moneybox/tree/master/Moneybox/src/com/cachirulop/moneybox/fragment/MoneyboxFragment.java", "rawCode": "  /** Add the currency buttons dynamically from the money_defs.xml file */\n  private void addButtons() {\n    ArrayList<CurrencyValueDef> currencies;\n    LinearLayout buttons;\n    Activity parent;\n\n    parent = getActivity();\n\n    buttons = (LinearLayout) parent.findViewById(R.id.moneyButtonsLayout);\n\n    currencies = CurrencyManager.getCurrencyDefList();\n\n    View.OnClickListener listener;\n\n    listener =\n        new View.OnClickListener() {\n          public void onClick(View v) {\n            onMoneyClicked(v);\n          }\n        };\n\n    for (CurrencyValueDef c : currencies) {\n      ImageView v;\n\n      v = new ImageView(parent);\n      v.setOnClickListener(listener);\n      v.setImageDrawable(c.getDrawable());\n      v.setLongClickable(true);\n      v.setTag(c);\n\n      buttons.addView(v);\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 71, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 153, "focalAPIEnd": 193, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setOnTriggerListener(*)", "activity.getContentResolver()"], "useStart":[200, 305], "useEnd":[236, 335], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blakez/android_packages_apps_Settings/tree/master/src/com/android/settings/cyanogenmod/LockscreenTargets.java", "rawCode": "  @Override\n  public void onActivityCreated(Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n    mWaveView = ((GlowPadView) mActivity.findViewById(R.id.lock_target));\n    mWaveView.setOnTriggerListener(this);\n    initializeView(\n        Settings.System.getString(\n            mActivity.getContentResolver(), Settings.System.LOCKSCREEN_TARGETS));\n  }\n"},
{"dataset": "findViewById","exampleID": 72, "initialization":["Activity activity = getActivity()"], "initializationStart":[122], "initializationEnd":[140], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 176, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "new Purity(activity,*)"], "useStart":[261, 398], "useEnd":[288, 444], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/thedracle/cordova-android-chromeview/tree/master/test/src/org/apache/cordova/test/IFrameTest.java", "rawCode": "  protected void setUp() throws Exception {\n    super.setUp();\n    mInstr = this.getInstrumentation();\n    testActivity = this.getActivity();\n    containerView = (FrameLayout) testActivity.findViewById(android.R.id.content);\n    innerContainer = (LinearLayout) containerView.getChildAt(0);\n    testView = (CordovaWebView) innerContainer.getChildAt(0);\n    touch = new TouchUtils();\n    touchTool = new Purity(testActivity, getInstrumentation());\n  }\n"},
{"dataset": "findViewById","exampleID": 73, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 80, "focalAPIEnd": 118, "followUpCheck": "view.getVisibility() == View.VISIBLE", "checkType": "IF", "followUpCheckExpressionStart": 124, "followUpCheckExpressionEnd": 171, "followUpCheckBlockStart": 124, "followUpCheckBlockEnd": 222, "use":["view.setVisibility(*)"], "useStart":[180], "useEnd":[215], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dhavalsdoshi/orteroid/tree/master/src/com/ideaboardz/android/utilities/CustomActionBar.java", "rawCode": "  private void makeSearchTextInvisible() {\n    TextView searchView = (TextView) activity.findViewById(R.id.searchText);\n    if (searchView.getVisibility() == View.VISIBLE) {\n      searchView.setVisibility(View.GONE);\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 74, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[699, 976], "configurationEnd":[718, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1465, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeView(View)", "view.addView(*)"], "useStart":[1533, 1570, 1613], "useEnd":[1560, 1603, 1640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Jwashton/BibleApp/tree/master/slidingmenu/src/com/slidingmenu/lib/SlidingMenu.java", "rawCode": "  /**\n   * Attaches the SlidingMenu to an entire Activity\n   *\n   * @param activity the Activity\n   * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW\n   * @param actionbarOverlay whether or not the ActionBar is overlaid\n   */\n  public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {\n    if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)\n      throw new IllegalArgumentException(\n          \"slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT\");\n\n    if (getParent() != null)\n      throw new IllegalStateException(\"This SlidingMenu appears to already be attached\");\n\n    // get the window background\n    TypedArray a =\n        activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n\n    switch (slideStyle) {\n      case SLIDING_WINDOW:\n        mActionbarOverlay = false;\n        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n        // save ActionBar themes that have transparent assets\n        decorChild.setBackgroundResource(background);\n        decor.removeView(decorChild);\n        decor.addView(this);\n        setContent(decorChild);\n        break;\n      case SLIDING_CONTENT:\n        mActionbarOverlay = actionbarOverlay;\n        // take the above view out of\n        ViewGroup contentParent = (ViewGroup) activity.findViewById(android.R.id.content);\n        View content = contentParent.getChildAt(0);\n        contentParent.removeView(content);\n        contentParent.addView(this);\n        setContent(content);\n        // save people from having transparent backgrounds\n        if (content.getBackground() == null) content.setBackgroundResource(background);\n        break;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 75, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 127, "focalAPIEnd": 151, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setOnClickListener(View.OnClickListener)"], "useStart":[157], "useEnd":[180], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svilendobrev/jbase/tree/master/ui/Common.java", "rawCode": "  public static View setOnClick(Activity context, int id, View.OnClickListener l) {\n    funk.assertTrue(id != 0);\n    View v = context.findViewById(id);\n    v.setOnClickListener(l);\n    return v;\n  }\n"},
{"dataset": "findViewById","exampleID": 76, "initialization":["Activity activity = getActivity()"], "initializationStart":[80], "initializationEnd":[93], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 147, "focalAPIEnd": 192, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.registerReceiver(InterceptSmsReceiver,IntentFilter)"], "useStart":[223, 474], "useEnd":[271, 527], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzo/packages_apps_mms/tree/master/tests/src/com/android/mms/InterceptSendSms.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    Activity activity = getActivity();\n    super.setUp();\n    mRecipientsView = (TextView) activity.findViewById(R.id.recipients_editor);\n    mTextEditor = (EditText) activity.findViewById(R.id.embedded_text_editor);\n\n    // Setup our receiver to listen for SMS's about to be sent.\n    mInterceptReceiver = new InterceptSmsReceiver();\n    IntentFilter filter = new IntentFilter(WorkingMessage.ACTION_SENDING_SMS);\n    activity.registerReceiver(mInterceptReceiver, filter);\n  }\n"},
{"dataset": "findViewById","exampleID": 77, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 194, "focalAPIEnd": 241, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "view.getWidth()", "view.getHeight()"], "useStart":[271, 505, 553], "useEnd":[311, 522, 571], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/animation/cts/TranslateAnimationTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    method = \"initialize\",\n    args = {int.class, int.class, int.class, int.class}\n  )\n  public void testInitialize() {\n    final View parent = mActivity.findViewById(R.id.anim_window_parent);\n    final View animWindow = mActivity.findViewById(R.id.anim_window);\n    final Transformation transformation = new Transformation();\n    final int selfWidth = animWindow.getWidth();\n    final int selfHeight = animWindow.getHeight();\n    final int parentWidth = parent.getWidth();\n    final int parentHeight = parent.getHeight();\n    final int actualWidth = selfWidth;\n    final int actualHeight = parentHeight;\n    final TranslateAnimation translateAnimation =\n        new TranslateAnimation(\n            Animation.RELATIVE_TO_SELF,\n            RELATIVE_FROM_X_DELTA,\n            Animation.RELATIVE_TO_SELF,\n            RELATIVE_TO_X_DELTA,\n            Animation.RELATIVE_TO_PARENT,\n            RELATIVE_FROM_Y_DELTA,\n            Animation.RELATIVE_TO_PARENT,\n            RELATIVE_TO_Y_DELTA);\n    assertFalse(translateAnimation.isInitialized());\n    translateAnimation.initialize(selfWidth, selfHeight, parentWidth, parentHeight);\n    assertTrue(translateAnimation.isInitialized());\n    translateAnimation.setDuration(DURATION);\n    translateAnimation.setInterpolator(new LinearInterpolator());\n\n    AnimationTestUtils.assertRunAnimation(getInstrumentation(), animWindow, translateAnimation);\n    final long startTime = translateAnimation.getStartTime();\n\n    float values[] = new float[9];\n    translateAnimation.getTransformation(startTime, transformation);\n    transformation.getMatrix().getValues(values);\n    assertEquals(RELATIVE_FROM_X_DELTA * actualWidth, values[Matrix.MTRANS_X], POSITION_DELTA);\n    assertEquals(RELATIVE_FROM_Y_DELTA * actualHeight, values[Matrix.MTRANS_Y], POSITION_DELTA);\n\n    transformation.clear();\n    translateAnimation.getTransformation(startTime + DURATION / 2, transformation);\n    transformation.getMatrix().getValues(values);\n    assertEquals(\n        ((RELATIVE_TO_X_DELTA + RELATIVE_FROM_X_DELTA) / 2) * actualWidth,\n        values[Matrix.MTRANS_X],\n        POSITION_DELTA);\n    assertEquals(\n        ((RELATIVE_TO_Y_DELTA + RELATIVE_FROM_Y_DELTA) / 2) * actualHeight,\n        values[Matrix.MTRANS_Y],\n        POSITION_DELTA);\n\n    transformation.clear();\n    translateAnimation.getTransformation(startTime + DURATION, transformation);\n    transformation.getMatrix().getValues(values);\n    assertEquals(RELATIVE_TO_X_DELTA * actualWidth, values[Matrix.MTRANS_X], POSITION_DELTA);\n    assertEquals(RELATIVE_TO_Y_DELTA * actualHeight, values[Matrix.MTRANS_Y], POSITION_DELTA);\n  }\n"},
{"dataset": "findViewById","exampleID": 78, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 89, "focalAPIEnd": 121, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["is24HourFormat(activity)", "view.getCurrentItem()", "activity.findViewById(int)", "view.getCurrentItem()"], "useStart":[146, 216, 294, 394], "useEnd":[181, 238, 326, 416], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/nbeloglazov/GeekAlarm/tree/master/android/src/com/geek_alarm/android/ActivityUtils.java", "rawCode": "  public static int getHour(Activity activity) {\n    final WheelView hours = (WheelView) activity.findViewById(R.id.hour);\n    boolean is24Hour = DateFormat.is24HourFormat(activity);\n    if (is24Hour) {\n      return hours.getCurrentItem();\n    } else {\n      final WheelView ampm = (WheelView) activity.findViewById(R.id.ampm);\n      boolean isAM = ampm.getCurrentItem() == 0;\n      int hour = hours.getCurrentItem();\n      hour++;\n      hour %= 12;\n      if (!isAM) {\n        hour += 12;\n      }\n      return hour;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 79, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 212, "focalAPIEnd": 239, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["checkView(view)"], "useStart":[202], "useEnd":[240], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sisbell/email/tree/master/src/com/android/email/activity/UiUtilities.java", "rawCode": "  /** Same as {@link Activity#findViewById}, but crashes if there's no view. */\n  @SuppressWarnings(\"unchecked\")\n  public static <T extends View> T getView(Activity parent, int viewId) {\n    return (T) checkView(parent.findViewById(viewId));\n  }\n"},
{"dataset": "findViewById","exampleID": 80, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 82, "focalAPIEnd": 120, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setImageResource(int)"], "useStart":[69], "useEnd":[144], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/konklone/campyre/tree/master/src/campyre/android/Utils.java", "rawCode": "  public static void setTitleIcon(Activity activity, int icon) {\n    ((ImageView) activity.findViewById(R.id.title_icon)).setImageResource(icon);\n  }\n"},
{"dataset": "findViewById","exampleID": 81, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[699, 976], "configurationEnd":[718, 996], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1465, "focalAPIEnd": 1508, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeView(View)", "view.addView(*)"], "useStart":[1533, 1570, 1613], "useEnd":[1560, 1603, 1640], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ashokgelal/SlidingMenuLib/tree/master/src/com/slidingmenu/lib/SlidingMenu.java", "rawCode": "  /**\n   * Attaches the SlidingMenu to an entire Activity\n   *\n   * @param activity the Activity\n   * @param slideStyle either SLIDING_CONTENT or SLIDING_WINDOW\n   * @param actionbarOverlay whether or not the ActionBar is overlaid\n   */\n  public void attachToActivity(Activity activity, int slideStyle, boolean actionbarOverlay) {\n    if (slideStyle != SLIDING_WINDOW && slideStyle != SLIDING_CONTENT)\n      throw new IllegalArgumentException(\n          \"slideStyle must be either SLIDING_WINDOW or SLIDING_CONTENT\");\n\n    if (getParent() != null)\n      throw new IllegalStateException(\"This SlidingMenu appears to already be attached\");\n\n    // get the window background\n    TypedArray a =\n        activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n    int background = a.getResourceId(0, 0);\n    a.recycle();\n\n    switch (slideStyle) {\n      case SLIDING_WINDOW:\n        mActionbarOverlay = false;\n        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n        ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n        // save ActionBar themes that have transparent assets\n        decorChild.setBackgroundResource(background);\n        decor.removeView(decorChild);\n        decor.addView(this);\n        setContent(decorChild);\n        break;\n      case SLIDING_CONTENT:\n        mActionbarOverlay = actionbarOverlay;\n        // take the above view out of\n        ViewGroup contentParent = (ViewGroup) activity.findViewById(android.R.id.content);\n        View content = contentParent.getChildAt(0);\n        contentParent.removeView(content);\n        contentParent.addView(this);\n        setContent(content);\n        // save people from having transparent backgrounds\n        if (content.getBackground() == null) content.setBackgroundResource(background);\n        break;\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 82, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 112, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "activity.findViewById(int)", "makeText(activity,String,int)", "new DBUtils(activity)", "makeText(activity,String,*)", "getSI_FromNameAndStore(activity,*,*)", "new Task_PostData(activity,ShoppingItem)"], "useStart":[183, 255, 487, 574, 2000, 2576, 3703], "useEnd":[218, 289, 534, 591, 2054, 2702, 3730], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/iwabuchiken/ShoppingList/tree/master/src/sl/listeners/ButtonOnClickListener.java", "rawCode": "  private void case_register(View v) {\n    // TODO Auto-generated method stub\n    EditText et_name = (EditText) actv.findViewById(R.id.v1_et_name);\n    EditText et_price = (EditText) actv.findViewById(R.id.v1_et_price);\n\n    EditText et_yomi = (EditText) actv.findViewById(R.id.v1_et_yomi);\n\n    // All written?\n    if (et_name.getText().toString().equals(\"\") || et_price.getText().toString().equals(\"\") // ||\n    // et_genre.getText().toString().equals(\"\")\n    ) {\n      // debug\n      Toast.makeText(actv, \"Empty item exists\", 2000).show();\n    } // if\n\n    DBUtils dbm = new DBUtils(actv);\n\n    SQLiteDatabase db = dbm.getWritableDatabase();\n\n    // columns => {\"store\", \"name\", \"price\", \"genre\", \"yomi\"};\n    /*\n    // 0 1 2\n    \"store\", \"name\", \"price\",\n    // 3 4 5\n    \"genre\", \"yomi\", android.provider.BaseColumns._ID,\n    // 6 7 8\n    \"created_at\", \"updated_at\", \"posted_at\"\n    */\n    boolean result =\n        dbm.storeData(\n            db,\n            CONS.tableName,\n            CONS.cols_SI_Register,\n            // CONS.columns,\n            new String[] {\n              // et_store.getText().toString(),\n              sp_store_name.getSelectedItem().toString(),\n              et_name.getText().toString(),\n              // et_yomi.getText().toString(),\n              et_price.getText().toString(),\n\n              // et_genre.getText().toString()\n              sp_genre_name.getSelectedItem().toString(),\n              et_yomi.getText().toString(),\n              Methods.getTimeLabel_V2(Methods.getMillSeconds_now(), 2),\n              Methods.getTimeLabel_V2(Methods.getMillSeconds_now(), 2)\n              // String.valueOf(Methods.getMillSeconds_now()),\n              // String.valueOf(Methods.getMillSeconds_now())\n            });\n\n    if (result == true) {\n      // Log\n      Log.d(\n          \"ButtonOnClickListener.java\"\n              + \"[\"\n              + Thread.currentThread().getStackTrace()[2].getLineNumber()\n              + \"]\",\n          \"Data stored\");\n      // debug\n      Toast.makeText(actv, \"Data stored\", Toast.LENGTH_LONG).show();\n\n    } else { // if (result == true)\n      // Log\n      Log.d(\n          \"ButtonOnClickListener.java\"\n              + \"[\"\n              + Thread.currentThread().getStackTrace()[2].getLineNumber()\n              + \"]\",\n          \"Data not stored\");\n    } // if (result == true)\n\n    db.close();\n\n    /**\n     * ******************************* Post data to remote Build: ShoppingItem instance Post data\n     * *******************************\n     */\n    // Build: ShoppingItem instance\n    ShoppingItem si =\n        Methods_sl.getSI_FromNameAndStore(\n            actv, et_name.getText().toString(), sp_store_name.getSelectedItem().toString());\n\n    // si.setPosted_at(\n    // Methods.getTimeLabel_V2(\n    // Methods.getMillSeconds_now(), 2));\n    // si.setPosted_at(Methods.getMillSeconds_now());\n\n    // Log\n    Log.d(\n        \"[\"\n            + \"ButtonOnClickListener.java : \"\n            + +Thread.currentThread().getStackTrace()[2].getLineNumber()\n            + \" : \"\n            + Thread.currentThread().getStackTrace()[2].getMethodName()\n            + \"]\",\n        \"New item => \"\n            + \"name=\"\n            + si.getName()\n            + \" / \"\n            + \"store=\"\n            + si.getStore()\n            + \" / \"\n            + \"id=\"\n            + si.getId()\n            + \" / \"\n            + \"created_at=\"\n            + si.getCreated_at());\n\n    // boolean res = Methods_sl.update_SI(actv, si);\n\n    // if (res == false) {\n    //\n    // // debug\n    // Toast.makeText(actv,\n    // \"Data 'posted_at' => Not added\",\n    // Toast.LENGTH_LONG).show();\n    //\n    // return;\n    //\n    // }//if (res == false)\n\n    Task_PostData task = new Task_PostData(actv, si);\n\n    task.execute(CONS.HTTPData.registerChoice.single_item.toString());\n  } // private void case_register(View v)\n"},
{"dataset": "findViewById","exampleID": 83, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 592, "focalAPIEnd": 632, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["loadAnimation(activity,*)", "assertRunAnimation(*,view,Animation)", "assertRunAnimation(*,view,Animation,int)"], "useStart":[940, 1264, 1586], "useEnd":[1004, 1341, 1669], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/animation/cts/AnimationTest.java", "rawCode": "  @TestTargets({\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      notes = \"Test {@link Animation#setAnimationListener(AnimationListener)}\",\n      method = \"setAnimationListener\",\n      args = {android.view.animation.Animation.AnimationListener.class}\n    ),\n    @TestTargetNew(\n      level = TestLevel.COMPLETE,\n      notes = \"Test {@link Animation#getTransformation(long, Transformation)}\",\n      method = \"getTransformation\",\n      args = {long.class, android.view.animation.Transformation.class}\n    )\n  })\n  public void testSetAnimationListener() {\n    final View animWindow = mActivity.findViewById(R.id.anim_window);\n\n    // XML file of R.anim.accelerate_alpha\n    // <alpha xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    // android:interpolator=\"@android:anim/accelerate_interpolator\"\n    // android:fromAlpha=\"0.1\"\n    // android:toAlpha=\"0.9\"\n    // android:duration=\"1000\" />\n    final Animation anim = AnimationUtils.loadAnimation(mActivity, R.anim.accelerate_alpha);\n    MockAnimationListener listener = new MockAnimationListener();\n    anim.setAnimationListener(listener);\n    assertFalse(listener.hasAnimationStarted());\n    assertFalse(listener.hasAnimationEnded());\n    assertFalse(listener.hasAnimationRepeated());\n\n    AnimationTestUtils.assertRunAnimation(getInstrumentation(), animWindow, anim);\n    assertTrue(listener.hasAnimationStarted());\n    assertTrue(listener.hasAnimationEnded());\n    assertFalse(listener.hasAnimationRepeated());\n\n    listener.reset();\n    anim.setRepeatCount(2);\n    anim.setRepeatMode(Animation.REVERSE);\n\n    AnimationTestUtils.assertRunAnimation(getInstrumentation(), animWindow, anim, 3000);\n    assertTrue(listener.hasAnimationStarted());\n    assertTrue(listener.hasAnimationRepeated());\n    assertTrue(listener.hasAnimationEnded());\n\n    listener.reset();\n    // onAnimationEnd will not be invoked and animation should not end\n    anim.setRepeatCount(Animation.INFINITE);\n\n    getInstrumentation()\n        .runOnMainSync(\n            new Runnable() {\n              public void run() {\n                animWindow.startAnimation(anim);\n              }\n            });\n    synchronized (mLockObject) {\n      try {\n        mLockObject.wait(4 * ACCELERATE_ALPHA_DURATION);\n      } catch (InterruptedException e) {\n        fail(\"thrown unexpected InterruptedException\");\n      }\n    }\n\n    assertTrue(listener.hasAnimationStarted());\n    assertTrue(listener.hasAnimationRepeated());\n    assertFalse(listener.hasAnimationEnded());\n  }\n"},
{"dataset": "findViewById","exampleID": 84, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 63, "focalAPIEnd": 104, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["expect(view)", "new CheckDetailsButton(activity)"], "useStart":[56, 251], "useEnd":[105, 283], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/trunk/GeoBeagleTest/test/com/google/code/geobeagle/activity/main/view/WebPageAndDetailsButtonEnablerTest.java", "rawCode": "  @Test\n  public void testCheckDetailsButtonLOC() {\n    expect(activity.findViewById(R.id.cache_details)).andReturn(detailsButton);\n    expect(geocache.getSourceType()).andReturn(Source.LOC);\n    detailsButton.setEnabled(false);\n\n    replayAll();\n    new CheckDetailsButton(activity).check(geocache);\n    verifyAll();\n  }\n"},
{"dataset": "findViewById","exampleID": 85, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.getTheme()", "activity.getWindow()"], "configurationStart":[390, 607], "configurationEnd":[409, 627], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 993, "focalAPIEnd": 1041, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "view.removeAllViews()", "view.addView(SlidingMenu,*,*)"], "useStart":[1062, 1091, 1151], "useEnd":[1083, 1115, 1222], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vyloy/lnvc/tree/master/stb/SlidingMenu/src/com/slidingmenu/lib/SlidingMenu.java", "rawCode": "  public static void attachSlidingMenu(Activity activity, SlidingMenu sm, boolean slidingTitle) {\n\n    if (sm.getParent() != null)\n      throw new IllegalStateException(\n          \"SlidingMenu cannot be attached to another view when\"\n              + \" calling the static method attachSlidingMenu\");\n\n    if (slidingTitle) {\n      // get the window background\n      TypedArray a =\n          activity.getTheme().obtainStyledAttributes(new int[] {android.R.attr.windowBackground});\n      int background = a.getResourceId(0, 0);\n      // move everything into the SlidingMenu\n      ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();\n      ViewGroup decorChild = (ViewGroup) decor.getChildAt(0);\n      decor.removeAllViews();\n      // save ActionBar themes that have transparent assets\n      decorChild.setBackgroundResource(background);\n      sm.setContent(decorChild);\n      decor.addView(sm);\n    } else {\n      // take the above view out of\n      ViewGroup content = (ViewGroup) activity.findViewById(Window.ID_ANDROID_CONTENT);\n      View above = content.getChildAt(0);\n      content.removeAllViews();\n      sm.setContent(above);\n      content.addView(sm, LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 86, "initialization":["Activity activity = getActivity()"], "initializationStart":[842], "initializationEnd":[855], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 1166, "focalAPIEnd": 1231, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["assertNotNull(view)"], "useStart":[1299], "useEnd":[1323], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MinionApp/minion/tree/master/MinionAppTestRobotiumGerman/src/uw/cse403/minion/test/SignupActivityTest.java", "rawCode": "  /** Test that a user cannot sign up with an invalid password */\n  public void testInvalidPassword() {\n    Solo solo = new Solo(getInstrumentation(), getActivity());\n    EditText username = (EditText) getActivity().findViewById(uw.cse403.minion.R.id.username_input);\n    EditText password = (EditText) getActivity().findViewById(uw.cse403.minion.R.id.password_input);\n    EditText passwordMatch =\n        (EditText) getActivity().findViewById(uw.cse403.minion.R.id.confirm_password_input);\n    solo.typeText(username, UNUSED_USERNAME);\n    solo.typeText(password, INVALID_PASSWORD);\n    solo.typeText(passwordMatch, INVALID_PASSWORD);\n    solo.pressSpinnerItem(SPINNER_INDEX, 1);\n    EditText answerEditText = (EditText) getActivity().findViewById(R.id.security_answer_input);\n    solo.typeText(answerEditText, COLOR);\n    Activity signup = getActivity();\n    solo.clickOnButton(solo.getString(uw.cse403.minion.R.string.next_button));\n    solo.waitForActivity(EmptyValidatorActivity.class);\n    // assertTrue(solo.waitForActivity(SignupActivity.class));\n    solo.assertCurrentActivity(\"in Signup\", SignupActivity.class);\n    TextView errorView =\n        (TextView) signup.findViewById(uw.cse403.minion.R.id.invalid_password_error);\n    // assertTrue(errorView.getVisibility() == View.VISIBLE);\n    assertNotNull(errorView);\n    solo.finishOpenedActivities();\n  }\n"},
{"dataset": "findViewById","exampleID": 87, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 533, "focalAPIEnd": 568, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["expect(view)", "expectNew(*,Resources,CacheItemFactory,activity,ArrayList<Geocache>)", "new CachePinsOverlayFactory(activity,CacheItemFactory,QueryManager,Resources,*)"], "useStart":[517, 1032, 1255], "useEnd":[569, 1120, 1341], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sng/gb/tree/master/trunk/GeoBeagleTest/test/com/google/code/geobeagle/activity/map/CachePinsOverlayFactoryTest.java", "rawCode": "  @Test\n  public void testGetCachePinsOverlayDoesntNeedLoading() throws Exception {\n    GeoMapView geoMapView = PowerMock.createMock(GeoMapView.class);\n    QueryManager queryManager = PowerMock.createMock(QueryManager.class);\n    CachePinsOverlay cachePinsOverlay = PowerMock.createMock(CachePinsOverlay.class);\n    Projection projection = PowerMock.createMock(Projection.class);\n    GeoPoint newTopLeft = PowerMock.createMock(GeoPoint.class);\n    GeoPoint newBottomRight = PowerMock.createMock(GeoPoint.class);\n\n    EasyMock.expect(activity.findViewById(R.id.mapview)).andReturn(geoMapView);\n    EasyMock.expect(geoMapView.getProjection()).andReturn(projection);\n    EasyMock.expect(projection.fromPixels(0, 0)).andReturn(newTopLeft);\n    EasyMock.expect(geoMapView.getRight()).andReturn(100);\n    EasyMock.expect(geoMapView.getBottom()).andReturn(200);\n    EasyMock.expect(projection.fromPixels(100, 200)).andReturn(newBottomRight);\n    EasyMock.expect(queryManager.needsLoading(newTopLeft, newBottomRight)).andReturn(false);\n    PowerMock.expectNew(CachePinsOverlay.class, resources, cacheItemFactory, activity, list)\n        .andReturn(cachePinsOverlay);\n\n    PowerMock.replayAll();\n    final CachePinsOverlayFactory cachePinsOverlayFactory =\n        new CachePinsOverlayFactory(activity, cacheItemFactory, queryManager, resources, null);\n    assertEquals(cachePinsOverlay, cachePinsOverlayFactory.getCachePinsOverlay());\n    PowerMock.verifyAll();\n  }\n"},
{"dataset": "findViewById","exampleID": 88, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 228, "focalAPIEnd": 271, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.addView(UndoBarController)"], "useStart":[215], "useEnd":[286], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Blechd0se/android_packages_apps_AeroControl/tree/master/AeroControl/library/UndoBar/library/src/com/cocosw/undobar/UndoBarController.java", "rawCode": "  private static UndoBarController ensureView(Activity activity) {\n    UndoBarController undo = UndoBarController.getView(activity);\n    if (undo == null) {\n      undo = new UndoBarController(activity, null);\n      ((ViewGroup) activity.findViewById(android.R.id.content)).addView(undo);\n    }\n    return undo;\n  }\n"},
{"dataset": "findViewById","exampleID": 89, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 99, "focalAPIEnd": 142, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.draw(Canvas)", "view.convertRect(ZLRect)", "view.getWidth()", "view.getHeight()"], "useStart":[191, 237, 316, 391], "useEnd":[210, 261, 333, 409], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/geometer/FBReaderJ-alex/tree/master/src/org/geometerplus/android/fbreader/EPDView.java", "rawCode": "  private void updateEpdRegion(ZLRect rect) {\n    final ZLAndroidWidget widget = (ZLAndroidWidget) myActivity.findViewById(R.id.main_view_epd);\n\n    final Canvas canvas = getEpdCanvas();\n    widget.draw(canvas);\n\n    final Rect region = widget.convertRect(rect);\n\n    final int minLeft = 3;\n    final int maxRight = widget.getWidth() - 4;\n    final int minTop = 3;\n    final int maxBottom = widget.getHeight() - 1;\n\n    region.left = Math.max(region.left, minLeft);\n    region.top = Math.max(region.top, minTop);\n    region.right = Math.min(region.right, maxRight);\n    region.bottom = Math.min(region.bottom, maxBottom);\n\n    final int minWidth = 160;\n    if (region.width() < minWidth) {\n      final int dx = (minWidth + 1 - region.width()) / 2;\n      if (region.left < minLeft + dx) {\n        region.right += 2 * dx;\n      } else if (region.right > maxRight - dx) {\n        region.left -= 2 * dx;\n      } else {\n        region.left -= dx;\n        region.right += dx;\n      }\n    }\n    partialUpdateEpdView(region);\n  }\n"},
{"dataset": "findViewById","exampleID": 90, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":["activity.openFileOutput(String,*)"], "configurationStart":[142], "configurationEnd":[211], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 870, "focalAPIEnd": 927, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.append(*)"], "useStart":[935], "useEnd":[960], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CEID-DS/cbox/tree/master/proxy_application_layer/simpleTwitterApplication/cBoxTwitter/src/ceid/ds2/cBox/twitterProxy/Authentication.java", "rawCode": "  /** Store access token to properties file */\n  private static void storeAccessToken() {\n    try {\n      FileOutputStream output =\n          currentActivity.openFileOutput(PROPERTIES_FILE, Context.MODE_PRIVATE);\n\n      // Set Access Token and Access Token Secret\n      consumerProperties.setProperty(\"oauth.accessToken\", accessToken.getToken());\n      consumerProperties.setProperty(\"oauth.accessTokenSecret\", accessToken.getTokenSecret());\n\n      consumerProperties.setProperty(\n          \"oauth.accessToken\", \"********************************************\");\n      consumerProperties.setProperty(\n          \"oauth.accessTokenSecret\", \"**************************************\");\n      // Store Access Token\n      consumerProperties.store(output, PROPERTIES_FILE);\n\n      // Close Stream\n      output.close();\n    } catch (IOException e) {\n      TextView tv = (TextView) currentActivity.findViewById(R.id.authenticationTextView);\n      tv.append(e.getMessage());\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 91, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 73, "focalAPIEnd": 117, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "getInstance(activity)"], "useStart":[159, 242], "useEnd":[198, 270], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brasileiroaraujo/HealthServiceAndroid/tree/master/src/com/signove/health/servicetest/Handlers.java", "rawCode": "  public void updateHistoryList() {\n    final ListView list = (ListView) frame.findViewById(R.id.listViewDataHistory);\n    final TextView history = (TextView) frame.findViewById(R.id.tvHistoryEmpty);\n    final List<HealthData> datasHistory = HealthDAO.getInstance(frame).ListAll();\n    tm.post(\n        new Runnable() {\n          @Override\n          public void run() {\n            if (datasHistory.size() == 0) {\n              history.setText(frame.getResources().getString(R.string.history_empty));\n            } else {\n              history.setText(\"\");\n              ;\n            }\n            HealthDataAdapter adapter =\n                new HealthDataAdapter(frame.getApplicationContext(), datasHistory);\n            list.setAdapter(adapter);\n          }\n        });\n  }\n"},
{"dataset": "findViewById","exampleID": 92, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 333, "focalAPIEnd": 374, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getViewTreeObserver()"], "useStart":[400], "useEnd":[428], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/cts/ViewTreeObserverTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"Test addOnGlobalLayoutListener(OnGlobalLayoutListener)\",\n    method = \"addOnGlobalLayoutListener\",\n    args = {android.view.ViewTreeObserver.OnGlobalLayoutListener.class}\n  )\n  public void testAddOnGlobalLayoutListener() {\n    final LinearLayout layout = (LinearLayout) mActivity.findViewById(R.id.linearlayout);\n    mViewTreeObserver = layout.getViewTreeObserver();\n\n    MockOnGlobalLayoutListener listener = new MockOnGlobalLayoutListener();\n    assertFalse(listener.hasCalledOnGlobalLayout());\n    mViewTreeObserver.addOnGlobalLayoutListener(listener);\n    mViewTreeObserver.dispatchOnGlobalLayout();\n    assertTrue(listener.hasCalledOnGlobalLayout());\n  }\n"},
{"dataset": "findViewById","exampleID": 93, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 1, "exceptionType": "InvalidFileException", "exceptionHandlingCall": ["getLocalizedMessage()", "e(String,*)", "getMessage()", "makeText(Activity,*,*)", "show()"], "tryExpressionStart": 426, "tryExpressionEnd": 430, "tryBlockStart": 426, "tryBlockEnd": 1337, "catchExpressionStart": 1164, "catchExpressionEnd": 1195, "catchBlockStart": 1164, "catchBlockEnd": 1337, "exceptionHandlingCallStart":[1227, 1205, 1286, 1261, 1261], "exceptionHandlingCallEnd":[1250, 1251, 1300, 1321, 1328], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 550, "focalAPIEnd": 588, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.setImageDrawable(Drawable)", "activity.findViewById(int)", "makeText(activity,*,*)"], "useStart":[598, 672, 1261], "useEnd":[635, 706, 1321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/emobc/emobc-android/tree/master/src/com/emobc/android/activities/generators/ImageZoomActivityGenerator.java", "rawCode": "  @Override\n  protected void loadAppLevelData(final Activity activity, final AppLevelData data) {\n    final ImageLevelDataItem item = (ImageLevelDataItem) data.findByNextLevel(nextLevel);\n\n    // rotateScreen(activity);\n    initializeHeader(activity, item);\n\n    // Create Banner\n    CreateMenus c = (CreateMenus) activity;\n    c.createBanner();\n\n    if (Utils.hasLength(item.getImageFile())) {\n      Drawable drawable;\n      try {\n        drawable = ImagesUtils.getDrawable(activity, item.getImageFile());\n        ImageView planoImage = (ImageView) activity.findViewById(R.id.planoImage);\n        planoImage.setImageDrawable(drawable);\n        TextView head = (TextView) activity.findViewById(R.id.header);\n        head.setText(item.getHeaderText());\n\n        /* LinearLayout mainLayout = (LinearLayout)activity.findViewById(R.id.imageMap);\n        ZoomImageView imageView = new ZoomImageView(activity, drawable);\n\n        MarginLayoutParams params = new MarginLayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);\n        params.setMargins(15, 5, 14, 0);\n        imageView.setLayoutParams(params);\n\n        mainLayout.addView(imageView); */\n\n      } catch (InvalidFileException e) {\n        Log.e(\"AppCoverData\", e.getLocalizedMessage());\n        Toast.makeText(activity, e.getMessage(), Toast.LENGTH_SHORT).show();\n      }\n    }\n  }\n"},
{"dataset": "findViewById","exampleID": 94, "initialization":["Activity activity = getActivity()"], "initializationStart":[106], "initializationEnd":[119], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 134, "focalAPIEnd": 167, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)"], "useStart":[186], "useEnd":[223], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/davros-/platform_frameworks_base/tree/master/core/tests/coretests/src/android/widget/layout/linear/WeightSumTest.java", "rawCode": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    final Activity activity = getActivity();\n    mChild = activity.findViewById(R.id.child);\n    mContainer = activity.findViewById(R.id.container);\n  }\n"},
{"dataset": "findViewById","exampleID": 95, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 166, "focalAPIEnd": 197, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.findViewById(int)", "view.getParent()", "RelativeLayout.removeView(view)", "ViewAnimator.addView(view)", "view.getBaseline()"], "useStart":[219, 307, 328, 435, 565], "useEnd":[254, 321, 349, 460, 581], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/widget/src/android/widget/cts/ViewAnimatorTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    method = \"getBaseline\",\n    args = {}\n  )\n  @UiThreadTest\n  public void testGetBaseline() {\n    final View v1 = mActivity.findViewById(R.id.ok);\n    final View v2 = mActivity.findViewById(R.id.cancel);\n    final RelativeLayout parent = (RelativeLayout) v1.getParent();\n\n    parent.removeView(v1);\n    parent.removeView(v2);\n    assertEquals(0, mViewAnimator.getChildCount());\n\n    mViewAnimator.addView(v1);\n    mViewAnimator.addView(v2);\n    assertEquals(2, mViewAnimator.getChildCount());\n\n    int expected = v1.getBaseline();\n    mViewAnimator.setDisplayedChild(0);\n    assertEquals(expected, mViewAnimator.getBaseline());\n\n    expected = v2.getBaseline();\n    mViewAnimator.setDisplayedChild(1);\n    assertEquals(expected, mViewAnimator.getBaseline());\n\n    mViewAnimator.removeAllViews();\n    assertEquals(0, mViewAnimator.getChildCount());\n  }\n"},
{"dataset": "findViewById","exampleID": 96, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 248, "focalAPIEnd": 305, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["activity.openFileInput(String)", "view.append(*)", "activity.openFileOutput(String,*)", "view.append(*)"], "useStart":[376, 561, 1097, 1316], "useEnd":[422, 588, 1166, 1341], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CEID-DS/cbox/tree/master/proxy_application_layer/simpleAndroidTwitterApplication/cBoxTwitter/src/ceid/ds2/cBox/twitterProxy/Authentication.java", "rawCode": "  /**\n   * Get consumer properties from properties file\n   *\n   * @return boolean: true if success\n   */\n  private boolean getConsumerProperties() {\n    FileOutputStream output = null;\n    FileInputStream input = null;\n    TextView tv = (TextView) currentActivity.findViewById(R.id.authenticationTextView);\n\n    try {\n      // Read consumer properties from file\n      input = currentActivity.openFileInput(PROPERTIES_FILE);\n      consumerProperties.load(input);\n      input.close();\n    } catch (FileNotFoundException e) {\n    } catch (IOException ioe) {\n      tv.append(ioe.getMessage());\n    }\n\n    try {\n      // Consumer Key and Secret are not set\n      if (consumerProperties.getProperty(\"oauth.consumerKey\") == null\n          && consumerProperties.getProperty(\"oauth.consumerSecret\") == null) {\n\n        // Set Consumer Key and Secret\n        consumerProperties.setProperty(\"oauth.consumerKey\", \"********************\");\n        consumerProperties.setProperty(\n            \"oauth.consumerSecret\", \"************************************\");\n\n        // Write properties to file\n        output = currentActivity.openFileOutput(PROPERTIES_FILE, Context.MODE_PRIVATE);\n        consumerProperties.store(output, PROPERTIES_FILE);\n\n        output.close();\n      }\n\n      return true;\n    } catch (IOException e) {\n      tv.append(e.getMessage());\n    }\n\n    return false;\n  }\n"},
{"dataset": "findViewById","exampleID": 97, "initialization":["Activity activity = getActivity()"], "initializationStart":[122], "initializationEnd":[140], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 176, "focalAPIEnd": 223, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getChildAt(int)", "new Purity(activity,*)"], "useStart":[261, 398], "useEnd":[288, 444], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/polyvi/xface-android/tree/master/test/src/org/apache/cordova/test/junit/IFrameTest.java", "rawCode": "  protected void setUp() throws Exception {\n    super.setUp();\n    mInstr = this.getInstrumentation();\n    testActivity = this.getActivity();\n    containerView = (FrameLayout) testActivity.findViewById(android.R.id.content);\n    innerContainer = (LinearLayout) containerView.getChildAt(0);\n    testView = (CordovaWebView) innerContainer.getChildAt(0);\n    touch = new TouchUtils();\n    touchTool = new Purity(testActivity, getInstrumentation());\n  }\n"},
{"dataset": "findViewById","exampleID": 98, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 93, "focalAPIEnd": 133, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":[], "useStart":[], "useEnd":[], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/brasileiroaraujo/HealthServiceAndroid/tree/master/src/com/signove/health/servicetest/Handlers.java", "rawCode": "  public void showStatusImage(final String menssage) {\n    final ImageView img = (ImageView) frame.findViewById(R.id.imageViewStatus);\n    tm.post(\n        new Runnable() {\n          @Override\n          public void run() {\n            if (menssage.contains(frame.getResources().getString(R.string.status_disconnected))\n                || menssage.contains(\n                    frame.getResources().getString(R.string.status_disassociated))) {\n              img.setImageResource(R.drawable.status_red);\n            } else {\n              img.setImageResource(R.drawable.status_green);\n            }\n          }\n        });\n  }\n"},
{"dataset": "findViewById","exampleID": 99, "initialization":[], "initializationStart":[], "initializationEnd":[], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration":[], "configurationStart":[], "configurationEnd":[], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "view = activity.findViewById(id)", "focalAPIStart": 244, "focalAPIEnd": 285, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use":["view.getViewTreeObserver()"], "useStart":[311], "useEnd":[339], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/MIPS/cts/tree/master/tests/tests/view/src/android/view/cts/ViewTreeObserverTest.java", "rawCode": "  @TestTargetNew(\n    level = TestLevel.COMPLETE,\n    notes = \"Test dispatchOnGlobalLayout()\",\n    method = \"dispatchOnGlobalLayout\",\n    args = {}\n  )\n  public void testDispatchOnGlobalLayout() {\n    final LinearLayout layout = (LinearLayout) mActivity.findViewById(R.id.linearlayout);\n    mViewTreeObserver = layout.getViewTreeObserver();\n\n    MockOnGlobalLayoutListener listener = new MockOnGlobalLayoutListener();\n    assertFalse(listener.hasCalledOnGlobalLayout());\n    mViewTreeObserver.addOnGlobalLayoutListener(listener);\n    mViewTreeObserver.dispatchOnGlobalLayout();\n    assertTrue(listener.hasCalledOnGlobalLayout());\n  }\n"}]