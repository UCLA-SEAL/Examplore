[{"dataset": "listGet", "exampleID": 5001, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 78, "focalAPIEnd": 94, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mhl/libbio-formats-java/tree/master/components/forks/poi/src/loci/poi/hssf/record/aggregates/ColumnInfoRecordsAggregate.java", "rawCode": "  public ColumnInfoRecord getColInfo(int idx) {\n    return (ColumnInfoRecord) records.get(idx);\n  }\n"}, {"dataset": "listGet", "exampleID": 5002, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<count", "guardType": "LOOP {", "guardExpressionStart": 2591, "guardExpressionEnd": 2622, "guardBlockStart": 2591, "guardBlockEnd": 2679, "focalAPI": "element = list.get(index)", "focalAPIStart": 2654, "focalAPIEnd": 2670, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/office/ext/src/xalan-j_2_7_1/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java", "rawCode": "  /**\n   * Load the translet classes from the jar file and return the bytecode.\n   *\n   * @param source The xsl source\n   * @param fullClassName The full name of the translet\n   * @return The bytecode array\n   */\n  private byte[][] getBytecodesFromJar(Source source, String fullClassName) {\n    String xslFileName = getStylesheetFileName(source);\n    File xslFile = null;\n    if (xslFileName != null) xslFile = new File(xslFileName);\n\n    // Construct the path for the jar file\n    String jarPath = null;\n    if (_destinationDirectory != null) jarPath = _destinationDirectory + \"/\" + _jarFileName;\n    else {\n      if (xslFile != null && xslFile.getParent() != null)\n        jarPath = xslFile.getParent() + \"/\" + _jarFileName;\n      else jarPath = _jarFileName;\n    }\n\n    // Return null if the jar file does not exist.\n    File file = new File(jarPath);\n    if (!file.exists()) return null;\n\n    // Compare the timestamps of the jar file and the xsl file. Return null\n    // if the xsl file is newer than the jar file.\n    if (xslFile != null && xslFile.exists()) {\n      long xslTimestamp = xslFile.lastModified();\n      long transletTimestamp = file.lastModified();\n      if (transletTimestamp < xslTimestamp) return null;\n    }\n\n    // Create a ZipFile object for the jar file\n    ZipFile jarFile = null;\n    try {\n      jarFile = new ZipFile(file);\n    } catch (IOException e) {\n      return null;\n    }\n\n    String transletPath = fullClassName.replace('.', '/');\n    String transletAuxPrefix = transletPath + \"$\";\n    String transletFullName = transletPath + \".class\";\n\n    List bytecodes = new ArrayList();\n\n    // Iterate through all entries in the jar file to find the\n    // translet and auxiliary classes.\n    Enumeration entries = jarFile.entries();\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = (ZipEntry) entries.nextElement();\n      String entryName = entry.getName();\n      if (entry.getSize() > 0\n          && (entryName.equals(transletFullName)\n              || (entryName.endsWith(\".class\") && entryName.startsWith(transletAuxPrefix)))) {\n        try {\n          InputStream input = jarFile.getInputStream(entry);\n          int size = (int) entry.getSize();\n          byte[] bytes = new byte[size];\n          readFromInputStream(bytes, input, size);\n          input.close();\n          bytecodes.add(bytes);\n        } catch (IOException e) {\n          return null;\n        }\n      }\n    }\n\n    // Convert the Vector of byte[] to byte[][].\n    final int count = bytecodes.size();\n    if (count > 0) {\n      final byte[][] result = new byte[count][1];\n      for (int i = 0; i < count; i++) {\n        result[i] = (byte[]) bytecodes.get(i);\n      }\n\n      return result;\n    } else return null;\n  }\n"}, {"dataset": "listGet", "exampleID": 5003, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size() && list.size()>0", "guardType": "IF {", "guardExpressionStart": 104, "guardExpressionEnd": 125, "guardBlockStart": 104, "guardBlockEnd": 1329, "focalAPI": "element = list.get(index)", "focalAPIStart": 247, "focalAPIEnd": 259, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getType()", "element.getObject()", "element.getLabel()", "element.getLabel()"], "useStart": [329, 735, 905, 1038], "useEnd": [347, 755, 924, 1057], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/redstar3894/android-gcc/tree/master/libjava/classpath/tools/external/asm/org/objectweb/asm/util/attrs/ASMStackMapAttribute.java", "rawCode": "  void asmifyTypeInfo(StringBuffer buf, String varName, Map labelNames, List infos, String field) {\n    if (infos.size() > 0) {\n      buf.append(\"{\\n\");\n      for (int i = 0; i < infos.size(); i++) {\n        StackMapType typeInfo = (StackMapType) infos.get(i);\n        String localName = varName + \"Info\" + i;\n        int type = typeInfo.getType();\n        buf.append(\"StackMapType \")\n            .append(localName)\n            .append(\" = StackMapType.getTypeInfo( StackMapType.ITEM_\")\n            .append(StackMapType.ITEM_NAMES[type])\n            .append(\");\\n\");\n\n        switch (type) {\n          case StackMapType.ITEM_Object: //\n            buf.append(localName)\n                .append(\".setObject(\\\"\")\n                .append(typeInfo.getObject())\n                .append(\"\\\");\\n\");\n            break;\n\n          case StackMapType.ITEM_Uninitialized: //\n            declareLabel(buf, labelNames, typeInfo.getLabel());\n            buf.append(localName)\n                .append(\".setLabel(\")\n                .append(labelNames.get(typeInfo.getLabel()))\n                .append(\");\\n\");\n            break;\n        }\n        buf.append(varName)\n            .append(\".\")\n            .append(field)\n            .append(\".add(\")\n            .append(localName)\n            .append(\");\\n\");\n      }\n      buf.append(\"}\\n\");\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5004, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 227, "guardExpressionEnd": 268, "guardBlockStart": 227, "guardBlockEnd": 441, "focalAPI": "element = list.get(index)", "focalAPIStart": 302, "focalAPIEnd": 317, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getByUniqueId(*)", "list.get(int)", "list.remove(int)", "list.add(NymReferenceNode)", "list.add(int,NymReferenceNode)"], "useStart": [355, 617, 786, 945, 988], "useEnd": [397, 632, 804, 963, 1013], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/i2p/i2p.syndie/tree/master/src/syndie/gui/BrowserTree.java", "rawCode": "  public void bookmark(NymReferenceNode node) {\n    // _client.addNymReference(_client.getLoggedInNymId(), node);\n    if (node == null) return;\n    NymReferenceNode parent = null;\n    if (node.getParentGroupId() != -1) {\n      for (int i = 0; i < _nymRefs.size(); i++) {\n        NymReferenceNode cur = _nymRefs.get(i);\n        parent = (NymReferenceNode) cur.getByUniqueId(node.getParentGroupId());\n        if (parent != null) break;\n      }\n    }\n    if (parent != null) {\n      parent.addChild(node);\n    } else {\n      // remove dups\n      for (int i = 0; i < _nymRefs.size(); i++) {\n        ReferenceNode child = _nymRefs.get(i);\n        if ((node.getURI() != null) && (node.getURI().equals(child.getURI()))) {\n          // its a link to the same URL in the same category\n          _nymRefs.remove(i);\n          i--;\n        }\n      }\n\n      int order = node.getSiblingOrder();\n      if ((order < 0) || (order >= _nymRefs.size())) {\n        _nymRefs.add(node);\n      } else {\n        _nymRefs.add(order, node);\n      }\n    }\n    saveBookmarks();\n  }\n"}, {"dataset": "listGet", "exampleID": 5005, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 99, "guardExpressionEnd": 139, "guardBlockStart": 99, "guardBlockEnd": 293, "focalAPI": "element = list.get(index)", "focalAPIStart": 185, "focalAPIEnd": 197, "followUpCheck": "element.getString().compareTo(value1.getString()) > 0", "checkType": "IF", "followUpCheckExpressionStart": 205, "followUpCheckExpressionEnd": 262, "followUpCheckBlockStart": 205, "followUpCheckBlockEnd": 287, "use": ["list.add(int,AbsPrimitive)", "list.add(int,AbsPrimitive)"], "useStart": [298, 324], "useEnd": [318, 344], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/prodriguezsv/SMDBCIE/tree/master/system/InterfaceAgent.java", "rawCode": "  public void addSorted(List aList, AbsPrimitive value1, AbsPrimitive value2) {\n    int i = 0;\n    for (i = 0; i < aList.size(); i = i + 2) {\n      AbsPrimitive aValue = (AbsPrimitive) aList.get(i);\n      if (aValue.getString().compareTo(value1.getString()) > 0) {\n        break;\n      }\n    }\n    aList.add(i, value2);\n    aList.add(i, value1);\n  }\n"}, {"dataset": "listGet", "exampleID": 5006, "initialization": ["List list = Site.getOrderedPages()"], "initializationStart": [1609], "initializationEnd": [1631], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 1689, "focalAPIEnd": 1701, "followUpCheck": "element == null", "checkType": "IF", "followUpCheckExpressionStart": 1721, "followUpCheckExpressionEnd": 1738, "followUpCheckBlockStart": 1721, "followUpCheckBlockEnd": 1809, "use": ["element.getId()", "includeWorksite(HttpServletRequest,HttpServletResponse,Session,Site,element,String,String)"], "useStart": [1896, 2483], "useEnd": [1908, 2557], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/sakai-mirror/portal/tree/master/portal-impl/impl/src/java/org/sakaiproject/portal/charon/CharonPortal.java", "rawCode": "  protected void doGallery(\n      HttpServletRequest req,\n      HttpServletResponse res,\n      Session session,\n      String siteId,\n      String pageId,\n      String toolContextPath)\n      throws ToolException, IOException {\n    // check to default site id\n    if (siteId == null) {\n      if (session.getUserId() == null) {\n        String forceLogin = req.getParameter(PARAM_FORCE_LOGIN);\n        if (forceLogin == null\n            || \"yes\".equalsIgnoreCase(forceLogin)\n            || \"true\".equalsIgnoreCase(forceLogin)) {\n          doLogin(req, res, session, URLUtils.getSafePathInfo(req), false);\n          return;\n        }\n        siteId = ServerConfigurationService.getGatewaySiteId();\n      } else {\n        siteId = SiteService.getUserSiteId(session.getUserId());\n      }\n    }\n\n    // if no page id, see if there was a last page visited for this site\n    if (pageId == null) {\n      pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n    }\n\n    // find the site, for visiting\n    Site site = null;\n    try {\n      site = getSiteVisit(siteId);\n    } catch (IdUnusedException e) {\n      doError(req, res, session, ERROR_GALLERY);\n      return;\n    } catch (PermissionException e) {\n      // if not logged in, give them a chance\n      if (session.getUserId() == null) {\n        doLogin(req, res, session, URLUtils.getSafePathInfo(req), false);\n      } else {\n        doError(req, res, session, ERROR_GALLERY);\n      }\n      return;\n    }\n\n    // find the page, or use the first page if pageId not found\n    SitePage page = site.getPage(pageId);\n    if (page == null) {\n      List pages = site.getOrderedPages();\n      if (!pages.isEmpty()) {\n        page = (SitePage) pages.get(0);\n      }\n    }\n    if (page == null) {\n      doError(req, res, session, ERROR_GALLERY);\n      return;\n    }\n\n    // store the last page visited\n    session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n    // form a context sensitive title\n    String title =\n        ServerConfigurationService.getString(\"ui.service\", \"Sakai\")\n            + \" : \"\n            + site.getTitle()\n            + \" : \"\n            + page.getTitle();\n\n    // start the response\n    PrintWriter out = startResponse(res, title, site.getSkin(), true);\n\n    // the 'little' top area\n    includeGalleryNav(out, req, session, siteId);\n\n    String siteType = calcSiteType(siteId);\n    out.println(\n        \"<div id=\\\"container\\\"\" + ((siteType != null) ? \" class=\\\"\" + siteType + \"\\\"\" : \"\") + \">\");\n\n    includeWorksite(req, res, session, site, page, toolContextPath, \"gallery\");\n    out.println(\"<div>\");\n\n    includeBottom(out);\n\n    // end the response\n    endResponse(out);\n  }\n"}, {"dataset": "listGet", "exampleID": 5007, "initialization": ["List list = getFrames()"], "initializationStart": [74], "initializationEnd": [85], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 114, "guardExpressionEnd": 153, "guardBlockStart": 114, "guardBlockEnd": 494, "focalAPI": "element = list.get(index)", "focalAPIStart": 196, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/redstar3894/android-gcc/tree/master/libjava/classpath/tools/external/asm/org/objectweb/asm/util/attrs/ASMStackMapTableAttribute.java", "rawCode": "  public void trace(StringBuffer buf, Map labelNames) {\n    List frames = getFrames();\n    buf.append(\"[\\n\");\n    for (int i = 0; i < frames.size(); i++) {\n      StackMapFrame f = (StackMapFrame) frames.get(i);\n\n      buf.append(\" Frame:\");\n      appendLabel(buf, labelNames, f.label);\n\n      buf.append(\" locals[\");\n      traceTypeInfo(buf, labelNames, f.locals);\n      buf.append(\"]\");\n      buf.append(\" stack[\");\n      traceTypeInfo(buf, labelNames, f.stack);\n      buf.append(\"]\\n\");\n    }\n    buf.append(\" ] length:\").append(len).append(\"\\n\");\n  }\n"}, {"dataset": "listGet", "exampleID": 5008, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 375, "focalAPIEnd": 395, "followUpCheck": "element != null", "checkType": "IF", "followUpCheckExpressionStart": 401, "followUpCheckExpressionEnd": 419, "followUpCheckBlockStart": 401, "followUpCheckBlockEnd": 465, "use": ["element.getMinOutlier()"], "useStart": [437], "useEnd": [458], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jesseeichar/debrief/tree/master/trunk/contribs/jfreechart-1.0.13/source/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java", "rawCode": "  /**\n   * Returns the minimum value which is not a farout.\n   *\n   * @param series the series (zero-based index).\n   * @param item the item (zero-based index).\n   * @return A <code>Number</code> representing the maximum non-farout value.\n   */\n  public Number getMinOutlier(int series, int item) {\n    Number result = null;\n    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);\n    if (stats != null) {\n      result = stats.getMinOutlier();\n    }\n    return result;\n  }\n"}, {"dataset": "listGet", "exampleID": 5009, "initialization": ["int index = buddyTrack(int,String,int,*,*)"], "initializationStart": [71], "initializationEnd": [131], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 164, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.setStrings(int[])"], "useStart": [221], "useEnd": [239], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/certator/tuxguitar_mod/tree/master/TuxGuitar-abc/src/org/herac/tuxguitar/io/abc/base/ABCSong.java", "rawCode": "  private int droneTrack(int t) {\n    if (dronevoice < 0) dronevoice = buddyTrack(t, DRONE, 2, TGMeasure.CLEF_BASS, getDroneprog());\n    ABCTrack ttrk = (ABCTrack) voice.get(dronevoice);\n    final int[] s = {40, 28};\n    ttrk.setStrings(s);\n    return dronevoice;\n  }\n"}, {"dataset": "listGet", "exampleID": 5010, "initialization": ["List list = dbRead(String,Object[],*)"], "initializationStart": [378], "initializationEnd": [409], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list.size()>index", "guardType": "IF {", "guardExpressionStart": 556, "guardExpressionEnd": 577, "guardBlockStart": 556, "guardBlockEnd": 623, "focalAPI": "element = list.get(index)", "focalAPIStart": 602, "focalAPIEnd": 614, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc02/kernel-impl/src/main/java/org/sakaiproject/site/impl/DbSiteService.java", "rawCode": "    /**\n     * Access the Site id for the page with this id.\n     *\n     * @param id The id of the page.\n     * @return The Site id for the page with this id, if the page is found, else null.\n     */\n    public String findPageSiteId(String id) {\n      String sql = siteServiceSql.getSiteId1Sql();\n      Object fields[] = new Object[1];\n      fields[0] = id;\n\n      List found = m_sql.dbRead(sql, fields, null);\n\n      if (found.size() > 1) {\n        M_log.warn(\"findPageSiteId: multiple results for page id: \" + id);\n      }\n\n      String rv = null;\n      if (found.size() > 0) {\n        rv = (String) found.get(0);\n      }\n\n      return rv;\n    }\n"}, {"dataset": "listGet", "exampleID": 5011, "initialization": ["List list = getDifferencesAsList(String,String)"], "initializationStart": [133], "initializationEnd": [184], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [240], "configurationEnd": [252], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 281, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getOriginal()", "element.getRevised()"], "useStart": [312, 353], "useEnd": [331, 371], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/exoplatform/ks/tree/master/eXoApplication/wiki/service/src/test/java/org/exoplatform/wiki/service/TestDiffService.java", "rawCode": "  public void testSimpleLineDiff() throws Exception {\n    String text1 = \"A\\nB\\nC\";\n    String text2 = \"A\\nB B\\nC\";\n    List diffs = this.diffService.getDifferencesAsList(text1, text2);\n    assertEquals(\"There should be one difference\", 1, diffs.size());\n    Delta delta = (Delta) diffs.get(0);\n    Chunk orig = delta.getOriginal();\n    Chunk revised = delta.getRevised();\n    assertEquals(\"Original should be\", \"B\", orig.toString());\n    assertEquals(\"Revised should be\", \"B B\", revised.toString());\n  }\n"}, {"dataset": "listGet", "exampleID": 5012, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 511, "focalAPIEnd": 551, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.setEnabled(boolean)"], "useStart": [511], "useEnd": [571], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.team/tree/master/bundles/org.eclipse.team.cvs.ui/src/org/eclipse/team/internal/ccvs/ui/wizards/GenerateDiffFileWizard.java", "rawCode": "    /**\n     * Enable or disable given buttons.\n     *\n     * @param enabled Indicates whether to enable or disable the buttons.\n     * @param buttonsToChange Buttons to enable/disable.\n     * @param defaultSelection The button to select if the currently selected button becomes\n     *     disabled.\n     */\n    public void setEnablement(boolean enabled, int[] buttonsToChange, int defaultSelection) {\n\n      // enable (or disable) given buttons\n      for (int i = 0; i < buttonsToChange.length; i++) {\n        this.buttons.get(buttonsToChange[i] - 1).setEnabled(enabled);\n      }\n      // check whether the selected button is enabled\n      if (!this.buttons.get(selected).isEnabled()) {\n        if (defaultSelection != -1)\n          // set the default selection and check if it's enabled\n          setSelection(defaultSelection, true);\n        else\n          // no default selection is given, select any enabled button\n          selectEnabledOnly();\n      }\n    }\n"}, {"dataset": "listGet", "exampleID": 5013, "initialization": ["List list = Query.getResultList()"], "initializationStart": [195], "initializationEnd": [216], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(list.isEmpty())", "guardType": "IF {", "guardExpressionStart": 222, "guardExpressionEnd": 247, "guardBlockStart": 222, "guardBlockEnd": 326, "focalAPI": "element = list.get(index)", "focalAPIStart": 302, "focalAPIEnd": 319, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/era/term-paper/tree/master/parent/findplaces-model/src/main/java/br/com/findplaces/jpa/dao/impl/UserDAOImpl.java", "rawCode": "  public User findUserBySocialID(String id) {\n    Query query = getEManager().createNamedQuery(User.findUserBySocialID, User.class);\n    query.setParameter(\"socialID\", id);\n    List resultList = query.getResultList();\n    if (resultList.isEmpty()) {\n      return null;\n    } else {\n      return (User) resultList.get(0);\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5014, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(true||index>=m_avts.size())", "guardType": "IF {", "guardExpressionStart": 431, "guardExpressionEnd": 474, "guardBlockStart": 431, "guardBlockEnd": 567, "focalAPI": "element = list.get(index)", "focalAPIStart": 527, "focalAPIEnd": 540, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new Attribute(element,*)"], "useStart": [506], "useEnd": [566], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/office/ext/src/xalan-j_2_7_1/src/org/apache/xalan/templates/ElemLiteralResult.java", "rawCode": "    /**\n     * Returns the <code>index</code>th item in the map. If <code>index\n     * </code> is greater than or equal to the number of nodes in this map, this returns <code>null\n     * </code>.\n     *\n     * @param i The index of the requested item.\n     * @return The node at the <code>index</code>th position in the map, or <code>null</code> if\n     *     that is not a valid index.\n     */\n    public Node item(int i) {\n      if (getLength() == 0 || i >= m_avts.size()) return null;\n      else return new Attribute(((AVT) m_avts.get(i)), ElemLiteralResult.this);\n    }\n"}, {"dataset": "listGet", "exampleID": 5015, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 77, "guardExpressionEnd": 117, "guardBlockStart": 77, "guardBlockEnd": 217, "focalAPI": "element = list.get(index)", "focalAPIStart": 141, "focalAPIEnd": 155, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["name(element)"], "useStart": [136], "useEnd": [156], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/boundlessgeo/geoserver-2.1.x/tree/master/web/security/src/main/java/org/geoserver/web/security/ConfirmRemovalDataAccessRulePanel.java", "rawCode": "  String names(List objects) {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < objects.size(); i++) {\n      sb.append(name(objects.get(i)));\n      if (i < (objects.size() - 1)) sb.append(\", \");\n    }\n    return sb.toString();\n  }\n"}, {"dataset": "listGet", "exampleID": 5016, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(list.size()!=1)", "guardType": "IF {", "guardExpressionStart": 87, "guardExpressionEnd": 108, "guardBlockStart": 87, "guardBlockEnd": 175, "focalAPI": "element = list.get(index)", "focalAPIStart": 196, "focalAPIEnd": 207, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["escapeResourceString(element)"], "useStart": [248], "useEnd": [291], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/baohaojun/system-config/tree/master/bin/FreeMarker.d/com/android/tools/idea/templates/FmEscapeXmlStringMethod.java", "rawCode": "  @Override\n  public TemplateModel exec(List args) throws TemplateModelException {\n    if (args.size() != 1) {\n      throw new TemplateModelException(\"Wrong arguments\");\n    }\n    String string = args.get(0).toString();\n    return new SimpleScalar(ValueXmlHelper.escapeResourceString(string));\n  }\n"}, {"dataset": "listGet", "exampleID": 5017, "initialization": ["List list = CommandStream.nextCommand()"], "initializationStart": [288], "initializationEnd": [315], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [409], "configurationEnd": [423], "guardCondition": "list!=null&&!((String) list.get(2,).startsWith(\"qu\",)) && index<n", "guardType": "LOOP {", "guardExpressionStart": 431, "guardExpressionEnd": 458, "guardBlockStart": 431, "guardBlockEnd": 505, "focalAPI": "element = list.get(index)", "focalAPIStart": 481, "focalAPIEnd": 495, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["println(element)"], "useStart": [469], "useEnd": [496], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jamesnvc/emacs.d/tree/master/modes/jde-2.3.5.1/java/src/jde/debugger/CommandStream.java", "rawCode": "  public static void main(String[] args) {\n\n    PrintWriter out = new PrintWriter(System.out);\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    CommandStream commandStream = new CommandStream(in);\n\n    out.print(\"> \");\n    out.flush();\n    List command = commandStream.nextCommand();\n    while (command != null && !((String) command.get(2)).startsWith(\"qu\")) {\n\n      int n = command.size();\n      for (int i = 0; i < n; i++) {\n        out.println(command.get(i));\n      } // end of for ()\n\n      out.print(\"> \");\n      out.flush();\n      command = commandStream.nextCommand();\n    } // end of while ()\n  } // end of main ()\n"}, {"dataset": "listGet", "exampleID": 5018, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size() && !(list==null||list.size()==0)", "guardType": "IF {", "guardExpressionStart": 124, "guardExpressionEnd": 167, "guardBlockStart": 124, "guardBlockEnd": 175, "focalAPI": "element = list.get(index)", "focalAPIStart": 359, "focalAPIEnd": 373, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getArguments()"], "useStart": [1389], "useEnd": [1410], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akosicki/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.core/codeassist/org/eclipse/dltk/codeassist/ScriptCompletionEngine.java", "rawCode": "  protected void findLocalMethods(\n      char[] token, boolean canCompleteEmptyToken, List methods, List methodNames) {\n    if (methods == null || methods.size() == 0) return;\n\n    int length = token.length;\n    if (canCompleteEmptyToken || length > 0) {\n      for (int i = 0; i < methods.size(); i++) {\n        MethodDeclaration method = (MethodDeclaration) methods.get(i);\n        String name = ((String) (methodNames.get(i)));\n        if (length <= name.length() && CharOperation.prefixEquals(token, name, false)) {\n          int relevance = computeBaseRelevance();\n          relevance += computeRelevanceForInterestingProposal();\n          relevance += computeRelevanceForCaseMatching(token, name);\n          relevance += computeRelevanceForRestrictions(IAccessRule.K_ACCESSIBLE); // no\n\n          // accept result\n          ScriptCompletionEngine.this.noProposal = false;\n          if (!ScriptCompletionEngine.this.requestor.isIgnored(CompletionProposal.METHOD_REF)) {\n            CompletionProposal proposal =\n                ScriptCompletionEngine.this.createProposal(\n                    CompletionProposal.METHOD_REF,\n                    ScriptCompletionEngine.this.actualCompletionPosition);\n            // proposal.setSignature(getSignature(typeBinding));\n            // proposal.setPackageName(q);\n            // proposal.setTypeName(displayName);\n            List arguments = method.getArguments();\n            if (arguments != null && arguments.size() > 0) {\n              String[] args = new String[arguments.size()];\n              for (int j = 0; j < arguments.size(); ++j) {\n                args[j] = ((Argument) arguments.get(j)).getName();\n              }\n              proposal.setParameterNames(args);\n            }\n\n            proposal.setName(name);\n            proposal.setCompletion(name);\n            // proposal.setFlags(Flags.AccDefault);\n            proposal.setRelevance(relevance);\n            accept(proposal);\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5019, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 39, "guardExpressionEnd": 81, "guardBlockStart": 39, "guardBlockEnd": 127, "focalAPI": "element = list.get(index)", "focalAPIStart": 94, "focalAPIEnd": 110, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.setEDNS(int)"], "useStart": [82], "useEnd": [126], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lemmy/dnsjava/tree/master/tags/dnsjava-1-6-2/org/xbill/DNS/ExtendedResolver.java", "rawCode": "  public void setEDNS(int level) {\n    for (int i = 0; i < resolvers.size(); i++) ((Resolver) resolvers.get(i)).setEDNS(level);\n  }\n"}, {"dataset": "listGet", "exampleID": 5020, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 103, "guardExpressionEnd": 147, "guardBlockStart": 103, "guardBlockEnd": 257, "focalAPI": "element = list.get(index)", "focalAPIStart": 185, "focalAPIEnd": 203, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/chrisdolan/gametable/tree/master/src/com/galactanet/gametable/DeckData.java", "rawCode": "  public void deckComplete() {\n    // work out how many cards are in this deck\n    m_numCards = 0;\n    for (int i = 0; i < m_cardTypes.size(); i++) {\n      final Card cardType = (Card) m_cardTypes.get(i);\n      m_numCards += cardType.m_quantityInDeck;\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5021, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size() && list.size()>1", "guardType": "IF {", "guardExpressionStart": 473, "guardExpressionEnd": 498, "guardBlockStart": 473, "guardBlockEnd": 819, "focalAPI": "element = list.get(index)", "focalAPIStart": 610, "focalAPIEnd": 626, "followUpCheck": "classBean.equalsIgnoreCase(element)", "checkType": "IF", "followUpCheckExpressionStart": 712, "followUpCheckExpressionEnd": 753, "followUpCheckBlockStart": 712, "followUpCheckBlockEnd": 805, "use": ["list.add(String)"], "useStart": [841], "useEnd": [916], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/stats-analysis/tree/master/cacoresdk 3.2.1/src/gov/nih/nci/common/util/PrintUtils.java", "rawCode": "  /**\n   * Adds the current class to a list. This list is used to idetify the path from parent to this\n   * class\n   *\n   * @param result Specifies the object\n   * @param classList Specifies the path from root to the current object return\n   */\n  public List addClassToList(Object result, List classList) {\n\n    boolean add = true;\n    String className = result.getClass().getName();\n    String classBean = className.substring(className.lastIndexOf(Constant.DOT) + 1);\n    if (classList.size() > 1) {\n      String pathItem = null;\n      for (int x = 0; x < classList.size(); x++) {\n        pathItem = (String) classList.get(x);\n        // System.out.println(\"BeanName = \"+ classBean +\" item = \"+ item);\n\n        if (classBean.equalsIgnoreCase(pathItem)) {\n          add = false;\n          break;\n        }\n      }\n    }\n    if (add) {\n      classList.add(className.substring(className.lastIndexOf(Constant.DOT) + 1));\n    }\n    return classList;\n  }\n"}, {"dataset": "listGet", "exampleID": 5022, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 154, "focalAPIEnd": 169, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["edit(element,boolean)", "list.get(int)", "List.remove(element)"], "useStart": [123, 251, 1528], "useEnd": [177, 266, 1577], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/akosicki/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/ui/preferences/CodeTemplateBlock.java", "rawCode": "  protected void doButtonPressed(int buttonIndex, List selected) {\n    switch (buttonIndex) {\n      case IDX_EDIT:\n        edit((TemplatePersistenceData) selected.get(0), false);\n        break;\n      case IDX_ADD:\n        {\n          Object element = selected.get(0);\n          Template orig = null;\n          String contextTypeId;\n          if (element instanceof TemplatePersistenceData) {\n            orig = ((TemplatePersistenceData) element).getTemplate();\n            contextTypeId = orig.getContextTypeId();\n          } else if (element instanceof TemplateContextType) {\n            TemplateContextType type = (TemplateContextType) selected.get(0);\n            contextTypeId = type.getId();\n          } else if (element instanceof ICodeTemplateCategory) {\n            // default: text file\n            contextTypeId = ((ICodeTemplateCategory) element).getTemplateContextTypes()[0].getId();\n          } else {\n            return;\n          }\n          Template newTemplate;\n          if (orig != null) {\n            newTemplate =\n                new Template(\n                    \"\", \"\", contextTypeId, orig.getPattern(), false); // $NON-NLS-1$//$NON-NLS-2$\n          } else {\n            newTemplate =\n                new Template(\n                    \"\", \"\", contextTypeId, \"\", false); // $NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$\n          }\n          TemplatePersistenceData newData = new TemplatePersistenceData(newTemplate, true);\n          edit(newData, true);\n          break;\n        }\n      case IDX_REMOVE:\n        remove((TemplatePersistenceData) selected.get(0));\n        break;\n      case IDX_EXPORT:\n        export(selected);\n        break;\n      case IDX_EXPORTALL:\n        exportAll();\n        break;\n      case IDX_IMPORT:\n        import_();\n        break;\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5023, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 123, "guardExpressionEnd": 166, "guardBlockStart": 123, "guardBlockEnd": 336, "focalAPI": "element = list.get(index)", "focalAPIStart": 216, "focalAPIEnd": 233, "followUpCheck": "asn.getAS() == element.getAS()", "checkType": "IF", "followUpCheckExpressionStart": 244, "followUpCheckExpressionEnd": 273, "followUpCheckBlockStart": 244, "followUpCheckBlockEnd": 328, "use": ["list.add(NetworkAdminASN)", "list.remove(int)"], "useStart": [367, 439], "useEnd": [386, 459], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alevy/comet/tree/master/vuze/com/aelitis/azureus/core/networkmanager/admin/impl/NetworkAdminImpl.java", "rawCode": "  protected void addToASHistory(NetworkAdminASN asn) {\n    synchronized (as_history) {\n      boolean found = false;\n\n      for (int i = 0; i < as_history.size(); i++) {\n\n        NetworkAdminASN x = (NetworkAdminASN) as_history.get(i);\n\n        if (asn.getAS() == x.getAS()) {\n\n          found = true;\n\n          break;\n        }\n      }\n\n      if (!found) {\n\n        as_history.add(asn);\n\n        if (as_history.size() > 256) {\n\n          as_history.remove(0);\n        }\n      }\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5024, "initialization": ["List list = new ArrayList()"], "initializationStart": [45], "initializationEnd": [60], "hasTryCatch": 1, "exceptionType": "SQLException", "exceptionHandlingCall": ["getNextException()", "println(String)", "printStackTrace()"], "tryExpressionStart": 101, "tryExpressionEnd": 105, "tryBlockStart": 101, "tryBlockEnd": 2805, "catchExpressionStart": 2551, "catchExpressionEnd": 2574, "catchBlockStart": 2551, "catchBlockEnd": 2709, "exceptionHandlingCallStart": [2653, 2623, 2682], "exceptionHandlingCallEnd": [2673, 2674, 2701], "configuration": ["list.add(pipol)"], "configurationStart": [1714], "configurationEnd": [1728], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 1943, "guardExpressionEnd": 1983, "guardBlockStart": 1943, "guardBlockEnd": 2085, "focalAPI": "element = list.get(index)", "focalAPIStart": 2006, "focalAPIEnd": 2020, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getId()", "list.get(int)", "element.getId()"], "useStart": [2043, 2311, 2348], "useEnd": [2052, 2325, 2357], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cidc/siciud/tree/master/WEB-INF/src/cidc/general/obj/DepurarPersona.java", "rawCode": "  public void depurar() {\n    List paMatar = new ArrayList();\n    int i = 0;\n    pipol p = null;\n    try {\n      ResultSet rs = null;\n      Connection cn = abrir();\n      PreparedStatement ps =\n          cn.prepareStatement(\n              \"select perid,pernombres,perapellidos,pernumdoc from personal where (pernumdoc is null or pernumdoc ='') and \"\n                  + \"perid <> all(select distinct perid from personal,inscrip_propuesta where inscinvprin=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select distinct perid from personal,cidc_grup_semill where cgsdirector=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select distinct perid from personal,pa_proy_data_gral where ppdginvesproy=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select distinct perid from personal,b_pares where beidpersona=perid and (pernumdoc is null or pernumdoc ='')) and \"\n                  + \"perid <> all(select perid from personal,usuario_sistema where (pernumdoc is null or pernumdoc ='') and usidpersona=perid) and \"\n                  + \"perid <> 0 and perid <> 7 and perid <> 11 and perid <> 8 and perid <> 9 and perid <> 10 and perid <> 12 and perid <> 13 and perid <> 18 and \"\n                  + \"perid <> 3455 and perid <> 4493 and perid <> 4494 and perid <> 4495 and perid <> 4496 and perid <> 4497\"\n                  + \"order by perid\");\n      rs = ps.executeQuery();\n      while (rs.next()) {\n        i = 1;\n        p = new pipol();\n        p.setId(rs.getInt(i++));\n        p.setNombre(rs.getString(i++));\n        p.setApellido(rs.getString(i++));\n        p.setDoc(rs.getString(i++));\n        paMatar.add(p);\n      }\n      cn.setAutoCommit(false);\n      System.out.println(\"---Hay que eliminar a -->\" + paMatar.size() + \" Personas\");\n      ps = cn.prepareStatement(\"delete from b_investigadores where binvidper=?\");\n      for (int j = 0; j < paMatar.size(); j++) {\n        p = (pipol) paMatar.get(j);\n        ps.setInt(1, p.getId());\n        ps.addBatch();\n      }\n      System.out.println(\"---eliminados-->\" + ps.executeBatch() + \" investigadores\");\n      ps = cn.prepareStatement(\"delete from personal where perid=?\");\n      for (int j = 0; j < paMatar.size(); j++) {\n        p = (pipol) paMatar.get(j);\n        ps.setInt(1, p.getId());\n        ps.addBatch();\n      }\n      System.out.println(\"---eliminados-->\" + ps.executeBatch() + \" personajes\");\n      cn.commit();\n      System.out.println(\"---proceso terminado-->\");\n    } catch (SQLException e) {\n      // TODO Auto-generated catch block\n      System.out.println(\"----->\" + e.getNextException());\n      e.printStackTrace();\n\n    } catch (Exception e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5025, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [2539], "configurationEnd": [2564], "guardCondition": "index<subCategoryCount", "guardType": "LOOP {", "guardExpressionStart": 2739, "guardExpressionEnd": 2781, "guardBlockStart": 2739, "guardBlockEnd": 3227, "focalAPI": "element = list.get(index)", "focalAPIStart": 3066, "focalAPIEnd": 3091, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["drawRotatedString(element,Graphics2D,float,float,*,double,*)"], "useStart": [3112], "useEnd": [3218], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Leandromaro/IA/tree/master/Inteligencia/jfreechart-1.0.14/source/org/jfree/chart/axis/SubCategoryAxis.java", "rawCode": "  /**\n   * Draws the category labels and returns the updated axis state.\n   *\n   * @param g2 the graphics device (<code>null</code> not permitted).\n   * @param plotArea the plot area (<code>null</code> not permitted).\n   * @param dataArea the area inside the axes (<code>null</code> not permitted).\n   * @param edge the axis location (<code>null</code> not permitted).\n   * @param state the axis state (<code>null</code> not permitted).\n   * @param plotState collects information about the plot (<code>null</code> permitted).\n   * @return The updated axis state (never <code>null</code>).\n   */\n  protected AxisState drawSubCategoryLabels(\n      Graphics2D g2,\n      Rectangle2D plotArea,\n      Rectangle2D dataArea,\n      RectangleEdge edge,\n      AxisState state,\n      PlotRenderingInfo plotState) {\n\n    if (state == null) {\n      throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n\n    g2.setFont(this.subLabelFont);\n    g2.setPaint(this.subLabelPaint);\n    CategoryPlot plot = (CategoryPlot) getPlot();\n    int categoryCount = 0;\n    CategoryDataset dataset = plot.getDataset();\n    if (dataset != null) {\n      categoryCount = dataset.getColumnCount();\n    }\n\n    double maxdim = getMaxDim(g2, edge);\n    for (int categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\n\n      double x0 = 0.0;\n      double x1 = 0.0;\n      double y0 = 0.0;\n      double y1 = 0.0;\n      if (edge == RectangleEdge.TOP) {\n        x0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        x1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        y1 = state.getCursor();\n        y0 = y1 - maxdim;\n      } else if (edge == RectangleEdge.BOTTOM) {\n        x0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        x1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        y0 = state.getCursor();\n        y1 = y0 + maxdim;\n      } else if (edge == RectangleEdge.LEFT) {\n        y0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        y1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        x1 = state.getCursor();\n        x0 = x1 - maxdim;\n      } else if (edge == RectangleEdge.RIGHT) {\n        y0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        y1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        x0 = state.getCursor();\n        x1 = x0 + maxdim;\n      }\n      Rectangle2D area = new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));\n      int subCategoryCount = this.subCategories.size();\n      float width = (float) ((x1 - x0) / subCategoryCount);\n      float height = (float) ((y1 - y0) / subCategoryCount);\n      float xx = 0.0f;\n      float yy = 0.0f;\n      for (int i = 0; i < subCategoryCount; i++) {\n        if (RectangleEdge.isTopOrBottom(edge)) {\n          xx = (float) (x0 + (i + 0.5) * width);\n          yy = (float) area.getCenterY();\n        } else {\n          xx = (float) area.getCenterX();\n          yy = (float) (y0 + (i + 0.5) * height);\n        }\n        String label = this.subCategories.get(i).toString();\n        TextUtilities.drawRotatedString(\n            label, g2, xx, yy, TextAnchor.CENTER, 0.0, TextAnchor.CENTER);\n      }\n    }\n\n    if (edge.equals(RectangleEdge.TOP)) {\n      double h = maxdim;\n      state.cursorUp(h);\n    } else if (edge.equals(RectangleEdge.BOTTOM)) {\n      double h = maxdim;\n      state.cursorDown(h);\n    } else if (edge == RectangleEdge.LEFT) {\n      double w = maxdim;\n      state.cursorLeft(w);\n    } else if (edge == RectangleEdge.RIGHT) {\n      double w = maxdim;\n      state.cursorRight(w);\n    }\n    return state;\n  }\n"}, {"dataset": "listGet", "exampleID": 5026, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 1576, "guardExpressionEnd": 1622, "guardBlockStart": 1576, "guardBlockEnd": 2090, "focalAPI": "element = list.get(index)", "focalAPIStart": 1666, "focalAPIEnd": 1686, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.draw(Graphics2D,*,Point2D,PlotState,PlotRenderingInfo)"], "useStart": [2012], "useEnd": [2083], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gyulanemeth/ITK-Stock/tree/master/lib/jfreechart/source/org/jfree/chart/plot/CombinedRangeCategoryPlot.java", "rawCode": "  /**\n   * Draws the plot on a Java 2D graphics device (such as the screen or a printer). Will perform all\n   * the placement calculations for each sub-plots and then tell these to draw themselves.\n   *\n   * @param g2 the graphics device.\n   * @param area the area within which the plot (including axis labels) should be drawn.\n   * @param anchor the anchor point (<code>null</code> permitted).\n   * @param parentState the parent state.\n   * @param info collects information about the drawing (<code>null</code> permitted).\n   */\n  public void draw(\n      Graphics2D g2,\n      Rectangle2D area,\n      Point2D anchor,\n      PlotState parentState,\n      PlotRenderingInfo info) {\n\n    // set up info collection...\n    if (info != null) {\n      info.setPlotArea(area);\n    }\n\n    // adjust the drawing area for plot insets (if any)...\n    RectangleInsets insets = getInsets();\n    insets.trim(area);\n\n    // calculate the data area...\n    AxisSpace space = calculateAxisSpace(g2, area);\n    Rectangle2D dataArea = space.shrink(area, null);\n\n    // set the width and height of non-shared axis of all sub-plots\n    setFixedDomainAxisSpaceForSubplots(space);\n\n    // draw the shared axis\n    ValueAxis axis = getRangeAxis();\n    RectangleEdge rangeEdge = getRangeAxisEdge();\n    double cursor = RectangleEdge.coordinate(dataArea, rangeEdge);\n    AxisState state = axis.draw(g2, cursor, area, dataArea, rangeEdge, info);\n    if (parentState == null) {\n      parentState = new PlotState();\n    }\n    parentState.getSharedAxisStates().put(axis, state);\n\n    // draw all the charts\n    for (int i = 0; i < this.subplots.size(); i++) {\n      CategoryPlot plot = (CategoryPlot) this.subplots.get(i);\n      PlotRenderingInfo subplotInfo = null;\n      if (info != null) {\n        subplotInfo = new PlotRenderingInfo(info.getOwner());\n        info.addSubplotInfo(subplotInfo);\n      }\n      Point2D subAnchor = null;\n      if (anchor != null && this.subplotArea[i].contains(anchor)) {\n        subAnchor = anchor;\n      }\n      plot.draw(g2, this.subplotArea[i], subAnchor, parentState, subplotInfo);\n    }\n\n    if (info != null) {\n      info.setDataArea(dataArea);\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5027, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<fields.size()", "guardType": "LOOP {", "guardExpressionStart": 116, "guardExpressionEnd": 155, "guardBlockStart": 116, "guardBlockEnd": 218, "focalAPI": "element = list.get(index)", "focalAPIStart": 196, "focalAPIEnd": 209, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["writeConstantMember(element)"], "useStart": [164], "useEnd": [211], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bocchino/DPJ-UR/tree/master/Implementation/Compiler/src/share/classes/com/sun/tools/doclets/formats/html/ConstantsSummaryWriterImpl.java", "rawCode": "  /** {@inheritDoc} */\n  public void writeConstantMembers(ClassDoc cd, List fields) {\n    currentClassDoc = cd;\n    for (int i = 0; i < fields.size(); ++i) {\n      writeConstantMember((FieldDoc) (fields.get(i)));\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5028, "initialization": ["List list = sqlService()"], "initializationStart": [435], "initializationEnd": [447], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 969, "focalAPIEnd": 984, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta11/kernel-impl/src/main/java/org/sakaiproject/event/impl/UsageSessionServiceAdaptor.java", "rawCode": "    /**\n     * Access a session by id\n     *\n     * @param id The session id.\n     * @return The session object.\n     */\n    public UsageSession getSession(String id) {\n      UsageSession rv = null;\n\n      // check the db\n      String statement = usageSessionServiceSql.getSakaiSessionSql1();\n\n      // send in the last seq number parameter\n      Object[] fields = new Object[1];\n      fields[0] = id;\n\n      List sessions =\n          sqlService()\n              .dbRead(\n                  statement,\n                  fields,\n                  new SqlReader() {\n                    public Object readSqlResultRecord(ResultSet result) {\n                      try {\n                        return new BaseUsageSession(UsageSessionServiceAdaptor.this, result);\n                      } catch (SQLException ignore) {\n                        return null;\n                      }\n                    }\n                  });\n\n      if (!sessions.isEmpty()) rv = (UsageSession) sessions.get(0);\n\n      return rv;\n    } // getSession\n"}, {"dataset": "listGet", "exampleID": 5029, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<size", "guardType": "LOOP {", "guardExpressionStart": 277, "guardExpressionEnd": 329, "guardBlockStart": 277, "guardBlockEnd": 471, "focalAPI": "element = list.get(index)", "focalAPIStart": 359, "focalAPIEnd": 372, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.replaceAll(String,String)"], "useStart": [349], "useEnd": [394], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jonnyzzz/maragogype/tree/master/tags/v1.4/java/com/xerox/amazonws/common/AWSAuthConnection.java", "rawCode": "  /**\n   * Concatenates a bunch of header values, seperating them with a comma.\n   *\n   * @param values List of header values.\n   * @return String of all headers, with commas.\n   */\n  private String concatenateList(List values) {\n    StringBuffer buf = new StringBuffer();\n    for (int i = 0, size = values.size(); i < size; ++i) {\n      buf.append(((String) values.get(i)).replaceAll(\"\\n\", \"\").trim());\n      if (i != (size - 1)) {\n        buf.append(\",\");\n      }\n    }\n    return buf.toString();\n  }\n"}, {"dataset": "listGet", "exampleID": 5030, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [454], "configurationEnd": [474], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 434, "guardExpressionEnd": 480, "guardBlockStart": 434, "guardBlockEnd": 1004, "focalAPI": "element = list.get(index)", "focalAPIStart": 536, "focalAPIEnd": 556, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getAncestor(*)", "exclude(element,BPListElement,IScriptProject,*)"], "useStart": [621, 810], "useEnd": [677, 918], "hasFinally": 1, "cleanUpCall": ["IProgressMonitor.done()"], "finallyExpressionStart": 1149, "finallyExpressionEnd": 1157, "finallyBlockStart": 1149, "finallyBlockEnd": 1186, "cleanUpCallStart": [1165], "cleanUpCallEnd": [1179], "url": "https://github.com/eclipse/dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/wizards/buildpath/newsourcepage/ExcludeFromBuildpathAction.java", "rawCode": "  private List exclude(List modelElements, IScriptProject project, IProgressMonitor monitor)\n      throws ModelException {\n    if (monitor == null) monitor = new NullProgressMonitor();\n    try {\n      monitor.beginTask(\n          NewWizardMessages.BuildpathModifier_Monitor_Excluding, modelElements.size() + 4);\n      List existingEntries = BuildpathModifier.getExistingEntries(project);\n      List resources = new ArrayList();\n      for (int i = 0; i < modelElements.size(); i++) {\n        IModelElement modelElement = (IModelElement) modelElements.get(i);\n        IProjectFragment root =\n            (IProjectFragment) modelElement.getAncestor(IModelElement.PROJECT_FRAGMENT);\n        BPListElement entry = BuildpathModifier.getBuildpathEntry(existingEntries, root);\n        IResource resource =\n            BuildpathModifier.exclude(\n                modelElement, entry, project, new SubProgressMonitor(monitor, 1));\n        if (resource != null) {\n          resources.add(resource);\n        }\n      }\n      BuildpathModifier.commitBuildPath(\n          existingEntries, project, new SubProgressMonitor(monitor, 4));\n      return resources;\n    } finally {\n      monitor.done();\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5031, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 100, "guardExpressionEnd": 147, "guardBlockStart": 100, "guardBlockEnd": 296, "focalAPI": "element = list.get(index)", "focalAPIStart": 203, "focalAPIEnd": 224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getReceiver()"], "useStart": [232], "useEnd": [254], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/certator/tuxguitar_mod/tree/master/TuxGuitar-lib/src/org/herac/tuxguitar/player/base/MidiTransmitter.java", "rawCode": "  public void sendParameter(int channel, String key, String value) throws MidiPlayerException {\n    for (int i = 0; i < this.receivers.size(); i++) {\n      MidiReceiverItem receiver = (MidiReceiverItem) this.receivers.get(i);\n      receiver.getReceiver().sendParameter(channel, key, value);\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5032, "initialization": ["List list = getMappedAttributes(Object)", "int index = List.size()"], "initializationStart": [926, 1825], "initializationEnd": [963, 1855], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [1825], "configurationEnd": [1855], "guardCondition": "index>=0", "guardType": "LOOP {", "guardExpressionStart": 1812, "guardExpressionEnd": 1873, "guardBlockStart": 1812, "guardBlockEnd": 2129, "focalAPI": "element = list.get(index)", "focalAPIStart": 1918, "focalAPIEnd": 1948, "followUpCheck": "!targetAttrs.contains(element)", "checkType": "IF", "followUpCheckExpressionStart": 1960, "followUpCheckExpressionEnd": 1999, "followUpCheckBlockStart": 1960, "followUpCheckBlockEnd": 2119, "use": ["removeAttributeMapping(Object,element,Object)"], "useStart": [2014], "useEnd": [2078], "hasFinally": 1, "cleanUpCall": ["commitTxn()"], "finallyExpressionStart": 2164, "finallyExpressionEnd": 2172, "finallyBlockStart": 2164, "finallyBlockEnd": 2392, "cleanUpCallStart": [2280], "cleanUpCallEnd": [2303], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.transformation/src/org/teiid/designer/transformation/util/AttributeMappingHelper.java", "rawCode": "  /**\n   * Make sure there is an attribute mapping for each target Attribute in the supplied List. Remove\n   * any extras.\n   *\n   * @param transMappingRoot the Transformation MappingRoot\n   * @param targetAttrs the List of target attributes\n   * @param txnSource the source for the transaction\n   * @return true if any data was changed.\n   */\n  private static boolean reconcileAttributeMappings(\n      Object transMappingRoot, List targetAttrs, Object txnSource) {\n    boolean changed = false;\n    if (TransformationHelper.isTransformationMappingRoot(transMappingRoot) && targetAttrs != null) {\n      // start txn if not already in txn\n      boolean requiredStart =\n          ModelerCore.startTxn(\n              NOT_SIGNIFICANT, IS_UNDOABLE, \"Reconcile attr mappings\", txnSource); // $NON-NLS-1$\n      boolean succeeded = false;\n      try {\n        // Get the current mapped attributes\n        List currentMappedAttributes = getMappedAttributes(transMappingRoot);\n\n        // Create Mappings for those missing\n        Iterator iter = targetAttrs.iterator();\n        while (iter.hasNext()) {\n          EObject targetAttr = (EObject) iter.next();\n          // If new target is not already mapped, add it\n          if (!currentMappedAttributes.contains(targetAttr)) {\n            // Create the Attribute Mapping - nested under mapping root\n            TransformationFactory mappingFactory = TransformationFactory.eINSTANCE;\n            Mapping attrMapping = mappingFactory.createTransformationMapping();\n            attrMapping.setNestedIn((MappingRoot) transMappingRoot);\n\n            // Set the output to the supplied target\n            List outputs = attrMapping.getOutputs();\n            outputs.add(targetAttr);\n            changed = true;\n          }\n        }\n\n        // Remove extraneous mappings\n        for (int i = currentMappedAttributes.size() - 1; i >= 0; i--) {\n          EObject mappingAttr = (EObject) currentMappedAttributes.get(i);\n          if (!targetAttrs.contains(mappingAttr)) {\n            removeAttributeMapping(transMappingRoot, mappingAttr, txnSource);\n            changed = true;\n          }\n        }\n        succeeded = true;\n      } finally {\n        // If we start txn, commit it\n        if (requiredStart) {\n          if (succeeded) {\n            ModelerCore.commitTxn();\n          } else {\n            ModelerCore.rollbackTxn();\n          }\n        }\n      }\n    }\n    return changed;\n  }\n"}, {"dataset": "listGet", "exampleID": 5033, "initialization": ["List list = sqlService()"], "initializationStart": [513], "initializationEnd": [525], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 1061, "focalAPIEnd": 1075, "followUpCheck": "!element", "checkType": "IF", "followUpCheckExpressionStart": 1138, "followUpCheckExpressionEnd": 1146, "followUpCheckBlockStart": 1138, "followUpCheckBlockEnd": 1410, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.0-rc13/kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java", "rawCode": "  /**\n   * Check / assure this function name is defined.\n   *\n   * @param name the role name.\n   */\n  protected void checkFunctionName(String name) {\n    if (name == null) return;\n    name = name.intern();\n\n    // check the cache to see if the function name already exists\n    if (m_functionCache.contains(name)) return;\n\n    // see if we have this on the db\n    String statement = dbAuthzGroupSql.getCountRealmFunctionSql();\n    Object[] fields = new Object[1];\n    fields[0] = name;\n\n    List results =\n        sqlService()\n            .dbRead(\n                statement,\n                fields,\n                new SqlReader() {\n                  public Object readSqlResultRecord(ResultSet result) {\n                    try {\n                      int count = result.getInt(1);\n                      return Integer.valueOf(count);\n                    } catch (SQLException ignore) {\n                      return null;\n                    }\n                  }\n                });\n\n    boolean rv = false;\n    if (!results.isEmpty()) {\n      rv = ((Integer) results.get(0)).intValue() > 0;\n    }\n\n    // write if we didn't find it\n    if (!rv) {\n      statement = dbAuthzGroupSql.getInsertRealmFunctionSql();\n      // write, but if it fails, we don't really care - it will fail if another app server has just\n      // written this function\n      sqlService().dbWriteFailQuiet(null, statement, fields);\n    }\n\n    // cache the existance of the function name\n    synchronized (m_functionCache) {\n      m_functionCache.add(name);\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5034, "initialization": ["List list = PDField.getKids()"], "initializationStart": [410], "initializationEnd": [425], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list!=null&&list.size()>index", "guardType": "IF {", "guardExpressionStart": 431, "guardExpressionEnd": 481, "guardBlockStart": 431, "guardBlockEnd": 1033, "focalAPI": "element = list.get(index)", "focalAPIStart": 601, "focalAPIEnd": 612, "followUpCheck": "element instanceof PDField", "checkType": "IF", "followUpCheckExpressionStart": 656, "followUpCheckExpressionEnd": 683, "followUpCheckBlockStart": 656, "followUpCheckBlockEnd": 952, "use": ["element.getDictionary()", "element.getDictionary()"], "useStart": [704, 809], "useEnd": [735, 851], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/BrentDouglas/pdfbox/tree/master/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDFieldFactory.java", "rawCode": "  /**\n   * This method determines if the given field is a button.\n   *\n   * @param field the field to determine\n   * @return the result of the determination\n   * @throws IOException If there is an error determining the field type.\n   */\n  private static boolean isButton(PDField field) throws IOException {\n    String ft = field.findFieldType();\n    boolean retval = FIELD_TYPE_BTN.equals(ft);\n    List kids = field.getKids();\n    if (ft == null && kids != null && kids.size() > 0) {\n      // sometimes if it is a button the type is only defined by one\n      // of the kids entries\n      Object obj = kids.get(0);\n      COSDictionary kidDict = null;\n      if (obj instanceof PDField) {\n        kidDict = ((PDField) obj).getDictionary();\n      } else if (obj instanceof PDAnnotationWidget) {\n        kidDict = ((PDAnnotationWidget) obj).getDictionary();\n      } else {\n        throw new IOException(\"Error:Unexpected type of kids field:\" + obj);\n      }\n      retval = isButton(new PDUnknownField(field.getAcroForm(), kidDict));\n    }\n    return retval;\n  }\n"}, {"dataset": "listGet", "exampleID": 5035, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 271, "guardExpressionEnd": 319, "guardBlockStart": 271, "guardBlockEnd": 435, "focalAPI": "element = list.get(index)", "focalAPIStart": 365, "focalAPIEnd": 387, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.removeChangeListener(*)", "list.clear()"], "useStart": [395, 512], "useEnd": [428, 535], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fsteen/monopoly-for-the-gods/tree/master/jfreechart-1.0.14/source/org/jfree/data/xy/MatrixSeriesCollection.java", "rawCode": "  /**\n   * Removes all the series from the collection.\n   *\n   * <p>Notifies all registered listeners that the dataset has changed.\n   */\n  public void removeAllSeries() {\n    // Unregister the collection as a change listener to each series in\n    // the collection.\n    for (int i = 0; i < this.seriesList.size(); i++) {\n      MatrixSeries series = (MatrixSeries) this.seriesList.get(i);\n      series.removeChangeListener(this);\n    }\n\n    // Remove all the series from the collection and notify listeners.\n    this.seriesList.clear();\n    fireDatasetChanged();\n  }\n"}, {"dataset": "listGet", "exampleID": 5036, "initialization": ["List list = getInstance()"], "initializationStart": [158], "initializationEnd": [182], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 397, "focalAPIEnd": 410, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getDoubleValue()"], "useStart": [531], "useEnd": [578], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/betterFORM/betterFORM/tree/master/core/src/test/java/de/betterform/xml/xforms/BetterFormTestCase.java", "rawCode": "  protected double evaluateInInstanceAsDouble(final String instanceID, final String xpathExpression)\n      throws XFormsException {\n    List result =\n        XPathCache.getInstance()\n            .evaluate(\n                getInstanceNodeInfo(instanceID),\n                xpathExpression,\n                kPREFIX_MAPPING,\n                defaultFunctionContext);\n\n    if ((result.size() != 1) || !(result.get(0) instanceof NumericValue)) {\n      throw new XFormsException(\"Could not convert resultset to double\");\n    }\n\n    return ((NumericValue) result.get(0)).getDoubleValue();\n  }\n"}, {"dataset": "listGet", "exampleID": 5037, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<selectedTimes.size()", "guardType": "LOOP {", "guardExpressionStart": 267, "guardExpressionEnd": 313, "guardBlockStart": 267, "guardBlockEnd": 519, "focalAPI": "element = list.get(index)", "focalAPIStart": 405, "focalAPIEnd": 425, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mcidasv/mcidasv/tree/master/edu/wisc/ssec/mcidasv/chooser/adde/AddeRaobChooser.java", "rawCode": "  /**\n   * Unselect a station\n   *\n   * @param station station to unselect\n   */\n  private void stationUnselected(Station station) {\n    List selectedTimes = getSelectedTimes();\n    if ((selectedTimes == null) || (selectedTimes.size() < 1)) {\n      return;\n    }\n    for (int i = 0; i < selectedTimes.size(); i++) {\n      SoundingOb newObs =\n          new SoundingOb((SoundingStation) station, (DateTime) selectedTimes.get(i));\n      if (selectedObs.contains(newObs)) {\n        selectedObs.remove(newObs);\n      }\n    }\n    obsList.setListData(selectedObs);\n    updateStatus();\n  }\n"}, {"dataset": "listGet", "exampleID": 5038, "initialization": ["List list = CompositeIndexSelector.getIndexSelectors()"], "initializationStart": [736], "initializationEnd": [768], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list.size()>index", "guardType": "IF {", "guardExpressionStart": 776, "guardExpressionEnd": 801, "guardBlockStart": 776, "guardBlockEnd": 929, "focalAPI": "element = list.get(index)", "focalAPIStart": 858, "focalAPIEnd": 874, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getFilePaths()"], "useStart": [892], "useEnd": [920], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Teiid-Designer/teiid-designer/tree/master/plugins/org.teiid.designer.transformation/src/org/teiid/designer/transformation/metadata/TransformationMetadata.java", "rawCode": "  @Override\n  public String[] getVDBResourcePaths() throws Exception {\n    IndexSelector selector = this.getIndexSelector();\n    // make sure the selector is initialized\n    try {\n      selector.getIndexes();\n    } catch (IOException e) {\n      throw new TeiidDesignerException(\n          e,\n          TransformationPlugin.Util.getString(\n              \"TransformationMetadata.error_intialize_selector\")); // $NON-NLS-1$\n    }\n    // look for the resource in only the first available indexSelector\n    // built in assumption is that first selector is always for the vdb logged in\n    if (selector instanceof CompositeIndexSelector) {\n      CompositeIndexSelector compSelector = (CompositeIndexSelector) selector;\n      List selectors = compSelector.getIndexSelectors();\n      if (selectors.size() > 0) {\n        IndexSelector firstSelector = (IndexSelector) selectors.get(0);\n\n        return firstSelector.getFilePaths();\n      }\n    }\n    return selector.getFilePaths();\n  }\n"}, {"dataset": "listGet", "exampleID": 5039, "initialization": ["List list = new ArrayList()"], "initializationStart": [1256], "initializationEnd": [1271], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 1634, "focalAPIEnd": 1645, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,element)"], "useStart": [1606], "useEnd": [1646], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/bobmcwhirter/drools/tree/master/drools-compiler/src/test/java/org/drools/rule/builder/dialect/mvel/MVELActionBuilderTest.java", "rawCode": "  public void testSimpleAction() throws Exception {\n    final Package pkg = new Package(\"pkg1\");\n\n    ActionDescr actionDescr = new ActionDescr();\n    actionDescr.setText(\"list.add( 'hello world' )\");\n\n    PackageBuilder pkgBuilder = new PackageBuilder(pkg);\n    final PackageBuilderConfiguration conf = pkgBuilder.getPackageBuilderConfiguration();\n    DialectCompiletimeRegistry dialectRegistry =\n        pkgBuilder.getPackageRegistry(pkg.getName()).getDialectCompiletimeRegistry();\n    MVELDialect mvelDialect = (MVELDialect) dialectRegistry.getDialect(\"mvel\");\n\n    PackageBuildContext context = new PackageBuildContext();\n    context.init(pkgBuilder, pkg, null, dialectRegistry, mvelDialect, null);\n\n    pkgBuilder.addPackageFromDrl(new StringReader(\"package pkg1;\\nglobal java.util.List list;\\n\"));\n\n    ActionNode actionNode = new ActionNode();\n    DroolsAction action = new DroolsConsequenceAction(\"mvel\", null);\n    actionNode.setAction(action);\n\n    final MVELActionBuilder builder = new MVELActionBuilder();\n    builder.build(context, action, actionDescr);\n\n    final RuleBase ruleBase = RuleBaseFactory.newRuleBase();\n    ruleBase.addPackage(pkgBuilder.getPackage());\n    final WorkingMemory wm = ruleBase.newStatefulSession();\n\n    List list = new ArrayList();\n    wm.setGlobal(\"list\", list);\n\n    ((MVELAction) actionNode.getAction().getMetaData(\"Action\"))\n        .compile(Thread.currentThread().getContextClassLoader());\n\n    KnowledgeHelper knowledgeHelper = new DefaultKnowledgeHelper();\n    ((Action) actionNode.getAction().getMetaData(\"Action\")).execute(knowledgeHelper, wm, null);\n\n    assertEquals(\"hello world\", list.get(0));\n  }\n"}, {"dataset": "listGet", "exampleID": 5040, "initialization": ["List list = getProperty(*)"], "initializationStart": [193], "initializationEnd": [227], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 235, "guardExpressionEnd": 278, "guardBlockStart": 235, "guardBlockEnd": 863, "focalAPI": "element = list.get(index)", "focalAPIStart": 339, "focalAPIEnd": 356, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getName()", "Map.put(element,String)"], "useStart": [434, 830], "useEnd": [453, 854], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dgiormov/javaee.wtp/tree/master/plugins/org.eclipse.jst.j2ee/refactor/org/eclipse/jst/j2ee/refactor/operations/RemoveDeletedComponentFromEARDataModelProvider.java", "rawCode": "  @Override\n  public Object getDefaultProperty(String propertyName) {\n    if (TARGET_COMPONENTS_TO_URI_MAP.equals(propertyName)) {\n      Map map = new HashMap();\n      List components = (List) getProperty(TARGET_COMPONENT_LIST);\n      for (int i = 0; i < components.size(); i++) {\n        IVirtualComponent component = (IVirtualComponent) components.get(i);\n        // IProject project = component.getProject();\n        String name = component.getName();\n        if (_metadata.isWeb()) {\n          name += IJ2EEModuleConstants.WAR_EXT;\n        } else if (_metadata.isEJB()) {\n          name += IJ2EEModuleConstants.JAR_EXT;\n        } else if (_metadata.isAppClient()) {\n          name += IJ2EEModuleConstants.JAR_EXT;\n        } else if (_metadata.isConnector()) {\n          name += IJ2EEModuleConstants.RAR_EXT;\n        }\n        map.put(component, name);\n      }\n      return map;\n    }\n    return super.getDefaultProperty(propertyName);\n  }\n"}, {"dataset": "listGet", "exampleID": 5041, "initialization": ["List list = get(ASTNode)"], "initializationStart": [338], "initializationEnd": [366], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size() && list!=null", "guardType": "IF {", "guardExpressionStart": 372, "guardExpressionEnd": 396, "guardBlockStart": 372, "guardBlockEnd": 652, "focalAPI": "element = list.get(index)", "focalAPIStart": 495, "focalAPIEnd": 513, "followUpCheck": "element.childProperty == property", "checkType": "IF", "followUpCheckExpressionStart": 523, "followUpCheckExpressionEnd": 560, "followUpCheckBlockStart": 523, "followUpCheckBlockEnd": 638, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zaluum/groovy-eclipse/tree/master/jdt-patch/e36/org.eclipse.jdt.core/dom/org/eclipse/jdt/internal/core/dom/rewrite/RewriteEventStore.java", "rawCode": "  public RewriteEvent getEvent(ASTNode parent, StructuralPropertyDescriptor property) {\n    validateHasChildProperty(parent, property);\n\n    if (this.lastEvent != null\n        && this.lastEvent.parent == parent\n        && this.lastEvent.childProperty == property) {\n      return this.lastEvent.event;\n    }\n\n    List entriesList = (List) this.eventLookup.get(parent);\n    if (entriesList != null) {\n      for (int i = 0; i < entriesList.size(); i++) {\n        EventHolder holder = (EventHolder) entriesList.get(i);\n        if (holder.childProperty == property) {\n          this.lastEvent = holder;\n          return holder.event;\n        }\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "listGet", "exampleID": 5042, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [390], "configurationEnd": [410], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 370, "guardExpressionEnd": 416, "guardBlockStart": 370, "guardBlockEnd": 529, "focalAPI": "element = list.get(index)", "focalAPIStart": 460, "focalAPIEnd": 480, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/petergodfrey/TradeSimulator/tree/master/jfreechart-1.0.14/source/org/jfree/chart/entity/StandardEntityCollection.java", "rawCode": "  /**\n   * Returns a clone of this entity collection.\n   *\n   * @return A clone.\n   * @throws CloneNotSupportedException if the object cannot be cloned.\n   */\n  public Object clone() throws CloneNotSupportedException {\n    StandardEntityCollection clone = (StandardEntityCollection) super.clone();\n    clone.entities = new java.util.ArrayList(this.entities.size());\n    for (int i = 0; i < this.entities.size(); i++) {\n      ChartEntity entity = (ChartEntity) this.entities.get(i);\n      clone.entities.add(entity.clone());\n    }\n    return clone;\n  }\n"}, {"dataset": "listGet", "exampleID": 5043, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 209, "guardExpressionEnd": 254, "guardBlockStart": 209, "guardBlockEnd": 346, "focalAPI": "element = list.get(index)", "focalAPIStart": 287, "focalAPIEnd": 306, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["continueUpdate(element)", "list.clear()"], "useStart": [316, 354], "useEnd": [337, 374], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.2.3/kernel-impl/src/main/java/org/sakaiproject/event/impl/NotificationCache.java", "rawCode": "  /** Restore normal event processing in the cache, and process any held events now. */\n  public synchronized void processEvents() {\n    m_holdEventProcessing = false;\n\n    synchronized (m_heldEvents) {\n      for (int i = 0; i < m_heldEvents.size(); i++) {\n        Event event = (Event) m_heldEvents.get(i);\n        continueUpdate(event);\n      }\n\n      m_heldEvents.clear();\n    }\n  } // holdEvents\n"}, {"dataset": "listGet", "exampleID": 5044, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<size", "guardType": "LOOP {", "guardExpressionStart": 165, "guardExpressionEnd": 195, "guardBlockStart": 165, "guardBlockEnd": 305, "focalAPI": "element = list.get(index)", "focalAPIStart": 222, "focalAPIEnd": 240, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getMethodElementSignature()"], "useStart": [263], "useEnd": [297], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dgiormov/javaee.wtp/tree/master/plugins/org.eclipse.jst.j2ee.core/mofj2ee/org/eclipse/jst/j2ee/ejb/internal/impl/EnterpriseBeanImpl.java", "rawCode": "  protected List getMethodElementSignatures(List someMethods) {\n    int size = someMethods.size();\n    List signatures = new ArrayList(size);\n    Method method;\n    for (int i = 0; i < size; i++) {\n      method = (Method) someMethods.get(i);\n      signatures.add(method.getMethodElementSignature());\n    }\n    return signatures;\n  }\n"}, {"dataset": "listGet", "exampleID": 5045, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<size", "guardType": "LOOP {", "guardExpressionStart": 138, "guardExpressionEnd": 168, "guardBlockStart": 138, "guardBlockEnd": 208, "focalAPI": "element = list.get(index)", "focalAPIStart": 192, "focalAPIEnd": 207, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/gogoego-gerrit/iucn-sis/tree/master/org.hibernate/src/org/hibernate/impl/CollectionFilterImpl.java", "rawCode": "  public Type[] typeArray() {\n    List typeList = getTypes();\n    int size = typeList.size();\n    Type[] result = new Type[size + 1];\n    for (int i = 0; i < size; i++) result[i + 1] = (Type) typeList.get(i);\n    return result;\n  }\n"}, {"dataset": "listGet", "exampleID": 5046, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["getMessage()", "error(*,*)", "new ExecutionException(*)"], "tryExpressionStart": 212, "tryExpressionEnd": 216, "tryBlockStart": 212, "tryBlockEnd": 849, "catchExpressionStart": 747, "catchExpressionEnd": 767, "catchBlockStart": 747, "catchBlockEnd": 849, "exceptionHandlingCallStart": [785, 775, 817], "exceptionHandlingCallEnd": [799, 803, 842], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 389, "guardExpressionEnd": 430, "guardBlockStart": 389, "guardBlockEnd": 693, "focalAPI": "element = list.get(index)", "focalAPIStart": 467, "focalAPIEnd": 482, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["org.w3c.dom.Document.createTextNode(element)"], "useStart": [585], "useEnd": [612], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/wyona/lenya/tree/master/unicms/branches/BRANCH_1_0_X/pubs/unipublic/java/src/ch/unizh/unipublic/lenya/cms/task/DossierTask.java", "rawCode": "  /**\n   * Add a message in the message's file, to which it will be redirected\n   *\n   * @throws ExecutionException when something went wrong.\n   */\n  protected void addMessages() throws ExecutionException {\n    try {\n      File file = getMessagesFile();\n\n      org.w3c.dom.Document doc = DocumentHelper.readDocument(file);\n      org.w3c.dom.Element root = doc.getDocumentElement();\n      for (int i = 0; i < messages.size(); i++) {\n        String message = (String) messages.get(i);\n        org.w3c.dom.Element messageE = doc.createElement(\"message\");\n        org.w3c.dom.Node node = doc.createTextNode(message);\n        messageE.appendChild(node);\n        root.appendChild(messageE);\n      }\n      DocumentHelper.writeDocument(doc, file);\n    } catch (Exception e) {\n      log.error(e.getMessage(), e);\n      throw new ExecutionException(e);\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5047, "initialization": ["List list = BaseXPath.selectNodes(Document)"], "initializationStart": [120], "initializationEnd": [142], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [164], "configurationEnd": [177], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 212, "focalAPIEnd": 225, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(*,element)"], "useStart": [184], "useEnd": [226], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/ukcrpb6/jaxen-wmb-extensions/tree/master/src/java/test/org/jaxen/test/NotTest.java", "rawCode": "  public void testOneIsTrue() throws JaxenException {\n\n    BaseXPath xpath = new DOMXPath(\"not(1)\");\n\n    List result = xpath.selectNodes(doc);\n    assertEquals(1, result.size());\n    assertEquals(Boolean.FALSE, result.get(0));\n  }\n"}, {"dataset": "listGet", "exampleID": 5048, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [431], "configurationEnd": [455], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 411, "guardExpressionEnd": 461, "guardBlockStart": 411, "guardBlockEnd": 1092, "focalAPI": "element = list.get(index)", "focalAPIStart": 568, "focalAPIEnd": 592, "followUpCheck": "!(element instanceof ItemsListSeparator)", "checkType": "IF", "followUpCheckExpressionStart": 605, "followUpCheckExpressionEnd": 647, "followUpCheckBlockStart": 605, "followUpCheckBlockEnd": 963, "use": ["getElementName(element)", "put(*,element)", "setDuplicateElement(element,boolean)", "setDuplicateElement(element,boolean)"], "useStart": [698, 684, 836, 904], "useEnd": [718, 725, 867, 936], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dzonekl/netxstudio/tree/master/screens/com.netxforge.netxstudio.screens/src/com/netxforge/netxstudio/screens/AbstractSmartTableViewer.java", "rawCode": "    private void checkDuplicates(IProgressMonitor monitor) {\n      synchronized (lastFilteredItems) {\n        IProgressMonitor subMonitor = null;\n        int reportEvery = lastFilteredItems.size() / 20;\n        if (monitor != null) {\n          subMonitor = new SubProgressMonitor(monitor, 100);\n          subMonitor.beginTask(\"check duplicates\", 5);\n        }\n        HashMap helperMap = new HashMap();\n        for (int i = 0; i < lastFilteredItems.size(); i++) {\n          if (reset || (subMonitor != null && subMonitor.isCanceled())) return;\n          Object item = lastFilteredItems.get(i);\n\n          if (!(item instanceof ItemsListSeparator)) {\n            Object previousItem = helperMap.put(getElementName(item), item);\n            if (previousItem != null) {\n              setDuplicateElement(previousItem, true);\n              setDuplicateElement(item, true);\n            } else {\n              setDuplicateElement(item, false);\n            }\n          }\n\n          if (subMonitor != null && reportEvery != 0 && (i + 1) % reportEvery == 0)\n            subMonitor.worked(1);\n        }\n        helperMap.clear();\n\n        if (ScreensActivator.DEBUG) {\n          ScreensActivator.TRACE.trace(\n              ScreensActivator.TRACE_SCREENS_OPTION,\n              \"Duplicates check count: \" + duplicates.size());\n        }\n      }\n    }\n"}, {"dataset": "listGet", "exampleID": 5049, "initialization": ["List list = loadResources(String,Object[])"], "initializationStart": [445], "initializationEnd": [471], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 568, "focalAPIEnd": 578, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.0-beta05/kernel-util/src/main/java/org/sakaiproject/util/BaseDbBinarySingleStorage.java", "rawCode": "  /**\n   * Get the Resource with this id, or null if not found.\n   *\n   * @param id The id.\n   * @return The Resource with this id, or null if not found.\n   */\n  public Entity getResource(String id) {\n    Entity entry = null;\n\n    // get the user from the db\n    List xml = null;\n    String sql = singleStorageSql.getXmlSql(m_resourceTableIdField, m_resourceTableName);\n    Object fields[] = new Object[1];\n    fields[0] = caseId(id);\n    xml = loadResources(sql, fields);\n\n    if (!xml.isEmpty()) {\n      // create the Resource from the db xml\n      entry = (Entity) xml.get(0);\n    }\n\n    return entry;\n  }\n"}, {"dataset": "listGet", "exampleID": 5050, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "InvocationTargetException", "exceptionHandlingCall": ["getCause()", "showExceptionDialog(*)"], "tryExpressionStart": 49, "tryExpressionEnd": 53, "tryBlockStart": 49, "tryBlockEnd": 2285, "catchExpressionStart": 1940, "catchExpressionEnd": 1976, "catchBlockStart": 1940, "catchBlockEnd": 2145, "exceptionHandlingCallStart": [1988, 2037], "exceptionHandlingCallEnd": [2000, 2086], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 113, "focalAPIEnd": 137, "followUpCheck": "element instanceof IScriptProject", "checkType": "IF", "followUpCheckExpressionStart": 145, "followUpCheckExpressionEnd": 182, "followUpCheckBlockStart": 145, "followUpCheckBlockEnd": 523, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/panchenko/org.eclipse.dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/wizards/buildpath/newsourcepage/RemoveFromBuildpathAction.java", "rawCode": "  /** {@inheritDoc} */\n  public void run() {\n    try {\n      final IScriptProject project;\n      Object object = fSelectedElements.get(0);\n      if (object instanceof IScriptProject) {\n        project = (IScriptProject) object;\n      } else if (object instanceof IProjectFragment) {\n        IProjectFragment root = (IProjectFragment) object;\n        project = root.getScriptProject();\n      } else {\n        BuildPathContainer container = (BuildPathContainer) object;\n        project = container.getScriptProject();\n      }\n      final List elementsToRemove = new ArrayList();\n      final List foldersToDelete = new ArrayList();\n      queryToRemoveLinkedFolders(elementsToRemove, foldersToDelete);\n      final IRunnableWithProgress runnable =\n          new IRunnableWithProgress() {\n            public void run(IProgressMonitor monitor)\n                throws InvocationTargetException, InterruptedException {\n              try {\n                monitor.beginTask(\n                    NewWizardMessages.BuildpathModifier_Monitor_RemoveFromBuildpath,\n                    elementsToRemove.size() + foldersToDelete.size());\n                List result =\n                    removeFromBuildpath(\n                        elementsToRemove,\n                        project,\n                        new SubProgressMonitor(monitor, elementsToRemove.size()));\n                result.removeAll(foldersToDelete);\n                deleteFolders(\n                    foldersToDelete, new SubProgressMonitor(monitor, foldersToDelete.size()));\n                if (result.size() == 0) result.add(project);\n                selectAndReveal(new StructuredSelection(result));\n              } catch (CoreException e) {\n                throw new InvocationTargetException(e);\n              } finally {\n                monitor.done();\n              }\n            }\n          };\n      PlatformUI.getWorkbench().getProgressService().run(true, false, runnable);\n    } catch (InvocationTargetException e) {\n      if (e.getCause() instanceof CoreException) {\n        showExceptionDialog((CoreException) e.getCause());\n      } else {\n        DLTKUIPlugin.log(e);\n      }\n    } catch (InterruptedException e) {\n    } catch (ModelException e) {\n      // TODO Auto-generated catch block\n      e.printStackTrace();\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5051, "initialization": ["List list = Map.get(String)", "List list = Map.get(String)"], "initializationStart": [432, 518], "initializationEnd": [448, 546], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list!=null", "guardType": "IF {", "guardExpressionStart": 570, "guardExpressionEnd": 593, "guardBlockStart": 570, "guardBlockEnd": 722, "focalAPI": "element = list.get(index)", "focalAPIStart": 636, "focalAPIEnd": 653, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new CommandInfo(String,element)"], "useStart": [674], "useEnd": [709], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/archive/ext/src/activation-1.1.1/source/javax/activation/MailcapCommandMap.java", "rawCode": "  /**\n   * Returns the command with the specified name for the given MIME type.\n   *\n   * @param mimeType the MIME type\n   * @param cmdName the command verb\n   */\n  public synchronized CommandInfo getCommand(String mimeType, String cmdName) {\n    for (int i = 0; i < 2; i++) {\n      for (int j = 0; j < 5; j++) {\n        Map map = getCommands(mailcaps[j][i], mimeType);\n        if (map != null) {\n          List classNames = (List) map.get(cmdName);\n          if (classNames == null) {\n            classNames = (List) map.get(\"x-java-\" + cmdName);\n          }\n          if (classNames != null) {\n            String className = (String) classNames.get(0);\n            return new CommandInfo(cmdName, className);\n          }\n        }\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "listGet", "exampleID": 5052, "initialization": ["List list = getLineSegments(PointList)"], "initializationStart": [3454], "initializationEnd": [3482], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 3924, "focalAPIEnd": 3942, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["list.size()", "list.get(int)", "getRoutedPoints(PointList,PointList,Point,Point,Point,Point,element,LineSeg,PointList,int,boolean,boolean,int)"], "useStart": [3997, 3981, 4030], "useEnd": [4015, 4020, 4334], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/schmeedy/gmf/tree/master/org.eclipse.gmf.runtime/plugins/org.eclipse.gmf.runtime.draw2d.ui/src/org/eclipse/gmf/runtime/draw2d/ui/geometry/PointListUtilities.java", "rawCode": "  /**\n   * Method routeAroundPoint. Calculate a new routed version of this polyline that will route itself\n   * around a given point.\n   *\n   * @param points PointList to modify\n   * @param ptCenter the <code>Point</code> around which the routing will occur.\n   * @param nHeight the <code>int</code> height to route around the point.\n   * @param nWidth the <code>int</code> width to route around the point.\n   * @param nSmoothFactor the <code>int</code> smooth factor to route the line with 0 - None, 15 -\n   *     some, 30 - lots\n   * @param nInclineOffset the <code>int</code> amount to incline the routed points.\n   * @param bTop the <code>boolean</code> route above or below the point on the line.\n   * @return <code>PointList</code> that is the newly routed version of <code>points</code> of\n   *     <code>null</code> if operation was not successful or if the calculation is not possible.\n   */\n  public static PointList routeAroundPoint(\n      PointList points,\n      final Point ptCenter,\n      int nHeight,\n      int nWidth,\n      int nSmoothFactor,\n      int nInclineOffset,\n      boolean bTop) {\n    List mySegments = getLineSegments(points);\n\n    long nPolyLength = length(mySegments);\n    long nCenterDistance = Math.round(distanceAlong(mySegments, ptCenter) * nPolyLength);\n\n    Point ptMidStart = new Point();\n    pointOn(mySegments, nCenterDistance - (nWidth / 2), LineSeg.KeyPoint.ORIGIN, ptMidStart);\n    Point ptMidEnd = new Point();\n    pointOn(mySegments, nCenterDistance + (nWidth / 2), LineSeg.KeyPoint.ORIGIN, ptMidEnd);\n    LineSeg lineNew = new LineSeg(ptMidStart, ptMidEnd);\n\n    Point ptStart = new Point();\n    lineNew.pointOn(nInclineOffset, LineSeg.KeyPoint.ORIGIN, ptStart);\n    LocateInfo locateInfo = new LocateInfo();\n    if (!locateSegment(\n        mySegments,\n        (nCenterDistance - ((long) nWidth / 2)) / (double) nPolyLength,\n        LineSeg.KeyPoint.ORIGIN,\n        locateInfo)) return null;\n    LineSeg pStartSeg = locateInfo.theSegment;\n\n    Point ptEnd = new Point();\n    lineNew.pointOn(nInclineOffset, LineSeg.KeyPoint.TERMINUS, ptEnd);\n    if (!locateSegment(\n        mySegments,\n        (nCenterDistance + ((long) nWidth / 2)) / (double) nPolyLength,\n        LineSeg.KeyPoint.ORIGIN,\n        locateInfo)) return null;\n    LineSeg pEndSeg = locateInfo.theSegment;\n\n    // figure out which side to route around\n    float fSlope = lineNew.slope();\n    int nDir = 1;\n    if ((bTop && fSlope <= 0) || (!bTop && fSlope > 0)) nDir *= -1;\n\n    LineSeg lineStart =\n        new LineSeg(\n            LineSeg.KeyPoint.ORIGIN, // Origin or Midpoint\n            ptStart.x,\n            ptStart.y,\n            lineNew.perpSlope(),\n            nHeight,\n            nDir);\n\n    LineSeg lineEnd =\n        new LineSeg(\n            LineSeg.KeyPoint.ORIGIN, // Origin or Midpoint\n            ptEnd.x,\n            ptEnd.y,\n            lineNew.perpSlope(),\n            nHeight,\n            nDir);\n\n    PointList rRotatedBox = new PointList();\n    rRotatedBox.addPoint(new Point(ptMidStart));\n    rRotatedBox.addPoint(new Point(lineStart.getTerminus()));\n    rRotatedBox.addPoint(new Point(lineEnd.getTerminus()));\n    rRotatedBox.addPoint(new Point(ptMidEnd));\n    rRotatedBox.addPoint(new Point(ptMidStart));\n\n    PointList rPolyPoints = new PointList(rRotatedBox.size() * MAX_BEZIERLINES + points.size());\n    boolean bFoundStart = false;\n    boolean bFoundEnd = false;\n    int nPointsSinceStart = 0;\n\n    List boxSegments = getLineSegments(rRotatedBox);\n    ListIterator lineIter = mySegments.listIterator();\n    while (lineIter.hasNext()) {\n      LineSeg pSegment = (LineSeg) lineIter.next();\n\n      if (pSegment.equals(pStartSeg)) {\n        rPolyPoints.addPoint(new Point(pSegment.getOrigin()));\n        bFoundStart = true;\n      }\n\n      if (pSegment == pEndSeg) {\n        PointList newRoutePoints = new PointList(rRotatedBox.size() * MAX_BEZIERLINES);\n\n        LineSeg pCurSeg1 = (LineSeg) boxSegments.get(0);\n        LineSeg pCurSeg2 = (LineSeg) boxSegments.get(boxSegments.size() - 1);\n        getRoutedPoints(\n            points,\n            newRoutePoints,\n            ptMidStart,\n            ptMidEnd,\n            ptMidStart,\n            ptMidEnd,\n            pCurSeg1,\n            pCurSeg2,\n            rRotatedBox,\n            nSmoothFactor,\n            false,\n            true,\n            0);\n\n        while (nPointsSinceStart > 0) {\n          rPolyPoints.removePoint(rPolyPoints.size() - 1);\n          nPointsSinceStart--;\n        }\n\n        for (int i = 0; i < newRoutePoints.size(); i++)\n          rPolyPoints.addPoint(new Point(newRoutePoints.getPoint(i)));\n        rPolyPoints.addPoint(new Point(pSegment.getTerminus()));\n        bFoundEnd = true;\n      } else {\n        rPolyPoints.addPoint(new Point(pSegment.getOrigin()));\n\n        if (bFoundStart) nPointsSinceStart++;\n\n        if (!lineIter.hasNext()) rPolyPoints.addPoint(new Point(pSegment.getTerminus()));\n      }\n    }\n\n    if (bFoundEnd) return rPolyPoints;\n\n    return null;\n  }\n"}, {"dataset": "listGet", "exampleID": 5053, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 41, "guardExpressionEnd": 83, "guardBlockStart": 41, "guardBlockEnd": 131, "focalAPI": "element = list.get(index)", "focalAPIStart": 96, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.setTimeout(int)"], "useStart": [84], "useEnd": [130], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/lemmy/dnsjava/tree/master/tags/dnsjava-1-6-1/org/xbill/DNS/ExtendedResolver.java", "rawCode": "  public void setTimeout(int secs) {\n    for (int i = 0; i < resolvers.size(); i++) ((Resolver) resolvers.get(i)).setTimeout(secs);\n  }\n"}, {"dataset": "listGet", "exampleID": 5054, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(list.size()==index)", "guardType": "IF {", "guardExpressionStart": 160, "guardExpressionEnd": 182, "guardBlockStart": 160, "guardBlockEnd": 252, "focalAPI": "element = list.get(index)", "focalAPIStart": 305, "focalAPIEnd": 317, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.get(int)", "list.get(int)"], "useStart": [365, 863], "useEnd": [381, 875], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Unidata/thredds/tree/master/cdm/src/main/java/ucar/nc2/iosp/nexrad2/Level2VolumeScan.java", "rawCode": "  private boolean testVariable(String name, List scans) {\n    int datatype = name.equals(\"reflect\") ? Level2Record.REFLECTIVITY : Level2Record.VELOCITY_HI;\n    if (scans.size() == 0) {\n      log.warn(\" No data for = \" + name);\n      return false;\n    }\n\n    boolean ok = true;\n    List firstScan = (List) scans.get(0);\n    Level2Record firstRecord = (Level2Record) firstScan.get(0);\n    dopplarResolution = firstRecord.resolution;\n\n    if (debugGroups2)\n      System.out.println(\n          \"Group \"\n              + Level2Record.getDatatypeName(datatype)\n              + \" ngates = \"\n              + firstRecord.getGateCount(datatype)\n              + \" start = \"\n              + firstRecord.getGateStart(datatype)\n              + \" size = \"\n              + firstRecord.getGateSize(datatype));\n\n    for (int i = 1; i < scans.size(); i++) {\n      List scan = (List) scans.get(i);\n      Level2Record record = (Level2Record) scan.get(0);\n\n      if ((datatype == Level2Record.VELOCITY_HI)\n          && (record.resolution\n              != firstRecord.resolution)) { // do all velocity resolutions match ??\n        log.warn(\n            name\n                + \" scan \"\n                + i\n                + \" diff resolutions = \"\n                + record.resolution\n                + \", \"\n                + firstRecord.resolution\n                + \" elev= \"\n                + record.elevation_num\n                + \" \"\n                + record.getElevation());\n        ok = false;\n        hasDifferentDopplarResolutions = true;\n      }\n\n      if (record.getGateSize(datatype) != firstRecord.getGateSize(datatype)) {\n        log.warn(\n            name\n                + \" scan \"\n                + i\n                + \" diff gates size = \"\n                + record.getGateSize(datatype)\n                + \" \"\n                + firstRecord.getGateSize(datatype)\n                + \" elev= \"\n                + record.elevation_num\n                + \" \"\n                + record.getElevation());\n        ok = false;\n\n      } else if (debugGroups2)\n        System.out.println(\n            \" ok gates size elev= \" + record.elevation_num + \" \" + record.getElevation());\n\n      if (record.getGateStart(datatype) != firstRecord.getGateStart(datatype)) {\n        log.warn(\n            name\n                + \" scan \"\n                + i\n                + \" diff gates start = \"\n                + record.getGateStart(datatype)\n                + \" \"\n                + firstRecord.getGateStart(datatype)\n                + \" elev= \"\n                + record.elevation_num\n                + \" \"\n                + record.getElevation());\n        ok = false;\n\n      } else if (debugGroups2)\n        System.out.println(\n            \" ok gates start elev= \" + record.elevation_num + \" \" + record.getElevation());\n\n      if (record.message_type == 31) {\n        hasHighResolutionData = true;\n        // each data type\n        if (record.hasHighResREFData) hasHighResolutionREF = true;\n        if (record.hasHighResVELData) hasHighResolutionVEL = true;\n        if (record.hasHighResSWData) hasHighResolutionSW = true;\n        if (record.hasHighResZDRData) hasHighResolutionZDR = true;\n        if (record.hasHighResPHIData) hasHighResolutionPHI = true;\n        if (record.hasHighResRHOData) hasHighResolutionRHO = true;\n      }\n    }\n\n    return ok;\n  }\n"}, {"dataset": "listGet", "exampleID": 5055, "initialization": ["List list = TreeListDialogField.getElements()"], "initializationStart": [545], "initializationEnd": [571], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 577, "guardExpressionEnd": 618, "guardBlockStart": 577, "guardBlockEnd": 989, "focalAPI": "element = list.get(index)", "focalAPIStart": 664, "focalAPIEnd": 679, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["TreeListDialogField.expandElement(element,int)"], "useStart": [939], "useEnd": [974], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/vjet.all/tree/master/dltk/core/org.eclipse.dltk.mod.ui/src/org/eclipse/dltk/mod/internal/ui/wizards/buildpath/SourceContainerWorkbookPage.java", "rawCode": "  public Control getControl(Composite parent) {\n    PixelConverter converter = new PixelConverter(parent);\n    Composite composite = new Composite(parent, SWT.NONE);\n\n    LayoutUtil.doDefaultLayout(\n        composite, new DialogField[] {fFoldersList}, true, SWT.DEFAULT, SWT.DEFAULT);\n    LayoutUtil.setHorizontalGrabbing(fFoldersList.getTreeControl(null));\n\n    int buttonBarWidth = converter.convertWidthInCharsToPixels(24);\n    fFoldersList.setButtonsMinWidth(buttonBarWidth);\n\n    fSWTControl = composite;\n\n    // expand\n    List elements = fFoldersList.getElements();\n    for (int i = 0; i < elements.size(); i++) {\n      BPListElement elem = (BPListElement) elements.get(i);\n      IPath[] exclusionPatterns = (IPath[]) elem.getAttribute(BPListElement.EXCLUSION);\n      IPath[] inclusionPatterns = (IPath[]) elem.getAttribute(BPListElement.INCLUSION);\n      if (exclusionPatterns.length > 0 || inclusionPatterns.length > 0) {\n        fFoldersList.expandElement(elem, 3);\n      }\n    }\n    return composite;\n  }\n"}, {"dataset": "listGet", "exampleID": 5056, "initialization": ["List list = getSelectedResources()"], "initializationStart": [442], "initializationEnd": [464], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(list.size()==index)", "guardType": "IF {", "guardExpressionStart": 470, "guardExpressionEnd": 504, "guardBlockStart": 470, "guardBlockEnd": 532, "focalAPI": "element = list.get(index)", "focalAPIStart": 949, "focalAPIEnd": 973, "followUpCheck": "element == null", "checkType": "IF", "followUpCheckExpressionStart": 992, "followUpCheckExpressionEnd": 1016, "followUpCheckBlockStart": 992, "followUpCheckBlockEnd": 1044, "use": ["list.iterator()"], "useStart": [1075], "useEnd": [1103], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/aptana/Pydev/tree/master/plugins/org.python.pydev/src_navigator/org/python/pydev/navigator/actions/copied/CopyAction.java", "rawCode": "  /**\n   * The <code>CopyAction</code> implementation of this <code>SelectionListenerAction</code> method\n   * enables this action if one or more resources of compatible types are selected.\n   */\n  protected boolean updateSelection(IStructuredSelection selection) {\n    if (!super.updateSelection(selection)) {\n      return false;\n    }\n\n    if (getSelectedNonResources().size() > 0) {\n      return false;\n    }\n\n    List selectedResources = getSelectedResources();\n    if (selectedResources.size() == 0) {\n      return false;\n    }\n\n    boolean projSelected = selectionIsOfType(IResource.PROJECT);\n    boolean fileFoldersSelected = selectionIsOfType(IResource.FILE | IResource.FOLDER);\n    if (!projSelected && !fileFoldersSelected) {\n      return false;\n    }\n\n    // selection must be homogeneous\n    if (projSelected && fileFoldersSelected) {\n      return false;\n    }\n\n    // must have a common parent\n    IContainer firstParent = ((IResource) selectedResources.get(0)).getParent();\n    if (firstParent == null) {\n      return false;\n    }\n\n    Iterator resourcesEnum = selectedResources.iterator();\n    while (resourcesEnum.hasNext()) {\n      IResource currentResource = (IResource) resourcesEnum.next();\n      if (!currentResource.getParent().equals(firstParent)) {\n        return false;\n      }\n      // resource location must exist\n      if (currentResource.getLocation() == null) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n"}, {"dataset": "listGet", "exampleID": 5057, "initialization": ["List list = Conf.getCatchElems()"], "initializationStart": [498], "initializationEnd": [518], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 524, "guardExpressionEnd": 567, "guardBlockStart": 524, "guardBlockEnd": 1095, "focalAPI": "element = list.get(index)", "focalAPIStart": 610, "focalAPIEnd": 627, "followUpCheck": "!element.matches(originalThrowable)", "checkType": "IF", "followUpCheckExpressionStart": 635, "followUpCheckExpressionEnd": 677, "followUpCheckBlockStart": 635, "followUpCheckBlockEnd": 687, "use": ["element.execute(HttpServletRequest,HttpServletResponse,Throwable)"], "useStart": [715], "useEnd": [774], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jbcpollak/UrlRewriteFilter/tree/master/src/java/org/tuckey/web/filters/urlrewrite/UrlRewriter.java", "rawCode": "  /** Handle an exception thrown by a Run element. */\n  public RewrittenUrl handleInvocationTargetException(\n      final HttpServletRequest hsRequest,\n      final HttpServletResponse hsResponse,\n      InvocationTargetException e)\n      throws ServletException, IOException {\n\n    Throwable originalThrowable = getOriginalException(e);\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"attampting to find catch for exception \" + originalThrowable.getClass().getName());\n    }\n\n    List catchElems = conf.getCatchElems();\n    for (int i = 0; i < catchElems.size(); i++) {\n      CatchElem catchElem = (CatchElem) catchElems.get(i);\n      if (!catchElem.matches(originalThrowable)) continue;\n      try {\n        return catchElem.execute(hsRequest, hsResponse, originalThrowable);\n\n      } catch (InvocationTargetException invocationExceptionInner) {\n        originalThrowable = getOriginalException(invocationExceptionInner);\n        log.warn(\n            \"had exception processing catch, trying the rest of the catches with \"\n                + originalThrowable.getClass().getName());\n      }\n    }\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"exception unhandled\", e);\n    }\n    if (originalThrowable instanceof Error) throw (Error) originalThrowable;\n    if (originalThrowable instanceof RuntimeException) throw (RuntimeException) originalThrowable;\n    if (originalThrowable instanceof ServletException) throw (ServletException) originalThrowable;\n    if (originalThrowable instanceof IOException) throw (IOException) originalThrowable;\n    throw new ServletException(originalThrowable);\n  }\n"}, {"dataset": "listGet", "exampleID": 5058, "initialization": ["List list = Element.getChildren()"], "initializationStart": [103], "initializationEnd": [120], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(list.size()<1) && index<list.size()", "guardType": "IF {", "guardExpressionStart": 204, "guardExpressionEnd": 224, "guardBlockStart": 204, "guardBlockEnd": 283, "focalAPI": "element = list.get(index)", "focalAPIStart": 380, "focalAPIEnd": 391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["generateOP(element)"], "useStart": [448], "useEnd": [463], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/joliebig/featurehouse_fstcomp_examples/tree/master/Java/GUIDSL/cubeInterface/CubeXMLHandler.java", "rawCode": "  static String generateAND(Element and) {\n    StringBuffer out = new StringBuffer();\n\n    List list = and.getChildren();\n    // if (list.size()!=2)return \"error <and> token must have two arguments\";\n    if (list.size() < 1) return \"error <and> token must have atleast one argument\";\n\n    out.append(\"(\");\n    for (int i = 0; i < list.size(); i++) {\n      Element elm = (Element) list.get(i);\n      if (i > 0) out.append(\" and \");\n      out.append(generateOP(elm));\n    }\n    out.append(\")\");\n\n    // Element left = (Element)and.getChildren().get(0);\n    // Element right = (Element)and.getChildren().get(1);\n\n    // out.append(\"(\"+generateOP(left));\n    // out.append(\" and \");\n    // out.append(generateOP(right)+\")\");\n\n    return out.toString();\n  }\n"}, {"dataset": "listGet", "exampleID": 5059, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 75, "focalAPIEnd": 94, "followUpCheck": "getHelper().unresolvedSuspect(element)", "checkType": "IF", "followUpCheckExpressionStart": 103, "followUpCheckExpressionEnd": 140, "followUpCheckBlockStart": 103, "followUpCheckBlockEnd": 365, "use": ["list.get(int)"], "useStart": [300], "useEnd": [319], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/cayenne/tree/master/cayenne-server/src/main/java/org/apache/cayenne/access/IncrementalFaultList.java", "rawCode": "  public E get(int index) {\n    synchronized (elements) {\n      Object o = elements.get(index);\n\n      if (getHelper().unresolvedSuspect(o)) {\n        // read this page\n        int pageStart = pageIndex(index) * pageSize;\n        resolveInterval(pageStart, pageStart + pageSize);\n\n        return (E) elements.get(index);\n      } else {\n        return (E) o;\n      }\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5060, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [378], "configurationEnd": [403], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 358, "guardExpressionEnd": 409, "guardBlockStart": 358, "guardBlockEnd": 592, "focalAPI": "element = list.get(index)", "focalAPIStart": 466, "focalAPIEnd": 491, "followUpCheck": "!element.isEclipseRuntimeRequired()", "checkType": "IF", "followUpCheckExpressionStart": 499, "followUpCheckExpressionEnd": 537, "followUpCheckBlockStart": 499, "followUpCheckBlockEnd": 586, "use": ["element.getEntryURL()"], "useStart": [557], "useEnd": [576], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/vogella/eclipse-platform/tree/master/ant/org.eclipse.ant.core/src/org/eclipse/ant/core/AntCorePreferences.java", "rawCode": "  /**\n   * Returns the list of URLs added to the classpath by the extra classpath entries extension point\n   * for an Ant build that is occurring without the Eclipse runtime.\n   *\n   * @return the list of extra classpath URLs\n   * @since 3.0\n   */\n  public URL[] getRemoteExtraClasspathURLs() {\n    List urls = new ArrayList(extraClasspathURLs.size());\n\n    for (int i = 0; i < extraClasspathURLs.size(); i++) {\n      IAntClasspathEntry entry = (IAntClasspathEntry) extraClasspathURLs.get(i);\n      if (!entry.isEclipseRuntimeRequired()) {\n        urls.add(entry.getEntryURL());\n      }\n    }\n    return (URL[]) urls.toArray(new URL[urls.size()]);\n  }\n"}, {"dataset": "listGet", "exampleID": 5061, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 356, "focalAPIEnd": 376, "followUpCheck": "element != null", "checkType": "IF", "followUpCheckExpressionStart": 382, "followUpCheckExpressionEnd": 400, "followUpCheckBlockStart": 382, "followUpCheckBlockEnd": 440, "use": ["element.getMean()"], "useStart": [418], "useEnd": [433], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/DHBW-Karlsruhe/wouf/tree/master/lib/src/jfreechart/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java", "rawCode": "  /**\n   * Returns the mean for the specified series and item.\n   *\n   * @param series the series (zero-based index).\n   * @param item the item (zero-based index).\n   * @return The mean for the specified series and item.\n   */\n  public Number getMeanValue(int series, int item) {\n    Number result = null;\n    BoxAndWhiskerItem stats = (BoxAndWhiskerItem) this.items.get(item);\n    if (stats != null) {\n      result = stats.getMean();\n    }\n    return result;\n  }\n"}, {"dataset": "listGet", "exampleID": 5062, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 75, "guardExpressionEnd": 114, "guardBlockStart": 75, "guardBlockEnd": 188, "focalAPI": "element = list.get(index)", "focalAPIStart": 133, "focalAPIEnd": 146, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.toString()"], "useStart": [133], "useEnd": [157], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/netspective/NEFS/tree/master/Axiom/src/java/main/com/netspective/axiom/schema/table/TablesCollection.java", "rawCode": "  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < tables.size(); i++) {\n      sb.append(tables.get(i).toString());\n      sb.append(\"\\n\");\n    }\n    return sb.toString();\n  }\n"}, {"dataset": "listGet", "exampleID": 5063, "initialization": ["List list = CmsCalendar.getEntries(CmsCalendarViewSimple)"], "initializationStart": [1533], "initializationEnd": [1557], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [1695], "configurationEnd": [1708], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 1675, "guardExpressionEnd": 1714, "guardBlockStart": 1675, "guardBlockEnd": 2659, "focalAPI": "element = list.get(index)", "focalAPIStart": 1770, "focalAPIEnd": 1783, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getEntryData()", "list.size()"], "useStart": [1831, 3968], "useEnd": [1854, 3981], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/alkacon/alkacon-oamp/tree/master/com.alkacon.opencms.calendar/src/com/alkacon/opencms/calendar/test/TestCalendarDailyView.java", "rawCode": "  /**\n   * Tests the daily calendar view output together with some series of yearly interval entries.\n   *\n   * <p>\n   *\n   * @throws Exception if something goes wrong\n   */\n  public void testDailyViewYearlySeries() throws Exception {\n\n    // create a test calendar\n    CmsCalendar testCal = new CmsCalendar();\n\n    // create first serial calendar entry\n    CmsCalendarEntry entry = new CmsCalendarEntry();\n    CmsCalendarEntryData data = new CmsCalendarEntryData();\n    data.setTitle(\"First serial test entry\");\n    data.setDescription(\"Every 3rd Monday of April.\");\n    CmsCalendarEntryDateSerial serialDate =\n        new CmsCalendarEntryDateSerial(\n            new GregorianCalendar(2007, 0, 1, 8, 40), new GregorianCalendar(2007, 0, 1, 8, 50));\n    serialDate.setSerialEndType(I_CmsCalendarSerialDateOptions.END_TYPE_NEVER);\n\n    I_CmsCalendarSerialDateOptions serialOptions =\n        new CmsCalendarSerialDateYearlyOptions(3, Calendar.MONDAY, 3);\n\n    serialDate.setSerialOptions(serialOptions);\n    entry.setEntryData(data);\n    entry.setEntryDate(serialDate);\n    testCal.addEntry(entry);\n\n    // create the list of view dates from Jan 2007 to Dec 2009\n    List viewDates = new ArrayList();\n    CmsCalendarEntryDate viewDate =\n        new CmsCalendarEntryDate(\n            new GregorianCalendar(2007, 0, 1, 0, 0, 0),\n            new GregorianCalendar(2009, 11, 31, 23, 59, 59));\n    viewDates.add(viewDate);\n    // create the daily view\n    CmsCalendarViewSimple view = new CmsCalendarViewSimple(viewDates);\n    List result = testCal.getEntries(view);\n    // there should be 3 entries, one in each year\n    assertEquals(3, result.size());\n    // additional checks\n    for (int i = 0; i < result.size(); i++) {\n      CmsCalendarEntry resEntry = (CmsCalendarEntry) result.get(i);\n      assertEquals(\"First serial test entry\", resEntry.getEntryData().getTitle());\n      if (i == 0) {\n        assertEquals(\n            new GregorianCalendar(2007, 3, 16, 8, 40), resEntry.getEntryDate().getStartDate());\n        assertEquals(\n            new GregorianCalendar(2007, 3, 16, 8, 50), resEntry.getEntryDate().getEndDate());\n      }\n      if (i == 1) {\n        assertEquals(\n            new GregorianCalendar(2008, 3, 21, 8, 40), resEntry.getEntryDate().getStartDate());\n        assertEquals(\n            new GregorianCalendar(2008, 3, 21, 8, 50), resEntry.getEntryDate().getEndDate());\n      }\n      if (i == 2) {\n        assertEquals(\n            new GregorianCalendar(2009, 3, 20, 8, 40), resEntry.getEntryDate().getStartDate());\n        assertEquals(\n            new GregorianCalendar(2009, 3, 20, 8, 50), resEntry.getEntryDate().getEndDate());\n      }\n    }\n\n    // remove first entry\n    testCal.getEntries().remove(0);\n\n    // create second serial calendar entry\n    entry = new CmsCalendarEntry();\n    data = new CmsCalendarEntryData();\n    data.setTitle(\"Second serial test entry\");\n    data.setDescription(\"Every 15th of November to 2015.\");\n    serialDate =\n        new CmsCalendarEntryDateSerial(\n            new GregorianCalendar(2007, 0, 15, 15, 20), new GregorianCalendar(2007, 0, 15, 20, 20));\n    serialDate.setSerialEndType(I_CmsCalendarSerialDateOptions.END_TYPE_DATE);\n    serialDate.setSerialEndDate(new GregorianCalendar(2015, 11, 31));\n\n    serialOptions = new CmsCalendarSerialDateYearlyOptions(15, -1, 10);\n\n    serialDate.setSerialOptions(serialOptions);\n    entry.setEntryData(data);\n    entry.setEntryDate(serialDate);\n    testCal.addEntry(entry);\n\n    // create the list of view dates from Sun, 09/16/2007 to Mon, 09/24/2007\n    viewDates = new ArrayList();\n    viewDate =\n        new CmsCalendarEntryDate(\n            new GregorianCalendar(2007, 0, 1, 0, 0, 0),\n            new GregorianCalendar(2032, 11, 31, 23, 59, 59));\n    viewDates.add(viewDate);\n    // create the daily view\n    view = new CmsCalendarViewSimple(viewDates);\n    result = testCal.getEntries(view);\n    // there should be 9 entries from 2007 to 2015\n    assertEquals(9, result.size());\n  }\n"}, {"dataset": "listGet", "exampleID": 5064, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 653, "guardExpressionEnd": 693, "guardBlockStart": 653, "guardBlockEnd": 1028, "focalAPI": "element = list.get(index)", "focalAPIStart": 727, "focalAPIEnd": 741, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.eval(Sequence,Item)"], "useStart": [765], "useEnd": [806], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cadsr-cgmdr/tree/master/src/org/exist/xquery/ExtensionExpression.java", "rawCode": "  /**\n   * For every pragma in the list, calls {@link Pragma#before(XQueryContext, Expression)} before\n   * evaluation. The method then tries to call {@link Pragma#eval(Sequence, Item)} on every pragma.\n   * If a pragma does not return null for this call, the returned Sequence will become the result of\n   * the extension expression. If more than one pragma returns something for eval, an exception will\n   * be thrown. If all pragmas return null, we call eval on the original expression and return that.\n   */\n  public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n    callBefore();\n    Sequence result = null;\n    for (int i = 0; i < pragmas.size(); i++) {\n      Pragma pragma = (Pragma) pragmas.get(i);\n      Sequence temp = pragma.eval(contextSequence, contextItem);\n      if (temp != null) {\n        if (result != null)\n          throw new XPathException(\n              getASTNode(), \"Conflicting pragmas: only one should return a result for eval\");\n        result = temp;\n      }\n    }\n\n    if (result == null) result = innerExpression.eval(contextSequence, contextItem);\n    callAfter();\n    return result;\n  }\n"}, {"dataset": "listGet", "exampleID": 5065, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 7489, "focalAPIEnd": 7502, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["push(element)"], "useStart": [7484], "useEnd": [7503], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/andreyvit/yoursway-commons/tree/master/com.yoursway.utils/src/org/objectweb/asm/commons/AnalyzerAdapter.java", "rawCode": "  private void execute(final int opcode, final int iarg, final String sarg) {\n    if (this.locals == null) {\n      return;\n    }\n    Object t1, t2, t3, t4;\n    switch (opcode) {\n      case Opcodes.NOP:\n      case Opcodes.INEG:\n      case Opcodes.LNEG:\n      case Opcodes.FNEG:\n      case Opcodes.DNEG:\n      case Opcodes.I2B:\n      case Opcodes.I2C:\n      case Opcodes.I2S:\n      case Opcodes.GOTO:\n      case Opcodes.RETURN:\n        break;\n      case Opcodes.ACONST_NULL:\n        push(Opcodes.NULL);\n        break;\n      case Opcodes.ICONST_M1:\n      case Opcodes.ICONST_0:\n      case Opcodes.ICONST_1:\n      case Opcodes.ICONST_2:\n      case Opcodes.ICONST_3:\n      case Opcodes.ICONST_4:\n      case Opcodes.ICONST_5:\n      case Opcodes.BIPUSH:\n      case Opcodes.SIPUSH:\n        push(Opcodes.INTEGER);\n        break;\n      case Opcodes.LCONST_0:\n      case Opcodes.LCONST_1:\n        push(Opcodes.LONG);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.FCONST_0:\n      case Opcodes.FCONST_1:\n      case Opcodes.FCONST_2:\n        push(Opcodes.FLOAT);\n        break;\n      case Opcodes.DCONST_0:\n      case Opcodes.DCONST_1:\n        push(Opcodes.DOUBLE);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.ILOAD:\n      case Opcodes.FLOAD:\n      case Opcodes.ALOAD:\n        push(get(iarg));\n        break;\n      case Opcodes.LLOAD:\n      case Opcodes.DLOAD:\n        push(get(iarg));\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.IALOAD:\n      case Opcodes.BALOAD:\n      case Opcodes.CALOAD:\n      case Opcodes.SALOAD:\n        pop(2);\n        push(Opcodes.INTEGER);\n        break;\n      case Opcodes.LALOAD:\n      case Opcodes.D2L:\n        pop(2);\n        push(Opcodes.LONG);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.FALOAD:\n        pop(2);\n        push(Opcodes.FLOAT);\n        break;\n      case Opcodes.DALOAD:\n      case Opcodes.L2D:\n        pop(2);\n        push(Opcodes.DOUBLE);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.AALOAD:\n        pop(1);\n        t1 = pop();\n        pushDesc(((String) t1).substring(1));\n        break;\n      case Opcodes.ISTORE:\n      case Opcodes.FSTORE:\n      case Opcodes.ASTORE:\n        t1 = pop();\n        set(iarg, t1);\n        if (iarg > 0) {\n          t2 = get(iarg - 1);\n          if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {\n            set(iarg - 1, Opcodes.TOP);\n          }\n        }\n        break;\n      case Opcodes.LSTORE:\n      case Opcodes.DSTORE:\n        pop(1);\n        t1 = pop();\n        set(iarg, t1);\n        set(iarg + 1, Opcodes.TOP);\n        if (iarg > 0) {\n          t2 = get(iarg - 1);\n          if (t2 == Opcodes.LONG || t2 == Opcodes.DOUBLE) {\n            set(iarg - 1, Opcodes.TOP);\n          }\n        }\n        break;\n      case Opcodes.IASTORE:\n      case Opcodes.BASTORE:\n      case Opcodes.CASTORE:\n      case Opcodes.SASTORE:\n      case Opcodes.FASTORE:\n      case Opcodes.AASTORE:\n        pop(3);\n        break;\n      case Opcodes.LASTORE:\n      case Opcodes.DASTORE:\n        pop(4);\n        break;\n      case Opcodes.POP:\n      case Opcodes.IFEQ:\n      case Opcodes.IFNE:\n      case Opcodes.IFLT:\n      case Opcodes.IFGE:\n      case Opcodes.IFGT:\n      case Opcodes.IFLE:\n      case Opcodes.IRETURN:\n      case Opcodes.FRETURN:\n      case Opcodes.ARETURN:\n      case Opcodes.TABLESWITCH:\n      case Opcodes.LOOKUPSWITCH:\n      case Opcodes.ATHROW:\n      case Opcodes.MONITORENTER:\n      case Opcodes.MONITOREXIT:\n      case Opcodes.IFNULL:\n      case Opcodes.IFNONNULL:\n        pop(1);\n        break;\n      case Opcodes.POP2:\n      case Opcodes.IF_ICMPEQ:\n      case Opcodes.IF_ICMPNE:\n      case Opcodes.IF_ICMPLT:\n      case Opcodes.IF_ICMPGE:\n      case Opcodes.IF_ICMPGT:\n      case Opcodes.IF_ICMPLE:\n      case Opcodes.IF_ACMPEQ:\n      case Opcodes.IF_ACMPNE:\n      case Opcodes.LRETURN:\n      case Opcodes.DRETURN:\n        pop(2);\n        break;\n      case Opcodes.DUP:\n        t1 = pop();\n        push(t1);\n        push(t1);\n        break;\n      case Opcodes.DUP_X1:\n        t1 = pop();\n        t2 = pop();\n        push(t1);\n        push(t2);\n        push(t1);\n        break;\n      case Opcodes.DUP_X2:\n        t1 = pop();\n        t2 = pop();\n        t3 = pop();\n        push(t1);\n        push(t3);\n        push(t2);\n        push(t1);\n        break;\n      case Opcodes.DUP2:\n        t1 = pop();\n        t2 = pop();\n        push(t2);\n        push(t1);\n        push(t2);\n        push(t1);\n        break;\n      case Opcodes.DUP2_X1:\n        t1 = pop();\n        t2 = pop();\n        t3 = pop();\n        push(t2);\n        push(t1);\n        push(t3);\n        push(t2);\n        push(t1);\n        break;\n      case Opcodes.DUP2_X2:\n        t1 = pop();\n        t2 = pop();\n        t3 = pop();\n        t4 = pop();\n        push(t2);\n        push(t1);\n        push(t4);\n        push(t3);\n        push(t2);\n        push(t1);\n        break;\n      case Opcodes.SWAP:\n        t1 = pop();\n        t2 = pop();\n        push(t1);\n        push(t2);\n        break;\n      case Opcodes.IADD:\n      case Opcodes.ISUB:\n      case Opcodes.IMUL:\n      case Opcodes.IDIV:\n      case Opcodes.IREM:\n      case Opcodes.IAND:\n      case Opcodes.IOR:\n      case Opcodes.IXOR:\n      case Opcodes.ISHL:\n      case Opcodes.ISHR:\n      case Opcodes.IUSHR:\n      case Opcodes.L2I:\n      case Opcodes.D2I:\n      case Opcodes.FCMPL:\n      case Opcodes.FCMPG:\n        pop(2);\n        push(Opcodes.INTEGER);\n        break;\n      case Opcodes.LADD:\n      case Opcodes.LSUB:\n      case Opcodes.LMUL:\n      case Opcodes.LDIV:\n      case Opcodes.LREM:\n      case Opcodes.LAND:\n      case Opcodes.LOR:\n      case Opcodes.LXOR:\n        pop(4);\n        push(Opcodes.LONG);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.FADD:\n      case Opcodes.FSUB:\n      case Opcodes.FMUL:\n      case Opcodes.FDIV:\n      case Opcodes.FREM:\n      case Opcodes.L2F:\n      case Opcodes.D2F:\n        pop(2);\n        push(Opcodes.FLOAT);\n        break;\n      case Opcodes.DADD:\n      case Opcodes.DSUB:\n      case Opcodes.DMUL:\n      case Opcodes.DDIV:\n      case Opcodes.DREM:\n        pop(4);\n        push(Opcodes.DOUBLE);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.LSHL:\n      case Opcodes.LSHR:\n      case Opcodes.LUSHR:\n        pop(3);\n        push(Opcodes.LONG);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.IINC:\n        set(iarg, Opcodes.INTEGER);\n        break;\n      case Opcodes.I2L:\n      case Opcodes.F2L:\n        pop(1);\n        push(Opcodes.LONG);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.I2F:\n        pop(1);\n        push(Opcodes.FLOAT);\n        break;\n      case Opcodes.I2D:\n      case Opcodes.F2D:\n        pop(1);\n        push(Opcodes.DOUBLE);\n        push(Opcodes.TOP);\n        break;\n      case Opcodes.F2I:\n      case Opcodes.ARRAYLENGTH:\n      case Opcodes.INSTANCEOF:\n        pop(1);\n        push(Opcodes.INTEGER);\n        break;\n      case Opcodes.LCMP:\n      case Opcodes.DCMPL:\n      case Opcodes.DCMPG:\n        pop(4);\n        push(Opcodes.INTEGER);\n        break;\n      case Opcodes.JSR:\n      case Opcodes.RET:\n        throw new RuntimeException(\"JSR/RET are not supported\");\n      case Opcodes.GETSTATIC:\n        pushDesc(sarg);\n        break;\n      case Opcodes.PUTSTATIC:\n        pop(sarg);\n        break;\n      case Opcodes.GETFIELD:\n        pop(1);\n        pushDesc(sarg);\n        break;\n      case Opcodes.PUTFIELD:\n        pop(sarg);\n        pop();\n        break;\n      case Opcodes.NEW:\n        push(labels.get(0));\n        break;\n      case Opcodes.NEWARRAY:\n        pop();\n        switch (iarg) {\n          case Opcodes.T_BOOLEAN:\n            pushDesc(\"[Z\");\n            break;\n          case Opcodes.T_CHAR:\n            pushDesc(\"[C\");\n            break;\n          case Opcodes.T_BYTE:\n            pushDesc(\"[B\");\n            break;\n          case Opcodes.T_SHORT:\n            pushDesc(\"[S\");\n            break;\n          case Opcodes.T_INT:\n            pushDesc(\"[I\");\n            break;\n          case Opcodes.T_FLOAT:\n            pushDesc(\"[F\");\n            break;\n          case Opcodes.T_DOUBLE:\n            pushDesc(\"[D\");\n            break;\n            // case Opcodes.T_LONG:\n          default:\n            pushDesc(\"[J\");\n            break;\n        }\n        break;\n      case Opcodes.ANEWARRAY:\n        pop();\n        pushDesc(\"[\" + Type.getObjectType(sarg));\n        break;\n      case Opcodes.CHECKCAST:\n        pop();\n        pushDesc(Type.getObjectType(sarg).getDescriptor());\n        break;\n        // case Opcodes.MULTIANEWARRAY:\n      default:\n        pop(iarg);\n        pushDesc(sarg);\n        break;\n    }\n    labels = null;\n  }\n"}, {"dataset": "listGet", "exampleID": 5066, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 781, "focalAPIEnd": 796, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertInviteValid(element,Invite)"], "useStart": [746], "useEnd": [805], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/OpenNTF/SocialSDK/tree/master/samples/j2ee/snippets/com.ibm.sbt.automation.test/src/main/java/com/ibm/sbt/test/js/connections/communities/api/GetAllInvites.java", "rawCode": "  @Test\n  public void testGetAllInvites() {\n    String name2 = getProperty(\"sample.displayName2\");\n    String userid2 = getProperty(\"sample.userId2\");\n    String email2 = getProperty(\"sample.email2\");\n    if (getEnvironment().isSmartCloud()) {\n      name2 = getProperty(\"smartcloud.displayName2\");\n      userid2 = getProperty(\"smartcloud.userId2\");\n      email2 = getProperty(\"smartcloud.email2\");\n    }\n    Invite invite = createInvite(community, userid2);\n\n    addSnippetParam(\"CommunityService.communityUuid\", community.getCommunityUuid());\n    JavaScriptPreviewPage previewPage = executeSnippet(SNIPPET_ID);\n    List jsonList = previewPage.getJsonList();\n    Assert.assertFalse(\"Get all invites returned no invites\", jsonList.isEmpty());\n    assertInviteValid((JsonJavaObject) jsonList.get(0), invite);\n  }\n"}, {"dataset": "listGet", "exampleID": 5067, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 172, "focalAPIEnd": 185, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apache/openjpa/tree/master/openjpa-kernel/src/main/java/org/apache/openjpa/kernel/DetachManager.java", "rawCode": "  /** Throw all gathered exceptions. */\n  private void throwExceptions(List exceps) {\n    if (exceps == null) return;\n\n    if (exceps.size() == 1) throw (RuntimeException) exceps.get(0);\n    throw new UserException(_loc.get(\"nested-exceps\"))\n        .setNestedThrowables((Throwable[]) exceps.toArray(new Throwable[exceps.size()]));\n  }\n"}, {"dataset": "listGet", "exampleID": 5068, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 356, "focalAPIEnd": 377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getY(int)"], "useStart": [390], "useEnd": [403], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/petergodfrey/TradeSimulator/tree/master/jfreechart-1.0.14/source/org/jfree/data/xy/DefaultTableXYDataset.java", "rawCode": "  /**\n   * Returns the y-value for the specified series and item.\n   *\n   * @param series the series (zero-based index).\n   * @param index the index of the item of interest (zero-based).\n   * @return The y-value for the specified series and item (possibly <code>null</code>).\n   */\n  public Number getY(int series, int index) {\n    XYSeries s = (XYSeries) this.data.get(series);\n    return s.getY(index);\n  }\n"}, {"dataset": "listGet", "exampleID": 5069, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 115, "focalAPIEnd": 137, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/babble/babble/tree/master/src/main/ed/lang/python/ListWrapperSubList.java", "rawCode": "  public Object get(int index) {\n    if (index + _start >= _end) throw new IndexOutOfBoundsException();\n    return _l.get(index + _start);\n  }\n"}, {"dataset": "listGet", "exampleID": 5070, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 306, "focalAPIEnd": 327, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getX(int)"], "useStart": [340], "useEnd": [352], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/petergodfrey/TradeSimulator/tree/master/jfreechart-1.0.14/source/org/jfree/data/xy/DefaultTableXYDataset.java", "rawCode": "  /**\n   * Returns the x-value for the specified series and item.\n   *\n   * @param series the series (zero-based index).\n   * @param item the item (zero-based index).\n   * @return The x-value for the specified series and item.\n   */\n  public Number getX(int series, int item) {\n    XYSeries s = (XYSeries) this.data.get(series);\n    return s.getX(item);\n  }\n"}, {"dataset": "listGet", "exampleID": 5071, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 672, "guardExpressionEnd": 709, "guardBlockStart": 672, "guardBlockEnd": 1682, "focalAPI": "element = list.get(index)", "focalAPIStart": 761, "focalAPIEnd": 772, "followUpCheck": "elapsed > (WARN_TIME * (element.warn_count + 1))", "checkType": "IF", "followUpCheckExpressionStart": 831, "followUpCheckExpressionEnd": 878, "followUpCheckBlockStart": 831, "followUpCheckBlockEnd": 1674, "use": ["element.getWorkerName()", "element.getWorkerName()", "element.interrupt()"], "useStart": [984, 1207, 1504], "useEnd": [1001, 1224, 1517], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/CSEMike/OneSwarm/tree/master/az_src/src/org/gudy/azureus2/core3/util/ThreadPool.java", "rawCode": "  protected void checkTimeouts() {\n    synchronized (this) {\n      long diff = task_total - task_total_last;\n\n      task_average.addValue(diff);\n\n      task_total_last = task_total;\n\n      if (debug_thread_pool_log_on) {\n\n        System.out.println(\n            \"ThreadPool '\"\n                + getName()\n                + \"'/\"\n                + thread_name_index\n                + \": max=\"\n                + max_size\n                + \",sem=[\"\n                + thread_sem.getString()\n                + \"],busy=\"\n                + busy.size()\n                + \",queue=\"\n                + task_queue.size());\n      }\n\n      long now = SystemTime.getCurrentTime();\n\n      for (int i = 0; i < busy.size(); i++) {\n\n        threadPoolWorker x = (threadPoolWorker) busy.get(i);\n\n        long elapsed = now - x.run_start_time;\n\n        if (elapsed > (WARN_TIME * (x.warn_count + 1))) {\n\n          x.warn_count++;\n\n          if (LOG_WARNINGS) {\n\n            DebugLight.out(\n                x.getWorkerName() + \": running, elapsed = \" + elapsed + \", state = \" + x.state);\n          }\n\n          if (execution_limit > 0 && elapsed > execution_limit) {\n\n            if (LOG_WARNINGS) {\n\n              DebugLight.out(x.getWorkerName() + \": interrupting\");\n            }\n\n            AERunnable r = x.runnable;\n\n            if (r != null) {\n\n              try {\n                if (r instanceof ThreadPoolTask) {\n\n                  ((ThreadPoolTask) r).interruptTask();\n\n                } else {\n\n                  x.interrupt();\n                }\n              } catch (Throwable e) {\n\n                DebugLight.printStackTrace(e);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5072, "initialization": ["List list = getAvailableLangPacks()"], "initializationStart": [205], "initializationEnd": [228], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()", "list.toArray()"], "configurationStart": [247, 900], "configurationEnd": [272, 928], "guardCondition": "!(npacks==index)", "guardType": "IF {", "guardExpressionStart": 278, "guardExpressionEnd": 294, "guardBlockStart": 278, "guardBlockEnd": 359, "focalAPI": "element = list.get(index)", "focalAPIStart": 1352, "focalAPIEnd": 1377, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["setAttribute(String,element)"], "useStart": [1428], "useEnd": [1491], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.3.3/src/lib/com/izforge/izpack/installer/GUIInstaller.java", "rawCode": "  /**\n   * Loads the suitable langpack.\n   *\n   * @throws Exception Description of the Exception\n   */\n  private void loadLangPack() throws Exception {\n    // Initialisations\n    List availableLangPacks = getAvailableLangPacks();\n    int npacks = availableLangPacks.size();\n    if (npacks == 0) {\n      throw new Exception(\"no language pack available\");\n    }\n    String selectedPack;\n\n    // Dummy Frame\n    JFrame frame = new JFrame();\n    frame.setIconImage(\n        new ImageIcon(this.getClass().getResource(\"/img/JFrameIcon.png\")).getImage());\n\n    Dimension frameSize = frame.getSize();\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    frame.setLocation(\n        (screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2 - 10);\n\n    // We get the langpack name\n    if (npacks != 1) {\n      LanguageDialog picker = new LanguageDialog(frame, availableLangPacks.toArray());\n      picker.setSelection(Locale.getDefault().getISO3Language().toLowerCase());\n      picker.setModal(true);\n      picker.toFront();\n      // frame.setVisible(true);\n      frame.setVisible(false);\n      picker.setVisible(true);\n\n      selectedPack = (String) picker.getSelection();\n      if (selectedPack == null) {\n        throw new Exception(\"installation canceled\");\n      }\n    } else {\n      selectedPack = (String) availableLangPacks.get(0);\n    }\n\n    // We add an xml data information\n    this.installdata.xmlData.setAttribute(\"langpack\", selectedPack);\n\n    // We load the langpack\n    installdata.localeISO3 = selectedPack;\n    installdata.setVariable(ScriptParser.ISO3_LANG, installdata.localeISO3);\n    InputStream in = getClass().getResourceAsStream(\"/langpacks/\" + selectedPack + \".xml\");\n    this.installdata.langpack = new LocaleDatabase(in);\n  }\n"}, {"dataset": "listGet", "exampleID": 5073, "initialization": ["List list = Resource.getContents()"], "initializationStart": [237], "initializationEnd": [259], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 292, "guardExpressionEnd": 334, "guardBlockStart": 292, "guardBlockEnd": 427, "focalAPI": "element = list.get(index)", "focalAPIStart": 367, "focalAPIEnd": 383, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["resolveProxies(element)"], "useStart": [393], "useEnd": [418], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/robstryker/webtools.common/tree/master/plugins/org.eclipse.jem.util/jemutil/org/eclipse/jem/util/emf/workbench/WorkbenchResourceHelperBase.java", "rawCode": "  /**\n   * Force all of the proxies with <code>resource</code> to be resolved.\n   *\n   * @param resource\n   * @since 1.0.0\n   */\n  public static void resolveProxies(Resource resource) {\n    if (resource != null) {\n      List topLevels = resource.getContents();\n      EObject mofObject;\n      for (int i = 0; i < topLevels.size(); i++) {\n        mofObject = (EObject) topLevels.get(i);\n        resolveProxies(mofObject);\n      }\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5074, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<n", "guardType": "LOOP {", "guardExpressionStart": 712, "guardExpressionEnd": 739, "guardBlockStart": 712, "guardBlockEnd": 1024, "focalAPI": "element = list.get(index)", "focalAPIStart": 778, "focalAPIEnd": 790, "followUpCheck": "isTwoStringArraysEqual(element,sArray2)", "checkType": "IF", "followUpCheckExpressionStart": 892, "followUpCheckExpressionEnd": 937, "followUpCheckBlockStart": 892, "followUpCheckBlockEnd": 988, "use": ["list.get(int)"], "useStart": [870], "useEnd": [882], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/webtools.javaee/tree/master/plugins/org.eclipse.jst.j2ee.web/web/org/eclipse/jst/j2ee/internal/web/operations/NewWebClassDataModelProvider.java", "rawCode": "  /**\n   * This method is intended for internal use only. It provides a simple algorithm for detecting if\n   * there are duplicate entries in a list. It will accept a null parameter. It will not return\n   * null.\n   *\n   * @see NewWebClassDataModelProvider#validateInitParamList(List)\n   * @see NewWebClassDataModelProvider#validateURLMappingList(List)\n   * @param input\n   * @return boolean are there dups in the list?\n   */\n  protected boolean hasDuplicatesInStringArrayList(List input) {\n    // If list is null or empty return false\n    if (input == null) return false;\n    int n = input.size();\n    boolean dup = false;\n    // nested for loops to check each element to see if other elements are the same\n    for (int i = 0; i < n; i++) {\n      String[] sArray1 = (String[]) input.get(i);\n      for (int j = i + 1; j < n; j++) {\n        String[] sArray2 = (String[]) input.get(j);\n        if (isTwoStringArraysEqual(sArray1, sArray2)) {\n          dup = true;\n          break;\n        }\n      }\n      if (dup) break;\n    }\n    // Return boolean status for duplicates\n    return dup;\n  }\n"}, {"dataset": "listGet", "exampleID": 5075, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 83, "focalAPIEnd": 102, "followUpCheck": "element.id != null && !element.id.equals(\"\")", "checkType": "IF", "followUpCheckExpressionStart": 234, "followUpCheckExpressionEnd": 297, "followUpCheckBlockStart": 234, "followUpCheckBlockEnd": 349, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/tags/4.2.0/src/lib/com/izforge/izpack/panels/PacksModel.java", "rawCode": "  public Object getValueAt(int rowIndex, int columnIndex) {\n    Pack pack = (Pack) packs.get(rowIndex);\n    switch (columnIndex) {\n      case 0:\n        return checkValues[rowIndex];\n\n      case 1:\n        Object name = null;\n        if (langpack != null && pack.id != null && !pack.id.equals(\"\")) {\n          name = langpack.get(pack.id);\n        }\n        if (name == null || \"\".equals(name)) {\n          name = pack.name;\n        }\n        return name;\n\n      case 2:\n        return Pack.toByteUnitsString(pack.nbytes);\n\n      default:\n        return null;\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5076, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [111], "configurationEnd": [126], "guardCondition": "index<textLen", "guardType": "LOOP {", "guardExpressionStart": 182, "guardExpressionEnd": 215, "guardBlockStart": 182, "guardBlockEnd": 522, "focalAPI": "element = list.get(index)", "focalAPIStart": 246, "focalAPIEnd": 261, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/srnsw/xena/tree/master/plugins/image/ext/src/batik-1.7/sources/org/apache/batik/ext/awt/image/codec/png/PNGRed.java", "rawCode": "  private void parse_IEND_chunk(PNGChunk chunk) throws Exception {\n    // Store text strings\n    int textLen = textKeys.size();\n    String[] textArray = new String[2 * textLen];\n    for (int i = 0; i < textLen; i++) {\n      String key = (String) textKeys.get(i);\n      String val = (String) textStrings.get(i);\n      textArray[2 * i] = key;\n      textArray[2 * i + 1] = val;\n      if (emitProperties) {\n        String uniqueKey = \"text_\" + i + ':' + key;\n        properties.put(uniqueKey.toLowerCase(), val);\n      }\n    }\n    if (encodeParam != null) {\n      encodeParam.setText(textArray);\n    }\n\n    // Store compressed text strings\n    int ztextLen = ztextKeys.size();\n    String[] ztextArray = new String[2 * ztextLen];\n    for (int i = 0; i < ztextLen; i++) {\n      String key = (String) ztextKeys.get(i);\n      String val = (String) ztextStrings.get(i);\n      ztextArray[2 * i] = key;\n      ztextArray[2 * i + 1] = val;\n      if (emitProperties) {\n        String uniqueKey = \"ztext_\" + i + ':' + key;\n        properties.put(uniqueKey.toLowerCase(), val);\n      }\n    }\n    if (encodeParam != null) {\n      encodeParam.setCompressedText(ztextArray);\n    }\n\n    // Parse prior IDAT chunks\n    InputStream seqStream = new SequenceInputStream(Collections.enumeration(streamVec));\n    InputStream infStream = new InflaterInputStream(seqStream, new Inflater());\n    dataStream = new DataInputStream(infStream);\n\n    // Create an empty WritableRaster\n    int depth = bitDepth;\n    if ((colorType == PNG_COLOR_GRAY) && (bitDepth < 8) && output8BitGray) {\n      depth = 8;\n    }\n    if ((colorType == PNG_COLOR_PALETTE) && expandPalette) {\n      depth = 8;\n    }\n    int width = bounds.width;\n    int height = bounds.height;\n\n    int bytesPerRow = (outputBands * width * depth + 7) / 8;\n    int scanlineStride = (depth == 16) ? (bytesPerRow / 2) : bytesPerRow;\n\n    theTile = createRaster(width, height, outputBands, scanlineStride, depth);\n\n    if (performGammaCorrection && (gammaLut == null)) {\n      initGammaLut(bitDepth);\n    }\n    if ((postProcess == POST_GRAY_LUT)\n        || (postProcess == POST_GRAY_LUT_ADD_TRANS)\n        || (postProcess == POST_GRAY_LUT_ADD_TRANS_EXP)) {\n      initGrayLut(bitDepth);\n    }\n\n    decodeImage(interlaceMethod == 1);\n    SampleModel sm = theTile.getSampleModel();\n    ColorModel cm;\n\n    if ((colorType == PNG_COLOR_PALETTE) && !expandPalette) {\n      if (outputHasAlphaPalette) {\n        cm =\n            new IndexColorModel(\n                bitDepth, paletteEntries, redPalette, greenPalette, bluePalette, alphaPalette);\n      } else {\n        cm = new IndexColorModel(bitDepth, paletteEntries, redPalette, greenPalette, bluePalette);\n      }\n    } else if ((colorType == PNG_COLOR_GRAY) && (bitDepth < 8) && !output8BitGray) {\n      byte[] palette = expandBits[bitDepth];\n      cm = new IndexColorModel(bitDepth, palette.length, palette, palette, palette);\n    } else {\n      cm = createComponentColorModel(sm);\n    }\n\n    init((CachableRed) null, bounds, cm, sm, 0, 0, properties);\n  }\n"}, {"dataset": "listGet", "exampleID": 5077, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 86, "guardExpressionEnd": 125, "guardBlockStart": 86, "guardBlockEnd": 349, "focalAPI": "element = list.get(index)", "focalAPIStart": 151, "focalAPIEnd": 164, "followUpCheck": "element instanceof IResource", "checkType": "IF", "followUpCheckExpressionStart": 172, "followUpCheckExpressionEnd": 205, "followUpCheckBlockStart": 172, "followUpCheckBlockEnd": 343, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/core refactoring/org/eclipse/dltk/internal/corext/refactoring/reorg/MoveModifications.java", "rawCode": "  @Override\n  public void buildDelta(IResourceChangeDescriptionFactory builder) {\n    for (int i = 0; i < fMoves.size(); i++) {\n      Object element = fMoves.get(i);\n      if (element instanceof IResource) {\n        ResourceModifications.buildMoveDelta(\n            builder, (IResource) element, (MoveArguments) fMoveArguments.get(i));\n      }\n    }\n    getResourceModifications().buildDelta(builder);\n  }\n"}, {"dataset": "listGet", "exampleID": 5078, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 410, "focalAPIEnd": 420, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["readResource(element)"], "useStart": [388], "useEnd": [421], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/svn2github/sakai-kernel/tree/master/tags/kernel-1.1.3/kernel-util/src/main/java/org/sakaiproject/util/BaseDbSingleStorage.java", "rawCode": "  public Entity getResource(String id) {\n    Entity entry = null;\n\n    // get the user from the db\n    String sql = singleStorageSql.getXmlSql(m_resourceTableIdField, m_resourceTableName);\n\n    Object fields[] = new Object[1];\n    fields[0] = caseId(id);\n    List xml = m_sql.dbRead(sql, fields, null);\n    if (!xml.isEmpty()) {\n      // create the Resource from the db xml\n      entry = readResource((String) xml.get(0));\n    }\n\n    return entry;\n  }\n"}, {"dataset": "listGet", "exampleID": 5079, "initialization": ["List list = new ArrayList()"], "initializationStart": [311], "initializationEnd": [326], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<exp.length", "guardType": "LOOP {", "guardExpressionStart": 635, "guardExpressionEnd": 671, "guardBlockStart": 635, "guardBlockEnd": 720, "focalAPI": "element = list.get(index)", "focalAPIStart": 701, "focalAPIEnd": 712, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(*,element)"], "useStart": [680], "useEnd": [713], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/mvel/mvel/tree/master/src/test/java/org/mvel2/tests/core/TypesAndInferenceTests.java", "rawCode": "  public void testForLoopTypeCoercion() {\n    ParserContext pCtx = ParserContext.create();\n    pCtx.setStrongTyping(true);\n    pCtx.addInput(\"$type\", String.class);\n    pCtx.addInput(\"l\", List.class);\n\n    Map<String, Object> vars = new HashMap<String, Object>();\n    vars.put(\"$type\", \"pc!!\");\n    List list = new ArrayList();\n    vars.put(\"l\", list);\n    ExecutableStatement stmt =\n        (ExecutableStatement)\n            MVEL.compileExpression(\"for (byte bt:$type.getBytes()) {l.add( bt);}\", pCtx);\n    MVEL.executeExpression(stmt, null, vars);\n\n    byte[] exp = \"pc!!\".getBytes();\n    // byte[] res = new byte[list.size()];\n\n    for (int i = 0; i < exp.length; i++) {\n      assertEquals(exp[i], list.get(i));\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5080, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 76, "focalAPIEnd": 112, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/cmadsen/Valkyrie-RCP/tree/master/valkyrie-rcp-core/src/test/java/org/valkyriercp/test/TestPropertyChangeListener.java", "rawCode": "  public PropertyChangeEvent lastEvent() {\n    return (PropertyChangeEvent) eventsRecevied.get(eventCount() - 1);\n  }\n"}, {"dataset": "listGet", "exampleID": 5081, "initialization": ["List list = createSuggestions(String,ArrayList)", "List list = HippieCompletionEngine.makeUnique(List)", "List list = createSuggestions(String,ArrayList)", "List list = createSuggestions(String,ArrayList)", "List list = HippieCompletionEngine.makeUnique(List)"], "initializationStart": [147, 272, 390, 517, 641], "initializationEnd": [180, 298, 425, 549, 667], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()", "list.size()", "list.size()", "list.size()", "list.size()"], "configurationStart": [243, 360, 487, 612, 730], "configurationEnd": [256, 373, 500, 625, 743], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 797, "focalAPIEnd": 810, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["assertEquals(String,String,element)", "list.get(int)", "list.get(int)", "list.get(int)", "list.get(int)", "list.get(int)", "list.get(int)", "list.get(int)", "list.get(int)", "list.get(int)"], "useStart": [750, 862, 928, 995, 1063, 1129, 1197, 1269, 1336, 1406], "useEnd": [811, 875, 941, 1008, 1076, 1142, 1210, 1282, 1349, 1419], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/eclipse.platform.text/tree/master/org.eclipse.ui.workbench.texteditor.tests/src/org/eclipse/ui/workbench/texteditor/tests/HippieCompletionTest.java", "rawCode": "  @Test\n  public void testSearch() {\n    ArrayList<IDocument> docsList = new ArrayList<>(Arrays.asList(this.documents));\n    List<String> result = createSuggestions(\"te\", docsList);\n    assertEquals(\"Number of completions does not match\", 15, result.size());\n    result = fEngine.makeUnique(result);\n    assertEquals(\"Number of completions does not match\", 7, result.size());\n\n    result = createSuggestions(\"Plug\", docsList);\n    assertEquals(\"Number of completions does not match\", 2, result.size());\n\n    result = createSuggestions(\"p\", docsList);\n    assertEquals(\"Number of completions does not match\", 23, result.size());\n    result = fEngine.makeUnique(result);\n    assertEquals(\"Number of completions does not match\", 10, result.size());\n    assertEquals(\"Incorrect completion\", \"ackage\", result.get(0));\n    assertEquals(\"Incorrect completion\", \"rint\", result.get(1));\n    assertEquals(\"Incorrect completion\", \"ublic\", result.get(2));\n    assertEquals(\"Incorrect completion\", \"rintln\", result.get(3));\n    assertEquals(\"Incorrect completion\", \"rinting\", result.get(4));\n    assertEquals(\"Incorrect completion\", \"lugin\", result.get(5));\n    assertEquals(\"Incorrect completion\", \"rovider\", result.get(6));\n    assertEquals(\"Incorrect completion\", \"roviderName\", result.get(7));\n    assertEquals(\"Incorrect completion\", \"rogram\", result.get(8));\n    assertEquals(\"Incorrect completion\", \"roperties\", result.get(9));\n  }\n"}, {"dataset": "listGet", "exampleID": 5082, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size() && list!=null&&list.size()>0", "guardType": "IF {", "guardExpressionStart": 86, "guardExpressionEnd": 146, "guardBlockStart": 86, "guardBlockEnd": 402, "focalAPI": "element = list.get(index)", "focalAPIStart": 237, "focalAPIEnd": 251, "followUpCheck": "element.getAccessionNumber().equals(sample.getAccessionNumber())", "checkType": "IF", "followUpCheckExpressionStart": 261, "followUpCheckExpressionEnd": 335, "followUpCheckBlockStart": 261, "followUpCheckBlockEnd": 388, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Bhamni/OpenElis/tree/master/openelis/src/us/mn/state/health/lims/qaevent/action/QaEventsEntryPositionToRecordAction.java", "rawCode": "  protected int getPosition(List samples, Sample sample) {\n    int position = -1;\n    if (samples != null && samples.size() > 0 && sample != null) {\n      for (int i = 0; i < samples.size(); i++) {\n        Sample sampleInList = (Sample) samples.get(i);\n        if (sampleInList.getAccessionNumber().equals(sample.getAccessionNumber())) {\n          position = i;\n          break;\n        }\n      }\n    }\n\n    return position;\n  }\n"}, {"dataset": "listGet", "exampleID": 5083, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<filterEvalHelperList.size()", "guardType": "LOOP {", "guardExpressionStart": 59, "guardExpressionEnd": 112, "guardBlockStart": 59, "guardBlockEnd": 186, "focalAPI": "element = list.get(index)", "focalAPIStart": 151, "focalAPIEnd": 178, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["addJSFilter(element)"], "useStart": [121], "useEnd": [179], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/YongJiang/org.eclipse.birt.data/tree/master/plugins/org.eclipse.birt.data/src/org/eclipse/birt/data/engine/olap/data/api/CubeQueryExecutorHelper.java", "rawCode": "  public void addJSFilter(List filterEvalHelperList) {\n    for (int i = 0; i < filterEvalHelperList.size(); i++) {\n      addJSFilter((IJSFilterHelper) filterEvalHelperList.get(i));\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5084, "initialization": ["List list = CheckedListDialogField.getElements()"], "initializationStart": [611], "initializationEnd": [641], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 649, "guardExpressionEnd": 690, "guardBlockStart": 649, "guardBlockEnd": 902, "focalAPI": "element = list.get(index)", "focalAPIStart": 752, "focalAPIEnd": 767, "followUpCheck": "element.getName().equals(selected)", "checkType": "IF", "followUpCheckExpressionStart": 777, "followUpCheckExpressionEnd": 813, "followUpCheckBlockStart": 777, "followUpCheckBlockEnd": 894, "use": ["CheckedListDialogField.setChecked(element,boolean)"], "useStart": [826], "useEnd": [865], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eclipse/dltk.core/tree/master/core/plugins/org.eclipse.dltk.ui/src/org/eclipse/dltk/internal/ui/wizards/buildpath/UserLibraryWizardPage.java", "rawCode": "  @Override\n  public void setSelection(IBuildpathEntry containerEntry) {\n    fIsExported = containerEntry != null && containerEntry.isExported();\n\n    updateDescription(containerEntry);\n    fIsEditMode = (containerEntry != null);\n    if (containerEntry != null) {\n      fUsedPaths.remove(containerEntry.getPath());\n    }\n\n    String selected = null;\n    if (containerEntry != null && containerEntry.getPath().segmentCount() == 2) {\n      selected = containerEntry.getPath().segment(1);\n    } else {\n      // get from dialog store\n    }\n    updateLibraryList();\n    if (selected != null) {\n      List elements = fLibrarySelector.getElements();\n      for (int i = 0; i < elements.size(); i++) {\n        BPUserLibraryElement curr = (BPUserLibraryElement) elements.get(i);\n        if (curr.getName().equals(selected)) {\n          fLibrarySelector.setChecked(curr, true);\n          return;\n        }\n      }\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5085, "initialization": ["List list = new ArrayList()"], "initializationStart": [173], "initializationEnd": [188], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(State)"], "configurationStart": [344], "configurationEnd": [358], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 927, "focalAPIEnd": 944, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["List.add(element)", "new Transition(State,Object,element)"], "useStart": [1131, 1326], "useEnd": [1143, 1355], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/phillord/hermit-maven/tree/master/HermiT/src/main/java/rationals/RandomAutomaton.java", "rawCode": "  /** */\n  private void makeDFA() {\n    /* create initial state and other states */\n    State init = addState(true, false);\n    List todo = new ArrayList();\n    List done = new ArrayList();\n    int fs = fstate;\n    int ns = nstate;\n    todo.add(init);\n    while (ns > 0) {\n      /* pop state */\n      State from = (State) todo.remove(0);\n      done.add(from);\n      /* list for alph */\n      List l = new ArrayList(Arrays.asList(alph));\n      int c = alph.length * nstate;\n      /* number of transitions from this state to other state */\n      int nt = (int) (deviation * rand.nextGaussian() + density);\n      for (int i = 0; i < nt && !l.isEmpty(); i++) {\n        /*\n         * select a state : this an already visited state with\n         * probability (done.size() / nstate)\n         */\n        State to = null;\n        double r = rand.nextDouble() * (nstate - 1);\n        if ((int) r < done.size()) {\n          to = (State) done.get((int) r);\n        } else {\n          /*\n           * state is final with probability fs / ns\n           */\n          r = rand.nextDouble() * ns;\n          to = addState(false, r < fs);\n          todo.add(to);\n          ns--;\n          if (r < fs) fs--;\n        }\n        Object lbl = l.remove(rand.nextInt(l.size()));\n        try {\n          /* create transition */\n          addTransition(new Transition(from, lbl, to));\n        } catch (NoSuchStateException e1) {\n        }\n      }\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5086, "initialization": ["List list = PackInfo.getDependencies()"], "initializationStart": [105], "initializationEnd": [124], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list!=null && index<list.size()", "guardType": "IF {", "guardExpressionStart": 130, "guardExpressionEnd": 147, "guardBlockStart": 130, "guardBlockEnd": 691, "focalAPI": "element = list.get(index)", "focalAPIStart": 227, "focalAPIEnd": 238, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["Map.get(element)"], "useStart": [272], "useEnd": [287], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/jponge/izpack-full-svn-history-copy/tree/master/izpack-src/branches/3.10/src/lib/com/izforge/izpack/compiler/Compiler.java", "rawCode": "  private int dfsVisit(PackInfo u, Map names, Map edges) {\n    u.colour = PackInfo.GREY;\n    List deps = u.getDependencies();\n    if (deps != null) {\n      for (int i = 0; i < deps.size(); i++) {\n        String name = (String) deps.get(i);\n        PackInfo v = (PackInfo) names.get(name);\n        if (v == null) {\n          System.out.println(\"Failed to find dependency: \" + name);\n          return -1;\n        }\n        Edge edge = new Edge(u, v);\n        if (edges.get(edge) == null) edges.put(edge, new Integer(v.colour));\n\n        if (v.colour == PackInfo.WHITE) {\n\n          final int result = dfsVisit(v, names, edges);\n          if (result != 0) return result;\n        }\n      }\n    }\n    u.colour = PackInfo.BLACK;\n    return 0;\n  }\n"}, {"dataset": "listGet", "exampleID": 5087, "initialization": ["List list = getCacheGlobalpar(Globalpar)"], "initializationStart": [1263], "initializationEnd": [1304], "hasTryCatch": 1, "exceptionType": "Exception", "exceptionHandlingCall": ["setResult(String)", "printStackTrace()"], "tryExpressionStart": 427, "tryExpressionEnd": 431, "tryBlockStart": 427, "tryBlockEnd": 3355, "catchExpressionStart": 3276, "catchExpressionEnd": 3296, "catchBlockStart": 3276, "catchBlockEnd": 3355, "exceptionHandlingCallStart": [3304, 3329], "exceptionHandlingCallEnd": [3321, 3348], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list!=null&&list.size()>index", "guardType": "IF {", "guardExpressionStart": 1312, "guardExpressionEnd": 1348, "guardBlockStart": 1312, "guardBlockEnd": 1421, "focalAPI": "element = list.get(index)", "focalAPIStart": 1380, "focalAPIEnd": 1391, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/firefoxmmx2/techsupport/tree/master/src/com/aisino2/publicsystem/action/CyryxxAction.java", "rawCode": "  /** 采集点 */\n  public String querylistJc() throws Exception {\n    HttpServletRequest request = ServletActionContext.getRequest();\n    HttpSession session = request.getSession();\n    User user = (User) session.getAttribute(Constants.userKey);\n    String lrdwbm = user.getDepartment().getDepartcode();\n    if (user != null && user.getSsdwbm() != null && !\"\".equals(user.getSsdwbm())) {\n      lrdwbm = user.getSsdwbm();\n    }\n    try {\n      Qyryxx setQyryxx = new Qyryxx();\n      setQyryxx = (Qyryxx) this.setClass(setQyryxx, null);\n      Map map = new HashMap();\n      map = addMap(setQyryxx);\n      map.put(\"hylbdm\", setQyryxx.getHylbdm());\n      map.put(\"qymc\", setQyryxx.getQymc());\n      map.put(\"cylbdm\", StringUtil.trim0(setQyryxx.getCylbdm()));\n      map.put(\"lrsjf\", setQyryxx.getLrsjf());\n      map.put(\"lrsjt\", setQyryxx.getLrsjt());\n      map.put(\"lrdwbm\", lrdwbm);\n      Page page = cyryxxtjService.getListForPage(map, pagesize, pagerow, sort, dir);\n      CyryztFanYi(page.getData());\n      totalpage = page.getTotalPages();\n      totalrows = page.getTotalRows();\n      List lQyryxx = page.getData();\n\n      String jdzkd = \"\"; // 从缓存中得到制卡点(全局参数)\n      Globalpar globalpar = new Globalpar();\n      globalpar.setGlobalparcode(\"jdzkd\");\n      List list = CacheManager.getCacheGlobalpar(globalpar);\n      if (list != null && list.size() > 0) {\n        jdzkd = ((Globalpar) list.get(0)).getGlobalparvalue();\n      }\n      for (Iterator iter = lQyryxx.iterator(); iter.hasNext(); ) {\n        Qyryxx oneCyryxx = (Qyryxx) iter.next();\n        String slid = String.valueOf(oneCyryxx.getIckslid());\n        String sjscbz = oneCyryxx.getSjscbz();\n        String zkztbs = oneCyryxx.getZkztbs();\n        String cyryzt = oneCyryxx.getZt();\n        if (slid == null) slid = \"\";\n        if (sjscbz == null) sjscbz = \"\";\n        if (zkztbs == null) zkztbs = \"\";\n        if (cyryzt == null) cyryzt = \"\";\n        String xm =\n            oneCyryxx.getXm()\n                + \"<input type='hidden' id='qyid' value='\"\n                + oneCyryxx.getQyid()\n                + \"'>\";\n        oneCyryxx.setXm(xm);\n        oneCyryxx.setCyrybh(\n            \"<input type='hidden' name='cs\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + oneCyryxx.getQyid()\n                + \"' />\"\n                + \"<input type='hidden' name='sl\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + slid\n                + \"' />\"\n                + \"<input type='hidden' name='zkzt\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + zkztbs\n                + \"' />\"\n                + \"<input type='hidden' name='ryzt\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + cyryzt\n                + \"' />\"\n                + \"<input type='hidden' name='wbzk\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + sjscbz\n                + \"' />\"\n                + \"<input type='hidden' name='zkd\"\n                + oneCyryxx.getRyid()\n                + \"' value='\"\n                + jdzkd\n                + \"' />\"\n                + oneCyryxx.getCyrybh());\n        setCyryxxDict_itemList(oneCyryxx);\n      }\n\n      setTabledataJc(lQyryxx);\n    } catch (Exception e) {\n      setResult(\"查询失败\");\n      e.printStackTrace();\n    }\n    return \"success\";\n  }\n"}, {"dataset": "listGet", "exampleID": 5088, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 659, "focalAPIEnd": 686, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/apeeters/JFreeChart/tree/master/source/org/jfree/data/xy/DefaultIntervalXYDataset.java", "rawCode": "  /**\n   * Returns the ending y-value for an item within a series.\n   *\n   * @param series the series index (in the range <code>0</code> to <code>getSeriesCount() - 1\n   *     </code>).\n   * @param item the item index (in the range <code>0</code> to <code>getItemCount(series)</code>).\n   * @return The ending y-value.\n   * @throws ArrayIndexOutOfBoundsException if <code>series</code> is not within the specified\n   *     range.\n   * @throws ArrayIndexOutOfBoundsException if <code>item</code> is not within the specified range.\n   * @see #getEndY(int, int)\n   */\n  public double getEndYValue(int series, int item) {\n    double[][] seriesData = (double[][]) this.seriesList.get(series);\n    return seriesData[5][item];\n  }\n"}, {"dataset": "listGet", "exampleID": 5089, "initialization": ["List list = getInstance()"], "initializationStart": [139], "initializationEnd": [163], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "!(list.size()==index) && !(list.size()!=1)", "guardType": "IF {", "guardExpressionStart": 266, "guardExpressionEnd": 289, "guardBlockStart": 266, "guardBlockEnd": 316, "focalAPI": "element = list.get(index)", "focalAPIStart": 448, "focalAPIEnd": 461, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getStringValue()"], "useStart": [440], "useEnd": [479], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/betterFORM/betterFORM/tree/master/core/src/test/java/de/betterform/xml/xforms/BetterFormTestCase.java", "rawCode": "  protected String evaluateInDefaultContextAsString(final String xpathExpression)\n      throws XFormsException {\n    List result =\n        XPathCache.getInstance()\n            .evaluate(defaultContext, xpathExpression, kPREFIX_MAPPING, defaultFunctionContext);\n\n    if (result.size() == 0) {\n      return null;\n    }\n\n    if (result.size() != 1) {\n      throw new XFormsException(\"Could not convert resultset to string\");\n    }\n\n    return ((Item) result.get(0)).getStringValue();\n  }\n"}, {"dataset": "listGet", "exampleID": 5090, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 1, "exceptionType": "IndexOutOfBoundsException", "exceptionHandlingCall": ["new QuestionLocalized()", "QuestionLocalized.setQuestionString(String)", "QuestionLocalized.setLanguageCode(String)", "getStringLengthWithoutHtml(String)", "setQuestionLength(*)"], "tryExpressionStart": 942, "tryExpressionEnd": 946, "tryBlockStart": 942, "tryBlockEnd": 2356, "catchExpressionStart": 1892, "catchExpressionEnd": 1928, "catchBlockStart": 1892, "catchBlockEnd": 2321, "exceptionHandlingCallStart": [2108, 2139, 2189, 2280, 2244], "exceptionHandlingCallEnd": [2131, 2181, 2236, 2313, 2314], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 1226, "guardExpressionEnd": 1263, "guardBlockStart": 1226, "guardBlockEnd": 1419, "focalAPI": "element = list.get(index)", "focalAPIStart": 1370, "focalAPIEnd": 1381, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getQuestionLocalizedId()"], "useStart": [1349], "useEnd": [1407], "hasFinally": 1, "cleanUpCall": ["closeEM(EntityManager)"], "finallyExpressionStart": 2322, "finallyExpressionEnd": 2330, "finallyBlockStart": 2322, "finallyBlockEnd": 2356, "cleanUpCallStart": [2338], "cleanUpCallEnd": [2349], "url": "https://github.com/TMSWhite/Dialogix2007/tree/master/Dialogix_J2EE/DialogixEntities/src/java/org/dialogix/session/InstrumentLoaderFacade.java", "rawCode": "  /**\n   * Find index for this QuestionLocalized, creating new ones as needed\n   *\n   * @param token\n   * @param languageCode\n   * @return valid QuestionLocalized, even if blank; creating new objects as needed\n   */\n  public QuestionLocalized parseQuestionLocalized(String token, String languageCode)\n      throws InstrumentLoadException {\n    lastQuestionWasNew = false;\n    if (token == null || token.trim().length() == 0) {\n      // logger.fine(\"QuestionLocalized is blank\");\n      token = \"\"; // was return null;\n    }\n    String key = languageCode + token;\n    /* First check whether it exists to avoid DB query */\n    if (QuestionLocalizedHash.containsKey(key)) {\n      return QuestionLocalizedHash.get(key);\n    }\n\n    String q =\n        \"SELECT v FROM QuestionLocalized v WHERE v.questionString = :questionString and v.languageCode = :languageCode\";\n    EntityManager em = getEM();\n    QuestionLocalized questionLocalized = null;\n    try {\n      Query query = em.createQuery(q);\n      query.setParameter(\"questionString\", token);\n      query.setParameter(\"languageCode\", languageCode);\n      List list = query.getResultList();\n      if (list.size() > 1) {\n        StringBuffer sb = new StringBuffer(\" keys(\");\n        for (int i = 0; i < list.size(); ++i) {\n          if (i > 0) {\n            sb.append(\",\");\n          }\n          sb.append(((QuestionLocalized) list.get(i)).getQuestionLocalizedId());\n        }\n        sb.append(\")\");\n        throw new InstrumentLoadException(\n            \"Non-Unique Results for QuestionLocalized (\"\n                + list.size()\n                + \"): \"\n                + key\n                + sb.toString(),\n            Level.SEVERE,\n            list.get(0));\n      }\n      questionLocalized = (QuestionLocalized) list.get(0);\n      // if (logger.isLoggable(Level.FINE)) {\n      // logger.fine(\"Found QuestionLocalized: \" + key);\n      // }\n    } catch (IndexOutOfBoundsException e) {\n      // if (logger.isLoggable(Level.FINE)) {\n      // logger.fine(\"Adding New QuestionLocalized: \" + key);\n      // }\n      lastQuestionWasNew = true;\n      questionLocalized = new QuestionLocalized();\n      questionLocalized.setQuestionString(token);\n      questionLocalized.setLanguageCode(languageCode);\n      questionLocalized.setQuestionLength(getStringLengthWithoutHtml(token));\n    } finally {\n      closeEM(em);\n    }\n    QuestionLocalizedHash.put(key, questionLocalized);\n    return questionLocalized;\n  }\n"}, {"dataset": "listGet", "exampleID": 5091, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 277, "focalAPIEnd": 293, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.booleanValue()"], "useStart": [277], "useEnd": [308], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/Starlink/starjava/tree/master/topcat/src/main/uk/ac/starlink/topcat/ColumnList.java", "rawCode": "  /**\n   * Indicates whether the column at a given index is currently active (present in the table column\n   * model).\n   *\n   * @param jcol list index of the column\n   * @return true iff column at <tt>jcol</tt> is active\n   */\n  public boolean isActive(int jcol) {\n    return active.get(jcol).booleanValue();\n  }\n"}, {"dataset": "listGet", "exampleID": 5092, "initialization": ["List list = getFiles()"], "initializationStart": [154], "initializationEnd": [164], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 170, "guardExpressionEnd": 211, "guardBlockStart": 170, "guardBlockEnd": 336, "focalAPI": "element = list.get(index)", "focalAPIStart": 240, "focalAPIEnd": 255, "followUpCheck": "element.isEJBJarFile()", "checkType": "IF", "followUpCheckExpressionStart": 263, "followUpCheckExpressionEnd": 288, "followUpCheckBlockStart": 263, "followUpCheckBlockEnd": 330, "use": ["List.add(element)"], "useStart": [299], "useEnd": [321], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/dgiormov/javaee.wtp/tree/master/plugins/org.eclipse.jst.j2ee.core/commonArchive/org/eclipse/jst/j2ee/commonarchivecore/internal/impl/EARFileImpl.java", "rawCode": "  /** @see com.ibm.etools.commonarchive.EARFile */\n  public java.util.List getEJBJarFiles() {\n    List ejbJarFiles = new ArrayList();\n    List fileList = getFiles();\n    for (int i = 0; i < fileList.size(); i++) {\n      File aFile = (File) fileList.get(i);\n      if (aFile.isEJBJarFile()) {\n        ejbJarFiles.add(aFile);\n      }\n    }\n    return ejbJarFiles;\n  }\n"}, {"dataset": "listGet", "exampleID": 5093, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 417, "focalAPIEnd": 449, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/petergodfrey/TradeSimulator/tree/master/jfreechart-1.0.14/source/org/jfree/data/xy/MatrixSeriesCollection.java", "rawCode": "  /**\n   * Returns the series having the specified index.\n   *\n   * @param seriesIndex zero-based series index.\n   * @return The series.\n   * @throws IllegalArgumentException\n   */\n  public MatrixSeries getSeries(int seriesIndex) {\n    if ((seriesIndex < 0) || (seriesIndex > getSeriesCount())) {\n      throw new IllegalArgumentException(\"Index outside valid range.\");\n    }\n\n    MatrixSeries series = (MatrixSeries) this.seriesList.get(seriesIndex);\n\n    return series;\n  }\n"}, {"dataset": "listGet", "exampleID": 5094, "initialization": ["List list = new ArrayList()"], "initializationStart": [76], "initializationEnd": [91], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.add(String)"], "configurationStart": [191], "configurationEnd": [228], "guardCondition": "list.size()==1", "guardType": "IF {", "guardExpressionStart": 240, "guardExpressionEnd": 271, "guardBlockStart": 240, "guardBlockEnd": 525, "focalAPI": "element = list.get(index)", "focalAPIStart": 300, "focalAPIEnd": 321, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["new ListExpression(list)"], "useStart": [374], "useEnd": [408], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/zaluum/groovy-eclipse/tree/master/base/org.codehaus.groovy16/src/org/codehaus/groovy/antlr/AntlrParserPlugin.java", "rawCode": "  protected Expression expressionList(AST node) {\n    List expressionList = new ArrayList();\n    for (AST child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n      expressionList.add(expression(child));\n    }\n    if (expressionList.size() == 1) {\n      return (Expression) expressionList.get(0);\n    } else {\n      ListExpression listExpression = new ListExpression(expressionList);\n      listExpression.setWrapped(true);\n      configureAST(listExpression, node);\n      return listExpression;\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5095, "initialization": ["List list = new Vector()", "List list = new Chm62edtTaxcodeDomain()"], "initializationStart": [302, 339], "initializationEnd": [314, 366], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "list!=null&&list.size()>index", "guardType": "IF {", "guardExpressionStart": 475, "guardExpressionEnd": 511, "guardBlockStart": 475, "guardBlockEnd": 1964, "focalAPI": "element = list.get(index)", "focalAPIStart": 602, "focalAPIEnd": 613, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getTaxonomicLevel()"], "useStart": [659], "useEnd": [680], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/eea/eea.eunis/tree/master/web/src/main/java/ro/finsiel/eunis/factsheet/species/FactsheetTaxcode.java", "rawCode": "  /**\n   * Fills the whatCanFind property, depending on what information is available for the given\n   * ID_TAXONOMY.\n   *\n   * @return true if this id givent at initialization exists in chm62edt_taxonomy.\n   */\n  private boolean setWhatCanFind() {\n    boolean idTaxonomyExist = false;\n    List list = new Vector();\n    try {\n      list = new Chm62edtTaxcodeDomain().findWhere(\"ID_TAXONOMY = '\" + id + \"'\");\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n    if (list != null && list.size() > 0) {\n      idTaxonomyExist = true;\n      Chm62edtTaxcodePersist t = (Chm62edtTaxcodePersist) list.get(0);\n      String level = Utilities.formatString(t.getTaxonomicLevel(), \"\");\n      if (level.equalsIgnoreCase(\"family\")) {\n        whatCanFind.addElement(\"family\");\n        whatCanFind.addElement(\"order_column\");\n        whatCanFind.addElement(\"subclass\");\n        whatCanFind.addElement(\"class\");\n        whatCanFind.addElement(\"phylum\");\n        whatCanFind.addElement(\"kingdom\");\n      }\n      if (level.equalsIgnoreCase(\"order_column\")) {\n        whatCanFind.addElement(\"order_column\");\n        whatCanFind.addElement(\"subclass\");\n        whatCanFind.addElement(\"class\");\n        whatCanFind.addElement(\"phylum\");\n        whatCanFind.addElement(\"kingdom\");\n      }\n      if (level.equalsIgnoreCase(\"subclass\")) {\n        whatCanFind.addElement(\"subclass\");\n        whatCanFind.addElement(\"class\");\n        whatCanFind.addElement(\"phylum\");\n        whatCanFind.addElement(\"kingdom\");\n      }\n      if (level.equalsIgnoreCase(\"class\")) {\n        whatCanFind.addElement(\"class\");\n        whatCanFind.addElement(\"phylum\");\n        whatCanFind.addElement(\"kingdom\");\n      }\n      if (level.equalsIgnoreCase(\"phylum\") || level.equalsIgnoreCase(\"division\")) {\n        whatCanFind.addElement(\"phylum\");\n        whatCanFind.addElement(\"kingdom\");\n      }\n      if (level.equalsIgnoreCase(\"kingdom\")) {\n        whatCanFind.addElement(\"kingdom\");\n      }\n    }\n    return idTaxonomyExist;\n  }\n"}, {"dataset": "listGet", "exampleID": 5096, "initialization": ["List list = ShippingBao.getEndShipping()"], "initializationStart": [89], "initializationEnd": [117], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 123, "guardExpressionEnd": 163, "guardBlockStart": 123, "guardBlockEnd": 1063, "focalAPI": "element = list.get(index)", "focalAPIStart": 210, "focalAPIEnd": 224, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["element.getOrderTitleID()", "element.getShippingID()", "element.getShippingDate()", "element.getCustomerID()", "element.getOrderTitleID()"], "useStart": [286, 487, 541, 621, 694], "useEnd": [307, 506, 562, 640, 715], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/seasarorg/s2buri/tree/master/teeda-buri-app/study-buri/src/main/java/example/org/escafe/buri/web/shipping/GetEndShippingPage.java", "rawCode": "  public String prerender() {\n    shippingSetItems = new ArrayList();\n    List results = shippingBao.getEndShipping();\n    for (int i = 0; i < results.size(); i++) {\n      ShippingSetDto dto = (ShippingSetDto) results.get(i);\n      OrderInfoDto orderInfoDto = orderInfoDao.getOrderInfo(dto.getOrderTitleID());\n      for (int j = 0; j < orderInfoDto.getOrderDetail().size(); j++) {\n        ShippingPageListDto listDto = new ShippingPageListDto();\n        //\n        listDto.setShippingId(dto.getShippingID());\n        listDto.setShippingDate(dto.getShippingDate());\n        listDto.setCustomerName(customerDao.getCustomer(dto.getCustomerID()).getCustomerName());\n        listDto.setOrderTitleId(dto.getOrderTitleID());\n        listDto.setOrderDate(orderInfoDto.getOrderDate());\n        //\n        OrderDetailDto orderDetailDto = (OrderDetailDto) orderInfoDto.getOrderDetail().get(j);\n        ItemDto itemDto = itemDao.getItem(orderDetailDto.getItemID());\n        listDto.setItemName(itemDto.getItemName());\n        this.shippingSetItems.add(listDto);\n      }\n    }\n    return null;\n  }\n"}, {"dataset": "listGet", "exampleID": 5097, "initialization": ["List list = Document.getRootElement()", "List list = getAdditionalNamespaces()"], "initializationStart": [3272, 4507], "initializationEnd": [3295, 4556], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 4564, "guardExpressionEnd": 4648, "guardBlockStart": 4564, "guardBlockEnd": 4981, "focalAPI": "element = list.get(index)", "focalAPIStart": 4690, "focalAPIEnd": 4722, "followUpCheck": "element.getURI().equals(ns.getURI())", "checkType": "IF", "followUpCheckExpressionStart": 4732, "followUpCheckExpressionEnd": 4772, "followUpCheckBlockStart": 4732, "followUpCheckBlockEnd": 4973, "use": ["element.getPrefix()"], "useStart": [4845], "useEnd": [4863], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/NCIP/cagrid-core/tree/master/caGrid/projects/introduce/src/java/Introduce/gov/nih/nci/cagrid/introduce/codegen/utils/SyncUtils.java", "rawCode": "  public static void addImportedOperationToService(\n      MethodType method, SpecificServiceInformation serviceInfo) throws Exception {\n\n    String fromDocFile =\n        serviceInfo.getBaseDirectory().getAbsolutePath()\n            + File.separator\n            + \"schema\"\n            + File.separator\n            + serviceInfo\n                .getIntroduceServiceProperties()\n                .getProperty(IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME)\n            + File.separator\n            + method.getImportInformation().getWsdlFile();\n    String toDocFile =\n        serviceInfo.getBaseDirectory().getAbsolutePath()\n            + File.separator\n            + \"schema\"\n            + File.separator\n            + serviceInfo\n                .getIntroduceServiceProperties()\n                .getProperty(IntroduceConstants.INTRODUCE_SKELETON_SERVICE_NAME)\n            + File.separator\n            + serviceInfo.getService().getName()\n            + \".wsdl\";\n    if (!(new File(fromDocFile).exists())) {\n      // try From Globus Location\n      fromDocFile =\n          CommonTools.getGlobusLocation()\n              + File.separator\n              + \"share\"\n              + File.separator\n              + \"schema\"\n              + File.separator\n              + \"wsrf\"\n              + File.separator\n              + method.getImportInformation().getWsdlFile();\n      logger.info(\n          \"Imported operation's WSDL not found in service directory, using WSDL from globus...\");\n    }\n    if (!(new File(fromDocFile).exists())) {\n      throw new Exception(\n          \"Cannot locate WSDL file: \"\n              + fromDocFile\n              + \" to import from for Method: \"\n              + method.getName());\n    }\n\n    // parse the wsdl and get the operation text.....\n    Document fromWsdl = null;\n    Document toWsdl = null;\n    try {\n      // read the wsdl we're importing an operation FROM\n      fromWsdl = XMLUtilities.fileNameToDocument(fromDocFile);\n      // read the service's wsdl we're writing TO\n      toWsdl = XMLUtilities.fileNameToDocument(toDocFile);\n    } catch (IOException ex) {\n      logger.error(ex);\n      throw ex;\n    }\n\n    // get the port type we're importing from\n    Element importPortType =\n        getPortTypeElement(\n            fromWsdl.getRootElement(), method.getImportInformation().getPortTypeName());\n    if (importPortType == null) {\n      String message =\n          \"Unable to locate port type in imported WSDL (\"\n              + method.getImportInformation().getPortTypeName()\n              + \")\";\n      logger.error(message);\n      throw new SynchronizationException(message);\n    }\n    // get the operation from the import's port type\n    Element importOperation = getOperationElement(importPortType, method.getName());\n    if (importOperation == null) {\n      String message =\n          \"Unable to locate operation in imported port type (\" + method.getName() + \")\";\n      logger.error(message);\n      throw new SynchronizationException(message);\n    }\n    // detach the operation element so we can add it to our own WSDL later\n    Element copyOperation = (Element) importOperation.detach();\n    // find the port type within the service we're importing a method INTO\n    Element servicePortType =\n        getPortTypeElement(\n            toWsdl.getRootElement(), serviceInfo.getService().getName() + \"PortType\");\n    if (servicePortType == null) {\n      String message =\n          \"Unable to locate port type in service's WSDL (\"\n              + serviceInfo.getService().getName()\n              + \"PortType)\";\n      logger.error(message);\n      throw new SynchronizationException(message);\n    }\n    // fix up the namespaceing of the imported operation\n    List copyElemChildren = copyOperation.getChildren();\n    Iterator childIter = copyElemChildren.iterator();\n    while (childIter.hasNext()) {\n      Element copyChild = (Element) childIter.next();\n      String messageString = copyChild.getAttributeValue(\"message\");\n      logger.debug(\"Looking for namespace prefix for message \" + messageString);\n      Namespace ns = null;\n      String prefix = \"\";\n      String message = \"\";\n      if (messageString.indexOf(\":\") >= 0) {\n        prefix = messageString.substring(0, messageString.indexOf(\":\"));\n        message = messageString.substring(messageString.indexOf(\":\") + 1);\n        ns = fromWsdl.getRootElement().getNamespace(prefix);\n      } else {\n        message = messageString;\n        ns = fromWsdl.getRootElement().getNamespace();\n      }\n      List toNamespaces = toWsdl.getRootElement().getAdditionalNamespaces();\n      for (int namespaceIndex = 0; namespaceIndex < toNamespaces.size(); namespaceIndex++) {\n        Namespace tempns = (Namespace) toNamespaces.get(namespaceIndex);\n        if (tempns.getURI().equals(ns.getURI())) {\n          logger.debug(\"Setting message \" + message + \" nsPrefix: \" + tempns.getPrefix());\n          copyChild.setAttribute(\"message\", tempns.getPrefix() + \":\" + message);\n          break;\n        }\n      }\n    }\n    // add the operation to our service's port type\n    servicePortType.addContent(copyOperation);\n\n    // write out the modified service WSDL\n    try {\n      FileWriter fw = new FileWriter(toDocFile);\n      fw.write(XMLUtilities.formatXML(XMLUtilities.documentToString(toWsdl)));\n      fw.close();\n    } catch (IOException ex) {\n      String message = \"Error writing modified service WSDL: \" + ex.getMessage();\n      logger.error(message, ex);\n      throw new SynchronizationException(message, ex);\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5098, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": [], "configurationStart": [], "configurationEnd": [], "guardCondition": "index<list.size()", "guardType": "LOOP {", "guardExpressionStart": 82, "guardExpressionEnd": 135, "guardBlockStart": 82, "guardBlockEnd": 288, "focalAPI": "element = list.get(index)", "focalAPIStart": 174, "focalAPIEnd": 201, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": [], "useStart": [], "useEnd": [], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/kingargyle/exist-1.4.x/tree/master/src/org/exist/storage/lock/MultiReadReentrantLock.java", "rawCode": "  private String listReadLocks() {\n    StringBuffer buf = new StringBuffer();\n    for (int i = 0; i < outstandingReadLocks.size(); i++) {\n      LockOwner owner = (LockOwner) outstandingReadLocks.get(i);\n      buf.append(' ');\n      buf.append(((Thread) owner.getOwner()).getName());\n    }\n    return buf.toString();\n  }\n"}, {"dataset": "listGet", "exampleID": 5099, "initialization": ["List list = new ArrayList()"], "initializationStart": [863], "initializationEnd": [880], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.clear()", "list.add(String)", "list.add(String)", "list.add(String)", "list.size()"], "configurationStart": [1918, 2383, 2518, 2654, 2813], "configurationEnd": [1931, 2398, 2533, 2669, 2825], "guardCondition": "empty", "guardType": "empty", "guardExpressionStart": -1, "guardExpressionEnd": -1, "guardBlockStart": -1, "guardBlockEnd": -1, "focalAPI": "element = list.get(index)", "focalAPIStart": 2885, "focalAPIEnd": 2909, "followUpCheck": "element.charAt(end) == '\\r'", "checkType": "IF", "followUpCheckExpressionStart": 3077, "followUpCheckExpressionEnd": 3117, "followUpCheckBlockStart": 3077, "followUpCheckBlockEnd": 3124, "use": ["element.length()", "element.charAt(int)", "element.substring(int,*)", "list.set(int,String)", "createHunk(FilePatch2,int[],int[],list,boolean,boolean,boolean)"], "useStart": [2937, 2982, 3232, 3276, 3948], "useEnd": [2950, 2998, 3258, 3306, 4062], "hasFinally": 1, "cleanUpCall": ["createHunk(FilePatch2,int[],int[],List,boolean,boolean,boolean)"], "finallyExpressionStart": 3902, "finallyExpressionEnd": 3910, "finallyBlockStart": 3902, "finallyBlockEnd": 4069, "cleanUpCallStart": [3948], "cleanUpCallEnd": [4062], "url": "https://github.com/eclipse/eclipse.platform.team/tree/master/bundles/org.eclipse.compare.core/src/org/eclipse/compare/internal/core/patch/PatchReader.java", "rawCode": "  protected String readUnifiedDiff(\n      List<FilePatch2> diffs, LineReader reader, String line, String args, String fileName)\n      throws IOException {\n\n    String[] oldArgs = split(line.substring(4));\n\n    // read info about new file\n    line = reader.readLine();\n    if (line == null || !line.startsWith(\"+++ \")) // $NON-NLS-1$\n    return line;\n\n    String[] newArgs = split(line.substring(4));\n\n    FilePatch2 diff =\n        createFileDiff(\n            extractPath(oldArgs, 0, fileName),\n            extractDate(oldArgs, 1),\n            extractPath(newArgs, 0, fileName),\n            extractDate(newArgs, 1));\n    diffs.add(diff);\n\n    int[] oldRange = new int[2];\n    int[] newRange = new int[2];\n    int remainingOld = -1; // remaining old lines for current hunk\n    int remainingNew = -1; // remaining new lines for current hunk\n    List<String> lines = new ArrayList<>();\n\n    boolean encounteredPlus = false;\n    boolean encounteredMinus = false;\n    boolean encounteredSpace = false;\n\n    try {\n      // read lines of hunk\n      while (true) {\n\n        line = reader.readLine();\n        if (line == null) return null;\n\n        if (reader.lineContentLength(line) == 0) {\n          // System.out.println(\"Warning: found empty line in hunk; ignored\");\n          // lines.add(' ' + line);\n          continue;\n        }\n\n        char c = line.charAt(0);\n        if (remainingOld == 0 && remainingNew == 0 && c != '@' && c != '\\\\') {\n          return line;\n        }\n\n        switch (c) {\n          case '@':\n            if (line.startsWith(\"@@ \")) { // $NON-NLS-1$\n              // flush old hunk\n              if (lines.size() > 0) {\n                Hunk.createHunk(\n                    diff,\n                    oldRange,\n                    newRange,\n                    lines,\n                    encounteredPlus,\n                    encounteredMinus,\n                    encounteredSpace);\n                lines.clear();\n              }\n\n              // format: @@ -oldStart,oldLength +newStart,newLength @@\n              extractPair(line, '-', oldRange);\n              extractPair(line, '+', newRange);\n              remainingOld = oldRange[1];\n              remainingNew = newRange[1];\n              continue;\n            }\n            break;\n          case ' ':\n            encounteredSpace = true;\n            remainingOld--;\n            remainingNew--;\n            lines.add(line);\n            continue;\n          case '+':\n            encounteredPlus = true;\n            remainingNew--;\n            lines.add(line);\n            continue;\n          case '-':\n            encounteredMinus = true;\n            remainingOld--;\n            lines.add(line);\n            continue;\n          case '\\\\':\n            if (line.indexOf(\"newline at end\") > 0) { // $NON-NLS-1$\n              int lastIndex = lines.size();\n              if (lastIndex > 0) {\n                line = lines.get(lastIndex - 1);\n                int end = line.length() - 1;\n                char lc = line.charAt(end);\n                if (lc == '\\n') {\n                  end--;\n                  if (end > 0 && line.charAt(end) == '\\r') end--;\n                } else if (lc == '\\r') {\n                  end--;\n                }\n                line = line.substring(0, end + 1);\n                lines.set(lastIndex - 1, line);\n              }\n              continue;\n            }\n            break;\n          case '#':\n            break;\n          case 'I':\n            if (line.indexOf(\"Index:\") == 0) // $NON-NLS-1$\n            break;\n            // $FALL-THROUGH$\n          case 'd':\n            if (line.indexOf(\"diff \") == 0) // $NON-NLS-1$\n            break;\n            // $FALL-THROUGH$\n          case 'B':\n            if (line.indexOf(\"Binary files differ\") == 0) // $NON-NLS-1$\n            break;\n            // $FALL-THROUGH$\n          default:\n            break;\n        }\n        return line;\n      }\n    } finally {\n      if (lines.size() > 0)\n        Hunk.createHunk(\n            diff, oldRange, newRange, lines, encounteredPlus, encounteredMinus, encounteredSpace);\n    }\n  }\n"}, {"dataset": "listGet", "exampleID": 5100, "initialization": [], "initializationStart": [], "initializationEnd": [], "hasTryCatch": 0, "exceptionType": "empty", "exceptionHandlingCall": [], "tryExpressionStart": -1, "tryExpressionEnd": -1, "tryBlockStart": -1, "tryBlockEnd": -1, "catchExpressionStart": -1, "catchExpressionEnd": -1, "catchBlockStart": -1, "catchBlockEnd": -1, "exceptionHandlingCallStart": [], "exceptionHandlingCallEnd": [], "configuration": ["list.size()"], "configurationStart": [2539], "configurationEnd": [2564], "guardCondition": "index<subCategoryCount", "guardType": "LOOP {", "guardExpressionStart": 2739, "guardExpressionEnd": 2781, "guardBlockStart": 2739, "guardBlockEnd": 3227, "focalAPI": "element = list.get(index)", "focalAPIStart": 3066, "focalAPIEnd": 3091, "followUpCheck": "empty", "checkType": "empty", "followUpCheckExpressionStart": -1, "followUpCheckExpressionEnd": -1, "followUpCheckBlockStart": -1, "followUpCheckBlockEnd": -1, "use": ["drawRotatedString(element,Graphics2D,float,float,*,double,*)"], "useStart": [3112], "useEnd": [3218], "hasFinally": 0, "cleanUpCall": [], "finallyExpressionStart": -1, "finallyExpressionEnd": -1, "finallyBlockStart": -1, "finallyBlockEnd": -1, "cleanUpCallStart": [], "cleanUpCallEnd": [], "url": "https://github.com/fsteen/monopoly-for-the-gods/tree/master/jfreechart-1.0.14/source/org/jfree/chart/axis/SubCategoryAxis.java", "rawCode": "  /**\n   * Draws the category labels and returns the updated axis state.\n   *\n   * @param g2 the graphics device (<code>null</code> not permitted).\n   * @param plotArea the plot area (<code>null</code> not permitted).\n   * @param dataArea the area inside the axes (<code>null</code> not permitted).\n   * @param edge the axis location (<code>null</code> not permitted).\n   * @param state the axis state (<code>null</code> not permitted).\n   * @param plotState collects information about the plot (<code>null</code> permitted).\n   * @return The updated axis state (never <code>null</code>).\n   */\n  protected AxisState drawSubCategoryLabels(\n      Graphics2D g2,\n      Rectangle2D plotArea,\n      Rectangle2D dataArea,\n      RectangleEdge edge,\n      AxisState state,\n      PlotRenderingInfo plotState) {\n\n    if (state == null) {\n      throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n\n    g2.setFont(this.subLabelFont);\n    g2.setPaint(this.subLabelPaint);\n    CategoryPlot plot = (CategoryPlot) getPlot();\n    int categoryCount = 0;\n    CategoryDataset dataset = plot.getDataset();\n    if (dataset != null) {\n      categoryCount = dataset.getColumnCount();\n    }\n\n    double maxdim = getMaxDim(g2, edge);\n    for (int categoryIndex = 0; categoryIndex < categoryCount; categoryIndex++) {\n\n      double x0 = 0.0;\n      double x1 = 0.0;\n      double y0 = 0.0;\n      double y1 = 0.0;\n      if (edge == RectangleEdge.TOP) {\n        x0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        x1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        y1 = state.getCursor();\n        y0 = y1 - maxdim;\n      } else if (edge == RectangleEdge.BOTTOM) {\n        x0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        x1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        y0 = state.getCursor();\n        y1 = y0 + maxdim;\n      } else if (edge == RectangleEdge.LEFT) {\n        y0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        y1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        x1 = state.getCursor();\n        x0 = x1 - maxdim;\n      } else if (edge == RectangleEdge.RIGHT) {\n        y0 = getCategoryStart(categoryIndex, categoryCount, dataArea, edge);\n        y1 = getCategoryEnd(categoryIndex, categoryCount, dataArea, edge);\n        x0 = state.getCursor();\n        x1 = x0 + maxdim;\n      }\n      Rectangle2D area = new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));\n      int subCategoryCount = this.subCategories.size();\n      float width = (float) ((x1 - x0) / subCategoryCount);\n      float height = (float) ((y1 - y0) / subCategoryCount);\n      float xx = 0.0f;\n      float yy = 0.0f;\n      for (int i = 0; i < subCategoryCount; i++) {\n        if (RectangleEdge.isTopOrBottom(edge)) {\n          xx = (float) (x0 + (i + 0.5) * width);\n          yy = (float) area.getCenterY();\n        } else {\n          xx = (float) area.getCenterX();\n          yy = (float) (y0 + (i + 0.5) * height);\n        }\n        String label = this.subCategories.get(i).toString();\n        TextUtilities.drawRotatedString(\n            label, g2, xx, yy, TextAnchor.CENTER, 0.0, TextAnchor.CENTER);\n      }\n    }\n\n    if (edge.equals(RectangleEdge.TOP)) {\n      double h = maxdim;\n      state.cursorUp(h);\n    } else if (edge.equals(RectangleEdge.BOTTOM)) {\n      double h = maxdim;\n      state.cursorDown(h);\n    } else if (edge == RectangleEdge.LEFT) {\n      double w = maxdim;\n      state.cursorLeft(w);\n    } else if (edge == RectangleEdge.RIGHT) {\n      double w = maxdim;\n      state.cursorRight(w);\n    }\n    return state;\n  }\n"}]